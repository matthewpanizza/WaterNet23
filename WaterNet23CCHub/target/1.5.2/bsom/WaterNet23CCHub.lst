
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/1.5.2/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007014  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db030  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003d5cc  000db034  0001d5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000116c  2003d684  2003d684  0002d684  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db0ec  000db0ec  0002b0ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db114  000db114  0002b114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001926af  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001eb00  00000000  00000000  001bd7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002bfde  00000000  00000000  001dc2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003190  00000000  00000000  002082a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005f10  00000000  00000000  0020b435  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004ce54  00000000  00000000  00211345  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000535b4  00000000  00000000  0025e199  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114284  00000000  00000000  002b174d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f47c  00000000  00000000  003c59d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fcde 	bl	d99ee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fcfe 	bl	d9a3a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d5cc 	.word	0x2003d5cc
   d4048:	000db034 	.word	0x000db034
   d404c:	2003d684 	.word	0x2003d684
   d4050:	2003d684 	.word	0x2003d684
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f005 f979 	bl	d9350 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000db024 	.word	0x000db024
   d4080:	000dafac 	.word	0x000dafac

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8d4 	b.w	d4230 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe85 	bl	d4d98 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f005 b91f 	b.w	d92d4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 be4b 	b.w	d6d30 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 be51 	b.w	d6d40 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 be4f 	b.w	d6d40 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b2:	7c03      	ldrb	r3, [r0, #16]
   d40b4:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40b8:	4602      	mov	r2, r0
   d40ba:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40be:	b12b      	cbz	r3, d40cc <_ZN4File9availableEv+0x1a>
   d40c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c2:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c4:	1a18      	subs	r0, r3, r0
   d40c6:	bf48      	it	mi
   d40c8:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40cc:	4770      	bx	lr

000d40ce <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40ce:	4770      	bx	lr

000d40d0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d2:	4602      	mov	r2, r0
   d40d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40d6:	7913      	ldrb	r3, [r2, #4]
   d40d8:	6895      	ldr	r5, [r2, #8]
   d40da:	b133      	cbz	r3, d40ea <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40dc:	b93d      	cbnz	r5, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40de:	490c      	ldr	r1, [pc, #48]	; (d4110 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e0:	b004      	add	sp, #16
   d40e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40e6:	f004 bcc9 	b.w	d8a7c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ea:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40ec:	e000      	b.n	d40f0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f0:	7b16      	ldrb	r6, [r2, #12]
   d40f2:	4c0a      	ldr	r4, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f4:	490a      	ldr	r1, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40f6:	7b52      	ldrb	r2, [r2, #13]
   d40f8:	9202      	str	r2, [sp, #8]
   d40fa:	2e01      	cmp	r6, #1
   d40fc:	bf08      	it	eq
   d40fe:	4621      	moveq	r1, r4
   d4100:	9101      	str	r1, [sp, #4]
   d4102:	9500      	str	r5, [sp, #0]
   d4104:	4a07      	ldr	r2, [pc, #28]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4106:	2100      	movs	r1, #0
   d4108:	f004 fcf5 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
  }
   d410c:	b004      	add	sp, #16
   d410e:	bd70      	pop	{r4, r5, r6, pc}
   d4110:	000da405 	.word	0x000da405
   d4114:	000dac78 	.word	0x000dac78
   d4118:	000da3f4 	.word	0x000da3f4
   d411c:	000da3fd 	.word	0x000da3fd
   d4120:	000da401 	.word	0x000da401
   d4124:	000da41b 	.word	0x000da41b

000d4128 <_ZN4FileD0Ev>:
   d4128:	b510      	push	{r4, lr}
   d412a:	2134      	movs	r1, #52	; 0x34
   d412c:	4604      	mov	r4, r0
   d412e:	f005 f9e0 	bl	d94f2 <_ZdlPvj>
   d4132:	4620      	mov	r0, r4
   d4134:	bd10      	pop	{r4, pc}

000d4136 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4136:	3010      	adds	r0, #16
   d4138:	f001 b96e 	b.w	d5418 <_ZN7FatFile4syncEv>

000d413c <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d413c:	3010      	adds	r0, #16
   d413e:	f001 b883 	b.w	d5248 <_ZN7FatFile4peekEv>

000d4142 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4142:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4144:	2201      	movs	r2, #1
   d4146:	f10d 0107 	add.w	r1, sp, #7
   d414a:	3010      	adds	r0, #16
   d414c:	f000 ffc9 	bl	d50e2 <_ZN7FatFile4readEPvj>
   d4150:	2801      	cmp	r0, #1
   d4152:	bf0c      	ite	eq
   d4154:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4158:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d415c:	b003      	add	sp, #12
   d415e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4162 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4162:	3010      	adds	r0, #16
   d4164:	f001 b9f8 	b.w	d5558 <_ZN7FatFile5writeEPKvj>

000d4168 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4168:	b507      	push	{r0, r1, r2, lr}
   d416a:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d416c:	2201      	movs	r2, #1
   d416e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4172:	3010      	adds	r0, #16
   d4174:	4619      	mov	r1, r3
   d4176:	f001 f9ef 	bl	d5558 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d417a:	b003      	add	sp, #12
   d417c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4180 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4180:	b510      	push	{r4, lr}
   d4182:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4184:	6800      	ldr	r0, [r0, #0]
   d4186:	b108      	cbz	r0, d418c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4188:	f002 fdda 	bl	d6d40 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}

000d4190 <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d4194:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4196:	b108      	cbz	r0, d419c <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4198:	f7ff ff7f 	bl	d409a <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d419c:	4620      	mov	r0, r4
   d419e:	bd10      	pop	{r4, pc}

000d41a0 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d41a0:	4613      	mov	r3, r2
   d41a2:	460a      	mov	r2, r1
   d41a4:	4901      	ldr	r1, [pc, #4]	; (d41ac <_ZN7FatFile4openEPKci+0xc>)
   d41a6:	6809      	ldr	r1, [r1, #0]
   d41a8:	f001 b973 	b.w	d5492 <_ZN7FatFile4openEPS_PKci>
   d41ac:	2003e338 	.word	0x2003e338

000d41b0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41b0:	b530      	push	{r4, r5, lr}
   d41b2:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41b4:	4b1c      	ldr	r3, [pc, #112]	; (d4228 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d41b6:	9300      	str	r3, [sp, #0]
   d41b8:	7913      	ldrb	r3, [r2, #4]
   d41ba:	f88d 3004 	strb.w	r3, [sp, #4]
   d41be:	6893      	ldr	r3, [r2, #8]
   d41c0:	9302      	str	r3, [sp, #8]
   d41c2:	7b13      	ldrb	r3, [r2, #12]
   d41c4:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41c8:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41cc:	7b53      	ldrb	r3, [r2, #13]
   d41ce:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41d2:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41d4:	460a      	mov	r2, r1
   d41d6:	466b      	mov	r3, sp
   d41d8:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41dc:	4628      	mov	r0, r5
   d41de:	f002 f887 	bl	d62f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d41e2:	b1f0      	cbz	r0, d4222 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41e4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41e6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d41ea:	4628      	mov	r0, r5
   d41ec:	f001 f94a 	bl	d5484 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41f0:	2101      	movs	r1, #1
   d41f2:	4620      	mov	r0, r4
   d41f4:	f001 ff21 	bl	d603a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41f8:	4601      	mov	r1, r0
   d41fa:	b168      	cbz	r0, d4218 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d41fc:	4621      	mov	r1, r4
   d41fe:	4628      	mov	r0, r5
   d4200:	f000 ff57 	bl	d50b2 <_ZN7FatFile8openRootEP9FatVolume>
   d4204:	b168      	cbz	r0, d4222 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4206:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d420a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d420e:	bf16      	itet	ne
   d4210:	4b06      	ldrne	r3, [pc, #24]	; (d422c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4212:	4618      	moveq	r0, r3
   d4214:	601d      	strne	r5, [r3, #0]
   d4216:	e005      	b.n	d4224 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4218:	4620      	mov	r0, r4
   d421a:	f001 ff0e 	bl	d603a <_ZN9FatVolume4initEh>
   d421e:	2800      	cmp	r0, #0
   d4220:	d1ec      	bne.n	d41fc <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4222:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4224:	b005      	add	sp, #20
   d4226:	bd30      	pop	{r4, r5, pc}
   d4228:	000da3c8 	.word	0x000da3c8
   d422c:	2003e338 	.word	0x2003e338

000d4230 <setup>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup() {
   d4230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4234:	b08f      	sub	sp, #60	; 0x3c

    Serial.begin(115200);
   d4236:	f005 f809 	bl	d924c <_Z16_fetch_usbserialv>
   d423a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d423e:	f004 fff9 	bl	d9234 <_ZN9USBSerial5beginEl>
    pinMode(A0, INPUT_PULLDOWN);
   d4242:	2103      	movs	r1, #3
   d4244:	2013      	movs	r0, #19
   d4246:	f005 f8e5 	bl	d9414 <pinMode>
    pinMode(D7, OUTPUT);
   d424a:	2101      	movs	r1, #1
   d424c:	2007      	movs	r0, #7
   d424e:	f005 f8e1 	bl	d9414 <pinMode>
	BLE.on();
   d4252:	f003 fa31 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4256:	f003 fa75 	bl	d7744 <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d425a:	4a2d      	ldr	r2, [pc, #180]	; (d4310 <setup+0xe0>)
   d425c:	492d      	ldr	r1, [pc, #180]	; (d4314 <setup+0xe4>)
    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;

    logMessages = true;
   d425e:	4d2e      	ldr	r5, [pc, #184]	; (d4318 <setup+0xe8>)

    Serial.begin(115200);
    pinMode(A0, INPUT_PULLDOWN);
    pinMode(D7, OUTPUT);
	BLE.on();
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d4260:	4610      	mov	r0, r2
   d4262:	f003 f95b 	bl	d751c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   d4266:	4a2d      	ldr	r2, [pc, #180]	; (d431c <setup+0xec>)
   d4268:	492d      	ldr	r1, [pc, #180]	; (d4320 <setup+0xf0>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d426a:	2400      	movs	r4, #0
   d426c:	4610      	mov	r0, r2
   d426e:	f003 f955 	bl	d751c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4272:	4622      	mov	r2, r4
   d4274:	492b      	ldr	r1, [pc, #172]	; (d4324 <setup+0xf4>)
   d4276:	9401      	str	r4, [sp, #4]
   d4278:	9400      	str	r4, [sp, #0]
   d427a:	2301      	movs	r3, #1
   d427c:	482a      	ldr	r0, [pc, #168]	; (d4328 <setup+0xf8>)
   d427e:	f002 fcef 	bl	d6c60 <spark_subscribe>

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
   d4282:	4b2a      	ldr	r3, [pc, #168]	; (d432c <setup+0xfc>)
   d4284:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   d4286:	4b2a      	ldr	r3, [pc, #168]	; (d4330 <setup+0x100>)

    logMessages = true;
   d4288:	2601      	movs	r6, #1
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;
   d428a:	701c      	strb	r4, [r3, #0]

    logMessages = true;
   d428c:	702e      	strb	r6, [r5, #0]

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d428e:	f004 fedd 	bl	d904c <_ZN9TimeClass5monthEv>
   d4292:	4607      	mov	r7, r0
   d4294:	f004 fed0 	bl	d9038 <_ZN9TimeClass3dayEv>
   d4298:	4680      	mov	r8, r0
   d429a:	f004 fedf 	bl	d905c <_ZN9TimeClass4yearEv>
   d429e:	4681      	mov	r9, r0
   d42a0:	f004 feac 	bl	d8ffc <_ZN9TimeClass4hourEv>
   d42a4:	4682      	mov	sl, r0
   d42a6:	f004 feb3 	bl	d9010 <_ZN9TimeClass6minuteEv>
   d42aa:	4683      	mov	fp, r0
   d42ac:	f004 feba 	bl	d9024 <_ZN9TimeClass6secondEv>
   d42b0:	463b      	mov	r3, r7
   d42b2:	4a20      	ldr	r2, [pc, #128]	; (d4334 <setup+0x104>)
   d42b4:	9004      	str	r0, [sp, #16]
   d42b6:	2110      	movs	r1, #16
   d42b8:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d42bc:	a806      	add	r0, sp, #24
   d42be:	f002 fd67 	bl	d6d90 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   d42c2:	491d      	ldr	r1, [pc, #116]	; (d4338 <setup+0x108>)
   d42c4:	481d      	ldr	r0, [pc, #116]	; (d433c <setup+0x10c>)
   d42c6:	f005 fc02 	bl	d9ace <strcpy>
    strcat(filenameMessages,timestamp);
   d42ca:	a906      	add	r1, sp, #24
   d42cc:	481b      	ldr	r0, [pc, #108]	; (d433c <setup+0x10c>)
   d42ce:	f005 fbe5 	bl	d9a9c <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d42d2:	491b      	ldr	r1, [pc, #108]	; (d4340 <setup+0x110>)
   d42d4:	4819      	ldr	r0, [pc, #100]	; (d433c <setup+0x10c>)
   d42d6:	f005 fbe1 	bl	d9a9c <strcat>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d42da:	4b1a      	ldr	r3, [pc, #104]	; (d4344 <setup+0x114>)
   d42dc:	930a      	str	r3, [sp, #40]	; 0x28
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
    BLE.addCharacteristic(rxCharacteristic);
    advData.appendServiceUUID(RemoteService); // Add the app service
    advData.appendLocalName("RemoteTest");           //Local advertising name
    BLE.advertise(&advData);                    //Start advertising the characteristics*/
    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d42de:	aa0a      	add	r2, sp, #40	; 0x28
   d42e0:	4b19      	ldr	r3, [pc, #100]	; (d4348 <setup+0x118>)
   d42e2:	481a      	ldr	r0, [pc, #104]	; (d434c <setup+0x11c>)
   d42e4:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   d42e8:	2108      	movs	r1, #8
   d42ea:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
   d42ee:	930c      	str	r3, [sp, #48]	; 0x30
   d42f0:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
   d42f4:	f7ff ff5c 	bl	d41b0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d42f8:	4604      	mov	r4, r0
   d42fa:	b928      	cbnz	r0, d4308 <setup+0xd8>
        Serial.println("Error: could not connect to SD card!");
   d42fc:	f004 ffa6 	bl	d924c <_Z16_fetch_usbserialv>
   d4300:	4913      	ldr	r1, [pc, #76]	; (d4350 <setup+0x120>)
   d4302:	f004 fbce 	bl	d8aa2 <_ZN5Print7printlnEPKc>
        logMessages = false;
   d4306:	702c      	strb	r4, [r5, #0]
    }
}
   d4308:	b00f      	add	sp, #60	; 0x3c
   d430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d430e:	bf00      	nop
   d4310:	2003d6f4 	.word	0x2003d6f4
   d4314:	000d499d 	.word	0x000d499d
   d4318:	2003d6e0 	.word	0x2003d6e0
   d431c:	2003e330 	.word	0x2003e330
   d4320:	000d4369 	.word	0x000d4369
   d4324:	000d494d 	.word	0x000d494d
   d4328:	000da439 	.word	0x000da439
   d432c:	2003d7c4 	.word	0x2003d7c4
   d4330:	2003d6c8 	.word	0x2003d6c8
   d4334:	000da441 	.word	0x000da441
   d4338:	000da45a 	.word	0x000da45a
   d433c:	2003d6fc 	.word	0x2003d6fc
   d4340:	000da463 	.word	0x000da463
   d4344:	000da3c8 	.word	0x000da3c8
   d4348:	003d0900 	.word	0x003d0900
   d434c:	2003dea8 	.word	0x2003dea8
   d4350:	000da46c 	.word	0x000da46c

000d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4354:	4613      	mov	r3, r2
   d4356:	460a      	mov	r2, r1
   d4358:	2101      	movs	r1, #1
   d435a:	f004 bbcc 	b.w	d8af6 <_ZN5Print11printf_implEbPKcz>

000d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
   d435e:	4613      	mov	r3, r2
   d4360:	460a      	mov	r2, r1
   d4362:	2101      	movs	r1, #1
   d4364:	f004 bbc7 	b.w	d8af6 <_ZN5Print11printf_implEbPKcz>

000d4368 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4368:	b5f0      	push	{r4, r5, r6, r7, lr}
   d436a:	b095      	sub	sp, #84	; 0x54
   d436c:	4604      	mov	r4, r0
   d436e:	af00      	add	r7, sp, #0
   d4370:	460e      	mov	r6, r1
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   d4372:	2226      	movs	r2, #38	; 0x26
   d4374:	2100      	movs	r1, #0
   d4376:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d437a:	f005 fb5e 	bl	d9a3a <memset>
    memcpy(fileCommand,data,8);
   d437e:	6820      	ldr	r0, [r4, #0]
   d4380:	6861      	ldr	r1, [r4, #4]
   d4382:	f107 0328 	add.w	r3, r7, #40	; 0x28
   d4386:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   d4388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d438c:	2b66      	cmp	r3, #102	; 0x66
        }
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
   d438e:	466d      	mov	r5, sp

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
    memcpy(fileCommand,data,8);
    if(fileCommand[0] == 'f'){
   d4390:	d16a      	bne.n	d4468 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
        //Serial.printlnf("Found an 'f' command %s",fileCommand);
        if(!strcmp(fileCommand,"filename")){
   d4392:	4941      	ldr	r1, [pc, #260]	; (d4498 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   d4394:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4398:	f005 fb8f 	bl	d9aba <strcmp>
   d439c:	2800      	cmp	r0, #0
   d439e:	d141      	bne.n	d4424 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   d43a0:	483e      	ldr	r0, [pc, #248]	; (d449c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d43a2:	7c03      	ldrb	r3, [r0, #16]
   d43a4:	b113      	cbz	r3, d43ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   d43a6:	3010      	adds	r0, #16
   d43a8:	f001 f86c 	bl	d5484 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   d43ac:	4623      	mov	r3, r4
   d43ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
   d43b2:	f104 0620 	add.w	r6, r4, #32
   d43b6:	6818      	ldr	r0, [r3, #0]
   d43b8:	6859      	ldr	r1, [r3, #4]
   d43ba:	4614      	mov	r4, r2
   d43bc:	c403      	stmia	r4!, {r0, r1}
   d43be:	3308      	adds	r3, #8
   d43c0:	42b3      	cmp	r3, r6
   d43c2:	4622      	mov	r2, r4
   d43c4:	d1f7      	bne.n	d43b6 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   d43c6:	6818      	ldr	r0, [r3, #0]
   d43c8:	6020      	str	r0, [r4, #0]
   d43ca:	889b      	ldrh	r3, [r3, #4]
   d43cc:	80a3      	strh	r3, [r4, #4]
            memset(offloadFilename,0,MAX_FILENAME_LEN);
   d43ce:	221e      	movs	r2, #30
   d43d0:	2100      	movs	r1, #0
   d43d2:	4833      	ldr	r0, [pc, #204]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d43d4:	f005 fb31 	bl	d9a3a <memset>
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   d43d8:	221e      	movs	r2, #30
   d43da:	f107 0130 	add.w	r1, r7, #48	; 0x30
   d43de:	4830      	ldr	r0, [pc, #192]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d43e0:	f005 fb9a 	bl	d9b18 <strncpy>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43e4:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d43e6:	4a2e      	ldr	r2, [pc, #184]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d43e8:	492e      	ldr	r1, [pc, #184]	; (d44a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43ea:	713b      	strb	r3, [r7, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d43ec:	1d38      	adds	r0, r7, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43ee:	717b      	strb	r3, [r7, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d43f0:	f001 f84f 	bl	d5492 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   d43f4:	b148      	cbz	r0, d440a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   d43f6:	f004 ff29 	bl	d924c <_Z16_fetch_usbserialv>
   d43fa:	492b      	ldr	r1, [pc, #172]	; (d44a8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   d43fc:	4a28      	ldr	r2, [pc, #160]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d43fe:	f7ff ffae 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d4402:	4927      	ldr	r1, [pc, #156]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4404:	4827      	ldr	r0, [pc, #156]	; (d44a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   d4406:	f001 f893 	bl	d5530 <_ZN7FatFile6removeEPS_PKc>
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   d440a:	f004 ff1f 	bl	d924c <_Z16_fetch_usbserialv>
   d440e:	4a24      	ldr	r2, [pc, #144]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4410:	4926      	ldr	r1, [pc, #152]	; (d44ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   d4412:	f7ff ffa4 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   d4416:	f244 2202 	movw	r2, #16898	; 0x4202
   d441a:	4921      	ldr	r1, [pc, #132]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d441c:	4824      	ldr	r0, [pc, #144]	; (d44b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d441e:	f7ff febf 	bl	d41a0 <_ZN7FatFile4openEPKci>
            return;
   d4422:	e034      	b.n	d448e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
        }
        else if(!strcmp(fileCommand,"filecomp")){
   d4424:	4923      	ldr	r1, [pc, #140]	; (d44b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   d4426:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d442a:	f005 fb46 	bl	d9aba <strcmp>
   d442e:	b960      	cbnz	r0, d444a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe2>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   d4430:	f004 ff0c 	bl	d924c <_Z16_fetch_usbserialv>
   d4434:	4a1a      	ldr	r2, [pc, #104]	; (d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4436:	4920      	ldr	r1, [pc, #128]	; (d44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   d4438:	f7ff ff91 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d443c:	4b17      	ldr	r3, [pc, #92]	; (d449c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d443e:	7c1b      	ldrb	r3, [r3, #16]
   d4440:	b32b      	cbz	r3, d448e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
   d4442:	481b      	ldr	r0, [pc, #108]	; (d44b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d4444:	f001 f81e 	bl	d5484 <_ZN7FatFile5closeEv>
   d4448:	e021      	b.n	d448e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
            return;
        }
        else if(!strcmp(fileCommand,"filedone")){
   d444a:	491c      	ldr	r1, [pc, #112]	; (d44bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   d444c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4450:	f005 fb33 	bl	d9aba <strcmp>
   d4454:	b940      	cbnz	r0, d4468 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
            Serial.println("Received done command");
   d4456:	f004 fef9 	bl	d924c <_Z16_fetch_usbserialv>
   d445a:	4919      	ldr	r1, [pc, #100]	; (d44c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   d445c:	f004 fb21 	bl	d8aa2 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   d4460:	4b18      	ldr	r3, [pc, #96]	; (d44c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   d4462:	2201      	movs	r2, #1
   d4464:	701a      	strb	r2, [r3, #0]
   d4466:	e7e9      	b.n	d443c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd4>
            if(myFile.isOpen()) myFile.close();
            return;
        }
    }
    char dataStr[len];
   d4468:	1df3      	adds	r3, r6, #7
   d446a:	f023 0307 	bic.w	r3, r3, #7
   d446e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   d4472:	4632      	mov	r2, r6
   d4474:	4621      	mov	r1, r4
   d4476:	4668      	mov	r0, sp
   d4478:	f005 fab9 	bl	d99ee <memcpy>
    myFile.print(dataStr);
   d447c:	4669      	mov	r1, sp
   d447e:	4807      	ldr	r0, [pc, #28]	; (d449c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   d4480:	f004 fafc 	bl	d8a7c <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   d4484:	f004 fee2 	bl	d924c <_Z16_fetch_usbserialv>
   d4488:	4669      	mov	r1, sp
   d448a:	f004 fb0a 	bl	d8aa2 <_ZN5Print7printlnEPKc>
}
   d448e:	3754      	adds	r7, #84	; 0x54
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
            return;
   d4490:	46ad      	mov	sp, r5
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4492:	46bd      	mov	sp, r7
   d4494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4496:	bf00      	nop
   d4498:	000da491 	.word	0x000da491
   d449c:	2003d730 	.word	0x2003d730
   d44a0:	2003d7c5 	.word	0x2003d7c5
   d44a4:	2003e2e4 	.word	0x2003e2e4
   d44a8:	000da49a 	.word	0x000da49a
   d44ac:	000da4cd 	.word	0x000da4cd
   d44b0:	2003d740 	.word	0x2003d740
   d44b4:	000da4ea 	.word	0x000da4ea
   d44b8:	000da4f3 	.word	0x000da4f3
   d44bc:	000da50b 	.word	0x000da50b
   d44c0:	000da514 	.word	0x000da514
   d44c4:	2003d6c8 	.word	0x2003d6c8

000d44c8 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d44c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d44cc:	6804      	ldr	r4, [r0, #0]
   d44ce:	6843      	ldr	r3, [r0, #4]
   d44d0:	1b1b      	subs	r3, r3, r4
   d44d2:	4c20      	ldr	r4, [pc, #128]	; (d4554 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x8c>)
   d44d4:	109b      	asrs	r3, r3, #2
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d44d6:	435c      	muls	r4, r3
   d44d8:	bf14      	ite	ne
   d44da:	4623      	movne	r3, r4
   d44dc:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d44de:	18e3      	adds	r3, r4, r3
   d44e0:	4606      	mov	r6, r0
   d44e2:	460f      	mov	r7, r1
   d44e4:	4c1c      	ldr	r4, [pc, #112]	; (d4558 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x90>)
   d44e6:	d201      	bcs.n	d44ec <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d44e8:	42a3      	cmp	r3, r4
   d44ea:	d92d      	bls.n	d4548 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x80>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d44ec:	2014      	movs	r0, #20
   d44ee:	4360      	muls	r0, r4
   d44f0:	f7ff fdd1 	bl	d4096 <_Znwj>
   d44f4:	4680      	mov	r8, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d44f6:	f8d6 9000 	ldr.w	r9, [r6]
   d44fa:	6875      	ldr	r5, [r6, #4]
   d44fc:	ebc9 0505 	rsb	r5, r9, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4500:	eb18 0e05 	adds.w	lr, r8, r5
   d4504:	bf1e      	ittt	ne
   d4506:	cf0f      	ldmiane	r7!, {r0, r1, r2, r3}
   d4508:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   d450c:	683b      	ldrne	r3, [r7, #0]
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d450e:	4a11      	ldr	r2, [pc, #68]	; (d4554 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x8c>)
   d4510:	bf18      	it	ne
   d4512:	f8ce 3000 	strne.w	r3, [lr]
   d4516:	10ab      	asrs	r3, r5, #2
   d4518:	435a      	muls	r2, r3
   d451a:	d004      	beq.n	d4526 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x5e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d451c:	462a      	mov	r2, r5
   d451e:	4649      	mov	r1, r9
   d4520:	4640      	mov	r0, r8
   d4522:	f005 fa6f 	bl	d9a04 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d4526:	3514      	adds	r5, #20
   d4528:	4445      	add	r5, r8

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d452a:	f1b9 0f00 	cmp.w	r9, #0
   d452e:	d002      	beq.n	d4536 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x6e>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4530:	4648      	mov	r0, r9
   d4532:	f7ff fdb2 	bl	d409a <_ZdlPv>
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4536:	2314      	movs	r3, #20
   d4538:	fb03 8404 	mla	r4, r3, r4, r8
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d453c:	f8c6 8000 	str.w	r8, [r6]
	this->_M_impl._M_finish = __new_finish;
   d4540:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4542:	60b4      	str	r4, [r6, #8]
      }
   d4544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4548:	461c      	mov	r4, r3
   d454a:	2b00      	cmp	r3, #0
   d454c:	d1ce      	bne.n	d44ec <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d454e:	4698      	mov	r8, r3
   d4550:	e7d1      	b.n	d44f6 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2e>
   d4552:	bf00      	nop
   d4554:	cccccccd 	.word	0xcccccccd
   d4558:	0ccccccc 	.word	0x0ccccccc

000d455c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   d455c:	b570      	push	{r4, r5, r6, lr}
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d455e:	6844      	ldr	r4, [r0, #4]
   d4560:	6883      	ldr	r3, [r0, #8]
   d4562:	429c      	cmp	r4, r3
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   d4564:	4606      	mov	r6, r0
   d4566:	460d      	mov	r5, r1
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4568:	d008      	beq.n	d457c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d456a:	b11c      	cbz	r4, d4574 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x18>
   d456c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d456e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4570:	682b      	ldr	r3, [r5, #0]
   d4572:	6023      	str	r3, [r4, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d4574:	6873      	ldr	r3, [r6, #4]
   d4576:	3314      	adds	r3, #20
   d4578:	6073      	str	r3, [r6, #4]
   d457a:	bd70      	pop	{r4, r5, r6, pc}
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d457c:	f7ff ffa4 	bl	d44c8 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
   d4580:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4584 <_Z14processCommandPKchb>:
    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4588:	b097      	sub	sp, #92	; 0x5c
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d458a:	7883      	ldrb	r3, [r0, #2]
   d458c:	2b41      	cmp	r3, #65	; 0x41
    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d458e:	af02      	add	r7, sp, #8
   d4590:	4604      	mov	r4, r0
   d4592:	468a      	mov	sl, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d4594:	d102      	bne.n	d459c <_Z14processCommandPKchb+0x18>
   d4596:	78c3      	ldrb	r3, [r0, #3]
   d4598:	2b42      	cmp	r3, #66	; 0x42
   d459a:	e004      	b.n	d45a6 <_Z14processCommandPKchb+0x22>
   d459c:	2b43      	cmp	r3, #67	; 0x43
   d459e:	f040 8191 	bne.w	d48c4 <_Z14processCommandPKchb+0x340>
   d45a2:	78c3      	ldrb	r3, [r0, #3]
   d45a4:	2b43      	cmp	r3, #67	; 0x43
   d45a6:	f040 818d 	bne.w	d48c4 <_Z14processCommandPKchb+0x340>
        uint8_t checksum;
        char dataStr[strlen(command)-9];
   d45aa:	4620      	mov	r0, r4
   d45ac:	f005 fa97 	bl	d9ade <strlen>
   d45b0:	3802      	subs	r0, #2
   d45b2:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d45b6:	46e9      	mov	r9, sp

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-9];
   d45b8:	ebad 0d00 	sub.w	sp, sp, r0
        char cmdStr[3];
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
   d45bc:	4620      	mov	r0, r4
   d45be:	f005 fa8e 	bl	d9ade <strlen>
   d45c2:	4420      	add	r0, r4

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-9];
   d45c4:	ae02      	add	r6, sp, #8
        char cmdStr[3];
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
   d45c6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   d45ca:	713b      	strb	r3, [r7, #4]
        checkStr[1] = command[strlen(command)-2];
   d45cc:	4620      	mov	r0, r4
   d45ce:	f005 fa86 	bl	d9ade <strlen>
   d45d2:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d45d4:	2210      	movs	r2, #16
        uint8_t checksum;
        char dataStr[strlen(command)-9];
        char cmdStr[3];
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
   d45d6:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   d45da:	717b      	strb	r3, [r7, #5]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d45dc:	2100      	movs	r1, #0
   d45de:	1d38      	adds	r0, r7, #4
   d45e0:	f005 fb40 	bl	d9c64 <strtol>
   d45e4:	4680      	mov	r8, r0
   d45e6:	fa5f f888 	uxtb.w	r8, r8
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   d45ea:	f004 fe2f 	bl	d924c <_Z16_fetch_usbserialv>
   d45ee:	f8cd 8000 	str.w	r8, [sp]
   d45f2:	4643      	mov	r3, r8
   d45f4:	4ab5      	ldr	r2, [pc, #724]	; (d48cc <_Z14processCommandPKchb+0x348>)
   d45f6:	2101      	movs	r1, #1
   d45f8:	f004 fa7d 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
        for(uint8_t i = 4; i < strlen(command)-3;i++){
   d45fc:	2504      	movs	r5, #4
   d45fe:	4620      	mov	r0, r4
   d4600:	f005 fa6d 	bl	d9ade <strlen>
   d4604:	3803      	subs	r0, #3
   d4606:	4285      	cmp	r5, r0
   d4608:	d211      	bcs.n	d462e <_Z14processCommandPKchb+0xaa>
            if(i < 7) cmdStr[i-4] = command[i];
   d460a:	2d06      	cmp	r5, #6
   d460c:	bf9b      	ittet	ls
   d460e:	f107 0350 	addls.w	r3, r7, #80	; 0x50
   d4612:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   d4614:	1973      	addhi	r3, r6, r5
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4616:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   d4618:	bf8c      	ite	hi
   d461a:	5d62      	ldrbhi	r2, [r4, r5]
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d461c:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
   d4620:	f105 0501 	add.w	r5, r5, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d4624:	bf88      	it	hi
   d4626:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
   d462a:	b2ed      	uxtb	r5, r5
   d462c:	e7e7      	b.n	d45fe <_Z14processCommandPKchb+0x7a>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(checksum != strlen(command)-3){
   d462e:	4540      	cmp	r0, r8
   d4630:	d042      	beq.n	d46b8 <_Z14processCommandPKchb+0x134>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-3,checksum);
   d4632:	f004 fe0b 	bl	d924c <_Z16_fetch_usbserialv>
   d4636:	4605      	mov	r5, r0
   d4638:	4620      	mov	r0, r4
   d463a:	f005 fa50 	bl	d9ade <strlen>
   d463e:	1ec3      	subs	r3, r0, #3
   d4640:	4628      	mov	r0, r5
   d4642:	4da3      	ldr	r5, [pc, #652]	; (d48d0 <_Z14processCommandPKchb+0x34c>)
   d4644:	f8cd 8000 	str.w	r8, [sp]
   d4648:	4aa2      	ldr	r2, [pc, #648]	; (d48d4 <_Z14processCommandPKchb+0x350>)
   d464a:	2101      	movs	r1, #1
   d464c:	f004 fa53 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
            if(!logFile.isOpen()){
   d4650:	7c2b      	ldrb	r3, [r5, #16]
   d4652:	b983      	cbnz	r3, d4676 <_Z14processCommandPKchb+0xf2>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4654:	f244 2202 	movw	r2, #16898	; 0x4202
   d4658:	499f      	ldr	r1, [pc, #636]	; (d48d8 <_Z14processCommandPKchb+0x354>)
   d465a:	f105 0010 	add.w	r0, r5, #16
   d465e:	f7ff fd9f 	bl	d41a0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4662:	4622      	mov	r2, r4
   d4664:	499d      	ldr	r1, [pc, #628]	; (d48dc <_Z14processCommandPKchb+0x358>)
   d4666:	4628      	mov	r0, r5
   d4668:	f7ff fe79 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d466c:	f105 0010 	add.w	r0, r5, #16
   d4670:	f000 ff08 	bl	d5484 <_ZN7FatFile5closeEv>
   d4674:	e004      	b.n	d4680 <_Z14processCommandPKchb+0xfc>
            }
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4676:	4622      	mov	r2, r4
   d4678:	4998      	ldr	r1, [pc, #608]	; (d48dc <_Z14processCommandPKchb+0x358>)
   d467a:	4628      	mov	r0, r5
   d467c:	f7ff fe6f 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            Serial.println("Warning, checksum does not match");
   d4680:	f004 fde4 	bl	d924c <_Z16_fetch_usbserialv>
   d4684:	4996      	ldr	r1, [pc, #600]	; (d48e0 <_Z14processCommandPKchb+0x35c>)
   d4686:	f004 fa0c 	bl	d8aa2 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   d468a:	7863      	ldrb	r3, [r4, #1]
   d468c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4690:	2a09      	cmp	r2, #9
   d4692:	d902      	bls.n	d469a <_Z14processCommandPKchb+0x116>
   d4694:	2b43      	cmp	r3, #67	; 0x43
   d4696:	f040 8114 	bne.w	d48c2 <_Z14processCommandPKchb+0x33e>
                char rxBotNum[2];
                rxBotNum[0] = command[0];
   d469a:	7822      	ldrb	r2, [r4, #0]
   d469c:	f887 2020 	strb.w	r2, [r7, #32]
                rxBotNum[1] = command[1];
   d46a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   d46a4:	f107 0220 	add.w	r2, r7, #32
   d46a8:	f107 0308 	add.w	r3, r7, #8
   d46ac:	498d      	ldr	r1, [pc, #564]	; (d48e4 <_Z14processCommandPKchb+0x360>)
   d46ae:	488e      	ldr	r0, [pc, #568]	; (d48e8 <_Z14processCommandPKchb+0x364>)
   d46b0:	f002 fb56 	bl	d6d60 <sprintf>
                errModeReply = mode;
   d46b4:	4b8d      	ldr	r3, [pc, #564]	; (d48ec <_Z14processCommandPKchb+0x368>)
   d46b6:	e0b6      	b.n	d4826 <_Z14processCommandPKchb+0x2a2>
            }
            
            return;
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d46b8:	498d      	ldr	r1, [pc, #564]	; (d48f0 <_Z14processCommandPKchb+0x36c>)
   d46ba:	f107 0008 	add.w	r0, r7, #8
   d46be:	f005 f9fc 	bl	d9aba <strcmp>
   d46c2:	2800      	cmp	r0, #0
   d46c4:	f000 80fd 	beq.w	d48c2 <_Z14processCommandPKchb+0x33e>
            else if(mode == 2){ //Acknowledge from BLE
                
            }
            return;
        }
        else if(!strcmp(cmdStr,"sup")){
   d46c8:	498a      	ldr	r1, [pc, #552]	; (d48f4 <_Z14processCommandPKchb+0x370>)
   d46ca:	f107 0008 	add.w	r0, r7, #8
   d46ce:	f005 f9f4 	bl	d9aba <strcmp>
   d46d2:	2800      	cmp	r0, #0
   d46d4:	f040 809b 	bne.w	d480e <_Z14processCommandPKchb+0x28a>
            char rxIDBuf[1];
            rxIDBuf[0] = command[1];
   d46d8:	f107 0050 	add.w	r0, r7, #80	; 0x50
   d46dc:	7863      	ldrb	r3, [r4, #1]
   d46de:	f800 3d50 	strb.w	r3, [r0, #-80]!
            uint8_t rxBotID = atoi(rxIDBuf);
   d46e2:	f005 f86b 	bl	d97bc <atoi>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   d46e6:	4b84      	ldr	r3, [pc, #528]	; (d48f8 <_Z14processCommandPKchb+0x374>)
   d46e8:	b2c5      	uxtb	r5, r0
   d46ea:	e893 0410 	ldmia.w	r3, {r4, sl}
            bool newBot = true;
   d46ee:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   d46f0:	45a2      	cmp	sl, r4
   d46f2:	d049      	beq.n	d4788 <_Z14processCommandPKchb+0x204>
                if(rxBotID == w.botNum){
   d46f4:	7822      	ldrb	r2, [r4, #0]
   d46f6:	42aa      	cmp	r2, r5
   d46f8:	d144      	bne.n	d4784 <_Z14processCommandPKchb+0x200>
                    newBot = false;
                    uint8_t battpct;
                    uint8_t statflags;
                    float latRX;
                    float lonRX;
                    sscanf(dataStr,"%u,%u,%f,%f",&battpct,&statflags,&latRX,&lonRX);
   d46fa:	f107 0320 	add.w	r3, r7, #32
   d46fe:	9301      	str	r3, [sp, #4]
   d4700:	f107 0310 	add.w	r3, r7, #16
   d4704:	1cfa      	adds	r2, r7, #3
   d4706:	497d      	ldr	r1, [pc, #500]	; (d48fc <_Z14processCommandPKchb+0x378>)
   d4708:	9300      	str	r3, [sp, #0]
   d470a:	4630      	mov	r0, r6
   d470c:	f107 030c 	add.w	r3, r7, #12
   d4710:	f002 fb2e 	bl	d6d70 <sscanf>
                    w.battPercent = battpct;
                    w.LTEAvail = statflags & 1;
   d4714:	f897 800c 	ldrb.w	r8, [r7, #12]
                    uint8_t battpct;
                    uint8_t statflags;
                    float latRX;
                    float lonRX;
                    sscanf(dataStr,"%u,%u,%f,%f",&battpct,&statflags,&latRX,&lonRX);
                    w.battPercent = battpct;
   d4718:	f897 b003 	ldrb.w	fp, [r7, #3]
                    w.manualRC = (statflags >> 4) & 1;
                    w.lowBatt = (statflags >> 5) & 1;
                    w.dataRecording = (statflags >> 6) & 1;
                    w.GPSLat = latRX;
                    w.GPSLon = lonRX;
                    Serial.println("Status Update!");
   d471c:	f004 fd96 	bl	d924c <_Z16_fetch_usbserialv>
   d4720:	4977      	ldr	r1, [pc, #476]	; (d4900 <_Z14processCommandPKchb+0x37c>)
   d4722:	f004 f9be 	bl	d8aa2 <_ZN5Print7printlnEPKc>
                    Serial.println("########################");
   d4726:	f004 fd91 	bl	d924c <_Z16_fetch_usbserialv>
   d472a:	4976      	ldr	r1, [pc, #472]	; (d4904 <_Z14processCommandPKchb+0x380>)
   d472c:	f004 f9b9 	bl	d8aa2 <_ZN5Print7printlnEPKc>
                    Serial.println("##    STATUS UPDATE   ##");
   d4730:	f004 fd8c 	bl	d924c <_Z16_fetch_usbserialv>
   d4734:	4974      	ldr	r1, [pc, #464]	; (d4908 <_Z14processCommandPKchb+0x384>)
   d4736:	f004 f9b4 	bl	d8aa2 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##      Bot #: %1d     ##",w.botNum);
   d473a:	f004 fd87 	bl	d924c <_Z16_fetch_usbserialv>
   d473e:	462a      	mov	r2, r5
   d4740:	4972      	ldr	r1, [pc, #456]	; (d490c <_Z14processCommandPKchb+0x388>)
   d4742:	f7ff fe07 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
                    Serial.printlnf("##     Batt %: %03d    ##",w.battPercent);
   d4746:	f004 fd81 	bl	d924c <_Z16_fetch_usbserialv>
   d474a:	465a      	mov	r2, fp
   d474c:	4970      	ldr	r1, [pc, #448]	; (d4910 <_Z14processCommandPKchb+0x38c>)
   d474e:	f7ff fe01 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
                    Serial.println("##   LTE  BLE  XBee   ##");
   d4752:	f004 fd7b 	bl	d924c <_Z16_fetch_usbserialv>
   d4756:	496f      	ldr	r1, [pc, #444]	; (d4914 <_Z14processCommandPKchb+0x390>)
   d4758:	f004 f9a3 	bl	d8aa2 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##    %d    %d     %d    ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   d475c:	f004 fd76 	bl	d924c <_Z16_fetch_usbserialv>
   d4760:	f3c8 0340 	ubfx	r3, r8, #1, #1
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	f3c8 0380 	ubfx	r3, r8, #2, #1
   d476a:	4a6b      	ldr	r2, [pc, #428]	; (d4918 <_Z14processCommandPKchb+0x394>)
   d476c:	9300      	str	r3, [sp, #0]
   d476e:	2101      	movs	r1, #1
   d4770:	f008 0301 	and.w	r3, r8, #1
   d4774:	f004 f9bf 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
                    Serial.println("########################");
   d4778:	f004 fd68 	bl	d924c <_Z16_fetch_usbserialv>
   d477c:	4961      	ldr	r1, [pc, #388]	; (d4904 <_Z14processCommandPKchb+0x380>)
   d477e:	f004 f990 	bl	d8aa2 <_ZN5Print7printlnEPKc>
            rxIDBuf[0] = command[1];
            uint8_t rxBotID = atoi(rxIDBuf);
            bool newBot = true;
            for(WaterBot w: WaterBots){
                if(rxBotID == w.botNum){
                    newBot = false;
   d4782:	2300      	movs	r3, #0
   d4784:	3414      	adds	r4, #20
   d4786:	e7b3      	b.n	d46f0 <_Z14processCommandPKchb+0x16c>
                    Serial.printlnf("##    %d    %d     %d    ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
                    Serial.println("########################");
                }

            }
            if(newBot){
   d4788:	2b00      	cmp	r3, #0
   d478a:	f000 809a 	beq.w	d48c2 <_Z14processCommandPKchb+0x33e>
                Serial.println("Found a new water bot ID");
   d478e:	f004 fd5d 	bl	d924c <_Z16_fetch_usbserialv>
   d4792:	4962      	ldr	r1, [pc, #392]	; (d491c <_Z14processCommandPKchb+0x398>)
   d4794:	f004 f985 	bl	d8aa2 <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
                newWaterbot.BLEAvail = true;
   d4798:	2301      	movs	r3, #1
   d479a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                newBot = false;
                uint8_t battpct;
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u,%u,%f,%f",&battpct,&statflags,&latRX,&lonRX);
   d479e:	f107 0310 	add.w	r3, r7, #16
            }
            if(newBot){
                Serial.println("Found a new water bot ID");
                WaterBot newWaterbot;
                newWaterbot.BLEAvail = true;
                newWaterbot.botNum = rxBotID;
   d47a2:	f887 5020 	strb.w	r5, [r7, #32]
                newBot = false;
                uint8_t battpct;
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u,%u,%f,%f",&battpct,&statflags,&latRX,&lonRX);
   d47a6:	9301      	str	r3, [sp, #4]
   d47a8:	f107 030c 	add.w	r3, r7, #12
   d47ac:	9300      	str	r3, [sp, #0]
   d47ae:	1cba      	adds	r2, r7, #2
   d47b0:	1cfb      	adds	r3, r7, #3
   d47b2:	4952      	ldr	r1, [pc, #328]	; (d48fc <_Z14processCommandPKchb+0x378>)
   d47b4:	4630      	mov	r0, r6
   d47b6:	f002 fadb 	bl	d6d70 <sscanf>
                newWaterbot.battPercent = battpct;
   d47ba:	78bb      	ldrb	r3, [r7, #2]
   d47bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                newWaterbot.LTEAvail = statflags & 1;
   d47c0:	78fb      	ldrb	r3, [r7, #3]
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
                WaterBots.push_back(newWaterbot);
   d47c2:	484d      	ldr	r0, [pc, #308]	; (d48f8 <_Z14processCommandPKchb+0x374>)
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u,%u,%f,%f",&battpct,&statflags,&latRX,&lonRX);
                newWaterbot.battPercent = battpct;
                newWaterbot.LTEAvail = statflags & 1;
   d47c4:	f003 0201 	and.w	r2, r3, #1
   d47c8:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   d47cc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   d47d0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   d47d4:	f3c3 0280 	ubfx	r2, r3, #2, #1
   d47d8:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
                newWaterbot.offloading = (statflags >> 3) & 1;
   d47dc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   d47e0:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
                newWaterbot.manualRC = (statflags >> 4) & 1;
   d47e4:	f3c3 1200 	ubfx	r2, r3, #4, #1
   d47e8:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   d47ec:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   d47f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d47f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                newWaterbot.GPSLat = latRX;
   d47f8:	68fb      	ldr	r3, [r7, #12]
   d47fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                newWaterbot.GPSLon = lonRX;
                WaterBots.push_back(newWaterbot);
   d47fc:	f107 0120 	add.w	r1, r7, #32
                newWaterbot.offloading = (statflags >> 3) & 1;
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
   d4800:	693b      	ldr	r3, [r7, #16]
                newWaterbot.LTEAvail = statflags & 1;
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
                newWaterbot.offloading = (statflags >> 3) & 1;
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   d4802:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
   d4806:	633b      	str	r3, [r7, #48]	; 0x30
                WaterBots.push_back(newWaterbot);
   d4808:	f7ff fea8 	bl	d455c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   d480c:	e059      	b.n	d48c2 <_Z14processCommandPKchb+0x33e>
            }
        }
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   d480e:	4944      	ldr	r1, [pc, #272]	; (d4920 <_Z14processCommandPKchb+0x39c>)
   d4810:	f107 0008 	add.w	r0, r7, #8
   d4814:	f005 f951 	bl	d9aba <strcmp>
   d4818:	b940      	cbnz	r0, d482c <_Z14processCommandPKchb+0x2a8>
            strncpy(errCmdStr,dataStr,3);
   d481a:	2203      	movs	r2, #3
   d481c:	4631      	mov	r1, r6
   d481e:	4841      	ldr	r0, [pc, #260]	; (d4924 <_Z14processCommandPKchb+0x3a0>)
   d4820:	f005 f97a 	bl	d9b18 <strncpy>
            errCmdMode = mode;
   d4824:	4b40      	ldr	r3, [pc, #256]	; (d4928 <_Z14processCommandPKchb+0x3a4>)
   d4826:	f883 a000 	strb.w	sl, [r3]
   d482a:	e04a      	b.n	d48c2 <_Z14processCommandPKchb+0x33e>
        }
        else if(!strcmp(cmdStr,"pts")){
   d482c:	493f      	ldr	r1, [pc, #252]	; (d492c <_Z14processCommandPKchb+0x3a8>)
   d482e:	f107 0008 	add.w	r0, r7, #8
   d4832:	f005 f942 	bl	d9aba <strcmp>
   d4836:	4604      	mov	r4, r0
   d4838:	2800      	cmp	r0, #0
   d483a:	d142      	bne.n	d48c2 <_Z14processCommandPKchb+0x33e>
            Serial.println(dataStr);
   d483c:	f004 fd06 	bl	d924c <_Z16_fetch_usbserialv>
   d4840:	4631      	mov	r1, r6
   d4842:	f004 f92e 	bl	d8aa2 <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   d4846:	f244 2202 	movw	r2, #16898	; 0x4202
   d484a:	4939      	ldr	r1, [pc, #228]	; (d4930 <_Z14processCommandPKchb+0x3ac>)
   d484c:	4839      	ldr	r0, [pc, #228]	; (d4934 <_Z14processCommandPKchb+0x3b0>)
   d484e:	f7ff fca7 	bl	d41a0 <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d4852:	4939      	ldr	r1, [pc, #228]	; (d4938 <_Z14processCommandPKchb+0x3b4>)
   d4854:	f107 0020 	add.w	r0, r7, #32
   d4858:	f004 fad7 	bl	d8e0a <_ZN6StringC1EPK19__FlashStringHelper>
   d485c:	4937      	ldr	r1, [pc, #220]	; (d493c <_Z14processCommandPKchb+0x3b8>)
   d485e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   d4862:	f004 fad2 	bl	d8e0a <_ZN6StringC1EPK19__FlashStringHelper>
   d4866:	4936      	ldr	r1, [pc, #216]	; (d4940 <_Z14processCommandPKchb+0x3bc>)
   d4868:	f107 0040 	add.w	r0, r7, #64	; 0x40
   d486c:	f004 facd 	bl	d8e0a <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   d4870:	f107 0320 	add.w	r3, r7, #32
   d4874:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   d4878:	f107 0010 	add.w	r0, r7, #16
   d487c:	f004 fae7 	bl	d8e4e <_ZN6StringC1ERKS_>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4880:	f107 0310 	add.w	r3, r7, #16
   d4884:	4a2f      	ldr	r2, [pc, #188]	; (d4944 <_Z14processCommandPKchb+0x3c0>)
   d4886:	4830      	ldr	r0, [pc, #192]	; (d4948 <_Z14processCommandPKchb+0x3c4>)
   d4888:	4621      	mov	r1, r4
   d488a:	f004 f934 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
   d488e:	f107 0010 	add.w	r0, r7, #16
   d4892:	f004 fa73 	bl	d8d7c <_ZN6StringD1Ev>
            myFile.println(dataStr);
   d4896:	4631      	mov	r1, r6
   d4898:	482b      	ldr	r0, [pc, #172]	; (d4948 <_Z14processCommandPKchb+0x3c4>)
   d489a:	f004 f902 	bl	d8aa2 <_ZN5Print7printlnEPKc>
            delay(5);
   d489e:	2005      	movs	r0, #5
   d48a0:	f002 fa8e 	bl	d6dc0 <delay>
            myFile.close();
   d48a4:	4823      	ldr	r0, [pc, #140]	; (d4934 <_Z14processCommandPKchb+0x3b0>)
   d48a6:	f000 fded 	bl	d5484 <_ZN7FatFile5closeEv>
            errCmdMode = mode;
        }
        else if(!strcmp(cmdStr,"pts")){
            Serial.println(dataStr);
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d48aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
   d48ae:	f004 fa65 	bl	d8d7c <_ZN6StringD1Ev>
   d48b2:	f107 0030 	add.w	r0, r7, #48	; 0x30
   d48b6:	f004 fa61 	bl	d8d7c <_ZN6StringD1Ev>
   d48ba:	f107 0020 	add.w	r0, r7, #32
   d48be:	f004 fa5d 	bl	d8d7c <_ZN6StringD1Ev>
                rxBotNum[1] = command[1];
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
                errModeReply = mode;
            }
            
            return;
   d48c2:	46cd      	mov	sp, r9
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d48c4:	3754      	adds	r7, #84	; 0x54
   d48c6:	46bd      	mov	sp, r7
   d48c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48cc:	000da52a 	.word	0x000da52a
   d48d0:	2003d790 	.word	0x2003d790
   d48d4:	000da53f 	.word	0x000da53f
   d48d8:	2003d6fc 	.word	0x2003d6fc
   d48dc:	000da55c 	.word	0x000da55c
   d48e0:	000da588 	.word	0x000da588
   d48e4:	000da5a9 	.word	0x000da5a9
   d48e8:	2003d780 	.word	0x2003d780
   d48ec:	2003d720 	.word	0x2003d720
   d48f0:	000da5b5 	.word	0x000da5b5
   d48f4:	000da5b9 	.word	0x000da5b9
   d48f8:	2003d724 	.word	0x2003d724
   d48fc:	000da5bd 	.word	0x000da5bd
   d4900:	000da5c9 	.word	0x000da5c9
   d4904:	000da5d8 	.word	0x000da5d8
   d4908:	000da5f1 	.word	0x000da5f1
   d490c:	000da60a 	.word	0x000da60a
   d4910:	000da624 	.word	0x000da624
   d4914:	000da63e 	.word	0x000da63e
   d4918:	000da657 	.word	0x000da657
   d491c:	000da673 	.word	0x000da673
   d4920:	000da68c 	.word	0x000da68c
   d4924:	2003d7e3 	.word	0x2003d7e3
   d4928:	2003d6f0 	.word	0x2003d6f0
   d492c:	000da690 	.word	0x000da690
   d4930:	000da694 	.word	0x000da694
   d4934:	2003d740 	.word	0x2003d740
   d4938:	000da6a1 	.word	0x000da6a1
   d493c:	000da6a5 	.word	0x000da6a5
   d4940:	000da6aa 	.word	0x000da6aa
   d4944:	000da6b4 	.word	0x000da6b4
   d4948:	2003d730 	.word	0x2003d730

000d494c <_Z14dataLTEHandlerPKcS0_>:

void BLEScan(int BotNumber = -1);
void XBeeHandler();
void dataLTEHandler(const char *event, const char *data);

void dataLTEHandler(const char *event, const char *data){
   d494c:	b510      	push	{r4, lr}
   d494e:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d4950:	2200      	movs	r2, #0
   d4952:	2104      	movs	r1, #4
   d4954:	4620      	mov	r0, r4
   d4956:	f7ff fe15 	bl	d4584 <_Z14processCommandPKchb>
    if(logMessages){
   d495a:	4b0b      	ldr	r3, [pc, #44]	; (d4988 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   d495c:	781b      	ldrb	r3, [r3, #0]
   d495e:	b193      	cbz	r3, d4986 <_Z14dataLTEHandlerPKcS0_+0x3a>
   d4960:	480a      	ldr	r0, [pc, #40]	; (d498c <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4962:	7c03      	ldrb	r3, [r0, #16]
   d4964:	b92b      	cbnz	r3, d4972 <_Z14dataLTEHandlerPKcS0_+0x26>
   d4966:	f244 2202 	movw	r2, #16898	; 0x4202
   d496a:	4909      	ldr	r1, [pc, #36]	; (d4990 <_Z14dataLTEHandlerPKcS0_+0x44>)
   d496c:	3010      	adds	r0, #16
   d496e:	f7ff fc17 	bl	d41a0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d4972:	4622      	mov	r2, r4
   d4974:	4907      	ldr	r1, [pc, #28]	; (d4994 <_Z14dataLTEHandlerPKcS0_+0x48>)
   d4976:	4805      	ldr	r0, [pc, #20]	; (d498c <_Z14dataLTEHandlerPKcS0_+0x40>)
   d4978:	f7ff fcf1 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d497c:	4806      	ldr	r0, [pc, #24]	; (d4998 <_Z14dataLTEHandlerPKcS0_+0x4c>)
    }
}
   d497e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void dataLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4982:	f000 bd7f 	b.w	d5484 <_ZN7FatFile5closeEv>
   d4986:	bd10      	pop	{r4, pc}
   d4988:	2003d6e0 	.word	0x2003d6e0
   d498c:	2003d790 	.word	0x2003d790
   d4990:	2003d6fc 	.word	0x2003d6fc
   d4994:	000da6c9 	.word	0x000da6c9
   d4998:	2003d7a0 	.word	0x2003d7a0

000d499c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
            logFile.close();
        }
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d499c:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len];
   d499e:	1dcb      	adds	r3, r1, #7
   d49a0:	f023 0307 	bic.w	r3, r3, #7
            logFile.close();
        }
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d49a4:	af00      	add	r7, sp, #0
    char btBuf[len];
   d49a6:	ebad 0d03 	sub.w	sp, sp, r3
   d49aa:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d49ac:	2300      	movs	r3, #0
   d49ae:	428b      	cmp	r3, r1
   d49b0:	d003      	beq.n	d49ba <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
   d49b2:	5cc2      	ldrb	r2, [r0, r3]
   d49b4:	54e2      	strb	r2, [r4, r3]
   d49b6:	3301      	adds	r3, #1
   d49b8:	e7f9      	b.n	d49ae <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
    Serial.println("New BT Command:");
   d49ba:	f004 fc47 	bl	d924c <_Z16_fetch_usbserialv>
   d49be:	4911      	ldr	r1, [pc, #68]	; (d4a04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   d49c0:	f004 f86f 	bl	d8aa2 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   d49c4:	f004 fc42 	bl	d924c <_Z16_fetch_usbserialv>
   d49c8:	4621      	mov	r1, r4
   d49ca:	f004 f86a 	bl	d8aa2 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d49ce:	2201      	movs	r2, #1
   d49d0:	4611      	mov	r1, r2
   d49d2:	4620      	mov	r0, r4
   d49d4:	f7ff fdd6 	bl	d4584 <_Z14processCommandPKchb>
    if(logMessages){
   d49d8:	4b0b      	ldr	r3, [pc, #44]	; (d4a08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   d49da:	781b      	ldrb	r3, [r3, #0]
   d49dc:	b183      	cbz	r3, d4a00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   d49de:	480b      	ldr	r0, [pc, #44]	; (d4a0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d49e0:	7c03      	ldrb	r3, [r0, #16]
   d49e2:	b92b      	cbnz	r3, d49f0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>
   d49e4:	f244 2202 	movw	r2, #16898	; 0x4202
   d49e8:	4909      	ldr	r1, [pc, #36]	; (d4a10 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   d49ea:	3010      	adds	r0, #16
   d49ec:	f7ff fbd8 	bl	d41a0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d49f0:	4622      	mov	r2, r4
   d49f2:	4908      	ldr	r1, [pc, #32]	; (d4a14 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d49f4:	4805      	ldr	r0, [pc, #20]	; (d4a0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   d49f6:	f7ff fcb2 	bl	d435e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d49fa:	4807      	ldr	r0, [pc, #28]	; (d4a18 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d49fc:	f000 fd42 	bl	d5484 <_ZN7FatFile5closeEv>
    }
}
   d4a00:	46bd      	mov	sp, r7
   d4a02:	bd98      	pop	{r3, r4, r7, pc}
   d4a04:	000da6e9 	.word	0x000da6e9
   d4a08:	2003d6e0 	.word	0x2003d6e0
   d4a0c:	2003d790 	.word	0x2003d790
   d4a10:	2003d6fc 	.word	0x2003d6fc
   d4a14:	000da6f9 	.word	0x000da6f9
   d4a18:	2003d7a0 	.word	0x2003d7a0

000d4a1c <_Z11XBeeHandlerv>:
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
   d4a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        if(logMessages){
   d4a20:	4e2e      	ldr	r6, [pc, #184]	; (d4adc <_Z11XBeeHandlerv+0xc0>)
   d4a22:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4af0 <_Z11XBeeHandlerv+0xd4>
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
   d4a26:	b089      	sub	sp, #36	; 0x24
   d4a28:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   d4a2a:	f004 fb87 	bl	d913c <_Z22__fetch_global_Serial1v>
   d4a2e:	6803      	ldr	r3, [r0, #0]
   d4a30:	691b      	ldr	r3, [r3, #16]
   d4a32:	4798      	blx	r3
   d4a34:	2800      	cmp	r0, #0
   d4a36:	d04c      	beq.n	d4ad2 <_Z11XBeeHandlerv+0xb6>
        String data = Serial1.readStringUntil('\n');
   d4a38:	f004 fb80 	bl	d913c <_Z22__fetch_global_Serial1v>
   d4a3c:	220a      	movs	r2, #10
   d4a3e:	4601      	mov	r1, r0
   d4a40:	4638      	mov	r0, r7
   d4a42:	f004 f983 	bl	d8d4c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   d4a46:	68bb      	ldr	r3, [r7, #8]
   d4a48:	3307      	adds	r3, #7
   d4a4a:	f023 0307 	bic.w	r3, r3, #7
        if(logMessages){
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
   d4a4e:	466d      	mov	r5, sp
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
        char buffer[data.length()];
   d4a50:	ebad 0d03 	sub.w	sp, sp, r3
   d4a54:	46e9      	mov	r9, sp
   d4a56:	466c      	mov	r4, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   d4a58:	68bb      	ldr	r3, [r7, #8]
   d4a5a:	ebc9 0104 	rsb	r1, r9, r4
   d4a5e:	428b      	cmp	r3, r1
   d4a60:	d905      	bls.n	d4a6e <_Z11XBeeHandlerv+0x52>
   d4a62:	4638      	mov	r0, r7
   d4a64:	f004 fa3c 	bl	d8ee0 <_ZNK6String6charAtEj>
   d4a68:	f804 0b01 	strb.w	r0, [r4], #1
   d4a6c:	e7f4      	b.n	d4a58 <_Z11XBeeHandlerv+0x3c>
        processCommand(buffer,2,true);
   d4a6e:	2201      	movs	r2, #1
   d4a70:	2102      	movs	r1, #2
   d4a72:	4648      	mov	r0, r9
   d4a74:	f7ff fd86 	bl	d4584 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   d4a78:	f004 fbe8 	bl	d924c <_Z16_fetch_usbserialv>
   d4a7c:	4918      	ldr	r1, [pc, #96]	; (d4ae0 <_Z11XBeeHandlerv+0xc4>)
   d4a7e:	f004 f810 	bl	d8aa2 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   d4a82:	f004 fbe3 	bl	d924c <_Z16_fetch_usbserialv>
   d4a86:	6839      	ldr	r1, [r7, #0]
   d4a88:	f004 f80b 	bl	d8aa2 <_ZN5Print7printlnEPKc>
        if(logMessages){
   d4a8c:	7833      	ldrb	r3, [r6, #0]
   d4a8e:	b1db      	cbz	r3, d4ac8 <_Z11XBeeHandlerv+0xac>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4a90:	f898 3010 	ldrb.w	r3, [r8, #16]
   d4a94:	b92b      	cbnz	r3, d4aa2 <_Z11XBeeHandlerv+0x86>
   d4a96:	f244 2202 	movw	r2, #16898	; 0x4202
   d4a9a:	4912      	ldr	r1, [pc, #72]	; (d4ae4 <_Z11XBeeHandlerv+0xc8>)
   d4a9c:	4812      	ldr	r0, [pc, #72]	; (d4ae8 <_Z11XBeeHandlerv+0xcc>)
   d4a9e:	f7ff fb7f 	bl	d41a0 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   d4aa2:	4639      	mov	r1, r7
   d4aa4:	f107 0010 	add.w	r0, r7, #16
   d4aa8:	f004 f9d1 	bl	d8e4e <_ZN6StringC1ERKS_>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4aac:	f107 0310 	add.w	r3, r7, #16
   d4ab0:	4a0e      	ldr	r2, [pc, #56]	; (d4aec <_Z11XBeeHandlerv+0xd0>)
   d4ab2:	480f      	ldr	r0, [pc, #60]	; (d4af0 <_Z11XBeeHandlerv+0xd4>)
   d4ab4:	2101      	movs	r1, #1
   d4ab6:	f004 f81e 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
   d4aba:	f107 0010 	add.w	r0, r7, #16
   d4abe:	f004 f95d 	bl	d8d7c <_ZN6StringD1Ev>
            logFile.close();
   d4ac2:	4809      	ldr	r0, [pc, #36]	; (d4ae8 <_Z11XBeeHandlerv+0xcc>)
   d4ac4:	f000 fcde 	bl	d5484 <_ZN7FatFile5closeEv>
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
   d4ac8:	4638      	mov	r0, r7
   d4aca:	f004 f957 	bl	d8d7c <_ZN6StringD1Ev>
   d4ace:	46ad      	mov	sp, r5
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
    while(Serial1.available()){
   d4ad0:	e7ab      	b.n	d4a2a <_Z11XBeeHandlerv+0xe>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
}
   d4ad2:	3724      	adds	r7, #36	; 0x24
   d4ad4:	46bd      	mov	sp, r7
   d4ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4ada:	bf00      	nop
   d4adc:	2003d6e0 	.word	0x2003d6e0
   d4ae0:	000da719 	.word	0x000da719
   d4ae4:	2003d6fc 	.word	0x2003d6fc
   d4ae8:	2003d7a0 	.word	0x2003d7a0
   d4aec:	000da72b 	.word	0x000da72b
   d4af0:	2003d790 	.word	0x2003d790

000d4af4 <_Z7BLEScani>:
        }

    }
}

void BLEScan(int BotNumber){
   d4af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4af8:	b094      	sub	sp, #80	; 0x50
   d4afa:	4680      	mov	r8, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d4afc:	f002 fddc 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4b00:	2214      	movs	r2, #20
   d4b02:	4945      	ldr	r1, [pc, #276]	; (d4c18 <_Z7BLEScani+0x124>)
   d4b04:	f002 fe2e 	bl	d7764 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   d4b08:	4607      	mov	r7, r0
   d4b0a:	2800      	cmp	r0, #0
   d4b0c:	f000 8081 	beq.w	d4c12 <_Z7BLEScani+0x11e>
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4b10:	f8df 9104 	ldr.w	r9, [pc, #260]	; d4c18 <_Z7BLEScani+0x124>
   d4b14:	2500      	movs	r5, #0
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4b16:	b2ee      	uxtb	r6, r5
   d4b18:	42b7      	cmp	r7, r6
   d4b1a:	d97a      	bls.n	d4c12 <_Z7BLEScani+0x11e>
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4b1c:	2454      	movs	r4, #84	; 0x54
   d4b1e:	fb04 9406 	mla	r4, r4, r6, r9

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4b22:	a802      	add	r0, sp, #8
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4b24:	3408      	adds	r4, #8

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4b26:	f002 f9f5 	bl	d6f14 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4b2a:	2201      	movs	r2, #1
   d4b2c:	a902      	add	r1, sp, #8
   d4b2e:	4620      	mov	r0, r4
   d4b30:	f002 fbf8 	bl	d7324 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4b34:	2208      	movs	r2, #8
void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4b36:	4682      	mov	sl, r0
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4b38:	4669      	mov	r1, sp
   d4b3a:	4838      	ldr	r0, [pc, #224]	; (d4c1c <_Z7BLEScani+0x128>)
   d4b3c:	f002 fbb0 	bl	d72a0 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d4b40:	f1ba 0f00 	cmp.w	sl, #0
   d4b44:	d063      	beq.n	d4c0e <_Z7BLEScani+0x11a>
   d4b46:	4936      	ldr	r1, [pc, #216]	; (d4c20 <_Z7BLEScani+0x12c>)
   d4b48:	a802      	add	r0, sp, #8
   d4b4a:	f002 fa83 	bl	d7054 <_ZNK8particle7BleUuideqERKS0_>
   d4b4e:	2800      	cmp	r0, #0
   d4b50:	d05d      	beq.n	d4c0e <_Z7BLEScani+0x11a>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   d4b52:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d4b56:	d003      	beq.n	d4b60 <_Z7BLEScani+0x6c>
   d4b58:	f89d 3000 	ldrb.w	r3, [sp]
   d4b5c:	4598      	cmp	r8, r3
   d4b5e:	d156      	bne.n	d4c0e <_Z7BLEScani+0x11a>
				    peer = BLE.connect(scanResults[ii].address);
   d4b60:	f002 fdaa 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4b64:	4a2c      	ldr	r2, [pc, #176]	; (d4c18 <_Z7BLEScani+0x124>)
   d4b66:	2154      	movs	r1, #84	; 0x54
   d4b68:	fb01 2206 	mla	r2, r1, r6, r2
   d4b6c:	2301      	movs	r3, #1
   d4b6e:	4601      	mov	r1, r0
   d4b70:	a80c      	add	r0, sp, #48	; 0x30
   d4b72:	f003 faf7 	bl	d8164 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4b76:	a90c      	add	r1, sp, #48	; 0x30
   d4b78:	482a      	ldr	r0, [pc, #168]	; (d4c24 <_Z7BLEScani+0x130>)
   d4b7a:	f002 ff32 	bl	d79e2 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4b7e:	a80c      	add	r0, sp, #48	; 0x30
   d4b80:	f002 fe53 	bl	d782a <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   d4b84:	4827      	ldr	r0, [pc, #156]	; (d4c24 <_Z7BLEScani+0x130>)
   d4b86:	f002 fd37 	bl	d75f8 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4b8a:	2800      	cmp	r0, #0
   d4b8c:	d041      	beq.n	d4c12 <_Z7BLEScani+0x11e>
                        uint8_t bufName[BLE_MAX_ADV_DATA_LEN];
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
   d4b8e:	221f      	movs	r2, #31
   d4b90:	a90c      	add	r1, sp, #48	; 0x30
   d4b92:	4620      	mov	r0, r4
   d4b94:	f002 fb84 	bl	d72a0 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d4b98:	4a23      	ldr	r2, [pc, #140]	; (d4c28 <_Z7BLEScani+0x134>)
   d4b9a:	4924      	ldr	r1, [pc, #144]	; (d4c2c <_Z7BLEScani+0x138>)
   d4b9c:	4821      	ldr	r0, [pc, #132]	; (d4c24 <_Z7BLEScani+0x130>)
   d4b9e:	f002 fefc 	bl	d799a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d4ba2:	4a23      	ldr	r2, [pc, #140]	; (d4c30 <_Z7BLEScani+0x13c>)
   d4ba4:	4923      	ldr	r1, [pc, #140]	; (d4c34 <_Z7BLEScani+0x140>)
   d4ba6:	481f      	ldr	r0, [pc, #124]	; (d4c24 <_Z7BLEScani+0x130>)
   d4ba8:	f002 fef7 	bl	d799a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   d4bac:	4a22      	ldr	r2, [pc, #136]	; (d4c38 <_Z7BLEScani+0x144>)
   d4bae:	4923      	ldr	r1, [pc, #140]	; (d4c3c <_Z7BLEScani+0x148>)
   d4bb0:	481c      	ldr	r0, [pc, #112]	; (d4c24 <_Z7BLEScani+0x130>)
   d4bb2:	f002 fef2 	bl	d799a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   d4bb6:	f004 fb49 	bl	d924c <_Z16_fetch_usbserialv>
   d4bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   d4bbe:	4920      	ldr	r1, [pc, #128]	; (d4c40 <_Z7BLEScani+0x14c>)
   d4bc0:	f7ff fbc8 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
   d4bc4:	4b1f      	ldr	r3, [pc, #124]	; (d4c44 <_Z7BLEScani+0x150>)
                        bool newBot = true;
                        for(WaterBot w: WaterBots){
                            if(bufName[0] == w.botNum) newBot = false;
   d4bc6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d4bca:	685d      	ldr	r5, [r3, #4]
   d4bcc:	6819      	ldr	r1, [r3, #0]
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
						Serial.printlnf("Connected to Bot %d",bufName[0]);
                        bool newBot = true;
   d4bce:	2201      	movs	r2, #1
   d4bd0:	461c      	mov	r4, r3
                        for(WaterBot w: WaterBots){
   d4bd2:	428d      	cmp	r5, r1
   d4bd4:	d005      	beq.n	d4be2 <_Z7BLEScani+0xee>
                            if(bufName[0] == w.botNum) newBot = false;
   d4bd6:	f811 3b14 	ldrb.w	r3, [r1], #20
   d4bda:	4283      	cmp	r3, r0
   d4bdc:	bf08      	it	eq
   d4bde:	2200      	moveq	r2, #0
   d4be0:	e7f7      	b.n	d4bd2 <_Z7BLEScani+0xde>
                        }
                        if(newBot){
   d4be2:	b1b2      	cbz	r2, d4c12 <_Z7BLEScani+0x11e>
                            Serial.println("Found a new water bot ID");
   d4be4:	f004 fb32 	bl	d924c <_Z16_fetch_usbserialv>
   d4be8:	4917      	ldr	r1, [pc, #92]	; (d4c48 <_Z7BLEScani+0x154>)
   d4bea:	f003 ff5a 	bl	d8aa2 <_ZN5Print7printlnEPKc>
                            WaterBot newWaterbot;
                            newWaterbot.BLEAvail = true;
   d4bee:	2301      	movs	r3, #1
                            newWaterbot.botNum = bufName[0];
   d4bf0:	a914      	add	r1, sp, #80	; 0x50
                            if(bufName[0] == w.botNum) newBot = false;
                        }
                        if(newBot){
                            Serial.println("Found a new water bot ID");
                            WaterBot newWaterbot;
                            newWaterbot.BLEAvail = true;
   d4bf2:	f88d 301e 	strb.w	r3, [sp, #30]
                            newWaterbot.botNum = bufName[0];
   d4bf6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d4bfa:	f801 3d34 	strb.w	r3, [r1, #-52]!
                            WaterBots.push_back(newWaterbot);
   d4bfe:	4811      	ldr	r0, [pc, #68]	; (d4c44 <_Z7BLEScani+0x150>)
   d4c00:	f7ff fcac 	bl	d455c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                            BLEBot = &WaterBots.back();
   d4c04:	6863      	ldr	r3, [r4, #4]
   d4c06:	4a11      	ldr	r2, [pc, #68]	; (d4c4c <_Z7BLEScani+0x158>)
   d4c08:	3b14      	subs	r3, #20
   d4c0a:	6013      	str	r3, [r2, #0]
                    break;
                }
			}
		}
	}
}
   d4c0c:	e001      	b.n	d4c12 <_Z7BLEScani+0x11e>
   d4c0e:	3501      	adds	r5, #1
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4c10:	e781      	b.n	d4b16 <_Z7BLEScani+0x22>
                    break;
                }
			}
		}
	}
}
   d4c12:	b014      	add	sp, #80	; 0x50
   d4c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4c18:	2003d810 	.word	0x2003d810
   d4c1c:	2003d818 	.word	0x2003d818
   d4c20:	2003d76c 	.word	0x2003d76c
   d4c24:	2003dea0 	.word	0x2003dea0
   d4c28:	2003d6cc 	.word	0x2003d6cc
   d4c2c:	2003d6f4 	.word	0x2003d6f4
   d4c30:	2003d7fc 	.word	0x2003d7fc
   d4c34:	2003d764 	.word	0x2003d764
   d4c38:	2003d7e8 	.word	0x2003d7e8
   d4c3c:	2003e330 	.word	0x2003e330
   d4c40:	000da74c 	.word	0x000da74c
   d4c44:	2003d724 	.word	0x2003d724
   d4c48:	000da673 	.word	0x000da673
   d4c4c:	2003e32c 	.word	0x2003e32c

000d4c50 <_Z13DataOffloaderv>:

void DataOffloader(){
   d4c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d4c54:	2200      	movs	r2, #0
			}
		}
	}
}

void DataOffloader(){
   d4c56:	b088      	sub	sp, #32
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d4c58:	4940      	ldr	r1, [pc, #256]	; (d4d5c <_Z13DataOffloaderv+0x10c>)
   d4c5a:	4841      	ldr	r0, [pc, #260]	; (d4d60 <_Z13DataOffloaderv+0x110>)
   d4c5c:	f7ff faa0 	bl	d41a0 <_ZN7FatFile4openEPKci>
   d4c60:	2401      	movs	r4, #1
   d4c62:	b118      	cbz	r0, d4c6c <_Z13DataOffloaderv+0x1c>
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
        peerRxCharacteristic.setValue(OffloadBuf,10);
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d4c64:	4d3f      	ldr	r5, [pc, #252]	; (d4d64 <_Z13DataOffloaderv+0x114>)

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4c66:	4f40      	ldr	r7, [pc, #256]	; (d4d68 <_Z13DataOffloaderv+0x118>)
   d4c68:	462e      	mov	r6, r5
   d4c6a:	e010      	b.n	d4c8e <_Z13DataOffloaderv+0x3e>
}

void DataOffloader(){
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
        offloadingDone = true;
   d4c6c:	4b3f      	ldr	r3, [pc, #252]	; (d4d6c <_Z13DataOffloaderv+0x11c>)
   d4c6e:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   d4c70:	f004 faec 	bl	d924c <_Z16_fetch_usbserialv>
   d4c74:	493e      	ldr	r1, [pc, #248]	; (d4d70 <_Z13DataOffloaderv+0x120>)
   d4c76:	f003 ff14 	bl	d8aa2 <_ZN5Print7printlnEPKc>
        return;
   d4c7a:	e06b      	b.n	d4d54 <_Z13DataOffloaderv+0x104>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
        offloadingDone = false;
        while(!offloadingDone) delay(100);
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   d4c7c:	f004 fae6 	bl	d924c <_Z16_fetch_usbserialv>
   d4c80:	6833      	ldr	r3, [r6, #0]
   d4c82:	493c      	ldr	r1, [pc, #240]	; (d4d74 <_Z13DataOffloaderv+0x124>)
   d4c84:	781a      	ldrb	r2, [r3, #0]
   d4c86:	f7ff fb65 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        OffloadingBot++;
   d4c8a:	3401      	adds	r4, #1
   d4c8c:	b2e4      	uxtb	r4, r4
    if (!logDir.open("/")) {
        offloadingDone = true;
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
        return;
    }
    while(OffloadingBot <= WaterBots.size()){
   d4c8e:	e897 000c 	ldmia.w	r7, {r2, r3}
   d4c92:	1a9b      	subs	r3, r3, r2
   d4c94:	4a38      	ldr	r2, [pc, #224]	; (d4d78 <_Z13DataOffloaderv+0x128>)
   d4c96:	109b      	asrs	r3, r3, #2
   d4c98:	4353      	muls	r3, r2
   d4c9a:	429c      	cmp	r4, r3
   d4c9c:	d854      	bhi.n	d4d48 <_Z13DataOffloaderv+0xf8>
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   d4c9e:	f10d 0808 	add.w	r8, sp, #8
   d4ca2:	4623      	mov	r3, r4
   d4ca4:	4a35      	ldr	r2, [pc, #212]	; (d4d7c <_Z13DataOffloaderv+0x12c>)
   d4ca6:	210a      	movs	r1, #10
   d4ca8:	4640      	mov	r0, r8
   d4caa:	f002 f871 	bl	d6d90 <snprintf>
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d4cae:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
   d4cb2:	ab05      	add	r3, sp, #20
   d4cb4:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d4cb6:	a905      	add	r1, sp, #20
    while(OffloadingBot <= WaterBots.size()){
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d4cb8:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d4cba:	4831      	ldr	r0, [pc, #196]	; (d4d80 <_Z13DataOffloaderv+0x130>)
   d4cbc:	2300      	movs	r3, #0
   d4cbe:	220a      	movs	r2, #10
   d4cc0:	f002 fb8a 	bl	d73d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d4cc4:	f004 fac2 	bl	d924c <_Z16_fetch_usbserialv>
   d4cc8:	682b      	ldr	r3, [r5, #0]
   d4cca:	492e      	ldr	r1, [pc, #184]	; (d4d84 <_Z13DataOffloaderv+0x134>)
   d4ccc:	781a      	ldrb	r2, [r3, #0]
   d4cce:	f7ff fb41 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        delay(1000);
   d4cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4cd6:	f002 f873 	bl	d6dc0 <delay>
        if(BLEBot->botNum != OffloadingBot){
   d4cda:	682b      	ldr	r3, [r5, #0]
   d4cdc:	781b      	ldrb	r3, [r3, #0]
   d4cde:	42a3      	cmp	r3, r4
   d4ce0:	d01f      	beq.n	d4d22 <_Z13DataOffloaderv+0xd2>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   d4ce2:	f004 fab3 	bl	d924c <_Z16_fetch_usbserialv>
   d4ce6:	682b      	ldr	r3, [r5, #0]
   d4ce8:	4a27      	ldr	r2, [pc, #156]	; (d4d88 <_Z13DataOffloaderv+0x138>)
   d4cea:	781b      	ldrb	r3, [r3, #0]
   d4cec:	9400      	str	r4, [sp, #0]
   d4cee:	2101      	movs	r1, #1
   d4cf0:	f003 ff01 	bl	d8af6 <_ZN5Print11printf_implEbPKcz>
            BLE.disconnect();
   d4cf4:	f002 fce0 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4cf8:	f002 fedc 	bl	d7ab4 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   d4cfc:	f002 fcdc 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d00:	f002 fd5a 	bl	d77b8 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4d04:	b930      	cbnz	r0, d4d14 <_Z13DataOffloaderv+0xc4>
                BLEScan(OffloadingBot);
   d4d06:	4620      	mov	r0, r4
   d4d08:	f7ff fef4 	bl	d4af4 <_Z7BLEScani>
                delay(50);
   d4d0c:	2032      	movs	r0, #50	; 0x32
   d4d0e:	f002 f857 	bl	d6dc0 <delay>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
        delay(1000);
        if(BLEBot->botNum != OffloadingBot){
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
            BLE.disconnect();
            while(!BLE.connected()){
   d4d12:	e7f3      	b.n	d4cfc <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
                delay(50);
            }
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   d4d14:	f004 fa9a 	bl	d924c <_Z16_fetch_usbserialv>
   d4d18:	6833      	ldr	r3, [r6, #0]
   d4d1a:	491c      	ldr	r1, [pc, #112]	; (d4d8c <_Z13DataOffloaderv+0x13c>)
   d4d1c:	781a      	ldrb	r2, [r3, #0]
   d4d1e:	f7ff fb19 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   d4d22:	f004 fa93 	bl	d924c <_Z16_fetch_usbserialv>
   d4d26:	6833      	ldr	r3, [r6, #0]
   d4d28:	4919      	ldr	r1, [pc, #100]	; (d4d90 <_Z13DataOffloaderv+0x140>)
   d4d2a:	781a      	ldrb	r2, [r3, #0]
   d4d2c:	f7ff fb12 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        offloadingDone = false;
   d4d30:	4b0e      	ldr	r3, [pc, #56]	; (d4d6c <_Z13DataOffloaderv+0x11c>)
   d4d32:	2200      	movs	r2, #0
   d4d34:	701a      	strb	r2, [r3, #0]
   d4d36:	4698      	mov	r8, r3
        while(!offloadingDone) delay(100);
   d4d38:	f898 3000 	ldrb.w	r3, [r8]
   d4d3c:	2b00      	cmp	r3, #0
   d4d3e:	d19d      	bne.n	d4c7c <_Z13DataOffloaderv+0x2c>
   d4d40:	2064      	movs	r0, #100	; 0x64
   d4d42:	f002 f83d 	bl	d6dc0 <delay>
   d4d46:	e7f7      	b.n	d4d38 <_Z13DataOffloaderv+0xe8>
   d4d48:	4812      	ldr	r0, [pc, #72]	; (d4d94 <_Z13DataOffloaderv+0x144>)
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
   d4d4a:	7c03      	ldrb	r3, [r0, #16]
   d4d4c:	b113      	cbz	r3, d4d54 <_Z13DataOffloaderv+0x104>
   d4d4e:	3010      	adds	r0, #16
   d4d50:	f000 fb98 	bl	d5484 <_ZN7FatFile5closeEv>
}
   d4d54:	b008      	add	sp, #32
   d4d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d5a:	bf00      	nop
   d4d5c:	000da760 	.word	0x000da760
   d4d60:	2003d6a4 	.word	0x2003d6a4
   d4d64:	2003e32c 	.word	0x2003e32c
   d4d68:	2003d724 	.word	0x2003d724
   d4d6c:	2003d6c8 	.word	0x2003d6c8
   d4d70:	000da762 	.word	0x000da762
   d4d74:	000da856 	.word	0x000da856
   d4d78:	cccccccd 	.word	0xcccccccd
   d4d7c:	000da7a3 	.word	0x000da7a3
   d4d80:	2003d764 	.word	0x2003d764
   d4d84:	000da7ac 	.word	0x000da7ac
   d4d88:	000da7d9 	.word	0x000da7d9
   d4d8c:	000da812 	.word	0x000da812
   d4d90:	000da833 	.word	0x000da833
   d4d94:	2003d694 	.word	0x2003d694

000d4d98 <loop>:
        Serial.println("Error: could not connect to SD card!");
        logMessages = false;
    }
}

void loop() {
   d4d98:	b510      	push	{r4, lr}
    
    if (BLE.connected()) {
   d4d9a:	f002 fc8d 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d9e:	f002 fd0b 	bl	d77b8 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4da2:	4601      	mov	r1, r0
   d4da4:	b190      	cbz	r0, d4dcc <loop+0x34>
        if(BLEBot) Serial.printlnf("Connected to Waterbot %d", BLEBot->botNum);
   d4da6:	4c17      	ldr	r4, [pc, #92]	; (d4e04 <loop+0x6c>)
   d4da8:	6823      	ldr	r3, [r4, #0]
   d4daa:	b133      	cbz	r3, d4dba <loop+0x22>
   d4dac:	f004 fa4e 	bl	d924c <_Z16_fetch_usbserialv>
   d4db0:	6823      	ldr	r3, [r4, #0]
   d4db2:	4915      	ldr	r1, [pc, #84]	; (d4e08 <loop+0x70>)
   d4db4:	781a      	ldrb	r2, [r3, #0]
   d4db6:	f7ff facd 	bl	d4354 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

        //char testStr[30] = "CCB1ptsHello from CC Hub!";
        //uint8_t testBuf[30];
        //memcpy(testStr,testBuf,30);
        //peerRxCharacteristic.setValue(testStr);
        digitalWrite(D7,HIGH);
   d4dba:	2101      	movs	r1, #1
   d4dbc:	2007      	movs	r0, #7
   d4dbe:	f004 fb3a 	bl	d9436 <digitalWrite>
        delay(1000);
   d4dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4dc6:	f001 fffb 	bl	d6dc0 <delay>
   d4dca:	e011      	b.n	d4df0 <loop+0x58>
    }
    else {
        digitalWrite(D7,LOW);
   d4dcc:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4dce:	4c0f      	ldr	r4, [pc, #60]	; (d4e0c <loop+0x74>)
        //peerRxCharacteristic.setValue(testStr);
        digitalWrite(D7,HIGH);
        delay(1000);
    }
    else {
        digitalWrite(D7,LOW);
   d4dd0:	f004 fb31 	bl	d9436 <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4dd4:	f001 fda0 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4dd8:	6823      	ldr	r3, [r4, #0]
   d4dda:	1ac0      	subs	r0, r0, r3
   d4ddc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4de0:	d306      	bcc.n	d4df0 <loop+0x58>
   d4de2:	f001 fd99 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
    		// Time to scan
    		lastScan = millis();
   d4de6:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   d4de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4dec:	f7ff fe82 	bl	d4af4 <_Z7BLEScani>
    	}

    }
    if(offloadingMode) DataOffloader();
   d4df0:	4b07      	ldr	r3, [pc, #28]	; (d4e10 <loop+0x78>)
   d4df2:	781b      	ldrb	r3, [r3, #0]
   d4df4:	b10b      	cbz	r3, d4dfa <loop+0x62>
   d4df6:	f7ff ff2b 	bl	d4c50 <_Z13DataOffloaderv>
    XBeeHandler();
}
   d4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    		BLEScan(-1);
    	}

    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
   d4dfe:	f7ff be0d 	b.w	d4a1c <_Z11XBeeHandlerv>
   d4e02:	bf00      	nop
   d4e04:	2003e32c 	.word	0x2003e32c
   d4e08:	000da87d 	.word	0x000da87d
   d4e0c:	2003d71c 	.word	0x2003d71c
   d4e10:	2003d7c4 	.word	0x2003d7c4

000d4e14 <_GLOBAL__sub_I_SystemMode>:
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4e14:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e16:	4d55      	ldr	r5, [pc, #340]	; (d4f6c <_GLOBAL__sub_I_SystemMode+0x158>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4e18:	f001 fd96 	bl	d6948 <HAL_Pin_Map>
   d4e1c:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4e22:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e24:	602c      	str	r4, [r5, #0]
   d4e26:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e28:	71ac      	strb	r4, [r5, #6]
   d4e2a:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e2c:	2003      	movs	r0, #3
   d4e2e:	f001 fedb 	bl	d6be8 <set_system_mode>
#define MAX_ERR_BUF_SIZE    15              //Buffer size for error-return string


// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);
   d4e32:	4a4f      	ldr	r2, [pc, #316]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4e34:	494f      	ldr	r1, [pc, #316]	; (d4f74 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4e36:	4628      	mov	r0, r5
   d4e38:	f004 fb56 	bl	d94e8 <__aeabi_atexit>

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   d4e3c:	494e      	ldr	r1, [pc, #312]	; (d4f78 <_GLOBAL__sub_I_SystemMode+0x164>)
   d4e3e:	484f      	ldr	r0, [pc, #316]	; (d4f7c <_GLOBAL__sub_I_SystemMode+0x168>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4e40:	4d4f      	ldr	r5, [pc, #316]	; (d4f80 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d4e42:	f002 f97d 	bl	d7140 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   d4e46:	494f      	ldr	r1, [pc, #316]	; (d4f84 <_GLOBAL__sub_I_SystemMode+0x170>)
   d4e48:	484f      	ldr	r0, [pc, #316]	; (d4f88 <_GLOBAL__sub_I_SystemMode+0x174>)
   d4e4a:	f002 f979 	bl	d7140 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   d4e4e:	494f      	ldr	r1, [pc, #316]	; (d4f8c <_GLOBAL__sub_I_SystemMode+0x178>)
   d4e50:	484f      	ldr	r0, [pc, #316]	; (d4f90 <_GLOBAL__sub_I_SystemMode+0x17c>)
   d4e52:	f002 f975 	bl	d7140 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   d4e56:	494f      	ldr	r1, [pc, #316]	; (d4f94 <_GLOBAL__sub_I_SystemMode+0x180>)
   d4e58:	484f      	ldr	r0, [pc, #316]	; (d4f98 <_GLOBAL__sub_I_SystemMode+0x184>)
   d4e5a:	f002 f971 	bl	d7140 <_ZN8particle7BleUuidC1EPKc>
   d4e5e:	1928      	adds	r0, r5, r4
   d4e60:	f002 f846 	bl	d6ef0 <_ZN8particle10BleAddressC1Ev>
   d4e64:	f104 0008 	add.w	r0, r4, #8
   d4e68:	4428      	add	r0, r5
   d4e6a:	f002 f9e3 	bl	d7234 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4e6e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4e72:	4428      	add	r0, r5
   d4e74:	3454      	adds	r4, #84	; 0x54
   d4e76:	f002 f9dd 	bl	d7234 <_ZN8particle18BleAdvertisingDataC1Ev>
//BleCharacteristic rxCharacteristic("rxr", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, RemoteService, BLEDataReceived, NULL);

const size_t UART_TX_BUF_SIZE = 30;
const size_t SCAN_RESULT_COUNT = 20;

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d4e7a:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d4e7e:	d1ee      	bne.n	d4e5e <_GLOBAL__sub_I_SystemMode+0x4a>

BleCharacteristic peerTxCharacteristic;
   d4e80:	4846      	ldr	r0, [pc, #280]	; (d4f9c <_GLOBAL__sub_I_SystemMode+0x188>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4e82:	4c47      	ldr	r4, [pc, #284]	; (d4fa0 <_GLOBAL__sub_I_SystemMode+0x18c>)
   d4e84:	f003 f9d2 	bl	d822c <_ZN8particle17BleCharacteristicC1Ev>
   d4e88:	4a39      	ldr	r2, [pc, #228]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4e8a:	4946      	ldr	r1, [pc, #280]	; (d4fa4 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4e8c:	4843      	ldr	r0, [pc, #268]	; (d4f9c <_GLOBAL__sub_I_SystemMode+0x188>)
   d4e8e:	f004 fb2b 	bl	d94e8 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d4e92:	4845      	ldr	r0, [pc, #276]	; (d4fa8 <_GLOBAL__sub_I_SystemMode+0x194>)
   d4e94:	f003 f9ca 	bl	d822c <_ZN8particle17BleCharacteristicC1Ev>
   d4e98:	4a35      	ldr	r2, [pc, #212]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4e9a:	4942      	ldr	r1, [pc, #264]	; (d4fa4 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4e9c:	4842      	ldr	r0, [pc, #264]	; (d4fa8 <_GLOBAL__sub_I_SystemMode+0x194>)
   d4e9e:	f004 fb23 	bl	d94e8 <__aeabi_atexit>
BleCharacteristic peerOffloadCharacteristic;
   d4ea2:	4842      	ldr	r0, [pc, #264]	; (d4fac <_GLOBAL__sub_I_SystemMode+0x198>)
   d4ea4:	f003 f9c2 	bl	d822c <_ZN8particle17BleCharacteristicC1Ev>
   d4ea8:	4a31      	ldr	r2, [pc, #196]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4eaa:	493e      	ldr	r1, [pc, #248]	; (d4fa4 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4eac:	483f      	ldr	r0, [pc, #252]	; (d4fac <_GLOBAL__sub_I_SystemMode+0x198>)
   d4eae:	f004 fb1b 	bl	d94e8 <__aeabi_atexit>
BlePeerDevice peer;
   d4eb2:	483f      	ldr	r0, [pc, #252]	; (d4fb0 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4eb4:	f002 fd12 	bl	d78dc <_ZN8particle13BlePeerDeviceC1Ev>
   d4eb8:	4a2d      	ldr	r2, [pc, #180]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4eba:	493e      	ldr	r1, [pc, #248]	; (d4fb4 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4ebc:	483c      	ldr	r0, [pc, #240]	; (d4fb0 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4ebe:	f004 fb13 	bl	d94e8 <__aeabi_atexit>
   d4ec2:	6823      	ldr	r3, [r4, #0]
   d4ec4:	07db      	lsls	r3, r3, #31
   d4ec6:	d40a      	bmi.n	d4ede <_GLOBAL__sub_I_SystemMode+0xca>
   d4ec8:	4620      	mov	r0, r4
   d4eca:	f7ff f8ea 	bl	d40a2 <__cxa_guard_acquire>
   d4ece:	b130      	cbz	r0, d4ede <_GLOBAL__sub_I_SystemMode+0xca>
   d4ed0:	2101      	movs	r1, #1
   d4ed2:	4839      	ldr	r0, [pc, #228]	; (d4fb8 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d4ed4:	f003 fe64 	bl	d8ba0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4ed8:	4620      	mov	r0, r4
   d4eda:	f7ff f8e7 	bl	d40ac <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4ede:	4b37      	ldr	r3, [pc, #220]	; (d4fbc <_GLOBAL__sub_I_SystemMode+0x1a8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4ee0:	4837      	ldr	r0, [pc, #220]	; (d4fc0 <_GLOBAL__sub_I_SystemMode+0x1ac>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4ee2:	4d38      	ldr	r5, [pc, #224]	; (d4fc4 <_GLOBAL__sub_I_SystemMode+0x1b0>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d4ee4:	4938      	ldr	r1, [pc, #224]	; (d4fc8 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4ee6:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4ee8:	2264      	movs	r2, #100	; 0x64
   d4eea:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d4eee:	4a37      	ldr	r2, [pc, #220]	; (d4fcc <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4ef0:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4ef4:	2201      	movs	r2, #1
   d4ef6:	2400      	movs	r4, #0
   d4ef8:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4efc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4f00:	4a2d      	ldr	r2, [pc, #180]	; (d4fb8 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d4f02:	71dc      	strb	r4, [r3, #7]
   d4f04:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4f08:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4f0c:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4f10:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4f14:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4f18:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4f1c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d4f20:	7404      	strb	r4, [r0, #16]
   d4f22:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f24:	6044      	str	r4, [r0, #4]
   d4f26:	6086      	str	r6, [r0, #8]
   d4f28:	4a11      	ldr	r2, [pc, #68]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4f2a:	f004 fadd 	bl	d94e8 <__aeabi_atexit>
   d4f2e:	4828      	ldr	r0, [pc, #160]	; (d4fd0 <_GLOBAL__sub_I_SystemMode+0x1bc>)
File logFile;
   d4f30:	4a0f      	ldr	r2, [pc, #60]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4f32:	7404      	strb	r4, [r0, #16]
   d4f34:	7444      	strb	r4, [r0, #17]
   d4f36:	6044      	str	r4, [r0, #4]
   d4f38:	6086      	str	r6, [r0, #8]
   d4f3a:	4923      	ldr	r1, [pc, #140]	; (d4fc8 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4f3c:	6005      	str	r5, [r0, #0]
   d4f3e:	f004 fad3 	bl	d94e8 <__aeabi_atexit>
   d4f42:	4824      	ldr	r0, [pc, #144]	; (d4fd4 <_GLOBAL__sub_I_SystemMode+0x1c0>)
File logDir;
   d4f44:	4a0a      	ldr	r2, [pc, #40]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4f46:	7404      	strb	r4, [r0, #16]
   d4f48:	7444      	strb	r4, [r0, #17]
   d4f4a:	6044      	str	r4, [r0, #4]
   d4f4c:	6086      	str	r6, [r0, #8]
   d4f4e:	491e      	ldr	r1, [pc, #120]	; (d4fc8 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4f50:	6005      	str	r5, [r0, #0]
   d4f52:	f004 fac9 	bl	d94e8 <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d4f56:	4820      	ldr	r0, [pc, #128]	; (d4fd8 <_GLOBAL__sub_I_SystemMode+0x1c4>)
    float GPSLat;
    float GPSLon;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
std::vector<WaterBot> WaterBots;
   d4f58:	4a05      	ldr	r2, [pc, #20]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4f5a:	6004      	str	r4, [r0, #0]
   d4f5c:	6044      	str	r4, [r0, #4]
   d4f5e:	6084      	str	r4, [r0, #8]
   d4f60:	491e      	ldr	r1, [pc, #120]	; (d4fdc <_GLOBAL__sub_I_SystemMode+0x1c8>)
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    float GPSLat;
    float GPSLon;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
std::vector<WaterBot> WaterBots;
   d4f66:	f004 babf 	b.w	d94e8 <__aeabi_atexit>
   d4f6a:	bf00      	nop
   d4f6c:	2003d6e4 	.word	0x2003d6e4
   d4f70:	2003d684 	.word	0x2003d684
   d4f74:	000d4181 	.word	0x000d4181
   d4f78:	000da896 	.word	0x000da896
   d4f7c:	2003d76c 	.word	0x2003d76c
   d4f80:	2003d810 	.word	0x2003d810
   d4f84:	000da8bb 	.word	0x000da8bb
   d4f88:	2003d7fc 	.word	0x2003d7fc
   d4f8c:	000da8e0 	.word	0x000da8e0
   d4f90:	2003d6cc 	.word	0x2003d6cc
   d4f94:	000da905 	.word	0x000da905
   d4f98:	2003d7e8 	.word	0x2003d7e8
   d4f9c:	2003d6f4 	.word	0x2003d6f4
   d4fa0:	2003d688 	.word	0x2003d688
   d4fa4:	000d781d 	.word	0x000d781d
   d4fa8:	2003d764 	.word	0x2003d764
   d4fac:	2003e330 	.word	0x2003e330
   d4fb0:	2003dea0 	.word	0x2003dea0
   d4fb4:	000d782b 	.word	0x000d782b
   d4fb8:	2003d68c 	.word	0x2003d68c
   d4fbc:	2003dea8 	.word	0x2003dea8
   d4fc0:	2003d730 	.word	0x2003d730
   d4fc4:	000da3d4 	.word	0x000da3d4
   d4fc8:	000d40cf 	.word	0x000d40cf
   d4fcc:	000da3c8 	.word	0x000da3c8
   d4fd0:	2003d790 	.word	0x2003d790
   d4fd4:	2003d694 	.word	0x2003d694
   d4fd8:	2003d724 	.word	0x2003d724
   d4fdc:	000d4191 	.word	0x000d4191

000d4fe0 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4fe0:	f001 bcb2 	b.w	d6948 <HAL_Pin_Map>

000d4fe4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4fe8:	3024      	adds	r0, #36	; 0x24
   d4fea:	f000 ff17 	bl	d5e1c <_ZN8FatCache4syncEv>
   d4fee:	b128      	cbz	r0, d4ffc <_ZN9FatVolume9cacheSyncEv+0x18>
   d4ff0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4ff8:	f000 bf10 	b.w	d5e1c <_ZN8FatCache4syncEv>
  }
   d4ffc:	bd10      	pop	{r4, pc}

000d4ffe <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4ffe:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5000:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5002:	f043 0304 	orr.w	r3, r3, #4
   d5006:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5008:	f100 0210 	add.w	r2, r0, #16
   d500c:	6880      	ldr	r0, [r0, #8]
   d500e:	f000 bfbb 	b.w	d5f88 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5014 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5018:	7803      	ldrb	r3, [r0, #0]
   d501a:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d501e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5020:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5024:	b10b      	cbz	r3, d502a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5026:	2600      	movs	r6, #0
   d5028:	e02e      	b.n	d5088 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d502a:	6942      	ldr	r2, [r0, #20]
   d502c:	4b18      	ldr	r3, [pc, #96]	; (d5090 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d502e:	429a      	cmp	r2, r3
   d5030:	d8f9      	bhi.n	d5026 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5032:	f7ff ffe4 	bl	d4ffe <_ZN7FatFile10addClusterEv>
   d5036:	4606      	mov	r6, r0
   d5038:	2800      	cmp	r0, #0
   d503a:	d0f4      	beq.n	d5026 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d503c:	6921      	ldr	r1, [r4, #16]
   d503e:	68a0      	ldr	r0, [r4, #8]
   d5040:	f000 ff37 	bl	d5eb2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5044:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5046:	68a0      	ldr	r0, [r4, #8]
   d5048:	2205      	movs	r2, #5
   d504a:	4639      	mov	r1, r7
   d504c:	3024      	adds	r0, #36	; 0x24
   d504e:	f000 ff0c 	bl	d5e6a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5052:	4680      	mov	r8, r0
   d5054:	2800      	cmp	r0, #0
   d5056:	d0e6      	beq.n	d5026 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5058:	4629      	mov	r1, r5
   d505a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d505e:	f004 fcec 	bl	d9a3a <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5062:	2501      	movs	r5, #1
   d5064:	68a3      	ldr	r3, [r4, #8]
   d5066:	791a      	ldrb	r2, [r3, #4]
   d5068:	42aa      	cmp	r2, r5
   d506a:	d909      	bls.n	d5080 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d506c:	4642      	mov	r2, r8
   d506e:	19e9      	adds	r1, r5, r7
   d5070:	6818      	ldr	r0, [r3, #0]
   d5072:	f001 fa7b 	bl	d656c <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5076:	2800      	cmp	r0, #0
   d5078:	d0d5      	beq.n	d5026 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d507a:	3501      	adds	r5, #1
   d507c:	b2ed      	uxtb	r5, r5
   d507e:	e7f1      	b.n	d5064 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5080:	6963      	ldr	r3, [r4, #20]
   d5082:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5086:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5088:	4630      	mov	r0, r6
   d508a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d508e:	bf00      	nop
   d5090:	001ffdff 	.word	0x001ffdff

000d5094 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5094:	b510      	push	{r4, lr}
   d5096:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5098:	6880      	ldr	r0, [r0, #8]
   d509a:	460a      	mov	r2, r1
   d509c:	3024      	adds	r0, #36	; 0x24
   d509e:	69a1      	ldr	r1, [r4, #24]
   d50a0:	f000 fee3 	bl	d5e6a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d50a4:	b120      	cbz	r0, d50b0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d50a6:	88a3      	ldrh	r3, [r4, #4]
   d50a8:	f003 030f 	and.w	r3, r3, #15
   d50ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d50b0:	bd10      	pop	{r4, pc}

000d50b2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d50b2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d50b4:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d50b6:	4605      	mov	r5, r0
   d50b8:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d50ba:	b984      	cbnz	r4, d50de <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d50bc:	2224      	movs	r2, #36	; 0x24
   d50be:	4621      	mov	r1, r4
   d50c0:	f004 fcbb 	bl	d9a3a <memset>

  m_vol = vol;
   d50c4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d50c6:	79f3      	ldrb	r3, [r6, #7]
   d50c8:	2b10      	cmp	r3, #16
   d50ca:	d003      	beq.n	d50d4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d50cc:	2b20      	cmp	r3, #32
   d50ce:	d106      	bne.n	d50de <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d50d0:	2340      	movs	r3, #64	; 0x40
   d50d2:	e000      	b.n	d50d6 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d50d4:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d50d6:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d50d8:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d50da:	70a8      	strb	r0, [r5, #2]
   d50dc:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d50de:	2000      	movs	r0, #0
   d50e0:	bd70      	pop	{r4, r5, r6, pc}

000d50e2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d50e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50e6:	7803      	ldrb	r3, [r0, #0]
   d50e8:	4604      	mov	r4, r0
   d50ea:	4689      	mov	r9, r1
   d50ec:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d50ee:	b14b      	cbz	r3, d5104 <_ZN7FatFile4readEPvj+0x22>
   d50f0:	7882      	ldrb	r2, [r0, #2]
   d50f2:	07d1      	lsls	r1, r2, #31
   d50f4:	d506      	bpl.n	d5104 <_ZN7FatFile4readEPvj+0x22>
   d50f6:	e00c      	b.n	d5112 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d50f8:	465a      	mov	r2, fp
   d50fa:	6921      	ldr	r1, [r4, #16]
   d50fc:	f000 fedf 	bl	d5ebe <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5100:	2800      	cmp	r0, #0
   d5102:	da3d      	bge.n	d5180 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5104:	7863      	ldrb	r3, [r4, #1]
   d5106:	f043 0302 	orr.w	r3, r3, #2
   d510a:	7063      	strb	r3, [r4, #1]
  return -1;
   d510c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5110:	e097      	b.n	d5242 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5112:	071a      	lsls	r2, r3, #28
   d5114:	d503      	bpl.n	d511e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5116:	69e3      	ldr	r3, [r4, #28]
   d5118:	6962      	ldr	r2, [r4, #20]
   d511a:	1a9b      	subs	r3, r3, r2
   d511c:	e007      	b.n	d512e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d511e:	069a      	lsls	r2, r3, #26
   d5120:	d508      	bpl.n	d5134 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5122:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5124:	891a      	ldrh	r2, [r3, #8]
   d5126:	6963      	ldr	r3, [r4, #20]
   d5128:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d512c:	b29b      	uxth	r3, r3
   d512e:	429d      	cmp	r5, r3
   d5130:	bf28      	it	cs
   d5132:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5134:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5136:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d513a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d513e:	2e00      	cmp	r6, #0
   d5140:	d035      	beq.n	d51ae <_ZN7FatFile4readEPvj+0xcc>
   d5142:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5144:	6963      	ldr	r3, [r4, #20]
   d5146:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5148:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d514c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5150:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5154:	d002      	beq.n	d515c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5156:	6a03      	ldr	r3, [r0, #32]
   d5158:	4419      	add	r1, r3
   d515a:	e01d      	b.n	d5198 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d515c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5160:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5164:	f1ba 0f00 	cmp.w	sl, #0
   d5168:	d110      	bne.n	d518c <_ZN7FatFile4readEPvj+0xaa>
   d516a:	f1b8 0f00 	cmp.w	r8, #0
   d516e:	d10d      	bne.n	d518c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5170:	2b00      	cmp	r3, #0
   d5172:	d1c1      	bne.n	d50f8 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5174:	0653      	lsls	r3, r2, #25
   d5176:	bf4c      	ite	mi
   d5178:	6a03      	ldrmi	r3, [r0, #32]
   d517a:	6a23      	ldrpl	r3, [r4, #32]
   d517c:	6123      	str	r3, [r4, #16]
   d517e:	e005      	b.n	d518c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5180:	d104      	bne.n	d518c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5182:	7823      	ldrb	r3, [r4, #0]
   d5184:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5188:	d111      	bne.n	d51ae <_ZN7FatFile4readEPvj+0xcc>
   d518a:	e7bb      	b.n	d5104 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d518c:	6921      	ldr	r1, [r4, #16]
   d518e:	68a0      	ldr	r0, [r4, #8]
   d5190:	f000 fe8f 	bl	d5eb2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5194:	eb08 0100 	add.w	r1, r8, r0
   d5198:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d519a:	f1ba 0f00 	cmp.w	sl, #0
   d519e:	d135      	bne.n	d520c <_ZN7FatFile4readEPvj+0x12a>
   d51a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d51a4:	d332      	bcc.n	d520c <_ZN7FatFile4readEPvj+0x12a>
   d51a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d51a8:	4299      	cmp	r1, r3
   d51aa:	d102      	bne.n	d51b2 <_ZN7FatFile4readEPvj+0xd0>
   d51ac:	e02e      	b.n	d520c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d51ae:	1ba8      	subs	r0, r5, r6
   d51b0:	e047      	b.n	d5242 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d51b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d51b6:	d31b      	bcc.n	d51f0 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d51b8:	7822      	ldrb	r2, [r4, #0]
   d51ba:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d51bc:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d51c0:	d406      	bmi.n	d51d0 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d51c2:	7902      	ldrb	r2, [r0, #4]
   d51c4:	ebc8 0202 	rsb	r2, r8, r2
   d51c8:	b2d2      	uxtb	r2, r2
   d51ca:	4592      	cmp	sl, r2
   d51cc:	bf28      	it	cs
   d51ce:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51d0:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d51d2:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51d6:	d207      	bcs.n	d51e8 <_ZN7FatFile4readEPvj+0x106>
   d51d8:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d51da:	4653      	mov	r3, sl
   d51dc:	464a      	mov	r2, r9
   d51de:	6800      	ldr	r0, [r0, #0]
   d51e0:	f001 f982 	bl	d64e8 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d51e4:	b960      	cbnz	r0, d5200 <_ZN7FatFile4readEPvj+0x11e>
   d51e6:	e78d      	b.n	d5104 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51e8:	4453      	add	r3, sl
   d51ea:	4299      	cmp	r1, r3
   d51ec:	d321      	bcc.n	d5232 <_ZN7FatFile4readEPvj+0x150>
   d51ee:	e7f3      	b.n	d51d8 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d51f0:	464a      	mov	r2, r9
   d51f2:	6800      	ldr	r0, [r0, #0]
   d51f4:	f001 f930 	bl	d6458 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d51f8:	2800      	cmp	r0, #0
   d51fa:	d083      	beq.n	d5104 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d51fc:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5200:	6963      	ldr	r3, [r4, #20]
   d5202:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5204:	44b9      	add	r9, r7
    m_curPosition += n;
   d5206:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5208:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d520a:	e798      	b.n	d513e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d520c:	2200      	movs	r2, #0
   d520e:	3024      	adds	r0, #36	; 0x24
   d5210:	f000 fe2b 	bl	d5e6a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5214:	2800      	cmp	r0, #0
   d5216:	f43f af75 	beq.w	d5104 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d521a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d521e:	42b7      	cmp	r7, r6
   d5220:	bf28      	it	cs
   d5222:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5224:	eb00 010a 	add.w	r1, r0, sl
   d5228:	463a      	mov	r2, r7
   d522a:	4648      	mov	r0, r9
   d522c:	f004 fbdf 	bl	d99ee <memcpy>
   d5230:	e7e6      	b.n	d5200 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5232:	3024      	adds	r0, #36	; 0x24
   d5234:	9101      	str	r1, [sp, #4]
   d5236:	f000 fdf1 	bl	d5e1c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d523a:	9901      	ldr	r1, [sp, #4]
   d523c:	2800      	cmp	r0, #0
   d523e:	d1cb      	bne.n	d51d8 <_ZN7FatFile4readEPvj+0xf6>
   d5240:	e760      	b.n	d5104 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5242:	b003      	add	sp, #12
   d5244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5248 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5248:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d524a:	2201      	movs	r2, #1
   d524c:	f10d 0107 	add.w	r1, sp, #7
   d5250:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5252:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5254:	6905      	ldr	r5, [r0, #16]
   d5256:	f7ff ff44 	bl	d50e2 <_ZN7FatFile4readEPvj>
   d525a:	2801      	cmp	r0, #1
   d525c:	bf05      	ittet	eq
   d525e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5262:	6166      	streq	r6, [r4, #20]
   d5264:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d5268:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d526a:	b002      	add	sp, #8
   d526c:	bd70      	pop	{r4, r5, r6, pc}

000d526e <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d526e:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5270:	6943      	ldr	r3, [r0, #20]
   d5272:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5276:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5278:	b105      	cbz	r5, d527c <_ZN7FatFile12readDirCacheEb+0xe>
   d527a:	b969      	cbnz	r1, d5298 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d527c:	2201      	movs	r2, #1
   d527e:	f10d 0107 	add.w	r1, sp, #7
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff ff2d 	bl	d50e2 <_ZN7FatFile4readEPvj>
   d5288:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d528a:	2801      	cmp	r0, #1
   d528c:	d001      	beq.n	d5292 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d528e:	2000      	movs	r0, #0
   d5290:	e008      	b.n	d52a4 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5292:	6963      	ldr	r3, [r4, #20]
   d5294:	331f      	adds	r3, #31
   d5296:	e000      	b.n	d529a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5298:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d529a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d529c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d529e:	3030      	adds	r0, #48	; 0x30
   d52a0:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d52a4:	b003      	add	sp, #12
   d52a6:	bd30      	pop	{r4, r5, pc}

000d52a8 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d52a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d52ac:	460e      	mov	r6, r1
   d52ae:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d52b0:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d52b2:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d52b4:	2900      	cmp	r1, #0
   d52b6:	d039      	beq.n	d532c <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d52b8:	6945      	ldr	r5, [r0, #20]
   d52ba:	42b5      	cmp	r5, r6
   d52bc:	d03a      	beq.n	d5334 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d52be:	b90e      	cbnz	r6, d52c4 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d52c0:	6106      	str	r6, [r0, #16]
    goto done;
   d52c2:	e031      	b.n	d5328 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d52c4:	070b      	lsls	r3, r1, #28
   d52c6:	d503      	bpl.n	d52d0 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d52c8:	69c3      	ldr	r3, [r0, #28]
   d52ca:	429e      	cmp	r6, r3
   d52cc:	d82e      	bhi.n	d532c <_ZN7FatFile7seekSetEm+0x84>
   d52ce:	e007      	b.n	d52e0 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d52d0:	0688      	lsls	r0, r1, #26
   d52d2:	d505      	bpl.n	d52e0 <_ZN7FatFile7seekSetEm+0x38>
   d52d4:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d52d6:	891b      	ldrh	r3, [r3, #8]
   d52d8:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d52dc:	d826      	bhi.n	d532c <_ZN7FatFile7seekSetEm+0x84>
   d52de:	e023      	b.n	d5328 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d52e0:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d52e4:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d52e8:	1e6a      	subs	r2, r5, #1
   d52ea:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d52ee:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d52f0:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d52f2:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d52f4:	429a      	cmp	r2, r3
   d52f6:	d800      	bhi.n	d52fa <_ZN7FatFile7seekSetEm+0x52>
   d52f8:	b94d      	cbnz	r5, d530e <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d52fa:	064a      	lsls	r2, r1, #25
   d52fc:	bf4c      	ite	mi
   d52fe:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5302:	6a22      	ldrpl	r2, [r4, #32]
   d5304:	6122      	str	r2, [r4, #16]
   d5306:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5308:	f104 0810 	add.w	r8, r4, #16
   d530c:	e00a      	b.n	d5324 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d530e:	1a9b      	subs	r3, r3, r2
   d5310:	e7f9      	b.n	d5306 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5312:	4642      	mov	r2, r8
   d5314:	6921      	ldr	r1, [r4, #16]
   d5316:	68a0      	ldr	r0, [r4, #8]
   d5318:	f000 fdd1 	bl	d5ebe <_ZN9FatVolume6fatGetEmPm>
   d531c:	2800      	cmp	r0, #0
   d531e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d5322:	dd03      	ble.n	d532c <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5324:	2d00      	cmp	r5, #0
   d5326:	d1f4      	bne.n	d5312 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5328:	6166      	str	r6, [r4, #20]
   d532a:	e003      	b.n	d5334 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d532c:	6127      	str	r7, [r4, #16]
  return false;
   d532e:	2000      	movs	r0, #0
   d5330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5334:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d533a <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d533a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d533c:	460f      	mov	r7, r1
   d533e:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5340:	2100      	movs	r1, #0
   d5342:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5344:	4604      	mov	r4, r0
   d5346:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5348:	f004 fb77 	bl	d9a3a <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d534c:	68b8      	ldr	r0, [r7, #8]
   d534e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5350:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5354:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5356:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d535a:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d535c:	6a3b      	ldr	r3, [r7, #32]
   d535e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5360:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5362:	7acb      	ldrb	r3, [r1, #11]
   d5364:	071d      	lsls	r5, r3, #28
   d5366:	d44c      	bmi.n	d5402 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5368:	1883      	adds	r3, r0, r2
   d536a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d536e:	f003 0317 	and.w	r3, r3, #23
   d5372:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5374:	7ac9      	ldrb	r1, [r1, #11]
   d5376:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d537a:	bf04      	itt	eq
   d537c:	f043 0308 	orreq.w	r3, r3, #8
   d5380:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5382:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5386:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5388:	f006 0303 	and.w	r3, r6, #3
   d538c:	2b01      	cmp	r3, #1
   d538e:	d009      	beq.n	d53a4 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5390:	2b02      	cmp	r3, #2
   d5392:	d005      	beq.n	d53a0 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5394:	2b00      	cmp	r3, #0
   d5396:	d134      	bne.n	d5402 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5398:	0571      	lsls	r1, r6, #21
   d539a:	d432      	bmi.n	d5402 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d539c:	2301      	movs	r3, #1
   d539e:	e002      	b.n	d53a6 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d53a0:	2303      	movs	r3, #3
   d53a2:	e000      	b.n	d53a6 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d53a4:	2302      	movs	r3, #2
   d53a6:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d53a8:	78a1      	ldrb	r1, [r4, #2]
   d53aa:	078b      	lsls	r3, r1, #30
   d53ac:	d503      	bpl.n	d53b6 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d53ae:	7823      	ldrb	r3, [r4, #0]
   d53b0:	f013 0f11 	tst.w	r3, #17
   d53b4:	d125      	bne.n	d5402 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d53b6:	b24b      	sxtb	r3, r1
   d53b8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d53bc:	f006 0108 	and.w	r1, r6, #8
   d53c0:	bf14      	ite	ne
   d53c2:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d53c6:	2700      	moveq	r7, #0
   d53c8:	4319      	orrs	r1, r3
   d53ca:	4339      	orrs	r1, r7
   d53cc:	70a1      	strb	r1, [r4, #2]
   d53ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d53d0:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d53d2:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d53d4:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d53d6:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d53da:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d53de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d53e2:	d504      	bpl.n	d53ee <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d53e4:	b181      	cbz	r1, d5408 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d53e6:	f000 fe0a 	bl	d5ffe <_ZN9FatVolume9freeChainEm>
   d53ea:	b968      	cbnz	r0, d5408 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d53ec:	e009      	b.n	d5402 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d53ee:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d53f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d53f2:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d53f4:	0473      	lsls	r3, r6, #17
   d53f6:	d50c      	bpl.n	d5412 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d53f8:	69e1      	ldr	r1, [r4, #28]
   d53fa:	4620      	mov	r0, r4
   d53fc:	f7ff ff54 	bl	d52a8 <_ZN7FatFile7seekSetEm>
   d5400:	b938      	cbnz	r0, d5412 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5402:	2000      	movs	r0, #0
   d5404:	7020      	strb	r0, [r4, #0]
  return false;
   d5406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5408:	78a3      	ldrb	r3, [r4, #2]
   d540a:	f043 0304 	orr.w	r3, r3, #4
   d540e:	70a3      	strb	r3, [r4, #2]
   d5410:	e7f0      	b.n	d53f4 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5412:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5418 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5418:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d541a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d541c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d541e:	b90b      	cbnz	r3, d5424 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5420:	2001      	movs	r0, #1
   d5422:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5424:	7883      	ldrb	r3, [r0, #2]
   d5426:	075a      	lsls	r2, r3, #29
   d5428:	d523      	bpl.n	d5472 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d542a:	2101      	movs	r1, #1
   d542c:	f7ff fe32 	bl	d5094 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5430:	4605      	mov	r5, r0
   d5432:	b928      	cbnz	r0, d5440 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5434:	7863      	ldrb	r3, [r4, #1]
   d5436:	f043 0301 	orr.w	r3, r3, #1
   d543a:	7063      	strb	r3, [r4, #1]
  return false;
   d543c:	2000      	movs	r0, #0
   d543e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5440:	7803      	ldrb	r3, [r0, #0]
   d5442:	2be5      	cmp	r3, #229	; 0xe5
   d5444:	d0f6      	beq.n	d5434 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5446:	7823      	ldrb	r3, [r4, #0]
   d5448:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d544a:	bf44      	itt	mi
   d544c:	69e3      	ldrmi	r3, [r4, #28]
   d544e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5450:	8c23      	ldrh	r3, [r4, #32]
   d5452:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5454:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5456:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5458:	4b09      	ldr	r3, [pc, #36]	; (d5480 <_ZN7FatFile4syncEv+0x68>)
   d545a:	681b      	ldr	r3, [r3, #0]
   d545c:	b12b      	cbz	r3, d546a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d545e:	f100 0116 	add.w	r1, r0, #22
   d5462:	3018      	adds	r0, #24
   d5464:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5466:	8b2b      	ldrh	r3, [r5, #24]
   d5468:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d546a:	78a3      	ldrb	r3, [r4, #2]
   d546c:	f023 0304 	bic.w	r3, r3, #4
   d5470:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5472:	68a0      	ldr	r0, [r4, #8]
   d5474:	f7ff fdb6 	bl	d4fe4 <_ZN9FatVolume9cacheSyncEv>
   d5478:	2800      	cmp	r0, #0
   d547a:	d0db      	beq.n	d5434 <_ZN7FatFile4syncEv+0x1c>
   d547c:	e7d0      	b.n	d5420 <_ZN7FatFile4syncEv+0x8>
   d547e:	bf00      	nop
   d5480:	2003e33c 	.word	0x2003e33c

000d5484 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5484:	b510      	push	{r4, lr}
   d5486:	4604      	mov	r4, r0
  bool rtn = sync();
   d5488:	f7ff ffc6 	bl	d5418 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d548c:	2300      	movs	r3, #0
   d548e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5490:	bd10      	pop	{r4, pc}

000d5492 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5492:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5494:	b093      	sub	sp, #76	; 0x4c
   d5496:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5498:	2300      	movs	r3, #0
   d549a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d549e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d54a2:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d54a4:	9201      	str	r2, [sp, #4]
   d54a6:	4606      	mov	r6, r0
   d54a8:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d54aa:	b10b      	cbz	r3, d54b0 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d54ac:	2000      	movs	r0, #0
   d54ae:	e03d      	b.n	d552c <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d54b0:	780b      	ldrb	r3, [r1, #0]
   d54b2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d54b6:	d0f9      	beq.n	d54ac <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d54b8:	7813      	ldrb	r3, [r2, #0]
   d54ba:	2b2f      	cmp	r3, #47	; 0x2f
   d54bc:	d112      	bne.n	d54e4 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d54be:	9b01      	ldr	r3, [sp, #4]
   d54c0:	781a      	ldrb	r2, [r3, #0]
   d54c2:	2a2f      	cmp	r2, #47	; 0x2f
   d54c4:	d102      	bne.n	d54cc <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d54c6:	3301      	adds	r3, #1
   d54c8:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d54ca:	e7f8      	b.n	d54be <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d54cc:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d54ce:	b91a      	cbnz	r2, d54d8 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d54d0:	4630      	mov	r0, r6
   d54d2:	f7ff fdee 	bl	d50b2 <_ZN7FatFile8openRootEP9FatVolume>
   d54d6:	e029      	b.n	d552c <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d54d8:	a809      	add	r0, sp, #36	; 0x24
   d54da:	f7ff fdea 	bl	d50b2 <_ZN7FatFile8openRootEP9FatVolume>
   d54de:	2800      	cmp	r0, #0
   d54e0:	d0e4      	beq.n	d54ac <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d54e2:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d54e4:	aa01      	add	r2, sp, #4
   d54e6:	a903      	add	r1, sp, #12
   d54e8:	9801      	ldr	r0, [sp, #4]
   d54ea:	f000 f929 	bl	d5740 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d54ee:	2800      	cmp	r0, #0
   d54f0:	d0dc      	beq.n	d54ac <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d54f2:	9b01      	ldr	r3, [sp, #4]
   d54f4:	781b      	ldrb	r3, [r3, #0]
   d54f6:	b19b      	cbz	r3, d5520 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d54f8:	2300      	movs	r3, #0
   d54fa:	aa03      	add	r2, sp, #12
   d54fc:	4621      	mov	r1, r4
   d54fe:	4630      	mov	r0, r6
   d5500:	f000 fac2 	bl	d5a88 <_ZN7FatFile4openEPS_P7fname_ti>
   d5504:	2800      	cmp	r0, #0
   d5506:	d0d1      	beq.n	d54ac <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5508:	4635      	mov	r5, r6
   d550a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d550c:	ac09      	add	r4, sp, #36	; 0x24
   d550e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5514:	682b      	ldr	r3, [r5, #0]
   d5516:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5518:	4630      	mov	r0, r6
   d551a:	f7ff ffb3 	bl	d5484 <_ZN7FatFile5closeEv>
   d551e:	e7e0      	b.n	d54e2 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5520:	463b      	mov	r3, r7
   d5522:	aa03      	add	r2, sp, #12
   d5524:	4621      	mov	r1, r4
   d5526:	4630      	mov	r0, r6
   d5528:	f000 faae 	bl	d5a88 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d552c:	b013      	add	sp, #76	; 0x4c
   d552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5530 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d5530:	b500      	push	{lr}
   d5532:	b08b      	sub	sp, #44	; 0x2c
   d5534:	2300      	movs	r3, #0
   d5536:	f88d 3004 	strb.w	r3, [sp, #4]
   d553a:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d553e:	460a      	mov	r2, r1
   d5540:	2301      	movs	r3, #1
   d5542:	4601      	mov	r1, r0
   d5544:	a801      	add	r0, sp, #4
   d5546:	f7ff ffa4 	bl	d5492 <_ZN7FatFile4openEPS_PKci>
   d554a:	b110      	cbz	r0, d5552 <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d554c:	a801      	add	r0, sp, #4
   d554e:	f000 f9e3 	bl	d5918 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d5552:	b00b      	add	sp, #44	; 0x2c
   d5554:	f85d fb04 	ldr.w	pc, [sp], #4

000d5558 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d555c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d555e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5560:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5562:	4604      	mov	r4, r0
   d5564:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5566:	d508      	bpl.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
   d5568:	7883      	ldrb	r3, [r0, #2]
   d556a:	079a      	lsls	r2, r3, #30
   d556c:	d505      	bpl.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d556e:	071b      	lsls	r3, r3, #28
   d5570:	d50b      	bpl.n	d558a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5572:	69e1      	ldr	r1, [r4, #28]
   d5574:	f7ff fe98 	bl	d52a8 <_ZN7FatFile7seekSetEm>
   d5578:	b938      	cbnz	r0, d558a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d557a:	7863      	ldrb	r3, [r4, #1]
   d557c:	f043 0301 	orr.w	r3, r3, #1
   d5580:	7063      	strb	r3, [r4, #1]
  return -1;
   d5582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d558a:	6963      	ldr	r3, [r4, #20]
   d558c:	43db      	mvns	r3, r3
   d558e:	4598      	cmp	r8, r3
   d5590:	d8f3      	bhi.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
   d5592:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5594:	f04f 0a00 	mov.w	sl, #0
   d5598:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d559a:	2e00      	cmp	r6, #0
   d559c:	f000 8081 	beq.w	d56a2 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d55a0:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d55a2:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d55a4:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d55a8:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d55ac:	d11c      	bne.n	d55e8 <_ZN7FatFile5writeEPKvj+0x90>
   d55ae:	b9df      	cbnz	r7, d55e8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d55b0:	6921      	ldr	r1, [r4, #16]
   d55b2:	b171      	cbz	r1, d55d2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d55b4:	f104 0210 	add.w	r2, r4, #16
   d55b8:	f000 fc81 	bl	d5ebe <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d55bc:	2800      	cmp	r0, #0
   d55be:	dbdc      	blt.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d55c0:	f040 808e 	bne.w	d56e0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d55c4:	4620      	mov	r0, r4
   d55c6:	f7ff fd1a 	bl	d4ffe <_ZN7FatFile10addClusterEv>
   d55ca:	2800      	cmp	r0, #0
   d55cc:	f040 8088 	bne.w	d56e0 <_ZN7FatFile5writeEPKvj+0x188>
   d55d0:	e7d3      	b.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d55d2:	6a23      	ldr	r3, [r4, #32]
   d55d4:	b93b      	cbnz	r3, d55e6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d55d6:	4620      	mov	r0, r4
   d55d8:	f7ff fd11 	bl	d4ffe <_ZN7FatFile10addClusterEv>
   d55dc:	2800      	cmp	r0, #0
   d55de:	d0cc      	beq.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d55e0:	6923      	ldr	r3, [r4, #16]
   d55e2:	6223      	str	r3, [r4, #32]
   d55e4:	e000      	b.n	d55e8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d55e6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d55e8:	6921      	ldr	r1, [r4, #16]
   d55ea:	68a0      	ldr	r0, [r4, #8]
   d55ec:	f000 fc61 	bl	d5eb2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d55f0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d55f2:	b917      	cbnz	r7, d55fa <_ZN7FatFile5writeEPKvj+0xa2>
   d55f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d55f8:	d221      	bcs.n	d563e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d55fa:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d55fe:	42b5      	cmp	r5, r6
   d5600:	bf28      	it	cs
   d5602:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5604:	b937      	cbnz	r7, d5614 <_ZN7FatFile5writeEPKvj+0xbc>
   d5606:	6963      	ldr	r3, [r4, #20]
   d5608:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d560a:	4293      	cmp	r3, r2
   d560c:	bf34      	ite	cc
   d560e:	2201      	movcc	r2, #1
   d5610:	2205      	movcs	r2, #5
   d5612:	e000      	b.n	d5616 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5614:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5616:	68a0      	ldr	r0, [r4, #8]
   d5618:	3024      	adds	r0, #36	; 0x24
   d561a:	f000 fc26 	bl	d5e6a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d561e:	2800      	cmp	r0, #0
   d5620:	d0ab      	beq.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5622:	4438      	add	r0, r7
   d5624:	462a      	mov	r2, r5
   d5626:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5628:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d562a:	f004 f9e0 	bl	d99ee <memcpy>
      if (512 == (n + blockOffset)) {
   d562e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5632:	d130      	bne.n	d5696 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5634:	68a0      	ldr	r0, [r4, #8]
   d5636:	3024      	adds	r0, #36	; 0x24
   d5638:	f000 fbf0 	bl	d5e1c <_ZN8FatCache4syncEv>
   d563c:	e017      	b.n	d566e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d563e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5642:	68a0      	ldr	r0, [r4, #8]
   d5644:	d315      	bcc.n	d5672 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5646:	7902      	ldrb	r2, [r0, #4]
   d5648:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d564a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d564c:	b2d2      	uxtb	r2, r2
   d564e:	4293      	cmp	r3, r2
   d5650:	bf28      	it	cs
   d5652:	4613      	movcs	r3, r2
   d5654:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5656:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5658:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d565c:	d302      	bcc.n	d5664 <_ZN7FatFile5writeEPKvj+0x10c>
   d565e:	441a      	add	r2, r3
   d5660:	4291      	cmp	r1, r2
   d5662:	d337      	bcc.n	d56d4 <_ZN7FatFile5writeEPKvj+0x17c>
   d5664:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5666:	464a      	mov	r2, r9
   d5668:	6838      	ldr	r0, [r7, #0]
   d566a:	f000 fff1 	bl	d6650 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d566e:	b990      	cbnz	r0, d5696 <_ZN7FatFile5writeEPKvj+0x13e>
   d5670:	e783      	b.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5672:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5674:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5676:	bf02      	ittt	eq
   d5678:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d567c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5680:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5682:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5684:	464a      	mov	r2, r9
   d5686:	6818      	ldr	r0, [r3, #0]
   d5688:	f000 ff70 	bl	d656c <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d568c:	2800      	cmp	r0, #0
   d568e:	f43f af74 	beq.w	d557a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5692:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5696:	6963      	ldr	r3, [r4, #20]
   d5698:	442b      	add	r3, r5
   d569a:	6163      	str	r3, [r4, #20]
    src += n;
   d569c:	44a9      	add	r9, r5
    nToWrite -= n;
   d569e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d56a0:	e77a      	b.n	d5598 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d56a2:	69e2      	ldr	r2, [r4, #28]
   d56a4:	4293      	cmp	r3, r2
   d56a6:	d901      	bls.n	d56ac <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d56a8:	61e3      	str	r3, [r4, #28]
   d56aa:	e002      	b.n	d56b2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d56ac:	4b0f      	ldr	r3, [pc, #60]	; (d56ec <_ZN7FatFile5writeEPKvj+0x194>)
   d56ae:	681b      	ldr	r3, [r3, #0]
   d56b0:	b11b      	cbz	r3, d56ba <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d56b2:	78a3      	ldrb	r3, [r4, #2]
   d56b4:	f043 0304 	orr.w	r3, r3, #4
   d56b8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d56ba:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d56be:	2b00      	cmp	r3, #0
   d56c0:	db02      	blt.n	d56c8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d56c2:	4640      	mov	r0, r8
   d56c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d56c8:	4620      	mov	r0, r4
   d56ca:	f7ff fea5 	bl	d5418 <_ZN7FatFile4syncEv>
   d56ce:	2800      	cmp	r0, #0
   d56d0:	d1f7      	bne.n	d56c2 <_ZN7FatFile5writeEPKvj+0x16a>
   d56d2:	e752      	b.n	d557a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d56d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d56d8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d56dc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d56de:	e7c1      	b.n	d5664 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d56e0:	6921      	ldr	r1, [r4, #16]
   d56e2:	68a0      	ldr	r0, [r4, #8]
   d56e4:	f000 fbe5 	bl	d5eb2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d56e8:	4601      	mov	r1, r0
   d56ea:	e783      	b.n	d55f4 <_ZN7FatFile5writeEPKvj+0x9c>
   d56ec:	2003e33c 	.word	0x2003e33c

000d56f0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d56f0:	f001 b92a 	b.w	d6948 <HAL_Pin_Map>

000d56f4 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d56f4:	1e41      	subs	r1, r0, #1
   d56f6:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d56fa:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d56fc:	0843      	lsrs	r3, r0, #1
   d56fe:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5702:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5706:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d570a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d570c:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d570e:	d1f5      	bne.n	d56fc <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5710:	4770      	bx	lr

000d5712 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5712:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d5714:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5716:	4604      	mov	r4, r0
   d5718:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d571a:	b923      	cbnz	r3, d5726 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d571c:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d571e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d5722:	f7ff bcc6 	b.w	d50b2 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d5726:	2224      	movs	r2, #36	; 0x24
   d5728:	2100      	movs	r1, #0
   d572a:	f004 f986 	bl	d9a3a <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d572e:	2310      	movs	r3, #16
  m_flags = F_READ;
   d5730:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d5732:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d5734:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d5736:	68ab      	ldr	r3, [r5, #8]
   d5738:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d573a:	68eb      	ldr	r3, [r5, #12]
   d573c:	6223      	str	r3, [r4, #32]
  return true;
}
   d573e:	bd38      	pop	{r3, r4, r5, pc}

000d5740 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5744:	7803      	ldrb	r3, [r0, #0]
   d5746:	2b20      	cmp	r3, #32
   d5748:	f100 0401 	add.w	r4, r0, #1
   d574c:	d101      	bne.n	d5752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d574e:	4620      	mov	r0, r4
   d5750:	e7f8      	b.n	d5744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5752:	4f70      	ldr	r7, [pc, #448]	; (d5914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5754:	6088      	str	r0, [r1, #8]
   d5756:	4605      	mov	r5, r0
   d5758:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d575a:	462e      	mov	r6, r5
   d575c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5760:	b30b      	cbz	r3, d57a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5762:	2b2f      	cmp	r3, #47	; 0x2f
   d5764:	d101      	bne.n	d576a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5766:	1903      	adds	r3, r0, r4
   d5768:	e017      	b.n	d579a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d576a:	2b5c      	cmp	r3, #92	; 0x5c
   d576c:	d102      	bne.n	d5774 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d576e:	2000      	movs	r0, #0
   d5770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5774:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5778:	b2e4      	uxtb	r4, r4
   d577a:	2c1d      	cmp	r4, #29
   d577c:	d803      	bhi.n	d5786 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d577e:	fa27 f404 	lsr.w	r4, r7, r4
   d5782:	07e4      	lsls	r4, r4, #31
   d5784:	d4f3      	bmi.n	d576e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d5786:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d578a:	2c3c      	cmp	r4, #60	; 0x3c
   d578c:	d0ef      	beq.n	d576e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d578e:	3b20      	subs	r3, #32
   d5790:	2b5e      	cmp	r3, #94	; 0x5e
   d5792:	d9e1      	bls.n	d5758 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5794:	e7eb      	b.n	d576e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d5796:	2d2f      	cmp	r5, #47	; 0x2f
   d5798:	d105      	bne.n	d57a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d579a:	461e      	mov	r6, r3
   d579c:	f813 5b01 	ldrb.w	r5, [r3], #1
   d57a0:	2d20      	cmp	r5, #32
   d57a2:	d1f8      	bne.n	d5796 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d57a4:	e7f9      	b.n	d579a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d57a6:	6016      	str	r6, [r2, #0]
   d57a8:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d57aa:	4298      	cmp	r0, r3
   d57ac:	ebc0 0803 	rsb	r8, r0, r3
   d57b0:	d009      	beq.n	d57c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d57b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d57b6:	2a2e      	cmp	r2, #46	; 0x2e
   d57b8:	d0f7      	beq.n	d57aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d57ba:	2a20      	cmp	r2, #32
   d57bc:	d0f5      	beq.n	d57aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d57be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d57c2:	dcd4      	bgt.n	d576e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d57c4:	e001      	b.n	d57ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d57c6:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d57ca:	f8c1 8004 	str.w	r8, [r1, #4]
   d57ce:	f101 030c 	add.w	r3, r1, #12
   d57d2:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d57d6:	2420      	movs	r4, #32
   d57d8:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d57dc:	4293      	cmp	r3, r2
   d57de:	d1fb      	bne.n	d57d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d57e0:	4603      	mov	r3, r0
   d57e2:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d57e4:	f813 4b01 	ldrb.w	r4, [r3], #1
   d57e8:	2c2e      	cmp	r4, #46	; 0x2e
   d57ea:	d0fa      	beq.n	d57e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d57ec:	2c20      	cmp	r4, #32
   d57ee:	d0f8      	beq.n	d57e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d57f0:	fab2 f482 	clz	r4, r2
   d57f4:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d57f6:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d57fa:	1c73      	adds	r3, r6, #1
   d57fc:	d107      	bne.n	d580e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d57fe:	2700      	movs	r7, #0
   d5800:	f04f 0e07 	mov.w	lr, #7
   d5804:	463d      	mov	r5, r7
   d5806:	46ba      	mov	sl, r7
   d5808:	f04f 0908 	mov.w	r9, #8
   d580c:	e009      	b.n	d5822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d580e:	5d83      	ldrb	r3, [r0, r6]
   d5810:	2b2e      	cmp	r3, #46	; 0x2e
   d5812:	d0f4      	beq.n	d57fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5814:	3e01      	subs	r6, #1
   d5816:	e7f0      	b.n	d57fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5818:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d581a:	2b20      	cmp	r3, #32
   d581c:	d104      	bne.n	d5828 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d581e:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5820:	3201      	adds	r2, #1
   d5822:	4542      	cmp	r2, r8
   d5824:	dbf8      	blt.n	d5818 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5826:	e04b      	b.n	d58c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5828:	2b2e      	cmp	r3, #46	; 0x2e
   d582a:	d102      	bne.n	d5832 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d582c:	42b2      	cmp	r2, r6
   d582e:	d1f6      	bne.n	d581e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5830:	e003      	b.n	d583a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d5832:	2b22      	cmp	r3, #34	; 0x22
   d5834:	d017      	beq.n	d5866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5836:	2b7c      	cmp	r3, #124	; 0x7c
   d5838:	d015      	beq.n	d5866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d583a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d583e:	f1bc 0f05 	cmp.w	ip, #5
   d5842:	d801      	bhi.n	d5848 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5844:	2b2d      	cmp	r3, #45	; 0x2d
   d5846:	d10e      	bne.n	d5866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5848:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d584c:	f1bc 0f05 	cmp.w	ip, #5
   d5850:	d909      	bls.n	d5866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5852:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5856:	f1bc 0f02 	cmp.w	ip, #2
   d585a:	d904      	bls.n	d5866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d585c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5860:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5864:	d902      	bls.n	d586c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5866:	42b2      	cmp	r2, r6
   d5868:	d10e      	bne.n	d5888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d586a:	e049      	b.n	d5900 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d586c:	42b2      	cmp	r2, r6
   d586e:	d047      	beq.n	d5900 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5870:	4575      	cmp	r5, lr
   d5872:	d821      	bhi.n	d58b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5874:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5878:	f1bc 0f19 	cmp.w	ip, #25
   d587c:	d808      	bhi.n	d5890 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d587e:	3b20      	subs	r3, #32
   d5880:	b2db      	uxtb	r3, r3
        lc |= bit;
   d5882:	ea49 0707 	orr.w	r7, r9, r7
   d5886:	e00a      	b.n	d589e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5888:	4575      	cmp	r5, lr
   d588a:	d815      	bhi.n	d58b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d588c:	2400      	movs	r4, #0
      c = '_';
   d588e:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5890:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5894:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d5898:	bf98      	it	ls
   d589a:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d589e:	f105 0c01 	add.w	ip, r5, #1
   d58a2:	fa5f fc8c 	uxtb.w	ip, ip
   d58a6:	440d      	add	r5, r1
      if (i < 7) {
   d58a8:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d58ac:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d58ae:	d801      	bhi.n	d58b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d58b0:	f881 c00c 	strb.w	ip, [r1, #12]
   d58b4:	4665      	mov	r5, ip
   d58b6:	e7b3      	b.n	d5820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d58b8:	f1be 0f0a 	cmp.w	lr, #10
   d58bc:	d117      	bne.n	d58ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d58be:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d58c0:	7b4b      	ldrb	r3, [r1, #13]
   d58c2:	2b20      	cmp	r3, #32
   d58c4:	f43f af53 	beq.w	d576e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d58c8:	b13c      	cbz	r4, d58da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d58ca:	ea1a 0f07 	tst.w	sl, r7
   d58ce:	bf18      	it	ne
   d58d0:	2702      	movne	r7, #2
   d58d2:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d58d4:	2001      	movs	r0, #1
   d58d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d58da:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d58dc:	2001      	movs	r0, #1
   d58de:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d58e0:	4419      	add	r1, r3
   d58e2:	237e      	movs	r3, #126	; 0x7e
   d58e4:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d58e6:	2331      	movs	r3, #49	; 0x31
   d58e8:	738b      	strb	r3, [r1, #14]
   d58ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d58ee:	42b2      	cmp	r2, r6
   d58f0:	dce5      	bgt.n	d58be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d58f2:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d58f4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d58f8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d58fa:	f04f 0910 	mov.w	r9, #16
   d58fe:	e78e      	b.n	d581e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5900:	f1be 0f0a 	cmp.w	lr, #10
   d5904:	d0db      	beq.n	d58be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5906:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5908:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d590c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d590e:	f04f 0910 	mov.w	r9, #16
   d5912:	e785      	b.n	d5820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5914:	31000101 	.word	0x31000101

000d5918 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d5918:	b5f0      	push	{r4, r5, r6, r7, lr}
   d591a:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d591c:	2300      	movs	r3, #0
   d591e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5922:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5926:	7803      	ldrb	r3, [r0, #0]
   d5928:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d592a:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d592c:	d508      	bpl.n	d5940 <_ZN7FatFile6removeEv+0x28>
   d592e:	7883      	ldrb	r3, [r0, #2]
   d5930:	079a      	lsls	r2, r3, #30
   d5932:	d505      	bpl.n	d5940 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d5934:	6a01      	ldr	r1, [r0, #32]
   d5936:	b129      	cbz	r1, d5944 <_ZN7FatFile6removeEv+0x2c>
   d5938:	68a0      	ldr	r0, [r4, #8]
   d593a:	f000 fb60 	bl	d5ffe <_ZN9FatVolume9freeChainEm>
   d593e:	b908      	cbnz	r0, d5944 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d5940:	2000      	movs	r0, #0
   d5942:	e049      	b.n	d59d8 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5944:	2101      	movs	r1, #1
   d5946:	4620      	mov	r0, r4
   d5948:	f7ff fba4 	bl	d5094 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d594c:	4605      	mov	r5, r0
   d594e:	2800      	cmp	r0, #0
   d5950:	d0f6      	beq.n	d5940 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d5952:	f7ff fecf 	bl	d56f4 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d5956:	26e5      	movs	r6, #229	; 0xe5
   d5958:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d595a:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d595c:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d595e:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d5960:	68a0      	ldr	r0, [r4, #8]
   d5962:	f7ff fb3f 	bl	d4fe4 <_ZN9FatVolume9cacheSyncEv>
   d5966:	2800      	cmp	r0, #0
   d5968:	d0ea      	beq.n	d5940 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d596a:	78e3      	ldrb	r3, [r4, #3]
   d596c:	2b00      	cmp	r3, #0
   d596e:	d033      	beq.n	d59d8 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d5970:	4621      	mov	r1, r4
   d5972:	a801      	add	r0, sp, #4
   d5974:	f7ff fecd 	bl	d5712 <_ZN7FatFile11openClusterEPS_>
   d5978:	2800      	cmp	r0, #0
   d597a:	d0e1      	beq.n	d5940 <_ZN7FatFile6removeEv+0x28>
   d597c:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d597e:	78e3      	ldrb	r3, [r4, #3]
   d5980:	42ab      	cmp	r3, r5
   d5982:	d3dd      	bcc.n	d5940 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d5984:	88a1      	ldrh	r1, [r4, #4]
   d5986:	1b49      	subs	r1, r1, r5
   d5988:	0149      	lsls	r1, r1, #5
   d598a:	a801      	add	r0, sp, #4
   d598c:	f7ff fc8c 	bl	d52a8 <_ZN7FatFile7seekSetEm>
   d5990:	2800      	cmp	r0, #0
   d5992:	d0d5      	beq.n	d5940 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d5994:	2100      	movs	r1, #0
   d5996:	a801      	add	r0, sp, #4
   d5998:	f7ff fc69 	bl	d526e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d599c:	2800      	cmp	r0, #0
   d599e:	d0cf      	beq.n	d5940 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d59a0:	7ac3      	ldrb	r3, [r0, #11]
   d59a2:	2b0f      	cmp	r3, #15
   d59a4:	d1cc      	bne.n	d5940 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d59a6:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d59a8:	f002 031f 	and.w	r3, r2, #31
   d59ac:	429d      	cmp	r5, r3
   d59ae:	d1c7      	bne.n	d5940 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d59b0:	7b43      	ldrb	r3, [r0, #13]
   d59b2:	42bb      	cmp	r3, r7
   d59b4:	d1c4      	bne.n	d5940 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d59b6:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d59b8:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d59ba:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d59be:	f043 0301 	orr.w	r3, r3, #1
   d59c2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d59c6:	0653      	lsls	r3, r2, #25
   d59c8:	d503      	bpl.n	d59d2 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d59ca:	68a0      	ldr	r0, [r4, #8]
   d59cc:	f7ff fb0a 	bl	d4fe4 <_ZN9FatVolume9cacheSyncEv>
   d59d0:	e002      	b.n	d59d8 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d59d2:	3501      	adds	r5, #1
   d59d4:	b2ed      	uxtb	r5, r5
   d59d6:	e7d2      	b.n	d597e <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d59d8:	b00b      	add	sp, #44	; 0x2c
   d59da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59dc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d59dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d59e0:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d59e4:	4606      	mov	r6, r0
   d59e6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d59e8:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d59ea:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d59ec:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d59f0:	6869      	ldr	r1, [r5, #4]
   d59f2:	68aa      	ldr	r2, [r5, #8]
   d59f4:	1863      	adds	r3, r4, r1
   d59f6:	b29b      	uxth	r3, r3
   d59f8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d59fa:	4291      	cmp	r1, r2
   d59fc:	d006      	beq.n	d5a0c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d59fe:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5a02:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5a06:	4043      	eors	r3, r0
   d5a08:	b29b      	uxth	r3, r3
   d5a0a:	e7f6      	b.n	d59fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5a0c:	f1b9 0f03 	cmp.w	r9, #3
   d5a10:	bf28      	it	cs
   d5a12:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5a16:	f109 0204 	add.w	r2, r9, #4
   d5a1a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5a1c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5a20:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5a22:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5a24:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5a26:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5a28:	bf94      	ite	ls
   d5a2a:	3130      	addls	r1, #48	; 0x30
   d5a2c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5a2e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5a30:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5a32:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5a36:	d3f1      	bcc.n	d5a1c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5a38:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5a3c:	2100      	movs	r1, #0
   d5a3e:	735f      	strb	r7, [r3, #13]
   d5a40:	4630      	mov	r0, r6
   d5a42:	f7ff fc31 	bl	d52a8 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5a46:	2101      	movs	r1, #1
   d5a48:	4630      	mov	r0, r6
   d5a4a:	f7ff fc10 	bl	d526e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d5a4e:	4601      	mov	r1, r0
   d5a50:	b928      	cbnz	r0, d5a5e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5a52:	7870      	ldrb	r0, [r6, #1]
   d5a54:	fab0 f080 	clz	r0, r0
   d5a58:	0940      	lsrs	r0, r0, #5
   d5a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5a5e:	7803      	ldrb	r3, [r0, #0]
   d5a60:	b14b      	cbz	r3, d5a76 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5a62:	7ac3      	ldrb	r3, [r0, #11]
   d5a64:	071b      	lsls	r3, r3, #28
   d5a66:	d4ee      	bmi.n	d5a46 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5a68:	220b      	movs	r2, #11
   d5a6a:	4640      	mov	r0, r8
   d5a6c:	f003 ffb0 	bl	d99d0 <memcmp>
   d5a70:	2800      	cmp	r0, #0
   d5a72:	d1e8      	bne.n	d5a46 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5a74:	e002      	b.n	d5a7c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5a76:	2001      	movs	r0, #1
   d5a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5a7c:	3401      	adds	r4, #1
   d5a7e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d5a80:	2c64      	cmp	r4, #100	; 0x64
   d5a82:	d1b5      	bne.n	d59f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5a88 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a8c:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5a8e:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5a90:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5a92:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5a96:	9005      	str	r0, [sp, #20]
   d5a98:	460e      	mov	r6, r1
   d5a9a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5a9c:	d101      	bne.n	d5aa2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d5a9e:	2000      	movs	r0, #0
   d5aa0:	e1a0      	b.n	d5de4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5aa2:	9b05      	ldr	r3, [sp, #20]
   d5aa4:	781b      	ldrb	r3, [r3, #0]
   d5aa6:	2b00      	cmp	r3, #0
   d5aa8:	d1f9      	bne.n	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d5aaa:	6853      	ldr	r3, [r2, #4]
   d5aac:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5aae:	7813      	ldrb	r3, [r2, #0]
   d5ab0:	079b      	lsls	r3, r3, #30
   d5ab2:	f000 818d 	beq.w	d5dd0 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5ab6:	9b02      	ldr	r3, [sp, #8]
   d5ab8:	270d      	movs	r7, #13
   d5aba:	330c      	adds	r3, #12
   d5abc:	fbb3 f7f7 	udiv	r7, r3, r7
   d5ac0:	3701      	adds	r7, #1
   d5ac2:	b2ff      	uxtb	r7, r7
   d5ac4:	2100      	movs	r1, #0
   d5ac6:	4630      	mov	r0, r6
   d5ac8:	f7ff fbee 	bl	d52a8 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5acc:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5ad0:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5ad4:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5ad8:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5ada:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5adc:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d5ade:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5ae2:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5ae4:	6972      	ldr	r2, [r6, #20]
   d5ae6:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5ae8:	2101      	movs	r1, #1
   d5aea:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5aec:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5af0:	f7ff fbbd 	bl	d526e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5af4:	9b07      	ldr	r3, [sp, #28]
   d5af6:	b920      	cbnz	r0, d5b02 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5af8:	7873      	ldrb	r3, [r6, #1]
   d5afa:	2b00      	cmp	r3, #0
   d5afc:	f000 8090 	beq.w	d5c20 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5b00:	e7cd      	b.n	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5b02:	7802      	ldrb	r2, [r0, #0]
   d5b04:	2ae5      	cmp	r2, #229	; 0xe5
   d5b06:	d000      	beq.n	d5b0a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5b08:	b942      	cbnz	r2, d5b1c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5b0a:	2c00      	cmp	r4, #0
   d5b0c:	bf08      	it	eq
   d5b0e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5b10:	42bc      	cmp	r4, r7
        freeFound++;
   d5b12:	bf3c      	itt	cc
   d5b14:	3401      	addcc	r4, #1
   d5b16:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5b18:	b922      	cbnz	r2, d5b24 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d5b1a:	e081      	b.n	d5c20 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5b1c:	42bc      	cmp	r4, r7
   d5b1e:	bf38      	it	cc
   d5b20:	2400      	movcc	r4, #0
   d5b22:	e003      	b.n	d5b2c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5b24:	2ae5      	cmp	r2, #229	; 0xe5
   d5b26:	d101      	bne.n	d5b2c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5b28:	2500      	movs	r5, #0
   d5b2a:	e7db      	b.n	d5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5b2c:	2a2e      	cmp	r2, #46	; 0x2e
   d5b2e:	d0fb      	beq.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5b30:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5b32:	290f      	cmp	r1, #15
   d5b34:	d152      	bne.n	d5bdc <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5b36:	b93d      	cbnz	r5, d5b48 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5b38:	0651      	lsls	r1, r2, #25
   d5b3a:	d5d3      	bpl.n	d5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d5b3c:	7b43      	ldrb	r3, [r0, #13]
   d5b3e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5b40:	f002 051f 	and.w	r5, r2, #31
   d5b44:	462b      	mov	r3, r5
   d5b46:	e007      	b.n	d5b58 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5b48:	3b01      	subs	r3, #1
   d5b4a:	b2db      	uxtb	r3, r3
   d5b4c:	429a      	cmp	r2, r3
   d5b4e:	d1eb      	bne.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5b50:	7b42      	ldrb	r2, [r0, #13]
   d5b52:	9903      	ldr	r1, [sp, #12]
   d5b54:	4291      	cmp	r1, r2
   d5b56:	d1e7      	bne.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5b58:	1e5a      	subs	r2, r3, #1
   d5b5a:	f04f 0c0d 	mov.w	ip, #13
   d5b5e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d5b62:	9a02      	ldr	r2, [sp, #8]
   d5b64:	4562      	cmp	r2, ip
   d5b66:	d9df      	bls.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5b68:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d5b6c:	f1be 0f04 	cmp.w	lr, #4
   d5b70:	fa5f f28e 	uxtb.w	r2, lr
   d5b74:	d804      	bhi.n	d5b80 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5b76:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d5b7a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d5b7e:	e00c      	b.n	d5b9a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5b80:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5b82:	bf95      	itete	ls
   d5b84:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5b88:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5b8c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5b90:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5b94:	bf94      	ite	ls
   d5b96:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5b98:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5b9a:	9902      	ldr	r1, [sp, #8]
   d5b9c:	4561      	cmp	r1, ip
   d5b9e:	d103      	bne.n	d5ba8 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5ba0:	2a00      	cmp	r2, #0
   d5ba2:	bf18      	it	ne
   d5ba4:	2500      	movne	r5, #0
   d5ba6:	e79d      	b.n	d5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5ba8:	2aff      	cmp	r2, #255	; 0xff
   d5baa:	d8bd      	bhi.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5bac:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5bae:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5bb2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5bb4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5bb8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5bbc:	bf98      	it	ls
   d5bbe:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5bc0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5bc4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5bc8:	bf98      	it	ls
   d5bca:	b2d2      	uxtbls	r2, r2
   d5bcc:	f1bc 0f19 	cmp.w	ip, #25
   d5bd0:	bf9c      	itt	ls
   d5bd2:	3120      	addls	r1, #32
   d5bd4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5bd6:	4291      	cmp	r1, r2
   d5bd8:	d1a6      	bne.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5bda:	e0fb      	b.n	d5dd4 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5bdc:	0709      	lsls	r1, r1, #28
   d5bde:	d4a3      	bmi.n	d5b28 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5be0:	b14d      	cbz	r5, d5bf6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5be2:	2b01      	cmp	r3, #1
   d5be4:	f47f af5b 	bne.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5be8:	f7ff fd84 	bl	d56f4 <_ZN7FatFile11lfnChecksumEPh>
   d5bec:	9b03      	ldr	r3, [sp, #12]
   d5bee:	4283      	cmp	r3, r0
   d5bf0:	f47f af55 	bne.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5bf4:	e00f      	b.n	d5c16 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5bf6:	220b      	movs	r2, #11
   d5bf8:	9906      	ldr	r1, [sp, #24]
   d5bfa:	9307      	str	r3, [sp, #28]
   d5bfc:	f003 fee8 	bl	d99d0 <memcmp>
   d5c00:	9b07      	ldr	r3, [sp, #28]
   d5c02:	2800      	cmp	r0, #0
   d5c04:	f47f af6e 	bne.w	d5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5c08:	f899 2000 	ldrb.w	r2, [r9]
   d5c0c:	07d2      	lsls	r2, r2, #31
   d5c0e:	d502      	bpl.n	d5c16 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5c10:	2201      	movs	r2, #1
   d5c12:	9204      	str	r2, [sp, #16]
   d5c14:	e766      	b.n	d5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5c16:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d5c1a:	f000 80d1 	beq.w	d5dc0 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d5c1e:	e73e      	b.n	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5c20:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5c24:	f43f af3b 	beq.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5c28:	f00b 0303 	and.w	r3, fp, #3
   d5c2c:	3b01      	subs	r3, #1
   d5c2e:	2b01      	cmp	r3, #1
   d5c30:	f63f af35 	bhi.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5c34:	2c00      	cmp	r4, #0
   d5c36:	bf08      	it	eq
   d5c38:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5c3a:	42bc      	cmp	r4, r7
   d5c3c:	d302      	bcc.n	d5c44 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d5c3e:	9b04      	ldr	r3, [sp, #16]
   d5c40:	b9cb      	cbnz	r3, d5c76 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5c42:	e01f      	b.n	d5c84 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5c44:	2100      	movs	r1, #0
   d5c46:	4630      	mov	r0, r6
   d5c48:	f7ff fb11 	bl	d526e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5c4c:	b910      	cbnz	r0, d5c54 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d5c4e:	7873      	ldrb	r3, [r6, #1]
   d5c50:	b15b      	cbz	r3, d5c6a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5c52:	e724      	b.n	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5c54:	3401      	adds	r4, #1
   d5c56:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5c58:	e7ef      	b.n	d5c3a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d5c5a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d5c5c:	791b      	ldrb	r3, [r3, #4]
   d5c5e:	2b01      	cmp	r3, #1
   d5c60:	d8ed      	bhi.n	d5c3e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d5c62:	3410      	adds	r4, #16
   d5c64:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5c66:	42a7      	cmp	r7, r4
   d5c68:	d9e9      	bls.n	d5c3e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d5c6a:	4630      	mov	r0, r6
   d5c6c:	f7ff f9d2 	bl	d5014 <_ZN7FatFile13addDirClusterEv>
   d5c70:	2800      	cmp	r0, #0
   d5c72:	d1f2      	bne.n	d5c5a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5c74:	e713      	b.n	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5c76:	4649      	mov	r1, r9
   d5c78:	4630      	mov	r0, r6
   d5c7a:	f7ff feaf 	bl	d59dc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d5c7e:	2800      	cmp	r0, #0
   d5c80:	f43f af0d 	beq.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5c84:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5c88:	4630      	mov	r0, r6
   d5c8a:	f7ff fb0d 	bl	d52a8 <_ZN7FatFile7seekSetEm>
   d5c8e:	2800      	cmp	r0, #0
   d5c90:	f43f af05 	beq.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5c94:	1e7d      	subs	r5, r7, #1
   d5c96:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5c98:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5c9a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5c9e:	f04f 080f 	mov.w	r8, #15
   d5ca2:	e041      	b.n	d5d28 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5ca4:	2100      	movs	r1, #0
   d5ca6:	4630      	mov	r0, r6
   d5ca8:	f7ff fae1 	bl	d526e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5cac:	4607      	mov	r7, r0
   d5cae:	2800      	cmp	r0, #0
   d5cb0:	f43f aef5 	beq.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5cb4:	68b2      	ldr	r2, [r6, #8]
   d5cb6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5cba:	42ac      	cmp	r4, r5
   d5cbc:	f043 0301 	orr.w	r3, r3, #1
   d5cc0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5cc4:	bf0c      	ite	eq
   d5cc6:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5cca:	4622      	movne	r2, r4
   d5ccc:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5cce:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5cd2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5cd6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5cda:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5cdc:	f7ff fd0a 	bl	d56f4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5ce0:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5ce2:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5ce4:	f887 a01a 	strb.w	sl, [r7, #26]
   d5ce8:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5cec:	f002 021f 	and.w	r2, r2, #31
   d5cf0:	230d      	movs	r3, #13
   d5cf2:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5cf4:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5cf8:	435a      	muls	r2, r3
   d5cfa:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5cfc:	9902      	ldr	r1, [sp, #8]
   d5cfe:	4291      	cmp	r1, r2
   d5d00:	d915      	bls.n	d5d2e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5d02:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5d06:	2b04      	cmp	r3, #4
   d5d08:	fa5f fc83 	uxtb.w	ip, r3
   d5d0c:	f103 0001 	add.w	r0, r3, #1
   d5d10:	d813      	bhi.n	d5d3a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5d12:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5d16:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5d1a:	280d      	cmp	r0, #13
   d5d1c:	f102 0201 	add.w	r2, r2, #1
   d5d20:	4603      	mov	r3, r0
   d5d22:	d1eb      	bne.n	d5cfc <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5d24:	3c01      	subs	r4, #1
   d5d26:	b2e4      	uxtb	r4, r4
   d5d28:	2c00      	cmp	r4, #0
   d5d2a:	d1bb      	bne.n	d5ca4 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5d2c:	e00e      	b.n	d5d4c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5d2e:	bf14      	ite	ne
   d5d30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d5d34:	2100      	moveq	r1, #0
   d5d36:	b289      	uxth	r1, r1
   d5d38:	e7e5      	b.n	d5d06 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5d3a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5d3e:	bf94      	ite	ls
   d5d40:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5d44:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5d48:	8099      	strh	r1, [r3, #4]
   d5d4a:	e7e6      	b.n	d5d1a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5d4c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d5d4e:	4621      	mov	r1, r4
   d5d50:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5d52:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5d56:	f7ff fa8a 	bl	d526e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5d5a:	4607      	mov	r7, r0
   d5d5c:	2800      	cmp	r0, #0
   d5d5e:	f43f ae9e 	beq.w	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5d62:	2220      	movs	r2, #32
   d5d64:	4621      	mov	r1, r4
   d5d66:	f003 fe68 	bl	d9a3a <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5d6a:	464b      	mov	r3, r9
   d5d6c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5d70:	603a      	str	r2, [r7, #0]
   d5d72:	685a      	ldr	r2, [r3, #4]
   d5d74:	607a      	str	r2, [r7, #4]
   d5d76:	891a      	ldrh	r2, [r3, #8]
   d5d78:	813a      	strh	r2, [r7, #8]
   d5d7a:	7a9b      	ldrb	r3, [r3, #10]
   d5d7c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5d7e:	f899 3000 	ldrb.w	r3, [r9]
   d5d82:	f003 0318 	and.w	r3, r3, #24
   d5d86:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5d88:	4b18      	ldr	r3, [pc, #96]	; (d5dec <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5d8a:	681b      	ldr	r3, [r3, #0]
   d5d8c:	b12b      	cbz	r3, d5d9a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5d8e:	f107 010e 	add.w	r1, r7, #14
   d5d92:	f107 0010 	add.w	r0, r7, #16
   d5d96:	4798      	blx	r3
   d5d98:	e006      	b.n	d5da8 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5d9a:	2321      	movs	r3, #33	; 0x21
   d5d9c:	743b      	strb	r3, [r7, #16]
   d5d9e:	2328      	movs	r3, #40	; 0x28
   d5da0:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5da2:	2308      	movs	r3, #8
   d5da4:	73bc      	strb	r4, [r7, #14]
   d5da6:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5da8:	8a3b      	ldrh	r3, [r7, #16]
   d5daa:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5dac:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5dae:	89fb      	ldrh	r3, [r7, #14]
   d5db0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5db2:	68b2      	ldr	r2, [r6, #8]
   d5db4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5db8:	f043 0301 	orr.w	r3, r3, #1
   d5dbc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5dc0:	9500      	str	r5, [sp, #0]
   d5dc2:	465b      	mov	r3, fp
   d5dc4:	4652      	mov	r2, sl
   d5dc6:	4631      	mov	r1, r6
   d5dc8:	9805      	ldr	r0, [sp, #20]
   d5dca:	f7ff fab6 	bl	d533a <_ZN7FatFile15openCachedEntryEPS_tih>
   d5dce:	e009      	b.n	d5de4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5dd0:	2701      	movs	r7, #1
   d5dd2:	e677      	b.n	d5ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5dd4:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5dd8:	f1be 0f0d 	cmp.w	lr, #13
   d5ddc:	f43f ae82 	beq.w	d5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5de0:	46d4      	mov	ip, sl
   d5de2:	e6c3      	b.n	d5b6c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5de4:	b009      	add	sp, #36	; 0x24
   d5de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5dea:	bf00      	nop
   d5dec:	2003e33c 	.word	0x2003e33c

000d5df0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5df0:	f000 bdaa 	b.w	d6948 <HAL_Pin_Map>

000d5df4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5df4:	b570      	push	{r4, r5, r6, lr}
   d5df6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5df8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5dfa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5dfc:	b149      	cbz	r1, d5e12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5dfe:	f003 fe6e 	bl	d9ade <strlen>
   d5e02:	682b      	ldr	r3, [r5, #0]
   d5e04:	4602      	mov	r2, r0
   d5e06:	4621      	mov	r1, r4
   d5e08:	4628      	mov	r0, r5
   d5e0a:	68db      	ldr	r3, [r3, #12]
    }
   d5e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5e10:	4718      	bx	r3
    }
   d5e12:	bd70      	pop	{r4, r5, r6, pc}

000d5e14 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5e14:	f000 bd98 	b.w	d6948 <HAL_Pin_Map>

000d5e18 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5e18:	f000 bd96 	b.w	d6948 <HAL_Pin_Map>

000d5e1c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5e1c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5e1e:	7803      	ldrb	r3, [r0, #0]
   d5e20:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5e22:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5e24:	d51e      	bpl.n	d5e64 <_ZN8FatCache4syncEv+0x48>
   d5e26:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5e28:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5e2a:	f100 060c 	add.w	r6, r0, #12
   d5e2e:	4632      	mov	r2, r6
   d5e30:	6818      	ldr	r0, [r3, #0]
   d5e32:	f000 fb9b 	bl	d656c <_ZN9SdSpiCard10writeBlockEmPKh>
   d5e36:	4605      	mov	r5, r0
   d5e38:	b908      	cbnz	r0, d5e3e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5e3a:	2500      	movs	r5, #0
   d5e3c:	e013      	b.n	d5e66 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5e3e:	7823      	ldrb	r3, [r4, #0]
   d5e40:	079b      	lsls	r3, r3, #30
   d5e42:	d404      	bmi.n	d5e4e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5e44:	7823      	ldrb	r3, [r4, #0]
   d5e46:	f023 0301 	bic.w	r3, r3, #1
   d5e4a:	7023      	strb	r3, [r4, #0]
   d5e4c:	e00b      	b.n	d5e66 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5e4e:	6863      	ldr	r3, [r4, #4]
   d5e50:	68a0      	ldr	r0, [r4, #8]
   d5e52:	6919      	ldr	r1, [r3, #16]
   d5e54:	4632      	mov	r2, r6
   d5e56:	4401      	add	r1, r0
   d5e58:	6818      	ldr	r0, [r3, #0]
   d5e5a:	f000 fb87 	bl	d656c <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5e5e:	2800      	cmp	r0, #0
   d5e60:	d1f0      	bne.n	d5e44 <_ZN8FatCache4syncEv+0x28>
   d5e62:	e7ea      	b.n	d5e3a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5e64:	2501      	movs	r5, #1

fail:
  return false;
}
   d5e66:	4628      	mov	r0, r5
   d5e68:	bd70      	pop	{r4, r5, r6, pc}

000d5e6a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5e6a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5e6c:	6883      	ldr	r3, [r0, #8]
   d5e6e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5e70:	4604      	mov	r4, r0
   d5e72:	460e      	mov	r6, r1
   d5e74:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5e76:	d014      	beq.n	d5ea2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5e78:	f7ff ffd0 	bl	d5e1c <_ZN8FatCache4syncEv>
   d5e7c:	b908      	cbnz	r0, d5e82 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5e7e:	2000      	movs	r0, #0
   d5e80:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5e82:	076b      	lsls	r3, r5, #29
   d5e84:	d503      	bpl.n	d5e8e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5e86:	2300      	movs	r3, #0
   d5e88:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5e8a:	60a6      	str	r6, [r4, #8]
   d5e8c:	e009      	b.n	d5ea2 <_ZN8FatCache4readEmh+0x38>
   d5e8e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5e90:	f104 020c 	add.w	r2, r4, #12
   d5e94:	4631      	mov	r1, r6
   d5e96:	6818      	ldr	r0, [r3, #0]
   d5e98:	f000 fade 	bl	d6458 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5e9c:	2800      	cmp	r0, #0
   d5e9e:	d1f2      	bne.n	d5e86 <_ZN8FatCache4readEmh+0x1c>
   d5ea0:	e7ed      	b.n	d5e7e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5ea2:	7823      	ldrb	r3, [r4, #0]
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	f005 0503 	and.w	r5, r5, #3
   d5eaa:	431d      	orrs	r5, r3
   d5eac:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5eb0:	bd70      	pop	{r4, r5, r6, pc}

000d5eb2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5eb2:	7983      	ldrb	r3, [r0, #6]
   d5eb4:	6940      	ldr	r0, [r0, #20]
   d5eb6:	3902      	subs	r1, #2
   d5eb8:	4099      	lsls	r1, r3
}
   d5eba:	4408      	add	r0, r1
   d5ebc:	4770      	bx	lr

000d5ebe <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ebe:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5ec0:	b570      	push	{r4, r5, r6, lr}
   d5ec2:	4605      	mov	r5, r0
   d5ec4:	460c      	mov	r4, r1
   d5ec6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ec8:	d802      	bhi.n	d5ed0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5ece:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ed0:	69c3      	ldr	r3, [r0, #28]
   d5ed2:	4299      	cmp	r1, r3
   d5ed4:	d8f9      	bhi.n	d5eca <_ZN9FatVolume6fatGetEmPm+0xc>
   d5ed6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5ed8:	2b20      	cmp	r3, #32
   d5eda:	d110      	bne.n	d5efe <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5edc:	6981      	ldr	r1, [r0, #24]
   d5ede:	2202      	movs	r2, #2
   d5ee0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5ee4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5ee8:	f7ff ffbf 	bl	d5e6a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5eec:	2800      	cmp	r0, #0
   d5eee:	d0ec      	beq.n	d5eca <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5ef0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5ef4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5ef8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5efc:	e00f      	b.n	d5f1e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5efe:	2b10      	cmp	r3, #16
   d5f00:	d1e3      	bne.n	d5eca <_ZN9FatVolume6fatGetEmPm+0xc>
   d5f02:	6983      	ldr	r3, [r0, #24]
   d5f04:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5f08:	2202      	movs	r2, #2
   d5f0a:	4419      	add	r1, r3
   d5f0c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5f10:	f7ff ffab 	bl	d5e6a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5f14:	2800      	cmp	r0, #0
   d5f16:	d0d8      	beq.n	d5eca <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5f18:	b2e4      	uxtb	r4, r4
   d5f1a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5f1e:	69ea      	ldr	r2, [r5, #28]
   d5f20:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5f22:	bf9a      	itte	ls
   d5f24:	6033      	strls	r3, [r6, #0]
  return 1;
   d5f26:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5f28:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5f2a:	bd70      	pop	{r4, r5, r6, pc}

000d5f2c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5f2c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5f2e:	b538      	push	{r3, r4, r5, lr}
   d5f30:	460c      	mov	r4, r1
   d5f32:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5f34:	d801      	bhi.n	d5f3a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5f36:	2000      	movs	r0, #0
   d5f38:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5f3a:	69c3      	ldr	r3, [r0, #28]
   d5f3c:	4299      	cmp	r1, r3
   d5f3e:	d8fa      	bhi.n	d5f36 <_ZN9FatVolume6fatPutEmm+0xa>
   d5f40:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5f42:	2b20      	cmp	r3, #32
   d5f44:	d10e      	bne.n	d5f64 <_ZN9FatVolume6fatPutEmm+0x38>
   d5f46:	6981      	ldr	r1, [r0, #24]
   d5f48:	2203      	movs	r2, #3
   d5f4a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5f4e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5f52:	f7ff ff8a 	bl	d5e6a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5f56:	2800      	cmp	r0, #0
   d5f58:	d0ed      	beq.n	d5f36 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5f5a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5f5e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5f62:	e00f      	b.n	d5f84 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5f64:	2b10      	cmp	r3, #16
   d5f66:	d1e6      	bne.n	d5f36 <_ZN9FatVolume6fatPutEmm+0xa>
   d5f68:	6983      	ldr	r3, [r0, #24]
   d5f6a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5f6e:	2203      	movs	r2, #3
   d5f70:	4419      	add	r1, r3
   d5f72:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5f76:	f7ff ff78 	bl	d5e6a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5f7a:	2800      	cmp	r0, #0
   d5f7c:	d0db      	beq.n	d5f36 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5f7e:	b2e4      	uxtb	r4, r4
   d5f80:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5f84:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5f86:	bd38      	pop	{r3, r4, r5, pc}

000d5f88 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5f8c:	68c4      	ldr	r4, [r0, #12]
   d5f8e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5f90:	4605      	mov	r5, r0
   d5f92:	460e      	mov	r6, r1
   d5f94:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5f96:	d207      	bcs.n	d5fa8 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5f98:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5f9a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5f9c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5f9e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5fa0:	429c      	cmp	r4, r3
   d5fa2:	d903      	bls.n	d5fac <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5fa4:	b9cf      	cbnz	r7, d5fda <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5fa6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5fa8:	2701      	movs	r7, #1
   d5faa:	e7f7      	b.n	d5f9c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5fac:	42a6      	cmp	r6, r4
   d5fae:	d014      	beq.n	d5fda <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5fb0:	aa01      	add	r2, sp, #4
   d5fb2:	4621      	mov	r1, r4
   d5fb4:	4628      	mov	r0, r5
   d5fb6:	f7ff ff82 	bl	d5ebe <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5fba:	2800      	cmp	r0, #0
   d5fbc:	db0d      	blt.n	d5fda <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5fbe:	d0ed      	beq.n	d5f9c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5fc0:	9b01      	ldr	r3, [sp, #4]
   d5fc2:	2b00      	cmp	r3, #0
   d5fc4:	d1ea      	bne.n	d5f9c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5fc6:	b107      	cbz	r7, d5fca <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5fc8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5fca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5fce:	4621      	mov	r1, r4
   d5fd0:	4628      	mov	r0, r5
   d5fd2:	f7ff ffab 	bl	d5f2c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5fd6:	4607      	mov	r7, r0
   d5fd8:	b908      	cbnz	r0, d5fde <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5fda:	2700      	movs	r7, #0
   d5fdc:	e00b      	b.n	d5ff6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5fde:	b916      	cbnz	r6, d5fe6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5fe0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5fe4:	e007      	b.n	d5ff6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5fe6:	4622      	mov	r2, r4
   d5fe8:	4631      	mov	r1, r6
   d5fea:	4628      	mov	r0, r5
   d5fec:	f7ff ff9e 	bl	d5f2c <_ZN9FatVolume6fatPutEmm>
   d5ff0:	2800      	cmp	r0, #0
   d5ff2:	d1f5      	bne.n	d5fe0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5ff4:	e7f1      	b.n	d5fda <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5ff6:	4638      	mov	r0, r7
   d5ff8:	b002      	add	sp, #8
   d5ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ffe <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6000:	4605      	mov	r5, r0
   d6002:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6004:	aa01      	add	r2, sp, #4
   d6006:	4621      	mov	r1, r4
   d6008:	4628      	mov	r0, r5
   d600a:	f7ff ff58 	bl	d5ebe <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d600e:	1e06      	subs	r6, r0, #0
   d6010:	da01      	bge.n	d6016 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d6012:	2000      	movs	r0, #0
   d6014:	e00f      	b.n	d6036 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6016:	2200      	movs	r2, #0
   d6018:	4621      	mov	r1, r4
   d601a:	4628      	mov	r0, r5
   d601c:	f7ff ff86 	bl	d5f2c <_ZN9FatVolume6fatPutEmm>
   d6020:	2800      	cmp	r0, #0
   d6022:	d0f6      	beq.n	d6012 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6024:	68eb      	ldr	r3, [r5, #12]
   d6026:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6028:	bf9c      	itt	ls
   d602a:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d602e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6030:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d6032:	2e00      	cmp	r6, #0
   d6034:	d1e6      	bne.n	d6004 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6036:	b002      	add	sp, #8
   d6038:	bd70      	pop	{r4, r5, r6, pc}

000d603a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d603a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d603c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d603e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6040:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6042:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6048:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d604a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d604c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d604e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6052:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6054:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6058:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d605c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6060:	b1a1      	cbz	r1, d608c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d6062:	2904      	cmp	r1, #4
   d6064:	d85d      	bhi.n	d6122 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6066:	4611      	mov	r1, r2
   d6068:	3024      	adds	r0, #36	; 0x24
   d606a:	f7ff fefe 	bl	d5e6a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d606e:	2800      	cmp	r0, #0
   d6070:	d057      	beq.n	d6122 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6072:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6076:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d607a:	065b      	lsls	r3, r3, #25
   d607c:	d151      	bne.n	d6122 <_ZN9FatVolume4initEh+0xe8>
   d607e:	351b      	adds	r5, #27
   d6080:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6084:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6088:	2d00      	cmp	r5, #0
   d608a:	d04a      	beq.n	d6122 <_ZN9FatVolume4initEh+0xe8>
   d608c:	2200      	movs	r2, #0
   d608e:	4629      	mov	r1, r5
   d6090:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6094:	f7ff fee9 	bl	d5e6a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6098:	2800      	cmp	r0, #0
   d609a:	d042      	beq.n	d6122 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d609c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d60a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d60a4:	d13d      	bne.n	d6122 <_ZN9FatVolume4initEh+0xe8>
   d60a6:	7c03      	ldrb	r3, [r0, #16]
   d60a8:	2b02      	cmp	r3, #2
   d60aa:	d13a      	bne.n	d6122 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d60ac:	89c3      	ldrh	r3, [r0, #14]
   d60ae:	2b00      	cmp	r3, #0
   d60b0:	d037      	beq.n	d6122 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d60b2:	7b41      	ldrb	r1, [r0, #13]
   d60b4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d60b6:	1e4b      	subs	r3, r1, #1
   d60b8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d60ba:	2300      	movs	r3, #0
   d60bc:	71a3      	strb	r3, [r4, #6]
   d60be:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d60c0:	2301      	movs	r3, #1
   d60c2:	428b      	cmp	r3, r1
   d60c4:	d007      	beq.n	d60d6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d60c6:	3e01      	subs	r6, #1
   d60c8:	d02b      	beq.n	d6122 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d60ca:	79a2      	ldrb	r2, [r4, #6]
   d60cc:	005b      	lsls	r3, r3, #1
   d60ce:	3201      	adds	r2, #1
   d60d0:	b2db      	uxtb	r3, r3
   d60d2:	71a2      	strb	r2, [r4, #6]
   d60d4:	e7f5      	b.n	d60c2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d60d6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d60d8:	b902      	cbnz	r2, d60dc <_ZN9FatVolume4initEh+0xa2>
   d60da:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d60dc:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d60de:	89c6      	ldrh	r6, [r0, #14]
   d60e0:	442e      	add	r6, r5
   d60e2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d60e4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d60e8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d60ea:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d60ee:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d60f0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d60f4:	0152      	lsls	r2, r2, #5
   d60f6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d60fa:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d60fe:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6100:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d6104:	b903      	cbnz	r3, d6108 <_ZN9FatVolume4initEh+0xce>
   d6106:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6108:	1aad      	subs	r5, r5, r2
   d610a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d610c:	79a5      	ldrb	r5, [r4, #6]
   d610e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d6112:	1c6b      	adds	r3, r5, #1
   d6114:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d6116:	f640 73f4 	movw	r3, #4084	; 0xff4
   d611a:	429d      	cmp	r5, r3
   d611c:	d803      	bhi.n	d6126 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d611e:	230c      	movs	r3, #12
   d6120:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6122:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6124:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d6126:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d612a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d612c:	bf85      	ittet	hi
   d612e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6130:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d6132:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6134:	2320      	movhi	r3, #32
   d6136:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6138:	2001      	movs	r0, #1

fail:
  return false;
}
   d613a:	bd70      	pop	{r4, r5, r6, pc}

000d613c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d613c:	f000 bc04 	b.w	d6948 <HAL_Pin_Map>

000d6140 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6140:	f000 bc02 	b.w	d6948 <HAL_Pin_Map>

000d6144 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6144:	f000 bc00 	b.w	d6948 <HAL_Pin_Map>

000d6148 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d6148:	f000 bbfe 	b.w	d6948 <HAL_Pin_Map>

000d614c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d614c:	f000 bbfc 	b.w	d6948 <HAL_Pin_Map>

000d6150 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6150:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6152:	4c0e      	ldr	r4, [pc, #56]	; (d618c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6154:	460e      	mov	r6, r1
   d6156:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6158:	f000 fbd6 	bl	d6908 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d615c:	6823      	ldr	r3, [r4, #0]
   d615e:	1ac0      	subs	r0, r0, r3
   d6160:	4b0b      	ldr	r3, [pc, #44]	; (d6190 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6162:	4298      	cmp	r0, r3
   d6164:	d908      	bls.n	d6178 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6166:	f000 fbd7 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d616a:	4b0a      	ldr	r3, [pc, #40]	; (d6194 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d616c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d616e:	f000 fd67 	bl	d6c40 <spark_process>
   d6172:	f000 fbc9 	bl	d6908 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6176:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6178:	f000 fbce 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d617c:	b280      	uxth	r0, r0
   d617e:	1b80      	subs	r0, r0, r6
}
   d6180:	42a8      	cmp	r0, r5
   d6182:	bfd4      	ite	le
   d6184:	2000      	movle	r0, #0
   d6186:	2001      	movgt	r0, #1
   d6188:	bd70      	pop	{r4, r5, r6, pc}
   d618a:	bf00      	nop
   d618c:	2003e340 	.word	0x2003e340
   d6190:	000186a0 	.word	0x000186a0
   d6194:	2003e708 	.word	0x2003e708

000d6198 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6198:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d619a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d619c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d619e:	b94d      	cbnz	r5, d61b4 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d61a0:	6840      	ldr	r0, [r0, #4]
   d61a2:	f000 fa7d 	bl	d66a0 <_ZN14SdSpiAltDriver8activateEv>
   d61a6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d61a8:	4629      	mov	r1, r5
   d61aa:	7d18      	ldrb	r0, [r3, #20]
   d61ac:	f003 f943 	bl	d9436 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d61b0:	2301      	movs	r3, #1
   d61b2:	7223      	strb	r3, [r4, #8]
   d61b4:	bd38      	pop	{r3, r4, r5, pc}

000d61b6 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d61b6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d61b8:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d61ba:	4604      	mov	r4, r0
  if (m_spiActive) {
   d61bc:	b16b      	cbz	r3, d61da <_ZN9SdSpiCard7spiStopEv+0x24>
   d61be:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d61c0:	2101      	movs	r1, #1
   d61c2:	7d18      	ldrb	r0, [r3, #20]
   d61c4:	f003 f937 	bl	d9436 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d61c8:	21ff      	movs	r1, #255	; 0xff
   d61ca:	6860      	ldr	r0, [r4, #4]
   d61cc:	f000 fa9a 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d61d0:	6860      	ldr	r0, [r4, #4]
   d61d2:	f000 fa79 	bl	d66c8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d61d6:	2300      	movs	r3, #0
   d61d8:	7223      	strb	r3, [r4, #8]
   d61da:	bd10      	pop	{r4, pc}

000d61dc <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d61dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61de:	4604      	mov	r4, r0
   d61e0:	460d      	mov	r5, r1
   d61e2:	4616      	mov	r6, r2
   d61e4:	f000 fb98 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d61e8:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61ea:	6860      	ldr	r0, [r4, #4]
   d61ec:	f000 fa6f 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d61f0:	28ff      	cmp	r0, #255	; 0xff
   d61f2:	7260      	strb	r0, [r4, #9]
   d61f4:	d109      	bne.n	d620a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d61f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d61fa:	4639      	mov	r1, r7
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff ffa7 	bl	d6150 <_ZN9SdSpiCard10isTimedOutEtt>
   d6202:	2800      	cmp	r0, #0
   d6204:	d0f1      	beq.n	d61ea <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6206:	2355      	movs	r3, #85	; 0x55
   d6208:	e00b      	b.n	d6222 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d620a:	28fe      	cmp	r0, #254	; 0xfe
   d620c:	d001      	beq.n	d6212 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d620e:	2350      	movs	r3, #80	; 0x50
   d6210:	e007      	b.n	d6222 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d6212:	4632      	mov	r2, r6
   d6214:	4629      	mov	r1, r5
   d6216:	6860      	ldr	r0, [r4, #4]
   d6218:	f000 fa5e 	bl	d66d8 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d621c:	7260      	strb	r0, [r4, #9]
   d621e:	b130      	cbz	r0, d622e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6220:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d6222:	4620      	mov	r0, r4
   d6224:	7023      	strb	r3, [r4, #0]
   d6226:	f7ff ffc6 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d622a:	2000      	movs	r0, #0
}
   d622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d622e:	6860      	ldr	r0, [r4, #4]
   d6230:	f000 fa4d 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d6234:	6860      	ldr	r0, [r4, #4]
   d6236:	f000 fa4a 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d623a:	2001      	movs	r0, #1
   d623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d623e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d623e:	b570      	push	{r4, r5, r6, lr}
   d6240:	4604      	mov	r4, r0
   d6242:	460e      	mov	r6, r1
   d6244:	f000 fb68 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
   d6248:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d624a:	4632      	mov	r2, r6
   d624c:	4629      	mov	r1, r5
   d624e:	4620      	mov	r0, r4
   d6250:	f7ff ff7e 	bl	d6150 <_ZN9SdSpiCard10isTimedOutEtt>
   d6254:	b930      	cbnz	r0, d6264 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6256:	6860      	ldr	r0, [r4, #4]
   d6258:	f000 fa39 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d625c:	28ff      	cmp	r0, #255	; 0xff
   d625e:	d1f4      	bne.n	d624a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6260:	2001      	movs	r0, #1
   d6262:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6264:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6266:	bd70      	pop	{r4, r5, r6, pc}

000d6268 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d626a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d626c:	9201      	str	r2, [sp, #4]
   d626e:	4604      	mov	r4, r0
   d6270:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6272:	b90b      	cbnz	r3, d6278 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6274:	f7ff ff90 	bl	d6198 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6278:	b125      	cbz	r5, d6284 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d627a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d627e:	4620      	mov	r0, r4
   d6280:	f7ff ffdd 	bl	d623e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6284:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6288:	6860      	ldr	r0, [r4, #4]
   d628a:	f000 fa3b 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
   d628e:	f10d 0607 	add.w	r6, sp, #7
   d6292:	f10d 0703 	add.w	r7, sp, #3
   d6296:	f816 1901 	ldrb.w	r1, [r6], #-1
   d629a:	6860      	ldr	r0, [r4, #4]
   d629c:	f000 fa32 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d62a0:	42be      	cmp	r6, r7
   d62a2:	d1f8      	bne.n	d6296 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d62a4:	2d00      	cmp	r5, #0
   d62a6:	bf0c      	ite	eq
   d62a8:	2195      	moveq	r1, #149	; 0x95
   d62aa:	2187      	movne	r1, #135	; 0x87
   d62ac:	6860      	ldr	r0, [r4, #4]
   d62ae:	f000 fa29 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62b2:	6860      	ldr	r0, [r4, #4]
   d62b4:	f000 fa0b 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d62b8:	250b      	movs	r5, #11
   d62ba:	6860      	ldr	r0, [r4, #4]
   d62bc:	f000 fa07 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d62c0:	0603      	lsls	r3, r0, #24
   d62c2:	7260      	strb	r0, [r4, #9]
   d62c4:	d503      	bpl.n	d62ce <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d62c6:	3d01      	subs	r5, #1
   d62c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d62cc:	d1f5      	bne.n	d62ba <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d62ce:	b003      	add	sp, #12
   d62d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62d2 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d62d2:	b570      	push	{r4, r5, r6, lr}
   d62d4:	4604      	mov	r4, r0
   d62d6:	460d      	mov	r5, r1
   d62d8:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d62da:	2137      	movs	r1, #55	; 0x37
   d62dc:	2200      	movs	r2, #0
   d62de:	f7ff ffc3 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d62e2:	4632      	mov	r2, r6
   d62e4:	4629      	mov	r1, r5
   d62e6:	4620      	mov	r0, r4
  }
   d62e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d62ec:	f7ff bfbc 	b.w	d6268 <_ZN9SdSpiCard11cardCommandEhm>

000d62f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d62f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d62f4:	2500      	movs	r5, #0
   d62f6:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d62f8:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d62fa:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d62fc:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d62fe:	4604      	mov	r4, r0
   d6300:	4690      	mov	r8, r2
   d6302:	461e      	mov	r6, r3
   d6304:	f000 fb08 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6308:	4641      	mov	r1, r8
   d630a:	4607      	mov	r7, r0
   d630c:	6860      	ldr	r0, [r4, #4]
   d630e:	f000 f9cb 	bl	d66a8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6312:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6314:	4a4f      	ldr	r2, [pc, #316]	; (d6454 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6316:	721d      	strb	r5, [r3, #8]
   d6318:	f04f 0801 	mov.w	r8, #1
   d631c:	60da      	str	r2, [r3, #12]
   d631e:	745d      	strb	r5, [r3, #17]
   d6320:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6324:	4620      	mov	r0, r4
   d6326:	f7ff ff37 	bl	d6198 <_ZN9SdSpiCard8spiStartEv>
   d632a:	6863      	ldr	r3, [r4, #4]
   d632c:	4641      	mov	r1, r8
   d632e:	7d18      	ldrb	r0, [r3, #20]
   d6330:	f003 f881 	bl	d9436 <digitalWrite>
   d6334:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6336:	21ff      	movs	r1, #255	; 0xff
   d6338:	6860      	ldr	r0, [r4, #4]
   d633a:	3d01      	subs	r5, #1
   d633c:	f000 f9e2 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6340:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6344:	d1f7      	bne.n	d6336 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6346:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6348:	4629      	mov	r1, r5
   d634a:	7d18      	ldrb	r0, [r3, #20]
   d634c:	f003 f873 	bl	d9436 <digitalWrite>
   d6350:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6352:	2200      	movs	r2, #0
   d6354:	4611      	mov	r1, r2
   d6356:	4620      	mov	r0, r4
   d6358:	f7ff ff86 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d635c:	2801      	cmp	r0, #1
   d635e:	4680      	mov	r8, r0
   d6360:	d012      	beq.n	d6388 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6362:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6364:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6368:	d101      	bne.n	d636e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d636a:	2320      	movs	r3, #32
   d636c:	e057      	b.n	d641e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d636e:	21fd      	movs	r1, #253	; 0xfd
   d6370:	6860      	ldr	r0, [r4, #4]
   d6372:	f000 f9c7 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
   d6376:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d637a:	6860      	ldr	r0, [r4, #4]
   d637c:	f000 f9a7 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6380:	f1b8 0801 	subs.w	r8, r8, #1
   d6384:	d1f9      	bne.n	d637a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6386:	e7e4      	b.n	d6352 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6388:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d638c:	2108      	movs	r1, #8
   d638e:	4620      	mov	r0, r4
   d6390:	f7ff ff6a 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d6394:	2805      	cmp	r0, #5
   d6396:	d102      	bne.n	d639e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6398:	f884 800a 	strb.w	r8, [r4, #10]
   d639c:	e00f      	b.n	d63be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d639e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63a0:	6860      	ldr	r0, [r4, #4]
   d63a2:	f000 f994 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d63a6:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d63a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d63ac:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d63ae:	d1f7      	bne.n	d63a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d63b0:	28aa      	cmp	r0, #170	; 0xaa
   d63b2:	d102      	bne.n	d63ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d63b4:	2302      	movs	r3, #2
   d63b6:	72a3      	strb	r3, [r4, #10]
   d63b8:	e001      	b.n	d63be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63ba:	2325      	movs	r3, #37	; 0x25
   d63bc:	e02f      	b.n	d641e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d63be:	7aa3      	ldrb	r3, [r4, #10]
   d63c0:	2b02      	cmp	r3, #2
   d63c2:	bf0c      	ite	eq
   d63c4:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d63c8:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d63ca:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d63cc:	462a      	mov	r2, r5
   d63ce:	2129      	movs	r1, #41	; 0x29
   d63d0:	4620      	mov	r0, r4
   d63d2:	f7ff ff7e 	bl	d62d2 <_ZN9SdSpiCard8cardAcmdEhm>
   d63d6:	4602      	mov	r2, r0
   d63d8:	b148      	cbz	r0, d63ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d63da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d63de:	4639      	mov	r1, r7
   d63e0:	4620      	mov	r0, r4
   d63e2:	f7ff feb5 	bl	d6150 <_ZN9SdSpiCard10isTimedOutEtt>
   d63e6:	2800      	cmp	r0, #0
   d63e8:	d0f0      	beq.n	d63cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d63ea:	2343      	movs	r3, #67	; 0x43
   d63ec:	e017      	b.n	d641e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d63ee:	7aa3      	ldrb	r3, [r4, #10]
   d63f0:	2b02      	cmp	r3, #2
   d63f2:	d00e      	beq.n	d6412 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d63f4:	4620      	mov	r0, r4
   d63f6:	f7ff fede 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d63fa:	6863      	ldr	r3, [r4, #4]
   d63fc:	68b0      	ldr	r0, [r6, #8]
   d63fe:	7934      	ldrb	r4, [r6, #4]
   d6400:	7b31      	ldrb	r1, [r6, #12]
   d6402:	7b72      	ldrb	r2, [r6, #13]
   d6404:	745a      	strb	r2, [r3, #17]
   d6406:	60d8      	str	r0, [r3, #12]
   d6408:	721c      	strb	r4, [r3, #8]
   d640a:	7419      	strb	r1, [r3, #16]
  return true;
   d640c:	2001      	movs	r0, #1
   d640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6412:	213a      	movs	r1, #58	; 0x3a
   d6414:	4620      	mov	r0, r4
   d6416:	f7ff ff27 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d641a:	b138      	cbz	r0, d642c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d641c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d641e:	4620      	mov	r0, r4
   d6420:	7023      	strb	r3, [r4, #0]
   d6422:	f7ff fec8 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6426:	2000      	movs	r0, #0
}
   d6428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d642c:	6860      	ldr	r0, [r4, #4]
   d642e:	f000 f94e 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6432:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6436:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6438:	bf04      	itt	eq
   d643a:	2303      	moveq	r3, #3
   d643c:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d643e:	6860      	ldr	r0, [r4, #4]
   d6440:	f000 f945 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d6444:	6860      	ldr	r0, [r4, #4]
   d6446:	f000 f942 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d644a:	6860      	ldr	r0, [r4, #4]
   d644c:	f000 f93f 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d6450:	e7d0      	b.n	d63f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6452:	bf00      	nop
   d6454:	0003d090 	.word	0x0003d090

000d6458 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6458:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d645a:	7a83      	ldrb	r3, [r0, #10]
   d645c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d645e:	bf18      	it	ne
   d6460:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6462:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6464:	460a      	mov	r2, r1
   d6466:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6468:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d646a:	f7ff fefd 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d646e:	b110      	cbz	r0, d6476 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6470:	2330      	movs	r3, #48	; 0x30
   d6472:	7023      	strb	r3, [r4, #0]
   d6474:	e00b      	b.n	d648e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6476:	4629      	mov	r1, r5
   d6478:	f44f 7200 	mov.w	r2, #512	; 0x200
   d647c:	4620      	mov	r0, r4
   d647e:	f7ff fead 	bl	d61dc <_ZN9SdSpiCard8readDataEPhj>
   d6482:	4605      	mov	r5, r0
   d6484:	b118      	cbz	r0, d648e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6486:	4620      	mov	r0, r4
   d6488:	f7ff fe95 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d648c:	e003      	b.n	d6496 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d648e:	4620      	mov	r0, r4
   d6490:	f7ff fe91 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6494:	2500      	movs	r5, #0
}
   d6496:	4628      	mov	r0, r5
   d6498:	bd38      	pop	{r3, r4, r5, pc}

000d649a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d649a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d649c:	7a83      	ldrb	r3, [r0, #10]
   d649e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d64a0:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d64a2:	bf18      	it	ne
   d64a4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d64a6:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d64a8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d64aa:	f7ff fedd 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d64ae:	b130      	cbz	r0, d64be <_ZN9SdSpiCard9readStartEm+0x24>
   d64b0:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d64b2:	4620      	mov	r0, r4
   d64b4:	7023      	strb	r3, [r4, #0]
   d64b6:	f7ff fe7e 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d64ba:	2000      	movs	r0, #0
   d64bc:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d64be:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d64c0:	bd10      	pop	{r4, pc}

000d64c2 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d64c2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d64c4:	2200      	movs	r2, #0
   d64c6:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d64c8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d64ca:	f7ff fecd 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d64ce:	b130      	cbz	r0, d64de <_ZN9SdSpiCard8readStopEv+0x1c>
   d64d0:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d64d2:	4620      	mov	r0, r4
   d64d4:	7023      	strb	r3, [r4, #0]
   d64d6:	f7ff fe6e 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d64da:	2000      	movs	r0, #0
   d64dc:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d64de:	4620      	mov	r0, r4
   d64e0:	f7ff fe69 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d64e4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d64e6:	bd10      	pop	{r4, pc}

000d64e8 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d64e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64ea:	4605      	mov	r5, r0
   d64ec:	4616      	mov	r6, r2
   d64ee:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d64f0:	f7ff ffd3 	bl	d649a <_ZN9SdSpiCard9readStartEm>
   d64f4:	b198      	cbz	r0, d651e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d64f6:	2400      	movs	r4, #0
   d64f8:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d64fa:	429f      	cmp	r7, r3
   d64fc:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6500:	d908      	bls.n	d6514 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6502:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6506:	4628      	mov	r0, r5
   d6508:	f7ff fe68 	bl	d61dc <_ZN9SdSpiCard8readDataEPhj>
   d650c:	3401      	adds	r4, #1
   d650e:	2800      	cmp	r0, #0
   d6510:	d1f2      	bne.n	d64f8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6512:	e004      	b.n	d651e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6514:	4628      	mov	r0, r5
}
   d6516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d651a:	f7ff bfd2 	b.w	d64c2 <_ZN9SdSpiCard8readStopEv>
}
   d651e:	2000      	movs	r0, #0
   d6520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6522 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6522:	b538      	push	{r3, r4, r5, lr}
   d6524:	4604      	mov	r4, r0
   d6526:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6528:	6840      	ldr	r0, [r0, #4]
   d652a:	f000 f8eb 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d652e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6532:	4629      	mov	r1, r5
   d6534:	6860      	ldr	r0, [r4, #4]
   d6536:	f000 f8e9 	bl	d670c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d653a:	21ff      	movs	r1, #255	; 0xff
   d653c:	6860      	ldr	r0, [r4, #4]
   d653e:	f000 f8e1 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
   d6542:	21ff      	movs	r1, #255	; 0xff
   d6544:	6860      	ldr	r0, [r4, #4]
   d6546:	f000 f8dd 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d654a:	6860      	ldr	r0, [r4, #4]
   d654c:	f000 f8bf 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6550:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6552:	f000 001f 	and.w	r0, r0, #31
   d6556:	2805      	cmp	r0, #5
   d6558:	d006      	beq.n	d6568 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d655a:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d655c:	4620      	mov	r0, r4
   d655e:	7023      	strb	r3, [r4, #0]
   d6560:	f7ff fe29 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6564:	2000      	movs	r0, #0
   d6566:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6568:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d656a:	bd38      	pop	{r3, r4, r5, pc}

000d656c <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d656c:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d656e:	7a83      	ldrb	r3, [r0, #10]
   d6570:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6572:	bf18      	it	ne
   d6574:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6576:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6578:	460a      	mov	r2, r1
   d657a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d657c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d657e:	f7ff fe73 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d6582:	4606      	mov	r6, r0
   d6584:	b108      	cbz	r0, d658a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6586:	2332      	movs	r3, #50	; 0x32
   d6588:	e01d      	b.n	d65c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d658a:	462a      	mov	r2, r5
   d658c:	21fe      	movs	r1, #254	; 0xfe
   d658e:	4620      	mov	r0, r4
   d6590:	f7ff ffc7 	bl	d6522 <_ZN9SdSpiCard9writeDataEhPKh>
   d6594:	b1c0      	cbz	r0, d65c8 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6596:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d659a:	4620      	mov	r0, r4
   d659c:	f7ff fe4f 	bl	d623e <_ZN9SdSpiCard11waitNotBusyEt>
   d65a0:	4605      	mov	r5, r0
   d65a2:	b908      	cbnz	r0, d65a8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d65a4:	235a      	movs	r3, #90	; 0x5a
   d65a6:	e00e      	b.n	d65c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d65a8:	4632      	mov	r2, r6
   d65aa:	210d      	movs	r1, #13
   d65ac:	4620      	mov	r0, r4
   d65ae:	f7ff fe5b 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d65b2:	b938      	cbnz	r0, d65c4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65b4:	6860      	ldr	r0, [r4, #4]
   d65b6:	f000 f88a 	bl	d66ce <_ZN14SdSpiAltDriver7receiveEv>
   d65ba:	b918      	cbnz	r0, d65c4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d65bc:	4620      	mov	r0, r4
   d65be:	f7ff fdfa 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d65c2:	e005      	b.n	d65d0 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d65c4:	2329      	movs	r3, #41	; 0x29
   d65c6:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d65c8:	4620      	mov	r0, r4
   d65ca:	f7ff fdf4 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ce:	2500      	movs	r5, #0
}
   d65d0:	4628      	mov	r0, r5
   d65d2:	bd70      	pop	{r4, r5, r6, pc}

000d65d4 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d65d4:	b538      	push	{r3, r4, r5, lr}
   d65d6:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d65d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d65dc:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d65de:	f7ff fe2e 	bl	d623e <_ZN9SdSpiCard11waitNotBusyEt>
   d65e2:	b910      	cbnz	r0, d65ea <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d65e4:	235b      	movs	r3, #91	; 0x5b
   d65e6:	7023      	strb	r3, [r4, #0]
   d65e8:	e005      	b.n	d65f6 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d65ea:	462a      	mov	r2, r5
   d65ec:	21fc      	movs	r1, #252	; 0xfc
   d65ee:	4620      	mov	r0, r4
   d65f0:	f7ff ff97 	bl	d6522 <_ZN9SdSpiCard9writeDataEhPKh>
   d65f4:	b918      	cbnz	r0, d65fe <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d65f6:	4620      	mov	r0, r4
   d65f8:	f7ff fddd 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65fc:	2000      	movs	r0, #0
}
   d65fe:	bd38      	pop	{r3, r4, r5, pc}

000d6600 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6600:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6602:	7a83      	ldrb	r3, [r0, #10]
   d6604:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6606:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6608:	bf18      	it	ne
   d660a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d660c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d660e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6610:	f7ff fe2a 	bl	d6268 <_ZN9SdSpiCard11cardCommandEhm>
   d6614:	b130      	cbz	r0, d6624 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6616:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6618:	4620      	mov	r0, r4
   d661a:	7023      	strb	r3, [r4, #0]
   d661c:	f7ff fdcb 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6620:	2000      	movs	r0, #0
   d6622:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6624:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6626:	bd10      	pop	{r4, pc}

000d6628 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6628:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d662a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d662e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6630:	f7ff fe05 	bl	d623e <_ZN9SdSpiCard11waitNotBusyEt>
   d6634:	4605      	mov	r5, r0
   d6636:	b120      	cbz	r0, d6642 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6638:	21fd      	movs	r1, #253	; 0xfd
   d663a:	6860      	ldr	r0, [r4, #4]
   d663c:	f000 f862 	bl	d6704 <_ZN14SdSpiAltDriver4sendEh>
   d6640:	e001      	b.n	d6646 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6642:	2356      	movs	r3, #86	; 0x56
   d6644:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6646:	4620      	mov	r0, r4
   d6648:	f7ff fdb5 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d664c:	4628      	mov	r0, r5
   d664e:	bd38      	pop	{r3, r4, r5, pc}

000d6650 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6652:	4605      	mov	r5, r0
   d6654:	4616      	mov	r6, r2
   d6656:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6658:	f7ff ffd2 	bl	d6600 <_ZN9SdSpiCard10writeStartEm>
   d665c:	b170      	cbz	r0, d667c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d665e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6660:	42bc      	cmp	r4, r7
   d6662:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6666:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6668:	d004      	beq.n	d6674 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d666a:	f7ff ffb3 	bl	d65d4 <_ZN9SdSpiCard9writeDataEPKh>
   d666e:	b128      	cbz	r0, d667c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6670:	3401      	adds	r4, #1
   d6672:	e7f5      	b.n	d6660 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6674:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6678:	f7ff bfd6 	b.w	d6628 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d667c:	4628      	mov	r0, r5
   d667e:	f7ff fd9a 	bl	d61b6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6682:	2000      	movs	r0, #0
   d6684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6686 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6686:	f000 b95f 	b.w	d6948 <HAL_Pin_Map>

000d668a <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d668a:	f000 b95d 	b.w	d6948 <HAL_Pin_Map>

000d668e <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d668e:	f000 b95b 	b.w	d6948 <HAL_Pin_Map>
	...

000d6694 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6694:	4b01      	ldr	r3, [pc, #4]	; (d669c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6696:	2201      	movs	r2, #1
   d6698:	701a      	strb	r2, [r3, #0]
   d669a:	4770      	bx	lr
   d669c:	2003e344 	.word	0x2003e344

000d66a0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d66a0:	1d01      	adds	r1, r0, #4
   d66a2:	6800      	ldr	r0, [r0, #0]
   d66a4:	f002 bab0 	b.w	d8c08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d66a8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d66a8:	b510      	push	{r4, lr}
   d66aa:	4604      	mov	r4, r0
  m_csPin = csPin;
   d66ac:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d66ae:	6800      	ldr	r0, [r0, #0]
   d66b0:	f002 fa80 	bl	d8bb4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d66b4:	7d20      	ldrb	r0, [r4, #20]
   d66b6:	2101      	movs	r1, #1
   d66b8:	f002 feac 	bl	d9414 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d66bc:	7d20      	ldrb	r0, [r4, #20]
   d66be:	2101      	movs	r1, #1
}
   d66c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d66c4:	f002 beb7 	b.w	d9436 <digitalWrite>

000d66c8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d66c8:	6800      	ldr	r0, [r0, #0]
   d66ca:	f002 ba84 	b.w	d8bd6 <_ZN8SPIClass14endTransactionEv>

000d66ce <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d66ce:	21ff      	movs	r1, #255	; 0xff
   d66d0:	6800      	ldr	r0, [r0, #0]
   d66d2:	f002 bb09 	b.w	d8ce8 <_ZN8SPIClass8transferEh>
	...

000d66d8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d66d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d66da:	4b08      	ldr	r3, [pc, #32]	; (d66fc <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d66dc:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d66de:	2500      	movs	r5, #0
   d66e0:	4c07      	ldr	r4, [pc, #28]	; (d6700 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d66e2:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d66e4:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d66e6:	4613      	mov	r3, r2
   d66e8:	460a      	mov	r2, r1
   d66ea:	4629      	mov	r1, r5
   d66ec:	f002 fb02 	bl	d8cf4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d66f0:	7823      	ldrb	r3, [r4, #0]
   d66f2:	2b00      	cmp	r3, #0
   d66f4:	d0fc      	beq.n	d66f0 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d66f6:	2000      	movs	r0, #0
   d66f8:	b003      	add	sp, #12
   d66fa:	bd30      	pop	{r4, r5, pc}
   d66fc:	000d6695 	.word	0x000d6695
   d6700:	2003e344 	.word	0x2003e344

000d6704 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6704:	6800      	ldr	r0, [r0, #0]
   d6706:	f002 baef 	b.w	d8ce8 <_ZN8SPIClass8transferEh>
	...

000d670c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d670c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d670e:	4b07      	ldr	r3, [pc, #28]	; (d672c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6710:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6712:	2500      	movs	r5, #0
   d6714:	4c06      	ldr	r4, [pc, #24]	; (d6730 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6716:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6718:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d671a:	4613      	mov	r3, r2
   d671c:	462a      	mov	r2, r5
   d671e:	f002 fae9 	bl	d8cf4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6722:	7823      	ldrb	r3, [r4, #0]
   d6724:	2b00      	cmp	r3, #0
   d6726:	d0fc      	beq.n	d6722 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6728:	b003      	add	sp, #12
   d672a:	bd30      	pop	{r4, r5, pc}
   d672c:	000d6695 	.word	0x000d6695
   d6730:	2003e344 	.word	0x2003e344

000d6734 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6734:	f000 b908 	b.w	d6948 <HAL_Pin_Map>

000d6738 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6738:	f000 b906 	b.w	d6948 <HAL_Pin_Map>

000d673c <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d673c:	f000 b904 	b.w	d6948 <HAL_Pin_Map>

000d6740 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <hal_ble_stack_init+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	689b      	ldr	r3, [r3, #8]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030278 	.word	0x00030278

000d6750 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <hal_ble_gap_start_scan+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030278 	.word	0x00030278

000d6760 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b03      	ldr	r3, [pc, #12]	; (d6770 <hal_ble_gap_stop_scan+0x10>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d676a:	9301      	str	r3, [sp, #4]
   d676c:	bd08      	pop	{r3, pc}
   d676e:	0000      	.short	0x0000
   d6770:	00030278 	.word	0x00030278

000d6774 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b03      	ldr	r3, [pc, #12]	; (d6784 <hal_ble_gap_disconnect+0x10>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d677e:	9301      	str	r3, [sp, #4]
   d6780:	bd08      	pop	{r3, pc}
   d6782:	0000      	.short	0x0000
   d6784:	00030278 	.word	0x00030278

000d6788 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6788:	b508      	push	{r3, lr}
   d678a:	4b03      	ldr	r3, [pc, #12]	; (d6798 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d678c:	681b      	ldr	r3, [r3, #0]
   d678e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d6792:	9301      	str	r3, [sp, #4]
   d6794:	bd08      	pop	{r3, pc}
   d6796:	0000      	.short	0x0000
   d6798:	00030278 	.word	0x00030278

000d679c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b03      	ldr	r3, [pc, #12]	; (d67ac <hal_ble_gatt_client_discover_all_services+0x10>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d67a6:	9301      	str	r3, [sp, #4]
   d67a8:	bd08      	pop	{r3, pc}
   d67aa:	0000      	.short	0x0000
   d67ac:	00030278 	.word	0x00030278

000d67b0 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b03      	ldr	r3, [pc, #12]	; (d67c0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d67ba:	9301      	str	r3, [sp, #4]
   d67bc:	bd08      	pop	{r3, pc}
   d67be:	0000      	.short	0x0000
   d67c0:	00030278 	.word	0x00030278

000d67c4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b03      	ldr	r3, [pc, #12]	; (d67d4 <hal_ble_gatt_client_write_with_response+0x10>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d67ce:	9301      	str	r3, [sp, #4]
   d67d0:	bd08      	pop	{r3, pc}
   d67d2:	0000      	.short	0x0000
   d67d4:	00030278 	.word	0x00030278

000d67d8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d67d8:	b508      	push	{r3, lr}
   d67da:	4b03      	ldr	r3, [pc, #12]	; (d67e8 <hal_ble_gatt_client_write_without_response+0x10>)
   d67dc:	681b      	ldr	r3, [r3, #0]
   d67de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d67e2:	9301      	str	r3, [sp, #4]
   d67e4:	bd08      	pop	{r3, pc}
   d67e6:	0000      	.short	0x0000
   d67e8:	00030278 	.word	0x00030278

000d67ec <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b03      	ldr	r3, [pc, #12]	; (d67fc <hal_ble_gatt_client_read+0x10>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d67f6:	9301      	str	r3, [sp, #4]
   d67f8:	bd08      	pop	{r3, pc}
   d67fa:	0000      	.short	0x0000
   d67fc:	00030278 	.word	0x00030278

000d6800 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b03      	ldr	r3, [pc, #12]	; (d6810 <hal_ble_gap_connect+0x10>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d680a:	9301      	str	r3, [sp, #4]
   d680c:	bd08      	pop	{r3, pc}
   d680e:	0000      	.short	0x0000
   d6810:	00030278 	.word	0x00030278

000d6814 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b03      	ldr	r3, [pc, #12]	; (d6824 <hal_ble_gap_get_connection_info+0x10>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d681e:	9301      	str	r3, [sp, #4]
   d6820:	bd08      	pop	{r3, pc}
   d6822:	0000      	.short	0x0000
   d6824:	00030278 	.word	0x00030278

000d6828 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b03      	ldr	r3, [pc, #12]	; (d6838 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d6832:	9301      	str	r3, [sp, #4]
   d6834:	bd08      	pop	{r3, pc}
   d6836:	0000      	.short	0x0000
   d6838:	00030278 	.word	0x00030278

000d683c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b03      	ldr	r3, [pc, #12]	; (d684c <hal_ble_gatt_client_configure_cccd+0x10>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d6846:	9301      	str	r3, [sp, #4]
   d6848:	bd08      	pop	{r3, pc}
   d684a:	0000      	.short	0x0000
   d684c:	00030278 	.word	0x00030278

000d6850 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6850:	b508      	push	{r3, lr}
   d6852:	4b03      	ldr	r3, [pc, #12]	; (d6860 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d6854:	681b      	ldr	r3, [r3, #0]
   d6856:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d685a:	9301      	str	r3, [sp, #4]
   d685c:	bd08      	pop	{r3, pc}
   d685e:	0000      	.short	0x0000
   d6860:	00030278 	.word	0x00030278

000d6864 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b03      	ldr	r3, [pc, #12]	; (d6874 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d686e:	9301      	str	r3, [sp, #4]
   d6870:	bd08      	pop	{r3, pc}
   d6872:	0000      	.short	0x0000
   d6874:	00030278 	.word	0x00030278

000d6878 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <os_thread_is_current+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	689b      	ldr	r3, [r3, #8]
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	00030248 	.word	0x00030248

000d6888 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6888:	b508      	push	{r3, lr}
   d688a:	4b02      	ldr	r3, [pc, #8]	; (d6894 <os_thread_join+0xc>)
   d688c:	681b      	ldr	r3, [r3, #0]
   d688e:	691b      	ldr	r3, [r3, #16]
   d6890:	9301      	str	r3, [sp, #4]
   d6892:	bd08      	pop	{r3, pc}
   d6894:	00030248 	.word	0x00030248

000d6898 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6898:	b508      	push	{r3, lr}
   d689a:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <os_thread_cleanup+0xc>)
   d689c:	681b      	ldr	r3, [r3, #0]
   d689e:	695b      	ldr	r3, [r3, #20]
   d68a0:	9301      	str	r3, [sp, #4]
   d68a2:	bd08      	pop	{r3, pc}
   d68a4:	00030248 	.word	0x00030248

000d68a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d68a8:	b508      	push	{r3, lr}
   d68aa:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <os_mutex_recursive_create+0xc>)
   d68ac:	681b      	ldr	r3, [r3, #0]
   d68ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d68b0:	9301      	str	r3, [sp, #4]
   d68b2:	bd08      	pop	{r3, pc}
   d68b4:	00030248 	.word	0x00030248

000d68b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d68b8:	b508      	push	{r3, lr}
   d68ba:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <os_mutex_recursive_destroy+0xc>)
   d68bc:	681b      	ldr	r3, [r3, #0]
   d68be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	bd08      	pop	{r3, pc}
   d68c4:	00030248 	.word	0x00030248

000d68c8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d68c8:	b508      	push	{r3, lr}
   d68ca:	4b02      	ldr	r3, [pc, #8]	; (d68d4 <os_mutex_recursive_lock+0xc>)
   d68cc:	681b      	ldr	r3, [r3, #0]
   d68ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d68d0:	9301      	str	r3, [sp, #4]
   d68d2:	bd08      	pop	{r3, pc}
   d68d4:	00030248 	.word	0x00030248

000d68d8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d68d8:	b508      	push	{r3, lr}
   d68da:	4b02      	ldr	r3, [pc, #8]	; (d68e4 <os_mutex_recursive_unlock+0xc>)
   d68dc:	681b      	ldr	r3, [r3, #0]
   d68de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d68e0:	9301      	str	r3, [sp, #4]
   d68e2:	bd08      	pop	{r3, pc}
   d68e4:	00030248 	.word	0x00030248

000d68e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d68e8:	b508      	push	{r3, lr}
   d68ea:	4b02      	ldr	r3, [pc, #8]	; (d68f4 <HAL_RNG_GetRandomNumber+0xc>)
   d68ec:	681b      	ldr	r3, [r3, #0]
   d68ee:	685b      	ldr	r3, [r3, #4]
   d68f0:	9301      	str	r3, [sp, #4]
   d68f2:	bd08      	pop	{r3, pc}
   d68f4:	00030218 	.word	0x00030218

000d68f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d68f8:	b508      	push	{r3, lr}
   d68fa:	4b02      	ldr	r3, [pc, #8]	; (d6904 <HAL_Delay_Microseconds+0xc>)
   d68fc:	681b      	ldr	r3, [r3, #0]
   d68fe:	68db      	ldr	r3, [r3, #12]
   d6900:	9301      	str	r3, [sp, #4]
   d6902:	bd08      	pop	{r3, pc}
   d6904:	00030218 	.word	0x00030218

000d6908 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b02      	ldr	r3, [pc, #8]	; (d6914 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	691b      	ldr	r3, [r3, #16]
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	bd08      	pop	{r3, pc}
   d6914:	00030218 	.word	0x00030218

000d6918 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6918:	b508      	push	{r3, lr}
   d691a:	4b02      	ldr	r3, [pc, #8]	; (d6924 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d691c:	681b      	ldr	r3, [r3, #0]
   d691e:	695b      	ldr	r3, [r3, #20]
   d6920:	9301      	str	r3, [sp, #4]
   d6922:	bd08      	pop	{r3, pc}
   d6924:	00030218 	.word	0x00030218

000d6928 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6928:	b508      	push	{r3, lr}
   d692a:	4b02      	ldr	r3, [pc, #8]	; (d6934 <HAL_RTC_Get_UnixTime+0xc>)
   d692c:	681b      	ldr	r3, [r3, #0]
   d692e:	69db      	ldr	r3, [r3, #28]
   d6930:	9301      	str	r3, [sp, #4]
   d6932:	bd08      	pop	{r3, pc}
   d6934:	00030218 	.word	0x00030218

000d6938 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6938:	b508      	push	{r3, lr}
   d693a:	4b02      	ldr	r3, [pc, #8]	; (d6944 <HAL_RTC_Time_Is_Valid+0xc>)
   d693c:	681b      	ldr	r3, [r3, #0]
   d693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6940:	9301      	str	r3, [sp, #4]
   d6942:	bd08      	pop	{r3, pc}
   d6944:	00030218 	.word	0x00030218

000d6948 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6948:	b508      	push	{r3, lr}
   d694a:	4b02      	ldr	r3, [pc, #8]	; (d6954 <HAL_Pin_Map+0xc>)
   d694c:	681b      	ldr	r3, [r3, #0]
   d694e:	681b      	ldr	r3, [r3, #0]
   d6950:	9301      	str	r3, [sp, #4]
   d6952:	bd08      	pop	{r3, pc}
   d6954:	0003022c 	.word	0x0003022c

000d6958 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <HAL_Pin_Mode+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	689b      	ldr	r3, [r3, #8]
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	0003022c 	.word	0x0003022c

000d6968 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b02      	ldr	r3, [pc, #8]	; (d6974 <HAL_Get_Pin_Mode+0xc>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	68db      	ldr	r3, [r3, #12]
   d6970:	9301      	str	r3, [sp, #4]
   d6972:	bd08      	pop	{r3, pc}
   d6974:	0003022c 	.word	0x0003022c

000d6978 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6978:	b508      	push	{r3, lr}
   d697a:	4b02      	ldr	r3, [pc, #8]	; (d6984 <HAL_GPIO_Write+0xc>)
   d697c:	681b      	ldr	r3, [r3, #0]
   d697e:	691b      	ldr	r3, [r3, #16]
   d6980:	9301      	str	r3, [sp, #4]
   d6982:	bd08      	pop	{r3, pc}
   d6984:	0003022c 	.word	0x0003022c

000d6988 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6988:	b508      	push	{r3, lr}
   d698a:	4b02      	ldr	r3, [pc, #8]	; (d6994 <HAL_I2C_Write_Data+0xc>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	6a1b      	ldr	r3, [r3, #32]
   d6990:	9301      	str	r3, [sp, #4]
   d6992:	bd08      	pop	{r3, pc}
   d6994:	00030228 	.word	0x00030228

000d6998 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6998:	b508      	push	{r3, lr}
   d699a:	4b02      	ldr	r3, [pc, #8]	; (d69a4 <HAL_I2C_Available_Data+0xc>)
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d69a0:	9301      	str	r3, [sp, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	00030228 	.word	0x00030228

000d69a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d69a8:	b508      	push	{r3, lr}
   d69aa:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <HAL_I2C_Read_Data+0xc>)
   d69ac:	681b      	ldr	r3, [r3, #0]
   d69ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69b0:	9301      	str	r3, [sp, #4]
   d69b2:	bd08      	pop	{r3, pc}
   d69b4:	00030228 	.word	0x00030228

000d69b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d69b8:	b508      	push	{r3, lr}
   d69ba:	4b02      	ldr	r3, [pc, #8]	; (d69c4 <HAL_I2C_Peek_Data+0xc>)
   d69bc:	681b      	ldr	r3, [r3, #0]
   d69be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d69c0:	9301      	str	r3, [sp, #4]
   d69c2:	bd08      	pop	{r3, pc}
   d69c4:	00030228 	.word	0x00030228

000d69c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d69c8:	b508      	push	{r3, lr}
   d69ca:	4b02      	ldr	r3, [pc, #8]	; (d69d4 <HAL_I2C_Flush_Data+0xc>)
   d69cc:	681b      	ldr	r3, [r3, #0]
   d69ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69d0:	9301      	str	r3, [sp, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	00030228 	.word	0x00030228

000d69d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d69d8:	b508      	push	{r3, lr}
   d69da:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <HAL_I2C_Is_Enabled+0xc>)
   d69dc:	681b      	ldr	r3, [r3, #0]
   d69de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d69e0:	9301      	str	r3, [sp, #4]
   d69e2:	bd08      	pop	{r3, pc}
   d69e4:	00030228 	.word	0x00030228

000d69e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d69e8:	b508      	push	{r3, lr}
   d69ea:	4b02      	ldr	r3, [pc, #8]	; (d69f4 <HAL_I2C_Init+0xc>)
   d69ec:	681b      	ldr	r3, [r3, #0]
   d69ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d69f0:	9301      	str	r3, [sp, #4]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	00030228 	.word	0x00030228

000d69f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d69f8:	b508      	push	{r3, lr}
   d69fa:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <inet_inet_ntop+0xc>)
   d69fc:	681b      	ldr	r3, [r3, #0]
   d69fe:	695b      	ldr	r3, [r3, #20]
   d6a00:	9301      	str	r3, [sp, #4]
   d6a02:	bd08      	pop	{r3, pc}
   d6a04:	00030264 	.word	0x00030264

000d6a08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <netdb_freeaddrinfo+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	689b      	ldr	r3, [r3, #8]
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030268 	.word	0x00030268

000d6a18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <netdb_getaddrinfo+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	68db      	ldr	r3, [r3, #12]
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	00030268 	.word	0x00030268

000d6a28 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <HAL_SPI_Begin+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	681b      	ldr	r3, [r3, #0]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	00030230 	.word	0x00030230

000d6a38 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <HAL_SPI_Send_Receive_Data+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	695b      	ldr	r3, [r3, #20]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	00030230 	.word	0x00030230

000d6a48 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <HAL_SPI_Init+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	69db      	ldr	r3, [r3, #28]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	00030230 	.word	0x00030230

000d6a58 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <HAL_SPI_Is_Enabled+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	6a1b      	ldr	r3, [r3, #32]
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	00030230 	.word	0x00030230

000d6a68 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <HAL_SPI_Info+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030230 	.word	0x00030230

000d6a78 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <HAL_SPI_DMA_Transfer+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030230 	.word	0x00030230

000d6a88 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030230 	.word	0x00030230

000d6a98 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <HAL_SPI_Set_Settings+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	00030230 	.word	0x00030230

000d6aa8 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <HAL_SPI_Acquire+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	00030230 	.word	0x00030230

000d6ab8 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <HAL_SPI_Release+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	00030230 	.word	0x00030230

000d6ac8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_USART_Init+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	681b      	ldr	r3, [r3, #0]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003023c 	.word	0x0003023c

000d6ad8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <HAL_USART_Write_Data+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	68db      	ldr	r3, [r3, #12]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	0003023c 	.word	0x0003023c

000d6ae8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <HAL_USART_Available_Data+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	691b      	ldr	r3, [r3, #16]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	0003023c 	.word	0x0003023c

000d6af8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <HAL_USART_Read_Data+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	695b      	ldr	r3, [r3, #20]
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	0003023c 	.word	0x0003023c

000d6b08 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <HAL_USART_Peek_Data+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	699b      	ldr	r3, [r3, #24]
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	0003023c 	.word	0x0003023c

000d6b18 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <HAL_USART_Flush_Data+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	69db      	ldr	r3, [r3, #28]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	0003023c 	.word	0x0003023c

000d6b28 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <HAL_USART_Is_Enabled+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	6a1b      	ldr	r3, [r3, #32]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	0003023c 	.word	0x0003023c

000d6b38 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <HAL_USART_Available_Data_For_Write+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	0003023c 	.word	0x0003023c

000d6b48 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <HAL_USB_USART_Init+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	681b      	ldr	r3, [r3, #0]
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	0003024c 	.word	0x0003024c

000d6b58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <HAL_USB_USART_Begin+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	685b      	ldr	r3, [r3, #4]
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	0003024c 	.word	0x0003024c

000d6b68 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <HAL_USB_USART_Available_Data+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	691b      	ldr	r3, [r3, #16]
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	0003024c 	.word	0x0003024c

000d6b78 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	695b      	ldr	r3, [r3, #20]
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	0003024c 	.word	0x0003024c

000d6b88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <HAL_USB_USART_Receive_Data+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	699b      	ldr	r3, [r3, #24]
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	0003024c 	.word	0x0003024c

000d6b98 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <HAL_USB_USART_Send_Data+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	69db      	ldr	r3, [r3, #28]
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	0003024c 	.word	0x0003024c

000d6ba8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <HAL_USB_USART_Flush_Data+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	6a1b      	ldr	r3, [r3, #32]
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	0003024c 	.word	0x0003024c

000d6bb8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <panic_+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030260 	.word	0x00030260

000d6bc8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <log_message+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030260 	.word	0x00030260

000d6bd8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <system_mode+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	681b      	ldr	r3, [r3, #0]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030220 	.word	0x00030220

000d6be8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <set_system_mode+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	685b      	ldr	r3, [r3, #4]
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030220 	.word	0x00030220

000d6bf8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <system_delay_ms+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	695b      	ldr	r3, [r3, #20]
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030220 	.word	0x00030220

000d6c08 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <system_thread_get_state+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030220 	.word	0x00030220

000d6c18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b03      	ldr	r3, [pc, #12]	; (d6c28 <system_ctrl_set_app_request_handler+0x10>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6c22:	9301      	str	r3, [sp, #4]
   d6c24:	bd08      	pop	{r3, pc}
   d6c26:	0000      	.short	0x0000
   d6c28:	00030220 	.word	0x00030220

000d6c2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b03      	ldr	r3, [pc, #12]	; (d6c3c <system_ctrl_set_result+0x10>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6c36:	9301      	str	r3, [sp, #4]
   d6c38:	bd08      	pop	{r3, pc}
   d6c3a:	0000      	.short	0x0000
   d6c3c:	00030220 	.word	0x00030220

000d6c40 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <spark_process+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	689b      	ldr	r3, [r3, #8]
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030244 	.word	0x00030244

000d6c50 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <spark_cloud_flag_connected+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	695b      	ldr	r3, [r3, #20]
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030244 	.word	0x00030244

000d6c60 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <spark_subscribe+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030244 	.word	0x00030244

000d6c70 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <spark_sync_time_pending+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030244 	.word	0x00030244

000d6c80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030244 	.word	0x00030244

000d6c90 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <network_connect+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	685b      	ldr	r3, [r3, #4]
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030240 	.word	0x00030240

000d6ca0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <network_connecting+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	689b      	ldr	r3, [r3, #8]
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030240 	.word	0x00030240

000d6cb0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <network_disconnect+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	68db      	ldr	r3, [r3, #12]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	00030240 	.word	0x00030240

000d6cc0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <network_ready+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	691b      	ldr	r3, [r3, #16]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	00030240 	.word	0x00030240

000d6cd0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <network_on+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	695b      	ldr	r3, [r3, #20]
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	00030240 	.word	0x00030240

000d6ce0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <network_off+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	699b      	ldr	r3, [r3, #24]
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	00030240 	.word	0x00030240

000d6cf0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <network_listen+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	69db      	ldr	r3, [r3, #28]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	00030240 	.word	0x00030240

000d6d00 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <network_listening+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	6a1b      	ldr	r3, [r3, #32]
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	00030240 	.word	0x00030240

000d6d10 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <network_set_listen_timeout+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	00030240 	.word	0x00030240

000d6d20 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <network_get_listen_timeout+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	00030240 	.word	0x00030240

000d6d30 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <malloc+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	681b      	ldr	r3, [r3, #0]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	0003021c 	.word	0x0003021c

000d6d40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <free+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	685b      	ldr	r3, [r3, #4]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	0003021c 	.word	0x0003021c

000d6d50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <realloc+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	689b      	ldr	r3, [r3, #8]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	0003021c 	.word	0x0003021c

000d6d60 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <sprintf+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	68db      	ldr	r3, [r3, #12]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	0003021c 	.word	0x0003021c

000d6d70 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <sscanf+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	695b      	ldr	r3, [r3, #20]
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	0003021c 	.word	0x0003021c

000d6d80 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <siscanf+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	699b      	ldr	r3, [r3, #24]
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	0003021c 	.word	0x0003021c

000d6d90 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <snprintf+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	69db      	ldr	r3, [r3, #28]
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	0003021c 	.word	0x0003021c

000d6da0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <vsnprintf+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	0003021c 	.word	0x0003021c

000d6db0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b02      	ldr	r3, [pc, #8]	; (d6dbc <_malloc_r+0xc>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6db8:	9301      	str	r3, [sp, #4]
   d6dba:	bd08      	pop	{r3, pc}
   d6dbc:	0003021c 	.word	0x0003021c

000d6dc0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6dc0:	2100      	movs	r1, #0
   d6dc2:	f7ff bf19 	b.w	d6bf8 <system_delay_ms>

000d6dc6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6dc6:	4770      	bx	lr

000d6dc8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6dc8:	2000      	movs	r0, #0
   d6dca:	4770      	bx	lr

000d6dcc <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6dcc:	4770      	bx	lr

000d6dce <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6dce:	2000      	movs	r0, #0
   d6dd0:	4770      	bx	lr

000d6dd2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6dd2:	4770      	bx	lr

000d6dd4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6dd4:	2000      	movs	r0, #0
   d6dd6:	4770      	bx	lr

000d6dd8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6dd8:	b510      	push	{r4, lr}
   d6dda:	2114      	movs	r1, #20
   d6ddc:	4604      	mov	r4, r0
   d6dde:	f002 fb88 	bl	d94f2 <_ZdlPvj>
   d6de2:	4620      	mov	r0, r4
   d6de4:	bd10      	pop	{r4, pc}

000d6de6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6de6:	b510      	push	{r4, lr}
   d6de8:	2114      	movs	r1, #20
   d6dea:	4604      	mov	r4, r0
   d6dec:	f002 fb81 	bl	d94f2 <_ZdlPvj>
   d6df0:	4620      	mov	r0, r4
   d6df2:	bd10      	pop	{r4, pc}

000d6df4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6df4:	b510      	push	{r4, lr}
   d6df6:	2114      	movs	r1, #20
   d6df8:	4604      	mov	r4, r0
   d6dfa:	f002 fb7a 	bl	d94f2 <_ZdlPvj>
   d6dfe:	4620      	mov	r0, r4
   d6e00:	bd10      	pop	{r4, pc}

000d6e02 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6e02:	f7fd b94a 	b.w	d409a <_ZdlPv>

000d6e06 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6e06:	f7fd b948 	b.w	d409a <_ZdlPv>

000d6e0a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6e0a:	f7fd b946 	b.w	d409a <_ZdlPv>

000d6e0e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6e0e:	b510      	push	{r4, lr}
   d6e10:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6e12:	6800      	ldr	r0, [r0, #0]
   d6e14:	b108      	cbz	r0, d6e1a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6e16:	f7ff fd4f 	bl	d68b8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	bd10      	pop	{r4, pc}
	...

000d6e20 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6e20:	b530      	push	{r4, r5, lr}
   d6e22:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d6e24:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6e26:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d6e28:	2400      	movs	r4, #0
   d6e2a:	9302      	str	r3, [sp, #8]
   d6e2c:	4b08      	ldr	r3, [pc, #32]	; (d6e50 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d6e2e:	9300      	str	r3, [sp, #0]
   d6e30:	aa02      	add	r2, sp, #8
   d6e32:	4623      	mov	r3, r4
   d6e34:	4907      	ldr	r1, [pc, #28]	; (d6e54 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d6e36:	9403      	str	r4, [sp, #12]
   d6e38:	2001      	movs	r0, #1
   d6e3a:	f7ff fec5 	bl	d6bc8 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d6e3e:	6828      	ldr	r0, [r5, #0]
   d6e40:	4905      	ldr	r1, [pc, #20]	; (d6e58 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d6e42:	8800      	ldrh	r0, [r0, #0]
   d6e44:	4623      	mov	r3, r4
   d6e46:	462a      	mov	r2, r5
   d6e48:	f7ff fca8 	bl	d679c <hal_ble_gatt_client_discover_all_services>
    }
   d6e4c:	b00b      	add	sp, #44	; 0x2c
   d6e4e:	bd30      	pop	{r4, r5, pc}
   d6e50:	000da98b 	.word	0x000da98b
   d6e54:	000da980 	.word	0x000da980
   d6e58:	000d8439 	.word	0x000d8439

000d6e5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6e5c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6e5e:	200a      	movs	r0, #10
   d6e60:	4a02      	ldr	r2, [pc, #8]	; (d6e6c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d6e62:	2100      	movs	r1, #0
   d6e64:	f7ff fea8 	bl	d6bb8 <panic_>
    }
}
   d6e68:	bd08      	pop	{r3, pc}
   d6e6a:	bf00      	nop
   d6e6c:	000d68f9 	.word	0x000d68f9

000d6e70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6e70:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6e72:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6e74:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6e76:	689b      	ldr	r3, [r3, #8]
   d6e78:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6e7a:	68a3      	ldr	r3, [r4, #8]
   d6e7c:	3b01      	subs	r3, #1
   d6e7e:	60a3      	str	r3, [r4, #8]
   d6e80:	b92b      	cbnz	r3, d6e8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6e82:	6823      	ldr	r3, [r4, #0]
   d6e84:	4620      	mov	r0, r4
   d6e86:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6e8c:	4718      	bx	r3
   d6e8e:	bd10      	pop	{r4, pc}

000d6e90 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6e90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6e94:	b2da      	uxtb	r2, r3
   d6e96:	2a09      	cmp	r2, #9
   d6e98:	d801      	bhi.n	d6e9e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6e9a:	4618      	mov	r0, r3
   d6e9c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6e9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6ea2:	2b05      	cmp	r3, #5
   d6ea4:	d801      	bhi.n	d6eaa <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6ea6:	3857      	subs	r0, #87	; 0x57
   d6ea8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6eaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6eae:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6eb0:	bf94      	ite	ls
   d6eb2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6eb4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d6eb8:	4770      	bx	lr
	...

000d6ebc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6ebc:	b510      	push	{r4, lr}
            locked_(false) {
   d6ebe:	2300      	movs	r3, #0
   d6ec0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6ec2:	4b04      	ldr	r3, [pc, #16]	; (d6ed4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6ec4:	4604      	mov	r4, r0
   d6ec6:	6818      	ldr	r0, [r3, #0]
   d6ec8:	f7ff fcfe 	bl	d68c8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d6ecc:	2301      	movs	r3, #1
   d6ece:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	bd10      	pop	{r4, pc}
   d6ed4:	2003e350 	.word	0x2003e350

000d6ed8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6ed8:	b510      	push	{r4, lr}
        if (locked_) {
   d6eda:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d6edc:	4604      	mov	r4, r0
        if (locked_) {
   d6ede:	b11b      	cbz	r3, d6ee8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6ee0:	4b02      	ldr	r3, [pc, #8]	; (d6eec <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6ee2:	6818      	ldr	r0, [r3, #0]
   d6ee4:	f7ff fcf8 	bl	d68d8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6ee8:	4620      	mov	r0, r4
   d6eea:	bd10      	pop	{r4, pc}
   d6eec:	2003e350 	.word	0x2003e350

000d6ef0 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6ef0:	2200      	movs	r2, #0
   d6ef2:	6002      	str	r2, [r0, #0]
   d6ef4:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d6ef6:	4770      	bx	lr

000d6ef8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6ef8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6efa:	7982      	ldrb	r2, [r0, #6]
   d6efc:	798b      	ldrb	r3, [r1, #6]
   d6efe:	429a      	cmp	r2, r3
   d6f00:	d106      	bne.n	d6f10 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6f02:	2206      	movs	r2, #6
   d6f04:	f002 fd64 	bl	d99d0 <memcmp>
   d6f08:	fab0 f080 	clz	r0, r0
   d6f0c:	0940      	lsrs	r0, r0, #5
   d6f0e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6f10:	2000      	movs	r0, #0
}
   d6f12:	bd08      	pop	{r3, pc}

000d6f14 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d6f14:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d6f16:	2301      	movs	r3, #1
   d6f18:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f1a:	4b05      	ldr	r3, [pc, #20]	; (d6f30 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d6f1c:	4602      	mov	r2, r0
   d6f1e:	f103 0110 	add.w	r1, r3, #16
   d6f22:	f853 4b04 	ldr.w	r4, [r3], #4
   d6f26:	f842 4b04 	str.w	r4, [r2], #4
   d6f2a:	428b      	cmp	r3, r1
   d6f2c:	d1f9      	bne.n	d6f22 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d6f2e:	bd10      	pop	{r4, pc}
   d6f30:	000dab20 	.word	0x000dab20

000d6f34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6f34:	7c0b      	ldrb	r3, [r1, #16]
   d6f36:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d6f3a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6f3c:	d110      	bne.n	d6f60 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d6f3e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f40:	4b0d      	ldr	r3, [pc, #52]	; (d6f78 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d6f42:	4602      	mov	r2, r0
   d6f44:	f103 0410 	add.w	r4, r3, #16
   d6f48:	f853 5b04 	ldr.w	r5, [r3], #4
   d6f4c:	f842 5b04 	str.w	r5, [r2], #4
   d6f50:	42a3      	cmp	r3, r4
   d6f52:	d1f9      	bne.n	d6f48 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d6f54:	880b      	ldrh	r3, [r1, #0]
   d6f56:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d6f58:	880b      	ldrh	r3, [r1, #0]
   d6f5a:	121b      	asrs	r3, r3, #8
   d6f5c:	7343      	strb	r3, [r0, #13]
   d6f5e:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d6f60:	2301      	movs	r3, #1
   d6f62:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6f64:	f101 0210 	add.w	r2, r1, #16
   d6f68:	4603      	mov	r3, r0
   d6f6a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f6e:	f843 4b04 	str.w	r4, [r3], #4
   d6f72:	4291      	cmp	r1, r2
   d6f74:	d1f9      	bne.n	d6f6a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d6f76:	bd30      	pop	{r4, r5, pc}
   d6f78:	000dab20 	.word	0x000dab20

000d6f7c <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d6f7c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6f7e:	690b      	ldr	r3, [r1, #16]
   d6f80:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6f82:	f101 0210 	add.w	r2, r1, #16
   d6f86:	4603      	mov	r3, r0
   d6f88:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f8c:	f843 4b04 	str.w	r4, [r3], #4
   d6f90:	4291      	cmp	r1, r2
   d6f92:	d1f9      	bne.n	d6f88 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6f94:	bd10      	pop	{r4, pc}

000d6f96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6f96:	b510      	push	{r4, lr}
    if (uuid128) {
   d6f98:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6f9a:	4604      	mov	r4, r0
    if (uuid128) {
   d6f9c:	b1b9      	cbz	r1, d6fce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d6f9e:	2a01      	cmp	r2, #1
   d6fa0:	d109      	bne.n	d6fb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6fa2:	4603      	mov	r3, r0
   d6fa4:	f101 0210 	add.w	r2, r1, #16
   d6fa8:	f851 0b04 	ldr.w	r0, [r1], #4
   d6fac:	f843 0b04 	str.w	r0, [r3], #4
   d6fb0:	4291      	cmp	r1, r2
   d6fb2:	d1f9      	bne.n	d6fa8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d6fb4:	e008      	b.n	d6fc8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d6fb6:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d6fb8:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d6fba:	5c98      	ldrb	r0, [r3, r2]
   d6fbc:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6fc0:	3a01      	subs	r2, #1
   d6fc2:	b2d2      	uxtb	r2, r2
   d6fc4:	2aff      	cmp	r2, #255	; 0xff
   d6fc6:	d1f8      	bne.n	d6fba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d6fc8:	2301      	movs	r3, #1
   d6fca:	6123      	str	r3, [r4, #16]
   d6fcc:	e002      	b.n	d6fd4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6fce:	2210      	movs	r2, #16
   d6fd0:	f002 fd33 	bl	d9a3a <memset>
    }
}
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	bd10      	pop	{r4, pc}

000d6fd8 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d6fd8:	b538      	push	{r3, r4, r5, lr}
   d6fda:	4604      	mov	r4, r0
   d6fdc:	460d      	mov	r5, r1
        : BleUuid() {
   d6fde:	f7ff ff99 	bl	d6f14 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d6fe2:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6fe4:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6fe6:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d6fe8:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6fea:	7365      	strb	r5, [r4, #13]
}
   d6fec:	4620      	mov	r0, r4
   d6fee:	bd38      	pop	{r3, r4, r5, pc}

000d6ff0 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d6ff0:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d6ff2:	690b      	ldr	r3, [r1, #16]
   d6ff4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6ff6:	f101 0210 	add.w	r2, r1, #16
   d6ffa:	4603      	mov	r3, r0
   d6ffc:	f851 4b04 	ldr.w	r4, [r1], #4
   d7000:	f843 4b04 	str.w	r4, [r3], #4
   d7004:	4291      	cmp	r1, r2
   d7006:	d1f9      	bne.n	d6ffc <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d7008:	bd10      	pop	{r4, pc}

000d700a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d700a:	b510      	push	{r4, lr}
   d700c:	b086      	sub	sp, #24
   d700e:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d7010:	2201      	movs	r2, #1
   d7012:	a801      	add	r0, sp, #4
   d7014:	f7ff ffbf 	bl	d6f96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7018:	a901      	add	r1, sp, #4
   d701a:	4620      	mov	r0, r4
   d701c:	f7ff ffe8 	bl	d6ff0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7020:	b006      	add	sp, #24
   d7022:	bd10      	pop	{r4, pc}

000d7024 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d7024:	b510      	push	{r4, lr}
   d7026:	b086      	sub	sp, #24
   d7028:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d702a:	a801      	add	r0, sp, #4
   d702c:	f7ff ffd4 	bl	d6fd8 <_ZN8particle7BleUuidC1Et>
   d7030:	a901      	add	r1, sp, #4
   d7032:	4620      	mov	r0, r4
   d7034:	f7ff ffdc 	bl	d6ff0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7038:	b006      	add	sp, #24
   d703a:	bd10      	pop	{r4, pc}

000d703c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d703c:	b510      	push	{r4, lr}
   d703e:	b086      	sub	sp, #24
   d7040:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d7042:	a801      	add	r0, sp, #4
   d7044:	f7ff ff76 	bl	d6f34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d7048:	a901      	add	r1, sp, #4
   d704a:	4620      	mov	r0, r4
   d704c:	f7ff ffd0 	bl	d6ff0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7050:	b006      	add	sp, #24
   d7052:	bd10      	pop	{r4, pc}

000d7054 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d7054:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d7056:	6902      	ldr	r2, [r0, #16]
   d7058:	690b      	ldr	r3, [r1, #16]
   d705a:	429a      	cmp	r2, r3
   d705c:	d106      	bne.n	d706c <_ZNK8particle7BleUuideqERKS0_+0x18>
   d705e:	2210      	movs	r2, #16
   d7060:	f002 fcb6 	bl	d99d0 <memcmp>
   d7064:	fab0 f080 	clz	r0, r0
   d7068:	0940      	lsrs	r0, r0, #5
   d706a:	bd08      	pop	{r3, pc}
   d706c:	2000      	movs	r0, #0
}
   d706e:	bd08      	pop	{r3, pc}

000d7070 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d7070:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d7074:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7076:	4b31      	ldr	r3, [pc, #196]	; (d713c <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7078:	460e      	mov	r6, r1
   d707a:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d707c:	4602      	mov	r2, r0
   d707e:	f103 0110 	add.w	r1, r3, #16
   d7082:	f853 0b04 	ldr.w	r0, [r3], #4
   d7086:	f842 0b04 	str.w	r0, [r2], #4
   d708a:	428b      	cmp	r3, r1
   d708c:	d1f9      	bne.n	d7082 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d708e:	2e00      	cmp	r6, #0
   d7090:	d051      	beq.n	d7136 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d7092:	2124      	movs	r1, #36	; 0x24
   d7094:	4630      	mov	r0, r6
   d7096:	f002 fd52 	bl	d9b3e <strnlen>
   d709a:	2804      	cmp	r0, #4
   d709c:	d010      	beq.n	d70c0 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d709e:	2700      	movs	r7, #0
   d70a0:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d70a2:	2124      	movs	r1, #36	; 0x24
   d70a4:	4630      	mov	r0, r6
   d70a6:	f002 fd4a 	bl	d9b3e <strnlen>
   d70aa:	42b8      	cmp	r0, r7
   d70ac:	d901      	bls.n	d70b2 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d70ae:	bb44      	cbnz	r4, d7102 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d70b0:	e041      	b.n	d7136 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d70b2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d70b4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d70b6:	42a5      	cmp	r5, r4
   d70b8:	d03d      	beq.n	d7136 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d70ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d70be:	e7fa      	b.n	d70b6 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d70c0:	7830      	ldrb	r0, [r6, #0]
   d70c2:	f7ff fee5 	bl	d6e90 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d70c6:	1e04      	subs	r4, r0, #0
   d70c8:	db18      	blt.n	d70fc <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d70ca:	7870      	ldrb	r0, [r6, #1]
   d70cc:	f7ff fee0 	bl	d6e90 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d70d0:	2800      	cmp	r0, #0
   d70d2:	db13      	blt.n	d70fc <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d70d4:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d70d8:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d70dc:	78b0      	ldrb	r0, [r6, #2]
   d70de:	f7ff fed7 	bl	d6e90 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d70e2:	1e04      	subs	r4, r0, #0
   d70e4:	db0a      	blt.n	d70fc <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d70e6:	78f0      	ldrb	r0, [r6, #3]
   d70e8:	f7ff fed2 	bl	d6e90 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d70ec:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d70ee:	bfa1      	itttt	ge
   d70f0:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d70f4:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d70f8:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d70fa:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d70fc:	2300      	movs	r3, #0
   d70fe:	612b      	str	r3, [r5, #16]
   d7100:	e019      	b.n	d7136 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d7102:	5df0      	ldrb	r0, [r6, r7]
   d7104:	f7ff fec4 	bl	d6e90 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d7108:	0603      	lsls	r3, r0, #24
   d710a:	d412      	bmi.n	d7132 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d710c:	3c01      	subs	r4, #1
   d710e:	0100      	lsls	r0, r0, #4
   d7110:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d7112:	2124      	movs	r1, #36	; 0x24
   d7114:	4630      	mov	r0, r6
   d7116:	f002 fd12 	bl	d9b3e <strnlen>
   d711a:	3701      	adds	r7, #1
   d711c:	4287      	cmp	r7, r0
   d711e:	d208      	bcs.n	d7132 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d7120:	5df0      	ldrb	r0, [r6, r7]
   d7122:	f7ff feb5 	bl	d6e90 <_ZN8particle11hexToNibbleEc>
   d7126:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7128:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d712a:	bfa2      	ittt	ge
   d712c:	5d2b      	ldrbge	r3, [r5, r4]
   d712e:	4318      	orrge	r0, r3
   d7130:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7132:	3701      	adds	r7, #1
   d7134:	e7b5      	b.n	d70a2 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d7136:	b003      	add	sp, #12
   d7138:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d713a:	bf00      	nop
   d713c:	000dab20 	.word	0x000dab20

000d7140 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d7140:	b538      	push	{r3, r4, r5, lr}
   d7142:	4604      	mov	r4, r0
   d7144:	460d      	mov	r5, r1
        : BleUuid() {
   d7146:	f7ff fee5 	bl	d6f14 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d714a:	4620      	mov	r0, r4
   d714c:	4629      	mov	r1, r5
   d714e:	f7ff ff8f 	bl	d7070 <_ZN8particle7BleUuid9constructEPKc>
}
   d7152:	4620      	mov	r0, r4
   d7154:	bd38      	pop	{r3, r4, r5, pc}

000d7156 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d7156:	b538      	push	{r3, r4, r5, lr}
   d7158:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d715a:	b101      	cbz	r1, d715e <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d715c:	b912      	cbnz	r2, d7164 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d715e:	2000      	movs	r0, #0
   d7160:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d7162:	bd38      	pop	{r3, r4, r5, pc}
   d7164:	2a1f      	cmp	r2, #31
   d7166:	bf28      	it	cs
   d7168:	221f      	movcs	r2, #31
   d716a:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d716c:	f002 fc3f 	bl	d99ee <memcpy>
    selfLen_ = len;
   d7170:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d7172:	4620      	mov	r0, r4
}
   d7174:	bd38      	pop	{r3, r4, r5, pc}

000d7176 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d7176:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d7178:	b18b      	cbz	r3, d719e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d717a:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d717c:	1ce5      	adds	r5, r4, #3
   d717e:	428d      	cmp	r5, r1
   d7180:	d80f      	bhi.n	d71a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d7182:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d7184:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d7186:	5d87      	ldrb	r7, [r0, r6]
   d7188:	4297      	cmp	r7, r2
   d718a:	d105      	bne.n	d7198 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d718c:	442e      	add	r6, r5
   d718e:	42b1      	cmp	r1, r6
   d7190:	d307      	bcc.n	d71a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d7192:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d7194:	1c68      	adds	r0, r5, #1
                return adsLen;
   d7196:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d7198:	3501      	adds	r5, #1
   d719a:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d719c:	e7ee      	b.n	d717c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d719e:	4618      	mov	r0, r3
   d71a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71a2:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d71a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d71a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d71aa:	4604      	mov	r4, r0
   d71ac:	460e      	mov	r6, r1
   d71ae:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d71b0:	4617      	mov	r7, r2
   d71b2:	2a00      	cmp	r2, #0
   d71b4:	d03a      	beq.n	d722c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d71b6:	460a      	mov	r2, r1
   d71b8:	ab01      	add	r3, sp, #4
   d71ba:	6a01      	ldr	r1, [r0, #32]
   d71bc:	f7ff ffdb 	bl	d7176 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d71c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d71c4:	6a22      	ldr	r2, [r4, #32]
   d71c6:	bb03      	cbnz	r3, d720a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d71c8:	b1f8      	cbz	r0, d720a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d71ca:	1c96      	adds	r6, r2, #2
   d71cc:	442e      	add	r6, r5
   d71ce:	1a36      	subs	r6, r6, r0
   d71d0:	2e1f      	cmp	r6, #31
   d71d2:	d82b      	bhi.n	d722c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d71d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d71d8:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d71dc:	ebc8 0202 	rsb	r2, r8, r2
   d71e0:	1a12      	subs	r2, r2, r0
   d71e2:	eb00 0108 	add.w	r1, r0, r8
   d71e6:	eb05 0009 	add.w	r0, r5, r9
   d71ea:	b292      	uxth	r2, r2
   d71ec:	4421      	add	r1, r4
   d71ee:	4420      	add	r0, r4
   d71f0:	f002 fc08 	bl	d9a04 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d71f4:	1c6b      	adds	r3, r5, #1
   d71f6:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d71fa:	462a      	mov	r2, r5
   d71fc:	4639      	mov	r1, r7
   d71fe:	eb04 0009 	add.w	r0, r4, r9
   d7202:	f002 fbf4 	bl	d99ee <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d7206:	6226      	str	r6, [r4, #32]
   d7208:	e010      	b.n	d722c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d720a:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d720c:	182b      	adds	r3, r5, r0
   d720e:	2b1f      	cmp	r3, #31
   d7210:	d80c      	bhi.n	d722c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d7212:	1c6b      	adds	r3, r5, #1
   d7214:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7216:	4422      	add	r2, r4
   d7218:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d721a:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d721c:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d721e:	4420      	add	r0, r4
   d7220:	462a      	mov	r2, r5
   d7222:	f002 fbe4 	bl	d99ee <memcpy>
        selfLen_ += len;
   d7226:	6a22      	ldr	r2, [r4, #32]
   d7228:	442a      	add	r2, r5
   d722a:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d722c:	6a20      	ldr	r0, [r4, #32]
}
   d722e:	b003      	add	sp, #12
   d7230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7234 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d7234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7236:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d7238:	4603      	mov	r3, r0
   d723a:	f100 021f 	add.w	r2, r0, #31
   d723e:	2000      	movs	r0, #0
   d7240:	f803 0b01 	strb.w	r0, [r3], #1
   d7244:	4293      	cmp	r3, r2
   d7246:	f04f 0100 	mov.w	r1, #0
   d724a:	d1f9      	bne.n	d7240 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d724c:	aa04      	add	r2, sp, #16
   d724e:	2306      	movs	r3, #6
   d7250:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7254:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7256:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7258:	9100      	str	r1, [sp, #0]
   d725a:	4620      	mov	r0, r4
   d725c:	4619      	mov	r1, r3
   d725e:	f7ff ffa2 	bl	d71a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7262:	4620      	mov	r0, r4
   d7264:	b004      	add	sp, #16
   d7266:	bd10      	pop	{r4, pc}

000d7268 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d7268:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d726a:	4615      	mov	r5, r2
   d726c:	461c      	mov	r4, r3
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d726e:	460a      	mov	r2, r1
   d7270:	ab01      	add	r3, sp, #4
   d7272:	6a01      	ldr	r1, [r0, #32]
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d7274:	4606      	mov	r6, r0
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d7276:	f7ff ff7e 	bl	d7176 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
   d727a:	4603      	mov	r3, r0
    if (adsLen > 0) {
   d727c:	f030 0002 	bics.w	r0, r0, #2
   d7280:	d00c      	beq.n	d729c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
   d7282:	1e98      	subs	r0, r3, #2
   d7284:	4284      	cmp	r4, r0
   d7286:	bf28      	it	cs
   d7288:	4604      	movcs	r4, r0
        if ((adsLen - 2) > 0) {
            adsLen -= 2;
            len = std::min(len, adsLen);
            if (buf != nullptr) {
   d728a:	b135      	cbz	r5, d729a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x32>
                memcpy(buf, &selfData_[offset + 2], len);
   d728c:	9901      	ldr	r1, [sp, #4]
   d728e:	3102      	adds	r1, #2
   d7290:	4622      	mov	r2, r4
   d7292:	4431      	add	r1, r6
   d7294:	4628      	mov	r0, r5
   d7296:	f002 fbaa 	bl	d99ee <memcpy>
            }
            return len;
   d729a:	4620      	mov	r0, r4
        }
    }
    return 0;
}
   d729c:	b002      	add	sp, #8
   d729e:	bd70      	pop	{r4, r5, r6, pc}

000d72a0 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
    return found;
}

size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   d72a0:	4613      	mov	r3, r2
   d72a2:	460a      	mov	r2, r1
   d72a4:	21ff      	movs	r1, #255	; 0xff
   d72a6:	f7ff bfdf 	b.w	d7268 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000d72aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d72aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d72ae:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d72b0:	b085      	sub	sp, #20
   d72b2:	4606      	mov	r6, r0
   d72b4:	4689      	mov	r9, r1
   d72b6:	4617      	mov	r7, r2
   d72b8:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d72ba:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d72bc:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d72c0:	6a31      	ldr	r1, [r6, #32]
   d72c2:	428d      	cmp	r5, r1
   d72c4:	d22a      	bcs.n	d731c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d72c6:	ab03      	add	r3, sp, #12
   d72c8:	464a      	mov	r2, r9
   d72ca:	1b49      	subs	r1, r1, r5
   d72cc:	1970      	adds	r0, r6, r5
   d72ce:	f7ff ff52 	bl	d7176 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d72d2:	4683      	mov	fp, r0
   d72d4:	b310      	cbz	r0, d731c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d72d6:	4554      	cmp	r4, sl
   d72d8:	d220      	bcs.n	d731c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d72da:	2804      	cmp	r0, #4
   d72dc:	9903      	ldr	r1, [sp, #12]
   d72de:	d10c      	bne.n	d72fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d72e0:	4429      	add	r1, r5
   d72e2:	1872      	adds	r2, r6, r1
   d72e4:	1c63      	adds	r3, r4, #1
   d72e6:	78d1      	ldrb	r1, [r2, #3]
   d72e8:	7892      	ldrb	r2, [r2, #2]
   d72ea:	9301      	str	r3, [sp, #4]
   d72ec:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d72f0:	fb08 7004 	mla	r0, r8, r4, r7
   d72f4:	f7ff fe96 	bl	d7024 <_ZN8particle7BleUuidaSEt>
   d72f8:	e00a      	b.n	d7310 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d72fa:	2812      	cmp	r0, #18
   d72fc:	d10a      	bne.n	d7314 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d72fe:	3102      	adds	r1, #2
   d7300:	4429      	add	r1, r5
   d7302:	1c63      	adds	r3, r4, #1
   d7304:	4431      	add	r1, r6
   d7306:	fb08 7004 	mla	r0, r8, r4, r7
   d730a:	9301      	str	r3, [sp, #4]
   d730c:	f7ff fe7d 	bl	d700a <_ZN8particle7BleUuidaSEPKh>
   d7310:	9b01      	ldr	r3, [sp, #4]
   d7312:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7314:	9b03      	ldr	r3, [sp, #12]
   d7316:	445b      	add	r3, fp
   d7318:	441d      	add	r5, r3
   d731a:	e7d1      	b.n	d72c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d731c:	4620      	mov	r0, r4
   d731e:	b005      	add	sp, #20
   d7320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7324 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7328:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d732a:	460d      	mov	r5, r1
   d732c:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d732e:	460a      	mov	r2, r1
   d7330:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7332:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7334:	f7ff ffb9 	bl	d72aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7338:	f04f 0814 	mov.w	r8, #20
   d733c:	1a33      	subs	r3, r6, r0
   d733e:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7342:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7344:	2103      	movs	r1, #3
   d7346:	4638      	mov	r0, r7
   d7348:	f7ff ffaf 	bl	d72aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d734c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d734e:	1b33      	subs	r3, r6, r4
   d7350:	fb08 5204 	mla	r2, r8, r4, r5
   d7354:	2106      	movs	r1, #6
   d7356:	4638      	mov	r0, r7
   d7358:	f7ff ffa7 	bl	d72aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d735c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d735e:	1b33      	subs	r3, r6, r4
   d7360:	fb08 5204 	mla	r2, r8, r4, r5
   d7364:	2107      	movs	r1, #7
   d7366:	4638      	mov	r0, r7
   d7368:	f7ff ff9f 	bl	d72aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d736c:	4420      	add	r0, r4
   d736e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d7374 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7374:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7376:	2500      	movs	r5, #0
   d7378:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d737c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d737e:	8043      	strh	r3, [r0, #2]
   d7380:	220e      	movs	r2, #14
   d7382:	4629      	mov	r1, r5
   d7384:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d7386:	7105      	strb	r5, [r0, #4]
   d7388:	3006      	adds	r0, #6
   d738a:	f002 fb56 	bl	d9a3a <memset>
   d738e:	f104 0014 	add.w	r0, r4, #20
   d7392:	f7ff fdbf 	bl	d6f14 <_ZN8particle7BleUuidC1Ev>
   d7396:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d739a:	f7ff fdbb 	bl	d6f14 <_ZN8particle7BleUuidC1Ev>
   d739e:	4904      	ldr	r1, [pc, #16]	; (d73b0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d73a0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d73a4:	f001 fd31 	bl	d8e0a <_ZN6StringC1EPK19__FlashStringHelper>
   d73a8:	64e5      	str	r5, [r4, #76]	; 0x4c
   d73aa:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d73ac:	4620      	mov	r0, r4
   d73ae:	bd38      	pop	{r3, r4, r5, pc}
   d73b0:	000dac78 	.word	0x000dac78

000d73b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d73b4:	b510      	push	{r4, lr}
   d73b6:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d73b8:	69c2      	ldr	r2, [r0, #28]
   d73ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d73be:	4293      	cmp	r3, r2
   d73c0:	4618      	mov	r0, r3
   d73c2:	d006      	beq.n	d73d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d73c4:	6804      	ldr	r4, [r0, #0]
   d73c6:	8824      	ldrh	r4, [r4, #0]
   d73c8:	428c      	cmp	r4, r1
   d73ca:	f103 0308 	add.w	r3, r3, #8
   d73ce:	d1f6      	bne.n	d73be <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d73d0:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d73d2:	2000      	movs	r0, #0
    }
   d73d4:	bd10      	pop	{r4, pc}
	...

000d73d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d73d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73dc:	4680      	mov	r8, r0
   d73de:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d73e0:	460e      	mov	r6, r1
   d73e2:	b369      	cbz	r1, d7440 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d73e4:	b362      	cbz	r2, d7440 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d73e6:	2af4      	cmp	r2, #244	; 0xf4
   d73e8:	6805      	ldr	r5, [r0, #0]
   d73ea:	bf28      	it	cs
   d73ec:	22f4      	movcs	r2, #244	; 0xf4
   d73ee:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d73f0:	782a      	ldrb	r2, [r5, #0]
   d73f2:	b1a2      	cbz	r2, d741e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d73f4:	792b      	ldrb	r3, [r5, #4]
   d73f6:	0798      	lsls	r0, r3, #30
   d73f8:	d507      	bpl.n	d740a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d73fa:	2300      	movs	r3, #0
   d73fc:	4622      	mov	r2, r4
   d73fe:	89a8      	ldrh	r0, [r5, #12]
   d7400:	f7ff f9c2 	bl	d6788 <hal_ble_gatt_server_set_characteristic_value>
   d7404:	2800      	cmp	r0, #0
   d7406:	da02      	bge.n	d740e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d7408:	e043      	b.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d740a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d740e:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d7412:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d7414:	06da      	lsls	r2, r3, #27
   d7416:	d518      	bpl.n	d744a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d7418:	2f01      	cmp	r7, #1
   d741a:	d123      	bne.n	d7464 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d741c:	e015      	b.n	d744a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d741e:	8868      	ldrh	r0, [r5, #2]
   d7420:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7424:	4298      	cmp	r0, r3
   d7426:	d00d      	beq.n	d7444 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d7428:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d742a:	0759      	lsls	r1, r3, #29
   d742c:	d523      	bpl.n	d7476 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d742e:	2f01      	cmp	r7, #1
   d7430:	d021      	beq.n	d7476 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7432:	89a9      	ldrh	r1, [r5, #12]
   d7434:	9200      	str	r2, [sp, #0]
   d7436:	4623      	mov	r3, r4
   d7438:	4632      	mov	r2, r6
   d743a:	f7ff f9cd 	bl	d67d8 <hal_ble_gatt_client_write_without_response>
   d743e:	e028      	b.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7440:	4815      	ldr	r0, [pc, #84]	; (d7498 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d7442:	e026      	b.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d7444:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7448:	e023      	b.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d744a:	069a      	lsls	r2, r3, #26
   d744c:	d521      	bpl.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d744e:	2f02      	cmp	r7, #2
   d7450:	d01f      	beq.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7452:	89a8      	ldrh	r0, [r5, #12]
   d7454:	2300      	movs	r3, #0
   d7456:	4622      	mov	r2, r4
   d7458:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d745a:	b002      	add	sp, #8
   d745c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7460:	f7ff ba00 	b.w	d6864 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7464:	89a8      	ldrh	r0, [r5, #12]
   d7466:	2300      	movs	r3, #0
   d7468:	4622      	mov	r2, r4
   d746a:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d746c:	b002      	add	sp, #8
   d746e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7472:	f7ff b9ed 	b.w	d6850 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d7476:	071b      	lsls	r3, r3, #28
   d7478:	d501      	bpl.n	d747e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d747a:	2f02      	cmp	r7, #2
   d747c:	d102      	bne.n	d7484 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d747e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7482:	e006      	b.n	d7492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7484:	2300      	movs	r3, #0
   d7486:	89a9      	ldrh	r1, [r5, #12]
   d7488:	9300      	str	r3, [sp, #0]
   d748a:	4632      	mov	r2, r6
   d748c:	4623      	mov	r3, r4
   d748e:	f7ff f999 	bl	d67c4 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7492:	b002      	add	sp, #8
   d7494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7498:	fffffef2 	.word	0xfffffef2

000d749c <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d749c:	b570      	push	{r4, r5, r6, lr}
   d749e:	6804      	ldr	r4, [r0, #0]
   d74a0:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d74a2:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d74a4:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d74a6:	2900      	cmp	r1, #0
   d74a8:	d12e      	bne.n	d7508 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d74aa:	8862      	ldrh	r2, [r4, #2]
   d74ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d74b0:	429a      	cmp	r2, r3
   d74b2:	d029      	beq.n	d7508 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d74b4:	8a23      	ldrh	r3, [r4, #16]
   d74b6:	b353      	cbz	r3, d750e <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d74b8:	2518      	movs	r5, #24
   d74ba:	462a      	mov	r2, r5
   d74bc:	4668      	mov	r0, sp
   d74be:	f002 fabc 	bl	d9a3a <memset>
    config.version = BLE_API_VERSION;
   d74c2:	2301      	movs	r3, #1
   d74c4:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d74c8:	4b13      	ldr	r3, [pc, #76]	; (d7518 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d74ca:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d74ce:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d74d0:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d74d2:	8863      	ldrh	r3, [r4, #2]
   d74d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d74d8:	8a23      	ldrh	r3, [r4, #16]
   d74da:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d74de:	89a3      	ldrh	r3, [r4, #12]
   d74e0:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d74e4:	b15e      	cbz	r6, d74fe <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d74e6:	7923      	ldrb	r3, [r4, #4]
   d74e8:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d74ea:	bf44      	itt	mi
   d74ec:	2302      	movmi	r3, #2
   d74ee:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d74f0:	7923      	ldrb	r3, [r4, #4]
   d74f2:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d74f4:	bf42      	ittt	mi
   d74f6:	9b05      	ldrmi	r3, [sp, #20]
   d74f8:	f043 0301 	orrmi.w	r3, r3, #1
   d74fc:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d74fe:	2100      	movs	r1, #0
   d7500:	4668      	mov	r0, sp
   d7502:	f7ff f99b 	bl	d683c <hal_ble_gatt_client_configure_cccd>
   d7506:	e004      	b.n	d7512 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7508:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d750c:	e001      	b.n	d7512 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d750e:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d7512:	b006      	add	sp, #24
   d7514:	bd70      	pop	{r4, r5, r6, pc}
   d7516:	bf00      	nop
   d7518:	000d76f5 	.word	0x000d76f5

000d751c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d751c:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d751e:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d7520:	651a      	str	r2, [r3, #80]	; 0x50
   d7522:	4770      	bx	lr

000d7524 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7528:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d752a:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d752c:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d752e:	9302      	str	r3, [sp, #8]
   d7530:	2500      	movs	r5, #0
   d7532:	4b2e      	ldr	r3, [pc, #184]	; (d75ec <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d7534:	9300      	str	r3, [sp, #0]
   d7536:	aa02      	add	r2, sp, #8
   d7538:	462b      	mov	r3, r5
   d753a:	492d      	ldr	r1, [pc, #180]	; (d75f0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d753c:	9503      	str	r5, [sp, #12]
   d753e:	2001      	movs	r0, #1
   d7540:	f7ff fb42 	bl	d6bc8 <log_message>
   d7544:	6833      	ldr	r3, [r6, #0]
   d7546:	68dc      	ldr	r4, [r3, #12]
   d7548:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d754a:	f04f 081c 	mov.w	r8, #28
   d754e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d7552:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d7554:	f1a4 0308 	sub.w	r3, r4, #8
   d7558:	429f      	cmp	r7, r3
   d755a:	6832      	ldr	r2, [r6, #0]
   d755c:	d017      	beq.n	d758e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d755e:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d7562:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7566:	8a9b      	ldrh	r3, [r3, #20]
   d7568:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d756c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7570:	8adb      	ldrh	r3, [r3, #22]
   d7572:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d7576:	8810      	ldrh	r0, [r2, #0]
   d7578:	9500      	str	r5, [sp, #0]
   d757a:	4633      	mov	r3, r6
   d757c:	4a1d      	ldr	r2, [pc, #116]	; (d75f4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d757e:	a902      	add	r1, sp, #8
   d7580:	f7ff f916 	bl	d67b0 <hal_ble_gatt_client_discover_characteristics>
   d7584:	2800      	cmp	r0, #0
   d7586:	f104 0408 	add.w	r4, r4, #8
   d758a:	dae3      	bge.n	d7554 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d758c:	e02a      	b.n	d75e4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d758e:	6994      	ldr	r4, [r2, #24]
   d7590:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d7592:	2700      	movs	r7, #0
   d7594:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d7598:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d759a:	f1a4 0308 	sub.w	r3, r4, #8
   d759e:	429d      	cmp	r5, r3
   d75a0:	d01f      	beq.n	d75e2 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d75a2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d75a6:	89db      	ldrh	r3, [r3, #14]
   d75a8:	b1cb      	cbz	r3, d75de <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d75aa:	2214      	movs	r2, #20
   d75ac:	2100      	movs	r1, #0
   d75ae:	a802      	add	r0, sp, #8
   d75b0:	f002 fa43 	bl	d9a3a <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d75b4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d75b8:	89d9      	ldrh	r1, [r3, #14]
   d75ba:	6833      	ldr	r3, [r6, #0]
   d75bc:	aa02      	add	r2, sp, #8
   d75be:	8818      	ldrh	r0, [r3, #0]
   d75c0:	9700      	str	r7, [sp, #0]
   d75c2:	2313      	movs	r3, #19
   d75c4:	f7ff f912 	bl	d67ec <hal_ble_gatt_client_read>
                if (len > 0) {
   d75c8:	b148      	cbz	r0, d75de <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d75ca:	ab0a      	add	r3, sp, #40	; 0x28
   d75cc:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d75ce:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d75d0:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d75d4:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d75d8:	303c      	adds	r0, #60	; 0x3c
   d75da:	f001 fc43 	bl	d8e64 <_ZN6StringaSEPKc>
   d75de:	3408      	adds	r4, #8
   d75e0:	e7db      	b.n	d759a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d75e2:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d75e4:	b00a      	add	sp, #40	; 0x28
   d75e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75ea:	bf00      	nop
   d75ec:	000da9a7 	.word	0x000da9a7
   d75f0:	000da980 	.word	0x000da980
   d75f4:	000d8281 	.word	0x000d8281

000d75f8 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d75f8:	6803      	ldr	r3, [r0, #0]
   d75fa:	8818      	ldrh	r0, [r3, #0]
}
   d75fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7600:	1ac0      	subs	r0, r0, r3
   d7602:	bf18      	it	ne
   d7604:	2001      	movne	r0, #1
   d7606:	4770      	bx	lr

000d7608 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d7608:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d760a:	680b      	ldr	r3, [r1, #0]
   d760c:	f8c2 3002 	str.w	r3, [r2, #2]
   d7610:	684b      	ldr	r3, [r1, #4]
   d7612:	f8c2 3006 	str.w	r3, [r2, #6]
   d7616:	4770      	bx	lr

000d7618 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d7618:	b510      	push	{r4, lr}
    return impl()->address();
   d761a:	680a      	ldr	r2, [r1, #0]
   d761c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d7620:	6003      	str	r3, [r0, #0]
   d7622:	6853      	ldr	r3, [r2, #4]
   d7624:	6043      	str	r3, [r0, #4]
}
   d7626:	bd10      	pop	{r4, pc}

000d7628 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d762a:	6802      	ldr	r2, [r0, #0]
   d762c:	680b      	ldr	r3, [r1, #0]
   d762e:	8812      	ldrh	r2, [r2, #0]
   d7630:	881b      	ldrh	r3, [r3, #0]
   d7632:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7634:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7636:	d10c      	bne.n	d7652 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7638:	4601      	mov	r1, r0
   d763a:	4668      	mov	r0, sp
   d763c:	f7ff ffec 	bl	d7618 <_ZNK8particle13BlePeerDevice7addressEv>
   d7640:	4621      	mov	r1, r4
   d7642:	a802      	add	r0, sp, #8
   d7644:	f7ff ffe8 	bl	d7618 <_ZNK8particle13BlePeerDevice7addressEv>
   d7648:	a902      	add	r1, sp, #8
   d764a:	4668      	mov	r0, sp
   d764c:	f7ff fc54 	bl	d6ef8 <_ZNK8particle10BleAddresseqERKS0_>
   d7650:	b900      	cbnz	r0, d7654 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d7652:	2000      	movs	r0, #0
}
   d7654:	b004      	add	sp, #16
   d7656:	bd10      	pop	{r4, pc}

000d7658 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7658:	b510      	push	{r4, lr}
   d765a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d765c:	2034      	movs	r0, #52	; 0x34
   d765e:	f7fc fd1a 	bl	d4096 <_Znwj>
   d7662:	4601      	mov	r1, r0
   d7664:	b168      	cbz	r0, d7682 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7666:	2300      	movs	r3, #0
   d7668:	6003      	str	r3, [r0, #0]
   d766a:	6043      	str	r3, [r0, #4]
   d766c:	6083      	str	r3, [r0, #8]
   d766e:	60c3      	str	r3, [r0, #12]
   d7670:	6103      	str	r3, [r0, #16]
   d7672:	6143      	str	r3, [r0, #20]
   d7674:	6183      	str	r3, [r0, #24]
   d7676:	61c3      	str	r3, [r0, #28]
   d7678:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d767a:	6243      	str	r3, [r0, #36]	; 0x24
   d767c:	6283      	str	r3, [r0, #40]	; 0x28
   d767e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7680:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7682:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7684:	b919      	cbnz	r1, d768e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d7686:	4a0a      	ldr	r2, [pc, #40]	; (d76b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7688:	200a      	movs	r0, #10
   d768a:	f7ff fa95 	bl	d6bb8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d768e:	2000      	movs	r0, #0
   d7690:	f7ff f856 	bl	d6740 <hal_ble_stack_init>
   d7694:	b120      	cbz	r0, d76a0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d7696:	4a06      	ldr	r2, [pc, #24]	; (d76b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7698:	2100      	movs	r1, #0
   d769a:	200a      	movs	r0, #10
   d769c:	f7ff fa8c 	bl	d6bb8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d76a0:	2200      	movs	r2, #0
   d76a2:	6821      	ldr	r1, [r4, #0]
   d76a4:	4803      	ldr	r0, [pc, #12]	; (d76b4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d76a6:	f7ff f8bf 	bl	d6828 <hal_ble_set_callback_on_periph_link_events>
}
   d76aa:	4620      	mov	r0, r4
   d76ac:	bd10      	pop	{r4, pc}
   d76ae:	bf00      	nop
   d76b0:	000d68f9 	.word	0x000d68f9
   d76b4:	000d7bad 	.word	0x000d7bad

000d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d76b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d76ba:	4c0a      	ldr	r4, [pc, #40]	; (d76e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d76bc:	6823      	ldr	r3, [r4, #0]
   d76be:	07db      	lsls	r3, r3, #31
   d76c0:	d40e      	bmi.n	d76e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d76c2:	4620      	mov	r0, r4
   d76c4:	f7fc fced 	bl	d40a2 <__cxa_guard_acquire>
   d76c8:	b150      	cbz	r0, d76e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d76ca:	4807      	ldr	r0, [pc, #28]	; (d76e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76cc:	f7ff ffc4 	bl	d7658 <_ZN8particle14BleLocalDeviceC1Ev>
   d76d0:	4620      	mov	r0, r4
   d76d2:	f7fc fceb 	bl	d40ac <__cxa_guard_release>
   d76d6:	4a05      	ldr	r2, [pc, #20]	; (d76ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d76d8:	4905      	ldr	r1, [pc, #20]	; (d76f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d76da:	4803      	ldr	r0, [pc, #12]	; (d76e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76dc:	f001 ff04 	bl	d94e8 <__aeabi_atexit>
    return instance;
}
   d76e0:	4801      	ldr	r0, [pc, #4]	; (d76e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76e2:	bd10      	pop	{r4, pc}
   d76e4:	2003e34c 	.word	0x2003e34c
   d76e8:	2003e348 	.word	0x2003e348
   d76ec:	2003d684 	.word	0x2003d684
   d76f0:	000d789f 	.word	0x000d789f

000d76f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d76f4:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d76f6:	6803      	ldr	r3, [r0, #0]
   d76f8:	3b09      	subs	r3, #9
   d76fa:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d76fc:	b08a      	sub	sp, #40	; 0x28
   d76fe:	4604      	mov	r4, r0
   d7700:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7702:	d819      	bhi.n	d7738 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d7704:	f7ff ffd8 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7708:	88a1      	ldrh	r1, [r4, #4]
   d770a:	6800      	ldr	r0, [r0, #0]
   d770c:	f7ff fe52 	bl	d73b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d7710:	4602      	mov	r2, r0
   d7712:	b958      	cbnz	r0, d772c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d7714:	2320      	movs	r3, #32
   d7716:	9302      	str	r3, [sp, #8]
   d7718:	4b08      	ldr	r3, [pc, #32]	; (d773c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d771a:	9003      	str	r0, [sp, #12]
   d771c:	9300      	str	r3, [sp, #0]
   d771e:	aa02      	add	r2, sp, #8
   d7720:	4603      	mov	r3, r0
   d7722:	4907      	ldr	r1, [pc, #28]	; (d7740 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d7724:	2032      	movs	r0, #50	; 0x32
   d7726:	f7ff fa4f 	bl	d6bc8 <log_message>
   d772a:	e005      	b.n	d7738 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d772c:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d772e:	b11d      	cbz	r5, d7738 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d7730:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d7732:	68e1      	ldr	r1, [r4, #12]
   d7734:	6920      	ldr	r0, [r4, #16]
   d7736:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7738:	b00a      	add	sp, #40	; 0x28
   d773a:	bd70      	pop	{r4, r5, r6, pc}
   d773c:	000da9ca 	.word	0x000da9ca
   d7740:	000da980 	.word	0x000da980

000d7744 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7744:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7746:	a801      	add	r0, sp, #4
   d7748:	f7ff fbb8 	bl	d6ebc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d774c:	2000      	movs	r0, #0
   d774e:	f7fe fff7 	bl	d6740 <hal_ble_stack_init>
   d7752:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d7754:	a801      	add	r0, sp, #4
   d7756:	f7ff fbbf 	bl	d6ed8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d775a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d775e:	b002      	add	sp, #8
   d7760:	bd10      	pop	{r4, pc}
	...

000d7764 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7764:	b530      	push	{r4, r5, lr}
   d7766:	b08b      	sub	sp, #44	; 0x2c
   d7768:	460d      	mov	r5, r1
    WiringBleLock lk;
   d776a:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d776c:	4614      	mov	r4, r2
    WiringBleLock lk;
   d776e:	f7ff fba5 	bl	d6ebc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d7772:	b1b5      	cbz	r5, d77a2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7774:	b1ac      	cbz	r4, d77a2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7776:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7778:	a902      	add	r1, sp, #8
   d777a:	480d      	ldr	r0, [pc, #52]	; (d77b0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d777c:	9406      	str	r4, [sp, #24]
   d777e:	9202      	str	r2, [sp, #8]
   d7780:	9203      	str	r2, [sp, #12]
   d7782:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d7784:	9207      	str	r2, [sp, #28]
   d7786:	9208      	str	r2, [sp, #32]
   d7788:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d778a:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d778c:	f7fe ffe0 	bl	d6750 <hal_ble_gap_start_scan>
   d7790:	2800      	cmp	r0, #0
   d7792:	bfb8      	it	lt
   d7794:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7796:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d7798:	bfa8      	it	ge
   d779a:	9c07      	ldrge	r4, [sp, #28]
   d779c:	f7ff fad0 	bl	d6d40 <free>
   d77a0:	e000      	b.n	d77a4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d77a2:	4c04      	ldr	r4, [pc, #16]	; (d77b4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d77a4:	a801      	add	r0, sp, #4
   d77a6:	f7ff fb97 	bl	d6ed8 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d77aa:	4620      	mov	r0, r4
   d77ac:	b00b      	add	sp, #44	; 0x2c
   d77ae:	bd30      	pop	{r4, r5, pc}
   d77b0:	000d7d1b 	.word	0x000d7d1b
   d77b4:	fffffef2 	.word	0xfffffef2

000d77b8 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d77b8:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d77ba:	69d8      	ldr	r0, [r3, #28]
}
   d77bc:	2800      	cmp	r0, #0
   d77be:	bfd4      	ite	le
   d77c0:	2000      	movle	r0, #0
   d77c2:	2001      	movgt	r0, #1
   d77c4:	4770      	bx	lr

000d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d77c6:	680b      	ldr	r3, [r1, #0]
   d77c8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d77ca:	b113      	cbz	r3, d77d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d77cc:	685a      	ldr	r2, [r3, #4]
   d77ce:	3201      	adds	r2, #1
   d77d0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d77d2:	4770      	bx	lr

000d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d77d4:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77d6:	f851 3b04 	ldr.w	r3, [r1], #4
   d77da:	4604      	mov	r4, r0
   d77dc:	f840 3b04 	str.w	r3, [r0], #4
   d77e0:	f7ff fff1 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d77e4:	6823      	ldr	r3, [r4, #0]
   d77e6:	b90b      	cbnz	r3, d77ec <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d77e8:	f7ff fb38 	bl	d6e5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d77ec:	4620      	mov	r0, r4
   d77ee:	bd10      	pop	{r4, pc}

000d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d77f0:	b510      	push	{r4, lr}
   d77f2:	f851 3b04 	ldr.w	r3, [r1], #4
   d77f6:	4604      	mov	r4, r0
   d77f8:	f840 3b04 	str.w	r3, [r0], #4
   d77fc:	f7ff ffe3 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7800:	4620      	mov	r0, r4
   d7802:	bd10      	pop	{r4, pc}

000d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d7804:	b510      	push	{r4, lr}
   d7806:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d7808:	6800      	ldr	r0, [r0, #0]
   d780a:	b128      	cbz	r0, d7818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d780c:	6843      	ldr	r3, [r0, #4]
   d780e:	3b01      	subs	r3, #1
   d7810:	6043      	str	r3, [r0, #4]
   d7812:	b90b      	cbnz	r3, d7818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7814:	f7ff fb2c 	bl	d6e70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d7818:	4620      	mov	r0, r4
   d781a:	bd10      	pop	{r4, pc}

000d781c <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d781c:	b510      	push	{r4, lr}
   d781e:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7820:	3004      	adds	r0, #4
   d7822:	f7ff ffef 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7826:	4620      	mov	r0, r4
   d7828:	bd10      	pop	{r4, pc}

000d782a <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d782a:	b510      	push	{r4, lr}
   d782c:	4604      	mov	r4, r0
   d782e:	3004      	adds	r0, #4
   d7830:	f7ff ffe8 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7834:	4620      	mov	r0, r4
   d7836:	bd10      	pop	{r4, pc}

000d7838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7838:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d783a:	6804      	ldr	r4, [r0, #0]
   d783c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d783e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7840:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7844:	42a6      	cmp	r6, r4
   d7846:	d004      	beq.n	d7852 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7848:	1d20      	adds	r0, r4, #4
   d784a:	f7ff ffdb 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d784e:	3408      	adds	r4, #8
   d7850:	e7f8      	b.n	d7844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7852:	6828      	ldr	r0, [r5, #0]
   d7854:	f7ff fa74 	bl	d6d40 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7858:	4628      	mov	r0, r5
   d785a:	bd70      	pop	{r4, r5, r6, pc}

000d785c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d785c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d785e:	6804      	ldr	r4, [r0, #0]
   d7860:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7862:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7864:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7868:	42a6      	cmp	r6, r4
   d786a:	d004      	beq.n	d7876 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d786c:	1d20      	adds	r0, r4, #4
   d786e:	f7ff ffc9 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7872:	3408      	adds	r4, #8
   d7874:	e7f8      	b.n	d7868 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7876:	6828      	ldr	r0, [r5, #0]
   d7878:	f7ff fa62 	bl	d6d40 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d787c:	4628      	mov	r0, r5
   d787e:	bd70      	pop	{r4, r5, r6, pc}

000d7880 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7880:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7882:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d7884:	f104 0018 	add.w	r0, r4, #24
   d7888:	f7ff ffe8 	bl	d785c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d788c:	f104 000c 	add.w	r0, r4, #12
   d7890:	f7ff ffd2 	bl	d7838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d7894:	4620      	mov	r0, r4
   d7896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d789a:	f7fc bbfe 	b.w	d409a <_ZdlPv>

000d789e <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d789e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d78a0:	6804      	ldr	r4, [r0, #0]
   d78a2:	4607      	mov	r7, r0
   d78a4:	b1c4      	cbz	r4, d78d8 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d78a6:	69a5      	ldr	r5, [r4, #24]
   d78a8:	69e3      	ldr	r3, [r4, #28]
   d78aa:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d78ae:	42ae      	cmp	r6, r5
   d78b0:	d004      	beq.n	d78bc <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d78b2:	1d28      	adds	r0, r5, #4
   d78b4:	f7ff ffa6 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d78b8:	3508      	adds	r5, #8
   d78ba:	e7f8      	b.n	d78ae <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d78bc:	69a0      	ldr	r0, [r4, #24]
   d78be:	f7ff fa3f 	bl	d6d40 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d78c2:	f104 000c 	add.w	r0, r4, #12
   d78c6:	f7ff ffc9 	bl	d785c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d78ca:	4620      	mov	r0, r4
   d78cc:	f7ff ffb4 	bl	d7838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d78d0:	2134      	movs	r1, #52	; 0x34
   d78d2:	4620      	mov	r0, r4
   d78d4:	f001 fe0d 	bl	d94f2 <_ZdlPvj>
   d78d8:	4638      	mov	r0, r7
   d78da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78dc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d78dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78de:	2500      	movs	r5, #0
   d78e0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78e2:	6045      	str	r5, [r0, #4]
   d78e4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78e6:	2024      	movs	r0, #36	; 0x24
   d78e8:	f7fc fbd5 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78ec:	4604      	mov	r4, r0
   d78ee:	b178      	cbz	r0, d7910 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d78f0:	4603      	mov	r3, r0
   d78f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d78f6:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d78fa:	f8c0 5002 	str.w	r5, [r0, #2]
   d78fe:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d7900:	7285      	strb	r5, [r0, #10]
   d7902:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7904:	60c5      	str	r5, [r0, #12]
   d7906:	6105      	str	r5, [r0, #16]
   d7908:	6145      	str	r5, [r0, #20]
   d790a:	6185      	str	r5, [r0, #24]
   d790c:	61c5      	str	r5, [r0, #28]
   d790e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7910:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7912:	2014      	movs	r0, #20
   d7914:	9301      	str	r3, [sp, #4]
   d7916:	f7fc fbbe 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d791a:	4603      	mov	r3, r0
   d791c:	b128      	cbz	r0, d792a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d791e:	2201      	movs	r2, #1
   d7920:	6042      	str	r2, [r0, #4]
   d7922:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7924:	4a08      	ldr	r2, [pc, #32]	; (d7948 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d7926:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7928:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d792a:	a802      	add	r0, sp, #8
   d792c:	6872      	ldr	r2, [r6, #4]
   d792e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d7932:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7934:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7936:	f7ff ff65 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d793a:	6833      	ldr	r3, [r6, #0]
   d793c:	b90b      	cbnz	r3, d7942 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d793e:	f7ff fa8d 	bl	d6e5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d7942:	4630      	mov	r0, r6
   d7944:	b002      	add	sp, #8
   d7946:	bd70      	pop	{r4, r5, r6, pc}
   d7948:	000da96c 	.word	0x000da96c

000d794c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d794c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d794e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d7950:	6803      	ldr	r3, [r0, #0]
   d7952:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7954:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d7956:	d00c      	beq.n	d7972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d7958:	b114      	cbz	r4, d7960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d795a:	6863      	ldr	r3, [r4, #4]
   d795c:	3301      	adds	r3, #1
   d795e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d7960:	6828      	ldr	r0, [r5, #0]
   d7962:	b128      	cbz	r0, d7970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7964:	6843      	ldr	r3, [r0, #4]
   d7966:	3b01      	subs	r3, #1
   d7968:	6043      	str	r3, [r0, #4]
   d796a:	b90b      	cbnz	r3, d7970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d796c:	f7ff fa80 	bl	d6e70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d7970:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d7972:	4628      	mov	r0, r5
   d7974:	bd38      	pop	{r3, r4, r5, pc}

000d7976 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d7976:	b510      	push	{r4, lr}
   d7978:	6802      	ldr	r2, [r0, #0]
   d797a:	680b      	ldr	r3, [r1, #0]
   d797c:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d797e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d7980:	b110      	cbz	r0, d7988 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d7982:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d7984:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d7986:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7988:	4620      	mov	r0, r4
   d798a:	f851 3b04 	ldr.w	r3, [r1], #4
   d798e:	f840 3b04 	str.w	r3, [r0], #4
   d7992:	f7ff ffdb 	bl	d794c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d7996:	4620      	mov	r0, r4
   d7998:	bd10      	pop	{r4, pc}

000d799a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d799a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d799e:	6803      	ldr	r3, [r0, #0]
   d79a0:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d79a2:	69de      	ldr	r6, [r3, #28]
   d79a4:	b087      	sub	sp, #28
   d79a6:	460f      	mov	r7, r1
   d79a8:	4690      	mov	r8, r2
   d79aa:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d79ae:	42b4      	cmp	r4, r6
   d79b0:	46a1      	mov	r9, r4
   d79b2:	d011      	beq.n	d79d8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d79b4:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d79b8:	a801      	add	r0, sp, #4
   d79ba:	3114      	adds	r1, #20
   d79bc:	f7ff fade 	bl	d6f7c <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d79c0:	4641      	mov	r1, r8
   d79c2:	a801      	add	r0, sp, #4
   d79c4:	f7ff fb46 	bl	d7054 <_ZNK8particle7BleUuideqERKS0_>
   d79c8:	4605      	mov	r5, r0
   d79ca:	2800      	cmp	r0, #0
   d79cc:	d0ef      	beq.n	d79ae <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d79ce:	4649      	mov	r1, r9
   d79d0:	4638      	mov	r0, r7
   d79d2:	f7ff ffd0 	bl	d7976 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d79d6:	e000      	b.n	d79da <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d79d8:	2500      	movs	r5, #0
}
   d79da:	4628      	mov	r0, r5
   d79dc:	b007      	add	sp, #28
   d79de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d79e2 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d79e2:	b510      	push	{r4, lr}
   d79e4:	f851 3b04 	ldr.w	r3, [r1], #4
   d79e8:	4604      	mov	r4, r0
   d79ea:	f840 3b04 	str.w	r3, [r0], #4
   d79ee:	f7ff ffad 	bl	d794c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d79f2:	4620      	mov	r0, r4
   d79f4:	bd10      	pop	{r4, pc}

000d79f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d79f6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d79f8:	b570      	push	{r4, r5, r6, lr}
   d79fa:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d79fc:	d91a      	bls.n	d7a34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d79fe:	4290      	cmp	r0, r2
   d7a00:	d219      	bcs.n	d7a36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7a02:	f1a1 0608 	sub.w	r6, r1, #8
   d7a06:	1a51      	subs	r1, r2, r1
   d7a08:	3904      	subs	r1, #4
   d7a0a:	1f15      	subs	r5, r2, #4
   d7a0c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d7a0e:	1f2b      	subs	r3, r5, #4
   d7a10:	429e      	cmp	r6, r3
   d7a12:	d025      	beq.n	d7a60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d7a14:	2c04      	cmp	r4, #4
   d7a16:	d007      	beq.n	d7a28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7a18:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d7a1c:	f844 3c04 	str.w	r3, [r4, #-4]
   d7a20:	4629      	mov	r1, r5
   d7a22:	4620      	mov	r0, r4
   d7a24:	f7ff fecf 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a28:	4628      	mov	r0, r5
   d7a2a:	f7ff feeb 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a2e:	3d08      	subs	r5, #8
   d7a30:	3c08      	subs	r4, #8
   d7a32:	e7ec      	b.n	d7a0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d7a34:	d014      	beq.n	d7a60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d7a36:	1d0c      	adds	r4, r1, #4
   d7a38:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d7a3a:	1f23      	subs	r3, r4, #4
   d7a3c:	429d      	cmp	r5, r3
   d7a3e:	d00f      	beq.n	d7a60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d7a40:	2e04      	cmp	r6, #4
   d7a42:	d007      	beq.n	d7a54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7a44:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d7a48:	f846 3c04 	str.w	r3, [r6, #-4]
   d7a4c:	4621      	mov	r1, r4
   d7a4e:	4630      	mov	r0, r6
   d7a50:	f7ff feb9 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a54:	4620      	mov	r0, r4
   d7a56:	f7ff fed5 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a5a:	3408      	adds	r4, #8
   d7a5c:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7a5e:	e7ec      	b.n	d7a3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d7a60:	bd70      	pop	{r4, r5, r6, pc}

000d7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d7a66:	6804      	ldr	r4, [r0, #0]
   d7a68:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a6a:	4605      	mov	r5, r0
   d7a6c:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7a6e:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a72:	42a7      	cmp	r7, r4
   d7a74:	d018      	beq.n	d7aa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d7a76:	4641      	mov	r1, r8
   d7a78:	4620      	mov	r0, r4
   d7a7a:	f7ff fdd5 	bl	d7628 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7a7e:	4606      	mov	r6, r0
   d7a80:	b908      	cbnz	r0, d7a86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a82:	3408      	adds	r4, #8
   d7a84:	e7f5      	b.n	d7a72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d7a86:	b18c      	cbz	r4, d7aac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d7a88:	1d20      	adds	r0, r4, #4
   d7a8a:	f7ff febb 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7a8e:	682b      	ldr	r3, [r5, #0]
   d7a90:	686a      	ldr	r2, [r5, #4]
   d7a92:	f104 0108 	add.w	r1, r4, #8
   d7a96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7a9a:	4620      	mov	r0, r4
   d7a9c:	f7ff ffab 	bl	d79f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7aa0:	686b      	ldr	r3, [r5, #4]
   d7aa2:	3b01      	subs	r3, #1
   d7aa4:	606b      	str	r3, [r5, #4]
    return true;
   d7aa6:	e002      	b.n	d7aae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7aa8:	2600      	movs	r6, #0
   d7aaa:	e000      	b.n	d7aae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d7aac:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d7aae:	4630      	mov	r0, r6
   d7ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7ab4 <_ZNK8particle14BleLocalDevice10disconnectEv>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
   d7ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ab8:	4680      	mov	r8, r0
   d7aba:	b08a      	sub	sp, #40	; 0x28
    WiringBleLock lk;
   d7abc:	4668      	mov	r0, sp
   d7abe:	f7ff f9fd 	bl	d6ebc <_ZN8particle3ble13WiringBleLockC1Ev>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7ac2:	f8d8 3000 	ldr.w	r3, [r8]
   d7ac6:	699d      	ldr	r5, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7ac8:	69de      	ldr	r6, [r3, #28]
   d7aca:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    for (auto& p : impl()->peers()) {
   d7ace:	42b5      	cmp	r5, r6
   d7ad0:	462f      	mov	r7, r5
   d7ad2:	d023      	beq.n	d7b1c <_ZNK8particle14BleLocalDevice10disconnectEv+0x68>
        hal_ble_conn_info_t connInfo = {};
   d7ad4:	2224      	movs	r2, #36	; 0x24
   d7ad6:	2100      	movs	r1, #0
   d7ad8:	a801      	add	r0, sp, #4
   d7ada:	f001 ffae 	bl	d9a3a <memset>
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
   d7ade:	682b      	ldr	r3, [r5, #0]
   d7ae0:	2200      	movs	r2, #0
   d7ae2:	a901      	add	r1, sp, #4
   d7ae4:	8818      	ldrh	r0, [r3, #0]
   d7ae6:	f7fe fe95 	bl	d6814 <hal_ble_gap_get_connection_info>
   d7aea:	2800      	cmp	r0, #0
   d7aec:	db14      	blt.n	d7b18 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d7aee:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7af2:	2b01      	cmp	r3, #1
   d7af4:	f105 0508 	add.w	r5, r5, #8
   d7af8:	d1e9      	bne.n	d7ace <_ZNK8particle14BleLocalDevice10disconnectEv+0x1a>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d7afa:	683b      	ldr	r3, [r7, #0]
   d7afc:	2100      	movs	r1, #0
   d7afe:	8818      	ldrh	r0, [r3, #0]
   d7b00:	f7fe fe38 	bl	d6774 <hal_ble_gap_disconnect>
   d7b04:	2800      	cmp	r0, #0
   d7b06:	db07      	blt.n	d7b18 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d7b08:	f8d8 0000 	ldr.w	r0, [r8]
    for (auto& p : impl()->peers()) {
        hal_ble_conn_info_t connInfo = {};
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
            impl()->peers().removeOne(p);
   d7b0c:	4639      	mov	r1, r7
   d7b0e:	3018      	adds	r0, #24
   d7b10:	f7ff ffa7 	bl	d7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d7b14:	2400      	movs	r4, #0
   d7b16:	e003      	b.n	d7b20 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
   d7b18:	4604      	mov	r4, r0
   d7b1a:	e001      	b.n	d7b20 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
   d7b1c:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
    WiringBleLock lk;
   d7b20:	4668      	mov	r0, sp
   d7b22:	f7ff f9d9 	bl	d6ed8 <_ZN8particle3ble13WiringBleLockD1Ev>
            impl()->peers().removeOne(p);
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d7b26:	4620      	mov	r0, r4
   d7b28:	b00a      	add	sp, #40	; 0x28
   d7b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7b2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7b30:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b32:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d7b36:	6847      	ldr	r7, [r0, #4]
   d7b38:	9300      	str	r3, [sp, #0]
   d7b3a:	a801      	add	r0, sp, #4
   d7b3c:	f7ff fe43 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b40:	6866      	ldr	r6, [r4, #4]
   d7b42:	68a3      	ldr	r3, [r4, #8]
   d7b44:	429e      	cmp	r6, r3
   d7b46:	db14      	blt.n	d7b72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d7b48:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7b4a:	2e00      	cmp	r6, #0
   d7b4c:	dd0b      	ble.n	d7b66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7b4e:	00f0      	lsls	r0, r6, #3
   d7b50:	f7ff f8ee 	bl	d6d30 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7b54:	4605      	mov	r5, r0
   d7b56:	b318      	cbz	r0, d7ba0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d7b58:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7b5c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7b60:	f7ff ff49 	bl	d79f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7b64:	e000      	b.n	d7b68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7b66:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7b68:	6820      	ldr	r0, [r4, #0]
   d7b6a:	f7ff f8e9 	bl	d6d40 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7b6e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7b70:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b72:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7b74:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b76:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d7b7a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d7b7e:	4629      	mov	r1, r5
   d7b80:	f105 0008 	add.w	r0, r5, #8
   d7b84:	f7ff ff37 	bl	d79f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7b88:	b135      	cbz	r5, d7b98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d7b8a:	9b00      	ldr	r3, [sp, #0]
   d7b8c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d7b90:	a901      	add	r1, sp, #4
   d7b92:	1d28      	adds	r0, r5, #4
   d7b94:	f7ff fe17 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d7b98:	6863      	ldr	r3, [r4, #4]
   d7b9a:	3301      	adds	r3, #1
   d7b9c:	6063      	str	r3, [r4, #4]
   d7b9e:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7ba0:	a801      	add	r0, sp, #4
   d7ba2:	f7ff fe2f 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7ba6:	4628      	mov	r0, r5
   d7ba8:	b003      	add	sp, #12
   d7baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7bac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bb0:	4604      	mov	r4, r0
   d7bb2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7bb4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7bb6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7bb8:	f7ff f980 	bl	d6ebc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d7bbc:	6823      	ldr	r3, [r4, #0]
   d7bbe:	2b03      	cmp	r3, #3
   d7bc0:	d002      	beq.n	d7bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d7bc2:	2b04      	cmp	r3, #4
   d7bc4:	d042      	beq.n	d7c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d7bc6:	e087      	b.n	d7cd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d7bc8:	a804      	add	r0, sp, #16
   d7bca:	f7ff fe87 	bl	d78dc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7bce:	9b04      	ldr	r3, [sp, #16]
   d7bd0:	8922      	ldrh	r2, [r4, #8]
   d7bd2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7bd4:	6862      	ldr	r2, [r4, #4]
   d7bd6:	9904      	ldr	r1, [sp, #16]
   d7bd8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d7bdc:	f8c1 3002 	str.w	r3, [r1, #2]
   d7be0:	6853      	ldr	r3, [r2, #4]
   d7be2:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7be6:	a807      	add	r0, sp, #28
   d7be8:	9b04      	ldr	r3, [sp, #16]
   d7bea:	9306      	str	r3, [sp, #24]
   d7bec:	a905      	add	r1, sp, #20
   d7bee:	f7ff fdea 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7bf2:	a906      	add	r1, sp, #24
   d7bf4:	f105 0018 	add.w	r0, r5, #24
   d7bf8:	f7ff ff99 	bl	d7b2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d7bfc:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7bfe:	a807      	add	r0, sp, #28
   d7c00:	f7ff fe00 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c04:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7c06:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7c08:	b974      	cbnz	r4, d7c28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d7c0a:	4b36      	ldr	r3, [pc, #216]	; (d7ce4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d7c0c:	9300      	str	r3, [sp, #0]
   d7c0e:	aa06      	add	r2, sp, #24
   d7c10:	4623      	mov	r3, r4
   d7c12:	4935      	ldr	r1, [pc, #212]	; (d7ce8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7c14:	9407      	str	r4, [sp, #28]
   d7c16:	2032      	movs	r0, #50	; 0x32
   d7c18:	f7fe ffd6 	bl	d6bc8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d7c1c:	9b04      	ldr	r3, [sp, #16]
   d7c1e:	4621      	mov	r1, r4
   d7c20:	8818      	ldrh	r0, [r3, #0]
   d7c22:	f7fe fda7 	bl	d6774 <hal_ble_gap_disconnect>
   d7c26:	e00d      	b.n	d7c44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d7c28:	4a30      	ldr	r2, [pc, #192]	; (d7cec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d7c2a:	9200      	str	r2, [sp, #0]
   d7c2c:	2300      	movs	r3, #0
   d7c2e:	aa06      	add	r2, sp, #24
   d7c30:	492d      	ldr	r1, [pc, #180]	; (d7ce8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7c32:	9307      	str	r3, [sp, #28]
   d7c34:	2001      	movs	r0, #1
   d7c36:	f7fe ffc7 	bl	d6bc8 <log_message>
                if (impl->connectedCb_) {
   d7c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d7c3c:	b113      	cbz	r3, d7c44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d7c3e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d7c40:	a804      	add	r0, sp, #16
   d7c42:	4798      	blx	r3
   d7c44:	a805      	add	r0, sp, #20
   d7c46:	f7ff fddd 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c4a:	e045      	b.n	d7cd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7c4c:	8921      	ldrh	r1, [r4, #8]
   d7c4e:	4628      	mov	r0, r5
   d7c50:	f7ff fbb0 	bl	d73b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7c54:	4607      	mov	r7, r0
   d7c56:	2800      	cmp	r0, #0
   d7c58:	d03e      	beq.n	d7cd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d7c5a:	6804      	ldr	r4, [r0, #0]
   d7c5c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7c5e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7c64:	8022      	strh	r2, [r4, #0]
   d7c66:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d7c6a:	4299      	cmp	r1, r3
   d7c6c:	d003      	beq.n	d7c76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d7c6e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7c72:	8042      	strh	r2, [r0, #2]
   d7c74:	e7f9      	b.n	d7c6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7c76:	68e6      	ldr	r6, [r4, #12]
   d7c78:	6923      	ldr	r3, [r4, #16]
   d7c7a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7c7e:	45b0      	cmp	r8, r6
   d7c80:	d004      	beq.n	d7c8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d7c82:	1d30      	adds	r0, r6, #4
   d7c84:	f7ff fdbe 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c88:	3608      	adds	r6, #8
   d7c8a:	e7f8      	b.n	d7c7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7c8c:	2300      	movs	r3, #0
   d7c8e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7c90:	69a6      	ldr	r6, [r4, #24]
   d7c92:	69e3      	ldr	r3, [r4, #28]
   d7c94:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7c98:	45b0      	cmp	r8, r6
   d7c9a:	d004      	beq.n	d7ca6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d7c9c:	1d30      	adds	r0, r6, #4
   d7c9e:	f7ff fdb1 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7ca2:	3608      	adds	r6, #8
   d7ca4:	e7f8      	b.n	d7c98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7ca6:	2300      	movs	r3, #0
   d7ca8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d7caa:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d7cac:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d7cae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d7cb0:	b113      	cbz	r3, d7cb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d7cb2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d7cb4:	4638      	mov	r0, r7
   d7cb6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d7cb8:	2320      	movs	r3, #32
   d7cba:	4a0d      	ldr	r2, [pc, #52]	; (d7cf0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d7cbc:	9306      	str	r3, [sp, #24]
   d7cbe:	9200      	str	r2, [sp, #0]
   d7cc0:	2300      	movs	r3, #0
   d7cc2:	4909      	ldr	r1, [pc, #36]	; (d7ce8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7cc4:	9307      	str	r3, [sp, #28]
   d7cc6:	2001      	movs	r0, #1
   d7cc8:	aa06      	add	r2, sp, #24
   d7cca:	f7fe ff7d 	bl	d6bc8 <log_message>
                    impl->peers_.removeOne(*peer);
   d7cce:	4639      	mov	r1, r7
   d7cd0:	f105 0018 	add.w	r0, r5, #24
   d7cd4:	f7ff fec5 	bl	d7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7cd8:	a803      	add	r0, sp, #12
   d7cda:	f7ff f8fd 	bl	d6ed8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d7cde:	b00e      	add	sp, #56	; 0x38
   d7ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ce4:	000da9e2 	.word	0x000da9e2
   d7ce8:	000da980 	.word	0x000da980
   d7cec:	000daa08 	.word	0x000daa08
   d7cf0:	000daa25 	.word	0x000daa25

000d7cf4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7cf4:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d7cf6:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7cf8:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d7cfa:	dd06      	ble.n	d7d0a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7cfc:	2154      	movs	r1, #84	; 0x54
   d7cfe:	4369      	muls	r1, r5
   d7d00:	6800      	ldr	r0, [r0, #0]
   d7d02:	f7ff f825 	bl	d6d50 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7d06:	b920      	cbnz	r0, d7d12 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d7d08:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7d0a:	6800      	ldr	r0, [r0, #0]
   d7d0c:	f7ff f818 	bl	d6d40 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7d10:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7d12:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7d14:	60a5      	str	r5, [r4, #8]
        return true;
   d7d16:	2001      	movs	r0, #1
    }
   d7d18:	bd38      	pop	{r3, r4, r5, pc}

000d7d1a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7d1a:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7d1c:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7d1e:	b0c0      	sub	sp, #256	; 0x100
   d7d20:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7d22:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7d24:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7d26:	a801      	add	r0, sp, #4
   d7d28:	2100      	movs	r1, #0
   d7d2a:	f001 fe86 	bl	d9a3a <memset>
   d7d2e:	a803      	add	r0, sp, #12
   d7d30:	f7ff fa80 	bl	d7234 <_ZN8particle18BleAdvertisingDataC1Ev>
   d7d34:	a80c      	add	r0, sp, #48	; 0x30
   d7d36:	f7ff fa7d 	bl	d7234 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7d3a:	462a      	mov	r2, r5
   d7d3c:	ab01      	add	r3, sp, #4
   d7d3e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d7d42:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7d44:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7d46:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7d48:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7d4a:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7d4c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7d50:	a80c      	add	r0, sp, #48	; 0x30
   d7d52:	f7ff fa00 	bl	d7156 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d7d56:	89aa      	ldrh	r2, [r5, #12]
   d7d58:	6869      	ldr	r1, [r5, #4]
   d7d5a:	a803      	add	r0, sp, #12
   d7d5c:	f7ff f9fb 	bl	d7156 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d7d60:	69a5      	ldr	r5, [r4, #24]
   d7d62:	b11d      	cbz	r5, d7d6c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d7d64:	69e1      	ldr	r1, [r4, #28]
   d7d66:	a801      	add	r0, sp, #4
   d7d68:	47a8      	blx	r5
   d7d6a:	e03c      	b.n	d7de6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d7d6c:	68e0      	ldr	r0, [r4, #12]
   d7d6e:	b198      	cbz	r0, d7d98 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d7d70:	6963      	ldr	r3, [r4, #20]
   d7d72:	6922      	ldr	r2, [r4, #16]
   d7d74:	4293      	cmp	r3, r2
   d7d76:	d239      	bcs.n	d7dec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d7d78:	1c5a      	adds	r2, r3, #1
   d7d7a:	6162      	str	r2, [r4, #20]
   d7d7c:	fb06 0003 	mla	r0, r6, r3, r0
   d7d80:	2251      	movs	r2, #81	; 0x51
   d7d82:	a901      	add	r1, sp, #4
   d7d84:	f001 fe33 	bl	d99ee <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d7d88:	6962      	ldr	r2, [r4, #20]
   d7d8a:	6923      	ldr	r3, [r4, #16]
   d7d8c:	429a      	cmp	r2, r3
   d7d8e:	d32d      	bcc.n	d7dec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d7d90:	4628      	mov	r0, r5
   d7d92:	f7fe fce5 	bl	d6760 <hal_ble_gap_stop_scan>
   d7d96:	e029      	b.n	d7dec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d7d98:	4632      	mov	r2, r6
   d7d9a:	a901      	add	r1, sp, #4
   d7d9c:	a816      	add	r0, sp, #88	; 0x58
   d7d9e:	f001 fe26 	bl	d99ee <memcpy>
   d7da2:	4632      	mov	r2, r6
   d7da4:	a916      	add	r1, sp, #88	; 0x58
   d7da6:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7da8:	6865      	ldr	r5, [r4, #4]
   d7daa:	f001 fe20 	bl	d99ee <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7dae:	68a3      	ldr	r3, [r4, #8]
   d7db0:	429d      	cmp	r5, r3
   d7db2:	db04      	blt.n	d7dbe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d7db4:	1c69      	adds	r1, r5, #1
   d7db6:	4620      	mov	r0, r4
   d7db8:	f7ff ff9c 	bl	d7cf4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7dbc:	b1b0      	cbz	r0, d7dec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7dbe:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7dc0:	6822      	ldr	r2, [r4, #0]
   d7dc2:	2654      	movs	r6, #84	; 0x54
   d7dc4:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7dc8:	fb06 2203 	mla	r2, r6, r3, r2
   d7dcc:	1b52      	subs	r2, r2, r5
   d7dce:	4629      	mov	r1, r5
   d7dd0:	19a8      	adds	r0, r5, r6
   d7dd2:	f001 fe17 	bl	d9a04 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7dd6:	4632      	mov	r2, r6
   d7dd8:	a92b      	add	r1, sp, #172	; 0xac
   d7dda:	4628      	mov	r0, r5
   d7ddc:	f001 fe07 	bl	d99ee <memcpy>
    ++size_;
   d7de0:	6863      	ldr	r3, [r4, #4]
   d7de2:	3301      	adds	r3, #1
   d7de4:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d7de6:	6963      	ldr	r3, [r4, #20]
   d7de8:	3301      	adds	r3, #1
   d7dea:	6163      	str	r3, [r4, #20]
        }
    }
   d7dec:	b040      	add	sp, #256	; 0x100
   d7dee:	bd70      	pop	{r4, r5, r6, pc}

000d7df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7df0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7df4:	4606      	mov	r6, r0
   d7df6:	460c      	mov	r4, r1
   d7df8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7dfa:	d914      	bls.n	d7e26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7dfc:	4290      	cmp	r0, r2
   d7dfe:	d213      	bcs.n	d7e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7e00:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7e04:	1a6c      	subs	r4, r5, r1
   d7e06:	f1a1 0708 	sub.w	r7, r1, #8
   d7e0a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7e0c:	42af      	cmp	r7, r5
   d7e0e:	d018      	beq.n	d7e42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7e10:	b11c      	cbz	r4, d7e1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7e12:	4629      	mov	r1, r5
   d7e14:	4620      	mov	r0, r4
   d7e16:	f7ff fceb 	bl	d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7e1a:	1d28      	adds	r0, r5, #4
   d7e1c:	f7ff fcf2 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7e20:	3d08      	subs	r5, #8
   d7e22:	3c08      	subs	r4, #8
   d7e24:	e7f2      	b.n	d7e0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7e26:	d00c      	beq.n	d7e42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7e28:	42ac      	cmp	r4, r5
   d7e2a:	d00a      	beq.n	d7e42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7e2c:	b11e      	cbz	r6, d7e36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7e2e:	4621      	mov	r1, r4
   d7e30:	4630      	mov	r0, r6
   d7e32:	f7ff fcdd 	bl	d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7e36:	1d20      	adds	r0, r4, #4
   d7e38:	f7ff fce4 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7e3c:	3408      	adds	r4, #8
   d7e3e:	3608      	adds	r6, #8
   d7e40:	e7f2      	b.n	d7e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7e44:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7e46:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7e48:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7e4a:	dd0b      	ble.n	d7e64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7e4c:	00f0      	lsls	r0, r6, #3
   d7e4e:	f7fe ff6f 	bl	d6d30 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7e52:	4604      	mov	r4, r0
   d7e54:	b170      	cbz	r0, d7e74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7e56:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7e5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7e5e:	f7ff ffc7 	bl	d7df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7e62:	e000      	b.n	d7e66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7e64:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7e66:	6828      	ldr	r0, [r5, #0]
   d7e68:	f7fe ff6a 	bl	d6d40 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7e6c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7e6e:	60ae      	str	r6, [r5, #8]
        return true;
   d7e70:	2001      	movs	r0, #1
   d7e72:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7e74:	bd70      	pop	{r4, r5, r6, pc}

000d7e76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e7a:	2300      	movs	r3, #0
   d7e7c:	6003      	str	r3, [r0, #0]
   d7e7e:	6043      	str	r3, [r0, #4]
   d7e80:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e82:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7e84:	6849      	ldr	r1, [r1, #4]
   d7e86:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e88:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7e8a:	dd13      	ble.n	d7eb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7e8c:	f7ff ffda 	bl	d7e44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7e90:	b180      	cbz	r0, d7eb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7e92:	6835      	ldr	r5, [r6, #0]
   d7e94:	6873      	ldr	r3, [r6, #4]
   d7e96:	6827      	ldr	r7, [r4, #0]
   d7e98:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7e9c:	4545      	cmp	r5, r8
   d7e9e:	d007      	beq.n	d7eb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7ea0:	b11f      	cbz	r7, d7eaa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7ea2:	4629      	mov	r1, r5
   d7ea4:	4638      	mov	r0, r7
   d7ea6:	f7ff fca3 	bl	d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7eaa:	3508      	adds	r5, #8
   d7eac:	3708      	adds	r7, #8
   d7eae:	e7f5      	b.n	d7e9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7eb0:	6873      	ldr	r3, [r6, #4]
   d7eb2:	6063      	str	r3, [r4, #4]
    }
}
   d7eb4:	4620      	mov	r0, r4
   d7eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7eba <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7eba:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7ebc:	680b      	ldr	r3, [r1, #0]
   d7ebe:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7ec0:	4605      	mov	r5, r0
   d7ec2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7ec4:	b933      	cbnz	r3, d7ed4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d7ec6:	4608      	mov	r0, r1
   d7ec8:	f7fe ffaa 	bl	d6e20 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d7ecc:	b910      	cbnz	r0, d7ed4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d7ece:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d7ed0:	2201      	movs	r2, #1
   d7ed2:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d7ed4:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d7ed6:	4628      	mov	r0, r5
   d7ed8:	310c      	adds	r1, #12
   d7eda:	f7ff ffcc 	bl	d7e76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d7ede:	4628      	mov	r0, r5
   d7ee0:	bd38      	pop	{r3, r4, r5, pc}

000d7ee2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7ee4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7ee6:	6845      	ldr	r5, [r0, #4]
   d7ee8:	4668      	mov	r0, sp
   d7eea:	f7ff fc81 	bl	d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7eee:	6861      	ldr	r1, [r4, #4]
   d7ef0:	68a3      	ldr	r3, [r4, #8]
   d7ef2:	4299      	cmp	r1, r3
   d7ef4:	db05      	blt.n	d7f02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d7ef6:	3101      	adds	r1, #1
   d7ef8:	4620      	mov	r0, r4
   d7efa:	f7ff ffa3 	bl	d7e44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7efe:	4606      	mov	r6, r0
   d7f00:	b198      	cbz	r0, d7f2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d7f02:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7f04:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7f06:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7f0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7f0e:	4629      	mov	r1, r5
   d7f10:	f105 0008 	add.w	r0, r5, #8
   d7f14:	f7ff ff6c 	bl	d7df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7f18:	b11d      	cbz	r5, d7f22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d7f1a:	4669      	mov	r1, sp
   d7f1c:	4628      	mov	r0, r5
   d7f1e:	f7ff fc67 	bl	d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7f22:	6863      	ldr	r3, [r4, #4]
   d7f24:	3301      	adds	r3, #1
   d7f26:	6063      	str	r3, [r4, #4]
   d7f28:	2601      	movs	r6, #1
   d7f2a:	a801      	add	r0, sp, #4
   d7f2c:	f7ff fc6a 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7f30:	4630      	mov	r0, r6
   d7f32:	b002      	add	sp, #8
   d7f34:	bd70      	pop	{r4, r5, r6, pc}

000d7f36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7f36:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f3a:	4606      	mov	r6, r0
   d7f3c:	460c      	mov	r4, r1
   d7f3e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7f40:	d914      	bls.n	d7f6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7f42:	4290      	cmp	r0, r2
   d7f44:	d213      	bcs.n	d7f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7f46:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7f4a:	1a6c      	subs	r4, r5, r1
   d7f4c:	f1a1 0708 	sub.w	r7, r1, #8
   d7f50:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7f52:	42af      	cmp	r7, r5
   d7f54:	d018      	beq.n	d7f88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7f56:	b11c      	cbz	r4, d7f60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7f58:	4629      	mov	r1, r5
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f7ff fc3a 	bl	d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7f60:	1d28      	adds	r0, r5, #4
   d7f62:	f7ff fc4f 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7f66:	3d08      	subs	r5, #8
   d7f68:	3c08      	subs	r4, #8
   d7f6a:	e7f2      	b.n	d7f52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7f6c:	d00c      	beq.n	d7f88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7f6e:	42ac      	cmp	r4, r5
   d7f70:	d00a      	beq.n	d7f88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7f72:	b11e      	cbz	r6, d7f7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7f74:	4621      	mov	r1, r4
   d7f76:	4630      	mov	r0, r6
   d7f78:	f7ff fc2c 	bl	d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7f7c:	1d20      	adds	r0, r4, #4
   d7f7e:	f7ff fc41 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7f82:	3408      	adds	r4, #8
   d7f84:	3608      	adds	r6, #8
   d7f86:	e7f2      	b.n	d7f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7f8a:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7f8c:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7f8e:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7f90:	dd0b      	ble.n	d7faa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7f92:	00f0      	lsls	r0, r6, #3
   d7f94:	f7fe fecc 	bl	d6d30 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7f98:	4604      	mov	r4, r0
   d7f9a:	b170      	cbz	r0, d7fba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7f9c:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7fa0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7fa4:	f7ff ffc7 	bl	d7f36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7fa8:	e000      	b.n	d7fac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7faa:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7fac:	6828      	ldr	r0, [r5, #0]
   d7fae:	f7fe fec7 	bl	d6d40 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7fb2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7fb4:	60ae      	str	r6, [r5, #8]
        return true;
   d7fb6:	2001      	movs	r0, #1
   d7fb8:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7fba:	bd70      	pop	{r4, r5, r6, pc}

000d7fbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7fc0:	2300      	movs	r3, #0
   d7fc2:	6003      	str	r3, [r0, #0]
   d7fc4:	6043      	str	r3, [r0, #4]
   d7fc6:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7fc8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7fca:	6849      	ldr	r1, [r1, #4]
   d7fcc:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7fce:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7fd0:	dd13      	ble.n	d7ffa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7fd2:	f7ff ffda 	bl	d7f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7fd6:	b180      	cbz	r0, d7ffa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7fd8:	6835      	ldr	r5, [r6, #0]
   d7fda:	6873      	ldr	r3, [r6, #4]
   d7fdc:	6827      	ldr	r7, [r4, #0]
   d7fde:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7fe2:	4545      	cmp	r5, r8
   d7fe4:	d007      	beq.n	d7ff6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7fe6:	b11f      	cbz	r7, d7ff0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7fe8:	4629      	mov	r1, r5
   d7fea:	4638      	mov	r0, r7
   d7fec:	f7ff fbf2 	bl	d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7ff0:	3508      	adds	r5, #8
   d7ff2:	3708      	adds	r7, #8
   d7ff4:	e7f5      	b.n	d7fe2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7ff6:	6873      	ldr	r3, [r6, #4]
   d7ff8:	6063      	str	r3, [r4, #4]
    }
}
   d7ffa:	4620      	mov	r0, r4
   d7ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8000 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d8000:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d8002:	680b      	ldr	r3, [r1, #0]
   d8004:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d8006:	b085      	sub	sp, #20
   d8008:	4605      	mov	r5, r0
   d800a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d800c:	b92b      	cbnz	r3, d801a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d800e:	a801      	add	r0, sp, #4
   d8010:	f7ff ff53 	bl	d7eba <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d8014:	a801      	add	r0, sp, #4
   d8016:	f7ff fc0f 	bl	d7838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d801a:	6823      	ldr	r3, [r4, #0]
   d801c:	7adb      	ldrb	r3, [r3, #11]
   d801e:	b93b      	cbnz	r3, d8030 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d8020:	4621      	mov	r1, r4
   d8022:	a801      	add	r0, sp, #4
   d8024:	f7ff fa7e 	bl	d7524 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d8028:	b910      	cbnz	r0, d8030 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d802a:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d802c:	2201      	movs	r2, #1
   d802e:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8030:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d8032:	4628      	mov	r0, r5
   d8034:	3118      	adds	r1, #24
   d8036:	f7ff ffc1 	bl	d7fbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d803a:	4628      	mov	r0, r5
   d803c:	b005      	add	sp, #20
   d803e:	bd30      	pop	{r4, r5, pc}

000d8040 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d8040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8044:	460d      	mov	r5, r1
   d8046:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d8048:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d804c:	4617      	mov	r7, r2
   d804e:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d8050:	4642      	mov	r2, r8
   d8052:	2100      	movs	r1, #0
   d8054:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d8056:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d8058:	f001 fcef 	bl	d9a3a <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d805c:	6869      	ldr	r1, [r5, #4]
   d805e:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d8060:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d8062:	ab02      	add	r3, sp, #8
   d8064:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d8066:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d806a:	ab05      	add	r3, sp, #20
   d806c:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d8070:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d8074:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d8078:	f7ff fb1e 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d807c:	4b34      	ldr	r3, [pc, #208]	; (d8150 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d807e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d8080:	f7ff fb1a 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d8084:	2200      	movs	r2, #0
   d8086:	6803      	ldr	r3, [r0, #0]
   d8088:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d808a:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d808c:	a804      	add	r0, sp, #16
   d808e:	f7fe fbb7 	bl	d6800 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d8092:	4607      	mov	r7, r0
   d8094:	b120      	cbz	r0, d80a0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d8096:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8098:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d809c:	801a      	strh	r2, [r3, #0]
        return ret;
   d809e:	e053      	b.n	d8148 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d80a0:	4629      	mov	r1, r5
   d80a2:	4630      	mov	r0, r6
   d80a4:	f7ff fab0 	bl	d7608 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d80a8:	f7ff fb06 	bl	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d80ac:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d80ae:	6803      	ldr	r3, [r0, #0]
   d80b0:	ad12      	add	r5, sp, #72	; 0x48
   d80b2:	f103 0818 	add.w	r8, r3, #24
   d80b6:	f851 3b04 	ldr.w	r3, [r1], #4
   d80ba:	f845 3d20 	str.w	r3, [r5, #-32]!
   d80be:	a80b      	add	r0, sp, #44	; 0x2c
   d80c0:	f7ff fb81 	bl	d77c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d80c4:	4629      	mov	r1, r5
   d80c6:	4640      	mov	r0, r8
   d80c8:	f7ff fd31 	bl	d7b2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d80cc:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d80ce:	a80b      	add	r0, sp, #44	; 0x2c
   d80d0:	f7ff fb98 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d80d4:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d80d6:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d80d8:	f1b8 0f00 	cmp.w	r8, #0
   d80dc:	d114      	bne.n	d8108 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d80de:	4b1d      	ldr	r3, [pc, #116]	; (d8154 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d80e0:	9300      	str	r3, [sp, #0]
   d80e2:	462a      	mov	r2, r5
   d80e4:	4643      	mov	r3, r8
   d80e6:	491c      	ldr	r1, [pc, #112]	; (d8158 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d80e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d80ec:	2032      	movs	r0, #50	; 0x32
   d80ee:	f7fe fd6b 	bl	d6bc8 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d80f2:	6833      	ldr	r3, [r6, #0]
   d80f4:	4641      	mov	r1, r8
   d80f6:	8818      	ldrh	r0, [r3, #0]
   d80f8:	f7fe fb3c 	bl	d6774 <hal_ble_gap_disconnect>
   d80fc:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d80fe:	4817      	ldr	r0, [pc, #92]	; (d815c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8100:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8104:	801a      	strh	r2, [r3, #0]
   d8106:	e01f      	b.n	d8148 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d8108:	4b15      	ldr	r3, [pc, #84]	; (d8160 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d810a:	9300      	str	r3, [sp, #0]
   d810c:	462a      	mov	r2, r5
   d810e:	463b      	mov	r3, r7
   d8110:	4911      	ldr	r1, [pc, #68]	; (d8158 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d8112:	970b      	str	r7, [sp, #44]	; 0x2c
   d8114:	4648      	mov	r0, r9
   d8116:	f7fe fd57 	bl	d6bc8 <log_message>
    if (automatic) {
   d811a:	b1a4      	cbz	r4, d8146 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d811c:	4631      	mov	r1, r6
   d811e:	4628      	mov	r0, r5
   d8120:	f7ff ff6e 	bl	d8000 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d8124:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8128:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d812c:	42a6      	cmp	r6, r4
   d812e:	d005      	beq.n	d813c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d8130:	4620      	mov	r0, r4
   d8132:	2101      	movs	r1, #1
   d8134:	f7ff f9b2 	bl	d749c <_ZNK8particle17BleCharacteristic9subscribeEb>
   d8138:	3408      	adds	r4, #8
   d813a:	e7f7      	b.n	d812c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d813c:	4628      	mov	r0, r5
   d813e:	f7ff fb8d 	bl	d785c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d8142:	2000      	movs	r0, #0
   d8144:	e000      	b.n	d8148 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d8146:	4620      	mov	r0, r4
}
   d8148:	b013      	add	sp, #76	; 0x4c
   d814a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d814e:	bf00      	nop
   d8150:	000d7bad 	.word	0x000d7bad
   d8154:	000daa44 	.word	0x000daa44
   d8158:	000da980 	.word	0x000da980
   d815c:	fffffefc 	.word	0xfffffefc
   d8160:	000daa60 	.word	0x000daa60

000d8164 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d8164:	b570      	push	{r4, r5, r6, lr}
   d8166:	4604      	mov	r4, r0
   d8168:	4615      	mov	r5, r2
   d816a:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d816c:	f7ff fbb6 	bl	d78dc <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d8170:	4633      	mov	r3, r6
   d8172:	2200      	movs	r2, #0
   d8174:	4629      	mov	r1, r5
   d8176:	4620      	mov	r0, r4
   d8178:	f7ff ff62 	bl	d8040 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d817c:	4620      	mov	r0, r4
   d817e:	bd70      	pop	{r4, r5, r6, pc}

000d8180 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8180:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8182:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8184:	6845      	ldr	r5, [r0, #4]
   d8186:	4668      	mov	r0, sp
   d8188:	f7ff fb24 	bl	d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d818c:	6861      	ldr	r1, [r4, #4]
   d818e:	68a3      	ldr	r3, [r4, #8]
   d8190:	4299      	cmp	r1, r3
   d8192:	db05      	blt.n	d81a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d8194:	3101      	adds	r1, #1
   d8196:	4620      	mov	r0, r4
   d8198:	f7ff fef7 	bl	d7f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d819c:	4606      	mov	r6, r0
   d819e:	b198      	cbz	r0, d81c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d81a0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d81a2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d81a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d81a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d81ac:	4629      	mov	r1, r5
   d81ae:	f105 0008 	add.w	r0, r5, #8
   d81b2:	f7ff fec0 	bl	d7f36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d81b6:	b11d      	cbz	r5, d81c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d81b8:	4669      	mov	r1, sp
   d81ba:	4628      	mov	r0, r5
   d81bc:	f7ff fb0a 	bl	d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d81c0:	6863      	ldr	r3, [r4, #4]
   d81c2:	3301      	adds	r3, #1
   d81c4:	6063      	str	r3, [r4, #4]
   d81c6:	2601      	movs	r6, #1
   d81c8:	a801      	add	r0, sp, #4
   d81ca:	f7ff fb1b 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d81ce:	4630      	mov	r0, r6
   d81d0:	b002      	add	sp, #8
   d81d2:	bd70      	pop	{r4, r5, r6, pc}

000d81d4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d81d4:	b510      	push	{r4, lr}
   d81d6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d81d8:	6840      	ldr	r0, [r0, #4]
   d81da:	b108      	cbz	r0, d81e0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d81dc:	f7fb ff5d 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d81e0:	4620      	mov	r0, r4
   d81e2:	bd10      	pop	{r4, pc}

000d81e4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d81e4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d81e6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d81e8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d81ea:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d81ee:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d81f2:	f000 fdc3 	bl	d8d7c <_ZN6StringD1Ev>
   d81f6:	4668      	mov	r0, sp
   d81f8:	f7ff ffec 	bl	d81d4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d81fc:	b003      	add	sp, #12
   d81fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8204:	b538      	push	{r3, r4, r5, lr}
   d8206:	2300      	movs	r3, #0
   d8208:	4604      	mov	r4, r0
   d820a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d820c:	2014      	movs	r0, #20
   d820e:	460d      	mov	r5, r1
   d8210:	f7fb ff41 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8214:	b128      	cbz	r0, d8222 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8216:	2301      	movs	r3, #1
   d8218:	6043      	str	r3, [r0, #4]
   d821a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d821c:	4b02      	ldr	r3, [pc, #8]	; (d8228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d821e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8220:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8222:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8224:	4620      	mov	r0, r4
   d8226:	bd38      	pop	{r3, r4, r5, pc}
   d8228:	000da934 	.word	0x000da934

000d822c <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d822c:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d822e:	2500      	movs	r5, #0
   d8230:	b086      	sub	sp, #24
   d8232:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8234:	6045      	str	r5, [r0, #4]
   d8236:	4604      	mov	r4, r0
   d8238:	2054      	movs	r0, #84	; 0x54
   d823a:	f7fb ff2c 	bl	d4096 <_Znwj>
   d823e:	f8cd d010 	str.w	sp, [sp, #16]
   d8242:	4606      	mov	r6, r0
   d8244:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8246:	b108      	cbz	r0, d824c <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d8248:	f7ff f894 	bl	d7374 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d824c:	4631      	mov	r1, r6
   d824e:	ab01      	add	r3, sp, #4
   d8250:	aa02      	add	r2, sp, #8
   d8252:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8254:	9505      	str	r5, [sp, #20]
   d8256:	f7ff ffd5 	bl	d8204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d825a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d825c:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d825e:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8260:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8262:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8264:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8266:	f7ff facd 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d826a:	a804      	add	r0, sp, #16
   d826c:	f7ff ffb2 	bl	d81d4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d8270:	6823      	ldr	r3, [r4, #0]
   d8272:	b90b      	cbnz	r3, d8278 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d8274:	f7fe fdf2 	bl	d6e5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d8278:	4620      	mov	r0, r4
   d827a:	b006      	add	sp, #24
   d827c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8280 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d8280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d8284:	f8df 8104 	ldr.w	r8, [pc, #260]	; d838c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d8288:	b08c      	sub	sp, #48	; 0x30
   d828a:	4605      	mov	r5, r0
   d828c:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d828e:	2600      	movs	r6, #0
   d8290:	682b      	ldr	r3, [r5, #0]
   d8292:	429e      	cmp	r6, r3
   d8294:	d275      	bcs.n	d8382 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d8296:	a802      	add	r0, sp, #8
   d8298:	f7ff ffc8 	bl	d822c <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d829c:	9b02      	ldr	r3, [sp, #8]
   d829e:	892a      	ldrh	r2, [r5, #8]
   d82a0:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d82a2:	686b      	ldr	r3, [r5, #4]
   d82a4:	9802      	ldr	r0, [sp, #8]
   d82a6:	242a      	movs	r4, #42	; 0x2a
   d82a8:	4374      	muls	r4, r6
   d82aa:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d82ac:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d82ae:	7e5b      	ldrb	r3, [r3, #25]
   d82b0:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d82b4:	bf1e      	ittt	ne
   d82b6:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d82ba:	f043 0302 	orrne.w	r3, r3, #2
   d82be:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d82c2:	686b      	ldr	r3, [r5, #4]
   d82c4:	4423      	add	r3, r4
   d82c6:	7e5b      	ldrb	r3, [r3, #25]
   d82c8:	075b      	lsls	r3, r3, #29
   d82ca:	bf42      	ittt	mi
   d82cc:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82d0:	f043 0304 	orrmi.w	r3, r3, #4
   d82d4:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d82d8:	686b      	ldr	r3, [r5, #4]
   d82da:	4423      	add	r3, r4
   d82dc:	7e5b      	ldrb	r3, [r3, #25]
   d82de:	0719      	lsls	r1, r3, #28
   d82e0:	bf42      	ittt	mi
   d82e2:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82e6:	f043 0308 	orrmi.w	r3, r3, #8
   d82ea:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d82ee:	686b      	ldr	r3, [r5, #4]
   d82f0:	4423      	add	r3, r4
   d82f2:	7e5b      	ldrb	r3, [r3, #25]
   d82f4:	06da      	lsls	r2, r3, #27
   d82f6:	bf42      	ittt	mi
   d82f8:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82fc:	f043 0310 	orrmi.w	r3, r3, #16
   d8300:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d8304:	686b      	ldr	r3, [r5, #4]
   d8306:	4423      	add	r3, r4
   d8308:	7e5b      	ldrb	r3, [r3, #25]
   d830a:	069b      	lsls	r3, r3, #26
   d830c:	bf42      	ittt	mi
   d830e:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8312:	f043 0320 	orrmi.w	r3, r3, #32
   d8316:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d831a:	6869      	ldr	r1, [r5, #4]
   d831c:	4421      	add	r1, r4
   d831e:	3104      	adds	r1, #4
   d8320:	f7fe fe8c 	bl	d703c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d8324:	686a      	ldr	r2, [r5, #4]
   d8326:	9b02      	ldr	r3, [sp, #8]
   d8328:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d832a:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d832c:	8be2      	ldrh	r2, [r4, #30]
   d832e:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d8330:	8c22      	ldrh	r2, [r4, #32]
   d8332:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d8334:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d8336:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d8338:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d833a:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d833c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d833e:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d8340:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d8342:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8344:	6838      	ldr	r0, [r7, #0]
   d8346:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d834a:	a804      	add	r0, sp, #16
   d834c:	f7ff fa42 	bl	d77d4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8350:	4620      	mov	r0, r4
   d8352:	a904      	add	r1, sp, #16
   d8354:	f7ff ff14 	bl	d8180 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d8358:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d835a:	a805      	add	r0, sp, #20
   d835c:	f7ff fa52 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8360:	b954      	cbnz	r4, d8378 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d8362:	2320      	movs	r3, #32
   d8364:	9304      	str	r3, [sp, #16]
   d8366:	f8cd 8000 	str.w	r8, [sp]
   d836a:	4623      	mov	r3, r4
   d836c:	aa04      	add	r2, sp, #16
   d836e:	4906      	ldr	r1, [pc, #24]	; (d8388 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d8370:	9405      	str	r4, [sp, #20]
   d8372:	2032      	movs	r0, #50	; 0x32
   d8374:	f7fe fc28 	bl	d6bc8 <log_message>
   d8378:	a803      	add	r0, sp, #12
   d837a:	f7ff fa43 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d837e:	3601      	adds	r6, #1
   d8380:	e786      	b.n	d8290 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d8382:	b00c      	add	sp, #48	; 0x30
   d8384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8388:	000da980 	.word	0x000da980
   d838c:	000daa7d 	.word	0x000daa7d

000d8390 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8390:	b510      	push	{r4, lr}
   d8392:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8394:	6840      	ldr	r0, [r0, #4]
   d8396:	b108      	cbz	r0, d839c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8398:	f7fb fe7f 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d839c:	4620      	mov	r0, r4
   d839e:	bd10      	pop	{r4, pc}

000d83a0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d83a0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d83a2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d83a4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d83a6:	e88d 0009 	stmia.w	sp, {r0, r3}
   d83aa:	4668      	mov	r0, sp
   d83ac:	f7ff fff0 	bl	d8390 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d83b0:	b003      	add	sp, #12
   d83b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d83b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d83b8:	b538      	push	{r3, r4, r5, lr}
   d83ba:	2300      	movs	r3, #0
   d83bc:	4604      	mov	r4, r0
   d83be:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d83c0:	2014      	movs	r0, #20
   d83c2:	460d      	mov	r5, r1
   d83c4:	f7fb fe67 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d83c8:	b128      	cbz	r0, d83d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d83ca:	2301      	movs	r3, #1
   d83cc:	6043      	str	r3, [r0, #4]
   d83ce:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d83d0:	4b02      	ldr	r3, [pc, #8]	; (d83dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d83d2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d83d4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d83d6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d83d8:	4620      	mov	r0, r4
   d83da:	bd38      	pop	{r3, r4, r5, pc}
   d83dc:	000da950 	.word	0x000da950

000d83e0 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d83e0:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d83e2:	2500      	movs	r5, #0
   d83e4:	b086      	sub	sp, #24
   d83e6:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d83e8:	6045      	str	r5, [r0, #4]
   d83ea:	4604      	mov	r4, r0
   d83ec:	2018      	movs	r0, #24
   d83ee:	f7fb fe52 	bl	d4096 <_Znwj>
   d83f2:	f8cd d010 	str.w	sp, [sp, #16]
   d83f6:	4606      	mov	r6, r0
   d83f8:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d83fa:	b118      	cbz	r0, d8404 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d83fc:	f7fe fd8a 	bl	d6f14 <_ZN8particle7BleUuidC1Ev>
   d8400:	82b5      	strh	r5, [r6, #20]
   d8402:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8404:	4631      	mov	r1, r6
   d8406:	ab01      	add	r3, sp, #4
   d8408:	aa02      	add	r2, sp, #8
   d840a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d840c:	9505      	str	r5, [sp, #20]
   d840e:	f7ff ffd3 	bl	d83b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8412:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8414:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8416:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8418:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d841a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d841c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d841e:	f7ff f9f1 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8422:	a804      	add	r0, sp, #16
   d8424:	f7ff ffb4 	bl	d8390 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d8428:	6823      	ldr	r3, [r4, #0]
   d842a:	b90b      	cbnz	r3, d8430 <_ZN8particle10BleServiceC1Ev+0x50>
   d842c:	f7fe fd16 	bl	d6e5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8430:	4620      	mov	r0, r4
   d8432:	b006      	add	sp, #24
   d8434:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8438 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d843c:	f8df 8080 	ldr.w	r8, [pc, #128]	; d84c0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8440:	b08c      	sub	sp, #48	; 0x30
   d8442:	4606      	mov	r6, r0
   d8444:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8446:	2500      	movs	r5, #0
   d8448:	6833      	ldr	r3, [r6, #0]
   d844a:	429d      	cmp	r5, r3
   d844c:	d233      	bcs.n	d84b6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d844e:	a802      	add	r0, sp, #8
   d8450:	f7ff ffc6 	bl	d83e0 <_ZN8particle10BleServiceC1Ev>
   d8454:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d8456:	6871      	ldr	r1, [r6, #4]
   d8458:	9802      	ldr	r0, [sp, #8]
   d845a:	436c      	muls	r4, r5
   d845c:	4421      	add	r1, r4
   d845e:	3104      	adds	r1, #4
   d8460:	f7fe fdec 	bl	d703c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d8464:	6873      	ldr	r3, [r6, #4]
   d8466:	9a02      	ldr	r2, [sp, #8]
   d8468:	4423      	add	r3, r4
   d846a:	a902      	add	r1, sp, #8
   d846c:	8b1b      	ldrh	r3, [r3, #24]
   d846e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d8470:	6873      	ldr	r3, [r6, #4]
   d8472:	441c      	add	r4, r3
   d8474:	8b63      	ldrh	r3, [r4, #26]
   d8476:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d8478:	6838      	ldr	r0, [r7, #0]
   d847a:	f100 040c 	add.w	r4, r0, #12
   d847e:	a804      	add	r0, sp, #16
   d8480:	f7ff f9b6 	bl	d77f0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d8484:	4620      	mov	r0, r4
   d8486:	a904      	add	r1, sp, #16
   d8488:	f7ff fd2b 	bl	d7ee2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d848c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d848e:	a805      	add	r0, sp, #20
   d8490:	f7ff f9b8 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8494:	b954      	cbnz	r4, d84ac <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d8496:	2320      	movs	r3, #32
   d8498:	9304      	str	r3, [sp, #16]
   d849a:	f8cd 8000 	str.w	r8, [sp]
   d849e:	4623      	mov	r3, r4
   d84a0:	aa04      	add	r2, sp, #16
   d84a2:	4906      	ldr	r1, [pc, #24]	; (d84bc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d84a4:	9405      	str	r4, [sp, #20]
   d84a6:	2032      	movs	r0, #50	; 0x32
   d84a8:	f7fe fb8e 	bl	d6bc8 <log_message>
   d84ac:	a803      	add	r0, sp, #12
   d84ae:	f7ff f9a9 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d84b2:	3501      	adds	r5, #1
   d84b4:	e7c8      	b.n	d8448 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d84b6:	b00c      	add	sp, #48	; 0x30
   d84b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84bc:	000da980 	.word	0x000da980
   d84c0:	000daaa9 	.word	0x000daaa9

000d84c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d84c4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84c6:	4c06      	ldr	r4, [pc, #24]	; (d84e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d84c8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d84ca:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84cc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d84ce:	f7fe f9eb 	bl	d68a8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d84d2:	4620      	mov	r0, r4
   d84d4:	4a03      	ldr	r2, [pc, #12]	; (d84e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d84d6:	4904      	ldr	r1, [pc, #16]	; (d84e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d84d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d84dc:	f001 b804 	b.w	d94e8 <__aeabi_atexit>
   d84e0:	2003e350 	.word	0x2003e350
   d84e4:	2003d684 	.word	0x2003d684
   d84e8:	000d6e0f 	.word	0x000d6e0f

000d84ec <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d84ec:	2200      	movs	r2, #0
   d84ee:	4611      	mov	r1, r2
   d84f0:	6840      	ldr	r0, [r0, #4]
   d84f2:	f7fe bbe5 	b.w	d6cc0 <network_ready>

000d84f6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d84f6:	2200      	movs	r2, #0
   d84f8:	4611      	mov	r1, r2
   d84fa:	6840      	ldr	r0, [r0, #4]
   d84fc:	f7fe bc00 	b.w	d6d00 <network_listening>

000d8500 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8500:	2200      	movs	r2, #0
   d8502:	4611      	mov	r1, r2
   d8504:	6840      	ldr	r0, [r0, #4]
   d8506:	f7fe bc0b 	b.w	d6d20 <network_get_listen_timeout>

000d850a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d850a:	2200      	movs	r2, #0
   d850c:	6840      	ldr	r0, [r0, #4]
   d850e:	f7fe bbff 	b.w	d6d10 <network_set_listen_timeout>

000d8512 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8512:	2200      	movs	r2, #0
   d8514:	f081 0101 	eor.w	r1, r1, #1
   d8518:	6840      	ldr	r0, [r0, #4]
   d851a:	f7fe bbe9 	b.w	d6cf0 <network_listen>

000d851e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d851e:	2300      	movs	r3, #0
   d8520:	461a      	mov	r2, r3
   d8522:	4619      	mov	r1, r3
   d8524:	6840      	ldr	r0, [r0, #4]
   d8526:	f7fe bbdb 	b.w	d6ce0 <network_off>

000d852a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d852a:	2300      	movs	r3, #0
   d852c:	461a      	mov	r2, r3
   d852e:	4619      	mov	r1, r3
   d8530:	6840      	ldr	r0, [r0, #4]
   d8532:	f7fe bbcd 	b.w	d6cd0 <network_on>

000d8536 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8536:	2200      	movs	r2, #0
   d8538:	4611      	mov	r1, r2
   d853a:	6840      	ldr	r0, [r0, #4]
   d853c:	f7fe bbb0 	b.w	d6ca0 <network_connecting>

000d8540 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8540:	2200      	movs	r2, #0
   d8542:	2102      	movs	r1, #2
   d8544:	6840      	ldr	r0, [r0, #4]
   d8546:	f7fe bbb3 	b.w	d6cb0 <network_disconnect>

000d854a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d854a:	2300      	movs	r3, #0
   d854c:	461a      	mov	r2, r3
   d854e:	6840      	ldr	r0, [r0, #4]
   d8550:	f7fe bb9e 	b.w	d6c90 <network_connect>

000d8554 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8554:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8556:	4c08      	ldr	r4, [pc, #32]	; (d8578 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8558:	2528      	movs	r5, #40	; 0x28
   d855a:	462a      	mov	r2, r5
   d855c:	2100      	movs	r1, #0
   d855e:	4620      	mov	r0, r4
   d8560:	f001 fa6b 	bl	d9a3a <memset>
        cid = -1;
   d8564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8568:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d856a:	4b04      	ldr	r3, [pc, #16]	; (d857c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d856c:	8025      	strh	r5, [r4, #0]
   d856e:	2204      	movs	r2, #4
   d8570:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8572:	4a03      	ldr	r2, [pc, #12]	; (d8580 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8574:	601a      	str	r2, [r3, #0]
   d8576:	bd38      	pop	{r3, r4, r5, pc}
   d8578:	2003e35c 	.word	0x2003e35c
   d857c:	2003e354 	.word	0x2003e354
   d8580:	000dab38 	.word	0x000dab38

000d8584 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8584:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d8586:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8588:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d858a:	b113      	cbz	r3, d8592 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d858c:	2203      	movs	r2, #3
   d858e:	4601      	mov	r1, r0
   d8590:	4798      	blx	r3
    }
   d8592:	4620      	mov	r0, r4
   d8594:	bd10      	pop	{r4, pc}

000d8596 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8596:	2200      	movs	r2, #0
   d8598:	4611      	mov	r1, r2
   d859a:	6840      	ldr	r0, [r0, #4]
   d859c:	f7fe bbb0 	b.w	d6d00 <network_listening>

000d85a0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d85a0:	2200      	movs	r2, #0
   d85a2:	4611      	mov	r1, r2
   d85a4:	6840      	ldr	r0, [r0, #4]
   d85a6:	f7fe bbbb 	b.w	d6d20 <network_get_listen_timeout>

000d85aa <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d85aa:	2200      	movs	r2, #0
   d85ac:	6840      	ldr	r0, [r0, #4]
   d85ae:	f7fe bbaf 	b.w	d6d10 <network_set_listen_timeout>

000d85b2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d85b2:	2200      	movs	r2, #0
   d85b4:	f081 0101 	eor.w	r1, r1, #1
   d85b8:	6840      	ldr	r0, [r0, #4]
   d85ba:	f7fe bb99 	b.w	d6cf0 <network_listen>

000d85be <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d85be:	2300      	movs	r3, #0
   d85c0:	461a      	mov	r2, r3
   d85c2:	4619      	mov	r1, r3
   d85c4:	6840      	ldr	r0, [r0, #4]
   d85c6:	f7fe bb8b 	b.w	d6ce0 <network_off>

000d85ca <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d85ca:	2300      	movs	r3, #0
   d85cc:	461a      	mov	r2, r3
   d85ce:	4619      	mov	r1, r3
   d85d0:	6840      	ldr	r0, [r0, #4]
   d85d2:	f7fe bb7d 	b.w	d6cd0 <network_on>

000d85d6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d85d6:	2200      	movs	r2, #0
   d85d8:	4611      	mov	r1, r2
   d85da:	6840      	ldr	r0, [r0, #4]
   d85dc:	f7fe bb70 	b.w	d6cc0 <network_ready>

000d85e0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d85e0:	2200      	movs	r2, #0
   d85e2:	4611      	mov	r1, r2
   d85e4:	6840      	ldr	r0, [r0, #4]
   d85e6:	f7fe bb5b 	b.w	d6ca0 <network_connecting>

000d85ea <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d85ea:	2200      	movs	r2, #0
   d85ec:	2102      	movs	r1, #2
   d85ee:	6840      	ldr	r0, [r0, #4]
   d85f0:	f7fe bb5e 	b.w	d6cb0 <network_disconnect>

000d85f4 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d85f4:	2300      	movs	r3, #0
   d85f6:	461a      	mov	r2, r3
   d85f8:	6840      	ldr	r0, [r0, #4]
   d85fa:	f7fe bb49 	b.w	d6c90 <network_connect>
	...

000d8600 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8600:	4b02      	ldr	r3, [pc, #8]	; (d860c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8602:	2203      	movs	r2, #3
   d8604:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8606:	4a02      	ldr	r2, [pc, #8]	; (d8610 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8608:	601a      	str	r2, [r3, #0]
   d860a:	4770      	bx	lr
   d860c:	2003e384 	.word	0x2003e384
   d8610:	000dab6c 	.word	0x000dab6c

000d8614 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8614:	4770      	bx	lr

000d8616 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8618:	4606      	mov	r6, r0
   d861a:	4615      	mov	r5, r2
   d861c:	460c      	mov	r4, r1
   d861e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8620:	42bc      	cmp	r4, r7
   d8622:	d006      	beq.n	d8632 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8624:	6833      	ldr	r3, [r6, #0]
   d8626:	f814 1b01 	ldrb.w	r1, [r4], #1
   d862a:	689b      	ldr	r3, [r3, #8]
   d862c:	4630      	mov	r0, r6
   d862e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8630:	e7f6      	b.n	d8620 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8632:	4628      	mov	r0, r5
   d8634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8636 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8636:	2200      	movs	r2, #0
   d8638:	7c00      	ldrb	r0, [r0, #16]
   d863a:	f7fe b9a5 	b.w	d6988 <HAL_I2C_Write_Data>

000d863e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d863e:	2100      	movs	r1, #0
   d8640:	7c00      	ldrb	r0, [r0, #16]
   d8642:	f7fe b9a9 	b.w	d6998 <HAL_I2C_Available_Data>

000d8646 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8646:	2100      	movs	r1, #0
   d8648:	7c00      	ldrb	r0, [r0, #16]
   d864a:	f7fe b9ad 	b.w	d69a8 <HAL_I2C_Read_Data>

000d864e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d864e:	2100      	movs	r1, #0
   d8650:	7c00      	ldrb	r0, [r0, #16]
   d8652:	f7fe b9b1 	b.w	d69b8 <HAL_I2C_Peek_Data>

000d8656 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8656:	2100      	movs	r1, #0
   d8658:	7c00      	ldrb	r0, [r0, #16]
   d865a:	f7fe b9b5 	b.w	d69c8 <HAL_I2C_Flush_Data>

000d865e <_ZN7TwoWireD0Ev>:
   d865e:	b510      	push	{r4, lr}
   d8660:	2114      	movs	r1, #20
   d8662:	4604      	mov	r4, r0
   d8664:	f000 ff45 	bl	d94f2 <_ZdlPvj>
   d8668:	4620      	mov	r0, r4
   d866a:	bd10      	pop	{r4, pc}

000d866c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d866c:	b510      	push	{r4, lr}
   d866e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8670:	2300      	movs	r3, #0
   d8672:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8678:	60a3      	str	r3, [r4, #8]
   d867a:	4b04      	ldr	r3, [pc, #16]	; (d868c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d867c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d867e:	4608      	mov	r0, r1
   d8680:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8682:	4611      	mov	r1, r2
   d8684:	f7fe f9b0 	bl	d69e8 <HAL_I2C_Init>
}
   d8688:	4620      	mov	r0, r4
   d868a:	bd10      	pop	{r4, pc}
   d868c:	000daba0 	.word	0x000daba0

000d8690 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8690:	2100      	movs	r1, #0
   d8692:	7c00      	ldrb	r0, [r0, #16]
   d8694:	f7fe b9a0 	b.w	d69d8 <HAL_I2C_Is_Enabled>

000d8698 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8698:	4770      	bx	lr

000d869a <_ZN9IPAddressD0Ev>:
   d869a:	b510      	push	{r4, lr}
   d869c:	2118      	movs	r1, #24
   d869e:	4604      	mov	r4, r0
   d86a0:	f000 ff27 	bl	d94f2 <_ZdlPvj>
   d86a4:	4620      	mov	r0, r4
   d86a6:	bd10      	pop	{r4, pc}

000d86a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d86a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d86aa:	7d03      	ldrb	r3, [r0, #20]
   d86ac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d86ae:	b08d      	sub	sp, #52	; 0x34
   d86b0:	460e      	mov	r6, r1
   d86b2:	f100 0704 	add.w	r7, r0, #4
   d86b6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d86ba:	d002      	beq.n	d86c2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d86bc:	f100 0508 	add.w	r5, r0, #8
   d86c0:	e018      	b.n	d86f4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d86c2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d86c4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d86c6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d86ca:	232f      	movs	r3, #47	; 0x2f
   d86cc:	462a      	mov	r2, r5
   d86ce:	200a      	movs	r0, #10
   d86d0:	f7fe f992 	bl	d69f8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d86d4:	4628      	mov	r0, r5
   d86d6:	f001 fa02 	bl	d9ade <strlen>
   d86da:	6833      	ldr	r3, [r6, #0]
   d86dc:	4602      	mov	r2, r0
   d86de:	68db      	ldr	r3, [r3, #12]
   d86e0:	4629      	mov	r1, r5
   d86e2:	4630      	mov	r0, r6
   d86e4:	4798      	blx	r3
   d86e6:	e00f      	b.n	d8708 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d86e8:	b124      	cbz	r4, d86f4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d86ea:	212e      	movs	r1, #46	; 0x2e
   d86ec:	4630      	mov	r0, r6
   d86ee:	f000 f9c9 	bl	d8a84 <_ZN5Print5printEc>
   d86f2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d86f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d86f8:	220a      	movs	r2, #10
   d86fa:	4630      	mov	r0, r6
   d86fc:	f000 f9db 	bl	d8ab6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8700:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8702:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8704:	d1f0      	bne.n	d86e8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8706:	4620      	mov	r0, r4
    }
    return n;
}
   d8708:	b00d      	add	sp, #52	; 0x34
   d870a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d870c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d870c:	b510      	push	{r4, lr}
   d870e:	4b05      	ldr	r3, [pc, #20]	; (d8724 <_ZN9IPAddressC1Ev+0x18>)
   d8710:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8712:	2211      	movs	r2, #17
   d8714:	f840 3b04 	str.w	r3, [r0], #4
   d8718:	2100      	movs	r1, #0
   d871a:	f001 f98e 	bl	d9a3a <memset>
{
    clear();
}
   d871e:	4620      	mov	r0, r4
   d8720:	bd10      	pop	{r4, pc}
   d8722:	bf00      	nop
   d8724:	000dabc8 	.word	0x000dabc8

000d8728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8728:	4603      	mov	r3, r0
   d872a:	4a07      	ldr	r2, [pc, #28]	; (d8748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d872c:	b510      	push	{r4, lr}
   d872e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8732:	f101 0210 	add.w	r2, r1, #16
   d8736:	f851 4b04 	ldr.w	r4, [r1], #4
   d873a:	f843 4b04 	str.w	r4, [r3], #4
   d873e:	4291      	cmp	r1, r2
   d8740:	d1f9      	bne.n	d8736 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8742:	780a      	ldrb	r2, [r1, #0]
   d8744:	701a      	strb	r2, [r3, #0]
}
   d8746:	bd10      	pop	{r4, pc}
   d8748:	000dabc8 	.word	0x000dabc8

000d874c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d874c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d874e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8752:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8756:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d875a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d875e:	2304      	movs	r3, #4
   d8760:	6041      	str	r1, [r0, #4]
   d8762:	7503      	strb	r3, [r0, #20]
   d8764:	bd10      	pop	{r4, pc}

000d8766 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8766:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8768:	780d      	ldrb	r5, [r1, #0]
   d876a:	788b      	ldrb	r3, [r1, #2]
   d876c:	784a      	ldrb	r2, [r1, #1]
   d876e:	78c9      	ldrb	r1, [r1, #3]
   d8770:	9100      	str	r1, [sp, #0]
   d8772:	4629      	mov	r1, r5
   d8774:	f7ff ffea 	bl	d874c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8778:	b003      	add	sp, #12
   d877a:	bd30      	pop	{r4, r5, pc}

000d877c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d877c:	4b01      	ldr	r3, [pc, #4]	; (d8784 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d877e:	4a02      	ldr	r2, [pc, #8]	; (d8788 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8780:	601a      	str	r2, [r3, #0]
   d8782:	4770      	bx	lr
   d8784:	2003e38c 	.word	0x2003e38c
   d8788:	000dac47 	.word	0x000dac47

000d878c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d878c:	2200      	movs	r2, #0
   d878e:	4611      	mov	r1, r2
   d8790:	6840      	ldr	r0, [r0, #4]
   d8792:	f7fe bab5 	b.w	d6d00 <network_listening>

000d8796 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8796:	2200      	movs	r2, #0
   d8798:	4611      	mov	r1, r2
   d879a:	6840      	ldr	r0, [r0, #4]
   d879c:	f7fe bac0 	b.w	d6d20 <network_get_listen_timeout>

000d87a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d87a0:	2200      	movs	r2, #0
   d87a2:	6840      	ldr	r0, [r0, #4]
   d87a4:	f7fe bab4 	b.w	d6d10 <network_set_listen_timeout>

000d87a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d87a8:	2200      	movs	r2, #0
   d87aa:	f081 0101 	eor.w	r1, r1, #1
   d87ae:	6840      	ldr	r0, [r0, #4]
   d87b0:	f7fe ba9e 	b.w	d6cf0 <network_listen>

000d87b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d87b4:	2300      	movs	r3, #0
   d87b6:	461a      	mov	r2, r3
   d87b8:	2101      	movs	r1, #1
   d87ba:	6840      	ldr	r0, [r0, #4]
   d87bc:	f7fe ba90 	b.w	d6ce0 <network_off>

000d87c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d87c0:	2300      	movs	r3, #0
   d87c2:	461a      	mov	r2, r3
   d87c4:	4619      	mov	r1, r3
   d87c6:	6840      	ldr	r0, [r0, #4]
   d87c8:	f7fe ba82 	b.w	d6cd0 <network_on>

000d87cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d87cc:	2200      	movs	r2, #0
   d87ce:	4611      	mov	r1, r2
   d87d0:	6840      	ldr	r0, [r0, #4]
   d87d2:	f7fe ba75 	b.w	d6cc0 <network_ready>

000d87d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d87d6:	2200      	movs	r2, #0
   d87d8:	4611      	mov	r1, r2
   d87da:	6840      	ldr	r0, [r0, #4]
   d87dc:	f7fe ba60 	b.w	d6ca0 <network_connecting>

000d87e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d87e0:	2200      	movs	r2, #0
   d87e2:	2102      	movs	r1, #2
   d87e4:	6840      	ldr	r0, [r0, #4]
   d87e6:	f7fe ba63 	b.w	d6cb0 <network_disconnect>

000d87ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d87ea:	2300      	movs	r3, #0
   d87ec:	461a      	mov	r2, r3
   d87ee:	6840      	ldr	r0, [r0, #4]
   d87f0:	f7fe ba4e 	b.w	d6c90 <network_connect>

000d87f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d87f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d87f6:	4605      	mov	r5, r0
   d87f8:	b188      	cbz	r0, d881e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d87fa:	6804      	ldr	r4, [r0, #0]
   d87fc:	b14c      	cbz	r4, d8812 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d87fe:	68a3      	ldr	r3, [r4, #8]
   d8800:	b11b      	cbz	r3, d880a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8802:	2203      	movs	r2, #3
   d8804:	4621      	mov	r1, r4
   d8806:	4620      	mov	r0, r4
   d8808:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d880a:	2110      	movs	r1, #16
   d880c:	4620      	mov	r0, r4
   d880e:	f000 fe70 	bl	d94f2 <_ZdlPvj>
   d8812:	4628      	mov	r0, r5
   d8814:	2114      	movs	r1, #20
      }
   d8816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d881a:	f000 be6a 	b.w	d94f2 <_ZdlPvj>
   d881e:	bd38      	pop	{r3, r4, r5, pc}

000d8820 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8820:	b110      	cbz	r0, d8828 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8822:	6803      	ldr	r3, [r0, #0]
   d8824:	685b      	ldr	r3, [r3, #4]
   d8826:	4718      	bx	r3
   d8828:	4770      	bx	lr

000d882a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d882a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d882c:	6803      	ldr	r3, [r0, #0]
   d882e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8830:	b1bb      	cbz	r3, d8862 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8832:	6858      	ldr	r0, [r3, #4]
   d8834:	f7fe f820 	bl	d6878 <os_thread_is_current>
   d8838:	b978      	cbnz	r0, d885a <_ZN6ThreadD1Ev+0x30>
   d883a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d883c:	7c5a      	ldrb	r2, [r3, #17]
   d883e:	b912      	cbnz	r2, d8846 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8840:	6858      	ldr	r0, [r3, #4]
   d8842:	f7fe f821 	bl	d6888 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8846:	6823      	ldr	r3, [r4, #0]
   d8848:	6858      	ldr	r0, [r3, #4]
   d884a:	f7fe f825 	bl	d6898 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d884e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8850:	2300      	movs	r3, #0
   d8852:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8854:	b128      	cbz	r0, d8862 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8856:	f7ff ffcd 	bl	d87f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d885a:	6820      	ldr	r0, [r4, #0]
   d885c:	b108      	cbz	r0, d8862 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d885e:	f7ff ffc9 	bl	d87f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8862:	4620      	mov	r0, r4
   d8864:	bd10      	pop	{r4, pc}

000d8866 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8866:	b538      	push	{r3, r4, r5, lr}
   d8868:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d886a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d886e:	b108      	cbz	r0, d8874 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8870:	f7fb fc15 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8874:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8878:	b108      	cbz	r0, d887e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d887a:	f7fe f81d 	bl	d68b8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d887e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8882:	b135      	cbz	r5, d8892 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8884:	4628      	mov	r0, r5
   d8886:	f7ff ffd0 	bl	d882a <_ZN6ThreadD1Ev>
   d888a:	2104      	movs	r1, #4
   d888c:	4628      	mov	r0, r5
   d888e:	f000 fe30 	bl	d94f2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8892:	6820      	ldr	r0, [r4, #0]
   d8894:	b108      	cbz	r0, d889a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8896:	f7ff ffc3 	bl	d8820 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d889a:	4620      	mov	r0, r4
   d889c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d88a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d88a0:	b510      	push	{r4, lr}
   d88a2:	4b04      	ldr	r3, [pc, #16]	; (d88b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d88a4:	4604      	mov	r4, r0
   d88a6:	f840 3b08 	str.w	r3, [r0], #8
   d88aa:	f7ff ffdc 	bl	d8866 <_ZN5spark11MeshPublishD1Ev>
   d88ae:	4620      	mov	r0, r4
   d88b0:	bd10      	pop	{r4, pc}
   d88b2:	bf00      	nop
   d88b4:	000dacb8 	.word	0x000dacb8

000d88b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d88b8:	b538      	push	{r3, r4, r5, lr}
   d88ba:	4c0e      	ldr	r4, [pc, #56]	; (d88f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d88bc:	4b0e      	ldr	r3, [pc, #56]	; (d88f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d88be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d88c0:	2500      	movs	r5, #0
   d88c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d88c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d88c8:	6063      	str	r3, [r4, #4]
   d88ca:	60a5      	str	r5, [r4, #8]
   d88cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d88d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d88d4:	f7fd ffe8 	bl	d68a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d88d8:	4b08      	ldr	r3, [pc, #32]	; (d88fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d88da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d88e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d88e4:	4620      	mov	r0, r4
   d88e6:	4a06      	ldr	r2, [pc, #24]	; (d8900 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d88e8:	4906      	ldr	r1, [pc, #24]	; (d8904 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d88ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d88ee:	f000 bdfb 	b.w	d94e8 <__aeabi_atexit>
   d88f2:	bf00      	nop
   d88f4:	2003e390 	.word	0x2003e390
   d88f8:	000dacec 	.word	0x000dacec
   d88fc:	000dacb8 	.word	0x000dacb8
   d8900:	2003d684 	.word	0x2003d684
   d8904:	000d88a1 	.word	0x000d88a1

000d8908 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8908:	2300      	movs	r3, #0
   d890a:	461a      	mov	r2, r3
   d890c:	6840      	ldr	r0, [r0, #4]
   d890e:	f7fe b9bf 	b.w	d6c90 <network_connect>

000d8912 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8912:	2200      	movs	r2, #0
   d8914:	2102      	movs	r1, #2
   d8916:	6840      	ldr	r0, [r0, #4]
   d8918:	f7fe b9ca 	b.w	d6cb0 <network_disconnect>

000d891c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d891c:	2200      	movs	r2, #0
   d891e:	4611      	mov	r1, r2
   d8920:	6840      	ldr	r0, [r0, #4]
   d8922:	f7fe b9bd 	b.w	d6ca0 <network_connecting>

000d8926 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8926:	2200      	movs	r2, #0
   d8928:	4611      	mov	r1, r2
   d892a:	6840      	ldr	r0, [r0, #4]
   d892c:	f7fe b9c8 	b.w	d6cc0 <network_ready>

000d8930 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8930:	2300      	movs	r3, #0
   d8932:	461a      	mov	r2, r3
   d8934:	4619      	mov	r1, r3
   d8936:	6840      	ldr	r0, [r0, #4]
   d8938:	f7fe b9ca 	b.w	d6cd0 <network_on>

000d893c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d893c:	2300      	movs	r3, #0
   d893e:	461a      	mov	r2, r3
   d8940:	4619      	mov	r1, r3
   d8942:	6840      	ldr	r0, [r0, #4]
   d8944:	f7fe b9cc 	b.w	d6ce0 <network_off>

000d8948 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8948:	2200      	movs	r2, #0
   d894a:	f081 0101 	eor.w	r1, r1, #1
   d894e:	6840      	ldr	r0, [r0, #4]
   d8950:	f7fe b9ce 	b.w	d6cf0 <network_listen>

000d8954 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8954:	2200      	movs	r2, #0
   d8956:	6840      	ldr	r0, [r0, #4]
   d8958:	f7fe b9da 	b.w	d6d10 <network_set_listen_timeout>

000d895c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d895c:	2200      	movs	r2, #0
   d895e:	4611      	mov	r1, r2
   d8960:	6840      	ldr	r0, [r0, #4]
   d8962:	f7fe b9dd 	b.w	d6d20 <network_get_listen_timeout>

000d8966 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8966:	2200      	movs	r2, #0
   d8968:	4611      	mov	r1, r2
   d896a:	6840      	ldr	r0, [r0, #4]
   d896c:	f7fe b9c8 	b.w	d6d00 <network_listening>

000d8970 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8974:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8976:	b095      	sub	sp, #84	; 0x54
   d8978:	4616      	mov	r6, r2
   d897a:	460d      	mov	r5, r1
   d897c:	4607      	mov	r7, r0
    IPAddress addr;
   d897e:	f7ff fec5 	bl	d870c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8982:	4621      	mov	r1, r4
   d8984:	2220      	movs	r2, #32
   d8986:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8988:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d898a:	f001 f856 	bl	d9a3a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d898e:	2340      	movs	r3, #64	; 0x40
   d8990:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8992:	4621      	mov	r1, r4
   d8994:	466b      	mov	r3, sp
   d8996:	aa0c      	add	r2, sp, #48	; 0x30
   d8998:	4630      	mov	r0, r6
   d899a:	f7fe f83d 	bl	d6a18 <netdb_getaddrinfo>
    if (!r) {
   d899e:	4604      	mov	r4, r0
   d89a0:	2800      	cmp	r0, #0
   d89a2:	d144      	bne.n	d8a2e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d89a4:	4602      	mov	r2, r0
   d89a6:	2101      	movs	r1, #1
   d89a8:	6868      	ldr	r0, [r5, #4]
   d89aa:	f7fe f989 	bl	d6cc0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d89ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d89b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d89b2:	4622      	mov	r2, r4
   d89b4:	6868      	ldr	r0, [r5, #4]
   d89b6:	f7fe f983 	bl	d6cc0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d89ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d89bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d89be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d89c0:	2e00      	cmp	r6, #0
   d89c2:	d034      	beq.n	d8a2e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d89c4:	2900      	cmp	r1, #0
   d89c6:	d132      	bne.n	d8a2e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d89c8:	6873      	ldr	r3, [r6, #4]
   d89ca:	2b02      	cmp	r3, #2
   d89cc:	d002      	beq.n	d89d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d89ce:	2b0a      	cmp	r3, #10
   d89d0:	d009      	beq.n	d89e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d89d2:	e02a      	b.n	d8a2a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d89d4:	f1b8 0f00 	cmp.w	r8, #0
   d89d8:	d027      	beq.n	d8a2a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d89da:	6971      	ldr	r1, [r6, #20]
   d89dc:	4638      	mov	r0, r7
   d89de:	3104      	adds	r1, #4
   d89e0:	f7ff fec1 	bl	d8766 <_ZN9IPAddressaSEPKh>
   d89e4:	e020      	b.n	d8a28 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d89e6:	f1b9 0f00 	cmp.w	r9, #0
   d89ea:	d01e      	beq.n	d8a2a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d89ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d89ee:	2211      	movs	r2, #17
   d89f0:	a801      	add	r0, sp, #4
   d89f2:	f001 f822 	bl	d9a3a <memset>
                    a.v = 6;
   d89f6:	2306      	movs	r3, #6
   d89f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d89fc:	ad01      	add	r5, sp, #4
   d89fe:	f104 0308 	add.w	r3, r4, #8
   d8a02:	3418      	adds	r4, #24
   d8a04:	6818      	ldr	r0, [r3, #0]
   d8a06:	6859      	ldr	r1, [r3, #4]
   d8a08:	462a      	mov	r2, r5
   d8a0a:	c203      	stmia	r2!, {r0, r1}
   d8a0c:	3308      	adds	r3, #8
   d8a0e:	42a3      	cmp	r3, r4
   d8a10:	4615      	mov	r5, r2
   d8a12:	d1f7      	bne.n	d8a04 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8a14:	a901      	add	r1, sp, #4
   d8a16:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8a18:	ad07      	add	r5, sp, #28
   d8a1a:	f7ff fe85 	bl	d8728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a20:	1d3c      	adds	r4, r7, #4
   d8a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a24:	682b      	ldr	r3, [r5, #0]
   d8a26:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8a28:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8a2a:	69f6      	ldr	r6, [r6, #28]
   d8a2c:	e7c8      	b.n	d89c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8a2e:	9800      	ldr	r0, [sp, #0]
   d8a30:	f7fd ffea 	bl	d6a08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8a34:	4638      	mov	r0, r7
   d8a36:	b015      	add	sp, #84	; 0x54
   d8a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8a3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8a3c:	4b02      	ldr	r3, [pc, #8]	; (d8a48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8a3e:	4a03      	ldr	r2, [pc, #12]	; (d8a4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8a40:	601a      	str	r2, [r3, #0]
   d8a42:	2200      	movs	r2, #0
   d8a44:	605a      	str	r2, [r3, #4]
   d8a46:	4770      	bx	lr
   d8a48:	2003e564 	.word	0x2003e564
   d8a4c:	000dacec 	.word	0x000dacec

000d8a50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a52:	4606      	mov	r6, r0
   d8a54:	460d      	mov	r5, r1
   d8a56:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8a58:	2400      	movs	r4, #0
  while (size--) {
   d8a5a:	42bd      	cmp	r5, r7
   d8a5c:	d00c      	beq.n	d8a78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8a5e:	6833      	ldr	r3, [r6, #0]
   d8a60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8a64:	689b      	ldr	r3, [r3, #8]
   d8a66:	4630      	mov	r0, r6
   d8a68:	4798      	blx	r3
     if (chunk>=0)
   d8a6a:	2800      	cmp	r0, #0
   d8a6c:	db01      	blt.n	d8a72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8a6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8a70:	e7f3      	b.n	d8a5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8a72:	2c00      	cmp	r4, #0
   d8a74:	bf08      	it	eq
   d8a76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8a78:	4620      	mov	r0, r4
   d8a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8a7c <_ZN5Print5printEPKc>:
   d8a7c:	b508      	push	{r3, lr}
   d8a7e:	f7fd f9b9 	bl	d5df4 <_ZN5Print5writeEPKc>
   d8a82:	bd08      	pop	{r3, pc}

000d8a84 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8a84:	6803      	ldr	r3, [r0, #0]
   d8a86:	689b      	ldr	r3, [r3, #8]
   d8a88:	4718      	bx	r3

000d8a8a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8a8a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8a8c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8a8e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8a90:	f7ff fff8 	bl	d8a84 <_ZN5Print5printEc>
  n += print('\n');
   d8a94:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8a96:	4604      	mov	r4, r0
  n += print('\n');
   d8a98:	4628      	mov	r0, r5
   d8a9a:	f7ff fff3 	bl	d8a84 <_ZN5Print5printEc>
  return n;
}
   d8a9e:	4420      	add	r0, r4
   d8aa0:	bd38      	pop	{r3, r4, r5, pc}

000d8aa2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8aa2:	b538      	push	{r3, r4, r5, lr}
   d8aa4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8aa6:	f7fd f9a5 	bl	d5df4 <_ZN5Print5writeEPKc>
   d8aaa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8aac:	4628      	mov	r0, r5
   d8aae:	f7ff ffec 	bl	d8a8a <_ZN5Print7printlnEv>
  return n;
}
   d8ab2:	4420      	add	r0, r4
   d8ab4:	bd38      	pop	{r3, r4, r5, pc}

000d8ab6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8ab6:	b530      	push	{r4, r5, lr}
   d8ab8:	b08b      	sub	sp, #44	; 0x2c
   d8aba:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8abc:	2100      	movs	r1, #0
   d8abe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8ac2:	2a01      	cmp	r2, #1
   d8ac4:	bf98      	it	ls
   d8ac6:	220a      	movls	r2, #10
   d8ac8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8acc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8ad0:	fb05 3312 	mls	r3, r5, r2, r3
   d8ad4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8ad8:	2b09      	cmp	r3, #9
   d8ada:	bf94      	ite	ls
   d8adc:	3330      	addls	r3, #48	; 0x30
   d8ade:	3337      	addhi	r3, #55	; 0x37
   d8ae0:	b2db      	uxtb	r3, r3
   d8ae2:	4621      	mov	r1, r4
   d8ae4:	f804 3901 	strb.w	r3, [r4], #-1
   d8ae8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8aea:	2d00      	cmp	r5, #0
   d8aec:	d1ee      	bne.n	d8acc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8aee:	f7fd f981 	bl	d5df4 <_ZN5Print5writeEPKc>
}
   d8af2:	b00b      	add	sp, #44	; 0x2c
   d8af4:	bd30      	pop	{r4, r5, pc}

000d8af6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8af6:	b40c      	push	{r2, r3}
   d8af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8afc:	b087      	sub	sp, #28
   d8afe:	af00      	add	r7, sp, #0
   d8b00:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8b04:	4605      	mov	r5, r0
   d8b06:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8b0a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8b0c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8b0e:	4623      	mov	r3, r4
   d8b10:	464a      	mov	r2, r9
   d8b12:	2114      	movs	r1, #20
   d8b14:	1d38      	adds	r0, r7, #4
   d8b16:	f7fe f943 	bl	d6da0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8b1a:	2813      	cmp	r0, #19
   d8b1c:	d805      	bhi.n	d8b2a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8b1e:	1d39      	adds	r1, r7, #4
   d8b20:	4628      	mov	r0, r5
   d8b22:	f7fd f967 	bl	d5df4 <_ZN5Print5writeEPKc>
   d8b26:	4604      	mov	r4, r0
   d8b28:	e013      	b.n	d8b52 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8b2a:	f100 0308 	add.w	r3, r0, #8
   d8b2e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8b32:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8b34:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8b38:	1c41      	adds	r1, r0, #1
   d8b3a:	4623      	mov	r3, r4
   d8b3c:	464a      	mov	r2, r9
   d8b3e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8b40:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8b42:	f7fe f92d 	bl	d6da0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8b46:	4669      	mov	r1, sp
   d8b48:	4628      	mov	r0, r5
   d8b4a:	f7fd f953 	bl	d5df4 <_ZN5Print5writeEPKc>
   d8b4e:	4604      	mov	r4, r0
   d8b50:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8b52:	b11e      	cbz	r6, d8b5c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8b54:	4628      	mov	r0, r5
   d8b56:	f7ff ff98 	bl	d8a8a <_ZN5Print7printlnEv>
   d8b5a:	4404      	add	r4, r0
    return n;
}
   d8b5c:	4620      	mov	r0, r4
   d8b5e:	371c      	adds	r7, #28
   d8b60:	46bd      	mov	sp, r7
   d8b62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8b66:	b002      	add	sp, #8
   d8b68:	4770      	bx	lr

000d8b6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8b6a:	b510      	push	{r4, lr}
   d8b6c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8b6e:	f7ff fd09 	bl	d8584 <_ZNSt14_Function_baseD1Ev>
   d8b72:	4620      	mov	r0, r4
   d8b74:	bd10      	pop	{r4, pc}
	...

000d8b78 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8b78:	4803      	ldr	r0, [pc, #12]	; (d8b88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8b7a:	4a04      	ldr	r2, [pc, #16]	; (d8b8c <_GLOBAL__sub_I_RGB+0x14>)
   d8b7c:	4904      	ldr	r1, [pc, #16]	; (d8b90 <_GLOBAL__sub_I_RGB+0x18>)
   d8b7e:	2300      	movs	r3, #0
   d8b80:	6083      	str	r3, [r0, #8]
   d8b82:	f000 bcb1 	b.w	d94e8 <__aeabi_atexit>
   d8b86:	bf00      	nop
   d8b88:	2003e56c 	.word	0x2003e56c
   d8b8c:	2003d684 	.word	0x2003d684
   d8b90:	000d8b6b 	.word	0x000d8b6b

000d8b94 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d8b94:	2100      	movs	r1, #0
   d8b96:	f7fd bf87 	b.w	d6aa8 <HAL_SPI_Acquire>

000d8b9a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d8b9a:	2100      	movs	r1, #0
   d8b9c:	f7fd bf8c 	b.w	d6ab8 <HAL_SPI_Release>

000d8ba0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8ba0:	b510      	push	{r4, lr}
   d8ba2:	4604      	mov	r4, r0
{
    _spi = spi;
   d8ba4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d8ba6:	4608      	mov	r0, r1
   d8ba8:	f7fd ff4e 	bl	d6a48 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8bac:	2300      	movs	r3, #0
   d8bae:	6063      	str	r3, [r4, #4]
}
   d8bb0:	4620      	mov	r0, r4
   d8bb2:	bd10      	pop	{r4, pc}

000d8bb4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8bb4:	b510      	push	{r4, lr}
   d8bb6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8bb8:	7800      	ldrb	r0, [r0, #0]
   d8bba:	f7ff ffeb 	bl	d8b94 <_ZN8SPIClass4lockEv.isra.0>
   d8bbe:	b948      	cbnz	r0, d8bd4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d8bc0:	7820      	ldrb	r0, [r4, #0]
   d8bc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d8bc6:	f7fd ff2f 	bl	d6a28 <HAL_SPI_Begin>
        unlock();
   d8bca:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d8bd0:	f7ff bfe3 	b.w	d8b9a <_ZN8SPIClass6unlockEv.isra.1>
   d8bd4:	bd10      	pop	{r4, pc}

000d8bd6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d8bd6:	7800      	ldrb	r0, [r0, #0]
   d8bd8:	f7ff bfdf 	b.w	d8b9a <_ZN8SPIClass6unlockEv.isra.1>

000d8bdc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8bdc:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d8bde:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8be0:	6018      	str	r0, [r3, #0]
   d8be2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d8be4:	6818      	ldr	r0, [r3, #0]
   d8be6:	4288      	cmp	r0, r1
   d8be8:	b2e5      	uxtb	r5, r4
   d8bea:	d906      	bls.n	d8bfa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8bec:	3401      	adds	r4, #1
   d8bee:	2c08      	cmp	r4, #8
   d8bf0:	d002      	beq.n	d8bf8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8bf2:	0840      	lsrs	r0, r0, #1
   d8bf4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d8bf6:	e7f5      	b.n	d8be4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8bf8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d8bfa:	4b02      	ldr	r3, [pc, #8]	; (d8c04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8bfc:	5d5b      	ldrb	r3, [r3, r5]
   d8bfe:	7013      	strb	r3, [r2, #0]
   d8c00:	bd30      	pop	{r4, r5, pc}
   d8c02:	bf00      	nop
   d8c04:	000dad18 	.word	0x000dad18

000d8c08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8c0c:	4607      	mov	r7, r0
   d8c0e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d8c10:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8c12:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d8c14:	f7ff ffbe 	bl	d8b94 <_ZN8SPIClass4lockEv.isra.0>
   d8c18:	2800      	cmp	r0, #0
   d8c1a:	db62      	blt.n	d8ce2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d8c1c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8c1e:	2214      	movs	r2, #20
   d8c20:	2100      	movs	r1, #0
   d8c22:	a809      	add	r0, sp, #36	; 0x24
   d8c24:	f000 ff09 	bl	d9a3a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8c28:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8c2a:	4620      	mov	r0, r4
   d8c2c:	2200      	movs	r2, #0
   d8c2e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8c30:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d8c34:	f7fd ff18 	bl	d6a68 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d8c38:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d8c3c:	b154      	cbz	r4, d8c54 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d8c3e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8c42:	b935      	cbnz	r5, d8c52 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d8c44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8c48:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8c4c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d8c50:	e003      	b.n	d8c5a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d8c52:	2400      	movs	r4, #0
   d8c54:	46a1      	mov	r9, r4
   d8c56:	46a0      	mov	r8, r4
   d8c58:	2501      	movs	r5, #1
   d8c5a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8c5c:	b105      	cbz	r5, d8c60 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d8c5e:	b9bb      	cbnz	r3, d8c90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d8c60:	429d      	cmp	r5, r3
   d8c62:	d10b      	bne.n	d8c7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d8c64:	68b2      	ldr	r2, [r6, #8]
   d8c66:	4542      	cmp	r2, r8
   d8c68:	d108      	bne.n	d8c7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8c6a:	f88d 9020 	strb.w	r9, [sp, #32]
   d8c6e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8c72:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8c76:	89b2      	ldrh	r2, [r6, #12]
   d8c78:	4291      	cmp	r1, r2
   d8c7a:	d009      	beq.n	d8c90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d8c7c:	b153      	cbz	r3, d8c94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8c7e:	2400      	movs	r4, #0
   d8c80:	7838      	ldrb	r0, [r7, #0]
   d8c82:	9401      	str	r4, [sp, #4]
   d8c84:	9400      	str	r4, [sp, #0]
   d8c86:	4623      	mov	r3, r4
   d8c88:	4622      	mov	r2, r4
   d8c8a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8c8c:	f7fd ff04 	bl	d6a98 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d8c90:	2000      	movs	r0, #0
   d8c92:	e026      	b.n	d8ce2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d8c94:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d8c98:	68b1      	ldr	r1, [r6, #8]
   d8c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8c9c:	ab04      	add	r3, sp, #16
   d8c9e:	f10d 020f 	add.w	r2, sp, #15
   d8ca2:	f7ff ff9b 	bl	d8bdc <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d8ca6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8ca8:	b105      	cbz	r5, d8cac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d8caa:	b9b1      	cbnz	r1, d8cda <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d8cac:	42a9      	cmp	r1, r5
   d8cae:	d008      	beq.n	d8cc2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8cb0:	2400      	movs	r4, #0
   d8cb2:	7838      	ldrb	r0, [r7, #0]
   d8cb4:	9401      	str	r4, [sp, #4]
   d8cb6:	7b74      	ldrb	r4, [r6, #13]
   d8cb8:	7b33      	ldrb	r3, [r6, #12]
   d8cba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8cbe:	9400      	str	r4, [sp, #0]
   d8cc0:	e7e4      	b.n	d8c8c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d8cc2:	68b3      	ldr	r3, [r6, #8]
   d8cc4:	4543      	cmp	r3, r8
   d8cc6:	d3f3      	bcc.n	d8cb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8cc8:	f88d 9020 	strb.w	r9, [sp, #32]
   d8ccc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8cd0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8cd4:	89b3      	ldrh	r3, [r6, #12]
   d8cd6:	429a      	cmp	r2, r3
   d8cd8:	d1ea      	bne.n	d8cb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d8cda:	9b04      	ldr	r3, [sp, #16]
   d8cdc:	4543      	cmp	r3, r8
   d8cde:	d1e7      	bne.n	d8cb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d8ce0:	e7d6      	b.n	d8c90 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d8ce2:	b00f      	add	sp, #60	; 0x3c
   d8ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8ce8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d8ce8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d8cea:	7800      	ldrb	r0, [r0, #0]
   d8cec:	f7fd fea4 	bl	d6a38 <HAL_SPI_Send_Receive_Data>
}
   d8cf0:	b2c0      	uxtb	r0, r0
   d8cf2:	bd08      	pop	{r3, pc}

000d8cf4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8cf4:	b530      	push	{r4, r5, lr}
   d8cf6:	b087      	sub	sp, #28
   d8cf8:	4604      	mov	r4, r0
   d8cfa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d8cfc:	7800      	ldrb	r0, [r0, #0]
   d8cfe:	9500      	str	r5, [sp, #0]
   d8d00:	f7fd feba 	bl	d6a78 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d8d04:	b93d      	cbnz	r5, d8d16 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d8d06:	a902      	add	r1, sp, #8
   d8d08:	7820      	ldrb	r0, [r4, #0]
   d8d0a:	f7fd febd 	bl	d6a88 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d8d0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8d12:	07db      	lsls	r3, r3, #31
   d8d14:	d4f7      	bmi.n	d8d06 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d8d16:	b007      	add	sp, #28
   d8d18:	bd30      	pop	{r4, r5, pc}

000d8d1a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d8d1a:	7800      	ldrb	r0, [r0, #0]
   d8d1c:	f7fd be9c 	b.w	d6a58 <HAL_SPI_Is_Enabled>

000d8d20 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8d20:	b510      	push	{r4, lr}
   d8d22:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d8d24:	f7fd fdf8 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8d28:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8d2a:	6823      	ldr	r3, [r4, #0]
   d8d2c:	4620      	mov	r0, r4
   d8d2e:	695b      	ldr	r3, [r3, #20]
   d8d30:	4798      	blx	r3
    if (c >= 0) return c;
   d8d32:	2800      	cmp	r0, #0
   d8d34:	da08      	bge.n	d8d48 <_ZN6Stream9timedReadEv+0x28>
   d8d36:	f7fd fdef 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d8d3a:	68e3      	ldr	r3, [r4, #12]
   d8d3c:	1ac0      	subs	r0, r0, r3
   d8d3e:	68a3      	ldr	r3, [r4, #8]
   d8d40:	4298      	cmp	r0, r3
   d8d42:	d3f2      	bcc.n	d8d2a <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d8d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8d48:	bd10      	pop	{r4, pc}
	...

000d8d4c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d8d4c:	b570      	push	{r4, r5, r6, lr}
   d8d4e:	460d      	mov	r5, r1
  String ret;
   d8d50:	4909      	ldr	r1, [pc, #36]	; (d8d78 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d8d52:	4604      	mov	r4, r0
   d8d54:	4616      	mov	r6, r2
  String ret;
   d8d56:	f000 f858 	bl	d8e0a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d8d5a:	4628      	mov	r0, r5
   d8d5c:	f7ff ffe0 	bl	d8d20 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d8d60:	2800      	cmp	r0, #0
   d8d62:	db06      	blt.n	d8d72 <_ZN6Stream15readStringUntilEc+0x26>
   d8d64:	42b0      	cmp	r0, r6
   d8d66:	d004      	beq.n	d8d72 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d8d68:	b2c1      	uxtb	r1, r0
   d8d6a:	4620      	mov	r0, r4
   d8d6c:	f000 f8a2 	bl	d8eb4 <_ZN6String6concatEc>
   d8d70:	e7f3      	b.n	d8d5a <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d8d72:	4620      	mov	r0, r4
   d8d74:	bd70      	pop	{r4, r5, r6, pc}
   d8d76:	bf00      	nop
   d8d78:	000dac78 	.word	0x000dac78

000d8d7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8d7c:	b510      	push	{r4, lr}
   d8d7e:	4604      	mov	r4, r0
{
	free(buffer);
   d8d80:	6800      	ldr	r0, [r0, #0]
   d8d82:	f7fd ffdd 	bl	d6d40 <free>
}
   d8d86:	4620      	mov	r0, r4
   d8d88:	bd10      	pop	{r4, pc}

000d8d8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8d8a:	b510      	push	{r4, lr}
   d8d8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8d8e:	6800      	ldr	r0, [r0, #0]
   d8d90:	b108      	cbz	r0, d8d96 <_ZN6String10invalidateEv+0xc>
   d8d92:	f7fd ffd5 	bl	d6d40 <free>
	buffer = NULL;
   d8d96:	2300      	movs	r3, #0
   d8d98:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8d9a:	60a3      	str	r3, [r4, #8]
   d8d9c:	6063      	str	r3, [r4, #4]
   d8d9e:	bd10      	pop	{r4, pc}

000d8da0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8da0:	b538      	push	{r3, r4, r5, lr}
   d8da2:	4604      	mov	r4, r0
   d8da4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8da6:	6800      	ldr	r0, [r0, #0]
   d8da8:	3101      	adds	r1, #1
   d8daa:	f7fd ffd1 	bl	d6d50 <realloc>
	if (newbuffer) {
   d8dae:	b110      	cbz	r0, d8db6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8db0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8db4:	2001      	movs	r0, #1
	}
	return 0;
}
   d8db6:	bd38      	pop	{r3, r4, r5, pc}

000d8db8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8db8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8dba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8dbc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8dbe:	b113      	cbz	r3, d8dc6 <_ZN6String7reserveEj+0xe>
   d8dc0:	6843      	ldr	r3, [r0, #4]
   d8dc2:	428b      	cmp	r3, r1
   d8dc4:	d207      	bcs.n	d8dd6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8dc6:	4620      	mov	r0, r4
   d8dc8:	f7ff ffea 	bl	d8da0 <_ZN6String12changeBufferEj>
   d8dcc:	b120      	cbz	r0, d8dd8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8dce:	68a3      	ldr	r3, [r4, #8]
   d8dd0:	b90b      	cbnz	r3, d8dd6 <_ZN6String7reserveEj+0x1e>
   d8dd2:	6822      	ldr	r2, [r4, #0]
   d8dd4:	7013      	strb	r3, [r2, #0]
   d8dd6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8dd8:	bd10      	pop	{r4, pc}

000d8dda <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8dda:	b570      	push	{r4, r5, r6, lr}
   d8ddc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8dde:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8de0:	4604      	mov	r4, r0
   d8de2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8de4:	f7ff ffe8 	bl	d8db8 <_ZN6String7reserveEj>
   d8de8:	b918      	cbnz	r0, d8df2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8dea:	4620      	mov	r0, r4
   d8dec:	f7ff ffcd 	bl	d8d8a <_ZN6String10invalidateEv>
		return *this;
   d8df0:	e009      	b.n	d8e06 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8df2:	462a      	mov	r2, r5
   d8df4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8df6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8df8:	6820      	ldr	r0, [r4, #0]
   d8dfa:	f000 fdf8 	bl	d99ee <memcpy>
	buffer[len] = 0;
   d8dfe:	6822      	ldr	r2, [r4, #0]
   d8e00:	68a3      	ldr	r3, [r4, #8]
   d8e02:	2100      	movs	r1, #0
   d8e04:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8e06:	4620      	mov	r0, r4
   d8e08:	bd70      	pop	{r4, r5, r6, pc}

000d8e0a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8e0a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8e0c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8e0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8e10:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8e12:	6043      	str	r3, [r0, #4]
	len = 0;
   d8e14:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8e16:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8e18:	460d      	mov	r5, r1
   d8e1a:	b139      	cbz	r1, d8e2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8e1c:	4608      	mov	r0, r1
   d8e1e:	f000 fe5e 	bl	d9ade <strlen>
   d8e22:	4629      	mov	r1, r5
   d8e24:	4602      	mov	r2, r0
   d8e26:	4620      	mov	r0, r4
   d8e28:	f7ff ffd7 	bl	d8dda <_ZN6String4copyEPKcj>
}
   d8e2c:	4620      	mov	r0, r4
   d8e2e:	bd38      	pop	{r3, r4, r5, pc}

000d8e30 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8e30:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8e32:	b510      	push	{r4, lr}
   d8e34:	460b      	mov	r3, r1
   d8e36:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8e38:	d007      	beq.n	d8e4a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8e3a:	6809      	ldr	r1, [r1, #0]
   d8e3c:	b119      	cbz	r1, d8e46 <_ZN6StringaSERKS_+0x16>
   d8e3e:	689a      	ldr	r2, [r3, #8]
   d8e40:	f7ff ffcb 	bl	d8dda <_ZN6String4copyEPKcj>
   d8e44:	e001      	b.n	d8e4a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8e46:	f7ff ffa0 	bl	d8d8a <_ZN6String10invalidateEv>

	return *this;
}
   d8e4a:	4620      	mov	r0, r4
   d8e4c:	bd10      	pop	{r4, pc}

000d8e4e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8e4e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8e50:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8e52:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8e54:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8e56:	6043      	str	r3, [r0, #4]
	len = 0;
   d8e58:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8e5a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d8e5c:	f7ff ffe8 	bl	d8e30 <_ZN6StringaSERKS_>
}
   d8e60:	4620      	mov	r0, r4
   d8e62:	bd10      	pop	{r4, pc}

000d8e64 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8e64:	b538      	push	{r3, r4, r5, lr}
   d8e66:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8e68:	460c      	mov	r4, r1
   d8e6a:	b141      	cbz	r1, d8e7e <_ZN6StringaSEPKc+0x1a>
   d8e6c:	4608      	mov	r0, r1
   d8e6e:	f000 fe36 	bl	d9ade <strlen>
   d8e72:	4621      	mov	r1, r4
   d8e74:	4602      	mov	r2, r0
   d8e76:	4628      	mov	r0, r5
   d8e78:	f7ff ffaf 	bl	d8dda <_ZN6String4copyEPKcj>
   d8e7c:	e001      	b.n	d8e82 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8e7e:	f7ff ff84 	bl	d8d8a <_ZN6String10invalidateEv>

	return *this;
}
   d8e82:	4628      	mov	r0, r5
   d8e84:	bd38      	pop	{r3, r4, r5, pc}

000d8e86 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8e86:	b570      	push	{r4, r5, r6, lr}
   d8e88:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8e8a:	460e      	mov	r6, r1
   d8e8c:	b909      	cbnz	r1, d8e92 <_ZN6String6concatEPKcj+0xc>
   d8e8e:	2000      	movs	r0, #0
   d8e90:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8e92:	b16a      	cbz	r2, d8eb0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d8e94:	6883      	ldr	r3, [r0, #8]
   d8e96:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d8e98:	4629      	mov	r1, r5
   d8e9a:	f7ff ff8d 	bl	d8db8 <_ZN6String7reserveEj>
   d8e9e:	2800      	cmp	r0, #0
   d8ea0:	d0f5      	beq.n	d8e8e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8ea2:	6820      	ldr	r0, [r4, #0]
   d8ea4:	68a3      	ldr	r3, [r4, #8]
   d8ea6:	4631      	mov	r1, r6
   d8ea8:	4418      	add	r0, r3
   d8eaa:	f000 fe10 	bl	d9ace <strcpy>
	len = newlen;
   d8eae:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d8eb0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8eb2:	bd70      	pop	{r4, r5, r6, pc}

000d8eb4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d8eb4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8eb6:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d8eb8:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d8ebc:	2201      	movs	r2, #1
   d8ebe:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8ec0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8ec4:	f7ff ffdf 	bl	d8e86 <_ZN6String6concatEPKcj>
}
   d8ec8:	b003      	add	sp, #12
   d8eca:	f85d fb04 	ldr.w	pc, [sp], #4

000d8ece <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d8ece:	6883      	ldr	r3, [r0, #8]
   d8ed0:	428b      	cmp	r3, r1
   d8ed2:	d903      	bls.n	d8edc <_ZNK6StringixEj+0xe>
   d8ed4:	6800      	ldr	r0, [r0, #0]
   d8ed6:	b110      	cbz	r0, d8ede <_ZNK6StringixEj+0x10>
	return buffer[index];
   d8ed8:	5c40      	ldrb	r0, [r0, r1]
   d8eda:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d8edc:	2000      	movs	r0, #0
	return buffer[index];
}
   d8ede:	4770      	bx	lr

000d8ee0 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d8ee0:	f7ff bff5 	b.w	d8ece <_ZNK6StringixEj>

000d8ee4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8ee4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8ee6:	4c09      	ldr	r4, [pc, #36]	; (d8f0c <_GLOBAL__sub_I_System+0x28>)
   d8ee8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8eea:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8eee:	6020      	str	r0, [r4, #0]
   d8ef0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8ef2:	71a0      	strb	r0, [r4, #6]
   d8ef4:	8120      	strh	r0, [r4, #8]
   d8ef6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8ef8:	f7fd fe76 	bl	d6be8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8efc:	4620      	mov	r0, r4
   d8efe:	4a04      	ldr	r2, [pc, #16]	; (d8f10 <_GLOBAL__sub_I_System+0x2c>)
   d8f00:	4904      	ldr	r1, [pc, #16]	; (d8f14 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8f06:	f000 baef 	b.w	d94e8 <__aeabi_atexit>
   d8f0a:	bf00      	nop
   d8f0c:	2003e57c 	.word	0x2003e57c
   d8f10:	2003d684 	.word	0x2003d684
   d8f14:	000d4181 	.word	0x000d4181

000d8f18 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d8f1a:	4b14      	ldr	r3, [pc, #80]	; (d8f6c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8f1c:	4f14      	ldr	r7, [pc, #80]	; (d8f70 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d8f1e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d8f20:	4b14      	ldr	r3, [pc, #80]	; (d8f74 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d8f22:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d8f24:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d8f26:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d8f28:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d8f2a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8f2c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8f2e:	d01b      	beq.n	d8f68 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d8f30:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d8f32:	ad01      	add	r5, sp, #4
   d8f34:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8f38:	f000 fc52 	bl	d97e0 <localtime>
	calendar_time->tm_year += 1900;
   d8f3c:	6943      	ldr	r3, [r0, #20]
   d8f3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8f42:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8f44:	4604      	mov	r4, r0
   d8f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8f4e:	f8d4 e000 	ldr.w	lr, [r4]
   d8f52:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8f56:	ad01      	add	r5, sp, #4
   d8f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f5a:	4c07      	ldr	r4, [pc, #28]	; (d8f78 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d8f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8f62:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8f64:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8f68:	b00b      	add	sp, #44	; 0x2c
   d8f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8f6c:	2003e5b8 	.word	0x2003e5b8
   d8f70:	2003e5b4 	.word	0x2003e5b4
   d8f74:	2003e5b0 	.word	0x2003e5b0
   d8f78:	2003e588 	.word	0x2003e588

000d8f7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8f7c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f7e:	2000      	movs	r0, #0
   d8f80:	f7fd fe76 	bl	d6c70 <spark_sync_time_pending>
   d8f84:	b128      	cbz	r0, d8f92 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8f86:	f7fd fe63 	bl	d6c50 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8f8a:	f080 0001 	eor.w	r0, r0, #1
   d8f8e:	b2c0      	uxtb	r0, r0
   d8f90:	bd08      	pop	{r3, pc}
   d8f92:	2001      	movs	r0, #1
    }
   d8f94:	bd08      	pop	{r3, pc}
	...

000d8f98 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d8f98:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8f9a:	f7ff ffbd 	bl	d8f18 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d8f9e:	4b02      	ldr	r3, [pc, #8]	; (d8fa8 <_ZN9TimeClass5monthEl+0x10>)
   d8fa0:	6918      	ldr	r0, [r3, #16]
}
   d8fa2:	3001      	adds	r0, #1
   d8fa4:	bd08      	pop	{r3, pc}
   d8fa6:	bf00      	nop
   d8fa8:	2003e588 	.word	0x2003e588

000d8fac <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8fac:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8fae:	2000      	movs	r0, #0
   d8fb0:	f7fd fcc2 	bl	d6938 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8fb4:	4604      	mov	r4, r0
   d8fb6:	b968      	cbnz	r0, d8fd4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8fb8:	f7fd fe0e 	bl	d6bd8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8fbc:	2801      	cmp	r0, #1
   d8fbe:	d10b      	bne.n	d8fd8 <_ZN9TimeClass7isValidEv+0x2c>
   d8fc0:	4620      	mov	r0, r4
   d8fc2:	f7fd fe21 	bl	d6c08 <system_thread_get_state>
   d8fc6:	b938      	cbnz	r0, d8fd8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8fc8:	f7ff ffd8 	bl	d8f7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8fcc:	b930      	cbnz	r0, d8fdc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8fce:	f7fd fe37 	bl	d6c40 <spark_process>
   d8fd2:	e7f9      	b.n	d8fc8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8fd4:	2001      	movs	r0, #1
   d8fd6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8fd8:	2000      	movs	r0, #0
   d8fda:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8fdc:	f7ff ffce 	bl	d8f7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8fe0:	2000      	movs	r0, #0
   d8fe2:	f7fd fca9 	bl	d6938 <HAL_RTC_Time_Is_Valid>
   d8fe6:	3000      	adds	r0, #0
   d8fe8:	bf18      	it	ne
   d8fea:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8fec:	bd10      	pop	{r4, pc}

000d8fee <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8fee:	b508      	push	{r3, lr}
    (void)isValid();
   d8ff0:	f7ff ffdc 	bl	d8fac <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8ff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8ff8:	f7fd bc96 	b.w	d6928 <HAL_RTC_Get_UnixTime>

000d8ffc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8ffc:	b508      	push	{r3, lr}
	return hour(now());
   d8ffe:	f7ff fff6 	bl	d8fee <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9002:	f7ff ff89 	bl	d8f18 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9006:	4b01      	ldr	r3, [pc, #4]	; (d900c <_ZN9TimeClass4hourEv+0x10>)
   d9008:	6898      	ldr	r0, [r3, #8]
   d900a:	bd08      	pop	{r3, pc}
   d900c:	2003e588 	.word	0x2003e588

000d9010 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9010:	b508      	push	{r3, lr}
	return minute(now());
   d9012:	f7ff ffec 	bl	d8fee <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9016:	f7ff ff7f 	bl	d8f18 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d901a:	4b01      	ldr	r3, [pc, #4]	; (d9020 <_ZN9TimeClass6minuteEv+0x10>)
   d901c:	6858      	ldr	r0, [r3, #4]
   d901e:	bd08      	pop	{r3, pc}
   d9020:	2003e588 	.word	0x2003e588

000d9024 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d9024:	b508      	push	{r3, lr}
	return second(now());
   d9026:	f7ff ffe2 	bl	d8fee <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d902a:	f7ff ff75 	bl	d8f18 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d902e:	4b01      	ldr	r3, [pc, #4]	; (d9034 <_ZN9TimeClass6secondEv+0x10>)
   d9030:	6818      	ldr	r0, [r3, #0]
   d9032:	bd08      	pop	{r3, pc}
   d9034:	2003e588 	.word	0x2003e588

000d9038 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9038:	b508      	push	{r3, lr}
	return day(now());
   d903a:	f7ff ffd8 	bl	d8fee <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d903e:	f7ff ff6b 	bl	d8f18 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9042:	4b01      	ldr	r3, [pc, #4]	; (d9048 <_ZN9TimeClass3dayEv+0x10>)
   d9044:	68d8      	ldr	r0, [r3, #12]
   d9046:	bd08      	pop	{r3, pc}
   d9048:	2003e588 	.word	0x2003e588

000d904c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d904c:	b508      	push	{r3, lr}
	return month(now());
   d904e:	f7ff ffce 	bl	d8fee <_ZN9TimeClass3nowEv>
}
   d9052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9056:	f7ff bf9f 	b.w	d8f98 <_ZN9TimeClass5monthEl>
	...

000d905c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d905c:	b508      	push	{r3, lr}
	return year(now());
   d905e:	f7ff ffc6 	bl	d8fee <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9062:	f7ff ff59 	bl	d8f18 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9066:	4b01      	ldr	r3, [pc, #4]	; (d906c <_ZN9TimeClass4yearEv+0x10>)
   d9068:	6958      	ldr	r0, [r3, #20]
   d906a:	bd08      	pop	{r3, pc}
   d906c:	2003e588 	.word	0x2003e588

000d9070 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9070:	4b02      	ldr	r3, [pc, #8]	; (d907c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9072:	681a      	ldr	r2, [r3, #0]
   d9074:	4b02      	ldr	r3, [pc, #8]	; (d9080 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9076:	601a      	str	r2, [r3, #0]
   d9078:	4770      	bx	lr
   d907a:	bf00      	nop
   d907c:	2003d5cc 	.word	0x2003d5cc
   d9080:	2003e5ac 	.word	0x2003e5ac

000d9084 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9084:	4770      	bx	lr

000d9086 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9086:	7441      	strb	r1, [r0, #17]
   d9088:	4770      	bx	lr

000d908a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d908a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d908c:	7c00      	ldrb	r0, [r0, #16]
   d908e:	f7fd fd53 	bl	d6b38 <HAL_USART_Available_Data_For_Write>
}
   d9092:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9096:	bd08      	pop	{r3, pc}

000d9098 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9098:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d909a:	7c00      	ldrb	r0, [r0, #16]
   d909c:	f7fd fd24 	bl	d6ae8 <HAL_USART_Available_Data>
}
   d90a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d90a4:	bd08      	pop	{r3, pc}

000d90a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d90a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d90a8:	7c00      	ldrb	r0, [r0, #16]
   d90aa:	f7fd fd2d 	bl	d6b08 <HAL_USART_Peek_Data>
}
   d90ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d90b2:	bf28      	it	cs
   d90b4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d90b8:	bd08      	pop	{r3, pc}

000d90ba <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d90ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d90bc:	7c00      	ldrb	r0, [r0, #16]
   d90be:	f7fd fd1b 	bl	d6af8 <HAL_USART_Read_Data>
}
   d90c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d90c6:	bf28      	it	cs
   d90c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d90cc:	bd08      	pop	{r3, pc}

000d90ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d90ce:	7c00      	ldrb	r0, [r0, #16]
   d90d0:	f7fd bd22 	b.w	d6b18 <HAL_USART_Flush_Data>

000d90d4 <_ZN11USARTSerialD0Ev>:
   d90d4:	b510      	push	{r4, lr}
   d90d6:	2114      	movs	r1, #20
   d90d8:	4604      	mov	r4, r0
   d90da:	f000 fa0a 	bl	d94f2 <_ZdlPvj>
   d90de:	4620      	mov	r0, r4
   d90e0:	bd10      	pop	{r4, pc}

000d90e2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d90e2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d90e4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d90e6:	4604      	mov	r4, r0
   d90e8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d90ea:	b925      	cbnz	r5, d90f6 <_ZN11USARTSerial5writeEh+0x14>
   d90ec:	7c00      	ldrb	r0, [r0, #16]
   d90ee:	f7fd fd23 	bl	d6b38 <HAL_USART_Available_Data_For_Write>
   d90f2:	2800      	cmp	r0, #0
   d90f4:	dd05      	ble.n	d9102 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d90f6:	4631      	mov	r1, r6
   d90f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d90fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d90fe:	f7fd bceb 	b.w	d6ad8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9102:	4628      	mov	r0, r5
   d9104:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9108 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9108:	b510      	push	{r4, lr}
   d910a:	4604      	mov	r4, r0
   d910c:	4608      	mov	r0, r1
   d910e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9110:	2200      	movs	r2, #0
   d9112:	6062      	str	r2, [r4, #4]
   d9114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9118:	60a2      	str	r2, [r4, #8]
   d911a:	4a05      	ldr	r2, [pc, #20]	; (d9130 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d911c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d911e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9120:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9122:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9124:	461a      	mov	r2, r3
   d9126:	f7fd fccf 	bl	d6ac8 <HAL_USART_Init>
}
   d912a:	4620      	mov	r0, r4
   d912c:	bd10      	pop	{r4, pc}
   d912e:	bf00      	nop
   d9130:	000dad50 	.word	0x000dad50

000d9134 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9134:	7c00      	ldrb	r0, [r0, #16]
   d9136:	f7fd bcf7 	b.w	d6b28 <HAL_USART_Is_Enabled>
	...

000d913c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d913c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d913e:	4d0c      	ldr	r5, [pc, #48]	; (d9170 <_Z22__fetch_global_Serial1v+0x34>)
   d9140:	6829      	ldr	r1, [r5, #0]
   d9142:	f011 0401 	ands.w	r4, r1, #1
   d9146:	d111      	bne.n	d916c <_Z22__fetch_global_Serial1v+0x30>
   d9148:	4628      	mov	r0, r5
   d914a:	f7fa ffaa 	bl	d40a2 <__cxa_guard_acquire>
   d914e:	b168      	cbz	r0, d916c <_Z22__fetch_global_Serial1v+0x30>
   d9150:	4a08      	ldr	r2, [pc, #32]	; (d9174 <_Z22__fetch_global_Serial1v+0x38>)
   d9152:	4b09      	ldr	r3, [pc, #36]	; (d9178 <_Z22__fetch_global_Serial1v+0x3c>)
   d9154:	4809      	ldr	r0, [pc, #36]	; (d917c <_Z22__fetch_global_Serial1v+0x40>)
   d9156:	4621      	mov	r1, r4
   d9158:	f7ff ffd6 	bl	d9108 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d915c:	4628      	mov	r0, r5
   d915e:	f7fa ffa5 	bl	d40ac <__cxa_guard_release>
   d9162:	4a07      	ldr	r2, [pc, #28]	; (d9180 <_Z22__fetch_global_Serial1v+0x44>)
   d9164:	4907      	ldr	r1, [pc, #28]	; (d9184 <_Z22__fetch_global_Serial1v+0x48>)
   d9166:	4805      	ldr	r0, [pc, #20]	; (d917c <_Z22__fetch_global_Serial1v+0x40>)
   d9168:	f000 f9be 	bl	d94e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d916c:	4803      	ldr	r0, [pc, #12]	; (d917c <_Z22__fetch_global_Serial1v+0x40>)
   d916e:	bd38      	pop	{r3, r4, r5, pc}
   d9170:	2003e654 	.word	0x2003e654
   d9174:	2003e658 	.word	0x2003e658
   d9178:	2003e5d0 	.word	0x2003e5d0
   d917c:	2003e5bc 	.word	0x2003e5bc
   d9180:	2003d684 	.word	0x2003d684
   d9184:	000d9085 	.word	0x000d9085

000d9188 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9188:	7441      	strb	r1, [r0, #17]
   d918a:	4770      	bx	lr

000d918c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d918c:	4770      	bx	lr

000d918e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d918e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9190:	2100      	movs	r1, #0
   d9192:	7c00      	ldrb	r0, [r0, #16]
   d9194:	f7fd fcf8 	bl	d6b88 <HAL_USB_USART_Receive_Data>
}
   d9198:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d919c:	bf28      	it	cs
   d919e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d91a2:	bd08      	pop	{r3, pc}

000d91a4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d91a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d91a6:	2101      	movs	r1, #1
   d91a8:	7c00      	ldrb	r0, [r0, #16]
   d91aa:	f7fd fced 	bl	d6b88 <HAL_USB_USART_Receive_Data>
}
   d91ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d91b2:	bf28      	it	cs
   d91b4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d91b8:	bd08      	pop	{r3, pc}

000d91ba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d91ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d91bc:	7c00      	ldrb	r0, [r0, #16]
   d91be:	f7fd fcdb 	bl	d6b78 <HAL_USB_USART_Available_Data_For_Write>
}
   d91c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d91c6:	bd08      	pop	{r3, pc}

000d91c8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d91c8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d91ca:	7c00      	ldrb	r0, [r0, #16]
   d91cc:	f7fd fccc 	bl	d6b68 <HAL_USB_USART_Available_Data>
}
   d91d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d91d4:	bd08      	pop	{r3, pc}

000d91d6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d91d6:	7c00      	ldrb	r0, [r0, #16]
   d91d8:	f7fd bce6 	b.w	d6ba8 <HAL_USB_USART_Flush_Data>

000d91dc <_ZN9USBSerialD0Ev>:
   d91dc:	b510      	push	{r4, lr}
   d91de:	2114      	movs	r1, #20
   d91e0:	4604      	mov	r4, r0
   d91e2:	f000 f986 	bl	d94f2 <_ZdlPvj>
   d91e6:	4620      	mov	r0, r4
   d91e8:	bd10      	pop	{r4, pc}

000d91ea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d91ea:	b538      	push	{r3, r4, r5, lr}
   d91ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d91ee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d91f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d91f2:	f7fd fcc1 	bl	d6b78 <HAL_USB_USART_Available_Data_For_Write>
   d91f6:	2800      	cmp	r0, #0
   d91f8:	dc01      	bgt.n	d91fe <_ZN9USBSerial5writeEh+0x14>
   d91fa:	7c60      	ldrb	r0, [r4, #17]
   d91fc:	b128      	cbz	r0, d920a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d91fe:	4629      	mov	r1, r5
   d9200:	7c20      	ldrb	r0, [r4, #16]
   d9202:	f7fd fcc9 	bl	d6b98 <HAL_USB_USART_Send_Data>
   d9206:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d920a:	bd38      	pop	{r3, r4, r5, pc}

000d920c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d920c:	b510      	push	{r4, lr}
   d920e:	4604      	mov	r4, r0
   d9210:	2300      	movs	r3, #0
   d9212:	6063      	str	r3, [r4, #4]
   d9214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9218:	60a3      	str	r3, [r4, #8]
   d921a:	4b05      	ldr	r3, [pc, #20]	; (d9230 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d921c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d921e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9220:	4608      	mov	r0, r1
{
  _serial = serial;
   d9222:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9224:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9226:	4611      	mov	r1, r2
   d9228:	f7fd fc8e 	bl	d6b48 <HAL_USB_USART_Init>
}
   d922c:	4620      	mov	r0, r4
   d922e:	bd10      	pop	{r4, pc}
   d9230:	000dad80 	.word	0x000dad80

000d9234 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9234:	2200      	movs	r2, #0
   d9236:	7c00      	ldrb	r0, [r0, #16]
   d9238:	f7fd bc8e 	b.w	d6b58 <HAL_USB_USART_Begin>

000d923c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d923c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d923e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9240:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9242:	2100      	movs	r1, #0
   d9244:	f000 fbf9 	bl	d9a3a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9248:	4620      	mov	r0, r4
   d924a:	bd10      	pop	{r4, pc}

000d924c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d924c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d924e:	4d0e      	ldr	r5, [pc, #56]	; (d9288 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9250:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9252:	a801      	add	r0, sp, #4
   d9254:	f7ff fff2 	bl	d923c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9258:	6829      	ldr	r1, [r5, #0]
   d925a:	f011 0401 	ands.w	r4, r1, #1
   d925e:	d110      	bne.n	d9282 <_Z16_fetch_usbserialv+0x36>
   d9260:	4628      	mov	r0, r5
   d9262:	f7fa ff1e 	bl	d40a2 <__cxa_guard_acquire>
   d9266:	b160      	cbz	r0, d9282 <_Z16_fetch_usbserialv+0x36>
   d9268:	aa01      	add	r2, sp, #4
   d926a:	4621      	mov	r1, r4
   d926c:	4807      	ldr	r0, [pc, #28]	; (d928c <_Z16_fetch_usbserialv+0x40>)
   d926e:	f7ff ffcd 	bl	d920c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9272:	4628      	mov	r0, r5
   d9274:	f7fa ff1a 	bl	d40ac <__cxa_guard_release>
   d9278:	4a05      	ldr	r2, [pc, #20]	; (d9290 <_Z16_fetch_usbserialv+0x44>)
   d927a:	4906      	ldr	r1, [pc, #24]	; (d9294 <_Z16_fetch_usbserialv+0x48>)
   d927c:	4803      	ldr	r0, [pc, #12]	; (d928c <_Z16_fetch_usbserialv+0x40>)
   d927e:	f000 f933 	bl	d94e8 <__aeabi_atexit>
	return _usbserial;
}
   d9282:	4802      	ldr	r0, [pc, #8]	; (d928c <_Z16_fetch_usbserialv+0x40>)
   d9284:	b007      	add	sp, #28
   d9286:	bd30      	pop	{r4, r5, pc}
   d9288:	2003e6dc 	.word	0x2003e6dc
   d928c:	2003e6e0 	.word	0x2003e6e0
   d9290:	2003d684 	.word	0x2003d684
   d9294:	000d918d 	.word	0x000d918d

000d9298 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9298:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d929a:	4b0c      	ldr	r3, [pc, #48]	; (d92cc <serialEventRun+0x34>)
   d929c:	b133      	cbz	r3, d92ac <serialEventRun+0x14>
   d929e:	f7ff ffd5 	bl	d924c <_Z16_fetch_usbserialv>
   d92a2:	6803      	ldr	r3, [r0, #0]
   d92a4:	691b      	ldr	r3, [r3, #16]
   d92a6:	4798      	blx	r3
   d92a8:	2800      	cmp	r0, #0
   d92aa:	dc09      	bgt.n	d92c0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d92ac:	4b08      	ldr	r3, [pc, #32]	; (d92d0 <serialEventRun+0x38>)
   d92ae:	b163      	cbz	r3, d92ca <serialEventRun+0x32>
   d92b0:	f7ff ff44 	bl	d913c <_Z22__fetch_global_Serial1v>
   d92b4:	6803      	ldr	r3, [r0, #0]
   d92b6:	691b      	ldr	r3, [r3, #16]
   d92b8:	4798      	blx	r3
   d92ba:	2800      	cmp	r0, #0
   d92bc:	dc03      	bgt.n	d92c6 <serialEventRun+0x2e>
   d92be:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d92c0:	f3af 8000 	nop.w
   d92c4:	e7f2      	b.n	d92ac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d92c6:	f3af 8000 	nop.w
   d92ca:	bd08      	pop	{r3, pc}
	...

000d92d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d92d4:	b508      	push	{r3, lr}
	serialEventRun();
   d92d6:	f7ff ffdf 	bl	d9298 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d92da:	f7fd fb1d 	bl	d6918 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d92de:	4b01      	ldr	r3, [pc, #4]	; (d92e4 <_post_loop+0x10>)
   d92e0:	6018      	str	r0, [r3, #0]
   d92e2:	bd08      	pop	{r3, pc}
   d92e4:	2003e708 	.word	0x2003e708

000d92e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d92e8:	4802      	ldr	r0, [pc, #8]	; (d92f4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d92ea:	4a03      	ldr	r2, [pc, #12]	; (d92f8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d92ec:	4903      	ldr	r1, [pc, #12]	; (d92fc <_Z33system_initialize_user_backup_ramv+0x14>)
   d92ee:	1a12      	subs	r2, r2, r0
   d92f0:	f000 bb7d 	b.w	d99ee <memcpy>
   d92f4:	2003f400 	.word	0x2003f400
   d92f8:	2003f404 	.word	0x2003f404
   d92fc:	000db030 	.word	0x000db030

000d9300 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9300:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9302:	2300      	movs	r3, #0
   d9304:	9300      	str	r3, [sp, #0]
   d9306:	461a      	mov	r2, r3
   d9308:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d930c:	f7fd fc8e 	bl	d6c2c <system_ctrl_set_result>
}
   d9310:	b003      	add	sp, #12
   d9312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9318 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9318:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d931a:	8843      	ldrh	r3, [r0, #2]
   d931c:	2b0a      	cmp	r3, #10
   d931e:	d008      	beq.n	d9332 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9320:	2b50      	cmp	r3, #80	; 0x50
   d9322:	d109      	bne.n	d9338 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9324:	4b09      	ldr	r3, [pc, #36]	; (d934c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9326:	681b      	ldr	r3, [r3, #0]
   d9328:	b13b      	cbz	r3, d933a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d932a:	b003      	add	sp, #12
   d932c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9330:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9332:	f7ff ffe5 	bl	d9300 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9336:	e006      	b.n	d9346 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9338:	2300      	movs	r3, #0
   d933a:	9300      	str	r3, [sp, #0]
   d933c:	461a      	mov	r2, r3
   d933e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9342:	f7fd fc73 	bl	d6c2c <system_ctrl_set_result>
        break;
    }
}
   d9346:	b003      	add	sp, #12
   d9348:	f85d fb04 	ldr.w	pc, [sp], #4
   d934c:	2003e6f4 	.word	0x2003e6f4

000d9350 <module_user_init_hook>:

void module_user_init_hook()
{
   d9350:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9352:	4c10      	ldr	r4, [pc, #64]	; (d9394 <module_user_init_hook+0x44>)
   d9354:	4d10      	ldr	r5, [pc, #64]	; (d9398 <module_user_init_hook+0x48>)
   d9356:	6823      	ldr	r3, [r4, #0]
   d9358:	42ab      	cmp	r3, r5
   d935a:	4b10      	ldr	r3, [pc, #64]	; (d939c <module_user_init_hook+0x4c>)
   d935c:	bf0c      	ite	eq
   d935e:	2201      	moveq	r2, #1
   d9360:	2200      	movne	r2, #0
   d9362:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9364:	d002      	beq.n	d936c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9366:	f7ff ffbf 	bl	d92e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d936a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d936c:	f7fd fabc 	bl	d68e8 <HAL_RNG_GetRandomNumber>
   d9370:	4604      	mov	r4, r0
    srand(seed);
   d9372:	f000 fb6b 	bl	d9a4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9376:	4b0a      	ldr	r3, [pc, #40]	; (d93a0 <module_user_init_hook+0x50>)
   d9378:	b113      	cbz	r3, d9380 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d937a:	4620      	mov	r0, r4
   d937c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9380:	2100      	movs	r1, #0
   d9382:	4807      	ldr	r0, [pc, #28]	; (d93a0 <module_user_init_hook+0x50>)
   d9384:	f7fd fc7c 	bl	d6c80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9388:	2100      	movs	r1, #0
   d938a:	4806      	ldr	r0, [pc, #24]	; (d93a4 <module_user_init_hook+0x54>)
}
   d938c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9390:	f7fd bc42 	b.w	d6c18 <system_ctrl_set_app_request_handler>
   d9394:	2003f400 	.word	0x2003f400
   d9398:	9a271c1e 	.word	0x9a271c1e
   d939c:	2003e6f8 	.word	0x2003e6f8
   d93a0:	00000000 	.word	0x00000000
   d93a4:	000d9319 	.word	0x000d9319

000d93a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d93a8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d93aa:	4e18      	ldr	r6, [pc, #96]	; (d940c <pinAvailable+0x64>)
   d93ac:	6831      	ldr	r1, [r6, #0]
   d93ae:	f011 0501 	ands.w	r5, r1, #1
   d93b2:	4604      	mov	r4, r0
   d93b4:	d10a      	bne.n	d93cc <pinAvailable+0x24>
   d93b6:	4630      	mov	r0, r6
   d93b8:	f7fa fe73 	bl	d40a2 <__cxa_guard_acquire>
   d93bc:	b130      	cbz	r0, d93cc <pinAvailable+0x24>
   d93be:	4629      	mov	r1, r5
   d93c0:	4813      	ldr	r0, [pc, #76]	; (d9410 <pinAvailable+0x68>)
   d93c2:	f7ff fbed 	bl	d8ba0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d93c6:	4630      	mov	r0, r6
   d93c8:	f7fa fe70 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d93cc:	4810      	ldr	r0, [pc, #64]	; (d9410 <pinAvailable+0x68>)
   d93ce:	f7ff fca4 	bl	d8d1a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d93d2:	b128      	cbz	r0, d93e0 <pinAvailable+0x38>
   d93d4:	f1a4 030b 	sub.w	r3, r4, #11
   d93d8:	2b02      	cmp	r3, #2
   d93da:	d801      	bhi.n	d93e0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d93dc:	2000      	movs	r0, #0
   d93de:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d93e0:	f000 f85c 	bl	d949c <_Z19__fetch_global_Wirev>
   d93e4:	f7ff f954 	bl	d8690 <_ZN7TwoWire9isEnabledEv>
   d93e8:	b108      	cbz	r0, d93ee <pinAvailable+0x46>
   d93ea:	2c01      	cmp	r4, #1
   d93ec:	d9f6      	bls.n	d93dc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d93ee:	f7ff fea5 	bl	d913c <_Z22__fetch_global_Serial1v>
   d93f2:	f7ff fe9f 	bl	d9134 <_ZN11USARTSerial9isEnabledEv>
   d93f6:	b118      	cbz	r0, d9400 <pinAvailable+0x58>
   d93f8:	f1a4 0309 	sub.w	r3, r4, #9
   d93fc:	2b01      	cmp	r3, #1
   d93fe:	d9ed      	bls.n	d93dc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9400:	2c25      	cmp	r4, #37	; 0x25
   d9402:	bf8c      	ite	hi
   d9404:	2000      	movhi	r0, #0
   d9406:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9408:	bd70      	pop	{r4, r5, r6, pc}
   d940a:	bf00      	nop
   d940c:	2003e6fc 	.word	0x2003e6fc
   d9410:	2003e700 	.word	0x2003e700

000d9414 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9414:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9416:	b538      	push	{r3, r4, r5, lr}
   d9418:	4604      	mov	r4, r0
   d941a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d941c:	d80a      	bhi.n	d9434 <pinMode+0x20>
   d941e:	29ff      	cmp	r1, #255	; 0xff
   d9420:	d008      	beq.n	d9434 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9422:	f7ff ffc1 	bl	d93a8 <pinAvailable>
   d9426:	b128      	cbz	r0, d9434 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9428:	4629      	mov	r1, r5
   d942a:	4620      	mov	r0, r4
}
   d942c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9430:	f7fd ba92 	b.w	d6958 <HAL_Pin_Mode>
   d9434:	bd38      	pop	{r3, r4, r5, pc}

000d9436 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9436:	b538      	push	{r3, r4, r5, lr}
   d9438:	4604      	mov	r4, r0
   d943a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d943c:	f7fd fa94 	bl	d6968 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9440:	28ff      	cmp	r0, #255	; 0xff
   d9442:	d010      	beq.n	d9466 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9444:	2806      	cmp	r0, #6
   d9446:	d804      	bhi.n	d9452 <digitalWrite+0x1c>
   d9448:	234d      	movs	r3, #77	; 0x4d
   d944a:	fa23 f000 	lsr.w	r0, r3, r0
   d944e:	07c3      	lsls	r3, r0, #31
   d9450:	d409      	bmi.n	d9466 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9452:	4620      	mov	r0, r4
   d9454:	f7ff ffa8 	bl	d93a8 <pinAvailable>
   d9458:	b128      	cbz	r0, d9466 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d945a:	4629      	mov	r1, r5
   d945c:	4620      	mov	r0, r4
}
   d945e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9462:	f7fd ba89 	b.w	d6978 <HAL_GPIO_Write>
   d9466:	bd38      	pop	{r3, r4, r5, pc}

000d9468 <_Z17acquireWireBufferv>:
   d9468:	b570      	push	{r4, r5, r6, lr}
   d946a:	4604      	mov	r4, r0
   d946c:	2514      	movs	r5, #20
   d946e:	462a      	mov	r2, r5
   d9470:	4e09      	ldr	r6, [pc, #36]	; (d9498 <_Z17acquireWireBufferv+0x30>)
   d9472:	2100      	movs	r1, #0
   d9474:	f000 fae1 	bl	d9a3a <memset>
   d9478:	8025      	strh	r5, [r4, #0]
   d947a:	2520      	movs	r5, #32
   d947c:	4631      	mov	r1, r6
   d947e:	60a5      	str	r5, [r4, #8]
   d9480:	6125      	str	r5, [r4, #16]
   d9482:	4628      	mov	r0, r5
   d9484:	f000 f84f 	bl	d9526 <_ZnajRKSt9nothrow_t>
   d9488:	4631      	mov	r1, r6
   d948a:	6060      	str	r0, [r4, #4]
   d948c:	4628      	mov	r0, r5
   d948e:	f000 f84a 	bl	d9526 <_ZnajRKSt9nothrow_t>
   d9492:	60e0      	str	r0, [r4, #12]
   d9494:	4620      	mov	r0, r4
   d9496:	bd70      	pop	{r4, r5, r6, pc}
   d9498:	000dada8 	.word	0x000dada8

000d949c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d949c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d949e:	4d0e      	ldr	r5, [pc, #56]	; (d94d8 <_Z19__fetch_global_Wirev+0x3c>)
   d94a0:	6829      	ldr	r1, [r5, #0]
   d94a2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d94a6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d94a8:	d113      	bne.n	d94d2 <_Z19__fetch_global_Wirev+0x36>
   d94aa:	4628      	mov	r0, r5
   d94ac:	f7fa fdf9 	bl	d40a2 <__cxa_guard_acquire>
   d94b0:	b178      	cbz	r0, d94d2 <_Z19__fetch_global_Wirev+0x36>
   d94b2:	a801      	add	r0, sp, #4
   d94b4:	f7ff ffd8 	bl	d9468 <_Z17acquireWireBufferv>
   d94b8:	aa01      	add	r2, sp, #4
   d94ba:	4621      	mov	r1, r4
   d94bc:	4807      	ldr	r0, [pc, #28]	; (d94dc <_Z19__fetch_global_Wirev+0x40>)
   d94be:	f7ff f8d5 	bl	d866c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d94c2:	4628      	mov	r0, r5
   d94c4:	f7fa fdf2 	bl	d40ac <__cxa_guard_release>
   d94c8:	4a05      	ldr	r2, [pc, #20]	; (d94e0 <_Z19__fetch_global_Wirev+0x44>)
   d94ca:	4906      	ldr	r1, [pc, #24]	; (d94e4 <_Z19__fetch_global_Wirev+0x48>)
   d94cc:	4803      	ldr	r0, [pc, #12]	; (d94dc <_Z19__fetch_global_Wirev+0x40>)
   d94ce:	f000 f80b 	bl	d94e8 <__aeabi_atexit>
	return wire;
}
   d94d2:	4802      	ldr	r0, [pc, #8]	; (d94dc <_Z19__fetch_global_Wirev+0x40>)
   d94d4:	b007      	add	sp, #28
   d94d6:	bd30      	pop	{r4, r5, pc}
   d94d8:	2003e70c 	.word	0x2003e70c
   d94dc:	2003e710 	.word	0x2003e710
   d94e0:	2003d684 	.word	0x2003d684
   d94e4:	000d8615 	.word	0x000d8615

000d94e8 <__aeabi_atexit>:
   d94e8:	460b      	mov	r3, r1
   d94ea:	4601      	mov	r1, r0
   d94ec:	4618      	mov	r0, r3
   d94ee:	f000 b969 	b.w	d97c4 <__cxa_atexit>

000d94f2 <_ZdlPvj>:
   d94f2:	f7fa bdd2 	b.w	d409a <_ZdlPv>
	...

000d94f8 <_ZSt15get_new_handlerv>:
   d94f8:	4b02      	ldr	r3, [pc, #8]	; (d9504 <_ZSt15get_new_handlerv+0xc>)
   d94fa:	6818      	ldr	r0, [r3, #0]
   d94fc:	f3bf 8f5f 	dmb	sy
   d9500:	4770      	bx	lr
   d9502:	bf00      	nop
   d9504:	2003e724 	.word	0x2003e724

000d9508 <_ZnwjRKSt9nothrow_t>:
   d9508:	b510      	push	{r4, lr}
   d950a:	2800      	cmp	r0, #0
   d950c:	bf14      	ite	ne
   d950e:	4604      	movne	r4, r0
   d9510:	2401      	moveq	r4, #1
   d9512:	4620      	mov	r0, r4
   d9514:	f7fd fc0c 	bl	d6d30 <malloc>
   d9518:	b920      	cbnz	r0, d9524 <_ZnwjRKSt9nothrow_t+0x1c>
   d951a:	f7ff ffed 	bl	d94f8 <_ZSt15get_new_handlerv>
   d951e:	b108      	cbz	r0, d9524 <_ZnwjRKSt9nothrow_t+0x1c>
   d9520:	4780      	blx	r0
   d9522:	e7f6      	b.n	d9512 <_ZnwjRKSt9nothrow_t+0xa>
   d9524:	bd10      	pop	{r4, pc}

000d9526 <_ZnajRKSt9nothrow_t>:
   d9526:	f7ff bfef 	b.w	d9508 <_ZnwjRKSt9nothrow_t>
	...

000d952c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d952c:	4b24      	ldr	r3, [pc, #144]	; (d95c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d952e:	681a      	ldr	r2, [r3, #0]
   d9530:	07d0      	lsls	r0, r2, #31
   d9532:	bf5c      	itt	pl
   d9534:	2201      	movpl	r2, #1
   d9536:	601a      	strpl	r2, [r3, #0]
   d9538:	4b22      	ldr	r3, [pc, #136]	; (d95c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d953a:	681a      	ldr	r2, [r3, #0]
   d953c:	07d1      	lsls	r1, r2, #31
   d953e:	bf5c      	itt	pl
   d9540:	2201      	movpl	r2, #1
   d9542:	601a      	strpl	r2, [r3, #0]
   d9544:	4b20      	ldr	r3, [pc, #128]	; (d95c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d9546:	681a      	ldr	r2, [r3, #0]
   d9548:	07d2      	lsls	r2, r2, #31
   d954a:	bf5c      	itt	pl
   d954c:	2201      	movpl	r2, #1
   d954e:	601a      	strpl	r2, [r3, #0]
   d9550:	4b1e      	ldr	r3, [pc, #120]	; (d95cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d9552:	681a      	ldr	r2, [r3, #0]
   d9554:	07d0      	lsls	r0, r2, #31
   d9556:	bf5c      	itt	pl
   d9558:	2201      	movpl	r2, #1
   d955a:	601a      	strpl	r2, [r3, #0]
   d955c:	4b1c      	ldr	r3, [pc, #112]	; (d95d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d955e:	681a      	ldr	r2, [r3, #0]
   d9560:	07d1      	lsls	r1, r2, #31
   d9562:	bf5c      	itt	pl
   d9564:	2201      	movpl	r2, #1
   d9566:	601a      	strpl	r2, [r3, #0]
   d9568:	4b1a      	ldr	r3, [pc, #104]	; (d95d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d956a:	681a      	ldr	r2, [r3, #0]
   d956c:	07d2      	lsls	r2, r2, #31
   d956e:	bf5c      	itt	pl
   d9570:	2201      	movpl	r2, #1
   d9572:	601a      	strpl	r2, [r3, #0]
   d9574:	4b18      	ldr	r3, [pc, #96]	; (d95d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9576:	681a      	ldr	r2, [r3, #0]
   d9578:	07d0      	lsls	r0, r2, #31
   d957a:	bf5c      	itt	pl
   d957c:	2201      	movpl	r2, #1
   d957e:	601a      	strpl	r2, [r3, #0]
   d9580:	4b16      	ldr	r3, [pc, #88]	; (d95dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d9582:	681a      	ldr	r2, [r3, #0]
   d9584:	07d1      	lsls	r1, r2, #31
   d9586:	bf5c      	itt	pl
   d9588:	2201      	movpl	r2, #1
   d958a:	601a      	strpl	r2, [r3, #0]
   d958c:	4b14      	ldr	r3, [pc, #80]	; (d95e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d958e:	681a      	ldr	r2, [r3, #0]
   d9590:	07d2      	lsls	r2, r2, #31
   d9592:	bf5c      	itt	pl
   d9594:	2201      	movpl	r2, #1
   d9596:	601a      	strpl	r2, [r3, #0]
   d9598:	4b12      	ldr	r3, [pc, #72]	; (d95e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d959a:	681a      	ldr	r2, [r3, #0]
   d959c:	07d0      	lsls	r0, r2, #31
   d959e:	bf5c      	itt	pl
   d95a0:	2201      	movpl	r2, #1
   d95a2:	601a      	strpl	r2, [r3, #0]
   d95a4:	4b10      	ldr	r3, [pc, #64]	; (d95e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d95a6:	681a      	ldr	r2, [r3, #0]
   d95a8:	07d1      	lsls	r1, r2, #31
   d95aa:	bf5c      	itt	pl
   d95ac:	2201      	movpl	r2, #1
   d95ae:	601a      	strpl	r2, [r3, #0]
   d95b0:	4b0e      	ldr	r3, [pc, #56]	; (d95ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d95b2:	681a      	ldr	r2, [r3, #0]
   d95b4:	07d2      	lsls	r2, r2, #31
   d95b6:	bf5c      	itt	pl
   d95b8:	2201      	movpl	r2, #1
   d95ba:	601a      	strpl	r2, [r3, #0]
   d95bc:	4770      	bx	lr
   d95be:	bf00      	nop
   d95c0:	2003e754 	.word	0x2003e754
   d95c4:	2003e750 	.word	0x2003e750
   d95c8:	2003e74c 	.word	0x2003e74c
   d95cc:	2003e748 	.word	0x2003e748
   d95d0:	2003e744 	.word	0x2003e744
   d95d4:	2003e740 	.word	0x2003e740
   d95d8:	2003e73c 	.word	0x2003e73c
   d95dc:	2003e738 	.word	0x2003e738
   d95e0:	2003e734 	.word	0x2003e734
   d95e4:	2003e730 	.word	0x2003e730
   d95e8:	2003e72c 	.word	0x2003e72c
   d95ec:	2003e728 	.word	0x2003e728

000d95f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d95f0:	4b18      	ldr	r3, [pc, #96]	; (d9654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d95f2:	681a      	ldr	r2, [r3, #0]
   d95f4:	07d1      	lsls	r1, r2, #31
   d95f6:	bf5c      	itt	pl
   d95f8:	2201      	movpl	r2, #1
   d95fa:	601a      	strpl	r2, [r3, #0]
   d95fc:	4b16      	ldr	r3, [pc, #88]	; (d9658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d95fe:	681a      	ldr	r2, [r3, #0]
   d9600:	07d2      	lsls	r2, r2, #31
   d9602:	bf5c      	itt	pl
   d9604:	2201      	movpl	r2, #1
   d9606:	601a      	strpl	r2, [r3, #0]
   d9608:	4b14      	ldr	r3, [pc, #80]	; (d965c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d960a:	681a      	ldr	r2, [r3, #0]
   d960c:	07d0      	lsls	r0, r2, #31
   d960e:	bf5c      	itt	pl
   d9610:	2201      	movpl	r2, #1
   d9612:	601a      	strpl	r2, [r3, #0]
   d9614:	4b12      	ldr	r3, [pc, #72]	; (d9660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9616:	681a      	ldr	r2, [r3, #0]
   d9618:	07d1      	lsls	r1, r2, #31
   d961a:	bf5c      	itt	pl
   d961c:	2201      	movpl	r2, #1
   d961e:	601a      	strpl	r2, [r3, #0]
   d9620:	4b10      	ldr	r3, [pc, #64]	; (d9664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9622:	681a      	ldr	r2, [r3, #0]
   d9624:	07d2      	lsls	r2, r2, #31
   d9626:	bf5c      	itt	pl
   d9628:	2201      	movpl	r2, #1
   d962a:	601a      	strpl	r2, [r3, #0]
   d962c:	4b0e      	ldr	r3, [pc, #56]	; (d9668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d962e:	681a      	ldr	r2, [r3, #0]
   d9630:	07d0      	lsls	r0, r2, #31
   d9632:	bf5c      	itt	pl
   d9634:	2201      	movpl	r2, #1
   d9636:	601a      	strpl	r2, [r3, #0]
   d9638:	4b0c      	ldr	r3, [pc, #48]	; (d966c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d963a:	681a      	ldr	r2, [r3, #0]
   d963c:	07d1      	lsls	r1, r2, #31
   d963e:	bf5c      	itt	pl
   d9640:	2201      	movpl	r2, #1
   d9642:	601a      	strpl	r2, [r3, #0]
   d9644:	4b0a      	ldr	r3, [pc, #40]	; (d9670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9646:	681a      	ldr	r2, [r3, #0]
   d9648:	07d2      	lsls	r2, r2, #31
   d964a:	bf5c      	itt	pl
   d964c:	2201      	movpl	r2, #1
   d964e:	601a      	strpl	r2, [r3, #0]
   d9650:	4770      	bx	lr
   d9652:	bf00      	nop
   d9654:	2003e774 	.word	0x2003e774
   d9658:	2003e770 	.word	0x2003e770
   d965c:	2003e76c 	.word	0x2003e76c
   d9660:	2003e768 	.word	0x2003e768
   d9664:	2003e764 	.word	0x2003e764
   d9668:	2003e760 	.word	0x2003e760
   d966c:	2003e75c 	.word	0x2003e75c
   d9670:	2003e758 	.word	0x2003e758

000d9674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9674:	4b18      	ldr	r3, [pc, #96]	; (d96d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9676:	681a      	ldr	r2, [r3, #0]
   d9678:	07d1      	lsls	r1, r2, #31
   d967a:	bf5c      	itt	pl
   d967c:	2201      	movpl	r2, #1
   d967e:	601a      	strpl	r2, [r3, #0]
   d9680:	4b16      	ldr	r3, [pc, #88]	; (d96dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9682:	681a      	ldr	r2, [r3, #0]
   d9684:	07d2      	lsls	r2, r2, #31
   d9686:	bf5c      	itt	pl
   d9688:	2201      	movpl	r2, #1
   d968a:	601a      	strpl	r2, [r3, #0]
   d968c:	4b14      	ldr	r3, [pc, #80]	; (d96e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d968e:	681a      	ldr	r2, [r3, #0]
   d9690:	07d0      	lsls	r0, r2, #31
   d9692:	bf5c      	itt	pl
   d9694:	2201      	movpl	r2, #1
   d9696:	601a      	strpl	r2, [r3, #0]
   d9698:	4b12      	ldr	r3, [pc, #72]	; (d96e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d969a:	681a      	ldr	r2, [r3, #0]
   d969c:	07d1      	lsls	r1, r2, #31
   d969e:	bf5c      	itt	pl
   d96a0:	2201      	movpl	r2, #1
   d96a2:	601a      	strpl	r2, [r3, #0]
   d96a4:	4b10      	ldr	r3, [pc, #64]	; (d96e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d96a6:	681a      	ldr	r2, [r3, #0]
   d96a8:	07d2      	lsls	r2, r2, #31
   d96aa:	bf5c      	itt	pl
   d96ac:	2201      	movpl	r2, #1
   d96ae:	601a      	strpl	r2, [r3, #0]
   d96b0:	4b0e      	ldr	r3, [pc, #56]	; (d96ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d96b2:	681a      	ldr	r2, [r3, #0]
   d96b4:	07d0      	lsls	r0, r2, #31
   d96b6:	bf5c      	itt	pl
   d96b8:	2201      	movpl	r2, #1
   d96ba:	601a      	strpl	r2, [r3, #0]
   d96bc:	4b0c      	ldr	r3, [pc, #48]	; (d96f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d96be:	681a      	ldr	r2, [r3, #0]
   d96c0:	07d1      	lsls	r1, r2, #31
   d96c2:	bf5c      	itt	pl
   d96c4:	2201      	movpl	r2, #1
   d96c6:	601a      	strpl	r2, [r3, #0]
   d96c8:	4b0a      	ldr	r3, [pc, #40]	; (d96f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d96ca:	681a      	ldr	r2, [r3, #0]
   d96cc:	07d2      	lsls	r2, r2, #31
   d96ce:	bf5c      	itt	pl
   d96d0:	2201      	movpl	r2, #1
   d96d2:	601a      	strpl	r2, [r3, #0]
   d96d4:	4770      	bx	lr
   d96d6:	bf00      	nop
   d96d8:	2003e794 	.word	0x2003e794
   d96dc:	2003e790 	.word	0x2003e790
   d96e0:	2003e78c 	.word	0x2003e78c
   d96e4:	2003e788 	.word	0x2003e788
   d96e8:	2003e784 	.word	0x2003e784
   d96ec:	2003e780 	.word	0x2003e780
   d96f0:	2003e77c 	.word	0x2003e77c
   d96f4:	2003e778 	.word	0x2003e778

000d96f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d96f8:	4b24      	ldr	r3, [pc, #144]	; (d978c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d96fa:	681a      	ldr	r2, [r3, #0]
   d96fc:	07d0      	lsls	r0, r2, #31
   d96fe:	bf5c      	itt	pl
   d9700:	2201      	movpl	r2, #1
   d9702:	601a      	strpl	r2, [r3, #0]
   d9704:	4b22      	ldr	r3, [pc, #136]	; (d9790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9706:	681a      	ldr	r2, [r3, #0]
   d9708:	07d1      	lsls	r1, r2, #31
   d970a:	bf5c      	itt	pl
   d970c:	2201      	movpl	r2, #1
   d970e:	601a      	strpl	r2, [r3, #0]
   d9710:	4b20      	ldr	r3, [pc, #128]	; (d9794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9712:	681a      	ldr	r2, [r3, #0]
   d9714:	07d2      	lsls	r2, r2, #31
   d9716:	bf5c      	itt	pl
   d9718:	2201      	movpl	r2, #1
   d971a:	601a      	strpl	r2, [r3, #0]
   d971c:	4b1e      	ldr	r3, [pc, #120]	; (d9798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d971e:	681a      	ldr	r2, [r3, #0]
   d9720:	07d0      	lsls	r0, r2, #31
   d9722:	bf5c      	itt	pl
   d9724:	2201      	movpl	r2, #1
   d9726:	601a      	strpl	r2, [r3, #0]
   d9728:	4b1c      	ldr	r3, [pc, #112]	; (d979c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d972a:	681a      	ldr	r2, [r3, #0]
   d972c:	07d1      	lsls	r1, r2, #31
   d972e:	bf5c      	itt	pl
   d9730:	2201      	movpl	r2, #1
   d9732:	601a      	strpl	r2, [r3, #0]
   d9734:	4b1a      	ldr	r3, [pc, #104]	; (d97a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9736:	681a      	ldr	r2, [r3, #0]
   d9738:	07d2      	lsls	r2, r2, #31
   d973a:	bf5c      	itt	pl
   d973c:	2201      	movpl	r2, #1
   d973e:	601a      	strpl	r2, [r3, #0]
   d9740:	4b18      	ldr	r3, [pc, #96]	; (d97a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9742:	681a      	ldr	r2, [r3, #0]
   d9744:	07d0      	lsls	r0, r2, #31
   d9746:	bf5c      	itt	pl
   d9748:	2201      	movpl	r2, #1
   d974a:	601a      	strpl	r2, [r3, #0]
   d974c:	4b16      	ldr	r3, [pc, #88]	; (d97a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d974e:	681a      	ldr	r2, [r3, #0]
   d9750:	07d1      	lsls	r1, r2, #31
   d9752:	bf5c      	itt	pl
   d9754:	2201      	movpl	r2, #1
   d9756:	601a      	strpl	r2, [r3, #0]
   d9758:	4b14      	ldr	r3, [pc, #80]	; (d97ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d975a:	681a      	ldr	r2, [r3, #0]
   d975c:	07d2      	lsls	r2, r2, #31
   d975e:	bf5c      	itt	pl
   d9760:	2201      	movpl	r2, #1
   d9762:	601a      	strpl	r2, [r3, #0]
   d9764:	4b12      	ldr	r3, [pc, #72]	; (d97b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d9766:	681a      	ldr	r2, [r3, #0]
   d9768:	07d0      	lsls	r0, r2, #31
   d976a:	bf5c      	itt	pl
   d976c:	2201      	movpl	r2, #1
   d976e:	601a      	strpl	r2, [r3, #0]
   d9770:	4b10      	ldr	r3, [pc, #64]	; (d97b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9772:	681a      	ldr	r2, [r3, #0]
   d9774:	07d1      	lsls	r1, r2, #31
   d9776:	bf5c      	itt	pl
   d9778:	2201      	movpl	r2, #1
   d977a:	601a      	strpl	r2, [r3, #0]
   d977c:	4b0e      	ldr	r3, [pc, #56]	; (d97b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d977e:	681a      	ldr	r2, [r3, #0]
   d9780:	07d2      	lsls	r2, r2, #31
   d9782:	bf5c      	itt	pl
   d9784:	2201      	movpl	r2, #1
   d9786:	601a      	strpl	r2, [r3, #0]
   d9788:	4770      	bx	lr
   d978a:	bf00      	nop
   d978c:	2003e7c4 	.word	0x2003e7c4
   d9790:	2003e7c0 	.word	0x2003e7c0
   d9794:	2003e7bc 	.word	0x2003e7bc
   d9798:	2003e7b8 	.word	0x2003e7b8
   d979c:	2003e7b4 	.word	0x2003e7b4
   d97a0:	2003e7b0 	.word	0x2003e7b0
   d97a4:	2003e7ac 	.word	0x2003e7ac
   d97a8:	2003e7a8 	.word	0x2003e7a8
   d97ac:	2003e7a4 	.word	0x2003e7a4
   d97b0:	2003e7a0 	.word	0x2003e7a0
   d97b4:	2003e79c 	.word	0x2003e79c
   d97b8:	2003e798 	.word	0x2003e798

000d97bc <atoi>:
   d97bc:	220a      	movs	r2, #10
   d97be:	2100      	movs	r1, #0
   d97c0:	f000 ba50 	b.w	d9c64 <strtol>

000d97c4 <__cxa_atexit>:
   d97c4:	b510      	push	{r4, lr}
   d97c6:	4c05      	ldr	r4, [pc, #20]	; (d97dc <__cxa_atexit+0x18>)
   d97c8:	4613      	mov	r3, r2
   d97ca:	b12c      	cbz	r4, d97d8 <__cxa_atexit+0x14>
   d97cc:	460a      	mov	r2, r1
   d97ce:	4601      	mov	r1, r0
   d97d0:	2002      	movs	r0, #2
   d97d2:	f3af 8000 	nop.w
   d97d6:	bd10      	pop	{r4, pc}
   d97d8:	4620      	mov	r0, r4
   d97da:	bd10      	pop	{r4, pc}
   d97dc:	00000000 	.word	0x00000000

000d97e0 <localtime>:
   d97e0:	b538      	push	{r3, r4, r5, lr}
   d97e2:	4b07      	ldr	r3, [pc, #28]	; (d9800 <localtime+0x20>)
   d97e4:	681c      	ldr	r4, [r3, #0]
   d97e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d97e8:	4605      	mov	r5, r0
   d97ea:	b91b      	cbnz	r3, d97f4 <localtime+0x14>
   d97ec:	2024      	movs	r0, #36	; 0x24
   d97ee:	f7fd fa9f 	bl	d6d30 <malloc>
   d97f2:	63e0      	str	r0, [r4, #60]	; 0x3c
   d97f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d97f6:	4628      	mov	r0, r5
   d97f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d97fc:	f000 b802 	b.w	d9804 <localtime_r>
   d9800:	2003d634 	.word	0x2003d634

000d9804 <localtime_r>:
   d9804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9808:	460c      	mov	r4, r1
   d980a:	4680      	mov	r8, r0
   d980c:	f000 fd30 	bl	da270 <__gettzinfo>
   d9810:	4621      	mov	r1, r4
   d9812:	4607      	mov	r7, r0
   d9814:	4640      	mov	r0, r8
   d9816:	f000 fd2f 	bl	da278 <gmtime_r>
   d981a:	6946      	ldr	r6, [r0, #20]
   d981c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9820:	07b3      	lsls	r3, r6, #30
   d9822:	4604      	mov	r4, r0
   d9824:	d105      	bne.n	d9832 <localtime_r+0x2e>
   d9826:	2264      	movs	r2, #100	; 0x64
   d9828:	fb96 f3f2 	sdiv	r3, r6, r2
   d982c:	fb02 6313 	mls	r3, r2, r3, r6
   d9830:	b94b      	cbnz	r3, d9846 <localtime_r+0x42>
   d9832:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9836:	fb96 f3f5 	sdiv	r3, r6, r5
   d983a:	fb05 6513 	mls	r5, r5, r3, r6
   d983e:	fab5 f385 	clz	r3, r5
   d9842:	095b      	lsrs	r3, r3, #5
   d9844:	e000      	b.n	d9848 <localtime_r+0x44>
   d9846:	2301      	movs	r3, #1
   d9848:	4a5f      	ldr	r2, [pc, #380]	; (d99c8 <localtime_r+0x1c4>)
   d984a:	2530      	movs	r5, #48	; 0x30
   d984c:	fb05 2503 	mla	r5, r5, r3, r2
   d9850:	f000 fb42 	bl	d9ed8 <__tz_lock>
   d9854:	f000 fb42 	bl	d9edc <_tzset_unlocked>
   d9858:	4b5c      	ldr	r3, [pc, #368]	; (d99cc <localtime_r+0x1c8>)
   d985a:	681b      	ldr	r3, [r3, #0]
   d985c:	b1f3      	cbz	r3, d989c <localtime_r+0x98>
   d985e:	687b      	ldr	r3, [r7, #4]
   d9860:	429e      	cmp	r6, r3
   d9862:	d105      	bne.n	d9870 <localtime_r+0x6c>
   d9864:	6839      	ldr	r1, [r7, #0]
   d9866:	f8d8 3000 	ldr.w	r3, [r8]
   d986a:	69fa      	ldr	r2, [r7, #28]
   d986c:	b941      	cbnz	r1, d9880 <localtime_r+0x7c>
   d986e:	e00a      	b.n	d9886 <localtime_r+0x82>
   d9870:	4630      	mov	r0, r6
   d9872:	f000 fa89 	bl	d9d88 <__tzcalc_limits>
   d9876:	2800      	cmp	r0, #0
   d9878:	d1f4      	bne.n	d9864 <localtime_r+0x60>
   d987a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d987e:	e00d      	b.n	d989c <localtime_r+0x98>
   d9880:	4293      	cmp	r3, r2
   d9882:	db08      	blt.n	d9896 <localtime_r+0x92>
   d9884:	e001      	b.n	d988a <localtime_r+0x86>
   d9886:	4293      	cmp	r3, r2
   d9888:	da07      	bge.n	d989a <localtime_r+0x96>
   d988a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d988c:	4293      	cmp	r3, r2
   d988e:	bfac      	ite	ge
   d9890:	2300      	movge	r3, #0
   d9892:	2301      	movlt	r3, #1
   d9894:	e002      	b.n	d989c <localtime_r+0x98>
   d9896:	2300      	movs	r3, #0
   d9898:	e000      	b.n	d989c <localtime_r+0x98>
   d989a:	2301      	movs	r3, #1
   d989c:	6223      	str	r3, [r4, #32]
   d989e:	6a23      	ldr	r3, [r4, #32]
   d98a0:	2b01      	cmp	r3, #1
   d98a2:	bf0c      	ite	eq
   d98a4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d98a6:	6a39      	ldrne	r1, [r7, #32]
   d98a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d98ac:	203c      	movs	r0, #60	; 0x3c
   d98ae:	fb91 f6f3 	sdiv	r6, r1, r3
   d98b2:	fb03 1316 	mls	r3, r3, r6, r1
   d98b6:	6861      	ldr	r1, [r4, #4]
   d98b8:	fb93 f2f0 	sdiv	r2, r3, r0
   d98bc:	fb00 3012 	mls	r0, r0, r2, r3
   d98c0:	6823      	ldr	r3, [r4, #0]
   d98c2:	1a89      	subs	r1, r1, r2
   d98c4:	68a2      	ldr	r2, [r4, #8]
   d98c6:	6061      	str	r1, [r4, #4]
   d98c8:	1a1b      	subs	r3, r3, r0
   d98ca:	1b92      	subs	r2, r2, r6
   d98cc:	2b3b      	cmp	r3, #59	; 0x3b
   d98ce:	6023      	str	r3, [r4, #0]
   d98d0:	60a2      	str	r2, [r4, #8]
   d98d2:	dd03      	ble.n	d98dc <localtime_r+0xd8>
   d98d4:	3101      	adds	r1, #1
   d98d6:	6061      	str	r1, [r4, #4]
   d98d8:	3b3c      	subs	r3, #60	; 0x3c
   d98da:	e004      	b.n	d98e6 <localtime_r+0xe2>
   d98dc:	2b00      	cmp	r3, #0
   d98de:	da03      	bge.n	d98e8 <localtime_r+0xe4>
   d98e0:	3901      	subs	r1, #1
   d98e2:	6061      	str	r1, [r4, #4]
   d98e4:	333c      	adds	r3, #60	; 0x3c
   d98e6:	6023      	str	r3, [r4, #0]
   d98e8:	6863      	ldr	r3, [r4, #4]
   d98ea:	2b3b      	cmp	r3, #59	; 0x3b
   d98ec:	dd03      	ble.n	d98f6 <localtime_r+0xf2>
   d98ee:	3201      	adds	r2, #1
   d98f0:	60a2      	str	r2, [r4, #8]
   d98f2:	3b3c      	subs	r3, #60	; 0x3c
   d98f4:	e004      	b.n	d9900 <localtime_r+0xfc>
   d98f6:	2b00      	cmp	r3, #0
   d98f8:	da03      	bge.n	d9902 <localtime_r+0xfe>
   d98fa:	3a01      	subs	r2, #1
   d98fc:	60a2      	str	r2, [r4, #8]
   d98fe:	333c      	adds	r3, #60	; 0x3c
   d9900:	6063      	str	r3, [r4, #4]
   d9902:	68a3      	ldr	r3, [r4, #8]
   d9904:	2b17      	cmp	r3, #23
   d9906:	dd22      	ble.n	d994e <localtime_r+0x14a>
   d9908:	69e2      	ldr	r2, [r4, #28]
   d990a:	3201      	adds	r2, #1
   d990c:	61e2      	str	r2, [r4, #28]
   d990e:	69a2      	ldr	r2, [r4, #24]
   d9910:	3201      	adds	r2, #1
   d9912:	2a06      	cmp	r2, #6
   d9914:	bfc8      	it	gt
   d9916:	2200      	movgt	r2, #0
   d9918:	61a2      	str	r2, [r4, #24]
   d991a:	68e2      	ldr	r2, [r4, #12]
   d991c:	3b18      	subs	r3, #24
   d991e:	3201      	adds	r2, #1
   d9920:	60a3      	str	r3, [r4, #8]
   d9922:	6923      	ldr	r3, [r4, #16]
   d9924:	60e2      	str	r2, [r4, #12]
   d9926:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d992a:	428a      	cmp	r2, r1
   d992c:	dd46      	ble.n	d99bc <localtime_r+0x1b8>
   d992e:	3301      	adds	r3, #1
   d9930:	2b0c      	cmp	r3, #12
   d9932:	bf0c      	ite	eq
   d9934:	6963      	ldreq	r3, [r4, #20]
   d9936:	6123      	strne	r3, [r4, #16]
   d9938:	eba2 0201 	sub.w	r2, r2, r1
   d993c:	60e2      	str	r2, [r4, #12]
   d993e:	bf01      	itttt	eq
   d9940:	3301      	addeq	r3, #1
   d9942:	2200      	moveq	r2, #0
   d9944:	6122      	streq	r2, [r4, #16]
   d9946:	6163      	streq	r3, [r4, #20]
   d9948:	bf08      	it	eq
   d994a:	61e2      	streq	r2, [r4, #28]
   d994c:	e036      	b.n	d99bc <localtime_r+0x1b8>
   d994e:	2b00      	cmp	r3, #0
   d9950:	da34      	bge.n	d99bc <localtime_r+0x1b8>
   d9952:	69e2      	ldr	r2, [r4, #28]
   d9954:	3a01      	subs	r2, #1
   d9956:	61e2      	str	r2, [r4, #28]
   d9958:	69a2      	ldr	r2, [r4, #24]
   d995a:	3a01      	subs	r2, #1
   d995c:	bf48      	it	mi
   d995e:	2206      	movmi	r2, #6
   d9960:	61a2      	str	r2, [r4, #24]
   d9962:	68e2      	ldr	r2, [r4, #12]
   d9964:	3318      	adds	r3, #24
   d9966:	3a01      	subs	r2, #1
   d9968:	60e2      	str	r2, [r4, #12]
   d996a:	60a3      	str	r3, [r4, #8]
   d996c:	bb32      	cbnz	r2, d99bc <localtime_r+0x1b8>
   d996e:	6923      	ldr	r3, [r4, #16]
   d9970:	3b01      	subs	r3, #1
   d9972:	d401      	bmi.n	d9978 <localtime_r+0x174>
   d9974:	6123      	str	r3, [r4, #16]
   d9976:	e01d      	b.n	d99b4 <localtime_r+0x1b0>
   d9978:	230b      	movs	r3, #11
   d997a:	6123      	str	r3, [r4, #16]
   d997c:	6963      	ldr	r3, [r4, #20]
   d997e:	1e5a      	subs	r2, r3, #1
   d9980:	f012 0f03 	tst.w	r2, #3
   d9984:	6162      	str	r2, [r4, #20]
   d9986:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d998a:	d105      	bne.n	d9998 <localtime_r+0x194>
   d998c:	2164      	movs	r1, #100	; 0x64
   d998e:	fb93 f2f1 	sdiv	r2, r3, r1
   d9992:	fb01 3212 	mls	r2, r1, r2, r3
   d9996:	b94a      	cbnz	r2, d99ac <localtime_r+0x1a8>
   d9998:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d999c:	fb93 f2f1 	sdiv	r2, r3, r1
   d99a0:	fb01 3312 	mls	r3, r1, r2, r3
   d99a4:	fab3 f383 	clz	r3, r3
   d99a8:	095b      	lsrs	r3, r3, #5
   d99aa:	e000      	b.n	d99ae <localtime_r+0x1aa>
   d99ac:	2301      	movs	r3, #1
   d99ae:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d99b2:	61e3      	str	r3, [r4, #28]
   d99b4:	6923      	ldr	r3, [r4, #16]
   d99b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d99ba:	60e3      	str	r3, [r4, #12]
   d99bc:	f000 fa8d 	bl	d9eda <__tz_unlock>
   d99c0:	4620      	mov	r0, r4
   d99c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d99c6:	bf00      	nop
   d99c8:	000daf10 	.word	0x000daf10
   d99cc:	2003e7e4 	.word	0x2003e7e4

000d99d0 <memcmp>:
   d99d0:	b510      	push	{r4, lr}
   d99d2:	3901      	subs	r1, #1
   d99d4:	4402      	add	r2, r0
   d99d6:	4290      	cmp	r0, r2
   d99d8:	d007      	beq.n	d99ea <memcmp+0x1a>
   d99da:	f810 3b01 	ldrb.w	r3, [r0], #1
   d99de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d99e2:	42a3      	cmp	r3, r4
   d99e4:	d0f7      	beq.n	d99d6 <memcmp+0x6>
   d99e6:	1b18      	subs	r0, r3, r4
   d99e8:	bd10      	pop	{r4, pc}
   d99ea:	2000      	movs	r0, #0
   d99ec:	bd10      	pop	{r4, pc}

000d99ee <memcpy>:
   d99ee:	b510      	push	{r4, lr}
   d99f0:	1e43      	subs	r3, r0, #1
   d99f2:	440a      	add	r2, r1
   d99f4:	4291      	cmp	r1, r2
   d99f6:	d004      	beq.n	d9a02 <memcpy+0x14>
   d99f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d99fc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9a00:	e7f8      	b.n	d99f4 <memcpy+0x6>
   d9a02:	bd10      	pop	{r4, pc}

000d9a04 <memmove>:
   d9a04:	4288      	cmp	r0, r1
   d9a06:	b510      	push	{r4, lr}
   d9a08:	eb01 0302 	add.w	r3, r1, r2
   d9a0c:	d801      	bhi.n	d9a12 <memmove+0xe>
   d9a0e:	1e42      	subs	r2, r0, #1
   d9a10:	e00b      	b.n	d9a2a <memmove+0x26>
   d9a12:	4298      	cmp	r0, r3
   d9a14:	d2fb      	bcs.n	d9a0e <memmove+0xa>
   d9a16:	1881      	adds	r1, r0, r2
   d9a18:	1ad2      	subs	r2, r2, r3
   d9a1a:	42d3      	cmn	r3, r2
   d9a1c:	d004      	beq.n	d9a28 <memmove+0x24>
   d9a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9a22:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9a26:	e7f8      	b.n	d9a1a <memmove+0x16>
   d9a28:	bd10      	pop	{r4, pc}
   d9a2a:	4299      	cmp	r1, r3
   d9a2c:	d004      	beq.n	d9a38 <memmove+0x34>
   d9a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9a32:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9a36:	e7f8      	b.n	d9a2a <memmove+0x26>
   d9a38:	bd10      	pop	{r4, pc}

000d9a3a <memset>:
   d9a3a:	4402      	add	r2, r0
   d9a3c:	4603      	mov	r3, r0
   d9a3e:	4293      	cmp	r3, r2
   d9a40:	d002      	beq.n	d9a48 <memset+0xe>
   d9a42:	f803 1b01 	strb.w	r1, [r3], #1
   d9a46:	e7fa      	b.n	d9a3e <memset+0x4>
   d9a48:	4770      	bx	lr
	...

000d9a4c <srand>:
   d9a4c:	b538      	push	{r3, r4, r5, lr}
   d9a4e:	4b12      	ldr	r3, [pc, #72]	; (d9a98 <srand+0x4c>)
   d9a50:	681c      	ldr	r4, [r3, #0]
   d9a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9a54:	4605      	mov	r5, r0
   d9a56:	b9d3      	cbnz	r3, d9a8e <srand+0x42>
   d9a58:	2018      	movs	r0, #24
   d9a5a:	f7fd f969 	bl	d6d30 <malloc>
   d9a5e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9a62:	63a0      	str	r0, [r4, #56]	; 0x38
   d9a64:	8003      	strh	r3, [r0, #0]
   d9a66:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9a6a:	8043      	strh	r3, [r0, #2]
   d9a6c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9a70:	8083      	strh	r3, [r0, #4]
   d9a72:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9a76:	80c3      	strh	r3, [r0, #6]
   d9a78:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9a7c:	8103      	strh	r3, [r0, #8]
   d9a7e:	2305      	movs	r3, #5
   d9a80:	8143      	strh	r3, [r0, #10]
   d9a82:	230b      	movs	r3, #11
   d9a84:	8183      	strh	r3, [r0, #12]
   d9a86:	2201      	movs	r2, #1
   d9a88:	2300      	movs	r3, #0
   d9a8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9a90:	2200      	movs	r2, #0
   d9a92:	611d      	str	r5, [r3, #16]
   d9a94:	615a      	str	r2, [r3, #20]
   d9a96:	bd38      	pop	{r3, r4, r5, pc}
   d9a98:	2003d634 	.word	0x2003d634

000d9a9c <strcat>:
   d9a9c:	b510      	push	{r4, lr}
   d9a9e:	4602      	mov	r2, r0
   d9aa0:	4613      	mov	r3, r2
   d9aa2:	3201      	adds	r2, #1
   d9aa4:	781c      	ldrb	r4, [r3, #0]
   d9aa6:	2c00      	cmp	r4, #0
   d9aa8:	d1fa      	bne.n	d9aa0 <strcat+0x4>
   d9aaa:	3b01      	subs	r3, #1
   d9aac:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9ab0:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9ab4:	2a00      	cmp	r2, #0
   d9ab6:	d1f9      	bne.n	d9aac <strcat+0x10>
   d9ab8:	bd10      	pop	{r4, pc}

000d9aba <strcmp>:
   d9aba:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9abe:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9ac2:	2a01      	cmp	r2, #1
   d9ac4:	bf28      	it	cs
   d9ac6:	429a      	cmpcs	r2, r3
   d9ac8:	d0f7      	beq.n	d9aba <strcmp>
   d9aca:	1ad0      	subs	r0, r2, r3
   d9acc:	4770      	bx	lr

000d9ace <strcpy>:
   d9ace:	4603      	mov	r3, r0
   d9ad0:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9ad4:	f803 2b01 	strb.w	r2, [r3], #1
   d9ad8:	2a00      	cmp	r2, #0
   d9ada:	d1f9      	bne.n	d9ad0 <strcpy+0x2>
   d9adc:	4770      	bx	lr

000d9ade <strlen>:
   d9ade:	4603      	mov	r3, r0
   d9ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9ae4:	2a00      	cmp	r2, #0
   d9ae6:	d1fb      	bne.n	d9ae0 <strlen+0x2>
   d9ae8:	1a18      	subs	r0, r3, r0
   d9aea:	3801      	subs	r0, #1
   d9aec:	4770      	bx	lr

000d9aee <strncmp>:
   d9aee:	b530      	push	{r4, r5, lr}
   d9af0:	b182      	cbz	r2, d9b14 <strncmp+0x26>
   d9af2:	1e45      	subs	r5, r0, #1
   d9af4:	3901      	subs	r1, #1
   d9af6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9afa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9afe:	42a3      	cmp	r3, r4
   d9b00:	d106      	bne.n	d9b10 <strncmp+0x22>
   d9b02:	43ec      	mvns	r4, r5
   d9b04:	4414      	add	r4, r2
   d9b06:	42e0      	cmn	r0, r4
   d9b08:	d001      	beq.n	d9b0e <strncmp+0x20>
   d9b0a:	2b00      	cmp	r3, #0
   d9b0c:	d1f3      	bne.n	d9af6 <strncmp+0x8>
   d9b0e:	461c      	mov	r4, r3
   d9b10:	1b18      	subs	r0, r3, r4
   d9b12:	bd30      	pop	{r4, r5, pc}
   d9b14:	4610      	mov	r0, r2
   d9b16:	bd30      	pop	{r4, r5, pc}

000d9b18 <strncpy>:
   d9b18:	b510      	push	{r4, lr}
   d9b1a:	4603      	mov	r3, r0
   d9b1c:	b142      	cbz	r2, d9b30 <strncpy+0x18>
   d9b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9b22:	f803 4b01 	strb.w	r4, [r3], #1
   d9b26:	3a01      	subs	r2, #1
   d9b28:	2c00      	cmp	r4, #0
   d9b2a:	d1f7      	bne.n	d9b1c <strncpy+0x4>
   d9b2c:	441a      	add	r2, r3
   d9b2e:	e000      	b.n	d9b32 <strncpy+0x1a>
   d9b30:	bd10      	pop	{r4, pc}
   d9b32:	4293      	cmp	r3, r2
   d9b34:	d002      	beq.n	d9b3c <strncpy+0x24>
   d9b36:	f803 4b01 	strb.w	r4, [r3], #1
   d9b3a:	e7fa      	b.n	d9b32 <strncpy+0x1a>
   d9b3c:	bd10      	pop	{r4, pc}

000d9b3e <strnlen>:
   d9b3e:	b510      	push	{r4, lr}
   d9b40:	4603      	mov	r3, r0
   d9b42:	4401      	add	r1, r0
   d9b44:	428b      	cmp	r3, r1
   d9b46:	d004      	beq.n	d9b52 <strnlen+0x14>
   d9b48:	781a      	ldrb	r2, [r3, #0]
   d9b4a:	1c5c      	adds	r4, r3, #1
   d9b4c:	b10a      	cbz	r2, d9b52 <strnlen+0x14>
   d9b4e:	4623      	mov	r3, r4
   d9b50:	e7f8      	b.n	d9b44 <strnlen+0x6>
   d9b52:	1a18      	subs	r0, r3, r0
   d9b54:	bd10      	pop	{r4, pc}
	...

000d9b58 <_strtol_r>:
   d9b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9b5c:	4680      	mov	r8, r0
   d9b5e:	4840      	ldr	r0, [pc, #256]	; (d9c60 <_strtol_r+0x108>)
   d9b60:	f8d0 9000 	ldr.w	r9, [r0]
   d9b64:	460f      	mov	r7, r1
   d9b66:	463d      	mov	r5, r7
   d9b68:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9b6c:	eb09 0004 	add.w	r0, r9, r4
   d9b70:	7840      	ldrb	r0, [r0, #1]
   d9b72:	f000 0008 	and.w	r0, r0, #8
   d9b76:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d9b7a:	b108      	cbz	r0, d9b80 <_strtol_r+0x28>
   d9b7c:	462f      	mov	r7, r5
   d9b7e:	e7f2      	b.n	d9b66 <_strtol_r+0xe>
   d9b80:	2c2d      	cmp	r4, #45	; 0x2d
   d9b82:	d103      	bne.n	d9b8c <_strtol_r+0x34>
   d9b84:	1cbd      	adds	r5, r7, #2
   d9b86:	787c      	ldrb	r4, [r7, #1]
   d9b88:	2601      	movs	r6, #1
   d9b8a:	e003      	b.n	d9b94 <_strtol_r+0x3c>
   d9b8c:	2c2b      	cmp	r4, #43	; 0x2b
   d9b8e:	bf04      	itt	eq
   d9b90:	787c      	ldrbeq	r4, [r7, #1]
   d9b92:	1cbd      	addeq	r5, r7, #2
   d9b94:	b113      	cbz	r3, d9b9c <_strtol_r+0x44>
   d9b96:	2b10      	cmp	r3, #16
   d9b98:	d10a      	bne.n	d9bb0 <_strtol_r+0x58>
   d9b9a:	e05b      	b.n	d9c54 <_strtol_r+0xfc>
   d9b9c:	2c30      	cmp	r4, #48	; 0x30
   d9b9e:	d157      	bne.n	d9c50 <_strtol_r+0xf8>
   d9ba0:	7828      	ldrb	r0, [r5, #0]
   d9ba2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9ba6:	2858      	cmp	r0, #88	; 0x58
   d9ba8:	d14d      	bne.n	d9c46 <_strtol_r+0xee>
   d9baa:	786c      	ldrb	r4, [r5, #1]
   d9bac:	2310      	movs	r3, #16
   d9bae:	3502      	adds	r5, #2
   d9bb0:	2e00      	cmp	r6, #0
   d9bb2:	bf14      	ite	ne
   d9bb4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9bb8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9bbc:	2700      	movs	r7, #0
   d9bbe:	fbbc faf3 	udiv	sl, ip, r3
   d9bc2:	4638      	mov	r0, r7
   d9bc4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9bc8:	eb09 0e04 	add.w	lr, r9, r4
   d9bcc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9bd0:	f01e 0f04 	tst.w	lr, #4
   d9bd4:	d001      	beq.n	d9bda <_strtol_r+0x82>
   d9bd6:	3c30      	subs	r4, #48	; 0x30
   d9bd8:	e00b      	b.n	d9bf2 <_strtol_r+0x9a>
   d9bda:	f01e 0e03 	ands.w	lr, lr, #3
   d9bde:	d01b      	beq.n	d9c18 <_strtol_r+0xc0>
   d9be0:	f1be 0f01 	cmp.w	lr, #1
   d9be4:	bf0c      	ite	eq
   d9be6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9bea:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9bee:	ebce 0404 	rsb	r4, lr, r4
   d9bf2:	42a3      	cmp	r3, r4
   d9bf4:	dd10      	ble.n	d9c18 <_strtol_r+0xc0>
   d9bf6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d9bfa:	d00a      	beq.n	d9c12 <_strtol_r+0xba>
   d9bfc:	4550      	cmp	r0, sl
   d9bfe:	d806      	bhi.n	d9c0e <_strtol_r+0xb6>
   d9c00:	d101      	bne.n	d9c06 <_strtol_r+0xae>
   d9c02:	4564      	cmp	r4, ip
   d9c04:	dc03      	bgt.n	d9c0e <_strtol_r+0xb6>
   d9c06:	fb03 4000 	mla	r0, r3, r0, r4
   d9c0a:	2701      	movs	r7, #1
   d9c0c:	e001      	b.n	d9c12 <_strtol_r+0xba>
   d9c0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9c12:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9c16:	e7d7      	b.n	d9bc8 <_strtol_r+0x70>
   d9c18:	1c7b      	adds	r3, r7, #1
   d9c1a:	d10c      	bne.n	d9c36 <_strtol_r+0xde>
   d9c1c:	2e00      	cmp	r6, #0
   d9c1e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9c22:	bf14      	ite	ne
   d9c24:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9c28:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9c2c:	f8c8 3000 	str.w	r3, [r8]
   d9c30:	b92a      	cbnz	r2, d9c3e <_strtol_r+0xe6>
   d9c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9c36:	b106      	cbz	r6, d9c3a <_strtol_r+0xe2>
   d9c38:	4240      	negs	r0, r0
   d9c3a:	b172      	cbz	r2, d9c5a <_strtol_r+0x102>
   d9c3c:	b107      	cbz	r7, d9c40 <_strtol_r+0xe8>
   d9c3e:	1e69      	subs	r1, r5, #1
   d9c40:	6011      	str	r1, [r2, #0]
   d9c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9c46:	2430      	movs	r4, #48	; 0x30
   d9c48:	2b00      	cmp	r3, #0
   d9c4a:	d1b1      	bne.n	d9bb0 <_strtol_r+0x58>
   d9c4c:	2308      	movs	r3, #8
   d9c4e:	e7af      	b.n	d9bb0 <_strtol_r+0x58>
   d9c50:	230a      	movs	r3, #10
   d9c52:	e7ad      	b.n	d9bb0 <_strtol_r+0x58>
   d9c54:	2c30      	cmp	r4, #48	; 0x30
   d9c56:	d0a3      	beq.n	d9ba0 <_strtol_r+0x48>
   d9c58:	e7aa      	b.n	d9bb0 <_strtol_r+0x58>
   d9c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9c5e:	bf00      	nop
   d9c60:	2003d5d0 	.word	0x2003d5d0

000d9c64 <strtol>:
   d9c64:	4613      	mov	r3, r2
   d9c66:	460a      	mov	r2, r1
   d9c68:	4601      	mov	r1, r0
   d9c6a:	4802      	ldr	r0, [pc, #8]	; (d9c74 <strtol+0x10>)
   d9c6c:	6800      	ldr	r0, [r0, #0]
   d9c6e:	f7ff bf73 	b.w	d9b58 <_strtol_r>
   d9c72:	bf00      	nop
   d9c74:	2003d634 	.word	0x2003d634

000d9c78 <_strtoul_r>:
   d9c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9c7c:	4680      	mov	r8, r0
   d9c7e:	483c      	ldr	r0, [pc, #240]	; (d9d70 <_strtoul_r+0xf8>)
   d9c80:	f8d0 9000 	ldr.w	r9, [r0]
   d9c84:	460e      	mov	r6, r1
   d9c86:	4635      	mov	r5, r6
   d9c88:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9c8c:	eb09 0004 	add.w	r0, r9, r4
   d9c90:	7840      	ldrb	r0, [r0, #1]
   d9c92:	f000 0008 	and.w	r0, r0, #8
   d9c96:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d9c9a:	b108      	cbz	r0, d9ca0 <_strtoul_r+0x28>
   d9c9c:	462e      	mov	r6, r5
   d9c9e:	e7f2      	b.n	d9c86 <_strtoul_r+0xe>
   d9ca0:	2c2d      	cmp	r4, #45	; 0x2d
   d9ca2:	d103      	bne.n	d9cac <_strtoul_r+0x34>
   d9ca4:	1cb5      	adds	r5, r6, #2
   d9ca6:	7874      	ldrb	r4, [r6, #1]
   d9ca8:	2701      	movs	r7, #1
   d9caa:	e003      	b.n	d9cb4 <_strtoul_r+0x3c>
   d9cac:	2c2b      	cmp	r4, #43	; 0x2b
   d9cae:	bf04      	itt	eq
   d9cb0:	7874      	ldrbeq	r4, [r6, #1]
   d9cb2:	1cb5      	addeq	r5, r6, #2
   d9cb4:	b113      	cbz	r3, d9cbc <_strtoul_r+0x44>
   d9cb6:	2b10      	cmp	r3, #16
   d9cb8:	d10a      	bne.n	d9cd0 <_strtoul_r+0x58>
   d9cba:	e053      	b.n	d9d64 <_strtoul_r+0xec>
   d9cbc:	2c30      	cmp	r4, #48	; 0x30
   d9cbe:	d14f      	bne.n	d9d60 <_strtoul_r+0xe8>
   d9cc0:	7828      	ldrb	r0, [r5, #0]
   d9cc2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9cc6:	2858      	cmp	r0, #88	; 0x58
   d9cc8:	d145      	bne.n	d9d56 <_strtoul_r+0xde>
   d9cca:	786c      	ldrb	r4, [r5, #1]
   d9ccc:	2310      	movs	r3, #16
   d9cce:	3502      	adds	r5, #2
   d9cd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9cd4:	2600      	movs	r6, #0
   d9cd6:	fbbc fcf3 	udiv	ip, ip, r3
   d9cda:	fb03 fa0c 	mul.w	sl, r3, ip
   d9cde:	ea6f 0a0a 	mvn.w	sl, sl
   d9ce2:	4630      	mov	r0, r6
   d9ce4:	eb09 0e04 	add.w	lr, r9, r4
   d9ce8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9cec:	f01e 0f04 	tst.w	lr, #4
   d9cf0:	d001      	beq.n	d9cf6 <_strtoul_r+0x7e>
   d9cf2:	3c30      	subs	r4, #48	; 0x30
   d9cf4:	e00b      	b.n	d9d0e <_strtoul_r+0x96>
   d9cf6:	f01e 0e03 	ands.w	lr, lr, #3
   d9cfa:	d01a      	beq.n	d9d32 <_strtoul_r+0xba>
   d9cfc:	f1be 0f01 	cmp.w	lr, #1
   d9d00:	bf0c      	ite	eq
   d9d02:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9d06:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9d0a:	ebce 0404 	rsb	r4, lr, r4
   d9d0e:	42a3      	cmp	r3, r4
   d9d10:	dd0f      	ble.n	d9d32 <_strtoul_r+0xba>
   d9d12:	2e00      	cmp	r6, #0
   d9d14:	db08      	blt.n	d9d28 <_strtoul_r+0xb0>
   d9d16:	4560      	cmp	r0, ip
   d9d18:	d806      	bhi.n	d9d28 <_strtoul_r+0xb0>
   d9d1a:	d101      	bne.n	d9d20 <_strtoul_r+0xa8>
   d9d1c:	4554      	cmp	r4, sl
   d9d1e:	dc03      	bgt.n	d9d28 <_strtoul_r+0xb0>
   d9d20:	fb03 4000 	mla	r0, r3, r0, r4
   d9d24:	2601      	movs	r6, #1
   d9d26:	e001      	b.n	d9d2c <_strtoul_r+0xb4>
   d9d28:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9d30:	e7d8      	b.n	d9ce4 <_strtoul_r+0x6c>
   d9d32:	2e00      	cmp	r6, #0
   d9d34:	da07      	bge.n	d9d46 <_strtoul_r+0xce>
   d9d36:	2322      	movs	r3, #34	; 0x22
   d9d38:	f8c8 3000 	str.w	r3, [r8]
   d9d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9d40:	b92a      	cbnz	r2, d9d4e <_strtoul_r+0xd6>
   d9d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d46:	b107      	cbz	r7, d9d4a <_strtoul_r+0xd2>
   d9d48:	4240      	negs	r0, r0
   d9d4a:	b172      	cbz	r2, d9d6a <_strtoul_r+0xf2>
   d9d4c:	b106      	cbz	r6, d9d50 <_strtoul_r+0xd8>
   d9d4e:	1e69      	subs	r1, r5, #1
   d9d50:	6011      	str	r1, [r2, #0]
   d9d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d56:	2430      	movs	r4, #48	; 0x30
   d9d58:	2b00      	cmp	r3, #0
   d9d5a:	d1b9      	bne.n	d9cd0 <_strtoul_r+0x58>
   d9d5c:	2308      	movs	r3, #8
   d9d5e:	e7b7      	b.n	d9cd0 <_strtoul_r+0x58>
   d9d60:	230a      	movs	r3, #10
   d9d62:	e7b5      	b.n	d9cd0 <_strtoul_r+0x58>
   d9d64:	2c30      	cmp	r4, #48	; 0x30
   d9d66:	d0ab      	beq.n	d9cc0 <_strtoul_r+0x48>
   d9d68:	e7b2      	b.n	d9cd0 <_strtoul_r+0x58>
   d9d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d6e:	bf00      	nop
   d9d70:	2003d5d0 	.word	0x2003d5d0

000d9d74 <strtoul>:
   d9d74:	4613      	mov	r3, r2
   d9d76:	460a      	mov	r2, r1
   d9d78:	4601      	mov	r1, r0
   d9d7a:	4802      	ldr	r0, [pc, #8]	; (d9d84 <strtoul+0x10>)
   d9d7c:	6800      	ldr	r0, [r0, #0]
   d9d7e:	f7ff bf7b 	b.w	d9c78 <_strtoul_r>
   d9d82:	bf00      	nop
   d9d84:	2003d634 	.word	0x2003d634

000d9d88 <__tzcalc_limits>:
   d9d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d8c:	4604      	mov	r4, r0
   d9d8e:	f000 fa6f 	bl	da270 <__gettzinfo>
   d9d92:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d9d96:	429c      	cmp	r4, r3
   d9d98:	f340 8096 	ble.w	d9ec8 <__tzcalc_limits+0x140>
   d9d9c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9da0:	18e3      	adds	r3, r4, r3
   d9da2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d9da6:	109b      	asrs	r3, r3, #2
   d9da8:	f240 156d 	movw	r5, #365	; 0x16d
   d9dac:	fb05 3502 	mla	r5, r5, r2, r3
   d9db0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d9db4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d9db8:	fb92 f3f3 	sdiv	r3, r2, r3
   d9dbc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9dc0:	442b      	add	r3, r5
   d9dc2:	18a5      	adds	r5, r4, r2
   d9dc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9dc8:	fb95 f5f2 	sdiv	r5, r5, r2
   d9dcc:	441d      	add	r5, r3
   d9dce:	2364      	movs	r3, #100	; 0x64
   d9dd0:	fb94 f7f2 	sdiv	r7, r4, r2
   d9dd4:	fb94 f6f3 	sdiv	r6, r4, r3
   d9dd8:	fb02 4717 	mls	r7, r2, r7, r4
   d9ddc:	fb03 4616 	mls	r6, r3, r6, r4
   d9de0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d9de4:	fab7 fe87 	clz	lr, r7
   d9de8:	9301      	str	r3, [sp, #4]
   d9dea:	f004 0303 	and.w	r3, r4, #3
   d9dee:	6044      	str	r4, [r0, #4]
   d9df0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9df4:	4601      	mov	r1, r0
   d9df6:	9300      	str	r3, [sp, #0]
   d9df8:	f04f 0c07 	mov.w	ip, #7
   d9dfc:	7a0b      	ldrb	r3, [r1, #8]
   d9dfe:	2b4a      	cmp	r3, #74	; 0x4a
   d9e00:	d10e      	bne.n	d9e20 <__tzcalc_limits+0x98>
   d9e02:	694b      	ldr	r3, [r1, #20]
   d9e04:	9a00      	ldr	r2, [sp, #0]
   d9e06:	18ec      	adds	r4, r5, r3
   d9e08:	b902      	cbnz	r2, d9e0c <__tzcalc_limits+0x84>
   d9e0a:	b906      	cbnz	r6, d9e0e <__tzcalc_limits+0x86>
   d9e0c:	b927      	cbnz	r7, d9e18 <__tzcalc_limits+0x90>
   d9e0e:	2b3b      	cmp	r3, #59	; 0x3b
   d9e10:	bfd4      	ite	le
   d9e12:	2300      	movle	r3, #0
   d9e14:	2301      	movgt	r3, #1
   d9e16:	e000      	b.n	d9e1a <__tzcalc_limits+0x92>
   d9e18:	2300      	movs	r3, #0
   d9e1a:	4423      	add	r3, r4
   d9e1c:	3b01      	subs	r3, #1
   d9e1e:	e03f      	b.n	d9ea0 <__tzcalc_limits+0x118>
   d9e20:	2b44      	cmp	r3, #68	; 0x44
   d9e22:	d102      	bne.n	d9e2a <__tzcalc_limits+0xa2>
   d9e24:	694b      	ldr	r3, [r1, #20]
   d9e26:	442b      	add	r3, r5
   d9e28:	e03a      	b.n	d9ea0 <__tzcalc_limits+0x118>
   d9e2a:	9b00      	ldr	r3, [sp, #0]
   d9e2c:	b92b      	cbnz	r3, d9e3a <__tzcalc_limits+0xb2>
   d9e2e:	2e00      	cmp	r6, #0
   d9e30:	bf0c      	ite	eq
   d9e32:	46f0      	moveq	r8, lr
   d9e34:	f04f 0801 	movne.w	r8, #1
   d9e38:	e000      	b.n	d9e3c <__tzcalc_limits+0xb4>
   d9e3a:	46f0      	mov	r8, lr
   d9e3c:	4b24      	ldr	r3, [pc, #144]	; (d9ed0 <__tzcalc_limits+0x148>)
   d9e3e:	68cc      	ldr	r4, [r1, #12]
   d9e40:	2230      	movs	r2, #48	; 0x30
   d9e42:	fb02 3808 	mla	r8, r2, r8, r3
   d9e46:	f1a8 0a04 	sub.w	sl, r8, #4
   d9e4a:	46a9      	mov	r9, r5
   d9e4c:	2301      	movs	r3, #1
   d9e4e:	42a3      	cmp	r3, r4
   d9e50:	da04      	bge.n	d9e5c <__tzcalc_limits+0xd4>
   d9e52:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d9e56:	3301      	adds	r3, #1
   d9e58:	44d9      	add	r9, fp
   d9e5a:	e7f8      	b.n	d9e4e <__tzcalc_limits+0xc6>
   d9e5c:	f109 0304 	add.w	r3, r9, #4
   d9e60:	fb93 fbfc 	sdiv	fp, r3, ip
   d9e64:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d9e68:	2c01      	cmp	r4, #1
   d9e6a:	ebca 0a03 	rsb	sl, sl, r3
   d9e6e:	694b      	ldr	r3, [r1, #20]
   d9e70:	bfb8      	it	lt
   d9e72:	2401      	movlt	r4, #1
   d9e74:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d9e78:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9e7c:	690b      	ldr	r3, [r1, #16]
   d9e7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d9e82:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d9e86:	bf48      	it	mi
   d9e88:	f10a 0a07 	addmi.w	sl, sl, #7
   d9e8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9e90:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9e94:	4453      	add	r3, sl
   d9e96:	42a3      	cmp	r3, r4
   d9e98:	db01      	blt.n	d9e9e <__tzcalc_limits+0x116>
   d9e9a:	3b07      	subs	r3, #7
   d9e9c:	e7fb      	b.n	d9e96 <__tzcalc_limits+0x10e>
   d9e9e:	444b      	add	r3, r9
   d9ea0:	698c      	ldr	r4, [r1, #24]
   d9ea2:	4a0c      	ldr	r2, [pc, #48]	; (d9ed4 <__tzcalc_limits+0x14c>)
   d9ea4:	fb02 4303 	mla	r3, r2, r3, r4
   d9ea8:	6a0c      	ldr	r4, [r1, #32]
   d9eaa:	4423      	add	r3, r4
   d9eac:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9eb0:	9b01      	ldr	r3, [sp, #4]
   d9eb2:	4299      	cmp	r1, r3
   d9eb4:	d1a2      	bne.n	d9dfc <__tzcalc_limits+0x74>
   d9eb6:	69c3      	ldr	r3, [r0, #28]
   d9eb8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d9eba:	4293      	cmp	r3, r2
   d9ebc:	bfac      	ite	ge
   d9ebe:	2300      	movge	r3, #0
   d9ec0:	2301      	movlt	r3, #1
   d9ec2:	6003      	str	r3, [r0, #0]
   d9ec4:	2001      	movs	r0, #1
   d9ec6:	e000      	b.n	d9eca <__tzcalc_limits+0x142>
   d9ec8:	2000      	movs	r0, #0
   d9eca:	b003      	add	sp, #12
   d9ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9ed0:	000daf10 	.word	0x000daf10
   d9ed4:	00015180 	.word	0x00015180

000d9ed8 <__tz_lock>:
   d9ed8:	4770      	bx	lr

000d9eda <__tz_unlock>:
   d9eda:	4770      	bx	lr

000d9edc <_tzset_unlocked>:
   d9edc:	4b01      	ldr	r3, [pc, #4]	; (d9ee4 <_tzset_unlocked+0x8>)
   d9ede:	6818      	ldr	r0, [r3, #0]
   d9ee0:	f000 b802 	b.w	d9ee8 <_tzset_unlocked_r>
   d9ee4:	2003d634 	.word	0x2003d634

000d9ee8 <_tzset_unlocked_r>:
   d9ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9eec:	b08d      	sub	sp, #52	; 0x34
   d9eee:	4607      	mov	r7, r0
   d9ef0:	f000 f9be 	bl	da270 <__gettzinfo>
   d9ef4:	49b0      	ldr	r1, [pc, #704]	; (da1b8 <_tzset_unlocked_r+0x2d0>)
   d9ef6:	4eb1      	ldr	r6, [pc, #708]	; (da1bc <_tzset_unlocked_r+0x2d4>)
   d9ef8:	4604      	mov	r4, r0
   d9efa:	4638      	mov	r0, r7
   d9efc:	f000 f9b0 	bl	da260 <_getenv_r>
   d9f00:	4605      	mov	r5, r0
   d9f02:	b960      	cbnz	r0, d9f1e <_tzset_unlocked_r+0x36>
   d9f04:	4bae      	ldr	r3, [pc, #696]	; (da1c0 <_tzset_unlocked_r+0x2d8>)
   d9f06:	4aaf      	ldr	r2, [pc, #700]	; (da1c4 <_tzset_unlocked_r+0x2dc>)
   d9f08:	6018      	str	r0, [r3, #0]
   d9f0a:	4baf      	ldr	r3, [pc, #700]	; (da1c8 <_tzset_unlocked_r+0x2e0>)
   d9f0c:	6018      	str	r0, [r3, #0]
   d9f0e:	4baf      	ldr	r3, [pc, #700]	; (da1cc <_tzset_unlocked_r+0x2e4>)
   d9f10:	6830      	ldr	r0, [r6, #0]
   d9f12:	601a      	str	r2, [r3, #0]
   d9f14:	605a      	str	r2, [r3, #4]
   d9f16:	f7fc ff13 	bl	d6d40 <free>
   d9f1a:	6035      	str	r5, [r6, #0]
   d9f1c:	e148      	b.n	da1b0 <_tzset_unlocked_r+0x2c8>
   d9f1e:	6831      	ldr	r1, [r6, #0]
   d9f20:	b979      	cbnz	r1, d9f42 <_tzset_unlocked_r+0x5a>
   d9f22:	6830      	ldr	r0, [r6, #0]
   d9f24:	f7fc ff0c 	bl	d6d40 <free>
   d9f28:	4628      	mov	r0, r5
   d9f2a:	f7ff fdd8 	bl	d9ade <strlen>
   d9f2e:	1c41      	adds	r1, r0, #1
   d9f30:	4638      	mov	r0, r7
   d9f32:	f7fc ff3d 	bl	d6db0 <_malloc_r>
   d9f36:	6030      	str	r0, [r6, #0]
   d9f38:	b148      	cbz	r0, d9f4e <_tzset_unlocked_r+0x66>
   d9f3a:	4629      	mov	r1, r5
   d9f3c:	f7ff fdc7 	bl	d9ace <strcpy>
   d9f40:	e005      	b.n	d9f4e <_tzset_unlocked_r+0x66>
   d9f42:	f7ff fdba 	bl	d9aba <strcmp>
   d9f46:	2800      	cmp	r0, #0
   d9f48:	f000 8132 	beq.w	da1b0 <_tzset_unlocked_r+0x2c8>
   d9f4c:	e7e9      	b.n	d9f22 <_tzset_unlocked_r+0x3a>
   d9f4e:	782b      	ldrb	r3, [r5, #0]
   d9f50:	4a9f      	ldr	r2, [pc, #636]	; (da1d0 <_tzset_unlocked_r+0x2e8>)
   d9f52:	49a0      	ldr	r1, [pc, #640]	; (da1d4 <_tzset_unlocked_r+0x2ec>)
   d9f54:	2b3a      	cmp	r3, #58	; 0x3a
   d9f56:	bf08      	it	eq
   d9f58:	3501      	addeq	r5, #1
   d9f5a:	ae0a      	add	r6, sp, #40	; 0x28
   d9f5c:	4633      	mov	r3, r6
   d9f5e:	4628      	mov	r0, r5
   d9f60:	f7fc ff0e 	bl	d6d80 <siscanf>
   d9f64:	2800      	cmp	r0, #0
   d9f66:	f340 8123 	ble.w	da1b0 <_tzset_unlocked_r+0x2c8>
   d9f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9f6c:	18ef      	adds	r7, r5, r3
   d9f6e:	5ceb      	ldrb	r3, [r5, r3]
   d9f70:	2b2d      	cmp	r3, #45	; 0x2d
   d9f72:	d103      	bne.n	d9f7c <_tzset_unlocked_r+0x94>
   d9f74:	3701      	adds	r7, #1
   d9f76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d9f7a:	e003      	b.n	d9f84 <_tzset_unlocked_r+0x9c>
   d9f7c:	2b2b      	cmp	r3, #43	; 0x2b
   d9f7e:	bf08      	it	eq
   d9f80:	3701      	addeq	r7, #1
   d9f82:	2501      	movs	r5, #1
   d9f84:	f10d 0a20 	add.w	sl, sp, #32
   d9f88:	f10d 0b1e 	add.w	fp, sp, #30
   d9f8c:	f04f 0800 	mov.w	r8, #0
   d9f90:	9603      	str	r6, [sp, #12]
   d9f92:	f8cd a008 	str.w	sl, [sp, #8]
   d9f96:	9601      	str	r6, [sp, #4]
   d9f98:	f8cd b000 	str.w	fp, [sp]
   d9f9c:	4633      	mov	r3, r6
   d9f9e:	aa07      	add	r2, sp, #28
   d9fa0:	498d      	ldr	r1, [pc, #564]	; (da1d8 <_tzset_unlocked_r+0x2f0>)
   d9fa2:	f8ad 801e 	strh.w	r8, [sp, #30]
   d9fa6:	4638      	mov	r0, r7
   d9fa8:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9fac:	f7fc fee8 	bl	d6d80 <siscanf>
   d9fb0:	4540      	cmp	r0, r8
   d9fb2:	f340 80fd 	ble.w	da1b0 <_tzset_unlocked_r+0x2c8>
   d9fb6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9fba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9fbe:	f8df 9224 	ldr.w	r9, [pc, #548]	; da1e4 <_tzset_unlocked_r+0x2fc>
   d9fc2:	213c      	movs	r1, #60	; 0x3c
   d9fc4:	fb01 3302 	mla	r3, r1, r2, r3
   d9fc8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9fcc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9fd0:	fb01 3302 	mla	r3, r1, r2, r3
   d9fd4:	435d      	muls	r5, r3
   d9fd6:	6225      	str	r5, [r4, #32]
   d9fd8:	4d7c      	ldr	r5, [pc, #496]	; (da1cc <_tzset_unlocked_r+0x2e4>)
   d9fda:	4b7d      	ldr	r3, [pc, #500]	; (da1d0 <_tzset_unlocked_r+0x2e8>)
   d9fdc:	602b      	str	r3, [r5, #0]
   d9fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9fe0:	497c      	ldr	r1, [pc, #496]	; (da1d4 <_tzset_unlocked_r+0x2ec>)
   d9fe2:	441f      	add	r7, r3
   d9fe4:	464a      	mov	r2, r9
   d9fe6:	4633      	mov	r3, r6
   d9fe8:	4638      	mov	r0, r7
   d9fea:	f7fc fec9 	bl	d6d80 <siscanf>
   d9fee:	4540      	cmp	r0, r8
   d9ff0:	dc08      	bgt.n	da004 <_tzset_unlocked_r+0x11c>
   d9ff2:	682b      	ldr	r3, [r5, #0]
   d9ff4:	606b      	str	r3, [r5, #4]
   d9ff6:	4b72      	ldr	r3, [pc, #456]	; (da1c0 <_tzset_unlocked_r+0x2d8>)
   d9ff8:	6a22      	ldr	r2, [r4, #32]
   d9ffa:	601a      	str	r2, [r3, #0]
   d9ffc:	4b72      	ldr	r3, [pc, #456]	; (da1c8 <_tzset_unlocked_r+0x2e0>)
   d9ffe:	f8c3 8000 	str.w	r8, [r3]
   da002:	e0d5      	b.n	da1b0 <_tzset_unlocked_r+0x2c8>
   da004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da006:	f8c5 9004 	str.w	r9, [r5, #4]
   da00a:	18fd      	adds	r5, r7, r3
   da00c:	5cfb      	ldrb	r3, [r7, r3]
   da00e:	2b2d      	cmp	r3, #45	; 0x2d
   da010:	d103      	bne.n	da01a <_tzset_unlocked_r+0x132>
   da012:	3501      	adds	r5, #1
   da014:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da018:	e003      	b.n	da022 <_tzset_unlocked_r+0x13a>
   da01a:	2b2b      	cmp	r3, #43	; 0x2b
   da01c:	bf08      	it	eq
   da01e:	3501      	addeq	r5, #1
   da020:	2701      	movs	r7, #1
   da022:	2300      	movs	r3, #0
   da024:	f8ad 301c 	strh.w	r3, [sp, #28]
   da028:	f8ad 301e 	strh.w	r3, [sp, #30]
   da02c:	f8ad 3020 	strh.w	r3, [sp, #32]
   da030:	930a      	str	r3, [sp, #40]	; 0x28
   da032:	9603      	str	r6, [sp, #12]
   da034:	f8cd a008 	str.w	sl, [sp, #8]
   da038:	9601      	str	r6, [sp, #4]
   da03a:	f8cd b000 	str.w	fp, [sp]
   da03e:	4633      	mov	r3, r6
   da040:	aa07      	add	r2, sp, #28
   da042:	4965      	ldr	r1, [pc, #404]	; (da1d8 <_tzset_unlocked_r+0x2f0>)
   da044:	4628      	mov	r0, r5
   da046:	f7fc fe9b 	bl	d6d80 <siscanf>
   da04a:	2800      	cmp	r0, #0
   da04c:	dc04      	bgt.n	da058 <_tzset_unlocked_r+0x170>
   da04e:	6a23      	ldr	r3, [r4, #32]
   da050:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da054:	63e3      	str	r3, [r4, #60]	; 0x3c
   da056:	e00e      	b.n	da076 <_tzset_unlocked_r+0x18e>
   da058:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da05c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da060:	213c      	movs	r1, #60	; 0x3c
   da062:	fb01 3302 	mla	r3, r1, r2, r3
   da066:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da06a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da06e:	fb01 3302 	mla	r3, r1, r2, r3
   da072:	435f      	muls	r7, r3
   da074:	63e7      	str	r7, [r4, #60]	; 0x3c
   da076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da078:	4627      	mov	r7, r4
   da07a:	441d      	add	r5, r3
   da07c:	f04f 0900 	mov.w	r9, #0
   da080:	782b      	ldrb	r3, [r5, #0]
   da082:	2b2c      	cmp	r3, #44	; 0x2c
   da084:	bf08      	it	eq
   da086:	3501      	addeq	r5, #1
   da088:	f895 8000 	ldrb.w	r8, [r5]
   da08c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da090:	d126      	bne.n	da0e0 <_tzset_unlocked_r+0x1f8>
   da092:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da096:	9302      	str	r3, [sp, #8]
   da098:	ab09      	add	r3, sp, #36	; 0x24
   da09a:	9300      	str	r3, [sp, #0]
   da09c:	9603      	str	r6, [sp, #12]
   da09e:	9601      	str	r6, [sp, #4]
   da0a0:	4633      	mov	r3, r6
   da0a2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da0a6:	494d      	ldr	r1, [pc, #308]	; (da1dc <_tzset_unlocked_r+0x2f4>)
   da0a8:	4628      	mov	r0, r5
   da0aa:	f7fc fe69 	bl	d6d80 <siscanf>
   da0ae:	2803      	cmp	r0, #3
   da0b0:	d17e      	bne.n	da1b0 <_tzset_unlocked_r+0x2c8>
   da0b2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da0b6:	1e4b      	subs	r3, r1, #1
   da0b8:	2b0b      	cmp	r3, #11
   da0ba:	d879      	bhi.n	da1b0 <_tzset_unlocked_r+0x2c8>
   da0bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da0c0:	1e53      	subs	r3, r2, #1
   da0c2:	2b04      	cmp	r3, #4
   da0c4:	d874      	bhi.n	da1b0 <_tzset_unlocked_r+0x2c8>
   da0c6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da0ca:	2b06      	cmp	r3, #6
   da0cc:	d870      	bhi.n	da1b0 <_tzset_unlocked_r+0x2c8>
   da0ce:	f887 8008 	strb.w	r8, [r7, #8]
   da0d2:	60f9      	str	r1, [r7, #12]
   da0d4:	613a      	str	r2, [r7, #16]
   da0d6:	617b      	str	r3, [r7, #20]
   da0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da0da:	eb05 0803 	add.w	r8, r5, r3
   da0de:	e02a      	b.n	da136 <_tzset_unlocked_r+0x24e>
   da0e0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da0e4:	bf06      	itte	eq
   da0e6:	3501      	addeq	r5, #1
   da0e8:	4643      	moveq	r3, r8
   da0ea:	2344      	movne	r3, #68	; 0x44
   da0ec:	220a      	movs	r2, #10
   da0ee:	a90b      	add	r1, sp, #44	; 0x2c
   da0f0:	4628      	mov	r0, r5
   da0f2:	9305      	str	r3, [sp, #20]
   da0f4:	f7ff fe3e 	bl	d9d74 <strtoul>
   da0f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da0fc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da100:	4545      	cmp	r5, r8
   da102:	9b05      	ldr	r3, [sp, #20]
   da104:	d114      	bne.n	da130 <_tzset_unlocked_r+0x248>
   da106:	234d      	movs	r3, #77	; 0x4d
   da108:	f1b9 0f00 	cmp.w	r9, #0
   da10c:	d107      	bne.n	da11e <_tzset_unlocked_r+0x236>
   da10e:	7223      	strb	r3, [r4, #8]
   da110:	2303      	movs	r3, #3
   da112:	60e3      	str	r3, [r4, #12]
   da114:	2302      	movs	r3, #2
   da116:	6123      	str	r3, [r4, #16]
   da118:	f8c4 9014 	str.w	r9, [r4, #20]
   da11c:	e00b      	b.n	da136 <_tzset_unlocked_r+0x24e>
   da11e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da122:	230b      	movs	r3, #11
   da124:	62a3      	str	r3, [r4, #40]	; 0x28
   da126:	2301      	movs	r3, #1
   da128:	62e3      	str	r3, [r4, #44]	; 0x2c
   da12a:	2300      	movs	r3, #0
   da12c:	6323      	str	r3, [r4, #48]	; 0x30
   da12e:	e002      	b.n	da136 <_tzset_unlocked_r+0x24e>
   da130:	b280      	uxth	r0, r0
   da132:	723b      	strb	r3, [r7, #8]
   da134:	6178      	str	r0, [r7, #20]
   da136:	2302      	movs	r3, #2
   da138:	f8ad 301c 	strh.w	r3, [sp, #28]
   da13c:	2300      	movs	r3, #0
   da13e:	f8ad 301e 	strh.w	r3, [sp, #30]
   da142:	f8ad 3020 	strh.w	r3, [sp, #32]
   da146:	930a      	str	r3, [sp, #40]	; 0x28
   da148:	f898 3000 	ldrb.w	r3, [r8]
   da14c:	2b2f      	cmp	r3, #47	; 0x2f
   da14e:	d10b      	bne.n	da168 <_tzset_unlocked_r+0x280>
   da150:	9603      	str	r6, [sp, #12]
   da152:	f8cd a008 	str.w	sl, [sp, #8]
   da156:	9601      	str	r6, [sp, #4]
   da158:	f8cd b000 	str.w	fp, [sp]
   da15c:	4633      	mov	r3, r6
   da15e:	aa07      	add	r2, sp, #28
   da160:	491f      	ldr	r1, [pc, #124]	; (da1e0 <_tzset_unlocked_r+0x2f8>)
   da162:	4640      	mov	r0, r8
   da164:	f7fc fe0c 	bl	d6d80 <siscanf>
   da168:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da16c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da170:	213c      	movs	r1, #60	; 0x3c
   da172:	fb01 3302 	mla	r3, r1, r2, r3
   da176:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da17a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da17e:	fb01 3302 	mla	r3, r1, r2, r3
   da182:	61bb      	str	r3, [r7, #24]
   da184:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da186:	f109 0901 	add.w	r9, r9, #1
   da18a:	f1b9 0f02 	cmp.w	r9, #2
   da18e:	4445      	add	r5, r8
   da190:	f107 071c 	add.w	r7, r7, #28
   da194:	f47f af74 	bne.w	da080 <_tzset_unlocked_r+0x198>
   da198:	6860      	ldr	r0, [r4, #4]
   da19a:	f7ff fdf5 	bl	d9d88 <__tzcalc_limits>
   da19e:	4b08      	ldr	r3, [pc, #32]	; (da1c0 <_tzset_unlocked_r+0x2d8>)
   da1a0:	6a22      	ldr	r2, [r4, #32]
   da1a2:	601a      	str	r2, [r3, #0]
   da1a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da1a6:	1a9b      	subs	r3, r3, r2
   da1a8:	4a07      	ldr	r2, [pc, #28]	; (da1c8 <_tzset_unlocked_r+0x2e0>)
   da1aa:	bf18      	it	ne
   da1ac:	2301      	movne	r3, #1
   da1ae:	6013      	str	r3, [r2, #0]
   da1b0:	b00d      	add	sp, #52	; 0x34
   da1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da1b6:	bf00      	nop
   da1b8:	000daf70 	.word	0x000daf70
   da1bc:	2003e7e0 	.word	0x2003e7e0
   da1c0:	2003e7e8 	.word	0x2003e7e8
   da1c4:	000daf73 	.word	0x000daf73
   da1c8:	2003e7e4 	.word	0x2003e7e4
   da1cc:	2003d638 	.word	0x2003d638
   da1d0:	2003e7d3 	.word	0x2003e7d3
   da1d4:	000daf77 	.word	0x000daf77
   da1d8:	000daf9a 	.word	0x000daf9a
   da1dc:	000daf86 	.word	0x000daf86
   da1e0:	000daf99 	.word	0x000daf99
   da1e4:	2003e7c8 	.word	0x2003e7c8

000da1e8 <_findenv_r>:
   da1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da1ec:	4607      	mov	r7, r0
   da1ee:	468b      	mov	fp, r1
   da1f0:	4690      	mov	r8, r2
   da1f2:	f000 f8d9 	bl	da3a8 <__env_lock>
   da1f6:	4b19      	ldr	r3, [pc, #100]	; (da25c <_findenv_r+0x74>)
   da1f8:	681d      	ldr	r5, [r3, #0]
   da1fa:	469a      	mov	sl, r3
   da1fc:	b13d      	cbz	r5, da20e <_findenv_r+0x26>
   da1fe:	465c      	mov	r4, fp
   da200:	4623      	mov	r3, r4
   da202:	f813 2b01 	ldrb.w	r2, [r3], #1
   da206:	b142      	cbz	r2, da21a <_findenv_r+0x32>
   da208:	2a3d      	cmp	r2, #61	; 0x3d
   da20a:	461c      	mov	r4, r3
   da20c:	d1f8      	bne.n	da200 <_findenv_r+0x18>
   da20e:	4638      	mov	r0, r7
   da210:	f000 f8cb 	bl	da3aa <__env_unlock>
   da214:	2000      	movs	r0, #0
   da216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da21a:	ebcb 0404 	rsb	r4, fp, r4
   da21e:	46a9      	mov	r9, r5
   da220:	f859 0b04 	ldr.w	r0, [r9], #4
   da224:	2800      	cmp	r0, #0
   da226:	d0f2      	beq.n	da20e <_findenv_r+0x26>
   da228:	4622      	mov	r2, r4
   da22a:	4659      	mov	r1, fp
   da22c:	f7ff fc5f 	bl	d9aee <strncmp>
   da230:	b988      	cbnz	r0, da256 <_findenv_r+0x6e>
   da232:	f859 3c04 	ldr.w	r3, [r9, #-4]
   da236:	191e      	adds	r6, r3, r4
   da238:	5d1b      	ldrb	r3, [r3, r4]
   da23a:	2b3d      	cmp	r3, #61	; 0x3d
   da23c:	d10b      	bne.n	da256 <_findenv_r+0x6e>
   da23e:	f8da 3000 	ldr.w	r3, [sl]
   da242:	1aed      	subs	r5, r5, r3
   da244:	10ad      	asrs	r5, r5, #2
   da246:	4638      	mov	r0, r7
   da248:	f8c8 5000 	str.w	r5, [r8]
   da24c:	f000 f8ad 	bl	da3aa <__env_unlock>
   da250:	1c70      	adds	r0, r6, #1
   da252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da256:	464d      	mov	r5, r9
   da258:	e7e1      	b.n	da21e <_findenv_r+0x36>
   da25a:	bf00      	nop
   da25c:	2003d680 	.word	0x2003d680

000da260 <_getenv_r>:
   da260:	b507      	push	{r0, r1, r2, lr}
   da262:	aa01      	add	r2, sp, #4
   da264:	f7ff ffc0 	bl	da1e8 <_findenv_r>
   da268:	b003      	add	sp, #12
   da26a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da270 <__gettzinfo>:
   da270:	4800      	ldr	r0, [pc, #0]	; (da274 <__gettzinfo+0x4>)
   da272:	4770      	bx	lr
   da274:	2003d640 	.word	0x2003d640

000da278 <gmtime_r>:
   da278:	6802      	ldr	r2, [r0, #0]
   da27a:	4b47      	ldr	r3, [pc, #284]	; (da398 <gmtime_r+0x120>)
   da27c:	b5f0      	push	{r4, r5, r6, r7, lr}
   da27e:	fb92 f4f3 	sdiv	r4, r2, r3
   da282:	fb03 2214 	mls	r2, r3, r4, r2
   da286:	2a00      	cmp	r2, #0
   da288:	bfbc      	itt	lt
   da28a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   da28e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   da292:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   da296:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   da29a:	fb92 f3f0 	sdiv	r3, r2, r0
   da29e:	fb00 2213 	mls	r2, r0, r3, r2
   da2a2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   da2a6:	bfac      	ite	ge
   da2a8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   da2ac:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   da2b0:	608b      	str	r3, [r1, #8]
   da2b2:	fb92 f3f0 	sdiv	r3, r2, r0
   da2b6:	fb00 2213 	mls	r2, r0, r3, r2
   da2ba:	604b      	str	r3, [r1, #4]
   da2bc:	600a      	str	r2, [r1, #0]
   da2be:	2307      	movs	r3, #7
   da2c0:	1ce2      	adds	r2, r4, #3
   da2c2:	fb92 f3f3 	sdiv	r3, r2, r3
   da2c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da2ca:	1ad3      	subs	r3, r2, r3
   da2cc:	618b      	str	r3, [r1, #24]
   da2ce:	4b33      	ldr	r3, [pc, #204]	; (da39c <gmtime_r+0x124>)
   da2d0:	4d33      	ldr	r5, [pc, #204]	; (da3a0 <gmtime_r+0x128>)
   da2d2:	fb94 f5f5 	sdiv	r5, r4, r5
   da2d6:	fb03 4405 	mla	r4, r3, r5, r4
   da2da:	f648 62ac 	movw	r2, #36524	; 0x8eac
   da2de:	fbb4 f2f2 	udiv	r2, r4, r2
   da2e2:	4422      	add	r2, r4
   da2e4:	f240 57b4 	movw	r7, #1460	; 0x5b4
   da2e8:	fbb4 f3f7 	udiv	r3, r4, r7
   da2ec:	1ad2      	subs	r2, r2, r3
   da2ee:	482d      	ldr	r0, [pc, #180]	; (da3a4 <gmtime_r+0x12c>)
   da2f0:	fbb4 f0f0 	udiv	r0, r4, r0
   da2f4:	f648 6694 	movw	r6, #36500	; 0x8e94
   da2f8:	1a13      	subs	r3, r2, r0
   da2fa:	fbb3 f6f6 	udiv	r6, r3, r6
   da2fe:	4434      	add	r4, r6
   da300:	f240 126d 	movw	r2, #365	; 0x16d
   da304:	fbb3 f0f2 	udiv	r0, r3, r2
   da308:	fbb3 f3f7 	udiv	r3, r3, r7
   da30c:	1ae3      	subs	r3, r4, r3
   da30e:	fb02 3310 	mls	r3, r2, r0, r3
   da312:	2499      	movs	r4, #153	; 0x99
   da314:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   da318:	3202      	adds	r2, #2
   da31a:	fbb2 f2f4 	udiv	r2, r2, r4
   da31e:	2a0a      	cmp	r2, #10
   da320:	fb04 f402 	mul.w	r4, r4, r2
   da324:	f104 0602 	add.w	r6, r4, #2
   da328:	f04f 0405 	mov.w	r4, #5
   da32c:	fbb6 f4f4 	udiv	r4, r6, r4
   da330:	bf34      	ite	cc
   da332:	2602      	movcc	r6, #2
   da334:	f06f 0609 	mvncs.w	r6, #9
   da338:	4416      	add	r6, r2
   da33a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da33e:	fb02 0505 	mla	r5, r2, r5, r0
   da342:	1c5f      	adds	r7, r3, #1
   da344:	2e01      	cmp	r6, #1
   da346:	bf98      	it	ls
   da348:	3501      	addls	r5, #1
   da34a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   da34e:	eba7 0704 	sub.w	r7, r7, r4
   da352:	d302      	bcc.n	da35a <gmtime_r+0xe2>
   da354:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   da358:	e014      	b.n	da384 <gmtime_r+0x10c>
   da35a:	0782      	lsls	r2, r0, #30
   da35c:	d105      	bne.n	da36a <gmtime_r+0xf2>
   da35e:	2464      	movs	r4, #100	; 0x64
   da360:	fbb0 f2f4 	udiv	r2, r0, r4
   da364:	fb04 0212 	mls	r2, r4, r2, r0
   da368:	b94a      	cbnz	r2, da37e <gmtime_r+0x106>
   da36a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da36e:	fbb0 f4f2 	udiv	r4, r0, r2
   da372:	fb02 0014 	mls	r0, r2, r4, r0
   da376:	fab0 f280 	clz	r2, r0
   da37a:	0952      	lsrs	r2, r2, #5
   da37c:	e000      	b.n	da380 <gmtime_r+0x108>
   da37e:	2201      	movs	r2, #1
   da380:	333b      	adds	r3, #59	; 0x3b
   da382:	441a      	add	r2, r3
   da384:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   da388:	2300      	movs	r3, #0
   da38a:	61ca      	str	r2, [r1, #28]
   da38c:	614d      	str	r5, [r1, #20]
   da38e:	610e      	str	r6, [r1, #16]
   da390:	60cf      	str	r7, [r1, #12]
   da392:	620b      	str	r3, [r1, #32]
   da394:	4608      	mov	r0, r1
   da396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da398:	00015180 	.word	0x00015180
   da39c:	fffdc54f 	.word	0xfffdc54f
   da3a0:	00023ab1 	.word	0x00023ab1
   da3a4:	00023ab0 	.word	0x00023ab0

000da3a8 <__env_lock>:
   da3a8:	4770      	bx	lr

000da3aa <__env_unlock>:
   da3aa:	4770      	bx	lr

000da3ac <dynalib_user>:
   da3ac:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   da3bc:	0000 0000                                   ....

000da3c0 <_ZTVN8particle13__SPISettingsE>:
	...
   da3c8:	40d1 000d                                   .@..

000da3cc <_ZTV4File>:
	...
   da3d4:	40cf 000d 4129 000d 4169 000d 4163 000d     .@..)A..iA..cA..
   da3e4:	40b3 000d 4143 000d 413d 000d 4137 000d     .@..CA..=A..7A..
   da3f4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   da404:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   da414:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   da424:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   da434:	2545 3e64 4200 746f 6431 7461 2500 3230     E%d>.Bot1dat.%02
   da444:	2564 3230 2564 3430 2564 3230 2564 3230     d%02d%04d%02d%02
   da454:	2564 3230 0064 6157 6574 4272 746f 5f00     d%02d.WaterBot._
   da464:	4f4c 2e47 7874 0074 7245 6f72 3a72 6320     LOG.txt.Error: c
   da474:	756f 646c 6e20 746f 6320 6e6f 656e 7463     ould not connect
   da484:	7420 206f 4453 6320 7261 2164 6600 6c69      to SD card!.fil
   da494:	6e65 6d61 0065 6946 656c 2720 7325 2027     ename.File '%s' 
   da4a4:	6c61 6572 6461 2079 7865 7369 7374 202c     already exists, 
   da4b4:	6564 656c 6974 676e 6120 646e 6f20 6576     deleting and ove
   da4c4:	7772 6972 6974 676e 5300 6174 7472 6e69     rwriting.Startin
   da4d4:	2067 666f 6c66 616f 2064 666f 6620 6c69     g offload of fil
   da4e4:	3a65 2520 0073 6966 656c 6f63 706d 5200     e: %s.filecomp.R
   da4f4:	6165 6863 6465 6520 646e 6f20 2066 6966     eached end of fi
   da504:	656c 203a 7325 6600 6c69 6465 6e6f 0065     le: %s.filedone.
   da514:	6552 6563 7669 6465 6420 6e6f 2065 6f63     Received done co
   da524:	6d6d 6e61 0064 6843 6365 736b 6d75 203a     mmand.Checksum: 
   da534:	3025 7832 202c 3025 6433 5300 7274 6e69     %02x, %03d.Strin
   da544:	2067 654c 3a6e 2520 2c64 4320 6568 6b63     g Len: %d, Check
   da554:	7573 3a6d 2520 0064 575b 5241 5d4e 4d20     sum: %d.[WARN] M
   da564:	7365 6173 6567 4320 6568 6b63 7573 206d     essage Checksum 
   da574:	6f44 7365 4e20 746f 4d20 7461 6863 3a21     Does Not Match!:
   da584:	2520 0073 6157 6e72 6e69 2c67 6320 6568      %s.Warning, che
   da594:	6b63 7573 206d 6f64 7365 6e20 746f 6d20     cksum does not m
   da5a4:	7461 6863 4300 2543 7332 616e 256b 7333     atch.CC%2snak%3s
   da5b4:	6100 6b63 7300 7075 2500 2c75 7525 252c     .ack.sup.%u,%u,%
   da5c4:	2c66 6625 5300 6174 7574 2073 7055 6164     f,%f.Status Upda
   da5d4:	6574 0021 2323 2323 2323 2323 2323 2323     te!.############
   da5e4:	2323 2323 2323 2323 2323 2323 2300 2023     ############.## 
   da5f4:	2020 5320 4154 5554 2053 5055 4144 4554        STATUS UPDATE
   da604:	2020 2320 0023 2323 2020 2020 2020 6f42        ##.##      Bo
   da614:	2074 3a23 2520 6431 2020 2020 2320 0023     t #: %1d     ##.
   da624:	2323 2020 2020 4220 7461 2074 3a25 2520     ##     Batt %: %
   da634:	3330 2064 2020 2320 0023 2323 2020 4c20     03d    ##.##   L
   da644:	4554 2020 4c42 2045 5820 6542 2065 2020     TE  BLE  XBee   
   da654:	2323 2300 2023 2020 2520 2064 2020 2520     ##.##    %d    %
   da664:	2064 2020 2020 6425 2020 2020 2323 4600     d     %d    ##.F
   da674:	756f 646e 6120 6e20 7765 7720 7461 7265     ound a new water
   da684:	6220 746f 4920 0044 616e 006b 7470 0073      bot ID.nak.pts.
   da694:	6152 5777 6972 6574 742e 7478 4c00 4554     RawWrite.txt.LTE
   da6a4:	5800 6542 0065 6c42 6575 6f74 746f 0068     .XBee.Bluetooth.
   da6b4:	654e 2077 7473 6972 676e 6620 6f72 206d     New string from 
   da6c4:	7325 203a 5b00 4e49 4f46 205d 6552 6563     %s: .[INFO] Rece
   da6d4:	7669 6465 4c20 4554 4d20 7365 6173 6567     ived LTE Message
   da6e4:	203a 7325 4e00 7765 4220 2054 6f43 6d6d     : %s.New BT Comm
   da6f4:	6e61 3a64 5b00 4e49 4f46 205d 6552 6563     and:.[INFO] Rece
   da704:	7669 6465 4220 454c 4d20 7365 6173 6567     ived BLE Message
   da714:	203a 7325 4e00 7765 5820 6542 2065 6f43     : %s.New XBee Co
   da724:	6d6d 6e61 3a64 5b00 4e49 4f46 205d 6552     mmand:.[INFO] Re
   da734:	6563 7669 6465 5820 6542 2065 654d 7373     ceived XBee Mess
   da744:	6761 3a65 2520 0073 6f43 6e6e 6365 6574     age: %s.Connecte
   da754:	2064 6f74 4220 746f 2520 0064 002f 7245     d to Bot %d./.Er
   da764:	6f72 2c72 6320 756f 646c 6e20 746f 6f20     ror, could not o
   da774:	6570 206e 6f72 746f 6420 7269 6365 6f74     pen root directo
   da784:	7972 6f20 206e 4453 4320 7261 2e64 4920     ry on SD Card. I
   da794:	2073 7469 6920 736e 7265 6574 3f64 4300     s it inserted?.C
   da7a4:	4243 6425 6d64 0070 6552 7571 7365 6574     CB%ddmp.Requeste
   da7b4:	2064 4453 4320 7261 2064 6144 6174 6620     d SD Card Data f
   da7c4:	6f72 206d 6f42 2074 6425 4f20 6576 2072     rom Bot %d Over 
   da7d4:	4c42 0a45 4300 7275 6572 746e 796c 6320     BLE..Currently c
   da7e4:	6e6f 656e 7463 6465 7420 206f 6f42 2074     onnected to Bot 
   da7f4:	6625 202c 656e 6465 7420 206f 6f63 6e6e     %f, need to conn
   da804:	6365 2074 6f74 4220 746f 2520 0064 7553     ect to Bot %d.Su
   da814:	6363 7365 6673 6c75 796c 6320 6e6f 656e     ccessfully conne
   da824:	7463 6465 7420 206f 6f42 2074 6425 5300     cted to Bot %d.S
   da834:	6174 7472 6e69 2067 6966 656c 7420 6172     tarting file tra
   da844:	736e 6566 2072 7266 6d6f 4220 746f 2520     nsfer from Bot %
   da854:	0064 6946 696e 6873 6465 7420 6172 736e     d.Finished trans
   da864:	6566 7272 6e69 2067 6966 656c 6620 6f72     ferring file fro
   da874:	206d 6f42 2074 6425 4300 6e6f 656e 7463     m Bot %d.Connect
   da884:	6465 7420 206f 6157 6574 6272 746f 2520     ed to Waterbot %
   da894:	0064 3462 3032 3936 3031 642d 3463 2d62     d.b4206910-dc4b-
   da8a4:	3735 3334 632d 6238 2d31 3239 3064 3765     5743-c8b1-92d0e7
   da8b4:	3135 3238 3062 6200 3234 3630 3139 2d32     5182b0.b4206912-
   da8c4:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   da8d4:	6432 6530 3537 3831 6232 0030 3462 3032     2d0e75182b0.b420
   da8e4:	3936 3331 642d 3463 2d62 3735 3334 632d     6913-dc4b-5743-c
   da8f4:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   da904:	6200 3234 3630 3139 2d34 6364 6234 352d     .b4206914-dc4b-5
   da914:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   da924:	3831 6232 0030 0000                         182b0...

000da92c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da934:	6dd3 000d 6dd9 000d 81e5 000d 6e03 000d     .m...m.......n..
   da944:	6dd5 000d                                   .m..

000da948 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da950:	6dcd 000d 6de7 000d 83a1 000d 6e07 000d     .m...m.......n..
   da960:	6dcf 000d                                   .m..

000da964 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da96c:	6dc7 000d 6df5 000d 7881 000d 6e0b 000d     .m...m...x...n..
   da97c:	6dc9 000d 6977 6972 676e 622e 656c 5300     .m..wiring.ble.S
   da98c:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   da99c:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   da9ac:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   da9bc:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   da9cc:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   da9dc:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   da9ec:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   da9fc:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   daa0c:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   daa1c:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   daa2c:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   daa3c:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   daa4c:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   daa5c:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   daa6c:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   daa7c:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   daa8c:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   daa9c:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   daaac:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   daabc:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   daacc:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   daadc:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   daaec:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   daafc:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   dab0c:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   dab1c:	6465 002e                                   ed..

000dab20 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dab20:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000dab30 <_ZTVN5spark13CellularClassE>:
	...
   dab38:	854b 000d 8541 000d 8537 000d 84ed 000d     K...A...7.......
   dab48:	852b 000d 851f 000d 8513 000d 850b 000d     +...............
   dab58:	8501 000d 84f7 000d 8971 000d               ........q...

000dab64 <_ZTVN5spark13EthernetClassE>:
	...
   dab6c:	85f5 000d 85eb 000d 85e1 000d 85d7 000d     ................
   dab7c:	85cb 000d 85bf 000d 85b3 000d 85ab 000d     ................
   dab8c:	85a1 000d 8597 000d 8971 000d               ........q...

000dab98 <_ZTV7TwoWire>:
	...
   daba0:	8615 000d 865f 000d 8637 000d 8617 000d     ...._...7.......
   dabb0:	863f 000d 8647 000d 864f 000d 8657 000d     ?...G...O...W...

000dabc0 <_ZTV9IPAddress>:
	...
   dabc8:	86a9 000d 8699 000d 869b 000d 6162 6475     ............baud
   dabd8:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dabe8:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   dabf8:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   dac08:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   dac18:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   dac28:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   dac38:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   dac48:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   dac58:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   dac68:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   dac78:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   dac88:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   dac98:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   daca8:	696e 0063 6c61 006c                         nic.all.

000dacb0 <_ZTVN5spark9MeshClassE>:
	...
   dacb8:	87eb 000d 87e1 000d 87d7 000d 87cd 000d     ................
   dacc8:	87c1 000d 87b5 000d 87a9 000d 87a1 000d     ................
   dacd8:	8797 000d 878d 000d 8971 000d               ........q...

000dace4 <_ZTVN5spark12NetworkClassE>:
	...
   dacec:	8909 000d 8913 000d 891d 000d 8927 000d     ............'...
   dacfc:	8931 000d 893d 000d 8949 000d 8955 000d     1...=...I...U...
   dad0c:	895d 000d 8967 000d 8971 000d               ]...g...q...

000dad18 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dad18:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   dad28:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dad38:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dad48 <_ZTV11USARTSerial>:
	...
   dad50:	9085 000d 90d5 000d 90e3 000d 8a51 000d     ............Q...
   dad60:	9099 000d 90bb 000d 90a7 000d 90cf 000d     ................
   dad70:	9087 000d 908b 000d                         ........

000dad78 <_ZTV9USBSerial>:
	...
   dad80:	918d 000d 91dd 000d 91eb 000d 8a51 000d     ............Q...
   dad90:	91c9 000d 918f 000d 91a5 000d 91d7 000d     ................
   dada0:	91bb 000d 9189 000d                         ........

000dada8 <_ZSt7nothrow>:
	...

000dada9 <_ctype_>:
   dada9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dadb9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dadc9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dadd9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dade9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dadf9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dae09:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dae19:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dae29:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000daeac <__sf_fake_stdin>:
	...

000daecc <__sf_fake_stdout>:
	...

000daeec <__sf_fake_stderr>:
	...
   daf0c:	0043 0000                                   C...

000daf10 <__month_lengths>:
   daf10:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   daf20:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daf30:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daf40:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   daf50:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daf60:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daf70:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   daf80:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   daf90:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dafa0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dafac <link_const_variable_data_end>:
   dafac:	000d4e15 	.word	0x000d4e15
   dafb0:	000d4fe1 	.word	0x000d4fe1
   dafb4:	000d56f1 	.word	0x000d56f1
   dafb8:	000d5df1 	.word	0x000d5df1
   dafbc:	000d5e15 	.word	0x000d5e15
   dafc0:	000d5e19 	.word	0x000d5e19
   dafc4:	000d613d 	.word	0x000d613d
   dafc8:	000d6141 	.word	0x000d6141
   dafcc:	000d6145 	.word	0x000d6145
   dafd0:	000d6149 	.word	0x000d6149
   dafd4:	000d614d 	.word	0x000d614d
   dafd8:	000d6687 	.word	0x000d6687
   dafdc:	000d668b 	.word	0x000d668b
   dafe0:	000d668f 	.word	0x000d668f
   dafe4:	000d6735 	.word	0x000d6735
   dafe8:	000d6739 	.word	0x000d6739
   dafec:	000d673d 	.word	0x000d673d
   daff0:	000d84c5 	.word	0x000d84c5
   daff4:	000d8555 	.word	0x000d8555
   daff8:	000d8601 	.word	0x000d8601
   daffc:	000d877d 	.word	0x000d877d
   db000:	000d88b9 	.word	0x000d88b9
   db004:	000d8a3d 	.word	0x000d8a3d
   db008:	000d8b79 	.word	0x000d8b79
   db00c:	000d8ee5 	.word	0x000d8ee5
   db010:	000d9071 	.word	0x000d9071
   db014:	000d952d 	.word	0x000d952d
   db018:	000d95f1 	.word	0x000d95f1
   db01c:	000d9675 	.word	0x000d9675
   db020:	000d96f9 	.word	0x000d96f9

000db024 <link_constructors_end>:
	...
