
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/1.5.2/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006994  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da9b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003d5dc  000da9b4  0001d5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000115c  2003d694  2003d694  0002d694  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000daa6c  000daa6c  0002aa6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000daa94  000daa94  0002aa94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001793dd  00000000  00000000  0002aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d0be  00000000  00000000  001a3e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028e1d  00000000  00000000  001c0f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002fb8  00000000  00000000  001e9d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005a30  00000000  00000000  001ecd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004acd7  00000000  00000000  001f2738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004e9ef  00000000  00000000  0023d40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010f2a3  00000000  00000000  0028bdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ee38  00000000  00000000  0039b0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fad8 	bl	d95e2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 faf8 	bl	d962e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d5dc 	.word	0x2003d5dc
   d4048:	000da9b4 	.word	0x000da9b4
   d404c:	2003d694 	.word	0x2003d694
   d4050:	2003d694 	.word	0x2003d694
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fbf7 	bl	d884c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da9a8 	.word	0x000da9a8
   d4080:	000da930 	.word	0x000da930

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8e8 	b.w	d4258 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcb5 	bl	d49f8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 bb9d 	b.w	d87d0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bca3 	b.w	d69e0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 bca9 	b.w	d69f0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bca7 	b.w	d69f0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b2:	7c03      	ldrb	r3, [r0, #16]
   d40b4:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40b8:	4602      	mov	r2, r0
   d40ba:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40be:	b12b      	cbz	r3, d40cc <_ZN4File9availableEv+0x1a>
   d40c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c2:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c4:	1a18      	subs	r0, r3, r0
   d40c6:	bf48      	it	mi
   d40c8:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40cc:	4770      	bx	lr

000d40ce <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40ce:	4770      	bx	lr

000d40d0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d2:	4602      	mov	r2, r0
   d40d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40d6:	7913      	ldrb	r3, [r2, #4]
   d40d8:	6895      	ldr	r5, [r2, #8]
   d40da:	b133      	cbz	r3, d40ea <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40dc:	b93d      	cbnz	r5, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40de:	490c      	ldr	r1, [pc, #48]	; (d4110 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e0:	b004      	add	sp, #16
   d40e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40e6:	f004 b9ff 	b.w	d84e8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ea:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40ec:	e000      	b.n	d40f0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f0:	7b16      	ldrb	r6, [r2, #12]
   d40f2:	4c0a      	ldr	r4, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f4:	490a      	ldr	r1, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40f6:	7b52      	ldrb	r2, [r2, #13]
   d40f8:	9202      	str	r2, [sp, #8]
   d40fa:	2e01      	cmp	r6, #1
   d40fc:	bf08      	it	eq
   d40fe:	4621      	moveq	r1, r4
   d4100:	9101      	str	r1, [sp, #4]
   d4102:	9500      	str	r5, [sp, #0]
   d4104:	4a07      	ldr	r2, [pc, #28]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4106:	2100      	movs	r1, #0
   d4108:	f004 fa2b 	bl	d8562 <_ZN5Print11printf_implEbPKcz>
  }
   d410c:	b004      	add	sp, #16
   d410e:	bd70      	pop	{r4, r5, r6, pc}
   d4110:	000d9ef7 	.word	0x000d9ef7
   d4114:	000da590 	.word	0x000da590
   d4118:	000d9ee6 	.word	0x000d9ee6
   d411c:	000d9eef 	.word	0x000d9eef
   d4120:	000d9ef3 	.word	0x000d9ef3
   d4124:	000d9f0d 	.word	0x000d9f0d

000d4128 <_Z14dataLTEHandlerPKcS0_>:
std::vector<WaterBot> WaterBots;

void BLEScan(int BotNumber = -1);
void dataLTEHandler(const char *event, const char *data);

void dataLTEHandler(const char *event, const char *data){
   d4128:	b510      	push	{r4, lr}
   d412a:	460c      	mov	r4, r1
    Serial.print("LTE Data Received\n");
   d412c:	f004 fc8e 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4130:	4905      	ldr	r1, [pc, #20]	; (d4148 <_Z14dataLTEHandlerPKcS0_+0x20>)
   d4132:	f004 f9d9 	bl	d84e8 <_ZN5Print5printEPKc>
    Serial.printf("%s\n", data);
   d4136:	f004 fc89 	bl	d8a4c <_Z16_fetch_usbserialv>
   d413a:	4623      	mov	r3, r4
   d413c:	4a03      	ldr	r2, [pc, #12]	; (d414c <_Z14dataLTEHandlerPKcS0_+0x24>)
   d413e:	2100      	movs	r1, #0
}
   d4140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4144:	f004 ba0d 	b.w	d8562 <_ZN5Print11printf_implEbPKcz>
   d4148:	000d9f2b 	.word	0x000d9f2b
   d414c:	000d9f3e 	.word	0x000d9f3e

000d4150 <_ZN4FileD0Ev>:
   d4150:	b510      	push	{r4, lr}
   d4152:	2134      	movs	r1, #52	; 0x34
   d4154:	4604      	mov	r4, r0
   d4156:	f004 ffd3 	bl	d9100 <_ZdlPvj>
   d415a:	4620      	mov	r0, r4
   d415c:	bd10      	pop	{r4, pc}

000d415e <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d415e:	3010      	adds	r0, #16
   d4160:	f001 bb32 	b.w	d57c8 <_ZN7FatFile4syncEv>

000d4164 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4164:	3010      	adds	r0, #16
   d4166:	f001 ba47 	b.w	d55f8 <_ZN7FatFile4peekEv>

000d416a <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d416a:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d416c:	2201      	movs	r2, #1
   d416e:	f10d 0107 	add.w	r1, sp, #7
   d4172:	3010      	adds	r0, #16
   d4174:	f001 f98d 	bl	d5492 <_ZN7FatFile4readEPvj>
   d4178:	2801      	cmp	r0, #1
   d417a:	bf0c      	ite	eq
   d417c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4180:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4184:	b003      	add	sp, #12
   d4186:	f85d fb04 	ldr.w	pc, [sp], #4

000d418a <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d418a:	3010      	adds	r0, #16
   d418c:	f001 bbbc 	b.w	d5908 <_ZN7FatFile5writeEPKvj>

000d4190 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4190:	b507      	push	{r0, r1, r2, lr}
   d4192:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4194:	2201      	movs	r2, #1
   d4196:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d419a:	3010      	adds	r0, #16
   d419c:	4619      	mov	r1, r3
   d419e:	f001 fbb3 	bl	d5908 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d41a2:	b003      	add	sp, #12
   d41a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f002 fc1e 	bl	d69f0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d41b8:	b510      	push	{r4, lr}
   d41ba:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d41bc:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d41be:	b108      	cbz	r0, d41c4 <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d41c0:	f7ff ff6b 	bl	d409a <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d41c4:	4620      	mov	r0, r4
   d41c6:	bd10      	pop	{r4, pc}

000d41c8 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d41c8:	4613      	mov	r3, r2
   d41ca:	460a      	mov	r2, r1
   d41cc:	4901      	ldr	r1, [pc, #4]	; (d41d4 <_ZN7FatFile4openEPKci+0xc>)
   d41ce:	6809      	ldr	r1, [r1, #0]
   d41d0:	f001 bb37 	b.w	d5842 <_ZN7FatFile4openEPS_PKci>
   d41d4:	2003e338 	.word	0x2003e338

000d41d8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41d8:	b530      	push	{r4, r5, lr}
   d41da:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41dc:	4b1c      	ldr	r3, [pc, #112]	; (d4250 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d41de:	9300      	str	r3, [sp, #0]
   d41e0:	7913      	ldrb	r3, [r2, #4]
   d41e2:	f88d 3004 	strb.w	r3, [sp, #4]
   d41e6:	6893      	ldr	r3, [r2, #8]
   d41e8:	9302      	str	r3, [sp, #8]
   d41ea:	7b13      	ldrb	r3, [r2, #12]
   d41ec:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41f0:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41f4:	7b53      	ldrb	r3, [r2, #13]
   d41f6:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41fa:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41fc:	460a      	mov	r2, r1
   d41fe:	466b      	mov	r3, sp
   d4200:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4204:	4628      	mov	r0, r5
   d4206:	f001 fec7 	bl	d5f98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d420a:	b1f0      	cbz	r0, d424a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d420c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d420e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4212:	4628      	mov	r0, r5
   d4214:	f001 fb0e 	bl	d5834 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4218:	2101      	movs	r1, #1
   d421a:	4620      	mov	r0, r4
   d421c:	f001 fd65 	bl	d5cea <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4220:	4601      	mov	r1, r0
   d4222:	b168      	cbz	r0, d4240 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4224:	4621      	mov	r1, r4
   d4226:	4628      	mov	r0, r5
   d4228:	f001 f91b 	bl	d5462 <_ZN7FatFile8openRootEP9FatVolume>
   d422c:	b168      	cbz	r0, d424a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d422e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4232:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4236:	bf16      	itet	ne
   d4238:	4b06      	ldrne	r3, [pc, #24]	; (d4254 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d423a:	4618      	moveq	r0, r3
   d423c:	601d      	strne	r5, [r3, #0]
   d423e:	e005      	b.n	d424c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4240:	4620      	mov	r0, r4
   d4242:	f001 fd52 	bl	d5cea <_ZN9FatVolume4initEh>
   d4246:	2800      	cmp	r0, #0
   d4248:	d1ec      	bne.n	d4224 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d424a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d424c:	b005      	add	sp, #20
   d424e:	bd30      	pop	{r4, r5, pc}
   d4250:	000d9e9c 	.word	0x000d9e9c
   d4254:	2003e338 	.word	0x2003e338

000d4258 <setup>:

void setup() {
   d4258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d425c:	b08f      	sub	sp, #60	; 0x3c

    Serial.begin(115200);
   d425e:	f004 fbf5 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4262:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4266:	f004 fbe5 	bl	d8a34 <_ZN9USBSerial5beginEl>
    pinMode(A0, INPUT_PULLDOWN);
   d426a:	2103      	movs	r1, #3
   d426c:	2013      	movs	r0, #19
   d426e:	f004 febb 	bl	d8fe8 <pinMode>
    pinMode(D7, OUTPUT);
   d4272:	2101      	movs	r1, #1
   d4274:	2007      	movs	r0, #7
   d4276:	f004 feb7 	bl	d8fe8 <pinMode>
	BLE.on();
   d427a:	f003 fa05 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d427e:	f003 fa49 	bl	d7714 <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d4282:	4a2d      	ldr	r2, [pc, #180]	; (d4338 <setup+0xe0>)
   d4284:	492d      	ldr	r1, [pc, #180]	; (d433c <setup+0xe4>)
    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;

    logMessages = true;
   d4286:	4d2e      	ldr	r5, [pc, #184]	; (d4340 <setup+0xe8>)

    Serial.begin(115200);
    pinMode(A0, INPUT_PULLDOWN);
    pinMode(D7, OUTPUT);
	BLE.on();
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d4288:	4610      	mov	r0, r2
   d428a:	f003 f92f 	bl	d74ec <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   d428e:	4a2d      	ldr	r2, [pc, #180]	; (d4344 <setup+0xec>)
   d4290:	492d      	ldr	r1, [pc, #180]	; (d4348 <setup+0xf0>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4292:	2400      	movs	r4, #0
   d4294:	4610      	mov	r0, r2
   d4296:	f003 f929 	bl	d74ec <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d429a:	4622      	mov	r2, r4
   d429c:	492b      	ldr	r1, [pc, #172]	; (d434c <setup+0xf4>)
   d429e:	9401      	str	r4, [sp, #4]
   d42a0:	9400      	str	r4, [sp, #0]
   d42a2:	2301      	movs	r3, #1
   d42a4:	482a      	ldr	r0, [pc, #168]	; (d4350 <setup+0xf8>)
   d42a6:	f002 fb83 	bl	d69b0 <spark_subscribe>

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
   d42aa:	4b2a      	ldr	r3, [pc, #168]	; (d4354 <setup+0xfc>)
   d42ac:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   d42ae:	4b2a      	ldr	r3, [pc, #168]	; (d4358 <setup+0x100>)

    logMessages = true;
   d42b0:	2601      	movs	r6, #1
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;
   d42b2:	701c      	strb	r4, [r3, #0]

    logMessages = true;
   d42b4:	702e      	strb	r6, [r5, #0]

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d42b6:	f004 fa31 	bl	d871c <_ZN9TimeClass5monthEv>
   d42ba:	4607      	mov	r7, r0
   d42bc:	f004 fa24 	bl	d8708 <_ZN9TimeClass3dayEv>
   d42c0:	4680      	mov	r8, r0
   d42c2:	f004 fa33 	bl	d872c <_ZN9TimeClass4yearEv>
   d42c6:	4681      	mov	r9, r0
   d42c8:	f004 fa00 	bl	d86cc <_ZN9TimeClass4hourEv>
   d42cc:	4682      	mov	sl, r0
   d42ce:	f004 fa07 	bl	d86e0 <_ZN9TimeClass6minuteEv>
   d42d2:	4683      	mov	fp, r0
   d42d4:	f004 fa0e 	bl	d86f4 <_ZN9TimeClass6secondEv>
   d42d8:	463b      	mov	r3, r7
   d42da:	4a20      	ldr	r2, [pc, #128]	; (d435c <setup+0x104>)
   d42dc:	9004      	str	r0, [sp, #16]
   d42de:	2110      	movs	r1, #16
   d42e0:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d42e4:	a806      	add	r0, sp, #24
   d42e6:	f002 fb9b 	bl	d6a20 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   d42ea:	491d      	ldr	r1, [pc, #116]	; (d4360 <setup+0x108>)
   d42ec:	481d      	ldr	r0, [pc, #116]	; (d4364 <setup+0x10c>)
   d42ee:	f005 f9e8 	bl	d96c2 <strcpy>
    strcat(filenameMessages,timestamp);
   d42f2:	a906      	add	r1, sp, #24
   d42f4:	481b      	ldr	r0, [pc, #108]	; (d4364 <setup+0x10c>)
   d42f6:	f005 f9cb 	bl	d9690 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d42fa:	491b      	ldr	r1, [pc, #108]	; (d4368 <setup+0x110>)
   d42fc:	4819      	ldr	r0, [pc, #100]	; (d4364 <setup+0x10c>)
   d42fe:	f005 f9c7 	bl	d9690 <strcat>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4302:	4b1a      	ldr	r3, [pc, #104]	; (d436c <setup+0x114>)
   d4304:	930a      	str	r3, [sp, #40]	; 0x28
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
    BLE.addCharacteristic(rxCharacteristic);
    advData.appendServiceUUID(RemoteService); // Add the app service
    advData.appendLocalName("RemoteTest");           //Local advertising name
    BLE.advertise(&advData);                    //Start advertising the characteristics*/
    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d4306:	aa0a      	add	r2, sp, #40	; 0x28
   d4308:	4b19      	ldr	r3, [pc, #100]	; (d4370 <setup+0x118>)
   d430a:	481a      	ldr	r0, [pc, #104]	; (d4374 <setup+0x11c>)
   d430c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   d4310:	2108      	movs	r1, #8
   d4312:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
   d4316:	930c      	str	r3, [sp, #48]	; 0x30
   d4318:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
   d431c:	f7ff ff5c 	bl	d41d8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d4320:	4604      	mov	r4, r0
   d4322:	b928      	cbnz	r0, d4330 <setup+0xd8>
        Serial.println("Error: could not connect to SD card!");
   d4324:	f004 fb92 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4328:	4913      	ldr	r1, [pc, #76]	; (d4378 <setup+0x120>)
   d432a:	f004 f8f0 	bl	d850e <_ZN5Print7printlnEPKc>
        logMessages = false;
   d432e:	702c      	strb	r4, [r5, #0]
    }
}
   d4330:	b00f      	add	sp, #60	; 0x3c
   d4332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4336:	bf00      	nop
   d4338:	2003d6ec 	.word	0x2003d6ec
   d433c:	000d44ed 	.word	0x000d44ed
   d4340:	2003d6a4 	.word	0x2003d6a4
   d4344:	2003e330 	.word	0x2003e330
   d4348:	000d456d 	.word	0x000d456d
   d434c:	000d4129 	.word	0x000d4129
   d4350:	000d9f42 	.word	0x000d9f42
   d4354:	2003d718 	.word	0x2003d718
   d4358:	2003d778 	.word	0x2003d778
   d435c:	000d9f4a 	.word	0x000d9f4a
   d4360:	000d9f63 	.word	0x000d9f63
   d4364:	2003d6f4 	.word	0x2003d6f4
   d4368:	000d9f6c 	.word	0x000d9f6c
   d436c:	000d9e9c 	.word	0x000d9e9c
   d4370:	003d0900 	.word	0x003d0900
   d4374:	2003dea8 	.word	0x2003dea8
   d4378:	000d9f75 	.word	0x000d9f75

000d437c <_Z14processCommandPKchb>:
    	}

    }
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d437c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4380:	b093      	sub	sp, #76	; 0x4c
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d4382:	7883      	ldrb	r3, [r0, #2]
   d4384:	2b41      	cmp	r3, #65	; 0x41
    	}

    }
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4386:	af00      	add	r7, sp, #0
   d4388:	4605      	mov	r5, r0
   d438a:	4689      	mov	r9, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d438c:	d102      	bne.n	d4394 <_Z14processCommandPKchb+0x18>
   d438e:	78c3      	ldrb	r3, [r0, #3]
   d4390:	2b42      	cmp	r3, #66	; 0x42
   d4392:	e004      	b.n	d439e <_Z14processCommandPKchb+0x22>
   d4394:	2b43      	cmp	r3, #67	; 0x43
   d4396:	f040 8083 	bne.w	d44a0 <_Z14processCommandPKchb+0x124>
   d439a:	78c3      	ldrb	r3, [r0, #3]
   d439c:	2b43      	cmp	r3, #67	; 0x43
   d439e:	d17f      	bne.n	d44a0 <_Z14processCommandPKchb+0x124>
        char dataStr[strlen(command)-7];
   d43a0:	4628      	mov	r0, r5
   d43a2:	f005 f996 	bl	d96d2 <strlen>
   d43a6:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d43aa:	46e8      	mov	r8, sp
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        char dataStr[strlen(command)-7];
   d43ac:	ebad 0d00 	sub.w	sp, sp, r0
   d43b0:	466e      	mov	r6, sp
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
   d43b2:	2404      	movs	r4, #4
   d43b4:	4628      	mov	r0, r5
   d43b6:	f005 f98c 	bl	d96d2 <strlen>
   d43ba:	4284      	cmp	r4, r0
   d43bc:	d211      	bcs.n	d43e2 <_Z14processCommandPKchb+0x66>
            if(i < 7) cmdStr[i-4] = command[i];
   d43be:	2c06      	cmp	r4, #6
   d43c0:	bf9b      	ittet	ls
   d43c2:	f107 0348 	addls.w	r3, r7, #72	; 0x48
   d43c6:	191b      	addls	r3, r3, r4
            else dataStr[i-7] = command[i];
   d43c8:	1933      	addhi	r3, r6, r4
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d43ca:	5d2a      	ldrbls	r2, [r5, r4]
            else dataStr[i-7] = command[i];
   d43cc:	bf8c      	ite	hi
   d43ce:	5d2a      	ldrbhi	r2, [r5, r4]
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d43d0:	f803 2c48 	strbls.w	r2, [r3, #-72]
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
   d43d4:	f104 0401 	add.w	r4, r4, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d43d8:	bf88      	it	hi
   d43da:	f803 2c07 	strbhi.w	r2, [r3, #-7]
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
   d43de:	b2e4      	uxtb	r4, r4
   d43e0:	e7e8      	b.n	d43b4 <_Z14processCommandPKchb+0x38>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d43e2:	4931      	ldr	r1, [pc, #196]	; (d44a8 <_Z14processCommandPKchb+0x12c>)
   d43e4:	1d38      	adds	r0, r7, #4
   d43e6:	f005 f962 	bl	d96ae <strcmp>
   d43ea:	2800      	cmp	r0, #0
   d43ec:	d057      	beq.n	d449e <_Z14processCommandPKchb+0x122>
            else if(mode == 2){ //Acknowledge from BLE
                
            }
            return;
        }
        if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   d43ee:	492f      	ldr	r1, [pc, #188]	; (d44ac <_Z14processCommandPKchb+0x130>)
   d43f0:	1d38      	adds	r0, r7, #4
   d43f2:	f005 f95c 	bl	d96ae <strcmp>
   d43f6:	b940      	cbnz	r0, d440a <_Z14processCommandPKchb+0x8e>
            strncpy(errCmdStr,dataStr,3);
   d43f8:	2203      	movs	r2, #3
   d43fa:	4631      	mov	r1, r6
   d43fc:	482c      	ldr	r0, [pc, #176]	; (d44b0 <_Z14processCommandPKchb+0x134>)
   d43fe:	f005 f985 	bl	d970c <strncpy>
            errCmdMode = mode;
   d4402:	4b2c      	ldr	r3, [pc, #176]	; (d44b4 <_Z14processCommandPKchb+0x138>)
   d4404:	f883 9000 	strb.w	r9, [r3]
   d4408:	e049      	b.n	d449e <_Z14processCommandPKchb+0x122>
        }
        else if(!strcmp(cmdStr,"pts")){
   d440a:	492b      	ldr	r1, [pc, #172]	; (d44b8 <_Z14processCommandPKchb+0x13c>)
   d440c:	1d38      	adds	r0, r7, #4
   d440e:	f005 f94e 	bl	d96ae <strcmp>
   d4412:	4604      	mov	r4, r0
   d4414:	2800      	cmp	r0, #0
   d4416:	d142      	bne.n	d449e <_Z14processCommandPKchb+0x122>
            Serial.println(dataStr);
   d4418:	f004 fb18 	bl	d8a4c <_Z16_fetch_usbserialv>
   d441c:	4631      	mov	r1, r6
   d441e:	f004 f876 	bl	d850e <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   d4422:	f244 2202 	movw	r2, #16898	; 0x4202
   d4426:	4925      	ldr	r1, [pc, #148]	; (d44bc <_Z14processCommandPKchb+0x140>)
   d4428:	4825      	ldr	r0, [pc, #148]	; (d44c0 <_Z14processCommandPKchb+0x144>)
   d442a:	f7ff fecd 	bl	d41c8 <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d442e:	4925      	ldr	r1, [pc, #148]	; (d44c4 <_Z14processCommandPKchb+0x148>)
   d4430:	f107 0018 	add.w	r0, r7, #24
   d4434:	f002 fc71 	bl	d6d1a <_ZN6StringC1EPK19__FlashStringHelper>
   d4438:	4923      	ldr	r1, [pc, #140]	; (d44c8 <_Z14processCommandPKchb+0x14c>)
   d443a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d443e:	f002 fc6c 	bl	d6d1a <_ZN6StringC1EPK19__FlashStringHelper>
   d4442:	4922      	ldr	r1, [pc, #136]	; (d44cc <_Z14processCommandPKchb+0x150>)
   d4444:	f107 0038 	add.w	r0, r7, #56	; 0x38
   d4448:	f002 fc67 	bl	d6d1a <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   d444c:	f107 0318 	add.w	r3, r7, #24
   d4450:	eb03 1109 	add.w	r1, r3, r9, lsl #4
   d4454:	f107 0008 	add.w	r0, r7, #8
   d4458:	f002 fc81 	bl	d6d5e <_ZN6StringC1ERKS_>
   d445c:	f107 0308 	add.w	r3, r7, #8
   d4460:	4a1b      	ldr	r2, [pc, #108]	; (d44d0 <_Z14processCommandPKchb+0x154>)
   d4462:	481c      	ldr	r0, [pc, #112]	; (d44d4 <_Z14processCommandPKchb+0x158>)
   d4464:	4621      	mov	r1, r4
   d4466:	f004 f87c 	bl	d8562 <_ZN5Print11printf_implEbPKcz>
   d446a:	f107 0008 	add.w	r0, r7, #8
   d446e:	f002 fc0d 	bl	d6c8c <_ZN6StringD1Ev>
            myFile.println(dataStr);
   d4472:	4631      	mov	r1, r6
   d4474:	4817      	ldr	r0, [pc, #92]	; (d44d4 <_Z14processCommandPKchb+0x158>)
   d4476:	f004 f84a 	bl	d850e <_ZN5Print7printlnEPKc>
            delay(5);
   d447a:	2005      	movs	r0, #5
   d447c:	f004 f96a 	bl	d8754 <delay>
            myFile.close();
   d4480:	480f      	ldr	r0, [pc, #60]	; (d44c0 <_Z14processCommandPKchb+0x144>)
   d4482:	f001 f9d7 	bl	d5834 <_ZN7FatFile5closeEv>
            errCmdMode = mode;
        }
        else if(!strcmp(cmdStr,"pts")){
            Serial.println(dataStr);
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d4486:	f107 0038 	add.w	r0, r7, #56	; 0x38
   d448a:	f002 fbff 	bl	d6c8c <_ZN6StringD1Ev>
   d448e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4492:	f002 fbfb 	bl	d6c8c <_ZN6StringD1Ev>
   d4496:	f107 0018 	add.w	r0, r7, #24
   d449a:	f002 fbf7 	bl	d6c8c <_ZN6StringD1Ev>

            }
            else if(mode == 2){ //Acknowledge from BLE
                
            }
            return;
   d449e:	46c5      	mov	sp, r8
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d44a0:	374c      	adds	r7, #76	; 0x4c
   d44a2:	46bd      	mov	sp, r7
   d44a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44a8:	000d9f9a 	.word	0x000d9f9a
   d44ac:	000d9f9e 	.word	0x000d9f9e
   d44b0:	2003d7e2 	.word	0x2003d7e2
   d44b4:	2003d6b4 	.word	0x2003d6b4
   d44b8:	000d9fa2 	.word	0x000d9fa2
   d44bc:	000d9fa6 	.word	0x000d9fa6
   d44c0:	2003d6c8 	.word	0x2003d6c8
   d44c4:	000d9fb3 	.word	0x000d9fb3
   d44c8:	000d9fb7 	.word	0x000d9fb7
   d44cc:	000d9fbc 	.word	0x000d9fbc
   d44d0:	000d9fc6 	.word	0x000d9fc6
   d44d4:	2003d6b8 	.word	0x2003d6b8

000d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d44d8:	4613      	mov	r3, r2
   d44da:	460a      	mov	r2, r1
   d44dc:	2101      	movs	r1, #1
   d44de:	f004 b840 	b.w	d8562 <_ZN5Print11printf_implEbPKcz>

000d44e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
   d44e2:	4613      	mov	r3, r2
   d44e4:	460a      	mov	r2, r1
   d44e6:	2101      	movs	r1, #1
   d44e8:	f004 b83b 	b.w	d8562 <_ZN5Print11printf_implEbPKcz>

000d44ec <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d44ec:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len];
   d44ee:	1dcb      	adds	r3, r1, #7
   d44f0:	f023 0307 	bic.w	r3, r3, #7
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d44f4:	af00      	add	r7, sp, #0
    char btBuf[len];
   d44f6:	ebad 0d03 	sub.w	sp, sp, r3
   d44fa:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d44fc:	2300      	movs	r3, #0
   d44fe:	428b      	cmp	r3, r1
   d4500:	d003      	beq.n	d450a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
   d4502:	5cc2      	ldrb	r2, [r0, r3]
   d4504:	54e2      	strb	r2, [r4, r3]
   d4506:	3301      	adds	r3, #1
   d4508:	e7f9      	b.n	d44fe <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
    Serial.println("New BT Command:");
   d450a:	f004 fa9f 	bl	d8a4c <_Z16_fetch_usbserialv>
   d450e:	4911      	ldr	r1, [pc, #68]	; (d4554 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   d4510:	f003 fffd 	bl	d850e <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   d4514:	f004 fa9a 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4518:	4621      	mov	r1, r4
   d451a:	f003 fff8 	bl	d850e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d451e:	2201      	movs	r2, #1
   d4520:	4611      	mov	r1, r2
   d4522:	4620      	mov	r0, r4
   d4524:	f7ff ff2a 	bl	d437c <_Z14processCommandPKchb>
    if(logMessages){
   d4528:	4b0b      	ldr	r3, [pc, #44]	; (d4558 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   d452a:	781b      	ldrb	r3, [r3, #0]
   d452c:	b183      	cbz	r3, d4550 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   d452e:	480b      	ldr	r0, [pc, #44]	; (d455c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4530:	7c03      	ldrb	r3, [r0, #16]
   d4532:	b92b      	cbnz	r3, d4540 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>
   d4534:	f244 2202 	movw	r2, #16898	; 0x4202
   d4538:	4909      	ldr	r1, [pc, #36]	; (d4560 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   d453a:	3010      	adds	r0, #16
   d453c:	f7ff fe44 	bl	d41c8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4540:	4622      	mov	r2, r4
   d4542:	4908      	ldr	r1, [pc, #32]	; (d4564 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d4544:	4805      	ldr	r0, [pc, #20]	; (d455c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   d4546:	f7ff ffcc 	bl	d44e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d454a:	4807      	ldr	r0, [pc, #28]	; (d4568 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d454c:	f001 f972 	bl	d5834 <_ZN7FatFile5closeEv>
    }
}
   d4550:	46bd      	mov	sp, r7
   d4552:	bd98      	pop	{r3, r4, r7, pc}
   d4554:	000d9fdb 	.word	0x000d9fdb
   d4558:	2003d6a4 	.word	0x2003d6a4
   d455c:	2003d77c 	.word	0x2003d77c
   d4560:	2003d6f4 	.word	0x2003d6f4
   d4564:	000d9feb 	.word	0x000d9feb
   d4568:	2003d78c 	.word	0x2003d78c

000d456c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d456c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d456e:	b095      	sub	sp, #84	; 0x54
   d4570:	4604      	mov	r4, r0
   d4572:	af00      	add	r7, sp, #0
   d4574:	460e      	mov	r6, r1
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   d4576:	2226      	movs	r2, #38	; 0x26
   d4578:	2100      	movs	r1, #0
   d457a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d457e:	f005 f856 	bl	d962e <memset>
    memcpy(fileCommand,data,8);
   d4582:	6820      	ldr	r0, [r4, #0]
   d4584:	6861      	ldr	r1, [r4, #4]
   d4586:	f107 0328 	add.w	r3, r7, #40	; 0x28
   d458a:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   d458c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d4590:	2b66      	cmp	r3, #102	; 0x66
        }
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
   d4592:	466d      	mov	r5, sp

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
    memcpy(fileCommand,data,8);
    if(fileCommand[0] == 'f'){
   d4594:	d16a      	bne.n	d466c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
        //Serial.printlnf("Found an 'f' command %s",fileCommand);
        if(!strcmp(fileCommand,"filename")){
   d4596:	4941      	ldr	r1, [pc, #260]	; (d469c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   d4598:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d459c:	f005 f887 	bl	d96ae <strcmp>
   d45a0:	2800      	cmp	r0, #0
   d45a2:	d141      	bne.n	d4628 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   d45a4:	483e      	ldr	r0, [pc, #248]	; (d46a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d45a6:	7c03      	ldrb	r3, [r0, #16]
   d45a8:	b113      	cbz	r3, d45b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   d45aa:	3010      	adds	r0, #16
   d45ac:	f001 f942 	bl	d5834 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   d45b0:	4623      	mov	r3, r4
   d45b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   d45b6:	f104 0620 	add.w	r6, r4, #32
   d45ba:	6818      	ldr	r0, [r3, #0]
   d45bc:	6859      	ldr	r1, [r3, #4]
   d45be:	4614      	mov	r4, r2
   d45c0:	c403      	stmia	r4!, {r0, r1}
   d45c2:	3308      	adds	r3, #8
   d45c4:	42b3      	cmp	r3, r6
   d45c6:	4622      	mov	r2, r4
   d45c8:	d1f7      	bne.n	d45ba <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   d45ca:	6818      	ldr	r0, [r3, #0]
   d45cc:	6020      	str	r0, [r4, #0]
   d45ce:	889b      	ldrh	r3, [r3, #4]
   d45d0:	80a3      	strh	r3, [r4, #4]
            memset(offloadFilename,0,MAX_FILENAME_LEN);
   d45d2:	221e      	movs	r2, #30
   d45d4:	2100      	movs	r1, #0
   d45d6:	4833      	ldr	r0, [pc, #204]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45d8:	f005 f829 	bl	d962e <memset>
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   d45dc:	221e      	movs	r2, #30
   d45de:	f107 0130 	add.w	r1, r7, #48	; 0x30
   d45e2:	4830      	ldr	r0, [pc, #192]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45e4:	f005 f892 	bl	d970c <strncpy>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45e8:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d45ea:	4a2e      	ldr	r2, [pc, #184]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45ec:	492e      	ldr	r1, [pc, #184]	; (d46a8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45ee:	713b      	strb	r3, [r7, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d45f0:	1d38      	adds	r0, r7, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45f2:	717b      	strb	r3, [r7, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d45f4:	f001 f925 	bl	d5842 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   d45f8:	b148      	cbz	r0, d460e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   d45fa:	f004 fa27 	bl	d8a4c <_Z16_fetch_usbserialv>
   d45fe:	492b      	ldr	r1, [pc, #172]	; (d46ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   d4600:	4a28      	ldr	r2, [pc, #160]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4602:	f7ff ff6e 	bl	d44e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d4606:	4927      	ldr	r1, [pc, #156]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4608:	4827      	ldr	r0, [pc, #156]	; (d46a8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   d460a:	f001 f969 	bl	d58e0 <_ZN7FatFile6removeEPS_PKc>
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   d460e:	f004 fa1d 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4612:	4a24      	ldr	r2, [pc, #144]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4614:	4926      	ldr	r1, [pc, #152]	; (d46b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   d4616:	f7ff ff64 	bl	d44e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   d461a:	f244 2202 	movw	r2, #16898	; 0x4202
   d461e:	4921      	ldr	r1, [pc, #132]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4620:	4824      	ldr	r0, [pc, #144]	; (d46b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d4622:	f7ff fdd1 	bl	d41c8 <_ZN7FatFile4openEPKci>
            return;
   d4626:	e034      	b.n	d4692 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
        }
        else if(!strcmp(fileCommand,"filecomp")){
   d4628:	4923      	ldr	r1, [pc, #140]	; (d46b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   d462a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d462e:	f005 f83e 	bl	d96ae <strcmp>
   d4632:	b960      	cbnz	r0, d464e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe2>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   d4634:	f004 fa0a 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4638:	4a1a      	ldr	r2, [pc, #104]	; (d46a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d463a:	4920      	ldr	r1, [pc, #128]	; (d46bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   d463c:	f7ff ff51 	bl	d44e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4640:	4b17      	ldr	r3, [pc, #92]	; (d46a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d4642:	7c1b      	ldrb	r3, [r3, #16]
   d4644:	b32b      	cbz	r3, d4692 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
   d4646:	481b      	ldr	r0, [pc, #108]	; (d46b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d4648:	f001 f8f4 	bl	d5834 <_ZN7FatFile5closeEv>
   d464c:	e021      	b.n	d4692 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
            return;
        }
        else if(!strcmp(fileCommand,"filedone")){
   d464e:	491c      	ldr	r1, [pc, #112]	; (d46c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   d4650:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4654:	f005 f82b 	bl	d96ae <strcmp>
   d4658:	b940      	cbnz	r0, d466c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
            Serial.println("Received done command");
   d465a:	f004 f9f7 	bl	d8a4c <_Z16_fetch_usbserialv>
   d465e:	4919      	ldr	r1, [pc, #100]	; (d46c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   d4660:	f003 ff55 	bl	d850e <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   d4664:	4b18      	ldr	r3, [pc, #96]	; (d46c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   d4666:	2201      	movs	r2, #1
   d4668:	701a      	strb	r2, [r3, #0]
   d466a:	e7e9      	b.n	d4640 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd4>
            if(myFile.isOpen()) myFile.close();
            return;
        }
    }
    char dataStr[len];
   d466c:	1df3      	adds	r3, r6, #7
   d466e:	f023 0307 	bic.w	r3, r3, #7
   d4672:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   d4676:	4632      	mov	r2, r6
   d4678:	4621      	mov	r1, r4
   d467a:	4668      	mov	r0, sp
   d467c:	f004 ffb1 	bl	d95e2 <memcpy>
    myFile.print(dataStr);
   d4680:	4669      	mov	r1, sp
   d4682:	4807      	ldr	r0, [pc, #28]	; (d46a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   d4684:	f003 ff30 	bl	d84e8 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   d4688:	f004 f9e0 	bl	d8a4c <_Z16_fetch_usbserialv>
   d468c:	4669      	mov	r1, sp
   d468e:	f003 ff3e 	bl	d850e <_ZN5Print7printlnEPKc>
}
   d4692:	3754      	adds	r7, #84	; 0x54
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
            return;
   d4694:	46ad      	mov	sp, r5
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4696:	46bd      	mov	sp, r7
   d4698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d469a:	bf00      	nop
   d469c:	000da00b 	.word	0x000da00b
   d46a0:	2003d6b8 	.word	0x2003d6b8
   d46a4:	2003d7c4 	.word	0x2003d7c4
   d46a8:	2003e2e4 	.word	0x2003e2e4
   d46ac:	000da014 	.word	0x000da014
   d46b0:	000da047 	.word	0x000da047
   d46b4:	2003d6c8 	.word	0x2003d6c8
   d46b8:	000da064 	.word	0x000da064
   d46bc:	000da06d 	.word	0x000da06d
   d46c0:	000da085 	.word	0x000da085
   d46c4:	000da08e 	.word	0x000da08e
   d46c8:	2003d778 	.word	0x2003d778

000d46cc <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d46cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d46d0:	6843      	ldr	r3, [r0, #4]
   d46d2:	6804      	ldr	r4, [r0, #0]
   d46d4:	1b1c      	subs	r4, r3, r4
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d46d6:	1124      	asrs	r4, r4, #4
   d46d8:	bf14      	ite	ne
   d46da:	4623      	movne	r3, r4
   d46dc:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d46de:	18e4      	adds	r4, r4, r3
   d46e0:	4606      	mov	r6, r0
   d46e2:	4689      	mov	r9, r1
   d46e4:	d202      	bcs.n	d46ec <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x20>
   d46e6:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   d46ea:	d327      	bcc.n	d473c <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x70>
   d46ec:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d46f0:	0120      	lsls	r0, r4, #4
   d46f2:	f7ff fcd0 	bl	d4096 <_Znwj>
   d46f6:	4607      	mov	r7, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d46f8:	f8d6 8000 	ldr.w	r8, [r6]
   d46fc:	6875      	ldr	r5, [r6, #4]
   d46fe:	ebc8 0505 	rsb	r5, r8, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4702:	eb17 0e05 	adds.w	lr, r7, r5
   d4706:	bf1c      	itt	ne
   d4708:	e899 000f 	ldmiane.w	r9, {r0, r1, r2, r3}
   d470c:	e88e 000f 	stmiane.w	lr, {r0, r1, r2, r3}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4710:	092b      	lsrs	r3, r5, #4
   d4712:	d004      	beq.n	d471e <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x52>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4714:	462a      	mov	r2, r5
   d4716:	4641      	mov	r1, r8
   d4718:	4638      	mov	r0, r7
   d471a:	f004 ff6d 	bl	d95f8 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d471e:	3510      	adds	r5, #16
   d4720:	443d      	add	r5, r7

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4722:	f1b8 0f00 	cmp.w	r8, #0
   d4726:	d002      	beq.n	d472e <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x62>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4728:	4640      	mov	r0, r8
   d472a:	f7ff fcb6 	bl	d409a <_ZdlPv>
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d472e:	eb07 1404 	add.w	r4, r7, r4, lsl #4
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4732:	6037      	str	r7, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
   d4734:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4736:	60b4      	str	r4, [r6, #8]
      }
   d4738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d473c:	2c00      	cmp	r4, #0
   d473e:	d1d7      	bne.n	d46f0 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d4740:	4627      	mov	r7, r4
   d4742:	e7d9      	b.n	d46f8 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2c>

000d4744 <_Z7BLEScani>:
        }

    }
}

void BLEScan(int BotNumber){
   d4744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4748:	b094      	sub	sp, #80	; 0x50
   d474a:	4680      	mov	r8, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d474c:	f002 ff9c 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4750:	2214      	movs	r2, #20
   d4752:	494c      	ldr	r1, [pc, #304]	; (d4884 <_Z7BLEScani+0x140>)
   d4754:	f002 ffee 	bl	d7734 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   d4758:	4607      	mov	r7, r0
   d475a:	2800      	cmp	r0, #0
   d475c:	f000 808e 	beq.w	d487c <_Z7BLEScani+0x138>
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4760:	f8df 9120 	ldr.w	r9, [pc, #288]	; d4884 <_Z7BLEScani+0x140>
   d4764:	2500      	movs	r5, #0
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4766:	b2ee      	uxtb	r6, r5
   d4768:	42b7      	cmp	r7, r6
   d476a:	f240 8087 	bls.w	d487c <_Z7BLEScani+0x138>
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d476e:	2454      	movs	r4, #84	; 0x54
   d4770:	fb04 9406 	mla	r4, r4, r6, r9

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4774:	a807      	add	r0, sp, #28
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4776:	3408      	adds	r4, #8

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4778:	f002 fbb4 	bl	d6ee4 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d477c:	2201      	movs	r2, #1
   d477e:	a907      	add	r1, sp, #28
   d4780:	4620      	mov	r0, r4
   d4782:	f002 fdb7 	bl	d72f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4786:	2208      	movs	r2, #8
void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4788:	4682      	mov	sl, r0
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d478a:	a901      	add	r1, sp, #4
   d478c:	483e      	ldr	r0, [pc, #248]	; (d4888 <_Z7BLEScani+0x144>)
   d478e:	f002 fd6f 	bl	d7270 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d4792:	f1ba 0f00 	cmp.w	sl, #0
   d4796:	d06f      	beq.n	d4878 <_Z7BLEScani+0x134>
   d4798:	493c      	ldr	r1, [pc, #240]	; (d488c <_Z7BLEScani+0x148>)
   d479a:	a807      	add	r0, sp, #28
   d479c:	f002 fc42 	bl	d7024 <_ZNK8particle7BleUuideqERKS0_>
   d47a0:	2800      	cmp	r0, #0
   d47a2:	d069      	beq.n	d4878 <_Z7BLEScani+0x134>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   d47a4:	f1b8 3fff 	cmp.w	r8, #4294967295
   d47a8:	d003      	beq.n	d47b2 <_Z7BLEScani+0x6e>
   d47aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d47ae:	4598      	cmp	r8, r3
   d47b0:	d162      	bne.n	d4878 <_Z7BLEScani+0x134>
				    peer = BLE.connect(scanResults[ii].address);
   d47b2:	f002 ff69 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d47b6:	4a33      	ldr	r2, [pc, #204]	; (d4884 <_Z7BLEScani+0x140>)
   d47b8:	2154      	movs	r1, #84	; 0x54
   d47ba:	fb01 2206 	mla	r2, r1, r6, r2
   d47be:	2301      	movs	r3, #1
   d47c0:	4601      	mov	r1, r0
   d47c2:	a80c      	add	r0, sp, #48	; 0x30
   d47c4:	f003 fcb6 	bl	d8134 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d47c8:	a90c      	add	r1, sp, #48	; 0x30
   d47ca:	4831      	ldr	r0, [pc, #196]	; (d4890 <_Z7BLEScani+0x14c>)
   d47cc:	f003 f8f1 	bl	d79b2 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d47d0:	a80c      	add	r0, sp, #48	; 0x30
   d47d2:	f003 f812 	bl	d77fa <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   d47d6:	482e      	ldr	r0, [pc, #184]	; (d4890 <_Z7BLEScani+0x14c>)
   d47d8:	f002 fef6 	bl	d75c8 <_ZNK8particle13BlePeerDevice9connectedEv>
   d47dc:	2800      	cmp	r0, #0
   d47de:	d04d      	beq.n	d487c <_Z7BLEScani+0x138>
                        uint8_t bufName[BLE_MAX_ADV_DATA_LEN];
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
   d47e0:	221f      	movs	r2, #31
   d47e2:	a90c      	add	r1, sp, #48	; 0x30
   d47e4:	4620      	mov	r0, r4
   d47e6:	f002 fd43 	bl	d7270 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d47ea:	4a2a      	ldr	r2, [pc, #168]	; (d4894 <_Z7BLEScani+0x150>)
   d47ec:	492a      	ldr	r1, [pc, #168]	; (d4898 <_Z7BLEScani+0x154>)
   d47ee:	4828      	ldr	r0, [pc, #160]	; (d4890 <_Z7BLEScani+0x14c>)
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   d47f0:	4c2a      	ldr	r4, [pc, #168]	; (d489c <_Z7BLEScani+0x158>)
   d47f2:	f003 f8ba 	bl	d796a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d47f6:	4a2a      	ldr	r2, [pc, #168]	; (d48a0 <_Z7BLEScani+0x15c>)
   d47f8:	492a      	ldr	r1, [pc, #168]	; (d48a4 <_Z7BLEScani+0x160>)
   d47fa:	4825      	ldr	r0, [pc, #148]	; (d4890 <_Z7BLEScani+0x14c>)
   d47fc:	f003 f8b5 	bl	d796a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   d4800:	4a29      	ldr	r2, [pc, #164]	; (d48a8 <_Z7BLEScani+0x164>)
   d4802:	492a      	ldr	r1, [pc, #168]	; (d48ac <_Z7BLEScani+0x168>)
   d4804:	4822      	ldr	r0, [pc, #136]	; (d4890 <_Z7BLEScani+0x14c>)
   d4806:	f003 f8b0 	bl	d796a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        if(bufName){
						    Serial.printlnf("Connected to Bot %d",bufName[0]);
   d480a:	f004 f91f 	bl	d8a4c <_Z16_fetch_usbserialv>
   d480e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   d4812:	4927      	ldr	r1, [pc, #156]	; (d48b0 <_Z7BLEScani+0x16c>)
   d4814:	f7ff fe60 	bl	d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
   d4818:	6865      	ldr	r5, [r4, #4]
                            bool newBot = true;
                            for(WaterBot w: WaterBots){
                                if(bufName[0] == w.botNum) newBot = false;
   d481a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d481e:	6822      	ldr	r2, [r4, #0]
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
                        if(bufName){
						    Serial.printlnf("Connected to Bot %d",bufName[0]);
                            bool newBot = true;
   d4820:	2301      	movs	r3, #1
                            for(WaterBot w: WaterBots){
   d4822:	4295      	cmp	r5, r2
   d4824:	d005      	beq.n	d4832 <_Z7BLEScani+0xee>
                                if(bufName[0] == w.botNum) newBot = false;
   d4826:	f812 0b10 	ldrb.w	r0, [r2], #16
   d482a:	4288      	cmp	r0, r1
   d482c:	bf08      	it	eq
   d482e:	2300      	moveq	r3, #0
   d4830:	e7f7      	b.n	d4822 <_Z7BLEScani+0xde>
                            }
                            if(newBot){
   d4832:	b31b      	cbz	r3, d487c <_Z7BLEScani+0x138>
                                Serial.println("Found a new water bot ID");
   d4834:	f004 f90a 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4838:	491e      	ldr	r1, [pc, #120]	; (d48b4 <_Z7BLEScani+0x170>)
   d483a:	f003 fe68 	bl	d850e <_ZN5Print7printlnEPKc>
                                WaterBot newWaterbot;
                                newWaterbot.BLEAvail = true;
   d483e:	2301      	movs	r3, #1
   d4840:	f88d 300e 	strb.w	r3, [sp, #14]
                                newWaterbot.botNum = bufName[0];
   d4844:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d4848:	f88d 300c 	strb.w	r3, [sp, #12]
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d484c:	6865      	ldr	r5, [r4, #4]
   d484e:	68a3      	ldr	r3, [r4, #8]
   d4850:	429d      	cmp	r5, r3
   d4852:	d008      	beq.n	d4866 <_Z7BLEScani+0x122>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4854:	b11d      	cbz	r5, d485e <_Z7BLEScani+0x11a>
   d4856:	ab03      	add	r3, sp, #12
   d4858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d485a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d485e:	6863      	ldr	r3, [r4, #4]
   d4860:	3310      	adds	r3, #16
   d4862:	6063      	str	r3, [r4, #4]
   d4864:	e003      	b.n	d486e <_Z7BLEScani+0x12a>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d4866:	a903      	add	r1, sp, #12
   d4868:	480c      	ldr	r0, [pc, #48]	; (d489c <_Z7BLEScani+0x158>)
   d486a:	f7ff ff2f 	bl	d46cc <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
                                WaterBots.push_back(newWaterbot);
                                BLEBot = &WaterBots.back();
   d486e:	6863      	ldr	r3, [r4, #4]
   d4870:	4a11      	ldr	r2, [pc, #68]	; (d48b8 <_Z7BLEScani+0x174>)
   d4872:	3b10      	subs	r3, #16
   d4874:	6013      	str	r3, [r2, #0]
                    break;
                }
			}
		}
	}
}
   d4876:	e001      	b.n	d487c <_Z7BLEScani+0x138>
   d4878:	3501      	adds	r5, #1
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d487a:	e774      	b.n	d4766 <_Z7BLEScani+0x22>
                    break;
                }
			}
		}
	}
}
   d487c:	b014      	add	sp, #80	; 0x50
   d487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4882:	bf00      	nop
   d4884:	2003d810 	.word	0x2003d810
   d4888:	2003d818 	.word	0x2003d818
   d488c:	2003d764 	.word	0x2003d764
   d4890:	2003dea0 	.word	0x2003dea0
   d4894:	2003d7b0 	.word	0x2003d7b0
   d4898:	2003d6ec 	.word	0x2003d6ec
   d489c:	2003d71c 	.word	0x2003d71c
   d48a0:	2003d7fc 	.word	0x2003d7fc
   d48a4:	2003d75c 	.word	0x2003d75c
   d48a8:	2003d7e8 	.word	0x2003d7e8
   d48ac:	2003e330 	.word	0x2003e330
   d48b0:	000da0a4 	.word	0x000da0a4
   d48b4:	000da0b8 	.word	0x000da0b8
   d48b8:	2003e32c 	.word	0x2003e32c

000d48bc <_Z13DataOffloaderv>:

void DataOffloader(){
   d48bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d48c0:	2200      	movs	r2, #0
			}
		}
	}
}

void DataOffloader(){
   d48c2:	b088      	sub	sp, #32
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d48c4:	493e      	ldr	r1, [pc, #248]	; (d49c0 <_Z13DataOffloaderv+0x104>)
   d48c6:	483f      	ldr	r0, [pc, #252]	; (d49c4 <_Z13DataOffloaderv+0x108>)
   d48c8:	f7ff fc7e 	bl	d41c8 <_ZN7FatFile4openEPKci>
   d48cc:	2401      	movs	r4, #1
   d48ce:	b120      	cbz	r0, d48da <_Z13DataOffloaderv+0x1e>
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
        peerRxCharacteristic.setValue(OffloadBuf,10);
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d48d0:	4d3d      	ldr	r5, [pc, #244]	; (d49c8 <_Z13DataOffloaderv+0x10c>)

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d48d2:	f8df 8120 	ldr.w	r8, [pc, #288]	; d49f4 <_Z13DataOffloaderv+0x138>
   d48d6:	462f      	mov	r7, r5
   d48d8:	e010      	b.n	d48fc <_Z13DataOffloaderv+0x40>
}

void DataOffloader(){
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
        offloadingDone = true;
   d48da:	4b3c      	ldr	r3, [pc, #240]	; (d49cc <_Z13DataOffloaderv+0x110>)
   d48dc:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   d48de:	f004 f8b5 	bl	d8a4c <_Z16_fetch_usbserialv>
   d48e2:	493b      	ldr	r1, [pc, #236]	; (d49d0 <_Z13DataOffloaderv+0x114>)
   d48e4:	f003 fe13 	bl	d850e <_ZN5Print7printlnEPKc>
        return;
   d48e8:	e067      	b.n	d49ba <_Z13DataOffloaderv+0xfe>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
        offloadingDone = false;
        while(!offloadingDone) delay(100);
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   d48ea:	f004 f8af 	bl	d8a4c <_Z16_fetch_usbserialv>
   d48ee:	683b      	ldr	r3, [r7, #0]
   d48f0:	4938      	ldr	r1, [pc, #224]	; (d49d4 <_Z13DataOffloaderv+0x118>)
   d48f2:	781a      	ldrb	r2, [r3, #0]
   d48f4:	f7ff fdf0 	bl	d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        OffloadingBot++;
   d48f8:	3401      	adds	r4, #1
   d48fa:	b2e4      	uxtb	r4, r4
    if (!logDir.open("/")) {
        offloadingDone = true;
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
        return;
    }
    while(OffloadingBot <= WaterBots.size()){
   d48fc:	e898 000c 	ldmia.w	r8, {r2, r3}
   d4900:	1a9b      	subs	r3, r3, r2
   d4902:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   d4906:	d852      	bhi.n	d49ae <_Z13DataOffloaderv+0xf2>
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   d4908:	ae02      	add	r6, sp, #8
   d490a:	4623      	mov	r3, r4
   d490c:	4a32      	ldr	r2, [pc, #200]	; (d49d8 <_Z13DataOffloaderv+0x11c>)
   d490e:	210a      	movs	r1, #10
   d4910:	4630      	mov	r0, r6
   d4912:	f002 f885 	bl	d6a20 <snprintf>
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d4916:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d491a:	ab05      	add	r3, sp, #20
   d491c:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d491e:	a905      	add	r1, sp, #20
    while(OffloadingBot <= WaterBots.size()){
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d4920:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d4922:	482e      	ldr	r0, [pc, #184]	; (d49dc <_Z13DataOffloaderv+0x120>)
   d4924:	2300      	movs	r3, #0
   d4926:	220a      	movs	r2, #10
   d4928:	f002 fd3e 	bl	d73a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d492c:	f004 f88e 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4930:	682b      	ldr	r3, [r5, #0]
   d4932:	492b      	ldr	r1, [pc, #172]	; (d49e0 <_Z13DataOffloaderv+0x124>)
   d4934:	781a      	ldrb	r2, [r3, #0]
   d4936:	f7ff fdcf 	bl	d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        delay(1000);
   d493a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d493e:	f003 ff09 	bl	d8754 <delay>
        if(BLEBot->botNum != OffloadingBot){
   d4942:	682b      	ldr	r3, [r5, #0]
   d4944:	781b      	ldrb	r3, [r3, #0]
   d4946:	42a3      	cmp	r3, r4
   d4948:	d01f      	beq.n	d498a <_Z13DataOffloaderv+0xce>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   d494a:	f004 f87f 	bl	d8a4c <_Z16_fetch_usbserialv>
   d494e:	682b      	ldr	r3, [r5, #0]
   d4950:	4a24      	ldr	r2, [pc, #144]	; (d49e4 <_Z13DataOffloaderv+0x128>)
   d4952:	781b      	ldrb	r3, [r3, #0]
   d4954:	9400      	str	r4, [sp, #0]
   d4956:	2101      	movs	r1, #1
   d4958:	f003 fe03 	bl	d8562 <_ZN5Print11printf_implEbPKcz>
            BLE.disconnect();
   d495c:	f002 fe94 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4960:	f003 f890 	bl	d7a84 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   d4964:	f002 fe90 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4968:	f002 ff0e 	bl	d7788 <_ZNK8particle14BleLocalDevice9connectedEv>
   d496c:	b930      	cbnz	r0, d497c <_Z13DataOffloaderv+0xc0>
                BLEScan(OffloadingBot);
   d496e:	4620      	mov	r0, r4
   d4970:	f7ff fee8 	bl	d4744 <_Z7BLEScani>
                delay(50);
   d4974:	2032      	movs	r0, #50	; 0x32
   d4976:	f003 feed 	bl	d8754 <delay>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
        delay(1000);
        if(BLEBot->botNum != OffloadingBot){
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
            BLE.disconnect();
            while(!BLE.connected()){
   d497a:	e7f3      	b.n	d4964 <_Z13DataOffloaderv+0xa8>
                BLEScan(OffloadingBot);
                delay(50);
            }
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   d497c:	f004 f866 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4980:	683b      	ldr	r3, [r7, #0]
   d4982:	4919      	ldr	r1, [pc, #100]	; (d49e8 <_Z13DataOffloaderv+0x12c>)
   d4984:	781a      	ldrb	r2, [r3, #0]
   d4986:	f7ff fda7 	bl	d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   d498a:	f004 f85f 	bl	d8a4c <_Z16_fetch_usbserialv>
   d498e:	683b      	ldr	r3, [r7, #0]
   d4990:	4916      	ldr	r1, [pc, #88]	; (d49ec <_Z13DataOffloaderv+0x130>)
   d4992:	781a      	ldrb	r2, [r3, #0]
   d4994:	f7ff fda0 	bl	d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        offloadingDone = false;
   d4998:	4b0c      	ldr	r3, [pc, #48]	; (d49cc <_Z13DataOffloaderv+0x110>)
   d499a:	2200      	movs	r2, #0
   d499c:	701a      	strb	r2, [r3, #0]
   d499e:	461e      	mov	r6, r3
        while(!offloadingDone) delay(100);
   d49a0:	7833      	ldrb	r3, [r6, #0]
   d49a2:	2b00      	cmp	r3, #0
   d49a4:	d1a1      	bne.n	d48ea <_Z13DataOffloaderv+0x2e>
   d49a6:	2064      	movs	r0, #100	; 0x64
   d49a8:	f003 fed4 	bl	d8754 <delay>
   d49ac:	e7f8      	b.n	d49a0 <_Z13DataOffloaderv+0xe4>
   d49ae:	4810      	ldr	r0, [pc, #64]	; (d49f0 <_Z13DataOffloaderv+0x134>)
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
   d49b0:	7c03      	ldrb	r3, [r0, #16]
   d49b2:	b113      	cbz	r3, d49ba <_Z13DataOffloaderv+0xfe>
   d49b4:	3010      	adds	r0, #16
   d49b6:	f000 ff3d 	bl	d5834 <_ZN7FatFile5closeEv>
}
   d49ba:	b008      	add	sp, #32
   d49bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49c0:	000da0d1 	.word	0x000da0d1
   d49c4:	2003d738 	.word	0x2003d738
   d49c8:	2003e32c 	.word	0x2003e32c
   d49cc:	2003d778 	.word	0x2003d778
   d49d0:	000da0d3 	.word	0x000da0d3
   d49d4:	000da1c7 	.word	0x000da1c7
   d49d8:	000da114 	.word	0x000da114
   d49dc:	2003d75c 	.word	0x2003d75c
   d49e0:	000da11d 	.word	0x000da11d
   d49e4:	000da14a 	.word	0x000da14a
   d49e8:	000da183 	.word	0x000da183
   d49ec:	000da1a4 	.word	0x000da1a4
   d49f0:	2003d728 	.word	0x2003d728
   d49f4:	2003d71c 	.word	0x2003d71c

000d49f8 <loop>:
        Serial.println("Error: could not connect to SD card!");
        logMessages = false;
    }
}

void loop() {
   d49f8:	b570      	push	{r4, r5, r6, lr}
    if(digitalRead(A0) == HIGH){
   d49fa:	2013      	movs	r0, #19
        Serial.println("Error: could not connect to SD card!");
        logMessages = false;
    }
}

void loop() {
   d49fc:	b088      	sub	sp, #32
    if(digitalRead(A0) == HIGH){
   d49fe:	f004 fb1d 	bl	d903c <digitalRead>
   d4a02:	2801      	cmp	r0, #1
   d4a04:	d106      	bne.n	d4a14 <loop+0x1c>
        Serial.println("Start offloader");
   d4a06:	f004 f821 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4a0a:	4924      	ldr	r1, [pc, #144]	; (d4a9c <loop+0xa4>)
   d4a0c:	f003 fd7f 	bl	d850e <_ZN5Print7printlnEPKc>
        DataOffloader();
   d4a10:	f7ff ff54 	bl	d48bc <_Z13DataOffloaderv>
    }
    if (BLE.connected()) {
   d4a14:	f002 fe38 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4a18:	f002 feb6 	bl	d7788 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4a1c:	4601      	mov	r1, r0
   d4a1e:	b348      	cbz	r0, d4a74 <loop+0x7c>
        if(BLEBot) Serial.printlnf("Connected to Waterbot %d", BLEBot->botNum);
   d4a20:	4c1f      	ldr	r4, [pc, #124]	; (d4aa0 <loop+0xa8>)
   d4a22:	6823      	ldr	r3, [r4, #0]
   d4a24:	b133      	cbz	r3, d4a34 <loop+0x3c>
   d4a26:	f004 f811 	bl	d8a4c <_Z16_fetch_usbserialv>
   d4a2a:	6823      	ldr	r3, [r4, #0]
   d4a2c:	491d      	ldr	r1, [pc, #116]	; (d4aa4 <loop+0xac>)
   d4a2e:	781a      	ldrb	r2, [r3, #0]
   d4a30:	f7ff fd52 	bl	d44d8 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        char testStr[30] = "CCB1ptsHello from CC Hub!";
   d4a34:	4b1c      	ldr	r3, [pc, #112]	; (d4aa8 <loop+0xb0>)
   d4a36:	466a      	mov	r2, sp
   d4a38:	f103 0618 	add.w	r6, r3, #24
   d4a3c:	466d      	mov	r5, sp
   d4a3e:	6818      	ldr	r0, [r3, #0]
   d4a40:	6859      	ldr	r1, [r3, #4]
   d4a42:	4614      	mov	r4, r2
   d4a44:	c403      	stmia	r4!, {r0, r1}
   d4a46:	3308      	adds	r3, #8
   d4a48:	42b3      	cmp	r3, r6
   d4a4a:	4622      	mov	r2, r4
   d4a4c:	d1f7      	bne.n	d4a3e <loop+0x46>
   d4a4e:	881b      	ldrh	r3, [r3, #0]
   d4a50:	8023      	strh	r3, [r4, #0]
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4a52:	221e      	movs	r2, #30
   d4a54:	2300      	movs	r3, #0
   d4a56:	4629      	mov	r1, r5
   d4a58:	4814      	ldr	r0, [pc, #80]	; (d4aac <loop+0xb4>)
   d4a5a:	f8cd 301a 	str.w	r3, [sp, #26]
   d4a5e:	f002 fca3 	bl	d73a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        //uint8_t testBuf[30];
        //memcpy(testStr,testBuf,30);
        peerRxCharacteristic.setValue(testStr);
        digitalWrite(D7,HIGH);
   d4a62:	2101      	movs	r1, #1
   d4a64:	2007      	movs	r0, #7
   d4a66:	f004 fad0 	bl	d900a <digitalWrite>
        delay(1000);
   d4a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a6e:	f003 fe71 	bl	d8754 <delay>
   d4a72:	e011      	b.n	d4a98 <loop+0xa0>
            txLen = 0;
            remoteRx = false;
        }*/
    }
    else {
        digitalWrite(D7,LOW);
   d4a74:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4a76:	4c0e      	ldr	r4, [pc, #56]	; (d4ab0 <loop+0xb8>)
            txLen = 0;
            remoteRx = false;
        }*/
    }
    else {
        digitalWrite(D7,LOW);
   d4a78:	f004 fac7 	bl	d900a <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4a7c:	f001 fd50 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4a80:	6823      	ldr	r3, [r4, #0]
   d4a82:	1ac0      	subs	r0, r0, r3
   d4a84:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4a88:	d306      	bcc.n	d4a98 <loop+0xa0>
   d4a8a:	f001 fd49 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
    		// Time to scan
    		lastScan = millis();
   d4a8e:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   d4a90:	f04f 30ff 	mov.w	r0, #4294967295
   d4a94:	f7ff fe56 	bl	d4744 <_Z7BLEScani>
    	}

    }
}
   d4a98:	b008      	add	sp, #32
   d4a9a:	bd70      	pop	{r4, r5, r6, pc}
   d4a9c:	000da1ee 	.word	0x000da1ee
   d4aa0:	2003e32c 	.word	0x2003e32c
   d4aa4:	000da1fe 	.word	0x000da1fe
   d4aa8:	000d9ec8 	.word	0x000d9ec8
   d4aac:	2003d75c 	.word	0x2003d75c
   d4ab0:	2003d714 	.word	0x2003d714

000d4ab4 <_GLOBAL__sub_I_SystemMode>:
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4ab4:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ab6:	4d55      	ldr	r5, [pc, #340]	; (d4c0c <_GLOBAL__sub_I_SystemMode+0x158>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ab8:	f001 fca2 	bl	d6400 <HAL_Pin_Map>
   d4abc:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4ac2:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ac4:	602c      	str	r4, [r5, #0]
   d4ac6:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ac8:	71ac      	strb	r4, [r5, #6]
   d4aca:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4acc:	2003      	movs	r0, #3
   d4ace:	f001 fee3 	bl	d6898 <set_system_mode>
#define CUSTOM_DATA_LEN     8
#define MAX_FILENAME_LEN    30

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);
   d4ad2:	4a4f      	ldr	r2, [pc, #316]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4ad4:	494f      	ldr	r1, [pc, #316]	; (d4c14 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4ad6:	4628      	mov	r0, r5
   d4ad8:	f004 fb04 	bl	d90e4 <__aeabi_atexit>

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   d4adc:	494e      	ldr	r1, [pc, #312]	; (d4c18 <_GLOBAL__sub_I_SystemMode+0x164>)
   d4ade:	484f      	ldr	r0, [pc, #316]	; (d4c1c <_GLOBAL__sub_I_SystemMode+0x168>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4ae0:	4d4f      	ldr	r5, [pc, #316]	; (d4c20 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d4ae2:	f002 fb15 	bl	d7110 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   d4ae6:	494f      	ldr	r1, [pc, #316]	; (d4c24 <_GLOBAL__sub_I_SystemMode+0x170>)
   d4ae8:	484f      	ldr	r0, [pc, #316]	; (d4c28 <_GLOBAL__sub_I_SystemMode+0x174>)
   d4aea:	f002 fb11 	bl	d7110 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   d4aee:	494f      	ldr	r1, [pc, #316]	; (d4c2c <_GLOBAL__sub_I_SystemMode+0x178>)
   d4af0:	484f      	ldr	r0, [pc, #316]	; (d4c30 <_GLOBAL__sub_I_SystemMode+0x17c>)
   d4af2:	f002 fb0d 	bl	d7110 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   d4af6:	494f      	ldr	r1, [pc, #316]	; (d4c34 <_GLOBAL__sub_I_SystemMode+0x180>)
   d4af8:	484f      	ldr	r0, [pc, #316]	; (d4c38 <_GLOBAL__sub_I_SystemMode+0x184>)
   d4afa:	f002 fb09 	bl	d7110 <_ZN8particle7BleUuidC1EPKc>
   d4afe:	1928      	adds	r0, r5, r4
   d4b00:	f002 f9de 	bl	d6ec0 <_ZN8particle10BleAddressC1Ev>
   d4b04:	f104 0008 	add.w	r0, r4, #8
   d4b08:	4428      	add	r0, r5
   d4b0a:	f002 fb7b 	bl	d7204 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4b0e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4b12:	4428      	add	r0, r5
   d4b14:	3454      	adds	r4, #84	; 0x54
   d4b16:	f002 fb75 	bl	d7204 <_ZN8particle18BleAdvertisingDataC1Ev>
//BleCharacteristic rxCharacteristic("rxr", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, RemoteService, BLEDataReceived, NULL);

const size_t UART_TX_BUF_SIZE = 30;
const size_t SCAN_RESULT_COUNT = 20;

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d4b1a:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d4b1e:	d1ee      	bne.n	d4afe <_GLOBAL__sub_I_SystemMode+0x4a>

BleCharacteristic peerTxCharacteristic;
   d4b20:	4846      	ldr	r0, [pc, #280]	; (d4c3c <_GLOBAL__sub_I_SystemMode+0x188>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4b22:	4c47      	ldr	r4, [pc, #284]	; (d4c40 <_GLOBAL__sub_I_SystemMode+0x18c>)
   d4b24:	f003 fb6a 	bl	d81fc <_ZN8particle17BleCharacteristicC1Ev>
   d4b28:	4a39      	ldr	r2, [pc, #228]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4b2a:	4946      	ldr	r1, [pc, #280]	; (d4c44 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4b2c:	4843      	ldr	r0, [pc, #268]	; (d4c3c <_GLOBAL__sub_I_SystemMode+0x188>)
   d4b2e:	f004 fad9 	bl	d90e4 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d4b32:	4845      	ldr	r0, [pc, #276]	; (d4c48 <_GLOBAL__sub_I_SystemMode+0x194>)
   d4b34:	f003 fb62 	bl	d81fc <_ZN8particle17BleCharacteristicC1Ev>
   d4b38:	4a35      	ldr	r2, [pc, #212]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4b3a:	4942      	ldr	r1, [pc, #264]	; (d4c44 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4b3c:	4842      	ldr	r0, [pc, #264]	; (d4c48 <_GLOBAL__sub_I_SystemMode+0x194>)
   d4b3e:	f004 fad1 	bl	d90e4 <__aeabi_atexit>
BleCharacteristic peerOffloadCharacteristic;
   d4b42:	4842      	ldr	r0, [pc, #264]	; (d4c4c <_GLOBAL__sub_I_SystemMode+0x198>)
   d4b44:	f003 fb5a 	bl	d81fc <_ZN8particle17BleCharacteristicC1Ev>
   d4b48:	4a31      	ldr	r2, [pc, #196]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4b4a:	493e      	ldr	r1, [pc, #248]	; (d4c44 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4b4c:	483f      	ldr	r0, [pc, #252]	; (d4c4c <_GLOBAL__sub_I_SystemMode+0x198>)
   d4b4e:	f004 fac9 	bl	d90e4 <__aeabi_atexit>
BlePeerDevice peer;
   d4b52:	483f      	ldr	r0, [pc, #252]	; (d4c50 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4b54:	f002 feaa 	bl	d78ac <_ZN8particle13BlePeerDeviceC1Ev>
   d4b58:	4a2d      	ldr	r2, [pc, #180]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4b5a:	493e      	ldr	r1, [pc, #248]	; (d4c54 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4b5c:	483c      	ldr	r0, [pc, #240]	; (d4c50 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4b5e:	f004 fac1 	bl	d90e4 <__aeabi_atexit>
   d4b62:	6823      	ldr	r3, [r4, #0]
   d4b64:	07db      	lsls	r3, r3, #31
   d4b66:	d40a      	bmi.n	d4b7e <_GLOBAL__sub_I_SystemMode+0xca>
   d4b68:	4620      	mov	r0, r4
   d4b6a:	f7ff fa9a 	bl	d40a2 <__cxa_guard_acquire>
   d4b6e:	b130      	cbz	r0, d4b7e <_GLOBAL__sub_I_SystemMode+0xca>
   d4b70:	2101      	movs	r1, #1
   d4b72:	4839      	ldr	r0, [pc, #228]	; (d4c58 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d4b74:	f001 ffb0 	bl	d6ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f7ff fa97 	bl	d40ac <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4b7e:	4b37      	ldr	r3, [pc, #220]	; (d4c5c <_GLOBAL__sub_I_SystemMode+0x1a8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4b80:	4837      	ldr	r0, [pc, #220]	; (d4c60 <_GLOBAL__sub_I_SystemMode+0x1ac>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4b82:	4d38      	ldr	r5, [pc, #224]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d4b84:	4938      	ldr	r1, [pc, #224]	; (d4c68 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4b86:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4b88:	2264      	movs	r2, #100	; 0x64
   d4b8a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d4b8e:	4a37      	ldr	r2, [pc, #220]	; (d4c6c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4b90:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4b94:	2201      	movs	r2, #1
   d4b96:	2400      	movs	r4, #0
   d4b98:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b9c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4ba0:	4a2d      	ldr	r2, [pc, #180]	; (d4c58 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d4ba2:	71dc      	strb	r4, [r3, #7]
   d4ba4:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4ba8:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4bac:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4bb0:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4bb4:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4bb8:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4bbc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d4bc0:	7404      	strb	r4, [r0, #16]
   d4bc2:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4bc4:	6044      	str	r4, [r0, #4]
   d4bc6:	6086      	str	r6, [r0, #8]
   d4bc8:	4a11      	ldr	r2, [pc, #68]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4bca:	f004 fa8b 	bl	d90e4 <__aeabi_atexit>
   d4bce:	4828      	ldr	r0, [pc, #160]	; (d4c70 <_GLOBAL__sub_I_SystemMode+0x1bc>)
File logFile;
   d4bd0:	4a0f      	ldr	r2, [pc, #60]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4bd2:	7404      	strb	r4, [r0, #16]
   d4bd4:	7444      	strb	r4, [r0, #17]
   d4bd6:	6044      	str	r4, [r0, #4]
   d4bd8:	6086      	str	r6, [r0, #8]
   d4bda:	4923      	ldr	r1, [pc, #140]	; (d4c68 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4bdc:	6005      	str	r5, [r0, #0]
   d4bde:	f004 fa81 	bl	d90e4 <__aeabi_atexit>
   d4be2:	4824      	ldr	r0, [pc, #144]	; (d4c74 <_GLOBAL__sub_I_SystemMode+0x1c0>)
File logDir;
   d4be4:	4a0a      	ldr	r2, [pc, #40]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4be6:	7404      	strb	r4, [r0, #16]
   d4be8:	7444      	strb	r4, [r0, #17]
   d4bea:	6044      	str	r4, [r0, #4]
   d4bec:	6086      	str	r6, [r0, #8]
   d4bee:	491e      	ldr	r1, [pc, #120]	; (d4c68 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4bf0:	6005      	str	r5, [r0, #0]
   d4bf2:	f004 fa77 	bl	d90e4 <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d4bf6:	4820      	ldr	r0, [pc, #128]	; (d4c78 <_GLOBAL__sub_I_SystemMode+0x1c4>)
    float GPSLat;
    float GPSLon;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
std::vector<WaterBot> WaterBots;
   d4bf8:	4a05      	ldr	r2, [pc, #20]	; (d4c10 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4bfa:	6004      	str	r4, [r0, #0]
   d4bfc:	6044      	str	r4, [r0, #4]
   d4bfe:	6084      	str	r4, [r0, #8]
   d4c00:	491e      	ldr	r1, [pc, #120]	; (d4c7c <_GLOBAL__sub_I_SystemMode+0x1c8>)
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    float GPSLat;
    float GPSLon;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
std::vector<WaterBot> WaterBots;
   d4c06:	f004 ba6d 	b.w	d90e4 <__aeabi_atexit>
   d4c0a:	bf00      	nop
   d4c0c:	2003d6a8 	.word	0x2003d6a8
   d4c10:	2003d694 	.word	0x2003d694
   d4c14:	000d41a9 	.word	0x000d41a9
   d4c18:	000da217 	.word	0x000da217
   d4c1c:	2003d764 	.word	0x2003d764
   d4c20:	2003d810 	.word	0x2003d810
   d4c24:	000da23c 	.word	0x000da23c
   d4c28:	2003d7fc 	.word	0x2003d7fc
   d4c2c:	000da261 	.word	0x000da261
   d4c30:	2003d7b0 	.word	0x2003d7b0
   d4c34:	000da286 	.word	0x000da286
   d4c38:	2003d7e8 	.word	0x2003d7e8
   d4c3c:	2003d6ec 	.word	0x2003d6ec
   d4c40:	2003d698 	.word	0x2003d698
   d4c44:	000d77ed 	.word	0x000d77ed
   d4c48:	2003d75c 	.word	0x2003d75c
   d4c4c:	2003e330 	.word	0x2003e330
   d4c50:	2003dea0 	.word	0x2003dea0
   d4c54:	000d77fb 	.word	0x000d77fb
   d4c58:	2003d69c 	.word	0x2003d69c
   d4c5c:	2003dea8 	.word	0x2003dea8
   d4c60:	2003d6b8 	.word	0x2003d6b8
   d4c64:	000d9ea8 	.word	0x000d9ea8
   d4c68:	000d40cf 	.word	0x000d40cf
   d4c6c:	000d9e9c 	.word	0x000d9e9c
   d4c70:	2003d77c 	.word	0x2003d77c
   d4c74:	2003d728 	.word	0x2003d728
   d4c78:	2003d71c 	.word	0x2003d71c
   d4c7c:	000d41b9 	.word	0x000d41b9

000d4c80 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4c80:	f001 bbbe 	b.w	d6400 <HAL_Pin_Map>

000d4c84 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4c84:	f001 bbbc 	b.w	d6400 <HAL_Pin_Map>

000d4c88 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4c88:	b510      	push	{r4, lr}
   d4c8a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4c8c:	3024      	adds	r0, #36	; 0x24
   d4c8e:	f000 ff1d 	bl	d5acc <_ZN8FatCache4syncEv>
   d4c92:	b128      	cbz	r0, d4ca0 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4c94:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4c9c:	f000 bf16 	b.w	d5acc <_ZN8FatCache4syncEv>
  }
   d4ca0:	bd10      	pop	{r4, pc}

000d4ca2 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4ca2:	1e41      	subs	r1, r0, #1
   d4ca4:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4ca8:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4caa:	0843      	lsrs	r3, r0, #1
   d4cac:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4cb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4cb4:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4cb8:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4cba:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4cbc:	d1f5      	bne.n	d4caa <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4cbe:	4770      	bx	lr

000d4cc0 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d4cc0:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d4cc2:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d4cc4:	4604      	mov	r4, r0
   d4cc6:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d4cc8:	b923      	cbnz	r3, d4cd4 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d4cca:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d4ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d4cd0:	f000 bbc7 	b.w	d5462 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d4cd4:	2224      	movs	r2, #36	; 0x24
   d4cd6:	2100      	movs	r1, #0
   d4cd8:	f004 fca9 	bl	d962e <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d4cdc:	2310      	movs	r3, #16
  m_flags = F_READ;
   d4cde:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d4ce0:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d4ce2:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d4ce4:	68ab      	ldr	r3, [r5, #8]
   d4ce6:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d4ce8:	68eb      	ldr	r3, [r5, #12]
   d4cea:	6223      	str	r3, [r4, #32]
  return true;
}
   d4cec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4cf4:	7803      	ldrb	r3, [r0, #0]
   d4cf6:	2b20      	cmp	r3, #32
   d4cf8:	f100 0401 	add.w	r4, r0, #1
   d4cfc:	d101      	bne.n	d4d02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4cfe:	4620      	mov	r0, r4
   d4d00:	e7f8      	b.n	d4cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4d02:	4f70      	ldr	r7, [pc, #448]	; (d4ec4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4d04:	6088      	str	r0, [r1, #8]
   d4d06:	4605      	mov	r5, r0
   d4d08:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4d0a:	462e      	mov	r6, r5
   d4d0c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4d10:	b30b      	cbz	r3, d4d56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4d12:	2b2f      	cmp	r3, #47	; 0x2f
   d4d14:	d101      	bne.n	d4d1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4d16:	1903      	adds	r3, r0, r4
   d4d18:	e017      	b.n	d4d4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4d1a:	2b5c      	cmp	r3, #92	; 0x5c
   d4d1c:	d102      	bne.n	d4d24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4d1e:	2000      	movs	r0, #0
   d4d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4d24:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4d28:	b2e4      	uxtb	r4, r4
   d4d2a:	2c1d      	cmp	r4, #29
   d4d2c:	d803      	bhi.n	d4d36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4d2e:	fa27 f404 	lsr.w	r4, r7, r4
   d4d32:	07e4      	lsls	r4, r4, #31
   d4d34:	d4f3      	bmi.n	d4d1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4d36:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4d3a:	2c3c      	cmp	r4, #60	; 0x3c
   d4d3c:	d0ef      	beq.n	d4d1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4d3e:	3b20      	subs	r3, #32
   d4d40:	2b5e      	cmp	r3, #94	; 0x5e
   d4d42:	d9e1      	bls.n	d4d08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4d44:	e7eb      	b.n	d4d1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4d46:	2d2f      	cmp	r5, #47	; 0x2f
   d4d48:	d105      	bne.n	d4d56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4d4a:	461e      	mov	r6, r3
   d4d4c:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4d50:	2d20      	cmp	r5, #32
   d4d52:	d1f8      	bne.n	d4d46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4d54:	e7f9      	b.n	d4d4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4d56:	6016      	str	r6, [r2, #0]
   d4d58:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4d5a:	4298      	cmp	r0, r3
   d4d5c:	ebc0 0803 	rsb	r8, r0, r3
   d4d60:	d009      	beq.n	d4d76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4d66:	2a2e      	cmp	r2, #46	; 0x2e
   d4d68:	d0f7      	beq.n	d4d5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4d6a:	2a20      	cmp	r2, #32
   d4d6c:	d0f5      	beq.n	d4d5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4d6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4d72:	dcd4      	bgt.n	d4d1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4d74:	e001      	b.n	d4d7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4d76:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4d7a:	f8c1 8004 	str.w	r8, [r1, #4]
   d4d7e:	f101 030c 	add.w	r3, r1, #12
   d4d82:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4d86:	2420      	movs	r4, #32
   d4d88:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4d8c:	4293      	cmp	r3, r2
   d4d8e:	d1fb      	bne.n	d4d88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4d90:	4603      	mov	r3, r0
   d4d92:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4d94:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4d98:	2c2e      	cmp	r4, #46	; 0x2e
   d4d9a:	d0fa      	beq.n	d4d92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4d9c:	2c20      	cmp	r4, #32
   d4d9e:	d0f8      	beq.n	d4d92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4da0:	fab2 f482 	clz	r4, r2
   d4da4:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4da6:	f108 36ff 	add.w	r6, r8, #4294967295
   d4daa:	1c73      	adds	r3, r6, #1
   d4dac:	d107      	bne.n	d4dbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4dae:	2700      	movs	r7, #0
   d4db0:	f04f 0e07 	mov.w	lr, #7
   d4db4:	463d      	mov	r5, r7
   d4db6:	46ba      	mov	sl, r7
   d4db8:	f04f 0908 	mov.w	r9, #8
   d4dbc:	e009      	b.n	d4dd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4dbe:	5d83      	ldrb	r3, [r0, r6]
   d4dc0:	2b2e      	cmp	r3, #46	; 0x2e
   d4dc2:	d0f4      	beq.n	d4dae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4dc4:	3e01      	subs	r6, #1
   d4dc6:	e7f0      	b.n	d4daa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4dc8:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4dca:	2b20      	cmp	r3, #32
   d4dcc:	d104      	bne.n	d4dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4dce:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4dd0:	3201      	adds	r2, #1
   d4dd2:	4542      	cmp	r2, r8
   d4dd4:	dbf8      	blt.n	d4dc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4dd6:	e04b      	b.n	d4e70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4dd8:	2b2e      	cmp	r3, #46	; 0x2e
   d4dda:	d102      	bne.n	d4de2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4ddc:	42b2      	cmp	r2, r6
   d4dde:	d1f6      	bne.n	d4dce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4de0:	e003      	b.n	d4dea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4de2:	2b22      	cmp	r3, #34	; 0x22
   d4de4:	d017      	beq.n	d4e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4de6:	2b7c      	cmp	r3, #124	; 0x7c
   d4de8:	d015      	beq.n	d4e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4dea:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4dee:	f1bc 0f05 	cmp.w	ip, #5
   d4df2:	d801      	bhi.n	d4df8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4df4:	2b2d      	cmp	r3, #45	; 0x2d
   d4df6:	d10e      	bne.n	d4e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4df8:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4dfc:	f1bc 0f05 	cmp.w	ip, #5
   d4e00:	d909      	bls.n	d4e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4e02:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4e06:	f1bc 0f02 	cmp.w	ip, #2
   d4e0a:	d904      	bls.n	d4e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4e0c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4e10:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4e14:	d902      	bls.n	d4e1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4e16:	42b2      	cmp	r2, r6
   d4e18:	d10e      	bne.n	d4e38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4e1a:	e049      	b.n	d4eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4e1c:	42b2      	cmp	r2, r6
   d4e1e:	d047      	beq.n	d4eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4e20:	4575      	cmp	r5, lr
   d4e22:	d821      	bhi.n	d4e68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4e24:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4e28:	f1bc 0f19 	cmp.w	ip, #25
   d4e2c:	d808      	bhi.n	d4e40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4e2e:	3b20      	subs	r3, #32
   d4e30:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4e32:	ea49 0707 	orr.w	r7, r9, r7
   d4e36:	e00a      	b.n	d4e4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4e38:	4575      	cmp	r5, lr
   d4e3a:	d815      	bhi.n	d4e68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4e3c:	2400      	movs	r4, #0
      c = '_';
   d4e3e:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4e40:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4e44:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4e48:	bf98      	it	ls
   d4e4a:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4e4e:	f105 0c01 	add.w	ip, r5, #1
   d4e52:	fa5f fc8c 	uxtb.w	ip, ip
   d4e56:	440d      	add	r5, r1
      if (i < 7) {
   d4e58:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4e5c:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4e5e:	d801      	bhi.n	d4e64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4e60:	f881 c00c 	strb.w	ip, [r1, #12]
   d4e64:	4665      	mov	r5, ip
   d4e66:	e7b3      	b.n	d4dd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4e68:	f1be 0f0a 	cmp.w	lr, #10
   d4e6c:	d117      	bne.n	d4e9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4e6e:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4e70:	7b4b      	ldrb	r3, [r1, #13]
   d4e72:	2b20      	cmp	r3, #32
   d4e74:	f43f af53 	beq.w	d4d1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4e78:	b13c      	cbz	r4, d4e8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4e7a:	ea1a 0f07 	tst.w	sl, r7
   d4e7e:	bf18      	it	ne
   d4e80:	2702      	movne	r7, #2
   d4e82:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4e84:	2001      	movs	r0, #1
   d4e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4e8a:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4e8c:	2001      	movs	r0, #1
   d4e8e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4e90:	4419      	add	r1, r3
   d4e92:	237e      	movs	r3, #126	; 0x7e
   d4e94:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4e96:	2331      	movs	r3, #49	; 0x31
   d4e98:	738b      	strb	r3, [r1, #14]
   d4e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4e9e:	42b2      	cmp	r2, r6
   d4ea0:	dce5      	bgt.n	d4e6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4ea2:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4ea4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4ea8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4eaa:	f04f 0910 	mov.w	r9, #16
   d4eae:	e78e      	b.n	d4dce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4eb0:	f1be 0f0a 	cmp.w	lr, #10
   d4eb4:	d0db      	beq.n	d4e6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4eb6:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4eb8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4ebc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4ebe:	f04f 0910 	mov.w	r9, #16
   d4ec2:	e785      	b.n	d4dd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4ec4:	31000101 	.word	0x31000101

000d4ec8 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4eca:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4ecc:	2300      	movs	r3, #0
   d4ece:	f88d 3004 	strb.w	r3, [sp, #4]
   d4ed2:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4ed6:	7803      	ldrb	r3, [r0, #0]
   d4ed8:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d4eda:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4edc:	d508      	bpl.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
   d4ede:	7883      	ldrb	r3, [r0, #2]
   d4ee0:	079a      	lsls	r2, r3, #30
   d4ee2:	d505      	bpl.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d4ee4:	6a01      	ldr	r1, [r0, #32]
   d4ee6:	b129      	cbz	r1, d4ef4 <_ZN7FatFile6removeEv+0x2c>
   d4ee8:	68a0      	ldr	r0, [r4, #8]
   d4eea:	f000 fee0 	bl	d5cae <_ZN9FatVolume9freeChainEm>
   d4eee:	b908      	cbnz	r0, d4ef4 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d4ef0:	2000      	movs	r0, #0
   d4ef2:	e049      	b.n	d4f88 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4ef4:	2101      	movs	r1, #1
   d4ef6:	4620      	mov	r0, r4
   d4ef8:	f000 faa4 	bl	d5444 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d4efc:	4605      	mov	r5, r0
   d4efe:	2800      	cmp	r0, #0
   d4f00:	d0f6      	beq.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d4f02:	f7ff fece 	bl	d4ca2 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d4f06:	26e5      	movs	r6, #229	; 0xe5
   d4f08:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d4f0a:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d4f0c:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d4f0e:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d4f10:	68a0      	ldr	r0, [r4, #8]
   d4f12:	f7ff feb9 	bl	d4c88 <_ZN9FatVolume9cacheSyncEv>
   d4f16:	2800      	cmp	r0, #0
   d4f18:	d0ea      	beq.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d4f1a:	78e3      	ldrb	r3, [r4, #3]
   d4f1c:	2b00      	cmp	r3, #0
   d4f1e:	d033      	beq.n	d4f88 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d4f20:	4621      	mov	r1, r4
   d4f22:	a801      	add	r0, sp, #4
   d4f24:	f7ff fecc 	bl	d4cc0 <_ZN7FatFile11openClusterEPS_>
   d4f28:	2800      	cmp	r0, #0
   d4f2a:	d0e1      	beq.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
   d4f2c:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d4f2e:	78e3      	ldrb	r3, [r4, #3]
   d4f30:	42ab      	cmp	r3, r5
   d4f32:	d3dd      	bcc.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d4f34:	88a1      	ldrh	r1, [r4, #4]
   d4f36:	1b49      	subs	r1, r1, r5
   d4f38:	0149      	lsls	r1, r1, #5
   d4f3a:	a801      	add	r0, sp, #4
   d4f3c:	f000 fb8c 	bl	d5658 <_ZN7FatFile7seekSetEm>
   d4f40:	2800      	cmp	r0, #0
   d4f42:	d0d5      	beq.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d4f44:	2100      	movs	r1, #0
   d4f46:	a801      	add	r0, sp, #4
   d4f48:	f000 fb69 	bl	d561e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d4f4c:	2800      	cmp	r0, #0
   d4f4e:	d0cf      	beq.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d4f50:	7ac3      	ldrb	r3, [r0, #11]
   d4f52:	2b0f      	cmp	r3, #15
   d4f54:	d1cc      	bne.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d4f56:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d4f58:	f002 031f 	and.w	r3, r2, #31
   d4f5c:	429d      	cmp	r5, r3
   d4f5e:	d1c7      	bne.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d4f60:	7b43      	ldrb	r3, [r0, #13]
   d4f62:	42bb      	cmp	r3, r7
   d4f64:	d1c4      	bne.n	d4ef0 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d4f66:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d4f68:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d4f6a:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d4f6e:	f043 0301 	orr.w	r3, r3, #1
   d4f72:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d4f76:	0653      	lsls	r3, r2, #25
   d4f78:	d503      	bpl.n	d4f82 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d4f7a:	68a0      	ldr	r0, [r4, #8]
   d4f7c:	f7ff fe84 	bl	d4c88 <_ZN9FatVolume9cacheSyncEv>
   d4f80:	e002      	b.n	d4f88 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d4f82:	3501      	adds	r5, #1
   d4f84:	b2ed      	uxtb	r5, r5
   d4f86:	e7d2      	b.n	d4f2e <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d4f88:	b00b      	add	sp, #44	; 0x2c
   d4f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4f90:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4f94:	4606      	mov	r6, r0
   d4f96:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4f98:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4f9a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4f9c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4fa0:	6869      	ldr	r1, [r5, #4]
   d4fa2:	68aa      	ldr	r2, [r5, #8]
   d4fa4:	1863      	adds	r3, r4, r1
   d4fa6:	b29b      	uxth	r3, r3
   d4fa8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4faa:	4291      	cmp	r1, r2
   d4fac:	d006      	beq.n	d4fbc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4fae:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4fb2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4fb6:	4043      	eors	r3, r0
   d4fb8:	b29b      	uxth	r3, r3
   d4fba:	e7f6      	b.n	d4faa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4fbc:	f1b9 0f03 	cmp.w	r9, #3
   d4fc0:	bf28      	it	cs
   d4fc2:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4fc6:	f109 0204 	add.w	r2, r9, #4
   d4fca:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4fcc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4fd0:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4fd2:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4fd4:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4fd6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4fd8:	bf94      	ite	ls
   d4fda:	3130      	addls	r1, #48	; 0x30
   d4fdc:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4fde:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4fe0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4fe2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4fe6:	d3f1      	bcc.n	d4fcc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4fe8:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4fec:	2100      	movs	r1, #0
   d4fee:	735f      	strb	r7, [r3, #13]
   d4ff0:	4630      	mov	r0, r6
   d4ff2:	f000 fb31 	bl	d5658 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4ff6:	2101      	movs	r1, #1
   d4ff8:	4630      	mov	r0, r6
   d4ffa:	f000 fb10 	bl	d561e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4ffe:	4601      	mov	r1, r0
   d5000:	b928      	cbnz	r0, d500e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5002:	7870      	ldrb	r0, [r6, #1]
   d5004:	fab0 f080 	clz	r0, r0
   d5008:	0940      	lsrs	r0, r0, #5
   d500a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d500e:	7803      	ldrb	r3, [r0, #0]
   d5010:	b14b      	cbz	r3, d5026 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5012:	7ac3      	ldrb	r3, [r0, #11]
   d5014:	071b      	lsls	r3, r3, #28
   d5016:	d4ee      	bmi.n	d4ff6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5018:	220b      	movs	r2, #11
   d501a:	4640      	mov	r0, r8
   d501c:	f004 fad2 	bl	d95c4 <memcmp>
   d5020:	2800      	cmp	r0, #0
   d5022:	d1e8      	bne.n	d4ff6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5024:	e002      	b.n	d502c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5026:	2001      	movs	r0, #1
   d5028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d502c:	3401      	adds	r4, #1
   d502e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d5030:	2c64      	cmp	r4, #100	; 0x64
   d5032:	d1b5      	bne.n	d4fa0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5038 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d503c:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d503e:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5040:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5042:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5046:	9005      	str	r0, [sp, #20]
   d5048:	460e      	mov	r6, r1
   d504a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d504c:	d101      	bne.n	d5052 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d504e:	2000      	movs	r0, #0
   d5050:	e1a0      	b.n	d5394 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5052:	9b05      	ldr	r3, [sp, #20]
   d5054:	781b      	ldrb	r3, [r3, #0]
   d5056:	2b00      	cmp	r3, #0
   d5058:	d1f9      	bne.n	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d505a:	6853      	ldr	r3, [r2, #4]
   d505c:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d505e:	7813      	ldrb	r3, [r2, #0]
   d5060:	079b      	lsls	r3, r3, #30
   d5062:	f000 818d 	beq.w	d5380 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5066:	9b02      	ldr	r3, [sp, #8]
   d5068:	270d      	movs	r7, #13
   d506a:	330c      	adds	r3, #12
   d506c:	fbb3 f7f7 	udiv	r7, r3, r7
   d5070:	3701      	adds	r7, #1
   d5072:	b2ff      	uxtb	r7, r7
   d5074:	2100      	movs	r1, #0
   d5076:	4630      	mov	r0, r6
   d5078:	f000 faee 	bl	d5658 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d507c:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5080:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5084:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5088:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d508a:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d508c:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d508e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5092:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5094:	6972      	ldr	r2, [r6, #20]
   d5096:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5098:	2101      	movs	r1, #1
   d509a:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d509c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d50a0:	f000 fabd 	bl	d561e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d50a4:	9b07      	ldr	r3, [sp, #28]
   d50a6:	b920      	cbnz	r0, d50b2 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d50a8:	7873      	ldrb	r3, [r6, #1]
   d50aa:	2b00      	cmp	r3, #0
   d50ac:	f000 8090 	beq.w	d51d0 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d50b0:	e7cd      	b.n	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d50b2:	7802      	ldrb	r2, [r0, #0]
   d50b4:	2ae5      	cmp	r2, #229	; 0xe5
   d50b6:	d000      	beq.n	d50ba <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d50b8:	b942      	cbnz	r2, d50cc <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d50ba:	2c00      	cmp	r4, #0
   d50bc:	bf08      	it	eq
   d50be:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d50c0:	42bc      	cmp	r4, r7
        freeFound++;
   d50c2:	bf3c      	itt	cc
   d50c4:	3401      	addcc	r4, #1
   d50c6:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d50c8:	b922      	cbnz	r2, d50d4 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d50ca:	e081      	b.n	d51d0 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d50cc:	42bc      	cmp	r4, r7
   d50ce:	bf38      	it	cc
   d50d0:	2400      	movcc	r4, #0
   d50d2:	e003      	b.n	d50dc <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d50d4:	2ae5      	cmp	r2, #229	; 0xe5
   d50d6:	d101      	bne.n	d50dc <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d50d8:	2500      	movs	r5, #0
   d50da:	e7db      	b.n	d5094 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d50dc:	2a2e      	cmp	r2, #46	; 0x2e
   d50de:	d0fb      	beq.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d50e0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d50e2:	290f      	cmp	r1, #15
   d50e4:	d152      	bne.n	d518c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d50e6:	b93d      	cbnz	r5, d50f8 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d50e8:	0651      	lsls	r1, r2, #25
   d50ea:	d5d3      	bpl.n	d5094 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d50ec:	7b43      	ldrb	r3, [r0, #13]
   d50ee:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d50f0:	f002 051f 	and.w	r5, r2, #31
   d50f4:	462b      	mov	r3, r5
   d50f6:	e007      	b.n	d5108 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d50f8:	3b01      	subs	r3, #1
   d50fa:	b2db      	uxtb	r3, r3
   d50fc:	429a      	cmp	r2, r3
   d50fe:	d1eb      	bne.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5100:	7b42      	ldrb	r2, [r0, #13]
   d5102:	9903      	ldr	r1, [sp, #12]
   d5104:	4291      	cmp	r1, r2
   d5106:	d1e7      	bne.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5108:	1e5a      	subs	r2, r3, #1
   d510a:	f04f 0c0d 	mov.w	ip, #13
   d510e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d5112:	9a02      	ldr	r2, [sp, #8]
   d5114:	4562      	cmp	r2, ip
   d5116:	d9df      	bls.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5118:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d511c:	f1be 0f04 	cmp.w	lr, #4
   d5120:	fa5f f28e 	uxtb.w	r2, lr
   d5124:	d804      	bhi.n	d5130 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5126:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d512a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d512e:	e00c      	b.n	d514a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5130:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5132:	bf95      	itete	ls
   d5134:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5138:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d513c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5140:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5144:	bf94      	ite	ls
   d5146:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5148:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d514a:	9902      	ldr	r1, [sp, #8]
   d514c:	4561      	cmp	r1, ip
   d514e:	d103      	bne.n	d5158 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5150:	2a00      	cmp	r2, #0
   d5152:	bf18      	it	ne
   d5154:	2500      	movne	r5, #0
   d5156:	e79d      	b.n	d5094 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5158:	2aff      	cmp	r2, #255	; 0xff
   d515a:	d8bd      	bhi.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d515c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d515e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5162:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5164:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5168:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d516c:	bf98      	it	ls
   d516e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5170:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5174:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5178:	bf98      	it	ls
   d517a:	b2d2      	uxtbls	r2, r2
   d517c:	f1bc 0f19 	cmp.w	ip, #25
   d5180:	bf9c      	itt	ls
   d5182:	3120      	addls	r1, #32
   d5184:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5186:	4291      	cmp	r1, r2
   d5188:	d1a6      	bne.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d518a:	e0fb      	b.n	d5384 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d518c:	0709      	lsls	r1, r1, #28
   d518e:	d4a3      	bmi.n	d50d8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5190:	b14d      	cbz	r5, d51a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5192:	2b01      	cmp	r3, #1
   d5194:	f47f af5b 	bne.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5198:	f7ff fd83 	bl	d4ca2 <_ZN7FatFile11lfnChecksumEPh>
   d519c:	9b03      	ldr	r3, [sp, #12]
   d519e:	4283      	cmp	r3, r0
   d51a0:	f47f af55 	bne.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d51a4:	e00f      	b.n	d51c6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d51a6:	220b      	movs	r2, #11
   d51a8:	9906      	ldr	r1, [sp, #24]
   d51aa:	9307      	str	r3, [sp, #28]
   d51ac:	f004 fa0a 	bl	d95c4 <memcmp>
   d51b0:	9b07      	ldr	r3, [sp, #28]
   d51b2:	2800      	cmp	r0, #0
   d51b4:	f47f af6e 	bne.w	d5094 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d51b8:	f899 2000 	ldrb.w	r2, [r9]
   d51bc:	07d2      	lsls	r2, r2, #31
   d51be:	d502      	bpl.n	d51c6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d51c0:	2201      	movs	r2, #1
   d51c2:	9204      	str	r2, [sp, #16]
   d51c4:	e766      	b.n	d5094 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d51c6:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d51ca:	f000 80d1 	beq.w	d5370 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d51ce:	e73e      	b.n	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d51d0:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d51d4:	f43f af3b 	beq.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d51d8:	f00b 0303 	and.w	r3, fp, #3
   d51dc:	3b01      	subs	r3, #1
   d51de:	2b01      	cmp	r3, #1
   d51e0:	f63f af35 	bhi.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d51e4:	2c00      	cmp	r4, #0
   d51e6:	bf08      	it	eq
   d51e8:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d51ea:	42bc      	cmp	r4, r7
   d51ec:	d302      	bcc.n	d51f4 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d51ee:	9b04      	ldr	r3, [sp, #16]
   d51f0:	b9cb      	cbnz	r3, d5226 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d51f2:	e01f      	b.n	d5234 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d51f4:	2100      	movs	r1, #0
   d51f6:	4630      	mov	r0, r6
   d51f8:	f000 fa11 	bl	d561e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d51fc:	b910      	cbnz	r0, d5204 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d51fe:	7873      	ldrb	r3, [r6, #1]
   d5200:	b15b      	cbz	r3, d521a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5202:	e724      	b.n	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5204:	3401      	adds	r4, #1
   d5206:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5208:	e7ef      	b.n	d51ea <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d520a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d520c:	791b      	ldrb	r3, [r3, #4]
   d520e:	2b01      	cmp	r3, #1
   d5210:	d8ed      	bhi.n	d51ee <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d5212:	3410      	adds	r4, #16
   d5214:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5216:	42a7      	cmp	r7, r4
   d5218:	d9e9      	bls.n	d51ee <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d521a:	4630      	mov	r0, r6
   d521c:	f000 f8d2 	bl	d53c4 <_ZN7FatFile13addDirClusterEv>
   d5220:	2800      	cmp	r0, #0
   d5222:	d1f2      	bne.n	d520a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5224:	e713      	b.n	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5226:	4649      	mov	r1, r9
   d5228:	4630      	mov	r0, r6
   d522a:	f7ff feaf 	bl	d4f8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d522e:	2800      	cmp	r0, #0
   d5230:	f43f af0d 	beq.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5234:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5238:	4630      	mov	r0, r6
   d523a:	f000 fa0d 	bl	d5658 <_ZN7FatFile7seekSetEm>
   d523e:	2800      	cmp	r0, #0
   d5240:	f43f af05 	beq.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5244:	1e7d      	subs	r5, r7, #1
   d5246:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5248:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d524a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d524e:	f04f 080f 	mov.w	r8, #15
   d5252:	e041      	b.n	d52d8 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5254:	2100      	movs	r1, #0
   d5256:	4630      	mov	r0, r6
   d5258:	f000 f9e1 	bl	d561e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d525c:	4607      	mov	r7, r0
   d525e:	2800      	cmp	r0, #0
   d5260:	f43f aef5 	beq.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5264:	68b2      	ldr	r2, [r6, #8]
   d5266:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d526a:	42ac      	cmp	r4, r5
   d526c:	f043 0301 	orr.w	r3, r3, #1
   d5270:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5274:	bf0c      	ite	eq
   d5276:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d527a:	4622      	movne	r2, r4
   d527c:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d527e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5282:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5286:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d528a:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d528c:	f7ff fd09 	bl	d4ca2 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5290:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5292:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5294:	f887 a01a 	strb.w	sl, [r7, #26]
   d5298:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d529c:	f002 021f 	and.w	r2, r2, #31
   d52a0:	230d      	movs	r3, #13
   d52a2:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d52a4:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d52a8:	435a      	muls	r2, r3
   d52aa:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d52ac:	9902      	ldr	r1, [sp, #8]
   d52ae:	4291      	cmp	r1, r2
   d52b0:	d915      	bls.n	d52de <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d52b2:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d52b6:	2b04      	cmp	r3, #4
   d52b8:	fa5f fc83 	uxtb.w	ip, r3
   d52bc:	f103 0001 	add.w	r0, r3, #1
   d52c0:	d813      	bhi.n	d52ea <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d52c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d52c6:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d52ca:	280d      	cmp	r0, #13
   d52cc:	f102 0201 	add.w	r2, r2, #1
   d52d0:	4603      	mov	r3, r0
   d52d2:	d1eb      	bne.n	d52ac <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d52d4:	3c01      	subs	r4, #1
   d52d6:	b2e4      	uxtb	r4, r4
   d52d8:	2c00      	cmp	r4, #0
   d52da:	d1bb      	bne.n	d5254 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d52dc:	e00e      	b.n	d52fc <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d52de:	bf14      	ite	ne
   d52e0:	f04f 31ff 	movne.w	r1, #4294967295
   d52e4:	2100      	moveq	r1, #0
   d52e6:	b289      	uxth	r1, r1
   d52e8:	e7e5      	b.n	d52b6 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d52ea:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d52ee:	bf94      	ite	ls
   d52f0:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d52f4:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d52f8:	8099      	strh	r1, [r3, #4]
   d52fa:	e7e6      	b.n	d52ca <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d52fc:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d52fe:	4621      	mov	r1, r4
   d5300:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5302:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5306:	f000 f98a 	bl	d561e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d530a:	4607      	mov	r7, r0
   d530c:	2800      	cmp	r0, #0
   d530e:	f43f ae9e 	beq.w	d504e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5312:	2220      	movs	r2, #32
   d5314:	4621      	mov	r1, r4
   d5316:	f004 f98a 	bl	d962e <memset>
  memcpy(dir->name, fname->sfn, 11);
   d531a:	464b      	mov	r3, r9
   d531c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5320:	603a      	str	r2, [r7, #0]
   d5322:	685a      	ldr	r2, [r3, #4]
   d5324:	607a      	str	r2, [r7, #4]
   d5326:	891a      	ldrh	r2, [r3, #8]
   d5328:	813a      	strh	r2, [r7, #8]
   d532a:	7a9b      	ldrb	r3, [r3, #10]
   d532c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d532e:	f899 3000 	ldrb.w	r3, [r9]
   d5332:	f003 0318 	and.w	r3, r3, #24
   d5336:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5338:	4b18      	ldr	r3, [pc, #96]	; (d539c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d533a:	681b      	ldr	r3, [r3, #0]
   d533c:	b12b      	cbz	r3, d534a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d533e:	f107 010e 	add.w	r1, r7, #14
   d5342:	f107 0010 	add.w	r0, r7, #16
   d5346:	4798      	blx	r3
   d5348:	e006      	b.n	d5358 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d534a:	2321      	movs	r3, #33	; 0x21
   d534c:	743b      	strb	r3, [r7, #16]
   d534e:	2328      	movs	r3, #40	; 0x28
   d5350:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5352:	2308      	movs	r3, #8
   d5354:	73bc      	strb	r4, [r7, #14]
   d5356:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5358:	8a3b      	ldrh	r3, [r7, #16]
   d535a:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d535c:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d535e:	89fb      	ldrh	r3, [r7, #14]
   d5360:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5362:	68b2      	ldr	r2, [r6, #8]
   d5364:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5368:	f043 0301 	orr.w	r3, r3, #1
   d536c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5370:	9500      	str	r5, [sp, #0]
   d5372:	465b      	mov	r3, fp
   d5374:	4652      	mov	r2, sl
   d5376:	4631      	mov	r1, r6
   d5378:	9805      	ldr	r0, [sp, #20]
   d537a:	f000 f9b6 	bl	d56ea <_ZN7FatFile15openCachedEntryEPS_tih>
   d537e:	e009      	b.n	d5394 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5380:	2701      	movs	r7, #1
   d5382:	e677      	b.n	d5074 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5384:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5388:	f1be 0f0d 	cmp.w	lr, #13
   d538c:	f43f ae82 	beq.w	d5094 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5390:	46d4      	mov	ip, sl
   d5392:	e6c3      	b.n	d511c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5394:	b009      	add	sp, #36	; 0x24
   d5396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d539a:	bf00      	nop
   d539c:	2003e33c 	.word	0x2003e33c

000d53a0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d53a0:	f001 b82e 	b.w	d6400 <HAL_Pin_Map>

000d53a4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d53a4:	f001 b82c 	b.w	d6400 <HAL_Pin_Map>

000d53a8 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d53a8:	f001 b82a 	b.w	d6400 <HAL_Pin_Map>

000d53ac <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d53ac:	f001 b828 	b.w	d6400 <HAL_Pin_Map>

000d53b0 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d53b0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d53b2:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d53b4:	f043 0304 	orr.w	r3, r3, #4
   d53b8:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d53ba:	f100 0210 	add.w	r2, r0, #16
   d53be:	6880      	ldr	r0, [r0, #8]
   d53c0:	f000 bc3a 	b.w	d5c38 <_ZN9FatVolume15allocateClusterEmPm>

000d53c4 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d53c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d53c8:	7803      	ldrb	r3, [r0, #0]
   d53ca:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d53ce:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d53d0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d53d4:	b10b      	cbz	r3, d53da <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d53d6:	2600      	movs	r6, #0
   d53d8:	e02e      	b.n	d5438 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d53da:	6942      	ldr	r2, [r0, #20]
   d53dc:	4b18      	ldr	r3, [pc, #96]	; (d5440 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d53de:	429a      	cmp	r2, r3
   d53e0:	d8f9      	bhi.n	d53d6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d53e2:	f7ff ffe5 	bl	d53b0 <_ZN7FatFile10addClusterEv>
   d53e6:	4606      	mov	r6, r0
   d53e8:	2800      	cmp	r0, #0
   d53ea:	d0f4      	beq.n	d53d6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d53ec:	6921      	ldr	r1, [r4, #16]
   d53ee:	68a0      	ldr	r0, [r4, #8]
   d53f0:	f000 fbb7 	bl	d5b62 <_ZNK9FatVolume17clusterFirstBlockEm>
   d53f4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d53f6:	68a0      	ldr	r0, [r4, #8]
   d53f8:	2205      	movs	r2, #5
   d53fa:	4639      	mov	r1, r7
   d53fc:	3024      	adds	r0, #36	; 0x24
   d53fe:	f000 fb8c 	bl	d5b1a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5402:	4680      	mov	r8, r0
   d5404:	2800      	cmp	r0, #0
   d5406:	d0e6      	beq.n	d53d6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5408:	4629      	mov	r1, r5
   d540a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d540e:	f004 f90e 	bl	d962e <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5412:	2501      	movs	r5, #1
   d5414:	68a3      	ldr	r3, [r4, #8]
   d5416:	791a      	ldrb	r2, [r3, #4]
   d5418:	42aa      	cmp	r2, r5
   d541a:	d909      	bls.n	d5430 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d541c:	4642      	mov	r2, r8
   d541e:	19e9      	adds	r1, r5, r7
   d5420:	6818      	ldr	r0, [r3, #0]
   d5422:	f000 fef7 	bl	d6214 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5426:	2800      	cmp	r0, #0
   d5428:	d0d5      	beq.n	d53d6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d542a:	3501      	adds	r5, #1
   d542c:	b2ed      	uxtb	r5, r5
   d542e:	e7f1      	b.n	d5414 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5430:	6963      	ldr	r3, [r4, #20]
   d5432:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5436:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5438:	4630      	mov	r0, r6
   d543a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d543e:	bf00      	nop
   d5440:	001ffdff 	.word	0x001ffdff

000d5444 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5448:	6880      	ldr	r0, [r0, #8]
   d544a:	460a      	mov	r2, r1
   d544c:	3024      	adds	r0, #36	; 0x24
   d544e:	69a1      	ldr	r1, [r4, #24]
   d5450:	f000 fb63 	bl	d5b1a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5454:	b120      	cbz	r0, d5460 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5456:	88a3      	ldrh	r3, [r4, #4]
   d5458:	f003 030f 	and.w	r3, r3, #15
   d545c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5460:	bd10      	pop	{r4, pc}

000d5462 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5462:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5464:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5466:	4605      	mov	r5, r0
   d5468:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d546a:	b984      	cbnz	r4, d548e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d546c:	2224      	movs	r2, #36	; 0x24
   d546e:	4621      	mov	r1, r4
   d5470:	f004 f8dd 	bl	d962e <memset>

  m_vol = vol;
   d5474:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5476:	79f3      	ldrb	r3, [r6, #7]
   d5478:	2b10      	cmp	r3, #16
   d547a:	d003      	beq.n	d5484 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d547c:	2b20      	cmp	r3, #32
   d547e:	d106      	bne.n	d548e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5480:	2340      	movs	r3, #64	; 0x40
   d5482:	e000      	b.n	d5486 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5484:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5486:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5488:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d548a:	70a8      	strb	r0, [r5, #2]
   d548c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d548e:	2000      	movs	r0, #0
   d5490:	bd70      	pop	{r4, r5, r6, pc}

000d5492 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5492:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5496:	7803      	ldrb	r3, [r0, #0]
   d5498:	4604      	mov	r4, r0
   d549a:	4689      	mov	r9, r1
   d549c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d549e:	b14b      	cbz	r3, d54b4 <_ZN7FatFile4readEPvj+0x22>
   d54a0:	7882      	ldrb	r2, [r0, #2]
   d54a2:	07d1      	lsls	r1, r2, #31
   d54a4:	d506      	bpl.n	d54b4 <_ZN7FatFile4readEPvj+0x22>
   d54a6:	e00c      	b.n	d54c2 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d54a8:	465a      	mov	r2, fp
   d54aa:	6921      	ldr	r1, [r4, #16]
   d54ac:	f000 fb5f 	bl	d5b6e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d54b0:	2800      	cmp	r0, #0
   d54b2:	da3d      	bge.n	d5530 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d54b4:	7863      	ldrb	r3, [r4, #1]
   d54b6:	f043 0302 	orr.w	r3, r3, #2
   d54ba:	7063      	strb	r3, [r4, #1]
  return -1;
   d54bc:	f04f 30ff 	mov.w	r0, #4294967295
   d54c0:	e097      	b.n	d55f2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d54c2:	071a      	lsls	r2, r3, #28
   d54c4:	d503      	bpl.n	d54ce <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d54c6:	69e3      	ldr	r3, [r4, #28]
   d54c8:	6962      	ldr	r2, [r4, #20]
   d54ca:	1a9b      	subs	r3, r3, r2
   d54cc:	e007      	b.n	d54de <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d54ce:	069a      	lsls	r2, r3, #26
   d54d0:	d508      	bpl.n	d54e4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d54d2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d54d4:	891a      	ldrh	r2, [r3, #8]
   d54d6:	6963      	ldr	r3, [r4, #20]
   d54d8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d54dc:	b29b      	uxth	r3, r3
   d54de:	429d      	cmp	r5, r3
   d54e0:	bf28      	it	cs
   d54e2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d54e4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d54e6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d54ea:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d54ee:	2e00      	cmp	r6, #0
   d54f0:	d035      	beq.n	d555e <_ZN7FatFile4readEPvj+0xcc>
   d54f2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d54f4:	6963      	ldr	r3, [r4, #20]
   d54f6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d54f8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d54fc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5500:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5504:	d002      	beq.n	d550c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5506:	6a03      	ldr	r3, [r0, #32]
   d5508:	4419      	add	r1, r3
   d550a:	e01d      	b.n	d5548 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d550c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5510:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5514:	f1ba 0f00 	cmp.w	sl, #0
   d5518:	d110      	bne.n	d553c <_ZN7FatFile4readEPvj+0xaa>
   d551a:	f1b8 0f00 	cmp.w	r8, #0
   d551e:	d10d      	bne.n	d553c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5520:	2b00      	cmp	r3, #0
   d5522:	d1c1      	bne.n	d54a8 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5524:	0653      	lsls	r3, r2, #25
   d5526:	bf4c      	ite	mi
   d5528:	6a03      	ldrmi	r3, [r0, #32]
   d552a:	6a23      	ldrpl	r3, [r4, #32]
   d552c:	6123      	str	r3, [r4, #16]
   d552e:	e005      	b.n	d553c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5530:	d104      	bne.n	d553c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5532:	7823      	ldrb	r3, [r4, #0]
   d5534:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5538:	d111      	bne.n	d555e <_ZN7FatFile4readEPvj+0xcc>
   d553a:	e7bb      	b.n	d54b4 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d553c:	6921      	ldr	r1, [r4, #16]
   d553e:	68a0      	ldr	r0, [r4, #8]
   d5540:	f000 fb0f 	bl	d5b62 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5544:	eb08 0100 	add.w	r1, r8, r0
   d5548:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d554a:	f1ba 0f00 	cmp.w	sl, #0
   d554e:	d135      	bne.n	d55bc <_ZN7FatFile4readEPvj+0x12a>
   d5550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5554:	d332      	bcc.n	d55bc <_ZN7FatFile4readEPvj+0x12a>
   d5556:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5558:	4299      	cmp	r1, r3
   d555a:	d102      	bne.n	d5562 <_ZN7FatFile4readEPvj+0xd0>
   d555c:	e02e      	b.n	d55bc <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d555e:	1ba8      	subs	r0, r5, r6
   d5560:	e047      	b.n	d55f2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5562:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5566:	d31b      	bcc.n	d55a0 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5568:	7822      	ldrb	r2, [r4, #0]
   d556a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d556c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5570:	d406      	bmi.n	d5580 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5572:	7902      	ldrb	r2, [r0, #4]
   d5574:	ebc8 0202 	rsb	r2, r8, r2
   d5578:	b2d2      	uxtb	r2, r2
   d557a:	4592      	cmp	sl, r2
   d557c:	bf28      	it	cs
   d557e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5580:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5582:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5586:	d207      	bcs.n	d5598 <_ZN7FatFile4readEPvj+0x106>
   d5588:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d558a:	4653      	mov	r3, sl
   d558c:	464a      	mov	r2, r9
   d558e:	6800      	ldr	r0, [r0, #0]
   d5590:	f000 fdfe 	bl	d6190 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5594:	b960      	cbnz	r0, d55b0 <_ZN7FatFile4readEPvj+0x11e>
   d5596:	e78d      	b.n	d54b4 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5598:	4453      	add	r3, sl
   d559a:	4299      	cmp	r1, r3
   d559c:	d321      	bcc.n	d55e2 <_ZN7FatFile4readEPvj+0x150>
   d559e:	e7f3      	b.n	d5588 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d55a0:	464a      	mov	r2, r9
   d55a2:	6800      	ldr	r0, [r0, #0]
   d55a4:	f000 fdac 	bl	d6100 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d55a8:	2800      	cmp	r0, #0
   d55aa:	d083      	beq.n	d54b4 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d55ac:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d55b0:	6963      	ldr	r3, [r4, #20]
   d55b2:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d55b4:	44b9      	add	r9, r7
    m_curPosition += n;
   d55b6:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d55b8:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d55ba:	e798      	b.n	d54ee <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d55bc:	2200      	movs	r2, #0
   d55be:	3024      	adds	r0, #36	; 0x24
   d55c0:	f000 faab 	bl	d5b1a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d55c4:	2800      	cmp	r0, #0
   d55c6:	f43f af75 	beq.w	d54b4 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d55ca:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d55ce:	42b7      	cmp	r7, r6
   d55d0:	bf28      	it	cs
   d55d2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d55d4:	eb00 010a 	add.w	r1, r0, sl
   d55d8:	463a      	mov	r2, r7
   d55da:	4648      	mov	r0, r9
   d55dc:	f004 f801 	bl	d95e2 <memcpy>
   d55e0:	e7e6      	b.n	d55b0 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d55e2:	3024      	adds	r0, #36	; 0x24
   d55e4:	9101      	str	r1, [sp, #4]
   d55e6:	f000 fa71 	bl	d5acc <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d55ea:	9901      	ldr	r1, [sp, #4]
   d55ec:	2800      	cmp	r0, #0
   d55ee:	d1cb      	bne.n	d5588 <_ZN7FatFile4readEPvj+0xf6>
   d55f0:	e760      	b.n	d54b4 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d55f2:	b003      	add	sp, #12
   d55f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d55f8 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d55f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d55fa:	2201      	movs	r2, #1
   d55fc:	f10d 0107 	add.w	r1, sp, #7
   d5600:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5602:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5604:	6905      	ldr	r5, [r0, #16]
   d5606:	f7ff ff44 	bl	d5492 <_ZN7FatFile4readEPvj>
   d560a:	2801      	cmp	r0, #1
   d560c:	bf05      	ittet	eq
   d560e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5612:	6166      	streq	r6, [r4, #20]
   d5614:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5618:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d561a:	b002      	add	sp, #8
   d561c:	bd70      	pop	{r4, r5, r6, pc}

000d561e <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d561e:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5620:	6943      	ldr	r3, [r0, #20]
   d5622:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5626:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5628:	b105      	cbz	r5, d562c <_ZN7FatFile12readDirCacheEb+0xe>
   d562a:	b969      	cbnz	r1, d5648 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d562c:	2201      	movs	r2, #1
   d562e:	f10d 0107 	add.w	r1, sp, #7
   d5632:	4620      	mov	r0, r4
   d5634:	f7ff ff2d 	bl	d5492 <_ZN7FatFile4readEPvj>
   d5638:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d563a:	2801      	cmp	r0, #1
   d563c:	d001      	beq.n	d5642 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d563e:	2000      	movs	r0, #0
   d5640:	e008      	b.n	d5654 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5642:	6963      	ldr	r3, [r4, #20]
   d5644:	331f      	adds	r3, #31
   d5646:	e000      	b.n	d564a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5648:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d564a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d564c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d564e:	3030      	adds	r0, #48	; 0x30
   d5650:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5654:	b003      	add	sp, #12
   d5656:	bd30      	pop	{r4, r5, pc}

000d5658 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d565c:	460e      	mov	r6, r1
   d565e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5660:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5662:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5664:	2900      	cmp	r1, #0
   d5666:	d039      	beq.n	d56dc <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5668:	6945      	ldr	r5, [r0, #20]
   d566a:	42b5      	cmp	r5, r6
   d566c:	d03a      	beq.n	d56e4 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d566e:	b90e      	cbnz	r6, d5674 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5670:	6106      	str	r6, [r0, #16]
    goto done;
   d5672:	e031      	b.n	d56d8 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5674:	070b      	lsls	r3, r1, #28
   d5676:	d503      	bpl.n	d5680 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5678:	69c3      	ldr	r3, [r0, #28]
   d567a:	429e      	cmp	r6, r3
   d567c:	d82e      	bhi.n	d56dc <_ZN7FatFile7seekSetEm+0x84>
   d567e:	e007      	b.n	d5690 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5680:	0688      	lsls	r0, r1, #26
   d5682:	d505      	bpl.n	d5690 <_ZN7FatFile7seekSetEm+0x38>
   d5684:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5686:	891b      	ldrh	r3, [r3, #8]
   d5688:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d568c:	d826      	bhi.n	d56dc <_ZN7FatFile7seekSetEm+0x84>
   d568e:	e023      	b.n	d56d8 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5690:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5694:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5698:	1e6a      	subs	r2, r5, #1
   d569a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d569e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d56a0:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d56a2:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d56a4:	429a      	cmp	r2, r3
   d56a6:	d800      	bhi.n	d56aa <_ZN7FatFile7seekSetEm+0x52>
   d56a8:	b94d      	cbnz	r5, d56be <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d56aa:	064a      	lsls	r2, r1, #25
   d56ac:	bf4c      	ite	mi
   d56ae:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d56b2:	6a22      	ldrpl	r2, [r4, #32]
   d56b4:	6122      	str	r2, [r4, #16]
   d56b6:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d56b8:	f104 0810 	add.w	r8, r4, #16
   d56bc:	e00a      	b.n	d56d4 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d56be:	1a9b      	subs	r3, r3, r2
   d56c0:	e7f9      	b.n	d56b6 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d56c2:	4642      	mov	r2, r8
   d56c4:	6921      	ldr	r1, [r4, #16]
   d56c6:	68a0      	ldr	r0, [r4, #8]
   d56c8:	f000 fa51 	bl	d5b6e <_ZN9FatVolume6fatGetEmPm>
   d56cc:	2800      	cmp	r0, #0
   d56ce:	f105 35ff 	add.w	r5, r5, #4294967295
   d56d2:	dd03      	ble.n	d56dc <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d56d4:	2d00      	cmp	r5, #0
   d56d6:	d1f4      	bne.n	d56c2 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d56d8:	6166      	str	r6, [r4, #20]
   d56da:	e003      	b.n	d56e4 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d56dc:	6127      	str	r7, [r4, #16]
  return false;
   d56de:	2000      	movs	r0, #0
   d56e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d56e4:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d56e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d56ea <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d56ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56ec:	460f      	mov	r7, r1
   d56ee:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d56f0:	2100      	movs	r1, #0
   d56f2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d56f4:	4604      	mov	r4, r0
   d56f6:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d56f8:	f003 ff99 	bl	d962e <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d56fc:	68b8      	ldr	r0, [r7, #8]
   d56fe:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5700:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5704:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5706:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d570a:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d570c:	6a3b      	ldr	r3, [r7, #32]
   d570e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5710:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5712:	7acb      	ldrb	r3, [r1, #11]
   d5714:	071d      	lsls	r5, r3, #28
   d5716:	d44c      	bmi.n	d57b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5718:	1883      	adds	r3, r0, r2
   d571a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d571e:	f003 0317 	and.w	r3, r3, #23
   d5722:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5724:	7ac9      	ldrb	r1, [r1, #11]
   d5726:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d572a:	bf04      	itt	eq
   d572c:	f043 0308 	orreq.w	r3, r3, #8
   d5730:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5732:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5736:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5738:	f006 0303 	and.w	r3, r6, #3
   d573c:	2b01      	cmp	r3, #1
   d573e:	d009      	beq.n	d5754 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5740:	2b02      	cmp	r3, #2
   d5742:	d005      	beq.n	d5750 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5744:	2b00      	cmp	r3, #0
   d5746:	d134      	bne.n	d57b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5748:	0571      	lsls	r1, r6, #21
   d574a:	d432      	bmi.n	d57b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d574c:	2301      	movs	r3, #1
   d574e:	e002      	b.n	d5756 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5750:	2303      	movs	r3, #3
   d5752:	e000      	b.n	d5756 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5754:	2302      	movs	r3, #2
   d5756:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5758:	78a1      	ldrb	r1, [r4, #2]
   d575a:	078b      	lsls	r3, r1, #30
   d575c:	d503      	bpl.n	d5766 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d575e:	7823      	ldrb	r3, [r4, #0]
   d5760:	f013 0f11 	tst.w	r3, #17
   d5764:	d125      	bne.n	d57b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5766:	b24b      	sxtb	r3, r1
   d5768:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d576c:	f006 0108 	and.w	r1, r6, #8
   d5770:	bf14      	ite	ne
   d5772:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5776:	2700      	moveq	r7, #0
   d5778:	4319      	orrs	r1, r3
   d577a:	4339      	orrs	r1, r7
   d577c:	70a1      	strb	r1, [r4, #2]
   d577e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5780:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5782:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5784:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5786:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d578a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d578e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5792:	d504      	bpl.n	d579e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5794:	b181      	cbz	r1, d57b8 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5796:	f000 fa8a 	bl	d5cae <_ZN9FatVolume9freeChainEm>
   d579a:	b968      	cbnz	r0, d57b8 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d579c:	e009      	b.n	d57b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d579e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d57a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d57a2:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d57a4:	0473      	lsls	r3, r6, #17
   d57a6:	d50c      	bpl.n	d57c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d57a8:	69e1      	ldr	r1, [r4, #28]
   d57aa:	4620      	mov	r0, r4
   d57ac:	f7ff ff54 	bl	d5658 <_ZN7FatFile7seekSetEm>
   d57b0:	b938      	cbnz	r0, d57c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d57b2:	2000      	movs	r0, #0
   d57b4:	7020      	strb	r0, [r4, #0]
  return false;
   d57b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d57b8:	78a3      	ldrb	r3, [r4, #2]
   d57ba:	f043 0304 	orr.w	r3, r3, #4
   d57be:	70a3      	strb	r3, [r4, #2]
   d57c0:	e7f0      	b.n	d57a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d57c2:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d57c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d57c8 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d57c8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d57ca:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d57cc:	4604      	mov	r4, r0
  if (!isOpen()) {
   d57ce:	b90b      	cbnz	r3, d57d4 <_ZN7FatFile4syncEv+0xc>
    return true;
   d57d0:	2001      	movs	r0, #1
   d57d2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d57d4:	7883      	ldrb	r3, [r0, #2]
   d57d6:	075a      	lsls	r2, r3, #29
   d57d8:	d523      	bpl.n	d5822 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d57da:	2101      	movs	r1, #1
   d57dc:	f7ff fe32 	bl	d5444 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d57e0:	4605      	mov	r5, r0
   d57e2:	b928      	cbnz	r0, d57f0 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d57e4:	7863      	ldrb	r3, [r4, #1]
   d57e6:	f043 0301 	orr.w	r3, r3, #1
   d57ea:	7063      	strb	r3, [r4, #1]
  return false;
   d57ec:	2000      	movs	r0, #0
   d57ee:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d57f0:	7803      	ldrb	r3, [r0, #0]
   d57f2:	2be5      	cmp	r3, #229	; 0xe5
   d57f4:	d0f6      	beq.n	d57e4 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d57f6:	7823      	ldrb	r3, [r4, #0]
   d57f8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d57fa:	bf44      	itt	mi
   d57fc:	69e3      	ldrmi	r3, [r4, #28]
   d57fe:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5800:	8c23      	ldrh	r3, [r4, #32]
   d5802:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5804:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5806:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5808:	4b09      	ldr	r3, [pc, #36]	; (d5830 <_ZN7FatFile4syncEv+0x68>)
   d580a:	681b      	ldr	r3, [r3, #0]
   d580c:	b12b      	cbz	r3, d581a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d580e:	f100 0116 	add.w	r1, r0, #22
   d5812:	3018      	adds	r0, #24
   d5814:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5816:	8b2b      	ldrh	r3, [r5, #24]
   d5818:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d581a:	78a3      	ldrb	r3, [r4, #2]
   d581c:	f023 0304 	bic.w	r3, r3, #4
   d5820:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5822:	68a0      	ldr	r0, [r4, #8]
   d5824:	f7ff fa30 	bl	d4c88 <_ZN9FatVolume9cacheSyncEv>
   d5828:	2800      	cmp	r0, #0
   d582a:	d0db      	beq.n	d57e4 <_ZN7FatFile4syncEv+0x1c>
   d582c:	e7d0      	b.n	d57d0 <_ZN7FatFile4syncEv+0x8>
   d582e:	bf00      	nop
   d5830:	2003e33c 	.word	0x2003e33c

000d5834 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5834:	b510      	push	{r4, lr}
   d5836:	4604      	mov	r4, r0
  bool rtn = sync();
   d5838:	f7ff ffc6 	bl	d57c8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d583c:	2300      	movs	r3, #0
   d583e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5840:	bd10      	pop	{r4, pc}

000d5842 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5842:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5844:	b093      	sub	sp, #76	; 0x4c
   d5846:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5848:	2300      	movs	r3, #0
   d584a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d584e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5852:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5854:	9201      	str	r2, [sp, #4]
   d5856:	4606      	mov	r6, r0
   d5858:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d585a:	b10b      	cbz	r3, d5860 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d585c:	2000      	movs	r0, #0
   d585e:	e03d      	b.n	d58dc <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5860:	780b      	ldrb	r3, [r1, #0]
   d5862:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5866:	d0f9      	beq.n	d585c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5868:	7813      	ldrb	r3, [r2, #0]
   d586a:	2b2f      	cmp	r3, #47	; 0x2f
   d586c:	d112      	bne.n	d5894 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d586e:	9b01      	ldr	r3, [sp, #4]
   d5870:	781a      	ldrb	r2, [r3, #0]
   d5872:	2a2f      	cmp	r2, #47	; 0x2f
   d5874:	d102      	bne.n	d587c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5876:	3301      	adds	r3, #1
   d5878:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d587a:	e7f8      	b.n	d586e <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d587c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d587e:	b91a      	cbnz	r2, d5888 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5880:	4630      	mov	r0, r6
   d5882:	f7ff fdee 	bl	d5462 <_ZN7FatFile8openRootEP9FatVolume>
   d5886:	e029      	b.n	d58dc <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5888:	a809      	add	r0, sp, #36	; 0x24
   d588a:	f7ff fdea 	bl	d5462 <_ZN7FatFile8openRootEP9FatVolume>
   d588e:	2800      	cmp	r0, #0
   d5890:	d0e4      	beq.n	d585c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5892:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5894:	aa01      	add	r2, sp, #4
   d5896:	a903      	add	r1, sp, #12
   d5898:	9801      	ldr	r0, [sp, #4]
   d589a:	f7ff fa29 	bl	d4cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d589e:	2800      	cmp	r0, #0
   d58a0:	d0dc      	beq.n	d585c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d58a2:	9b01      	ldr	r3, [sp, #4]
   d58a4:	781b      	ldrb	r3, [r3, #0]
   d58a6:	b19b      	cbz	r3, d58d0 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d58a8:	2300      	movs	r3, #0
   d58aa:	aa03      	add	r2, sp, #12
   d58ac:	4621      	mov	r1, r4
   d58ae:	4630      	mov	r0, r6
   d58b0:	f7ff fbc2 	bl	d5038 <_ZN7FatFile4openEPS_P7fname_ti>
   d58b4:	2800      	cmp	r0, #0
   d58b6:	d0d1      	beq.n	d585c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d58b8:	4635      	mov	r5, r6
   d58ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58bc:	ac09      	add	r4, sp, #36	; 0x24
   d58be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58c4:	682b      	ldr	r3, [r5, #0]
   d58c6:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d58c8:	4630      	mov	r0, r6
   d58ca:	f7ff ffb3 	bl	d5834 <_ZN7FatFile5closeEv>
   d58ce:	e7e0      	b.n	d5892 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d58d0:	463b      	mov	r3, r7
   d58d2:	aa03      	add	r2, sp, #12
   d58d4:	4621      	mov	r1, r4
   d58d6:	4630      	mov	r0, r6
   d58d8:	f7ff fbae 	bl	d5038 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d58dc:	b013      	add	sp, #76	; 0x4c
   d58de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58e0 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d58e0:	b500      	push	{lr}
   d58e2:	b08b      	sub	sp, #44	; 0x2c
   d58e4:	2300      	movs	r3, #0
   d58e6:	f88d 3004 	strb.w	r3, [sp, #4]
   d58ea:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d58ee:	460a      	mov	r2, r1
   d58f0:	2301      	movs	r3, #1
   d58f2:	4601      	mov	r1, r0
   d58f4:	a801      	add	r0, sp, #4
   d58f6:	f7ff ffa4 	bl	d5842 <_ZN7FatFile4openEPS_PKci>
   d58fa:	b110      	cbz	r0, d5902 <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d58fc:	a801      	add	r0, sp, #4
   d58fe:	f7ff fae3 	bl	d4ec8 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d5902:	b00b      	add	sp, #44	; 0x2c
   d5904:	f85d fb04 	ldr.w	pc, [sp], #4

000d5908 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d590c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d590e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5910:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5912:	4604      	mov	r4, r0
   d5914:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5916:	d508      	bpl.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
   d5918:	7883      	ldrb	r3, [r0, #2]
   d591a:	079a      	lsls	r2, r3, #30
   d591c:	d505      	bpl.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d591e:	071b      	lsls	r3, r3, #28
   d5920:	d50b      	bpl.n	d593a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5922:	69e1      	ldr	r1, [r4, #28]
   d5924:	f7ff fe98 	bl	d5658 <_ZN7FatFile7seekSetEm>
   d5928:	b938      	cbnz	r0, d593a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d592a:	7863      	ldrb	r3, [r4, #1]
   d592c:	f043 0301 	orr.w	r3, r3, #1
   d5930:	7063      	strb	r3, [r4, #1]
  return -1;
   d5932:	f04f 30ff 	mov.w	r0, #4294967295
   d5936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d593a:	6963      	ldr	r3, [r4, #20]
   d593c:	43db      	mvns	r3, r3
   d593e:	4598      	cmp	r8, r3
   d5940:	d8f3      	bhi.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
   d5942:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5944:	f04f 0a00 	mov.w	sl, #0
   d5948:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d594a:	2e00      	cmp	r6, #0
   d594c:	f000 8081 	beq.w	d5a52 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5950:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5952:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5954:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5958:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d595c:	d11c      	bne.n	d5998 <_ZN7FatFile5writeEPKvj+0x90>
   d595e:	b9df      	cbnz	r7, d5998 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5960:	6921      	ldr	r1, [r4, #16]
   d5962:	b171      	cbz	r1, d5982 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5964:	f104 0210 	add.w	r2, r4, #16
   d5968:	f000 f901 	bl	d5b6e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d596c:	2800      	cmp	r0, #0
   d596e:	dbdc      	blt.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5970:	f040 808e 	bne.w	d5a90 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5974:	4620      	mov	r0, r4
   d5976:	f7ff fd1b 	bl	d53b0 <_ZN7FatFile10addClusterEv>
   d597a:	2800      	cmp	r0, #0
   d597c:	f040 8088 	bne.w	d5a90 <_ZN7FatFile5writeEPKvj+0x188>
   d5980:	e7d3      	b.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5982:	6a23      	ldr	r3, [r4, #32]
   d5984:	b93b      	cbnz	r3, d5996 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5986:	4620      	mov	r0, r4
   d5988:	f7ff fd12 	bl	d53b0 <_ZN7FatFile10addClusterEv>
   d598c:	2800      	cmp	r0, #0
   d598e:	d0cc      	beq.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5990:	6923      	ldr	r3, [r4, #16]
   d5992:	6223      	str	r3, [r4, #32]
   d5994:	e000      	b.n	d5998 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5996:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5998:	6921      	ldr	r1, [r4, #16]
   d599a:	68a0      	ldr	r0, [r4, #8]
   d599c:	f000 f8e1 	bl	d5b62 <_ZNK9FatVolume17clusterFirstBlockEm>
   d59a0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d59a2:	b917      	cbnz	r7, d59aa <_ZN7FatFile5writeEPKvj+0xa2>
   d59a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d59a8:	d221      	bcs.n	d59ee <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d59aa:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d59ae:	42b5      	cmp	r5, r6
   d59b0:	bf28      	it	cs
   d59b2:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d59b4:	b937      	cbnz	r7, d59c4 <_ZN7FatFile5writeEPKvj+0xbc>
   d59b6:	6963      	ldr	r3, [r4, #20]
   d59b8:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d59ba:	4293      	cmp	r3, r2
   d59bc:	bf34      	ite	cc
   d59be:	2201      	movcc	r2, #1
   d59c0:	2205      	movcs	r2, #5
   d59c2:	e000      	b.n	d59c6 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d59c4:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d59c6:	68a0      	ldr	r0, [r4, #8]
   d59c8:	3024      	adds	r0, #36	; 0x24
   d59ca:	f000 f8a6 	bl	d5b1a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d59ce:	2800      	cmp	r0, #0
   d59d0:	d0ab      	beq.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d59d2:	4438      	add	r0, r7
   d59d4:	462a      	mov	r2, r5
   d59d6:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d59d8:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d59da:	f003 fe02 	bl	d95e2 <memcpy>
      if (512 == (n + blockOffset)) {
   d59de:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d59e2:	d130      	bne.n	d5a46 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d59e4:	68a0      	ldr	r0, [r4, #8]
   d59e6:	3024      	adds	r0, #36	; 0x24
   d59e8:	f000 f870 	bl	d5acc <_ZN8FatCache4syncEv>
   d59ec:	e017      	b.n	d5a1e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d59ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d59f2:	68a0      	ldr	r0, [r4, #8]
   d59f4:	d315      	bcc.n	d5a22 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d59f6:	7902      	ldrb	r2, [r0, #4]
   d59f8:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d59fa:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d59fc:	b2d2      	uxtb	r2, r2
   d59fe:	4293      	cmp	r3, r2
   d5a00:	bf28      	it	cs
   d5a02:	4613      	movcs	r3, r2
   d5a04:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a06:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5a08:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a0c:	d302      	bcc.n	d5a14 <_ZN7FatFile5writeEPKvj+0x10c>
   d5a0e:	441a      	add	r2, r3
   d5a10:	4291      	cmp	r1, r2
   d5a12:	d337      	bcc.n	d5a84 <_ZN7FatFile5writeEPKvj+0x17c>
   d5a14:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5a16:	464a      	mov	r2, r9
   d5a18:	6838      	ldr	r0, [r7, #0]
   d5a1a:	f000 fc6d 	bl	d62f8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5a1e:	b990      	cbnz	r0, d5a46 <_ZN7FatFile5writeEPKvj+0x13e>
   d5a20:	e783      	b.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5a22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5a24:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5a26:	bf02      	ittt	eq
   d5a28:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5a2c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5a30:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5a32:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5a34:	464a      	mov	r2, r9
   d5a36:	6818      	ldr	r0, [r3, #0]
   d5a38:	f000 fbec 	bl	d6214 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5a3c:	2800      	cmp	r0, #0
   d5a3e:	f43f af74 	beq.w	d592a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5a42:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5a46:	6963      	ldr	r3, [r4, #20]
   d5a48:	442b      	add	r3, r5
   d5a4a:	6163      	str	r3, [r4, #20]
    src += n;
   d5a4c:	44a9      	add	r9, r5
    nToWrite -= n;
   d5a4e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5a50:	e77a      	b.n	d5948 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5a52:	69e2      	ldr	r2, [r4, #28]
   d5a54:	4293      	cmp	r3, r2
   d5a56:	d901      	bls.n	d5a5c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5a58:	61e3      	str	r3, [r4, #28]
   d5a5a:	e002      	b.n	d5a62 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5a5c:	4b0f      	ldr	r3, [pc, #60]	; (d5a9c <_ZN7FatFile5writeEPKvj+0x194>)
   d5a5e:	681b      	ldr	r3, [r3, #0]
   d5a60:	b11b      	cbz	r3, d5a6a <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5a62:	78a3      	ldrb	r3, [r4, #2]
   d5a64:	f043 0304 	orr.w	r3, r3, #4
   d5a68:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5a6a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5a6e:	2b00      	cmp	r3, #0
   d5a70:	db02      	blt.n	d5a78 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5a72:	4640      	mov	r0, r8
   d5a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5a78:	4620      	mov	r0, r4
   d5a7a:	f7ff fea5 	bl	d57c8 <_ZN7FatFile4syncEv>
   d5a7e:	2800      	cmp	r0, #0
   d5a80:	d1f7      	bne.n	d5a72 <_ZN7FatFile5writeEPKvj+0x16a>
   d5a82:	e752      	b.n	d592a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5a84:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5a88:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5a8c:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5a8e:	e7c1      	b.n	d5a14 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5a90:	6921      	ldr	r1, [r4, #16]
   d5a92:	68a0      	ldr	r0, [r4, #8]
   d5a94:	f000 f865 	bl	d5b62 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5a98:	4601      	mov	r1, r0
   d5a9a:	e783      	b.n	d59a4 <_ZN7FatFile5writeEPKvj+0x9c>
   d5a9c:	2003e33c 	.word	0x2003e33c

000d5aa0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5aa0:	f000 bcae 	b.w	d6400 <HAL_Pin_Map>

000d5aa4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5aa4:	b570      	push	{r4, r5, r6, lr}
   d5aa6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5aa8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5aaa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5aac:	b149      	cbz	r1, d5ac2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5aae:	f003 fe10 	bl	d96d2 <strlen>
   d5ab2:	682b      	ldr	r3, [r5, #0]
   d5ab4:	4602      	mov	r2, r0
   d5ab6:	4621      	mov	r1, r4
   d5ab8:	4628      	mov	r0, r5
   d5aba:	68db      	ldr	r3, [r3, #12]
    }
   d5abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ac0:	4718      	bx	r3
    }
   d5ac2:	bd70      	pop	{r4, r5, r6, pc}

000d5ac4 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5ac4:	f000 bc9c 	b.w	d6400 <HAL_Pin_Map>

000d5ac8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5ac8:	f000 bc9a 	b.w	d6400 <HAL_Pin_Map>

000d5acc <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5acc:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5ace:	7803      	ldrb	r3, [r0, #0]
   d5ad0:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5ad2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5ad4:	d51e      	bpl.n	d5b14 <_ZN8FatCache4syncEv+0x48>
   d5ad6:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5ad8:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5ada:	f100 060c 	add.w	r6, r0, #12
   d5ade:	4632      	mov	r2, r6
   d5ae0:	6818      	ldr	r0, [r3, #0]
   d5ae2:	f000 fb97 	bl	d6214 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5ae6:	4605      	mov	r5, r0
   d5ae8:	b908      	cbnz	r0, d5aee <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5aea:	2500      	movs	r5, #0
   d5aec:	e013      	b.n	d5b16 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5aee:	7823      	ldrb	r3, [r4, #0]
   d5af0:	079b      	lsls	r3, r3, #30
   d5af2:	d404      	bmi.n	d5afe <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5af4:	7823      	ldrb	r3, [r4, #0]
   d5af6:	f023 0301 	bic.w	r3, r3, #1
   d5afa:	7023      	strb	r3, [r4, #0]
   d5afc:	e00b      	b.n	d5b16 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5afe:	6863      	ldr	r3, [r4, #4]
   d5b00:	68a0      	ldr	r0, [r4, #8]
   d5b02:	6919      	ldr	r1, [r3, #16]
   d5b04:	4632      	mov	r2, r6
   d5b06:	4401      	add	r1, r0
   d5b08:	6818      	ldr	r0, [r3, #0]
   d5b0a:	f000 fb83 	bl	d6214 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5b0e:	2800      	cmp	r0, #0
   d5b10:	d1f0      	bne.n	d5af4 <_ZN8FatCache4syncEv+0x28>
   d5b12:	e7ea      	b.n	d5aea <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5b14:	2501      	movs	r5, #1

fail:
  return false;
}
   d5b16:	4628      	mov	r0, r5
   d5b18:	bd70      	pop	{r4, r5, r6, pc}

000d5b1a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5b1a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5b1c:	6883      	ldr	r3, [r0, #8]
   d5b1e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5b20:	4604      	mov	r4, r0
   d5b22:	460e      	mov	r6, r1
   d5b24:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5b26:	d014      	beq.n	d5b52 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5b28:	f7ff ffd0 	bl	d5acc <_ZN8FatCache4syncEv>
   d5b2c:	b908      	cbnz	r0, d5b32 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5b2e:	2000      	movs	r0, #0
   d5b30:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5b32:	076b      	lsls	r3, r5, #29
   d5b34:	d503      	bpl.n	d5b3e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5b36:	2300      	movs	r3, #0
   d5b38:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5b3a:	60a6      	str	r6, [r4, #8]
   d5b3c:	e009      	b.n	d5b52 <_ZN8FatCache4readEmh+0x38>
   d5b3e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5b40:	f104 020c 	add.w	r2, r4, #12
   d5b44:	4631      	mov	r1, r6
   d5b46:	6818      	ldr	r0, [r3, #0]
   d5b48:	f000 fada 	bl	d6100 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5b4c:	2800      	cmp	r0, #0
   d5b4e:	d1f2      	bne.n	d5b36 <_ZN8FatCache4readEmh+0x1c>
   d5b50:	e7ed      	b.n	d5b2e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5b52:	7823      	ldrb	r3, [r4, #0]
   d5b54:	4620      	mov	r0, r4
   d5b56:	f005 0503 	and.w	r5, r5, #3
   d5b5a:	431d      	orrs	r5, r3
   d5b5c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5b60:	bd70      	pop	{r4, r5, r6, pc}

000d5b62 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5b62:	7983      	ldrb	r3, [r0, #6]
   d5b64:	6940      	ldr	r0, [r0, #20]
   d5b66:	3902      	subs	r1, #2
   d5b68:	4099      	lsls	r1, r3
}
   d5b6a:	4408      	add	r0, r1
   d5b6c:	4770      	bx	lr

000d5b6e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b6e:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5b70:	b570      	push	{r4, r5, r6, lr}
   d5b72:	4605      	mov	r5, r0
   d5b74:	460c      	mov	r4, r1
   d5b76:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b78:	d802      	bhi.n	d5b80 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5b7a:	f04f 30ff 	mov.w	r0, #4294967295
   d5b7e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b80:	69c3      	ldr	r3, [r0, #28]
   d5b82:	4299      	cmp	r1, r3
   d5b84:	d8f9      	bhi.n	d5b7a <_ZN9FatVolume6fatGetEmPm+0xc>
   d5b86:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5b88:	2b20      	cmp	r3, #32
   d5b8a:	d110      	bne.n	d5bae <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5b8c:	6981      	ldr	r1, [r0, #24]
   d5b8e:	2202      	movs	r2, #2
   d5b90:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5b94:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5b98:	f7ff ffbf 	bl	d5b1a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5b9c:	2800      	cmp	r0, #0
   d5b9e:	d0ec      	beq.n	d5b7a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5ba0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5ba4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5ba8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5bac:	e00f      	b.n	d5bce <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5bae:	2b10      	cmp	r3, #16
   d5bb0:	d1e3      	bne.n	d5b7a <_ZN9FatVolume6fatGetEmPm+0xc>
   d5bb2:	6983      	ldr	r3, [r0, #24]
   d5bb4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5bb8:	2202      	movs	r2, #2
   d5bba:	4419      	add	r1, r3
   d5bbc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5bc0:	f7ff ffab 	bl	d5b1a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5bc4:	2800      	cmp	r0, #0
   d5bc6:	d0d8      	beq.n	d5b7a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5bc8:	b2e4      	uxtb	r4, r4
   d5bca:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5bce:	69ea      	ldr	r2, [r5, #28]
   d5bd0:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5bd2:	bf9a      	itte	ls
   d5bd4:	6033      	strls	r3, [r6, #0]
  return 1;
   d5bd6:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5bd8:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5bda:	bd70      	pop	{r4, r5, r6, pc}

000d5bdc <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5bdc:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5bde:	b538      	push	{r3, r4, r5, lr}
   d5be0:	460c      	mov	r4, r1
   d5be2:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5be4:	d801      	bhi.n	d5bea <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5be6:	2000      	movs	r0, #0
   d5be8:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5bea:	69c3      	ldr	r3, [r0, #28]
   d5bec:	4299      	cmp	r1, r3
   d5bee:	d8fa      	bhi.n	d5be6 <_ZN9FatVolume6fatPutEmm+0xa>
   d5bf0:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5bf2:	2b20      	cmp	r3, #32
   d5bf4:	d10e      	bne.n	d5c14 <_ZN9FatVolume6fatPutEmm+0x38>
   d5bf6:	6981      	ldr	r1, [r0, #24]
   d5bf8:	2203      	movs	r2, #3
   d5bfa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5bfe:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5c02:	f7ff ff8a 	bl	d5b1a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5c06:	2800      	cmp	r0, #0
   d5c08:	d0ed      	beq.n	d5be6 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5c0a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5c0e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5c12:	e00f      	b.n	d5c34 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5c14:	2b10      	cmp	r3, #16
   d5c16:	d1e6      	bne.n	d5be6 <_ZN9FatVolume6fatPutEmm+0xa>
   d5c18:	6983      	ldr	r3, [r0, #24]
   d5c1a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5c1e:	2203      	movs	r2, #3
   d5c20:	4419      	add	r1, r3
   d5c22:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5c26:	f7ff ff78 	bl	d5b1a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5c2a:	2800      	cmp	r0, #0
   d5c2c:	d0db      	beq.n	d5be6 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5c2e:	b2e4      	uxtb	r4, r4
   d5c30:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5c34:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5c36:	bd38      	pop	{r3, r4, r5, pc}

000d5c38 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5c3c:	68c4      	ldr	r4, [r0, #12]
   d5c3e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5c40:	4605      	mov	r5, r0
   d5c42:	460e      	mov	r6, r1
   d5c44:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5c46:	d207      	bcs.n	d5c58 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5c48:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5c4a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5c4c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5c4e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5c50:	429c      	cmp	r4, r3
   d5c52:	d903      	bls.n	d5c5c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5c54:	b9cf      	cbnz	r7, d5c8a <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5c56:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5c58:	2701      	movs	r7, #1
   d5c5a:	e7f7      	b.n	d5c4c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5c5c:	42a6      	cmp	r6, r4
   d5c5e:	d014      	beq.n	d5c8a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5c60:	aa01      	add	r2, sp, #4
   d5c62:	4621      	mov	r1, r4
   d5c64:	4628      	mov	r0, r5
   d5c66:	f7ff ff82 	bl	d5b6e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5c6a:	2800      	cmp	r0, #0
   d5c6c:	db0d      	blt.n	d5c8a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5c6e:	d0ed      	beq.n	d5c4c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5c70:	9b01      	ldr	r3, [sp, #4]
   d5c72:	2b00      	cmp	r3, #0
   d5c74:	d1ea      	bne.n	d5c4c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5c76:	b107      	cbz	r7, d5c7a <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5c78:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5c7a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5c7e:	4621      	mov	r1, r4
   d5c80:	4628      	mov	r0, r5
   d5c82:	f7ff ffab 	bl	d5bdc <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5c86:	4607      	mov	r7, r0
   d5c88:	b908      	cbnz	r0, d5c8e <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5c8a:	2700      	movs	r7, #0
   d5c8c:	e00b      	b.n	d5ca6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5c8e:	b916      	cbnz	r6, d5c96 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5c90:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5c94:	e007      	b.n	d5ca6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5c96:	4622      	mov	r2, r4
   d5c98:	4631      	mov	r1, r6
   d5c9a:	4628      	mov	r0, r5
   d5c9c:	f7ff ff9e 	bl	d5bdc <_ZN9FatVolume6fatPutEmm>
   d5ca0:	2800      	cmp	r0, #0
   d5ca2:	d1f5      	bne.n	d5c90 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5ca4:	e7f1      	b.n	d5c8a <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5ca6:	4638      	mov	r0, r7
   d5ca8:	b002      	add	sp, #8
   d5caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cae <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5cb0:	4605      	mov	r5, r0
   d5cb2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5cb4:	aa01      	add	r2, sp, #4
   d5cb6:	4621      	mov	r1, r4
   d5cb8:	4628      	mov	r0, r5
   d5cba:	f7ff ff58 	bl	d5b6e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5cbe:	1e06      	subs	r6, r0, #0
   d5cc0:	da01      	bge.n	d5cc6 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5cc2:	2000      	movs	r0, #0
   d5cc4:	e00f      	b.n	d5ce6 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5cc6:	2200      	movs	r2, #0
   d5cc8:	4621      	mov	r1, r4
   d5cca:	4628      	mov	r0, r5
   d5ccc:	f7ff ff86 	bl	d5bdc <_ZN9FatVolume6fatPutEmm>
   d5cd0:	2800      	cmp	r0, #0
   d5cd2:	d0f6      	beq.n	d5cc2 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5cd4:	68eb      	ldr	r3, [r5, #12]
   d5cd6:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5cd8:	bf9c      	itt	ls
   d5cda:	f104 34ff 	addls.w	r4, r4, #4294967295
   d5cde:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5ce0:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5ce2:	2e00      	cmp	r6, #0
   d5ce4:	d1e6      	bne.n	d5cb4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5ce6:	b002      	add	sp, #8
   d5ce8:	bd70      	pop	{r4, r5, r6, pc}

000d5cea <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5cea:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5cec:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5cee:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5cf0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5cf2:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5cf4:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5cf8:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d5cfa:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5cfc:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5cfe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5d02:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5d04:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5d08:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5d0c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5d10:	b1a1      	cbz	r1, d5d3c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5d12:	2904      	cmp	r1, #4
   d5d14:	d85d      	bhi.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5d16:	4611      	mov	r1, r2
   d5d18:	3024      	adds	r0, #36	; 0x24
   d5d1a:	f7ff fefe 	bl	d5b1a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5d1e:	2800      	cmp	r0, #0
   d5d20:	d057      	beq.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5d22:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5d26:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5d2a:	065b      	lsls	r3, r3, #25
   d5d2c:	d151      	bne.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
   d5d2e:	351b      	adds	r5, #27
   d5d30:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5d34:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5d38:	2d00      	cmp	r5, #0
   d5d3a:	d04a      	beq.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
   d5d3c:	2200      	movs	r2, #0
   d5d3e:	4629      	mov	r1, r5
   d5d40:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5d44:	f7ff fee9 	bl	d5b1a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5d48:	2800      	cmp	r0, #0
   d5d4a:	d042      	beq.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5d4c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5d54:	d13d      	bne.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
   d5d56:	7c03      	ldrb	r3, [r0, #16]
   d5d58:	2b02      	cmp	r3, #2
   d5d5a:	d13a      	bne.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5d5c:	89c3      	ldrh	r3, [r0, #14]
   d5d5e:	2b00      	cmp	r3, #0
   d5d60:	d037      	beq.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5d62:	7b41      	ldrb	r1, [r0, #13]
   d5d64:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5d66:	1e4b      	subs	r3, r1, #1
   d5d68:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5d6a:	2300      	movs	r3, #0
   d5d6c:	71a3      	strb	r3, [r4, #6]
   d5d6e:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5d70:	2301      	movs	r3, #1
   d5d72:	428b      	cmp	r3, r1
   d5d74:	d007      	beq.n	d5d86 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d5d76:	3e01      	subs	r6, #1
   d5d78:	d02b      	beq.n	d5dd2 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5d7a:	79a2      	ldrb	r2, [r4, #6]
   d5d7c:	005b      	lsls	r3, r3, #1
   d5d7e:	3201      	adds	r2, #1
   d5d80:	b2db      	uxtb	r3, r3
   d5d82:	71a2      	strb	r2, [r4, #6]
   d5d84:	e7f5      	b.n	d5d72 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d5d86:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5d88:	b902      	cbnz	r2, d5d8c <_ZN9FatVolume4initEh+0xa2>
   d5d8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5d8c:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5d8e:	89c6      	ldrh	r6, [r0, #14]
   d5d90:	442e      	add	r6, r5
   d5d92:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5d94:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5d98:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5d9a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5d9e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5da0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5da4:	0152      	lsls	r2, r2, #5
   d5da6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5daa:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5dae:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5db0:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5db4:	b903      	cbnz	r3, d5db8 <_ZN9FatVolume4initEh+0xce>
   d5db6:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5db8:	1aad      	subs	r5, r5, r2
   d5dba:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5dbc:	79a5      	ldrb	r5, [r4, #6]
   d5dbe:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5dc2:	1c6b      	adds	r3, r5, #1
   d5dc4:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5dc6:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5dca:	429d      	cmp	r5, r3
   d5dcc:	d803      	bhi.n	d5dd6 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5dce:	230c      	movs	r3, #12
   d5dd0:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5dd2:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5dd4:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5dd6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5dda:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5ddc:	bf85      	ittet	hi
   d5dde:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5de0:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5de2:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5de4:	2320      	movhi	r3, #32
   d5de6:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5de8:	2001      	movs	r0, #1

fail:
  return false;
}
   d5dea:	bd70      	pop	{r4, r5, r6, pc}

000d5dec <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5dec:	f000 bb08 	b.w	d6400 <HAL_Pin_Map>

000d5df0 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5df0:	f000 bb06 	b.w	d6400 <HAL_Pin_Map>

000d5df4 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5df4:	f000 bb04 	b.w	d6400 <HAL_Pin_Map>

000d5df8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5df8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5dfa:	4c0e      	ldr	r4, [pc, #56]	; (d5e34 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5dfc:	460e      	mov	r6, r1
   d5dfe:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5e00:	f000 fb86 	bl	d6510 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5e04:	6823      	ldr	r3, [r4, #0]
   d5e06:	1ac0      	subs	r0, r0, r3
   d5e08:	4b0b      	ldr	r3, [pc, #44]	; (d5e38 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5e0a:	4298      	cmp	r0, r3
   d5e0c:	d908      	bls.n	d5e20 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e0e:	f000 fb87 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e12:	4b0a      	ldr	r3, [pc, #40]	; (d5e3c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5e14:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5e16:	f000 fdbb 	bl	d6990 <spark_process>
   d5e1a:	f000 fb79 	bl	d6510 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5e1e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5e20:	f000 fb7e 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5e24:	b280      	uxth	r0, r0
   d5e26:	1b80      	subs	r0, r0, r6
}
   d5e28:	42a8      	cmp	r0, r5
   d5e2a:	bfd4      	ite	le
   d5e2c:	2000      	movle	r0, #0
   d5e2e:	2001      	movgt	r0, #1
   d5e30:	bd70      	pop	{r4, r5, r6, pc}
   d5e32:	bf00      	nop
   d5e34:	2003e340 	.word	0x2003e340
   d5e38:	000186a0 	.word	0x000186a0
   d5e3c:	2003e708 	.word	0x2003e708

000d5e40 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5e40:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5e42:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5e44:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5e46:	b94d      	cbnz	r5, d5e5c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5e48:	6840      	ldr	r0, [r0, #4]
   d5e4a:	f000 fa7d 	bl	d6348 <_ZN14SdSpiAltDriver8activateEv>
   d5e4e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5e50:	4629      	mov	r1, r5
   d5e52:	7d18      	ldrb	r0, [r3, #20]
   d5e54:	f003 f8d9 	bl	d900a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5e58:	2301      	movs	r3, #1
   d5e5a:	7223      	strb	r3, [r4, #8]
   d5e5c:	bd38      	pop	{r3, r4, r5, pc}

000d5e5e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5e5e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5e60:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5e62:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5e64:	b16b      	cbz	r3, d5e82 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5e66:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5e68:	2101      	movs	r1, #1
   d5e6a:	7d18      	ldrb	r0, [r3, #20]
   d5e6c:	f003 f8cd 	bl	d900a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5e70:	21ff      	movs	r1, #255	; 0xff
   d5e72:	6860      	ldr	r0, [r4, #4]
   d5e74:	f000 fa9a 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5e78:	6860      	ldr	r0, [r4, #4]
   d5e7a:	f000 fa79 	bl	d6370 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5e7e:	2300      	movs	r3, #0
   d5e80:	7223      	strb	r3, [r4, #8]
   d5e82:	bd10      	pop	{r4, pc}

000d5e84 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e86:	4604      	mov	r4, r0
   d5e88:	460d      	mov	r5, r1
   d5e8a:	4616      	mov	r6, r2
   d5e8c:	f000 fb48 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5e90:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5e92:	6860      	ldr	r0, [r4, #4]
   d5e94:	f000 fa6f 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5e98:	28ff      	cmp	r0, #255	; 0xff
   d5e9a:	7260      	strb	r0, [r4, #9]
   d5e9c:	d109      	bne.n	d5eb2 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ea2:	4639      	mov	r1, r7
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	f7ff ffa7 	bl	d5df8 <_ZN9SdSpiCard10isTimedOutEtt>
   d5eaa:	2800      	cmp	r0, #0
   d5eac:	d0f1      	beq.n	d5e92 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5eae:	2355      	movs	r3, #85	; 0x55
   d5eb0:	e00b      	b.n	d5eca <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5eb2:	28fe      	cmp	r0, #254	; 0xfe
   d5eb4:	d001      	beq.n	d5eba <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5eb6:	2350      	movs	r3, #80	; 0x50
   d5eb8:	e007      	b.n	d5eca <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5eba:	4632      	mov	r2, r6
   d5ebc:	4629      	mov	r1, r5
   d5ebe:	6860      	ldr	r0, [r4, #4]
   d5ec0:	f000 fa5e 	bl	d6380 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5ec4:	7260      	strb	r0, [r4, #9]
   d5ec6:	b130      	cbz	r0, d5ed6 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5ec8:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5eca:	4620      	mov	r0, r4
   d5ecc:	7023      	strb	r3, [r4, #0]
   d5ece:	f7ff ffc6 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5ed2:	2000      	movs	r0, #0
}
   d5ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5ed6:	6860      	ldr	r0, [r4, #4]
   d5ed8:	f000 fa4d 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d5edc:	6860      	ldr	r0, [r4, #4]
   d5ede:	f000 fa4a 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d5ee2:	2001      	movs	r0, #1
   d5ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ee6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5ee6:	b570      	push	{r4, r5, r6, lr}
   d5ee8:	4604      	mov	r4, r0
   d5eea:	460e      	mov	r6, r1
   d5eec:	f000 fb18 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
   d5ef0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5ef2:	4632      	mov	r2, r6
   d5ef4:	4629      	mov	r1, r5
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7ff ff7e 	bl	d5df8 <_ZN9SdSpiCard10isTimedOutEtt>
   d5efc:	b930      	cbnz	r0, d5f0c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5efe:	6860      	ldr	r0, [r4, #4]
   d5f00:	f000 fa39 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5f04:	28ff      	cmp	r0, #255	; 0xff
   d5f06:	d1f4      	bne.n	d5ef2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5f08:	2001      	movs	r0, #1
   d5f0a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5f0c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5f0e:	bd70      	pop	{r4, r5, r6, pc}

000d5f10 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5f12:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5f14:	9201      	str	r2, [sp, #4]
   d5f16:	4604      	mov	r4, r0
   d5f18:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5f1a:	b90b      	cbnz	r3, d5f20 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5f1c:	f7ff ff90 	bl	d5e40 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5f20:	b125      	cbz	r5, d5f2c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5f22:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5f26:	4620      	mov	r0, r4
   d5f28:	f7ff ffdd 	bl	d5ee6 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5f2c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5f30:	6860      	ldr	r0, [r4, #4]
   d5f32:	f000 fa3b 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
   d5f36:	f10d 0607 	add.w	r6, sp, #7
   d5f3a:	f10d 0703 	add.w	r7, sp, #3
   d5f3e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5f42:	6860      	ldr	r0, [r4, #4]
   d5f44:	f000 fa32 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5f48:	42be      	cmp	r6, r7
   d5f4a:	d1f8      	bne.n	d5f3e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5f4c:	2d00      	cmp	r5, #0
   d5f4e:	bf0c      	ite	eq
   d5f50:	2195      	moveq	r1, #149	; 0x95
   d5f52:	2187      	movne	r1, #135	; 0x87
   d5f54:	6860      	ldr	r0, [r4, #4]
   d5f56:	f000 fa29 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5f5a:	6860      	ldr	r0, [r4, #4]
   d5f5c:	f000 fa0b 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d5f60:	250b      	movs	r5, #11
   d5f62:	6860      	ldr	r0, [r4, #4]
   d5f64:	f000 fa07 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5f68:	0603      	lsls	r3, r0, #24
   d5f6a:	7260      	strb	r0, [r4, #9]
   d5f6c:	d503      	bpl.n	d5f76 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5f6e:	3d01      	subs	r5, #1
   d5f70:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5f74:	d1f5      	bne.n	d5f62 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5f76:	b003      	add	sp, #12
   d5f78:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f7a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d5f7a:	b570      	push	{r4, r5, r6, lr}
   d5f7c:	4604      	mov	r4, r0
   d5f7e:	460d      	mov	r5, r1
   d5f80:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d5f82:	2137      	movs	r1, #55	; 0x37
   d5f84:	2200      	movs	r2, #0
   d5f86:	f7ff ffc3 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d5f8a:	4632      	mov	r2, r6
   d5f8c:	4629      	mov	r1, r5
   d5f8e:	4620      	mov	r0, r4
  }
   d5f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d5f94:	f7ff bfbc 	b.w	d5f10 <_ZN9SdSpiCard11cardCommandEhm>

000d5f98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5f9c:	2500      	movs	r5, #0
   d5f9e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5fa0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d5fa2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5fa4:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5fa6:	4604      	mov	r4, r0
   d5fa8:	4690      	mov	r8, r2
   d5faa:	461e      	mov	r6, r3
   d5fac:	f000 fab8 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5fb0:	4641      	mov	r1, r8
   d5fb2:	4607      	mov	r7, r0
   d5fb4:	6860      	ldr	r0, [r4, #4]
   d5fb6:	f000 f9cb 	bl	d6350 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5fba:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5fbc:	4a4f      	ldr	r2, [pc, #316]	; (d60fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d5fbe:	721d      	strb	r5, [r3, #8]
   d5fc0:	f04f 0801 	mov.w	r8, #1
   d5fc4:	60da      	str	r2, [r3, #12]
   d5fc6:	745d      	strb	r5, [r3, #17]
   d5fc8:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5fcc:	4620      	mov	r0, r4
   d5fce:	f7ff ff37 	bl	d5e40 <_ZN9SdSpiCard8spiStartEv>
   d5fd2:	6863      	ldr	r3, [r4, #4]
   d5fd4:	4641      	mov	r1, r8
   d5fd6:	7d18      	ldrb	r0, [r3, #20]
   d5fd8:	f003 f817 	bl	d900a <digitalWrite>
   d5fdc:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5fde:	21ff      	movs	r1, #255	; 0xff
   d5fe0:	6860      	ldr	r0, [r4, #4]
   d5fe2:	3d01      	subs	r5, #1
   d5fe4:	f000 f9e2 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5fe8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5fec:	d1f7      	bne.n	d5fde <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d5fee:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5ff0:	4629      	mov	r1, r5
   d5ff2:	7d18      	ldrb	r0, [r3, #20]
   d5ff4:	f003 f809 	bl	d900a <digitalWrite>
   d5ff8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	4611      	mov	r1, r2
   d5ffe:	4620      	mov	r0, r4
   d6000:	f7ff ff86 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d6004:	2801      	cmp	r0, #1
   d6006:	4680      	mov	r8, r0
   d6008:	d012      	beq.n	d6030 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d600a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d600c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6010:	d101      	bne.n	d6016 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6012:	2320      	movs	r3, #32
   d6014:	e057      	b.n	d60c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6016:	21fd      	movs	r1, #253	; 0xfd
   d6018:	6860      	ldr	r0, [r4, #4]
   d601a:	f000 f9c7 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
   d601e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6022:	6860      	ldr	r0, [r4, #4]
   d6024:	f000 f9a7 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6028:	f1b8 0801 	subs.w	r8, r8, #1
   d602c:	d1f9      	bne.n	d6022 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d602e:	e7e4      	b.n	d5ffa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6030:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6034:	2108      	movs	r1, #8
   d6036:	4620      	mov	r0, r4
   d6038:	f7ff ff6a 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d603c:	2805      	cmp	r0, #5
   d603e:	d102      	bne.n	d6046 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6040:	f884 800a 	strb.w	r8, [r4, #10]
   d6044:	e00f      	b.n	d6066 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d6046:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6048:	6860      	ldr	r0, [r4, #4]
   d604a:	f000 f994 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d604e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6050:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6054:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6056:	d1f7      	bne.n	d6048 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6058:	28aa      	cmp	r0, #170	; 0xaa
   d605a:	d102      	bne.n	d6062 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d605c:	2302      	movs	r3, #2
   d605e:	72a3      	strb	r3, [r4, #10]
   d6060:	e001      	b.n	d6066 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6062:	2325      	movs	r3, #37	; 0x25
   d6064:	e02f      	b.n	d60c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6066:	7aa3      	ldrb	r3, [r4, #10]
   d6068:	2b02      	cmp	r3, #2
   d606a:	bf0c      	ite	eq
   d606c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6070:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6072:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6074:	462a      	mov	r2, r5
   d6076:	2129      	movs	r1, #41	; 0x29
   d6078:	4620      	mov	r0, r4
   d607a:	f7ff ff7e 	bl	d5f7a <_ZN9SdSpiCard8cardAcmdEhm>
   d607e:	4602      	mov	r2, r0
   d6080:	b148      	cbz	r0, d6096 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6082:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6086:	4639      	mov	r1, r7
   d6088:	4620      	mov	r0, r4
   d608a:	f7ff feb5 	bl	d5df8 <_ZN9SdSpiCard10isTimedOutEtt>
   d608e:	2800      	cmp	r0, #0
   d6090:	d0f0      	beq.n	d6074 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d6092:	2343      	movs	r3, #67	; 0x43
   d6094:	e017      	b.n	d60c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6096:	7aa3      	ldrb	r3, [r4, #10]
   d6098:	2b02      	cmp	r3, #2
   d609a:	d00e      	beq.n	d60ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d609c:	4620      	mov	r0, r4
   d609e:	f7ff fede 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d60a2:	6863      	ldr	r3, [r4, #4]
   d60a4:	68b0      	ldr	r0, [r6, #8]
   d60a6:	7934      	ldrb	r4, [r6, #4]
   d60a8:	7b31      	ldrb	r1, [r6, #12]
   d60aa:	7b72      	ldrb	r2, [r6, #13]
   d60ac:	745a      	strb	r2, [r3, #17]
   d60ae:	60d8      	str	r0, [r3, #12]
   d60b0:	721c      	strb	r4, [r3, #8]
   d60b2:	7419      	strb	r1, [r3, #16]
  return true;
   d60b4:	2001      	movs	r0, #1
   d60b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d60ba:	213a      	movs	r1, #58	; 0x3a
   d60bc:	4620      	mov	r0, r4
   d60be:	f7ff ff27 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d60c2:	b138      	cbz	r0, d60d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d60c4:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d60c6:	4620      	mov	r0, r4
   d60c8:	7023      	strb	r3, [r4, #0]
   d60ca:	f7ff fec8 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d60ce:	2000      	movs	r0, #0
}
   d60d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d60d4:	6860      	ldr	r0, [r4, #4]
   d60d6:	f000 f94e 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d60da:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d60de:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d60e0:	bf04      	itt	eq
   d60e2:	2303      	moveq	r3, #3
   d60e4:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d60e6:	6860      	ldr	r0, [r4, #4]
   d60e8:	f000 f945 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d60ec:	6860      	ldr	r0, [r4, #4]
   d60ee:	f000 f942 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d60f2:	6860      	ldr	r0, [r4, #4]
   d60f4:	f000 f93f 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d60f8:	e7d0      	b.n	d609c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d60fa:	bf00      	nop
   d60fc:	0003d090 	.word	0x0003d090

000d6100 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6100:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6102:	7a83      	ldrb	r3, [r0, #10]
   d6104:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6106:	bf18      	it	ne
   d6108:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d610a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d610c:	460a      	mov	r2, r1
   d610e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6110:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6112:	f7ff fefd 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d6116:	b110      	cbz	r0, d611e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6118:	2330      	movs	r3, #48	; 0x30
   d611a:	7023      	strb	r3, [r4, #0]
   d611c:	e00b      	b.n	d6136 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d611e:	4629      	mov	r1, r5
   d6120:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff fead 	bl	d5e84 <_ZN9SdSpiCard8readDataEPhj>
   d612a:	4605      	mov	r5, r0
   d612c:	b118      	cbz	r0, d6136 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d612e:	4620      	mov	r0, r4
   d6130:	f7ff fe95 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6134:	e003      	b.n	d613e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff fe91 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d613c:	2500      	movs	r5, #0
}
   d613e:	4628      	mov	r0, r5
   d6140:	bd38      	pop	{r3, r4, r5, pc}

000d6142 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6142:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6144:	7a83      	ldrb	r3, [r0, #10]
   d6146:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6148:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d614a:	bf18      	it	ne
   d614c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d614e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6150:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6152:	f7ff fedd 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d6156:	b130      	cbz	r0, d6166 <_ZN9SdSpiCard9readStartEm+0x24>
   d6158:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d615a:	4620      	mov	r0, r4
   d615c:	7023      	strb	r3, [r4, #0]
   d615e:	f7ff fe7e 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6162:	2000      	movs	r0, #0
   d6164:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6166:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6168:	bd10      	pop	{r4, pc}

000d616a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d616a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d616c:	2200      	movs	r2, #0
   d616e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6170:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6172:	f7ff fecd 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d6176:	b130      	cbz	r0, d6186 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6178:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d617a:	4620      	mov	r0, r4
   d617c:	7023      	strb	r3, [r4, #0]
   d617e:	f7ff fe6e 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6182:	2000      	movs	r0, #0
   d6184:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6186:	4620      	mov	r0, r4
   d6188:	f7ff fe69 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d618c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d618e:	bd10      	pop	{r4, pc}

000d6190 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6192:	4605      	mov	r5, r0
   d6194:	4616      	mov	r6, r2
   d6196:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6198:	f7ff ffd3 	bl	d6142 <_ZN9SdSpiCard9readStartEm>
   d619c:	b198      	cbz	r0, d61c6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d619e:	2400      	movs	r4, #0
   d61a0:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d61a2:	429f      	cmp	r7, r3
   d61a4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d61a8:	d908      	bls.n	d61bc <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d61aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   d61ae:	4628      	mov	r0, r5
   d61b0:	f7ff fe68 	bl	d5e84 <_ZN9SdSpiCard8readDataEPhj>
   d61b4:	3401      	adds	r4, #1
   d61b6:	2800      	cmp	r0, #0
   d61b8:	d1f2      	bne.n	d61a0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d61ba:	e004      	b.n	d61c6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d61bc:	4628      	mov	r0, r5
}
   d61be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d61c2:	f7ff bfd2 	b.w	d616a <_ZN9SdSpiCard8readStopEv>
}
   d61c6:	2000      	movs	r0, #0
   d61c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61ca <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d61ca:	b538      	push	{r3, r4, r5, lr}
   d61cc:	4604      	mov	r4, r0
   d61ce:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d61d0:	6840      	ldr	r0, [r0, #4]
   d61d2:	f000 f8eb 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d61d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d61da:	4629      	mov	r1, r5
   d61dc:	6860      	ldr	r0, [r4, #4]
   d61de:	f000 f8e9 	bl	d63b4 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d61e2:	21ff      	movs	r1, #255	; 0xff
   d61e4:	6860      	ldr	r0, [r4, #4]
   d61e6:	f000 f8e1 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
   d61ea:	21ff      	movs	r1, #255	; 0xff
   d61ec:	6860      	ldr	r0, [r4, #4]
   d61ee:	f000 f8dd 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61f2:	6860      	ldr	r0, [r4, #4]
   d61f4:	f000 f8bf 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d61f8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d61fa:	f000 001f 	and.w	r0, r0, #31
   d61fe:	2805      	cmp	r0, #5
   d6200:	d006      	beq.n	d6210 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6202:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6204:	4620      	mov	r0, r4
   d6206:	7023      	strb	r3, [r4, #0]
   d6208:	f7ff fe29 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d620c:	2000      	movs	r0, #0
   d620e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6210:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6212:	bd38      	pop	{r3, r4, r5, pc}

000d6214 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6214:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6216:	7a83      	ldrb	r3, [r0, #10]
   d6218:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d621a:	bf18      	it	ne
   d621c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d621e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6220:	460a      	mov	r2, r1
   d6222:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6224:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6226:	f7ff fe73 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d622a:	4606      	mov	r6, r0
   d622c:	b108      	cbz	r0, d6232 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d622e:	2332      	movs	r3, #50	; 0x32
   d6230:	e01d      	b.n	d626e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6232:	462a      	mov	r2, r5
   d6234:	21fe      	movs	r1, #254	; 0xfe
   d6236:	4620      	mov	r0, r4
   d6238:	f7ff ffc7 	bl	d61ca <_ZN9SdSpiCard9writeDataEhPKh>
   d623c:	b1c0      	cbz	r0, d6270 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d623e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6242:	4620      	mov	r0, r4
   d6244:	f7ff fe4f 	bl	d5ee6 <_ZN9SdSpiCard11waitNotBusyEt>
   d6248:	4605      	mov	r5, r0
   d624a:	b908      	cbnz	r0, d6250 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d624c:	235a      	movs	r3, #90	; 0x5a
   d624e:	e00e      	b.n	d626e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6250:	4632      	mov	r2, r6
   d6252:	210d      	movs	r1, #13
   d6254:	4620      	mov	r0, r4
   d6256:	f7ff fe5b 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d625a:	b938      	cbnz	r0, d626c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d625c:	6860      	ldr	r0, [r4, #4]
   d625e:	f000 f88a 	bl	d6376 <_ZN14SdSpiAltDriver7receiveEv>
   d6262:	b918      	cbnz	r0, d626c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6264:	4620      	mov	r0, r4
   d6266:	f7ff fdfa 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d626a:	e005      	b.n	d6278 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d626c:	2329      	movs	r3, #41	; 0x29
   d626e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6270:	4620      	mov	r0, r4
   d6272:	f7ff fdf4 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6276:	2500      	movs	r5, #0
}
   d6278:	4628      	mov	r0, r5
   d627a:	bd70      	pop	{r4, r5, r6, pc}

000d627c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d627c:	b538      	push	{r3, r4, r5, lr}
   d627e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6280:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6284:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6286:	f7ff fe2e 	bl	d5ee6 <_ZN9SdSpiCard11waitNotBusyEt>
   d628a:	b910      	cbnz	r0, d6292 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d628c:	235b      	movs	r3, #91	; 0x5b
   d628e:	7023      	strb	r3, [r4, #0]
   d6290:	e005      	b.n	d629e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6292:	462a      	mov	r2, r5
   d6294:	21fc      	movs	r1, #252	; 0xfc
   d6296:	4620      	mov	r0, r4
   d6298:	f7ff ff97 	bl	d61ca <_ZN9SdSpiCard9writeDataEhPKh>
   d629c:	b918      	cbnz	r0, d62a6 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d629e:	4620      	mov	r0, r4
   d62a0:	f7ff fddd 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d62a4:	2000      	movs	r0, #0
}
   d62a6:	bd38      	pop	{r3, r4, r5, pc}

000d62a8 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d62a8:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d62aa:	7a83      	ldrb	r3, [r0, #10]
   d62ac:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d62ae:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d62b0:	bf18      	it	ne
   d62b2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d62b4:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d62b6:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d62b8:	f7ff fe2a 	bl	d5f10 <_ZN9SdSpiCard11cardCommandEhm>
   d62bc:	b130      	cbz	r0, d62cc <_ZN9SdSpiCard10writeStartEm+0x24>
   d62be:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d62c0:	4620      	mov	r0, r4
   d62c2:	7023      	strb	r3, [r4, #0]
   d62c4:	f7ff fdcb 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d62c8:	2000      	movs	r0, #0
   d62ca:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d62cc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d62ce:	bd10      	pop	{r4, pc}

000d62d0 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d62d0:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d62d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d62d6:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d62d8:	f7ff fe05 	bl	d5ee6 <_ZN9SdSpiCard11waitNotBusyEt>
   d62dc:	4605      	mov	r5, r0
   d62de:	b120      	cbz	r0, d62ea <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d62e0:	21fd      	movs	r1, #253	; 0xfd
   d62e2:	6860      	ldr	r0, [r4, #4]
   d62e4:	f000 f862 	bl	d63ac <_ZN14SdSpiAltDriver4sendEh>
   d62e8:	e001      	b.n	d62ee <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d62ea:	2356      	movs	r3, #86	; 0x56
   d62ec:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff fdb5 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d62f4:	4628      	mov	r0, r5
   d62f6:	bd38      	pop	{r3, r4, r5, pc}

000d62f8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d62f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62fa:	4605      	mov	r5, r0
   d62fc:	4616      	mov	r6, r2
   d62fe:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6300:	f7ff ffd2 	bl	d62a8 <_ZN9SdSpiCard10writeStartEm>
   d6304:	b170      	cbz	r0, d6324 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6306:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6308:	42bc      	cmp	r4, r7
   d630a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d630e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6310:	d004      	beq.n	d631c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6312:	f7ff ffb3 	bl	d627c <_ZN9SdSpiCard9writeDataEPKh>
   d6316:	b128      	cbz	r0, d6324 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6318:	3401      	adds	r4, #1
   d631a:	e7f5      	b.n	d6308 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d631c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6320:	f7ff bfd6 	b.w	d62d0 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6324:	4628      	mov	r0, r5
   d6326:	f7ff fd9a 	bl	d5e5e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d632a:	2000      	movs	r0, #0
   d632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d632e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d632e:	f000 b867 	b.w	d6400 <HAL_Pin_Map>

000d6332 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6332:	f000 b865 	b.w	d6400 <HAL_Pin_Map>

000d6336 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6336:	f000 b863 	b.w	d6400 <HAL_Pin_Map>
	...

000d633c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d633c:	4b01      	ldr	r3, [pc, #4]	; (d6344 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d633e:	2201      	movs	r2, #1
   d6340:	701a      	strb	r2, [r3, #0]
   d6342:	4770      	bx	lr
   d6344:	2003e344 	.word	0x2003e344

000d6348 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6348:	1d01      	adds	r1, r0, #4
   d634a:	6800      	ldr	r0, [r0, #0]
   d634c:	f000 bbf8 	b.w	d6b40 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6350 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6350:	b510      	push	{r4, lr}
   d6352:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6354:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6356:	6800      	ldr	r0, [r0, #0]
   d6358:	f000 fbc8 	bl	d6aec <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d635c:	7d20      	ldrb	r0, [r4, #20]
   d635e:	2101      	movs	r1, #1
   d6360:	f002 fe42 	bl	d8fe8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6364:	7d20      	ldrb	r0, [r4, #20]
   d6366:	2101      	movs	r1, #1
}
   d6368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d636c:	f002 be4d 	b.w	d900a <digitalWrite>

000d6370 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6370:	6800      	ldr	r0, [r0, #0]
   d6372:	f000 bbcc 	b.w	d6b0e <_ZN8SPIClass14endTransactionEv>

000d6376 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6376:	21ff      	movs	r1, #255	; 0xff
   d6378:	6800      	ldr	r0, [r0, #0]
   d637a:	f000 bc51 	b.w	d6c20 <_ZN8SPIClass8transferEh>
	...

000d6380 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6380:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6382:	4b08      	ldr	r3, [pc, #32]	; (d63a4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6384:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6386:	2500      	movs	r5, #0
   d6388:	4c07      	ldr	r4, [pc, #28]	; (d63a8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d638a:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d638c:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d638e:	4613      	mov	r3, r2
   d6390:	460a      	mov	r2, r1
   d6392:	4629      	mov	r1, r5
   d6394:	f000 fc4a 	bl	d6c2c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6398:	7823      	ldrb	r3, [r4, #0]
   d639a:	2b00      	cmp	r3, #0
   d639c:	d0fc      	beq.n	d6398 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d639e:	2000      	movs	r0, #0
   d63a0:	b003      	add	sp, #12
   d63a2:	bd30      	pop	{r4, r5, pc}
   d63a4:	000d633d 	.word	0x000d633d
   d63a8:	2003e344 	.word	0x2003e344

000d63ac <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d63ac:	6800      	ldr	r0, [r0, #0]
   d63ae:	f000 bc37 	b.w	d6c20 <_ZN8SPIClass8transferEh>
	...

000d63b4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d63b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d63b6:	4b07      	ldr	r3, [pc, #28]	; (d63d4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d63b8:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d63ba:	2500      	movs	r5, #0
   d63bc:	4c06      	ldr	r4, [pc, #24]	; (d63d8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d63be:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d63c0:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d63c2:	4613      	mov	r3, r2
   d63c4:	462a      	mov	r2, r5
   d63c6:	f000 fc31 	bl	d6c2c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d63ca:	7823      	ldrb	r3, [r4, #0]
   d63cc:	2b00      	cmp	r3, #0
   d63ce:	d0fc      	beq.n	d63ca <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d63d0:	b003      	add	sp, #12
   d63d2:	bd30      	pop	{r4, r5, pc}
   d63d4:	000d633d 	.word	0x000d633d
   d63d8:	2003e344 	.word	0x2003e344

000d63dc <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d63dc:	f000 b810 	b.w	d6400 <HAL_Pin_Map>

000d63e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <netdb_freeaddrinfo+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	689b      	ldr	r3, [r3, #8]
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	00030268 	.word	0x00030268

000d63f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <netdb_getaddrinfo+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	68db      	ldr	r3, [r3, #12]
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	00030268 	.word	0x00030268

000d6400 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <HAL_Pin_Map+0xc>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	681b      	ldr	r3, [r3, #0]
   d6408:	9301      	str	r3, [sp, #4]
   d640a:	bd08      	pop	{r3, pc}
   d640c:	0003022c 	.word	0x0003022c

000d6410 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <HAL_Pin_Mode+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	689b      	ldr	r3, [r3, #8]
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	0003022c 	.word	0x0003022c

000d6420 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <HAL_Get_Pin_Mode+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	68db      	ldr	r3, [r3, #12]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	0003022c 	.word	0x0003022c

000d6430 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <HAL_GPIO_Write+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	691b      	ldr	r3, [r3, #16]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	0003022c 	.word	0x0003022c

000d6440 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <HAL_GPIO_Read+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	695b      	ldr	r3, [r3, #20]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	0003022c 	.word	0x0003022c

000d6450 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <HAL_SPI_Begin+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	681b      	ldr	r3, [r3, #0]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	00030230 	.word	0x00030230

000d6460 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <HAL_SPI_Send_Receive_Data+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	695b      	ldr	r3, [r3, #20]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	00030230 	.word	0x00030230

000d6470 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <HAL_SPI_Init+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	69db      	ldr	r3, [r3, #28]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030230 	.word	0x00030230

000d6480 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <HAL_SPI_Is_Enabled+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	6a1b      	ldr	r3, [r3, #32]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030230 	.word	0x00030230

000d6490 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <HAL_SPI_Info+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	00030230 	.word	0x00030230

000d64a0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <HAL_SPI_DMA_Transfer+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030230 	.word	0x00030230

000d64b0 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <HAL_SPI_DMA_Transfer_Status+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030230 	.word	0x00030230

000d64c0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <HAL_SPI_Set_Settings+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030230 	.word	0x00030230

000d64d0 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <HAL_SPI_Acquire+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030230 	.word	0x00030230

000d64e0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <HAL_SPI_Release+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030230 	.word	0x00030230

000d64f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <HAL_RNG_GetRandomNumber+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	685b      	ldr	r3, [r3, #4]
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030218 	.word	0x00030218

000d6500 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <HAL_Delay_Microseconds+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	68db      	ldr	r3, [r3, #12]
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030218 	.word	0x00030218

000d6510 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	691b      	ldr	r3, [r3, #16]
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030218 	.word	0x00030218

000d6520 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	695b      	ldr	r3, [r3, #20]
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030218 	.word	0x00030218

000d6530 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <HAL_RTC_Get_UnixTime+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	69db      	ldr	r3, [r3, #28]
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030218 	.word	0x00030218

000d6540 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <HAL_RTC_Time_Is_Valid+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030218 	.word	0x00030218

000d6550 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <hal_ble_stack_init+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	689b      	ldr	r3, [r3, #8]
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030278 	.word	0x00030278

000d6560 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <hal_ble_gap_start_scan+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030278 	.word	0x00030278

000d6570 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b03      	ldr	r3, [pc, #12]	; (d6580 <hal_ble_gap_stop_scan+0x10>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d657a:	9301      	str	r3, [sp, #4]
   d657c:	bd08      	pop	{r3, pc}
   d657e:	0000      	.short	0x0000
   d6580:	00030278 	.word	0x00030278

000d6584 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b03      	ldr	r3, [pc, #12]	; (d6594 <hal_ble_gap_disconnect+0x10>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d658e:	9301      	str	r3, [sp, #4]
   d6590:	bd08      	pop	{r3, pc}
   d6592:	0000      	.short	0x0000
   d6594:	00030278 	.word	0x00030278

000d6598 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6598:	b508      	push	{r3, lr}
   d659a:	4b03      	ldr	r3, [pc, #12]	; (d65a8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d659c:	681b      	ldr	r3, [r3, #0]
   d659e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d65a2:	9301      	str	r3, [sp, #4]
   d65a4:	bd08      	pop	{r3, pc}
   d65a6:	0000      	.short	0x0000
   d65a8:	00030278 	.word	0x00030278

000d65ac <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b03      	ldr	r3, [pc, #12]	; (d65bc <hal_ble_gatt_client_discover_all_services+0x10>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d65b6:	9301      	str	r3, [sp, #4]
   d65b8:	bd08      	pop	{r3, pc}
   d65ba:	0000      	.short	0x0000
   d65bc:	00030278 	.word	0x00030278

000d65c0 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b03      	ldr	r3, [pc, #12]	; (d65d0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d65ca:	9301      	str	r3, [sp, #4]
   d65cc:	bd08      	pop	{r3, pc}
   d65ce:	0000      	.short	0x0000
   d65d0:	00030278 	.word	0x00030278

000d65d4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b03      	ldr	r3, [pc, #12]	; (d65e4 <hal_ble_gatt_client_write_with_response+0x10>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d65de:	9301      	str	r3, [sp, #4]
   d65e0:	bd08      	pop	{r3, pc}
   d65e2:	0000      	.short	0x0000
   d65e4:	00030278 	.word	0x00030278

000d65e8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d65e8:	b508      	push	{r3, lr}
   d65ea:	4b03      	ldr	r3, [pc, #12]	; (d65f8 <hal_ble_gatt_client_write_without_response+0x10>)
   d65ec:	681b      	ldr	r3, [r3, #0]
   d65ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d65f2:	9301      	str	r3, [sp, #4]
   d65f4:	bd08      	pop	{r3, pc}
   d65f6:	0000      	.short	0x0000
   d65f8:	00030278 	.word	0x00030278

000d65fc <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b03      	ldr	r3, [pc, #12]	; (d660c <hal_ble_gatt_client_read+0x10>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d6606:	9301      	str	r3, [sp, #4]
   d6608:	bd08      	pop	{r3, pc}
   d660a:	0000      	.short	0x0000
   d660c:	00030278 	.word	0x00030278

000d6610 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b03      	ldr	r3, [pc, #12]	; (d6620 <hal_ble_gap_connect+0x10>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d661a:	9301      	str	r3, [sp, #4]
   d661c:	bd08      	pop	{r3, pc}
   d661e:	0000      	.short	0x0000
   d6620:	00030278 	.word	0x00030278

000d6624 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b03      	ldr	r3, [pc, #12]	; (d6634 <hal_ble_gap_get_connection_info+0x10>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d662e:	9301      	str	r3, [sp, #4]
   d6630:	bd08      	pop	{r3, pc}
   d6632:	0000      	.short	0x0000
   d6634:	00030278 	.word	0x00030278

000d6638 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d6638:	b508      	push	{r3, lr}
   d663a:	4b03      	ldr	r3, [pc, #12]	; (d6648 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d663c:	681b      	ldr	r3, [r3, #0]
   d663e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d6642:	9301      	str	r3, [sp, #4]
   d6644:	bd08      	pop	{r3, pc}
   d6646:	0000      	.short	0x0000
   d6648:	00030278 	.word	0x00030278

000d664c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b03      	ldr	r3, [pc, #12]	; (d665c <hal_ble_gatt_client_configure_cccd+0x10>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d6656:	9301      	str	r3, [sp, #4]
   d6658:	bd08      	pop	{r3, pc}
   d665a:	0000      	.short	0x0000
   d665c:	00030278 	.word	0x00030278

000d6660 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b03      	ldr	r3, [pc, #12]	; (d6670 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d666a:	9301      	str	r3, [sp, #4]
   d666c:	bd08      	pop	{r3, pc}
   d666e:	0000      	.short	0x0000
   d6670:	00030278 	.word	0x00030278

000d6674 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b03      	ldr	r3, [pc, #12]	; (d6684 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d667e:	9301      	str	r3, [sp, #4]
   d6680:	bd08      	pop	{r3, pc}
   d6682:	0000      	.short	0x0000
   d6684:	00030278 	.word	0x00030278

000d6688 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6688:	b508      	push	{r3, lr}
   d668a:	4b02      	ldr	r3, [pc, #8]	; (d6694 <os_thread_is_current+0xc>)
   d668c:	681b      	ldr	r3, [r3, #0]
   d668e:	689b      	ldr	r3, [r3, #8]
   d6690:	9301      	str	r3, [sp, #4]
   d6692:	bd08      	pop	{r3, pc}
   d6694:	00030248 	.word	0x00030248

000d6698 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6698:	b508      	push	{r3, lr}
   d669a:	4b02      	ldr	r3, [pc, #8]	; (d66a4 <os_thread_join+0xc>)
   d669c:	681b      	ldr	r3, [r3, #0]
   d669e:	691b      	ldr	r3, [r3, #16]
   d66a0:	9301      	str	r3, [sp, #4]
   d66a2:	bd08      	pop	{r3, pc}
   d66a4:	00030248 	.word	0x00030248

000d66a8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d66a8:	b508      	push	{r3, lr}
   d66aa:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <os_thread_cleanup+0xc>)
   d66ac:	681b      	ldr	r3, [r3, #0]
   d66ae:	695b      	ldr	r3, [r3, #20]
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	bd08      	pop	{r3, pc}
   d66b4:	00030248 	.word	0x00030248

000d66b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d66b8:	b508      	push	{r3, lr}
   d66ba:	4b02      	ldr	r3, [pc, #8]	; (d66c4 <os_mutex_recursive_create+0xc>)
   d66bc:	681b      	ldr	r3, [r3, #0]
   d66be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d66c0:	9301      	str	r3, [sp, #4]
   d66c2:	bd08      	pop	{r3, pc}
   d66c4:	00030248 	.word	0x00030248

000d66c8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d66c8:	b508      	push	{r3, lr}
   d66ca:	4b02      	ldr	r3, [pc, #8]	; (d66d4 <os_mutex_recursive_destroy+0xc>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d66d0:	9301      	str	r3, [sp, #4]
   d66d2:	bd08      	pop	{r3, pc}
   d66d4:	00030248 	.word	0x00030248

000d66d8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d66d8:	b508      	push	{r3, lr}
   d66da:	4b02      	ldr	r3, [pc, #8]	; (d66e4 <os_mutex_recursive_lock+0xc>)
   d66dc:	681b      	ldr	r3, [r3, #0]
   d66de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d66e0:	9301      	str	r3, [sp, #4]
   d66e2:	bd08      	pop	{r3, pc}
   d66e4:	00030248 	.word	0x00030248

000d66e8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d66e8:	b508      	push	{r3, lr}
   d66ea:	4b02      	ldr	r3, [pc, #8]	; (d66f4 <os_mutex_recursive_unlock+0xc>)
   d66ec:	681b      	ldr	r3, [r3, #0]
   d66ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d66f0:	9301      	str	r3, [sp, #4]
   d66f2:	bd08      	pop	{r3, pc}
   d66f4:	00030248 	.word	0x00030248

000d66f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d66f8:	b508      	push	{r3, lr}
   d66fa:	4b02      	ldr	r3, [pc, #8]	; (d6704 <inet_inet_ntop+0xc>)
   d66fc:	681b      	ldr	r3, [r3, #0]
   d66fe:	695b      	ldr	r3, [r3, #20]
   d6700:	9301      	str	r3, [sp, #4]
   d6702:	bd08      	pop	{r3, pc}
   d6704:	00030264 	.word	0x00030264

000d6708 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6708:	b508      	push	{r3, lr}
   d670a:	4b02      	ldr	r3, [pc, #8]	; (d6714 <HAL_USART_Init+0xc>)
   d670c:	681b      	ldr	r3, [r3, #0]
   d670e:	681b      	ldr	r3, [r3, #0]
   d6710:	9301      	str	r3, [sp, #4]
   d6712:	bd08      	pop	{r3, pc}
   d6714:	0003023c 	.word	0x0003023c

000d6718 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6718:	b508      	push	{r3, lr}
   d671a:	4b02      	ldr	r3, [pc, #8]	; (d6724 <HAL_USART_Write_Data+0xc>)
   d671c:	681b      	ldr	r3, [r3, #0]
   d671e:	68db      	ldr	r3, [r3, #12]
   d6720:	9301      	str	r3, [sp, #4]
   d6722:	bd08      	pop	{r3, pc}
   d6724:	0003023c 	.word	0x0003023c

000d6728 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6728:	b508      	push	{r3, lr}
   d672a:	4b02      	ldr	r3, [pc, #8]	; (d6734 <HAL_USART_Available_Data+0xc>)
   d672c:	681b      	ldr	r3, [r3, #0]
   d672e:	691b      	ldr	r3, [r3, #16]
   d6730:	9301      	str	r3, [sp, #4]
   d6732:	bd08      	pop	{r3, pc}
   d6734:	0003023c 	.word	0x0003023c

000d6738 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6738:	b508      	push	{r3, lr}
   d673a:	4b02      	ldr	r3, [pc, #8]	; (d6744 <HAL_USART_Read_Data+0xc>)
   d673c:	681b      	ldr	r3, [r3, #0]
   d673e:	695b      	ldr	r3, [r3, #20]
   d6740:	9301      	str	r3, [sp, #4]
   d6742:	bd08      	pop	{r3, pc}
   d6744:	0003023c 	.word	0x0003023c

000d6748 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6748:	b508      	push	{r3, lr}
   d674a:	4b02      	ldr	r3, [pc, #8]	; (d6754 <HAL_USART_Peek_Data+0xc>)
   d674c:	681b      	ldr	r3, [r3, #0]
   d674e:	699b      	ldr	r3, [r3, #24]
   d6750:	9301      	str	r3, [sp, #4]
   d6752:	bd08      	pop	{r3, pc}
   d6754:	0003023c 	.word	0x0003023c

000d6758 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6758:	b508      	push	{r3, lr}
   d675a:	4b02      	ldr	r3, [pc, #8]	; (d6764 <HAL_USART_Flush_Data+0xc>)
   d675c:	681b      	ldr	r3, [r3, #0]
   d675e:	69db      	ldr	r3, [r3, #28]
   d6760:	9301      	str	r3, [sp, #4]
   d6762:	bd08      	pop	{r3, pc}
   d6764:	0003023c 	.word	0x0003023c

000d6768 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6768:	b508      	push	{r3, lr}
   d676a:	4b02      	ldr	r3, [pc, #8]	; (d6774 <HAL_USART_Is_Enabled+0xc>)
   d676c:	681b      	ldr	r3, [r3, #0]
   d676e:	6a1b      	ldr	r3, [r3, #32]
   d6770:	9301      	str	r3, [sp, #4]
   d6772:	bd08      	pop	{r3, pc}
   d6774:	0003023c 	.word	0x0003023c

000d6778 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6778:	b508      	push	{r3, lr}
   d677a:	4b02      	ldr	r3, [pc, #8]	; (d6784 <HAL_USART_Available_Data_For_Write+0xc>)
   d677c:	681b      	ldr	r3, [r3, #0]
   d677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6780:	9301      	str	r3, [sp, #4]
   d6782:	bd08      	pop	{r3, pc}
   d6784:	0003023c 	.word	0x0003023c

000d6788 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6788:	b508      	push	{r3, lr}
   d678a:	4b02      	ldr	r3, [pc, #8]	; (d6794 <HAL_I2C_Write_Data+0xc>)
   d678c:	681b      	ldr	r3, [r3, #0]
   d678e:	6a1b      	ldr	r3, [r3, #32]
   d6790:	9301      	str	r3, [sp, #4]
   d6792:	bd08      	pop	{r3, pc}
   d6794:	00030228 	.word	0x00030228

000d6798 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6798:	b508      	push	{r3, lr}
   d679a:	4b02      	ldr	r3, [pc, #8]	; (d67a4 <HAL_I2C_Available_Data+0xc>)
   d679c:	681b      	ldr	r3, [r3, #0]
   d679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d67a0:	9301      	str	r3, [sp, #4]
   d67a2:	bd08      	pop	{r3, pc}
   d67a4:	00030228 	.word	0x00030228

000d67a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d67a8:	b508      	push	{r3, lr}
   d67aa:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <HAL_I2C_Read_Data+0xc>)
   d67ac:	681b      	ldr	r3, [r3, #0]
   d67ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67b0:	9301      	str	r3, [sp, #4]
   d67b2:	bd08      	pop	{r3, pc}
   d67b4:	00030228 	.word	0x00030228

000d67b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d67b8:	b508      	push	{r3, lr}
   d67ba:	4b02      	ldr	r3, [pc, #8]	; (d67c4 <HAL_I2C_Peek_Data+0xc>)
   d67bc:	681b      	ldr	r3, [r3, #0]
   d67be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d67c0:	9301      	str	r3, [sp, #4]
   d67c2:	bd08      	pop	{r3, pc}
   d67c4:	00030228 	.word	0x00030228

000d67c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d67c8:	b508      	push	{r3, lr}
   d67ca:	4b02      	ldr	r3, [pc, #8]	; (d67d4 <HAL_I2C_Flush_Data+0xc>)
   d67cc:	681b      	ldr	r3, [r3, #0]
   d67ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67d0:	9301      	str	r3, [sp, #4]
   d67d2:	bd08      	pop	{r3, pc}
   d67d4:	00030228 	.word	0x00030228

000d67d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d67d8:	b508      	push	{r3, lr}
   d67da:	4b02      	ldr	r3, [pc, #8]	; (d67e4 <HAL_I2C_Is_Enabled+0xc>)
   d67dc:	681b      	ldr	r3, [r3, #0]
   d67de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d67e0:	9301      	str	r3, [sp, #4]
   d67e2:	bd08      	pop	{r3, pc}
   d67e4:	00030228 	.word	0x00030228

000d67e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d67e8:	b508      	push	{r3, lr}
   d67ea:	4b02      	ldr	r3, [pc, #8]	; (d67f4 <HAL_I2C_Init+0xc>)
   d67ec:	681b      	ldr	r3, [r3, #0]
   d67ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d67f0:	9301      	str	r3, [sp, #4]
   d67f2:	bd08      	pop	{r3, pc}
   d67f4:	00030228 	.word	0x00030228

000d67f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d67f8:	b508      	push	{r3, lr}
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <HAL_USB_USART_Init+0xc>)
   d67fc:	681b      	ldr	r3, [r3, #0]
   d67fe:	681b      	ldr	r3, [r3, #0]
   d6800:	9301      	str	r3, [sp, #4]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	0003024c 	.word	0x0003024c

000d6808 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6808:	b508      	push	{r3, lr}
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <HAL_USB_USART_Begin+0xc>)
   d680c:	681b      	ldr	r3, [r3, #0]
   d680e:	685b      	ldr	r3, [r3, #4]
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	bd08      	pop	{r3, pc}
   d6814:	0003024c 	.word	0x0003024c

000d6818 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6818:	b508      	push	{r3, lr}
   d681a:	4b02      	ldr	r3, [pc, #8]	; (d6824 <HAL_USB_USART_Available_Data+0xc>)
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	691b      	ldr	r3, [r3, #16]
   d6820:	9301      	str	r3, [sp, #4]
   d6822:	bd08      	pop	{r3, pc}
   d6824:	0003024c 	.word	0x0003024c

000d6828 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b02      	ldr	r3, [pc, #8]	; (d6834 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	695b      	ldr	r3, [r3, #20]
   d6830:	9301      	str	r3, [sp, #4]
   d6832:	bd08      	pop	{r3, pc}
   d6834:	0003024c 	.word	0x0003024c

000d6838 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6838:	b508      	push	{r3, lr}
   d683a:	4b02      	ldr	r3, [pc, #8]	; (d6844 <HAL_USB_USART_Receive_Data+0xc>)
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	699b      	ldr	r3, [r3, #24]
   d6840:	9301      	str	r3, [sp, #4]
   d6842:	bd08      	pop	{r3, pc}
   d6844:	0003024c 	.word	0x0003024c

000d6848 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6848:	b508      	push	{r3, lr}
   d684a:	4b02      	ldr	r3, [pc, #8]	; (d6854 <HAL_USB_USART_Send_Data+0xc>)
   d684c:	681b      	ldr	r3, [r3, #0]
   d684e:	69db      	ldr	r3, [r3, #28]
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	0003024c 	.word	0x0003024c

000d6858 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6858:	b508      	push	{r3, lr}
   d685a:	4b02      	ldr	r3, [pc, #8]	; (d6864 <HAL_USB_USART_Flush_Data+0xc>)
   d685c:	681b      	ldr	r3, [r3, #0]
   d685e:	6a1b      	ldr	r3, [r3, #32]
   d6860:	9301      	str	r3, [sp, #4]
   d6862:	bd08      	pop	{r3, pc}
   d6864:	0003024c 	.word	0x0003024c

000d6868 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6868:	b508      	push	{r3, lr}
   d686a:	4b02      	ldr	r3, [pc, #8]	; (d6874 <panic_+0xc>)
   d686c:	681b      	ldr	r3, [r3, #0]
   d686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6870:	9301      	str	r3, [sp, #4]
   d6872:	bd08      	pop	{r3, pc}
   d6874:	00030260 	.word	0x00030260

000d6878 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <log_message+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	00030260 	.word	0x00030260

000d6888 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6888:	b508      	push	{r3, lr}
   d688a:	4b02      	ldr	r3, [pc, #8]	; (d6894 <system_mode+0xc>)
   d688c:	681b      	ldr	r3, [r3, #0]
   d688e:	681b      	ldr	r3, [r3, #0]
   d6890:	9301      	str	r3, [sp, #4]
   d6892:	bd08      	pop	{r3, pc}
   d6894:	00030220 	.word	0x00030220

000d6898 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6898:	b508      	push	{r3, lr}
   d689a:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <set_system_mode+0xc>)
   d689c:	681b      	ldr	r3, [r3, #0]
   d689e:	685b      	ldr	r3, [r3, #4]
   d68a0:	9301      	str	r3, [sp, #4]
   d68a2:	bd08      	pop	{r3, pc}
   d68a4:	00030220 	.word	0x00030220

000d68a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d68a8:	b508      	push	{r3, lr}
   d68aa:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <system_delay_ms+0xc>)
   d68ac:	681b      	ldr	r3, [r3, #0]
   d68ae:	695b      	ldr	r3, [r3, #20]
   d68b0:	9301      	str	r3, [sp, #4]
   d68b2:	bd08      	pop	{r3, pc}
   d68b4:	00030220 	.word	0x00030220

000d68b8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d68b8:	b508      	push	{r3, lr}
   d68ba:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <system_thread_get_state+0xc>)
   d68bc:	681b      	ldr	r3, [r3, #0]
   d68be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	bd08      	pop	{r3, pc}
   d68c4:	00030220 	.word	0x00030220

000d68c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d68c8:	b508      	push	{r3, lr}
   d68ca:	4b03      	ldr	r3, [pc, #12]	; (d68d8 <system_ctrl_set_app_request_handler+0x10>)
   d68cc:	681b      	ldr	r3, [r3, #0]
   d68ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d68d2:	9301      	str	r3, [sp, #4]
   d68d4:	bd08      	pop	{r3, pc}
   d68d6:	0000      	.short	0x0000
   d68d8:	00030220 	.word	0x00030220

000d68dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b03      	ldr	r3, [pc, #12]	; (d68ec <system_ctrl_set_result+0x10>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d68e6:	9301      	str	r3, [sp, #4]
   d68e8:	bd08      	pop	{r3, pc}
   d68ea:	0000      	.short	0x0000
   d68ec:	00030220 	.word	0x00030220

000d68f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b02      	ldr	r3, [pc, #8]	; (d68fc <network_connect+0xc>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	685b      	ldr	r3, [r3, #4]
   d68f8:	9301      	str	r3, [sp, #4]
   d68fa:	bd08      	pop	{r3, pc}
   d68fc:	00030240 	.word	0x00030240

000d6900 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <network_connecting+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	689b      	ldr	r3, [r3, #8]
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	00030240 	.word	0x00030240

000d6910 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <network_disconnect+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	68db      	ldr	r3, [r3, #12]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	00030240 	.word	0x00030240

000d6920 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <network_ready+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	691b      	ldr	r3, [r3, #16]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	00030240 	.word	0x00030240

000d6930 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <network_on+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	695b      	ldr	r3, [r3, #20]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	00030240 	.word	0x00030240

000d6940 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <network_off+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	699b      	ldr	r3, [r3, #24]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	00030240 	.word	0x00030240

000d6950 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <network_listen+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	69db      	ldr	r3, [r3, #28]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	00030240 	.word	0x00030240

000d6960 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <network_listening+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	6a1b      	ldr	r3, [r3, #32]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	00030240 	.word	0x00030240

000d6970 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <network_set_listen_timeout+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	00030240 	.word	0x00030240

000d6980 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <network_get_listen_timeout+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	00030240 	.word	0x00030240

000d6990 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <spark_process+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	689b      	ldr	r3, [r3, #8]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	00030244 	.word	0x00030244

000d69a0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <spark_cloud_flag_connected+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	695b      	ldr	r3, [r3, #20]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	00030244 	.word	0x00030244

000d69b0 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <spark_subscribe+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	00030244 	.word	0x00030244

000d69c0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <spark_sync_time_pending+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	00030244 	.word	0x00030244

000d69d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b02      	ldr	r3, [pc, #8]	; (d69dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69d8:	9301      	str	r3, [sp, #4]
   d69da:	bd08      	pop	{r3, pc}
   d69dc:	00030244 	.word	0x00030244

000d69e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <malloc+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	681b      	ldr	r3, [r3, #0]
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	0003021c 	.word	0x0003021c

000d69f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <free+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	685b      	ldr	r3, [r3, #4]
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	0003021c 	.word	0x0003021c

000d6a00 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <realloc+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	689b      	ldr	r3, [r3, #8]
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	0003021c 	.word	0x0003021c

000d6a10 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <siscanf+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	699b      	ldr	r3, [r3, #24]
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	0003021c 	.word	0x0003021c

000d6a20 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <snprintf+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	69db      	ldr	r3, [r3, #28]
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	0003021c 	.word	0x0003021c

000d6a30 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <vsnprintf+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	0003021c 	.word	0x0003021c

000d6a40 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <_malloc_r+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	0003021c 	.word	0x0003021c

000d6a50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a50:	2200      	movs	r2, #0
   d6a52:	4611      	mov	r1, r2
   d6a54:	6840      	ldr	r0, [r0, #4]
   d6a56:	f7ff bf83 	b.w	d6960 <network_listening>

000d6a5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a5a:	2200      	movs	r2, #0
   d6a5c:	4611      	mov	r1, r2
   d6a5e:	6840      	ldr	r0, [r0, #4]
   d6a60:	f7ff bf8e 	b.w	d6980 <network_get_listen_timeout>

000d6a64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a64:	2200      	movs	r2, #0
   d6a66:	6840      	ldr	r0, [r0, #4]
   d6a68:	f7ff bf82 	b.w	d6970 <network_set_listen_timeout>

000d6a6c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a6c:	2200      	movs	r2, #0
   d6a6e:	f081 0101 	eor.w	r1, r1, #1
   d6a72:	6840      	ldr	r0, [r0, #4]
   d6a74:	f7ff bf6c 	b.w	d6950 <network_listen>

000d6a78 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6a78:	2300      	movs	r3, #0
   d6a7a:	461a      	mov	r2, r3
   d6a7c:	4619      	mov	r1, r3
   d6a7e:	6840      	ldr	r0, [r0, #4]
   d6a80:	f7ff bf5e 	b.w	d6940 <network_off>

000d6a84 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6a84:	2300      	movs	r3, #0
   d6a86:	461a      	mov	r2, r3
   d6a88:	4619      	mov	r1, r3
   d6a8a:	6840      	ldr	r0, [r0, #4]
   d6a8c:	f7ff bf50 	b.w	d6930 <network_on>

000d6a90 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6a90:	2200      	movs	r2, #0
   d6a92:	4611      	mov	r1, r2
   d6a94:	6840      	ldr	r0, [r0, #4]
   d6a96:	f7ff bf43 	b.w	d6920 <network_ready>

000d6a9a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a9a:	2200      	movs	r2, #0
   d6a9c:	4611      	mov	r1, r2
   d6a9e:	6840      	ldr	r0, [r0, #4]
   d6aa0:	f7ff bf2e 	b.w	d6900 <network_connecting>

000d6aa4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6aa4:	2200      	movs	r2, #0
   d6aa6:	2102      	movs	r1, #2
   d6aa8:	6840      	ldr	r0, [r0, #4]
   d6aaa:	f7ff bf31 	b.w	d6910 <network_disconnect>

000d6aae <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6aae:	2300      	movs	r3, #0
   d6ab0:	461a      	mov	r2, r3
   d6ab2:	6840      	ldr	r0, [r0, #4]
   d6ab4:	f7ff bf1c 	b.w	d68f0 <network_connect>

000d6ab8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6ab8:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6aba:	2203      	movs	r2, #3
   d6abc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6abe:	4a02      	ldr	r2, [pc, #8]	; (d6ac8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6ac0:	601a      	str	r2, [r3, #0]
   d6ac2:	4770      	bx	lr
   d6ac4:	2003e348 	.word	0x2003e348
   d6ac8:	000da2b4 	.word	0x000da2b4

000d6acc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6acc:	2100      	movs	r1, #0
   d6ace:	f7ff bcff 	b.w	d64d0 <HAL_SPI_Acquire>

000d6ad2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6ad2:	2100      	movs	r1, #0
   d6ad4:	f7ff bd04 	b.w	d64e0 <HAL_SPI_Release>

000d6ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6ad8:	b510      	push	{r4, lr}
   d6ada:	4604      	mov	r4, r0
{
    _spi = spi;
   d6adc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6ade:	4608      	mov	r0, r1
   d6ae0:	f7ff fcc6 	bl	d6470 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6ae4:	2300      	movs	r3, #0
   d6ae6:	6063      	str	r3, [r4, #4]
}
   d6ae8:	4620      	mov	r0, r4
   d6aea:	bd10      	pop	{r4, pc}

000d6aec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6aec:	b510      	push	{r4, lr}
   d6aee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6af0:	7800      	ldrb	r0, [r0, #0]
   d6af2:	f7ff ffeb 	bl	d6acc <_ZN8SPIClass4lockEv.isra.0>
   d6af6:	b948      	cbnz	r0, d6b0c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6af8:	7820      	ldrb	r0, [r4, #0]
   d6afa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6afe:	f7ff fca7 	bl	d6450 <HAL_SPI_Begin>
        unlock();
   d6b02:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6b08:	f7ff bfe3 	b.w	d6ad2 <_ZN8SPIClass6unlockEv.isra.1>
   d6b0c:	bd10      	pop	{r4, pc}

000d6b0e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6b0e:	7800      	ldrb	r0, [r0, #0]
   d6b10:	f7ff bfdf 	b.w	d6ad2 <_ZN8SPIClass6unlockEv.isra.1>

000d6b14 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6b14:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6b16:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6b18:	6018      	str	r0, [r3, #0]
   d6b1a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6b1c:	6818      	ldr	r0, [r3, #0]
   d6b1e:	4288      	cmp	r0, r1
   d6b20:	b2e5      	uxtb	r5, r4
   d6b22:	d906      	bls.n	d6b32 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6b24:	3401      	adds	r4, #1
   d6b26:	2c08      	cmp	r4, #8
   d6b28:	d002      	beq.n	d6b30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6b2a:	0840      	lsrs	r0, r0, #1
   d6b2c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6b2e:	e7f5      	b.n	d6b1c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6b30:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6b34:	5d5b      	ldrb	r3, [r3, r5]
   d6b36:	7013      	strb	r3, [r2, #0]
   d6b38:	bd30      	pop	{r4, r5, pc}
   d6b3a:	bf00      	nop
   d6b3c:	000da2e0 	.word	0x000da2e0

000d6b40 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6b44:	4607      	mov	r7, r0
   d6b46:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6b48:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6b4a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6b4c:	f7ff ffbe 	bl	d6acc <_ZN8SPIClass4lockEv.isra.0>
   d6b50:	2800      	cmp	r0, #0
   d6b52:	db62      	blt.n	d6c1a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6b54:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6b56:	2214      	movs	r2, #20
   d6b58:	2100      	movs	r1, #0
   d6b5a:	a809      	add	r0, sp, #36	; 0x24
   d6b5c:	f002 fd67 	bl	d962e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6b60:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6b62:	4620      	mov	r0, r4
   d6b64:	2200      	movs	r2, #0
   d6b66:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6b68:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6b6c:	f7ff fc90 	bl	d6490 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6b70:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6b74:	b154      	cbz	r4, d6b8c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6b76:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6b7a:	b935      	cbnz	r5, d6b8a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6b7c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6b80:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6b84:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6b88:	e003      	b.n	d6b92 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6b8a:	2400      	movs	r4, #0
   d6b8c:	46a1      	mov	r9, r4
   d6b8e:	46a0      	mov	r8, r4
   d6b90:	2501      	movs	r5, #1
   d6b92:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6b94:	b105      	cbz	r5, d6b98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6b96:	b9bb      	cbnz	r3, d6bc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6b98:	429d      	cmp	r5, r3
   d6b9a:	d10b      	bne.n	d6bb4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6b9c:	68b2      	ldr	r2, [r6, #8]
   d6b9e:	4542      	cmp	r2, r8
   d6ba0:	d108      	bne.n	d6bb4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6ba2:	f88d 9020 	strb.w	r9, [sp, #32]
   d6ba6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6baa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6bae:	89b2      	ldrh	r2, [r6, #12]
   d6bb0:	4291      	cmp	r1, r2
   d6bb2:	d009      	beq.n	d6bc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6bb4:	b153      	cbz	r3, d6bcc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6bb6:	2400      	movs	r4, #0
   d6bb8:	7838      	ldrb	r0, [r7, #0]
   d6bba:	9401      	str	r4, [sp, #4]
   d6bbc:	9400      	str	r4, [sp, #0]
   d6bbe:	4623      	mov	r3, r4
   d6bc0:	4622      	mov	r2, r4
   d6bc2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6bc4:	f7ff fc7c 	bl	d64c0 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6bc8:	2000      	movs	r0, #0
   d6bca:	e026      	b.n	d6c1a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6bcc:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6bd0:	68b1      	ldr	r1, [r6, #8]
   d6bd2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6bd4:	ab04      	add	r3, sp, #16
   d6bd6:	f10d 020f 	add.w	r2, sp, #15
   d6bda:	f7ff ff9b 	bl	d6b14 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6bde:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6be0:	b105      	cbz	r5, d6be4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6be2:	b9b1      	cbnz	r1, d6c12 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6be4:	42a9      	cmp	r1, r5
   d6be6:	d008      	beq.n	d6bfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6be8:	2400      	movs	r4, #0
   d6bea:	7838      	ldrb	r0, [r7, #0]
   d6bec:	9401      	str	r4, [sp, #4]
   d6bee:	7b74      	ldrb	r4, [r6, #13]
   d6bf0:	7b33      	ldrb	r3, [r6, #12]
   d6bf2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6bf6:	9400      	str	r4, [sp, #0]
   d6bf8:	e7e4      	b.n	d6bc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6bfa:	68b3      	ldr	r3, [r6, #8]
   d6bfc:	4543      	cmp	r3, r8
   d6bfe:	d3f3      	bcc.n	d6be8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6c00:	f88d 9020 	strb.w	r9, [sp, #32]
   d6c04:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6c08:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6c0c:	89b3      	ldrh	r3, [r6, #12]
   d6c0e:	429a      	cmp	r2, r3
   d6c10:	d1ea      	bne.n	d6be8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6c12:	9b04      	ldr	r3, [sp, #16]
   d6c14:	4543      	cmp	r3, r8
   d6c16:	d1e7      	bne.n	d6be8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6c18:	e7d6      	b.n	d6bc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6c1a:	b00f      	add	sp, #60	; 0x3c
   d6c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c20 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6c20:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6c22:	7800      	ldrb	r0, [r0, #0]
   d6c24:	f7ff fc1c 	bl	d6460 <HAL_SPI_Send_Receive_Data>
}
   d6c28:	b2c0      	uxtb	r0, r0
   d6c2a:	bd08      	pop	{r3, pc}

000d6c2c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6c2c:	b530      	push	{r4, r5, lr}
   d6c2e:	b087      	sub	sp, #28
   d6c30:	4604      	mov	r4, r0
   d6c32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6c34:	7800      	ldrb	r0, [r0, #0]
   d6c36:	9500      	str	r5, [sp, #0]
   d6c38:	f7ff fc32 	bl	d64a0 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6c3c:	b93d      	cbnz	r5, d6c4e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6c3e:	a902      	add	r1, sp, #8
   d6c40:	7820      	ldrb	r0, [r4, #0]
   d6c42:	f7ff fc35 	bl	d64b0 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6c46:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6c4a:	07db      	lsls	r3, r3, #31
   d6c4c:	d4f7      	bmi.n	d6c3e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6c4e:	b007      	add	sp, #28
   d6c50:	bd30      	pop	{r4, r5, pc}

000d6c52 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6c52:	7800      	ldrb	r0, [r0, #0]
   d6c54:	f7ff bc14 	b.w	d6480 <HAL_SPI_Is_Enabled>

000d6c58 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6c58:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6c5a:	4c09      	ldr	r4, [pc, #36]	; (d6c80 <_GLOBAL__sub_I_System+0x28>)
   d6c5c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6c62:	6020      	str	r0, [r4, #0]
   d6c64:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6c66:	71a0      	strb	r0, [r4, #6]
   d6c68:	8120      	strh	r0, [r4, #8]
   d6c6a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6c6c:	f7ff fe14 	bl	d6898 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6c70:	4620      	mov	r0, r4
   d6c72:	4a04      	ldr	r2, [pc, #16]	; (d6c84 <_GLOBAL__sub_I_System+0x2c>)
   d6c74:	4904      	ldr	r1, [pc, #16]	; (d6c88 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6c7a:	f002 ba33 	b.w	d90e4 <__aeabi_atexit>
   d6c7e:	bf00      	nop
   d6c80:	2003e350 	.word	0x2003e350
   d6c84:	2003d694 	.word	0x2003d694
   d6c88:	000d41a9 	.word	0x000d41a9

000d6c8c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6c8c:	b510      	push	{r4, lr}
   d6c8e:	4604      	mov	r4, r0
{
	free(buffer);
   d6c90:	6800      	ldr	r0, [r0, #0]
   d6c92:	f7ff fead 	bl	d69f0 <free>
}
   d6c96:	4620      	mov	r0, r4
   d6c98:	bd10      	pop	{r4, pc}

000d6c9a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6c9a:	b510      	push	{r4, lr}
   d6c9c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6c9e:	6800      	ldr	r0, [r0, #0]
   d6ca0:	b108      	cbz	r0, d6ca6 <_ZN6String10invalidateEv+0xc>
   d6ca2:	f7ff fea5 	bl	d69f0 <free>
	buffer = NULL;
   d6ca6:	2300      	movs	r3, #0
   d6ca8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6caa:	60a3      	str	r3, [r4, #8]
   d6cac:	6063      	str	r3, [r4, #4]
   d6cae:	bd10      	pop	{r4, pc}

000d6cb0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6cb0:	b538      	push	{r3, r4, r5, lr}
   d6cb2:	4604      	mov	r4, r0
   d6cb4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6cb6:	6800      	ldr	r0, [r0, #0]
   d6cb8:	3101      	adds	r1, #1
   d6cba:	f7ff fea1 	bl	d6a00 <realloc>
	if (newbuffer) {
   d6cbe:	b110      	cbz	r0, d6cc6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6cc0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6cc4:	2001      	movs	r0, #1
	}
	return 0;
}
   d6cc6:	bd38      	pop	{r3, r4, r5, pc}

000d6cc8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6cc8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6cca:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6ccc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6cce:	b113      	cbz	r3, d6cd6 <_ZN6String7reserveEj+0xe>
   d6cd0:	6843      	ldr	r3, [r0, #4]
   d6cd2:	428b      	cmp	r3, r1
   d6cd4:	d207      	bcs.n	d6ce6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	f7ff ffea 	bl	d6cb0 <_ZN6String12changeBufferEj>
   d6cdc:	b120      	cbz	r0, d6ce8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6cde:	68a3      	ldr	r3, [r4, #8]
   d6ce0:	b90b      	cbnz	r3, d6ce6 <_ZN6String7reserveEj+0x1e>
   d6ce2:	6822      	ldr	r2, [r4, #0]
   d6ce4:	7013      	strb	r3, [r2, #0]
   d6ce6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6ce8:	bd10      	pop	{r4, pc}

000d6cea <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6cea:	b570      	push	{r4, r5, r6, lr}
   d6cec:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6cee:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6cf0:	4604      	mov	r4, r0
   d6cf2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6cf4:	f7ff ffe8 	bl	d6cc8 <_ZN6String7reserveEj>
   d6cf8:	b918      	cbnz	r0, d6d02 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	f7ff ffcd 	bl	d6c9a <_ZN6String10invalidateEv>
		return *this;
   d6d00:	e009      	b.n	d6d16 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6d02:	462a      	mov	r2, r5
   d6d04:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6d06:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6d08:	6820      	ldr	r0, [r4, #0]
   d6d0a:	f002 fc6a 	bl	d95e2 <memcpy>
	buffer[len] = 0;
   d6d0e:	6822      	ldr	r2, [r4, #0]
   d6d10:	68a3      	ldr	r3, [r4, #8]
   d6d12:	2100      	movs	r1, #0
   d6d14:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6d16:	4620      	mov	r0, r4
   d6d18:	bd70      	pop	{r4, r5, r6, pc}

000d6d1a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6d1a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6d1c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6d1e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6d20:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6d22:	6043      	str	r3, [r0, #4]
	len = 0;
   d6d24:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6d26:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6d28:	460d      	mov	r5, r1
   d6d2a:	b139      	cbz	r1, d6d3c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6d2c:	4608      	mov	r0, r1
   d6d2e:	f002 fcd0 	bl	d96d2 <strlen>
   d6d32:	4629      	mov	r1, r5
   d6d34:	4602      	mov	r2, r0
   d6d36:	4620      	mov	r0, r4
   d6d38:	f7ff ffd7 	bl	d6cea <_ZN6String4copyEPKcj>
}
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	bd38      	pop	{r3, r4, r5, pc}

000d6d40 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6d40:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6d42:	b510      	push	{r4, lr}
   d6d44:	460b      	mov	r3, r1
   d6d46:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6d48:	d007      	beq.n	d6d5a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6d4a:	6809      	ldr	r1, [r1, #0]
   d6d4c:	b119      	cbz	r1, d6d56 <_ZN6StringaSERKS_+0x16>
   d6d4e:	689a      	ldr	r2, [r3, #8]
   d6d50:	f7ff ffcb 	bl	d6cea <_ZN6String4copyEPKcj>
   d6d54:	e001      	b.n	d6d5a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6d56:	f7ff ffa0 	bl	d6c9a <_ZN6String10invalidateEv>

	return *this;
}
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	bd10      	pop	{r4, pc}

000d6d5e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6d5e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6d60:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6d62:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6d64:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6d66:	6043      	str	r3, [r0, #4]
	len = 0;
   d6d68:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6d6a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6d6c:	f7ff ffe8 	bl	d6d40 <_ZN6StringaSERKS_>
}
   d6d70:	4620      	mov	r0, r4
   d6d72:	bd10      	pop	{r4, pc}

000d6d74 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6d74:	b538      	push	{r3, r4, r5, lr}
   d6d76:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6d78:	460c      	mov	r4, r1
   d6d7a:	b141      	cbz	r1, d6d8e <_ZN6StringaSEPKc+0x1a>
   d6d7c:	4608      	mov	r0, r1
   d6d7e:	f002 fca8 	bl	d96d2 <strlen>
   d6d82:	4621      	mov	r1, r4
   d6d84:	4602      	mov	r2, r0
   d6d86:	4628      	mov	r0, r5
   d6d88:	f7ff ffaf 	bl	d6cea <_ZN6String4copyEPKcj>
   d6d8c:	e001      	b.n	d6d92 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6d8e:	f7ff ff84 	bl	d6c9a <_ZN6String10invalidateEv>

	return *this;
}
   d6d92:	4628      	mov	r0, r5
   d6d94:	bd38      	pop	{r3, r4, r5, pc}

000d6d96 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d96:	4770      	bx	lr

000d6d98 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6d98:	2000      	movs	r0, #0
   d6d9a:	4770      	bx	lr

000d6d9c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d9c:	4770      	bx	lr

000d6d9e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6d9e:	2000      	movs	r0, #0
   d6da0:	4770      	bx	lr

000d6da2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6da2:	4770      	bx	lr

000d6da4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6da4:	2000      	movs	r0, #0
   d6da6:	4770      	bx	lr

000d6da8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6da8:	b510      	push	{r4, lr}
   d6daa:	2114      	movs	r1, #20
   d6dac:	4604      	mov	r4, r0
   d6dae:	f002 f9a7 	bl	d9100 <_ZdlPvj>
   d6db2:	4620      	mov	r0, r4
   d6db4:	bd10      	pop	{r4, pc}

000d6db6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6db6:	b510      	push	{r4, lr}
   d6db8:	2114      	movs	r1, #20
   d6dba:	4604      	mov	r4, r0
   d6dbc:	f002 f9a0 	bl	d9100 <_ZdlPvj>
   d6dc0:	4620      	mov	r0, r4
   d6dc2:	bd10      	pop	{r4, pc}

000d6dc4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6dc4:	b510      	push	{r4, lr}
   d6dc6:	2114      	movs	r1, #20
   d6dc8:	4604      	mov	r4, r0
   d6dca:	f002 f999 	bl	d9100 <_ZdlPvj>
   d6dce:	4620      	mov	r0, r4
   d6dd0:	bd10      	pop	{r4, pc}

000d6dd2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6dd2:	f7fd b962 	b.w	d409a <_ZdlPv>

000d6dd6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6dd6:	f7fd b960 	b.w	d409a <_ZdlPv>

000d6dda <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6dda:	f7fd b95e 	b.w	d409a <_ZdlPv>

000d6dde <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6dde:	b510      	push	{r4, lr}
   d6de0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6de2:	6800      	ldr	r0, [r0, #0]
   d6de4:	b108      	cbz	r0, d6dea <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6de6:	f7ff fc6f 	bl	d66c8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6dea:	4620      	mov	r0, r4
   d6dec:	bd10      	pop	{r4, pc}
	...

000d6df0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6df0:	b530      	push	{r4, r5, lr}
   d6df2:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d6df4:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6df6:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d6df8:	2400      	movs	r4, #0
   d6dfa:	9302      	str	r3, [sp, #8]
   d6dfc:	4b08      	ldr	r3, [pc, #32]	; (d6e20 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d6dfe:	9300      	str	r3, [sp, #0]
   d6e00:	aa02      	add	r2, sp, #8
   d6e02:	4623      	mov	r3, r4
   d6e04:	4907      	ldr	r1, [pc, #28]	; (d6e24 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d6e06:	9403      	str	r4, [sp, #12]
   d6e08:	2001      	movs	r0, #1
   d6e0a:	f7ff fd35 	bl	d6878 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d6e0e:	6828      	ldr	r0, [r5, #0]
   d6e10:	4905      	ldr	r1, [pc, #20]	; (d6e28 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d6e12:	8800      	ldrh	r0, [r0, #0]
   d6e14:	4623      	mov	r3, r4
   d6e16:	462a      	mov	r2, r5
   d6e18:	f7ff fbc8 	bl	d65ac <hal_ble_gatt_client_discover_all_services>
    }
   d6e1c:	b00b      	add	sp, #44	; 0x2c
   d6e1e:	bd30      	pop	{r4, r5, pc}
   d6e20:	000da347 	.word	0x000da347
   d6e24:	000da33c 	.word	0x000da33c
   d6e28:	000d8409 	.word	0x000d8409

000d6e2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6e2c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6e2e:	200a      	movs	r0, #10
   d6e30:	4a02      	ldr	r2, [pc, #8]	; (d6e3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d6e32:	2100      	movs	r1, #0
   d6e34:	f7ff fd18 	bl	d6868 <panic_>
    }
}
   d6e38:	bd08      	pop	{r3, pc}
   d6e3a:	bf00      	nop
   d6e3c:	000d6501 	.word	0x000d6501

000d6e40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6e40:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6e42:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6e44:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6e46:	689b      	ldr	r3, [r3, #8]
   d6e48:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6e4a:	68a3      	ldr	r3, [r4, #8]
   d6e4c:	3b01      	subs	r3, #1
   d6e4e:	60a3      	str	r3, [r4, #8]
   d6e50:	b92b      	cbnz	r3, d6e5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6e52:	6823      	ldr	r3, [r4, #0]
   d6e54:	4620      	mov	r0, r4
   d6e56:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6e5c:	4718      	bx	r3
   d6e5e:	bd10      	pop	{r4, pc}

000d6e60 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6e60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6e64:	b2da      	uxtb	r2, r3
   d6e66:	2a09      	cmp	r2, #9
   d6e68:	d801      	bhi.n	d6e6e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6e6a:	4618      	mov	r0, r3
   d6e6c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6e6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6e72:	2b05      	cmp	r3, #5
   d6e74:	d801      	bhi.n	d6e7a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6e76:	3857      	subs	r0, #87	; 0x57
   d6e78:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6e7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6e7e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6e80:	bf94      	ite	ls
   d6e82:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6e84:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6e88:	4770      	bx	lr
	...

000d6e8c <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6e8c:	b510      	push	{r4, lr}
            locked_(false) {
   d6e8e:	2300      	movs	r3, #0
   d6e90:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6e92:	4b04      	ldr	r3, [pc, #16]	; (d6ea4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6e94:	4604      	mov	r4, r0
   d6e96:	6818      	ldr	r0, [r3, #0]
   d6e98:	f7ff fc1e 	bl	d66d8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d6e9c:	2301      	movs	r3, #1
   d6e9e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6ea0:	4620      	mov	r0, r4
   d6ea2:	bd10      	pop	{r4, pc}
   d6ea4:	2003e364 	.word	0x2003e364

000d6ea8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6ea8:	b510      	push	{r4, lr}
        if (locked_) {
   d6eaa:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d6eac:	4604      	mov	r4, r0
        if (locked_) {
   d6eae:	b11b      	cbz	r3, d6eb8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6eb0:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6eb2:	6818      	ldr	r0, [r3, #0]
   d6eb4:	f7ff fc18 	bl	d66e8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6eb8:	4620      	mov	r0, r4
   d6eba:	bd10      	pop	{r4, pc}
   d6ebc:	2003e364 	.word	0x2003e364

000d6ec0 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6ec0:	2200      	movs	r2, #0
   d6ec2:	6002      	str	r2, [r0, #0]
   d6ec4:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d6ec6:	4770      	bx	lr

000d6ec8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6ec8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6eca:	7982      	ldrb	r2, [r0, #6]
   d6ecc:	798b      	ldrb	r3, [r1, #6]
   d6ece:	429a      	cmp	r2, r3
   d6ed0:	d106      	bne.n	d6ee0 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6ed2:	2206      	movs	r2, #6
   d6ed4:	f002 fb76 	bl	d95c4 <memcmp>
   d6ed8:	fab0 f080 	clz	r0, r0
   d6edc:	0940      	lsrs	r0, r0, #5
   d6ede:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6ee0:	2000      	movs	r0, #0
}
   d6ee2:	bd08      	pop	{r3, pc}

000d6ee4 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d6ee4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d6ee6:	2301      	movs	r3, #1
   d6ee8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6eea:	4b05      	ldr	r3, [pc, #20]	; (d6f00 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d6eec:	4602      	mov	r2, r0
   d6eee:	f103 0110 	add.w	r1, r3, #16
   d6ef2:	f853 4b04 	ldr.w	r4, [r3], #4
   d6ef6:	f842 4b04 	str.w	r4, [r2], #4
   d6efa:	428b      	cmp	r3, r1
   d6efc:	d1f9      	bne.n	d6ef2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d6efe:	bd10      	pop	{r4, pc}
   d6f00:	000da4dc 	.word	0x000da4dc

000d6f04 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6f04:	7c0b      	ldrb	r3, [r1, #16]
   d6f06:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d6f0a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6f0c:	d110      	bne.n	d6f30 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d6f0e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f10:	4b0d      	ldr	r3, [pc, #52]	; (d6f48 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d6f12:	4602      	mov	r2, r0
   d6f14:	f103 0410 	add.w	r4, r3, #16
   d6f18:	f853 5b04 	ldr.w	r5, [r3], #4
   d6f1c:	f842 5b04 	str.w	r5, [r2], #4
   d6f20:	42a3      	cmp	r3, r4
   d6f22:	d1f9      	bne.n	d6f18 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d6f24:	880b      	ldrh	r3, [r1, #0]
   d6f26:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d6f28:	880b      	ldrh	r3, [r1, #0]
   d6f2a:	121b      	asrs	r3, r3, #8
   d6f2c:	7343      	strb	r3, [r0, #13]
   d6f2e:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d6f30:	2301      	movs	r3, #1
   d6f32:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6f34:	f101 0210 	add.w	r2, r1, #16
   d6f38:	4603      	mov	r3, r0
   d6f3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f3e:	f843 4b04 	str.w	r4, [r3], #4
   d6f42:	4291      	cmp	r1, r2
   d6f44:	d1f9      	bne.n	d6f3a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d6f46:	bd30      	pop	{r4, r5, pc}
   d6f48:	000da4dc 	.word	0x000da4dc

000d6f4c <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d6f4c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6f4e:	690b      	ldr	r3, [r1, #16]
   d6f50:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6f52:	f101 0210 	add.w	r2, r1, #16
   d6f56:	4603      	mov	r3, r0
   d6f58:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f5c:	f843 4b04 	str.w	r4, [r3], #4
   d6f60:	4291      	cmp	r1, r2
   d6f62:	d1f9      	bne.n	d6f58 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6f64:	bd10      	pop	{r4, pc}

000d6f66 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6f66:	b510      	push	{r4, lr}
    if (uuid128) {
   d6f68:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6f6a:	4604      	mov	r4, r0
    if (uuid128) {
   d6f6c:	b1b9      	cbz	r1, d6f9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d6f6e:	2a01      	cmp	r2, #1
   d6f70:	d109      	bne.n	d6f86 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6f72:	4603      	mov	r3, r0
   d6f74:	f101 0210 	add.w	r2, r1, #16
   d6f78:	f851 0b04 	ldr.w	r0, [r1], #4
   d6f7c:	f843 0b04 	str.w	r0, [r3], #4
   d6f80:	4291      	cmp	r1, r2
   d6f82:	d1f9      	bne.n	d6f78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d6f84:	e008      	b.n	d6f98 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d6f86:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d6f88:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d6f8a:	5c98      	ldrb	r0, [r3, r2]
   d6f8c:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6f90:	3a01      	subs	r2, #1
   d6f92:	b2d2      	uxtb	r2, r2
   d6f94:	2aff      	cmp	r2, #255	; 0xff
   d6f96:	d1f8      	bne.n	d6f8a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d6f98:	2301      	movs	r3, #1
   d6f9a:	6123      	str	r3, [r4, #16]
   d6f9c:	e002      	b.n	d6fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6f9e:	2210      	movs	r2, #16
   d6fa0:	f002 fb45 	bl	d962e <memset>
    }
}
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	bd10      	pop	{r4, pc}

000d6fa8 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d6fa8:	b538      	push	{r3, r4, r5, lr}
   d6faa:	4604      	mov	r4, r0
   d6fac:	460d      	mov	r5, r1
        : BleUuid() {
   d6fae:	f7ff ff99 	bl	d6ee4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d6fb2:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6fb4:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6fb6:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d6fb8:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6fba:	7365      	strb	r5, [r4, #13]
}
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	bd38      	pop	{r3, r4, r5, pc}

000d6fc0 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d6fc0:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d6fc2:	690b      	ldr	r3, [r1, #16]
   d6fc4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6fc6:	f101 0210 	add.w	r2, r1, #16
   d6fca:	4603      	mov	r3, r0
   d6fcc:	f851 4b04 	ldr.w	r4, [r1], #4
   d6fd0:	f843 4b04 	str.w	r4, [r3], #4
   d6fd4:	4291      	cmp	r1, r2
   d6fd6:	d1f9      	bne.n	d6fcc <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d6fd8:	bd10      	pop	{r4, pc}

000d6fda <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d6fda:	b510      	push	{r4, lr}
   d6fdc:	b086      	sub	sp, #24
   d6fde:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d6fe0:	2201      	movs	r2, #1
   d6fe2:	a801      	add	r0, sp, #4
   d6fe4:	f7ff ffbf 	bl	d6f66 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6fe8:	a901      	add	r1, sp, #4
   d6fea:	4620      	mov	r0, r4
   d6fec:	f7ff ffe8 	bl	d6fc0 <_ZN8particle7BleUuidaSERKS0_>
}
   d6ff0:	b006      	add	sp, #24
   d6ff2:	bd10      	pop	{r4, pc}

000d6ff4 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d6ff4:	b510      	push	{r4, lr}
   d6ff6:	b086      	sub	sp, #24
   d6ff8:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d6ffa:	a801      	add	r0, sp, #4
   d6ffc:	f7ff ffd4 	bl	d6fa8 <_ZN8particle7BleUuidC1Et>
   d7000:	a901      	add	r1, sp, #4
   d7002:	4620      	mov	r0, r4
   d7004:	f7ff ffdc 	bl	d6fc0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7008:	b006      	add	sp, #24
   d700a:	bd10      	pop	{r4, pc}

000d700c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d700c:	b510      	push	{r4, lr}
   d700e:	b086      	sub	sp, #24
   d7010:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d7012:	a801      	add	r0, sp, #4
   d7014:	f7ff ff76 	bl	d6f04 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d7018:	a901      	add	r1, sp, #4
   d701a:	4620      	mov	r0, r4
   d701c:	f7ff ffd0 	bl	d6fc0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7020:	b006      	add	sp, #24
   d7022:	bd10      	pop	{r4, pc}

000d7024 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d7024:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d7026:	6902      	ldr	r2, [r0, #16]
   d7028:	690b      	ldr	r3, [r1, #16]
   d702a:	429a      	cmp	r2, r3
   d702c:	d106      	bne.n	d703c <_ZNK8particle7BleUuideqERKS0_+0x18>
   d702e:	2210      	movs	r2, #16
   d7030:	f002 fac8 	bl	d95c4 <memcmp>
   d7034:	fab0 f080 	clz	r0, r0
   d7038:	0940      	lsrs	r0, r0, #5
   d703a:	bd08      	pop	{r3, pc}
   d703c:	2000      	movs	r0, #0
}
   d703e:	bd08      	pop	{r3, pc}

000d7040 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d7040:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d7044:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7046:	4b31      	ldr	r3, [pc, #196]	; (d710c <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7048:	460e      	mov	r6, r1
   d704a:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d704c:	4602      	mov	r2, r0
   d704e:	f103 0110 	add.w	r1, r3, #16
   d7052:	f853 0b04 	ldr.w	r0, [r3], #4
   d7056:	f842 0b04 	str.w	r0, [r2], #4
   d705a:	428b      	cmp	r3, r1
   d705c:	d1f9      	bne.n	d7052 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d705e:	2e00      	cmp	r6, #0
   d7060:	d051      	beq.n	d7106 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d7062:	2124      	movs	r1, #36	; 0x24
   d7064:	4630      	mov	r0, r6
   d7066:	f002 fb64 	bl	d9732 <strnlen>
   d706a:	2804      	cmp	r0, #4
   d706c:	d010      	beq.n	d7090 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d706e:	2700      	movs	r7, #0
   d7070:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7072:	2124      	movs	r1, #36	; 0x24
   d7074:	4630      	mov	r0, r6
   d7076:	f002 fb5c 	bl	d9732 <strnlen>
   d707a:	42b8      	cmp	r0, r7
   d707c:	d901      	bls.n	d7082 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d707e:	bb44      	cbnz	r4, d70d2 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d7080:	e041      	b.n	d7106 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d7082:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d7084:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d7086:	42a5      	cmp	r5, r4
   d7088:	d03d      	beq.n	d7106 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d708a:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d708e:	e7fa      	b.n	d7086 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d7090:	7830      	ldrb	r0, [r6, #0]
   d7092:	f7ff fee5 	bl	d6e60 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d7096:	1e04      	subs	r4, r0, #0
   d7098:	db18      	blt.n	d70cc <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d709a:	7870      	ldrb	r0, [r6, #1]
   d709c:	f7ff fee0 	bl	d6e60 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d70a0:	2800      	cmp	r0, #0
   d70a2:	db13      	blt.n	d70cc <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d70a4:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d70a8:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d70ac:	78b0      	ldrb	r0, [r6, #2]
   d70ae:	f7ff fed7 	bl	d6e60 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d70b2:	1e04      	subs	r4, r0, #0
   d70b4:	db0a      	blt.n	d70cc <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d70b6:	78f0      	ldrb	r0, [r6, #3]
   d70b8:	f7ff fed2 	bl	d6e60 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d70bc:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d70be:	bfa1      	itttt	ge
   d70c0:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d70c4:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d70c8:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d70ca:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d70cc:	2300      	movs	r3, #0
   d70ce:	612b      	str	r3, [r5, #16]
   d70d0:	e019      	b.n	d7106 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d70d2:	5df0      	ldrb	r0, [r6, r7]
   d70d4:	f7ff fec4 	bl	d6e60 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d70d8:	0603      	lsls	r3, r0, #24
   d70da:	d412      	bmi.n	d7102 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d70dc:	3c01      	subs	r4, #1
   d70de:	0100      	lsls	r0, r0, #4
   d70e0:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d70e2:	2124      	movs	r1, #36	; 0x24
   d70e4:	4630      	mov	r0, r6
   d70e6:	f002 fb24 	bl	d9732 <strnlen>
   d70ea:	3701      	adds	r7, #1
   d70ec:	4287      	cmp	r7, r0
   d70ee:	d208      	bcs.n	d7102 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d70f0:	5df0      	ldrb	r0, [r6, r7]
   d70f2:	f7ff feb5 	bl	d6e60 <_ZN8particle11hexToNibbleEc>
   d70f6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d70f8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d70fa:	bfa2      	ittt	ge
   d70fc:	5d2b      	ldrbge	r3, [r5, r4]
   d70fe:	4318      	orrge	r0, r3
   d7100:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7102:	3701      	adds	r7, #1
   d7104:	e7b5      	b.n	d7072 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d7106:	b003      	add	sp, #12
   d7108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d710a:	bf00      	nop
   d710c:	000da4dc 	.word	0x000da4dc

000d7110 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d7110:	b538      	push	{r3, r4, r5, lr}
   d7112:	4604      	mov	r4, r0
   d7114:	460d      	mov	r5, r1
        : BleUuid() {
   d7116:	f7ff fee5 	bl	d6ee4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d711a:	4620      	mov	r0, r4
   d711c:	4629      	mov	r1, r5
   d711e:	f7ff ff8f 	bl	d7040 <_ZN8particle7BleUuid9constructEPKc>
}
   d7122:	4620      	mov	r0, r4
   d7124:	bd38      	pop	{r3, r4, r5, pc}

000d7126 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d7126:	b538      	push	{r3, r4, r5, lr}
   d7128:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d712a:	b101      	cbz	r1, d712e <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d712c:	b912      	cbnz	r2, d7134 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d712e:	2000      	movs	r0, #0
   d7130:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d7132:	bd38      	pop	{r3, r4, r5, pc}
   d7134:	2a1f      	cmp	r2, #31
   d7136:	bf28      	it	cs
   d7138:	221f      	movcs	r2, #31
   d713a:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d713c:	f002 fa51 	bl	d95e2 <memcpy>
    selfLen_ = len;
   d7140:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d7142:	4620      	mov	r0, r4
}
   d7144:	bd38      	pop	{r3, r4, r5, pc}

000d7146 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d7146:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d7148:	b18b      	cbz	r3, d716e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d714a:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d714c:	1ce5      	adds	r5, r4, #3
   d714e:	428d      	cmp	r5, r1
   d7150:	d80f      	bhi.n	d7172 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d7152:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d7154:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d7156:	5d87      	ldrb	r7, [r0, r6]
   d7158:	4297      	cmp	r7, r2
   d715a:	d105      	bne.n	d7168 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d715c:	442e      	add	r6, r5
   d715e:	42b1      	cmp	r1, r6
   d7160:	d307      	bcc.n	d7172 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d7162:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d7164:	1c68      	adds	r0, r5, #1
                return adsLen;
   d7166:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d7168:	3501      	adds	r5, #1
   d716a:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d716c:	e7ee      	b.n	d714c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d716e:	4618      	mov	r0, r3
   d7170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7172:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d7174:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7176 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d7176:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d717a:	4604      	mov	r4, r0
   d717c:	460e      	mov	r6, r1
   d717e:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d7180:	4617      	mov	r7, r2
   d7182:	2a00      	cmp	r2, #0
   d7184:	d03a      	beq.n	d71fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d7186:	460a      	mov	r2, r1
   d7188:	ab01      	add	r3, sp, #4
   d718a:	6a01      	ldr	r1, [r0, #32]
   d718c:	f7ff ffdb 	bl	d7146 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d7190:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d7194:	6a22      	ldr	r2, [r4, #32]
   d7196:	bb03      	cbnz	r3, d71da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d7198:	b1f8      	cbz	r0, d71da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d719a:	1c96      	adds	r6, r2, #2
   d719c:	442e      	add	r6, r5
   d719e:	1a36      	subs	r6, r6, r0
   d71a0:	2e1f      	cmp	r6, #31
   d71a2:	d82b      	bhi.n	d71fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d71a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d71a8:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d71ac:	ebc8 0202 	rsb	r2, r8, r2
   d71b0:	1a12      	subs	r2, r2, r0
   d71b2:	eb00 0108 	add.w	r1, r0, r8
   d71b6:	eb05 0009 	add.w	r0, r5, r9
   d71ba:	b292      	uxth	r2, r2
   d71bc:	4421      	add	r1, r4
   d71be:	4420      	add	r0, r4
   d71c0:	f002 fa1a 	bl	d95f8 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d71c4:	1c6b      	adds	r3, r5, #1
   d71c6:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d71ca:	462a      	mov	r2, r5
   d71cc:	4639      	mov	r1, r7
   d71ce:	eb04 0009 	add.w	r0, r4, r9
   d71d2:	f002 fa06 	bl	d95e2 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d71d6:	6226      	str	r6, [r4, #32]
   d71d8:	e010      	b.n	d71fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d71da:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d71dc:	182b      	adds	r3, r5, r0
   d71de:	2b1f      	cmp	r3, #31
   d71e0:	d80c      	bhi.n	d71fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d71e2:	1c6b      	adds	r3, r5, #1
   d71e4:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d71e6:	4422      	add	r2, r4
   d71e8:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d71ea:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d71ec:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d71ee:	4420      	add	r0, r4
   d71f0:	462a      	mov	r2, r5
   d71f2:	f002 f9f6 	bl	d95e2 <memcpy>
        selfLen_ += len;
   d71f6:	6a22      	ldr	r2, [r4, #32]
   d71f8:	442a      	add	r2, r5
   d71fa:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d71fc:	6a20      	ldr	r0, [r4, #32]
}
   d71fe:	b003      	add	sp, #12
   d7200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7204 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d7204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7206:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d7208:	4603      	mov	r3, r0
   d720a:	f100 021f 	add.w	r2, r0, #31
   d720e:	2000      	movs	r0, #0
   d7210:	f803 0b01 	strb.w	r0, [r3], #1
   d7214:	4293      	cmp	r3, r2
   d7216:	f04f 0100 	mov.w	r1, #0
   d721a:	d1f9      	bne.n	d7210 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d721c:	aa04      	add	r2, sp, #16
   d721e:	2306      	movs	r3, #6
   d7220:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7224:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7226:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7228:	9100      	str	r1, [sp, #0]
   d722a:	4620      	mov	r0, r4
   d722c:	4619      	mov	r1, r3
   d722e:	f7ff ffa2 	bl	d7176 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7232:	4620      	mov	r0, r4
   d7234:	b004      	add	sp, #16
   d7236:	bd10      	pop	{r4, pc}

000d7238 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d7238:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d723a:	4615      	mov	r5, r2
   d723c:	461c      	mov	r4, r3
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d723e:	460a      	mov	r2, r1
   d7240:	ab01      	add	r3, sp, #4
   d7242:	6a01      	ldr	r1, [r0, #32]
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d7244:	4606      	mov	r6, r0
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d7246:	f7ff ff7e 	bl	d7146 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
   d724a:	4603      	mov	r3, r0
    if (adsLen > 0) {
   d724c:	f030 0002 	bics.w	r0, r0, #2
   d7250:	d00c      	beq.n	d726c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
   d7252:	1e98      	subs	r0, r3, #2
   d7254:	4284      	cmp	r4, r0
   d7256:	bf28      	it	cs
   d7258:	4604      	movcs	r4, r0
        if ((adsLen - 2) > 0) {
            adsLen -= 2;
            len = std::min(len, adsLen);
            if (buf != nullptr) {
   d725a:	b135      	cbz	r5, d726a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x32>
                memcpy(buf, &selfData_[offset + 2], len);
   d725c:	9901      	ldr	r1, [sp, #4]
   d725e:	3102      	adds	r1, #2
   d7260:	4622      	mov	r2, r4
   d7262:	4431      	add	r1, r6
   d7264:	4628      	mov	r0, r5
   d7266:	f002 f9bc 	bl	d95e2 <memcpy>
            }
            return len;
   d726a:	4620      	mov	r0, r4
        }
    }
    return 0;
}
   d726c:	b002      	add	sp, #8
   d726e:	bd70      	pop	{r4, r5, r6, pc}

000d7270 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
    return found;
}

size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   d7270:	4613      	mov	r3, r2
   d7272:	460a      	mov	r2, r1
   d7274:	21ff      	movs	r1, #255	; 0xff
   d7276:	f7ff bfdf 	b.w	d7238 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000d727a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d727a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d727e:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7280:	b085      	sub	sp, #20
   d7282:	4606      	mov	r6, r0
   d7284:	4689      	mov	r9, r1
   d7286:	4617      	mov	r7, r2
   d7288:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d728a:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d728c:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7290:	6a31      	ldr	r1, [r6, #32]
   d7292:	428d      	cmp	r5, r1
   d7294:	d22a      	bcs.n	d72ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d7296:	ab03      	add	r3, sp, #12
   d7298:	464a      	mov	r2, r9
   d729a:	1b49      	subs	r1, r1, r5
   d729c:	1970      	adds	r0, r6, r5
   d729e:	f7ff ff52 	bl	d7146 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d72a2:	4683      	mov	fp, r0
   d72a4:	b310      	cbz	r0, d72ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d72a6:	4554      	cmp	r4, sl
   d72a8:	d220      	bcs.n	d72ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d72aa:	2804      	cmp	r0, #4
   d72ac:	9903      	ldr	r1, [sp, #12]
   d72ae:	d10c      	bne.n	d72ca <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d72b0:	4429      	add	r1, r5
   d72b2:	1872      	adds	r2, r6, r1
   d72b4:	1c63      	adds	r3, r4, #1
   d72b6:	78d1      	ldrb	r1, [r2, #3]
   d72b8:	7892      	ldrb	r2, [r2, #2]
   d72ba:	9301      	str	r3, [sp, #4]
   d72bc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d72c0:	fb08 7004 	mla	r0, r8, r4, r7
   d72c4:	f7ff fe96 	bl	d6ff4 <_ZN8particle7BleUuidaSEt>
   d72c8:	e00a      	b.n	d72e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d72ca:	2812      	cmp	r0, #18
   d72cc:	d10a      	bne.n	d72e4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d72ce:	3102      	adds	r1, #2
   d72d0:	4429      	add	r1, r5
   d72d2:	1c63      	adds	r3, r4, #1
   d72d4:	4431      	add	r1, r6
   d72d6:	fb08 7004 	mla	r0, r8, r4, r7
   d72da:	9301      	str	r3, [sp, #4]
   d72dc:	f7ff fe7d 	bl	d6fda <_ZN8particle7BleUuidaSEPKh>
   d72e0:	9b01      	ldr	r3, [sp, #4]
   d72e2:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d72e4:	9b03      	ldr	r3, [sp, #12]
   d72e6:	445b      	add	r3, fp
   d72e8:	441d      	add	r5, r3
   d72ea:	e7d1      	b.n	d7290 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d72ec:	4620      	mov	r0, r4
   d72ee:	b005      	add	sp, #20
   d72f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d72f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d72f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d72f8:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d72fa:	460d      	mov	r5, r1
   d72fc:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d72fe:	460a      	mov	r2, r1
   d7300:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7302:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7304:	f7ff ffb9 	bl	d727a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7308:	f04f 0814 	mov.w	r8, #20
   d730c:	1a33      	subs	r3, r6, r0
   d730e:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7312:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7314:	2103      	movs	r1, #3
   d7316:	4638      	mov	r0, r7
   d7318:	f7ff ffaf 	bl	d727a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d731c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d731e:	1b33      	subs	r3, r6, r4
   d7320:	fb08 5204 	mla	r2, r8, r4, r5
   d7324:	2106      	movs	r1, #6
   d7326:	4638      	mov	r0, r7
   d7328:	f7ff ffa7 	bl	d727a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d732c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d732e:	1b33      	subs	r3, r6, r4
   d7330:	fb08 5204 	mla	r2, r8, r4, r5
   d7334:	2107      	movs	r1, #7
   d7336:	4638      	mov	r0, r7
   d7338:	f7ff ff9f 	bl	d727a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d733c:	4420      	add	r0, r4
   d733e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d7344 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7344:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7346:	2500      	movs	r5, #0
   d7348:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d734c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d734e:	8043      	strh	r3, [r0, #2]
   d7350:	220e      	movs	r2, #14
   d7352:	4629      	mov	r1, r5
   d7354:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d7356:	7105      	strb	r5, [r0, #4]
   d7358:	3006      	adds	r0, #6
   d735a:	f002 f968 	bl	d962e <memset>
   d735e:	f104 0014 	add.w	r0, r4, #20
   d7362:	f7ff fdbf 	bl	d6ee4 <_ZN8particle7BleUuidC1Ev>
   d7366:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d736a:	f7ff fdbb 	bl	d6ee4 <_ZN8particle7BleUuidC1Ev>
   d736e:	4904      	ldr	r1, [pc, #16]	; (d7380 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7370:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7374:	f7ff fcd1 	bl	d6d1a <_ZN6StringC1EPK19__FlashStringHelper>
   d7378:	64e5      	str	r5, [r4, #76]	; 0x4c
   d737a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d737c:	4620      	mov	r0, r4
   d737e:	bd38      	pop	{r3, r4, r5, pc}
   d7380:	000da590 	.word	0x000da590

000d7384 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d7384:	b510      	push	{r4, lr}
   d7386:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7388:	69c2      	ldr	r2, [r0, #28]
   d738a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d738e:	4293      	cmp	r3, r2
   d7390:	4618      	mov	r0, r3
   d7392:	d006      	beq.n	d73a2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d7394:	6804      	ldr	r4, [r0, #0]
   d7396:	8824      	ldrh	r4, [r4, #0]
   d7398:	428c      	cmp	r4, r1
   d739a:	f103 0308 	add.w	r3, r3, #8
   d739e:	d1f6      	bne.n	d738e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d73a0:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d73a2:	2000      	movs	r0, #0
    }
   d73a4:	bd10      	pop	{r4, pc}
	...

000d73a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d73a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73ac:	4680      	mov	r8, r0
   d73ae:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d73b0:	460e      	mov	r6, r1
   d73b2:	b369      	cbz	r1, d7410 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d73b4:	b362      	cbz	r2, d7410 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d73b6:	2af4      	cmp	r2, #244	; 0xf4
   d73b8:	6805      	ldr	r5, [r0, #0]
   d73ba:	bf28      	it	cs
   d73bc:	22f4      	movcs	r2, #244	; 0xf4
   d73be:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d73c0:	782a      	ldrb	r2, [r5, #0]
   d73c2:	b1a2      	cbz	r2, d73ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d73c4:	792b      	ldrb	r3, [r5, #4]
   d73c6:	0798      	lsls	r0, r3, #30
   d73c8:	d507      	bpl.n	d73da <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d73ca:	2300      	movs	r3, #0
   d73cc:	4622      	mov	r2, r4
   d73ce:	89a8      	ldrh	r0, [r5, #12]
   d73d0:	f7ff f8e2 	bl	d6598 <hal_ble_gatt_server_set_characteristic_value>
   d73d4:	2800      	cmp	r0, #0
   d73d6:	da02      	bge.n	d73de <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d73d8:	e043      	b.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d73da:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d73de:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d73e2:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d73e4:	06da      	lsls	r2, r3, #27
   d73e6:	d518      	bpl.n	d741a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d73e8:	2f01      	cmp	r7, #1
   d73ea:	d123      	bne.n	d7434 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d73ec:	e015      	b.n	d741a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d73ee:	8868      	ldrh	r0, [r5, #2]
   d73f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d73f4:	4298      	cmp	r0, r3
   d73f6:	d00d      	beq.n	d7414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d73f8:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d73fa:	0759      	lsls	r1, r3, #29
   d73fc:	d523      	bpl.n	d7446 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d73fe:	2f01      	cmp	r7, #1
   d7400:	d021      	beq.n	d7446 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7402:	89a9      	ldrh	r1, [r5, #12]
   d7404:	9200      	str	r2, [sp, #0]
   d7406:	4623      	mov	r3, r4
   d7408:	4632      	mov	r2, r6
   d740a:	f7ff f8ed 	bl	d65e8 <hal_ble_gatt_client_write_without_response>
   d740e:	e028      	b.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7410:	4815      	ldr	r0, [pc, #84]	; (d7468 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d7412:	e026      	b.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d7414:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7418:	e023      	b.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d741a:	069a      	lsls	r2, r3, #26
   d741c:	d521      	bpl.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d741e:	2f02      	cmp	r7, #2
   d7420:	d01f      	beq.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7422:	89a8      	ldrh	r0, [r5, #12]
   d7424:	2300      	movs	r3, #0
   d7426:	4622      	mov	r2, r4
   d7428:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d742a:	b002      	add	sp, #8
   d742c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7430:	f7ff b920 	b.w	d6674 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7434:	89a8      	ldrh	r0, [r5, #12]
   d7436:	2300      	movs	r3, #0
   d7438:	4622      	mov	r2, r4
   d743a:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d743c:	b002      	add	sp, #8
   d743e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7442:	f7ff b90d 	b.w	d6660 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d7446:	071b      	lsls	r3, r3, #28
   d7448:	d501      	bpl.n	d744e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d744a:	2f02      	cmp	r7, #2
   d744c:	d102      	bne.n	d7454 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d744e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7452:	e006      	b.n	d7462 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7454:	2300      	movs	r3, #0
   d7456:	89a9      	ldrh	r1, [r5, #12]
   d7458:	9300      	str	r3, [sp, #0]
   d745a:	4632      	mov	r2, r6
   d745c:	4623      	mov	r3, r4
   d745e:	f7ff f8b9 	bl	d65d4 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7462:	b002      	add	sp, #8
   d7464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7468:	fffffef2 	.word	0xfffffef2

000d746c <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d746c:	b570      	push	{r4, r5, r6, lr}
   d746e:	6804      	ldr	r4, [r0, #0]
   d7470:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7472:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7474:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7476:	2900      	cmp	r1, #0
   d7478:	d12e      	bne.n	d74d8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d747a:	8862      	ldrh	r2, [r4, #2]
   d747c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7480:	429a      	cmp	r2, r3
   d7482:	d029      	beq.n	d74d8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d7484:	8a23      	ldrh	r3, [r4, #16]
   d7486:	b353      	cbz	r3, d74de <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d7488:	2518      	movs	r5, #24
   d748a:	462a      	mov	r2, r5
   d748c:	4668      	mov	r0, sp
   d748e:	f002 f8ce 	bl	d962e <memset>
    config.version = BLE_API_VERSION;
   d7492:	2301      	movs	r3, #1
   d7494:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d7498:	4b13      	ldr	r3, [pc, #76]	; (d74e8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d749a:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d749e:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d74a0:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d74a2:	8863      	ldrh	r3, [r4, #2]
   d74a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d74a8:	8a23      	ldrh	r3, [r4, #16]
   d74aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d74ae:	89a3      	ldrh	r3, [r4, #12]
   d74b0:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d74b4:	b15e      	cbz	r6, d74ce <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d74b6:	7923      	ldrb	r3, [r4, #4]
   d74b8:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d74ba:	bf44      	itt	mi
   d74bc:	2302      	movmi	r3, #2
   d74be:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d74c0:	7923      	ldrb	r3, [r4, #4]
   d74c2:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d74c4:	bf42      	ittt	mi
   d74c6:	9b05      	ldrmi	r3, [sp, #20]
   d74c8:	f043 0301 	orrmi.w	r3, r3, #1
   d74cc:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d74ce:	2100      	movs	r1, #0
   d74d0:	4668      	mov	r0, sp
   d74d2:	f7ff f8bb 	bl	d664c <hal_ble_gatt_client_configure_cccd>
   d74d6:	e004      	b.n	d74e2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d74d8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d74dc:	e001      	b.n	d74e2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d74de:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d74e2:	b006      	add	sp, #24
   d74e4:	bd70      	pop	{r4, r5, r6, pc}
   d74e6:	bf00      	nop
   d74e8:	000d76c5 	.word	0x000d76c5

000d74ec <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d74ec:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d74ee:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d74f0:	651a      	str	r2, [r3, #80]	; 0x50
   d74f2:	4770      	bx	lr

000d74f4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d74f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74f8:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d74fa:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d74fc:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d74fe:	9302      	str	r3, [sp, #8]
   d7500:	2500      	movs	r5, #0
   d7502:	4b2e      	ldr	r3, [pc, #184]	; (d75bc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d7504:	9300      	str	r3, [sp, #0]
   d7506:	aa02      	add	r2, sp, #8
   d7508:	462b      	mov	r3, r5
   d750a:	492d      	ldr	r1, [pc, #180]	; (d75c0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d750c:	9503      	str	r5, [sp, #12]
   d750e:	2001      	movs	r0, #1
   d7510:	f7ff f9b2 	bl	d6878 <log_message>
   d7514:	6833      	ldr	r3, [r6, #0]
   d7516:	68dc      	ldr	r4, [r3, #12]
   d7518:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d751a:	f04f 081c 	mov.w	r8, #28
   d751e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d7522:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d7524:	f1a4 0308 	sub.w	r3, r4, #8
   d7528:	429f      	cmp	r7, r3
   d752a:	6832      	ldr	r2, [r6, #0]
   d752c:	d017      	beq.n	d755e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d752e:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d7532:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7536:	8a9b      	ldrh	r3, [r3, #20]
   d7538:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d753c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7540:	8adb      	ldrh	r3, [r3, #22]
   d7542:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d7546:	8810      	ldrh	r0, [r2, #0]
   d7548:	9500      	str	r5, [sp, #0]
   d754a:	4633      	mov	r3, r6
   d754c:	4a1d      	ldr	r2, [pc, #116]	; (d75c4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d754e:	a902      	add	r1, sp, #8
   d7550:	f7ff f836 	bl	d65c0 <hal_ble_gatt_client_discover_characteristics>
   d7554:	2800      	cmp	r0, #0
   d7556:	f104 0408 	add.w	r4, r4, #8
   d755a:	dae3      	bge.n	d7524 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d755c:	e02a      	b.n	d75b4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d755e:	6994      	ldr	r4, [r2, #24]
   d7560:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d7562:	2700      	movs	r7, #0
   d7564:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d7568:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d756a:	f1a4 0308 	sub.w	r3, r4, #8
   d756e:	429d      	cmp	r5, r3
   d7570:	d01f      	beq.n	d75b2 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d7572:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7576:	89db      	ldrh	r3, [r3, #14]
   d7578:	b1cb      	cbz	r3, d75ae <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d757a:	2214      	movs	r2, #20
   d757c:	2100      	movs	r1, #0
   d757e:	a802      	add	r0, sp, #8
   d7580:	f002 f855 	bl	d962e <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d7584:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7588:	89d9      	ldrh	r1, [r3, #14]
   d758a:	6833      	ldr	r3, [r6, #0]
   d758c:	aa02      	add	r2, sp, #8
   d758e:	8818      	ldrh	r0, [r3, #0]
   d7590:	9700      	str	r7, [sp, #0]
   d7592:	2313      	movs	r3, #19
   d7594:	f7ff f832 	bl	d65fc <hal_ble_gatt_client_read>
                if (len > 0) {
   d7598:	b148      	cbz	r0, d75ae <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d759a:	ab0a      	add	r3, sp, #40	; 0x28
   d759c:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d759e:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d75a0:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d75a4:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d75a8:	303c      	adds	r0, #60	; 0x3c
   d75aa:	f7ff fbe3 	bl	d6d74 <_ZN6StringaSEPKc>
   d75ae:	3408      	adds	r4, #8
   d75b0:	e7db      	b.n	d756a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d75b2:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d75b4:	b00a      	add	sp, #40	; 0x28
   d75b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75ba:	bf00      	nop
   d75bc:	000da363 	.word	0x000da363
   d75c0:	000da33c 	.word	0x000da33c
   d75c4:	000d8251 	.word	0x000d8251

000d75c8 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d75c8:	6803      	ldr	r3, [r0, #0]
   d75ca:	8818      	ldrh	r0, [r3, #0]
}
   d75cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d75d0:	1ac0      	subs	r0, r0, r3
   d75d2:	bf18      	it	ne
   d75d4:	2001      	movne	r0, #1
   d75d6:	4770      	bx	lr

000d75d8 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d75d8:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d75da:	680b      	ldr	r3, [r1, #0]
   d75dc:	f8c2 3002 	str.w	r3, [r2, #2]
   d75e0:	684b      	ldr	r3, [r1, #4]
   d75e2:	f8c2 3006 	str.w	r3, [r2, #6]
   d75e6:	4770      	bx	lr

000d75e8 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d75e8:	b510      	push	{r4, lr}
    return impl()->address();
   d75ea:	680a      	ldr	r2, [r1, #0]
   d75ec:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d75f0:	6003      	str	r3, [r0, #0]
   d75f2:	6853      	ldr	r3, [r2, #4]
   d75f4:	6043      	str	r3, [r0, #4]
}
   d75f6:	bd10      	pop	{r4, pc}

000d75f8 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d75f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d75fa:	6802      	ldr	r2, [r0, #0]
   d75fc:	680b      	ldr	r3, [r1, #0]
   d75fe:	8812      	ldrh	r2, [r2, #0]
   d7600:	881b      	ldrh	r3, [r3, #0]
   d7602:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7604:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7606:	d10c      	bne.n	d7622 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7608:	4601      	mov	r1, r0
   d760a:	4668      	mov	r0, sp
   d760c:	f7ff ffec 	bl	d75e8 <_ZNK8particle13BlePeerDevice7addressEv>
   d7610:	4621      	mov	r1, r4
   d7612:	a802      	add	r0, sp, #8
   d7614:	f7ff ffe8 	bl	d75e8 <_ZNK8particle13BlePeerDevice7addressEv>
   d7618:	a902      	add	r1, sp, #8
   d761a:	4668      	mov	r0, sp
   d761c:	f7ff fc54 	bl	d6ec8 <_ZNK8particle10BleAddresseqERKS0_>
   d7620:	b900      	cbnz	r0, d7624 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d7622:	2000      	movs	r0, #0
}
   d7624:	b004      	add	sp, #16
   d7626:	bd10      	pop	{r4, pc}

000d7628 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7628:	b510      	push	{r4, lr}
   d762a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d762c:	2034      	movs	r0, #52	; 0x34
   d762e:	f7fc fd32 	bl	d4096 <_Znwj>
   d7632:	4601      	mov	r1, r0
   d7634:	b168      	cbz	r0, d7652 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7636:	2300      	movs	r3, #0
   d7638:	6003      	str	r3, [r0, #0]
   d763a:	6043      	str	r3, [r0, #4]
   d763c:	6083      	str	r3, [r0, #8]
   d763e:	60c3      	str	r3, [r0, #12]
   d7640:	6103      	str	r3, [r0, #16]
   d7642:	6143      	str	r3, [r0, #20]
   d7644:	6183      	str	r3, [r0, #24]
   d7646:	61c3      	str	r3, [r0, #28]
   d7648:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d764a:	6243      	str	r3, [r0, #36]	; 0x24
   d764c:	6283      	str	r3, [r0, #40]	; 0x28
   d764e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7650:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7652:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7654:	b919      	cbnz	r1, d765e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d7656:	4a0a      	ldr	r2, [pc, #40]	; (d7680 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7658:	200a      	movs	r0, #10
   d765a:	f7ff f905 	bl	d6868 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d765e:	2000      	movs	r0, #0
   d7660:	f7fe ff76 	bl	d6550 <hal_ble_stack_init>
   d7664:	b120      	cbz	r0, d7670 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d7666:	4a06      	ldr	r2, [pc, #24]	; (d7680 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7668:	2100      	movs	r1, #0
   d766a:	200a      	movs	r0, #10
   d766c:	f7ff f8fc 	bl	d6868 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d7670:	2200      	movs	r2, #0
   d7672:	6821      	ldr	r1, [r4, #0]
   d7674:	4803      	ldr	r0, [pc, #12]	; (d7684 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d7676:	f7fe ffdf 	bl	d6638 <hal_ble_set_callback_on_periph_link_events>
}
   d767a:	4620      	mov	r0, r4
   d767c:	bd10      	pop	{r4, pc}
   d767e:	bf00      	nop
   d7680:	000d6501 	.word	0x000d6501
   d7684:	000d7b7d 	.word	0x000d7b7d

000d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7688:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d768a:	4c0a      	ldr	r4, [pc, #40]	; (d76b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d768c:	6823      	ldr	r3, [r4, #0]
   d768e:	07db      	lsls	r3, r3, #31
   d7690:	d40e      	bmi.n	d76b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7692:	4620      	mov	r0, r4
   d7694:	f7fc fd05 	bl	d40a2 <__cxa_guard_acquire>
   d7698:	b150      	cbz	r0, d76b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d769a:	4807      	ldr	r0, [pc, #28]	; (d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d769c:	f7ff ffc4 	bl	d7628 <_ZN8particle14BleLocalDeviceC1Ev>
   d76a0:	4620      	mov	r0, r4
   d76a2:	f7fc fd03 	bl	d40ac <__cxa_guard_release>
   d76a6:	4a05      	ldr	r2, [pc, #20]	; (d76bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d76a8:	4905      	ldr	r1, [pc, #20]	; (d76c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d76aa:	4803      	ldr	r0, [pc, #12]	; (d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76ac:	f001 fd1a 	bl	d90e4 <__aeabi_atexit>
    return instance;
}
   d76b0:	4801      	ldr	r0, [pc, #4]	; (d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76b2:	bd10      	pop	{r4, pc}
   d76b4:	2003e360 	.word	0x2003e360
   d76b8:	2003e35c 	.word	0x2003e35c
   d76bc:	2003d694 	.word	0x2003d694
   d76c0:	000d786f 	.word	0x000d786f

000d76c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d76c4:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d76c6:	6803      	ldr	r3, [r0, #0]
   d76c8:	3b09      	subs	r3, #9
   d76ca:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d76cc:	b08a      	sub	sp, #40	; 0x28
   d76ce:	4604      	mov	r4, r0
   d76d0:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d76d2:	d819      	bhi.n	d7708 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d76d4:	f7ff ffd8 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d76d8:	88a1      	ldrh	r1, [r4, #4]
   d76da:	6800      	ldr	r0, [r0, #0]
   d76dc:	f7ff fe52 	bl	d7384 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d76e0:	4602      	mov	r2, r0
   d76e2:	b958      	cbnz	r0, d76fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d76e4:	2320      	movs	r3, #32
   d76e6:	9302      	str	r3, [sp, #8]
   d76e8:	4b08      	ldr	r3, [pc, #32]	; (d770c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d76ea:	9003      	str	r0, [sp, #12]
   d76ec:	9300      	str	r3, [sp, #0]
   d76ee:	aa02      	add	r2, sp, #8
   d76f0:	4603      	mov	r3, r0
   d76f2:	4907      	ldr	r1, [pc, #28]	; (d7710 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d76f4:	2032      	movs	r0, #50	; 0x32
   d76f6:	f7ff f8bf 	bl	d6878 <log_message>
   d76fa:	e005      	b.n	d7708 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d76fc:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d76fe:	b11d      	cbz	r5, d7708 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d7700:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d7702:	68e1      	ldr	r1, [r4, #12]
   d7704:	6920      	ldr	r0, [r4, #16]
   d7706:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7708:	b00a      	add	sp, #40	; 0x28
   d770a:	bd70      	pop	{r4, r5, r6, pc}
   d770c:	000da386 	.word	0x000da386
   d7710:	000da33c 	.word	0x000da33c

000d7714 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7714:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7716:	a801      	add	r0, sp, #4
   d7718:	f7ff fbb8 	bl	d6e8c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d771c:	2000      	movs	r0, #0
   d771e:	f7fe ff17 	bl	d6550 <hal_ble_stack_init>
   d7722:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d7724:	a801      	add	r0, sp, #4
   d7726:	f7ff fbbf 	bl	d6ea8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d772a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d772e:	b002      	add	sp, #8
   d7730:	bd10      	pop	{r4, pc}
	...

000d7734 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7734:	b530      	push	{r4, r5, lr}
   d7736:	b08b      	sub	sp, #44	; 0x2c
   d7738:	460d      	mov	r5, r1
    WiringBleLock lk;
   d773a:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d773c:	4614      	mov	r4, r2
    WiringBleLock lk;
   d773e:	f7ff fba5 	bl	d6e8c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d7742:	b1b5      	cbz	r5, d7772 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7744:	b1ac      	cbz	r4, d7772 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7746:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7748:	a902      	add	r1, sp, #8
   d774a:	480d      	ldr	r0, [pc, #52]	; (d7780 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d774c:	9406      	str	r4, [sp, #24]
   d774e:	9202      	str	r2, [sp, #8]
   d7750:	9203      	str	r2, [sp, #12]
   d7752:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d7754:	9207      	str	r2, [sp, #28]
   d7756:	9208      	str	r2, [sp, #32]
   d7758:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d775a:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d775c:	f7fe ff00 	bl	d6560 <hal_ble_gap_start_scan>
   d7760:	2800      	cmp	r0, #0
   d7762:	bfb8      	it	lt
   d7764:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7766:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d7768:	bfa8      	it	ge
   d776a:	9c07      	ldrge	r4, [sp, #28]
   d776c:	f7ff f940 	bl	d69f0 <free>
   d7770:	e000      	b.n	d7774 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7772:	4c04      	ldr	r4, [pc, #16]	; (d7784 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d7774:	a801      	add	r0, sp, #4
   d7776:	f7ff fb97 	bl	d6ea8 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d777a:	4620      	mov	r0, r4
   d777c:	b00b      	add	sp, #44	; 0x2c
   d777e:	bd30      	pop	{r4, r5, pc}
   d7780:	000d7ceb 	.word	0x000d7ceb
   d7784:	fffffef2 	.word	0xfffffef2

000d7788 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d7788:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d778a:	69d8      	ldr	r0, [r3, #28]
}
   d778c:	2800      	cmp	r0, #0
   d778e:	bfd4      	ite	le
   d7790:	2000      	movle	r0, #0
   d7792:	2001      	movgt	r0, #1
   d7794:	4770      	bx	lr

000d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7796:	680b      	ldr	r3, [r1, #0]
   d7798:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d779a:	b113      	cbz	r3, d77a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d779c:	685a      	ldr	r2, [r3, #4]
   d779e:	3201      	adds	r2, #1
   d77a0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d77a2:	4770      	bx	lr

000d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d77a4:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77a6:	f851 3b04 	ldr.w	r3, [r1], #4
   d77aa:	4604      	mov	r4, r0
   d77ac:	f840 3b04 	str.w	r3, [r0], #4
   d77b0:	f7ff fff1 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d77b4:	6823      	ldr	r3, [r4, #0]
   d77b6:	b90b      	cbnz	r3, d77bc <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d77b8:	f7ff fb38 	bl	d6e2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d77bc:	4620      	mov	r0, r4
   d77be:	bd10      	pop	{r4, pc}

000d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d77c0:	b510      	push	{r4, lr}
   d77c2:	f851 3b04 	ldr.w	r3, [r1], #4
   d77c6:	4604      	mov	r4, r0
   d77c8:	f840 3b04 	str.w	r3, [r0], #4
   d77cc:	f7ff ffe3 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d77d0:	4620      	mov	r0, r4
   d77d2:	bd10      	pop	{r4, pc}

000d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d77d4:	b510      	push	{r4, lr}
   d77d6:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d77d8:	6800      	ldr	r0, [r0, #0]
   d77da:	b128      	cbz	r0, d77e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d77dc:	6843      	ldr	r3, [r0, #4]
   d77de:	3b01      	subs	r3, #1
   d77e0:	6043      	str	r3, [r0, #4]
   d77e2:	b90b      	cbnz	r3, d77e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d77e4:	f7ff fb2c 	bl	d6e40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d77e8:	4620      	mov	r0, r4
   d77ea:	bd10      	pop	{r4, pc}

000d77ec <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d77ec:	b510      	push	{r4, lr}
   d77ee:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d77f0:	3004      	adds	r0, #4
   d77f2:	f7ff ffef 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d77f6:	4620      	mov	r0, r4
   d77f8:	bd10      	pop	{r4, pc}

000d77fa <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d77fa:	b510      	push	{r4, lr}
   d77fc:	4604      	mov	r4, r0
   d77fe:	3004      	adds	r0, #4
   d7800:	f7ff ffe8 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7804:	4620      	mov	r0, r4
   d7806:	bd10      	pop	{r4, pc}

000d7808 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7808:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d780a:	6804      	ldr	r4, [r0, #0]
   d780c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d780e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7810:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7814:	42a6      	cmp	r6, r4
   d7816:	d004      	beq.n	d7822 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7818:	1d20      	adds	r0, r4, #4
   d781a:	f7ff ffdb 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d781e:	3408      	adds	r4, #8
   d7820:	e7f8      	b.n	d7814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7822:	6828      	ldr	r0, [r5, #0]
   d7824:	f7ff f8e4 	bl	d69f0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7828:	4628      	mov	r0, r5
   d782a:	bd70      	pop	{r4, r5, r6, pc}

000d782c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d782c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d782e:	6804      	ldr	r4, [r0, #0]
   d7830:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7832:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7834:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7838:	42a6      	cmp	r6, r4
   d783a:	d004      	beq.n	d7846 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d783c:	1d20      	adds	r0, r4, #4
   d783e:	f7ff ffc9 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7842:	3408      	adds	r4, #8
   d7844:	e7f8      	b.n	d7838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7846:	6828      	ldr	r0, [r5, #0]
   d7848:	f7ff f8d2 	bl	d69f0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d784c:	4628      	mov	r0, r5
   d784e:	bd70      	pop	{r4, r5, r6, pc}

000d7850 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7850:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7852:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d7854:	f104 0018 	add.w	r0, r4, #24
   d7858:	f7ff ffe8 	bl	d782c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d785c:	f104 000c 	add.w	r0, r4, #12
   d7860:	f7ff ffd2 	bl	d7808 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d7864:	4620      	mov	r0, r4
   d7866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d786a:	f7fc bc16 	b.w	d409a <_ZdlPv>

000d786e <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d786e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7870:	6804      	ldr	r4, [r0, #0]
   d7872:	4607      	mov	r7, r0
   d7874:	b1c4      	cbz	r4, d78a8 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7876:	69a5      	ldr	r5, [r4, #24]
   d7878:	69e3      	ldr	r3, [r4, #28]
   d787a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d787e:	42ae      	cmp	r6, r5
   d7880:	d004      	beq.n	d788c <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7882:	1d28      	adds	r0, r5, #4
   d7884:	f7ff ffa6 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7888:	3508      	adds	r5, #8
   d788a:	e7f8      	b.n	d787e <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d788c:	69a0      	ldr	r0, [r4, #24]
   d788e:	f7ff f8af 	bl	d69f0 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d7892:	f104 000c 	add.w	r0, r4, #12
   d7896:	f7ff ffc9 	bl	d782c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d789a:	4620      	mov	r0, r4
   d789c:	f7ff ffb4 	bl	d7808 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d78a0:	2134      	movs	r1, #52	; 0x34
   d78a2:	4620      	mov	r0, r4
   d78a4:	f001 fc2c 	bl	d9100 <_ZdlPvj>
   d78a8:	4638      	mov	r0, r7
   d78aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78ac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d78ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78ae:	2500      	movs	r5, #0
   d78b0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78b2:	6045      	str	r5, [r0, #4]
   d78b4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78b6:	2024      	movs	r0, #36	; 0x24
   d78b8:	f7fc fbed 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78bc:	4604      	mov	r4, r0
   d78be:	b178      	cbz	r0, d78e0 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d78c0:	4603      	mov	r3, r0
   d78c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d78c6:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d78ca:	f8c0 5002 	str.w	r5, [r0, #2]
   d78ce:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d78d0:	7285      	strb	r5, [r0, #10]
   d78d2:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d78d4:	60c5      	str	r5, [r0, #12]
   d78d6:	6105      	str	r5, [r0, #16]
   d78d8:	6145      	str	r5, [r0, #20]
   d78da:	6185      	str	r5, [r0, #24]
   d78dc:	61c5      	str	r5, [r0, #28]
   d78de:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d78e0:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78e2:	2014      	movs	r0, #20
   d78e4:	9301      	str	r3, [sp, #4]
   d78e6:	f7fc fbd6 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78ea:	4603      	mov	r3, r0
   d78ec:	b128      	cbz	r0, d78fa <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78ee:	2201      	movs	r2, #1
   d78f0:	6042      	str	r2, [r0, #4]
   d78f2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d78f4:	4a08      	ldr	r2, [pc, #32]	; (d7918 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d78f6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d78f8:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d78fa:	a802      	add	r0, sp, #8
   d78fc:	6872      	ldr	r2, [r6, #4]
   d78fe:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d7902:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7904:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7906:	f7ff ff65 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d790a:	6833      	ldr	r3, [r6, #0]
   d790c:	b90b      	cbnz	r3, d7912 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d790e:	f7ff fa8d 	bl	d6e2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d7912:	4630      	mov	r0, r6
   d7914:	b002      	add	sp, #8
   d7916:	bd70      	pop	{r4, r5, r6, pc}
   d7918:	000da328 	.word	0x000da328

000d791c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d791c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d791e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d7920:	6803      	ldr	r3, [r0, #0]
   d7922:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7924:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d7926:	d00c      	beq.n	d7942 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d7928:	b114      	cbz	r4, d7930 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d792a:	6863      	ldr	r3, [r4, #4]
   d792c:	3301      	adds	r3, #1
   d792e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d7930:	6828      	ldr	r0, [r5, #0]
   d7932:	b128      	cbz	r0, d7940 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7934:	6843      	ldr	r3, [r0, #4]
   d7936:	3b01      	subs	r3, #1
   d7938:	6043      	str	r3, [r0, #4]
   d793a:	b90b      	cbnz	r3, d7940 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d793c:	f7ff fa80 	bl	d6e40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d7940:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d7942:	4628      	mov	r0, r5
   d7944:	bd38      	pop	{r3, r4, r5, pc}

000d7946 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d7946:	b510      	push	{r4, lr}
   d7948:	6802      	ldr	r2, [r0, #0]
   d794a:	680b      	ldr	r3, [r1, #0]
   d794c:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d794e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d7950:	b110      	cbz	r0, d7958 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d7952:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d7954:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d7956:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7958:	4620      	mov	r0, r4
   d795a:	f851 3b04 	ldr.w	r3, [r1], #4
   d795e:	f840 3b04 	str.w	r3, [r0], #4
   d7962:	f7ff ffdb 	bl	d791c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d7966:	4620      	mov	r0, r4
   d7968:	bd10      	pop	{r4, pc}

000d796a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d796a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d796e:	6803      	ldr	r3, [r0, #0]
   d7970:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7972:	69de      	ldr	r6, [r3, #28]
   d7974:	b087      	sub	sp, #28
   d7976:	460f      	mov	r7, r1
   d7978:	4690      	mov	r8, r2
   d797a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d797e:	42b4      	cmp	r4, r6
   d7980:	46a1      	mov	r9, r4
   d7982:	d011      	beq.n	d79a8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d7984:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d7988:	a801      	add	r0, sp, #4
   d798a:	3114      	adds	r1, #20
   d798c:	f7ff fade 	bl	d6f4c <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d7990:	4641      	mov	r1, r8
   d7992:	a801      	add	r0, sp, #4
   d7994:	f7ff fb46 	bl	d7024 <_ZNK8particle7BleUuideqERKS0_>
   d7998:	4605      	mov	r5, r0
   d799a:	2800      	cmp	r0, #0
   d799c:	d0ef      	beq.n	d797e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d799e:	4649      	mov	r1, r9
   d79a0:	4638      	mov	r0, r7
   d79a2:	f7ff ffd0 	bl	d7946 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d79a6:	e000      	b.n	d79aa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d79a8:	2500      	movs	r5, #0
}
   d79aa:	4628      	mov	r0, r5
   d79ac:	b007      	add	sp, #28
   d79ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d79b2 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d79b2:	b510      	push	{r4, lr}
   d79b4:	f851 3b04 	ldr.w	r3, [r1], #4
   d79b8:	4604      	mov	r4, r0
   d79ba:	f840 3b04 	str.w	r3, [r0], #4
   d79be:	f7ff ffad 	bl	d791c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d79c2:	4620      	mov	r0, r4
   d79c4:	bd10      	pop	{r4, pc}

000d79c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d79c6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d79c8:	b570      	push	{r4, r5, r6, lr}
   d79ca:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d79cc:	d91a      	bls.n	d7a04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d79ce:	4290      	cmp	r0, r2
   d79d0:	d219      	bcs.n	d7a06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d79d2:	f1a1 0608 	sub.w	r6, r1, #8
   d79d6:	1a51      	subs	r1, r2, r1
   d79d8:	3904      	subs	r1, #4
   d79da:	1f15      	subs	r5, r2, #4
   d79dc:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d79de:	1f2b      	subs	r3, r5, #4
   d79e0:	429e      	cmp	r6, r3
   d79e2:	d025      	beq.n	d7a30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d79e4:	2c04      	cmp	r4, #4
   d79e6:	d007      	beq.n	d79f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d79ec:	f844 3c04 	str.w	r3, [r4, #-4]
   d79f0:	4629      	mov	r1, r5
   d79f2:	4620      	mov	r0, r4
   d79f4:	f7ff fecf 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d79f8:	4628      	mov	r0, r5
   d79fa:	f7ff feeb 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79fe:	3d08      	subs	r5, #8
   d7a00:	3c08      	subs	r4, #8
   d7a02:	e7ec      	b.n	d79de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d7a04:	d014      	beq.n	d7a30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d7a06:	1d0c      	adds	r4, r1, #4
   d7a08:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d7a0a:	1f23      	subs	r3, r4, #4
   d7a0c:	429d      	cmp	r5, r3
   d7a0e:	d00f      	beq.n	d7a30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d7a10:	2e04      	cmp	r6, #4
   d7a12:	d007      	beq.n	d7a24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7a14:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d7a18:	f846 3c04 	str.w	r3, [r6, #-4]
   d7a1c:	4621      	mov	r1, r4
   d7a1e:	4630      	mov	r0, r6
   d7a20:	f7ff feb9 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a24:	4620      	mov	r0, r4
   d7a26:	f7ff fed5 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a2a:	3408      	adds	r4, #8
   d7a2c:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7a2e:	e7ec      	b.n	d7a0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d7a30:	bd70      	pop	{r4, r5, r6, pc}

000d7a32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d7a36:	6804      	ldr	r4, [r0, #0]
   d7a38:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a3a:	4605      	mov	r5, r0
   d7a3c:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7a3e:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a42:	42a7      	cmp	r7, r4
   d7a44:	d018      	beq.n	d7a78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d7a46:	4641      	mov	r1, r8
   d7a48:	4620      	mov	r0, r4
   d7a4a:	f7ff fdd5 	bl	d75f8 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7a4e:	4606      	mov	r6, r0
   d7a50:	b908      	cbnz	r0, d7a56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a52:	3408      	adds	r4, #8
   d7a54:	e7f5      	b.n	d7a42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d7a56:	b18c      	cbz	r4, d7a7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d7a58:	1d20      	adds	r0, r4, #4
   d7a5a:	f7ff febb 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7a5e:	682b      	ldr	r3, [r5, #0]
   d7a60:	686a      	ldr	r2, [r5, #4]
   d7a62:	f104 0108 	add.w	r1, r4, #8
   d7a66:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7a6a:	4620      	mov	r0, r4
   d7a6c:	f7ff ffab 	bl	d79c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7a70:	686b      	ldr	r3, [r5, #4]
   d7a72:	3b01      	subs	r3, #1
   d7a74:	606b      	str	r3, [r5, #4]
    return true;
   d7a76:	e002      	b.n	d7a7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7a78:	2600      	movs	r6, #0
   d7a7a:	e000      	b.n	d7a7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d7a7c:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d7a7e:	4630      	mov	r0, r6
   d7a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a84 <_ZNK8particle14BleLocalDevice10disconnectEv>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
   d7a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a88:	4680      	mov	r8, r0
   d7a8a:	b08a      	sub	sp, #40	; 0x28
    WiringBleLock lk;
   d7a8c:	4668      	mov	r0, sp
   d7a8e:	f7ff f9fd 	bl	d6e8c <_ZN8particle3ble13WiringBleLockC1Ev>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7a92:	f8d8 3000 	ldr.w	r3, [r8]
   d7a96:	699d      	ldr	r5, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7a98:	69de      	ldr	r6, [r3, #28]
   d7a9a:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    for (auto& p : impl()->peers()) {
   d7a9e:	42b5      	cmp	r5, r6
   d7aa0:	462f      	mov	r7, r5
   d7aa2:	d023      	beq.n	d7aec <_ZNK8particle14BleLocalDevice10disconnectEv+0x68>
        hal_ble_conn_info_t connInfo = {};
   d7aa4:	2224      	movs	r2, #36	; 0x24
   d7aa6:	2100      	movs	r1, #0
   d7aa8:	a801      	add	r0, sp, #4
   d7aaa:	f001 fdc0 	bl	d962e <memset>
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
   d7aae:	682b      	ldr	r3, [r5, #0]
   d7ab0:	2200      	movs	r2, #0
   d7ab2:	a901      	add	r1, sp, #4
   d7ab4:	8818      	ldrh	r0, [r3, #0]
   d7ab6:	f7fe fdb5 	bl	d6624 <hal_ble_gap_get_connection_info>
   d7aba:	2800      	cmp	r0, #0
   d7abc:	db14      	blt.n	d7ae8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d7abe:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7ac2:	2b01      	cmp	r3, #1
   d7ac4:	f105 0508 	add.w	r5, r5, #8
   d7ac8:	d1e9      	bne.n	d7a9e <_ZNK8particle14BleLocalDevice10disconnectEv+0x1a>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d7aca:	683b      	ldr	r3, [r7, #0]
   d7acc:	2100      	movs	r1, #0
   d7ace:	8818      	ldrh	r0, [r3, #0]
   d7ad0:	f7fe fd58 	bl	d6584 <hal_ble_gap_disconnect>
   d7ad4:	2800      	cmp	r0, #0
   d7ad6:	db07      	blt.n	d7ae8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d7ad8:	f8d8 0000 	ldr.w	r0, [r8]
    for (auto& p : impl()->peers()) {
        hal_ble_conn_info_t connInfo = {};
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
            impl()->peers().removeOne(p);
   d7adc:	4639      	mov	r1, r7
   d7ade:	3018      	adds	r0, #24
   d7ae0:	f7ff ffa7 	bl	d7a32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d7ae4:	2400      	movs	r4, #0
   d7ae6:	e003      	b.n	d7af0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
   d7ae8:	4604      	mov	r4, r0
   d7aea:	e001      	b.n	d7af0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
   d7aec:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
    WiringBleLock lk;
   d7af0:	4668      	mov	r0, sp
   d7af2:	f7ff f9d9 	bl	d6ea8 <_ZN8particle3ble13WiringBleLockD1Ev>
            impl()->peers().removeOne(p);
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d7af6:	4620      	mov	r0, r4
   d7af8:	b00a      	add	sp, #40	; 0x28
   d7afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7afe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7b00:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b02:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d7b06:	6847      	ldr	r7, [r0, #4]
   d7b08:	9300      	str	r3, [sp, #0]
   d7b0a:	a801      	add	r0, sp, #4
   d7b0c:	f7ff fe43 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b10:	6866      	ldr	r6, [r4, #4]
   d7b12:	68a3      	ldr	r3, [r4, #8]
   d7b14:	429e      	cmp	r6, r3
   d7b16:	db14      	blt.n	d7b42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d7b18:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7b1a:	2e00      	cmp	r6, #0
   d7b1c:	dd0b      	ble.n	d7b36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7b1e:	00f0      	lsls	r0, r6, #3
   d7b20:	f7fe ff5e 	bl	d69e0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7b24:	4605      	mov	r5, r0
   d7b26:	b318      	cbz	r0, d7b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d7b28:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7b2c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7b30:	f7ff ff49 	bl	d79c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7b34:	e000      	b.n	d7b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7b36:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7b38:	6820      	ldr	r0, [r4, #0]
   d7b3a:	f7fe ff59 	bl	d69f0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7b3e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7b40:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b42:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7b44:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b46:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d7b4a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d7b4e:	4629      	mov	r1, r5
   d7b50:	f105 0008 	add.w	r0, r5, #8
   d7b54:	f7ff ff37 	bl	d79c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7b58:	b135      	cbz	r5, d7b68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d7b5a:	9b00      	ldr	r3, [sp, #0]
   d7b5c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d7b60:	a901      	add	r1, sp, #4
   d7b62:	1d28      	adds	r0, r5, #4
   d7b64:	f7ff fe17 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d7b68:	6863      	ldr	r3, [r4, #4]
   d7b6a:	3301      	adds	r3, #1
   d7b6c:	6063      	str	r3, [r4, #4]
   d7b6e:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b70:	a801      	add	r0, sp, #4
   d7b72:	f7ff fe2f 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7b76:	4628      	mov	r0, r5
   d7b78:	b003      	add	sp, #12
   d7b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7b7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b80:	4604      	mov	r4, r0
   d7b82:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7b84:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7b86:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7b88:	f7ff f980 	bl	d6e8c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d7b8c:	6823      	ldr	r3, [r4, #0]
   d7b8e:	2b03      	cmp	r3, #3
   d7b90:	d002      	beq.n	d7b98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d7b92:	2b04      	cmp	r3, #4
   d7b94:	d042      	beq.n	d7c1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d7b96:	e087      	b.n	d7ca8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d7b98:	a804      	add	r0, sp, #16
   d7b9a:	f7ff fe87 	bl	d78ac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7b9e:	9b04      	ldr	r3, [sp, #16]
   d7ba0:	8922      	ldrh	r2, [r4, #8]
   d7ba2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7ba4:	6862      	ldr	r2, [r4, #4]
   d7ba6:	9904      	ldr	r1, [sp, #16]
   d7ba8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d7bac:	f8c1 3002 	str.w	r3, [r1, #2]
   d7bb0:	6853      	ldr	r3, [r2, #4]
   d7bb2:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7bb6:	a807      	add	r0, sp, #28
   d7bb8:	9b04      	ldr	r3, [sp, #16]
   d7bba:	9306      	str	r3, [sp, #24]
   d7bbc:	a905      	add	r1, sp, #20
   d7bbe:	f7ff fdea 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7bc2:	a906      	add	r1, sp, #24
   d7bc4:	f105 0018 	add.w	r0, r5, #24
   d7bc8:	f7ff ff99 	bl	d7afe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d7bcc:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7bce:	a807      	add	r0, sp, #28
   d7bd0:	f7ff fe00 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7bd4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7bd6:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7bd8:	b974      	cbnz	r4, d7bf8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d7bda:	4b36      	ldr	r3, [pc, #216]	; (d7cb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d7bdc:	9300      	str	r3, [sp, #0]
   d7bde:	aa06      	add	r2, sp, #24
   d7be0:	4623      	mov	r3, r4
   d7be2:	4935      	ldr	r1, [pc, #212]	; (d7cb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7be4:	9407      	str	r4, [sp, #28]
   d7be6:	2032      	movs	r0, #50	; 0x32
   d7be8:	f7fe fe46 	bl	d6878 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d7bec:	9b04      	ldr	r3, [sp, #16]
   d7bee:	4621      	mov	r1, r4
   d7bf0:	8818      	ldrh	r0, [r3, #0]
   d7bf2:	f7fe fcc7 	bl	d6584 <hal_ble_gap_disconnect>
   d7bf6:	e00d      	b.n	d7c14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d7bf8:	4a30      	ldr	r2, [pc, #192]	; (d7cbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d7bfa:	9200      	str	r2, [sp, #0]
   d7bfc:	2300      	movs	r3, #0
   d7bfe:	aa06      	add	r2, sp, #24
   d7c00:	492d      	ldr	r1, [pc, #180]	; (d7cb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7c02:	9307      	str	r3, [sp, #28]
   d7c04:	2001      	movs	r0, #1
   d7c06:	f7fe fe37 	bl	d6878 <log_message>
                if (impl->connectedCb_) {
   d7c0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d7c0c:	b113      	cbz	r3, d7c14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d7c0e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d7c10:	a804      	add	r0, sp, #16
   d7c12:	4798      	blx	r3
   d7c14:	a805      	add	r0, sp, #20
   d7c16:	f7ff fddd 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c1a:	e045      	b.n	d7ca8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7c1c:	8921      	ldrh	r1, [r4, #8]
   d7c1e:	4628      	mov	r0, r5
   d7c20:	f7ff fbb0 	bl	d7384 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7c24:	4607      	mov	r7, r0
   d7c26:	2800      	cmp	r0, #0
   d7c28:	d03e      	beq.n	d7ca8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d7c2a:	6804      	ldr	r4, [r0, #0]
   d7c2c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7c2e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7c34:	8022      	strh	r2, [r4, #0]
   d7c36:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d7c3a:	4299      	cmp	r1, r3
   d7c3c:	d003      	beq.n	d7c46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d7c3e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7c42:	8042      	strh	r2, [r0, #2]
   d7c44:	e7f9      	b.n	d7c3a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7c46:	68e6      	ldr	r6, [r4, #12]
   d7c48:	6923      	ldr	r3, [r4, #16]
   d7c4a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7c4e:	45b0      	cmp	r8, r6
   d7c50:	d004      	beq.n	d7c5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d7c52:	1d30      	adds	r0, r6, #4
   d7c54:	f7ff fdbe 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c58:	3608      	adds	r6, #8
   d7c5a:	e7f8      	b.n	d7c4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7c5c:	2300      	movs	r3, #0
   d7c5e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7c60:	69a6      	ldr	r6, [r4, #24]
   d7c62:	69e3      	ldr	r3, [r4, #28]
   d7c64:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7c68:	45b0      	cmp	r8, r6
   d7c6a:	d004      	beq.n	d7c76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d7c6c:	1d30      	adds	r0, r6, #4
   d7c6e:	f7ff fdb1 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c72:	3608      	adds	r6, #8
   d7c74:	e7f8      	b.n	d7c68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7c76:	2300      	movs	r3, #0
   d7c78:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d7c7a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d7c7c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d7c7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d7c80:	b113      	cbz	r3, d7c88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d7c82:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d7c84:	4638      	mov	r0, r7
   d7c86:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d7c88:	2320      	movs	r3, #32
   d7c8a:	4a0d      	ldr	r2, [pc, #52]	; (d7cc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d7c8c:	9306      	str	r3, [sp, #24]
   d7c8e:	9200      	str	r2, [sp, #0]
   d7c90:	2300      	movs	r3, #0
   d7c92:	4909      	ldr	r1, [pc, #36]	; (d7cb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7c94:	9307      	str	r3, [sp, #28]
   d7c96:	2001      	movs	r0, #1
   d7c98:	aa06      	add	r2, sp, #24
   d7c9a:	f7fe fded 	bl	d6878 <log_message>
                    impl->peers_.removeOne(*peer);
   d7c9e:	4639      	mov	r1, r7
   d7ca0:	f105 0018 	add.w	r0, r5, #24
   d7ca4:	f7ff fec5 	bl	d7a32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7ca8:	a803      	add	r0, sp, #12
   d7caa:	f7ff f8fd 	bl	d6ea8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d7cae:	b00e      	add	sp, #56	; 0x38
   d7cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7cb4:	000da39e 	.word	0x000da39e
   d7cb8:	000da33c 	.word	0x000da33c
   d7cbc:	000da3c4 	.word	0x000da3c4
   d7cc0:	000da3e1 	.word	0x000da3e1

000d7cc4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7cc4:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d7cc6:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7cc8:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d7cca:	dd06      	ble.n	d7cda <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7ccc:	2154      	movs	r1, #84	; 0x54
   d7cce:	4369      	muls	r1, r5
   d7cd0:	6800      	ldr	r0, [r0, #0]
   d7cd2:	f7fe fe95 	bl	d6a00 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7cd6:	b920      	cbnz	r0, d7ce2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d7cd8:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7cda:	6800      	ldr	r0, [r0, #0]
   d7cdc:	f7fe fe88 	bl	d69f0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7ce0:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7ce2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7ce4:	60a5      	str	r5, [r4, #8]
        return true;
   d7ce6:	2001      	movs	r0, #1
    }
   d7ce8:	bd38      	pop	{r3, r4, r5, pc}

000d7cea <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7cea:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7cec:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7cee:	b0c0      	sub	sp, #256	; 0x100
   d7cf0:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7cf2:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7cf4:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7cf6:	a801      	add	r0, sp, #4
   d7cf8:	2100      	movs	r1, #0
   d7cfa:	f001 fc98 	bl	d962e <memset>
   d7cfe:	a803      	add	r0, sp, #12
   d7d00:	f7ff fa80 	bl	d7204 <_ZN8particle18BleAdvertisingDataC1Ev>
   d7d04:	a80c      	add	r0, sp, #48	; 0x30
   d7d06:	f7ff fa7d 	bl	d7204 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7d0a:	462a      	mov	r2, r5
   d7d0c:	ab01      	add	r3, sp, #4
   d7d0e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d7d12:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7d14:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7d16:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7d18:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7d1a:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7d1c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7d20:	a80c      	add	r0, sp, #48	; 0x30
   d7d22:	f7ff fa00 	bl	d7126 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d7d26:	89aa      	ldrh	r2, [r5, #12]
   d7d28:	6869      	ldr	r1, [r5, #4]
   d7d2a:	a803      	add	r0, sp, #12
   d7d2c:	f7ff f9fb 	bl	d7126 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d7d30:	69a5      	ldr	r5, [r4, #24]
   d7d32:	b11d      	cbz	r5, d7d3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d7d34:	69e1      	ldr	r1, [r4, #28]
   d7d36:	a801      	add	r0, sp, #4
   d7d38:	47a8      	blx	r5
   d7d3a:	e03c      	b.n	d7db6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d7d3c:	68e0      	ldr	r0, [r4, #12]
   d7d3e:	b198      	cbz	r0, d7d68 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d7d40:	6963      	ldr	r3, [r4, #20]
   d7d42:	6922      	ldr	r2, [r4, #16]
   d7d44:	4293      	cmp	r3, r2
   d7d46:	d239      	bcs.n	d7dbc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d7d48:	1c5a      	adds	r2, r3, #1
   d7d4a:	6162      	str	r2, [r4, #20]
   d7d4c:	fb06 0003 	mla	r0, r6, r3, r0
   d7d50:	2251      	movs	r2, #81	; 0x51
   d7d52:	a901      	add	r1, sp, #4
   d7d54:	f001 fc45 	bl	d95e2 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d7d58:	6962      	ldr	r2, [r4, #20]
   d7d5a:	6923      	ldr	r3, [r4, #16]
   d7d5c:	429a      	cmp	r2, r3
   d7d5e:	d32d      	bcc.n	d7dbc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d7d60:	4628      	mov	r0, r5
   d7d62:	f7fe fc05 	bl	d6570 <hal_ble_gap_stop_scan>
   d7d66:	e029      	b.n	d7dbc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d7d68:	4632      	mov	r2, r6
   d7d6a:	a901      	add	r1, sp, #4
   d7d6c:	a816      	add	r0, sp, #88	; 0x58
   d7d6e:	f001 fc38 	bl	d95e2 <memcpy>
   d7d72:	4632      	mov	r2, r6
   d7d74:	a916      	add	r1, sp, #88	; 0x58
   d7d76:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7d78:	6865      	ldr	r5, [r4, #4]
   d7d7a:	f001 fc32 	bl	d95e2 <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d7e:	68a3      	ldr	r3, [r4, #8]
   d7d80:	429d      	cmp	r5, r3
   d7d82:	db04      	blt.n	d7d8e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d7d84:	1c69      	adds	r1, r5, #1
   d7d86:	4620      	mov	r0, r4
   d7d88:	f7ff ff9c 	bl	d7cc4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7d8c:	b1b0      	cbz	r0, d7dbc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7d8e:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7d90:	6822      	ldr	r2, [r4, #0]
   d7d92:	2654      	movs	r6, #84	; 0x54
   d7d94:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7d98:	fb06 2203 	mla	r2, r6, r3, r2
   d7d9c:	1b52      	subs	r2, r2, r5
   d7d9e:	4629      	mov	r1, r5
   d7da0:	19a8      	adds	r0, r5, r6
   d7da2:	f001 fc29 	bl	d95f8 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7da6:	4632      	mov	r2, r6
   d7da8:	a92b      	add	r1, sp, #172	; 0xac
   d7daa:	4628      	mov	r0, r5
   d7dac:	f001 fc19 	bl	d95e2 <memcpy>
    ++size_;
   d7db0:	6863      	ldr	r3, [r4, #4]
   d7db2:	3301      	adds	r3, #1
   d7db4:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d7db6:	6963      	ldr	r3, [r4, #20]
   d7db8:	3301      	adds	r3, #1
   d7dba:	6163      	str	r3, [r4, #20]
        }
    }
   d7dbc:	b040      	add	sp, #256	; 0x100
   d7dbe:	bd70      	pop	{r4, r5, r6, pc}

000d7dc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7dc0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7dc4:	4606      	mov	r6, r0
   d7dc6:	460c      	mov	r4, r1
   d7dc8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7dca:	d914      	bls.n	d7df6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7dcc:	4290      	cmp	r0, r2
   d7dce:	d213      	bcs.n	d7df8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7dd0:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7dd4:	1a6c      	subs	r4, r5, r1
   d7dd6:	f1a1 0708 	sub.w	r7, r1, #8
   d7dda:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7ddc:	42af      	cmp	r7, r5
   d7dde:	d018      	beq.n	d7e12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7de0:	b11c      	cbz	r4, d7dea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7de2:	4629      	mov	r1, r5
   d7de4:	4620      	mov	r0, r4
   d7de6:	f7ff fceb 	bl	d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7dea:	1d28      	adds	r0, r5, #4
   d7dec:	f7ff fcf2 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7df0:	3d08      	subs	r5, #8
   d7df2:	3c08      	subs	r4, #8
   d7df4:	e7f2      	b.n	d7ddc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7df6:	d00c      	beq.n	d7e12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7df8:	42ac      	cmp	r4, r5
   d7dfa:	d00a      	beq.n	d7e12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7dfc:	b11e      	cbz	r6, d7e06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7dfe:	4621      	mov	r1, r4
   d7e00:	4630      	mov	r0, r6
   d7e02:	f7ff fcdd 	bl	d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7e06:	1d20      	adds	r0, r4, #4
   d7e08:	f7ff fce4 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7e0c:	3408      	adds	r4, #8
   d7e0e:	3608      	adds	r6, #8
   d7e10:	e7f2      	b.n	d7df8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7e14:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7e16:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7e18:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7e1a:	dd0b      	ble.n	d7e34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7e1c:	00f0      	lsls	r0, r6, #3
   d7e1e:	f7fe fddf 	bl	d69e0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7e22:	4604      	mov	r4, r0
   d7e24:	b170      	cbz	r0, d7e44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7e26:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7e2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7e2e:	f7ff ffc7 	bl	d7dc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7e32:	e000      	b.n	d7e36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7e34:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7e36:	6828      	ldr	r0, [r5, #0]
   d7e38:	f7fe fdda 	bl	d69f0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7e3c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7e3e:	60ae      	str	r6, [r5, #8]
        return true;
   d7e40:	2001      	movs	r0, #1
   d7e42:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7e44:	bd70      	pop	{r4, r5, r6, pc}

000d7e46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e4a:	2300      	movs	r3, #0
   d7e4c:	6003      	str	r3, [r0, #0]
   d7e4e:	6043      	str	r3, [r0, #4]
   d7e50:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e52:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7e54:	6849      	ldr	r1, [r1, #4]
   d7e56:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e58:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7e5a:	dd13      	ble.n	d7e84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7e5c:	f7ff ffda 	bl	d7e14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7e60:	b180      	cbz	r0, d7e84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7e62:	6835      	ldr	r5, [r6, #0]
   d7e64:	6873      	ldr	r3, [r6, #4]
   d7e66:	6827      	ldr	r7, [r4, #0]
   d7e68:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7e6c:	4545      	cmp	r5, r8
   d7e6e:	d007      	beq.n	d7e80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7e70:	b11f      	cbz	r7, d7e7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7e72:	4629      	mov	r1, r5
   d7e74:	4638      	mov	r0, r7
   d7e76:	f7ff fca3 	bl	d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7e7a:	3508      	adds	r5, #8
   d7e7c:	3708      	adds	r7, #8
   d7e7e:	e7f5      	b.n	d7e6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7e80:	6873      	ldr	r3, [r6, #4]
   d7e82:	6063      	str	r3, [r4, #4]
    }
}
   d7e84:	4620      	mov	r0, r4
   d7e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7e8a <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7e8a:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7e8c:	680b      	ldr	r3, [r1, #0]
   d7e8e:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7e90:	4605      	mov	r5, r0
   d7e92:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7e94:	b933      	cbnz	r3, d7ea4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d7e96:	4608      	mov	r0, r1
   d7e98:	f7fe ffaa 	bl	d6df0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d7e9c:	b910      	cbnz	r0, d7ea4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d7e9e:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d7ea0:	2201      	movs	r2, #1
   d7ea2:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d7ea4:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d7ea6:	4628      	mov	r0, r5
   d7ea8:	310c      	adds	r1, #12
   d7eaa:	f7ff ffcc 	bl	d7e46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d7eae:	4628      	mov	r0, r5
   d7eb0:	bd38      	pop	{r3, r4, r5, pc}

000d7eb2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7eb4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7eb6:	6845      	ldr	r5, [r0, #4]
   d7eb8:	4668      	mov	r0, sp
   d7eba:	f7ff fc81 	bl	d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7ebe:	6861      	ldr	r1, [r4, #4]
   d7ec0:	68a3      	ldr	r3, [r4, #8]
   d7ec2:	4299      	cmp	r1, r3
   d7ec4:	db05      	blt.n	d7ed2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d7ec6:	3101      	adds	r1, #1
   d7ec8:	4620      	mov	r0, r4
   d7eca:	f7ff ffa3 	bl	d7e14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7ece:	4606      	mov	r6, r0
   d7ed0:	b198      	cbz	r0, d7efa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d7ed2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7ed4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7ed6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7eda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7ede:	4629      	mov	r1, r5
   d7ee0:	f105 0008 	add.w	r0, r5, #8
   d7ee4:	f7ff ff6c 	bl	d7dc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7ee8:	b11d      	cbz	r5, d7ef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d7eea:	4669      	mov	r1, sp
   d7eec:	4628      	mov	r0, r5
   d7eee:	f7ff fc67 	bl	d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7ef2:	6863      	ldr	r3, [r4, #4]
   d7ef4:	3301      	adds	r3, #1
   d7ef6:	6063      	str	r3, [r4, #4]
   d7ef8:	2601      	movs	r6, #1
   d7efa:	a801      	add	r0, sp, #4
   d7efc:	f7ff fc6a 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7f00:	4630      	mov	r0, r6
   d7f02:	b002      	add	sp, #8
   d7f04:	bd70      	pop	{r4, r5, r6, pc}

000d7f06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7f06:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f0a:	4606      	mov	r6, r0
   d7f0c:	460c      	mov	r4, r1
   d7f0e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7f10:	d914      	bls.n	d7f3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7f12:	4290      	cmp	r0, r2
   d7f14:	d213      	bcs.n	d7f3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7f16:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7f1a:	1a6c      	subs	r4, r5, r1
   d7f1c:	f1a1 0708 	sub.w	r7, r1, #8
   d7f20:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7f22:	42af      	cmp	r7, r5
   d7f24:	d018      	beq.n	d7f58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7f26:	b11c      	cbz	r4, d7f30 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7f28:	4629      	mov	r1, r5
   d7f2a:	4620      	mov	r0, r4
   d7f2c:	f7ff fc3a 	bl	d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7f30:	1d28      	adds	r0, r5, #4
   d7f32:	f7ff fc4f 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7f36:	3d08      	subs	r5, #8
   d7f38:	3c08      	subs	r4, #8
   d7f3a:	e7f2      	b.n	d7f22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7f3c:	d00c      	beq.n	d7f58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7f3e:	42ac      	cmp	r4, r5
   d7f40:	d00a      	beq.n	d7f58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7f42:	b11e      	cbz	r6, d7f4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7f44:	4621      	mov	r1, r4
   d7f46:	4630      	mov	r0, r6
   d7f48:	f7ff fc2c 	bl	d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7f4c:	1d20      	adds	r0, r4, #4
   d7f4e:	f7ff fc41 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7f52:	3408      	adds	r4, #8
   d7f54:	3608      	adds	r6, #8
   d7f56:	e7f2      	b.n	d7f3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7f5a:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7f5c:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7f5e:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7f60:	dd0b      	ble.n	d7f7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7f62:	00f0      	lsls	r0, r6, #3
   d7f64:	f7fe fd3c 	bl	d69e0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7f68:	4604      	mov	r4, r0
   d7f6a:	b170      	cbz	r0, d7f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7f6c:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7f70:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7f74:	f7ff ffc7 	bl	d7f06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7f78:	e000      	b.n	d7f7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7f7a:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7f7c:	6828      	ldr	r0, [r5, #0]
   d7f7e:	f7fe fd37 	bl	d69f0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7f82:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7f84:	60ae      	str	r6, [r5, #8]
        return true;
   d7f86:	2001      	movs	r0, #1
   d7f88:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7f8a:	bd70      	pop	{r4, r5, r6, pc}

000d7f8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7f90:	2300      	movs	r3, #0
   d7f92:	6003      	str	r3, [r0, #0]
   d7f94:	6043      	str	r3, [r0, #4]
   d7f96:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7f98:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7f9a:	6849      	ldr	r1, [r1, #4]
   d7f9c:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7f9e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7fa0:	dd13      	ble.n	d7fca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7fa2:	f7ff ffda 	bl	d7f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7fa6:	b180      	cbz	r0, d7fca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7fa8:	6835      	ldr	r5, [r6, #0]
   d7faa:	6873      	ldr	r3, [r6, #4]
   d7fac:	6827      	ldr	r7, [r4, #0]
   d7fae:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7fb2:	4545      	cmp	r5, r8
   d7fb4:	d007      	beq.n	d7fc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7fb6:	b11f      	cbz	r7, d7fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7fb8:	4629      	mov	r1, r5
   d7fba:	4638      	mov	r0, r7
   d7fbc:	f7ff fbf2 	bl	d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7fc0:	3508      	adds	r5, #8
   d7fc2:	3708      	adds	r7, #8
   d7fc4:	e7f5      	b.n	d7fb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7fc6:	6873      	ldr	r3, [r6, #4]
   d7fc8:	6063      	str	r3, [r4, #4]
    }
}
   d7fca:	4620      	mov	r0, r4
   d7fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7fd0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d7fd0:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7fd2:	680b      	ldr	r3, [r1, #0]
   d7fd4:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d7fd6:	b085      	sub	sp, #20
   d7fd8:	4605      	mov	r5, r0
   d7fda:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7fdc:	b92b      	cbnz	r3, d7fea <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d7fde:	a801      	add	r0, sp, #4
   d7fe0:	f7ff ff53 	bl	d7e8a <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d7fe4:	a801      	add	r0, sp, #4
   d7fe6:	f7ff fc0f 	bl	d7808 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d7fea:	6823      	ldr	r3, [r4, #0]
   d7fec:	7adb      	ldrb	r3, [r3, #11]
   d7fee:	b93b      	cbnz	r3, d8000 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d7ff0:	4621      	mov	r1, r4
   d7ff2:	a801      	add	r0, sp, #4
   d7ff4:	f7ff fa7e 	bl	d74f4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d7ff8:	b910      	cbnz	r0, d8000 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d7ffa:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d7ffc:	2201      	movs	r2, #1
   d7ffe:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8000:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d8002:	4628      	mov	r0, r5
   d8004:	3118      	adds	r1, #24
   d8006:	f7ff ffc1 	bl	d7f8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d800a:	4628      	mov	r0, r5
   d800c:	b005      	add	sp, #20
   d800e:	bd30      	pop	{r4, r5, pc}

000d8010 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d8010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8014:	460d      	mov	r5, r1
   d8016:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d8018:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d801c:	4617      	mov	r7, r2
   d801e:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d8020:	4642      	mov	r2, r8
   d8022:	2100      	movs	r1, #0
   d8024:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d8026:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d8028:	f001 fb01 	bl	d962e <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d802c:	6869      	ldr	r1, [r5, #4]
   d802e:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d8030:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d8032:	ab02      	add	r3, sp, #8
   d8034:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d8036:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d803a:	ab05      	add	r3, sp, #20
   d803c:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d8040:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d8044:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d8048:	f7ff fb1e 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d804c:	4b34      	ldr	r3, [pc, #208]	; (d8120 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d804e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d8050:	f7ff fb1a 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d8054:	2200      	movs	r2, #0
   d8056:	6803      	ldr	r3, [r0, #0]
   d8058:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d805a:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d805c:	a804      	add	r0, sp, #16
   d805e:	f7fe fad7 	bl	d6610 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d8062:	4607      	mov	r7, r0
   d8064:	b120      	cbz	r0, d8070 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d8066:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8068:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d806c:	801a      	strh	r2, [r3, #0]
        return ret;
   d806e:	e053      	b.n	d8118 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d8070:	4629      	mov	r1, r5
   d8072:	4630      	mov	r0, r6
   d8074:	f7ff fab0 	bl	d75d8 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8078:	f7ff fb06 	bl	d7688 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d807c:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d807e:	6803      	ldr	r3, [r0, #0]
   d8080:	ad12      	add	r5, sp, #72	; 0x48
   d8082:	f103 0818 	add.w	r8, r3, #24
   d8086:	f851 3b04 	ldr.w	r3, [r1], #4
   d808a:	f845 3d20 	str.w	r3, [r5, #-32]!
   d808e:	a80b      	add	r0, sp, #44	; 0x2c
   d8090:	f7ff fb81 	bl	d7796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8094:	4629      	mov	r1, r5
   d8096:	4640      	mov	r0, r8
   d8098:	f7ff fd31 	bl	d7afe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d809c:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d809e:	a80b      	add	r0, sp, #44	; 0x2c
   d80a0:	f7ff fb98 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d80a4:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d80a6:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d80a8:	f1b8 0f00 	cmp.w	r8, #0
   d80ac:	d114      	bne.n	d80d8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d80ae:	4b1d      	ldr	r3, [pc, #116]	; (d8124 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d80b0:	9300      	str	r3, [sp, #0]
   d80b2:	462a      	mov	r2, r5
   d80b4:	4643      	mov	r3, r8
   d80b6:	491c      	ldr	r1, [pc, #112]	; (d8128 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d80b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d80bc:	2032      	movs	r0, #50	; 0x32
   d80be:	f7fe fbdb 	bl	d6878 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d80c2:	6833      	ldr	r3, [r6, #0]
   d80c4:	4641      	mov	r1, r8
   d80c6:	8818      	ldrh	r0, [r3, #0]
   d80c8:	f7fe fa5c 	bl	d6584 <hal_ble_gap_disconnect>
   d80cc:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d80ce:	4817      	ldr	r0, [pc, #92]	; (d812c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d80d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d80d4:	801a      	strh	r2, [r3, #0]
   d80d6:	e01f      	b.n	d8118 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d80d8:	4b15      	ldr	r3, [pc, #84]	; (d8130 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d80da:	9300      	str	r3, [sp, #0]
   d80dc:	462a      	mov	r2, r5
   d80de:	463b      	mov	r3, r7
   d80e0:	4911      	ldr	r1, [pc, #68]	; (d8128 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d80e2:	970b      	str	r7, [sp, #44]	; 0x2c
   d80e4:	4648      	mov	r0, r9
   d80e6:	f7fe fbc7 	bl	d6878 <log_message>
    if (automatic) {
   d80ea:	b1a4      	cbz	r4, d8116 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d80ec:	4631      	mov	r1, r6
   d80ee:	4628      	mov	r0, r5
   d80f0:	f7ff ff6e 	bl	d7fd0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d80f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d80f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d80f8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d80fc:	42a6      	cmp	r6, r4
   d80fe:	d005      	beq.n	d810c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d8100:	4620      	mov	r0, r4
   d8102:	2101      	movs	r1, #1
   d8104:	f7ff f9b2 	bl	d746c <_ZNK8particle17BleCharacteristic9subscribeEb>
   d8108:	3408      	adds	r4, #8
   d810a:	e7f7      	b.n	d80fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d810c:	4628      	mov	r0, r5
   d810e:	f7ff fb8d 	bl	d782c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d8112:	2000      	movs	r0, #0
   d8114:	e000      	b.n	d8118 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d8116:	4620      	mov	r0, r4
}
   d8118:	b013      	add	sp, #76	; 0x4c
   d811a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d811e:	bf00      	nop
   d8120:	000d7b7d 	.word	0x000d7b7d
   d8124:	000da400 	.word	0x000da400
   d8128:	000da33c 	.word	0x000da33c
   d812c:	fffffefc 	.word	0xfffffefc
   d8130:	000da41c 	.word	0x000da41c

000d8134 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d8134:	b570      	push	{r4, r5, r6, lr}
   d8136:	4604      	mov	r4, r0
   d8138:	4615      	mov	r5, r2
   d813a:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d813c:	f7ff fbb6 	bl	d78ac <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d8140:	4633      	mov	r3, r6
   d8142:	2200      	movs	r2, #0
   d8144:	4629      	mov	r1, r5
   d8146:	4620      	mov	r0, r4
   d8148:	f7ff ff62 	bl	d8010 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d814c:	4620      	mov	r0, r4
   d814e:	bd70      	pop	{r4, r5, r6, pc}

000d8150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8150:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8152:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8154:	6845      	ldr	r5, [r0, #4]
   d8156:	4668      	mov	r0, sp
   d8158:	f7ff fb24 	bl	d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d815c:	6861      	ldr	r1, [r4, #4]
   d815e:	68a3      	ldr	r3, [r4, #8]
   d8160:	4299      	cmp	r1, r3
   d8162:	db05      	blt.n	d8170 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d8164:	3101      	adds	r1, #1
   d8166:	4620      	mov	r0, r4
   d8168:	f7ff fef7 	bl	d7f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d816c:	4606      	mov	r6, r0
   d816e:	b198      	cbz	r0, d8198 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d8170:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8172:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8174:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8178:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d817c:	4629      	mov	r1, r5
   d817e:	f105 0008 	add.w	r0, r5, #8
   d8182:	f7ff fec0 	bl	d7f06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8186:	b11d      	cbz	r5, d8190 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8188:	4669      	mov	r1, sp
   d818a:	4628      	mov	r0, r5
   d818c:	f7ff fb0a 	bl	d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d8190:	6863      	ldr	r3, [r4, #4]
   d8192:	3301      	adds	r3, #1
   d8194:	6063      	str	r3, [r4, #4]
   d8196:	2601      	movs	r6, #1
   d8198:	a801      	add	r0, sp, #4
   d819a:	f7ff fb1b 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d819e:	4630      	mov	r0, r6
   d81a0:	b002      	add	sp, #8
   d81a2:	bd70      	pop	{r4, r5, r6, pc}

000d81a4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d81a4:	b510      	push	{r4, lr}
   d81a6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d81a8:	6840      	ldr	r0, [r0, #4]
   d81aa:	b108      	cbz	r0, d81b0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d81ac:	f7fb ff75 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d81b0:	4620      	mov	r0, r4
   d81b2:	bd10      	pop	{r4, pc}

000d81b4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d81b4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d81b6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d81b8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d81ba:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d81be:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d81c2:	f7fe fd63 	bl	d6c8c <_ZN6StringD1Ev>
   d81c6:	4668      	mov	r0, sp
   d81c8:	f7ff ffec 	bl	d81a4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d81cc:	b003      	add	sp, #12
   d81ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d81d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d81d4:	b538      	push	{r3, r4, r5, lr}
   d81d6:	2300      	movs	r3, #0
   d81d8:	4604      	mov	r4, r0
   d81da:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d81dc:	2014      	movs	r0, #20
   d81de:	460d      	mov	r5, r1
   d81e0:	f7fb ff59 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d81e4:	b128      	cbz	r0, d81f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d81e6:	2301      	movs	r3, #1
   d81e8:	6043      	str	r3, [r0, #4]
   d81ea:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d81ec:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d81ee:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d81f0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d81f2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d81f4:	4620      	mov	r0, r4
   d81f6:	bd38      	pop	{r3, r4, r5, pc}
   d81f8:	000da2f0 	.word	0x000da2f0

000d81fc <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d81fc:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d81fe:	2500      	movs	r5, #0
   d8200:	b086      	sub	sp, #24
   d8202:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8204:	6045      	str	r5, [r0, #4]
   d8206:	4604      	mov	r4, r0
   d8208:	2054      	movs	r0, #84	; 0x54
   d820a:	f7fb ff44 	bl	d4096 <_Znwj>
   d820e:	f8cd d010 	str.w	sp, [sp, #16]
   d8212:	4606      	mov	r6, r0
   d8214:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8216:	b108      	cbz	r0, d821c <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d8218:	f7ff f894 	bl	d7344 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d821c:	4631      	mov	r1, r6
   d821e:	ab01      	add	r3, sp, #4
   d8220:	aa02      	add	r2, sp, #8
   d8222:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8224:	9505      	str	r5, [sp, #20]
   d8226:	f7ff ffd5 	bl	d81d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d822a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d822c:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d822e:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8230:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8232:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8234:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8236:	f7ff facd 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d823a:	a804      	add	r0, sp, #16
   d823c:	f7ff ffb2 	bl	d81a4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d8240:	6823      	ldr	r3, [r4, #0]
   d8242:	b90b      	cbnz	r3, d8248 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d8244:	f7fe fdf2 	bl	d6e2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d8248:	4620      	mov	r0, r4
   d824a:	b006      	add	sp, #24
   d824c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8250 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d8250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d8254:	f8df 8104 	ldr.w	r8, [pc, #260]	; d835c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d8258:	b08c      	sub	sp, #48	; 0x30
   d825a:	4605      	mov	r5, r0
   d825c:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d825e:	2600      	movs	r6, #0
   d8260:	682b      	ldr	r3, [r5, #0]
   d8262:	429e      	cmp	r6, r3
   d8264:	d275      	bcs.n	d8352 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d8266:	a802      	add	r0, sp, #8
   d8268:	f7ff ffc8 	bl	d81fc <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d826c:	9b02      	ldr	r3, [sp, #8]
   d826e:	892a      	ldrh	r2, [r5, #8]
   d8270:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d8272:	686b      	ldr	r3, [r5, #4]
   d8274:	9802      	ldr	r0, [sp, #8]
   d8276:	242a      	movs	r4, #42	; 0x2a
   d8278:	4374      	muls	r4, r6
   d827a:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d827c:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d827e:	7e5b      	ldrb	r3, [r3, #25]
   d8280:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d8284:	bf1e      	ittt	ne
   d8286:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d828a:	f043 0302 	orrne.w	r3, r3, #2
   d828e:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d8292:	686b      	ldr	r3, [r5, #4]
   d8294:	4423      	add	r3, r4
   d8296:	7e5b      	ldrb	r3, [r3, #25]
   d8298:	075b      	lsls	r3, r3, #29
   d829a:	bf42      	ittt	mi
   d829c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82a0:	f043 0304 	orrmi.w	r3, r3, #4
   d82a4:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d82a8:	686b      	ldr	r3, [r5, #4]
   d82aa:	4423      	add	r3, r4
   d82ac:	7e5b      	ldrb	r3, [r3, #25]
   d82ae:	0719      	lsls	r1, r3, #28
   d82b0:	bf42      	ittt	mi
   d82b2:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82b6:	f043 0308 	orrmi.w	r3, r3, #8
   d82ba:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d82be:	686b      	ldr	r3, [r5, #4]
   d82c0:	4423      	add	r3, r4
   d82c2:	7e5b      	ldrb	r3, [r3, #25]
   d82c4:	06da      	lsls	r2, r3, #27
   d82c6:	bf42      	ittt	mi
   d82c8:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82cc:	f043 0310 	orrmi.w	r3, r3, #16
   d82d0:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d82d4:	686b      	ldr	r3, [r5, #4]
   d82d6:	4423      	add	r3, r4
   d82d8:	7e5b      	ldrb	r3, [r3, #25]
   d82da:	069b      	lsls	r3, r3, #26
   d82dc:	bf42      	ittt	mi
   d82de:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d82e2:	f043 0320 	orrmi.w	r3, r3, #32
   d82e6:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d82ea:	6869      	ldr	r1, [r5, #4]
   d82ec:	4421      	add	r1, r4
   d82ee:	3104      	adds	r1, #4
   d82f0:	f7fe fe8c 	bl	d700c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d82f4:	686a      	ldr	r2, [r5, #4]
   d82f6:	9b02      	ldr	r3, [sp, #8]
   d82f8:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d82fa:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d82fc:	8be2      	ldrh	r2, [r4, #30]
   d82fe:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d8300:	8c22      	ldrh	r2, [r4, #32]
   d8302:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d8304:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d8306:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d8308:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d830a:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d830c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d830e:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d8310:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d8312:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8314:	6838      	ldr	r0, [r7, #0]
   d8316:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d831a:	a804      	add	r0, sp, #16
   d831c:	f7ff fa42 	bl	d77a4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8320:	4620      	mov	r0, r4
   d8322:	a904      	add	r1, sp, #16
   d8324:	f7ff ff14 	bl	d8150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d8328:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d832a:	a805      	add	r0, sp, #20
   d832c:	f7ff fa52 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8330:	b954      	cbnz	r4, d8348 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d8332:	2320      	movs	r3, #32
   d8334:	9304      	str	r3, [sp, #16]
   d8336:	f8cd 8000 	str.w	r8, [sp]
   d833a:	4623      	mov	r3, r4
   d833c:	aa04      	add	r2, sp, #16
   d833e:	4906      	ldr	r1, [pc, #24]	; (d8358 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d8340:	9405      	str	r4, [sp, #20]
   d8342:	2032      	movs	r0, #50	; 0x32
   d8344:	f7fe fa98 	bl	d6878 <log_message>
   d8348:	a803      	add	r0, sp, #12
   d834a:	f7ff fa43 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d834e:	3601      	adds	r6, #1
   d8350:	e786      	b.n	d8260 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d8352:	b00c      	add	sp, #48	; 0x30
   d8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8358:	000da33c 	.word	0x000da33c
   d835c:	000da439 	.word	0x000da439

000d8360 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8360:	b510      	push	{r4, lr}
   d8362:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8364:	6840      	ldr	r0, [r0, #4]
   d8366:	b108      	cbz	r0, d836c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8368:	f7fb fe97 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d836c:	4620      	mov	r0, r4
   d836e:	bd10      	pop	{r4, pc}

000d8370 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8370:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8372:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8374:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8376:	e88d 0009 	stmia.w	sp, {r0, r3}
   d837a:	4668      	mov	r0, sp
   d837c:	f7ff fff0 	bl	d8360 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8380:	b003      	add	sp, #12
   d8382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8388:	b538      	push	{r3, r4, r5, lr}
   d838a:	2300      	movs	r3, #0
   d838c:	4604      	mov	r4, r0
   d838e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8390:	2014      	movs	r0, #20
   d8392:	460d      	mov	r5, r1
   d8394:	f7fb fe7f 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8398:	b128      	cbz	r0, d83a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d839a:	2301      	movs	r3, #1
   d839c:	6043      	str	r3, [r0, #4]
   d839e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d83a0:	4b02      	ldr	r3, [pc, #8]	; (d83ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d83a2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d83a4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d83a6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d83a8:	4620      	mov	r0, r4
   d83aa:	bd38      	pop	{r3, r4, r5, pc}
   d83ac:	000da30c 	.word	0x000da30c

000d83b0 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d83b0:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d83b2:	2500      	movs	r5, #0
   d83b4:	b086      	sub	sp, #24
   d83b6:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d83b8:	6045      	str	r5, [r0, #4]
   d83ba:	4604      	mov	r4, r0
   d83bc:	2018      	movs	r0, #24
   d83be:	f7fb fe6a 	bl	d4096 <_Znwj>
   d83c2:	f8cd d010 	str.w	sp, [sp, #16]
   d83c6:	4606      	mov	r6, r0
   d83c8:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d83ca:	b118      	cbz	r0, d83d4 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d83cc:	f7fe fd8a 	bl	d6ee4 <_ZN8particle7BleUuidC1Ev>
   d83d0:	82b5      	strh	r5, [r6, #20]
   d83d2:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d83d4:	4631      	mov	r1, r6
   d83d6:	ab01      	add	r3, sp, #4
   d83d8:	aa02      	add	r2, sp, #8
   d83da:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d83dc:	9505      	str	r5, [sp, #20]
   d83de:	f7ff ffd3 	bl	d8388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d83e2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d83e4:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d83e6:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d83e8:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d83ea:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d83ec:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d83ee:	f7ff f9f1 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d83f2:	a804      	add	r0, sp, #16
   d83f4:	f7ff ffb4 	bl	d8360 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d83f8:	6823      	ldr	r3, [r4, #0]
   d83fa:	b90b      	cbnz	r3, d8400 <_ZN8particle10BleServiceC1Ev+0x50>
   d83fc:	f7fe fd16 	bl	d6e2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8400:	4620      	mov	r0, r4
   d8402:	b006      	add	sp, #24
   d8404:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8408 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d840c:	f8df 8080 	ldr.w	r8, [pc, #128]	; d8490 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8410:	b08c      	sub	sp, #48	; 0x30
   d8412:	4606      	mov	r6, r0
   d8414:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8416:	2500      	movs	r5, #0
   d8418:	6833      	ldr	r3, [r6, #0]
   d841a:	429d      	cmp	r5, r3
   d841c:	d233      	bcs.n	d8486 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d841e:	a802      	add	r0, sp, #8
   d8420:	f7ff ffc6 	bl	d83b0 <_ZN8particle10BleServiceC1Ev>
   d8424:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d8426:	6871      	ldr	r1, [r6, #4]
   d8428:	9802      	ldr	r0, [sp, #8]
   d842a:	436c      	muls	r4, r5
   d842c:	4421      	add	r1, r4
   d842e:	3104      	adds	r1, #4
   d8430:	f7fe fdec 	bl	d700c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d8434:	6873      	ldr	r3, [r6, #4]
   d8436:	9a02      	ldr	r2, [sp, #8]
   d8438:	4423      	add	r3, r4
   d843a:	a902      	add	r1, sp, #8
   d843c:	8b1b      	ldrh	r3, [r3, #24]
   d843e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d8440:	6873      	ldr	r3, [r6, #4]
   d8442:	441c      	add	r4, r3
   d8444:	8b63      	ldrh	r3, [r4, #26]
   d8446:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d8448:	6838      	ldr	r0, [r7, #0]
   d844a:	f100 040c 	add.w	r4, r0, #12
   d844e:	a804      	add	r0, sp, #16
   d8450:	f7ff f9b6 	bl	d77c0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d8454:	4620      	mov	r0, r4
   d8456:	a904      	add	r1, sp, #16
   d8458:	f7ff fd2b 	bl	d7eb2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d845c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d845e:	a805      	add	r0, sp, #20
   d8460:	f7ff f9b8 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8464:	b954      	cbnz	r4, d847c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d8466:	2320      	movs	r3, #32
   d8468:	9304      	str	r3, [sp, #16]
   d846a:	f8cd 8000 	str.w	r8, [sp]
   d846e:	4623      	mov	r3, r4
   d8470:	aa04      	add	r2, sp, #16
   d8472:	4906      	ldr	r1, [pc, #24]	; (d848c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d8474:	9405      	str	r4, [sp, #20]
   d8476:	2032      	movs	r0, #50	; 0x32
   d8478:	f7fe f9fe 	bl	d6878 <log_message>
   d847c:	a803      	add	r0, sp, #12
   d847e:	f7ff f9a9 	bl	d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8482:	3501      	adds	r5, #1
   d8484:	e7c8      	b.n	d8418 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d8486:	b00c      	add	sp, #48	; 0x30
   d8488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d848c:	000da33c 	.word	0x000da33c
   d8490:	000da465 	.word	0x000da465

000d8494 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8494:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8496:	4c06      	ldr	r4, [pc, #24]	; (d84b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8498:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d849a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d849c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d849e:	f7fe f90b 	bl	d66b8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d84a2:	4620      	mov	r0, r4
   d84a4:	4a03      	ldr	r2, [pc, #12]	; (d84b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d84a6:	4904      	ldr	r1, [pc, #16]	; (d84b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d84a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d84ac:	f000 be1a 	b.w	d90e4 <__aeabi_atexit>
   d84b0:	2003e364 	.word	0x2003e364
   d84b4:	2003d694 	.word	0x2003d694
   d84b8:	000d6ddf 	.word	0x000d6ddf

000d84bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d84bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d84be:	4606      	mov	r6, r0
   d84c0:	460d      	mov	r5, r1
   d84c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d84c4:	2400      	movs	r4, #0
  while (size--) {
   d84c6:	42bd      	cmp	r5, r7
   d84c8:	d00c      	beq.n	d84e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d84ca:	6833      	ldr	r3, [r6, #0]
   d84cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d84d0:	689b      	ldr	r3, [r3, #8]
   d84d2:	4630      	mov	r0, r6
   d84d4:	4798      	blx	r3
     if (chunk>=0)
   d84d6:	2800      	cmp	r0, #0
   d84d8:	db01      	blt.n	d84de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d84da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d84dc:	e7f3      	b.n	d84c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d84de:	2c00      	cmp	r4, #0
   d84e0:	bf08      	it	eq
   d84e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d84e4:	4620      	mov	r0, r4
   d84e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d84e8 <_ZN5Print5printEPKc>:
   d84e8:	b508      	push	{r3, lr}
   d84ea:	f7fd fadb 	bl	d5aa4 <_ZN5Print5writeEPKc>
   d84ee:	bd08      	pop	{r3, pc}

000d84f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d84f0:	6803      	ldr	r3, [r0, #0]
   d84f2:	689b      	ldr	r3, [r3, #8]
   d84f4:	4718      	bx	r3

000d84f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d84f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d84f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d84fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d84fc:	f7ff fff8 	bl	d84f0 <_ZN5Print5printEc>
  n += print('\n');
   d8500:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8502:	4604      	mov	r4, r0
  n += print('\n');
   d8504:	4628      	mov	r0, r5
   d8506:	f7ff fff3 	bl	d84f0 <_ZN5Print5printEc>
  return n;
}
   d850a:	4420      	add	r0, r4
   d850c:	bd38      	pop	{r3, r4, r5, pc}

000d850e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d850e:	b538      	push	{r3, r4, r5, lr}
   d8510:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8512:	f7fd fac7 	bl	d5aa4 <_ZN5Print5writeEPKc>
   d8516:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8518:	4628      	mov	r0, r5
   d851a:	f7ff ffec 	bl	d84f6 <_ZN5Print7printlnEv>
  return n;
}
   d851e:	4420      	add	r0, r4
   d8520:	bd38      	pop	{r3, r4, r5, pc}

000d8522 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8522:	b530      	push	{r4, r5, lr}
   d8524:	b08b      	sub	sp, #44	; 0x2c
   d8526:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8528:	2100      	movs	r1, #0
   d852a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d852e:	2a01      	cmp	r2, #1
   d8530:	bf98      	it	ls
   d8532:	220a      	movls	r2, #10
   d8534:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8538:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d853c:	fb05 3312 	mls	r3, r5, r2, r3
   d8540:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8544:	2b09      	cmp	r3, #9
   d8546:	bf94      	ite	ls
   d8548:	3330      	addls	r3, #48	; 0x30
   d854a:	3337      	addhi	r3, #55	; 0x37
   d854c:	b2db      	uxtb	r3, r3
   d854e:	4621      	mov	r1, r4
   d8550:	f804 3901 	strb.w	r3, [r4], #-1
   d8554:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8556:	2d00      	cmp	r5, #0
   d8558:	d1ee      	bne.n	d8538 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d855a:	f7fd faa3 	bl	d5aa4 <_ZN5Print5writeEPKc>
}
   d855e:	b00b      	add	sp, #44	; 0x2c
   d8560:	bd30      	pop	{r4, r5, pc}

000d8562 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8562:	b40c      	push	{r2, r3}
   d8564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8568:	b087      	sub	sp, #28
   d856a:	af00      	add	r7, sp, #0
   d856c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8570:	4605      	mov	r5, r0
   d8572:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8576:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8578:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d857a:	4623      	mov	r3, r4
   d857c:	464a      	mov	r2, r9
   d857e:	2114      	movs	r1, #20
   d8580:	1d38      	adds	r0, r7, #4
   d8582:	f7fe fa55 	bl	d6a30 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8586:	2813      	cmp	r0, #19
   d8588:	d805      	bhi.n	d8596 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d858a:	1d39      	adds	r1, r7, #4
   d858c:	4628      	mov	r0, r5
   d858e:	f7fd fa89 	bl	d5aa4 <_ZN5Print5writeEPKc>
   d8592:	4604      	mov	r4, r0
   d8594:	e013      	b.n	d85be <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8596:	f100 0308 	add.w	r3, r0, #8
   d859a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d859e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d85a0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d85a4:	1c41      	adds	r1, r0, #1
   d85a6:	4623      	mov	r3, r4
   d85a8:	464a      	mov	r2, r9
   d85aa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d85ac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d85ae:	f7fe fa3f 	bl	d6a30 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d85b2:	4669      	mov	r1, sp
   d85b4:	4628      	mov	r0, r5
   d85b6:	f7fd fa75 	bl	d5aa4 <_ZN5Print5writeEPKc>
   d85ba:	4604      	mov	r4, r0
   d85bc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d85be:	b11e      	cbz	r6, d85c8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d85c0:	4628      	mov	r0, r5
   d85c2:	f7ff ff98 	bl	d84f6 <_ZN5Print7printlnEv>
   d85c6:	4404      	add	r4, r0
    return n;
}
   d85c8:	4620      	mov	r0, r4
   d85ca:	371c      	adds	r7, #28
   d85cc:	46bd      	mov	sp, r7
   d85ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d85d2:	b002      	add	sp, #8
   d85d4:	4770      	bx	lr
	...

000d85d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d85d8:	4b01      	ldr	r3, [pc, #4]	; (d85e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d85da:	4a02      	ldr	r2, [pc, #8]	; (d85e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d85dc:	601a      	str	r2, [r3, #0]
   d85de:	4770      	bx	lr
   d85e0:	2003e368 	.word	0x2003e368
   d85e4:	000da55f 	.word	0x000da55f

000d85e8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d85e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d85ea:	4b14      	ldr	r3, [pc, #80]	; (d863c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d85ec:	4f14      	ldr	r7, [pc, #80]	; (d8640 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d85ee:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d85f0:	4b14      	ldr	r3, [pc, #80]	; (d8644 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d85f2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d85f4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d85f6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d85f8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d85fa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d85fc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d85fe:	d01b      	beq.n	d8638 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d8600:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d8602:	ad01      	add	r5, sp, #4
   d8604:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8608:	f000 fee4 	bl	d93d4 <localtime>
	calendar_time->tm_year += 1900;
   d860c:	6943      	ldr	r3, [r0, #20]
   d860e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8612:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8614:	4604      	mov	r4, r0
   d8616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d861a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d861c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d861e:	f8d4 e000 	ldr.w	lr, [r4]
   d8622:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8626:	ad01      	add	r5, sp, #4
   d8628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d862a:	4c07      	ldr	r4, [pc, #28]	; (d8648 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d862c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d862e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8632:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8634:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8638:	b00b      	add	sp, #44	; 0x2c
   d863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d863c:	2003e39c 	.word	0x2003e39c
   d8640:	2003e398 	.word	0x2003e398
   d8644:	2003e394 	.word	0x2003e394
   d8648:	2003e36c 	.word	0x2003e36c

000d864c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d864c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d864e:	2000      	movs	r0, #0
   d8650:	f7fe f9b6 	bl	d69c0 <spark_sync_time_pending>
   d8654:	b128      	cbz	r0, d8662 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8656:	f7fe f9a3 	bl	d69a0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d865a:	f080 0001 	eor.w	r0, r0, #1
   d865e:	b2c0      	uxtb	r0, r0
   d8660:	bd08      	pop	{r3, pc}
   d8662:	2001      	movs	r0, #1
    }
   d8664:	bd08      	pop	{r3, pc}
	...

000d8668 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d8668:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d866a:	f7ff ffbd 	bl	d85e8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d866e:	4b02      	ldr	r3, [pc, #8]	; (d8678 <_ZN9TimeClass5monthEl+0x10>)
   d8670:	6918      	ldr	r0, [r3, #16]
}
   d8672:	3001      	adds	r0, #1
   d8674:	bd08      	pop	{r3, pc}
   d8676:	bf00      	nop
   d8678:	2003e36c 	.word	0x2003e36c

000d867c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d867c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d867e:	2000      	movs	r0, #0
   d8680:	f7fd ff5e 	bl	d6540 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8684:	4604      	mov	r4, r0
   d8686:	b968      	cbnz	r0, d86a4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8688:	f7fe f8fe 	bl	d6888 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d868c:	2801      	cmp	r0, #1
   d868e:	d10b      	bne.n	d86a8 <_ZN9TimeClass7isValidEv+0x2c>
   d8690:	4620      	mov	r0, r4
   d8692:	f7fe f911 	bl	d68b8 <system_thread_get_state>
   d8696:	b938      	cbnz	r0, d86a8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8698:	f7ff ffd8 	bl	d864c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d869c:	b930      	cbnz	r0, d86ac <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d869e:	f7fe f977 	bl	d6990 <spark_process>
   d86a2:	e7f9      	b.n	d8698 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d86a4:	2001      	movs	r0, #1
   d86a6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d86a8:	2000      	movs	r0, #0
   d86aa:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d86ac:	f7ff ffce 	bl	d864c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d86b0:	2000      	movs	r0, #0
   d86b2:	f7fd ff45 	bl	d6540 <HAL_RTC_Time_Is_Valid>
   d86b6:	3000      	adds	r0, #0
   d86b8:	bf18      	it	ne
   d86ba:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d86bc:	bd10      	pop	{r4, pc}

000d86be <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d86be:	b508      	push	{r3, lr}
    (void)isValid();
   d86c0:	f7ff ffdc 	bl	d867c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d86c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d86c8:	f7fd bf32 	b.w	d6530 <HAL_RTC_Get_UnixTime>

000d86cc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d86cc:	b508      	push	{r3, lr}
	return hour(now());
   d86ce:	f7ff fff6 	bl	d86be <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d86d2:	f7ff ff89 	bl	d85e8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d86d6:	4b01      	ldr	r3, [pc, #4]	; (d86dc <_ZN9TimeClass4hourEv+0x10>)
   d86d8:	6898      	ldr	r0, [r3, #8]
   d86da:	bd08      	pop	{r3, pc}
   d86dc:	2003e36c 	.word	0x2003e36c

000d86e0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d86e0:	b508      	push	{r3, lr}
	return minute(now());
   d86e2:	f7ff ffec 	bl	d86be <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d86e6:	f7ff ff7f 	bl	d85e8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d86ea:	4b01      	ldr	r3, [pc, #4]	; (d86f0 <_ZN9TimeClass6minuteEv+0x10>)
   d86ec:	6858      	ldr	r0, [r3, #4]
   d86ee:	bd08      	pop	{r3, pc}
   d86f0:	2003e36c 	.word	0x2003e36c

000d86f4 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d86f4:	b508      	push	{r3, lr}
	return second(now());
   d86f6:	f7ff ffe2 	bl	d86be <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d86fa:	f7ff ff75 	bl	d85e8 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d86fe:	4b01      	ldr	r3, [pc, #4]	; (d8704 <_ZN9TimeClass6secondEv+0x10>)
   d8700:	6818      	ldr	r0, [r3, #0]
   d8702:	bd08      	pop	{r3, pc}
   d8704:	2003e36c 	.word	0x2003e36c

000d8708 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d8708:	b508      	push	{r3, lr}
	return day(now());
   d870a:	f7ff ffd8 	bl	d86be <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d870e:	f7ff ff6b 	bl	d85e8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d8712:	4b01      	ldr	r3, [pc, #4]	; (d8718 <_ZN9TimeClass3dayEv+0x10>)
   d8714:	68d8      	ldr	r0, [r3, #12]
   d8716:	bd08      	pop	{r3, pc}
   d8718:	2003e36c 	.word	0x2003e36c

000d871c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d871c:	b508      	push	{r3, lr}
	return month(now());
   d871e:	f7ff ffce 	bl	d86be <_ZN9TimeClass3nowEv>
}
   d8722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d8726:	f7ff bf9f 	b.w	d8668 <_ZN9TimeClass5monthEl>
	...

000d872c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d872c:	b508      	push	{r3, lr}
	return year(now());
   d872e:	f7ff ffc6 	bl	d86be <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8732:	f7ff ff59 	bl	d85e8 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d8736:	4b01      	ldr	r3, [pc, #4]	; (d873c <_ZN9TimeClass4yearEv+0x10>)
   d8738:	6958      	ldr	r0, [r3, #20]
   d873a:	bd08      	pop	{r3, pc}
   d873c:	2003e36c 	.word	0x2003e36c

000d8740 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8740:	4b02      	ldr	r3, [pc, #8]	; (d874c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8742:	681a      	ldr	r2, [r3, #0]
   d8744:	4b02      	ldr	r3, [pc, #8]	; (d8750 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8746:	601a      	str	r2, [r3, #0]
   d8748:	4770      	bx	lr
   d874a:	bf00      	nop
   d874c:	2003d5dc 	.word	0x2003d5dc
   d8750:	2003e390 	.word	0x2003e390

000d8754 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8754:	2100      	movs	r1, #0
   d8756:	f7fe b8a7 	b.w	d68a8 <system_delay_ms>

000d875a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d875a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d875c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d875e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d8760:	b113      	cbz	r3, d8768 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8762:	2203      	movs	r2, #3
   d8764:	4601      	mov	r1, r0
   d8766:	4798      	blx	r3
    }
   d8768:	4620      	mov	r0, r4
   d876a:	bd10      	pop	{r4, pc}

000d876c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d876c:	b510      	push	{r4, lr}
   d876e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8770:	f7ff fff3 	bl	d875a <_ZNSt14_Function_baseD1Ev>
   d8774:	4620      	mov	r0, r4
   d8776:	bd10      	pop	{r4, pc}

000d8778 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8778:	4803      	ldr	r0, [pc, #12]	; (d8788 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d877a:	4a04      	ldr	r2, [pc, #16]	; (d878c <_GLOBAL__sub_I_RGB+0x14>)
   d877c:	4904      	ldr	r1, [pc, #16]	; (d8790 <_GLOBAL__sub_I_RGB+0x18>)
   d877e:	2300      	movs	r3, #0
   d8780:	6083      	str	r3, [r0, #8]
   d8782:	f000 bcaf 	b.w	d90e4 <__aeabi_atexit>
   d8786:	bf00      	nop
   d8788:	2003e3a0 	.word	0x2003e3a0
   d878c:	2003d694 	.word	0x2003d694
   d8790:	000d876d 	.word	0x000d876d

000d8794 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8794:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8796:	4b0c      	ldr	r3, [pc, #48]	; (d87c8 <serialEventRun+0x34>)
   d8798:	b133      	cbz	r3, d87a8 <serialEventRun+0x14>
   d879a:	f000 f957 	bl	d8a4c <_Z16_fetch_usbserialv>
   d879e:	6803      	ldr	r3, [r0, #0]
   d87a0:	691b      	ldr	r3, [r3, #16]
   d87a2:	4798      	blx	r3
   d87a4:	2800      	cmp	r0, #0
   d87a6:	dc09      	bgt.n	d87bc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d87a8:	4b08      	ldr	r3, [pc, #32]	; (d87cc <serialEventRun+0x38>)
   d87aa:	b163      	cbz	r3, d87c6 <serialEventRun+0x32>
   d87ac:	f000 fa1c 	bl	d8be8 <_Z22__fetch_global_Serial1v>
   d87b0:	6803      	ldr	r3, [r0, #0]
   d87b2:	691b      	ldr	r3, [r3, #16]
   d87b4:	4798      	blx	r3
   d87b6:	2800      	cmp	r0, #0
   d87b8:	dc03      	bgt.n	d87c2 <serialEventRun+0x2e>
   d87ba:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d87bc:	f3af 8000 	nop.w
   d87c0:	e7f2      	b.n	d87a8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d87c2:	f3af 8000 	nop.w
   d87c6:	bd08      	pop	{r3, pc}
	...

000d87d0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d87d0:	b508      	push	{r3, lr}
	serialEventRun();
   d87d2:	f7ff ffdf 	bl	d8794 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d87d6:	f7fd fea3 	bl	d6520 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d87da:	4b01      	ldr	r3, [pc, #4]	; (d87e0 <_post_loop+0x10>)
   d87dc:	6018      	str	r0, [r3, #0]
   d87de:	bd08      	pop	{r3, pc}
   d87e0:	2003e708 	.word	0x2003e708

000d87e4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d87e4:	4802      	ldr	r0, [pc, #8]	; (d87f0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d87e6:	4a03      	ldr	r2, [pc, #12]	; (d87f4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d87e8:	4903      	ldr	r1, [pc, #12]	; (d87f8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d87ea:	1a12      	subs	r2, r2, r0
   d87ec:	f000 bef9 	b.w	d95e2 <memcpy>
   d87f0:	2003f400 	.word	0x2003f400
   d87f4:	2003f404 	.word	0x2003f404
   d87f8:	000da9b0 	.word	0x000da9b0

000d87fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d87fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d87fe:	2300      	movs	r3, #0
   d8800:	9300      	str	r3, [sp, #0]
   d8802:	461a      	mov	r2, r3
   d8804:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8808:	f7fe f868 	bl	d68dc <system_ctrl_set_result>
}
   d880c:	b003      	add	sp, #12
   d880e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8814 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8814:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8816:	8843      	ldrh	r3, [r0, #2]
   d8818:	2b0a      	cmp	r3, #10
   d881a:	d008      	beq.n	d882e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d881c:	2b50      	cmp	r3, #80	; 0x50
   d881e:	d109      	bne.n	d8834 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8820:	4b09      	ldr	r3, [pc, #36]	; (d8848 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8822:	681b      	ldr	r3, [r3, #0]
   d8824:	b13b      	cbz	r3, d8836 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8826:	b003      	add	sp, #12
   d8828:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d882c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d882e:	f7ff ffe5 	bl	d87fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8832:	e006      	b.n	d8842 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8834:	2300      	movs	r3, #0
   d8836:	9300      	str	r3, [sp, #0]
   d8838:	461a      	mov	r2, r3
   d883a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d883e:	f7fe f84d 	bl	d68dc <system_ctrl_set_result>
        break;
    }
}
   d8842:	b003      	add	sp, #12
   d8844:	f85d fb04 	ldr.w	pc, [sp], #4
   d8848:	2003e3b0 	.word	0x2003e3b0

000d884c <module_user_init_hook>:

void module_user_init_hook()
{
   d884c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d884e:	4c10      	ldr	r4, [pc, #64]	; (d8890 <module_user_init_hook+0x44>)
   d8850:	4d10      	ldr	r5, [pc, #64]	; (d8894 <module_user_init_hook+0x48>)
   d8852:	6823      	ldr	r3, [r4, #0]
   d8854:	42ab      	cmp	r3, r5
   d8856:	4b10      	ldr	r3, [pc, #64]	; (d8898 <module_user_init_hook+0x4c>)
   d8858:	bf0c      	ite	eq
   d885a:	2201      	moveq	r2, #1
   d885c:	2200      	movne	r2, #0
   d885e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8860:	d002      	beq.n	d8868 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8862:	f7ff ffbf 	bl	d87e4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8866:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8868:	f7fd fe42 	bl	d64f0 <HAL_RNG_GetRandomNumber>
   d886c:	4604      	mov	r4, r0
    srand(seed);
   d886e:	f000 fee7 	bl	d9640 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8872:	4b0a      	ldr	r3, [pc, #40]	; (d889c <module_user_init_hook+0x50>)
   d8874:	b113      	cbz	r3, d887c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8876:	4620      	mov	r0, r4
   d8878:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d887c:	2100      	movs	r1, #0
   d887e:	4807      	ldr	r0, [pc, #28]	; (d889c <module_user_init_hook+0x50>)
   d8880:	f7fe f8a6 	bl	d69d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8884:	2100      	movs	r1, #0
   d8886:	4806      	ldr	r0, [pc, #24]	; (d88a0 <module_user_init_hook+0x54>)
}
   d8888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d888c:	f7fe b81c 	b.w	d68c8 <system_ctrl_set_app_request_handler>
   d8890:	2003f400 	.word	0x2003f400
   d8894:	9a271c1e 	.word	0x9a271c1e
   d8898:	2003e3b4 	.word	0x2003e3b4
   d889c:	00000000 	.word	0x00000000
   d88a0:	000d8815 	.word	0x000d8815

000d88a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d88a4:	4770      	bx	lr

000d88a6 <_ZN9IPAddressD0Ev>:
   d88a6:	b510      	push	{r4, lr}
   d88a8:	2118      	movs	r1, #24
   d88aa:	4604      	mov	r4, r0
   d88ac:	f000 fc28 	bl	d9100 <_ZdlPvj>
   d88b0:	4620      	mov	r0, r4
   d88b2:	bd10      	pop	{r4, pc}

000d88b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d88b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d88b6:	7d03      	ldrb	r3, [r0, #20]
   d88b8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d88ba:	b08d      	sub	sp, #52	; 0x34
   d88bc:	460e      	mov	r6, r1
   d88be:	f100 0704 	add.w	r7, r0, #4
   d88c2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d88c6:	d002      	beq.n	d88ce <_ZNK9IPAddress7printToER5Print+0x1a>
   d88c8:	f100 0508 	add.w	r5, r0, #8
   d88cc:	e018      	b.n	d8900 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d88ce:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d88d0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d88d2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d88d6:	232f      	movs	r3, #47	; 0x2f
   d88d8:	462a      	mov	r2, r5
   d88da:	200a      	movs	r0, #10
   d88dc:	f7fd ff0c 	bl	d66f8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d88e0:	4628      	mov	r0, r5
   d88e2:	f000 fef6 	bl	d96d2 <strlen>
   d88e6:	6833      	ldr	r3, [r6, #0]
   d88e8:	4602      	mov	r2, r0
   d88ea:	68db      	ldr	r3, [r3, #12]
   d88ec:	4629      	mov	r1, r5
   d88ee:	4630      	mov	r0, r6
   d88f0:	4798      	blx	r3
   d88f2:	e00f      	b.n	d8914 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d88f4:	b124      	cbz	r4, d8900 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d88f6:	212e      	movs	r1, #46	; 0x2e
   d88f8:	4630      	mov	r0, r6
   d88fa:	f7ff fdf9 	bl	d84f0 <_ZN5Print5printEc>
   d88fe:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8900:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8904:	220a      	movs	r2, #10
   d8906:	4630      	mov	r0, r6
   d8908:	f7ff fe0b 	bl	d8522 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d890c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d890e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8910:	d1f0      	bne.n	d88f4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8912:	4620      	mov	r0, r4
    }
    return n;
}
   d8914:	b00d      	add	sp, #52	; 0x34
   d8916:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8918 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8918:	b510      	push	{r4, lr}
   d891a:	4b05      	ldr	r3, [pc, #20]	; (d8930 <_ZN9IPAddressC1Ev+0x18>)
   d891c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d891e:	2211      	movs	r2, #17
   d8920:	f840 3b04 	str.w	r3, [r0], #4
   d8924:	2100      	movs	r1, #0
   d8926:	f000 fe82 	bl	d962e <memset>
{
    clear();
}
   d892a:	4620      	mov	r0, r4
   d892c:	bd10      	pop	{r4, pc}
   d892e:	bf00      	nop
   d8930:	000da5fc 	.word	0x000da5fc

000d8934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8934:	4603      	mov	r3, r0
   d8936:	4a07      	ldr	r2, [pc, #28]	; (d8954 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8938:	b510      	push	{r4, lr}
   d893a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d893e:	f101 0210 	add.w	r2, r1, #16
   d8942:	f851 4b04 	ldr.w	r4, [r1], #4
   d8946:	f843 4b04 	str.w	r4, [r3], #4
   d894a:	4291      	cmp	r1, r2
   d894c:	d1f9      	bne.n	d8942 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d894e:	780a      	ldrb	r2, [r1, #0]
   d8950:	701a      	strb	r2, [r3, #0]
}
   d8952:	bd10      	pop	{r4, pc}
   d8954:	000da5fc 	.word	0x000da5fc

000d8958 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8958:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d895a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d895e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8962:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8966:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d896a:	2304      	movs	r3, #4
   d896c:	6041      	str	r1, [r0, #4]
   d896e:	7503      	strb	r3, [r0, #20]
   d8970:	bd10      	pop	{r4, pc}

000d8972 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8972:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8974:	780d      	ldrb	r5, [r1, #0]
   d8976:	788b      	ldrb	r3, [r1, #2]
   d8978:	784a      	ldrb	r2, [r1, #1]
   d897a:	78c9      	ldrb	r1, [r1, #3]
   d897c:	9100      	str	r1, [sp, #0]
   d897e:	4629      	mov	r1, r5
   d8980:	f7ff ffea 	bl	d8958 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8984:	b003      	add	sp, #12
   d8986:	bd30      	pop	{r4, r5, pc}

000d8988 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8988:	7441      	strb	r1, [r0, #17]
   d898a:	4770      	bx	lr

000d898c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d898c:	4770      	bx	lr

000d898e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d898e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8990:	2100      	movs	r1, #0
   d8992:	7c00      	ldrb	r0, [r0, #16]
   d8994:	f7fd ff50 	bl	d6838 <HAL_USB_USART_Receive_Data>
}
   d8998:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d899c:	bf28      	it	cs
   d899e:	f04f 30ff 	movcs.w	r0, #4294967295
   d89a2:	bd08      	pop	{r3, pc}

000d89a4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d89a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d89a6:	2101      	movs	r1, #1
   d89a8:	7c00      	ldrb	r0, [r0, #16]
   d89aa:	f7fd ff45 	bl	d6838 <HAL_USB_USART_Receive_Data>
}
   d89ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89b2:	bf28      	it	cs
   d89b4:	f04f 30ff 	movcs.w	r0, #4294967295
   d89b8:	bd08      	pop	{r3, pc}

000d89ba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d89ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d89bc:	7c00      	ldrb	r0, [r0, #16]
   d89be:	f7fd ff33 	bl	d6828 <HAL_USB_USART_Available_Data_For_Write>
}
   d89c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89c6:	bd08      	pop	{r3, pc}

000d89c8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d89c8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d89ca:	7c00      	ldrb	r0, [r0, #16]
   d89cc:	f7fd ff24 	bl	d6818 <HAL_USB_USART_Available_Data>
}
   d89d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89d4:	bd08      	pop	{r3, pc}

000d89d6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d89d6:	7c00      	ldrb	r0, [r0, #16]
   d89d8:	f7fd bf3e 	b.w	d6858 <HAL_USB_USART_Flush_Data>

000d89dc <_ZN9USBSerialD0Ev>:
   d89dc:	b510      	push	{r4, lr}
   d89de:	2114      	movs	r1, #20
   d89e0:	4604      	mov	r4, r0
   d89e2:	f000 fb8d 	bl	d9100 <_ZdlPvj>
   d89e6:	4620      	mov	r0, r4
   d89e8:	bd10      	pop	{r4, pc}

000d89ea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d89ea:	b538      	push	{r3, r4, r5, lr}
   d89ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d89ee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d89f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d89f2:	f7fd ff19 	bl	d6828 <HAL_USB_USART_Available_Data_For_Write>
   d89f6:	2800      	cmp	r0, #0
   d89f8:	dc01      	bgt.n	d89fe <_ZN9USBSerial5writeEh+0x14>
   d89fa:	7c60      	ldrb	r0, [r4, #17]
   d89fc:	b128      	cbz	r0, d8a0a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d89fe:	4629      	mov	r1, r5
   d8a00:	7c20      	ldrb	r0, [r4, #16]
   d8a02:	f7fd ff21 	bl	d6848 <HAL_USB_USART_Send_Data>
   d8a06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8a0a:	bd38      	pop	{r3, r4, r5, pc}

000d8a0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8a0c:	b510      	push	{r4, lr}
   d8a0e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8a10:	2300      	movs	r3, #0
   d8a12:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8a18:	60a3      	str	r3, [r4, #8]
   d8a1a:	4b05      	ldr	r3, [pc, #20]	; (d8a30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8a1c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8a1e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8a20:	4608      	mov	r0, r1
{
  _serial = serial;
   d8a22:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8a24:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8a26:	4611      	mov	r1, r2
   d8a28:	f7fd fee6 	bl	d67f8 <HAL_USB_USART_Init>
}
   d8a2c:	4620      	mov	r0, r4
   d8a2e:	bd10      	pop	{r4, pc}
   d8a30:	000da610 	.word	0x000da610

000d8a34 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8a34:	2200      	movs	r2, #0
   d8a36:	7c00      	ldrb	r0, [r0, #16]
   d8a38:	f7fd bee6 	b.w	d6808 <HAL_USB_USART_Begin>

000d8a3c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8a3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8a3e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8a40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8a42:	2100      	movs	r1, #0
   d8a44:	f000 fdf3 	bl	d962e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8a48:	4620      	mov	r0, r4
   d8a4a:	bd10      	pop	{r4, pc}

000d8a4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8a4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8a4e:	4d0e      	ldr	r5, [pc, #56]	; (d8a88 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8a50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8a52:	a801      	add	r0, sp, #4
   d8a54:	f7ff fff2 	bl	d8a3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8a58:	6829      	ldr	r1, [r5, #0]
   d8a5a:	f011 0401 	ands.w	r4, r1, #1
   d8a5e:	d110      	bne.n	d8a82 <_Z16_fetch_usbserialv+0x36>
   d8a60:	4628      	mov	r0, r5
   d8a62:	f7fb fb1e 	bl	d40a2 <__cxa_guard_acquire>
   d8a66:	b160      	cbz	r0, d8a82 <_Z16_fetch_usbserialv+0x36>
   d8a68:	aa01      	add	r2, sp, #4
   d8a6a:	4621      	mov	r1, r4
   d8a6c:	4807      	ldr	r0, [pc, #28]	; (d8a8c <_Z16_fetch_usbserialv+0x40>)
   d8a6e:	f7ff ffcd 	bl	d8a0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8a72:	4628      	mov	r0, r5
   d8a74:	f7fb fb1a 	bl	d40ac <__cxa_guard_release>
   d8a78:	4a05      	ldr	r2, [pc, #20]	; (d8a90 <_Z16_fetch_usbserialv+0x44>)
   d8a7a:	4906      	ldr	r1, [pc, #24]	; (d8a94 <_Z16_fetch_usbserialv+0x48>)
   d8a7c:	4803      	ldr	r0, [pc, #12]	; (d8a8c <_Z16_fetch_usbserialv+0x40>)
   d8a7e:	f000 fb31 	bl	d90e4 <__aeabi_atexit>
	return _usbserial;
}
   d8a82:	4802      	ldr	r0, [pc, #8]	; (d8a8c <_Z16_fetch_usbserialv+0x40>)
   d8a84:	b007      	add	sp, #28
   d8a86:	bd30      	pop	{r4, r5, pc}
   d8a88:	2003e3b8 	.word	0x2003e3b8
   d8a8c:	2003e3bc 	.word	0x2003e3bc
   d8a90:	2003d694 	.word	0x2003d694
   d8a94:	000d898d 	.word	0x000d898d

000d8a98 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8a98:	2200      	movs	r2, #0
   d8a9a:	4611      	mov	r1, r2
   d8a9c:	6840      	ldr	r0, [r0, #4]
   d8a9e:	f7fd bf3f 	b.w	d6920 <network_ready>

000d8aa2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8aa2:	2200      	movs	r2, #0
   d8aa4:	4611      	mov	r1, r2
   d8aa6:	6840      	ldr	r0, [r0, #4]
   d8aa8:	f7fd bf5a 	b.w	d6960 <network_listening>

000d8aac <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8aac:	2200      	movs	r2, #0
   d8aae:	4611      	mov	r1, r2
   d8ab0:	6840      	ldr	r0, [r0, #4]
   d8ab2:	f7fd bf65 	b.w	d6980 <network_get_listen_timeout>

000d8ab6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8ab6:	2200      	movs	r2, #0
   d8ab8:	6840      	ldr	r0, [r0, #4]
   d8aba:	f7fd bf59 	b.w	d6970 <network_set_listen_timeout>

000d8abe <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8abe:	2200      	movs	r2, #0
   d8ac0:	f081 0101 	eor.w	r1, r1, #1
   d8ac4:	6840      	ldr	r0, [r0, #4]
   d8ac6:	f7fd bf43 	b.w	d6950 <network_listen>

000d8aca <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d8aca:	2300      	movs	r3, #0
   d8acc:	461a      	mov	r2, r3
   d8ace:	4619      	mov	r1, r3
   d8ad0:	6840      	ldr	r0, [r0, #4]
   d8ad2:	f7fd bf35 	b.w	d6940 <network_off>

000d8ad6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d8ad6:	2300      	movs	r3, #0
   d8ad8:	461a      	mov	r2, r3
   d8ada:	4619      	mov	r1, r3
   d8adc:	6840      	ldr	r0, [r0, #4]
   d8ade:	f7fd bf27 	b.w	d6930 <network_on>

000d8ae2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8ae2:	2200      	movs	r2, #0
   d8ae4:	4611      	mov	r1, r2
   d8ae6:	6840      	ldr	r0, [r0, #4]
   d8ae8:	f7fd bf0a 	b.w	d6900 <network_connecting>

000d8aec <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8aec:	2200      	movs	r2, #0
   d8aee:	2102      	movs	r1, #2
   d8af0:	6840      	ldr	r0, [r0, #4]
   d8af2:	f7fd bf0d 	b.w	d6910 <network_disconnect>

000d8af6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8af6:	2300      	movs	r3, #0
   d8af8:	461a      	mov	r2, r3
   d8afa:	6840      	ldr	r0, [r0, #4]
   d8afc:	f7fd bef8 	b.w	d68f0 <network_connect>

000d8b00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8b00:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8b02:	4c08      	ldr	r4, [pc, #32]	; (d8b24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8b04:	2528      	movs	r5, #40	; 0x28
   d8b06:	462a      	mov	r2, r5
   d8b08:	2100      	movs	r1, #0
   d8b0a:	4620      	mov	r0, r4
   d8b0c:	f000 fd8f 	bl	d962e <memset>
        cid = -1;
   d8b10:	f04f 33ff 	mov.w	r3, #4294967295
   d8b14:	6063      	str	r3, [r4, #4]
   d8b16:	4b04      	ldr	r3, [pc, #16]	; (d8b28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8b18:	8025      	strh	r5, [r4, #0]
   d8b1a:	2204      	movs	r2, #4
   d8b1c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8b1e:	4a03      	ldr	r2, [pc, #12]	; (d8b2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8b20:	601a      	str	r2, [r3, #0]
   d8b22:	bd38      	pop	{r3, r4, r5, pc}
   d8b24:	2003e3d8 	.word	0x2003e3d8
   d8b28:	2003e3d0 	.word	0x2003e3d0
   d8b2c:	000da640 	.word	0x000da640

000d8b30 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8b30:	4770      	bx	lr

000d8b32 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8b32:	7441      	strb	r1, [r0, #17]
   d8b34:	4770      	bx	lr

000d8b36 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8b36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8b38:	7c00      	ldrb	r0, [r0, #16]
   d8b3a:	f7fd fe1d 	bl	d6778 <HAL_USART_Available_Data_For_Write>
}
   d8b3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8b42:	bd08      	pop	{r3, pc}

000d8b44 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8b44:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8b46:	7c00      	ldrb	r0, [r0, #16]
   d8b48:	f7fd fdee 	bl	d6728 <HAL_USART_Available_Data>
}
   d8b4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8b50:	bd08      	pop	{r3, pc}

000d8b52 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8b52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8b54:	7c00      	ldrb	r0, [r0, #16]
   d8b56:	f7fd fdf7 	bl	d6748 <HAL_USART_Peek_Data>
}
   d8b5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8b5e:	bf28      	it	cs
   d8b60:	f04f 30ff 	movcs.w	r0, #4294967295
   d8b64:	bd08      	pop	{r3, pc}

000d8b66 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8b66:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8b68:	7c00      	ldrb	r0, [r0, #16]
   d8b6a:	f7fd fde5 	bl	d6738 <HAL_USART_Read_Data>
}
   d8b6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8b72:	bf28      	it	cs
   d8b74:	f04f 30ff 	movcs.w	r0, #4294967295
   d8b78:	bd08      	pop	{r3, pc}

000d8b7a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8b7a:	7c00      	ldrb	r0, [r0, #16]
   d8b7c:	f7fd bdec 	b.w	d6758 <HAL_USART_Flush_Data>

000d8b80 <_ZN11USARTSerialD0Ev>:
   d8b80:	b510      	push	{r4, lr}
   d8b82:	2114      	movs	r1, #20
   d8b84:	4604      	mov	r4, r0
   d8b86:	f000 fabb 	bl	d9100 <_ZdlPvj>
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	bd10      	pop	{r4, pc}

000d8b8e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8b8e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8b90:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8b92:	4604      	mov	r4, r0
   d8b94:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8b96:	b925      	cbnz	r5, d8ba2 <_ZN11USARTSerial5writeEh+0x14>
   d8b98:	7c00      	ldrb	r0, [r0, #16]
   d8b9a:	f7fd fded 	bl	d6778 <HAL_USART_Available_Data_For_Write>
   d8b9e:	2800      	cmp	r0, #0
   d8ba0:	dd05      	ble.n	d8bae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8ba2:	4631      	mov	r1, r6
   d8ba4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8baa:	f7fd bdb5 	b.w	d6718 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8bae:	4628      	mov	r0, r5
   d8bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8bb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8bb4:	b510      	push	{r4, lr}
   d8bb6:	4604      	mov	r4, r0
   d8bb8:	4608      	mov	r0, r1
   d8bba:	4611      	mov	r1, r2
   d8bbc:	2200      	movs	r2, #0
   d8bbe:	6062      	str	r2, [r4, #4]
   d8bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8bc4:	60a2      	str	r2, [r4, #8]
   d8bc6:	4a05      	ldr	r2, [pc, #20]	; (d8bdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8bc8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8bca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8bcc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8bce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8bd0:	461a      	mov	r2, r3
   d8bd2:	f7fd fd99 	bl	d6708 <HAL_USART_Init>
}
   d8bd6:	4620      	mov	r0, r4
   d8bd8:	bd10      	pop	{r4, pc}
   d8bda:	bf00      	nop
   d8bdc:	000da674 	.word	0x000da674

000d8be0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8be0:	7c00      	ldrb	r0, [r0, #16]
   d8be2:	f7fd bdc1 	b.w	d6768 <HAL_USART_Is_Enabled>
	...

000d8be8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8be8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8bea:	4d0c      	ldr	r5, [pc, #48]	; (d8c1c <_Z22__fetch_global_Serial1v+0x34>)
   d8bec:	6829      	ldr	r1, [r5, #0]
   d8bee:	f011 0401 	ands.w	r4, r1, #1
   d8bf2:	d111      	bne.n	d8c18 <_Z22__fetch_global_Serial1v+0x30>
   d8bf4:	4628      	mov	r0, r5
   d8bf6:	f7fb fa54 	bl	d40a2 <__cxa_guard_acquire>
   d8bfa:	b168      	cbz	r0, d8c18 <_Z22__fetch_global_Serial1v+0x30>
   d8bfc:	4a08      	ldr	r2, [pc, #32]	; (d8c20 <_Z22__fetch_global_Serial1v+0x38>)
   d8bfe:	4b09      	ldr	r3, [pc, #36]	; (d8c24 <_Z22__fetch_global_Serial1v+0x3c>)
   d8c00:	4809      	ldr	r0, [pc, #36]	; (d8c28 <_Z22__fetch_global_Serial1v+0x40>)
   d8c02:	4621      	mov	r1, r4
   d8c04:	f7ff ffd6 	bl	d8bb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8c08:	4628      	mov	r0, r5
   d8c0a:	f7fb fa4f 	bl	d40ac <__cxa_guard_release>
   d8c0e:	4a07      	ldr	r2, [pc, #28]	; (d8c2c <_Z22__fetch_global_Serial1v+0x44>)
   d8c10:	4907      	ldr	r1, [pc, #28]	; (d8c30 <_Z22__fetch_global_Serial1v+0x48>)
   d8c12:	4805      	ldr	r0, [pc, #20]	; (d8c28 <_Z22__fetch_global_Serial1v+0x40>)
   d8c14:	f000 fa66 	bl	d90e4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8c18:	4803      	ldr	r0, [pc, #12]	; (d8c28 <_Z22__fetch_global_Serial1v+0x40>)
   d8c1a:	bd38      	pop	{r3, r4, r5, pc}
   d8c1c:	2003e498 	.word	0x2003e498
   d8c20:	2003e49c 	.word	0x2003e49c
   d8c24:	2003e414 	.word	0x2003e414
   d8c28:	2003e400 	.word	0x2003e400
   d8c2c:	2003d694 	.word	0x2003d694
   d8c30:	000d8b31 	.word	0x000d8b31

000d8c34 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8c34:	4770      	bx	lr

000d8c36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c38:	4606      	mov	r6, r0
   d8c3a:	4615      	mov	r5, r2
   d8c3c:	460c      	mov	r4, r1
   d8c3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c40:	42bc      	cmp	r4, r7
   d8c42:	d006      	beq.n	d8c52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8c44:	6833      	ldr	r3, [r6, #0]
   d8c46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8c4a:	689b      	ldr	r3, [r3, #8]
   d8c4c:	4630      	mov	r0, r6
   d8c4e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c50:	e7f6      	b.n	d8c40 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8c52:	4628      	mov	r0, r5
   d8c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c56 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8c56:	2200      	movs	r2, #0
   d8c58:	7c00      	ldrb	r0, [r0, #16]
   d8c5a:	f7fd bd95 	b.w	d6788 <HAL_I2C_Write_Data>

000d8c5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8c5e:	2100      	movs	r1, #0
   d8c60:	7c00      	ldrb	r0, [r0, #16]
   d8c62:	f7fd bd99 	b.w	d6798 <HAL_I2C_Available_Data>

000d8c66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8c66:	2100      	movs	r1, #0
   d8c68:	7c00      	ldrb	r0, [r0, #16]
   d8c6a:	f7fd bd9d 	b.w	d67a8 <HAL_I2C_Read_Data>

000d8c6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8c6e:	2100      	movs	r1, #0
   d8c70:	7c00      	ldrb	r0, [r0, #16]
   d8c72:	f7fd bda1 	b.w	d67b8 <HAL_I2C_Peek_Data>

000d8c76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8c76:	2100      	movs	r1, #0
   d8c78:	7c00      	ldrb	r0, [r0, #16]
   d8c7a:	f7fd bda5 	b.w	d67c8 <HAL_I2C_Flush_Data>

000d8c7e <_ZN7TwoWireD0Ev>:
   d8c7e:	b510      	push	{r4, lr}
   d8c80:	2114      	movs	r1, #20
   d8c82:	4604      	mov	r4, r0
   d8c84:	f000 fa3c 	bl	d9100 <_ZdlPvj>
   d8c88:	4620      	mov	r0, r4
   d8c8a:	bd10      	pop	{r4, pc}

000d8c8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8c8c:	b510      	push	{r4, lr}
   d8c8e:	4604      	mov	r4, r0
   d8c90:	2300      	movs	r3, #0
   d8c92:	6063      	str	r3, [r4, #4]
   d8c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c98:	60a3      	str	r3, [r4, #8]
   d8c9a:	4b04      	ldr	r3, [pc, #16]	; (d8cac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8c9c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8c9e:	4608      	mov	r0, r1
   d8ca0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8ca2:	4611      	mov	r1, r2
   d8ca4:	f7fd fda0 	bl	d67e8 <HAL_I2C_Init>
}
   d8ca8:	4620      	mov	r0, r4
   d8caa:	bd10      	pop	{r4, pc}
   d8cac:	000da6a4 	.word	0x000da6a4

000d8cb0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8cb0:	2100      	movs	r1, #0
   d8cb2:	7c00      	ldrb	r0, [r0, #16]
   d8cb4:	f7fd bd90 	b.w	d67d8 <HAL_I2C_Is_Enabled>

000d8cb8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8cb8:	2200      	movs	r2, #0
   d8cba:	4611      	mov	r1, r2
   d8cbc:	6840      	ldr	r0, [r0, #4]
   d8cbe:	f7fd be4f 	b.w	d6960 <network_listening>

000d8cc2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8cc2:	2200      	movs	r2, #0
   d8cc4:	4611      	mov	r1, r2
   d8cc6:	6840      	ldr	r0, [r0, #4]
   d8cc8:	f7fd be5a 	b.w	d6980 <network_get_listen_timeout>

000d8ccc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8ccc:	2200      	movs	r2, #0
   d8cce:	6840      	ldr	r0, [r0, #4]
   d8cd0:	f7fd be4e 	b.w	d6970 <network_set_listen_timeout>

000d8cd4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8cd4:	2200      	movs	r2, #0
   d8cd6:	f081 0101 	eor.w	r1, r1, #1
   d8cda:	6840      	ldr	r0, [r0, #4]
   d8cdc:	f7fd be38 	b.w	d6950 <network_listen>

000d8ce0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8ce0:	2300      	movs	r3, #0
   d8ce2:	461a      	mov	r2, r3
   d8ce4:	2101      	movs	r1, #1
   d8ce6:	6840      	ldr	r0, [r0, #4]
   d8ce8:	f7fd be2a 	b.w	d6940 <network_off>

000d8cec <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8cec:	2300      	movs	r3, #0
   d8cee:	461a      	mov	r2, r3
   d8cf0:	4619      	mov	r1, r3
   d8cf2:	6840      	ldr	r0, [r0, #4]
   d8cf4:	f7fd be1c 	b.w	d6930 <network_on>

000d8cf8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8cf8:	2200      	movs	r2, #0
   d8cfa:	4611      	mov	r1, r2
   d8cfc:	6840      	ldr	r0, [r0, #4]
   d8cfe:	f7fd be0f 	b.w	d6920 <network_ready>

000d8d02 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8d02:	2200      	movs	r2, #0
   d8d04:	4611      	mov	r1, r2
   d8d06:	6840      	ldr	r0, [r0, #4]
   d8d08:	f7fd bdfa 	b.w	d6900 <network_connecting>

000d8d0c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8d0c:	2200      	movs	r2, #0
   d8d0e:	2102      	movs	r1, #2
   d8d10:	6840      	ldr	r0, [r0, #4]
   d8d12:	f7fd bdfd 	b.w	d6910 <network_disconnect>

000d8d16 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8d16:	2300      	movs	r3, #0
   d8d18:	461a      	mov	r2, r3
   d8d1a:	6840      	ldr	r0, [r0, #4]
   d8d1c:	f7fd bde8 	b.w	d68f0 <network_connect>

000d8d20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8d20:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d22:	4605      	mov	r5, r0
   d8d24:	b188      	cbz	r0, d8d4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d26:	6804      	ldr	r4, [r0, #0]
   d8d28:	b14c      	cbz	r4, d8d3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8d2a:	68a3      	ldr	r3, [r4, #8]
   d8d2c:	b11b      	cbz	r3, d8d36 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8d2e:	2203      	movs	r2, #3
   d8d30:	4621      	mov	r1, r4
   d8d32:	4620      	mov	r0, r4
   d8d34:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d36:	2110      	movs	r1, #16
   d8d38:	4620      	mov	r0, r4
   d8d3a:	f000 f9e1 	bl	d9100 <_ZdlPvj>
   d8d3e:	4628      	mov	r0, r5
   d8d40:	2114      	movs	r1, #20
      }
   d8d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d46:	f000 b9db 	b.w	d9100 <_ZdlPvj>
   d8d4a:	bd38      	pop	{r3, r4, r5, pc}

000d8d4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8d4c:	b110      	cbz	r0, d8d54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8d4e:	6803      	ldr	r3, [r0, #0]
   d8d50:	685b      	ldr	r3, [r3, #4]
   d8d52:	4718      	bx	r3
   d8d54:	4770      	bx	lr

000d8d56 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8d56:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8d58:	6803      	ldr	r3, [r0, #0]
   d8d5a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8d5c:	b1bb      	cbz	r3, d8d8e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8d5e:	6858      	ldr	r0, [r3, #4]
   d8d60:	f7fd fc92 	bl	d6688 <os_thread_is_current>
   d8d64:	b978      	cbnz	r0, d8d86 <_ZN6ThreadD1Ev+0x30>
   d8d66:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8d68:	7c5a      	ldrb	r2, [r3, #17]
   d8d6a:	b912      	cbnz	r2, d8d72 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8d6c:	6858      	ldr	r0, [r3, #4]
   d8d6e:	f7fd fc93 	bl	d6698 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8d72:	6823      	ldr	r3, [r4, #0]
   d8d74:	6858      	ldr	r0, [r3, #4]
   d8d76:	f7fd fc97 	bl	d66a8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d7a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8d7c:	2300      	movs	r3, #0
   d8d7e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8d80:	b128      	cbz	r0, d8d8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8d82:	f7ff ffcd 	bl	d8d20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d86:	6820      	ldr	r0, [r4, #0]
   d8d88:	b108      	cbz	r0, d8d8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8d8a:	f7ff ffc9 	bl	d8d20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8d8e:	4620      	mov	r0, r4
   d8d90:	bd10      	pop	{r4, pc}

000d8d92 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8d92:	b538      	push	{r3, r4, r5, lr}
   d8d94:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d96:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8d9a:	b108      	cbz	r0, d8da0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8d9c:	f7fb f97f 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8da0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8da4:	b108      	cbz	r0, d8daa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8da6:	f7fd fc8f 	bl	d66c8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8daa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8dae:	b135      	cbz	r5, d8dbe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8db0:	4628      	mov	r0, r5
   d8db2:	f7ff ffd0 	bl	d8d56 <_ZN6ThreadD1Ev>
   d8db6:	2104      	movs	r1, #4
   d8db8:	4628      	mov	r0, r5
   d8dba:	f000 f9a1 	bl	d9100 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8dbe:	6820      	ldr	r0, [r4, #0]
   d8dc0:	b108      	cbz	r0, d8dc6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8dc2:	f7ff ffc3 	bl	d8d4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8dc6:	4620      	mov	r0, r4
   d8dc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8dcc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8dcc:	b510      	push	{r4, lr}
   d8dce:	4b04      	ldr	r3, [pc, #16]	; (d8de0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8dd0:	4604      	mov	r4, r0
   d8dd2:	f840 3b08 	str.w	r3, [r0], #8
   d8dd6:	f7ff ffdc 	bl	d8d92 <_ZN5spark11MeshPublishD1Ev>
   d8dda:	4620      	mov	r0, r4
   d8ddc:	bd10      	pop	{r4, pc}
   d8dde:	bf00      	nop
   d8de0:	000da6cc 	.word	0x000da6cc

000d8de4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8de4:	b538      	push	{r3, r4, r5, lr}
   d8de6:	4c0e      	ldr	r4, [pc, #56]	; (d8e20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8de8:	4b0e      	ldr	r3, [pc, #56]	; (d8e24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8dea:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8dec:	2500      	movs	r5, #0
   d8dee:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8df0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8df4:	6063      	str	r3, [r4, #4]
   d8df6:	60a5      	str	r5, [r4, #8]
   d8df8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8dfc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8e00:	f7fd fc5a 	bl	d66b8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8e04:	4b08      	ldr	r3, [pc, #32]	; (d8e28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8e06:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e0a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8e0e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8e10:	4620      	mov	r0, r4
   d8e12:	4a06      	ldr	r2, [pc, #24]	; (d8e2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8e14:	4906      	ldr	r1, [pc, #24]	; (d8e30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8e1a:	f000 b963 	b.w	d90e4 <__aeabi_atexit>
   d8e1e:	bf00      	nop
   d8e20:	2003e520 	.word	0x2003e520
   d8e24:	000da700 	.word	0x000da700
   d8e28:	000da6cc 	.word	0x000da6cc
   d8e2c:	2003d694 	.word	0x2003d694
   d8e30:	000d8dcd 	.word	0x000d8dcd

000d8e34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8e34:	2300      	movs	r3, #0
   d8e36:	461a      	mov	r2, r3
   d8e38:	6840      	ldr	r0, [r0, #4]
   d8e3a:	f7fd bd59 	b.w	d68f0 <network_connect>

000d8e3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8e3e:	2200      	movs	r2, #0
   d8e40:	2102      	movs	r1, #2
   d8e42:	6840      	ldr	r0, [r0, #4]
   d8e44:	f7fd bd64 	b.w	d6910 <network_disconnect>

000d8e48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8e48:	2200      	movs	r2, #0
   d8e4a:	4611      	mov	r1, r2
   d8e4c:	6840      	ldr	r0, [r0, #4]
   d8e4e:	f7fd bd57 	b.w	d6900 <network_connecting>

000d8e52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8e52:	2200      	movs	r2, #0
   d8e54:	4611      	mov	r1, r2
   d8e56:	6840      	ldr	r0, [r0, #4]
   d8e58:	f7fd bd62 	b.w	d6920 <network_ready>

000d8e5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8e5c:	2300      	movs	r3, #0
   d8e5e:	461a      	mov	r2, r3
   d8e60:	4619      	mov	r1, r3
   d8e62:	6840      	ldr	r0, [r0, #4]
   d8e64:	f7fd bd64 	b.w	d6930 <network_on>

000d8e68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8e68:	2300      	movs	r3, #0
   d8e6a:	461a      	mov	r2, r3
   d8e6c:	4619      	mov	r1, r3
   d8e6e:	6840      	ldr	r0, [r0, #4]
   d8e70:	f7fd bd66 	b.w	d6940 <network_off>

000d8e74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8e74:	2200      	movs	r2, #0
   d8e76:	f081 0101 	eor.w	r1, r1, #1
   d8e7a:	6840      	ldr	r0, [r0, #4]
   d8e7c:	f7fd bd68 	b.w	d6950 <network_listen>

000d8e80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8e80:	2200      	movs	r2, #0
   d8e82:	6840      	ldr	r0, [r0, #4]
   d8e84:	f7fd bd74 	b.w	d6970 <network_set_listen_timeout>

000d8e88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8e88:	2200      	movs	r2, #0
   d8e8a:	4611      	mov	r1, r2
   d8e8c:	6840      	ldr	r0, [r0, #4]
   d8e8e:	f7fd bd77 	b.w	d6980 <network_get_listen_timeout>

000d8e92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8e92:	2200      	movs	r2, #0
   d8e94:	4611      	mov	r1, r2
   d8e96:	6840      	ldr	r0, [r0, #4]
   d8e98:	f7fd bd62 	b.w	d6960 <network_listening>

000d8e9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8ea0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8ea2:	b095      	sub	sp, #84	; 0x54
   d8ea4:	4616      	mov	r6, r2
   d8ea6:	460d      	mov	r5, r1
   d8ea8:	4607      	mov	r7, r0
    IPAddress addr;
   d8eaa:	f7ff fd35 	bl	d8918 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8eae:	4621      	mov	r1, r4
   d8eb0:	2220      	movs	r2, #32
   d8eb2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8eb4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8eb6:	f000 fbba 	bl	d962e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8eba:	2340      	movs	r3, #64	; 0x40
   d8ebc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8ebe:	4621      	mov	r1, r4
   d8ec0:	466b      	mov	r3, sp
   d8ec2:	aa0c      	add	r2, sp, #48	; 0x30
   d8ec4:	4630      	mov	r0, r6
   d8ec6:	f7fd fa93 	bl	d63f0 <netdb_getaddrinfo>
    if (!r) {
   d8eca:	4604      	mov	r4, r0
   d8ecc:	2800      	cmp	r0, #0
   d8ece:	d144      	bne.n	d8f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8ed0:	4602      	mov	r2, r0
   d8ed2:	2101      	movs	r1, #1
   d8ed4:	6868      	ldr	r0, [r5, #4]
   d8ed6:	f7fd fd23 	bl	d6920 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8eda:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8edc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ede:	4622      	mov	r2, r4
   d8ee0:	6868      	ldr	r0, [r5, #4]
   d8ee2:	f7fd fd1d 	bl	d6920 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ee6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ee8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8eea:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8eec:	2e00      	cmp	r6, #0
   d8eee:	d034      	beq.n	d8f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8ef0:	2900      	cmp	r1, #0
   d8ef2:	d132      	bne.n	d8f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8ef4:	6873      	ldr	r3, [r6, #4]
   d8ef6:	2b02      	cmp	r3, #2
   d8ef8:	d002      	beq.n	d8f00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8efa:	2b0a      	cmp	r3, #10
   d8efc:	d009      	beq.n	d8f12 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8efe:	e02a      	b.n	d8f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8f00:	f1b8 0f00 	cmp.w	r8, #0
   d8f04:	d027      	beq.n	d8f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8f06:	6971      	ldr	r1, [r6, #20]
   d8f08:	4638      	mov	r0, r7
   d8f0a:	3104      	adds	r1, #4
   d8f0c:	f7ff fd31 	bl	d8972 <_ZN9IPAddressaSEPKh>
   d8f10:	e020      	b.n	d8f54 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8f12:	f1b9 0f00 	cmp.w	r9, #0
   d8f16:	d01e      	beq.n	d8f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8f18:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8f1a:	2211      	movs	r2, #17
   d8f1c:	a801      	add	r0, sp, #4
   d8f1e:	f000 fb86 	bl	d962e <memset>
                    a.v = 6;
   d8f22:	2306      	movs	r3, #6
   d8f24:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8f28:	ad01      	add	r5, sp, #4
   d8f2a:	f104 0308 	add.w	r3, r4, #8
   d8f2e:	3418      	adds	r4, #24
   d8f30:	6818      	ldr	r0, [r3, #0]
   d8f32:	6859      	ldr	r1, [r3, #4]
   d8f34:	462a      	mov	r2, r5
   d8f36:	c203      	stmia	r2!, {r0, r1}
   d8f38:	3308      	adds	r3, #8
   d8f3a:	42a3      	cmp	r3, r4
   d8f3c:	4615      	mov	r5, r2
   d8f3e:	d1f7      	bne.n	d8f30 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8f40:	a901      	add	r1, sp, #4
   d8f42:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8f44:	ad07      	add	r5, sp, #28
   d8f46:	f7ff fcf5 	bl	d8934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f4c:	1d3c      	adds	r4, r7, #4
   d8f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f50:	682b      	ldr	r3, [r5, #0]
   d8f52:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8f54:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f56:	69f6      	ldr	r6, [r6, #28]
   d8f58:	e7c8      	b.n	d8eec <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8f5a:	9800      	ldr	r0, [sp, #0]
   d8f5c:	f7fd fa40 	bl	d63e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8f60:	4638      	mov	r0, r7
   d8f62:	b015      	add	sp, #84	; 0x54
   d8f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8f68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8f68:	4b02      	ldr	r3, [pc, #8]	; (d8f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8f6a:	4a03      	ldr	r2, [pc, #12]	; (d8f78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8f6c:	601a      	str	r2, [r3, #0]
   d8f6e:	2200      	movs	r2, #0
   d8f70:	605a      	str	r2, [r3, #4]
   d8f72:	4770      	bx	lr
   d8f74:	2003e6f4 	.word	0x2003e6f4
   d8f78:	000da700 	.word	0x000da700

000d8f7c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8f7c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8f7e:	4e18      	ldr	r6, [pc, #96]	; (d8fe0 <pinAvailable+0x64>)
   d8f80:	6831      	ldr	r1, [r6, #0]
   d8f82:	f011 0501 	ands.w	r5, r1, #1
   d8f86:	4604      	mov	r4, r0
   d8f88:	d10a      	bne.n	d8fa0 <pinAvailable+0x24>
   d8f8a:	4630      	mov	r0, r6
   d8f8c:	f7fb f889 	bl	d40a2 <__cxa_guard_acquire>
   d8f90:	b130      	cbz	r0, d8fa0 <pinAvailable+0x24>
   d8f92:	4629      	mov	r1, r5
   d8f94:	4813      	ldr	r0, [pc, #76]	; (d8fe4 <pinAvailable+0x68>)
   d8f96:	f7fd fd9f 	bl	d6ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8f9a:	4630      	mov	r0, r6
   d8f9c:	f7fb f886 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8fa0:	4810      	ldr	r0, [pc, #64]	; (d8fe4 <pinAvailable+0x68>)
   d8fa2:	f7fd fe56 	bl	d6c52 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8fa6:	b128      	cbz	r0, d8fb4 <pinAvailable+0x38>
   d8fa8:	f1a4 030b 	sub.w	r3, r4, #11
   d8fac:	2b02      	cmp	r3, #2
   d8fae:	d801      	bhi.n	d8fb4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8fb0:	2000      	movs	r0, #0
   d8fb2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8fb4:	f000 f870 	bl	d9098 <_Z19__fetch_global_Wirev>
   d8fb8:	f7ff fe7a 	bl	d8cb0 <_ZN7TwoWire9isEnabledEv>
   d8fbc:	b108      	cbz	r0, d8fc2 <pinAvailable+0x46>
   d8fbe:	2c01      	cmp	r4, #1
   d8fc0:	d9f6      	bls.n	d8fb0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8fc2:	f7ff fe11 	bl	d8be8 <_Z22__fetch_global_Serial1v>
   d8fc6:	f7ff fe0b 	bl	d8be0 <_ZN11USARTSerial9isEnabledEv>
   d8fca:	b118      	cbz	r0, d8fd4 <pinAvailable+0x58>
   d8fcc:	f1a4 0309 	sub.w	r3, r4, #9
   d8fd0:	2b01      	cmp	r3, #1
   d8fd2:	d9ed      	bls.n	d8fb0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8fd4:	2c25      	cmp	r4, #37	; 0x25
   d8fd6:	bf8c      	ite	hi
   d8fd8:	2000      	movhi	r0, #0
   d8fda:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8fdc:	bd70      	pop	{r4, r5, r6, pc}
   d8fde:	bf00      	nop
   d8fe0:	2003e6fc 	.word	0x2003e6fc
   d8fe4:	2003e700 	.word	0x2003e700

000d8fe8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8fe8:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8fea:	b538      	push	{r3, r4, r5, lr}
   d8fec:	4604      	mov	r4, r0
   d8fee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8ff0:	d80a      	bhi.n	d9008 <pinMode+0x20>
   d8ff2:	29ff      	cmp	r1, #255	; 0xff
   d8ff4:	d008      	beq.n	d9008 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8ff6:	f7ff ffc1 	bl	d8f7c <pinAvailable>
   d8ffa:	b128      	cbz	r0, d9008 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8ffc:	4629      	mov	r1, r5
   d8ffe:	4620      	mov	r0, r4
}
   d9000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9004:	f7fd ba04 	b.w	d6410 <HAL_Pin_Mode>
   d9008:	bd38      	pop	{r3, r4, r5, pc}

000d900a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d900a:	b538      	push	{r3, r4, r5, lr}
   d900c:	4604      	mov	r4, r0
   d900e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9010:	f7fd fa06 	bl	d6420 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9014:	28ff      	cmp	r0, #255	; 0xff
   d9016:	d010      	beq.n	d903a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9018:	2806      	cmp	r0, #6
   d901a:	d804      	bhi.n	d9026 <digitalWrite+0x1c>
   d901c:	234d      	movs	r3, #77	; 0x4d
   d901e:	fa23 f000 	lsr.w	r0, r3, r0
   d9022:	07c3      	lsls	r3, r0, #31
   d9024:	d409      	bmi.n	d903a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9026:	4620      	mov	r0, r4
   d9028:	f7ff ffa8 	bl	d8f7c <pinAvailable>
   d902c:	b128      	cbz	r0, d903a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d902e:	4629      	mov	r1, r5
   d9030:	4620      	mov	r0, r4
}
   d9032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9036:	f7fd b9fb 	b.w	d6430 <HAL_GPIO_Write>
   d903a:	bd38      	pop	{r3, r4, r5, pc}

000d903c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d903c:	b510      	push	{r4, lr}
   d903e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9040:	f7fd f9ee 	bl	d6420 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d9044:	3804      	subs	r0, #4
   d9046:	b2c0      	uxtb	r0, r0
   d9048:	2801      	cmp	r0, #1
   d904a:	d908      	bls.n	d905e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d904c:	4620      	mov	r0, r4
   d904e:	f7ff ff95 	bl	d8f7c <pinAvailable>
   d9052:	b120      	cbz	r0, d905e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9054:	4620      	mov	r0, r4
}
   d9056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d905a:	f7fd b9f1 	b.w	d6440 <HAL_GPIO_Read>
}
   d905e:	2000      	movs	r0, #0
   d9060:	bd10      	pop	{r4, pc}
	...

000d9064 <_Z17acquireWireBufferv>:
   d9064:	b570      	push	{r4, r5, r6, lr}
   d9066:	4604      	mov	r4, r0
   d9068:	2514      	movs	r5, #20
   d906a:	462a      	mov	r2, r5
   d906c:	4e09      	ldr	r6, [pc, #36]	; (d9094 <_Z17acquireWireBufferv+0x30>)
   d906e:	2100      	movs	r1, #0
   d9070:	f000 fadd 	bl	d962e <memset>
   d9074:	8025      	strh	r5, [r4, #0]
   d9076:	2520      	movs	r5, #32
   d9078:	4631      	mov	r1, r6
   d907a:	60a5      	str	r5, [r4, #8]
   d907c:	6125      	str	r5, [r4, #16]
   d907e:	4628      	mov	r0, r5
   d9080:	f000 f840 	bl	d9104 <_ZnajRKSt9nothrow_t>
   d9084:	4631      	mov	r1, r6
   d9086:	6060      	str	r0, [r4, #4]
   d9088:	4628      	mov	r0, r5
   d908a:	f000 f83b 	bl	d9104 <_ZnajRKSt9nothrow_t>
   d908e:	60e0      	str	r0, [r4, #12]
   d9090:	4620      	mov	r0, r4
   d9092:	bd70      	pop	{r4, r5, r6, pc}
   d9094:	000da72c 	.word	0x000da72c

000d9098 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9098:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d909a:	4d0e      	ldr	r5, [pc, #56]	; (d90d4 <_Z19__fetch_global_Wirev+0x3c>)
   d909c:	6829      	ldr	r1, [r5, #0]
   d909e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d90a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d90a4:	d113      	bne.n	d90ce <_Z19__fetch_global_Wirev+0x36>
   d90a6:	4628      	mov	r0, r5
   d90a8:	f7fa fffb 	bl	d40a2 <__cxa_guard_acquire>
   d90ac:	b178      	cbz	r0, d90ce <_Z19__fetch_global_Wirev+0x36>
   d90ae:	a801      	add	r0, sp, #4
   d90b0:	f7ff ffd8 	bl	d9064 <_Z17acquireWireBufferv>
   d90b4:	aa01      	add	r2, sp, #4
   d90b6:	4621      	mov	r1, r4
   d90b8:	4807      	ldr	r0, [pc, #28]	; (d90d8 <_Z19__fetch_global_Wirev+0x40>)
   d90ba:	f7ff fde7 	bl	d8c8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d90be:	4628      	mov	r0, r5
   d90c0:	f7fa fff4 	bl	d40ac <__cxa_guard_release>
   d90c4:	4a05      	ldr	r2, [pc, #20]	; (d90dc <_Z19__fetch_global_Wirev+0x44>)
   d90c6:	4906      	ldr	r1, [pc, #24]	; (d90e0 <_Z19__fetch_global_Wirev+0x48>)
   d90c8:	4803      	ldr	r0, [pc, #12]	; (d90d8 <_Z19__fetch_global_Wirev+0x40>)
   d90ca:	f000 f80b 	bl	d90e4 <__aeabi_atexit>
	return wire;
}
   d90ce:	4802      	ldr	r0, [pc, #8]	; (d90d8 <_Z19__fetch_global_Wirev+0x40>)
   d90d0:	b007      	add	sp, #28
   d90d2:	bd30      	pop	{r4, r5, pc}
   d90d4:	2003e70c 	.word	0x2003e70c
   d90d8:	2003e710 	.word	0x2003e710
   d90dc:	2003d694 	.word	0x2003d694
   d90e0:	000d8c35 	.word	0x000d8c35

000d90e4 <__aeabi_atexit>:
   d90e4:	460b      	mov	r3, r1
   d90e6:	4601      	mov	r1, r0
   d90e8:	4618      	mov	r0, r3
   d90ea:	f000 b965 	b.w	d93b8 <__cxa_atexit>
	...

000d90f0 <_ZSt15get_new_handlerv>:
   d90f0:	4b02      	ldr	r3, [pc, #8]	; (d90fc <_ZSt15get_new_handlerv+0xc>)
   d90f2:	6818      	ldr	r0, [r3, #0]
   d90f4:	f3bf 8f5f 	dmb	sy
   d90f8:	4770      	bx	lr
   d90fa:	bf00      	nop
   d90fc:	2003e724 	.word	0x2003e724

000d9100 <_ZdlPvj>:
   d9100:	f7fa bfcb 	b.w	d409a <_ZdlPv>

000d9104 <_ZnajRKSt9nothrow_t>:
   d9104:	f000 b800 	b.w	d9108 <_ZnwjRKSt9nothrow_t>

000d9108 <_ZnwjRKSt9nothrow_t>:
   d9108:	b510      	push	{r4, lr}
   d910a:	2800      	cmp	r0, #0
   d910c:	bf14      	ite	ne
   d910e:	4604      	movne	r4, r0
   d9110:	2401      	moveq	r4, #1
   d9112:	4620      	mov	r0, r4
   d9114:	f7fd fc64 	bl	d69e0 <malloc>
   d9118:	b920      	cbnz	r0, d9124 <_ZnwjRKSt9nothrow_t+0x1c>
   d911a:	f7ff ffe9 	bl	d90f0 <_ZSt15get_new_handlerv>
   d911e:	b108      	cbz	r0, d9124 <_ZnwjRKSt9nothrow_t+0x1c>
   d9120:	4780      	blx	r0
   d9122:	e7f6      	b.n	d9112 <_ZnwjRKSt9nothrow_t+0xa>
   d9124:	bd10      	pop	{r4, pc}
	...

000d9128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9128:	4b18      	ldr	r3, [pc, #96]	; (d918c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d912a:	681a      	ldr	r2, [r3, #0]
   d912c:	07d1      	lsls	r1, r2, #31
   d912e:	bf5c      	itt	pl
   d9130:	2201      	movpl	r2, #1
   d9132:	601a      	strpl	r2, [r3, #0]
   d9134:	4b16      	ldr	r3, [pc, #88]	; (d9190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9136:	681a      	ldr	r2, [r3, #0]
   d9138:	07d2      	lsls	r2, r2, #31
   d913a:	bf5c      	itt	pl
   d913c:	2201      	movpl	r2, #1
   d913e:	601a      	strpl	r2, [r3, #0]
   d9140:	4b14      	ldr	r3, [pc, #80]	; (d9194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9142:	681a      	ldr	r2, [r3, #0]
   d9144:	07d0      	lsls	r0, r2, #31
   d9146:	bf5c      	itt	pl
   d9148:	2201      	movpl	r2, #1
   d914a:	601a      	strpl	r2, [r3, #0]
   d914c:	4b12      	ldr	r3, [pc, #72]	; (d9198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d914e:	681a      	ldr	r2, [r3, #0]
   d9150:	07d1      	lsls	r1, r2, #31
   d9152:	bf5c      	itt	pl
   d9154:	2201      	movpl	r2, #1
   d9156:	601a      	strpl	r2, [r3, #0]
   d9158:	4b10      	ldr	r3, [pc, #64]	; (d919c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d915a:	681a      	ldr	r2, [r3, #0]
   d915c:	07d2      	lsls	r2, r2, #31
   d915e:	bf5c      	itt	pl
   d9160:	2201      	movpl	r2, #1
   d9162:	601a      	strpl	r2, [r3, #0]
   d9164:	4b0e      	ldr	r3, [pc, #56]	; (d91a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9166:	681a      	ldr	r2, [r3, #0]
   d9168:	07d0      	lsls	r0, r2, #31
   d916a:	bf5c      	itt	pl
   d916c:	2201      	movpl	r2, #1
   d916e:	601a      	strpl	r2, [r3, #0]
   d9170:	4b0c      	ldr	r3, [pc, #48]	; (d91a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9172:	681a      	ldr	r2, [r3, #0]
   d9174:	07d1      	lsls	r1, r2, #31
   d9176:	bf5c      	itt	pl
   d9178:	2201      	movpl	r2, #1
   d917a:	601a      	strpl	r2, [r3, #0]
   d917c:	4b0a      	ldr	r3, [pc, #40]	; (d91a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d917e:	681a      	ldr	r2, [r3, #0]
   d9180:	07d2      	lsls	r2, r2, #31
   d9182:	bf5c      	itt	pl
   d9184:	2201      	movpl	r2, #1
   d9186:	601a      	strpl	r2, [r3, #0]
   d9188:	4770      	bx	lr
   d918a:	bf00      	nop
   d918c:	2003e744 	.word	0x2003e744
   d9190:	2003e740 	.word	0x2003e740
   d9194:	2003e73c 	.word	0x2003e73c
   d9198:	2003e738 	.word	0x2003e738
   d919c:	2003e734 	.word	0x2003e734
   d91a0:	2003e730 	.word	0x2003e730
   d91a4:	2003e72c 	.word	0x2003e72c
   d91a8:	2003e728 	.word	0x2003e728

000d91ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d91ac:	4b24      	ldr	r3, [pc, #144]	; (d9240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d91ae:	681a      	ldr	r2, [r3, #0]
   d91b0:	07d0      	lsls	r0, r2, #31
   d91b2:	bf5c      	itt	pl
   d91b4:	2201      	movpl	r2, #1
   d91b6:	601a      	strpl	r2, [r3, #0]
   d91b8:	4b22      	ldr	r3, [pc, #136]	; (d9244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d91ba:	681a      	ldr	r2, [r3, #0]
   d91bc:	07d1      	lsls	r1, r2, #31
   d91be:	bf5c      	itt	pl
   d91c0:	2201      	movpl	r2, #1
   d91c2:	601a      	strpl	r2, [r3, #0]
   d91c4:	4b20      	ldr	r3, [pc, #128]	; (d9248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d91c6:	681a      	ldr	r2, [r3, #0]
   d91c8:	07d2      	lsls	r2, r2, #31
   d91ca:	bf5c      	itt	pl
   d91cc:	2201      	movpl	r2, #1
   d91ce:	601a      	strpl	r2, [r3, #0]
   d91d0:	4b1e      	ldr	r3, [pc, #120]	; (d924c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d91d2:	681a      	ldr	r2, [r3, #0]
   d91d4:	07d0      	lsls	r0, r2, #31
   d91d6:	bf5c      	itt	pl
   d91d8:	2201      	movpl	r2, #1
   d91da:	601a      	strpl	r2, [r3, #0]
   d91dc:	4b1c      	ldr	r3, [pc, #112]	; (d9250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d91de:	681a      	ldr	r2, [r3, #0]
   d91e0:	07d1      	lsls	r1, r2, #31
   d91e2:	bf5c      	itt	pl
   d91e4:	2201      	movpl	r2, #1
   d91e6:	601a      	strpl	r2, [r3, #0]
   d91e8:	4b1a      	ldr	r3, [pc, #104]	; (d9254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d91ea:	681a      	ldr	r2, [r3, #0]
   d91ec:	07d2      	lsls	r2, r2, #31
   d91ee:	bf5c      	itt	pl
   d91f0:	2201      	movpl	r2, #1
   d91f2:	601a      	strpl	r2, [r3, #0]
   d91f4:	4b18      	ldr	r3, [pc, #96]	; (d9258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d91f6:	681a      	ldr	r2, [r3, #0]
   d91f8:	07d0      	lsls	r0, r2, #31
   d91fa:	bf5c      	itt	pl
   d91fc:	2201      	movpl	r2, #1
   d91fe:	601a      	strpl	r2, [r3, #0]
   d9200:	4b16      	ldr	r3, [pc, #88]	; (d925c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d9202:	681a      	ldr	r2, [r3, #0]
   d9204:	07d1      	lsls	r1, r2, #31
   d9206:	bf5c      	itt	pl
   d9208:	2201      	movpl	r2, #1
   d920a:	601a      	strpl	r2, [r3, #0]
   d920c:	4b14      	ldr	r3, [pc, #80]	; (d9260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d920e:	681a      	ldr	r2, [r3, #0]
   d9210:	07d2      	lsls	r2, r2, #31
   d9212:	bf5c      	itt	pl
   d9214:	2201      	movpl	r2, #1
   d9216:	601a      	strpl	r2, [r3, #0]
   d9218:	4b12      	ldr	r3, [pc, #72]	; (d9264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d921a:	681a      	ldr	r2, [r3, #0]
   d921c:	07d0      	lsls	r0, r2, #31
   d921e:	bf5c      	itt	pl
   d9220:	2201      	movpl	r2, #1
   d9222:	601a      	strpl	r2, [r3, #0]
   d9224:	4b10      	ldr	r3, [pc, #64]	; (d9268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d9226:	681a      	ldr	r2, [r3, #0]
   d9228:	07d1      	lsls	r1, r2, #31
   d922a:	bf5c      	itt	pl
   d922c:	2201      	movpl	r2, #1
   d922e:	601a      	strpl	r2, [r3, #0]
   d9230:	4b0e      	ldr	r3, [pc, #56]	; (d926c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d9232:	681a      	ldr	r2, [r3, #0]
   d9234:	07d2      	lsls	r2, r2, #31
   d9236:	bf5c      	itt	pl
   d9238:	2201      	movpl	r2, #1
   d923a:	601a      	strpl	r2, [r3, #0]
   d923c:	4770      	bx	lr
   d923e:	bf00      	nop
   d9240:	2003e774 	.word	0x2003e774
   d9244:	2003e770 	.word	0x2003e770
   d9248:	2003e76c 	.word	0x2003e76c
   d924c:	2003e768 	.word	0x2003e768
   d9250:	2003e764 	.word	0x2003e764
   d9254:	2003e760 	.word	0x2003e760
   d9258:	2003e75c 	.word	0x2003e75c
   d925c:	2003e758 	.word	0x2003e758
   d9260:	2003e754 	.word	0x2003e754
   d9264:	2003e750 	.word	0x2003e750
   d9268:	2003e74c 	.word	0x2003e74c
   d926c:	2003e748 	.word	0x2003e748

000d9270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9270:	4b24      	ldr	r3, [pc, #144]	; (d9304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9272:	681a      	ldr	r2, [r3, #0]
   d9274:	07d0      	lsls	r0, r2, #31
   d9276:	bf5c      	itt	pl
   d9278:	2201      	movpl	r2, #1
   d927a:	601a      	strpl	r2, [r3, #0]
   d927c:	4b22      	ldr	r3, [pc, #136]	; (d9308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d927e:	681a      	ldr	r2, [r3, #0]
   d9280:	07d1      	lsls	r1, r2, #31
   d9282:	bf5c      	itt	pl
   d9284:	2201      	movpl	r2, #1
   d9286:	601a      	strpl	r2, [r3, #0]
   d9288:	4b20      	ldr	r3, [pc, #128]	; (d930c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d928a:	681a      	ldr	r2, [r3, #0]
   d928c:	07d2      	lsls	r2, r2, #31
   d928e:	bf5c      	itt	pl
   d9290:	2201      	movpl	r2, #1
   d9292:	601a      	strpl	r2, [r3, #0]
   d9294:	4b1e      	ldr	r3, [pc, #120]	; (d9310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9296:	681a      	ldr	r2, [r3, #0]
   d9298:	07d0      	lsls	r0, r2, #31
   d929a:	bf5c      	itt	pl
   d929c:	2201      	movpl	r2, #1
   d929e:	601a      	strpl	r2, [r3, #0]
   d92a0:	4b1c      	ldr	r3, [pc, #112]	; (d9314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d92a2:	681a      	ldr	r2, [r3, #0]
   d92a4:	07d1      	lsls	r1, r2, #31
   d92a6:	bf5c      	itt	pl
   d92a8:	2201      	movpl	r2, #1
   d92aa:	601a      	strpl	r2, [r3, #0]
   d92ac:	4b1a      	ldr	r3, [pc, #104]	; (d9318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d92ae:	681a      	ldr	r2, [r3, #0]
   d92b0:	07d2      	lsls	r2, r2, #31
   d92b2:	bf5c      	itt	pl
   d92b4:	2201      	movpl	r2, #1
   d92b6:	601a      	strpl	r2, [r3, #0]
   d92b8:	4b18      	ldr	r3, [pc, #96]	; (d931c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d92ba:	681a      	ldr	r2, [r3, #0]
   d92bc:	07d0      	lsls	r0, r2, #31
   d92be:	bf5c      	itt	pl
   d92c0:	2201      	movpl	r2, #1
   d92c2:	601a      	strpl	r2, [r3, #0]
   d92c4:	4b16      	ldr	r3, [pc, #88]	; (d9320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d92c6:	681a      	ldr	r2, [r3, #0]
   d92c8:	07d1      	lsls	r1, r2, #31
   d92ca:	bf5c      	itt	pl
   d92cc:	2201      	movpl	r2, #1
   d92ce:	601a      	strpl	r2, [r3, #0]
   d92d0:	4b14      	ldr	r3, [pc, #80]	; (d9324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d92d2:	681a      	ldr	r2, [r3, #0]
   d92d4:	07d2      	lsls	r2, r2, #31
   d92d6:	bf5c      	itt	pl
   d92d8:	2201      	movpl	r2, #1
   d92da:	601a      	strpl	r2, [r3, #0]
   d92dc:	4b12      	ldr	r3, [pc, #72]	; (d9328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d92de:	681a      	ldr	r2, [r3, #0]
   d92e0:	07d0      	lsls	r0, r2, #31
   d92e2:	bf5c      	itt	pl
   d92e4:	2201      	movpl	r2, #1
   d92e6:	601a      	strpl	r2, [r3, #0]
   d92e8:	4b10      	ldr	r3, [pc, #64]	; (d932c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d92ea:	681a      	ldr	r2, [r3, #0]
   d92ec:	07d1      	lsls	r1, r2, #31
   d92ee:	bf5c      	itt	pl
   d92f0:	2201      	movpl	r2, #1
   d92f2:	601a      	strpl	r2, [r3, #0]
   d92f4:	4b0e      	ldr	r3, [pc, #56]	; (d9330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d92f6:	681a      	ldr	r2, [r3, #0]
   d92f8:	07d2      	lsls	r2, r2, #31
   d92fa:	bf5c      	itt	pl
   d92fc:	2201      	movpl	r2, #1
   d92fe:	601a      	strpl	r2, [r3, #0]
   d9300:	4770      	bx	lr
   d9302:	bf00      	nop
   d9304:	2003e7a4 	.word	0x2003e7a4
   d9308:	2003e7a0 	.word	0x2003e7a0
   d930c:	2003e79c 	.word	0x2003e79c
   d9310:	2003e798 	.word	0x2003e798
   d9314:	2003e794 	.word	0x2003e794
   d9318:	2003e790 	.word	0x2003e790
   d931c:	2003e78c 	.word	0x2003e78c
   d9320:	2003e788 	.word	0x2003e788
   d9324:	2003e784 	.word	0x2003e784
   d9328:	2003e780 	.word	0x2003e780
   d932c:	2003e77c 	.word	0x2003e77c
   d9330:	2003e778 	.word	0x2003e778

000d9334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9334:	4b18      	ldr	r3, [pc, #96]	; (d9398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9336:	681a      	ldr	r2, [r3, #0]
   d9338:	07d1      	lsls	r1, r2, #31
   d933a:	bf5c      	itt	pl
   d933c:	2201      	movpl	r2, #1
   d933e:	601a      	strpl	r2, [r3, #0]
   d9340:	4b16      	ldr	r3, [pc, #88]	; (d939c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9342:	681a      	ldr	r2, [r3, #0]
   d9344:	07d2      	lsls	r2, r2, #31
   d9346:	bf5c      	itt	pl
   d9348:	2201      	movpl	r2, #1
   d934a:	601a      	strpl	r2, [r3, #0]
   d934c:	4b14      	ldr	r3, [pc, #80]	; (d93a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d934e:	681a      	ldr	r2, [r3, #0]
   d9350:	07d0      	lsls	r0, r2, #31
   d9352:	bf5c      	itt	pl
   d9354:	2201      	movpl	r2, #1
   d9356:	601a      	strpl	r2, [r3, #0]
   d9358:	4b12      	ldr	r3, [pc, #72]	; (d93a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d935a:	681a      	ldr	r2, [r3, #0]
   d935c:	07d1      	lsls	r1, r2, #31
   d935e:	bf5c      	itt	pl
   d9360:	2201      	movpl	r2, #1
   d9362:	601a      	strpl	r2, [r3, #0]
   d9364:	4b10      	ldr	r3, [pc, #64]	; (d93a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9366:	681a      	ldr	r2, [r3, #0]
   d9368:	07d2      	lsls	r2, r2, #31
   d936a:	bf5c      	itt	pl
   d936c:	2201      	movpl	r2, #1
   d936e:	601a      	strpl	r2, [r3, #0]
   d9370:	4b0e      	ldr	r3, [pc, #56]	; (d93ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9372:	681a      	ldr	r2, [r3, #0]
   d9374:	07d0      	lsls	r0, r2, #31
   d9376:	bf5c      	itt	pl
   d9378:	2201      	movpl	r2, #1
   d937a:	601a      	strpl	r2, [r3, #0]
   d937c:	4b0c      	ldr	r3, [pc, #48]	; (d93b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d937e:	681a      	ldr	r2, [r3, #0]
   d9380:	07d1      	lsls	r1, r2, #31
   d9382:	bf5c      	itt	pl
   d9384:	2201      	movpl	r2, #1
   d9386:	601a      	strpl	r2, [r3, #0]
   d9388:	4b0a      	ldr	r3, [pc, #40]	; (d93b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d938a:	681a      	ldr	r2, [r3, #0]
   d938c:	07d2      	lsls	r2, r2, #31
   d938e:	bf5c      	itt	pl
   d9390:	2201      	movpl	r2, #1
   d9392:	601a      	strpl	r2, [r3, #0]
   d9394:	4770      	bx	lr
   d9396:	bf00      	nop
   d9398:	2003e7c4 	.word	0x2003e7c4
   d939c:	2003e7c0 	.word	0x2003e7c0
   d93a0:	2003e7bc 	.word	0x2003e7bc
   d93a4:	2003e7b8 	.word	0x2003e7b8
   d93a8:	2003e7b4 	.word	0x2003e7b4
   d93ac:	2003e7b0 	.word	0x2003e7b0
   d93b0:	2003e7ac 	.word	0x2003e7ac
   d93b4:	2003e7a8 	.word	0x2003e7a8

000d93b8 <__cxa_atexit>:
   d93b8:	b510      	push	{r4, lr}
   d93ba:	4c05      	ldr	r4, [pc, #20]	; (d93d0 <__cxa_atexit+0x18>)
   d93bc:	4613      	mov	r3, r2
   d93be:	b12c      	cbz	r4, d93cc <__cxa_atexit+0x14>
   d93c0:	460a      	mov	r2, r1
   d93c2:	4601      	mov	r1, r0
   d93c4:	2002      	movs	r0, #2
   d93c6:	f3af 8000 	nop.w
   d93ca:	bd10      	pop	{r4, pc}
   d93cc:	4620      	mov	r0, r4
   d93ce:	bd10      	pop	{r4, pc}
   d93d0:	00000000 	.word	0x00000000

000d93d4 <localtime>:
   d93d4:	b538      	push	{r3, r4, r5, lr}
   d93d6:	4b07      	ldr	r3, [pc, #28]	; (d93f4 <localtime+0x20>)
   d93d8:	681c      	ldr	r4, [r3, #0]
   d93da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d93dc:	4605      	mov	r5, r0
   d93de:	b91b      	cbnz	r3, d93e8 <localtime+0x14>
   d93e0:	2024      	movs	r0, #36	; 0x24
   d93e2:	f7fd fafd 	bl	d69e0 <malloc>
   d93e6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d93e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d93ea:	4628      	mov	r0, r5
   d93ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d93f0:	f000 b802 	b.w	d93f8 <localtime_r>
   d93f4:	2003d644 	.word	0x2003d644

000d93f8 <localtime_r>:
   d93f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d93fc:	460c      	mov	r4, r1
   d93fe:	4680      	mov	r8, r0
   d9400:	f000 fca0 	bl	d9d44 <__gettzinfo>
   d9404:	4621      	mov	r1, r4
   d9406:	4607      	mov	r7, r0
   d9408:	4640      	mov	r0, r8
   d940a:	f000 fc9f 	bl	d9d4c <gmtime_r>
   d940e:	6946      	ldr	r6, [r0, #20]
   d9410:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9414:	07b3      	lsls	r3, r6, #30
   d9416:	4604      	mov	r4, r0
   d9418:	d105      	bne.n	d9426 <localtime_r+0x2e>
   d941a:	2264      	movs	r2, #100	; 0x64
   d941c:	fb96 f3f2 	sdiv	r3, r6, r2
   d9420:	fb02 6313 	mls	r3, r2, r3, r6
   d9424:	b94b      	cbnz	r3, d943a <localtime_r+0x42>
   d9426:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d942a:	fb96 f3f5 	sdiv	r3, r6, r5
   d942e:	fb05 6513 	mls	r5, r5, r3, r6
   d9432:	fab5 f385 	clz	r3, r5
   d9436:	095b      	lsrs	r3, r3, #5
   d9438:	e000      	b.n	d943c <localtime_r+0x44>
   d943a:	2301      	movs	r3, #1
   d943c:	4a5f      	ldr	r2, [pc, #380]	; (d95bc <localtime_r+0x1c4>)
   d943e:	2530      	movs	r5, #48	; 0x30
   d9440:	fb05 2503 	mla	r5, r5, r3, r2
   d9444:	f000 fab2 	bl	d99ac <__tz_lock>
   d9448:	f000 fab2 	bl	d99b0 <_tzset_unlocked>
   d944c:	4b5c      	ldr	r3, [pc, #368]	; (d95c0 <localtime_r+0x1c8>)
   d944e:	681b      	ldr	r3, [r3, #0]
   d9450:	b1f3      	cbz	r3, d9490 <localtime_r+0x98>
   d9452:	687b      	ldr	r3, [r7, #4]
   d9454:	429e      	cmp	r6, r3
   d9456:	d105      	bne.n	d9464 <localtime_r+0x6c>
   d9458:	6839      	ldr	r1, [r7, #0]
   d945a:	f8d8 3000 	ldr.w	r3, [r8]
   d945e:	69fa      	ldr	r2, [r7, #28]
   d9460:	b941      	cbnz	r1, d9474 <localtime_r+0x7c>
   d9462:	e00a      	b.n	d947a <localtime_r+0x82>
   d9464:	4630      	mov	r0, r6
   d9466:	f000 f9f9 	bl	d985c <__tzcalc_limits>
   d946a:	2800      	cmp	r0, #0
   d946c:	d1f4      	bne.n	d9458 <localtime_r+0x60>
   d946e:	f04f 33ff 	mov.w	r3, #4294967295
   d9472:	e00d      	b.n	d9490 <localtime_r+0x98>
   d9474:	4293      	cmp	r3, r2
   d9476:	db08      	blt.n	d948a <localtime_r+0x92>
   d9478:	e001      	b.n	d947e <localtime_r+0x86>
   d947a:	4293      	cmp	r3, r2
   d947c:	da07      	bge.n	d948e <localtime_r+0x96>
   d947e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9480:	4293      	cmp	r3, r2
   d9482:	bfac      	ite	ge
   d9484:	2300      	movge	r3, #0
   d9486:	2301      	movlt	r3, #1
   d9488:	e002      	b.n	d9490 <localtime_r+0x98>
   d948a:	2300      	movs	r3, #0
   d948c:	e000      	b.n	d9490 <localtime_r+0x98>
   d948e:	2301      	movs	r3, #1
   d9490:	6223      	str	r3, [r4, #32]
   d9492:	6a23      	ldr	r3, [r4, #32]
   d9494:	2b01      	cmp	r3, #1
   d9496:	bf0c      	ite	eq
   d9498:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d949a:	6a39      	ldrne	r1, [r7, #32]
   d949c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d94a0:	203c      	movs	r0, #60	; 0x3c
   d94a2:	fb91 f6f3 	sdiv	r6, r1, r3
   d94a6:	fb03 1316 	mls	r3, r3, r6, r1
   d94aa:	6861      	ldr	r1, [r4, #4]
   d94ac:	fb93 f2f0 	sdiv	r2, r3, r0
   d94b0:	fb00 3012 	mls	r0, r0, r2, r3
   d94b4:	6823      	ldr	r3, [r4, #0]
   d94b6:	1a89      	subs	r1, r1, r2
   d94b8:	68a2      	ldr	r2, [r4, #8]
   d94ba:	6061      	str	r1, [r4, #4]
   d94bc:	1a1b      	subs	r3, r3, r0
   d94be:	1b92      	subs	r2, r2, r6
   d94c0:	2b3b      	cmp	r3, #59	; 0x3b
   d94c2:	6023      	str	r3, [r4, #0]
   d94c4:	60a2      	str	r2, [r4, #8]
   d94c6:	dd03      	ble.n	d94d0 <localtime_r+0xd8>
   d94c8:	3101      	adds	r1, #1
   d94ca:	6061      	str	r1, [r4, #4]
   d94cc:	3b3c      	subs	r3, #60	; 0x3c
   d94ce:	e004      	b.n	d94da <localtime_r+0xe2>
   d94d0:	2b00      	cmp	r3, #0
   d94d2:	da03      	bge.n	d94dc <localtime_r+0xe4>
   d94d4:	3901      	subs	r1, #1
   d94d6:	6061      	str	r1, [r4, #4]
   d94d8:	333c      	adds	r3, #60	; 0x3c
   d94da:	6023      	str	r3, [r4, #0]
   d94dc:	6863      	ldr	r3, [r4, #4]
   d94de:	2b3b      	cmp	r3, #59	; 0x3b
   d94e0:	dd03      	ble.n	d94ea <localtime_r+0xf2>
   d94e2:	3201      	adds	r2, #1
   d94e4:	60a2      	str	r2, [r4, #8]
   d94e6:	3b3c      	subs	r3, #60	; 0x3c
   d94e8:	e004      	b.n	d94f4 <localtime_r+0xfc>
   d94ea:	2b00      	cmp	r3, #0
   d94ec:	da03      	bge.n	d94f6 <localtime_r+0xfe>
   d94ee:	3a01      	subs	r2, #1
   d94f0:	60a2      	str	r2, [r4, #8]
   d94f2:	333c      	adds	r3, #60	; 0x3c
   d94f4:	6063      	str	r3, [r4, #4]
   d94f6:	68a3      	ldr	r3, [r4, #8]
   d94f8:	2b17      	cmp	r3, #23
   d94fa:	dd22      	ble.n	d9542 <localtime_r+0x14a>
   d94fc:	69e2      	ldr	r2, [r4, #28]
   d94fe:	3201      	adds	r2, #1
   d9500:	61e2      	str	r2, [r4, #28]
   d9502:	69a2      	ldr	r2, [r4, #24]
   d9504:	3201      	adds	r2, #1
   d9506:	2a06      	cmp	r2, #6
   d9508:	bfc8      	it	gt
   d950a:	2200      	movgt	r2, #0
   d950c:	61a2      	str	r2, [r4, #24]
   d950e:	68e2      	ldr	r2, [r4, #12]
   d9510:	3b18      	subs	r3, #24
   d9512:	3201      	adds	r2, #1
   d9514:	60a3      	str	r3, [r4, #8]
   d9516:	6923      	ldr	r3, [r4, #16]
   d9518:	60e2      	str	r2, [r4, #12]
   d951a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d951e:	428a      	cmp	r2, r1
   d9520:	dd46      	ble.n	d95b0 <localtime_r+0x1b8>
   d9522:	3301      	adds	r3, #1
   d9524:	2b0c      	cmp	r3, #12
   d9526:	bf0c      	ite	eq
   d9528:	6963      	ldreq	r3, [r4, #20]
   d952a:	6123      	strne	r3, [r4, #16]
   d952c:	eba2 0201 	sub.w	r2, r2, r1
   d9530:	60e2      	str	r2, [r4, #12]
   d9532:	bf01      	itttt	eq
   d9534:	3301      	addeq	r3, #1
   d9536:	2200      	moveq	r2, #0
   d9538:	6122      	streq	r2, [r4, #16]
   d953a:	6163      	streq	r3, [r4, #20]
   d953c:	bf08      	it	eq
   d953e:	61e2      	streq	r2, [r4, #28]
   d9540:	e036      	b.n	d95b0 <localtime_r+0x1b8>
   d9542:	2b00      	cmp	r3, #0
   d9544:	da34      	bge.n	d95b0 <localtime_r+0x1b8>
   d9546:	69e2      	ldr	r2, [r4, #28]
   d9548:	3a01      	subs	r2, #1
   d954a:	61e2      	str	r2, [r4, #28]
   d954c:	69a2      	ldr	r2, [r4, #24]
   d954e:	3a01      	subs	r2, #1
   d9550:	bf48      	it	mi
   d9552:	2206      	movmi	r2, #6
   d9554:	61a2      	str	r2, [r4, #24]
   d9556:	68e2      	ldr	r2, [r4, #12]
   d9558:	3318      	adds	r3, #24
   d955a:	3a01      	subs	r2, #1
   d955c:	60e2      	str	r2, [r4, #12]
   d955e:	60a3      	str	r3, [r4, #8]
   d9560:	bb32      	cbnz	r2, d95b0 <localtime_r+0x1b8>
   d9562:	6923      	ldr	r3, [r4, #16]
   d9564:	3b01      	subs	r3, #1
   d9566:	d401      	bmi.n	d956c <localtime_r+0x174>
   d9568:	6123      	str	r3, [r4, #16]
   d956a:	e01d      	b.n	d95a8 <localtime_r+0x1b0>
   d956c:	230b      	movs	r3, #11
   d956e:	6123      	str	r3, [r4, #16]
   d9570:	6963      	ldr	r3, [r4, #20]
   d9572:	1e5a      	subs	r2, r3, #1
   d9574:	f012 0f03 	tst.w	r2, #3
   d9578:	6162      	str	r2, [r4, #20]
   d957a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d957e:	d105      	bne.n	d958c <localtime_r+0x194>
   d9580:	2164      	movs	r1, #100	; 0x64
   d9582:	fb93 f2f1 	sdiv	r2, r3, r1
   d9586:	fb01 3212 	mls	r2, r1, r2, r3
   d958a:	b94a      	cbnz	r2, d95a0 <localtime_r+0x1a8>
   d958c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9590:	fb93 f2f1 	sdiv	r2, r3, r1
   d9594:	fb01 3312 	mls	r3, r1, r2, r3
   d9598:	fab3 f383 	clz	r3, r3
   d959c:	095b      	lsrs	r3, r3, #5
   d959e:	e000      	b.n	d95a2 <localtime_r+0x1aa>
   d95a0:	2301      	movs	r3, #1
   d95a2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d95a6:	61e3      	str	r3, [r4, #28]
   d95a8:	6923      	ldr	r3, [r4, #16]
   d95aa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d95ae:	60e3      	str	r3, [r4, #12]
   d95b0:	f000 f9fd 	bl	d99ae <__tz_unlock>
   d95b4:	4620      	mov	r0, r4
   d95b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d95ba:	bf00      	nop
   d95bc:	000da894 	.word	0x000da894
   d95c0:	2003e7e4 	.word	0x2003e7e4

000d95c4 <memcmp>:
   d95c4:	b510      	push	{r4, lr}
   d95c6:	3901      	subs	r1, #1
   d95c8:	4402      	add	r2, r0
   d95ca:	4290      	cmp	r0, r2
   d95cc:	d007      	beq.n	d95de <memcmp+0x1a>
   d95ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   d95d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d95d6:	42a3      	cmp	r3, r4
   d95d8:	d0f7      	beq.n	d95ca <memcmp+0x6>
   d95da:	1b18      	subs	r0, r3, r4
   d95dc:	bd10      	pop	{r4, pc}
   d95de:	2000      	movs	r0, #0
   d95e0:	bd10      	pop	{r4, pc}

000d95e2 <memcpy>:
   d95e2:	b510      	push	{r4, lr}
   d95e4:	1e43      	subs	r3, r0, #1
   d95e6:	440a      	add	r2, r1
   d95e8:	4291      	cmp	r1, r2
   d95ea:	d004      	beq.n	d95f6 <memcpy+0x14>
   d95ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   d95f0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d95f4:	e7f8      	b.n	d95e8 <memcpy+0x6>
   d95f6:	bd10      	pop	{r4, pc}

000d95f8 <memmove>:
   d95f8:	4288      	cmp	r0, r1
   d95fa:	b510      	push	{r4, lr}
   d95fc:	eb01 0302 	add.w	r3, r1, r2
   d9600:	d801      	bhi.n	d9606 <memmove+0xe>
   d9602:	1e42      	subs	r2, r0, #1
   d9604:	e00b      	b.n	d961e <memmove+0x26>
   d9606:	4298      	cmp	r0, r3
   d9608:	d2fb      	bcs.n	d9602 <memmove+0xa>
   d960a:	1881      	adds	r1, r0, r2
   d960c:	1ad2      	subs	r2, r2, r3
   d960e:	42d3      	cmn	r3, r2
   d9610:	d004      	beq.n	d961c <memmove+0x24>
   d9612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9616:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d961a:	e7f8      	b.n	d960e <memmove+0x16>
   d961c:	bd10      	pop	{r4, pc}
   d961e:	4299      	cmp	r1, r3
   d9620:	d004      	beq.n	d962c <memmove+0x34>
   d9622:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9626:	f802 4f01 	strb.w	r4, [r2, #1]!
   d962a:	e7f8      	b.n	d961e <memmove+0x26>
   d962c:	bd10      	pop	{r4, pc}

000d962e <memset>:
   d962e:	4402      	add	r2, r0
   d9630:	4603      	mov	r3, r0
   d9632:	4293      	cmp	r3, r2
   d9634:	d002      	beq.n	d963c <memset+0xe>
   d9636:	f803 1b01 	strb.w	r1, [r3], #1
   d963a:	e7fa      	b.n	d9632 <memset+0x4>
   d963c:	4770      	bx	lr
	...

000d9640 <srand>:
   d9640:	b538      	push	{r3, r4, r5, lr}
   d9642:	4b12      	ldr	r3, [pc, #72]	; (d968c <srand+0x4c>)
   d9644:	681c      	ldr	r4, [r3, #0]
   d9646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9648:	4605      	mov	r5, r0
   d964a:	b9d3      	cbnz	r3, d9682 <srand+0x42>
   d964c:	2018      	movs	r0, #24
   d964e:	f7fd f9c7 	bl	d69e0 <malloc>
   d9652:	f243 330e 	movw	r3, #13070	; 0x330e
   d9656:	63a0      	str	r0, [r4, #56]	; 0x38
   d9658:	8003      	strh	r3, [r0, #0]
   d965a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d965e:	8043      	strh	r3, [r0, #2]
   d9660:	f241 2334 	movw	r3, #4660	; 0x1234
   d9664:	8083      	strh	r3, [r0, #4]
   d9666:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d966a:	80c3      	strh	r3, [r0, #6]
   d966c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9670:	8103      	strh	r3, [r0, #8]
   d9672:	2305      	movs	r3, #5
   d9674:	8143      	strh	r3, [r0, #10]
   d9676:	230b      	movs	r3, #11
   d9678:	8183      	strh	r3, [r0, #12]
   d967a:	2201      	movs	r2, #1
   d967c:	2300      	movs	r3, #0
   d967e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9684:	2200      	movs	r2, #0
   d9686:	611d      	str	r5, [r3, #16]
   d9688:	615a      	str	r2, [r3, #20]
   d968a:	bd38      	pop	{r3, r4, r5, pc}
   d968c:	2003d644 	.word	0x2003d644

000d9690 <strcat>:
   d9690:	b510      	push	{r4, lr}
   d9692:	4602      	mov	r2, r0
   d9694:	4613      	mov	r3, r2
   d9696:	3201      	adds	r2, #1
   d9698:	781c      	ldrb	r4, [r3, #0]
   d969a:	2c00      	cmp	r4, #0
   d969c:	d1fa      	bne.n	d9694 <strcat+0x4>
   d969e:	3b01      	subs	r3, #1
   d96a0:	f811 2b01 	ldrb.w	r2, [r1], #1
   d96a4:	f803 2f01 	strb.w	r2, [r3, #1]!
   d96a8:	2a00      	cmp	r2, #0
   d96aa:	d1f9      	bne.n	d96a0 <strcat+0x10>
   d96ac:	bd10      	pop	{r4, pc}

000d96ae <strcmp>:
   d96ae:	f810 2b01 	ldrb.w	r2, [r0], #1
   d96b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   d96b6:	2a01      	cmp	r2, #1
   d96b8:	bf28      	it	cs
   d96ba:	429a      	cmpcs	r2, r3
   d96bc:	d0f7      	beq.n	d96ae <strcmp>
   d96be:	1ad0      	subs	r0, r2, r3
   d96c0:	4770      	bx	lr

000d96c2 <strcpy>:
   d96c2:	4603      	mov	r3, r0
   d96c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   d96c8:	f803 2b01 	strb.w	r2, [r3], #1
   d96cc:	2a00      	cmp	r2, #0
   d96ce:	d1f9      	bne.n	d96c4 <strcpy+0x2>
   d96d0:	4770      	bx	lr

000d96d2 <strlen>:
   d96d2:	4603      	mov	r3, r0
   d96d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d96d8:	2a00      	cmp	r2, #0
   d96da:	d1fb      	bne.n	d96d4 <strlen+0x2>
   d96dc:	1a18      	subs	r0, r3, r0
   d96de:	3801      	subs	r0, #1
   d96e0:	4770      	bx	lr

000d96e2 <strncmp>:
   d96e2:	b530      	push	{r4, r5, lr}
   d96e4:	b182      	cbz	r2, d9708 <strncmp+0x26>
   d96e6:	1e45      	subs	r5, r0, #1
   d96e8:	3901      	subs	r1, #1
   d96ea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d96ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d96f2:	42a3      	cmp	r3, r4
   d96f4:	d106      	bne.n	d9704 <strncmp+0x22>
   d96f6:	43ec      	mvns	r4, r5
   d96f8:	4414      	add	r4, r2
   d96fa:	42e0      	cmn	r0, r4
   d96fc:	d001      	beq.n	d9702 <strncmp+0x20>
   d96fe:	2b00      	cmp	r3, #0
   d9700:	d1f3      	bne.n	d96ea <strncmp+0x8>
   d9702:	461c      	mov	r4, r3
   d9704:	1b18      	subs	r0, r3, r4
   d9706:	bd30      	pop	{r4, r5, pc}
   d9708:	4610      	mov	r0, r2
   d970a:	bd30      	pop	{r4, r5, pc}

000d970c <strncpy>:
   d970c:	b510      	push	{r4, lr}
   d970e:	4603      	mov	r3, r0
   d9710:	b142      	cbz	r2, d9724 <strncpy+0x18>
   d9712:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9716:	f803 4b01 	strb.w	r4, [r3], #1
   d971a:	3a01      	subs	r2, #1
   d971c:	2c00      	cmp	r4, #0
   d971e:	d1f7      	bne.n	d9710 <strncpy+0x4>
   d9720:	441a      	add	r2, r3
   d9722:	e000      	b.n	d9726 <strncpy+0x1a>
   d9724:	bd10      	pop	{r4, pc}
   d9726:	4293      	cmp	r3, r2
   d9728:	d002      	beq.n	d9730 <strncpy+0x24>
   d972a:	f803 4b01 	strb.w	r4, [r3], #1
   d972e:	e7fa      	b.n	d9726 <strncpy+0x1a>
   d9730:	bd10      	pop	{r4, pc}

000d9732 <strnlen>:
   d9732:	b510      	push	{r4, lr}
   d9734:	4603      	mov	r3, r0
   d9736:	4401      	add	r1, r0
   d9738:	428b      	cmp	r3, r1
   d973a:	d004      	beq.n	d9746 <strnlen+0x14>
   d973c:	781a      	ldrb	r2, [r3, #0]
   d973e:	1c5c      	adds	r4, r3, #1
   d9740:	b10a      	cbz	r2, d9746 <strnlen+0x14>
   d9742:	4623      	mov	r3, r4
   d9744:	e7f8      	b.n	d9738 <strnlen+0x6>
   d9746:	1a18      	subs	r0, r3, r0
   d9748:	bd10      	pop	{r4, pc}
	...

000d974c <_strtoul_r>:
   d974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9750:	4680      	mov	r8, r0
   d9752:	483c      	ldr	r0, [pc, #240]	; (d9844 <_strtoul_r+0xf8>)
   d9754:	f8d0 9000 	ldr.w	r9, [r0]
   d9758:	460e      	mov	r6, r1
   d975a:	4635      	mov	r5, r6
   d975c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9760:	eb09 0004 	add.w	r0, r9, r4
   d9764:	7840      	ldrb	r0, [r0, #1]
   d9766:	f000 0008 	and.w	r0, r0, #8
   d976a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d976e:	b108      	cbz	r0, d9774 <_strtoul_r+0x28>
   d9770:	462e      	mov	r6, r5
   d9772:	e7f2      	b.n	d975a <_strtoul_r+0xe>
   d9774:	2c2d      	cmp	r4, #45	; 0x2d
   d9776:	d103      	bne.n	d9780 <_strtoul_r+0x34>
   d9778:	1cb5      	adds	r5, r6, #2
   d977a:	7874      	ldrb	r4, [r6, #1]
   d977c:	2701      	movs	r7, #1
   d977e:	e003      	b.n	d9788 <_strtoul_r+0x3c>
   d9780:	2c2b      	cmp	r4, #43	; 0x2b
   d9782:	bf04      	itt	eq
   d9784:	7874      	ldrbeq	r4, [r6, #1]
   d9786:	1cb5      	addeq	r5, r6, #2
   d9788:	b113      	cbz	r3, d9790 <_strtoul_r+0x44>
   d978a:	2b10      	cmp	r3, #16
   d978c:	d10a      	bne.n	d97a4 <_strtoul_r+0x58>
   d978e:	e053      	b.n	d9838 <_strtoul_r+0xec>
   d9790:	2c30      	cmp	r4, #48	; 0x30
   d9792:	d14f      	bne.n	d9834 <_strtoul_r+0xe8>
   d9794:	7828      	ldrb	r0, [r5, #0]
   d9796:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d979a:	2858      	cmp	r0, #88	; 0x58
   d979c:	d145      	bne.n	d982a <_strtoul_r+0xde>
   d979e:	786c      	ldrb	r4, [r5, #1]
   d97a0:	2310      	movs	r3, #16
   d97a2:	3502      	adds	r5, #2
   d97a4:	f04f 3cff 	mov.w	ip, #4294967295
   d97a8:	2600      	movs	r6, #0
   d97aa:	fbbc fcf3 	udiv	ip, ip, r3
   d97ae:	fb03 fa0c 	mul.w	sl, r3, ip
   d97b2:	ea6f 0a0a 	mvn.w	sl, sl
   d97b6:	4630      	mov	r0, r6
   d97b8:	eb09 0e04 	add.w	lr, r9, r4
   d97bc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d97c0:	f01e 0f04 	tst.w	lr, #4
   d97c4:	d001      	beq.n	d97ca <_strtoul_r+0x7e>
   d97c6:	3c30      	subs	r4, #48	; 0x30
   d97c8:	e00b      	b.n	d97e2 <_strtoul_r+0x96>
   d97ca:	f01e 0e03 	ands.w	lr, lr, #3
   d97ce:	d01a      	beq.n	d9806 <_strtoul_r+0xba>
   d97d0:	f1be 0f01 	cmp.w	lr, #1
   d97d4:	bf0c      	ite	eq
   d97d6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d97da:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d97de:	ebce 0404 	rsb	r4, lr, r4
   d97e2:	42a3      	cmp	r3, r4
   d97e4:	dd0f      	ble.n	d9806 <_strtoul_r+0xba>
   d97e6:	2e00      	cmp	r6, #0
   d97e8:	db08      	blt.n	d97fc <_strtoul_r+0xb0>
   d97ea:	4560      	cmp	r0, ip
   d97ec:	d806      	bhi.n	d97fc <_strtoul_r+0xb0>
   d97ee:	d101      	bne.n	d97f4 <_strtoul_r+0xa8>
   d97f0:	4554      	cmp	r4, sl
   d97f2:	dc03      	bgt.n	d97fc <_strtoul_r+0xb0>
   d97f4:	fb03 4000 	mla	r0, r3, r0, r4
   d97f8:	2601      	movs	r6, #1
   d97fa:	e001      	b.n	d9800 <_strtoul_r+0xb4>
   d97fc:	f04f 36ff 	mov.w	r6, #4294967295
   d9800:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9804:	e7d8      	b.n	d97b8 <_strtoul_r+0x6c>
   d9806:	2e00      	cmp	r6, #0
   d9808:	da07      	bge.n	d981a <_strtoul_r+0xce>
   d980a:	2322      	movs	r3, #34	; 0x22
   d980c:	f8c8 3000 	str.w	r3, [r8]
   d9810:	f04f 30ff 	mov.w	r0, #4294967295
   d9814:	b92a      	cbnz	r2, d9822 <_strtoul_r+0xd6>
   d9816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d981a:	b107      	cbz	r7, d981e <_strtoul_r+0xd2>
   d981c:	4240      	negs	r0, r0
   d981e:	b172      	cbz	r2, d983e <_strtoul_r+0xf2>
   d9820:	b106      	cbz	r6, d9824 <_strtoul_r+0xd8>
   d9822:	1e69      	subs	r1, r5, #1
   d9824:	6011      	str	r1, [r2, #0]
   d9826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d982a:	2430      	movs	r4, #48	; 0x30
   d982c:	2b00      	cmp	r3, #0
   d982e:	d1b9      	bne.n	d97a4 <_strtoul_r+0x58>
   d9830:	2308      	movs	r3, #8
   d9832:	e7b7      	b.n	d97a4 <_strtoul_r+0x58>
   d9834:	230a      	movs	r3, #10
   d9836:	e7b5      	b.n	d97a4 <_strtoul_r+0x58>
   d9838:	2c30      	cmp	r4, #48	; 0x30
   d983a:	d0ab      	beq.n	d9794 <_strtoul_r+0x48>
   d983c:	e7b2      	b.n	d97a4 <_strtoul_r+0x58>
   d983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9842:	bf00      	nop
   d9844:	2003d5e0 	.word	0x2003d5e0

000d9848 <strtoul>:
   d9848:	4613      	mov	r3, r2
   d984a:	460a      	mov	r2, r1
   d984c:	4601      	mov	r1, r0
   d984e:	4802      	ldr	r0, [pc, #8]	; (d9858 <strtoul+0x10>)
   d9850:	6800      	ldr	r0, [r0, #0]
   d9852:	f7ff bf7b 	b.w	d974c <_strtoul_r>
   d9856:	bf00      	nop
   d9858:	2003d644 	.word	0x2003d644

000d985c <__tzcalc_limits>:
   d985c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9860:	4604      	mov	r4, r0
   d9862:	f000 fa6f 	bl	d9d44 <__gettzinfo>
   d9866:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d986a:	429c      	cmp	r4, r3
   d986c:	f340 8096 	ble.w	d999c <__tzcalc_limits+0x140>
   d9870:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9874:	18e3      	adds	r3, r4, r3
   d9876:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d987a:	109b      	asrs	r3, r3, #2
   d987c:	f240 156d 	movw	r5, #365	; 0x16d
   d9880:	fb05 3502 	mla	r5, r5, r2, r3
   d9884:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d9888:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d988c:	fb92 f3f3 	sdiv	r3, r2, r3
   d9890:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9894:	442b      	add	r3, r5
   d9896:	18a5      	adds	r5, r4, r2
   d9898:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d989c:	fb95 f5f2 	sdiv	r5, r5, r2
   d98a0:	441d      	add	r5, r3
   d98a2:	2364      	movs	r3, #100	; 0x64
   d98a4:	fb94 f7f2 	sdiv	r7, r4, r2
   d98a8:	fb94 f6f3 	sdiv	r6, r4, r3
   d98ac:	fb02 4717 	mls	r7, r2, r7, r4
   d98b0:	fb03 4616 	mls	r6, r3, r6, r4
   d98b4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d98b8:	fab7 fe87 	clz	lr, r7
   d98bc:	9301      	str	r3, [sp, #4]
   d98be:	f004 0303 	and.w	r3, r4, #3
   d98c2:	6044      	str	r4, [r0, #4]
   d98c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d98c8:	4601      	mov	r1, r0
   d98ca:	9300      	str	r3, [sp, #0]
   d98cc:	f04f 0c07 	mov.w	ip, #7
   d98d0:	7a0b      	ldrb	r3, [r1, #8]
   d98d2:	2b4a      	cmp	r3, #74	; 0x4a
   d98d4:	d10e      	bne.n	d98f4 <__tzcalc_limits+0x98>
   d98d6:	694b      	ldr	r3, [r1, #20]
   d98d8:	9a00      	ldr	r2, [sp, #0]
   d98da:	18ec      	adds	r4, r5, r3
   d98dc:	b902      	cbnz	r2, d98e0 <__tzcalc_limits+0x84>
   d98de:	b906      	cbnz	r6, d98e2 <__tzcalc_limits+0x86>
   d98e0:	b927      	cbnz	r7, d98ec <__tzcalc_limits+0x90>
   d98e2:	2b3b      	cmp	r3, #59	; 0x3b
   d98e4:	bfd4      	ite	le
   d98e6:	2300      	movle	r3, #0
   d98e8:	2301      	movgt	r3, #1
   d98ea:	e000      	b.n	d98ee <__tzcalc_limits+0x92>
   d98ec:	2300      	movs	r3, #0
   d98ee:	4423      	add	r3, r4
   d98f0:	3b01      	subs	r3, #1
   d98f2:	e03f      	b.n	d9974 <__tzcalc_limits+0x118>
   d98f4:	2b44      	cmp	r3, #68	; 0x44
   d98f6:	d102      	bne.n	d98fe <__tzcalc_limits+0xa2>
   d98f8:	694b      	ldr	r3, [r1, #20]
   d98fa:	442b      	add	r3, r5
   d98fc:	e03a      	b.n	d9974 <__tzcalc_limits+0x118>
   d98fe:	9b00      	ldr	r3, [sp, #0]
   d9900:	b92b      	cbnz	r3, d990e <__tzcalc_limits+0xb2>
   d9902:	2e00      	cmp	r6, #0
   d9904:	bf0c      	ite	eq
   d9906:	46f0      	moveq	r8, lr
   d9908:	f04f 0801 	movne.w	r8, #1
   d990c:	e000      	b.n	d9910 <__tzcalc_limits+0xb4>
   d990e:	46f0      	mov	r8, lr
   d9910:	4b24      	ldr	r3, [pc, #144]	; (d99a4 <__tzcalc_limits+0x148>)
   d9912:	68cc      	ldr	r4, [r1, #12]
   d9914:	2230      	movs	r2, #48	; 0x30
   d9916:	fb02 3808 	mla	r8, r2, r8, r3
   d991a:	f1a8 0a04 	sub.w	sl, r8, #4
   d991e:	46a9      	mov	r9, r5
   d9920:	2301      	movs	r3, #1
   d9922:	42a3      	cmp	r3, r4
   d9924:	da04      	bge.n	d9930 <__tzcalc_limits+0xd4>
   d9926:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d992a:	3301      	adds	r3, #1
   d992c:	44d9      	add	r9, fp
   d992e:	e7f8      	b.n	d9922 <__tzcalc_limits+0xc6>
   d9930:	f109 0304 	add.w	r3, r9, #4
   d9934:	fb93 fbfc 	sdiv	fp, r3, ip
   d9938:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d993c:	2c01      	cmp	r4, #1
   d993e:	ebca 0a03 	rsb	sl, sl, r3
   d9942:	694b      	ldr	r3, [r1, #20]
   d9944:	bfb8      	it	lt
   d9946:	2401      	movlt	r4, #1
   d9948:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d994c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9950:	690b      	ldr	r3, [r1, #16]
   d9952:	f104 34ff 	add.w	r4, r4, #4294967295
   d9956:	f103 33ff 	add.w	r3, r3, #4294967295
   d995a:	bf48      	it	mi
   d995c:	f10a 0a07 	addmi.w	sl, sl, #7
   d9960:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9964:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9968:	4453      	add	r3, sl
   d996a:	42a3      	cmp	r3, r4
   d996c:	db01      	blt.n	d9972 <__tzcalc_limits+0x116>
   d996e:	3b07      	subs	r3, #7
   d9970:	e7fb      	b.n	d996a <__tzcalc_limits+0x10e>
   d9972:	444b      	add	r3, r9
   d9974:	698c      	ldr	r4, [r1, #24]
   d9976:	4a0c      	ldr	r2, [pc, #48]	; (d99a8 <__tzcalc_limits+0x14c>)
   d9978:	fb02 4303 	mla	r3, r2, r3, r4
   d997c:	6a0c      	ldr	r4, [r1, #32]
   d997e:	4423      	add	r3, r4
   d9980:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9984:	9b01      	ldr	r3, [sp, #4]
   d9986:	4299      	cmp	r1, r3
   d9988:	d1a2      	bne.n	d98d0 <__tzcalc_limits+0x74>
   d998a:	69c3      	ldr	r3, [r0, #28]
   d998c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d998e:	4293      	cmp	r3, r2
   d9990:	bfac      	ite	ge
   d9992:	2300      	movge	r3, #0
   d9994:	2301      	movlt	r3, #1
   d9996:	6003      	str	r3, [r0, #0]
   d9998:	2001      	movs	r0, #1
   d999a:	e000      	b.n	d999e <__tzcalc_limits+0x142>
   d999c:	2000      	movs	r0, #0
   d999e:	b003      	add	sp, #12
   d99a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d99a4:	000da894 	.word	0x000da894
   d99a8:	00015180 	.word	0x00015180

000d99ac <__tz_lock>:
   d99ac:	4770      	bx	lr

000d99ae <__tz_unlock>:
   d99ae:	4770      	bx	lr

000d99b0 <_tzset_unlocked>:
   d99b0:	4b01      	ldr	r3, [pc, #4]	; (d99b8 <_tzset_unlocked+0x8>)
   d99b2:	6818      	ldr	r0, [r3, #0]
   d99b4:	f000 b802 	b.w	d99bc <_tzset_unlocked_r>
   d99b8:	2003d644 	.word	0x2003d644

000d99bc <_tzset_unlocked_r>:
   d99bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99c0:	b08d      	sub	sp, #52	; 0x34
   d99c2:	4607      	mov	r7, r0
   d99c4:	f000 f9be 	bl	d9d44 <__gettzinfo>
   d99c8:	49b0      	ldr	r1, [pc, #704]	; (d9c8c <_tzset_unlocked_r+0x2d0>)
   d99ca:	4eb1      	ldr	r6, [pc, #708]	; (d9c90 <_tzset_unlocked_r+0x2d4>)
   d99cc:	4604      	mov	r4, r0
   d99ce:	4638      	mov	r0, r7
   d99d0:	f000 f9b0 	bl	d9d34 <_getenv_r>
   d99d4:	4605      	mov	r5, r0
   d99d6:	b960      	cbnz	r0, d99f2 <_tzset_unlocked_r+0x36>
   d99d8:	4bae      	ldr	r3, [pc, #696]	; (d9c94 <_tzset_unlocked_r+0x2d8>)
   d99da:	4aaf      	ldr	r2, [pc, #700]	; (d9c98 <_tzset_unlocked_r+0x2dc>)
   d99dc:	6018      	str	r0, [r3, #0]
   d99de:	4baf      	ldr	r3, [pc, #700]	; (d9c9c <_tzset_unlocked_r+0x2e0>)
   d99e0:	6018      	str	r0, [r3, #0]
   d99e2:	4baf      	ldr	r3, [pc, #700]	; (d9ca0 <_tzset_unlocked_r+0x2e4>)
   d99e4:	6830      	ldr	r0, [r6, #0]
   d99e6:	601a      	str	r2, [r3, #0]
   d99e8:	605a      	str	r2, [r3, #4]
   d99ea:	f7fd f801 	bl	d69f0 <free>
   d99ee:	6035      	str	r5, [r6, #0]
   d99f0:	e148      	b.n	d9c84 <_tzset_unlocked_r+0x2c8>
   d99f2:	6831      	ldr	r1, [r6, #0]
   d99f4:	b979      	cbnz	r1, d9a16 <_tzset_unlocked_r+0x5a>
   d99f6:	6830      	ldr	r0, [r6, #0]
   d99f8:	f7fc fffa 	bl	d69f0 <free>
   d99fc:	4628      	mov	r0, r5
   d99fe:	f7ff fe68 	bl	d96d2 <strlen>
   d9a02:	1c41      	adds	r1, r0, #1
   d9a04:	4638      	mov	r0, r7
   d9a06:	f7fd f81b 	bl	d6a40 <_malloc_r>
   d9a0a:	6030      	str	r0, [r6, #0]
   d9a0c:	b148      	cbz	r0, d9a22 <_tzset_unlocked_r+0x66>
   d9a0e:	4629      	mov	r1, r5
   d9a10:	f7ff fe57 	bl	d96c2 <strcpy>
   d9a14:	e005      	b.n	d9a22 <_tzset_unlocked_r+0x66>
   d9a16:	f7ff fe4a 	bl	d96ae <strcmp>
   d9a1a:	2800      	cmp	r0, #0
   d9a1c:	f000 8132 	beq.w	d9c84 <_tzset_unlocked_r+0x2c8>
   d9a20:	e7e9      	b.n	d99f6 <_tzset_unlocked_r+0x3a>
   d9a22:	782b      	ldrb	r3, [r5, #0]
   d9a24:	4a9f      	ldr	r2, [pc, #636]	; (d9ca4 <_tzset_unlocked_r+0x2e8>)
   d9a26:	49a0      	ldr	r1, [pc, #640]	; (d9ca8 <_tzset_unlocked_r+0x2ec>)
   d9a28:	2b3a      	cmp	r3, #58	; 0x3a
   d9a2a:	bf08      	it	eq
   d9a2c:	3501      	addeq	r5, #1
   d9a2e:	ae0a      	add	r6, sp, #40	; 0x28
   d9a30:	4633      	mov	r3, r6
   d9a32:	4628      	mov	r0, r5
   d9a34:	f7fc ffec 	bl	d6a10 <siscanf>
   d9a38:	2800      	cmp	r0, #0
   d9a3a:	f340 8123 	ble.w	d9c84 <_tzset_unlocked_r+0x2c8>
   d9a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9a40:	18ef      	adds	r7, r5, r3
   d9a42:	5ceb      	ldrb	r3, [r5, r3]
   d9a44:	2b2d      	cmp	r3, #45	; 0x2d
   d9a46:	d103      	bne.n	d9a50 <_tzset_unlocked_r+0x94>
   d9a48:	3701      	adds	r7, #1
   d9a4a:	f04f 35ff 	mov.w	r5, #4294967295
   d9a4e:	e003      	b.n	d9a58 <_tzset_unlocked_r+0x9c>
   d9a50:	2b2b      	cmp	r3, #43	; 0x2b
   d9a52:	bf08      	it	eq
   d9a54:	3701      	addeq	r7, #1
   d9a56:	2501      	movs	r5, #1
   d9a58:	f10d 0a20 	add.w	sl, sp, #32
   d9a5c:	f10d 0b1e 	add.w	fp, sp, #30
   d9a60:	f04f 0800 	mov.w	r8, #0
   d9a64:	9603      	str	r6, [sp, #12]
   d9a66:	f8cd a008 	str.w	sl, [sp, #8]
   d9a6a:	9601      	str	r6, [sp, #4]
   d9a6c:	f8cd b000 	str.w	fp, [sp]
   d9a70:	4633      	mov	r3, r6
   d9a72:	aa07      	add	r2, sp, #28
   d9a74:	498d      	ldr	r1, [pc, #564]	; (d9cac <_tzset_unlocked_r+0x2f0>)
   d9a76:	f8ad 801e 	strh.w	r8, [sp, #30]
   d9a7a:	4638      	mov	r0, r7
   d9a7c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9a80:	f7fc ffc6 	bl	d6a10 <siscanf>
   d9a84:	4540      	cmp	r0, r8
   d9a86:	f340 80fd 	ble.w	d9c84 <_tzset_unlocked_r+0x2c8>
   d9a8a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9a8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9a92:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9cb8 <_tzset_unlocked_r+0x2fc>
   d9a96:	213c      	movs	r1, #60	; 0x3c
   d9a98:	fb01 3302 	mla	r3, r1, r2, r3
   d9a9c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9aa0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9aa4:	fb01 3302 	mla	r3, r1, r2, r3
   d9aa8:	435d      	muls	r5, r3
   d9aaa:	6225      	str	r5, [r4, #32]
   d9aac:	4d7c      	ldr	r5, [pc, #496]	; (d9ca0 <_tzset_unlocked_r+0x2e4>)
   d9aae:	4b7d      	ldr	r3, [pc, #500]	; (d9ca4 <_tzset_unlocked_r+0x2e8>)
   d9ab0:	602b      	str	r3, [r5, #0]
   d9ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ab4:	497c      	ldr	r1, [pc, #496]	; (d9ca8 <_tzset_unlocked_r+0x2ec>)
   d9ab6:	441f      	add	r7, r3
   d9ab8:	464a      	mov	r2, r9
   d9aba:	4633      	mov	r3, r6
   d9abc:	4638      	mov	r0, r7
   d9abe:	f7fc ffa7 	bl	d6a10 <siscanf>
   d9ac2:	4540      	cmp	r0, r8
   d9ac4:	dc08      	bgt.n	d9ad8 <_tzset_unlocked_r+0x11c>
   d9ac6:	682b      	ldr	r3, [r5, #0]
   d9ac8:	606b      	str	r3, [r5, #4]
   d9aca:	4b72      	ldr	r3, [pc, #456]	; (d9c94 <_tzset_unlocked_r+0x2d8>)
   d9acc:	6a22      	ldr	r2, [r4, #32]
   d9ace:	601a      	str	r2, [r3, #0]
   d9ad0:	4b72      	ldr	r3, [pc, #456]	; (d9c9c <_tzset_unlocked_r+0x2e0>)
   d9ad2:	f8c3 8000 	str.w	r8, [r3]
   d9ad6:	e0d5      	b.n	d9c84 <_tzset_unlocked_r+0x2c8>
   d9ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ada:	f8c5 9004 	str.w	r9, [r5, #4]
   d9ade:	18fd      	adds	r5, r7, r3
   d9ae0:	5cfb      	ldrb	r3, [r7, r3]
   d9ae2:	2b2d      	cmp	r3, #45	; 0x2d
   d9ae4:	d103      	bne.n	d9aee <_tzset_unlocked_r+0x132>
   d9ae6:	3501      	adds	r5, #1
   d9ae8:	f04f 37ff 	mov.w	r7, #4294967295
   d9aec:	e003      	b.n	d9af6 <_tzset_unlocked_r+0x13a>
   d9aee:	2b2b      	cmp	r3, #43	; 0x2b
   d9af0:	bf08      	it	eq
   d9af2:	3501      	addeq	r5, #1
   d9af4:	2701      	movs	r7, #1
   d9af6:	2300      	movs	r3, #0
   d9af8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9afc:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9b00:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9b04:	930a      	str	r3, [sp, #40]	; 0x28
   d9b06:	9603      	str	r6, [sp, #12]
   d9b08:	f8cd a008 	str.w	sl, [sp, #8]
   d9b0c:	9601      	str	r6, [sp, #4]
   d9b0e:	f8cd b000 	str.w	fp, [sp]
   d9b12:	4633      	mov	r3, r6
   d9b14:	aa07      	add	r2, sp, #28
   d9b16:	4965      	ldr	r1, [pc, #404]	; (d9cac <_tzset_unlocked_r+0x2f0>)
   d9b18:	4628      	mov	r0, r5
   d9b1a:	f7fc ff79 	bl	d6a10 <siscanf>
   d9b1e:	2800      	cmp	r0, #0
   d9b20:	dc04      	bgt.n	d9b2c <_tzset_unlocked_r+0x170>
   d9b22:	6a23      	ldr	r3, [r4, #32]
   d9b24:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9b28:	63e3      	str	r3, [r4, #60]	; 0x3c
   d9b2a:	e00e      	b.n	d9b4a <_tzset_unlocked_r+0x18e>
   d9b2c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9b30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9b34:	213c      	movs	r1, #60	; 0x3c
   d9b36:	fb01 3302 	mla	r3, r1, r2, r3
   d9b3a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9b3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9b42:	fb01 3302 	mla	r3, r1, r2, r3
   d9b46:	435f      	muls	r7, r3
   d9b48:	63e7      	str	r7, [r4, #60]	; 0x3c
   d9b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9b4c:	4627      	mov	r7, r4
   d9b4e:	441d      	add	r5, r3
   d9b50:	f04f 0900 	mov.w	r9, #0
   d9b54:	782b      	ldrb	r3, [r5, #0]
   d9b56:	2b2c      	cmp	r3, #44	; 0x2c
   d9b58:	bf08      	it	eq
   d9b5a:	3501      	addeq	r5, #1
   d9b5c:	f895 8000 	ldrb.w	r8, [r5]
   d9b60:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9b64:	d126      	bne.n	d9bb4 <_tzset_unlocked_r+0x1f8>
   d9b66:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d9b6a:	9302      	str	r3, [sp, #8]
   d9b6c:	ab09      	add	r3, sp, #36	; 0x24
   d9b6e:	9300      	str	r3, [sp, #0]
   d9b70:	9603      	str	r6, [sp, #12]
   d9b72:	9601      	str	r6, [sp, #4]
   d9b74:	4633      	mov	r3, r6
   d9b76:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d9b7a:	494d      	ldr	r1, [pc, #308]	; (d9cb0 <_tzset_unlocked_r+0x2f4>)
   d9b7c:	4628      	mov	r0, r5
   d9b7e:	f7fc ff47 	bl	d6a10 <siscanf>
   d9b82:	2803      	cmp	r0, #3
   d9b84:	d17e      	bne.n	d9c84 <_tzset_unlocked_r+0x2c8>
   d9b86:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d9b8a:	1e4b      	subs	r3, r1, #1
   d9b8c:	2b0b      	cmp	r3, #11
   d9b8e:	d879      	bhi.n	d9c84 <_tzset_unlocked_r+0x2c8>
   d9b90:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9b94:	1e53      	subs	r3, r2, #1
   d9b96:	2b04      	cmp	r3, #4
   d9b98:	d874      	bhi.n	d9c84 <_tzset_unlocked_r+0x2c8>
   d9b9a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9b9e:	2b06      	cmp	r3, #6
   d9ba0:	d870      	bhi.n	d9c84 <_tzset_unlocked_r+0x2c8>
   d9ba2:	f887 8008 	strb.w	r8, [r7, #8]
   d9ba6:	60f9      	str	r1, [r7, #12]
   d9ba8:	613a      	str	r2, [r7, #16]
   d9baa:	617b      	str	r3, [r7, #20]
   d9bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9bae:	eb05 0803 	add.w	r8, r5, r3
   d9bb2:	e02a      	b.n	d9c0a <_tzset_unlocked_r+0x24e>
   d9bb4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9bb8:	bf06      	itte	eq
   d9bba:	3501      	addeq	r5, #1
   d9bbc:	4643      	moveq	r3, r8
   d9bbe:	2344      	movne	r3, #68	; 0x44
   d9bc0:	220a      	movs	r2, #10
   d9bc2:	a90b      	add	r1, sp, #44	; 0x2c
   d9bc4:	4628      	mov	r0, r5
   d9bc6:	9305      	str	r3, [sp, #20]
   d9bc8:	f7ff fe3e 	bl	d9848 <strtoul>
   d9bcc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9bd0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9bd4:	4545      	cmp	r5, r8
   d9bd6:	9b05      	ldr	r3, [sp, #20]
   d9bd8:	d114      	bne.n	d9c04 <_tzset_unlocked_r+0x248>
   d9bda:	234d      	movs	r3, #77	; 0x4d
   d9bdc:	f1b9 0f00 	cmp.w	r9, #0
   d9be0:	d107      	bne.n	d9bf2 <_tzset_unlocked_r+0x236>
   d9be2:	7223      	strb	r3, [r4, #8]
   d9be4:	2303      	movs	r3, #3
   d9be6:	60e3      	str	r3, [r4, #12]
   d9be8:	2302      	movs	r3, #2
   d9bea:	6123      	str	r3, [r4, #16]
   d9bec:	f8c4 9014 	str.w	r9, [r4, #20]
   d9bf0:	e00b      	b.n	d9c0a <_tzset_unlocked_r+0x24e>
   d9bf2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9bf6:	230b      	movs	r3, #11
   d9bf8:	62a3      	str	r3, [r4, #40]	; 0x28
   d9bfa:	2301      	movs	r3, #1
   d9bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9bfe:	2300      	movs	r3, #0
   d9c00:	6323      	str	r3, [r4, #48]	; 0x30
   d9c02:	e002      	b.n	d9c0a <_tzset_unlocked_r+0x24e>
   d9c04:	b280      	uxth	r0, r0
   d9c06:	723b      	strb	r3, [r7, #8]
   d9c08:	6178      	str	r0, [r7, #20]
   d9c0a:	2302      	movs	r3, #2
   d9c0c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9c10:	2300      	movs	r3, #0
   d9c12:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9c16:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9c1a:	930a      	str	r3, [sp, #40]	; 0x28
   d9c1c:	f898 3000 	ldrb.w	r3, [r8]
   d9c20:	2b2f      	cmp	r3, #47	; 0x2f
   d9c22:	d10b      	bne.n	d9c3c <_tzset_unlocked_r+0x280>
   d9c24:	9603      	str	r6, [sp, #12]
   d9c26:	f8cd a008 	str.w	sl, [sp, #8]
   d9c2a:	9601      	str	r6, [sp, #4]
   d9c2c:	f8cd b000 	str.w	fp, [sp]
   d9c30:	4633      	mov	r3, r6
   d9c32:	aa07      	add	r2, sp, #28
   d9c34:	491f      	ldr	r1, [pc, #124]	; (d9cb4 <_tzset_unlocked_r+0x2f8>)
   d9c36:	4640      	mov	r0, r8
   d9c38:	f7fc feea 	bl	d6a10 <siscanf>
   d9c3c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9c40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9c44:	213c      	movs	r1, #60	; 0x3c
   d9c46:	fb01 3302 	mla	r3, r1, r2, r3
   d9c4a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9c4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9c52:	fb01 3302 	mla	r3, r1, r2, r3
   d9c56:	61bb      	str	r3, [r7, #24]
   d9c58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9c5a:	f109 0901 	add.w	r9, r9, #1
   d9c5e:	f1b9 0f02 	cmp.w	r9, #2
   d9c62:	4445      	add	r5, r8
   d9c64:	f107 071c 	add.w	r7, r7, #28
   d9c68:	f47f af74 	bne.w	d9b54 <_tzset_unlocked_r+0x198>
   d9c6c:	6860      	ldr	r0, [r4, #4]
   d9c6e:	f7ff fdf5 	bl	d985c <__tzcalc_limits>
   d9c72:	4b08      	ldr	r3, [pc, #32]	; (d9c94 <_tzset_unlocked_r+0x2d8>)
   d9c74:	6a22      	ldr	r2, [r4, #32]
   d9c76:	601a      	str	r2, [r3, #0]
   d9c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9c7a:	1a9b      	subs	r3, r3, r2
   d9c7c:	4a07      	ldr	r2, [pc, #28]	; (d9c9c <_tzset_unlocked_r+0x2e0>)
   d9c7e:	bf18      	it	ne
   d9c80:	2301      	movne	r3, #1
   d9c82:	6013      	str	r3, [r2, #0]
   d9c84:	b00d      	add	sp, #52	; 0x34
   d9c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c8a:	bf00      	nop
   d9c8c:	000da8f4 	.word	0x000da8f4
   d9c90:	2003e7e0 	.word	0x2003e7e0
   d9c94:	2003e7e8 	.word	0x2003e7e8
   d9c98:	000da8f7 	.word	0x000da8f7
   d9c9c:	2003e7e4 	.word	0x2003e7e4
   d9ca0:	2003d648 	.word	0x2003d648
   d9ca4:	2003e7d3 	.word	0x2003e7d3
   d9ca8:	000da8fb 	.word	0x000da8fb
   d9cac:	000da91e 	.word	0x000da91e
   d9cb0:	000da90a 	.word	0x000da90a
   d9cb4:	000da91d 	.word	0x000da91d
   d9cb8:	2003e7c8 	.word	0x2003e7c8

000d9cbc <_findenv_r>:
   d9cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9cc0:	4607      	mov	r7, r0
   d9cc2:	468b      	mov	fp, r1
   d9cc4:	4690      	mov	r8, r2
   d9cc6:	f000 f8d9 	bl	d9e7c <__env_lock>
   d9cca:	4b19      	ldr	r3, [pc, #100]	; (d9d30 <_findenv_r+0x74>)
   d9ccc:	681d      	ldr	r5, [r3, #0]
   d9cce:	469a      	mov	sl, r3
   d9cd0:	b13d      	cbz	r5, d9ce2 <_findenv_r+0x26>
   d9cd2:	465c      	mov	r4, fp
   d9cd4:	4623      	mov	r3, r4
   d9cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9cda:	b142      	cbz	r2, d9cee <_findenv_r+0x32>
   d9cdc:	2a3d      	cmp	r2, #61	; 0x3d
   d9cde:	461c      	mov	r4, r3
   d9ce0:	d1f8      	bne.n	d9cd4 <_findenv_r+0x18>
   d9ce2:	4638      	mov	r0, r7
   d9ce4:	f000 f8cb 	bl	d9e7e <__env_unlock>
   d9ce8:	2000      	movs	r0, #0
   d9cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9cee:	ebcb 0404 	rsb	r4, fp, r4
   d9cf2:	46a9      	mov	r9, r5
   d9cf4:	f859 0b04 	ldr.w	r0, [r9], #4
   d9cf8:	2800      	cmp	r0, #0
   d9cfa:	d0f2      	beq.n	d9ce2 <_findenv_r+0x26>
   d9cfc:	4622      	mov	r2, r4
   d9cfe:	4659      	mov	r1, fp
   d9d00:	f7ff fcef 	bl	d96e2 <strncmp>
   d9d04:	b988      	cbnz	r0, d9d2a <_findenv_r+0x6e>
   d9d06:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9d0a:	191e      	adds	r6, r3, r4
   d9d0c:	5d1b      	ldrb	r3, [r3, r4]
   d9d0e:	2b3d      	cmp	r3, #61	; 0x3d
   d9d10:	d10b      	bne.n	d9d2a <_findenv_r+0x6e>
   d9d12:	f8da 3000 	ldr.w	r3, [sl]
   d9d16:	1aed      	subs	r5, r5, r3
   d9d18:	10ad      	asrs	r5, r5, #2
   d9d1a:	4638      	mov	r0, r7
   d9d1c:	f8c8 5000 	str.w	r5, [r8]
   d9d20:	f000 f8ad 	bl	d9e7e <__env_unlock>
   d9d24:	1c70      	adds	r0, r6, #1
   d9d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9d2a:	464d      	mov	r5, r9
   d9d2c:	e7e1      	b.n	d9cf2 <_findenv_r+0x36>
   d9d2e:	bf00      	nop
   d9d30:	2003d690 	.word	0x2003d690

000d9d34 <_getenv_r>:
   d9d34:	b507      	push	{r0, r1, r2, lr}
   d9d36:	aa01      	add	r2, sp, #4
   d9d38:	f7ff ffc0 	bl	d9cbc <_findenv_r>
   d9d3c:	b003      	add	sp, #12
   d9d3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9d44 <__gettzinfo>:
   d9d44:	4800      	ldr	r0, [pc, #0]	; (d9d48 <__gettzinfo+0x4>)
   d9d46:	4770      	bx	lr
   d9d48:	2003d650 	.word	0x2003d650

000d9d4c <gmtime_r>:
   d9d4c:	6802      	ldr	r2, [r0, #0]
   d9d4e:	4b47      	ldr	r3, [pc, #284]	; (d9e6c <gmtime_r+0x120>)
   d9d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9d52:	fb92 f4f3 	sdiv	r4, r2, r3
   d9d56:	fb03 2214 	mls	r2, r3, r4, r2
   d9d5a:	2a00      	cmp	r2, #0
   d9d5c:	bfbc      	itt	lt
   d9d5e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9d62:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9d66:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9d6a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9d6e:	fb92 f3f0 	sdiv	r3, r2, r0
   d9d72:	fb00 2213 	mls	r2, r0, r3, r2
   d9d76:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9d7a:	bfac      	ite	ge
   d9d7c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9d80:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9d84:	608b      	str	r3, [r1, #8]
   d9d86:	fb92 f3f0 	sdiv	r3, r2, r0
   d9d8a:	fb00 2213 	mls	r2, r0, r3, r2
   d9d8e:	604b      	str	r3, [r1, #4]
   d9d90:	600a      	str	r2, [r1, #0]
   d9d92:	2307      	movs	r3, #7
   d9d94:	1ce2      	adds	r2, r4, #3
   d9d96:	fb92 f3f3 	sdiv	r3, r2, r3
   d9d9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9d9e:	1ad3      	subs	r3, r2, r3
   d9da0:	618b      	str	r3, [r1, #24]
   d9da2:	4b33      	ldr	r3, [pc, #204]	; (d9e70 <gmtime_r+0x124>)
   d9da4:	4d33      	ldr	r5, [pc, #204]	; (d9e74 <gmtime_r+0x128>)
   d9da6:	fb94 f5f5 	sdiv	r5, r4, r5
   d9daa:	fb03 4405 	mla	r4, r3, r5, r4
   d9dae:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9db2:	fbb4 f2f2 	udiv	r2, r4, r2
   d9db6:	4422      	add	r2, r4
   d9db8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9dbc:	fbb4 f3f7 	udiv	r3, r4, r7
   d9dc0:	1ad2      	subs	r2, r2, r3
   d9dc2:	482d      	ldr	r0, [pc, #180]	; (d9e78 <gmtime_r+0x12c>)
   d9dc4:	fbb4 f0f0 	udiv	r0, r4, r0
   d9dc8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9dcc:	1a13      	subs	r3, r2, r0
   d9dce:	fbb3 f6f6 	udiv	r6, r3, r6
   d9dd2:	4434      	add	r4, r6
   d9dd4:	f240 126d 	movw	r2, #365	; 0x16d
   d9dd8:	fbb3 f0f2 	udiv	r0, r3, r2
   d9ddc:	fbb3 f3f7 	udiv	r3, r3, r7
   d9de0:	1ae3      	subs	r3, r4, r3
   d9de2:	fb02 3310 	mls	r3, r2, r0, r3
   d9de6:	2499      	movs	r4, #153	; 0x99
   d9de8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9dec:	3202      	adds	r2, #2
   d9dee:	fbb2 f2f4 	udiv	r2, r2, r4
   d9df2:	2a0a      	cmp	r2, #10
   d9df4:	fb04 f402 	mul.w	r4, r4, r2
   d9df8:	f104 0602 	add.w	r6, r4, #2
   d9dfc:	f04f 0405 	mov.w	r4, #5
   d9e00:	fbb6 f4f4 	udiv	r4, r6, r4
   d9e04:	bf34      	ite	cc
   d9e06:	2602      	movcc	r6, #2
   d9e08:	f06f 0609 	mvncs.w	r6, #9
   d9e0c:	4416      	add	r6, r2
   d9e0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9e12:	fb02 0505 	mla	r5, r2, r5, r0
   d9e16:	1c5f      	adds	r7, r3, #1
   d9e18:	2e01      	cmp	r6, #1
   d9e1a:	bf98      	it	ls
   d9e1c:	3501      	addls	r5, #1
   d9e1e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9e22:	eba7 0704 	sub.w	r7, r7, r4
   d9e26:	d302      	bcc.n	d9e2e <gmtime_r+0xe2>
   d9e28:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9e2c:	e014      	b.n	d9e58 <gmtime_r+0x10c>
   d9e2e:	0782      	lsls	r2, r0, #30
   d9e30:	d105      	bne.n	d9e3e <gmtime_r+0xf2>
   d9e32:	2464      	movs	r4, #100	; 0x64
   d9e34:	fbb0 f2f4 	udiv	r2, r0, r4
   d9e38:	fb04 0212 	mls	r2, r4, r2, r0
   d9e3c:	b94a      	cbnz	r2, d9e52 <gmtime_r+0x106>
   d9e3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9e42:	fbb0 f4f2 	udiv	r4, r0, r2
   d9e46:	fb02 0014 	mls	r0, r2, r4, r0
   d9e4a:	fab0 f280 	clz	r2, r0
   d9e4e:	0952      	lsrs	r2, r2, #5
   d9e50:	e000      	b.n	d9e54 <gmtime_r+0x108>
   d9e52:	2201      	movs	r2, #1
   d9e54:	333b      	adds	r3, #59	; 0x3b
   d9e56:	441a      	add	r2, r3
   d9e58:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9e5c:	2300      	movs	r3, #0
   d9e5e:	61ca      	str	r2, [r1, #28]
   d9e60:	614d      	str	r5, [r1, #20]
   d9e62:	610e      	str	r6, [r1, #16]
   d9e64:	60cf      	str	r7, [r1, #12]
   d9e66:	620b      	str	r3, [r1, #32]
   d9e68:	4608      	mov	r0, r1
   d9e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9e6c:	00015180 	.word	0x00015180
   d9e70:	fffdc54f 	.word	0xfffdc54f
   d9e74:	00023ab1 	.word	0x00023ab1
   d9e78:	00023ab0 	.word	0x00023ab0

000d9e7c <__env_lock>:
   d9e7c:	4770      	bx	lr

000d9e7e <__env_unlock>:
   d9e7e:	4770      	bx	lr

000d9e80 <dynalib_user>:
   d9e80:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9e90:	0000 0000                                   ....

000d9e94 <_ZTVN8particle13__SPISettingsE>:
	...
   d9e9c:	40d1 000d                                   .@..

000d9ea0 <_ZTV4File>:
	...
   d9ea8:	40cf 000d 4151 000d 4191 000d 418b 000d     .@..QA...A...A..
   d9eb8:	40b3 000d 416b 000d 4165 000d 415f 000d     .@..kA..eA.._A..
   d9ec8:	4343 3142 7470 4873 6c65 6f6c 6620 6f72     CCB1ptsHello fro
   d9ed8:	206d 4343 4820 6275 0021 0000 0000 6564     m CC Hub!.....de
   d9ee8:	6166 6c75 2074 4d00 4253 4c00 4253 3c00     fault .MSB.LSB.<
   d9ef8:	5053 5349 7465 6974 676e 2073 6564 6166     SPISettings defa
   d9f08:	6c75 3e74 3c00 5053 5349 7465 6974 676e     ult>.<SPISetting
   d9f18:	2073 7325 6c25 2075 7325 4d20 444f 2545     s %s%lu %s MODE%
   d9f28:	3e64 4c00 4554 4420 7461 2061 6552 6563     d>.LTE Data Rece
   d9f38:	7669 6465 000a 7325 000a 6f42 3174 6164     ived..%s..Bot1da
   d9f48:	0074 3025 6432 3025 6432 3025 6434 3025     t.%02d%02d%04d%0
   d9f58:	6432 3025 6432 3025 6432 5700 7461 7265     2d%02d%02d.Water
   d9f68:	6f42 0074 4c5f 474f 742e 7478 4500 7272     Bot._LOG.txt.Err
   d9f78:	726f 203a 6f63 6c75 2064 6f6e 2074 6f63     or: could not co
   d9f88:	6e6e 6365 2074 6f74 5320 2044 6163 6472     nnect to SD card
   d9f98:	0021 6361 006b 616e 006b 7470 0073 6152     !.ack.nak.pts.Ra
   d9fa8:	5777 6972 6574 742e 7478 4c00 4554 5800     wWrite.txt.LTE.X
   d9fb8:	6542 0065 6c42 6575 6f74 746f 0068 654e     Bee.Bluetooth.Ne
   d9fc8:	2077 7473 6972 676e 6620 6f72 206d 7325     w string from %s
   d9fd8:	203a 4e00 7765 4220 2054 6f43 6d6d 6e61     : .New BT Comman
   d9fe8:	3a64 5b00 4e49 4f46 205d 6552 6563 7669     d:.[INFO] Receiv
   d9ff8:	6465 4220 454c 4d20 7365 6173 6567 203a     ed BLE Message: 
   da008:	7325 6600 6c69 6e65 6d61 0065 6946 656c     %s.filename.File
   da018:	2720 7325 2027 6c61 6572 6461 2079 7865      '%s' already ex
   da028:	7369 7374 202c 6564 656c 6974 676e 6120     ists, deleting a
   da038:	646e 6f20 6576 7772 6972 6974 676e 5300     nd overwriting.S
   da048:	6174 7472 6e69 2067 666f 6c66 616f 2064     tarting offload 
   da058:	666f 6620 6c69 3a65 2520 0073 6966 656c     of file: %s.file
   da068:	6f63 706d 5200 6165 6863 6465 6520 646e     comp.Reached end
   da078:	6f20 2066 6966 656c 203a 7325 6600 6c69      of file: %s.fil
   da088:	6465 6e6f 0065 6552 6563 7669 6465 6420     edone.Received d
   da098:	6e6f 2065 6f63 6d6d 6e61 0064 6f43 6e6e     one command.Conn
   da0a8:	6365 6574 2064 6f74 4220 746f 2520 0064     ected to Bot %d.
   da0b8:	6f46 6e75 2064 2061 656e 2077 6177 6574     Found a new wate
   da0c8:	2072 6f62 2074 4449 2f00 4500 7272 726f     r bot ID./.Error
   da0d8:	202c 6f63 6c75 2064 6f6e 2074 706f 6e65     , could not open
   da0e8:	7220 6f6f 2074 6964 6572 7463 726f 2079      root directory 
   da0f8:	6e6f 5320 2044 6143 6472 202e 7349 6920     on SD Card. Is i
   da108:	2074 6e69 6573 7472 6465 003f 4343 2542     t inserted?.CCB%
   da118:	6464 706d 5200 7165 6575 7473 6465 5320     ddmp.Requested S
   da128:	2044 6143 6472 4420 7461 2061 7266 6d6f     D Card Data from
   da138:	4220 746f 2520 2064 764f 7265 4220 454c      Bot %d Over BLE
   da148:	000a 7543 7272 6e65 6c74 2079 6f63 6e6e     ..Currently conn
   da158:	6365 6574 2064 6f74 4220 746f 2520 2c66     ected to Bot %f,
   da168:	6e20 6565 2064 6f74 6320 6e6f 656e 7463      need to connect
   da178:	7420 206f 6f42 2074 6425 5300 6375 6563      to Bot %d.Succe
   da188:	7373 7566 6c6c 2079 6f63 6e6e 6365 6574     ssfully connecte
   da198:	2064 6f74 4220 746f 2520 0064 7453 7261     d to Bot %d.Star
   da1a8:	6974 676e 6620 6c69 2065 7274 6e61 6673     ting file transf
   da1b8:	7265 6620 6f72 206d 6f42 2074 6425 4600     er from Bot %d.F
   da1c8:	6e69 7369 6568 2064 7274 6e61 6673 7265     inished transfer
   da1d8:	6972 676e 6620 6c69 2065 7266 6d6f 4220     ring file from B
   da1e8:	746f 2520 0064 7453 7261 2074 666f 6c66     ot %d.Start offl
   da1f8:	616f 6564 0072 6f43 6e6e 6365 6574 2064     oader.Connected 
   da208:	6f74 5720 7461 7265 6f62 2074 6425 6200     to Waterbot %d.b
   da218:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   da228:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   da238:	6232 0030 3462 3032 3936 3231 642d 3463     2b0.b4206912-dc4
   da248:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   da258:	3765 3135 3238 3062 6200 3234 3630 3139     e75182b0.b420691
   da268:	2d33 6364 6234 352d 3437 2d33 3863 3162     3-dc4b-5743-c8b1
   da278:	392d 6432 6530 3537 3831 6232 0030 3462     -92d0e75182b0.b4
   da288:	3032 3936 3431 642d 3463 2d62 3735 3334     206914-dc4b-5743
   da298:	632d 6238 2d31 3239 3064 3765 3135 3238     -c8b1-92d0e75182
   da2a8:	3062 0000                                   b0..

000da2ac <_ZTVN5spark13EthernetClassE>:
	...
   da2b4:	6aaf 000d 6aa5 000d 6a9b 000d 6a91 000d     .j...j...j...j..
   da2c4:	6a85 000d 6a79 000d 6a6d 000d 6a65 000d     .j..yj..mj..ej..
   da2d4:	6a5b 000d 6a51 000d 8e9d 000d               [j..Qj......

000da2e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da2e0:	0800 1810 2820 3830                         .... (08

000da2e8 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da2f0:	6da3 000d 6da9 000d 81b5 000d 6dd3 000d     .m...m.......m..
   da300:	6da5 000d                                   .m..

000da304 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da30c:	6d9d 000d 6db7 000d 8371 000d 6dd7 000d     .m...m..q....m..
   da31c:	6d9f 000d                                   .m..

000da320 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da328:	6d97 000d 6dc5 000d 7851 000d 6ddb 000d     .m...m..Qx...m..
   da338:	6d99 000d 6977 6972 676e 622e 656c 5300     .m..wiring.ble.S
   da348:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   da358:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   da368:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   da378:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   da388:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   da398:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   da3a8:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   da3b8:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   da3c8:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   da3d8:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   da3e8:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   da3f8:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   da408:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   da418:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   da428:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   da438:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   da448:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   da458:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   da468:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   da478:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   da488:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   da498:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   da4a8:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   da4b8:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   da4c8:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   da4d8:	6465 002e                                   ed..

000da4dc <_ZN8particle7BleUuid9BASE_UUIDE>:
   da4dc:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   da4ec:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   da4fc:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   da50c:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   da51c:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   da52c:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   da53c:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   da54c:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   da55c:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   da56c:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   da57c:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   da58c:	0020 0a0d 6600 6c00 006e 6e66 6300 646f      ....f.ln.fn.cod
   da59c:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
   da5ac:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
   da5bc:	6f72 0072 6170 696e 0063 6c61 006c 2b25     ror.panic.all.%+
   da5cc:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   da5dc:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   da5ec:	6974 656d 0000 0000                         time....

000da5f4 <_ZTV9IPAddress>:
	...
   da5fc:	88b5 000d 88a5 000d 88a7 000d               ............

000da608 <_ZTV9USBSerial>:
	...
   da610:	898d 000d 89dd 000d 89eb 000d 84bd 000d     ................
   da620:	89c9 000d 898f 000d 89a5 000d 89d7 000d     ................
   da630:	89bb 000d 8989 000d                         ........

000da638 <_ZTVN5spark13CellularClassE>:
	...
   da640:	8af7 000d 8aed 000d 8ae3 000d 8a99 000d     ................
   da650:	8ad7 000d 8acb 000d 8abf 000d 8ab7 000d     ................
   da660:	8aad 000d 8aa3 000d 8e9d 000d               ............

000da66c <_ZTV11USARTSerial>:
	...
   da674:	8b31 000d 8b81 000d 8b8f 000d 84bd 000d     1...............
   da684:	8b45 000d 8b67 000d 8b53 000d 8b7b 000d     E...g...S...{...
   da694:	8b33 000d 8b37 000d                         3...7...

000da69c <_ZTV7TwoWire>:
	...
   da6a4:	8c35 000d 8c7f 000d 8c57 000d 8c37 000d     5.......W...7...
   da6b4:	8c5f 000d 8c67 000d 8c6f 000d 8c77 000d     _...g...o...w...

000da6c4 <_ZTVN5spark9MeshClassE>:
	...
   da6cc:	8d17 000d 8d0d 000d 8d03 000d 8cf9 000d     ................
   da6dc:	8ced 000d 8ce1 000d 8cd5 000d 8ccd 000d     ................
   da6ec:	8cc3 000d 8cb9 000d 8e9d 000d               ............

000da6f8 <_ZTVN5spark12NetworkClassE>:
	...
   da700:	8e35 000d 8e3f 000d 8e49 000d 8e53 000d     5...?...I...S...
   da710:	8e5d 000d 8e69 000d 8e75 000d 8e81 000d     ]...i...u.......
   da720:	8e89 000d 8e93 000d 8e9d 000d               ............

000da72c <_ZSt7nothrow>:
	...

000da72d <_ctype_>:
   da72d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da73d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da74d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da75d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da76d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da77d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da78d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da79d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da7ad:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da830 <__sf_fake_stdin>:
	...

000da850 <__sf_fake_stdout>:
	...

000da870 <__sf_fake_stderr>:
	...
   da890:	0043 0000                                   C...

000da894 <__month_lengths>:
   da894:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da8a4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da8b4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da8c4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da8d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da8e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da8f4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   da904:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   da914:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   da924:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000da930 <link_const_variable_data_end>:
   da930:	000d4ab5 	.word	0x000d4ab5
   da934:	000d4c81 	.word	0x000d4c81
   da938:	000d4c85 	.word	0x000d4c85
   da93c:	000d53a1 	.word	0x000d53a1
   da940:	000d53a5 	.word	0x000d53a5
   da944:	000d53a9 	.word	0x000d53a9
   da948:	000d53ad 	.word	0x000d53ad
   da94c:	000d5aa1 	.word	0x000d5aa1
   da950:	000d5ac5 	.word	0x000d5ac5
   da954:	000d5ac9 	.word	0x000d5ac9
   da958:	000d5ded 	.word	0x000d5ded
   da95c:	000d5df1 	.word	0x000d5df1
   da960:	000d5df5 	.word	0x000d5df5
   da964:	000d632f 	.word	0x000d632f
   da968:	000d6333 	.word	0x000d6333
   da96c:	000d6337 	.word	0x000d6337
   da970:	000d63dd 	.word	0x000d63dd
   da974:	000d6ab9 	.word	0x000d6ab9
   da978:	000d6c59 	.word	0x000d6c59
   da97c:	000d8495 	.word	0x000d8495
   da980:	000d85d9 	.word	0x000d85d9
   da984:	000d8741 	.word	0x000d8741
   da988:	000d8779 	.word	0x000d8779
   da98c:	000d8b01 	.word	0x000d8b01
   da990:	000d8de5 	.word	0x000d8de5
   da994:	000d8f69 	.word	0x000d8f69
   da998:	000d9129 	.word	0x000d9129
   da99c:	000d91ad 	.word	0x000d91ad
   da9a0:	000d9271 	.word	0x000d9271
   da9a4:	000d9335 	.word	0x000d9335

000da9a8 <link_constructors_end>:
	...
