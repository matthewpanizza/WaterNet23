
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/1.5.2/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009e00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dde20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003d594  000dde24  0001d594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000116c  2003d684  2003d684  0002d684  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000ddf14  000ddf14  0001df14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000ddf3c  000ddf3c  0001df3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001964b5  00000000  00000000  0001df40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f2a7  00000000  00000000  001b43f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c491  00000000  00000000  001d369c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000031b8  00000000  00000000  001ffb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005f90  00000000  00000000  00202ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004d4f5  00000000  00000000  00208c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000538e8  00000000  00000000  0025616a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001143db  00000000  00000000  002a9a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fbb4  00000000  00000000  003bde30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fd9a 	bl	dab6a <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fdba 	bl	dabb6 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d594 	.word	0x2003d594
   d404c:	000dde24 	.word	0x000dde24
   d4050:	2003d684 	.word	0x2003d684
   d4054:	2003d684 	.word	0x2003d684
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	f004 fefd 	bl	d8e5c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dde1c 	.word	0x000dde1c
   d4084:	000ddda4 	.word	0x000ddda4

000d4088 <module_user_setup>:
   d4088:	f000 b8d4 	b.w	d4234 <setup>

000d408c <module_user_loop>:
   d408c:	b508      	push	{r3, lr}
   d408e:	f000 ff49 	bl	d4f24 <loop>
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4096:	f004 bea3 	b.w	d8de0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bf27 	b.w	d6eec <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bf2d 	b.w	d6efc <free>

000d40a2 <_ZdaPv>:
   d40a2:	f002 bf2b 	b.w	d6efc <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b6:	7c03      	ldrb	r3, [r0, #16]
   d40b8:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40bc:	4602      	mov	r2, r0
   d40be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40c2:	b12b      	cbz	r3, d40d0 <_ZN4File9availableEv+0x1a>
   d40c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c8:	1a18      	subs	r0, r3, r0
   d40ca:	bf48      	it	mi
   d40cc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40d0:	4770      	bx	lr

000d40d2 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40d2:	4770      	bx	lr

000d40d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d6:	4602      	mov	r2, r0
   d40d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40da:	7913      	ldrb	r3, [r2, #4]
   d40dc:	6895      	ldr	r5, [r2, #8]
   d40de:	b133      	cbz	r3, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e0:	b93d      	cbnz	r5, d40f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40e2:	490c      	ldr	r1, [pc, #48]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e4:	b004      	add	sp, #16
   d40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ea:	f004 bcc9 	b.w	d8a80 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f0:	e000      	b.n	d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40f2:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f4:	7b16      	ldrb	r6, [r2, #12]
   d40f6:	4c0a      	ldr	r4, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f8:	490a      	ldr	r1, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40fa:	7b52      	ldrb	r2, [r2, #13]
   d40fc:	9202      	str	r2, [sp, #8]
   d40fe:	2e01      	cmp	r6, #1
   d4100:	bf08      	it	eq
   d4102:	4621      	moveq	r1, r4
   d4104:	9101      	str	r1, [sp, #4]
   d4106:	9500      	str	r5, [sp, #0]
   d4108:	4a07      	ldr	r2, [pc, #28]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d410a:	2100      	movs	r1, #0
   d410c:	f004 fcf5 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
  }
   d4110:	b004      	add	sp, #16
   d4112:	bd70      	pop	{r4, r5, r6, pc}
   d4114:	000dd03d 	.word	0x000dd03d
   d4118:	000dd888 	.word	0x000dd888
   d411c:	000dd02c 	.word	0x000dd02c
   d4120:	000dd035 	.word	0x000dd035
   d4124:	000dd039 	.word	0x000dd039
   d4128:	000dd053 	.word	0x000dd053

000d412c <_ZN4FileD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	2134      	movs	r1, #52	; 0x34
   d4130:	4604      	mov	r4, r0
   d4132:	f005 fdb1 	bl	d9c98 <_ZdlPvj>
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}

000d413a <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d413a:	3010      	adds	r0, #16
   d413c:	f001 bdba 	b.w	d5cb4 <_ZN7FatFile4syncEv>

000d4140 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4140:	3010      	adds	r0, #16
   d4142:	f001 bccf 	b.w	d5ae4 <_ZN7FatFile4peekEv>

000d4146 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4146:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4148:	2201      	movs	r2, #1
   d414a:	f10d 0107 	add.w	r1, sp, #7
   d414e:	3010      	adds	r0, #16
   d4150:	f001 fc15 	bl	d597e <_ZN7FatFile4readEPvj>
   d4154:	2801      	cmp	r0, #1
   d4156:	bf0c      	ite	eq
   d4158:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d415c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4160:	b003      	add	sp, #12
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4

000d4166 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4166:	3010      	adds	r0, #16
   d4168:	f001 be44 	b.w	d5df4 <_ZN7FatFile5writeEPKvj>

000d416c <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d416c:	b507      	push	{r0, r1, r2, lr}
   d416e:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4170:	2201      	movs	r2, #1
   d4172:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4176:	3010      	adds	r0, #16
   d4178:	4619      	mov	r1, r3
   d417a:	f001 fe3b 	bl	d5df4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d417e:	b003      	add	sp, #12
   d4180:	f85d fb04 	ldr.w	pc, [sp], #4

000d4184 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4188:	6800      	ldr	r0, [r0, #0]
   d418a:	b108      	cbz	r0, d4190 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d418c:	f002 feb6 	bl	d6efc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4190:	4620      	mov	r0, r4
   d4192:	bd10      	pop	{r4, pc}

000d4194 <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d4198:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d419a:	b108      	cbz	r0, d41a0 <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d419c:	f7ff ff7f 	bl	d409e <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d41a4:	4613      	mov	r3, r2
   d41a6:	460a      	mov	r2, r1
   d41a8:	4901      	ldr	r1, [pc, #4]	; (d41b0 <_ZN7FatFile4openEPKci+0xc>)
   d41aa:	6809      	ldr	r1, [r1, #0]
   d41ac:	f001 bdbf 	b.w	d5d2e <_ZN7FatFile4openEPS_PKci>
   d41b0:	2003e338 	.word	0x2003e338

000d41b4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41b4:	b530      	push	{r4, r5, lr}
   d41b6:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41b8:	4b1c      	ldr	r3, [pc, #112]	; (d422c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d41ba:	9300      	str	r3, [sp, #0]
   d41bc:	7913      	ldrb	r3, [r2, #4]
   d41be:	f88d 3004 	strb.w	r3, [sp, #4]
   d41c2:	6893      	ldr	r3, [r2, #8]
   d41c4:	9302      	str	r3, [sp, #8]
   d41c6:	7b13      	ldrb	r3, [r2, #12]
   d41c8:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41cc:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41d0:	7b53      	ldrb	r3, [r2, #13]
   d41d2:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41d6:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41d8:	460a      	mov	r2, r1
   d41da:	466b      	mov	r3, sp
   d41dc:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41e0:	4628      	mov	r0, r5
   d41e2:	f002 f94f 	bl	d6484 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d41e6:	b1f0      	cbz	r0, d4226 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41e8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41ea:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d41ee:	4628      	mov	r0, r5
   d41f0:	f001 fd96 	bl	d5d20 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41f4:	2101      	movs	r1, #1
   d41f6:	4620      	mov	r0, r4
   d41f8:	f001 ffed 	bl	d61d6 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41fc:	4601      	mov	r1, r0
   d41fe:	b168      	cbz	r0, d421c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4200:	4621      	mov	r1, r4
   d4202:	4628      	mov	r0, r5
   d4204:	f001 fba3 	bl	d594e <_ZN7FatFile8openRootEP9FatVolume>
   d4208:	b168      	cbz	r0, d4226 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d420a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d420e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4212:	bf16      	itet	ne
   d4214:	4b06      	ldrne	r3, [pc, #24]	; (d4230 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4216:	4618      	moveq	r0, r3
   d4218:	601d      	strne	r5, [r3, #0]
   d421a:	e005      	b.n	d4228 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d421c:	4620      	mov	r0, r4
   d421e:	f001 ffda 	bl	d61d6 <_ZN9FatVolume4initEh>
   d4222:	2800      	cmp	r0, #0
   d4224:	d1ec      	bne.n	d4200 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4226:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4228:	b005      	add	sp, #20
   d422a:	bd30      	pop	{r4, r5, pc}
   d422c:	000dd000 	.word	0x000dd000
   d4230:	2003e338 	.word	0x2003e338

000d4234 <setup>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup() {
   d4234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4238:	b08f      	sub	sp, #60	; 0x3c

    Serial.begin(115200);
   d423a:	f005 f9d3 	bl	d95e4 <_Z16_fetch_usbserialv>
   d423e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4242:	f005 f9c3 	bl	d95cc <_ZN9USBSerial5beginEl>
    pinMode(A0, INPUT_PULLDOWN);
   d4246:	2103      	movs	r1, #3
   d4248:	2013      	movs	r0, #19
   d424a:	f005 fcad 	bl	d9ba8 <pinMode>
    pinMode(D7, OUTPUT);
   d424e:	2101      	movs	r1, #1
   d4250:	2007      	movs	r0, #7
   d4252:	f005 fca9 	bl	d9ba8 <pinMode>
	BLE.on();
   d4256:	f003 fce3 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d425a:	f003 fd27 	bl	d7cac <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d425e:	4a2d      	ldr	r2, [pc, #180]	; (d4314 <setup+0xe0>)
   d4260:	492d      	ldr	r1, [pc, #180]	; (d4318 <setup+0xe4>)
    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;

    logMessages = true;
   d4262:	4d2e      	ldr	r5, [pc, #184]	; (d431c <setup+0xe8>)

    Serial.begin(115200);
    pinMode(A0, INPUT_PULLDOWN);
    pinMode(D7, OUTPUT);
	BLE.on();
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d4264:	4610      	mov	r0, r2
   d4266:	f003 fc0d 	bl	d7a84 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   d426a:	4a2d      	ldr	r2, [pc, #180]	; (d4320 <setup+0xec>)
   d426c:	492d      	ldr	r1, [pc, #180]	; (d4324 <setup+0xf0>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d426e:	2400      	movs	r4, #0
   d4270:	4610      	mov	r0, r2
   d4272:	f003 fc07 	bl	d7a84 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4276:	4622      	mov	r2, r4
   d4278:	492b      	ldr	r1, [pc, #172]	; (d4328 <setup+0xf4>)
   d427a:	9401      	str	r4, [sp, #4]
   d427c:	9400      	str	r4, [sp, #0]
   d427e:	2301      	movs	r3, #1
   d4280:	482a      	ldr	r0, [pc, #168]	; (d432c <setup+0xf8>)
   d4282:	f002 fe1b 	bl	d6ebc <spark_subscribe>

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
   d4286:	4b2a      	ldr	r3, [pc, #168]	; (d4330 <setup+0xfc>)
   d4288:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   d428a:	4b2a      	ldr	r3, [pc, #168]	; (d4334 <setup+0x100>)

    logMessages = true;
   d428c:	2601      	movs	r6, #1
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;
   d428e:	701c      	strb	r4, [r3, #0]

    logMessages = true;
   d4290:	702e      	strb	r6, [r5, #0]

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d4292:	f004 fd3b 	bl	d8d0c <_ZN9TimeClass5monthEv>
   d4296:	4607      	mov	r7, r0
   d4298:	f004 fd2e 	bl	d8cf8 <_ZN9TimeClass3dayEv>
   d429c:	4680      	mov	r8, r0
   d429e:	f004 fd3d 	bl	d8d1c <_ZN9TimeClass4yearEv>
   d42a2:	4681      	mov	r9, r0
   d42a4:	f004 fd0a 	bl	d8cbc <_ZN9TimeClass4hourEv>
   d42a8:	4682      	mov	sl, r0
   d42aa:	f004 fd11 	bl	d8cd0 <_ZN9TimeClass6minuteEv>
   d42ae:	4683      	mov	fp, r0
   d42b0:	f004 fd18 	bl	d8ce4 <_ZN9TimeClass6secondEv>
   d42b4:	463b      	mov	r3, r7
   d42b6:	4a20      	ldr	r2, [pc, #128]	; (d4338 <setup+0x104>)
   d42b8:	9004      	str	r0, [sp, #16]
   d42ba:	2110      	movs	r1, #16
   d42bc:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d42c0:	a806      	add	r0, sp, #24
   d42c2:	f002 fe43 	bl	d6f4c <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   d42c6:	491d      	ldr	r1, [pc, #116]	; (d433c <setup+0x108>)
   d42c8:	481d      	ldr	r0, [pc, #116]	; (d4340 <setup+0x10c>)
   d42ca:	f006 fcbe 	bl	dac4a <strcpy>
    strcat(filenameMessages,timestamp);
   d42ce:	a906      	add	r1, sp, #24
   d42d0:	481b      	ldr	r0, [pc, #108]	; (d4340 <setup+0x10c>)
   d42d2:	f006 fca1 	bl	dac18 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d42d6:	491b      	ldr	r1, [pc, #108]	; (d4344 <setup+0x110>)
   d42d8:	4819      	ldr	r0, [pc, #100]	; (d4340 <setup+0x10c>)
   d42da:	f006 fc9d 	bl	dac18 <strcat>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d42de:	4b1a      	ldr	r3, [pc, #104]	; (d4348 <setup+0x114>)
   d42e0:	930a      	str	r3, [sp, #40]	; 0x28
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
    BLE.addCharacteristic(rxCharacteristic);
    advData.appendServiceUUID(RemoteService); // Add the app service
    advData.appendLocalName("RemoteTest");           //Local advertising name
    BLE.advertise(&advData);                    //Start advertising the characteristics*/
    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d42e2:	aa0a      	add	r2, sp, #40	; 0x28
   d42e4:	4b19      	ldr	r3, [pc, #100]	; (d434c <setup+0x118>)
   d42e6:	481a      	ldr	r0, [pc, #104]	; (d4350 <setup+0x11c>)
   d42e8:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   d42ec:	2108      	movs	r1, #8
   d42ee:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
   d42f2:	930c      	str	r3, [sp, #48]	; 0x30
   d42f4:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
   d42f8:	f7ff ff5c 	bl	d41b4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d42fc:	4604      	mov	r4, r0
   d42fe:	b928      	cbnz	r0, d430c <setup+0xd8>
        Serial.println("Error: could not connect to SD card!");
   d4300:	f005 f970 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4304:	4913      	ldr	r1, [pc, #76]	; (d4354 <setup+0x120>)
   d4306:	f004 fbce 	bl	d8aa6 <_ZN5Print7printlnEPKc>
        logMessages = false;
   d430a:	702c      	strb	r4, [r5, #0]
    }
}
   d430c:	b00f      	add	sp, #60	; 0x3c
   d430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4312:	bf00      	nop
   d4314:	2003d6f4 	.word	0x2003d6f4
   d4318:	000d4b19 	.word	0x000d4b19
   d431c:	2003d6e0 	.word	0x2003d6e0
   d4320:	2003e330 	.word	0x2003e330
   d4324:	000d445d 	.word	0x000d445d
   d4328:	000d4ac9 	.word	0x000d4ac9
   d432c:	000dd071 	.word	0x000dd071
   d4330:	2003d7c4 	.word	0x2003d7c4
   d4334:	2003d6c8 	.word	0x2003d6c8
   d4338:	000dd079 	.word	0x000dd079
   d433c:	000dd092 	.word	0x000dd092
   d4340:	2003d6fc 	.word	0x2003d6fc
   d4344:	000dd09b 	.word	0x000dd09b
   d4348:	000dd000 	.word	0x000dd000
   d434c:	003d0900 	.word	0x003d0900
   d4350:	2003dea8 	.word	0x2003dea8
   d4354:	000dd0a4 	.word	0x000dd0a4

000d4358 <_Z8sendDataPKchbbb>:
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}

void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   d4358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d435c:	b085      	sub	sp, #20
   d435e:	af02      	add	r7, sp, #8
   d4360:	4604      	mov	r4, r0
   d4362:	460e      	mov	r6, r1
   d4364:	4691      	mov	r9, r2
   d4366:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];
   d4368:	f006 fc93 	bl	dac92 <strlen>
   d436c:	3009      	adds	r0, #9
   d436e:	f020 0007 	bic.w	r0, r0, #7
   d4372:	ebad 0d00 	sub.w	sp, sp, r0
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   d4376:	4620      	mov	r0, r4
   d4378:	f006 fc8b 	bl	dac92 <strlen>
    myFile.print(dataStr);
    Serial.println(dataStr);
}

void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
    char outStr[strlen(dataOut)+2];
   d437c:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   d437e:	4603      	mov	r3, r0
   d4380:	4622      	mov	r2, r4
   d4382:	492d      	ldr	r1, [pc, #180]	; (d4438 <_Z8sendDataPKchbbb+0xe0>)
   d4384:	4628      	mov	r0, r5
   d4386:	f002 fdc9 	bl	d6f1c <sprintf>
    if(sendLTE || sendMode == 4){
   d438a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d438e:	b90b      	cbnz	r3, d4394 <_Z8sendDataPKchbbb+0x3c>
   d4390:	2e04      	cmp	r6, #4
   d4392:	d11b      	bne.n	d43cc <_Z8sendDataPKchbbb+0x74>
   d4394:	4b29      	ldr	r3, [pc, #164]	; (d443c <_Z8sendDataPKchbbb+0xe4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4396:	492a      	ldr	r1, [pc, #168]	; (d4440 <_Z8sendDataPKchbbb+0xe8>)
   d4398:	781b      	ldrb	r3, [r3, #0]
   d439a:	f88d 3000 	strb.w	r3, [sp]
   d439e:	462a      	mov	r2, r5
   d43a0:	233c      	movs	r3, #60	; 0x3c
   d43a2:	4638      	mov	r0, r7
   d43a4:	f004 fec8 	bl	d9138 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d43a8:	687c      	ldr	r4, [r7, #4]
   d43aa:	b17c      	cbz	r4, d43cc <_Z8sendDataPKchbbb+0x74>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d43ac:	6863      	ldr	r3, [r4, #4]
   d43ae:	3b01      	subs	r3, #1
   d43b0:	6063      	str	r3, [r4, #4]
   d43b2:	b95b      	cbnz	r3, d43cc <_Z8sendDataPKchbbb+0x74>
        {
          _M_dispose();
   d43b4:	6823      	ldr	r3, [r4, #0]
   d43b6:	4620      	mov	r0, r4
   d43b8:	689b      	ldr	r3, [r3, #8]
   d43ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43bc:	68a3      	ldr	r3, [r4, #8]
   d43be:	3b01      	subs	r3, #1
   d43c0:	60a3      	str	r3, [r4, #8]
   d43c2:	b91b      	cbnz	r3, d43cc <_Z8sendDataPKchbbb+0x74>
            _M_destroy();
   d43c4:	6823      	ldr	r3, [r4, #0]
   d43c6:	4620      	mov	r0, r4
   d43c8:	68db      	ldr	r3, [r3, #12]
   d43ca:	4798      	blx	r3
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
   d43cc:	f1b9 0f00 	cmp.w	r9, #0
   d43d0:	d101      	bne.n	d43d6 <_Z8sendDataPKchbbb+0x7e>
   d43d2:	2e01      	cmp	r6, #1
   d43d4:	d104      	bne.n	d43e0 <_Z8sendDataPKchbbb+0x88>
   d43d6:	f003 fc23 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43da:	f003 fca1 	bl	d7d20 <_ZNK8particle14BleLocalDevice9connectedEv>
   d43de:	b950      	cbnz	r0, d43f6 <_Z8sendDataPKchbbb+0x9e>
        uint8_t txBuf_tmp[strlen(outStr)];
        memcpy(txBuf_tmp,outStr,strlen(outStr));
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
    }
    if(sendXBee || sendMode == 2){
   d43e0:	f1b8 0f00 	cmp.w	r8, #0
   d43e4:	d101      	bne.n	d43ea <_Z8sendDataPKchbbb+0x92>
   d43e6:	2e02      	cmp	r6, #2
   d43e8:	d122      	bne.n	d4430 <_Z8sendDataPKchbbb+0xd8>
        Serial1.println(outStr);
   d43ea:	f005 f9c9 	bl	d9780 <_Z22__fetch_global_Serial1v>
   d43ee:	4629      	mov	r1, r5
   d43f0:	f004 fb59 	bl	d8aa6 <_ZN5Print7printlnEPKc>
    }
}
   d43f4:	e01c      	b.n	d4430 <_Z8sendDataPKchbbb+0xd8>
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(outStr)];
   d43f6:	4628      	mov	r0, r5
   d43f8:	f006 fc4b 	bl	dac92 <strlen>
   d43fc:	3007      	adds	r0, #7
   d43fe:	f020 0007 	bic.w	r0, r0, #7
        memcpy(txBuf_tmp,outStr,strlen(outStr));
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   d4402:	46e9      	mov	r9, sp
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(outStr)];
   d4404:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   d4408:	4628      	mov	r0, r5
   d440a:	f006 fc42 	bl	dac92 <strlen>
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(outStr)];
   d440e:	ac02      	add	r4, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   d4410:	4602      	mov	r2, r0
   d4412:	4629      	mov	r1, r5
   d4414:	4620      	mov	r0, r4
   d4416:	f006 fba8 	bl	dab6a <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   d441a:	4628      	mov	r0, r5
   d441c:	f006 fc39 	bl	dac92 <strlen>
   d4420:	2300      	movs	r3, #0
   d4422:	4602      	mov	r2, r0
   d4424:	4621      	mov	r1, r4
   d4426:	4807      	ldr	r0, [pc, #28]	; (d4444 <_Z8sendDataPKchbbb+0xec>)
   d4428:	f003 fa8a 	bl	d7940 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d442c:	46cd      	mov	sp, r9
   d442e:	e7d7      	b.n	d43e0 <_Z8sendDataPKchbbb+0x88>
    }
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}
   d4430:	370c      	adds	r7, #12
   d4432:	46bd      	mov	sp, r7
   d4434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4438:	000dd0c9 	.word	0x000dd0c9
   d443c:	2003d780 	.word	0x2003d780
   d4440:	000dd071 	.word	0x000dd071
   d4444:	2003d764 	.word	0x2003d764

000d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4448:	4613      	mov	r3, r2
   d444a:	460a      	mov	r2, r1
   d444c:	2101      	movs	r1, #1
   d444e:	f004 bb54 	b.w	d8afa <_ZN5Print11printf_implEbPKcz>

000d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
   d4452:	4613      	mov	r3, r2
   d4454:	460a      	mov	r2, r1
   d4456:	2101      	movs	r1, #1
   d4458:	f004 bb4f 	b.w	d8afa <_ZN5Print11printf_implEbPKcz>

000d445c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d445c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d445e:	b095      	sub	sp, #84	; 0x54
   d4460:	4604      	mov	r4, r0
   d4462:	af00      	add	r7, sp, #0
   d4464:	460e      	mov	r6, r1
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   d4466:	2226      	movs	r2, #38	; 0x26
   d4468:	2100      	movs	r1, #0
   d446a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d446e:	f006 fba2 	bl	dabb6 <memset>
    memcpy(fileCommand,data,8);
   d4472:	6820      	ldr	r0, [r4, #0]
   d4474:	6861      	ldr	r1, [r4, #4]
   d4476:	f107 0328 	add.w	r3, r7, #40	; 0x28
   d447a:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   d447c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d4480:	2b66      	cmp	r3, #102	; 0x66
        }
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
   d4482:	466d      	mov	r5, sp

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
    memcpy(fileCommand,data,8);
    if(fileCommand[0] == 'f'){
   d4484:	d16a      	bne.n	d455c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
        //Serial.printlnf("Found an 'f' command %s",fileCommand);
        if(!strcmp(fileCommand,"filename")){
   d4486:	4941      	ldr	r1, [pc, #260]	; (d458c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   d4488:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d448c:	f006 fbd3 	bl	dac36 <strcmp>
   d4490:	2800      	cmp	r0, #0
   d4492:	d141      	bne.n	d4518 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   d4494:	483e      	ldr	r0, [pc, #248]	; (d4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d4496:	7c03      	ldrb	r3, [r0, #16]
   d4498:	b113      	cbz	r3, d44a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   d449a:	3010      	adds	r0, #16
   d449c:	f001 fc40 	bl	d5d20 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   d44a0:	4623      	mov	r3, r4
   d44a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   d44a6:	f104 0620 	add.w	r6, r4, #32
   d44aa:	6818      	ldr	r0, [r3, #0]
   d44ac:	6859      	ldr	r1, [r3, #4]
   d44ae:	4614      	mov	r4, r2
   d44b0:	c403      	stmia	r4!, {r0, r1}
   d44b2:	3308      	adds	r3, #8
   d44b4:	42b3      	cmp	r3, r6
   d44b6:	4622      	mov	r2, r4
   d44b8:	d1f7      	bne.n	d44aa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   d44ba:	6818      	ldr	r0, [r3, #0]
   d44bc:	6020      	str	r0, [r4, #0]
   d44be:	889b      	ldrh	r3, [r3, #4]
   d44c0:	80a3      	strh	r3, [r4, #4]
            memset(offloadFilename,0,MAX_FILENAME_LEN);
   d44c2:	221e      	movs	r2, #30
   d44c4:	2100      	movs	r1, #0
   d44c6:	4833      	ldr	r0, [pc, #204]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d44c8:	f006 fb75 	bl	dabb6 <memset>
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   d44cc:	221e      	movs	r2, #30
   d44ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
   d44d2:	4830      	ldr	r0, [pc, #192]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d44d4:	f006 fbfa 	bl	daccc <strncpy>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d44d8:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d44da:	4a2e      	ldr	r2, [pc, #184]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d44dc:	492e      	ldr	r1, [pc, #184]	; (d4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d44de:	713b      	strb	r3, [r7, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d44e0:	1d38      	adds	r0, r7, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d44e2:	717b      	strb	r3, [r7, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d44e4:	f001 fc23 	bl	d5d2e <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   d44e8:	b148      	cbz	r0, d44fe <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   d44ea:	f005 f87b 	bl	d95e4 <_Z16_fetch_usbserialv>
   d44ee:	492b      	ldr	r1, [pc, #172]	; (d459c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   d44f0:	4a28      	ldr	r2, [pc, #160]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d44f2:	f7ff ffae 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d44f6:	4927      	ldr	r1, [pc, #156]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d44f8:	4827      	ldr	r0, [pc, #156]	; (d4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   d44fa:	f001 fc67 	bl	d5dcc <_ZN7FatFile6removeEPS_PKc>
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   d44fe:	f005 f871 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4502:	4a24      	ldr	r2, [pc, #144]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4504:	4926      	ldr	r1, [pc, #152]	; (d45a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   d4506:	f7ff ffa4 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   d450a:	f244 2202 	movw	r2, #16898	; 0x4202
   d450e:	4921      	ldr	r1, [pc, #132]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4510:	4824      	ldr	r0, [pc, #144]	; (d45a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d4512:	f7ff fe47 	bl	d41a4 <_ZN7FatFile4openEPKci>
            return;
   d4516:	e034      	b.n	d4582 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
        }
        else if(!strcmp(fileCommand,"filecomp")){
   d4518:	4923      	ldr	r1, [pc, #140]	; (d45a8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   d451a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d451e:	f006 fb8a 	bl	dac36 <strcmp>
   d4522:	b960      	cbnz	r0, d453e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe2>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   d4524:	f005 f85e 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4528:	4a1a      	ldr	r2, [pc, #104]	; (d4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d452a:	4920      	ldr	r1, [pc, #128]	; (d45ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   d452c:	f7ff ff91 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4530:	4b17      	ldr	r3, [pc, #92]	; (d4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d4532:	7c1b      	ldrb	r3, [r3, #16]
   d4534:	b32b      	cbz	r3, d4582 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
   d4536:	481b      	ldr	r0, [pc, #108]	; (d45a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d4538:	f001 fbf2 	bl	d5d20 <_ZN7FatFile5closeEv>
   d453c:	e021      	b.n	d4582 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
            return;
        }
        else if(!strcmp(fileCommand,"filedone")){
   d453e:	491c      	ldr	r1, [pc, #112]	; (d45b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   d4540:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4544:	f006 fb77 	bl	dac36 <strcmp>
   d4548:	b940      	cbnz	r0, d455c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
            Serial.println("Received done command");
   d454a:	f005 f84b 	bl	d95e4 <_Z16_fetch_usbserialv>
   d454e:	4919      	ldr	r1, [pc, #100]	; (d45b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   d4550:	f004 faa9 	bl	d8aa6 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   d4554:	4b18      	ldr	r3, [pc, #96]	; (d45b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   d4556:	2201      	movs	r2, #1
   d4558:	701a      	strb	r2, [r3, #0]
   d455a:	e7e9      	b.n	d4530 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd4>
            if(myFile.isOpen()) myFile.close();
            return;
        }
    }
    char dataStr[len];
   d455c:	1df3      	adds	r3, r6, #7
   d455e:	f023 0307 	bic.w	r3, r3, #7
   d4562:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   d4566:	4632      	mov	r2, r6
   d4568:	4621      	mov	r1, r4
   d456a:	4668      	mov	r0, sp
   d456c:	f006 fafd 	bl	dab6a <memcpy>
    myFile.print(dataStr);
   d4570:	4669      	mov	r1, sp
   d4572:	4807      	ldr	r0, [pc, #28]	; (d4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   d4574:	f004 fa84 	bl	d8a80 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   d4578:	f005 f834 	bl	d95e4 <_Z16_fetch_usbserialv>
   d457c:	4669      	mov	r1, sp
   d457e:	f004 fa92 	bl	d8aa6 <_ZN5Print7printlnEPKc>
}
   d4582:	3754      	adds	r7, #84	; 0x54
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
            return;
   d4584:	46ad      	mov	sp, r5
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d4586:	46bd      	mov	sp, r7
   d4588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d458a:	bf00      	nop
   d458c:	000dd0d0 	.word	0x000dd0d0
   d4590:	2003d730 	.word	0x2003d730
   d4594:	2003d7c5 	.word	0x2003d7c5
   d4598:	2003e2e4 	.word	0x2003e2e4
   d459c:	000dd0d9 	.word	0x000dd0d9
   d45a0:	000dd10c 	.word	0x000dd10c
   d45a4:	2003d740 	.word	0x2003d740
   d45a8:	000dd129 	.word	0x000dd129
   d45ac:	000dd132 	.word	0x000dd132
   d45b0:	000dd14a 	.word	0x000dd14a
   d45b4:	000dd153 	.word	0x000dd153
   d45b8:	2003d6c8 	.word	0x2003d6c8

000d45bc <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d45bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d45c0:	6804      	ldr	r4, [r0, #0]
   d45c2:	6843      	ldr	r3, [r0, #4]
   d45c4:	1b1b      	subs	r3, r3, r4
   d45c6:	4c20      	ldr	r4, [pc, #128]	; (d4648 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x8c>)
   d45c8:	109b      	asrs	r3, r3, #2
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d45ca:	435c      	muls	r4, r3
   d45cc:	bf14      	ite	ne
   d45ce:	4623      	movne	r3, r4
   d45d0:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d45d2:	18e3      	adds	r3, r4, r3
   d45d4:	4606      	mov	r6, r0
   d45d6:	460f      	mov	r7, r1
   d45d8:	4c1c      	ldr	r4, [pc, #112]	; (d464c <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x90>)
   d45da:	d201      	bcs.n	d45e0 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d45dc:	42a3      	cmp	r3, r4
   d45de:	d92d      	bls.n	d463c <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x80>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d45e0:	2014      	movs	r0, #20
   d45e2:	4360      	muls	r0, r4
   d45e4:	f7ff fd59 	bl	d409a <_Znwj>
   d45e8:	4680      	mov	r8, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d45ea:	f8d6 9000 	ldr.w	r9, [r6]
   d45ee:	6875      	ldr	r5, [r6, #4]
   d45f0:	ebc9 0505 	rsb	r5, r9, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d45f4:	eb18 0e05 	adds.w	lr, r8, r5
   d45f8:	bf1e      	ittt	ne
   d45fa:	cf0f      	ldmiane	r7!, {r0, r1, r2, r3}
   d45fc:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   d4600:	683b      	ldrne	r3, [r7, #0]
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4602:	4a11      	ldr	r2, [pc, #68]	; (d4648 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x8c>)
   d4604:	bf18      	it	ne
   d4606:	f8ce 3000 	strne.w	r3, [lr]
   d460a:	10ab      	asrs	r3, r5, #2
   d460c:	435a      	muls	r2, r3
   d460e:	d004      	beq.n	d461a <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x5e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4610:	462a      	mov	r2, r5
   d4612:	4649      	mov	r1, r9
   d4614:	4640      	mov	r0, r8
   d4616:	f006 fab3 	bl	dab80 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d461a:	3514      	adds	r5, #20
   d461c:	4445      	add	r5, r8

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d461e:	f1b9 0f00 	cmp.w	r9, #0
   d4622:	d002      	beq.n	d462a <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x6e>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4624:	4648      	mov	r0, r9
   d4626:	f7ff fd3a 	bl	d409e <_ZdlPv>
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d462a:	2314      	movs	r3, #20
   d462c:	fb03 8404 	mla	r4, r3, r4, r8
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4630:	f8c6 8000 	str.w	r8, [r6]
	this->_M_impl._M_finish = __new_finish;
   d4634:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4636:	60b4      	str	r4, [r6, #8]
      }
   d4638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d463c:	461c      	mov	r4, r3
   d463e:	2b00      	cmp	r3, #0
   d4640:	d1ce      	bne.n	d45e0 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d4642:	4698      	mov	r8, r3
   d4644:	e7d1      	b.n	d45ea <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2e>
   d4646:	bf00      	nop
   d4648:	cccccccd 	.word	0xcccccccd
   d464c:	0ccccccc 	.word	0x0ccccccc

000d4650 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   d4650:	b570      	push	{r4, r5, r6, lr}
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4652:	6844      	ldr	r4, [r0, #4]
   d4654:	6883      	ldr	r3, [r0, #8]
   d4656:	429c      	cmp	r4, r3
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   d4658:	4606      	mov	r6, r0
   d465a:	460d      	mov	r5, r1
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d465c:	d008      	beq.n	d4670 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d465e:	b11c      	cbz	r4, d4668 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x18>
   d4660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4664:	682b      	ldr	r3, [r5, #0]
   d4666:	6023      	str	r3, [r4, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d4668:	6873      	ldr	r3, [r6, #4]
   d466a:	3314      	adds	r3, #20
   d466c:	6073      	str	r3, [r6, #4]
   d466e:	bd70      	pop	{r4, r5, r6, pc}
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d4670:	f7ff ffa4 	bl	d45bc <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
   d4674:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4678 <_Z14processCommandPKchb>:
    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d467c:	ed2d 8b02 	vpush	{d8}
   d4680:	b09b      	sub	sp, #108	; 0x6c
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d4682:	7883      	ldrb	r3, [r0, #2]
   d4684:	2b41      	cmp	r3, #65	; 0x41
    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4686:	af04      	add	r7, sp, #16
   d4688:	4604      	mov	r4, r0
   d468a:	468a      	mov	sl, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d468c:	d102      	bne.n	d4694 <_Z14processCommandPKchb+0x1c>
   d468e:	78c3      	ldrb	r3, [r0, #3]
   d4690:	2b42      	cmp	r3, #66	; 0x42
   d4692:	e004      	b.n	d469e <_Z14processCommandPKchb+0x26>
   d4694:	2b43      	cmp	r3, #67	; 0x43
   d4696:	f040 81cb 	bne.w	d4a30 <_Z14processCommandPKchb+0x3b8>
   d469a:	78c3      	ldrb	r3, [r0, #3]
   d469c:	2b43      	cmp	r3, #67	; 0x43
   d469e:	f040 81c7 	bne.w	d4a30 <_Z14processCommandPKchb+0x3b8>
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d46a2:	4620      	mov	r0, r4
   d46a4:	f006 faf5 	bl	dac92 <strlen>
   d46a8:	3801      	subs	r0, #1
   d46aa:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d46ae:	46e9      	mov	r9, sp

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d46b0:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   d46b4:	4620      	mov	r0, r4
   d46b6:	f006 faec 	bl	dac92 <strlen>

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d46ba:	ae04      	add	r6, sp, #16
        dataStr[strlen(command)-9] = '\0';
   d46bc:	4430      	add	r0, r6
   d46be:	2500      	movs	r5, #0
   d46c0:	f800 5c09 	strb.w	r5, [r0, #-9]
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
   d46c4:	4620      	mov	r0, r4
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-8];
        dataStr[strlen(command)-9] = '\0';
        char cmdStr[4];
        cmdStr[3] = '\0';
   d46c6:	74fd      	strb	r5, [r7, #19]
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
   d46c8:	f006 fae3 	bl	dac92 <strlen>
   d46cc:	4420      	add	r0, r4
   d46ce:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   d46d2:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   d46d4:	4620      	mov	r0, r4
   d46d6:	f006 fadc 	bl	dac92 <strlen>
   d46da:	4420      	add	r0, r4
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d46dc:	4629      	mov	r1, r5
        dataStr[strlen(command)-9] = '\0';
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
   d46de:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   d46e2:	737b      	strb	r3, [r7, #13]
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d46e4:	2210      	movs	r2, #16
   d46e6:	f107 000c 	add.w	r0, r7, #12
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
   d46ea:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d46ec:	f007 f9ba 	bl	dba64 <strtol>
   d46f0:	4680      	mov	r8, r0
   d46f2:	fa5f f888 	uxtb.w	r8, r8
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   d46f6:	f004 ff75 	bl	d95e4 <_Z16_fetch_usbserialv>
   d46fa:	f8cd 8000 	str.w	r8, [sp]
   d46fe:	4643      	mov	r3, r8
   d4700:	4ace      	ldr	r2, [pc, #824]	; (d4a3c <_Z14processCommandPKchb+0x3c4>)
   d4702:	2101      	movs	r1, #1
   d4704:	f004 f9f9 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d4708:	2504      	movs	r5, #4
   d470a:	4620      	mov	r0, r4
   d470c:	f006 fac1 	bl	dac92 <strlen>
   d4710:	3802      	subs	r0, #2
   d4712:	4285      	cmp	r5, r0
   d4714:	d211      	bcs.n	d473a <_Z14processCommandPKchb+0xc2>
            if(i < 7) cmdStr[i-4] = command[i];
   d4716:	2d06      	cmp	r5, #6
   d4718:	bf9b      	ittet	ls
   d471a:	f107 0358 	addls.w	r3, r7, #88	; 0x58
   d471e:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   d4720:	1973      	addhi	r3, r6, r5
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4722:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   d4724:	bf8c      	ite	hi
   d4726:	5d62      	ldrbhi	r2, [r4, r5]
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4728:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d472c:	f105 0501 	add.w	r5, r5, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d4730:	bf88      	it	hi
   d4732:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d4736:	b2ed      	uxtb	r5, r5
   d4738:	e7e7      	b.n	d470a <_Z14processCommandPKchb+0x92>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(checksum != strlen(command)-2){
   d473a:	4540      	cmp	r0, r8
   d473c:	d042      	beq.n	d47c4 <_Z14processCommandPKchb+0x14c>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   d473e:	f004 ff51 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4742:	4605      	mov	r5, r0
   d4744:	4620      	mov	r0, r4
   d4746:	f006 faa4 	bl	dac92 <strlen>
   d474a:	1e83      	subs	r3, r0, #2
   d474c:	4628      	mov	r0, r5
   d474e:	4dbc      	ldr	r5, [pc, #752]	; (d4a40 <_Z14processCommandPKchb+0x3c8>)
   d4750:	f8cd 8000 	str.w	r8, [sp]
   d4754:	4abb      	ldr	r2, [pc, #748]	; (d4a44 <_Z14processCommandPKchb+0x3cc>)
   d4756:	2101      	movs	r1, #1
   d4758:	f004 f9cf 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
            if(!logFile.isOpen()){
   d475c:	7c2b      	ldrb	r3, [r5, #16]
   d475e:	b983      	cbnz	r3, d4782 <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4760:	f244 2202 	movw	r2, #16898	; 0x4202
   d4764:	49b8      	ldr	r1, [pc, #736]	; (d4a48 <_Z14processCommandPKchb+0x3d0>)
   d4766:	f105 0010 	add.w	r0, r5, #16
   d476a:	f7ff fd1b 	bl	d41a4 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d476e:	4622      	mov	r2, r4
   d4770:	49b6      	ldr	r1, [pc, #728]	; (d4a4c <_Z14processCommandPKchb+0x3d4>)
   d4772:	4628      	mov	r0, r5
   d4774:	f7ff fe6d 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d4778:	f105 0010 	add.w	r0, r5, #16
   d477c:	f001 fad0 	bl	d5d20 <_ZN7FatFile5closeEv>
   d4780:	e004      	b.n	d478c <_Z14processCommandPKchb+0x114>
            }
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4782:	4622      	mov	r2, r4
   d4784:	49b1      	ldr	r1, [pc, #708]	; (d4a4c <_Z14processCommandPKchb+0x3d4>)
   d4786:	4628      	mov	r0, r5
   d4788:	f7ff fe63 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            Serial.println("Warning, checksum does not match");
   d478c:	f004 ff2a 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4790:	49af      	ldr	r1, [pc, #700]	; (d4a50 <_Z14processCommandPKchb+0x3d8>)
   d4792:	f004 f988 	bl	d8aa6 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   d4796:	7863      	ldrb	r3, [r4, #1]
   d4798:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d479c:	2a09      	cmp	r2, #9
   d479e:	d902      	bls.n	d47a6 <_Z14processCommandPKchb+0x12e>
   d47a0:	2b43      	cmp	r3, #67	; 0x43
   d47a2:	f040 8144 	bne.w	d4a2e <_Z14processCommandPKchb+0x3b6>
                char rxBotNum[2];
                rxBotNum[0] = command[0];
   d47a6:	7822      	ldrb	r2, [r4, #0]
   d47a8:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
                rxBotNum[1] = command[1];
   d47ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   d47b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
   d47b4:	f107 0310 	add.w	r3, r7, #16
   d47b8:	49a6      	ldr	r1, [pc, #664]	; (d4a54 <_Z14processCommandPKchb+0x3dc>)
   d47ba:	48a7      	ldr	r0, [pc, #668]	; (d4a58 <_Z14processCommandPKchb+0x3e0>)
   d47bc:	f002 fbae 	bl	d6f1c <sprintf>
                errModeReply = mode;
   d47c0:	4ba6      	ldr	r3, [pc, #664]	; (d4a5c <_Z14processCommandPKchb+0x3e4>)
   d47c2:	e0e6      	b.n	d4992 <_Z14processCommandPKchb+0x31a>
            }
            
            return;
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d47c4:	49a6      	ldr	r1, [pc, #664]	; (d4a60 <_Z14processCommandPKchb+0x3e8>)
   d47c6:	f107 0010 	add.w	r0, r7, #16
   d47ca:	f006 fa34 	bl	dac36 <strcmp>
   d47ce:	2800      	cmp	r0, #0
   d47d0:	f000 812d 	beq.w	d4a2e <_Z14processCommandPKchb+0x3b6>
            else if(mode == 2){ //Acknowledge from BLE
                
            }
            return;
        }
        else if(!strcmp(cmdStr,"sup")){
   d47d4:	49a3      	ldr	r1, [pc, #652]	; (d4a64 <_Z14processCommandPKchb+0x3ec>)
   d47d6:	f107 0010 	add.w	r0, r7, #16
   d47da:	f006 fa2c 	bl	dac36 <strcmp>
   d47de:	2800      	cmp	r0, #0
   d47e0:	f040 80cb 	bne.w	d497a <_Z14processCommandPKchb+0x302>
            char rxIDBuf[1];
            rxIDBuf[0] = command[1];
   d47e4:	f107 0058 	add.w	r0, r7, #88	; 0x58
   d47e8:	7863      	ldrb	r3, [r4, #1]
   d47ea:	f800 3d50 	strb.w	r3, [r0, #-80]!
            uint8_t rxBotID = atoi(rxIDBuf);
   d47ee:	f006 f89e 	bl	da92e <atoi>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   d47f2:	4b9d      	ldr	r3, [pc, #628]	; (d4a68 <_Z14processCommandPKchb+0x3f0>)
   d47f4:	b2c5      	uxtb	r5, r0
   d47f6:	e893 0410 	ldmia.w	r3, {r4, sl}
            bool newBot = true;
   d47fa:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   d47fc:	45a2      	cmp	sl, r4
   d47fe:	d077      	beq.n	d48f0 <_Z14processCommandPKchb+0x278>
                if(rxBotID == w.botNum){
   d4800:	7822      	ldrb	r2, [r4, #0]
   d4802:	42aa      	cmp	r2, r5
   d4804:	d172      	bne.n	d48ec <_Z14processCommandPKchb+0x274>
                    uint8_t statflags;
                    float latRX;
                    float lonRX;
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   d4806:	f107 0828 	add.w	r8, r7, #40	; 0x28
   d480a:	f107 0b18 	add.w	fp, r7, #24
   d480e:	f107 0314 	add.w	r3, r7, #20
   d4812:	f107 020b 	add.w	r2, r7, #11
   d4816:	4995      	ldr	r1, [pc, #596]	; (d4a6c <_Z14processCommandPKchb+0x3f4>)
   d4818:	f8cd 8004 	str.w	r8, [sp, #4]
   d481c:	f8cd b000 	str.w	fp, [sp]
   d4820:	4630      	mov	r0, r6
   d4822:	f002 fb83 	bl	d6f2c <sscanf>
                    latRX = atof(testLat);
   d4826:	4658      	mov	r0, fp
   d4828:	f006 f87e 	bl	da928 <atof>
                    lonRX = atof(testLon);
   d482c:	4640      	mov	r0, r8
                    float latRX;
                    float lonRX;
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
                    latRX = atof(testLat);
   d482e:	eeb0 8a40 	vmov.f32	s16, s0
   d4832:	eef0 8a60 	vmov.f32	s17, s1
                    lonRX = atof(testLon);
   d4836:	f006 f877 	bl	da928 <atof>
                    w.battPercent = battpct;
                    w.LTEAvail = statflags & 1;
   d483a:	f897 8014 	ldrb.w	r8, [r7, #20]
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
                    latRX = atof(testLat);
                    lonRX = atof(testLon);
                    w.battPercent = battpct;
   d483e:	f897 b00b 	ldrb.w	fp, [r7, #11]
                    float lonRX;
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
                    latRX = atof(testLat);
                    lonRX = atof(testLon);
   d4842:	ed87 0b00 	vstr	d0, [r7]
                    w.manualRC = (statflags >> 4) & 1;
                    w.lowBatt = (statflags >> 5) & 1;
                    w.dataRecording = (statflags >> 6) & 1;
                    w.GPSLat = latRX;
                    w.GPSLon = lonRX;
                    Serial.println("Status Update!");
   d4846:	f004 fecd 	bl	d95e4 <_Z16_fetch_usbserialv>
   d484a:	4989      	ldr	r1, [pc, #548]	; (d4a70 <_Z14processCommandPKchb+0x3f8>)
   d484c:	f004 f92b 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   d4850:	f004 fec8 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4854:	4987      	ldr	r1, [pc, #540]	; (d4a74 <_Z14processCommandPKchb+0x3fc>)
   d4856:	f004 f926 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   d485a:	f004 fec3 	bl	d95e4 <_Z16_fetch_usbserialv>
   d485e:	4986      	ldr	r1, [pc, #536]	; (d4a78 <_Z14processCommandPKchb+0x400>)
   d4860:	f004 f921 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   d4864:	f004 febe 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4868:	462a      	mov	r2, r5
   d486a:	4984      	ldr	r1, [pc, #528]	; (d4a7c <_Z14processCommandPKchb+0x404>)
   d486c:	f7ff fdec 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   d4870:	f004 feb8 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4874:	465a      	mov	r2, fp
   d4876:	4982      	ldr	r1, [pc, #520]	; (d4a80 <_Z14processCommandPKchb+0x408>)
   d4878:	f7ff fde6 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
                    Serial.println("##    LTE  BLE  XBee    ##");
   d487c:	f004 feb2 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4880:	4980      	ldr	r1, [pc, #512]	; (d4a84 <_Z14processCommandPKchb+0x40c>)
   d4882:	f004 f910 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   d4886:	f004 fead 	bl	d95e4 <_Z16_fetch_usbserialv>
   d488a:	f3c8 0340 	ubfx	r3, r8, #1, #1
   d488e:	9301      	str	r3, [sp, #4]
   d4890:	f3c8 0380 	ubfx	r3, r8, #2, #1
   d4894:	4a7c      	ldr	r2, [pc, #496]	; (d4a88 <_Z14processCommandPKchb+0x410>)
   d4896:	9300      	str	r3, [sp, #0]
   d4898:	2101      	movs	r1, #1
   d489a:	f008 0301 	and.w	r3, r8, #1
   d489e:	f004 f92c 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   d48a2:	f004 fe9f 	bl	d95e4 <_Z16_fetch_usbserialv>
   d48a6:	4979      	ldr	r1, [pc, #484]	; (d4a8c <_Z14processCommandPKchb+0x414>)
   d48a8:	f004 f8fd 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   d48ac:	f004 fe9a 	bl	d95e4 <_Z16_fetch_usbserialv>
   d48b0:	ed97 0b00 	vldr	d0, [r7]
   d48b4:	4680      	mov	r8, r0
   d48b6:	ec51 0b10 	vmov	r0, r1, d0
   d48ba:	f005 ffe5 	bl	da888 <__aeabi_d2f>
   d48be:	f005 fcad 	bl	da21c <__aeabi_f2d>
   d48c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48c6:	ec51 0b18 	vmov	r0, r1, d8
   d48ca:	f005 ffdd 	bl	da888 <__aeabi_d2f>
   d48ce:	f005 fca5 	bl	da21c <__aeabi_f2d>
   d48d2:	4a6f      	ldr	r2, [pc, #444]	; (d4a90 <_Z14processCommandPKchb+0x418>)
   d48d4:	e9cd 0100 	strd	r0, r1, [sp]
   d48d8:	2101      	movs	r1, #1
   d48da:	4640      	mov	r0, r8
   d48dc:	f004 f90d 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
                    Serial.println("##########################");
   d48e0:	f004 fe80 	bl	d95e4 <_Z16_fetch_usbserialv>
   d48e4:	4963      	ldr	r1, [pc, #396]	; (d4a74 <_Z14processCommandPKchb+0x3fc>)
   d48e6:	f004 f8de 	bl	d8aa6 <_ZN5Print7printlnEPKc>
            rxIDBuf[0] = command[1];
            uint8_t rxBotID = atoi(rxIDBuf);
            bool newBot = true;
            for(WaterBot w: WaterBots){
                if(rxBotID == w.botNum){
                    newBot = false;
   d48ea:	2300      	movs	r3, #0
   d48ec:	3414      	adds	r4, #20
   d48ee:	e785      	b.n	d47fc <_Z14processCommandPKchb+0x184>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
                    Serial.println("##########################");
                }

            }
            if(newBot){
   d48f0:	2b00      	cmp	r3, #0
   d48f2:	f000 809c 	beq.w	d4a2e <_Z14processCommandPKchb+0x3b6>
                Serial.println("Found a new water bot ID");
   d48f6:	f004 fe75 	bl	d95e4 <_Z16_fetch_usbserialv>
   d48fa:	4966      	ldr	r1, [pc, #408]	; (d4a94 <_Z14processCommandPKchb+0x41c>)
   d48fc:	f004 f8d3 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
                newWaterbot.BLEAvail = true;
   d4900:	2301      	movs	r3, #1
   d4902:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                newBot = false;
                uint8_t battpct;
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   d4906:	f107 0318 	add.w	r3, r7, #24
            }
            if(newBot){
                Serial.println("Found a new water bot ID");
                WaterBot newWaterbot;
                newWaterbot.BLEAvail = true;
                newWaterbot.botNum = rxBotID;
   d490a:	f887 5028 	strb.w	r5, [r7, #40]	; 0x28
                newBot = false;
                uint8_t battpct;
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   d490e:	9301      	str	r3, [sp, #4]
   d4910:	f107 0314 	add.w	r3, r7, #20
   d4914:	9300      	str	r3, [sp, #0]
   d4916:	f107 020a 	add.w	r2, r7, #10
   d491a:	f107 030b 	add.w	r3, r7, #11
   d491e:	495e      	ldr	r1, [pc, #376]	; (d4a98 <_Z14processCommandPKchb+0x420>)
   d4920:	4630      	mov	r0, r6
   d4922:	f002 fb03 	bl	d6f2c <sscanf>
                newWaterbot.battPercent = battpct;
   d4926:	7abb      	ldrb	r3, [r7, #10]
   d4928:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                newWaterbot.LTEAvail = statflags & 1;
   d492c:	7afb      	ldrb	r3, [r7, #11]
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
                WaterBots.push_back(newWaterbot);
   d492e:	484e      	ldr	r0, [pc, #312]	; (d4a68 <_Z14processCommandPKchb+0x3f0>)
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
                newWaterbot.battPercent = battpct;
                newWaterbot.LTEAvail = statflags & 1;
   d4930:	f003 0201 	and.w	r2, r3, #1
   d4934:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   d4938:	f3c3 0240 	ubfx	r2, r3, #1, #1
   d493c:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   d4940:	f3c3 0280 	ubfx	r2, r3, #2, #1
   d4944:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
                newWaterbot.offloading = (statflags >> 3) & 1;
   d4948:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   d494c:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
                newWaterbot.manualRC = (statflags >> 4) & 1;
   d4950:	f3c3 1200 	ubfx	r2, r3, #4, #1
   d4954:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   d4958:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   d495c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d4960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                newWaterbot.GPSLat = latRX;
   d4964:	697b      	ldr	r3, [r7, #20]
   d4966:	637b      	str	r3, [r7, #52]	; 0x34
                newWaterbot.GPSLon = lonRX;
                WaterBots.push_back(newWaterbot);
   d4968:	f107 0128 	add.w	r1, r7, #40	; 0x28
                newWaterbot.offloading = (statflags >> 3) & 1;
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
   d496c:	69bb      	ldr	r3, [r7, #24]
                newWaterbot.LTEAvail = statflags & 1;
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
                newWaterbot.offloading = (statflags >> 3) & 1;
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   d496e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
   d4972:	63bb      	str	r3, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   d4974:	f7ff fe6c 	bl	d4650 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   d4978:	e059      	b.n	d4a2e <_Z14processCommandPKchb+0x3b6>
            }
        }
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   d497a:	4948      	ldr	r1, [pc, #288]	; (d4a9c <_Z14processCommandPKchb+0x424>)
   d497c:	f107 0010 	add.w	r0, r7, #16
   d4980:	f006 f959 	bl	dac36 <strcmp>
   d4984:	b940      	cbnz	r0, d4998 <_Z14processCommandPKchb+0x320>
            strncpy(errCmdStr,dataStr,3);
   d4986:	2203      	movs	r2, #3
   d4988:	4631      	mov	r1, r6
   d498a:	4845      	ldr	r0, [pc, #276]	; (d4aa0 <_Z14processCommandPKchb+0x428>)
   d498c:	f006 f99e 	bl	daccc <strncpy>
            errCmdMode = mode;
   d4990:	4b44      	ldr	r3, [pc, #272]	; (d4aa4 <_Z14processCommandPKchb+0x42c>)
   d4992:	f883 a000 	strb.w	sl, [r3]
   d4996:	e04a      	b.n	d4a2e <_Z14processCommandPKchb+0x3b6>
        }
        else if(!strcmp(cmdStr,"pts")){
   d4998:	4943      	ldr	r1, [pc, #268]	; (d4aa8 <_Z14processCommandPKchb+0x430>)
   d499a:	f107 0010 	add.w	r0, r7, #16
   d499e:	f006 f94a 	bl	dac36 <strcmp>
   d49a2:	4604      	mov	r4, r0
   d49a4:	2800      	cmp	r0, #0
   d49a6:	d142      	bne.n	d4a2e <_Z14processCommandPKchb+0x3b6>
            Serial.println(dataStr);
   d49a8:	f004 fe1c 	bl	d95e4 <_Z16_fetch_usbserialv>
   d49ac:	4631      	mov	r1, r6
   d49ae:	f004 f87a 	bl	d8aa6 <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   d49b2:	f244 2202 	movw	r2, #16898	; 0x4202
   d49b6:	493d      	ldr	r1, [pc, #244]	; (d4aac <_Z14processCommandPKchb+0x434>)
   d49b8:	483d      	ldr	r0, [pc, #244]	; (d4ab0 <_Z14processCommandPKchb+0x438>)
   d49ba:	f7ff fbf3 	bl	d41a4 <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d49be:	493d      	ldr	r1, [pc, #244]	; (d4ab4 <_Z14processCommandPKchb+0x43c>)
   d49c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d49c4:	f002 fc47 	bl	d7256 <_ZN6StringC1EPK19__FlashStringHelper>
   d49c8:	493b      	ldr	r1, [pc, #236]	; (d4ab8 <_Z14processCommandPKchb+0x440>)
   d49ca:	f107 0038 	add.w	r0, r7, #56	; 0x38
   d49ce:	f002 fc42 	bl	d7256 <_ZN6StringC1EPK19__FlashStringHelper>
   d49d2:	493a      	ldr	r1, [pc, #232]	; (d4abc <_Z14processCommandPKchb+0x444>)
   d49d4:	f107 0048 	add.w	r0, r7, #72	; 0x48
   d49d8:	f002 fc3d 	bl	d7256 <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   d49dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
   d49e0:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   d49e4:	f107 0018 	add.w	r0, r7, #24
   d49e8:	f002 fc57 	bl	d729a <_ZN6StringC1ERKS_>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d49ec:	f107 0318 	add.w	r3, r7, #24
   d49f0:	4a33      	ldr	r2, [pc, #204]	; (d4ac0 <_Z14processCommandPKchb+0x448>)
   d49f2:	4834      	ldr	r0, [pc, #208]	; (d4ac4 <_Z14processCommandPKchb+0x44c>)
   d49f4:	4621      	mov	r1, r4
   d49f6:	f004 f880 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
   d49fa:	f107 0018 	add.w	r0, r7, #24
   d49fe:	f002 fbe3 	bl	d71c8 <_ZN6StringD1Ev>
            myFile.println(dataStr);
   d4a02:	4631      	mov	r1, r6
   d4a04:	482f      	ldr	r0, [pc, #188]	; (d4ac4 <_Z14processCommandPKchb+0x44c>)
   d4a06:	f004 f84e 	bl	d8aa6 <_ZN5Print7printlnEPKc>
            delay(5);
   d4a0a:	2005      	movs	r0, #5
   d4a0c:	f004 f99a 	bl	d8d44 <delay>
            myFile.close();
   d4a10:	4827      	ldr	r0, [pc, #156]	; (d4ab0 <_Z14processCommandPKchb+0x438>)
   d4a12:	f001 f985 	bl	d5d20 <_ZN7FatFile5closeEv>
            errCmdMode = mode;
        }
        else if(!strcmp(cmdStr,"pts")){
            Serial.println(dataStr);
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d4a16:	f107 0048 	add.w	r0, r7, #72	; 0x48
   d4a1a:	f002 fbd5 	bl	d71c8 <_ZN6StringD1Ev>
   d4a1e:	f107 0038 	add.w	r0, r7, #56	; 0x38
   d4a22:	f002 fbd1 	bl	d71c8 <_ZN6StringD1Ev>
   d4a26:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4a2a:	f002 fbcd 	bl	d71c8 <_ZN6StringD1Ev>
                rxBotNum[1] = command[1];
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
                errModeReply = mode;
            }
            
            return;
   d4a2e:	46cd      	mov	sp, r9
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d4a30:	375c      	adds	r7, #92	; 0x5c
   d4a32:	46bd      	mov	sp, r7
   d4a34:	ecbd 8b02 	vpop	{d8}
   d4a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a3c:	000dd169 	.word	0x000dd169
   d4a40:	2003d790 	.word	0x2003d790
   d4a44:	000dd17e 	.word	0x000dd17e
   d4a48:	2003d6fc 	.word	0x2003d6fc
   d4a4c:	000dd19b 	.word	0x000dd19b
   d4a50:	000dd1c7 	.word	0x000dd1c7
   d4a54:	000dd1e8 	.word	0x000dd1e8
   d4a58:	2003d781 	.word	0x2003d781
   d4a5c:	2003d720 	.word	0x2003d720
   d4a60:	000dd1f4 	.word	0x000dd1f4
   d4a64:	000dd1f8 	.word	0x000dd1f8
   d4a68:	2003d724 	.word	0x2003d724
   d4a6c:	000dd1fc 	.word	0x000dd1fc
   d4a70:	000dd208 	.word	0x000dd208
   d4a74:	000dd217 	.word	0x000dd217
   d4a78:	000dd232 	.word	0x000dd232
   d4a7c:	000dd24d 	.word	0x000dd24d
   d4a80:	000dd269 	.word	0x000dd269
   d4a84:	000dd285 	.word	0x000dd285
   d4a88:	000dd2a0 	.word	0x000dd2a0
   d4a8c:	000dd2be 	.word	0x000dd2be
   d4a90:	000dd2d9 	.word	0x000dd2d9
   d4a94:	000dd2e9 	.word	0x000dd2e9
   d4a98:	000dd302 	.word	0x000dd302
   d4a9c:	000dd30e 	.word	0x000dd30e
   d4aa0:	2003d7e3 	.word	0x2003d7e3
   d4aa4:	2003d6f0 	.word	0x2003d6f0
   d4aa8:	000dd312 	.word	0x000dd312
   d4aac:	000dd316 	.word	0x000dd316
   d4ab0:	2003d740 	.word	0x2003d740
   d4ab4:	000dd323 	.word	0x000dd323
   d4ab8:	000dd327 	.word	0x000dd327
   d4abc:	000dd32c 	.word	0x000dd32c
   d4ac0:	000dd336 	.word	0x000dd336
   d4ac4:	2003d730 	.word	0x2003d730

000d4ac8 <_Z14dataLTEHandlerPKcS0_>:

void BLEScan(int BotNumber = -1);
void XBeeHandler();
void dataLTEHandler(const char *event, const char *data);

void dataLTEHandler(const char *event, const char *data){
   d4ac8:	b510      	push	{r4, lr}
   d4aca:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d4acc:	2200      	movs	r2, #0
   d4ace:	2104      	movs	r1, #4
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	f7ff fdd1 	bl	d4678 <_Z14processCommandPKchb>
    if(logMessages){
   d4ad6:	4b0b      	ldr	r3, [pc, #44]	; (d4b04 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   d4ad8:	781b      	ldrb	r3, [r3, #0]
   d4ada:	b193      	cbz	r3, d4b02 <_Z14dataLTEHandlerPKcS0_+0x3a>
   d4adc:	480a      	ldr	r0, [pc, #40]	; (d4b08 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4ade:	7c03      	ldrb	r3, [r0, #16]
   d4ae0:	b92b      	cbnz	r3, d4aee <_Z14dataLTEHandlerPKcS0_+0x26>
   d4ae2:	f244 2202 	movw	r2, #16898	; 0x4202
   d4ae6:	4909      	ldr	r1, [pc, #36]	; (d4b0c <_Z14dataLTEHandlerPKcS0_+0x44>)
   d4ae8:	3010      	adds	r0, #16
   d4aea:	f7ff fb5b 	bl	d41a4 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d4aee:	4622      	mov	r2, r4
   d4af0:	4907      	ldr	r1, [pc, #28]	; (d4b10 <_Z14dataLTEHandlerPKcS0_+0x48>)
   d4af2:	4805      	ldr	r0, [pc, #20]	; (d4b08 <_Z14dataLTEHandlerPKcS0_+0x40>)
   d4af4:	f7ff fcad 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4af8:	4806      	ldr	r0, [pc, #24]	; (d4b14 <_Z14dataLTEHandlerPKcS0_+0x4c>)
    }
}
   d4afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void dataLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4afe:	f001 b90f 	b.w	d5d20 <_ZN7FatFile5closeEv>
   d4b02:	bd10      	pop	{r4, pc}
   d4b04:	2003d6e0 	.word	0x2003d6e0
   d4b08:	2003d790 	.word	0x2003d790
   d4b0c:	2003d6fc 	.word	0x2003d6fc
   d4b10:	000dd34b 	.word	0x000dd34b
   d4b14:	2003d7a0 	.word	0x2003d7a0

000d4b18 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
            logFile.close();
        }
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4b18:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len+1];
   d4b1a:	f101 0308 	add.w	r3, r1, #8
   d4b1e:	f023 0307 	bic.w	r3, r3, #7
            logFile.close();
        }
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4b22:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   d4b24:	ebad 0d03 	sub.w	sp, sp, r3
   d4b28:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d4b2a:	2300      	movs	r3, #0
   d4b2c:	428b      	cmp	r3, r1
   d4b2e:	d003      	beq.n	d4b38 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
   d4b30:	5cc2      	ldrb	r2, [r0, r3]
   d4b32:	54e2      	strb	r2, [r4, r3]
   d4b34:	3301      	adds	r3, #1
   d4b36:	e7f9      	b.n	d4b2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   d4b38:	1e5a      	subs	r2, r3, #1
   d4b3a:	5ca1      	ldrb	r1, [r4, r2]
   d4b3c:	b111      	cbz	r1, d4b44 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   d4b3e:	2200      	movs	r2, #0
   d4b40:	54e2      	strb	r2, [r4, r3]
   d4b42:	e000      	b.n	d4b46 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
    else btBuf[len-1] = '\0';
   d4b44:	54a1      	strb	r1, [r4, r2]
    Serial.print("New BT Command: ");
   d4b46:	f004 fd4d 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4b4a:	4911      	ldr	r1, [pc, #68]	; (d4b90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d4b4c:	f003 ff98 	bl	d8a80 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   d4b50:	f004 fd48 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4b54:	4621      	mov	r1, r4
   d4b56:	f003 ffa6 	bl	d8aa6 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d4b5a:	2201      	movs	r2, #1
   d4b5c:	4611      	mov	r1, r2
   d4b5e:	4620      	mov	r0, r4
   d4b60:	f7ff fd8a 	bl	d4678 <_Z14processCommandPKchb>
    if(logMessages){
   d4b64:	4b0b      	ldr	r3, [pc, #44]	; (d4b94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d4b66:	781b      	ldrb	r3, [r3, #0]
   d4b68:	b183      	cbz	r3, d4b8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   d4b6a:	480b      	ldr	r0, [pc, #44]	; (d4b98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4b6c:	7c03      	ldrb	r3, [r0, #16]
   d4b6e:	b92b      	cbnz	r3, d4b7c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   d4b70:	f244 2202 	movw	r2, #16898	; 0x4202
   d4b74:	4909      	ldr	r1, [pc, #36]	; (d4b9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   d4b76:	3010      	adds	r0, #16
   d4b78:	f7ff fb14 	bl	d41a4 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4b7c:	4622      	mov	r2, r4
   d4b7e:	4908      	ldr	r1, [pc, #32]	; (d4ba0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4b80:	4805      	ldr	r0, [pc, #20]	; (d4b98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4b82:	f7ff fc66 	bl	d4452 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4b86:	4807      	ldr	r0, [pc, #28]	; (d4ba4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4b88:	f001 f8ca 	bl	d5d20 <_ZN7FatFile5closeEv>
    }
}
   d4b8c:	46bd      	mov	sp, r7
   d4b8e:	bd98      	pop	{r3, r4, r7, pc}
   d4b90:	000dd36b 	.word	0x000dd36b
   d4b94:	2003d6e0 	.word	0x2003d6e0
   d4b98:	2003d790 	.word	0x2003d790
   d4b9c:	2003d6fc 	.word	0x2003d6fc
   d4ba0:	000dd37c 	.word	0x000dd37c
   d4ba4:	2003d7a0 	.word	0x2003d7a0

000d4ba8 <_Z11XBeeHandlerv>:
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
   d4ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        if(logMessages){
   d4bac:	4e2e      	ldr	r6, [pc, #184]	; (d4c68 <_Z11XBeeHandlerv+0xc0>)
   d4bae:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4c7c <_Z11XBeeHandlerv+0xd4>
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
   d4bb2:	b089      	sub	sp, #36	; 0x24
   d4bb4:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   d4bb6:	f004 fde3 	bl	d9780 <_Z22__fetch_global_Serial1v>
   d4bba:	6803      	ldr	r3, [r0, #0]
   d4bbc:	691b      	ldr	r3, [r3, #16]
   d4bbe:	4798      	blx	r3
   d4bc0:	2800      	cmp	r0, #0
   d4bc2:	d04c      	beq.n	d4c5e <_Z11XBeeHandlerv+0xb6>
        String data = Serial1.readStringUntil('\n');
   d4bc4:	f004 fddc 	bl	d9780 <_Z22__fetch_global_Serial1v>
   d4bc8:	220a      	movs	r2, #10
   d4bca:	4601      	mov	r1, r0
   d4bcc:	4638      	mov	r0, r7
   d4bce:	f003 ffe3 	bl	d8b98 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   d4bd2:	68bb      	ldr	r3, [r7, #8]
   d4bd4:	3307      	adds	r3, #7
   d4bd6:	f023 0307 	bic.w	r3, r3, #7
        if(logMessages){
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
   d4bda:	466d      	mov	r5, sp
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
        char buffer[data.length()];
   d4bdc:	ebad 0d03 	sub.w	sp, sp, r3
   d4be0:	46e9      	mov	r9, sp
   d4be2:	466c      	mov	r4, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   d4be4:	68bb      	ldr	r3, [r7, #8]
   d4be6:	ebc9 0104 	rsb	r1, r9, r4
   d4bea:	428b      	cmp	r3, r1
   d4bec:	d905      	bls.n	d4bfa <_Z11XBeeHandlerv+0x52>
   d4bee:	4638      	mov	r0, r7
   d4bf0:	f002 fb9c 	bl	d732c <_ZNK6String6charAtEj>
   d4bf4:	f804 0b01 	strb.w	r0, [r4], #1
   d4bf8:	e7f4      	b.n	d4be4 <_Z11XBeeHandlerv+0x3c>
        processCommand(buffer,2,true);
   d4bfa:	2201      	movs	r2, #1
   d4bfc:	2102      	movs	r1, #2
   d4bfe:	4648      	mov	r0, r9
   d4c00:	f7ff fd3a 	bl	d4678 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   d4c04:	f004 fcee 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4c08:	4918      	ldr	r1, [pc, #96]	; (d4c6c <_Z11XBeeHandlerv+0xc4>)
   d4c0a:	f003 ff4c 	bl	d8aa6 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   d4c0e:	f004 fce9 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4c12:	6839      	ldr	r1, [r7, #0]
   d4c14:	f003 ff47 	bl	d8aa6 <_ZN5Print7printlnEPKc>
        if(logMessages){
   d4c18:	7833      	ldrb	r3, [r6, #0]
   d4c1a:	b1db      	cbz	r3, d4c54 <_Z11XBeeHandlerv+0xac>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c1c:	f898 3010 	ldrb.w	r3, [r8, #16]
   d4c20:	b92b      	cbnz	r3, d4c2e <_Z11XBeeHandlerv+0x86>
   d4c22:	f244 2202 	movw	r2, #16898	; 0x4202
   d4c26:	4912      	ldr	r1, [pc, #72]	; (d4c70 <_Z11XBeeHandlerv+0xc8>)
   d4c28:	4812      	ldr	r0, [pc, #72]	; (d4c74 <_Z11XBeeHandlerv+0xcc>)
   d4c2a:	f7ff fabb 	bl	d41a4 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   d4c2e:	4639      	mov	r1, r7
   d4c30:	f107 0010 	add.w	r0, r7, #16
   d4c34:	f002 fb31 	bl	d729a <_ZN6StringC1ERKS_>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4c38:	f107 0310 	add.w	r3, r7, #16
   d4c3c:	4a0e      	ldr	r2, [pc, #56]	; (d4c78 <_Z11XBeeHandlerv+0xd0>)
   d4c3e:	480f      	ldr	r0, [pc, #60]	; (d4c7c <_Z11XBeeHandlerv+0xd4>)
   d4c40:	2101      	movs	r1, #1
   d4c42:	f003 ff5a 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
   d4c46:	f107 0010 	add.w	r0, r7, #16
   d4c4a:	f002 fabd 	bl	d71c8 <_ZN6StringD1Ev>
            logFile.close();
   d4c4e:	4809      	ldr	r0, [pc, #36]	; (d4c74 <_Z11XBeeHandlerv+0xcc>)
   d4c50:	f001 f866 	bl	d5d20 <_ZN7FatFile5closeEv>
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
   d4c54:	4638      	mov	r0, r7
   d4c56:	f002 fab7 	bl	d71c8 <_ZN6StringD1Ev>
   d4c5a:	46ad      	mov	sp, r5
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
    while(Serial1.available()){
   d4c5c:	e7ab      	b.n	d4bb6 <_Z11XBeeHandlerv+0xe>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
}
   d4c5e:	3724      	adds	r7, #36	; 0x24
   d4c60:	46bd      	mov	sp, r7
   d4c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c66:	bf00      	nop
   d4c68:	2003d6e0 	.word	0x2003d6e0
   d4c6c:	000dd39c 	.word	0x000dd39c
   d4c70:	2003d6fc 	.word	0x2003d6fc
   d4c74:	2003d7a0 	.word	0x2003d7a0
   d4c78:	000dd3ae 	.word	0x000dd3ae
   d4c7c:	2003d790 	.word	0x2003d790

000d4c80 <_Z7BLEScani>:
        }

    }
}

void BLEScan(int BotNumber){
   d4c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4c84:	b094      	sub	sp, #80	; 0x50
   d4c86:	4680      	mov	r8, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d4c88:	f002 ffca 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4c8c:	2214      	movs	r2, #20
   d4c8e:	4945      	ldr	r1, [pc, #276]	; (d4da4 <_Z7BLEScani+0x124>)
   d4c90:	f003 f81c 	bl	d7ccc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   d4c94:	4607      	mov	r7, r0
   d4c96:	2800      	cmp	r0, #0
   d4c98:	f000 8081 	beq.w	d4d9e <_Z7BLEScani+0x11e>
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4c9c:	f8df 9104 	ldr.w	r9, [pc, #260]	; d4da4 <_Z7BLEScani+0x124>
   d4ca0:	2500      	movs	r5, #0
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4ca2:	b2ee      	uxtb	r6, r5
   d4ca4:	42b7      	cmp	r7, r6
   d4ca6:	d97a      	bls.n	d4d9e <_Z7BLEScani+0x11e>
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4ca8:	2454      	movs	r4, #84	; 0x54
   d4caa:	fb04 9406 	mla	r4, r4, r6, r9

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4cae:	a802      	add	r0, sp, #8
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4cb0:	3408      	adds	r4, #8

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4cb2:	f002 fbe3 	bl	d747c <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4cb6:	2201      	movs	r2, #1
   d4cb8:	a902      	add	r1, sp, #8
   d4cba:	4620      	mov	r0, r4
   d4cbc:	f002 fde6 	bl	d788c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4cc0:	2208      	movs	r2, #8
void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4cc2:	4682      	mov	sl, r0
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4cc4:	4669      	mov	r1, sp
   d4cc6:	4838      	ldr	r0, [pc, #224]	; (d4da8 <_Z7BLEScani+0x128>)
   d4cc8:	f002 fd9e 	bl	d7808 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d4ccc:	f1ba 0f00 	cmp.w	sl, #0
   d4cd0:	d063      	beq.n	d4d9a <_Z7BLEScani+0x11a>
   d4cd2:	4936      	ldr	r1, [pc, #216]	; (d4dac <_Z7BLEScani+0x12c>)
   d4cd4:	a802      	add	r0, sp, #8
   d4cd6:	f002 fc71 	bl	d75bc <_ZNK8particle7BleUuideqERKS0_>
   d4cda:	2800      	cmp	r0, #0
   d4cdc:	d05d      	beq.n	d4d9a <_Z7BLEScani+0x11a>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   d4cde:	f1b8 3fff 	cmp.w	r8, #4294967295
   d4ce2:	d003      	beq.n	d4cec <_Z7BLEScani+0x6c>
   d4ce4:	f89d 3000 	ldrb.w	r3, [sp]
   d4ce8:	4598      	cmp	r8, r3
   d4cea:	d156      	bne.n	d4d9a <_Z7BLEScani+0x11a>
				    peer = BLE.connect(scanResults[ii].address);
   d4cec:	f002 ff98 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4cf0:	4a2c      	ldr	r2, [pc, #176]	; (d4da4 <_Z7BLEScani+0x124>)
   d4cf2:	2154      	movs	r1, #84	; 0x54
   d4cf4:	fb01 2206 	mla	r2, r1, r6, r2
   d4cf8:	2301      	movs	r3, #1
   d4cfa:	4601      	mov	r1, r0
   d4cfc:	a80c      	add	r0, sp, #48	; 0x30
   d4cfe:	f003 fce5 	bl	d86cc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4d02:	a90c      	add	r1, sp, #48	; 0x30
   d4d04:	482a      	ldr	r0, [pc, #168]	; (d4db0 <_Z7BLEScani+0x130>)
   d4d06:	f003 f920 	bl	d7f4a <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4d0a:	a80c      	add	r0, sp, #48	; 0x30
   d4d0c:	f003 f841 	bl	d7d92 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   d4d10:	4827      	ldr	r0, [pc, #156]	; (d4db0 <_Z7BLEScani+0x130>)
   d4d12:	f002 ff25 	bl	d7b60 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4d16:	2800      	cmp	r0, #0
   d4d18:	d041      	beq.n	d4d9e <_Z7BLEScani+0x11e>
                        uint8_t bufName[BLE_MAX_ADV_DATA_LEN];
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
   d4d1a:	221f      	movs	r2, #31
   d4d1c:	a90c      	add	r1, sp, #48	; 0x30
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f002 fd72 	bl	d7808 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d4d24:	4a23      	ldr	r2, [pc, #140]	; (d4db4 <_Z7BLEScani+0x134>)
   d4d26:	4924      	ldr	r1, [pc, #144]	; (d4db8 <_Z7BLEScani+0x138>)
   d4d28:	4821      	ldr	r0, [pc, #132]	; (d4db0 <_Z7BLEScani+0x130>)
   d4d2a:	f003 f8ea 	bl	d7f02 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d4d2e:	4a23      	ldr	r2, [pc, #140]	; (d4dbc <_Z7BLEScani+0x13c>)
   d4d30:	4923      	ldr	r1, [pc, #140]	; (d4dc0 <_Z7BLEScani+0x140>)
   d4d32:	481f      	ldr	r0, [pc, #124]	; (d4db0 <_Z7BLEScani+0x130>)
   d4d34:	f003 f8e5 	bl	d7f02 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   d4d38:	4a22      	ldr	r2, [pc, #136]	; (d4dc4 <_Z7BLEScani+0x144>)
   d4d3a:	4923      	ldr	r1, [pc, #140]	; (d4dc8 <_Z7BLEScani+0x148>)
   d4d3c:	481c      	ldr	r0, [pc, #112]	; (d4db0 <_Z7BLEScani+0x130>)
   d4d3e:	f003 f8e0 	bl	d7f02 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   d4d42:	f004 fc4f 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4d46:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   d4d4a:	4920      	ldr	r1, [pc, #128]	; (d4dcc <_Z7BLEScani+0x14c>)
   d4d4c:	f7ff fb7c 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
   d4d50:	4b1f      	ldr	r3, [pc, #124]	; (d4dd0 <_Z7BLEScani+0x150>)
                        bool newBot = true;
                        for(WaterBot w: WaterBots){
                            if(bufName[0] == w.botNum) newBot = false;
   d4d52:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d4d56:	685d      	ldr	r5, [r3, #4]
   d4d58:	6819      	ldr	r1, [r3, #0]
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
						Serial.printlnf("Connected to Bot %d",bufName[0]);
                        bool newBot = true;
   d4d5a:	2201      	movs	r2, #1
   d4d5c:	461c      	mov	r4, r3
                        for(WaterBot w: WaterBots){
   d4d5e:	428d      	cmp	r5, r1
   d4d60:	d005      	beq.n	d4d6e <_Z7BLEScani+0xee>
                            if(bufName[0] == w.botNum) newBot = false;
   d4d62:	f811 3b14 	ldrb.w	r3, [r1], #20
   d4d66:	4283      	cmp	r3, r0
   d4d68:	bf08      	it	eq
   d4d6a:	2200      	moveq	r2, #0
   d4d6c:	e7f7      	b.n	d4d5e <_Z7BLEScani+0xde>
                        }
                        if(newBot){
   d4d6e:	b1b2      	cbz	r2, d4d9e <_Z7BLEScani+0x11e>
                            Serial.println("Found a new water bot ID");
   d4d70:	f004 fc38 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4d74:	4917      	ldr	r1, [pc, #92]	; (d4dd4 <_Z7BLEScani+0x154>)
   d4d76:	f003 fe96 	bl	d8aa6 <_ZN5Print7printlnEPKc>
                            WaterBot newWaterbot;
                            newWaterbot.BLEAvail = true;
   d4d7a:	2301      	movs	r3, #1
                            newWaterbot.botNum = bufName[0];
   d4d7c:	a914      	add	r1, sp, #80	; 0x50
                            if(bufName[0] == w.botNum) newBot = false;
                        }
                        if(newBot){
                            Serial.println("Found a new water bot ID");
                            WaterBot newWaterbot;
                            newWaterbot.BLEAvail = true;
   d4d7e:	f88d 301e 	strb.w	r3, [sp, #30]
                            newWaterbot.botNum = bufName[0];
   d4d82:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d4d86:	f801 3d34 	strb.w	r3, [r1, #-52]!
                            WaterBots.push_back(newWaterbot);
   d4d8a:	4811      	ldr	r0, [pc, #68]	; (d4dd0 <_Z7BLEScani+0x150>)
   d4d8c:	f7ff fc60 	bl	d4650 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                            BLEBot = &WaterBots.back();
   d4d90:	6863      	ldr	r3, [r4, #4]
   d4d92:	4a11      	ldr	r2, [pc, #68]	; (d4dd8 <_Z7BLEScani+0x158>)
   d4d94:	3b14      	subs	r3, #20
   d4d96:	6013      	str	r3, [r2, #0]
                    break;
                }
			}
		}
	}
}
   d4d98:	e001      	b.n	d4d9e <_Z7BLEScani+0x11e>
   d4d9a:	3501      	adds	r5, #1
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4d9c:	e781      	b.n	d4ca2 <_Z7BLEScani+0x22>
                    break;
                }
			}
		}
	}
}
   d4d9e:	b014      	add	sp, #80	; 0x50
   d4da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4da4:	2003d810 	.word	0x2003d810
   d4da8:	2003d818 	.word	0x2003d818
   d4dac:	2003d76c 	.word	0x2003d76c
   d4db0:	2003dea0 	.word	0x2003dea0
   d4db4:	2003d6cc 	.word	0x2003d6cc
   d4db8:	2003d6f4 	.word	0x2003d6f4
   d4dbc:	2003d7fc 	.word	0x2003d7fc
   d4dc0:	2003d764 	.word	0x2003d764
   d4dc4:	2003d7e8 	.word	0x2003d7e8
   d4dc8:	2003e330 	.word	0x2003e330
   d4dcc:	000dd3cf 	.word	0x000dd3cf
   d4dd0:	2003d724 	.word	0x2003d724
   d4dd4:	000dd2e9 	.word	0x000dd2e9
   d4dd8:	2003e32c 	.word	0x2003e32c

000d4ddc <_Z13DataOffloaderv>:

void DataOffloader(){
   d4ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d4de0:	2200      	movs	r2, #0
			}
		}
	}
}

void DataOffloader(){
   d4de2:	b088      	sub	sp, #32
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d4de4:	4940      	ldr	r1, [pc, #256]	; (d4ee8 <_Z13DataOffloaderv+0x10c>)
   d4de6:	4841      	ldr	r0, [pc, #260]	; (d4eec <_Z13DataOffloaderv+0x110>)
   d4de8:	f7ff f9dc 	bl	d41a4 <_ZN7FatFile4openEPKci>
   d4dec:	2401      	movs	r4, #1
   d4dee:	b118      	cbz	r0, d4df8 <_Z13DataOffloaderv+0x1c>
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
        peerRxCharacteristic.setValue(OffloadBuf,10);
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d4df0:	4d3f      	ldr	r5, [pc, #252]	; (d4ef0 <_Z13DataOffloaderv+0x114>)

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4df2:	4f40      	ldr	r7, [pc, #256]	; (d4ef4 <_Z13DataOffloaderv+0x118>)
   d4df4:	462e      	mov	r6, r5
   d4df6:	e010      	b.n	d4e1a <_Z13DataOffloaderv+0x3e>
}

void DataOffloader(){
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
        offloadingDone = true;
   d4df8:	4b3f      	ldr	r3, [pc, #252]	; (d4ef8 <_Z13DataOffloaderv+0x11c>)
   d4dfa:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   d4dfc:	f004 fbf2 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4e00:	493e      	ldr	r1, [pc, #248]	; (d4efc <_Z13DataOffloaderv+0x120>)
   d4e02:	f003 fe50 	bl	d8aa6 <_ZN5Print7printlnEPKc>
        return;
   d4e06:	e06b      	b.n	d4ee0 <_Z13DataOffloaderv+0x104>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
        offloadingDone = false;
        while(!offloadingDone) delay(100);
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   d4e08:	f004 fbec 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4e0c:	6833      	ldr	r3, [r6, #0]
   d4e0e:	493c      	ldr	r1, [pc, #240]	; (d4f00 <_Z13DataOffloaderv+0x124>)
   d4e10:	781a      	ldrb	r2, [r3, #0]
   d4e12:	f7ff fb19 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        OffloadingBot++;
   d4e16:	3401      	adds	r4, #1
   d4e18:	b2e4      	uxtb	r4, r4
    if (!logDir.open("/")) {
        offloadingDone = true;
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
        return;
    }
    while(OffloadingBot <= WaterBots.size()){
   d4e1a:	e897 000c 	ldmia.w	r7, {r2, r3}
   d4e1e:	1a9b      	subs	r3, r3, r2
   d4e20:	4a38      	ldr	r2, [pc, #224]	; (d4f04 <_Z13DataOffloaderv+0x128>)
   d4e22:	109b      	asrs	r3, r3, #2
   d4e24:	4353      	muls	r3, r2
   d4e26:	429c      	cmp	r4, r3
   d4e28:	d854      	bhi.n	d4ed4 <_Z13DataOffloaderv+0xf8>
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   d4e2a:	f10d 0808 	add.w	r8, sp, #8
   d4e2e:	4623      	mov	r3, r4
   d4e30:	4a35      	ldr	r2, [pc, #212]	; (d4f08 <_Z13DataOffloaderv+0x12c>)
   d4e32:	210a      	movs	r1, #10
   d4e34:	4640      	mov	r0, r8
   d4e36:	f002 f889 	bl	d6f4c <snprintf>
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d4e3a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
   d4e3e:	ab05      	add	r3, sp, #20
   d4e40:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d4e42:	a905      	add	r1, sp, #20
    while(OffloadingBot <= WaterBots.size()){
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d4e44:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d4e46:	4831      	ldr	r0, [pc, #196]	; (d4f0c <_Z13DataOffloaderv+0x130>)
   d4e48:	2300      	movs	r3, #0
   d4e4a:	220a      	movs	r2, #10
   d4e4c:	f002 fd78 	bl	d7940 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d4e50:	f004 fbc8 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4e54:	682b      	ldr	r3, [r5, #0]
   d4e56:	492e      	ldr	r1, [pc, #184]	; (d4f10 <_Z13DataOffloaderv+0x134>)
   d4e58:	781a      	ldrb	r2, [r3, #0]
   d4e5a:	f7ff faf5 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        delay(1000);
   d4e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4e62:	f003 ff6f 	bl	d8d44 <delay>
        if(BLEBot->botNum != OffloadingBot){
   d4e66:	682b      	ldr	r3, [r5, #0]
   d4e68:	781b      	ldrb	r3, [r3, #0]
   d4e6a:	42a3      	cmp	r3, r4
   d4e6c:	d01f      	beq.n	d4eae <_Z13DataOffloaderv+0xd2>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   d4e6e:	f004 fbb9 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4e72:	682b      	ldr	r3, [r5, #0]
   d4e74:	4a27      	ldr	r2, [pc, #156]	; (d4f14 <_Z13DataOffloaderv+0x138>)
   d4e76:	781b      	ldrb	r3, [r3, #0]
   d4e78:	9400      	str	r4, [sp, #0]
   d4e7a:	2101      	movs	r1, #1
   d4e7c:	f003 fe3d 	bl	d8afa <_ZN5Print11printf_implEbPKcz>
            BLE.disconnect();
   d4e80:	f002 fece 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4e84:	f003 f8ca 	bl	d801c <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   d4e88:	f002 feca 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4e8c:	f002 ff48 	bl	d7d20 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4e90:	b930      	cbnz	r0, d4ea0 <_Z13DataOffloaderv+0xc4>
                BLEScan(OffloadingBot);
   d4e92:	4620      	mov	r0, r4
   d4e94:	f7ff fef4 	bl	d4c80 <_Z7BLEScani>
                delay(50);
   d4e98:	2032      	movs	r0, #50	; 0x32
   d4e9a:	f003 ff53 	bl	d8d44 <delay>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
        delay(1000);
        if(BLEBot->botNum != OffloadingBot){
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
            BLE.disconnect();
            while(!BLE.connected()){
   d4e9e:	e7f3      	b.n	d4e88 <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
                delay(50);
            }
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   d4ea0:	f004 fba0 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4ea4:	6833      	ldr	r3, [r6, #0]
   d4ea6:	491c      	ldr	r1, [pc, #112]	; (d4f18 <_Z13DataOffloaderv+0x13c>)
   d4ea8:	781a      	ldrb	r2, [r3, #0]
   d4eaa:	f7ff facd 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   d4eae:	f004 fb99 	bl	d95e4 <_Z16_fetch_usbserialv>
   d4eb2:	6833      	ldr	r3, [r6, #0]
   d4eb4:	4919      	ldr	r1, [pc, #100]	; (d4f1c <_Z13DataOffloaderv+0x140>)
   d4eb6:	781a      	ldrb	r2, [r3, #0]
   d4eb8:	f7ff fac6 	bl	d4448 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        offloadingDone = false;
   d4ebc:	4b0e      	ldr	r3, [pc, #56]	; (d4ef8 <_Z13DataOffloaderv+0x11c>)
   d4ebe:	2200      	movs	r2, #0
   d4ec0:	701a      	strb	r2, [r3, #0]
   d4ec2:	4698      	mov	r8, r3
        while(!offloadingDone) delay(100);
   d4ec4:	f898 3000 	ldrb.w	r3, [r8]
   d4ec8:	2b00      	cmp	r3, #0
   d4eca:	d19d      	bne.n	d4e08 <_Z13DataOffloaderv+0x2c>
   d4ecc:	2064      	movs	r0, #100	; 0x64
   d4ece:	f003 ff39 	bl	d8d44 <delay>
   d4ed2:	e7f7      	b.n	d4ec4 <_Z13DataOffloaderv+0xe8>
   d4ed4:	4812      	ldr	r0, [pc, #72]	; (d4f20 <_Z13DataOffloaderv+0x144>)
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
   d4ed6:	7c03      	ldrb	r3, [r0, #16]
   d4ed8:	b113      	cbz	r3, d4ee0 <_Z13DataOffloaderv+0x104>
   d4eda:	3010      	adds	r0, #16
   d4edc:	f000 ff20 	bl	d5d20 <_ZN7FatFile5closeEv>
}
   d4ee0:	b008      	add	sp, #32
   d4ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ee6:	bf00      	nop
   d4ee8:	000dd3e3 	.word	0x000dd3e3
   d4eec:	2003d6a4 	.word	0x2003d6a4
   d4ef0:	2003e32c 	.word	0x2003e32c
   d4ef4:	2003d724 	.word	0x2003d724
   d4ef8:	2003d6c8 	.word	0x2003d6c8
   d4efc:	000dd3e5 	.word	0x000dd3e5
   d4f00:	000dd4d9 	.word	0x000dd4d9
   d4f04:	cccccccd 	.word	0xcccccccd
   d4f08:	000dd426 	.word	0x000dd426
   d4f0c:	2003d764 	.word	0x2003d764
   d4f10:	000dd42f 	.word	0x000dd42f
   d4f14:	000dd45c 	.word	0x000dd45c
   d4f18:	000dd495 	.word	0x000dd495
   d4f1c:	000dd4b6 	.word	0x000dd4b6
   d4f20:	2003d694 	.word	0x2003d694

000d4f24 <loop>:
        Serial.println("Error: could not connect to SD card!");
        logMessages = false;
    }
}

void loop() {
   d4f24:	b513      	push	{r0, r1, r4, lr}
    
    if (BLE.connected()) {
   d4f26:	f002 fe7b 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4f2a:	f002 fef9 	bl	d7d20 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4f2e:	4601      	mov	r1, r0
   d4f30:	b178      	cbz	r0, d4f52 <loop+0x2e>

        //char testStr[30] = "CCB1ptsHello from CC Hub!";
        //uint8_t testBuf[30];
        //memcpy(testStr,testBuf,30);
        //peerRxCharacteristic.setValue(testStr);
        sendData("CCB1ptsbigbot",0,true,false,false);
   d4f32:	2300      	movs	r3, #0
   d4f34:	4619      	mov	r1, r3
   d4f36:	9300      	str	r3, [sp, #0]
   d4f38:	2201      	movs	r2, #1
   d4f3a:	4814      	ldr	r0, [pc, #80]	; (d4f8c <loop+0x68>)
   d4f3c:	f7ff fa0c 	bl	d4358 <_Z8sendDataPKchbbb>
        digitalWrite(D7,HIGH);
   d4f40:	2101      	movs	r1, #1
   d4f42:	2007      	movs	r0, #7
   d4f44:	f004 fe41 	bl	d9bca <digitalWrite>
        delay(1000);
   d4f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f4c:	f003 fefa 	bl	d8d44 <delay>
   d4f50:	e011      	b.n	d4f76 <loop+0x52>
    }
    else {
        digitalWrite(D7,LOW);
   d4f52:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4f54:	4c0e      	ldr	r4, [pc, #56]	; (d4f90 <loop+0x6c>)
        sendData("CCB1ptsbigbot",0,true,false,false);
        digitalWrite(D7,HIGH);
        delay(1000);
    }
    else {
        digitalWrite(D7,LOW);
   d4f56:	f004 fe38 	bl	d9bca <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4f5a:	f001 fd4f 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4f5e:	6823      	ldr	r3, [r4, #0]
   d4f60:	1ac0      	subs	r0, r0, r3
   d4f62:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4f66:	d306      	bcc.n	d4f76 <loop+0x52>
   d4f68:	f001 fd48 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
    		// Time to scan
    		lastScan = millis();
   d4f6c:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   d4f6e:	f04f 30ff 	mov.w	r0, #4294967295
   d4f72:	f7ff fe85 	bl	d4c80 <_Z7BLEScani>
    	}

    }
    if(offloadingMode) DataOffloader();
   d4f76:	4b07      	ldr	r3, [pc, #28]	; (d4f94 <loop+0x70>)
   d4f78:	781b      	ldrb	r3, [r3, #0]
   d4f7a:	b10b      	cbz	r3, d4f80 <loop+0x5c>
   d4f7c:	f7ff ff2e 	bl	d4ddc <_Z13DataOffloaderv>
    XBeeHandler();
}
   d4f80:	b002      	add	sp, #8
   d4f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    		BLEScan(-1);
    	}

    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
   d4f86:	f7ff be0f 	b.w	d4ba8 <_Z11XBeeHandlerv>
   d4f8a:	bf00      	nop
   d4f8c:	000dd500 	.word	0x000dd500
   d4f90:	2003d71c 	.word	0x2003d71c
   d4f94:	2003d7c4 	.word	0x2003d7c4

000d4f98 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4f98:	4b56      	ldr	r3, [pc, #344]	; (d50f4 <_GLOBAL__sub_I_SystemMode+0x15c>)
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
    }
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}
   d4f9a:	b570      	push	{r4, r5, r6, lr}
   d4f9c:	2201      	movs	r2, #1

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f9e:	4d56      	ldr	r5, [pc, #344]	; (d50f8 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4fa0:	701a      	strb	r2, [r3, #0]
   d4fa2:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4fa4:	f001 fca2 	bl	d68ec <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4fac:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4fae:	602c      	str	r4, [r5, #0]
   d4fb0:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4fb2:	71ac      	strb	r4, [r5, #6]
   d4fb4:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4fb6:	2003      	movs	r0, #3
   d4fb8:	f001 fedc 	bl	d6d74 <set_system_mode>
#define MAX_ERR_BUF_SIZE    15              //Buffer size for error-return string


// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);
   d4fbc:	4a4f      	ldr	r2, [pc, #316]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d4fbe:	4950      	ldr	r1, [pc, #320]	; (d5100 <_GLOBAL__sub_I_SystemMode+0x168>)
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	f004 fe5b 	bl	d9c7c <__aeabi_atexit>

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   d4fc6:	494f      	ldr	r1, [pc, #316]	; (d5104 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d4fc8:	484f      	ldr	r0, [pc, #316]	; (d5108 <_GLOBAL__sub_I_SystemMode+0x170>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4fca:	4d50      	ldr	r5, [pc, #320]	; (d510c <_GLOBAL__sub_I_SystemMode+0x174>)
   d4fcc:	f002 fb6c 	bl	d76a8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   d4fd0:	494f      	ldr	r1, [pc, #316]	; (d5110 <_GLOBAL__sub_I_SystemMode+0x178>)
   d4fd2:	4850      	ldr	r0, [pc, #320]	; (d5114 <_GLOBAL__sub_I_SystemMode+0x17c>)
   d4fd4:	f002 fb68 	bl	d76a8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   d4fd8:	494f      	ldr	r1, [pc, #316]	; (d5118 <_GLOBAL__sub_I_SystemMode+0x180>)
   d4fda:	4850      	ldr	r0, [pc, #320]	; (d511c <_GLOBAL__sub_I_SystemMode+0x184>)
   d4fdc:	f002 fb64 	bl	d76a8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   d4fe0:	494f      	ldr	r1, [pc, #316]	; (d5120 <_GLOBAL__sub_I_SystemMode+0x188>)
   d4fe2:	4850      	ldr	r0, [pc, #320]	; (d5124 <_GLOBAL__sub_I_SystemMode+0x18c>)
   d4fe4:	f002 fb60 	bl	d76a8 <_ZN8particle7BleUuidC1EPKc>
   d4fe8:	1928      	adds	r0, r5, r4
   d4fea:	f002 fa35 	bl	d7458 <_ZN8particle10BleAddressC1Ev>
   d4fee:	f104 0008 	add.w	r0, r4, #8
   d4ff2:	4428      	add	r0, r5
   d4ff4:	f002 fbd2 	bl	d779c <_ZN8particle18BleAdvertisingDataC1Ev>
   d4ff8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4ffc:	4428      	add	r0, r5
   d4ffe:	3454      	adds	r4, #84	; 0x54
   d5000:	f002 fbcc 	bl	d779c <_ZN8particle18BleAdvertisingDataC1Ev>
//BleCharacteristic rxCharacteristic("rxr", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, RemoteService, BLEDataReceived, NULL);

const size_t UART_TX_BUF_SIZE = 30;
const size_t SCAN_RESULT_COUNT = 20;

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d5004:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d5008:	d1ee      	bne.n	d4fe8 <_GLOBAL__sub_I_SystemMode+0x50>

BleCharacteristic peerTxCharacteristic;
   d500a:	4847      	ldr	r0, [pc, #284]	; (d5128 <_GLOBAL__sub_I_SystemMode+0x190>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d500c:	4c47      	ldr	r4, [pc, #284]	; (d512c <_GLOBAL__sub_I_SystemMode+0x194>)
   d500e:	f003 fbc1 	bl	d8794 <_ZN8particle17BleCharacteristicC1Ev>
   d5012:	4a3a      	ldr	r2, [pc, #232]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d5014:	4946      	ldr	r1, [pc, #280]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x198>)
   d5016:	4844      	ldr	r0, [pc, #272]	; (d5128 <_GLOBAL__sub_I_SystemMode+0x190>)
   d5018:	f004 fe30 	bl	d9c7c <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d501c:	4845      	ldr	r0, [pc, #276]	; (d5134 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d501e:	f003 fbb9 	bl	d8794 <_ZN8particle17BleCharacteristicC1Ev>
   d5022:	4a36      	ldr	r2, [pc, #216]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d5024:	4942      	ldr	r1, [pc, #264]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x198>)
   d5026:	4843      	ldr	r0, [pc, #268]	; (d5134 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d5028:	f004 fe28 	bl	d9c7c <__aeabi_atexit>
BleCharacteristic peerOffloadCharacteristic;
   d502c:	4842      	ldr	r0, [pc, #264]	; (d5138 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d502e:	f003 fbb1 	bl	d8794 <_ZN8particle17BleCharacteristicC1Ev>
   d5032:	4a32      	ldr	r2, [pc, #200]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d5034:	493e      	ldr	r1, [pc, #248]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x198>)
   d5036:	4840      	ldr	r0, [pc, #256]	; (d5138 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d5038:	f004 fe20 	bl	d9c7c <__aeabi_atexit>
BlePeerDevice peer;
   d503c:	483f      	ldr	r0, [pc, #252]	; (d513c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d503e:	f002 ff01 	bl	d7e44 <_ZN8particle13BlePeerDeviceC1Ev>
   d5042:	4a2e      	ldr	r2, [pc, #184]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d5044:	493e      	ldr	r1, [pc, #248]	; (d5140 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d5046:	483d      	ldr	r0, [pc, #244]	; (d513c <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d5048:	f004 fe18 	bl	d9c7c <__aeabi_atexit>
   d504c:	6823      	ldr	r3, [r4, #0]
   d504e:	07db      	lsls	r3, r3, #31
   d5050:	d40a      	bmi.n	d5068 <_GLOBAL__sub_I_SystemMode+0xd0>
   d5052:	4620      	mov	r0, r4
   d5054:	f7ff f827 	bl	d40a6 <__cxa_guard_acquire>
   d5058:	b130      	cbz	r0, d5068 <_GLOBAL__sub_I_SystemMode+0xd0>
   d505a:	2101      	movs	r1, #1
   d505c:	4839      	ldr	r0, [pc, #228]	; (d5144 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d505e:	f001 ffd9 	bl	d7014 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5062:	4620      	mov	r0, r4
   d5064:	f7ff f824 	bl	d40b0 <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5068:	4b37      	ldr	r3, [pc, #220]	; (d5148 <_GLOBAL__sub_I_SystemMode+0x1b0>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d506a:	4838      	ldr	r0, [pc, #224]	; (d514c <_GLOBAL__sub_I_SystemMode+0x1b4>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d506c:	4d38      	ldr	r5, [pc, #224]	; (d5150 <_GLOBAL__sub_I_SystemMode+0x1b8>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d506e:	4939      	ldr	r1, [pc, #228]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d5070:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5072:	2264      	movs	r2, #100	; 0x64
   d5074:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d5078:	4a37      	ldr	r2, [pc, #220]	; (d5158 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d507a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d507e:	2201      	movs	r2, #1
   d5080:	2400      	movs	r4, #0
   d5082:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5086:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d508a:	4a2e      	ldr	r2, [pc, #184]	; (d5144 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d508c:	71dc      	strb	r4, [r3, #7]
   d508e:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5092:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d5096:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d509a:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d509e:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d50a2:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d50a6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d50aa:	7404      	strb	r4, [r0, #16]
   d50ac:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50ae:	6044      	str	r4, [r0, #4]
   d50b0:	6086      	str	r6, [r0, #8]
   d50b2:	4a12      	ldr	r2, [pc, #72]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d50b4:	f004 fde2 	bl	d9c7c <__aeabi_atexit>
   d50b8:	4828      	ldr	r0, [pc, #160]	; (d515c <_GLOBAL__sub_I_SystemMode+0x1c4>)
File logFile;
   d50ba:	4a10      	ldr	r2, [pc, #64]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d50bc:	7404      	strb	r4, [r0, #16]
   d50be:	7444      	strb	r4, [r0, #17]
   d50c0:	6044      	str	r4, [r0, #4]
   d50c2:	6086      	str	r6, [r0, #8]
   d50c4:	4923      	ldr	r1, [pc, #140]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d50c6:	6005      	str	r5, [r0, #0]
   d50c8:	f004 fdd8 	bl	d9c7c <__aeabi_atexit>
   d50cc:	4824      	ldr	r0, [pc, #144]	; (d5160 <_GLOBAL__sub_I_SystemMode+0x1c8>)
File logDir;
   d50ce:	4a0b      	ldr	r2, [pc, #44]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d50d0:	7404      	strb	r4, [r0, #16]
   d50d2:	7444      	strb	r4, [r0, #17]
   d50d4:	6044      	str	r4, [r0, #4]
   d50d6:	6086      	str	r6, [r0, #8]
   d50d8:	491e      	ldr	r1, [pc, #120]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d50da:	6005      	str	r5, [r0, #0]
   d50dc:	f004 fdce 	bl	d9c7c <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d50e0:	4820      	ldr	r0, [pc, #128]	; (d5164 <_GLOBAL__sub_I_SystemMode+0x1cc>)
    float GPSLat;
    float GPSLon;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
std::vector<WaterBot> WaterBots;
   d50e2:	4a06      	ldr	r2, [pc, #24]	; (d50fc <_GLOBAL__sub_I_SystemMode+0x164>)
   d50e4:	6004      	str	r4, [r0, #0]
   d50e6:	6044      	str	r4, [r0, #4]
   d50e8:	6084      	str	r4, [r0, #8]
   d50ea:	491f      	ldr	r1, [pc, #124]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x1d0>)
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
    }
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}
   d50ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    float GPSLat;
    float GPSLon;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
std::vector<WaterBot> WaterBots;
   d50f0:	f004 bdc4 	b.w	d9c7c <__aeabi_atexit>
   d50f4:	2003d780 	.word	0x2003d780
   d50f8:	2003d6e4 	.word	0x2003d6e4
   d50fc:	2003d684 	.word	0x2003d684
   d5100:	000d4185 	.word	0x000d4185
   d5104:	000dd50e 	.word	0x000dd50e
   d5108:	2003d76c 	.word	0x2003d76c
   d510c:	2003d810 	.word	0x2003d810
   d5110:	000dd533 	.word	0x000dd533
   d5114:	2003d7fc 	.word	0x2003d7fc
   d5118:	000dd558 	.word	0x000dd558
   d511c:	2003d6cc 	.word	0x2003d6cc
   d5120:	000dd57d 	.word	0x000dd57d
   d5124:	2003d7e8 	.word	0x2003d7e8
   d5128:	2003d6f4 	.word	0x2003d6f4
   d512c:	2003d688 	.word	0x2003d688
   d5130:	000d7d85 	.word	0x000d7d85
   d5134:	2003d764 	.word	0x2003d764
   d5138:	2003e330 	.word	0x2003e330
   d513c:	2003dea0 	.word	0x2003dea0
   d5140:	000d7d93 	.word	0x000d7d93
   d5144:	2003d68c 	.word	0x2003d68c
   d5148:	2003dea8 	.word	0x2003dea8
   d514c:	2003d730 	.word	0x2003d730
   d5150:	000dd00c 	.word	0x000dd00c
   d5154:	000d40d3 	.word	0x000d40d3
   d5158:	000dd000 	.word	0x000dd000
   d515c:	2003d790 	.word	0x2003d790
   d5160:	2003d694 	.word	0x2003d694
   d5164:	2003d724 	.word	0x2003d724
   d5168:	000d4195 	.word	0x000d4195

000d516c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d516c:	f001 bbbe 	b.w	d68ec <HAL_Pin_Map>

000d5170 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5170:	f001 bbbc 	b.w	d68ec <HAL_Pin_Map>

000d5174 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5174:	b510      	push	{r4, lr}
   d5176:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5178:	3024      	adds	r0, #36	; 0x24
   d517a:	f000 ff1d 	bl	d5fb8 <_ZN8FatCache4syncEv>
   d517e:	b128      	cbz	r0, d518c <_ZN9FatVolume9cacheSyncEv+0x18>
   d5180:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5188:	f000 bf16 	b.w	d5fb8 <_ZN8FatCache4syncEv>
  }
   d518c:	bd10      	pop	{r4, pc}

000d518e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d518e:	1e41      	subs	r1, r0, #1
   d5190:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5194:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5196:	0843      	lsrs	r3, r0, #1
   d5198:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d519c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d51a0:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d51a4:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d51a6:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d51a8:	d1f5      	bne.n	d5196 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d51aa:	4770      	bx	lr

000d51ac <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d51ac:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d51ae:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d51b0:	4604      	mov	r4, r0
   d51b2:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d51b4:	b923      	cbnz	r3, d51c0 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d51b6:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d51b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d51bc:	f000 bbc7 	b.w	d594e <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d51c0:	2224      	movs	r2, #36	; 0x24
   d51c2:	2100      	movs	r1, #0
   d51c4:	f005 fcf7 	bl	dabb6 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d51c8:	2310      	movs	r3, #16
  m_flags = F_READ;
   d51ca:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d51cc:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d51ce:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d51d0:	68ab      	ldr	r3, [r5, #8]
   d51d2:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d51d4:	68eb      	ldr	r3, [r5, #12]
   d51d6:	6223      	str	r3, [r4, #32]
  return true;
}
   d51d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d51dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d51e0:	7803      	ldrb	r3, [r0, #0]
   d51e2:	2b20      	cmp	r3, #32
   d51e4:	f100 0401 	add.w	r4, r0, #1
   d51e8:	d101      	bne.n	d51ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d51ea:	4620      	mov	r0, r4
   d51ec:	e7f8      	b.n	d51e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d51ee:	4f70      	ldr	r7, [pc, #448]	; (d53b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d51f0:	6088      	str	r0, [r1, #8]
   d51f2:	4605      	mov	r5, r0
   d51f4:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d51f6:	462e      	mov	r6, r5
   d51f8:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d51fc:	b30b      	cbz	r3, d5242 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d51fe:	2b2f      	cmp	r3, #47	; 0x2f
   d5200:	d101      	bne.n	d5206 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5202:	1903      	adds	r3, r0, r4
   d5204:	e017      	b.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5206:	2b5c      	cmp	r3, #92	; 0x5c
   d5208:	d102      	bne.n	d5210 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d520a:	2000      	movs	r0, #0
   d520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5210:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5214:	b2e4      	uxtb	r4, r4
   d5216:	2c1d      	cmp	r4, #29
   d5218:	d803      	bhi.n	d5222 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d521a:	fa27 f404 	lsr.w	r4, r7, r4
   d521e:	07e4      	lsls	r4, r4, #31
   d5220:	d4f3      	bmi.n	d520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d5222:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d5226:	2c3c      	cmp	r4, #60	; 0x3c
   d5228:	d0ef      	beq.n	d520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d522a:	3b20      	subs	r3, #32
   d522c:	2b5e      	cmp	r3, #94	; 0x5e
   d522e:	d9e1      	bls.n	d51f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5230:	e7eb      	b.n	d520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d5232:	2d2f      	cmp	r5, #47	; 0x2f
   d5234:	d105      	bne.n	d5242 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5236:	461e      	mov	r6, r3
   d5238:	f813 5b01 	ldrb.w	r5, [r3], #1
   d523c:	2d20      	cmp	r5, #32
   d523e:	d1f8      	bne.n	d5232 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d5240:	e7f9      	b.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d5242:	6016      	str	r6, [r2, #0]
   d5244:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d5246:	4298      	cmp	r0, r3
   d5248:	ebc0 0803 	rsb	r8, r0, r3
   d524c:	d009      	beq.n	d5262 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d524e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d5252:	2a2e      	cmp	r2, #46	; 0x2e
   d5254:	d0f7      	beq.n	d5246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d5256:	2a20      	cmp	r2, #32
   d5258:	d0f5      	beq.n	d5246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d525a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d525e:	dcd4      	bgt.n	d520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d5260:	e001      	b.n	d5266 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d5262:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d5266:	f8c1 8004 	str.w	r8, [r1, #4]
   d526a:	f101 030c 	add.w	r3, r1, #12
   d526e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d5272:	2420      	movs	r4, #32
   d5274:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5278:	4293      	cmp	r3, r2
   d527a:	d1fb      	bne.n	d5274 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d527c:	4603      	mov	r3, r0
   d527e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5280:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5284:	2c2e      	cmp	r4, #46	; 0x2e
   d5286:	d0fa      	beq.n	d527e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5288:	2c20      	cmp	r4, #32
   d528a:	d0f8      	beq.n	d527e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d528c:	fab2 f482 	clz	r4, r2
   d5290:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5292:	f108 36ff 	add.w	r6, r8, #4294967295
   d5296:	1c73      	adds	r3, r6, #1
   d5298:	d107      	bne.n	d52aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d529a:	2700      	movs	r7, #0
   d529c:	f04f 0e07 	mov.w	lr, #7
   d52a0:	463d      	mov	r5, r7
   d52a2:	46ba      	mov	sl, r7
   d52a4:	f04f 0908 	mov.w	r9, #8
   d52a8:	e009      	b.n	d52be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d52aa:	5d83      	ldrb	r3, [r0, r6]
   d52ac:	2b2e      	cmp	r3, #46	; 0x2e
   d52ae:	d0f4      	beq.n	d529a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d52b0:	3e01      	subs	r6, #1
   d52b2:	e7f0      	b.n	d5296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d52b4:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d52b6:	2b20      	cmp	r3, #32
   d52b8:	d104      	bne.n	d52c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d52ba:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d52bc:	3201      	adds	r2, #1
   d52be:	4542      	cmp	r2, r8
   d52c0:	dbf8      	blt.n	d52b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d52c2:	e04b      	b.n	d535c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d52c4:	2b2e      	cmp	r3, #46	; 0x2e
   d52c6:	d102      	bne.n	d52ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d52c8:	42b2      	cmp	r2, r6
   d52ca:	d1f6      	bne.n	d52ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d52cc:	e003      	b.n	d52d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d52ce:	2b22      	cmp	r3, #34	; 0x22
   d52d0:	d017      	beq.n	d5302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d52d2:	2b7c      	cmp	r3, #124	; 0x7c
   d52d4:	d015      	beq.n	d5302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d52d6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d52da:	f1bc 0f05 	cmp.w	ip, #5
   d52de:	d801      	bhi.n	d52e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d52e0:	2b2d      	cmp	r3, #45	; 0x2d
   d52e2:	d10e      	bne.n	d5302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d52e4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d52e8:	f1bc 0f05 	cmp.w	ip, #5
   d52ec:	d909      	bls.n	d5302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d52ee:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d52f2:	f1bc 0f02 	cmp.w	ip, #2
   d52f6:	d904      	bls.n	d5302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d52f8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d52fc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5300:	d902      	bls.n	d5308 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5302:	42b2      	cmp	r2, r6
   d5304:	d10e      	bne.n	d5324 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5306:	e049      	b.n	d539c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5308:	42b2      	cmp	r2, r6
   d530a:	d047      	beq.n	d539c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d530c:	4575      	cmp	r5, lr
   d530e:	d821      	bhi.n	d5354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5310:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5314:	f1bc 0f19 	cmp.w	ip, #25
   d5318:	d808      	bhi.n	d532c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d531a:	3b20      	subs	r3, #32
   d531c:	b2db      	uxtb	r3, r3
        lc |= bit;
   d531e:	ea49 0707 	orr.w	r7, r9, r7
   d5322:	e00a      	b.n	d533a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5324:	4575      	cmp	r5, lr
   d5326:	d815      	bhi.n	d5354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d5328:	2400      	movs	r4, #0
      c = '_';
   d532a:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d532c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5330:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d5334:	bf98      	it	ls
   d5336:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d533a:	f105 0c01 	add.w	ip, r5, #1
   d533e:	fa5f fc8c 	uxtb.w	ip, ip
   d5342:	440d      	add	r5, r1
      if (i < 7) {
   d5344:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d5348:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d534a:	d801      	bhi.n	d5350 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d534c:	f881 c00c 	strb.w	ip, [r1, #12]
   d5350:	4665      	mov	r5, ip
   d5352:	e7b3      	b.n	d52bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5354:	f1be 0f0a 	cmp.w	lr, #10
   d5358:	d117      	bne.n	d538a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d535a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d535c:	7b4b      	ldrb	r3, [r1, #13]
   d535e:	2b20      	cmp	r3, #32
   d5360:	f43f af53 	beq.w	d520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d5364:	b13c      	cbz	r4, d5376 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d5366:	ea1a 0f07 	tst.w	sl, r7
   d536a:	bf18      	it	ne
   d536c:	2702      	movne	r7, #2
   d536e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5370:	2001      	movs	r0, #1
   d5372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d5376:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5378:	2001      	movs	r0, #1
   d537a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d537c:	4419      	add	r1, r3
   d537e:	237e      	movs	r3, #126	; 0x7e
   d5380:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5382:	2331      	movs	r3, #49	; 0x31
   d5384:	738b      	strb	r3, [r1, #14]
   d5386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d538a:	42b2      	cmp	r2, r6
   d538c:	dce5      	bgt.n	d535a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d538e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5390:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5394:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5396:	f04f 0910 	mov.w	r9, #16
   d539a:	e78e      	b.n	d52ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d539c:	f1be 0f0a 	cmp.w	lr, #10
   d53a0:	d0db      	beq.n	d535a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d53a2:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d53a4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d53a8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d53aa:	f04f 0910 	mov.w	r9, #16
   d53ae:	e785      	b.n	d52bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d53b0:	31000101 	.word	0x31000101

000d53b4 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d53b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53b6:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d53b8:	2300      	movs	r3, #0
   d53ba:	f88d 3004 	strb.w	r3, [sp, #4]
   d53be:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d53c2:	7803      	ldrb	r3, [r0, #0]
   d53c4:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d53c6:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d53c8:	d508      	bpl.n	d53dc <_ZN7FatFile6removeEv+0x28>
   d53ca:	7883      	ldrb	r3, [r0, #2]
   d53cc:	079a      	lsls	r2, r3, #30
   d53ce:	d505      	bpl.n	d53dc <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d53d0:	6a01      	ldr	r1, [r0, #32]
   d53d2:	b129      	cbz	r1, d53e0 <_ZN7FatFile6removeEv+0x2c>
   d53d4:	68a0      	ldr	r0, [r4, #8]
   d53d6:	f000 fee0 	bl	d619a <_ZN9FatVolume9freeChainEm>
   d53da:	b908      	cbnz	r0, d53e0 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d53dc:	2000      	movs	r0, #0
   d53de:	e049      	b.n	d5474 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d53e0:	2101      	movs	r1, #1
   d53e2:	4620      	mov	r0, r4
   d53e4:	f000 faa4 	bl	d5930 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d53e8:	4605      	mov	r5, r0
   d53ea:	2800      	cmp	r0, #0
   d53ec:	d0f6      	beq.n	d53dc <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d53ee:	f7ff fece 	bl	d518e <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d53f2:	26e5      	movs	r6, #229	; 0xe5
   d53f4:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d53f6:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d53f8:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d53fa:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d53fc:	68a0      	ldr	r0, [r4, #8]
   d53fe:	f7ff feb9 	bl	d5174 <_ZN9FatVolume9cacheSyncEv>
   d5402:	2800      	cmp	r0, #0
   d5404:	d0ea      	beq.n	d53dc <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d5406:	78e3      	ldrb	r3, [r4, #3]
   d5408:	2b00      	cmp	r3, #0
   d540a:	d033      	beq.n	d5474 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d540c:	4621      	mov	r1, r4
   d540e:	a801      	add	r0, sp, #4
   d5410:	f7ff fecc 	bl	d51ac <_ZN7FatFile11openClusterEPS_>
   d5414:	2800      	cmp	r0, #0
   d5416:	d0e1      	beq.n	d53dc <_ZN7FatFile6removeEv+0x28>
   d5418:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d541a:	78e3      	ldrb	r3, [r4, #3]
   d541c:	42ab      	cmp	r3, r5
   d541e:	d3dd      	bcc.n	d53dc <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d5420:	88a1      	ldrh	r1, [r4, #4]
   d5422:	1b49      	subs	r1, r1, r5
   d5424:	0149      	lsls	r1, r1, #5
   d5426:	a801      	add	r0, sp, #4
   d5428:	f000 fb8c 	bl	d5b44 <_ZN7FatFile7seekSetEm>
   d542c:	2800      	cmp	r0, #0
   d542e:	d0d5      	beq.n	d53dc <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d5430:	2100      	movs	r1, #0
   d5432:	a801      	add	r0, sp, #4
   d5434:	f000 fb69 	bl	d5b0a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5438:	2800      	cmp	r0, #0
   d543a:	d0cf      	beq.n	d53dc <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d543c:	7ac3      	ldrb	r3, [r0, #11]
   d543e:	2b0f      	cmp	r3, #15
   d5440:	d1cc      	bne.n	d53dc <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d5442:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d5444:	f002 031f 	and.w	r3, r2, #31
   d5448:	429d      	cmp	r5, r3
   d544a:	d1c7      	bne.n	d53dc <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d544c:	7b43      	ldrb	r3, [r0, #13]
   d544e:	42bb      	cmp	r3, r7
   d5450:	d1c4      	bne.n	d53dc <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d5452:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d5454:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d5456:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d545a:	f043 0301 	orr.w	r3, r3, #1
   d545e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d5462:	0653      	lsls	r3, r2, #25
   d5464:	d503      	bpl.n	d546e <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d5466:	68a0      	ldr	r0, [r4, #8]
   d5468:	f7ff fe84 	bl	d5174 <_ZN9FatVolume9cacheSyncEv>
   d546c:	e002      	b.n	d5474 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d546e:	3501      	adds	r5, #1
   d5470:	b2ed      	uxtb	r5, r5
   d5472:	e7d2      	b.n	d541a <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d5474:	b00b      	add	sp, #44	; 0x2c
   d5476:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5478 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d547c:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5480:	4606      	mov	r6, r0
   d5482:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5484:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5486:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5488:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d548c:	6869      	ldr	r1, [r5, #4]
   d548e:	68aa      	ldr	r2, [r5, #8]
   d5490:	1863      	adds	r3, r4, r1
   d5492:	b29b      	uxth	r3, r3
   d5494:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d5496:	4291      	cmp	r1, r2
   d5498:	d006      	beq.n	d54a8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d549a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d549e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d54a2:	4043      	eors	r3, r0
   d54a4:	b29b      	uxth	r3, r3
   d54a6:	e7f6      	b.n	d5496 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d54a8:	f1b9 0f03 	cmp.w	r9, #3
   d54ac:	bf28      	it	cs
   d54ae:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d54b2:	f109 0204 	add.w	r2, r9, #4
   d54b6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d54b8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d54bc:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d54be:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d54c0:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d54c2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d54c4:	bf94      	ite	ls
   d54c6:	3130      	addls	r1, #48	; 0x30
   d54c8:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d54ca:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d54cc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d54ce:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d54d2:	d3f1      	bcc.n	d54b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d54d4:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d54d8:	2100      	movs	r1, #0
   d54da:	735f      	strb	r7, [r3, #13]
   d54dc:	4630      	mov	r0, r6
   d54de:	f000 fb31 	bl	d5b44 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d54e2:	2101      	movs	r1, #1
   d54e4:	4630      	mov	r0, r6
   d54e6:	f000 fb10 	bl	d5b0a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d54ea:	4601      	mov	r1, r0
   d54ec:	b928      	cbnz	r0, d54fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d54ee:	7870      	ldrb	r0, [r6, #1]
   d54f0:	fab0 f080 	clz	r0, r0
   d54f4:	0940      	lsrs	r0, r0, #5
   d54f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d54fa:	7803      	ldrb	r3, [r0, #0]
   d54fc:	b14b      	cbz	r3, d5512 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d54fe:	7ac3      	ldrb	r3, [r0, #11]
   d5500:	071b      	lsls	r3, r3, #28
   d5502:	d4ee      	bmi.n	d54e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5504:	220b      	movs	r2, #11
   d5506:	4640      	mov	r0, r8
   d5508:	f005 fb20 	bl	dab4c <memcmp>
   d550c:	2800      	cmp	r0, #0
   d550e:	d1e8      	bne.n	d54e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5510:	e002      	b.n	d5518 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5512:	2001      	movs	r0, #1
   d5514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5518:	3401      	adds	r4, #1
   d551a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d551c:	2c64      	cmp	r4, #100	; 0x64
   d551e:	d1b5      	bne.n	d548c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5524 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5528:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d552a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d552c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d552e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5532:	9005      	str	r0, [sp, #20]
   d5534:	460e      	mov	r6, r1
   d5536:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5538:	d101      	bne.n	d553e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d553a:	2000      	movs	r0, #0
   d553c:	e1a0      	b.n	d5880 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d553e:	9b05      	ldr	r3, [sp, #20]
   d5540:	781b      	ldrb	r3, [r3, #0]
   d5542:	2b00      	cmp	r3, #0
   d5544:	d1f9      	bne.n	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d5546:	6853      	ldr	r3, [r2, #4]
   d5548:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d554a:	7813      	ldrb	r3, [r2, #0]
   d554c:	079b      	lsls	r3, r3, #30
   d554e:	f000 818d 	beq.w	d586c <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5552:	9b02      	ldr	r3, [sp, #8]
   d5554:	270d      	movs	r7, #13
   d5556:	330c      	adds	r3, #12
   d5558:	fbb3 f7f7 	udiv	r7, r3, r7
   d555c:	3701      	adds	r7, #1
   d555e:	b2ff      	uxtb	r7, r7
   d5560:	2100      	movs	r1, #0
   d5562:	4630      	mov	r0, r6
   d5564:	f000 faee 	bl	d5b44 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5568:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d556c:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5570:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5574:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5576:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5578:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d557a:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d557e:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5580:	6972      	ldr	r2, [r6, #20]
   d5582:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5584:	2101      	movs	r1, #1
   d5586:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5588:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d558c:	f000 fabd 	bl	d5b0a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5590:	9b07      	ldr	r3, [sp, #28]
   d5592:	b920      	cbnz	r0, d559e <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5594:	7873      	ldrb	r3, [r6, #1]
   d5596:	2b00      	cmp	r3, #0
   d5598:	f000 8090 	beq.w	d56bc <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d559c:	e7cd      	b.n	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d559e:	7802      	ldrb	r2, [r0, #0]
   d55a0:	2ae5      	cmp	r2, #229	; 0xe5
   d55a2:	d000      	beq.n	d55a6 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d55a4:	b942      	cbnz	r2, d55b8 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d55a6:	2c00      	cmp	r4, #0
   d55a8:	bf08      	it	eq
   d55aa:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d55ac:	42bc      	cmp	r4, r7
        freeFound++;
   d55ae:	bf3c      	itt	cc
   d55b0:	3401      	addcc	r4, #1
   d55b2:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d55b4:	b922      	cbnz	r2, d55c0 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d55b6:	e081      	b.n	d56bc <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d55b8:	42bc      	cmp	r4, r7
   d55ba:	bf38      	it	cc
   d55bc:	2400      	movcc	r4, #0
   d55be:	e003      	b.n	d55c8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d55c0:	2ae5      	cmp	r2, #229	; 0xe5
   d55c2:	d101      	bne.n	d55c8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d55c4:	2500      	movs	r5, #0
   d55c6:	e7db      	b.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d55c8:	2a2e      	cmp	r2, #46	; 0x2e
   d55ca:	d0fb      	beq.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55cc:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d55ce:	290f      	cmp	r1, #15
   d55d0:	d152      	bne.n	d5678 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d55d2:	b93d      	cbnz	r5, d55e4 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d55d4:	0651      	lsls	r1, r2, #25
   d55d6:	d5d3      	bpl.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d55d8:	7b43      	ldrb	r3, [r0, #13]
   d55da:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d55dc:	f002 051f 	and.w	r5, r2, #31
   d55e0:	462b      	mov	r3, r5
   d55e2:	e007      	b.n	d55f4 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d55e4:	3b01      	subs	r3, #1
   d55e6:	b2db      	uxtb	r3, r3
   d55e8:	429a      	cmp	r2, r3
   d55ea:	d1eb      	bne.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55ec:	7b42      	ldrb	r2, [r0, #13]
   d55ee:	9903      	ldr	r1, [sp, #12]
   d55f0:	4291      	cmp	r1, r2
   d55f2:	d1e7      	bne.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d55f4:	1e5a      	subs	r2, r3, #1
   d55f6:	f04f 0c0d 	mov.w	ip, #13
   d55fa:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d55fe:	9a02      	ldr	r2, [sp, #8]
   d5600:	4562      	cmp	r2, ip
   d5602:	d9df      	bls.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5604:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d5608:	f1be 0f04 	cmp.w	lr, #4
   d560c:	fa5f f28e 	uxtb.w	r2, lr
   d5610:	d804      	bhi.n	d561c <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5612:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d5616:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d561a:	e00c      	b.n	d5636 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d561c:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d561e:	bf95      	itete	ls
   d5620:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5624:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5628:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d562c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5630:	bf94      	ite	ls
   d5632:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5634:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5636:	9902      	ldr	r1, [sp, #8]
   d5638:	4561      	cmp	r1, ip
   d563a:	d103      	bne.n	d5644 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d563c:	2a00      	cmp	r2, #0
   d563e:	bf18      	it	ne
   d5640:	2500      	movne	r5, #0
   d5642:	e79d      	b.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5644:	2aff      	cmp	r2, #255	; 0xff
   d5646:	d8bd      	bhi.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5648:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d564a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d564e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5650:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5654:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5658:	bf98      	it	ls
   d565a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d565c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5660:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5664:	bf98      	it	ls
   d5666:	b2d2      	uxtbls	r2, r2
   d5668:	f1bc 0f19 	cmp.w	ip, #25
   d566c:	bf9c      	itt	ls
   d566e:	3120      	addls	r1, #32
   d5670:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5672:	4291      	cmp	r1, r2
   d5674:	d1a6      	bne.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5676:	e0fb      	b.n	d5870 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5678:	0709      	lsls	r1, r1, #28
   d567a:	d4a3      	bmi.n	d55c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d567c:	b14d      	cbz	r5, d5692 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d567e:	2b01      	cmp	r3, #1
   d5680:	f47f af5b 	bne.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5684:	f7ff fd83 	bl	d518e <_ZN7FatFile11lfnChecksumEPh>
   d5688:	9b03      	ldr	r3, [sp, #12]
   d568a:	4283      	cmp	r3, r0
   d568c:	f47f af55 	bne.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5690:	e00f      	b.n	d56b2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5692:	220b      	movs	r2, #11
   d5694:	9906      	ldr	r1, [sp, #24]
   d5696:	9307      	str	r3, [sp, #28]
   d5698:	f005 fa58 	bl	dab4c <memcmp>
   d569c:	9b07      	ldr	r3, [sp, #28]
   d569e:	2800      	cmp	r0, #0
   d56a0:	f47f af6e 	bne.w	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d56a4:	f899 2000 	ldrb.w	r2, [r9]
   d56a8:	07d2      	lsls	r2, r2, #31
   d56aa:	d502      	bpl.n	d56b2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d56ac:	2201      	movs	r2, #1
   d56ae:	9204      	str	r2, [sp, #16]
   d56b0:	e766      	b.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d56b2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d56b6:	f000 80d1 	beq.w	d585c <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d56ba:	e73e      	b.n	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d56bc:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d56c0:	f43f af3b 	beq.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d56c4:	f00b 0303 	and.w	r3, fp, #3
   d56c8:	3b01      	subs	r3, #1
   d56ca:	2b01      	cmp	r3, #1
   d56cc:	f63f af35 	bhi.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d56d0:	2c00      	cmp	r4, #0
   d56d2:	bf08      	it	eq
   d56d4:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d56d6:	42bc      	cmp	r4, r7
   d56d8:	d302      	bcc.n	d56e0 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d56da:	9b04      	ldr	r3, [sp, #16]
   d56dc:	b9cb      	cbnz	r3, d5712 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d56de:	e01f      	b.n	d5720 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d56e0:	2100      	movs	r1, #0
   d56e2:	4630      	mov	r0, r6
   d56e4:	f000 fa11 	bl	d5b0a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d56e8:	b910      	cbnz	r0, d56f0 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d56ea:	7873      	ldrb	r3, [r6, #1]
   d56ec:	b15b      	cbz	r3, d5706 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d56ee:	e724      	b.n	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d56f0:	3401      	adds	r4, #1
   d56f2:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d56f4:	e7ef      	b.n	d56d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d56f6:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d56f8:	791b      	ldrb	r3, [r3, #4]
   d56fa:	2b01      	cmp	r3, #1
   d56fc:	d8ed      	bhi.n	d56da <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d56fe:	3410      	adds	r4, #16
   d5700:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5702:	42a7      	cmp	r7, r4
   d5704:	d9e9      	bls.n	d56da <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d5706:	4630      	mov	r0, r6
   d5708:	f000 f8d2 	bl	d58b0 <_ZN7FatFile13addDirClusterEv>
   d570c:	2800      	cmp	r0, #0
   d570e:	d1f2      	bne.n	d56f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5710:	e713      	b.n	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5712:	4649      	mov	r1, r9
   d5714:	4630      	mov	r0, r6
   d5716:	f7ff feaf 	bl	d5478 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d571a:	2800      	cmp	r0, #0
   d571c:	f43f af0d 	beq.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5720:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5724:	4630      	mov	r0, r6
   d5726:	f000 fa0d 	bl	d5b44 <_ZN7FatFile7seekSetEm>
   d572a:	2800      	cmp	r0, #0
   d572c:	f43f af05 	beq.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5730:	1e7d      	subs	r5, r7, #1
   d5732:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5734:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5736:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d573a:	f04f 080f 	mov.w	r8, #15
   d573e:	e041      	b.n	d57c4 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5740:	2100      	movs	r1, #0
   d5742:	4630      	mov	r0, r6
   d5744:	f000 f9e1 	bl	d5b0a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5748:	4607      	mov	r7, r0
   d574a:	2800      	cmp	r0, #0
   d574c:	f43f aef5 	beq.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5750:	68b2      	ldr	r2, [r6, #8]
   d5752:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5756:	42ac      	cmp	r4, r5
   d5758:	f043 0301 	orr.w	r3, r3, #1
   d575c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5760:	bf0c      	ite	eq
   d5762:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5766:	4622      	movne	r2, r4
   d5768:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d576a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d576e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5772:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5776:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5778:	f7ff fd09 	bl	d518e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d577c:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d577e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5780:	f887 a01a 	strb.w	sl, [r7, #26]
   d5784:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5788:	f002 021f 	and.w	r2, r2, #31
   d578c:	230d      	movs	r3, #13
   d578e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5790:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5794:	435a      	muls	r2, r3
   d5796:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5798:	9902      	ldr	r1, [sp, #8]
   d579a:	4291      	cmp	r1, r2
   d579c:	d915      	bls.n	d57ca <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d579e:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d57a2:	2b04      	cmp	r3, #4
   d57a4:	fa5f fc83 	uxtb.w	ip, r3
   d57a8:	f103 0001 	add.w	r0, r3, #1
   d57ac:	d813      	bhi.n	d57d6 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d57ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d57b2:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d57b6:	280d      	cmp	r0, #13
   d57b8:	f102 0201 	add.w	r2, r2, #1
   d57bc:	4603      	mov	r3, r0
   d57be:	d1eb      	bne.n	d5798 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d57c0:	3c01      	subs	r4, #1
   d57c2:	b2e4      	uxtb	r4, r4
   d57c4:	2c00      	cmp	r4, #0
   d57c6:	d1bb      	bne.n	d5740 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d57c8:	e00e      	b.n	d57e8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d57ca:	bf14      	ite	ne
   d57cc:	f04f 31ff 	movne.w	r1, #4294967295
   d57d0:	2100      	moveq	r1, #0
   d57d2:	b289      	uxth	r1, r1
   d57d4:	e7e5      	b.n	d57a2 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d57d6:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d57da:	bf94      	ite	ls
   d57dc:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d57e0:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d57e4:	8099      	strh	r1, [r3, #4]
   d57e6:	e7e6      	b.n	d57b6 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d57e8:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d57ea:	4621      	mov	r1, r4
   d57ec:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d57ee:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d57f2:	f000 f98a 	bl	d5b0a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d57f6:	4607      	mov	r7, r0
   d57f8:	2800      	cmp	r0, #0
   d57fa:	f43f ae9e 	beq.w	d553a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d57fe:	2220      	movs	r2, #32
   d5800:	4621      	mov	r1, r4
   d5802:	f005 f9d8 	bl	dabb6 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5806:	464b      	mov	r3, r9
   d5808:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d580c:	603a      	str	r2, [r7, #0]
   d580e:	685a      	ldr	r2, [r3, #4]
   d5810:	607a      	str	r2, [r7, #4]
   d5812:	891a      	ldrh	r2, [r3, #8]
   d5814:	813a      	strh	r2, [r7, #8]
   d5816:	7a9b      	ldrb	r3, [r3, #10]
   d5818:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d581a:	f899 3000 	ldrb.w	r3, [r9]
   d581e:	f003 0318 	and.w	r3, r3, #24
   d5822:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5824:	4b18      	ldr	r3, [pc, #96]	; (d5888 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5826:	681b      	ldr	r3, [r3, #0]
   d5828:	b12b      	cbz	r3, d5836 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d582a:	f107 010e 	add.w	r1, r7, #14
   d582e:	f107 0010 	add.w	r0, r7, #16
   d5832:	4798      	blx	r3
   d5834:	e006      	b.n	d5844 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5836:	2321      	movs	r3, #33	; 0x21
   d5838:	743b      	strb	r3, [r7, #16]
   d583a:	2328      	movs	r3, #40	; 0x28
   d583c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d583e:	2308      	movs	r3, #8
   d5840:	73bc      	strb	r4, [r7, #14]
   d5842:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5844:	8a3b      	ldrh	r3, [r7, #16]
   d5846:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5848:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d584a:	89fb      	ldrh	r3, [r7, #14]
   d584c:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d584e:	68b2      	ldr	r2, [r6, #8]
   d5850:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5854:	f043 0301 	orr.w	r3, r3, #1
   d5858:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d585c:	9500      	str	r5, [sp, #0]
   d585e:	465b      	mov	r3, fp
   d5860:	4652      	mov	r2, sl
   d5862:	4631      	mov	r1, r6
   d5864:	9805      	ldr	r0, [sp, #20]
   d5866:	f000 f9b6 	bl	d5bd6 <_ZN7FatFile15openCachedEntryEPS_tih>
   d586a:	e009      	b.n	d5880 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d586c:	2701      	movs	r7, #1
   d586e:	e677      	b.n	d5560 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5870:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5874:	f1be 0f0d 	cmp.w	lr, #13
   d5878:	f43f ae82 	beq.w	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d587c:	46d4      	mov	ip, sl
   d587e:	e6c3      	b.n	d5608 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5880:	b009      	add	sp, #36	; 0x24
   d5882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5886:	bf00      	nop
   d5888:	2003e33c 	.word	0x2003e33c

000d588c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d588c:	f001 b82e 	b.w	d68ec <HAL_Pin_Map>

000d5890 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5890:	f001 b82c 	b.w	d68ec <HAL_Pin_Map>

000d5894 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5894:	f001 b82a 	b.w	d68ec <HAL_Pin_Map>

000d5898 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5898:	f001 b828 	b.w	d68ec <HAL_Pin_Map>

000d589c <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d589c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d589e:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d58a0:	f043 0304 	orr.w	r3, r3, #4
   d58a4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d58a6:	f100 0210 	add.w	r2, r0, #16
   d58aa:	6880      	ldr	r0, [r0, #8]
   d58ac:	f000 bc3a 	b.w	d6124 <_ZN9FatVolume15allocateClusterEmPm>

000d58b0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d58b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d58b4:	7803      	ldrb	r3, [r0, #0]
   d58b6:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d58ba:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d58bc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d58c0:	b10b      	cbz	r3, d58c6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d58c2:	2600      	movs	r6, #0
   d58c4:	e02e      	b.n	d5924 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d58c6:	6942      	ldr	r2, [r0, #20]
   d58c8:	4b18      	ldr	r3, [pc, #96]	; (d592c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d58ca:	429a      	cmp	r2, r3
   d58cc:	d8f9      	bhi.n	d58c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d58ce:	f7ff ffe5 	bl	d589c <_ZN7FatFile10addClusterEv>
   d58d2:	4606      	mov	r6, r0
   d58d4:	2800      	cmp	r0, #0
   d58d6:	d0f4      	beq.n	d58c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d58d8:	6921      	ldr	r1, [r4, #16]
   d58da:	68a0      	ldr	r0, [r4, #8]
   d58dc:	f000 fbb7 	bl	d604e <_ZNK9FatVolume17clusterFirstBlockEm>
   d58e0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d58e2:	68a0      	ldr	r0, [r4, #8]
   d58e4:	2205      	movs	r2, #5
   d58e6:	4639      	mov	r1, r7
   d58e8:	3024      	adds	r0, #36	; 0x24
   d58ea:	f000 fb8c 	bl	d6006 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d58ee:	4680      	mov	r8, r0
   d58f0:	2800      	cmp	r0, #0
   d58f2:	d0e6      	beq.n	d58c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d58f4:	4629      	mov	r1, r5
   d58f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58fa:	f005 f95c 	bl	dabb6 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58fe:	2501      	movs	r5, #1
   d5900:	68a3      	ldr	r3, [r4, #8]
   d5902:	791a      	ldrb	r2, [r3, #4]
   d5904:	42aa      	cmp	r2, r5
   d5906:	d909      	bls.n	d591c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5908:	4642      	mov	r2, r8
   d590a:	19e9      	adds	r1, r5, r7
   d590c:	6818      	ldr	r0, [r3, #0]
   d590e:	f000 fef7 	bl	d6700 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5912:	2800      	cmp	r0, #0
   d5914:	d0d5      	beq.n	d58c2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5916:	3501      	adds	r5, #1
   d5918:	b2ed      	uxtb	r5, r5
   d591a:	e7f1      	b.n	d5900 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d591c:	6963      	ldr	r3, [r4, #20]
   d591e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5922:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5924:	4630      	mov	r0, r6
   d5926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d592a:	bf00      	nop
   d592c:	001ffdff 	.word	0x001ffdff

000d5930 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5930:	b510      	push	{r4, lr}
   d5932:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5934:	6880      	ldr	r0, [r0, #8]
   d5936:	460a      	mov	r2, r1
   d5938:	3024      	adds	r0, #36	; 0x24
   d593a:	69a1      	ldr	r1, [r4, #24]
   d593c:	f000 fb63 	bl	d6006 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5940:	b120      	cbz	r0, d594c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5942:	88a3      	ldrh	r3, [r4, #4]
   d5944:	f003 030f 	and.w	r3, r3, #15
   d5948:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d594c:	bd10      	pop	{r4, pc}

000d594e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d594e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5950:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5952:	4605      	mov	r5, r0
   d5954:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5956:	b984      	cbnz	r4, d597a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5958:	2224      	movs	r2, #36	; 0x24
   d595a:	4621      	mov	r1, r4
   d595c:	f005 f92b 	bl	dabb6 <memset>

  m_vol = vol;
   d5960:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5962:	79f3      	ldrb	r3, [r6, #7]
   d5964:	2b10      	cmp	r3, #16
   d5966:	d003      	beq.n	d5970 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5968:	2b20      	cmp	r3, #32
   d596a:	d106      	bne.n	d597a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d596c:	2340      	movs	r3, #64	; 0x40
   d596e:	e000      	b.n	d5972 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5970:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5972:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5974:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5976:	70a8      	strb	r0, [r5, #2]
   d5978:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d597a:	2000      	movs	r0, #0
   d597c:	bd70      	pop	{r4, r5, r6, pc}

000d597e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d597e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5982:	7803      	ldrb	r3, [r0, #0]
   d5984:	4604      	mov	r4, r0
   d5986:	4689      	mov	r9, r1
   d5988:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d598a:	b14b      	cbz	r3, d59a0 <_ZN7FatFile4readEPvj+0x22>
   d598c:	7882      	ldrb	r2, [r0, #2]
   d598e:	07d1      	lsls	r1, r2, #31
   d5990:	d506      	bpl.n	d59a0 <_ZN7FatFile4readEPvj+0x22>
   d5992:	e00c      	b.n	d59ae <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5994:	465a      	mov	r2, fp
   d5996:	6921      	ldr	r1, [r4, #16]
   d5998:	f000 fb5f 	bl	d605a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d599c:	2800      	cmp	r0, #0
   d599e:	da3d      	bge.n	d5a1c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d59a0:	7863      	ldrb	r3, [r4, #1]
   d59a2:	f043 0302 	orr.w	r3, r3, #2
   d59a6:	7063      	strb	r3, [r4, #1]
  return -1;
   d59a8:	f04f 30ff 	mov.w	r0, #4294967295
   d59ac:	e097      	b.n	d5ade <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d59ae:	071a      	lsls	r2, r3, #28
   d59b0:	d503      	bpl.n	d59ba <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d59b2:	69e3      	ldr	r3, [r4, #28]
   d59b4:	6962      	ldr	r2, [r4, #20]
   d59b6:	1a9b      	subs	r3, r3, r2
   d59b8:	e007      	b.n	d59ca <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d59ba:	069a      	lsls	r2, r3, #26
   d59bc:	d508      	bpl.n	d59d0 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d59be:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d59c0:	891a      	ldrh	r2, [r3, #8]
   d59c2:	6963      	ldr	r3, [r4, #20]
   d59c4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d59c8:	b29b      	uxth	r3, r3
   d59ca:	429d      	cmp	r5, r3
   d59cc:	bf28      	it	cs
   d59ce:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d59d0:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d59d2:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d59d6:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d59da:	2e00      	cmp	r6, #0
   d59dc:	d035      	beq.n	d5a4a <_ZN7FatFile4readEPvj+0xcc>
   d59de:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59e0:	6963      	ldr	r3, [r4, #20]
   d59e2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d59e4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59e8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d59ec:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d59f0:	d002      	beq.n	d59f8 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d59f2:	6a03      	ldr	r3, [r0, #32]
   d59f4:	4419      	add	r1, r3
   d59f6:	e01d      	b.n	d5a34 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d59f8:	f890 8005 	ldrb.w	r8, [r0, #5]
   d59fc:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5a00:	f1ba 0f00 	cmp.w	sl, #0
   d5a04:	d110      	bne.n	d5a28 <_ZN7FatFile4readEPvj+0xaa>
   d5a06:	f1b8 0f00 	cmp.w	r8, #0
   d5a0a:	d10d      	bne.n	d5a28 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5a0c:	2b00      	cmp	r3, #0
   d5a0e:	d1c1      	bne.n	d5994 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5a10:	0653      	lsls	r3, r2, #25
   d5a12:	bf4c      	ite	mi
   d5a14:	6a03      	ldrmi	r3, [r0, #32]
   d5a16:	6a23      	ldrpl	r3, [r4, #32]
   d5a18:	6123      	str	r3, [r4, #16]
   d5a1a:	e005      	b.n	d5a28 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5a1c:	d104      	bne.n	d5a28 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5a1e:	7823      	ldrb	r3, [r4, #0]
   d5a20:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5a24:	d111      	bne.n	d5a4a <_ZN7FatFile4readEPvj+0xcc>
   d5a26:	e7bb      	b.n	d59a0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5a28:	6921      	ldr	r1, [r4, #16]
   d5a2a:	68a0      	ldr	r0, [r4, #8]
   d5a2c:	f000 fb0f 	bl	d604e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5a30:	eb08 0100 	add.w	r1, r8, r0
   d5a34:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5a36:	f1ba 0f00 	cmp.w	sl, #0
   d5a3a:	d135      	bne.n	d5aa8 <_ZN7FatFile4readEPvj+0x12a>
   d5a3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a40:	d332      	bcc.n	d5aa8 <_ZN7FatFile4readEPvj+0x12a>
   d5a42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5a44:	4299      	cmp	r1, r3
   d5a46:	d102      	bne.n	d5a4e <_ZN7FatFile4readEPvj+0xd0>
   d5a48:	e02e      	b.n	d5aa8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5a4a:	1ba8      	subs	r0, r5, r6
   d5a4c:	e047      	b.n	d5ade <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5a4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5a52:	d31b      	bcc.n	d5a8c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5a54:	7822      	ldrb	r2, [r4, #0]
   d5a56:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5a58:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5a5c:	d406      	bmi.n	d5a6c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5a5e:	7902      	ldrb	r2, [r0, #4]
   d5a60:	ebc8 0202 	rsb	r2, r8, r2
   d5a64:	b2d2      	uxtb	r2, r2
   d5a66:	4592      	cmp	sl, r2
   d5a68:	bf28      	it	cs
   d5a6a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a6c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5a6e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a72:	d207      	bcs.n	d5a84 <_ZN7FatFile4readEPvj+0x106>
   d5a74:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5a76:	4653      	mov	r3, sl
   d5a78:	464a      	mov	r2, r9
   d5a7a:	6800      	ldr	r0, [r0, #0]
   d5a7c:	f000 fdfe 	bl	d667c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5a80:	b960      	cbnz	r0, d5a9c <_ZN7FatFile4readEPvj+0x11e>
   d5a82:	e78d      	b.n	d59a0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a84:	4453      	add	r3, sl
   d5a86:	4299      	cmp	r1, r3
   d5a88:	d321      	bcc.n	d5ace <_ZN7FatFile4readEPvj+0x150>
   d5a8a:	e7f3      	b.n	d5a74 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5a8c:	464a      	mov	r2, r9
   d5a8e:	6800      	ldr	r0, [r0, #0]
   d5a90:	f000 fdac 	bl	d65ec <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5a94:	2800      	cmp	r0, #0
   d5a96:	d083      	beq.n	d59a0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5a98:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5a9c:	6963      	ldr	r3, [r4, #20]
   d5a9e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5aa0:	44b9      	add	r9, r7
    m_curPosition += n;
   d5aa2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5aa4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5aa6:	e798      	b.n	d59da <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5aa8:	2200      	movs	r2, #0
   d5aaa:	3024      	adds	r0, #36	; 0x24
   d5aac:	f000 faab 	bl	d6006 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5ab0:	2800      	cmp	r0, #0
   d5ab2:	f43f af75 	beq.w	d59a0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5ab6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5aba:	42b7      	cmp	r7, r6
   d5abc:	bf28      	it	cs
   d5abe:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5ac0:	eb00 010a 	add.w	r1, r0, sl
   d5ac4:	463a      	mov	r2, r7
   d5ac6:	4648      	mov	r0, r9
   d5ac8:	f005 f84f 	bl	dab6a <memcpy>
   d5acc:	e7e6      	b.n	d5a9c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5ace:	3024      	adds	r0, #36	; 0x24
   d5ad0:	9101      	str	r1, [sp, #4]
   d5ad2:	f000 fa71 	bl	d5fb8 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5ad6:	9901      	ldr	r1, [sp, #4]
   d5ad8:	2800      	cmp	r0, #0
   d5ada:	d1cb      	bne.n	d5a74 <_ZN7FatFile4readEPvj+0xf6>
   d5adc:	e760      	b.n	d59a0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5ade:	b003      	add	sp, #12
   d5ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5ae4 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5ae6:	2201      	movs	r2, #1
   d5ae8:	f10d 0107 	add.w	r1, sp, #7
   d5aec:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5aee:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5af0:	6905      	ldr	r5, [r0, #16]
   d5af2:	f7ff ff44 	bl	d597e <_ZN7FatFile4readEPvj>
   d5af6:	2801      	cmp	r0, #1
   d5af8:	bf05      	ittet	eq
   d5afa:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5afe:	6166      	streq	r6, [r4, #20]
   d5b00:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5b04:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5b06:	b002      	add	sp, #8
   d5b08:	bd70      	pop	{r4, r5, r6, pc}

000d5b0a <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5b0c:	6943      	ldr	r3, [r0, #20]
   d5b0e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5b12:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5b14:	b105      	cbz	r5, d5b18 <_ZN7FatFile12readDirCacheEb+0xe>
   d5b16:	b969      	cbnz	r1, d5b34 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5b18:	2201      	movs	r2, #1
   d5b1a:	f10d 0107 	add.w	r1, sp, #7
   d5b1e:	4620      	mov	r0, r4
   d5b20:	f7ff ff2d 	bl	d597e <_ZN7FatFile4readEPvj>
   d5b24:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5b26:	2801      	cmp	r0, #1
   d5b28:	d001      	beq.n	d5b2e <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5b2a:	2000      	movs	r0, #0
   d5b2c:	e008      	b.n	d5b40 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5b2e:	6963      	ldr	r3, [r4, #20]
   d5b30:	331f      	adds	r3, #31
   d5b32:	e000      	b.n	d5b36 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5b34:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5b36:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5b38:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5b3a:	3030      	adds	r0, #48	; 0x30
   d5b3c:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5b40:	b003      	add	sp, #12
   d5b42:	bd30      	pop	{r4, r5, pc}

000d5b44 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b48:	460e      	mov	r6, r1
   d5b4a:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5b4c:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5b4e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5b50:	2900      	cmp	r1, #0
   d5b52:	d039      	beq.n	d5bc8 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5b54:	6945      	ldr	r5, [r0, #20]
   d5b56:	42b5      	cmp	r5, r6
   d5b58:	d03a      	beq.n	d5bd0 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5b5a:	b90e      	cbnz	r6, d5b60 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5b5c:	6106      	str	r6, [r0, #16]
    goto done;
   d5b5e:	e031      	b.n	d5bc4 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5b60:	070b      	lsls	r3, r1, #28
   d5b62:	d503      	bpl.n	d5b6c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5b64:	69c3      	ldr	r3, [r0, #28]
   d5b66:	429e      	cmp	r6, r3
   d5b68:	d82e      	bhi.n	d5bc8 <_ZN7FatFile7seekSetEm+0x84>
   d5b6a:	e007      	b.n	d5b7c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5b6c:	0688      	lsls	r0, r1, #26
   d5b6e:	d505      	bpl.n	d5b7c <_ZN7FatFile7seekSetEm+0x38>
   d5b70:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5b72:	891b      	ldrh	r3, [r3, #8]
   d5b74:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5b78:	d826      	bhi.n	d5bc8 <_ZN7FatFile7seekSetEm+0x84>
   d5b7a:	e023      	b.n	d5bc4 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b7c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5b80:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5b84:	1e6a      	subs	r2, r5, #1
   d5b86:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b8a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b8c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b8e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5b90:	429a      	cmp	r2, r3
   d5b92:	d800      	bhi.n	d5b96 <_ZN7FatFile7seekSetEm+0x52>
   d5b94:	b94d      	cbnz	r5, d5baa <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5b96:	064a      	lsls	r2, r1, #25
   d5b98:	bf4c      	ite	mi
   d5b9a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5b9e:	6a22      	ldrpl	r2, [r4, #32]
   d5ba0:	6122      	str	r2, [r4, #16]
   d5ba2:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5ba4:	f104 0810 	add.w	r8, r4, #16
   d5ba8:	e00a      	b.n	d5bc0 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5baa:	1a9b      	subs	r3, r3, r2
   d5bac:	e7f9      	b.n	d5ba2 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5bae:	4642      	mov	r2, r8
   d5bb0:	6921      	ldr	r1, [r4, #16]
   d5bb2:	68a0      	ldr	r0, [r4, #8]
   d5bb4:	f000 fa51 	bl	d605a <_ZN9FatVolume6fatGetEmPm>
   d5bb8:	2800      	cmp	r0, #0
   d5bba:	f105 35ff 	add.w	r5, r5, #4294967295
   d5bbe:	dd03      	ble.n	d5bc8 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5bc0:	2d00      	cmp	r5, #0
   d5bc2:	d1f4      	bne.n	d5bae <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5bc4:	6166      	str	r6, [r4, #20]
   d5bc6:	e003      	b.n	d5bd0 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5bc8:	6127      	str	r7, [r4, #16]
  return false;
   d5bca:	2000      	movs	r0, #0
   d5bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5bd0:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bd6 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bd8:	460f      	mov	r7, r1
   d5bda:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5bdc:	2100      	movs	r1, #0
   d5bde:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5be0:	4604      	mov	r4, r0
   d5be2:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5be4:	f004 ffe7 	bl	dabb6 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5be8:	68b8      	ldr	r0, [r7, #8]
   d5bea:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5bec:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5bf0:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5bf2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5bf6:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5bf8:	6a3b      	ldr	r3, [r7, #32]
   d5bfa:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5bfc:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5bfe:	7acb      	ldrb	r3, [r1, #11]
   d5c00:	071d      	lsls	r5, r3, #28
   d5c02:	d44c      	bmi.n	d5c9e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5c04:	1883      	adds	r3, r0, r2
   d5c06:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5c0a:	f003 0317 	and.w	r3, r3, #23
   d5c0e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5c10:	7ac9      	ldrb	r1, [r1, #11]
   d5c12:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5c16:	bf04      	itt	eq
   d5c18:	f043 0308 	orreq.w	r3, r3, #8
   d5c1c:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5c1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5c22:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5c24:	f006 0303 	and.w	r3, r6, #3
   d5c28:	2b01      	cmp	r3, #1
   d5c2a:	d009      	beq.n	d5c40 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5c2c:	2b02      	cmp	r3, #2
   d5c2e:	d005      	beq.n	d5c3c <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5c30:	2b00      	cmp	r3, #0
   d5c32:	d134      	bne.n	d5c9e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5c34:	0571      	lsls	r1, r6, #21
   d5c36:	d432      	bmi.n	d5c9e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5c38:	2301      	movs	r3, #1
   d5c3a:	e002      	b.n	d5c42 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5c3c:	2303      	movs	r3, #3
   d5c3e:	e000      	b.n	d5c42 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5c40:	2302      	movs	r3, #2
   d5c42:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5c44:	78a1      	ldrb	r1, [r4, #2]
   d5c46:	078b      	lsls	r3, r1, #30
   d5c48:	d503      	bpl.n	d5c52 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5c4a:	7823      	ldrb	r3, [r4, #0]
   d5c4c:	f013 0f11 	tst.w	r3, #17
   d5c50:	d125      	bne.n	d5c9e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5c52:	b24b      	sxtb	r3, r1
   d5c54:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5c58:	f006 0108 	and.w	r1, r6, #8
   d5c5c:	bf14      	ite	ne
   d5c5e:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5c62:	2700      	moveq	r7, #0
   d5c64:	4319      	orrs	r1, r3
   d5c66:	4339      	orrs	r1, r7
   d5c68:	70a1      	strb	r1, [r4, #2]
   d5c6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5c6c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5c6e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5c70:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5c72:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5c76:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5c7a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5c7e:	d504      	bpl.n	d5c8a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5c80:	b181      	cbz	r1, d5ca4 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c82:	f000 fa8a 	bl	d619a <_ZN9FatVolume9freeChainEm>
   d5c86:	b968      	cbnz	r0, d5ca4 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c88:	e009      	b.n	d5c9e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5c8a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5c8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5c8e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5c90:	0473      	lsls	r3, r6, #17
   d5c92:	d50c      	bpl.n	d5cae <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5c94:	69e1      	ldr	r1, [r4, #28]
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff ff54 	bl	d5b44 <_ZN7FatFile7seekSetEm>
   d5c9c:	b938      	cbnz	r0, d5cae <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5c9e:	2000      	movs	r0, #0
   d5ca0:	7020      	strb	r0, [r4, #0]
  return false;
   d5ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5ca4:	78a3      	ldrb	r3, [r4, #2]
   d5ca6:	f043 0304 	orr.w	r3, r3, #4
   d5caa:	70a3      	strb	r3, [r4, #2]
   d5cac:	e7f0      	b.n	d5c90 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5cae:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5cb4 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5cb4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5cb6:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5cb8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5cba:	b90b      	cbnz	r3, d5cc0 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5cbc:	2001      	movs	r0, #1
   d5cbe:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5cc0:	7883      	ldrb	r3, [r0, #2]
   d5cc2:	075a      	lsls	r2, r3, #29
   d5cc4:	d523      	bpl.n	d5d0e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5cc6:	2101      	movs	r1, #1
   d5cc8:	f7ff fe32 	bl	d5930 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5ccc:	4605      	mov	r5, r0
   d5cce:	b928      	cbnz	r0, d5cdc <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5cd0:	7863      	ldrb	r3, [r4, #1]
   d5cd2:	f043 0301 	orr.w	r3, r3, #1
   d5cd6:	7063      	strb	r3, [r4, #1]
  return false;
   d5cd8:	2000      	movs	r0, #0
   d5cda:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5cdc:	7803      	ldrb	r3, [r0, #0]
   d5cde:	2be5      	cmp	r3, #229	; 0xe5
   d5ce0:	d0f6      	beq.n	d5cd0 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5ce2:	7823      	ldrb	r3, [r4, #0]
   d5ce4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5ce6:	bf44      	itt	mi
   d5ce8:	69e3      	ldrmi	r3, [r4, #28]
   d5cea:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5cec:	8c23      	ldrh	r3, [r4, #32]
   d5cee:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5cf0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5cf2:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5cf4:	4b09      	ldr	r3, [pc, #36]	; (d5d1c <_ZN7FatFile4syncEv+0x68>)
   d5cf6:	681b      	ldr	r3, [r3, #0]
   d5cf8:	b12b      	cbz	r3, d5d06 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5cfa:	f100 0116 	add.w	r1, r0, #22
   d5cfe:	3018      	adds	r0, #24
   d5d00:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5d02:	8b2b      	ldrh	r3, [r5, #24]
   d5d04:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5d06:	78a3      	ldrb	r3, [r4, #2]
   d5d08:	f023 0304 	bic.w	r3, r3, #4
   d5d0c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5d0e:	68a0      	ldr	r0, [r4, #8]
   d5d10:	f7ff fa30 	bl	d5174 <_ZN9FatVolume9cacheSyncEv>
   d5d14:	2800      	cmp	r0, #0
   d5d16:	d0db      	beq.n	d5cd0 <_ZN7FatFile4syncEv+0x1c>
   d5d18:	e7d0      	b.n	d5cbc <_ZN7FatFile4syncEv+0x8>
   d5d1a:	bf00      	nop
   d5d1c:	2003e33c 	.word	0x2003e33c

000d5d20 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5d20:	b510      	push	{r4, lr}
   d5d22:	4604      	mov	r4, r0
  bool rtn = sync();
   d5d24:	f7ff ffc6 	bl	d5cb4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5d28:	2300      	movs	r3, #0
   d5d2a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5d2c:	bd10      	pop	{r4, pc}

000d5d2e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d30:	b093      	sub	sp, #76	; 0x4c
   d5d32:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5d34:	2300      	movs	r3, #0
   d5d36:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5d3a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5d3e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5d40:	9201      	str	r2, [sp, #4]
   d5d42:	4606      	mov	r6, r0
   d5d44:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5d46:	b10b      	cbz	r3, d5d4c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5d48:	2000      	movs	r0, #0
   d5d4a:	e03d      	b.n	d5dc8 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5d4c:	780b      	ldrb	r3, [r1, #0]
   d5d4e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5d52:	d0f9      	beq.n	d5d48 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5d54:	7813      	ldrb	r3, [r2, #0]
   d5d56:	2b2f      	cmp	r3, #47	; 0x2f
   d5d58:	d112      	bne.n	d5d80 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5d5a:	9b01      	ldr	r3, [sp, #4]
   d5d5c:	781a      	ldrb	r2, [r3, #0]
   d5d5e:	2a2f      	cmp	r2, #47	; 0x2f
   d5d60:	d102      	bne.n	d5d68 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5d62:	3301      	adds	r3, #1
   d5d64:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5d66:	e7f8      	b.n	d5d5a <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5d68:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5d6a:	b91a      	cbnz	r2, d5d74 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5d6c:	4630      	mov	r0, r6
   d5d6e:	f7ff fdee 	bl	d594e <_ZN7FatFile8openRootEP9FatVolume>
   d5d72:	e029      	b.n	d5dc8 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5d74:	a809      	add	r0, sp, #36	; 0x24
   d5d76:	f7ff fdea 	bl	d594e <_ZN7FatFile8openRootEP9FatVolume>
   d5d7a:	2800      	cmp	r0, #0
   d5d7c:	d0e4      	beq.n	d5d48 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5d7e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5d80:	aa01      	add	r2, sp, #4
   d5d82:	a903      	add	r1, sp, #12
   d5d84:	9801      	ldr	r0, [sp, #4]
   d5d86:	f7ff fa29 	bl	d51dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5d8a:	2800      	cmp	r0, #0
   d5d8c:	d0dc      	beq.n	d5d48 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5d8e:	9b01      	ldr	r3, [sp, #4]
   d5d90:	781b      	ldrb	r3, [r3, #0]
   d5d92:	b19b      	cbz	r3, d5dbc <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5d94:	2300      	movs	r3, #0
   d5d96:	aa03      	add	r2, sp, #12
   d5d98:	4621      	mov	r1, r4
   d5d9a:	4630      	mov	r0, r6
   d5d9c:	f7ff fbc2 	bl	d5524 <_ZN7FatFile4openEPS_P7fname_ti>
   d5da0:	2800      	cmp	r0, #0
   d5da2:	d0d1      	beq.n	d5d48 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5da4:	4635      	mov	r5, r6
   d5da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5da8:	ac09      	add	r4, sp, #36	; 0x24
   d5daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5db0:	682b      	ldr	r3, [r5, #0]
   d5db2:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5db4:	4630      	mov	r0, r6
   d5db6:	f7ff ffb3 	bl	d5d20 <_ZN7FatFile5closeEv>
   d5dba:	e7e0      	b.n	d5d7e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5dbc:	463b      	mov	r3, r7
   d5dbe:	aa03      	add	r2, sp, #12
   d5dc0:	4621      	mov	r1, r4
   d5dc2:	4630      	mov	r0, r6
   d5dc4:	f7ff fbae 	bl	d5524 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5dc8:	b013      	add	sp, #76	; 0x4c
   d5dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5dcc <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d5dcc:	b500      	push	{lr}
   d5dce:	b08b      	sub	sp, #44	; 0x2c
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	f88d 3004 	strb.w	r3, [sp, #4]
   d5dd6:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d5dda:	460a      	mov	r2, r1
   d5ddc:	2301      	movs	r3, #1
   d5dde:	4601      	mov	r1, r0
   d5de0:	a801      	add	r0, sp, #4
   d5de2:	f7ff ffa4 	bl	d5d2e <_ZN7FatFile4openEPS_PKci>
   d5de6:	b110      	cbz	r0, d5dee <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d5de8:	a801      	add	r0, sp, #4
   d5dea:	f7ff fae3 	bl	d53b4 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d5dee:	b00b      	add	sp, #44	; 0x2c
   d5df0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5df4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5df8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5dfa:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5dfc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5dfe:	4604      	mov	r4, r0
   d5e00:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e02:	d508      	bpl.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
   d5e04:	7883      	ldrb	r3, [r0, #2]
   d5e06:	079a      	lsls	r2, r3, #30
   d5e08:	d505      	bpl.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5e0a:	071b      	lsls	r3, r3, #28
   d5e0c:	d50b      	bpl.n	d5e26 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5e0e:	69e1      	ldr	r1, [r4, #28]
   d5e10:	f7ff fe98 	bl	d5b44 <_ZN7FatFile7seekSetEm>
   d5e14:	b938      	cbnz	r0, d5e26 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5e16:	7863      	ldrb	r3, [r4, #1]
   d5e18:	f043 0301 	orr.w	r3, r3, #1
   d5e1c:	7063      	strb	r3, [r4, #1]
  return -1;
   d5e1e:	f04f 30ff 	mov.w	r0, #4294967295
   d5e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5e26:	6963      	ldr	r3, [r4, #20]
   d5e28:	43db      	mvns	r3, r3
   d5e2a:	4598      	cmp	r8, r3
   d5e2c:	d8f3      	bhi.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
   d5e2e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e30:	f04f 0a00 	mov.w	sl, #0
   d5e34:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5e36:	2e00      	cmp	r6, #0
   d5e38:	f000 8081 	beq.w	d5f3e <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5e3c:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5e3e:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e40:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5e44:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e48:	d11c      	bne.n	d5e84 <_ZN7FatFile5writeEPKvj+0x90>
   d5e4a:	b9df      	cbnz	r7, d5e84 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5e4c:	6921      	ldr	r1, [r4, #16]
   d5e4e:	b171      	cbz	r1, d5e6e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5e50:	f104 0210 	add.w	r2, r4, #16
   d5e54:	f000 f901 	bl	d605a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5e58:	2800      	cmp	r0, #0
   d5e5a:	dbdc      	blt.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5e5c:	f040 808e 	bne.w	d5f7c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5e60:	4620      	mov	r0, r4
   d5e62:	f7ff fd1b 	bl	d589c <_ZN7FatFile10addClusterEv>
   d5e66:	2800      	cmp	r0, #0
   d5e68:	f040 8088 	bne.w	d5f7c <_ZN7FatFile5writeEPKvj+0x188>
   d5e6c:	e7d3      	b.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5e6e:	6a23      	ldr	r3, [r4, #32]
   d5e70:	b93b      	cbnz	r3, d5e82 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5e72:	4620      	mov	r0, r4
   d5e74:	f7ff fd12 	bl	d589c <_ZN7FatFile10addClusterEv>
   d5e78:	2800      	cmp	r0, #0
   d5e7a:	d0cc      	beq.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5e7c:	6923      	ldr	r3, [r4, #16]
   d5e7e:	6223      	str	r3, [r4, #32]
   d5e80:	e000      	b.n	d5e84 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5e82:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5e84:	6921      	ldr	r1, [r4, #16]
   d5e86:	68a0      	ldr	r0, [r4, #8]
   d5e88:	f000 f8e1 	bl	d604e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5e8c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5e8e:	b917      	cbnz	r7, d5e96 <_ZN7FatFile5writeEPKvj+0xa2>
   d5e90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5e94:	d221      	bcs.n	d5eda <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5e96:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5e9a:	42b5      	cmp	r5, r6
   d5e9c:	bf28      	it	cs
   d5e9e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5ea0:	b937      	cbnz	r7, d5eb0 <_ZN7FatFile5writeEPKvj+0xbc>
   d5ea2:	6963      	ldr	r3, [r4, #20]
   d5ea4:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5ea6:	4293      	cmp	r3, r2
   d5ea8:	bf34      	ite	cc
   d5eaa:	2201      	movcc	r2, #1
   d5eac:	2205      	movcs	r2, #5
   d5eae:	e000      	b.n	d5eb2 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5eb0:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5eb2:	68a0      	ldr	r0, [r4, #8]
   d5eb4:	3024      	adds	r0, #36	; 0x24
   d5eb6:	f000 f8a6 	bl	d6006 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5eba:	2800      	cmp	r0, #0
   d5ebc:	d0ab      	beq.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5ebe:	4438      	add	r0, r7
   d5ec0:	462a      	mov	r2, r5
   d5ec2:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5ec4:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5ec6:	f004 fe50 	bl	dab6a <memcpy>
      if (512 == (n + blockOffset)) {
   d5eca:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5ece:	d130      	bne.n	d5f32 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5ed0:	68a0      	ldr	r0, [r4, #8]
   d5ed2:	3024      	adds	r0, #36	; 0x24
   d5ed4:	f000 f870 	bl	d5fb8 <_ZN8FatCache4syncEv>
   d5ed8:	e017      	b.n	d5f0a <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5eda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5ede:	68a0      	ldr	r0, [r4, #8]
   d5ee0:	d315      	bcc.n	d5f0e <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5ee2:	7902      	ldrb	r2, [r0, #4]
   d5ee4:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5ee6:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5ee8:	b2d2      	uxtb	r2, r2
   d5eea:	4293      	cmp	r3, r2
   d5eec:	bf28      	it	cs
   d5eee:	4613      	movcs	r3, r2
   d5ef0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5ef2:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5ef4:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5ef8:	d302      	bcc.n	d5f00 <_ZN7FatFile5writeEPKvj+0x10c>
   d5efa:	441a      	add	r2, r3
   d5efc:	4291      	cmp	r1, r2
   d5efe:	d337      	bcc.n	d5f70 <_ZN7FatFile5writeEPKvj+0x17c>
   d5f00:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5f02:	464a      	mov	r2, r9
   d5f04:	6838      	ldr	r0, [r7, #0]
   d5f06:	f000 fc6d 	bl	d67e4 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5f0a:	b990      	cbnz	r0, d5f32 <_ZN7FatFile5writeEPKvj+0x13e>
   d5f0c:	e783      	b.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5f0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5f10:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f12:	bf02      	ittt	eq
   d5f14:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f18:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f1c:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5f1e:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f20:	464a      	mov	r2, r9
   d5f22:	6818      	ldr	r0, [r3, #0]
   d5f24:	f000 fbec 	bl	d6700 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5f28:	2800      	cmp	r0, #0
   d5f2a:	f43f af74 	beq.w	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5f2e:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5f32:	6963      	ldr	r3, [r4, #20]
   d5f34:	442b      	add	r3, r5
   d5f36:	6163      	str	r3, [r4, #20]
    src += n;
   d5f38:	44a9      	add	r9, r5
    nToWrite -= n;
   d5f3a:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5f3c:	e77a      	b.n	d5e34 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5f3e:	69e2      	ldr	r2, [r4, #28]
   d5f40:	4293      	cmp	r3, r2
   d5f42:	d901      	bls.n	d5f48 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5f44:	61e3      	str	r3, [r4, #28]
   d5f46:	e002      	b.n	d5f4e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5f48:	4b0f      	ldr	r3, [pc, #60]	; (d5f88 <_ZN7FatFile5writeEPKvj+0x194>)
   d5f4a:	681b      	ldr	r3, [r3, #0]
   d5f4c:	b11b      	cbz	r3, d5f56 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5f4e:	78a3      	ldrb	r3, [r4, #2]
   d5f50:	f043 0304 	orr.w	r3, r3, #4
   d5f54:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5f56:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5f5a:	2b00      	cmp	r3, #0
   d5f5c:	db02      	blt.n	d5f64 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5f5e:	4640      	mov	r0, r8
   d5f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5f64:	4620      	mov	r0, r4
   d5f66:	f7ff fea5 	bl	d5cb4 <_ZN7FatFile4syncEv>
   d5f6a:	2800      	cmp	r0, #0
   d5f6c:	d1f7      	bne.n	d5f5e <_ZN7FatFile5writeEPKvj+0x16a>
   d5f6e:	e752      	b.n	d5e16 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f70:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f74:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f78:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5f7a:	e7c1      	b.n	d5f00 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5f7c:	6921      	ldr	r1, [r4, #16]
   d5f7e:	68a0      	ldr	r0, [r4, #8]
   d5f80:	f000 f865 	bl	d604e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5f84:	4601      	mov	r1, r0
   d5f86:	e783      	b.n	d5e90 <_ZN7FatFile5writeEPKvj+0x9c>
   d5f88:	2003e33c 	.word	0x2003e33c

000d5f8c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5f8c:	f000 bcae 	b.w	d68ec <HAL_Pin_Map>

000d5f90 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f90:	b570      	push	{r4, r5, r6, lr}
   d5f92:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f94:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f96:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f98:	b149      	cbz	r1, d5fae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f9a:	f004 fe7a 	bl	dac92 <strlen>
   d5f9e:	682b      	ldr	r3, [r5, #0]
   d5fa0:	4602      	mov	r2, r0
   d5fa2:	4621      	mov	r1, r4
   d5fa4:	4628      	mov	r0, r5
   d5fa6:	68db      	ldr	r3, [r3, #12]
    }
   d5fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5fac:	4718      	bx	r3
    }
   d5fae:	bd70      	pop	{r4, r5, r6, pc}

000d5fb0 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5fb0:	f000 bc9c 	b.w	d68ec <HAL_Pin_Map>

000d5fb4 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5fb4:	f000 bc9a 	b.w	d68ec <HAL_Pin_Map>

000d5fb8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5fb8:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5fba:	7803      	ldrb	r3, [r0, #0]
   d5fbc:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5fbe:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5fc0:	d51e      	bpl.n	d6000 <_ZN8FatCache4syncEv+0x48>
   d5fc2:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5fc4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5fc6:	f100 060c 	add.w	r6, r0, #12
   d5fca:	4632      	mov	r2, r6
   d5fcc:	6818      	ldr	r0, [r3, #0]
   d5fce:	f000 fb97 	bl	d6700 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5fd2:	4605      	mov	r5, r0
   d5fd4:	b908      	cbnz	r0, d5fda <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5fd6:	2500      	movs	r5, #0
   d5fd8:	e013      	b.n	d6002 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5fda:	7823      	ldrb	r3, [r4, #0]
   d5fdc:	079b      	lsls	r3, r3, #30
   d5fde:	d404      	bmi.n	d5fea <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5fe0:	7823      	ldrb	r3, [r4, #0]
   d5fe2:	f023 0301 	bic.w	r3, r3, #1
   d5fe6:	7023      	strb	r3, [r4, #0]
   d5fe8:	e00b      	b.n	d6002 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5fea:	6863      	ldr	r3, [r4, #4]
   d5fec:	68a0      	ldr	r0, [r4, #8]
   d5fee:	6919      	ldr	r1, [r3, #16]
   d5ff0:	4632      	mov	r2, r6
   d5ff2:	4401      	add	r1, r0
   d5ff4:	6818      	ldr	r0, [r3, #0]
   d5ff6:	f000 fb83 	bl	d6700 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5ffa:	2800      	cmp	r0, #0
   d5ffc:	d1f0      	bne.n	d5fe0 <_ZN8FatCache4syncEv+0x28>
   d5ffe:	e7ea      	b.n	d5fd6 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6000:	2501      	movs	r5, #1

fail:
  return false;
}
   d6002:	4628      	mov	r0, r5
   d6004:	bd70      	pop	{r4, r5, r6, pc}

000d6006 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6006:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6008:	6883      	ldr	r3, [r0, #8]
   d600a:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d600c:	4604      	mov	r4, r0
   d600e:	460e      	mov	r6, r1
   d6010:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6012:	d014      	beq.n	d603e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6014:	f7ff ffd0 	bl	d5fb8 <_ZN8FatCache4syncEv>
   d6018:	b908      	cbnz	r0, d601e <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d601a:	2000      	movs	r0, #0
   d601c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d601e:	076b      	lsls	r3, r5, #29
   d6020:	d503      	bpl.n	d602a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6022:	2300      	movs	r3, #0
   d6024:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6026:	60a6      	str	r6, [r4, #8]
   d6028:	e009      	b.n	d603e <_ZN8FatCache4readEmh+0x38>
   d602a:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d602c:	f104 020c 	add.w	r2, r4, #12
   d6030:	4631      	mov	r1, r6
   d6032:	6818      	ldr	r0, [r3, #0]
   d6034:	f000 fada 	bl	d65ec <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6038:	2800      	cmp	r0, #0
   d603a:	d1f2      	bne.n	d6022 <_ZN8FatCache4readEmh+0x1c>
   d603c:	e7ed      	b.n	d601a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d603e:	7823      	ldrb	r3, [r4, #0]
   d6040:	4620      	mov	r0, r4
   d6042:	f005 0503 	and.w	r5, r5, #3
   d6046:	431d      	orrs	r5, r3
   d6048:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d604c:	bd70      	pop	{r4, r5, r6, pc}

000d604e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d604e:	7983      	ldrb	r3, [r0, #6]
   d6050:	6940      	ldr	r0, [r0, #20]
   d6052:	3902      	subs	r1, #2
   d6054:	4099      	lsls	r1, r3
}
   d6056:	4408      	add	r0, r1
   d6058:	4770      	bx	lr

000d605a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d605a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d605c:	b570      	push	{r4, r5, r6, lr}
   d605e:	4605      	mov	r5, r0
   d6060:	460c      	mov	r4, r1
   d6062:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6064:	d802      	bhi.n	d606c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6066:	f04f 30ff 	mov.w	r0, #4294967295
   d606a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d606c:	69c3      	ldr	r3, [r0, #28]
   d606e:	4299      	cmp	r1, r3
   d6070:	d8f9      	bhi.n	d6066 <_ZN9FatVolume6fatGetEmPm+0xc>
   d6072:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6074:	2b20      	cmp	r3, #32
   d6076:	d110      	bne.n	d609a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d6078:	6981      	ldr	r1, [r0, #24]
   d607a:	2202      	movs	r2, #2
   d607c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6080:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6084:	f7ff ffbf 	bl	d6006 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6088:	2800      	cmp	r0, #0
   d608a:	d0ec      	beq.n	d6066 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d608c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6090:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6094:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6098:	e00f      	b.n	d60ba <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d609a:	2b10      	cmp	r3, #16
   d609c:	d1e3      	bne.n	d6066 <_ZN9FatVolume6fatGetEmPm+0xc>
   d609e:	6983      	ldr	r3, [r0, #24]
   d60a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d60a4:	2202      	movs	r2, #2
   d60a6:	4419      	add	r1, r3
   d60a8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60ac:	f7ff ffab 	bl	d6006 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d60b0:	2800      	cmp	r0, #0
   d60b2:	d0d8      	beq.n	d6066 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d60b4:	b2e4      	uxtb	r4, r4
   d60b6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d60ba:	69ea      	ldr	r2, [r5, #28]
   d60bc:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d60be:	bf9a      	itte	ls
   d60c0:	6033      	strls	r3, [r6, #0]
  return 1;
   d60c2:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d60c4:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d60c6:	bd70      	pop	{r4, r5, r6, pc}

000d60c8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60c8:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d60ca:	b538      	push	{r3, r4, r5, lr}
   d60cc:	460c      	mov	r4, r1
   d60ce:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60d0:	d801      	bhi.n	d60d6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d60d2:	2000      	movs	r0, #0
   d60d4:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60d6:	69c3      	ldr	r3, [r0, #28]
   d60d8:	4299      	cmp	r1, r3
   d60da:	d8fa      	bhi.n	d60d2 <_ZN9FatVolume6fatPutEmm+0xa>
   d60dc:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d60de:	2b20      	cmp	r3, #32
   d60e0:	d10e      	bne.n	d6100 <_ZN9FatVolume6fatPutEmm+0x38>
   d60e2:	6981      	ldr	r1, [r0, #24]
   d60e4:	2203      	movs	r2, #3
   d60e6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d60ea:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60ee:	f7ff ff8a 	bl	d6006 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d60f2:	2800      	cmp	r0, #0
   d60f4:	d0ed      	beq.n	d60d2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d60f6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d60fa:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d60fe:	e00f      	b.n	d6120 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6100:	2b10      	cmp	r3, #16
   d6102:	d1e6      	bne.n	d60d2 <_ZN9FatVolume6fatPutEmm+0xa>
   d6104:	6983      	ldr	r3, [r0, #24]
   d6106:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d610a:	2203      	movs	r2, #3
   d610c:	4419      	add	r1, r3
   d610e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6112:	f7ff ff78 	bl	d6006 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6116:	2800      	cmp	r0, #0
   d6118:	d0db      	beq.n	d60d2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d611a:	b2e4      	uxtb	r4, r4
   d611c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6120:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d6122:	bd38      	pop	{r3, r4, r5, pc}

000d6124 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6128:	68c4      	ldr	r4, [r0, #12]
   d612a:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d612c:	4605      	mov	r5, r0
   d612e:	460e      	mov	r6, r1
   d6130:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6132:	d207      	bcs.n	d6144 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6134:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d6136:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6138:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d613a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d613c:	429c      	cmp	r4, r3
   d613e:	d903      	bls.n	d6148 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6140:	b9cf      	cbnz	r7, d6176 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d6142:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6144:	2701      	movs	r7, #1
   d6146:	e7f7      	b.n	d6138 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6148:	42a6      	cmp	r6, r4
   d614a:	d014      	beq.n	d6176 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d614c:	aa01      	add	r2, sp, #4
   d614e:	4621      	mov	r1, r4
   d6150:	4628      	mov	r0, r5
   d6152:	f7ff ff82 	bl	d605a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6156:	2800      	cmp	r0, #0
   d6158:	db0d      	blt.n	d6176 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d615a:	d0ed      	beq.n	d6138 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d615c:	9b01      	ldr	r3, [sp, #4]
   d615e:	2b00      	cmp	r3, #0
   d6160:	d1ea      	bne.n	d6138 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d6162:	b107      	cbz	r7, d6166 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d6164:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6166:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d616a:	4621      	mov	r1, r4
   d616c:	4628      	mov	r0, r5
   d616e:	f7ff ffab 	bl	d60c8 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d6172:	4607      	mov	r7, r0
   d6174:	b908      	cbnz	r0, d617a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d6176:	2700      	movs	r7, #0
   d6178:	e00b      	b.n	d6192 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d617a:	b916      	cbnz	r6, d6182 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d617c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6180:	e007      	b.n	d6192 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d6182:	4622      	mov	r2, r4
   d6184:	4631      	mov	r1, r6
   d6186:	4628      	mov	r0, r5
   d6188:	f7ff ff9e 	bl	d60c8 <_ZN9FatVolume6fatPutEmm>
   d618c:	2800      	cmp	r0, #0
   d618e:	d1f5      	bne.n	d617c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6190:	e7f1      	b.n	d6176 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d6192:	4638      	mov	r0, r7
   d6194:	b002      	add	sp, #8
   d6196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d619a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d619a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d619c:	4605      	mov	r5, r0
   d619e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d61a0:	aa01      	add	r2, sp, #4
   d61a2:	4621      	mov	r1, r4
   d61a4:	4628      	mov	r0, r5
   d61a6:	f7ff ff58 	bl	d605a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d61aa:	1e06      	subs	r6, r0, #0
   d61ac:	da01      	bge.n	d61b2 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d61ae:	2000      	movs	r0, #0
   d61b0:	e00f      	b.n	d61d2 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d61b2:	2200      	movs	r2, #0
   d61b4:	4621      	mov	r1, r4
   d61b6:	4628      	mov	r0, r5
   d61b8:	f7ff ff86 	bl	d60c8 <_ZN9FatVolume6fatPutEmm>
   d61bc:	2800      	cmp	r0, #0
   d61be:	d0f6      	beq.n	d61ae <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d61c0:	68eb      	ldr	r3, [r5, #12]
   d61c2:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d61c4:	bf9c      	itt	ls
   d61c6:	f104 34ff 	addls.w	r4, r4, #4294967295
   d61ca:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d61cc:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d61ce:	2e00      	cmp	r6, #0
   d61d0:	d1e6      	bne.n	d61a0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d61d2:	b002      	add	sp, #8
   d61d4:	bd70      	pop	{r4, r5, r6, pc}

000d61d6 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d61d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d61d8:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d61da:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d61dc:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d61de:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d61e0:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d61e4:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d61e6:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d61e8:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61ea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d61f0:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61f4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d61f8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d61fc:	b1a1      	cbz	r1, d6228 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d61fe:	2904      	cmp	r1, #4
   d6200:	d85d      	bhi.n	d62be <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6202:	4611      	mov	r1, r2
   d6204:	3024      	adds	r0, #36	; 0x24
   d6206:	f7ff fefe 	bl	d6006 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d620a:	2800      	cmp	r0, #0
   d620c:	d057      	beq.n	d62be <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d620e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6212:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6216:	065b      	lsls	r3, r3, #25
   d6218:	d151      	bne.n	d62be <_ZN9FatVolume4initEh+0xe8>
   d621a:	351b      	adds	r5, #27
   d621c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6220:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6224:	2d00      	cmp	r5, #0
   d6226:	d04a      	beq.n	d62be <_ZN9FatVolume4initEh+0xe8>
   d6228:	2200      	movs	r2, #0
   d622a:	4629      	mov	r1, r5
   d622c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6230:	f7ff fee9 	bl	d6006 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6234:	2800      	cmp	r0, #0
   d6236:	d042      	beq.n	d62be <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d6238:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6240:	d13d      	bne.n	d62be <_ZN9FatVolume4initEh+0xe8>
   d6242:	7c03      	ldrb	r3, [r0, #16]
   d6244:	2b02      	cmp	r3, #2
   d6246:	d13a      	bne.n	d62be <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d6248:	89c3      	ldrh	r3, [r0, #14]
   d624a:	2b00      	cmp	r3, #0
   d624c:	d037      	beq.n	d62be <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d624e:	7b41      	ldrb	r1, [r0, #13]
   d6250:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6252:	1e4b      	subs	r3, r1, #1
   d6254:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d6256:	2300      	movs	r3, #0
   d6258:	71a3      	strb	r3, [r4, #6]
   d625a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d625c:	2301      	movs	r3, #1
   d625e:	428b      	cmp	r3, r1
   d6260:	d007      	beq.n	d6272 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d6262:	3e01      	subs	r6, #1
   d6264:	d02b      	beq.n	d62be <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6266:	79a2      	ldrb	r2, [r4, #6]
   d6268:	005b      	lsls	r3, r3, #1
   d626a:	3201      	adds	r2, #1
   d626c:	b2db      	uxtb	r3, r3
   d626e:	71a2      	strb	r2, [r4, #6]
   d6270:	e7f5      	b.n	d625e <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d6272:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d6274:	b902      	cbnz	r2, d6278 <_ZN9FatVolume4initEh+0xa2>
   d6276:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d6278:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d627a:	89c6      	ldrh	r6, [r0, #14]
   d627c:	442e      	add	r6, r5
   d627e:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6280:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d6284:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6286:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d628a:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d628c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6290:	0152      	lsls	r2, r2, #5
   d6292:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d6296:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d629a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d629c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d62a0:	b903      	cbnz	r3, d62a4 <_ZN9FatVolume4initEh+0xce>
   d62a2:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d62a4:	1aad      	subs	r5, r5, r2
   d62a6:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d62a8:	79a5      	ldrb	r5, [r4, #6]
   d62aa:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d62ae:	1c6b      	adds	r3, r5, #1
   d62b0:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d62b2:	f640 73f4 	movw	r3, #4084	; 0xff4
   d62b6:	429d      	cmp	r5, r3
   d62b8:	d803      	bhi.n	d62c2 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d62ba:	230c      	movs	r3, #12
   d62bc:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d62be:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d62c0:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d62c2:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d62c6:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d62c8:	bf85      	ittet	hi
   d62ca:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d62cc:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d62ce:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d62d0:	2320      	movhi	r3, #32
   d62d2:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d62d4:	2001      	movs	r0, #1

fail:
  return false;
}
   d62d6:	bd70      	pop	{r4, r5, r6, pc}

000d62d8 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d62d8:	f000 bb08 	b.w	d68ec <HAL_Pin_Map>

000d62dc <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d62dc:	f000 bb06 	b.w	d68ec <HAL_Pin_Map>

000d62e0 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d62e0:	f000 bb04 	b.w	d68ec <HAL_Pin_Map>

000d62e4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d62e4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d62e6:	4c0e      	ldr	r4, [pc, #56]	; (d6320 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d62e8:	460e      	mov	r6, r1
   d62ea:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d62ec:	f000 fb7e 	bl	d69ec <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d62f0:	6823      	ldr	r3, [r4, #0]
   d62f2:	1ac0      	subs	r0, r0, r3
   d62f4:	4b0b      	ldr	r3, [pc, #44]	; (d6324 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d62f6:	4298      	cmp	r0, r3
   d62f8:	d908      	bls.n	d630c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62fa:	f000 fb7f 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62fe:	4b0a      	ldr	r3, [pc, #40]	; (d6328 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6300:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6302:	f000 fdc3 	bl	d6e8c <spark_process>
   d6306:	f000 fb71 	bl	d69ec <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d630a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d630c:	f000 fb76 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6310:	b280      	uxth	r0, r0
   d6312:	1b80      	subs	r0, r0, r6
}
   d6314:	42a8      	cmp	r0, r5
   d6316:	bfd4      	ite	le
   d6318:	2000      	movle	r0, #0
   d631a:	2001      	movgt	r0, #1
   d631c:	bd70      	pop	{r4, r5, r6, pc}
   d631e:	bf00      	nop
   d6320:	2003e340 	.word	0x2003e340
   d6324:	000186a0 	.word	0x000186a0
   d6328:	2003e708 	.word	0x2003e708

000d632c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d632c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d632e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6330:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6332:	b94d      	cbnz	r5, d6348 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6334:	6840      	ldr	r0, [r0, #4]
   d6336:	f000 fa7d 	bl	d6834 <_ZN14SdSpiAltDriver8activateEv>
   d633a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d633c:	4629      	mov	r1, r5
   d633e:	7d18      	ldrb	r0, [r3, #20]
   d6340:	f003 fc43 	bl	d9bca <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6344:	2301      	movs	r3, #1
   d6346:	7223      	strb	r3, [r4, #8]
   d6348:	bd38      	pop	{r3, r4, r5, pc}

000d634a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d634a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d634c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d634e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6350:	b16b      	cbz	r3, d636e <_ZN9SdSpiCard7spiStopEv+0x24>
   d6352:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6354:	2101      	movs	r1, #1
   d6356:	7d18      	ldrb	r0, [r3, #20]
   d6358:	f003 fc37 	bl	d9bca <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d635c:	21ff      	movs	r1, #255	; 0xff
   d635e:	6860      	ldr	r0, [r4, #4]
   d6360:	f000 fa9a 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6364:	6860      	ldr	r0, [r4, #4]
   d6366:	f000 fa79 	bl	d685c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d636a:	2300      	movs	r3, #0
   d636c:	7223      	strb	r3, [r4, #8]
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6372:	4604      	mov	r4, r0
   d6374:	460d      	mov	r5, r1
   d6376:	4616      	mov	r6, r2
   d6378:	f000 fb40 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d637c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d637e:	6860      	ldr	r0, [r4, #4]
   d6380:	f000 fa6f 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6384:	28ff      	cmp	r0, #255	; 0xff
   d6386:	7260      	strb	r0, [r4, #9]
   d6388:	d109      	bne.n	d639e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d638a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d638e:	4639      	mov	r1, r7
   d6390:	4620      	mov	r0, r4
   d6392:	f7ff ffa7 	bl	d62e4 <_ZN9SdSpiCard10isTimedOutEtt>
   d6396:	2800      	cmp	r0, #0
   d6398:	d0f1      	beq.n	d637e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d639a:	2355      	movs	r3, #85	; 0x55
   d639c:	e00b      	b.n	d63b6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d639e:	28fe      	cmp	r0, #254	; 0xfe
   d63a0:	d001      	beq.n	d63a6 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d63a2:	2350      	movs	r3, #80	; 0x50
   d63a4:	e007      	b.n	d63b6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d63a6:	4632      	mov	r2, r6
   d63a8:	4629      	mov	r1, r5
   d63aa:	6860      	ldr	r0, [r4, #4]
   d63ac:	f000 fa5e 	bl	d686c <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d63b0:	7260      	strb	r0, [r4, #9]
   d63b2:	b130      	cbz	r0, d63c2 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63b4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d63b6:	4620      	mov	r0, r4
   d63b8:	7023      	strb	r3, [r4, #0]
   d63ba:	f7ff ffc6 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63be:	2000      	movs	r0, #0
}
   d63c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63c2:	6860      	ldr	r0, [r4, #4]
   d63c4:	f000 fa4d 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d63c8:	6860      	ldr	r0, [r4, #4]
   d63ca:	f000 fa4a 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d63ce:	2001      	movs	r0, #1
   d63d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63d2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d63d2:	b570      	push	{r4, r5, r6, lr}
   d63d4:	4604      	mov	r4, r0
   d63d6:	460e      	mov	r6, r1
   d63d8:	f000 fb10 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
   d63dc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d63de:	4632      	mov	r2, r6
   d63e0:	4629      	mov	r1, r5
   d63e2:	4620      	mov	r0, r4
   d63e4:	f7ff ff7e 	bl	d62e4 <_ZN9SdSpiCard10isTimedOutEtt>
   d63e8:	b930      	cbnz	r0, d63f8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d63ea:	6860      	ldr	r0, [r4, #4]
   d63ec:	f000 fa39 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d63f0:	28ff      	cmp	r0, #255	; 0xff
   d63f2:	d1f4      	bne.n	d63de <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d63f4:	2001      	movs	r0, #1
   d63f6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d63f8:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d63fa:	bd70      	pop	{r4, r5, r6, pc}

000d63fc <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d63fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d63fe:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6400:	9201      	str	r2, [sp, #4]
   d6402:	4604      	mov	r4, r0
   d6404:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6406:	b90b      	cbnz	r3, d640c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6408:	f7ff ff90 	bl	d632c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d640c:	b125      	cbz	r5, d6418 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d640e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6412:	4620      	mov	r0, r4
   d6414:	f7ff ffdd 	bl	d63d2 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6418:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d641c:	6860      	ldr	r0, [r4, #4]
   d641e:	f000 fa3b 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
   d6422:	f10d 0607 	add.w	r6, sp, #7
   d6426:	f10d 0703 	add.w	r7, sp, #3
   d642a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d642e:	6860      	ldr	r0, [r4, #4]
   d6430:	f000 fa32 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6434:	42be      	cmp	r6, r7
   d6436:	d1f8      	bne.n	d642a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6438:	2d00      	cmp	r5, #0
   d643a:	bf0c      	ite	eq
   d643c:	2195      	moveq	r1, #149	; 0x95
   d643e:	2187      	movne	r1, #135	; 0x87
   d6440:	6860      	ldr	r0, [r4, #4]
   d6442:	f000 fa29 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6446:	6860      	ldr	r0, [r4, #4]
   d6448:	f000 fa0b 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d644c:	250b      	movs	r5, #11
   d644e:	6860      	ldr	r0, [r4, #4]
   d6450:	f000 fa07 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6454:	0603      	lsls	r3, r0, #24
   d6456:	7260      	strb	r0, [r4, #9]
   d6458:	d503      	bpl.n	d6462 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d645a:	3d01      	subs	r5, #1
   d645c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6460:	d1f5      	bne.n	d644e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d6462:	b003      	add	sp, #12
   d6464:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6466 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6466:	b570      	push	{r4, r5, r6, lr}
   d6468:	4604      	mov	r4, r0
   d646a:	460d      	mov	r5, r1
   d646c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d646e:	2137      	movs	r1, #55	; 0x37
   d6470:	2200      	movs	r2, #0
   d6472:	f7ff ffc3 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6476:	4632      	mov	r2, r6
   d6478:	4629      	mov	r1, r5
   d647a:	4620      	mov	r0, r4
  }
   d647c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d6480:	f7ff bfbc 	b.w	d63fc <_ZN9SdSpiCard11cardCommandEhm>

000d6484 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6488:	2500      	movs	r5, #0
   d648a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d648c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d648e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6490:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6492:	4604      	mov	r4, r0
   d6494:	4690      	mov	r8, r2
   d6496:	461e      	mov	r6, r3
   d6498:	f000 fab0 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d649c:	4641      	mov	r1, r8
   d649e:	4607      	mov	r7, r0
   d64a0:	6860      	ldr	r0, [r4, #4]
   d64a2:	f000 f9cb 	bl	d683c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d64a6:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d64a8:	4a4f      	ldr	r2, [pc, #316]	; (d65e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d64aa:	721d      	strb	r5, [r3, #8]
   d64ac:	f04f 0801 	mov.w	r8, #1
   d64b0:	60da      	str	r2, [r3, #12]
   d64b2:	745d      	strb	r5, [r3, #17]
   d64b4:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d64b8:	4620      	mov	r0, r4
   d64ba:	f7ff ff37 	bl	d632c <_ZN9SdSpiCard8spiStartEv>
   d64be:	6863      	ldr	r3, [r4, #4]
   d64c0:	4641      	mov	r1, r8
   d64c2:	7d18      	ldrb	r0, [r3, #20]
   d64c4:	f003 fb81 	bl	d9bca <digitalWrite>
   d64c8:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d64ca:	21ff      	movs	r1, #255	; 0xff
   d64cc:	6860      	ldr	r0, [r4, #4]
   d64ce:	3d01      	subs	r5, #1
   d64d0:	f000 f9e2 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d64d4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d64d8:	d1f7      	bne.n	d64ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d64da:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d64dc:	4629      	mov	r1, r5
   d64de:	7d18      	ldrb	r0, [r3, #20]
   d64e0:	f003 fb73 	bl	d9bca <digitalWrite>
   d64e4:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d64e6:	2200      	movs	r2, #0
   d64e8:	4611      	mov	r1, r2
   d64ea:	4620      	mov	r0, r4
   d64ec:	f7ff ff86 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d64f0:	2801      	cmp	r0, #1
   d64f2:	4680      	mov	r8, r0
   d64f4:	d012      	beq.n	d651c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d64f6:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d64f8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d64fc:	d101      	bne.n	d6502 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d64fe:	2320      	movs	r3, #32
   d6500:	e057      	b.n	d65b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6502:	21fd      	movs	r1, #253	; 0xfd
   d6504:	6860      	ldr	r0, [r4, #4]
   d6506:	f000 f9c7 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
   d650a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d650e:	6860      	ldr	r0, [r4, #4]
   d6510:	f000 f9a7 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6514:	f1b8 0801 	subs.w	r8, r8, #1
   d6518:	d1f9      	bne.n	d650e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d651a:	e7e4      	b.n	d64e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d651c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6520:	2108      	movs	r1, #8
   d6522:	4620      	mov	r0, r4
   d6524:	f7ff ff6a 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d6528:	2805      	cmp	r0, #5
   d652a:	d102      	bne.n	d6532 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d652c:	f884 800a 	strb.w	r8, [r4, #10]
   d6530:	e00f      	b.n	d6552 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d6532:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6534:	6860      	ldr	r0, [r4, #4]
   d6536:	f000 f994 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d653a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d653c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6540:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6542:	d1f7      	bne.n	d6534 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6544:	28aa      	cmp	r0, #170	; 0xaa
   d6546:	d102      	bne.n	d654e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6548:	2302      	movs	r3, #2
   d654a:	72a3      	strb	r3, [r4, #10]
   d654c:	e001      	b.n	d6552 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d654e:	2325      	movs	r3, #37	; 0x25
   d6550:	e02f      	b.n	d65b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6552:	7aa3      	ldrb	r3, [r4, #10]
   d6554:	2b02      	cmp	r3, #2
   d6556:	bf0c      	ite	eq
   d6558:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d655c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d655e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6560:	462a      	mov	r2, r5
   d6562:	2129      	movs	r1, #41	; 0x29
   d6564:	4620      	mov	r0, r4
   d6566:	f7ff ff7e 	bl	d6466 <_ZN9SdSpiCard8cardAcmdEhm>
   d656a:	4602      	mov	r2, r0
   d656c:	b148      	cbz	r0, d6582 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d656e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6572:	4639      	mov	r1, r7
   d6574:	4620      	mov	r0, r4
   d6576:	f7ff feb5 	bl	d62e4 <_ZN9SdSpiCard10isTimedOutEtt>
   d657a:	2800      	cmp	r0, #0
   d657c:	d0f0      	beq.n	d6560 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d657e:	2343      	movs	r3, #67	; 0x43
   d6580:	e017      	b.n	d65b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6582:	7aa3      	ldrb	r3, [r4, #10]
   d6584:	2b02      	cmp	r3, #2
   d6586:	d00e      	beq.n	d65a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6588:	4620      	mov	r0, r4
   d658a:	f7ff fede 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d658e:	6863      	ldr	r3, [r4, #4]
   d6590:	68b0      	ldr	r0, [r6, #8]
   d6592:	7934      	ldrb	r4, [r6, #4]
   d6594:	7b31      	ldrb	r1, [r6, #12]
   d6596:	7b72      	ldrb	r2, [r6, #13]
   d6598:	745a      	strb	r2, [r3, #17]
   d659a:	60d8      	str	r0, [r3, #12]
   d659c:	721c      	strb	r4, [r3, #8]
   d659e:	7419      	strb	r1, [r3, #16]
  return true;
   d65a0:	2001      	movs	r0, #1
   d65a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d65a6:	213a      	movs	r1, #58	; 0x3a
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff ff27 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d65ae:	b138      	cbz	r0, d65c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d65b0:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d65b2:	4620      	mov	r0, r4
   d65b4:	7023      	strb	r3, [r4, #0]
   d65b6:	f7ff fec8 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ba:	2000      	movs	r0, #0
}
   d65bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65c0:	6860      	ldr	r0, [r4, #4]
   d65c2:	f000 f94e 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d65c6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d65ca:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d65cc:	bf04      	itt	eq
   d65ce:	2303      	moveq	r3, #3
   d65d0:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65d2:	6860      	ldr	r0, [r4, #4]
   d65d4:	f000 f945 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d65d8:	6860      	ldr	r0, [r4, #4]
   d65da:	f000 f942 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d65de:	6860      	ldr	r0, [r4, #4]
   d65e0:	f000 f93f 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d65e4:	e7d0      	b.n	d6588 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d65e6:	bf00      	nop
   d65e8:	0003d090 	.word	0x0003d090

000d65ec <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d65ec:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d65ee:	7a83      	ldrb	r3, [r0, #10]
   d65f0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d65f2:	bf18      	it	ne
   d65f4:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d65f6:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d65f8:	460a      	mov	r2, r1
   d65fa:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d65fc:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d65fe:	f7ff fefd 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d6602:	b110      	cbz	r0, d660a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6604:	2330      	movs	r3, #48	; 0x30
   d6606:	7023      	strb	r3, [r4, #0]
   d6608:	e00b      	b.n	d6622 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d660a:	4629      	mov	r1, r5
   d660c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6610:	4620      	mov	r0, r4
   d6612:	f7ff fead 	bl	d6370 <_ZN9SdSpiCard8readDataEPhj>
   d6616:	4605      	mov	r5, r0
   d6618:	b118      	cbz	r0, d6622 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d661a:	4620      	mov	r0, r4
   d661c:	f7ff fe95 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6620:	e003      	b.n	d662a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6622:	4620      	mov	r0, r4
   d6624:	f7ff fe91 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6628:	2500      	movs	r5, #0
}
   d662a:	4628      	mov	r0, r5
   d662c:	bd38      	pop	{r3, r4, r5, pc}

000d662e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d662e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6630:	7a83      	ldrb	r3, [r0, #10]
   d6632:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6634:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6636:	bf18      	it	ne
   d6638:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d663a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d663c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d663e:	f7ff fedd 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d6642:	b130      	cbz	r0, d6652 <_ZN9SdSpiCard9readStartEm+0x24>
   d6644:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6646:	4620      	mov	r0, r4
   d6648:	7023      	strb	r3, [r4, #0]
   d664a:	f7ff fe7e 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d664e:	2000      	movs	r0, #0
   d6650:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6652:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6654:	bd10      	pop	{r4, pc}

000d6656 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6656:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6658:	2200      	movs	r2, #0
   d665a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d665c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d665e:	f7ff fecd 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d6662:	b130      	cbz	r0, d6672 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6664:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6666:	4620      	mov	r0, r4
   d6668:	7023      	strb	r3, [r4, #0]
   d666a:	f7ff fe6e 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d666e:	2000      	movs	r0, #0
   d6670:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6672:	4620      	mov	r0, r4
   d6674:	f7ff fe69 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6678:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d667a:	bd10      	pop	{r4, pc}

000d667c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d667e:	4605      	mov	r5, r0
   d6680:	4616      	mov	r6, r2
   d6682:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6684:	f7ff ffd3 	bl	d662e <_ZN9SdSpiCard9readStartEm>
   d6688:	b198      	cbz	r0, d66b2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d668a:	2400      	movs	r4, #0
   d668c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d668e:	429f      	cmp	r7, r3
   d6690:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6694:	d908      	bls.n	d66a8 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6696:	f44f 7200 	mov.w	r2, #512	; 0x200
   d669a:	4628      	mov	r0, r5
   d669c:	f7ff fe68 	bl	d6370 <_ZN9SdSpiCard8readDataEPhj>
   d66a0:	3401      	adds	r4, #1
   d66a2:	2800      	cmp	r0, #0
   d66a4:	d1f2      	bne.n	d668c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d66a6:	e004      	b.n	d66b2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d66a8:	4628      	mov	r0, r5
}
   d66aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d66ae:	f7ff bfd2 	b.w	d6656 <_ZN9SdSpiCard8readStopEv>
}
   d66b2:	2000      	movs	r0, #0
   d66b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66b6 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d66b6:	b538      	push	{r3, r4, r5, lr}
   d66b8:	4604      	mov	r4, r0
   d66ba:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66bc:	6840      	ldr	r0, [r0, #4]
   d66be:	f000 f8eb 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d66c2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d66c6:	4629      	mov	r1, r5
   d66c8:	6860      	ldr	r0, [r4, #4]
   d66ca:	f000 f8e9 	bl	d68a0 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66ce:	21ff      	movs	r1, #255	; 0xff
   d66d0:	6860      	ldr	r0, [r4, #4]
   d66d2:	f000 f8e1 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
   d66d6:	21ff      	movs	r1, #255	; 0xff
   d66d8:	6860      	ldr	r0, [r4, #4]
   d66da:	f000 f8dd 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d66de:	6860      	ldr	r0, [r4, #4]
   d66e0:	f000 f8bf 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d66e4:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d66e6:	f000 001f 	and.w	r0, r0, #31
   d66ea:	2805      	cmp	r0, #5
   d66ec:	d006      	beq.n	d66fc <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d66ee:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d66f0:	4620      	mov	r0, r4
   d66f2:	7023      	strb	r3, [r4, #0]
   d66f4:	f7ff fe29 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66f8:	2000      	movs	r0, #0
   d66fa:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d66fc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d66fe:	bd38      	pop	{r3, r4, r5, pc}

000d6700 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6700:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6702:	7a83      	ldrb	r3, [r0, #10]
   d6704:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6706:	bf18      	it	ne
   d6708:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d670a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d670c:	460a      	mov	r2, r1
   d670e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6710:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6712:	f7ff fe73 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d6716:	4606      	mov	r6, r0
   d6718:	b108      	cbz	r0, d671e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d671a:	2332      	movs	r3, #50	; 0x32
   d671c:	e01d      	b.n	d675a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d671e:	462a      	mov	r2, r5
   d6720:	21fe      	movs	r1, #254	; 0xfe
   d6722:	4620      	mov	r0, r4
   d6724:	f7ff ffc7 	bl	d66b6 <_ZN9SdSpiCard9writeDataEhPKh>
   d6728:	b1c0      	cbz	r0, d675c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d672a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d672e:	4620      	mov	r0, r4
   d6730:	f7ff fe4f 	bl	d63d2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6734:	4605      	mov	r5, r0
   d6736:	b908      	cbnz	r0, d673c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6738:	235a      	movs	r3, #90	; 0x5a
   d673a:	e00e      	b.n	d675a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d673c:	4632      	mov	r2, r6
   d673e:	210d      	movs	r1, #13
   d6740:	4620      	mov	r0, r4
   d6742:	f7ff fe5b 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d6746:	b938      	cbnz	r0, d6758 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6748:	6860      	ldr	r0, [r4, #4]
   d674a:	f000 f88a 	bl	d6862 <_ZN14SdSpiAltDriver7receiveEv>
   d674e:	b918      	cbnz	r0, d6758 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6750:	4620      	mov	r0, r4
   d6752:	f7ff fdfa 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6756:	e005      	b.n	d6764 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6758:	2329      	movs	r3, #41	; 0x29
   d675a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d675c:	4620      	mov	r0, r4
   d675e:	f7ff fdf4 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6762:	2500      	movs	r5, #0
}
   d6764:	4628      	mov	r0, r5
   d6766:	bd70      	pop	{r4, r5, r6, pc}

000d6768 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6768:	b538      	push	{r3, r4, r5, lr}
   d676a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d676c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6770:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6772:	f7ff fe2e 	bl	d63d2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6776:	b910      	cbnz	r0, d677e <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6778:	235b      	movs	r3, #91	; 0x5b
   d677a:	7023      	strb	r3, [r4, #0]
   d677c:	e005      	b.n	d678a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d677e:	462a      	mov	r2, r5
   d6780:	21fc      	movs	r1, #252	; 0xfc
   d6782:	4620      	mov	r0, r4
   d6784:	f7ff ff97 	bl	d66b6 <_ZN9SdSpiCard9writeDataEhPKh>
   d6788:	b918      	cbnz	r0, d6792 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d678a:	4620      	mov	r0, r4
   d678c:	f7ff fddd 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6790:	2000      	movs	r0, #0
}
   d6792:	bd38      	pop	{r3, r4, r5, pc}

000d6794 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6794:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6796:	7a83      	ldrb	r3, [r0, #10]
   d6798:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d679a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d679c:	bf18      	it	ne
   d679e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67a0:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67a2:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67a4:	f7ff fe2a 	bl	d63fc <_ZN9SdSpiCard11cardCommandEhm>
   d67a8:	b130      	cbz	r0, d67b8 <_ZN9SdSpiCard10writeStartEm+0x24>
   d67aa:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d67ac:	4620      	mov	r0, r4
   d67ae:	7023      	strb	r3, [r4, #0]
   d67b0:	f7ff fdcb 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67b4:	2000      	movs	r0, #0
   d67b6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d67b8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d67ba:	bd10      	pop	{r4, pc}

000d67bc <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d67bc:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d67c2:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67c4:	f7ff fe05 	bl	d63d2 <_ZN9SdSpiCard11waitNotBusyEt>
   d67c8:	4605      	mov	r5, r0
   d67ca:	b120      	cbz	r0, d67d6 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d67cc:	21fd      	movs	r1, #253	; 0xfd
   d67ce:	6860      	ldr	r0, [r4, #4]
   d67d0:	f000 f862 	bl	d6898 <_ZN14SdSpiAltDriver4sendEh>
   d67d4:	e001      	b.n	d67da <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d67d6:	2356      	movs	r3, #86	; 0x56
   d67d8:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d67da:	4620      	mov	r0, r4
   d67dc:	f7ff fdb5 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d67e0:	4628      	mov	r0, r5
   d67e2:	bd38      	pop	{r3, r4, r5, pc}

000d67e4 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d67e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67e6:	4605      	mov	r5, r0
   d67e8:	4616      	mov	r6, r2
   d67ea:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d67ec:	f7ff ffd2 	bl	d6794 <_ZN9SdSpiCard10writeStartEm>
   d67f0:	b170      	cbz	r0, d6810 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d67f2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d67f4:	42bc      	cmp	r4, r7
   d67f6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d67fa:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d67fc:	d004      	beq.n	d6808 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d67fe:	f7ff ffb3 	bl	d6768 <_ZN9SdSpiCard9writeDataEPKh>
   d6802:	b128      	cbz	r0, d6810 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6804:	3401      	adds	r4, #1
   d6806:	e7f5      	b.n	d67f4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d680c:	f7ff bfd6 	b.w	d67bc <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6810:	4628      	mov	r0, r5
   d6812:	f7ff fd9a 	bl	d634a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6816:	2000      	movs	r0, #0
   d6818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d681a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d681a:	f000 b867 	b.w	d68ec <HAL_Pin_Map>

000d681e <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d681e:	f000 b865 	b.w	d68ec <HAL_Pin_Map>

000d6822 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6822:	f000 b863 	b.w	d68ec <HAL_Pin_Map>
	...

000d6828 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6828:	4b01      	ldr	r3, [pc, #4]	; (d6830 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d682a:	2201      	movs	r2, #1
   d682c:	701a      	strb	r2, [r3, #0]
   d682e:	4770      	bx	lr
   d6830:	2003e344 	.word	0x2003e344

000d6834 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6834:	1d01      	adds	r1, r0, #4
   d6836:	6800      	ldr	r0, [r0, #0]
   d6838:	f000 bc20 	b.w	d707c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d683c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d683c:	b510      	push	{r4, lr}
   d683e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6840:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6842:	6800      	ldr	r0, [r0, #0]
   d6844:	f000 fbf0 	bl	d7028 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6848:	7d20      	ldrb	r0, [r4, #20]
   d684a:	2101      	movs	r1, #1
   d684c:	f003 f9ac 	bl	d9ba8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6850:	7d20      	ldrb	r0, [r4, #20]
   d6852:	2101      	movs	r1, #1
}
   d6854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6858:	f003 b9b7 	b.w	d9bca <digitalWrite>

000d685c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d685c:	6800      	ldr	r0, [r0, #0]
   d685e:	f000 bbf4 	b.w	d704a <_ZN8SPIClass14endTransactionEv>

000d6862 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6862:	21ff      	movs	r1, #255	; 0xff
   d6864:	6800      	ldr	r0, [r0, #0]
   d6866:	f000 bc79 	b.w	d715c <_ZN8SPIClass8transferEh>
	...

000d686c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d686c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d686e:	4b08      	ldr	r3, [pc, #32]	; (d6890 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6870:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6872:	2500      	movs	r5, #0
   d6874:	4c07      	ldr	r4, [pc, #28]	; (d6894 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6876:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6878:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d687a:	4613      	mov	r3, r2
   d687c:	460a      	mov	r2, r1
   d687e:	4629      	mov	r1, r5
   d6880:	f000 fc72 	bl	d7168 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6884:	7823      	ldrb	r3, [r4, #0]
   d6886:	2b00      	cmp	r3, #0
   d6888:	d0fc      	beq.n	d6884 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d688a:	2000      	movs	r0, #0
   d688c:	b003      	add	sp, #12
   d688e:	bd30      	pop	{r4, r5, pc}
   d6890:	000d6829 	.word	0x000d6829
   d6894:	2003e344 	.word	0x2003e344

000d6898 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6898:	6800      	ldr	r0, [r0, #0]
   d689a:	f000 bc5f 	b.w	d715c <_ZN8SPIClass8transferEh>
	...

000d68a0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d68a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68a2:	4b07      	ldr	r3, [pc, #28]	; (d68c0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d68a4:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68a6:	2500      	movs	r5, #0
   d68a8:	4c06      	ldr	r4, [pc, #24]	; (d68c4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68aa:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68ac:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68ae:	4613      	mov	r3, r2
   d68b0:	462a      	mov	r2, r5
   d68b2:	f000 fc59 	bl	d7168 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d68b6:	7823      	ldrb	r3, [r4, #0]
   d68b8:	2b00      	cmp	r3, #0
   d68ba:	d0fc      	beq.n	d68b6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d68bc:	b003      	add	sp, #12
   d68be:	bd30      	pop	{r4, r5, pc}
   d68c0:	000d6829 	.word	0x000d6829
   d68c4:	2003e344 	.word	0x2003e344

000d68c8 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d68c8:	f000 b810 	b.w	d68ec <HAL_Pin_Map>

000d68cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d68cc:	b508      	push	{r3, lr}
   d68ce:	4b02      	ldr	r3, [pc, #8]	; (d68d8 <netdb_freeaddrinfo+0xc>)
   d68d0:	681b      	ldr	r3, [r3, #0]
   d68d2:	689b      	ldr	r3, [r3, #8]
   d68d4:	9301      	str	r3, [sp, #4]
   d68d6:	bd08      	pop	{r3, pc}
   d68d8:	00030268 	.word	0x00030268

000d68dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b02      	ldr	r3, [pc, #8]	; (d68e8 <netdb_getaddrinfo+0xc>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	68db      	ldr	r3, [r3, #12]
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	bd08      	pop	{r3, pc}
   d68e8:	00030268 	.word	0x00030268

000d68ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d68ec:	b508      	push	{r3, lr}
   d68ee:	4b02      	ldr	r3, [pc, #8]	; (d68f8 <HAL_Pin_Map+0xc>)
   d68f0:	681b      	ldr	r3, [r3, #0]
   d68f2:	681b      	ldr	r3, [r3, #0]
   d68f4:	9301      	str	r3, [sp, #4]
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	0003022c 	.word	0x0003022c

000d68fc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d68fc:	b508      	push	{r3, lr}
   d68fe:	4b02      	ldr	r3, [pc, #8]	; (d6908 <HAL_Pin_Mode+0xc>)
   d6900:	681b      	ldr	r3, [r3, #0]
   d6902:	689b      	ldr	r3, [r3, #8]
   d6904:	9301      	str	r3, [sp, #4]
   d6906:	bd08      	pop	{r3, pc}
   d6908:	0003022c 	.word	0x0003022c

000d690c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d690c:	b508      	push	{r3, lr}
   d690e:	4b02      	ldr	r3, [pc, #8]	; (d6918 <HAL_Get_Pin_Mode+0xc>)
   d6910:	681b      	ldr	r3, [r3, #0]
   d6912:	68db      	ldr	r3, [r3, #12]
   d6914:	9301      	str	r3, [sp, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	0003022c 	.word	0x0003022c

000d691c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <HAL_GPIO_Write+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	691b      	ldr	r3, [r3, #16]
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	0003022c 	.word	0x0003022c

000d692c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <HAL_SPI_Begin+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	681b      	ldr	r3, [r3, #0]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	00030230 	.word	0x00030230

000d693c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <HAL_SPI_Send_Receive_Data+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	695b      	ldr	r3, [r3, #20]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030230 	.word	0x00030230

000d694c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <HAL_SPI_Init+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	69db      	ldr	r3, [r3, #28]
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030230 	.word	0x00030230

000d695c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <HAL_SPI_Is_Enabled+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	6a1b      	ldr	r3, [r3, #32]
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	00030230 	.word	0x00030230

000d696c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <HAL_SPI_Info+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	00030230 	.word	0x00030230

000d697c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <HAL_SPI_DMA_Transfer+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	00030230 	.word	0x00030230

000d698c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	00030230 	.word	0x00030230

000d699c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <HAL_SPI_Set_Settings+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	00030230 	.word	0x00030230

000d69ac <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <HAL_SPI_Acquire+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	00030230 	.word	0x00030230

000d69bc <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <HAL_SPI_Release+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030230 	.word	0x00030230

000d69cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <HAL_RNG_GetRandomNumber+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	685b      	ldr	r3, [r3, #4]
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030218 	.word	0x00030218

000d69dc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <HAL_Delay_Microseconds+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	68db      	ldr	r3, [r3, #12]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030218 	.word	0x00030218

000d69ec <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	691b      	ldr	r3, [r3, #16]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030218 	.word	0x00030218

000d69fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	695b      	ldr	r3, [r3, #20]
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030218 	.word	0x00030218

000d6a0c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <HAL_RTC_Get_UnixTime+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	69db      	ldr	r3, [r3, #28]
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030218 	.word	0x00030218

000d6a1c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <HAL_RTC_Time_Is_Valid+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030218 	.word	0x00030218

000d6a2c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <hal_ble_stack_init+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	689b      	ldr	r3, [r3, #8]
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	00030278 	.word	0x00030278

000d6a3c <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <hal_ble_gap_start_scan+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	00030278 	.word	0x00030278

000d6a4c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b03      	ldr	r3, [pc, #12]	; (d6a5c <hal_ble_gap_stop_scan+0x10>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d6a56:	9301      	str	r3, [sp, #4]
   d6a58:	bd08      	pop	{r3, pc}
   d6a5a:	0000      	.short	0x0000
   d6a5c:	00030278 	.word	0x00030278

000d6a60 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b03      	ldr	r3, [pc, #12]	; (d6a70 <hal_ble_gap_disconnect+0x10>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6a6a:	9301      	str	r3, [sp, #4]
   d6a6c:	bd08      	pop	{r3, pc}
   d6a6e:	0000      	.short	0x0000
   d6a70:	00030278 	.word	0x00030278

000d6a74 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b03      	ldr	r3, [pc, #12]	; (d6a84 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d6a7e:	9301      	str	r3, [sp, #4]
   d6a80:	bd08      	pop	{r3, pc}
   d6a82:	0000      	.short	0x0000
   d6a84:	00030278 	.word	0x00030278

000d6a88 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b03      	ldr	r3, [pc, #12]	; (d6a98 <hal_ble_gatt_client_discover_all_services+0x10>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d6a92:	9301      	str	r3, [sp, #4]
   d6a94:	bd08      	pop	{r3, pc}
   d6a96:	0000      	.short	0x0000
   d6a98:	00030278 	.word	0x00030278

000d6a9c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b03      	ldr	r3, [pc, #12]	; (d6aac <hal_ble_gatt_client_discover_characteristics+0x10>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d6aa6:	9301      	str	r3, [sp, #4]
   d6aa8:	bd08      	pop	{r3, pc}
   d6aaa:	0000      	.short	0x0000
   d6aac:	00030278 	.word	0x00030278

000d6ab0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b03      	ldr	r3, [pc, #12]	; (d6ac0 <hal_ble_gatt_client_write_with_response+0x10>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d6aba:	9301      	str	r3, [sp, #4]
   d6abc:	bd08      	pop	{r3, pc}
   d6abe:	0000      	.short	0x0000
   d6ac0:	00030278 	.word	0x00030278

000d6ac4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6ac4:	b508      	push	{r3, lr}
   d6ac6:	4b03      	ldr	r3, [pc, #12]	; (d6ad4 <hal_ble_gatt_client_write_without_response+0x10>)
   d6ac8:	681b      	ldr	r3, [r3, #0]
   d6aca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d6ace:	9301      	str	r3, [sp, #4]
   d6ad0:	bd08      	pop	{r3, pc}
   d6ad2:	0000      	.short	0x0000
   d6ad4:	00030278 	.word	0x00030278

000d6ad8 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b03      	ldr	r3, [pc, #12]	; (d6ae8 <hal_ble_gatt_client_read+0x10>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d6ae2:	9301      	str	r3, [sp, #4]
   d6ae4:	bd08      	pop	{r3, pc}
   d6ae6:	0000      	.short	0x0000
   d6ae8:	00030278 	.word	0x00030278

000d6aec <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b03      	ldr	r3, [pc, #12]	; (d6afc <hal_ble_gap_connect+0x10>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d6af6:	9301      	str	r3, [sp, #4]
   d6af8:	bd08      	pop	{r3, pc}
   d6afa:	0000      	.short	0x0000
   d6afc:	00030278 	.word	0x00030278

000d6b00 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b03      	ldr	r3, [pc, #12]	; (d6b10 <hal_ble_gap_get_connection_info+0x10>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d6b0a:	9301      	str	r3, [sp, #4]
   d6b0c:	bd08      	pop	{r3, pc}
   d6b0e:	0000      	.short	0x0000
   d6b10:	00030278 	.word	0x00030278

000d6b14 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d6b14:	b508      	push	{r3, lr}
   d6b16:	4b03      	ldr	r3, [pc, #12]	; (d6b24 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d6b18:	681b      	ldr	r3, [r3, #0]
   d6b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d6b1e:	9301      	str	r3, [sp, #4]
   d6b20:	bd08      	pop	{r3, pc}
   d6b22:	0000      	.short	0x0000
   d6b24:	00030278 	.word	0x00030278

000d6b28 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b03      	ldr	r3, [pc, #12]	; (d6b38 <hal_ble_gatt_client_configure_cccd+0x10>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d6b32:	9301      	str	r3, [sp, #4]
   d6b34:	bd08      	pop	{r3, pc}
   d6b36:	0000      	.short	0x0000
   d6b38:	00030278 	.word	0x00030278

000d6b3c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b03      	ldr	r3, [pc, #12]	; (d6b4c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d6b46:	9301      	str	r3, [sp, #4]
   d6b48:	bd08      	pop	{r3, pc}
   d6b4a:	0000      	.short	0x0000
   d6b4c:	00030278 	.word	0x00030278

000d6b50 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b03      	ldr	r3, [pc, #12]	; (d6b60 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d6b5a:	9301      	str	r3, [sp, #4]
   d6b5c:	bd08      	pop	{r3, pc}
   d6b5e:	0000      	.short	0x0000
   d6b60:	00030278 	.word	0x00030278

000d6b64 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6b64:	b508      	push	{r3, lr}
   d6b66:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <os_thread_is_current+0xc>)
   d6b68:	681b      	ldr	r3, [r3, #0]
   d6b6a:	689b      	ldr	r3, [r3, #8]
   d6b6c:	9301      	str	r3, [sp, #4]
   d6b6e:	bd08      	pop	{r3, pc}
   d6b70:	00030248 	.word	0x00030248

000d6b74 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6b74:	b508      	push	{r3, lr}
   d6b76:	4b02      	ldr	r3, [pc, #8]	; (d6b80 <os_thread_join+0xc>)
   d6b78:	681b      	ldr	r3, [r3, #0]
   d6b7a:	691b      	ldr	r3, [r3, #16]
   d6b7c:	9301      	str	r3, [sp, #4]
   d6b7e:	bd08      	pop	{r3, pc}
   d6b80:	00030248 	.word	0x00030248

000d6b84 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6b84:	b508      	push	{r3, lr}
   d6b86:	4b02      	ldr	r3, [pc, #8]	; (d6b90 <os_thread_cleanup+0xc>)
   d6b88:	681b      	ldr	r3, [r3, #0]
   d6b8a:	695b      	ldr	r3, [r3, #20]
   d6b8c:	9301      	str	r3, [sp, #4]
   d6b8e:	bd08      	pop	{r3, pc}
   d6b90:	00030248 	.word	0x00030248

000d6b94 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6b94:	b508      	push	{r3, lr}
   d6b96:	4b02      	ldr	r3, [pc, #8]	; (d6ba0 <os_mutex_recursive_create+0xc>)
   d6b98:	681b      	ldr	r3, [r3, #0]
   d6b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b9c:	9301      	str	r3, [sp, #4]
   d6b9e:	bd08      	pop	{r3, pc}
   d6ba0:	00030248 	.word	0x00030248

000d6ba4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6ba4:	b508      	push	{r3, lr}
   d6ba6:	4b02      	ldr	r3, [pc, #8]	; (d6bb0 <os_mutex_recursive_destroy+0xc>)
   d6ba8:	681b      	ldr	r3, [r3, #0]
   d6baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6bac:	9301      	str	r3, [sp, #4]
   d6bae:	bd08      	pop	{r3, pc}
   d6bb0:	00030248 	.word	0x00030248

000d6bb4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6bb4:	b508      	push	{r3, lr}
   d6bb6:	4b02      	ldr	r3, [pc, #8]	; (d6bc0 <os_mutex_recursive_lock+0xc>)
   d6bb8:	681b      	ldr	r3, [r3, #0]
   d6bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6bbc:	9301      	str	r3, [sp, #4]
   d6bbe:	bd08      	pop	{r3, pc}
   d6bc0:	00030248 	.word	0x00030248

000d6bc4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6bc4:	b508      	push	{r3, lr}
   d6bc6:	4b02      	ldr	r3, [pc, #8]	; (d6bd0 <os_mutex_recursive_unlock+0xc>)
   d6bc8:	681b      	ldr	r3, [r3, #0]
   d6bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6bcc:	9301      	str	r3, [sp, #4]
   d6bce:	bd08      	pop	{r3, pc}
   d6bd0:	00030248 	.word	0x00030248

000d6bd4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6bd4:	b508      	push	{r3, lr}
   d6bd6:	4b02      	ldr	r3, [pc, #8]	; (d6be0 <inet_inet_ntop+0xc>)
   d6bd8:	681b      	ldr	r3, [r3, #0]
   d6bda:	695b      	ldr	r3, [r3, #20]
   d6bdc:	9301      	str	r3, [sp, #4]
   d6bde:	bd08      	pop	{r3, pc}
   d6be0:	00030264 	.word	0x00030264

000d6be4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6be4:	b508      	push	{r3, lr}
   d6be6:	4b02      	ldr	r3, [pc, #8]	; (d6bf0 <HAL_USART_Init+0xc>)
   d6be8:	681b      	ldr	r3, [r3, #0]
   d6bea:	681b      	ldr	r3, [r3, #0]
   d6bec:	9301      	str	r3, [sp, #4]
   d6bee:	bd08      	pop	{r3, pc}
   d6bf0:	0003023c 	.word	0x0003023c

000d6bf4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6bf4:	b508      	push	{r3, lr}
   d6bf6:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <HAL_USART_Write_Data+0xc>)
   d6bf8:	681b      	ldr	r3, [r3, #0]
   d6bfa:	68db      	ldr	r3, [r3, #12]
   d6bfc:	9301      	str	r3, [sp, #4]
   d6bfe:	bd08      	pop	{r3, pc}
   d6c00:	0003023c 	.word	0x0003023c

000d6c04 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6c04:	b508      	push	{r3, lr}
   d6c06:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <HAL_USART_Available_Data+0xc>)
   d6c08:	681b      	ldr	r3, [r3, #0]
   d6c0a:	691b      	ldr	r3, [r3, #16]
   d6c0c:	9301      	str	r3, [sp, #4]
   d6c0e:	bd08      	pop	{r3, pc}
   d6c10:	0003023c 	.word	0x0003023c

000d6c14 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <HAL_USART_Read_Data+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	695b      	ldr	r3, [r3, #20]
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	0003023c 	.word	0x0003023c

000d6c24 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <HAL_USART_Peek_Data+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	699b      	ldr	r3, [r3, #24]
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	0003023c 	.word	0x0003023c

000d6c34 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6c34:	b508      	push	{r3, lr}
   d6c36:	4b02      	ldr	r3, [pc, #8]	; (d6c40 <HAL_USART_Flush_Data+0xc>)
   d6c38:	681b      	ldr	r3, [r3, #0]
   d6c3a:	69db      	ldr	r3, [r3, #28]
   d6c3c:	9301      	str	r3, [sp, #4]
   d6c3e:	bd08      	pop	{r3, pc}
   d6c40:	0003023c 	.word	0x0003023c

000d6c44 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6c44:	b508      	push	{r3, lr}
   d6c46:	4b02      	ldr	r3, [pc, #8]	; (d6c50 <HAL_USART_Is_Enabled+0xc>)
   d6c48:	681b      	ldr	r3, [r3, #0]
   d6c4a:	6a1b      	ldr	r3, [r3, #32]
   d6c4c:	9301      	str	r3, [sp, #4]
   d6c4e:	bd08      	pop	{r3, pc}
   d6c50:	0003023c 	.word	0x0003023c

000d6c54 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <HAL_USART_Available_Data_For_Write+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	0003023c 	.word	0x0003023c

000d6c64 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <HAL_I2C_Write_Data+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	6a1b      	ldr	r3, [r3, #32]
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	00030228 	.word	0x00030228

000d6c74 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <HAL_I2C_Available_Data+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	00030228 	.word	0x00030228

000d6c84 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b02      	ldr	r3, [pc, #8]	; (d6c90 <HAL_I2C_Read_Data+0xc>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c8c:	9301      	str	r3, [sp, #4]
   d6c8e:	bd08      	pop	{r3, pc}
   d6c90:	00030228 	.word	0x00030228

000d6c94 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6c94:	b508      	push	{r3, lr}
   d6c96:	4b02      	ldr	r3, [pc, #8]	; (d6ca0 <HAL_I2C_Peek_Data+0xc>)
   d6c98:	681b      	ldr	r3, [r3, #0]
   d6c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c9c:	9301      	str	r3, [sp, #4]
   d6c9e:	bd08      	pop	{r3, pc}
   d6ca0:	00030228 	.word	0x00030228

000d6ca4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b02      	ldr	r3, [pc, #8]	; (d6cb0 <HAL_I2C_Flush_Data+0xc>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6cac:	9301      	str	r3, [sp, #4]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	00030228 	.word	0x00030228

000d6cb4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6cb4:	b508      	push	{r3, lr}
   d6cb6:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <HAL_I2C_Is_Enabled+0xc>)
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6cbc:	9301      	str	r3, [sp, #4]
   d6cbe:	bd08      	pop	{r3, pc}
   d6cc0:	00030228 	.word	0x00030228

000d6cc4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6cc4:	b508      	push	{r3, lr}
   d6cc6:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <HAL_I2C_Init+0xc>)
   d6cc8:	681b      	ldr	r3, [r3, #0]
   d6cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6ccc:	9301      	str	r3, [sp, #4]
   d6cce:	bd08      	pop	{r3, pc}
   d6cd0:	00030228 	.word	0x00030228

000d6cd4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6cd4:	b508      	push	{r3, lr}
   d6cd6:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <HAL_USB_USART_Init+0xc>)
   d6cd8:	681b      	ldr	r3, [r3, #0]
   d6cda:	681b      	ldr	r3, [r3, #0]
   d6cdc:	9301      	str	r3, [sp, #4]
   d6cde:	bd08      	pop	{r3, pc}
   d6ce0:	0003024c 	.word	0x0003024c

000d6ce4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6ce4:	b508      	push	{r3, lr}
   d6ce6:	4b02      	ldr	r3, [pc, #8]	; (d6cf0 <HAL_USB_USART_Begin+0xc>)
   d6ce8:	681b      	ldr	r3, [r3, #0]
   d6cea:	685b      	ldr	r3, [r3, #4]
   d6cec:	9301      	str	r3, [sp, #4]
   d6cee:	bd08      	pop	{r3, pc}
   d6cf0:	0003024c 	.word	0x0003024c

000d6cf4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6cf4:	b508      	push	{r3, lr}
   d6cf6:	4b02      	ldr	r3, [pc, #8]	; (d6d00 <HAL_USB_USART_Available_Data+0xc>)
   d6cf8:	681b      	ldr	r3, [r3, #0]
   d6cfa:	691b      	ldr	r3, [r3, #16]
   d6cfc:	9301      	str	r3, [sp, #4]
   d6cfe:	bd08      	pop	{r3, pc}
   d6d00:	0003024c 	.word	0x0003024c

000d6d04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d04:	b508      	push	{r3, lr}
   d6d06:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d08:	681b      	ldr	r3, [r3, #0]
   d6d0a:	695b      	ldr	r3, [r3, #20]
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	0003024c 	.word	0x0003024c

000d6d14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d14:	b508      	push	{r3, lr}
   d6d16:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <HAL_USB_USART_Receive_Data+0xc>)
   d6d18:	681b      	ldr	r3, [r3, #0]
   d6d1a:	699b      	ldr	r3, [r3, #24]
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	bd08      	pop	{r3, pc}
   d6d20:	0003024c 	.word	0x0003024c

000d6d24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d24:	b508      	push	{r3, lr}
   d6d26:	4b02      	ldr	r3, [pc, #8]	; (d6d30 <HAL_USB_USART_Send_Data+0xc>)
   d6d28:	681b      	ldr	r3, [r3, #0]
   d6d2a:	69db      	ldr	r3, [r3, #28]
   d6d2c:	9301      	str	r3, [sp, #4]
   d6d2e:	bd08      	pop	{r3, pc}
   d6d30:	0003024c 	.word	0x0003024c

000d6d34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d34:	b508      	push	{r3, lr}
   d6d36:	4b02      	ldr	r3, [pc, #8]	; (d6d40 <HAL_USB_USART_Flush_Data+0xc>)
   d6d38:	681b      	ldr	r3, [r3, #0]
   d6d3a:	6a1b      	ldr	r3, [r3, #32]
   d6d3c:	9301      	str	r3, [sp, #4]
   d6d3e:	bd08      	pop	{r3, pc}
   d6d40:	0003024c 	.word	0x0003024c

000d6d44 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d44:	b508      	push	{r3, lr}
   d6d46:	4b02      	ldr	r3, [pc, #8]	; (d6d50 <panic_+0xc>)
   d6d48:	681b      	ldr	r3, [r3, #0]
   d6d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d4c:	9301      	str	r3, [sp, #4]
   d6d4e:	bd08      	pop	{r3, pc}
   d6d50:	00030260 	.word	0x00030260

000d6d54 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d54:	b508      	push	{r3, lr}
   d6d56:	4b02      	ldr	r3, [pc, #8]	; (d6d60 <log_message+0xc>)
   d6d58:	681b      	ldr	r3, [r3, #0]
   d6d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d5c:	9301      	str	r3, [sp, #4]
   d6d5e:	bd08      	pop	{r3, pc}
   d6d60:	00030260 	.word	0x00030260

000d6d64 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6d64:	b508      	push	{r3, lr}
   d6d66:	4b02      	ldr	r3, [pc, #8]	; (d6d70 <system_mode+0xc>)
   d6d68:	681b      	ldr	r3, [r3, #0]
   d6d6a:	681b      	ldr	r3, [r3, #0]
   d6d6c:	9301      	str	r3, [sp, #4]
   d6d6e:	bd08      	pop	{r3, pc}
   d6d70:	00030220 	.word	0x00030220

000d6d74 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6d74:	b508      	push	{r3, lr}
   d6d76:	4b02      	ldr	r3, [pc, #8]	; (d6d80 <set_system_mode+0xc>)
   d6d78:	681b      	ldr	r3, [r3, #0]
   d6d7a:	685b      	ldr	r3, [r3, #4]
   d6d7c:	9301      	str	r3, [sp, #4]
   d6d7e:	bd08      	pop	{r3, pc}
   d6d80:	00030220 	.word	0x00030220

000d6d84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6d84:	b508      	push	{r3, lr}
   d6d86:	4b02      	ldr	r3, [pc, #8]	; (d6d90 <system_delay_ms+0xc>)
   d6d88:	681b      	ldr	r3, [r3, #0]
   d6d8a:	695b      	ldr	r3, [r3, #20]
   d6d8c:	9301      	str	r3, [sp, #4]
   d6d8e:	bd08      	pop	{r3, pc}
   d6d90:	00030220 	.word	0x00030220

000d6d94 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6d94:	b508      	push	{r3, lr}
   d6d96:	4b02      	ldr	r3, [pc, #8]	; (d6da0 <application_thread_current+0xc>)
   d6d98:	681b      	ldr	r3, [r3, #0]
   d6d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6d9c:	9301      	str	r3, [sp, #4]
   d6d9e:	bd08      	pop	{r3, pc}
   d6da0:	00030220 	.word	0x00030220

000d6da4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6da4:	b508      	push	{r3, lr}
   d6da6:	4b02      	ldr	r3, [pc, #8]	; (d6db0 <application_thread_invoke+0xc>)
   d6da8:	681b      	ldr	r3, [r3, #0]
   d6daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6dac:	9301      	str	r3, [sp, #4]
   d6dae:	bd08      	pop	{r3, pc}
   d6db0:	00030220 	.word	0x00030220

000d6db4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6db4:	b508      	push	{r3, lr}
   d6db6:	4b02      	ldr	r3, [pc, #8]	; (d6dc0 <system_thread_get_state+0xc>)
   d6db8:	681b      	ldr	r3, [r3, #0]
   d6dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6dbc:	9301      	str	r3, [sp, #4]
   d6dbe:	bd08      	pop	{r3, pc}
   d6dc0:	00030220 	.word	0x00030220

000d6dc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6dc4:	b508      	push	{r3, lr}
   d6dc6:	4b03      	ldr	r3, [pc, #12]	; (d6dd4 <system_ctrl_set_app_request_handler+0x10>)
   d6dc8:	681b      	ldr	r3, [r3, #0]
   d6dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6dce:	9301      	str	r3, [sp, #4]
   d6dd0:	bd08      	pop	{r3, pc}
   d6dd2:	0000      	.short	0x0000
   d6dd4:	00030220 	.word	0x00030220

000d6dd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b03      	ldr	r3, [pc, #12]	; (d6de8 <system_ctrl_set_result+0x10>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6de2:	9301      	str	r3, [sp, #4]
   d6de4:	bd08      	pop	{r3, pc}
   d6de6:	0000      	.short	0x0000
   d6de8:	00030220 	.word	0x00030220

000d6dec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dec:	b508      	push	{r3, lr}
   d6dee:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <network_connect+0xc>)
   d6df0:	681b      	ldr	r3, [r3, #0]
   d6df2:	685b      	ldr	r3, [r3, #4]
   d6df4:	9301      	str	r3, [sp, #4]
   d6df6:	bd08      	pop	{r3, pc}
   d6df8:	00030240 	.word	0x00030240

000d6dfc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <network_connecting+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	689b      	ldr	r3, [r3, #8]
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030240 	.word	0x00030240

000d6e0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <network_disconnect+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	68db      	ldr	r3, [r3, #12]
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030240 	.word	0x00030240

000d6e1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <network_ready+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	691b      	ldr	r3, [r3, #16]
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030240 	.word	0x00030240

000d6e2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <network_on+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	695b      	ldr	r3, [r3, #20]
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030240 	.word	0x00030240

000d6e3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <network_off+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	699b      	ldr	r3, [r3, #24]
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030240 	.word	0x00030240

000d6e4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <network_listen+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	69db      	ldr	r3, [r3, #28]
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030240 	.word	0x00030240

000d6e5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <network_listening+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	6a1b      	ldr	r3, [r3, #32]
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030240 	.word	0x00030240

000d6e6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <network_set_listen_timeout+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030240 	.word	0x00030240

000d6e7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <network_get_listen_timeout+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	00030240 	.word	0x00030240

000d6e8c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <spark_process+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	689b      	ldr	r3, [r3, #8]
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	00030244 	.word	0x00030244

000d6e9c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <spark_cloud_flag_connected+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	695b      	ldr	r3, [r3, #20]
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	00030244 	.word	0x00030244

000d6eac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <spark_send_event+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	6a1b      	ldr	r3, [r3, #32]
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	00030244 	.word	0x00030244

000d6ebc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <spark_subscribe+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	00030244 	.word	0x00030244

000d6ecc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <spark_sync_time_pending+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	00030244 	.word	0x00030244

000d6edc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	00030244 	.word	0x00030244

000d6eec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <malloc+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	681b      	ldr	r3, [r3, #0]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	0003021c 	.word	0x0003021c

000d6efc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <free+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	685b      	ldr	r3, [r3, #4]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	0003021c 	.word	0x0003021c

000d6f0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <realloc+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	689b      	ldr	r3, [r3, #8]
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	0003021c 	.word	0x0003021c

000d6f1c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <sprintf+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	68db      	ldr	r3, [r3, #12]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	0003021c 	.word	0x0003021c

000d6f2c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <sscanf+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	695b      	ldr	r3, [r3, #20]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	0003021c 	.word	0x0003021c

000d6f3c <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <siscanf+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	699b      	ldr	r3, [r3, #24]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	0003021c 	.word	0x0003021c

000d6f4c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <snprintf+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	69db      	ldr	r3, [r3, #28]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	0003021c 	.word	0x0003021c

000d6f5c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <vsnprintf+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	0003021c 	.word	0x0003021c

000d6f6c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <abort+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	0003021c 	.word	0x0003021c

000d6f7c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <_malloc_r+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	0003021c 	.word	0x0003021c

000d6f8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f8c:	2200      	movs	r2, #0
   d6f8e:	4611      	mov	r1, r2
   d6f90:	6840      	ldr	r0, [r0, #4]
   d6f92:	f7ff bf63 	b.w	d6e5c <network_listening>

000d6f96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f96:	2200      	movs	r2, #0
   d6f98:	4611      	mov	r1, r2
   d6f9a:	6840      	ldr	r0, [r0, #4]
   d6f9c:	f7ff bf6e 	b.w	d6e7c <network_get_listen_timeout>

000d6fa0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6fa0:	2200      	movs	r2, #0
   d6fa2:	6840      	ldr	r0, [r0, #4]
   d6fa4:	f7ff bf62 	b.w	d6e6c <network_set_listen_timeout>

000d6fa8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6fa8:	2200      	movs	r2, #0
   d6faa:	f081 0101 	eor.w	r1, r1, #1
   d6fae:	6840      	ldr	r0, [r0, #4]
   d6fb0:	f7ff bf4c 	b.w	d6e4c <network_listen>

000d6fb4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6fb4:	2300      	movs	r3, #0
   d6fb6:	461a      	mov	r2, r3
   d6fb8:	4619      	mov	r1, r3
   d6fba:	6840      	ldr	r0, [r0, #4]
   d6fbc:	f7ff bf3e 	b.w	d6e3c <network_off>

000d6fc0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6fc0:	2300      	movs	r3, #0
   d6fc2:	461a      	mov	r2, r3
   d6fc4:	4619      	mov	r1, r3
   d6fc6:	6840      	ldr	r0, [r0, #4]
   d6fc8:	f7ff bf30 	b.w	d6e2c <network_on>

000d6fcc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6fcc:	2200      	movs	r2, #0
   d6fce:	4611      	mov	r1, r2
   d6fd0:	6840      	ldr	r0, [r0, #4]
   d6fd2:	f7ff bf23 	b.w	d6e1c <network_ready>

000d6fd6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6fd6:	2200      	movs	r2, #0
   d6fd8:	4611      	mov	r1, r2
   d6fda:	6840      	ldr	r0, [r0, #4]
   d6fdc:	f7ff bf0e 	b.w	d6dfc <network_connecting>

000d6fe0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6fe0:	2200      	movs	r2, #0
   d6fe2:	2102      	movs	r1, #2
   d6fe4:	6840      	ldr	r0, [r0, #4]
   d6fe6:	f7ff bf11 	b.w	d6e0c <network_disconnect>

000d6fea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6fea:	2300      	movs	r3, #0
   d6fec:	461a      	mov	r2, r3
   d6fee:	6840      	ldr	r0, [r0, #4]
   d6ff0:	f7ff befc 	b.w	d6dec <network_connect>

000d6ff4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6ff4:	4b02      	ldr	r3, [pc, #8]	; (d7000 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6ff6:	2203      	movs	r2, #3
   d6ff8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6ffa:	4a02      	ldr	r2, [pc, #8]	; (d7004 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6ffc:	601a      	str	r2, [r3, #0]
   d6ffe:	4770      	bx	lr
   d7000:	2003e348 	.word	0x2003e348
   d7004:	000dd5ac 	.word	0x000dd5ac

000d7008 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7008:	2100      	movs	r1, #0
   d700a:	f7ff bccf 	b.w	d69ac <HAL_SPI_Acquire>

000d700e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d700e:	2100      	movs	r1, #0
   d7010:	f7ff bcd4 	b.w	d69bc <HAL_SPI_Release>

000d7014 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7014:	b510      	push	{r4, lr}
   d7016:	4604      	mov	r4, r0
{
    _spi = spi;
   d7018:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d701a:	4608      	mov	r0, r1
   d701c:	f7ff fc96 	bl	d694c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7020:	2300      	movs	r3, #0
   d7022:	6063      	str	r3, [r4, #4]
}
   d7024:	4620      	mov	r0, r4
   d7026:	bd10      	pop	{r4, pc}

000d7028 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7028:	b510      	push	{r4, lr}
   d702a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d702c:	7800      	ldrb	r0, [r0, #0]
   d702e:	f7ff ffeb 	bl	d7008 <_ZN8SPIClass4lockEv.isra.0>
   d7032:	b948      	cbnz	r0, d7048 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7034:	7820      	ldrb	r0, [r4, #0]
   d7036:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d703a:	f7ff fc77 	bl	d692c <HAL_SPI_Begin>
        unlock();
   d703e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7044:	f7ff bfe3 	b.w	d700e <_ZN8SPIClass6unlockEv.isra.1>
   d7048:	bd10      	pop	{r4, pc}

000d704a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d704a:	7800      	ldrb	r0, [r0, #0]
   d704c:	f7ff bfdf 	b.w	d700e <_ZN8SPIClass6unlockEv.isra.1>

000d7050 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7050:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d7052:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7054:	6018      	str	r0, [r3, #0]
   d7056:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7058:	6818      	ldr	r0, [r3, #0]
   d705a:	4288      	cmp	r0, r1
   d705c:	b2e5      	uxtb	r5, r4
   d705e:	d906      	bls.n	d706e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7060:	3401      	adds	r4, #1
   d7062:	2c08      	cmp	r4, #8
   d7064:	d002      	beq.n	d706c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7066:	0840      	lsrs	r0, r0, #1
   d7068:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d706a:	e7f5      	b.n	d7058 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d706c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7070:	5d5b      	ldrb	r3, [r3, r5]
   d7072:	7013      	strb	r3, [r2, #0]
   d7074:	bd30      	pop	{r4, r5, pc}
   d7076:	bf00      	nop
   d7078:	000dd5d8 	.word	0x000dd5d8

000d707c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d707c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7080:	4607      	mov	r7, r0
   d7082:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7084:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7086:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d7088:	f7ff ffbe 	bl	d7008 <_ZN8SPIClass4lockEv.isra.0>
   d708c:	2800      	cmp	r0, #0
   d708e:	db62      	blt.n	d7156 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7090:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7092:	2214      	movs	r2, #20
   d7094:	2100      	movs	r1, #0
   d7096:	a809      	add	r0, sp, #36	; 0x24
   d7098:	f003 fd8d 	bl	dabb6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d709c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d709e:	4620      	mov	r0, r4
   d70a0:	2200      	movs	r2, #0
   d70a2:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d70a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d70a8:	f7ff fc60 	bl	d696c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d70ac:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d70b0:	b154      	cbz	r4, d70c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d70b2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d70b6:	b935      	cbnz	r5, d70c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d70b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d70bc:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d70c0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d70c4:	e003      	b.n	d70ce <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d70c6:	2400      	movs	r4, #0
   d70c8:	46a1      	mov	r9, r4
   d70ca:	46a0      	mov	r8, r4
   d70cc:	2501      	movs	r5, #1
   d70ce:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d70d0:	b105      	cbz	r5, d70d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d70d2:	b9bb      	cbnz	r3, d7104 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d70d4:	429d      	cmp	r5, r3
   d70d6:	d10b      	bne.n	d70f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d70d8:	68b2      	ldr	r2, [r6, #8]
   d70da:	4542      	cmp	r2, r8
   d70dc:	d108      	bne.n	d70f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d70de:	f88d 9020 	strb.w	r9, [sp, #32]
   d70e2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d70e6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d70ea:	89b2      	ldrh	r2, [r6, #12]
   d70ec:	4291      	cmp	r1, r2
   d70ee:	d009      	beq.n	d7104 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d70f0:	b153      	cbz	r3, d7108 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d70f2:	2400      	movs	r4, #0
   d70f4:	7838      	ldrb	r0, [r7, #0]
   d70f6:	9401      	str	r4, [sp, #4]
   d70f8:	9400      	str	r4, [sp, #0]
   d70fa:	4623      	mov	r3, r4
   d70fc:	4622      	mov	r2, r4
   d70fe:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7100:	f7ff fc4c 	bl	d699c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7104:	2000      	movs	r0, #0
   d7106:	e026      	b.n	d7156 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7108:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d710c:	68b1      	ldr	r1, [r6, #8]
   d710e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7110:	ab04      	add	r3, sp, #16
   d7112:	f10d 020f 	add.w	r2, sp, #15
   d7116:	f7ff ff9b 	bl	d7050 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d711a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d711c:	b105      	cbz	r5, d7120 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d711e:	b9b1      	cbnz	r1, d714e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7120:	42a9      	cmp	r1, r5
   d7122:	d008      	beq.n	d7136 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7124:	2400      	movs	r4, #0
   d7126:	7838      	ldrb	r0, [r7, #0]
   d7128:	9401      	str	r4, [sp, #4]
   d712a:	7b74      	ldrb	r4, [r6, #13]
   d712c:	7b33      	ldrb	r3, [r6, #12]
   d712e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7132:	9400      	str	r4, [sp, #0]
   d7134:	e7e4      	b.n	d7100 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d7136:	68b3      	ldr	r3, [r6, #8]
   d7138:	4543      	cmp	r3, r8
   d713a:	d3f3      	bcc.n	d7124 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d713c:	f88d 9020 	strb.w	r9, [sp, #32]
   d7140:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7144:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7148:	89b3      	ldrh	r3, [r6, #12]
   d714a:	429a      	cmp	r2, r3
   d714c:	d1ea      	bne.n	d7124 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d714e:	9b04      	ldr	r3, [sp, #16]
   d7150:	4543      	cmp	r3, r8
   d7152:	d1e7      	bne.n	d7124 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d7154:	e7d6      	b.n	d7104 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d7156:	b00f      	add	sp, #60	; 0x3c
   d7158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d715c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d715c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d715e:	7800      	ldrb	r0, [r0, #0]
   d7160:	f7ff fbec 	bl	d693c <HAL_SPI_Send_Receive_Data>
}
   d7164:	b2c0      	uxtb	r0, r0
   d7166:	bd08      	pop	{r3, pc}

000d7168 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7168:	b530      	push	{r4, r5, lr}
   d716a:	b087      	sub	sp, #28
   d716c:	4604      	mov	r4, r0
   d716e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7170:	7800      	ldrb	r0, [r0, #0]
   d7172:	9500      	str	r5, [sp, #0]
   d7174:	f7ff fc02 	bl	d697c <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7178:	b93d      	cbnz	r5, d718a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d717a:	a902      	add	r1, sp, #8
   d717c:	7820      	ldrb	r0, [r4, #0]
   d717e:	f7ff fc05 	bl	d698c <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d7182:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7186:	07db      	lsls	r3, r3, #31
   d7188:	d4f7      	bmi.n	d717a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d718a:	b007      	add	sp, #28
   d718c:	bd30      	pop	{r4, r5, pc}

000d718e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d718e:	7800      	ldrb	r0, [r0, #0]
   d7190:	f7ff bbe4 	b.w	d695c <HAL_SPI_Is_Enabled>

000d7194 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7194:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7196:	4c09      	ldr	r4, [pc, #36]	; (d71bc <_GLOBAL__sub_I_System+0x28>)
   d7198:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d719a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d719e:	6020      	str	r0, [r4, #0]
   d71a0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d71a2:	71a0      	strb	r0, [r4, #6]
   d71a4:	8120      	strh	r0, [r4, #8]
   d71a6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d71a8:	f7ff fde4 	bl	d6d74 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d71ac:	4620      	mov	r0, r4
   d71ae:	4a04      	ldr	r2, [pc, #16]	; (d71c0 <_GLOBAL__sub_I_System+0x2c>)
   d71b0:	4904      	ldr	r1, [pc, #16]	; (d71c4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d71b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d71b6:	f002 bd61 	b.w	d9c7c <__aeabi_atexit>
   d71ba:	bf00      	nop
   d71bc:	2003e350 	.word	0x2003e350
   d71c0:	2003d684 	.word	0x2003d684
   d71c4:	000d4185 	.word	0x000d4185

000d71c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d71c8:	b510      	push	{r4, lr}
   d71ca:	4604      	mov	r4, r0
{
	free(buffer);
   d71cc:	6800      	ldr	r0, [r0, #0]
   d71ce:	f7ff fe95 	bl	d6efc <free>
}
   d71d2:	4620      	mov	r0, r4
   d71d4:	bd10      	pop	{r4, pc}

000d71d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d71d6:	b510      	push	{r4, lr}
   d71d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d71da:	6800      	ldr	r0, [r0, #0]
   d71dc:	b108      	cbz	r0, d71e2 <_ZN6String10invalidateEv+0xc>
   d71de:	f7ff fe8d 	bl	d6efc <free>
	buffer = NULL;
   d71e2:	2300      	movs	r3, #0
   d71e4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d71e6:	60a3      	str	r3, [r4, #8]
   d71e8:	6063      	str	r3, [r4, #4]
   d71ea:	bd10      	pop	{r4, pc}

000d71ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d71ec:	b538      	push	{r3, r4, r5, lr}
   d71ee:	4604      	mov	r4, r0
   d71f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d71f2:	6800      	ldr	r0, [r0, #0]
   d71f4:	3101      	adds	r1, #1
   d71f6:	f7ff fe89 	bl	d6f0c <realloc>
	if (newbuffer) {
   d71fa:	b110      	cbz	r0, d7202 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d71fc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7200:	2001      	movs	r0, #1
	}
	return 0;
}
   d7202:	bd38      	pop	{r3, r4, r5, pc}

000d7204 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7204:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7206:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7208:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d720a:	b113      	cbz	r3, d7212 <_ZN6String7reserveEj+0xe>
   d720c:	6843      	ldr	r3, [r0, #4]
   d720e:	428b      	cmp	r3, r1
   d7210:	d207      	bcs.n	d7222 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7212:	4620      	mov	r0, r4
   d7214:	f7ff ffea 	bl	d71ec <_ZN6String12changeBufferEj>
   d7218:	b120      	cbz	r0, d7224 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d721a:	68a3      	ldr	r3, [r4, #8]
   d721c:	b90b      	cbnz	r3, d7222 <_ZN6String7reserveEj+0x1e>
   d721e:	6822      	ldr	r2, [r4, #0]
   d7220:	7013      	strb	r3, [r2, #0]
   d7222:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7224:	bd10      	pop	{r4, pc}

000d7226 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7226:	b570      	push	{r4, r5, r6, lr}
   d7228:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d722a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d722c:	4604      	mov	r4, r0
   d722e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7230:	f7ff ffe8 	bl	d7204 <_ZN6String7reserveEj>
   d7234:	b918      	cbnz	r0, d723e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7236:	4620      	mov	r0, r4
   d7238:	f7ff ffcd 	bl	d71d6 <_ZN6String10invalidateEv>
		return *this;
   d723c:	e009      	b.n	d7252 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d723e:	462a      	mov	r2, r5
   d7240:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7242:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7244:	6820      	ldr	r0, [r4, #0]
   d7246:	f003 fc90 	bl	dab6a <memcpy>
	buffer[len] = 0;
   d724a:	6822      	ldr	r2, [r4, #0]
   d724c:	68a3      	ldr	r3, [r4, #8]
   d724e:	2100      	movs	r1, #0
   d7250:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7252:	4620      	mov	r0, r4
   d7254:	bd70      	pop	{r4, r5, r6, pc}

000d7256 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7256:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7258:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d725a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d725c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d725e:	6043      	str	r3, [r0, #4]
	len = 0;
   d7260:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7262:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7264:	460d      	mov	r5, r1
   d7266:	b139      	cbz	r1, d7278 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7268:	4608      	mov	r0, r1
   d726a:	f003 fd12 	bl	dac92 <strlen>
   d726e:	4629      	mov	r1, r5
   d7270:	4602      	mov	r2, r0
   d7272:	4620      	mov	r0, r4
   d7274:	f7ff ffd7 	bl	d7226 <_ZN6String4copyEPKcj>
}
   d7278:	4620      	mov	r0, r4
   d727a:	bd38      	pop	{r3, r4, r5, pc}

000d727c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d727c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d727e:	b510      	push	{r4, lr}
   d7280:	460b      	mov	r3, r1
   d7282:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7284:	d007      	beq.n	d7296 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7286:	6809      	ldr	r1, [r1, #0]
   d7288:	b119      	cbz	r1, d7292 <_ZN6StringaSERKS_+0x16>
   d728a:	689a      	ldr	r2, [r3, #8]
   d728c:	f7ff ffcb 	bl	d7226 <_ZN6String4copyEPKcj>
   d7290:	e001      	b.n	d7296 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7292:	f7ff ffa0 	bl	d71d6 <_ZN6String10invalidateEv>

	return *this;
}
   d7296:	4620      	mov	r0, r4
   d7298:	bd10      	pop	{r4, pc}

000d729a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d729a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d729c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d729e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d72a0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d72a2:	6043      	str	r3, [r0, #4]
	len = 0;
   d72a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d72a6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d72a8:	f7ff ffe8 	bl	d727c <_ZN6StringaSERKS_>
}
   d72ac:	4620      	mov	r0, r4
   d72ae:	bd10      	pop	{r4, pc}

000d72b0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d72b0:	b538      	push	{r3, r4, r5, lr}
   d72b2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d72b4:	460c      	mov	r4, r1
   d72b6:	b141      	cbz	r1, d72ca <_ZN6StringaSEPKc+0x1a>
   d72b8:	4608      	mov	r0, r1
   d72ba:	f003 fcea 	bl	dac92 <strlen>
   d72be:	4621      	mov	r1, r4
   d72c0:	4602      	mov	r2, r0
   d72c2:	4628      	mov	r0, r5
   d72c4:	f7ff ffaf 	bl	d7226 <_ZN6String4copyEPKcj>
   d72c8:	e001      	b.n	d72ce <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d72ca:	f7ff ff84 	bl	d71d6 <_ZN6String10invalidateEv>

	return *this;
}
   d72ce:	4628      	mov	r0, r5
   d72d0:	bd38      	pop	{r3, r4, r5, pc}

000d72d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d72d2:	b570      	push	{r4, r5, r6, lr}
   d72d4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d72d6:	460e      	mov	r6, r1
   d72d8:	b909      	cbnz	r1, d72de <_ZN6String6concatEPKcj+0xc>
   d72da:	2000      	movs	r0, #0
   d72dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d72de:	b16a      	cbz	r2, d72fc <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d72e0:	6883      	ldr	r3, [r0, #8]
   d72e2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d72e4:	4629      	mov	r1, r5
   d72e6:	f7ff ff8d 	bl	d7204 <_ZN6String7reserveEj>
   d72ea:	2800      	cmp	r0, #0
   d72ec:	d0f5      	beq.n	d72da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d72ee:	6820      	ldr	r0, [r4, #0]
   d72f0:	68a3      	ldr	r3, [r4, #8]
   d72f2:	4631      	mov	r1, r6
   d72f4:	4418      	add	r0, r3
   d72f6:	f003 fca8 	bl	dac4a <strcpy>
	len = newlen;
   d72fa:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d72fc:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d72fe:	bd70      	pop	{r4, r5, r6, pc}

000d7300 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d7300:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d7302:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d7304:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d7308:	2201      	movs	r2, #1
   d730a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d730c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d7310:	f7ff ffdf 	bl	d72d2 <_ZN6String6concatEPKcj>
}
   d7314:	b003      	add	sp, #12
   d7316:	f85d fb04 	ldr.w	pc, [sp], #4

000d731a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d731a:	6883      	ldr	r3, [r0, #8]
   d731c:	428b      	cmp	r3, r1
   d731e:	d903      	bls.n	d7328 <_ZNK6StringixEj+0xe>
   d7320:	6800      	ldr	r0, [r0, #0]
   d7322:	b110      	cbz	r0, d732a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d7324:	5c40      	ldrb	r0, [r0, r1]
   d7326:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d7328:	2000      	movs	r0, #0
	return buffer[index];
}
   d732a:	4770      	bx	lr

000d732c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d732c:	f7ff bff5 	b.w	d731a <_ZNK6StringixEj>

000d7330 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7330:	4770      	bx	lr

000d7332 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7332:	2000      	movs	r0, #0
   d7334:	4770      	bx	lr

000d7336 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7336:	4770      	bx	lr

000d7338 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7338:	2000      	movs	r0, #0
   d733a:	4770      	bx	lr

000d733c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d733c:	4770      	bx	lr

000d733e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d733e:	2000      	movs	r0, #0
   d7340:	4770      	bx	lr

000d7342 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7342:	b510      	push	{r4, lr}
   d7344:	2114      	movs	r1, #20
   d7346:	4604      	mov	r4, r0
   d7348:	f002 fca6 	bl	d9c98 <_ZdlPvj>
   d734c:	4620      	mov	r0, r4
   d734e:	bd10      	pop	{r4, pc}

000d7350 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d7350:	b510      	push	{r4, lr}
   d7352:	2114      	movs	r1, #20
   d7354:	4604      	mov	r4, r0
   d7356:	f002 fc9f 	bl	d9c98 <_ZdlPvj>
   d735a:	4620      	mov	r0, r4
   d735c:	bd10      	pop	{r4, pc}

000d735e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d735e:	b510      	push	{r4, lr}
   d7360:	2114      	movs	r1, #20
   d7362:	4604      	mov	r4, r0
   d7364:	f002 fc98 	bl	d9c98 <_ZdlPvj>
   d7368:	4620      	mov	r0, r4
   d736a:	bd10      	pop	{r4, pc}

000d736c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d736c:	f7fc be97 	b.w	d409e <_ZdlPv>

000d7370 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d7370:	f7fc be95 	b.w	d409e <_ZdlPv>

000d7374 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d7374:	f7fc be93 	b.w	d409e <_ZdlPv>

000d7378 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7378:	b510      	push	{r4, lr}
   d737a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d737c:	6800      	ldr	r0, [r0, #0]
   d737e:	b108      	cbz	r0, d7384 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7380:	f7ff fc10 	bl	d6ba4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7384:	4620      	mov	r0, r4
   d7386:	bd10      	pop	{r4, pc}

000d7388 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d7388:	b530      	push	{r4, r5, lr}
   d738a:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d738c:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d738e:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d7390:	2400      	movs	r4, #0
   d7392:	9302      	str	r3, [sp, #8]
   d7394:	4b08      	ldr	r3, [pc, #32]	; (d73b8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d7396:	9300      	str	r3, [sp, #0]
   d7398:	aa02      	add	r2, sp, #8
   d739a:	4623      	mov	r3, r4
   d739c:	4907      	ldr	r1, [pc, #28]	; (d73bc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d739e:	9403      	str	r4, [sp, #12]
   d73a0:	2001      	movs	r0, #1
   d73a2:	f7ff fcd7 	bl	d6d54 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d73a6:	6828      	ldr	r0, [r5, #0]
   d73a8:	4905      	ldr	r1, [pc, #20]	; (d73c0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d73aa:	8800      	ldrh	r0, [r0, #0]
   d73ac:	4623      	mov	r3, r4
   d73ae:	462a      	mov	r2, r5
   d73b0:	f7ff fb6a 	bl	d6a88 <hal_ble_gatt_client_discover_all_services>
    }
   d73b4:	b00b      	add	sp, #44	; 0x2c
   d73b6:	bd30      	pop	{r4, r5, pc}
   d73b8:	000dd63f 	.word	0x000dd63f
   d73bc:	000dd634 	.word	0x000dd634
   d73c0:	000d89a1 	.word	0x000d89a1

000d73c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d73c4:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d73c6:	200a      	movs	r0, #10
   d73c8:	4a02      	ldr	r2, [pc, #8]	; (d73d4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d73ca:	2100      	movs	r1, #0
   d73cc:	f7ff fcba 	bl	d6d44 <panic_>
    }
}
   d73d0:	bd08      	pop	{r3, pc}
   d73d2:	bf00      	nop
   d73d4:	000d69dd 	.word	0x000d69dd

000d73d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d73d8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d73da:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d73dc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d73de:	689b      	ldr	r3, [r3, #8]
   d73e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d73e2:	68a3      	ldr	r3, [r4, #8]
   d73e4:	3b01      	subs	r3, #1
   d73e6:	60a3      	str	r3, [r4, #8]
   d73e8:	b92b      	cbnz	r3, d73f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d73ea:	6823      	ldr	r3, [r4, #0]
   d73ec:	4620      	mov	r0, r4
   d73ee:	68db      	ldr	r3, [r3, #12]
        }
    }
   d73f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d73f4:	4718      	bx	r3
   d73f6:	bd10      	pop	{r4, pc}

000d73f8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d73f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d73fc:	b2da      	uxtb	r2, r3
   d73fe:	2a09      	cmp	r2, #9
   d7400:	d801      	bhi.n	d7406 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d7402:	4618      	mov	r0, r3
   d7404:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d7406:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d740a:	2b05      	cmp	r3, #5
   d740c:	d801      	bhi.n	d7412 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d740e:	3857      	subs	r0, #87	; 0x57
   d7410:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d7412:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d7416:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d7418:	bf94      	ite	ls
   d741a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d741c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d7420:	4770      	bx	lr
	...

000d7424 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d7424:	b510      	push	{r4, lr}
            locked_(false) {
   d7426:	2300      	movs	r3, #0
   d7428:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d742a:	4b04      	ldr	r3, [pc, #16]	; (d743c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d742c:	4604      	mov	r4, r0
   d742e:	6818      	ldr	r0, [r3, #0]
   d7430:	f7ff fbc0 	bl	d6bb4 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d7434:	2301      	movs	r3, #1
   d7436:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d7438:	4620      	mov	r0, r4
   d743a:	bd10      	pop	{r4, pc}
   d743c:	2003e364 	.word	0x2003e364

000d7440 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d7440:	b510      	push	{r4, lr}
        if (locked_) {
   d7442:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d7444:	4604      	mov	r4, r0
        if (locked_) {
   d7446:	b11b      	cbz	r3, d7450 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7448:	4b02      	ldr	r3, [pc, #8]	; (d7454 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d744a:	6818      	ldr	r0, [r3, #0]
   d744c:	f7ff fbba 	bl	d6bc4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d7450:	4620      	mov	r0, r4
   d7452:	bd10      	pop	{r4, pc}
   d7454:	2003e364 	.word	0x2003e364

000d7458 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d7458:	2200      	movs	r2, #0
   d745a:	6002      	str	r2, [r0, #0]
   d745c:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d745e:	4770      	bx	lr

000d7460 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d7460:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d7462:	7982      	ldrb	r2, [r0, #6]
   d7464:	798b      	ldrb	r3, [r1, #6]
   d7466:	429a      	cmp	r2, r3
   d7468:	d106      	bne.n	d7478 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d746a:	2206      	movs	r2, #6
   d746c:	f003 fb6e 	bl	dab4c <memcmp>
   d7470:	fab0 f080 	clz	r0, r0
   d7474:	0940      	lsrs	r0, r0, #5
   d7476:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d7478:	2000      	movs	r0, #0
}
   d747a:	bd08      	pop	{r3, pc}

000d747c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d747c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d747e:	2301      	movs	r3, #1
   d7480:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7482:	4b05      	ldr	r3, [pc, #20]	; (d7498 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d7484:	4602      	mov	r2, r0
   d7486:	f103 0110 	add.w	r1, r3, #16
   d748a:	f853 4b04 	ldr.w	r4, [r3], #4
   d748e:	f842 4b04 	str.w	r4, [r2], #4
   d7492:	428b      	cmp	r3, r1
   d7494:	d1f9      	bne.n	d748a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d7496:	bd10      	pop	{r4, pc}
   d7498:	000dd7d4 	.word	0x000dd7d4

000d749c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d749c:	7c0b      	ldrb	r3, [r1, #16]
   d749e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d74a2:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d74a4:	d110      	bne.n	d74c8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d74a6:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d74a8:	4b0d      	ldr	r3, [pc, #52]	; (d74e0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d74aa:	4602      	mov	r2, r0
   d74ac:	f103 0410 	add.w	r4, r3, #16
   d74b0:	f853 5b04 	ldr.w	r5, [r3], #4
   d74b4:	f842 5b04 	str.w	r5, [r2], #4
   d74b8:	42a3      	cmp	r3, r4
   d74ba:	d1f9      	bne.n	d74b0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d74bc:	880b      	ldrh	r3, [r1, #0]
   d74be:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d74c0:	880b      	ldrh	r3, [r1, #0]
   d74c2:	121b      	asrs	r3, r3, #8
   d74c4:	7343      	strb	r3, [r0, #13]
   d74c6:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d74c8:	2301      	movs	r3, #1
   d74ca:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d74cc:	f101 0210 	add.w	r2, r1, #16
   d74d0:	4603      	mov	r3, r0
   d74d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d74d6:	f843 4b04 	str.w	r4, [r3], #4
   d74da:	4291      	cmp	r1, r2
   d74dc:	d1f9      	bne.n	d74d2 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d74de:	bd30      	pop	{r4, r5, pc}
   d74e0:	000dd7d4 	.word	0x000dd7d4

000d74e4 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d74e4:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d74e6:	690b      	ldr	r3, [r1, #16]
   d74e8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d74ea:	f101 0210 	add.w	r2, r1, #16
   d74ee:	4603      	mov	r3, r0
   d74f0:	f851 4b04 	ldr.w	r4, [r1], #4
   d74f4:	f843 4b04 	str.w	r4, [r3], #4
   d74f8:	4291      	cmp	r1, r2
   d74fa:	d1f9      	bne.n	d74f0 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d74fc:	bd10      	pop	{r4, pc}

000d74fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d74fe:	b510      	push	{r4, lr}
    if (uuid128) {
   d7500:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d7502:	4604      	mov	r4, r0
    if (uuid128) {
   d7504:	b1b9      	cbz	r1, d7536 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d7506:	2a01      	cmp	r2, #1
   d7508:	d109      	bne.n	d751e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d750a:	4603      	mov	r3, r0
   d750c:	f101 0210 	add.w	r2, r1, #16
   d7510:	f851 0b04 	ldr.w	r0, [r1], #4
   d7514:	f843 0b04 	str.w	r0, [r3], #4
   d7518:	4291      	cmp	r1, r2
   d751a:	d1f9      	bne.n	d7510 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d751c:	e008      	b.n	d7530 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d751e:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d7520:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d7522:	5c98      	ldrb	r0, [r3, r2]
   d7524:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d7528:	3a01      	subs	r2, #1
   d752a:	b2d2      	uxtb	r2, r2
   d752c:	2aff      	cmp	r2, #255	; 0xff
   d752e:	d1f8      	bne.n	d7522 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d7530:	2301      	movs	r3, #1
   d7532:	6123      	str	r3, [r4, #16]
   d7534:	e002      	b.n	d753c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d7536:	2210      	movs	r2, #16
   d7538:	f003 fb3d 	bl	dabb6 <memset>
    }
}
   d753c:	4620      	mov	r0, r4
   d753e:	bd10      	pop	{r4, pc}

000d7540 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d7540:	b538      	push	{r3, r4, r5, lr}
   d7542:	4604      	mov	r4, r0
   d7544:	460d      	mov	r5, r1
        : BleUuid() {
   d7546:	f7ff ff99 	bl	d747c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d754a:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d754c:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d754e:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d7550:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d7552:	7365      	strb	r5, [r4, #13]
}
   d7554:	4620      	mov	r0, r4
   d7556:	bd38      	pop	{r3, r4, r5, pc}

000d7558 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d7558:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d755a:	690b      	ldr	r3, [r1, #16]
   d755c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d755e:	f101 0210 	add.w	r2, r1, #16
   d7562:	4603      	mov	r3, r0
   d7564:	f851 4b04 	ldr.w	r4, [r1], #4
   d7568:	f843 4b04 	str.w	r4, [r3], #4
   d756c:	4291      	cmp	r1, r2
   d756e:	d1f9      	bne.n	d7564 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d7570:	bd10      	pop	{r4, pc}

000d7572 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d7572:	b510      	push	{r4, lr}
   d7574:	b086      	sub	sp, #24
   d7576:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d7578:	2201      	movs	r2, #1
   d757a:	a801      	add	r0, sp, #4
   d757c:	f7ff ffbf 	bl	d74fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7580:	a901      	add	r1, sp, #4
   d7582:	4620      	mov	r0, r4
   d7584:	f7ff ffe8 	bl	d7558 <_ZN8particle7BleUuidaSERKS0_>
}
   d7588:	b006      	add	sp, #24
   d758a:	bd10      	pop	{r4, pc}

000d758c <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d758c:	b510      	push	{r4, lr}
   d758e:	b086      	sub	sp, #24
   d7590:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d7592:	a801      	add	r0, sp, #4
   d7594:	f7ff ffd4 	bl	d7540 <_ZN8particle7BleUuidC1Et>
   d7598:	a901      	add	r1, sp, #4
   d759a:	4620      	mov	r0, r4
   d759c:	f7ff ffdc 	bl	d7558 <_ZN8particle7BleUuidaSERKS0_>
}
   d75a0:	b006      	add	sp, #24
   d75a2:	bd10      	pop	{r4, pc}

000d75a4 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d75a4:	b510      	push	{r4, lr}
   d75a6:	b086      	sub	sp, #24
   d75a8:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d75aa:	a801      	add	r0, sp, #4
   d75ac:	f7ff ff76 	bl	d749c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d75b0:	a901      	add	r1, sp, #4
   d75b2:	4620      	mov	r0, r4
   d75b4:	f7ff ffd0 	bl	d7558 <_ZN8particle7BleUuidaSERKS0_>
}
   d75b8:	b006      	add	sp, #24
   d75ba:	bd10      	pop	{r4, pc}

000d75bc <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d75bc:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d75be:	6902      	ldr	r2, [r0, #16]
   d75c0:	690b      	ldr	r3, [r1, #16]
   d75c2:	429a      	cmp	r2, r3
   d75c4:	d106      	bne.n	d75d4 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d75c6:	2210      	movs	r2, #16
   d75c8:	f003 fac0 	bl	dab4c <memcmp>
   d75cc:	fab0 f080 	clz	r0, r0
   d75d0:	0940      	lsrs	r0, r0, #5
   d75d2:	bd08      	pop	{r3, pc}
   d75d4:	2000      	movs	r0, #0
}
   d75d6:	bd08      	pop	{r3, pc}

000d75d8 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d75d8:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d75da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d75dc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d75de:	4b31      	ldr	r3, [pc, #196]	; (d76a4 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d75e0:	460e      	mov	r6, r1
   d75e2:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d75e4:	4602      	mov	r2, r0
   d75e6:	f103 0110 	add.w	r1, r3, #16
   d75ea:	f853 0b04 	ldr.w	r0, [r3], #4
   d75ee:	f842 0b04 	str.w	r0, [r2], #4
   d75f2:	428b      	cmp	r3, r1
   d75f4:	d1f9      	bne.n	d75ea <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d75f6:	2e00      	cmp	r6, #0
   d75f8:	d051      	beq.n	d769e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d75fa:	2124      	movs	r1, #36	; 0x24
   d75fc:	4630      	mov	r0, r6
   d75fe:	f003 fb78 	bl	dacf2 <strnlen>
   d7602:	2804      	cmp	r0, #4
   d7604:	d010      	beq.n	d7628 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d7606:	2700      	movs	r7, #0
   d7608:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d760a:	2124      	movs	r1, #36	; 0x24
   d760c:	4630      	mov	r0, r6
   d760e:	f003 fb70 	bl	dacf2 <strnlen>
   d7612:	42b8      	cmp	r0, r7
   d7614:	d901      	bls.n	d761a <_ZN8particle7BleUuid9constructEPKc+0x42>
   d7616:	bb44      	cbnz	r4, d766a <_ZN8particle7BleUuid9constructEPKc+0x92>
   d7618:	e041      	b.n	d769e <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d761a:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d761c:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d761e:	42a5      	cmp	r5, r4
   d7620:	d03d      	beq.n	d769e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d7622:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d7626:	e7fa      	b.n	d761e <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d7628:	7830      	ldrb	r0, [r6, #0]
   d762a:	f7ff fee5 	bl	d73f8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d762e:	1e04      	subs	r4, r0, #0
   d7630:	db18      	blt.n	d7664 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d7632:	7870      	ldrb	r0, [r6, #1]
   d7634:	f7ff fee0 	bl	d73f8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d7638:	2800      	cmp	r0, #0
   d763a:	db13      	blt.n	d7664 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d763c:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d7640:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d7644:	78b0      	ldrb	r0, [r6, #2]
   d7646:	f7ff fed7 	bl	d73f8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d764a:	1e04      	subs	r4, r0, #0
   d764c:	db0a      	blt.n	d7664 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d764e:	78f0      	ldrb	r0, [r6, #3]
   d7650:	f7ff fed2 	bl	d73f8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d7654:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d7656:	bfa1      	itttt	ge
   d7658:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d765c:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d7660:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d7662:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d7664:	2300      	movs	r3, #0
   d7666:	612b      	str	r3, [r5, #16]
   d7668:	e019      	b.n	d769e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d766a:	5df0      	ldrb	r0, [r6, r7]
   d766c:	f7ff fec4 	bl	d73f8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d7670:	0603      	lsls	r3, r0, #24
   d7672:	d412      	bmi.n	d769a <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d7674:	3c01      	subs	r4, #1
   d7676:	0100      	lsls	r0, r0, #4
   d7678:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d767a:	2124      	movs	r1, #36	; 0x24
   d767c:	4630      	mov	r0, r6
   d767e:	f003 fb38 	bl	dacf2 <strnlen>
   d7682:	3701      	adds	r7, #1
   d7684:	4287      	cmp	r7, r0
   d7686:	d208      	bcs.n	d769a <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d7688:	5df0      	ldrb	r0, [r6, r7]
   d768a:	f7ff feb5 	bl	d73f8 <_ZN8particle11hexToNibbleEc>
   d768e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7690:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d7692:	bfa2      	ittt	ge
   d7694:	5d2b      	ldrbge	r3, [r5, r4]
   d7696:	4318      	orrge	r0, r3
   d7698:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d769a:	3701      	adds	r7, #1
   d769c:	e7b5      	b.n	d760a <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d769e:	b003      	add	sp, #12
   d76a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76a2:	bf00      	nop
   d76a4:	000dd7d4 	.word	0x000dd7d4

000d76a8 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d76a8:	b538      	push	{r3, r4, r5, lr}
   d76aa:	4604      	mov	r4, r0
   d76ac:	460d      	mov	r5, r1
        : BleUuid() {
   d76ae:	f7ff fee5 	bl	d747c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d76b2:	4620      	mov	r0, r4
   d76b4:	4629      	mov	r1, r5
   d76b6:	f7ff ff8f 	bl	d75d8 <_ZN8particle7BleUuid9constructEPKc>
}
   d76ba:	4620      	mov	r0, r4
   d76bc:	bd38      	pop	{r3, r4, r5, pc}

000d76be <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d76be:	b538      	push	{r3, r4, r5, lr}
   d76c0:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d76c2:	b101      	cbz	r1, d76c6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d76c4:	b912      	cbnz	r2, d76cc <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d76c6:	2000      	movs	r0, #0
   d76c8:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d76ca:	bd38      	pop	{r3, r4, r5, pc}
   d76cc:	2a1f      	cmp	r2, #31
   d76ce:	bf28      	it	cs
   d76d0:	221f      	movcs	r2, #31
   d76d2:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d76d4:	f003 fa49 	bl	dab6a <memcpy>
    selfLen_ = len;
   d76d8:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d76da:	4620      	mov	r0, r4
}
   d76dc:	bd38      	pop	{r3, r4, r5, pc}

000d76de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d76de:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d76e0:	b18b      	cbz	r3, d7706 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d76e2:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d76e4:	1ce5      	adds	r5, r4, #3
   d76e6:	428d      	cmp	r5, r1
   d76e8:	d80f      	bhi.n	d770a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d76ea:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d76ec:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d76ee:	5d87      	ldrb	r7, [r0, r6]
   d76f0:	4297      	cmp	r7, r2
   d76f2:	d105      	bne.n	d7700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d76f4:	442e      	add	r6, r5
   d76f6:	42b1      	cmp	r1, r6
   d76f8:	d307      	bcc.n	d770a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d76fa:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d76fc:	1c68      	adds	r0, r5, #1
                return adsLen;
   d76fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d7700:	3501      	adds	r5, #1
   d7702:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d7704:	e7ee      	b.n	d76e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d7706:	4618      	mov	r0, r3
   d7708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d770a:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d770c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d770e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d770e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7712:	4604      	mov	r4, r0
   d7714:	460e      	mov	r6, r1
   d7716:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d7718:	4617      	mov	r7, r2
   d771a:	2a00      	cmp	r2, #0
   d771c:	d03a      	beq.n	d7794 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d771e:	460a      	mov	r2, r1
   d7720:	ab01      	add	r3, sp, #4
   d7722:	6a01      	ldr	r1, [r0, #32]
   d7724:	f7ff ffdb 	bl	d76de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d7728:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d772c:	6a22      	ldr	r2, [r4, #32]
   d772e:	bb03      	cbnz	r3, d7772 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d7730:	b1f8      	cbz	r0, d7772 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d7732:	1c96      	adds	r6, r2, #2
   d7734:	442e      	add	r6, r5
   d7736:	1a36      	subs	r6, r6, r0
   d7738:	2e1f      	cmp	r6, #31
   d773a:	d82b      	bhi.n	d7794 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d773c:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d7740:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d7744:	ebc8 0202 	rsb	r2, r8, r2
   d7748:	1a12      	subs	r2, r2, r0
   d774a:	eb00 0108 	add.w	r1, r0, r8
   d774e:	eb05 0009 	add.w	r0, r5, r9
   d7752:	b292      	uxth	r2, r2
   d7754:	4421      	add	r1, r4
   d7756:	4420      	add	r0, r4
   d7758:	f003 fa12 	bl	dab80 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d775c:	1c6b      	adds	r3, r5, #1
   d775e:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d7762:	462a      	mov	r2, r5
   d7764:	4639      	mov	r1, r7
   d7766:	eb04 0009 	add.w	r0, r4, r9
   d776a:	f003 f9fe 	bl	dab6a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d776e:	6226      	str	r6, [r4, #32]
   d7770:	e010      	b.n	d7794 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d7772:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d7774:	182b      	adds	r3, r5, r0
   d7776:	2b1f      	cmp	r3, #31
   d7778:	d80c      	bhi.n	d7794 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d777a:	1c6b      	adds	r3, r5, #1
   d777c:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d777e:	4422      	add	r2, r4
   d7780:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d7782:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7784:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d7786:	4420      	add	r0, r4
   d7788:	462a      	mov	r2, r5
   d778a:	f003 f9ee 	bl	dab6a <memcpy>
        selfLen_ += len;
   d778e:	6a22      	ldr	r2, [r4, #32]
   d7790:	442a      	add	r2, r5
   d7792:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d7794:	6a20      	ldr	r0, [r4, #32]
}
   d7796:	b003      	add	sp, #12
   d7798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d779c <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d779c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d779e:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d77a0:	4603      	mov	r3, r0
   d77a2:	f100 021f 	add.w	r2, r0, #31
   d77a6:	2000      	movs	r0, #0
   d77a8:	f803 0b01 	strb.w	r0, [r3], #1
   d77ac:	4293      	cmp	r3, r2
   d77ae:	f04f 0100 	mov.w	r1, #0
   d77b2:	d1f9      	bne.n	d77a8 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d77b4:	aa04      	add	r2, sp, #16
   d77b6:	2306      	movs	r3, #6
   d77b8:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d77bc:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d77be:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d77c0:	9100      	str	r1, [sp, #0]
   d77c2:	4620      	mov	r0, r4
   d77c4:	4619      	mov	r1, r3
   d77c6:	f7ff ffa2 	bl	d770e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d77ca:	4620      	mov	r0, r4
   d77cc:	b004      	add	sp, #16
   d77ce:	bd10      	pop	{r4, pc}

000d77d0 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d77d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d77d2:	4615      	mov	r5, r2
   d77d4:	461c      	mov	r4, r3
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d77d6:	460a      	mov	r2, r1
   d77d8:	ab01      	add	r3, sp, #4
   d77da:	6a01      	ldr	r1, [r0, #32]
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d77dc:	4606      	mov	r6, r0
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d77de:	f7ff ff7e 	bl	d76de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
   d77e2:	4603      	mov	r3, r0
    if (adsLen > 0) {
   d77e4:	f030 0002 	bics.w	r0, r0, #2
   d77e8:	d00c      	beq.n	d7804 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
   d77ea:	1e98      	subs	r0, r3, #2
   d77ec:	4284      	cmp	r4, r0
   d77ee:	bf28      	it	cs
   d77f0:	4604      	movcs	r4, r0
        if ((adsLen - 2) > 0) {
            adsLen -= 2;
            len = std::min(len, adsLen);
            if (buf != nullptr) {
   d77f2:	b135      	cbz	r5, d7802 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x32>
                memcpy(buf, &selfData_[offset + 2], len);
   d77f4:	9901      	ldr	r1, [sp, #4]
   d77f6:	3102      	adds	r1, #2
   d77f8:	4622      	mov	r2, r4
   d77fa:	4431      	add	r1, r6
   d77fc:	4628      	mov	r0, r5
   d77fe:	f003 f9b4 	bl	dab6a <memcpy>
            }
            return len;
   d7802:	4620      	mov	r0, r4
        }
    }
    return 0;
}
   d7804:	b002      	add	sp, #8
   d7806:	bd70      	pop	{r4, r5, r6, pc}

000d7808 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
    return found;
}

size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   d7808:	4613      	mov	r3, r2
   d780a:	460a      	mov	r2, r1
   d780c:	21ff      	movs	r1, #255	; 0xff
   d780e:	f7ff bfdf 	b.w	d77d0 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000d7812 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7812:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7816:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7818:	b085      	sub	sp, #20
   d781a:	4606      	mov	r6, r0
   d781c:	4689      	mov	r9, r1
   d781e:	4617      	mov	r7, r2
   d7820:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d7822:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d7824:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7828:	6a31      	ldr	r1, [r6, #32]
   d782a:	428d      	cmp	r5, r1
   d782c:	d22a      	bcs.n	d7884 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d782e:	ab03      	add	r3, sp, #12
   d7830:	464a      	mov	r2, r9
   d7832:	1b49      	subs	r1, r1, r5
   d7834:	1970      	adds	r0, r6, r5
   d7836:	f7ff ff52 	bl	d76de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d783a:	4683      	mov	fp, r0
   d783c:	b310      	cbz	r0, d7884 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d783e:	4554      	cmp	r4, sl
   d7840:	d220      	bcs.n	d7884 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d7842:	2804      	cmp	r0, #4
   d7844:	9903      	ldr	r1, [sp, #12]
   d7846:	d10c      	bne.n	d7862 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d7848:	4429      	add	r1, r5
   d784a:	1872      	adds	r2, r6, r1
   d784c:	1c63      	adds	r3, r4, #1
   d784e:	78d1      	ldrb	r1, [r2, #3]
   d7850:	7892      	ldrb	r2, [r2, #2]
   d7852:	9301      	str	r3, [sp, #4]
   d7854:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d7858:	fb08 7004 	mla	r0, r8, r4, r7
   d785c:	f7ff fe96 	bl	d758c <_ZN8particle7BleUuidaSEt>
   d7860:	e00a      	b.n	d7878 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d7862:	2812      	cmp	r0, #18
   d7864:	d10a      	bne.n	d787c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d7866:	3102      	adds	r1, #2
   d7868:	4429      	add	r1, r5
   d786a:	1c63      	adds	r3, r4, #1
   d786c:	4431      	add	r1, r6
   d786e:	fb08 7004 	mla	r0, r8, r4, r7
   d7872:	9301      	str	r3, [sp, #4]
   d7874:	f7ff fe7d 	bl	d7572 <_ZN8particle7BleUuidaSEPKh>
   d7878:	9b01      	ldr	r3, [sp, #4]
   d787a:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d787c:	9b03      	ldr	r3, [sp, #12]
   d787e:	445b      	add	r3, fp
   d7880:	441d      	add	r5, r3
   d7882:	e7d1      	b.n	d7828 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d7884:	4620      	mov	r0, r4
   d7886:	b005      	add	sp, #20
   d7888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d788c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7890:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7892:	460d      	mov	r5, r1
   d7894:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7896:	460a      	mov	r2, r1
   d7898:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d789a:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d789c:	f7ff ffb9 	bl	d7812 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d78a0:	f04f 0814 	mov.w	r8, #20
   d78a4:	1a33      	subs	r3, r6, r0
   d78a6:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d78aa:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d78ac:	2103      	movs	r1, #3
   d78ae:	4638      	mov	r0, r7
   d78b0:	f7ff ffaf 	bl	d7812 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d78b4:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d78b6:	1b33      	subs	r3, r6, r4
   d78b8:	fb08 5204 	mla	r2, r8, r4, r5
   d78bc:	2106      	movs	r1, #6
   d78be:	4638      	mov	r0, r7
   d78c0:	f7ff ffa7 	bl	d7812 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d78c4:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d78c6:	1b33      	subs	r3, r6, r4
   d78c8:	fb08 5204 	mla	r2, r8, r4, r5
   d78cc:	2107      	movs	r1, #7
   d78ce:	4638      	mov	r0, r7
   d78d0:	f7ff ff9f 	bl	d7812 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d78d4:	4420      	add	r0, r4
   d78d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d78dc <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d78dc:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d78de:	2500      	movs	r5, #0
   d78e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d78e4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d78e6:	8043      	strh	r3, [r0, #2]
   d78e8:	220e      	movs	r2, #14
   d78ea:	4629      	mov	r1, r5
   d78ec:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d78ee:	7105      	strb	r5, [r0, #4]
   d78f0:	3006      	adds	r0, #6
   d78f2:	f003 f960 	bl	dabb6 <memset>
   d78f6:	f104 0014 	add.w	r0, r4, #20
   d78fa:	f7ff fdbf 	bl	d747c <_ZN8particle7BleUuidC1Ev>
   d78fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7902:	f7ff fdbb 	bl	d747c <_ZN8particle7BleUuidC1Ev>
   d7906:	4904      	ldr	r1, [pc, #16]	; (d7918 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7908:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d790c:	f7ff fca3 	bl	d7256 <_ZN6StringC1EPK19__FlashStringHelper>
   d7910:	64e5      	str	r5, [r4, #76]	; 0x4c
   d7912:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d7914:	4620      	mov	r0, r4
   d7916:	bd38      	pop	{r3, r4, r5, pc}
   d7918:	000dd888 	.word	0x000dd888

000d791c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d791c:	b510      	push	{r4, lr}
   d791e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7920:	69c2      	ldr	r2, [r0, #28]
   d7922:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d7926:	4293      	cmp	r3, r2
   d7928:	4618      	mov	r0, r3
   d792a:	d006      	beq.n	d793a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d792c:	6804      	ldr	r4, [r0, #0]
   d792e:	8824      	ldrh	r4, [r4, #0]
   d7930:	428c      	cmp	r4, r1
   d7932:	f103 0308 	add.w	r3, r3, #8
   d7936:	d1f6      	bne.n	d7926 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d7938:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d793a:	2000      	movs	r0, #0
    }
   d793c:	bd10      	pop	{r4, pc}
	...

000d7940 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d7940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7944:	4680      	mov	r8, r0
   d7946:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d7948:	460e      	mov	r6, r1
   d794a:	b369      	cbz	r1, d79a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d794c:	b362      	cbz	r2, d79a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d794e:	2af4      	cmp	r2, #244	; 0xf4
   d7950:	6805      	ldr	r5, [r0, #0]
   d7952:	bf28      	it	cs
   d7954:	22f4      	movcs	r2, #244	; 0xf4
   d7956:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d7958:	782a      	ldrb	r2, [r5, #0]
   d795a:	b1a2      	cbz	r2, d7986 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d795c:	792b      	ldrb	r3, [r5, #4]
   d795e:	0798      	lsls	r0, r3, #30
   d7960:	d507      	bpl.n	d7972 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d7962:	2300      	movs	r3, #0
   d7964:	4622      	mov	r2, r4
   d7966:	89a8      	ldrh	r0, [r5, #12]
   d7968:	f7ff f884 	bl	d6a74 <hal_ble_gatt_server_set_characteristic_value>
   d796c:	2800      	cmp	r0, #0
   d796e:	da02      	bge.n	d7976 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d7970:	e043      	b.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d7972:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7976:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d797a:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d797c:	06da      	lsls	r2, r3, #27
   d797e:	d518      	bpl.n	d79b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d7980:	2f01      	cmp	r7, #1
   d7982:	d123      	bne.n	d79cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d7984:	e015      	b.n	d79b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d7986:	8868      	ldrh	r0, [r5, #2]
   d7988:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d798c:	4298      	cmp	r0, r3
   d798e:	d00d      	beq.n	d79ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d7990:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d7992:	0759      	lsls	r1, r3, #29
   d7994:	d523      	bpl.n	d79de <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d7996:	2f01      	cmp	r7, #1
   d7998:	d021      	beq.n	d79de <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d799a:	89a9      	ldrh	r1, [r5, #12]
   d799c:	9200      	str	r2, [sp, #0]
   d799e:	4623      	mov	r3, r4
   d79a0:	4632      	mov	r2, r6
   d79a2:	f7ff f88f 	bl	d6ac4 <hal_ble_gatt_client_write_without_response>
   d79a6:	e028      	b.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d79a8:	4815      	ldr	r0, [pc, #84]	; (d7a00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d79aa:	e026      	b.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d79ac:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d79b0:	e023      	b.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d79b2:	069a      	lsls	r2, r3, #26
   d79b4:	d521      	bpl.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d79b6:	2f02      	cmp	r7, #2
   d79b8:	d01f      	beq.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d79ba:	89a8      	ldrh	r0, [r5, #12]
   d79bc:	2300      	movs	r3, #0
   d79be:	4622      	mov	r2, r4
   d79c0:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d79c2:	b002      	add	sp, #8
   d79c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d79c8:	f7ff b8c2 	b.w	d6b50 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d79cc:	89a8      	ldrh	r0, [r5, #12]
   d79ce:	2300      	movs	r3, #0
   d79d0:	4622      	mov	r2, r4
   d79d2:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d79d4:	b002      	add	sp, #8
   d79d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d79da:	f7ff b8af 	b.w	d6b3c <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d79de:	071b      	lsls	r3, r3, #28
   d79e0:	d501      	bpl.n	d79e6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d79e2:	2f02      	cmp	r7, #2
   d79e4:	d102      	bne.n	d79ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d79e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d79ea:	e006      	b.n	d79fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d79ec:	2300      	movs	r3, #0
   d79ee:	89a9      	ldrh	r1, [r5, #12]
   d79f0:	9300      	str	r3, [sp, #0]
   d79f2:	4632      	mov	r2, r6
   d79f4:	4623      	mov	r3, r4
   d79f6:	f7ff f85b 	bl	d6ab0 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d79fa:	b002      	add	sp, #8
   d79fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7a00:	fffffef2 	.word	0xfffffef2

000d7a04 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7a04:	b570      	push	{r4, r5, r6, lr}
   d7a06:	6804      	ldr	r4, [r0, #0]
   d7a08:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7a0a:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7a0c:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7a0e:	2900      	cmp	r1, #0
   d7a10:	d12e      	bne.n	d7a70 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d7a12:	8862      	ldrh	r2, [r4, #2]
   d7a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7a18:	429a      	cmp	r2, r3
   d7a1a:	d029      	beq.n	d7a70 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d7a1c:	8a23      	ldrh	r3, [r4, #16]
   d7a1e:	b353      	cbz	r3, d7a76 <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d7a20:	2518      	movs	r5, #24
   d7a22:	462a      	mov	r2, r5
   d7a24:	4668      	mov	r0, sp
   d7a26:	f003 f8c6 	bl	dabb6 <memset>
    config.version = BLE_API_VERSION;
   d7a2a:	2301      	movs	r3, #1
   d7a2c:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d7a30:	4b13      	ldr	r3, [pc, #76]	; (d7a80 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d7a32:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d7a36:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d7a38:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d7a3a:	8863      	ldrh	r3, [r4, #2]
   d7a3c:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d7a40:	8a23      	ldrh	r3, [r4, #16]
   d7a42:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d7a46:	89a3      	ldrh	r3, [r4, #12]
   d7a48:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d7a4c:	b15e      	cbz	r6, d7a66 <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d7a4e:	7923      	ldrb	r3, [r4, #4]
   d7a50:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d7a52:	bf44      	itt	mi
   d7a54:	2302      	movmi	r3, #2
   d7a56:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d7a58:	7923      	ldrb	r3, [r4, #4]
   d7a5a:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d7a5c:	bf42      	ittt	mi
   d7a5e:	9b05      	ldrmi	r3, [sp, #20]
   d7a60:	f043 0301 	orrmi.w	r3, r3, #1
   d7a64:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d7a66:	2100      	movs	r1, #0
   d7a68:	4668      	mov	r0, sp
   d7a6a:	f7ff f85d 	bl	d6b28 <hal_ble_gatt_client_configure_cccd>
   d7a6e:	e004      	b.n	d7a7a <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7a70:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7a74:	e001      	b.n	d7a7a <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d7a76:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d7a7a:	b006      	add	sp, #24
   d7a7c:	bd70      	pop	{r4, r5, r6, pc}
   d7a7e:	bf00      	nop
   d7a80:	000d7c5d 	.word	0x000d7c5d

000d7a84 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d7a84:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d7a86:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d7a88:	651a      	str	r2, [r3, #80]	; 0x50
   d7a8a:	4770      	bx	lr

000d7a8c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a90:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d7a92:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7a94:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d7a96:	9302      	str	r3, [sp, #8]
   d7a98:	2500      	movs	r5, #0
   d7a9a:	4b2e      	ldr	r3, [pc, #184]	; (d7b54 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d7a9c:	9300      	str	r3, [sp, #0]
   d7a9e:	aa02      	add	r2, sp, #8
   d7aa0:	462b      	mov	r3, r5
   d7aa2:	492d      	ldr	r1, [pc, #180]	; (d7b58 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d7aa4:	9503      	str	r5, [sp, #12]
   d7aa6:	2001      	movs	r0, #1
   d7aa8:	f7ff f954 	bl	d6d54 <log_message>
   d7aac:	6833      	ldr	r3, [r6, #0]
   d7aae:	68dc      	ldr	r4, [r3, #12]
   d7ab0:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7ab2:	f04f 081c 	mov.w	r8, #28
   d7ab6:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d7aba:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d7abc:	f1a4 0308 	sub.w	r3, r4, #8
   d7ac0:	429f      	cmp	r7, r3
   d7ac2:	6832      	ldr	r2, [r6, #0]
   d7ac4:	d017      	beq.n	d7af6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7ac6:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d7aca:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7ace:	8a9b      	ldrh	r3, [r3, #20]
   d7ad0:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d7ad4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7ad8:	8adb      	ldrh	r3, [r3, #22]
   d7ada:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d7ade:	8810      	ldrh	r0, [r2, #0]
   d7ae0:	9500      	str	r5, [sp, #0]
   d7ae2:	4633      	mov	r3, r6
   d7ae4:	4a1d      	ldr	r2, [pc, #116]	; (d7b5c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d7ae6:	a902      	add	r1, sp, #8
   d7ae8:	f7fe ffd8 	bl	d6a9c <hal_ble_gatt_client_discover_characteristics>
   d7aec:	2800      	cmp	r0, #0
   d7aee:	f104 0408 	add.w	r4, r4, #8
   d7af2:	dae3      	bge.n	d7abc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d7af4:	e02a      	b.n	d7b4c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d7af6:	6994      	ldr	r4, [r2, #24]
   d7af8:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d7afa:	2700      	movs	r7, #0
   d7afc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d7b00:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d7b02:	f1a4 0308 	sub.w	r3, r4, #8
   d7b06:	429d      	cmp	r5, r3
   d7b08:	d01f      	beq.n	d7b4a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d7b0a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7b0e:	89db      	ldrh	r3, [r3, #14]
   d7b10:	b1cb      	cbz	r3, d7b46 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d7b12:	2214      	movs	r2, #20
   d7b14:	2100      	movs	r1, #0
   d7b16:	a802      	add	r0, sp, #8
   d7b18:	f003 f84d 	bl	dabb6 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d7b1c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7b20:	89d9      	ldrh	r1, [r3, #14]
   d7b22:	6833      	ldr	r3, [r6, #0]
   d7b24:	aa02      	add	r2, sp, #8
   d7b26:	8818      	ldrh	r0, [r3, #0]
   d7b28:	9700      	str	r7, [sp, #0]
   d7b2a:	2313      	movs	r3, #19
   d7b2c:	f7fe ffd4 	bl	d6ad8 <hal_ble_gatt_client_read>
                if (len > 0) {
   d7b30:	b148      	cbz	r0, d7b46 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d7b32:	ab0a      	add	r3, sp, #40	; 0x28
   d7b34:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d7b36:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d7b38:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d7b3c:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d7b40:	303c      	adds	r0, #60	; 0x3c
   d7b42:	f7ff fbb5 	bl	d72b0 <_ZN6StringaSEPKc>
   d7b46:	3408      	adds	r4, #8
   d7b48:	e7db      	b.n	d7b02 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d7b4a:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d7b4c:	b00a      	add	sp, #40	; 0x28
   d7b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7b52:	bf00      	nop
   d7b54:	000dd65b 	.word	0x000dd65b
   d7b58:	000dd634 	.word	0x000dd634
   d7b5c:	000d87e9 	.word	0x000d87e9

000d7b60 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d7b60:	6803      	ldr	r3, [r0, #0]
   d7b62:	8818      	ldrh	r0, [r3, #0]
}
   d7b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7b68:	1ac0      	subs	r0, r0, r3
   d7b6a:	bf18      	it	ne
   d7b6c:	2001      	movne	r0, #1
   d7b6e:	4770      	bx	lr

000d7b70 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d7b70:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d7b72:	680b      	ldr	r3, [r1, #0]
   d7b74:	f8c2 3002 	str.w	r3, [r2, #2]
   d7b78:	684b      	ldr	r3, [r1, #4]
   d7b7a:	f8c2 3006 	str.w	r3, [r2, #6]
   d7b7e:	4770      	bx	lr

000d7b80 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d7b80:	b510      	push	{r4, lr}
    return impl()->address();
   d7b82:	680a      	ldr	r2, [r1, #0]
   d7b84:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d7b88:	6003      	str	r3, [r0, #0]
   d7b8a:	6853      	ldr	r3, [r2, #4]
   d7b8c:	6043      	str	r3, [r0, #4]
}
   d7b8e:	bd10      	pop	{r4, pc}

000d7b90 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7b92:	6802      	ldr	r2, [r0, #0]
   d7b94:	680b      	ldr	r3, [r1, #0]
   d7b96:	8812      	ldrh	r2, [r2, #0]
   d7b98:	881b      	ldrh	r3, [r3, #0]
   d7b9a:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7b9c:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7b9e:	d10c      	bne.n	d7bba <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7ba0:	4601      	mov	r1, r0
   d7ba2:	4668      	mov	r0, sp
   d7ba4:	f7ff ffec 	bl	d7b80 <_ZNK8particle13BlePeerDevice7addressEv>
   d7ba8:	4621      	mov	r1, r4
   d7baa:	a802      	add	r0, sp, #8
   d7bac:	f7ff ffe8 	bl	d7b80 <_ZNK8particle13BlePeerDevice7addressEv>
   d7bb0:	a902      	add	r1, sp, #8
   d7bb2:	4668      	mov	r0, sp
   d7bb4:	f7ff fc54 	bl	d7460 <_ZNK8particle10BleAddresseqERKS0_>
   d7bb8:	b900      	cbnz	r0, d7bbc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d7bba:	2000      	movs	r0, #0
}
   d7bbc:	b004      	add	sp, #16
   d7bbe:	bd10      	pop	{r4, pc}

000d7bc0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7bc0:	b510      	push	{r4, lr}
   d7bc2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7bc4:	2034      	movs	r0, #52	; 0x34
   d7bc6:	f7fc fa68 	bl	d409a <_Znwj>
   d7bca:	4601      	mov	r1, r0
   d7bcc:	b168      	cbz	r0, d7bea <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7bce:	2300      	movs	r3, #0
   d7bd0:	6003      	str	r3, [r0, #0]
   d7bd2:	6043      	str	r3, [r0, #4]
   d7bd4:	6083      	str	r3, [r0, #8]
   d7bd6:	60c3      	str	r3, [r0, #12]
   d7bd8:	6103      	str	r3, [r0, #16]
   d7bda:	6143      	str	r3, [r0, #20]
   d7bdc:	6183      	str	r3, [r0, #24]
   d7bde:	61c3      	str	r3, [r0, #28]
   d7be0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d7be2:	6243      	str	r3, [r0, #36]	; 0x24
   d7be4:	6283      	str	r3, [r0, #40]	; 0x28
   d7be6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7be8:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7bea:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7bec:	b919      	cbnz	r1, d7bf6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d7bee:	4a0a      	ldr	r2, [pc, #40]	; (d7c18 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7bf0:	200a      	movs	r0, #10
   d7bf2:	f7ff f8a7 	bl	d6d44 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d7bf6:	2000      	movs	r0, #0
   d7bf8:	f7fe ff18 	bl	d6a2c <hal_ble_stack_init>
   d7bfc:	b120      	cbz	r0, d7c08 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d7bfe:	4a06      	ldr	r2, [pc, #24]	; (d7c18 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7c00:	2100      	movs	r1, #0
   d7c02:	200a      	movs	r0, #10
   d7c04:	f7ff f89e 	bl	d6d44 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d7c08:	2200      	movs	r2, #0
   d7c0a:	6821      	ldr	r1, [r4, #0]
   d7c0c:	4803      	ldr	r0, [pc, #12]	; (d7c1c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d7c0e:	f7fe ff81 	bl	d6b14 <hal_ble_set_callback_on_periph_link_events>
}
   d7c12:	4620      	mov	r0, r4
   d7c14:	bd10      	pop	{r4, pc}
   d7c16:	bf00      	nop
   d7c18:	000d69dd 	.word	0x000d69dd
   d7c1c:	000d8115 	.word	0x000d8115

000d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7c20:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d7c22:	4c0a      	ldr	r4, [pc, #40]	; (d7c4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d7c24:	6823      	ldr	r3, [r4, #0]
   d7c26:	07db      	lsls	r3, r3, #31
   d7c28:	d40e      	bmi.n	d7c48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7c2a:	4620      	mov	r0, r4
   d7c2c:	f7fc fa3b 	bl	d40a6 <__cxa_guard_acquire>
   d7c30:	b150      	cbz	r0, d7c48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7c32:	4807      	ldr	r0, [pc, #28]	; (d7c50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7c34:	f7ff ffc4 	bl	d7bc0 <_ZN8particle14BleLocalDeviceC1Ev>
   d7c38:	4620      	mov	r0, r4
   d7c3a:	f7fc fa39 	bl	d40b0 <__cxa_guard_release>
   d7c3e:	4a05      	ldr	r2, [pc, #20]	; (d7c54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d7c40:	4905      	ldr	r1, [pc, #20]	; (d7c58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d7c42:	4803      	ldr	r0, [pc, #12]	; (d7c50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7c44:	f002 f81a 	bl	d9c7c <__aeabi_atexit>
    return instance;
}
   d7c48:	4801      	ldr	r0, [pc, #4]	; (d7c50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7c4a:	bd10      	pop	{r4, pc}
   d7c4c:	2003e360 	.word	0x2003e360
   d7c50:	2003e35c 	.word	0x2003e35c
   d7c54:	2003d684 	.word	0x2003d684
   d7c58:	000d7e07 	.word	0x000d7e07

000d7c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7c5c:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7c5e:	6803      	ldr	r3, [r0, #0]
   d7c60:	3b09      	subs	r3, #9
   d7c62:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7c64:	b08a      	sub	sp, #40	; 0x28
   d7c66:	4604      	mov	r4, r0
   d7c68:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7c6a:	d819      	bhi.n	d7ca0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d7c6c:	f7ff ffd8 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7c70:	88a1      	ldrh	r1, [r4, #4]
   d7c72:	6800      	ldr	r0, [r0, #0]
   d7c74:	f7ff fe52 	bl	d791c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d7c78:	4602      	mov	r2, r0
   d7c7a:	b958      	cbnz	r0, d7c94 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d7c7c:	2320      	movs	r3, #32
   d7c7e:	9302      	str	r3, [sp, #8]
   d7c80:	4b08      	ldr	r3, [pc, #32]	; (d7ca4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d7c82:	9003      	str	r0, [sp, #12]
   d7c84:	9300      	str	r3, [sp, #0]
   d7c86:	aa02      	add	r2, sp, #8
   d7c88:	4603      	mov	r3, r0
   d7c8a:	4907      	ldr	r1, [pc, #28]	; (d7ca8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d7c8c:	2032      	movs	r0, #50	; 0x32
   d7c8e:	f7ff f861 	bl	d6d54 <log_message>
   d7c92:	e005      	b.n	d7ca0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d7c94:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d7c96:	b11d      	cbz	r5, d7ca0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d7c98:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d7c9a:	68e1      	ldr	r1, [r4, #12]
   d7c9c:	6920      	ldr	r0, [r4, #16]
   d7c9e:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7ca0:	b00a      	add	sp, #40	; 0x28
   d7ca2:	bd70      	pop	{r4, r5, r6, pc}
   d7ca4:	000dd67e 	.word	0x000dd67e
   d7ca8:	000dd634 	.word	0x000dd634

000d7cac <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7cac:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7cae:	a801      	add	r0, sp, #4
   d7cb0:	f7ff fbb8 	bl	d7424 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d7cb4:	2000      	movs	r0, #0
   d7cb6:	f7fe feb9 	bl	d6a2c <hal_ble_stack_init>
   d7cba:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d7cbc:	a801      	add	r0, sp, #4
   d7cbe:	f7ff fbbf 	bl	d7440 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d7cc2:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d7cc6:	b002      	add	sp, #8
   d7cc8:	bd10      	pop	{r4, pc}
	...

000d7ccc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7ccc:	b530      	push	{r4, r5, lr}
   d7cce:	b08b      	sub	sp, #44	; 0x2c
   d7cd0:	460d      	mov	r5, r1
    WiringBleLock lk;
   d7cd2:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7cd4:	4614      	mov	r4, r2
    WiringBleLock lk;
   d7cd6:	f7ff fba5 	bl	d7424 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d7cda:	b1b5      	cbz	r5, d7d0a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7cdc:	b1ac      	cbz	r4, d7d0a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7cde:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7ce0:	a902      	add	r1, sp, #8
   d7ce2:	480d      	ldr	r0, [pc, #52]	; (d7d18 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d7ce4:	9406      	str	r4, [sp, #24]
   d7ce6:	9202      	str	r2, [sp, #8]
   d7ce8:	9203      	str	r2, [sp, #12]
   d7cea:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d7cec:	9207      	str	r2, [sp, #28]
   d7cee:	9208      	str	r2, [sp, #32]
   d7cf0:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d7cf2:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7cf4:	f7fe fea2 	bl	d6a3c <hal_ble_gap_start_scan>
   d7cf8:	2800      	cmp	r0, #0
   d7cfa:	bfb8      	it	lt
   d7cfc:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7cfe:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d7d00:	bfa8      	it	ge
   d7d02:	9c07      	ldrge	r4, [sp, #28]
   d7d04:	f7ff f8fa 	bl	d6efc <free>
   d7d08:	e000      	b.n	d7d0c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7d0a:	4c04      	ldr	r4, [pc, #16]	; (d7d1c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d7d0c:	a801      	add	r0, sp, #4
   d7d0e:	f7ff fb97 	bl	d7440 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d7d12:	4620      	mov	r0, r4
   d7d14:	b00b      	add	sp, #44	; 0x2c
   d7d16:	bd30      	pop	{r4, r5, pc}
   d7d18:	000d8283 	.word	0x000d8283
   d7d1c:	fffffef2 	.word	0xfffffef2

000d7d20 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d7d20:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d7d22:	69d8      	ldr	r0, [r3, #28]
}
   d7d24:	2800      	cmp	r0, #0
   d7d26:	bfd4      	ite	le
   d7d28:	2000      	movle	r0, #0
   d7d2a:	2001      	movgt	r0, #1
   d7d2c:	4770      	bx	lr

000d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7d2e:	680b      	ldr	r3, [r1, #0]
   d7d30:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7d32:	b113      	cbz	r3, d7d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7d34:	685a      	ldr	r2, [r3, #4]
   d7d36:	3201      	adds	r2, #1
   d7d38:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7d3a:	4770      	bx	lr

000d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d7d3c:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7d3e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7d42:	4604      	mov	r4, r0
   d7d44:	f840 3b04 	str.w	r3, [r0], #4
   d7d48:	f7ff fff1 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d7d4c:	6823      	ldr	r3, [r4, #0]
   d7d4e:	b90b      	cbnz	r3, d7d54 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d7d50:	f7ff fb38 	bl	d73c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d7d54:	4620      	mov	r0, r4
   d7d56:	bd10      	pop	{r4, pc}

000d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7d58:	b510      	push	{r4, lr}
   d7d5a:	f851 3b04 	ldr.w	r3, [r1], #4
   d7d5e:	4604      	mov	r4, r0
   d7d60:	f840 3b04 	str.w	r3, [r0], #4
   d7d64:	f7ff ffe3 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7d68:	4620      	mov	r0, r4
   d7d6a:	bd10      	pop	{r4, pc}

000d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d7d6c:	b510      	push	{r4, lr}
   d7d6e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d7d70:	6800      	ldr	r0, [r0, #0]
   d7d72:	b128      	cbz	r0, d7d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7d74:	6843      	ldr	r3, [r0, #4]
   d7d76:	3b01      	subs	r3, #1
   d7d78:	6043      	str	r3, [r0, #4]
   d7d7a:	b90b      	cbnz	r3, d7d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7d7c:	f7ff fb2c 	bl	d73d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d7d80:	4620      	mov	r0, r4
   d7d82:	bd10      	pop	{r4, pc}

000d7d84 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d7d84:	b510      	push	{r4, lr}
   d7d86:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7d88:	3004      	adds	r0, #4
   d7d8a:	f7ff ffef 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7d8e:	4620      	mov	r0, r4
   d7d90:	bd10      	pop	{r4, pc}

000d7d92 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d7d92:	b510      	push	{r4, lr}
   d7d94:	4604      	mov	r4, r0
   d7d96:	3004      	adds	r0, #4
   d7d98:	f7ff ffe8 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7d9c:	4620      	mov	r0, r4
   d7d9e:	bd10      	pop	{r4, pc}

000d7da0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7da0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7da2:	6804      	ldr	r4, [r0, #0]
   d7da4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7da6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7da8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7dac:	42a6      	cmp	r6, r4
   d7dae:	d004      	beq.n	d7dba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7db0:	1d20      	adds	r0, r4, #4
   d7db2:	f7ff ffdb 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7db6:	3408      	adds	r4, #8
   d7db8:	e7f8      	b.n	d7dac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7dba:	6828      	ldr	r0, [r5, #0]
   d7dbc:	f7ff f89e 	bl	d6efc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7dc0:	4628      	mov	r0, r5
   d7dc2:	bd70      	pop	{r4, r5, r6, pc}

000d7dc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7dc4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7dc6:	6804      	ldr	r4, [r0, #0]
   d7dc8:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7dca:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7dcc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7dd0:	42a6      	cmp	r6, r4
   d7dd2:	d004      	beq.n	d7dde <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d7dd4:	1d20      	adds	r0, r4, #4
   d7dd6:	f7ff ffc9 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7dda:	3408      	adds	r4, #8
   d7ddc:	e7f8      	b.n	d7dd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7dde:	6828      	ldr	r0, [r5, #0]
   d7de0:	f7ff f88c 	bl	d6efc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7de4:	4628      	mov	r0, r5
   d7de6:	bd70      	pop	{r4, r5, r6, pc}

000d7de8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7de8:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7dea:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d7dec:	f104 0018 	add.w	r0, r4, #24
   d7df0:	f7ff ffe8 	bl	d7dc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7df4:	f104 000c 	add.w	r0, r4, #12
   d7df8:	f7ff ffd2 	bl	d7da0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7e02:	f7fc b94c 	b.w	d409e <_ZdlPv>

000d7e06 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e08:	6804      	ldr	r4, [r0, #0]
   d7e0a:	4607      	mov	r7, r0
   d7e0c:	b1c4      	cbz	r4, d7e40 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7e0e:	69a5      	ldr	r5, [r4, #24]
   d7e10:	69e3      	ldr	r3, [r4, #28]
   d7e12:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7e16:	42ae      	cmp	r6, r5
   d7e18:	d004      	beq.n	d7e24 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7e1a:	1d28      	adds	r0, r5, #4
   d7e1c:	f7ff ffa6 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e20:	3508      	adds	r5, #8
   d7e22:	e7f8      	b.n	d7e16 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7e24:	69a0      	ldr	r0, [r4, #24]
   d7e26:	f7ff f869 	bl	d6efc <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d7e2a:	f104 000c 	add.w	r0, r4, #12
   d7e2e:	f7ff ffc9 	bl	d7dc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7e32:	4620      	mov	r0, r4
   d7e34:	f7ff ffb4 	bl	d7da0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e38:	2134      	movs	r1, #52	; 0x34
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	f001 ff2c 	bl	d9c98 <_ZdlPvj>
   d7e40:	4638      	mov	r0, r7
   d7e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e44 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7e46:	2500      	movs	r5, #0
   d7e48:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7e4a:	6045      	str	r5, [r0, #4]
   d7e4c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7e4e:	2024      	movs	r0, #36	; 0x24
   d7e50:	f7fc f923 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7e54:	4604      	mov	r4, r0
   d7e56:	b178      	cbz	r0, d7e78 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d7e58:	4603      	mov	r3, r0
   d7e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7e5e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d7e62:	f8c0 5002 	str.w	r5, [r0, #2]
   d7e66:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d7e68:	7285      	strb	r5, [r0, #10]
   d7e6a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e6c:	60c5      	str	r5, [r0, #12]
   d7e6e:	6105      	str	r5, [r0, #16]
   d7e70:	6145      	str	r5, [r0, #20]
   d7e72:	6185      	str	r5, [r0, #24]
   d7e74:	61c5      	str	r5, [r0, #28]
   d7e76:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7e78:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7e7a:	2014      	movs	r0, #20
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	f7fc f90c 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7e82:	4603      	mov	r3, r0
   d7e84:	b128      	cbz	r0, d7e92 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7e86:	2201      	movs	r2, #1
   d7e88:	6042      	str	r2, [r0, #4]
   d7e8a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7e8c:	4a08      	ldr	r2, [pc, #32]	; (d7eb0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d7e8e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7e90:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7e92:	a802      	add	r0, sp, #8
   d7e94:	6872      	ldr	r2, [r6, #4]
   d7e96:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d7e9a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7e9c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7e9e:	f7ff ff65 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d7ea2:	6833      	ldr	r3, [r6, #0]
   d7ea4:	b90b      	cbnz	r3, d7eaa <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d7ea6:	f7ff fa8d 	bl	d73c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d7eaa:	4630      	mov	r0, r6
   d7eac:	b002      	add	sp, #8
   d7eae:	bd70      	pop	{r4, r5, r6, pc}
   d7eb0:	000dd620 	.word	0x000dd620

000d7eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7eb4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7eb6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d7eb8:	6803      	ldr	r3, [r0, #0]
   d7eba:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7ebc:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d7ebe:	d00c      	beq.n	d7eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d7ec0:	b114      	cbz	r4, d7ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7ec2:	6863      	ldr	r3, [r4, #4]
   d7ec4:	3301      	adds	r3, #1
   d7ec6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d7ec8:	6828      	ldr	r0, [r5, #0]
   d7eca:	b128      	cbz	r0, d7ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7ecc:	6843      	ldr	r3, [r0, #4]
   d7ece:	3b01      	subs	r3, #1
   d7ed0:	6043      	str	r3, [r0, #4]
   d7ed2:	b90b      	cbnz	r3, d7ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d7ed4:	f7ff fa80 	bl	d73d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d7ed8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d7eda:	4628      	mov	r0, r5
   d7edc:	bd38      	pop	{r3, r4, r5, pc}

000d7ede <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d7ede:	b510      	push	{r4, lr}
   d7ee0:	6802      	ldr	r2, [r0, #0]
   d7ee2:	680b      	ldr	r3, [r1, #0]
   d7ee4:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d7ee6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d7ee8:	b110      	cbz	r0, d7ef0 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d7eea:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d7eec:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d7eee:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7ef0:	4620      	mov	r0, r4
   d7ef2:	f851 3b04 	ldr.w	r3, [r1], #4
   d7ef6:	f840 3b04 	str.w	r3, [r0], #4
   d7efa:	f7ff ffdb 	bl	d7eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d7efe:	4620      	mov	r0, r4
   d7f00:	bd10      	pop	{r4, pc}

000d7f02 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d7f02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7f06:	6803      	ldr	r3, [r0, #0]
   d7f08:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7f0a:	69de      	ldr	r6, [r3, #28]
   d7f0c:	b087      	sub	sp, #28
   d7f0e:	460f      	mov	r7, r1
   d7f10:	4690      	mov	r8, r2
   d7f12:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d7f16:	42b4      	cmp	r4, r6
   d7f18:	46a1      	mov	r9, r4
   d7f1a:	d011      	beq.n	d7f40 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d7f1c:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d7f20:	a801      	add	r0, sp, #4
   d7f22:	3114      	adds	r1, #20
   d7f24:	f7ff fade 	bl	d74e4 <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d7f28:	4641      	mov	r1, r8
   d7f2a:	a801      	add	r0, sp, #4
   d7f2c:	f7ff fb46 	bl	d75bc <_ZNK8particle7BleUuideqERKS0_>
   d7f30:	4605      	mov	r5, r0
   d7f32:	2800      	cmp	r0, #0
   d7f34:	d0ef      	beq.n	d7f16 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d7f36:	4649      	mov	r1, r9
   d7f38:	4638      	mov	r0, r7
   d7f3a:	f7ff ffd0 	bl	d7ede <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d7f3e:	e000      	b.n	d7f42 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d7f40:	2500      	movs	r5, #0
}
   d7f42:	4628      	mov	r0, r5
   d7f44:	b007      	add	sp, #28
   d7f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7f4a <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d7f4a:	b510      	push	{r4, lr}
   d7f4c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7f50:	4604      	mov	r4, r0
   d7f52:	f840 3b04 	str.w	r3, [r0], #4
   d7f56:	f7ff ffad 	bl	d7eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	bd10      	pop	{r4, pc}

000d7f5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7f5e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7f60:	b570      	push	{r4, r5, r6, lr}
   d7f62:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7f64:	d91a      	bls.n	d7f9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d7f66:	4290      	cmp	r0, r2
   d7f68:	d219      	bcs.n	d7f9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7f6a:	f1a1 0608 	sub.w	r6, r1, #8
   d7f6e:	1a51      	subs	r1, r2, r1
   d7f70:	3904      	subs	r1, #4
   d7f72:	1f15      	subs	r5, r2, #4
   d7f74:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d7f76:	1f2b      	subs	r3, r5, #4
   d7f78:	429e      	cmp	r6, r3
   d7f7a:	d025      	beq.n	d7fc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d7f7c:	2c04      	cmp	r4, #4
   d7f7e:	d007      	beq.n	d7f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7f80:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d7f84:	f844 3c04 	str.w	r3, [r4, #-4]
   d7f88:	4629      	mov	r1, r5
   d7f8a:	4620      	mov	r0, r4
   d7f8c:	f7ff fecf 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f90:	4628      	mov	r0, r5
   d7f92:	f7ff feeb 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f96:	3d08      	subs	r5, #8
   d7f98:	3c08      	subs	r4, #8
   d7f9a:	e7ec      	b.n	d7f76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d7f9c:	d014      	beq.n	d7fc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d7f9e:	1d0c      	adds	r4, r1, #4
   d7fa0:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d7fa2:	1f23      	subs	r3, r4, #4
   d7fa4:	429d      	cmp	r5, r3
   d7fa6:	d00f      	beq.n	d7fc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d7fa8:	2e04      	cmp	r6, #4
   d7faa:	d007      	beq.n	d7fbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7fac:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d7fb0:	f846 3c04 	str.w	r3, [r6, #-4]
   d7fb4:	4621      	mov	r1, r4
   d7fb6:	4630      	mov	r0, r6
   d7fb8:	f7ff feb9 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7fbc:	4620      	mov	r0, r4
   d7fbe:	f7ff fed5 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7fc2:	3408      	adds	r4, #8
   d7fc4:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7fc6:	e7ec      	b.n	d7fa2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d7fc8:	bd70      	pop	{r4, r5, r6, pc}

000d7fca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d7fce:	6804      	ldr	r4, [r0, #0]
   d7fd0:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7fd2:	4605      	mov	r5, r0
   d7fd4:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7fd6:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7fda:	42a7      	cmp	r7, r4
   d7fdc:	d018      	beq.n	d8010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d7fde:	4641      	mov	r1, r8
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	f7ff fdd5 	bl	d7b90 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7fe6:	4606      	mov	r6, r0
   d7fe8:	b908      	cbnz	r0, d7fee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7fea:	3408      	adds	r4, #8
   d7fec:	e7f5      	b.n	d7fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d7fee:	b18c      	cbz	r4, d8014 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d7ff0:	1d20      	adds	r0, r4, #4
   d7ff2:	f7ff febb 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7ff6:	682b      	ldr	r3, [r5, #0]
   d7ff8:	686a      	ldr	r2, [r5, #4]
   d7ffa:	f104 0108 	add.w	r1, r4, #8
   d7ffe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8002:	4620      	mov	r0, r4
   d8004:	f7ff ffab 	bl	d7f5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d8008:	686b      	ldr	r3, [r5, #4]
   d800a:	3b01      	subs	r3, #1
   d800c:	606b      	str	r3, [r5, #4]
    return true;
   d800e:	e002      	b.n	d8016 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d8010:	2600      	movs	r6, #0
   d8012:	e000      	b.n	d8016 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d8014:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d8016:	4630      	mov	r0, r6
   d8018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d801c <_ZNK8particle14BleLocalDevice10disconnectEv>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
   d801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8020:	4680      	mov	r8, r0
   d8022:	b08a      	sub	sp, #40	; 0x28
    WiringBleLock lk;
   d8024:	4668      	mov	r0, sp
   d8026:	f7ff f9fd 	bl	d7424 <_ZN8particle3ble13WiringBleLockC1Ev>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d802a:	f8d8 3000 	ldr.w	r3, [r8]
   d802e:	699d      	ldr	r5, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8030:	69de      	ldr	r6, [r3, #28]
   d8032:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    for (auto& p : impl()->peers()) {
   d8036:	42b5      	cmp	r5, r6
   d8038:	462f      	mov	r7, r5
   d803a:	d023      	beq.n	d8084 <_ZNK8particle14BleLocalDevice10disconnectEv+0x68>
        hal_ble_conn_info_t connInfo = {};
   d803c:	2224      	movs	r2, #36	; 0x24
   d803e:	2100      	movs	r1, #0
   d8040:	a801      	add	r0, sp, #4
   d8042:	f002 fdb8 	bl	dabb6 <memset>
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
   d8046:	682b      	ldr	r3, [r5, #0]
   d8048:	2200      	movs	r2, #0
   d804a:	a901      	add	r1, sp, #4
   d804c:	8818      	ldrh	r0, [r3, #0]
   d804e:	f7fe fd57 	bl	d6b00 <hal_ble_gap_get_connection_info>
   d8052:	2800      	cmp	r0, #0
   d8054:	db14      	blt.n	d8080 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d8056:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d805a:	2b01      	cmp	r3, #1
   d805c:	f105 0508 	add.w	r5, r5, #8
   d8060:	d1e9      	bne.n	d8036 <_ZNK8particle14BleLocalDevice10disconnectEv+0x1a>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d8062:	683b      	ldr	r3, [r7, #0]
   d8064:	2100      	movs	r1, #0
   d8066:	8818      	ldrh	r0, [r3, #0]
   d8068:	f7fe fcfa 	bl	d6a60 <hal_ble_gap_disconnect>
   d806c:	2800      	cmp	r0, #0
   d806e:	db07      	blt.n	d8080 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d8070:	f8d8 0000 	ldr.w	r0, [r8]
    for (auto& p : impl()->peers()) {
        hal_ble_conn_info_t connInfo = {};
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
            impl()->peers().removeOne(p);
   d8074:	4639      	mov	r1, r7
   d8076:	3018      	adds	r0, #24
   d8078:	f7ff ffa7 	bl	d7fca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d807c:	2400      	movs	r4, #0
   d807e:	e003      	b.n	d8088 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
   d8080:	4604      	mov	r4, r0
   d8082:	e001      	b.n	d8088 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
   d8084:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
    WiringBleLock lk;
   d8088:	4668      	mov	r0, sp
   d808a:	f7ff f9d9 	bl	d7440 <_ZN8particle3ble13WiringBleLockD1Ev>
            impl()->peers().removeOne(p);
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d808e:	4620      	mov	r0, r4
   d8090:	b00a      	add	sp, #40	; 0x28
   d8092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8096 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8098:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d809a:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d809e:	6847      	ldr	r7, [r0, #4]
   d80a0:	9300      	str	r3, [sp, #0]
   d80a2:	a801      	add	r0, sp, #4
   d80a4:	f7ff fe43 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d80a8:	6866      	ldr	r6, [r4, #4]
   d80aa:	68a3      	ldr	r3, [r4, #8]
   d80ac:	429e      	cmp	r6, r3
   d80ae:	db14      	blt.n	d80da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d80b0:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d80b2:	2e00      	cmp	r6, #0
   d80b4:	dd0b      	ble.n	d80ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d80b6:	00f0      	lsls	r0, r6, #3
   d80b8:	f7fe ff18 	bl	d6eec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d80bc:	4605      	mov	r5, r0
   d80be:	b318      	cbz	r0, d8108 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d80c0:	e894 0006 	ldmia.w	r4, {r1, r2}
   d80c4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d80c8:	f7ff ff49 	bl	d7f5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d80cc:	e000      	b.n	d80d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d80ce:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d80d0:	6820      	ldr	r0, [r4, #0]
   d80d2:	f7fe ff13 	bl	d6efc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d80d6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d80d8:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d80da:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d80dc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d80de:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d80e2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d80e6:	4629      	mov	r1, r5
   d80e8:	f105 0008 	add.w	r0, r5, #8
   d80ec:	f7ff ff37 	bl	d7f5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d80f0:	b135      	cbz	r5, d8100 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d80f2:	9b00      	ldr	r3, [sp, #0]
   d80f4:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d80f8:	a901      	add	r1, sp, #4
   d80fa:	1d28      	adds	r0, r5, #4
   d80fc:	f7ff fe17 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d8100:	6863      	ldr	r3, [r4, #4]
   d8102:	3301      	adds	r3, #1
   d8104:	6063      	str	r3, [r4, #4]
   d8106:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8108:	a801      	add	r0, sp, #4
   d810a:	f7ff fe2f 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d810e:	4628      	mov	r0, r5
   d8110:	b003      	add	sp, #12
   d8112:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8114 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8118:	4604      	mov	r4, r0
   d811a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d811c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d811e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8120:	f7ff f980 	bl	d7424 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d8124:	6823      	ldr	r3, [r4, #0]
   d8126:	2b03      	cmp	r3, #3
   d8128:	d002      	beq.n	d8130 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d812a:	2b04      	cmp	r3, #4
   d812c:	d042      	beq.n	d81b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d812e:	e087      	b.n	d8240 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d8130:	a804      	add	r0, sp, #16
   d8132:	f7ff fe87 	bl	d7e44 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d8136:	9b04      	ldr	r3, [sp, #16]
   d8138:	8922      	ldrh	r2, [r4, #8]
   d813a:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d813c:	6862      	ldr	r2, [r4, #4]
   d813e:	9904      	ldr	r1, [sp, #16]
   d8140:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d8144:	f8c1 3002 	str.w	r3, [r1, #2]
   d8148:	6853      	ldr	r3, [r2, #4]
   d814a:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d814e:	a807      	add	r0, sp, #28
   d8150:	9b04      	ldr	r3, [sp, #16]
   d8152:	9306      	str	r3, [sp, #24]
   d8154:	a905      	add	r1, sp, #20
   d8156:	f7ff fdea 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d815a:	a906      	add	r1, sp, #24
   d815c:	f105 0018 	add.w	r0, r5, #24
   d8160:	f7ff ff99 	bl	d8096 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d8164:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8166:	a807      	add	r0, sp, #28
   d8168:	f7ff fe00 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d816c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d816e:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d8170:	b974      	cbnz	r4, d8190 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d8172:	4b36      	ldr	r3, [pc, #216]	; (d824c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d8174:	9300      	str	r3, [sp, #0]
   d8176:	aa06      	add	r2, sp, #24
   d8178:	4623      	mov	r3, r4
   d817a:	4935      	ldr	r1, [pc, #212]	; (d8250 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d817c:	9407      	str	r4, [sp, #28]
   d817e:	2032      	movs	r0, #50	; 0x32
   d8180:	f7fe fde8 	bl	d6d54 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d8184:	9b04      	ldr	r3, [sp, #16]
   d8186:	4621      	mov	r1, r4
   d8188:	8818      	ldrh	r0, [r3, #0]
   d818a:	f7fe fc69 	bl	d6a60 <hal_ble_gap_disconnect>
   d818e:	e00d      	b.n	d81ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d8190:	4a30      	ldr	r2, [pc, #192]	; (d8254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d8192:	9200      	str	r2, [sp, #0]
   d8194:	2300      	movs	r3, #0
   d8196:	aa06      	add	r2, sp, #24
   d8198:	492d      	ldr	r1, [pc, #180]	; (d8250 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d819a:	9307      	str	r3, [sp, #28]
   d819c:	2001      	movs	r0, #1
   d819e:	f7fe fdd9 	bl	d6d54 <log_message>
                if (impl->connectedCb_) {
   d81a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d81a4:	b113      	cbz	r3, d81ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d81a6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d81a8:	a804      	add	r0, sp, #16
   d81aa:	4798      	blx	r3
   d81ac:	a805      	add	r0, sp, #20
   d81ae:	f7ff fddd 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81b2:	e045      	b.n	d8240 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d81b4:	8921      	ldrh	r1, [r4, #8]
   d81b6:	4628      	mov	r0, r5
   d81b8:	f7ff fbb0 	bl	d791c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d81bc:	4607      	mov	r7, r0
   d81be:	2800      	cmp	r0, #0
   d81c0:	d03e      	beq.n	d8240 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d81c2:	6804      	ldr	r4, [r0, #0]
   d81c4:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d81c6:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d81c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d81cc:	8022      	strh	r2, [r4, #0]
   d81ce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d81d2:	4299      	cmp	r1, r3
   d81d4:	d003      	beq.n	d81de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d81d6:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d81da:	8042      	strh	r2, [r0, #2]
   d81dc:	e7f9      	b.n	d81d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d81de:	68e6      	ldr	r6, [r4, #12]
   d81e0:	6923      	ldr	r3, [r4, #16]
   d81e2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d81e6:	45b0      	cmp	r8, r6
   d81e8:	d004      	beq.n	d81f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d81ea:	1d30      	adds	r0, r6, #4
   d81ec:	f7ff fdbe 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81f0:	3608      	adds	r6, #8
   d81f2:	e7f8      	b.n	d81e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d81f4:	2300      	movs	r3, #0
   d81f6:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d81f8:	69a6      	ldr	r6, [r4, #24]
   d81fa:	69e3      	ldr	r3, [r4, #28]
   d81fc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8200:	45b0      	cmp	r8, r6
   d8202:	d004      	beq.n	d820e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d8204:	1d30      	adds	r0, r6, #4
   d8206:	f7ff fdb1 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d820a:	3608      	adds	r6, #8
   d820c:	e7f8      	b.n	d8200 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d820e:	2300      	movs	r3, #0
   d8210:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d8212:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d8214:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d8216:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d8218:	b113      	cbz	r3, d8220 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d821a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d821c:	4638      	mov	r0, r7
   d821e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d8220:	2320      	movs	r3, #32
   d8222:	4a0d      	ldr	r2, [pc, #52]	; (d8258 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d8224:	9306      	str	r3, [sp, #24]
   d8226:	9200      	str	r2, [sp, #0]
   d8228:	2300      	movs	r3, #0
   d822a:	4909      	ldr	r1, [pc, #36]	; (d8250 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d822c:	9307      	str	r3, [sp, #28]
   d822e:	2001      	movs	r0, #1
   d8230:	aa06      	add	r2, sp, #24
   d8232:	f7fe fd8f 	bl	d6d54 <log_message>
                    impl->peers_.removeOne(*peer);
   d8236:	4639      	mov	r1, r7
   d8238:	f105 0018 	add.w	r0, r5, #24
   d823c:	f7ff fec5 	bl	d7fca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8240:	a803      	add	r0, sp, #12
   d8242:	f7ff f8fd 	bl	d7440 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d8246:	b00e      	add	sp, #56	; 0x38
   d8248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d824c:	000dd696 	.word	0x000dd696
   d8250:	000dd634 	.word	0x000dd634
   d8254:	000dd6bc 	.word	0x000dd6bc
   d8258:	000dd6d9 	.word	0x000dd6d9

000d825c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d825c:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d825e:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8260:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d8262:	dd06      	ble.n	d8272 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d8264:	2154      	movs	r1, #84	; 0x54
   d8266:	4369      	muls	r1, r5
   d8268:	6800      	ldr	r0, [r0, #0]
   d826a:	f7fe fe4f 	bl	d6f0c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d826e:	b920      	cbnz	r0, d827a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d8270:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8272:	6800      	ldr	r0, [r0, #0]
   d8274:	f7fe fe42 	bl	d6efc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8278:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d827a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d827c:	60a5      	str	r5, [r4, #8]
        return true;
   d827e:	2001      	movs	r0, #1
    }
   d8280:	bd38      	pop	{r3, r4, r5, pc}

000d8282 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d8282:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d8284:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d8286:	b0c0      	sub	sp, #256	; 0x100
   d8288:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d828a:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d828c:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d828e:	a801      	add	r0, sp, #4
   d8290:	2100      	movs	r1, #0
   d8292:	f002 fc90 	bl	dabb6 <memset>
   d8296:	a803      	add	r0, sp, #12
   d8298:	f7ff fa80 	bl	d779c <_ZN8particle18BleAdvertisingDataC1Ev>
   d829c:	a80c      	add	r0, sp, #48	; 0x30
   d829e:	f7ff fa7d 	bl	d779c <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d82a2:	462a      	mov	r2, r5
   d82a4:	ab01      	add	r3, sp, #4
   d82a6:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d82aa:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d82ac:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d82ae:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d82b0:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d82b2:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d82b4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d82b8:	a80c      	add	r0, sp, #48	; 0x30
   d82ba:	f7ff fa00 	bl	d76be <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d82be:	89aa      	ldrh	r2, [r5, #12]
   d82c0:	6869      	ldr	r1, [r5, #4]
   d82c2:	a803      	add	r0, sp, #12
   d82c4:	f7ff f9fb 	bl	d76be <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d82c8:	69a5      	ldr	r5, [r4, #24]
   d82ca:	b11d      	cbz	r5, d82d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d82cc:	69e1      	ldr	r1, [r4, #28]
   d82ce:	a801      	add	r0, sp, #4
   d82d0:	47a8      	blx	r5
   d82d2:	e03c      	b.n	d834e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d82d4:	68e0      	ldr	r0, [r4, #12]
   d82d6:	b198      	cbz	r0, d8300 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d82d8:	6963      	ldr	r3, [r4, #20]
   d82da:	6922      	ldr	r2, [r4, #16]
   d82dc:	4293      	cmp	r3, r2
   d82de:	d239      	bcs.n	d8354 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d82e0:	1c5a      	adds	r2, r3, #1
   d82e2:	6162      	str	r2, [r4, #20]
   d82e4:	fb06 0003 	mla	r0, r6, r3, r0
   d82e8:	2251      	movs	r2, #81	; 0x51
   d82ea:	a901      	add	r1, sp, #4
   d82ec:	f002 fc3d 	bl	dab6a <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d82f0:	6962      	ldr	r2, [r4, #20]
   d82f2:	6923      	ldr	r3, [r4, #16]
   d82f4:	429a      	cmp	r2, r3
   d82f6:	d32d      	bcc.n	d8354 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d82f8:	4628      	mov	r0, r5
   d82fa:	f7fe fba7 	bl	d6a4c <hal_ble_gap_stop_scan>
   d82fe:	e029      	b.n	d8354 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d8300:	4632      	mov	r2, r6
   d8302:	a901      	add	r1, sp, #4
   d8304:	a816      	add	r0, sp, #88	; 0x58
   d8306:	f002 fc30 	bl	dab6a <memcpy>
   d830a:	4632      	mov	r2, r6
   d830c:	a916      	add	r1, sp, #88	; 0x58
   d830e:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8310:	6865      	ldr	r5, [r4, #4]
   d8312:	f002 fc2a 	bl	dab6a <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8316:	68a3      	ldr	r3, [r4, #8]
   d8318:	429d      	cmp	r5, r3
   d831a:	db04      	blt.n	d8326 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d831c:	1c69      	adds	r1, r5, #1
   d831e:	4620      	mov	r0, r4
   d8320:	f7ff ff9c 	bl	d825c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8324:	b1b0      	cbz	r0, d8354 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8326:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8328:	6822      	ldr	r2, [r4, #0]
   d832a:	2654      	movs	r6, #84	; 0x54
   d832c:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8330:	fb06 2203 	mla	r2, r6, r3, r2
   d8334:	1b52      	subs	r2, r2, r5
   d8336:	4629      	mov	r1, r5
   d8338:	19a8      	adds	r0, r5, r6
   d833a:	f002 fc21 	bl	dab80 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d833e:	4632      	mov	r2, r6
   d8340:	a92b      	add	r1, sp, #172	; 0xac
   d8342:	4628      	mov	r0, r5
   d8344:	f002 fc11 	bl	dab6a <memcpy>
    ++size_;
   d8348:	6863      	ldr	r3, [r4, #4]
   d834a:	3301      	adds	r3, #1
   d834c:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d834e:	6963      	ldr	r3, [r4, #20]
   d8350:	3301      	adds	r3, #1
   d8352:	6163      	str	r3, [r4, #20]
        }
    }
   d8354:	b040      	add	sp, #256	; 0x100
   d8356:	bd70      	pop	{r4, r5, r6, pc}

000d8358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8358:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d835a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d835c:	4606      	mov	r6, r0
   d835e:	460c      	mov	r4, r1
   d8360:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8362:	d914      	bls.n	d838e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d8364:	4290      	cmp	r0, r2
   d8366:	d213      	bcs.n	d8390 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d8368:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d836c:	1a6c      	subs	r4, r5, r1
   d836e:	f1a1 0708 	sub.w	r7, r1, #8
   d8372:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d8374:	42af      	cmp	r7, r5
   d8376:	d018      	beq.n	d83aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d8378:	b11c      	cbz	r4, d8382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d837a:	4629      	mov	r1, r5
   d837c:	4620      	mov	r0, r4
   d837e:	f7ff fceb 	bl	d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8382:	1d28      	adds	r0, r5, #4
   d8384:	f7ff fcf2 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8388:	3d08      	subs	r5, #8
   d838a:	3c08      	subs	r4, #8
   d838c:	e7f2      	b.n	d8374 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d838e:	d00c      	beq.n	d83aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8390:	42ac      	cmp	r4, r5
   d8392:	d00a      	beq.n	d83aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d8394:	b11e      	cbz	r6, d839e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d8396:	4621      	mov	r1, r4
   d8398:	4630      	mov	r0, r6
   d839a:	f7ff fcdd 	bl	d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d839e:	1d20      	adds	r0, r4, #4
   d83a0:	f7ff fce4 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d83a4:	3408      	adds	r4, #8
   d83a6:	3608      	adds	r6, #8
   d83a8:	e7f2      	b.n	d8390 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d83aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d83ac:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d83ae:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d83b0:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d83b2:	dd0b      	ble.n	d83cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d83b4:	00f0      	lsls	r0, r6, #3
   d83b6:	f7fe fd99 	bl	d6eec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d83ba:	4604      	mov	r4, r0
   d83bc:	b170      	cbz	r0, d83dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d83be:	e895 0006 	ldmia.w	r5, {r1, r2}
   d83c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d83c6:	f7ff ffc7 	bl	d8358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d83ca:	e000      	b.n	d83ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d83cc:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d83ce:	6828      	ldr	r0, [r5, #0]
   d83d0:	f7fe fd94 	bl	d6efc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d83d4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d83d6:	60ae      	str	r6, [r5, #8]
        return true;
   d83d8:	2001      	movs	r0, #1
   d83da:	bd70      	pop	{r4, r5, r6, pc}
    }
   d83dc:	bd70      	pop	{r4, r5, r6, pc}

000d83de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d83de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d83e2:	2300      	movs	r3, #0
   d83e4:	6003      	str	r3, [r0, #0]
   d83e6:	6043      	str	r3, [r0, #4]
   d83e8:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d83ea:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d83ec:	6849      	ldr	r1, [r1, #4]
   d83ee:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d83f0:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d83f2:	dd13      	ble.n	d841c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d83f4:	f7ff ffda 	bl	d83ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d83f8:	b180      	cbz	r0, d841c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d83fa:	6835      	ldr	r5, [r6, #0]
   d83fc:	6873      	ldr	r3, [r6, #4]
   d83fe:	6827      	ldr	r7, [r4, #0]
   d8400:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d8404:	4545      	cmp	r5, r8
   d8406:	d007      	beq.n	d8418 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d8408:	b11f      	cbz	r7, d8412 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d840a:	4629      	mov	r1, r5
   d840c:	4638      	mov	r0, r7
   d840e:	f7ff fca3 	bl	d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d8412:	3508      	adds	r5, #8
   d8414:	3708      	adds	r7, #8
   d8416:	e7f5      	b.n	d8404 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d8418:	6873      	ldr	r3, [r6, #4]
   d841a:	6063      	str	r3, [r4, #4]
    }
}
   d841c:	4620      	mov	r0, r4
   d841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8422 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d8422:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d8424:	680b      	ldr	r3, [r1, #0]
   d8426:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d8428:	4605      	mov	r5, r0
   d842a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d842c:	b933      	cbnz	r3, d843c <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d842e:	4608      	mov	r0, r1
   d8430:	f7fe ffaa 	bl	d7388 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d8434:	b910      	cbnz	r0, d843c <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d8436:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d8438:	2201      	movs	r2, #1
   d843a:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d843c:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d843e:	4628      	mov	r0, r5
   d8440:	310c      	adds	r1, #12
   d8442:	f7ff ffcc 	bl	d83de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d8446:	4628      	mov	r0, r5
   d8448:	bd38      	pop	{r3, r4, r5, pc}

000d844a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d844a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d844c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d844e:	6845      	ldr	r5, [r0, #4]
   d8450:	4668      	mov	r0, sp
   d8452:	f7ff fc81 	bl	d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8456:	6861      	ldr	r1, [r4, #4]
   d8458:	68a3      	ldr	r3, [r4, #8]
   d845a:	4299      	cmp	r1, r3
   d845c:	db05      	blt.n	d846a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d845e:	3101      	adds	r1, #1
   d8460:	4620      	mov	r0, r4
   d8462:	f7ff ffa3 	bl	d83ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8466:	4606      	mov	r6, r0
   d8468:	b198      	cbz	r0, d8492 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d846a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d846c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d846e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8472:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8476:	4629      	mov	r1, r5
   d8478:	f105 0008 	add.w	r0, r5, #8
   d847c:	f7ff ff6c 	bl	d8358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8480:	b11d      	cbz	r5, d848a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8482:	4669      	mov	r1, sp
   d8484:	4628      	mov	r0, r5
   d8486:	f7ff fc67 	bl	d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d848a:	6863      	ldr	r3, [r4, #4]
   d848c:	3301      	adds	r3, #1
   d848e:	6063      	str	r3, [r4, #4]
   d8490:	2601      	movs	r6, #1
   d8492:	a801      	add	r0, sp, #4
   d8494:	f7ff fc6a 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8498:	4630      	mov	r0, r6
   d849a:	b002      	add	sp, #8
   d849c:	bd70      	pop	{r4, r5, r6, pc}

000d849e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d849e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d84a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d84a2:	4606      	mov	r6, r0
   d84a4:	460c      	mov	r4, r1
   d84a6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d84a8:	d914      	bls.n	d84d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d84aa:	4290      	cmp	r0, r2
   d84ac:	d213      	bcs.n	d84d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d84ae:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d84b2:	1a6c      	subs	r4, r5, r1
   d84b4:	f1a1 0708 	sub.w	r7, r1, #8
   d84b8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d84ba:	42af      	cmp	r7, r5
   d84bc:	d018      	beq.n	d84f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d84be:	b11c      	cbz	r4, d84c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d84c0:	4629      	mov	r1, r5
   d84c2:	4620      	mov	r0, r4
   d84c4:	f7ff fc3a 	bl	d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d84c8:	1d28      	adds	r0, r5, #4
   d84ca:	f7ff fc4f 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d84ce:	3d08      	subs	r5, #8
   d84d0:	3c08      	subs	r4, #8
   d84d2:	e7f2      	b.n	d84ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d84d4:	d00c      	beq.n	d84f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d84d6:	42ac      	cmp	r4, r5
   d84d8:	d00a      	beq.n	d84f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d84da:	b11e      	cbz	r6, d84e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d84dc:	4621      	mov	r1, r4
   d84de:	4630      	mov	r0, r6
   d84e0:	f7ff fc2c 	bl	d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d84e4:	1d20      	adds	r0, r4, #4
   d84e6:	f7ff fc41 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d84ea:	3408      	adds	r4, #8
   d84ec:	3608      	adds	r6, #8
   d84ee:	e7f2      	b.n	d84d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d84f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d84f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d84f2:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d84f4:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d84f6:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d84f8:	dd0b      	ble.n	d8512 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d84fa:	00f0      	lsls	r0, r6, #3
   d84fc:	f7fe fcf6 	bl	d6eec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8500:	4604      	mov	r4, r0
   d8502:	b170      	cbz	r0, d8522 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8504:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8508:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d850c:	f7ff ffc7 	bl	d849e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8510:	e000      	b.n	d8514 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8512:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8514:	6828      	ldr	r0, [r5, #0]
   d8516:	f7fe fcf1 	bl	d6efc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d851a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d851c:	60ae      	str	r6, [r5, #8]
        return true;
   d851e:	2001      	movs	r0, #1
   d8520:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8522:	bd70      	pop	{r4, r5, r6, pc}

000d8524 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d8524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8528:	2300      	movs	r3, #0
   d852a:	6003      	str	r3, [r0, #0]
   d852c:	6043      	str	r3, [r0, #4]
   d852e:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d8530:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d8532:	6849      	ldr	r1, [r1, #4]
   d8534:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d8536:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d8538:	dd13      	ble.n	d8562 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d853a:	f7ff ffda 	bl	d84f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d853e:	b180      	cbz	r0, d8562 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d8540:	6835      	ldr	r5, [r6, #0]
   d8542:	6873      	ldr	r3, [r6, #4]
   d8544:	6827      	ldr	r7, [r4, #0]
   d8546:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d854a:	4545      	cmp	r5, r8
   d854c:	d007      	beq.n	d855e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d854e:	b11f      	cbz	r7, d8558 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d8550:	4629      	mov	r1, r5
   d8552:	4638      	mov	r0, r7
   d8554:	f7ff fbf2 	bl	d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d8558:	3508      	adds	r5, #8
   d855a:	3708      	adds	r7, #8
   d855c:	e7f5      	b.n	d854a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d855e:	6873      	ldr	r3, [r6, #4]
   d8560:	6063      	str	r3, [r4, #4]
    }
}
   d8562:	4620      	mov	r0, r4
   d8564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8568 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d8568:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d856a:	680b      	ldr	r3, [r1, #0]
   d856c:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d856e:	b085      	sub	sp, #20
   d8570:	4605      	mov	r5, r0
   d8572:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d8574:	b92b      	cbnz	r3, d8582 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d8576:	a801      	add	r0, sp, #4
   d8578:	f7ff ff53 	bl	d8422 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d857c:	a801      	add	r0, sp, #4
   d857e:	f7ff fc0f 	bl	d7da0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d8582:	6823      	ldr	r3, [r4, #0]
   d8584:	7adb      	ldrb	r3, [r3, #11]
   d8586:	b93b      	cbnz	r3, d8598 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d8588:	4621      	mov	r1, r4
   d858a:	a801      	add	r0, sp, #4
   d858c:	f7ff fa7e 	bl	d7a8c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d8590:	b910      	cbnz	r0, d8598 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d8592:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d8594:	2201      	movs	r2, #1
   d8596:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8598:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d859a:	4628      	mov	r0, r5
   d859c:	3118      	adds	r1, #24
   d859e:	f7ff ffc1 	bl	d8524 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d85a2:	4628      	mov	r0, r5
   d85a4:	b005      	add	sp, #20
   d85a6:	bd30      	pop	{r4, r5, pc}

000d85a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d85a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d85ac:	460d      	mov	r5, r1
   d85ae:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d85b0:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d85b4:	4617      	mov	r7, r2
   d85b6:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d85b8:	4642      	mov	r2, r8
   d85ba:	2100      	movs	r1, #0
   d85bc:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d85be:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d85c0:	f002 faf9 	bl	dabb6 <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d85c4:	6869      	ldr	r1, [r5, #4]
   d85c6:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d85c8:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d85ca:	ab02      	add	r3, sp, #8
   d85cc:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d85ce:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d85d2:	ab05      	add	r3, sp, #20
   d85d4:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d85d8:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d85dc:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d85e0:	f7ff fb1e 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d85e4:	4b34      	ldr	r3, [pc, #208]	; (d86b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d85e6:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d85e8:	f7ff fb1a 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d85ec:	2200      	movs	r2, #0
   d85ee:	6803      	ldr	r3, [r0, #0]
   d85f0:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d85f2:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d85f4:	a804      	add	r0, sp, #16
   d85f6:	f7fe fa79 	bl	d6aec <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d85fa:	4607      	mov	r7, r0
   d85fc:	b120      	cbz	r0, d8608 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d85fe:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8600:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8604:	801a      	strh	r2, [r3, #0]
        return ret;
   d8606:	e053      	b.n	d86b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d8608:	4629      	mov	r1, r5
   d860a:	4630      	mov	r0, r6
   d860c:	f7ff fab0 	bl	d7b70 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8610:	f7ff fb06 	bl	d7c20 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8614:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d8616:	6803      	ldr	r3, [r0, #0]
   d8618:	ad12      	add	r5, sp, #72	; 0x48
   d861a:	f103 0818 	add.w	r8, r3, #24
   d861e:	f851 3b04 	ldr.w	r3, [r1], #4
   d8622:	f845 3d20 	str.w	r3, [r5, #-32]!
   d8626:	a80b      	add	r0, sp, #44	; 0x2c
   d8628:	f7ff fb81 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d862c:	4629      	mov	r1, r5
   d862e:	4640      	mov	r0, r8
   d8630:	f7ff fd31 	bl	d8096 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d8634:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8636:	a80b      	add	r0, sp, #44	; 0x2c
   d8638:	f7ff fb98 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d863c:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d863e:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8640:	f1b8 0f00 	cmp.w	r8, #0
   d8644:	d114      	bne.n	d8670 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d8646:	4b1d      	ldr	r3, [pc, #116]	; (d86bc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d8648:	9300      	str	r3, [sp, #0]
   d864a:	462a      	mov	r2, r5
   d864c:	4643      	mov	r3, r8
   d864e:	491c      	ldr	r1, [pc, #112]	; (d86c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d8650:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d8654:	2032      	movs	r0, #50	; 0x32
   d8656:	f7fe fb7d 	bl	d6d54 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d865a:	6833      	ldr	r3, [r6, #0]
   d865c:	4641      	mov	r1, r8
   d865e:	8818      	ldrh	r0, [r3, #0]
   d8660:	f7fe f9fe 	bl	d6a60 <hal_ble_gap_disconnect>
   d8664:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d8666:	4817      	ldr	r0, [pc, #92]	; (d86c4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8668:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d866c:	801a      	strh	r2, [r3, #0]
   d866e:	e01f      	b.n	d86b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d8670:	4b15      	ldr	r3, [pc, #84]	; (d86c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d8672:	9300      	str	r3, [sp, #0]
   d8674:	462a      	mov	r2, r5
   d8676:	463b      	mov	r3, r7
   d8678:	4911      	ldr	r1, [pc, #68]	; (d86c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d867a:	970b      	str	r7, [sp, #44]	; 0x2c
   d867c:	4648      	mov	r0, r9
   d867e:	f7fe fb69 	bl	d6d54 <log_message>
    if (automatic) {
   d8682:	b1a4      	cbz	r4, d86ae <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d8684:	4631      	mov	r1, r6
   d8686:	4628      	mov	r0, r5
   d8688:	f7ff ff6e 	bl	d8568 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d868c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d868e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8690:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d8694:	42a6      	cmp	r6, r4
   d8696:	d005      	beq.n	d86a4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d8698:	4620      	mov	r0, r4
   d869a:	2101      	movs	r1, #1
   d869c:	f7ff f9b2 	bl	d7a04 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d86a0:	3408      	adds	r4, #8
   d86a2:	e7f7      	b.n	d8694 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d86a4:	4628      	mov	r0, r5
   d86a6:	f7ff fb8d 	bl	d7dc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d86aa:	2000      	movs	r0, #0
   d86ac:	e000      	b.n	d86b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d86ae:	4620      	mov	r0, r4
}
   d86b0:	b013      	add	sp, #76	; 0x4c
   d86b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d86b6:	bf00      	nop
   d86b8:	000d8115 	.word	0x000d8115
   d86bc:	000dd6f8 	.word	0x000dd6f8
   d86c0:	000dd634 	.word	0x000dd634
   d86c4:	fffffefc 	.word	0xfffffefc
   d86c8:	000dd714 	.word	0x000dd714

000d86cc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d86cc:	b570      	push	{r4, r5, r6, lr}
   d86ce:	4604      	mov	r4, r0
   d86d0:	4615      	mov	r5, r2
   d86d2:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d86d4:	f7ff fbb6 	bl	d7e44 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d86d8:	4633      	mov	r3, r6
   d86da:	2200      	movs	r2, #0
   d86dc:	4629      	mov	r1, r5
   d86de:	4620      	mov	r0, r4
   d86e0:	f7ff ff62 	bl	d85a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d86e4:	4620      	mov	r0, r4
   d86e6:	bd70      	pop	{r4, r5, r6, pc}

000d86e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d86e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d86ea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d86ec:	6845      	ldr	r5, [r0, #4]
   d86ee:	4668      	mov	r0, sp
   d86f0:	f7ff fb24 	bl	d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d86f4:	6861      	ldr	r1, [r4, #4]
   d86f6:	68a3      	ldr	r3, [r4, #8]
   d86f8:	4299      	cmp	r1, r3
   d86fa:	db05      	blt.n	d8708 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d86fc:	3101      	adds	r1, #1
   d86fe:	4620      	mov	r0, r4
   d8700:	f7ff fef7 	bl	d84f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8704:	4606      	mov	r6, r0
   d8706:	b198      	cbz	r0, d8730 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d8708:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d870a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d870c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8710:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8714:	4629      	mov	r1, r5
   d8716:	f105 0008 	add.w	r0, r5, #8
   d871a:	f7ff fec0 	bl	d849e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d871e:	b11d      	cbz	r5, d8728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8720:	4669      	mov	r1, sp
   d8722:	4628      	mov	r0, r5
   d8724:	f7ff fb0a 	bl	d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d8728:	6863      	ldr	r3, [r4, #4]
   d872a:	3301      	adds	r3, #1
   d872c:	6063      	str	r3, [r4, #4]
   d872e:	2601      	movs	r6, #1
   d8730:	a801      	add	r0, sp, #4
   d8732:	f7ff fb1b 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8736:	4630      	mov	r0, r6
   d8738:	b002      	add	sp, #8
   d873a:	bd70      	pop	{r4, r5, r6, pc}

000d873c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d873c:	b510      	push	{r4, lr}
   d873e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8740:	6840      	ldr	r0, [r0, #4]
   d8742:	b108      	cbz	r0, d8748 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8744:	f7fb fcab 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d8748:	4620      	mov	r0, r4
   d874a:	bd10      	pop	{r4, pc}

000d874c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d874c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d874e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8750:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8752:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d8756:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d875a:	f7fe fd35 	bl	d71c8 <_ZN6StringD1Ev>
   d875e:	4668      	mov	r0, sp
   d8760:	f7ff ffec 	bl	d873c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8764:	b003      	add	sp, #12
   d8766:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d876c:	b538      	push	{r3, r4, r5, lr}
   d876e:	2300      	movs	r3, #0
   d8770:	4604      	mov	r4, r0
   d8772:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8774:	2014      	movs	r0, #20
   d8776:	460d      	mov	r5, r1
   d8778:	f7fb fc8f 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d877c:	b128      	cbz	r0, d878a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d877e:	2301      	movs	r3, #1
   d8780:	6043      	str	r3, [r0, #4]
   d8782:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8784:	4b02      	ldr	r3, [pc, #8]	; (d8790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d8786:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8788:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d878a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d878c:	4620      	mov	r0, r4
   d878e:	bd38      	pop	{r3, r4, r5, pc}
   d8790:	000dd5e8 	.word	0x000dd5e8

000d8794 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d8794:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8796:	2500      	movs	r5, #0
   d8798:	b086      	sub	sp, #24
   d879a:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d879c:	6045      	str	r5, [r0, #4]
   d879e:	4604      	mov	r4, r0
   d87a0:	2054      	movs	r0, #84	; 0x54
   d87a2:	f7fb fc7a 	bl	d409a <_Znwj>
   d87a6:	f8cd d010 	str.w	sp, [sp, #16]
   d87aa:	4606      	mov	r6, r0
   d87ac:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d87ae:	b108      	cbz	r0, d87b4 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d87b0:	f7ff f894 	bl	d78dc <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d87b4:	4631      	mov	r1, r6
   d87b6:	ab01      	add	r3, sp, #4
   d87b8:	aa02      	add	r2, sp, #8
   d87ba:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d87bc:	9505      	str	r5, [sp, #20]
   d87be:	f7ff ffd5 	bl	d876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d87c2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d87c4:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d87c6:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d87c8:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d87ca:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d87cc:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d87ce:	f7ff facd 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d87d2:	a804      	add	r0, sp, #16
   d87d4:	f7ff ffb2 	bl	d873c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d87d8:	6823      	ldr	r3, [r4, #0]
   d87da:	b90b      	cbnz	r3, d87e0 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d87dc:	f7fe fdf2 	bl	d73c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d87e0:	4620      	mov	r0, r4
   d87e2:	b006      	add	sp, #24
   d87e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d87e8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d87e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d87ec:	f8df 8104 	ldr.w	r8, [pc, #260]	; d88f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d87f0:	b08c      	sub	sp, #48	; 0x30
   d87f2:	4605      	mov	r5, r0
   d87f4:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d87f6:	2600      	movs	r6, #0
   d87f8:	682b      	ldr	r3, [r5, #0]
   d87fa:	429e      	cmp	r6, r3
   d87fc:	d275      	bcs.n	d88ea <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d87fe:	a802      	add	r0, sp, #8
   d8800:	f7ff ffc8 	bl	d8794 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d8804:	9b02      	ldr	r3, [sp, #8]
   d8806:	892a      	ldrh	r2, [r5, #8]
   d8808:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d880a:	686b      	ldr	r3, [r5, #4]
   d880c:	9802      	ldr	r0, [sp, #8]
   d880e:	242a      	movs	r4, #42	; 0x2a
   d8810:	4374      	muls	r4, r6
   d8812:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d8814:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d8816:	7e5b      	ldrb	r3, [r3, #25]
   d8818:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d881c:	bf1e      	ittt	ne
   d881e:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d8822:	f043 0302 	orrne.w	r3, r3, #2
   d8826:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d882a:	686b      	ldr	r3, [r5, #4]
   d882c:	4423      	add	r3, r4
   d882e:	7e5b      	ldrb	r3, [r3, #25]
   d8830:	075b      	lsls	r3, r3, #29
   d8832:	bf42      	ittt	mi
   d8834:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8838:	f043 0304 	orrmi.w	r3, r3, #4
   d883c:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d8840:	686b      	ldr	r3, [r5, #4]
   d8842:	4423      	add	r3, r4
   d8844:	7e5b      	ldrb	r3, [r3, #25]
   d8846:	0719      	lsls	r1, r3, #28
   d8848:	bf42      	ittt	mi
   d884a:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d884e:	f043 0308 	orrmi.w	r3, r3, #8
   d8852:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d8856:	686b      	ldr	r3, [r5, #4]
   d8858:	4423      	add	r3, r4
   d885a:	7e5b      	ldrb	r3, [r3, #25]
   d885c:	06da      	lsls	r2, r3, #27
   d885e:	bf42      	ittt	mi
   d8860:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8864:	f043 0310 	orrmi.w	r3, r3, #16
   d8868:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d886c:	686b      	ldr	r3, [r5, #4]
   d886e:	4423      	add	r3, r4
   d8870:	7e5b      	ldrb	r3, [r3, #25]
   d8872:	069b      	lsls	r3, r3, #26
   d8874:	bf42      	ittt	mi
   d8876:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d887a:	f043 0320 	orrmi.w	r3, r3, #32
   d887e:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d8882:	6869      	ldr	r1, [r5, #4]
   d8884:	4421      	add	r1, r4
   d8886:	3104      	adds	r1, #4
   d8888:	f7fe fe8c 	bl	d75a4 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d888c:	686a      	ldr	r2, [r5, #4]
   d888e:	9b02      	ldr	r3, [sp, #8]
   d8890:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d8892:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d8894:	8be2      	ldrh	r2, [r4, #30]
   d8896:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d8898:	8c22      	ldrh	r2, [r4, #32]
   d889a:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d889c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d889e:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d88a0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d88a2:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d88a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d88a6:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d88a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d88aa:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d88ac:	6838      	ldr	r0, [r7, #0]
   d88ae:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d88b2:	a804      	add	r0, sp, #16
   d88b4:	f7ff fa42 	bl	d7d3c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d88b8:	4620      	mov	r0, r4
   d88ba:	a904      	add	r1, sp, #16
   d88bc:	f7ff ff14 	bl	d86e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d88c0:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88c2:	a805      	add	r0, sp, #20
   d88c4:	f7ff fa52 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88c8:	b954      	cbnz	r4, d88e0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d88ca:	2320      	movs	r3, #32
   d88cc:	9304      	str	r3, [sp, #16]
   d88ce:	f8cd 8000 	str.w	r8, [sp]
   d88d2:	4623      	mov	r3, r4
   d88d4:	aa04      	add	r2, sp, #16
   d88d6:	4906      	ldr	r1, [pc, #24]	; (d88f0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d88d8:	9405      	str	r4, [sp, #20]
   d88da:	2032      	movs	r0, #50	; 0x32
   d88dc:	f7fe fa3a 	bl	d6d54 <log_message>
   d88e0:	a803      	add	r0, sp, #12
   d88e2:	f7ff fa43 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d88e6:	3601      	adds	r6, #1
   d88e8:	e786      	b.n	d87f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d88ea:	b00c      	add	sp, #48	; 0x30
   d88ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d88f0:	000dd634 	.word	0x000dd634
   d88f4:	000dd731 	.word	0x000dd731

000d88f8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d88f8:	b510      	push	{r4, lr}
   d88fa:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d88fc:	6840      	ldr	r0, [r0, #4]
   d88fe:	b108      	cbz	r0, d8904 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8900:	f7fb fbcd 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d8904:	4620      	mov	r0, r4
   d8906:	bd10      	pop	{r4, pc}

000d8908 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8908:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d890a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d890c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d890e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d8912:	4668      	mov	r0, sp
   d8914:	f7ff fff0 	bl	d88f8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8918:	b003      	add	sp, #12
   d891a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8920:	b538      	push	{r3, r4, r5, lr}
   d8922:	2300      	movs	r3, #0
   d8924:	4604      	mov	r4, r0
   d8926:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8928:	2014      	movs	r0, #20
   d892a:	460d      	mov	r5, r1
   d892c:	f7fb fbb5 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8930:	b128      	cbz	r0, d893e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8932:	2301      	movs	r3, #1
   d8934:	6043      	str	r3, [r0, #4]
   d8936:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8938:	4b02      	ldr	r3, [pc, #8]	; (d8944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d893a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d893c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d893e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8940:	4620      	mov	r0, r4
   d8942:	bd38      	pop	{r3, r4, r5, pc}
   d8944:	000dd604 	.word	0x000dd604

000d8948 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d8948:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d894a:	2500      	movs	r5, #0
   d894c:	b086      	sub	sp, #24
   d894e:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8950:	6045      	str	r5, [r0, #4]
   d8952:	4604      	mov	r4, r0
   d8954:	2018      	movs	r0, #24
   d8956:	f7fb fba0 	bl	d409a <_Znwj>
   d895a:	f8cd d010 	str.w	sp, [sp, #16]
   d895e:	4606      	mov	r6, r0
   d8960:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8962:	b118      	cbz	r0, d896c <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d8964:	f7fe fd8a 	bl	d747c <_ZN8particle7BleUuidC1Ev>
   d8968:	82b5      	strh	r5, [r6, #20]
   d896a:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d896c:	4631      	mov	r1, r6
   d896e:	ab01      	add	r3, sp, #4
   d8970:	aa02      	add	r2, sp, #8
   d8972:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8974:	9505      	str	r5, [sp, #20]
   d8976:	f7ff ffd3 	bl	d8920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d897a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d897c:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d897e:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8980:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8982:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8984:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8986:	f7ff f9f1 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d898a:	a804      	add	r0, sp, #16
   d898c:	f7ff ffb4 	bl	d88f8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d8990:	6823      	ldr	r3, [r4, #0]
   d8992:	b90b      	cbnz	r3, d8998 <_ZN8particle10BleServiceC1Ev+0x50>
   d8994:	f7fe fd16 	bl	d73c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8998:	4620      	mov	r0, r4
   d899a:	b006      	add	sp, #24
   d899c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d89a0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d89a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d89a4:	f8df 8080 	ldr.w	r8, [pc, #128]	; d8a28 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d89a8:	b08c      	sub	sp, #48	; 0x30
   d89aa:	4606      	mov	r6, r0
   d89ac:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d89ae:	2500      	movs	r5, #0
   d89b0:	6833      	ldr	r3, [r6, #0]
   d89b2:	429d      	cmp	r5, r3
   d89b4:	d233      	bcs.n	d8a1e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d89b6:	a802      	add	r0, sp, #8
   d89b8:	f7ff ffc6 	bl	d8948 <_ZN8particle10BleServiceC1Ev>
   d89bc:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d89be:	6871      	ldr	r1, [r6, #4]
   d89c0:	9802      	ldr	r0, [sp, #8]
   d89c2:	436c      	muls	r4, r5
   d89c4:	4421      	add	r1, r4
   d89c6:	3104      	adds	r1, #4
   d89c8:	f7fe fdec 	bl	d75a4 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d89cc:	6873      	ldr	r3, [r6, #4]
   d89ce:	9a02      	ldr	r2, [sp, #8]
   d89d0:	4423      	add	r3, r4
   d89d2:	a902      	add	r1, sp, #8
   d89d4:	8b1b      	ldrh	r3, [r3, #24]
   d89d6:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d89d8:	6873      	ldr	r3, [r6, #4]
   d89da:	441c      	add	r4, r3
   d89dc:	8b63      	ldrh	r3, [r4, #26]
   d89de:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d89e0:	6838      	ldr	r0, [r7, #0]
   d89e2:	f100 040c 	add.w	r4, r0, #12
   d89e6:	a804      	add	r0, sp, #16
   d89e8:	f7ff f9b6 	bl	d7d58 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d89ec:	4620      	mov	r0, r4
   d89ee:	a904      	add	r1, sp, #16
   d89f0:	f7ff fd2b 	bl	d844a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d89f4:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d89f6:	a805      	add	r0, sp, #20
   d89f8:	f7ff f9b8 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89fc:	b954      	cbnz	r4, d8a14 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d89fe:	2320      	movs	r3, #32
   d8a00:	9304      	str	r3, [sp, #16]
   d8a02:	f8cd 8000 	str.w	r8, [sp]
   d8a06:	4623      	mov	r3, r4
   d8a08:	aa04      	add	r2, sp, #16
   d8a0a:	4906      	ldr	r1, [pc, #24]	; (d8a24 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d8a0c:	9405      	str	r4, [sp, #20]
   d8a0e:	2032      	movs	r0, #50	; 0x32
   d8a10:	f7fe f9a0 	bl	d6d54 <log_message>
   d8a14:	a803      	add	r0, sp, #12
   d8a16:	f7ff f9a9 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8a1a:	3501      	adds	r5, #1
   d8a1c:	e7c8      	b.n	d89b0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d8a1e:	b00c      	add	sp, #48	; 0x30
   d8a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8a24:	000dd634 	.word	0x000dd634
   d8a28:	000dd75d 	.word	0x000dd75d

000d8a2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8a2c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8a2e:	4c06      	ldr	r4, [pc, #24]	; (d8a48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8a30:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8a32:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8a34:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8a36:	f7fe f8ad 	bl	d6b94 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8a3a:	4620      	mov	r0, r4
   d8a3c:	4a03      	ldr	r2, [pc, #12]	; (d8a4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8a3e:	4904      	ldr	r1, [pc, #16]	; (d8a50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8a44:	f001 b91a 	b.w	d9c7c <__aeabi_atexit>
   d8a48:	2003e364 	.word	0x2003e364
   d8a4c:	2003d684 	.word	0x2003d684
   d8a50:	000d7379 	.word	0x000d7379

000d8a54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a56:	4606      	mov	r6, r0
   d8a58:	460d      	mov	r5, r1
   d8a5a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8a5c:	2400      	movs	r4, #0
  while (size--) {
   d8a5e:	42bd      	cmp	r5, r7
   d8a60:	d00c      	beq.n	d8a7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8a62:	6833      	ldr	r3, [r6, #0]
   d8a64:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8a68:	689b      	ldr	r3, [r3, #8]
   d8a6a:	4630      	mov	r0, r6
   d8a6c:	4798      	blx	r3
     if (chunk>=0)
   d8a6e:	2800      	cmp	r0, #0
   d8a70:	db01      	blt.n	d8a76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8a72:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8a74:	e7f3      	b.n	d8a5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8a76:	2c00      	cmp	r4, #0
   d8a78:	bf08      	it	eq
   d8a7a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8a7c:	4620      	mov	r0, r4
   d8a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8a80 <_ZN5Print5printEPKc>:
   d8a80:	b508      	push	{r3, lr}
   d8a82:	f7fd fa85 	bl	d5f90 <_ZN5Print5writeEPKc>
   d8a86:	bd08      	pop	{r3, pc}

000d8a88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8a88:	6803      	ldr	r3, [r0, #0]
   d8a8a:	689b      	ldr	r3, [r3, #8]
   d8a8c:	4718      	bx	r3

000d8a8e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8a8e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8a90:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8a92:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8a94:	f7ff fff8 	bl	d8a88 <_ZN5Print5printEc>
  n += print('\n');
   d8a98:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8a9a:	4604      	mov	r4, r0
  n += print('\n');
   d8a9c:	4628      	mov	r0, r5
   d8a9e:	f7ff fff3 	bl	d8a88 <_ZN5Print5printEc>
  return n;
}
   d8aa2:	4420      	add	r0, r4
   d8aa4:	bd38      	pop	{r3, r4, r5, pc}

000d8aa6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8aa6:	b538      	push	{r3, r4, r5, lr}
   d8aa8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8aaa:	f7fd fa71 	bl	d5f90 <_ZN5Print5writeEPKc>
   d8aae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8ab0:	4628      	mov	r0, r5
   d8ab2:	f7ff ffec 	bl	d8a8e <_ZN5Print7printlnEv>
  return n;
}
   d8ab6:	4420      	add	r0, r4
   d8ab8:	bd38      	pop	{r3, r4, r5, pc}

000d8aba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8aba:	b530      	push	{r4, r5, lr}
   d8abc:	b08b      	sub	sp, #44	; 0x2c
   d8abe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8ac0:	2100      	movs	r1, #0
   d8ac2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8ac6:	2a01      	cmp	r2, #1
   d8ac8:	bf98      	it	ls
   d8aca:	220a      	movls	r2, #10
   d8acc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8ad0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8ad4:	fb05 3312 	mls	r3, r5, r2, r3
   d8ad8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8adc:	2b09      	cmp	r3, #9
   d8ade:	bf94      	ite	ls
   d8ae0:	3330      	addls	r3, #48	; 0x30
   d8ae2:	3337      	addhi	r3, #55	; 0x37
   d8ae4:	b2db      	uxtb	r3, r3
   d8ae6:	4621      	mov	r1, r4
   d8ae8:	f804 3901 	strb.w	r3, [r4], #-1
   d8aec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8aee:	2d00      	cmp	r5, #0
   d8af0:	d1ee      	bne.n	d8ad0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8af2:	f7fd fa4d 	bl	d5f90 <_ZN5Print5writeEPKc>
}
   d8af6:	b00b      	add	sp, #44	; 0x2c
   d8af8:	bd30      	pop	{r4, r5, pc}

000d8afa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8afa:	b40c      	push	{r2, r3}
   d8afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8b00:	b087      	sub	sp, #28
   d8b02:	af00      	add	r7, sp, #0
   d8b04:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8b08:	4605      	mov	r5, r0
   d8b0a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8b0e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8b10:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8b12:	4623      	mov	r3, r4
   d8b14:	464a      	mov	r2, r9
   d8b16:	2114      	movs	r1, #20
   d8b18:	1d38      	adds	r0, r7, #4
   d8b1a:	f7fe fa1f 	bl	d6f5c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8b1e:	2813      	cmp	r0, #19
   d8b20:	d805      	bhi.n	d8b2e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8b22:	1d39      	adds	r1, r7, #4
   d8b24:	4628      	mov	r0, r5
   d8b26:	f7fd fa33 	bl	d5f90 <_ZN5Print5writeEPKc>
   d8b2a:	4604      	mov	r4, r0
   d8b2c:	e013      	b.n	d8b56 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8b2e:	f100 0308 	add.w	r3, r0, #8
   d8b32:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8b36:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8b38:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8b3c:	1c41      	adds	r1, r0, #1
   d8b3e:	4623      	mov	r3, r4
   d8b40:	464a      	mov	r2, r9
   d8b42:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8b44:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8b46:	f7fe fa09 	bl	d6f5c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8b4a:	4669      	mov	r1, sp
   d8b4c:	4628      	mov	r0, r5
   d8b4e:	f7fd fa1f 	bl	d5f90 <_ZN5Print5writeEPKc>
   d8b52:	4604      	mov	r4, r0
   d8b54:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8b56:	b11e      	cbz	r6, d8b60 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8b58:	4628      	mov	r0, r5
   d8b5a:	f7ff ff98 	bl	d8a8e <_ZN5Print7printlnEv>
   d8b5e:	4404      	add	r4, r0
    return n;
}
   d8b60:	4620      	mov	r0, r4
   d8b62:	371c      	adds	r7, #28
   d8b64:	46bd      	mov	sp, r7
   d8b66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8b6a:	b002      	add	sp, #8
   d8b6c:	4770      	bx	lr

000d8b6e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8b6e:	b510      	push	{r4, lr}
   d8b70:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d8b72:	f7fd ff43 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8b76:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8b78:	6823      	ldr	r3, [r4, #0]
   d8b7a:	4620      	mov	r0, r4
   d8b7c:	695b      	ldr	r3, [r3, #20]
   d8b7e:	4798      	blx	r3
    if (c >= 0) return c;
   d8b80:	2800      	cmp	r0, #0
   d8b82:	da08      	bge.n	d8b96 <_ZN6Stream9timedReadEv+0x28>
   d8b84:	f7fd ff3a 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d8b88:	68e3      	ldr	r3, [r4, #12]
   d8b8a:	1ac0      	subs	r0, r0, r3
   d8b8c:	68a3      	ldr	r3, [r4, #8]
   d8b8e:	4298      	cmp	r0, r3
   d8b90:	d3f2      	bcc.n	d8b78 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d8b92:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8b96:	bd10      	pop	{r4, pc}

000d8b98 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d8b98:	b570      	push	{r4, r5, r6, lr}
   d8b9a:	460d      	mov	r5, r1
  String ret;
   d8b9c:	4909      	ldr	r1, [pc, #36]	; (d8bc4 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d8b9e:	4604      	mov	r4, r0
   d8ba0:	4616      	mov	r6, r2
  String ret;
   d8ba2:	f7fe fb58 	bl	d7256 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d8ba6:	4628      	mov	r0, r5
   d8ba8:	f7ff ffe1 	bl	d8b6e <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d8bac:	2800      	cmp	r0, #0
   d8bae:	db06      	blt.n	d8bbe <_ZN6Stream15readStringUntilEc+0x26>
   d8bb0:	42b0      	cmp	r0, r6
   d8bb2:	d004      	beq.n	d8bbe <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d8bb4:	b2c1      	uxtb	r1, r0
   d8bb6:	4620      	mov	r0, r4
   d8bb8:	f7fe fba2 	bl	d7300 <_ZN6String6concatEc>
   d8bbc:	e7f3      	b.n	d8ba6 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d8bbe:	4620      	mov	r0, r4
   d8bc0:	bd70      	pop	{r4, r5, r6, pc}
   d8bc2:	bf00      	nop
   d8bc4:	000dd888 	.word	0x000dd888

000d8bc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8bc8:	4b01      	ldr	r3, [pc, #4]	; (d8bd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8bca:	4a02      	ldr	r2, [pc, #8]	; (d8bd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8bcc:	601a      	str	r2, [r3, #0]
   d8bce:	4770      	bx	lr
   d8bd0:	2003e368 	.word	0x2003e368
   d8bd4:	000dd857 	.word	0x000dd857

000d8bd8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d8bda:	4b14      	ldr	r3, [pc, #80]	; (d8c2c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8bdc:	4f14      	ldr	r7, [pc, #80]	; (d8c30 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d8bde:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d8be0:	4b14      	ldr	r3, [pc, #80]	; (d8c34 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d8be2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d8be4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d8be6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d8be8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d8bea:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8bec:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8bee:	d01b      	beq.n	d8c28 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d8bf0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d8bf2:	ad01      	add	r5, sp, #4
   d8bf4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8bf8:	f001 feac 	bl	da954 <localtime>
	calendar_time->tm_year += 1900;
   d8bfc:	6943      	ldr	r3, [r0, #20]
   d8bfe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8c02:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8c04:	4604      	mov	r4, r0
   d8c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8c0e:	f8d4 e000 	ldr.w	lr, [r4]
   d8c12:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8c16:	ad01      	add	r5, sp, #4
   d8c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8c1a:	4c07      	ldr	r4, [pc, #28]	; (d8c38 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d8c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8c22:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8c24:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8c28:	b00b      	add	sp, #44	; 0x2c
   d8c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8c2c:	2003e39c 	.word	0x2003e39c
   d8c30:	2003e398 	.word	0x2003e398
   d8c34:	2003e394 	.word	0x2003e394
   d8c38:	2003e36c 	.word	0x2003e36c

000d8c3c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8c3c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8c3e:	2000      	movs	r0, #0
   d8c40:	f7fe f944 	bl	d6ecc <spark_sync_time_pending>
   d8c44:	b128      	cbz	r0, d8c52 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8c46:	f7fe f929 	bl	d6e9c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8c4a:	f080 0001 	eor.w	r0, r0, #1
   d8c4e:	b2c0      	uxtb	r0, r0
   d8c50:	bd08      	pop	{r3, pc}
   d8c52:	2001      	movs	r0, #1
    }
   d8c54:	bd08      	pop	{r3, pc}
	...

000d8c58 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d8c58:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8c5a:	f7ff ffbd 	bl	d8bd8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d8c5e:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <_ZN9TimeClass5monthEl+0x10>)
   d8c60:	6918      	ldr	r0, [r3, #16]
}
   d8c62:	3001      	adds	r0, #1
   d8c64:	bd08      	pop	{r3, pc}
   d8c66:	bf00      	nop
   d8c68:	2003e36c 	.word	0x2003e36c

000d8c6c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8c6c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8c6e:	2000      	movs	r0, #0
   d8c70:	f7fd fed4 	bl	d6a1c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8c74:	4604      	mov	r4, r0
   d8c76:	b968      	cbnz	r0, d8c94 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8c78:	f7fe f874 	bl	d6d64 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8c7c:	2801      	cmp	r0, #1
   d8c7e:	d10b      	bne.n	d8c98 <_ZN9TimeClass7isValidEv+0x2c>
   d8c80:	4620      	mov	r0, r4
   d8c82:	f7fe f897 	bl	d6db4 <system_thread_get_state>
   d8c86:	b938      	cbnz	r0, d8c98 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8c88:	f7ff ffd8 	bl	d8c3c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8c8c:	b930      	cbnz	r0, d8c9c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8c8e:	f7fe f8fd 	bl	d6e8c <spark_process>
   d8c92:	e7f9      	b.n	d8c88 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8c94:	2001      	movs	r0, #1
   d8c96:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8c98:	2000      	movs	r0, #0
   d8c9a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8c9c:	f7ff ffce 	bl	d8c3c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8ca0:	2000      	movs	r0, #0
   d8ca2:	f7fd febb 	bl	d6a1c <HAL_RTC_Time_Is_Valid>
   d8ca6:	3000      	adds	r0, #0
   d8ca8:	bf18      	it	ne
   d8caa:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8cac:	bd10      	pop	{r4, pc}

000d8cae <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8cae:	b508      	push	{r3, lr}
    (void)isValid();
   d8cb0:	f7ff ffdc 	bl	d8c6c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8cb8:	f7fd bea8 	b.w	d6a0c <HAL_RTC_Get_UnixTime>

000d8cbc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8cbc:	b508      	push	{r3, lr}
	return hour(now());
   d8cbe:	f7ff fff6 	bl	d8cae <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8cc2:	f7ff ff89 	bl	d8bd8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d8cc6:	4b01      	ldr	r3, [pc, #4]	; (d8ccc <_ZN9TimeClass4hourEv+0x10>)
   d8cc8:	6898      	ldr	r0, [r3, #8]
   d8cca:	bd08      	pop	{r3, pc}
   d8ccc:	2003e36c 	.word	0x2003e36c

000d8cd0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d8cd0:	b508      	push	{r3, lr}
	return minute(now());
   d8cd2:	f7ff ffec 	bl	d8cae <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8cd6:	f7ff ff7f 	bl	d8bd8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d8cda:	4b01      	ldr	r3, [pc, #4]	; (d8ce0 <_ZN9TimeClass6minuteEv+0x10>)
   d8cdc:	6858      	ldr	r0, [r3, #4]
   d8cde:	bd08      	pop	{r3, pc}
   d8ce0:	2003e36c 	.word	0x2003e36c

000d8ce4 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d8ce4:	b508      	push	{r3, lr}
	return second(now());
   d8ce6:	f7ff ffe2 	bl	d8cae <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8cea:	f7ff ff75 	bl	d8bd8 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d8cee:	4b01      	ldr	r3, [pc, #4]	; (d8cf4 <_ZN9TimeClass6secondEv+0x10>)
   d8cf0:	6818      	ldr	r0, [r3, #0]
   d8cf2:	bd08      	pop	{r3, pc}
   d8cf4:	2003e36c 	.word	0x2003e36c

000d8cf8 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d8cf8:	b508      	push	{r3, lr}
	return day(now());
   d8cfa:	f7ff ffd8 	bl	d8cae <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8cfe:	f7ff ff6b 	bl	d8bd8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d8d02:	4b01      	ldr	r3, [pc, #4]	; (d8d08 <_ZN9TimeClass3dayEv+0x10>)
   d8d04:	68d8      	ldr	r0, [r3, #12]
   d8d06:	bd08      	pop	{r3, pc}
   d8d08:	2003e36c 	.word	0x2003e36c

000d8d0c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d8d0c:	b508      	push	{r3, lr}
	return month(now());
   d8d0e:	f7ff ffce 	bl	d8cae <_ZN9TimeClass3nowEv>
}
   d8d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d8d16:	f7ff bf9f 	b.w	d8c58 <_ZN9TimeClass5monthEl>
	...

000d8d1c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d8d1c:	b508      	push	{r3, lr}
	return year(now());
   d8d1e:	f7ff ffc6 	bl	d8cae <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8d22:	f7ff ff59 	bl	d8bd8 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d8d26:	4b01      	ldr	r3, [pc, #4]	; (d8d2c <_ZN9TimeClass4yearEv+0x10>)
   d8d28:	6958      	ldr	r0, [r3, #20]
   d8d2a:	bd08      	pop	{r3, pc}
   d8d2c:	2003e36c 	.word	0x2003e36c

000d8d30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8d30:	4b02      	ldr	r3, [pc, #8]	; (d8d3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8d32:	681a      	ldr	r2, [r3, #0]
   d8d34:	4b02      	ldr	r3, [pc, #8]	; (d8d40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8d36:	601a      	str	r2, [r3, #0]
   d8d38:	4770      	bx	lr
   d8d3a:	bf00      	nop
   d8d3c:	2003d594 	.word	0x2003d594
   d8d40:	2003e390 	.word	0x2003e390

000d8d44 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8d44:	2100      	movs	r1, #0
   d8d46:	f7fe b81d 	b.w	d6d84 <system_delay_ms>

000d8d4a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8d4a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d8d4c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8d4e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d8d50:	b113      	cbz	r3, d8d58 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8d52:	2203      	movs	r2, #3
   d8d54:	4601      	mov	r1, r0
   d8d56:	4798      	blx	r3
    }
   d8d58:	4620      	mov	r0, r4
   d8d5a:	bd10      	pop	{r4, pc}

000d8d5c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8d5c:	b510      	push	{r4, lr}
   d8d5e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8d60:	f7ff fff3 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
   d8d64:	4620      	mov	r0, r4
   d8d66:	bd10      	pop	{r4, pc}

000d8d68 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d8d68:	b513      	push	{r0, r1, r4, lr}
   d8d6a:	460b      	mov	r3, r1
   d8d6c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d6e:	c803      	ldmia	r0, {r0, r1}
   d8d70:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8d74:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8d78:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8d7c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d8d80:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8d84:	b002      	add	sp, #8
   d8d86:	bd10      	pop	{r4, pc}

000d8d88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8d88:	4803      	ldr	r0, [pc, #12]	; (d8d98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8d8a:	4a04      	ldr	r2, [pc, #16]	; (d8d9c <_GLOBAL__sub_I_RGB+0x14>)
   d8d8c:	4904      	ldr	r1, [pc, #16]	; (d8da0 <_GLOBAL__sub_I_RGB+0x18>)
   d8d8e:	2300      	movs	r3, #0
   d8d90:	6083      	str	r3, [r0, #8]
   d8d92:	f000 bf73 	b.w	d9c7c <__aeabi_atexit>
   d8d96:	bf00      	nop
   d8d98:	2003e3a0 	.word	0x2003e3a0
   d8d9c:	2003d684 	.word	0x2003d684
   d8da0:	000d8d5d 	.word	0x000d8d5d

000d8da4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8da4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8da6:	4b0c      	ldr	r3, [pc, #48]	; (d8dd8 <serialEventRun+0x34>)
   d8da8:	b133      	cbz	r3, d8db8 <serialEventRun+0x14>
   d8daa:	f000 fc1b 	bl	d95e4 <_Z16_fetch_usbserialv>
   d8dae:	6803      	ldr	r3, [r0, #0]
   d8db0:	691b      	ldr	r3, [r3, #16]
   d8db2:	4798      	blx	r3
   d8db4:	2800      	cmp	r0, #0
   d8db6:	dc09      	bgt.n	d8dcc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8db8:	4b08      	ldr	r3, [pc, #32]	; (d8ddc <serialEventRun+0x38>)
   d8dba:	b163      	cbz	r3, d8dd6 <serialEventRun+0x32>
   d8dbc:	f000 fce0 	bl	d9780 <_Z22__fetch_global_Serial1v>
   d8dc0:	6803      	ldr	r3, [r0, #0]
   d8dc2:	691b      	ldr	r3, [r3, #16]
   d8dc4:	4798      	blx	r3
   d8dc6:	2800      	cmp	r0, #0
   d8dc8:	dc03      	bgt.n	d8dd2 <serialEventRun+0x2e>
   d8dca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8dcc:	f3af 8000 	nop.w
   d8dd0:	e7f2      	b.n	d8db8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8dd2:	f3af 8000 	nop.w
   d8dd6:	bd08      	pop	{r3, pc}
	...

000d8de0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8de0:	b508      	push	{r3, lr}
	serialEventRun();
   d8de2:	f7ff ffdf 	bl	d8da4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8de6:	f7fd fe09 	bl	d69fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8dea:	4b01      	ldr	r3, [pc, #4]	; (d8df0 <_post_loop+0x10>)
   d8dec:	6018      	str	r0, [r3, #0]
   d8dee:	bd08      	pop	{r3, pc}
   d8df0:	2003e708 	.word	0x2003e708

000d8df4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8df4:	4802      	ldr	r0, [pc, #8]	; (d8e00 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8df6:	4a03      	ldr	r2, [pc, #12]	; (d8e04 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8df8:	4903      	ldr	r1, [pc, #12]	; (d8e08 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8dfa:	1a12      	subs	r2, r2, r0
   d8dfc:	f001 beb5 	b.w	dab6a <memcpy>
   d8e00:	2003f400 	.word	0x2003f400
   d8e04:	2003f404 	.word	0x2003f404
   d8e08:	000dde20 	.word	0x000dde20

000d8e0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8e0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8e0e:	2300      	movs	r3, #0
   d8e10:	9300      	str	r3, [sp, #0]
   d8e12:	461a      	mov	r2, r3
   d8e14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8e18:	f7fd ffde 	bl	d6dd8 <system_ctrl_set_result>
}
   d8e1c:	b003      	add	sp, #12
   d8e1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8e24 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8e24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8e26:	8843      	ldrh	r3, [r0, #2]
   d8e28:	2b0a      	cmp	r3, #10
   d8e2a:	d008      	beq.n	d8e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8e2c:	2b50      	cmp	r3, #80	; 0x50
   d8e2e:	d109      	bne.n	d8e44 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8e30:	4b09      	ldr	r3, [pc, #36]	; (d8e58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8e32:	681b      	ldr	r3, [r3, #0]
   d8e34:	b13b      	cbz	r3, d8e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8e36:	b003      	add	sp, #12
   d8e38:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8e3c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8e3e:	f7ff ffe5 	bl	d8e0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8e42:	e006      	b.n	d8e52 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8e44:	2300      	movs	r3, #0
   d8e46:	9300      	str	r3, [sp, #0]
   d8e48:	461a      	mov	r2, r3
   d8e4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8e4e:	f7fd ffc3 	bl	d6dd8 <system_ctrl_set_result>
        break;
    }
}
   d8e52:	b003      	add	sp, #12
   d8e54:	f85d fb04 	ldr.w	pc, [sp], #4
   d8e58:	2003e3b0 	.word	0x2003e3b0

000d8e5c <module_user_init_hook>:

void module_user_init_hook()
{
   d8e5c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8e5e:	4c10      	ldr	r4, [pc, #64]	; (d8ea0 <module_user_init_hook+0x44>)
   d8e60:	4d10      	ldr	r5, [pc, #64]	; (d8ea4 <module_user_init_hook+0x48>)
   d8e62:	6823      	ldr	r3, [r4, #0]
   d8e64:	42ab      	cmp	r3, r5
   d8e66:	4b10      	ldr	r3, [pc, #64]	; (d8ea8 <module_user_init_hook+0x4c>)
   d8e68:	bf0c      	ite	eq
   d8e6a:	2201      	moveq	r2, #1
   d8e6c:	2200      	movne	r2, #0
   d8e6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8e70:	d002      	beq.n	d8e78 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8e72:	f7ff ffbf 	bl	d8df4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8e76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8e78:	f7fd fda8 	bl	d69cc <HAL_RNG_GetRandomNumber>
   d8e7c:	4604      	mov	r4, r0
    srand(seed);
   d8e7e:	f001 fea3 	bl	dabc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8e82:	4b0a      	ldr	r3, [pc, #40]	; (d8eac <module_user_init_hook+0x50>)
   d8e84:	b113      	cbz	r3, d8e8c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8e86:	4620      	mov	r0, r4
   d8e88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8e8c:	2100      	movs	r1, #0
   d8e8e:	4807      	ldr	r0, [pc, #28]	; (d8eac <module_user_init_hook+0x50>)
   d8e90:	f7fe f824 	bl	d6edc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8e94:	2100      	movs	r1, #0
   d8e96:	4806      	ldr	r0, [pc, #24]	; (d8eb0 <module_user_init_hook+0x54>)
}
   d8e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8e9c:	f7fd bf92 	b.w	d6dc4 <system_ctrl_set_app_request_handler>
   d8ea0:	2003f400 	.word	0x2003f400
   d8ea4:	9a271c1e 	.word	0x9a271c1e
   d8ea8:	2003e3b4 	.word	0x2003e3b4
   d8eac:	00000000 	.word	0x00000000
   d8eb0:	000d8e25 	.word	0x000d8e25

000d8eb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8eb4:	4770      	bx	lr

000d8eb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d8eb6:	2000      	movs	r0, #0
   d8eb8:	4770      	bx	lr

000d8eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8eba:	b510      	push	{r4, lr}
   d8ebc:	2110      	movs	r1, #16
   d8ebe:	4604      	mov	r4, r0
   d8ec0:	f000 feea 	bl	d9c98 <_ZdlPvj>
   d8ec4:	4620      	mov	r0, r4
   d8ec6:	bd10      	pop	{r4, pc}

000d8ec8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d8ec8:	b508      	push	{r3, lr}
      { delete this; }
   d8eca:	b108      	cbz	r0, d8ed0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d8ecc:	f7ff fff5 	bl	d8eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8ed0:	bd08      	pop	{r3, pc}

000d8ed2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8ed2:	2200      	movs	r2, #0
   d8ed4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8ed6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8ed8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d8edc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8ede:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d8ee2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8ee4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8ee6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8ee8:	680c      	ldr	r4, [r1, #0]
   d8eea:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8eec:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d8eee:	bd10      	pop	{r4, pc}

000d8ef0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8ef0:	b510      	push	{r4, lr}
   d8ef2:	4604      	mov	r4, r0
    free((void*)msg_);
   d8ef4:	6800      	ldr	r0, [r0, #0]
   d8ef6:	f7fe f801 	bl	d6efc <free>
}
   d8efa:	4620      	mov	r0, r4
   d8efc:	bd10      	pop	{r4, pc}

000d8efe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d8efe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8f00:	68c4      	ldr	r4, [r0, #12]
   d8f02:	b1f4      	cbz	r4, d8f42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d8f04:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8f06:	2b02      	cmp	r3, #2
   d8f08:	d103      	bne.n	d8f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8f0a:	f104 000c 	add.w	r0, r4, #12
   d8f0e:	f7ff ffef 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d8f12:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d8f14:	b135      	cbz	r5, d8f24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8f16:	4628      	mov	r0, r5
   d8f18:	f7ff ff17 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
   d8f1c:	2110      	movs	r1, #16
   d8f1e:	4628      	mov	r0, r5
   d8f20:	f000 feba 	bl	d9c98 <_ZdlPvj>
   d8f24:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8f26:	b135      	cbz	r5, d8f36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8f28:	4628      	mov	r0, r5
   d8f2a:	f7ff ff0e 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
   d8f2e:	2110      	movs	r1, #16
   d8f30:	4628      	mov	r0, r5
   d8f32:	f000 feb1 	bl	d9c98 <_ZdlPvj>
   d8f36:	4620      	mov	r0, r4
   d8f38:	2114      	movs	r1, #20
   d8f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8f3e:	f000 beab 	b.w	d9c98 <_ZdlPvj>
   d8f42:	bd38      	pop	{r3, r4, r5, pc}

000d8f44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d8f44:	b513      	push	{r0, r1, r4, lr}
   d8f46:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f48:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d8f4c:	2300      	movs	r3, #0
   d8f4e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8f50:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f52:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8f54:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8f56:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8f58:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8f5a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8f5c:	f7fe ff06 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f60:	4620      	mov	r0, r4
   d8f62:	b002      	add	sp, #8
   d8f64:	bd10      	pop	{r4, pc}

000d8f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f68:	460c      	mov	r4, r1
   d8f6a:	ad02      	add	r5, sp, #8
   d8f6c:	f854 3b04 	ldr.w	r3, [r4], #4
   d8f70:	f845 3d08 	str.w	r3, [r5, #-8]!
   d8f74:	4606      	mov	r6, r0
   d8f76:	460f      	mov	r7, r1
   d8f78:	a801      	add	r0, sp, #4
   d8f7a:	4621      	mov	r1, r4
   d8f7c:	f7fe fed7 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d8f80:	4629      	mov	r1, r5
   d8f82:	4630      	mov	r0, r6
   d8f84:	f7ff ffde 	bl	d8f44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8f88:	a801      	add	r0, sp, #4
   d8f8a:	f7fe feef 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f8e:	4620      	mov	r0, r4
   d8f90:	f7fe feec 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d8f94:	4638      	mov	r0, r7
   d8f96:	2108      	movs	r1, #8
   d8f98:	f000 fe7e 	bl	d9c98 <_ZdlPvj>
        return p;
    }
   d8f9c:	4630      	mov	r0, r6
   d8f9e:	b003      	add	sp, #12
   d8fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8fa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8fa4:	b538      	push	{r3, r4, r5, lr}
   d8fa6:	2300      	movs	r3, #0
   d8fa8:	4604      	mov	r4, r0
   d8faa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8fac:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8fae:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8fb0:	f7fb f873 	bl	d409a <_Znwj>
   d8fb4:	b128      	cbz	r0, d8fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8fb6:	2301      	movs	r3, #1
   d8fb8:	6043      	str	r3, [r0, #4]
   d8fba:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d8fbc:	4b02      	ldr	r3, [pc, #8]	; (d8fc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8fbe:	6003      	str	r3, [r0, #0]
   d8fc0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8fc2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d8fc4:	4620      	mov	r0, r4
   d8fc6:	bd38      	pop	{r3, r4, r5, pc}
   d8fc8:	000dd8f0 	.word	0x000dd8f0

000d8fcc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8fcc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8fce:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8fd0:	b90a      	cbnz	r2, d8fd6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8fd2:	f000 fe74 	bl	d9cbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fd6:	68c3      	ldr	r3, [r0, #12]
    }
   d8fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fdc:	4718      	bx	r3

000d8fde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8fde:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8fe0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d8fe2:	f100 0110 	add.w	r1, r0, #16
   d8fe6:	f7ff fff1 	bl	d8fcc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8fea:	bd08      	pop	{r3, pc}

000d8fec <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8fec:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8fee:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8ff0:	b90a      	cbnz	r2, d8ff6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8ff2:	f000 fe64 	bl	d9cbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ff6:	68c3      	ldr	r3, [r0, #12]
    }
   d8ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ffc:	4718      	bx	r3

000d8ffe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ffe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9000:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d9002:	f100 0110 	add.w	r1, r0, #16
   d9006:	f7ff fff1 	bl	d8fec <_ZNKSt8functionIFvRKbEEclES1_>
   d900a:	bd08      	pop	{r3, pc}

000d900c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d900c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d900e:	2300      	movs	r3, #0
   d9010:	6083      	str	r3, [r0, #8]
   d9012:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9014:	4604      	mov	r4, r0
   d9016:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9018:	b12b      	cbz	r3, d9026 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d901a:	2202      	movs	r2, #2
   d901c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d901e:	68eb      	ldr	r3, [r5, #12]
   d9020:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9022:	68ab      	ldr	r3, [r5, #8]
   d9024:	60a3      	str	r3, [r4, #8]
	}
    }
   d9026:	4620      	mov	r0, r4
   d9028:	bd38      	pop	{r3, r4, r5, pc}
	...

000d902c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d902c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d902e:	b089      	sub	sp, #36	; 0x24
   d9030:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d9032:	4668      	mov	r0, sp
   d9034:	f7ff ff4d 	bl	d8ed2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9038:	2300      	movs	r3, #0
   d903a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d903e:	f04f 0202 	mov.w	r2, #2
   d9042:	e8d4 3f4f 	ldrexb	r3, [r4]
   d9046:	2b00      	cmp	r3, #0
   d9048:	d103      	bne.n	d9052 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d904a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d904e:	2900      	cmp	r1, #0
   d9050:	d1f7      	bne.n	d9042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d9052:	d002      	beq.n	d905a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d9054:	f88d 3008 	strb.w	r3, [sp, #8]
   d9058:	e063      	b.n	d9122 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d905a:	f114 050c 	adds.w	r5, r4, #12
   d905e:	d003      	beq.n	d9068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d9060:	4669      	mov	r1, sp
   d9062:	4628      	mov	r0, r5
   d9064:	f7ff ff35 	bl	d8ed2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9068:	f3bf 8f5f 	dmb	sy
   d906c:	2301      	movs	r3, #1
   d906e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9070:	2000      	movs	r0, #0
   d9072:	f104 0308 	add.w	r3, r4, #8
   d9076:	f3bf 8f5f 	dmb	sy
   d907a:	e853 6f00 	ldrex	r6, [r3]
   d907e:	e843 0200 	strex	r2, r0, [r3]
   d9082:	2a00      	cmp	r2, #0
   d9084:	d1f9      	bne.n	d907a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d9086:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d908a:	2e00      	cmp	r6, #0
   d908c:	d049      	beq.n	d9122 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d908e:	f7fd fe81 	bl	d6d94 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9092:	b120      	cbz	r0, d909e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9094:	4629      	mov	r1, r5
   d9096:	4630      	mov	r0, r6
   d9098:	f7ff ff98 	bl	d8fcc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d909c:	e03a      	b.n	d9114 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d909e:	4631      	mov	r1, r6
   d90a0:	a802      	add	r0, sp, #8
   d90a2:	f7ff ffb3 	bl	d900c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d90a6:	68e0      	ldr	r0, [r4, #12]
   d90a8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d90ac:	b108      	cbz	r0, d90b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d90ae:	f001 fdd5 	bl	dac5c <strdup>
   d90b2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d90b4:	2010      	movs	r0, #16
   d90b6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d90ba:	f7fa ffee 	bl	d409a <_Znwj>
   d90be:	4605      	mov	r5, r0
   d90c0:	b1e8      	cbz	r0, d90fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d90c2:	2700      	movs	r7, #0
   d90c4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90c6:	2018      	movs	r0, #24
   d90c8:	f7fa ffe7 	bl	d409a <_Znwj>
   d90cc:	4604      	mov	r4, r0
   d90ce:	b188      	cbz	r0, d90f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d90d0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d90d2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d90d4:	a802      	add	r0, sp, #8
   d90d6:	f7ff fe47 	bl	d8d68 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90da:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d90dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90de:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90e0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d90e2:	9204      	str	r2, [sp, #16]
   d90e4:	a906      	add	r1, sp, #24
   d90e6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d90e8:	60e3      	str	r3, [r4, #12]
   d90ea:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d90ee:	9205      	str	r2, [sp, #20]
   d90f0:	f7ff feef 	bl	d8ed2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d90f4:	4b0d      	ldr	r3, [pc, #52]	; (d912c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d90f6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d90f8:	4b0d      	ldr	r3, [pc, #52]	; (d9130 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90fa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d90fc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d90fe:	a806      	add	r0, sp, #24
   d9100:	f7ff fef6 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9104:	a802      	add	r0, sp, #8
   d9106:	f7ff fe20 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d910a:	2200      	movs	r2, #0
   d910c:	4629      	mov	r1, r5
   d910e:	4809      	ldr	r0, [pc, #36]	; (d9134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d9110:	f7fd fe48 	bl	d6da4 <application_thread_invoke>
   d9114:	4630      	mov	r0, r6
   d9116:	f7ff fe18 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d911a:	2110      	movs	r1, #16
   d911c:	4630      	mov	r0, r6
   d911e:	f000 fdbb 	bl	d9c98 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d9122:	4668      	mov	r0, sp
   d9124:	f7ff fee4 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
    }
   d9128:	b009      	add	sp, #36	; 0x24
   d912a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d912c:	000d8fdf 	.word	0x000d8fdf
   d9130:	000d9255 	.word	0x000d9255
   d9134:	000d97cd 	.word	0x000d97cd

000d9138 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d913c:	b08b      	sub	sp, #44	; 0x2c
   d913e:	4606      	mov	r6, r0
   d9140:	460f      	mov	r7, r1
   d9142:	4690      	mov	r8, r2
   d9144:	4699      	mov	r9, r3
   d9146:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d914a:	f7fd fea7 	bl	d6e9c <spark_cloud_flag_connected>
   d914e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d9150:	4683      	mov	fp, r0
   d9152:	bb30      	cbnz	r0, d91a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d9154:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d9158:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d915a:	a905      	add	r1, sp, #20
   d915c:	4628      	mov	r0, r5
   d915e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9162:	f7ff feb6 	bl	d8ed2 <_ZN8particle5ErrorC1EOS0_>
   d9166:	2014      	movs	r0, #20
   d9168:	f7fa ff97 	bl	d409a <_Znwj>
   d916c:	4604      	mov	r4, r0
   d916e:	b158      	cbz	r0, d9188 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9170:	2302      	movs	r3, #2
   d9172:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9174:	2301      	movs	r3, #1
   d9176:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9178:	f8c0 b004 	str.w	fp, [r0, #4]
   d917c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d9180:	4629      	mov	r1, r5
   d9182:	300c      	adds	r0, #12
   d9184:	f7ff fea5 	bl	d8ed2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d9188:	4630      	mov	r0, r6
   d918a:	4621      	mov	r1, r4
   d918c:	f840 4b04 	str.w	r4, [r0], #4
   d9190:	f7ff ff08 	bl	d8fa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9194:	4628      	mov	r0, r5
   d9196:	f7ff feab 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d919a:	a805      	add	r0, sp, #20
   d919c:	f7ff fea8 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
   d91a0:	e052      	b.n	d9248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d91a2:	2400      	movs	r4, #0
   d91a4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d91a6:	2014      	movs	r0, #20
   d91a8:	606c      	str	r4, [r5, #4]
   d91aa:	60ac      	str	r4, [r5, #8]
   d91ac:	9307      	str	r3, [sp, #28]
   d91ae:	f7fa ff74 	bl	d409a <_Znwj>
   d91b2:	4601      	mov	r1, r0
   d91b4:	b118      	cbz	r0, d91be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d91b6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d91b8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d91ba:	6044      	str	r4, [r0, #4]
   d91bc:	6084      	str	r4, [r0, #8]
   d91be:	a804      	add	r0, sp, #16
   d91c0:	9103      	str	r1, [sp, #12]
   d91c2:	f7ff feef 	bl	d8fa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d91c6:	4b22      	ldr	r3, [pc, #136]	; (d9250 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d91c8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d91ca:	2008      	movs	r0, #8
   d91cc:	f7fa ff65 	bl	d409a <_Znwj>
   d91d0:	4604      	mov	r4, r0
   d91d2:	b128      	cbz	r0, d91e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d91d4:	9b03      	ldr	r3, [sp, #12]
   d91d6:	f840 3b04 	str.w	r3, [r0], #4
   d91da:	a904      	add	r1, sp, #16
   d91dc:	f7fe fda7 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d91e0:	9500      	str	r5, [sp, #0]
   d91e2:	fa5f f38a 	uxtb.w	r3, sl
   d91e6:	464a      	mov	r2, r9
   d91e8:	4641      	mov	r1, r8
   d91ea:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d91ec:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d91ee:	f7fd fe5d 	bl	d6eac <spark_send_event>
   d91f2:	b920      	cbnz	r0, d91fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d91f4:	9b03      	ldr	r3, [sp, #12]
   d91f6:	785b      	ldrb	r3, [r3, #1]
   d91f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d91fc:	b183      	cbz	r3, d9220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d91fe:	9b03      	ldr	r3, [sp, #12]
   d9200:	9305      	str	r3, [sp, #20]
   d9202:	a904      	add	r1, sp, #16
   d9204:	a806      	add	r0, sp, #24
   d9206:	f7fe fd92 	bl	d7d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d920a:	a905      	add	r1, sp, #20
   d920c:	4630      	mov	r0, r6
   d920e:	f7ff fe99 	bl	d8f44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9212:	a806      	add	r0, sp, #24
   d9214:	f7fe fdaa 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9218:	a804      	add	r0, sp, #16
   d921a:	f7fe fda7 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d921e:	e013      	b.n	d9248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d9220:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d9224:	a905      	add	r1, sp, #20
   d9226:	a803      	add	r0, sp, #12
   d9228:	9205      	str	r2, [sp, #20]
   d922a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d922e:	f7ff fefd 	bl	d902c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9232:	a805      	add	r0, sp, #20
   d9234:	f7ff fe5c 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d9238:	a805      	add	r0, sp, #20
   d923a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d923c:	f7ff fe93 	bl	d8f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d9240:	a806      	add	r0, sp, #24
   d9242:	f7fe fd93 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9246:	e7da      	b.n	d91fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d9248:	4630      	mov	r0, r6
   d924a:	b00b      	add	sp, #44	; 0x2c
   d924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9250:	000d93c5 	.word	0x000d93c5

000d9254 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9254:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9258:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d925a:	d006      	beq.n	d926a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d925c:	2a03      	cmp	r2, #3
   d925e:	d017      	beq.n	d9290 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d9260:	2a01      	cmp	r2, #1
   d9262:	d122      	bne.n	d92aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9264:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9266:	6003      	str	r3, [r0, #0]
	      break;
   d9268:	e01f      	b.n	d92aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d926a:	2018      	movs	r0, #24
   d926c:	680e      	ldr	r6, [r1, #0]
   d926e:	f7fa ff14 	bl	d409a <_Znwj>
   d9272:	4605      	mov	r5, r0
   d9274:	b150      	cbz	r0, d928c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9276:	4631      	mov	r1, r6
   d9278:	f7ff fec8 	bl	d900c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d927c:	6930      	ldr	r0, [r6, #16]
   d927e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9282:	b108      	cbz	r0, d9288 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d9284:	f001 fcea 	bl	dac5c <strdup>
   d9288:	6128      	str	r0, [r5, #16]
   d928a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d928c:	6025      	str	r5, [r4, #0]
   d928e:	e00c      	b.n	d92aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9290:	6804      	ldr	r4, [r0, #0]
   d9292:	b154      	cbz	r4, d92aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d9294:	f104 0010 	add.w	r0, r4, #16
   d9298:	f7ff fe2a 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d929c:	4620      	mov	r0, r4
   d929e:	f7ff fd54 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d92a2:	2118      	movs	r1, #24
   d92a4:	4620      	mov	r0, r4
   d92a6:	f000 fcf7 	bl	d9c98 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d92aa:	2000      	movs	r0, #0
   d92ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92ae <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d92ae:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d92b0:	2300      	movs	r3, #0
   d92b2:	6083      	str	r3, [r0, #8]
   d92b4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d92b6:	4604      	mov	r4, r0
   d92b8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d92ba:	b12b      	cbz	r3, d92c8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d92bc:	2202      	movs	r2, #2
   d92be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d92c0:	68eb      	ldr	r3, [r5, #12]
   d92c2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d92c4:	68ab      	ldr	r3, [r5, #8]
   d92c6:	60a3      	str	r3, [r4, #8]
	}
    }
   d92c8:	4620      	mov	r0, r4
   d92ca:	bd38      	pop	{r3, r4, r5, pc}

000d92cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d92cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d92ce:	b570      	push	{r4, r5, r6, lr}
   d92d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d92d2:	d006      	beq.n	d92e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d92d4:	2a03      	cmp	r2, #3
   d92d6:	d011      	beq.n	d92fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d92d8:	2a01      	cmp	r2, #1
   d92da:	d118      	bne.n	d930e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d92dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d92de:	6003      	str	r3, [r0, #0]
	      break;
   d92e0:	e015      	b.n	d930e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d92e2:	2014      	movs	r0, #20
   d92e4:	680e      	ldr	r6, [r1, #0]
   d92e6:	f7fa fed8 	bl	d409a <_Znwj>
   d92ea:	4605      	mov	r5, r0
   d92ec:	b120      	cbz	r0, d92f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d92ee:	4631      	mov	r1, r6
   d92f0:	f7ff ffdd 	bl	d92ae <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d92f4:	7c33      	ldrb	r3, [r6, #16]
   d92f6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d92f8:	6025      	str	r5, [r4, #0]
   d92fa:	e008      	b.n	d930e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d92fc:	6804      	ldr	r4, [r0, #0]
   d92fe:	b134      	cbz	r4, d930e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9300:	4620      	mov	r0, r4
   d9302:	f7ff fd22 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9306:	2114      	movs	r1, #20
   d9308:	4620      	mov	r0, r4
   d930a:	f000 fcc5 	bl	d9c98 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d930e:	2000      	movs	r0, #0
   d9310:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9314 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d9314:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9316:	2300      	movs	r3, #0
   d9318:	b087      	sub	sp, #28
   d931a:	460c      	mov	r4, r1
   d931c:	f3bf 8f5f 	dmb	sy
   d9320:	e850 6f00 	ldrex	r6, [r0]
   d9324:	e840 3200 	strex	r2, r3, [r0]
   d9328:	2a00      	cmp	r2, #0
   d932a:	d1f9      	bne.n	d9320 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d932c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d9330:	2e00      	cmp	r6, #0
   d9332:	d03f      	beq.n	d93b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9334:	4618      	mov	r0, r3
   d9336:	f7fd fd2d 	bl	d6d94 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d933a:	4607      	mov	r7, r0
   d933c:	b120      	cbz	r0, d9348 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d933e:	4621      	mov	r1, r4
   d9340:	4630      	mov	r0, r6
   d9342:	f7ff fe53 	bl	d8fec <_ZNKSt8functionIFvRKbEEclES1_>
   d9346:	e02e      	b.n	d93a6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9348:	4631      	mov	r1, r6
   d934a:	a801      	add	r0, sp, #4
   d934c:	f7ff ffaf 	bl	d92ae <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9350:	7823      	ldrb	r3, [r4, #0]
   d9352:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9356:	2010      	movs	r0, #16
   d9358:	f7fa fe9f 	bl	d409a <_Znwj>
   d935c:	4605      	mov	r5, r0
   d935e:	b1d0      	cbz	r0, d9396 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9360:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9362:	2014      	movs	r0, #20
   d9364:	f7fa fe99 	bl	d409a <_Znwj>
   d9368:	4604      	mov	r4, r0
   d936a:	b178      	cbz	r0, d938c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d936c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d936e:	4601      	mov	r1, r0
   d9370:	a801      	add	r0, sp, #4
   d9372:	f7ff fcf9 	bl	d8d68 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9376:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9378:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d937a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d937c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d937e:	9203      	str	r2, [sp, #12]
   d9380:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9382:	60e3      	str	r3, [r4, #12]
   d9384:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9388:	9204      	str	r2, [sp, #16]
   d938a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d938c:	4b0a      	ldr	r3, [pc, #40]	; (d93b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d938e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9390:	4b0a      	ldr	r3, [pc, #40]	; (d93bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9392:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9394:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9396:	a801      	add	r0, sp, #4
   d9398:	f7ff fcd7 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d939c:	2200      	movs	r2, #0
   d939e:	4629      	mov	r1, r5
   d93a0:	4807      	ldr	r0, [pc, #28]	; (d93c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d93a2:	f7fd fcff 	bl	d6da4 <application_thread_invoke>
   d93a6:	4630      	mov	r0, r6
   d93a8:	f7ff fccf 	bl	d8d4a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d93ac:	2110      	movs	r1, #16
   d93ae:	4630      	mov	r0, r6
   d93b0:	f000 fc72 	bl	d9c98 <_ZdlPvj>
        }
    }
   d93b4:	b007      	add	sp, #28
   d93b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d93b8:	000d8fff 	.word	0x000d8fff
   d93bc:	000d92cd 	.word	0x000d92cd
   d93c0:	000d97cd 	.word	0x000d97cd

000d93c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d93c4:	b530      	push	{r4, r5, lr}
   d93c6:	b085      	sub	sp, #20
   d93c8:	4604      	mov	r4, r0
   d93ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d93cc:	4668      	mov	r0, sp
   d93ce:	4611      	mov	r1, r2
   d93d0:	f7ff fdc9 	bl	d8f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d93d4:	b17c      	cbz	r4, d93f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d93d6:	b224      	sxth	r4, r4
   d93d8:	4628      	mov	r0, r5
   d93da:	b10d      	cbz	r5, d93e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d93dc:	f001 fc3e 	bl	dac5c <strdup>
   d93e0:	9002      	str	r0, [sp, #8]
   d93e2:	a902      	add	r1, sp, #8
   d93e4:	4668      	mov	r0, sp
   d93e6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d93ea:	f7ff fe1f 	bl	d902c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d93ee:	a802      	add	r0, sp, #8
   d93f0:	f7ff fd7e 	bl	d8ef0 <_ZN8particle5ErrorD1Ev>
   d93f4:	e01d      	b.n	d9432 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d93f6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d93f8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d93fc:	f04f 0201 	mov.w	r2, #1
   d9400:	e8d0 3f4f 	ldrexb	r3, [r0]
   d9404:	42a3      	cmp	r3, r4
   d9406:	d103      	bne.n	d9410 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d9408:	e8c0 2f41 	strexb	r1, r2, [r0]
   d940c:	2900      	cmp	r1, #0
   d940e:	d1f7      	bne.n	d9400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d9410:	d002      	beq.n	d9418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d9412:	f88d 3008 	strb.w	r3, [sp, #8]
   d9416:	e00c      	b.n	d9432 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d9418:	f110 010c 	adds.w	r1, r0, #12
   d941c:	f04f 0301 	mov.w	r3, #1
   d9420:	bf18      	it	ne
   d9422:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9424:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d9428:	3004      	adds	r0, #4
   d942a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d942e:	f7ff ff71 	bl	d9314 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d9432:	a801      	add	r0, sp, #4
   d9434:	f7fe fc9a 	bl	d7d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d9438:	b005      	add	sp, #20
   d943a:	bd30      	pop	{r4, r5, pc}

000d943c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d943c:	4770      	bx	lr

000d943e <_ZN9IPAddressD0Ev>:
   d943e:	b510      	push	{r4, lr}
   d9440:	2118      	movs	r1, #24
   d9442:	4604      	mov	r4, r0
   d9444:	f000 fc28 	bl	d9c98 <_ZdlPvj>
   d9448:	4620      	mov	r0, r4
   d944a:	bd10      	pop	{r4, pc}

000d944c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d944c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d944e:	7d03      	ldrb	r3, [r0, #20]
   d9450:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9452:	b08d      	sub	sp, #52	; 0x34
   d9454:	460e      	mov	r6, r1
   d9456:	f100 0704 	add.w	r7, r0, #4
   d945a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d945e:	d002      	beq.n	d9466 <_ZNK9IPAddress7printToER5Print+0x1a>
   d9460:	f100 0508 	add.w	r5, r0, #8
   d9464:	e018      	b.n	d9498 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9466:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9468:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d946a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d946e:	232f      	movs	r3, #47	; 0x2f
   d9470:	462a      	mov	r2, r5
   d9472:	200a      	movs	r0, #10
   d9474:	f7fd fbae 	bl	d6bd4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9478:	4628      	mov	r0, r5
   d947a:	f001 fc0a 	bl	dac92 <strlen>
   d947e:	6833      	ldr	r3, [r6, #0]
   d9480:	4602      	mov	r2, r0
   d9482:	68db      	ldr	r3, [r3, #12]
   d9484:	4629      	mov	r1, r5
   d9486:	4630      	mov	r0, r6
   d9488:	4798      	blx	r3
   d948a:	e00f      	b.n	d94ac <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d948c:	b124      	cbz	r4, d9498 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d948e:	212e      	movs	r1, #46	; 0x2e
   d9490:	4630      	mov	r0, r6
   d9492:	f7ff faf9 	bl	d8a88 <_ZN5Print5printEc>
   d9496:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9498:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d949c:	220a      	movs	r2, #10
   d949e:	4630      	mov	r0, r6
   d94a0:	f7ff fb0b 	bl	d8aba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d94a4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d94a6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d94a8:	d1f0      	bne.n	d948c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d94aa:	4620      	mov	r0, r4
    }
    return n;
}
   d94ac:	b00d      	add	sp, #52	; 0x34
   d94ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d94b0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d94b0:	b510      	push	{r4, lr}
   d94b2:	4b05      	ldr	r3, [pc, #20]	; (d94c8 <_ZN9IPAddressC1Ev+0x18>)
   d94b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d94b6:	2211      	movs	r2, #17
   d94b8:	f840 3b04 	str.w	r3, [r0], #4
   d94bc:	2100      	movs	r1, #0
   d94be:	f001 fb7a 	bl	dabb6 <memset>
{
    clear();
}
   d94c2:	4620      	mov	r0, r4
   d94c4:	bd10      	pop	{r4, pc}
   d94c6:	bf00      	nop
   d94c8:	000dd90c 	.word	0x000dd90c

000d94cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d94cc:	4603      	mov	r3, r0
   d94ce:	4a07      	ldr	r2, [pc, #28]	; (d94ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d94d0:	b510      	push	{r4, lr}
   d94d2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d94d6:	f101 0210 	add.w	r2, r1, #16
   d94da:	f851 4b04 	ldr.w	r4, [r1], #4
   d94de:	f843 4b04 	str.w	r4, [r3], #4
   d94e2:	4291      	cmp	r1, r2
   d94e4:	d1f9      	bne.n	d94da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d94e6:	780a      	ldrb	r2, [r1, #0]
   d94e8:	701a      	strb	r2, [r3, #0]
}
   d94ea:	bd10      	pop	{r4, pc}
   d94ec:	000dd90c 	.word	0x000dd90c

000d94f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d94f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d94f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d94f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d94fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d94fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9502:	2304      	movs	r3, #4
   d9504:	6041      	str	r1, [r0, #4]
   d9506:	7503      	strb	r3, [r0, #20]
   d9508:	bd10      	pop	{r4, pc}

000d950a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d950a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d950c:	780d      	ldrb	r5, [r1, #0]
   d950e:	788b      	ldrb	r3, [r1, #2]
   d9510:	784a      	ldrb	r2, [r1, #1]
   d9512:	78c9      	ldrb	r1, [r1, #3]
   d9514:	9100      	str	r1, [sp, #0]
   d9516:	4629      	mov	r1, r5
   d9518:	f7ff ffea 	bl	d94f0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d951c:	b003      	add	sp, #12
   d951e:	bd30      	pop	{r4, r5, pc}

000d9520 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9520:	7441      	strb	r1, [r0, #17]
   d9522:	4770      	bx	lr

000d9524 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9524:	4770      	bx	lr

000d9526 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9526:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9528:	2100      	movs	r1, #0
   d952a:	7c00      	ldrb	r0, [r0, #16]
   d952c:	f7fd fbf2 	bl	d6d14 <HAL_USB_USART_Receive_Data>
}
   d9530:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9534:	bf28      	it	cs
   d9536:	f04f 30ff 	movcs.w	r0, #4294967295
   d953a:	bd08      	pop	{r3, pc}

000d953c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d953c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d953e:	2101      	movs	r1, #1
   d9540:	7c00      	ldrb	r0, [r0, #16]
   d9542:	f7fd fbe7 	bl	d6d14 <HAL_USB_USART_Receive_Data>
}
   d9546:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d954a:	bf28      	it	cs
   d954c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9550:	bd08      	pop	{r3, pc}

000d9552 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9552:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9554:	7c00      	ldrb	r0, [r0, #16]
   d9556:	f7fd fbd5 	bl	d6d04 <HAL_USB_USART_Available_Data_For_Write>
}
   d955a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d955e:	bd08      	pop	{r3, pc}

000d9560 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9560:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9562:	7c00      	ldrb	r0, [r0, #16]
   d9564:	f7fd fbc6 	bl	d6cf4 <HAL_USB_USART_Available_Data>
}
   d9568:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d956c:	bd08      	pop	{r3, pc}

000d956e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d956e:	7c00      	ldrb	r0, [r0, #16]
   d9570:	f7fd bbe0 	b.w	d6d34 <HAL_USB_USART_Flush_Data>

000d9574 <_ZN9USBSerialD0Ev>:
   d9574:	b510      	push	{r4, lr}
   d9576:	2114      	movs	r1, #20
   d9578:	4604      	mov	r4, r0
   d957a:	f000 fb8d 	bl	d9c98 <_ZdlPvj>
   d957e:	4620      	mov	r0, r4
   d9580:	bd10      	pop	{r4, pc}

000d9582 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9582:	b538      	push	{r3, r4, r5, lr}
   d9584:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9586:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9588:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d958a:	f7fd fbbb 	bl	d6d04 <HAL_USB_USART_Available_Data_For_Write>
   d958e:	2800      	cmp	r0, #0
   d9590:	dc01      	bgt.n	d9596 <_ZN9USBSerial5writeEh+0x14>
   d9592:	7c60      	ldrb	r0, [r4, #17]
   d9594:	b128      	cbz	r0, d95a2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9596:	4629      	mov	r1, r5
   d9598:	7c20      	ldrb	r0, [r4, #16]
   d959a:	f7fd fbc3 	bl	d6d24 <HAL_USB_USART_Send_Data>
   d959e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d95a2:	bd38      	pop	{r3, r4, r5, pc}

000d95a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d95a4:	b510      	push	{r4, lr}
   d95a6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d95a8:	2300      	movs	r3, #0
   d95aa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d95ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d95b0:	60a3      	str	r3, [r4, #8]
   d95b2:	4b05      	ldr	r3, [pc, #20]	; (d95c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d95b4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d95b6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d95b8:	4608      	mov	r0, r1
{
  _serial = serial;
   d95ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d95bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d95be:	4611      	mov	r1, r2
   d95c0:	f7fd fb88 	bl	d6cd4 <HAL_USB_USART_Init>
}
   d95c4:	4620      	mov	r0, r4
   d95c6:	bd10      	pop	{r4, pc}
   d95c8:	000dd920 	.word	0x000dd920

000d95cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d95cc:	2200      	movs	r2, #0
   d95ce:	7c00      	ldrb	r0, [r0, #16]
   d95d0:	f7fd bb88 	b.w	d6ce4 <HAL_USB_USART_Begin>

000d95d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d95d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d95d6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d95d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d95da:	2100      	movs	r1, #0
   d95dc:	f001 faeb 	bl	dabb6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d95e0:	4620      	mov	r0, r4
   d95e2:	bd10      	pop	{r4, pc}

000d95e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d95e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95e6:	4d0e      	ldr	r5, [pc, #56]	; (d9620 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d95e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d95ea:	a801      	add	r0, sp, #4
   d95ec:	f7ff fff2 	bl	d95d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95f0:	6829      	ldr	r1, [r5, #0]
   d95f2:	f011 0401 	ands.w	r4, r1, #1
   d95f6:	d110      	bne.n	d961a <_Z16_fetch_usbserialv+0x36>
   d95f8:	4628      	mov	r0, r5
   d95fa:	f7fa fd54 	bl	d40a6 <__cxa_guard_acquire>
   d95fe:	b160      	cbz	r0, d961a <_Z16_fetch_usbserialv+0x36>
   d9600:	aa01      	add	r2, sp, #4
   d9602:	4621      	mov	r1, r4
   d9604:	4807      	ldr	r0, [pc, #28]	; (d9624 <_Z16_fetch_usbserialv+0x40>)
   d9606:	f7ff ffcd 	bl	d95a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d960a:	4628      	mov	r0, r5
   d960c:	f7fa fd50 	bl	d40b0 <__cxa_guard_release>
   d9610:	4a05      	ldr	r2, [pc, #20]	; (d9628 <_Z16_fetch_usbserialv+0x44>)
   d9612:	4906      	ldr	r1, [pc, #24]	; (d962c <_Z16_fetch_usbserialv+0x48>)
   d9614:	4803      	ldr	r0, [pc, #12]	; (d9624 <_Z16_fetch_usbserialv+0x40>)
   d9616:	f000 fb31 	bl	d9c7c <__aeabi_atexit>
	return _usbserial;
}
   d961a:	4802      	ldr	r0, [pc, #8]	; (d9624 <_Z16_fetch_usbserialv+0x40>)
   d961c:	b007      	add	sp, #28
   d961e:	bd30      	pop	{r4, r5, pc}
   d9620:	2003e3b8 	.word	0x2003e3b8
   d9624:	2003e3bc 	.word	0x2003e3bc
   d9628:	2003d684 	.word	0x2003d684
   d962c:	000d9525 	.word	0x000d9525

000d9630 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9630:	2200      	movs	r2, #0
   d9632:	4611      	mov	r1, r2
   d9634:	6840      	ldr	r0, [r0, #4]
   d9636:	f7fd bbf1 	b.w	d6e1c <network_ready>

000d963a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d963a:	2200      	movs	r2, #0
   d963c:	4611      	mov	r1, r2
   d963e:	6840      	ldr	r0, [r0, #4]
   d9640:	f7fd bc0c 	b.w	d6e5c <network_listening>

000d9644 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9644:	2200      	movs	r2, #0
   d9646:	4611      	mov	r1, r2
   d9648:	6840      	ldr	r0, [r0, #4]
   d964a:	f7fd bc17 	b.w	d6e7c <network_get_listen_timeout>

000d964e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d964e:	2200      	movs	r2, #0
   d9650:	6840      	ldr	r0, [r0, #4]
   d9652:	f7fd bc0b 	b.w	d6e6c <network_set_listen_timeout>

000d9656 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9656:	2200      	movs	r2, #0
   d9658:	f081 0101 	eor.w	r1, r1, #1
   d965c:	6840      	ldr	r0, [r0, #4]
   d965e:	f7fd bbf5 	b.w	d6e4c <network_listen>

000d9662 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9662:	2300      	movs	r3, #0
   d9664:	461a      	mov	r2, r3
   d9666:	4619      	mov	r1, r3
   d9668:	6840      	ldr	r0, [r0, #4]
   d966a:	f7fd bbe7 	b.w	d6e3c <network_off>

000d966e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d966e:	2300      	movs	r3, #0
   d9670:	461a      	mov	r2, r3
   d9672:	4619      	mov	r1, r3
   d9674:	6840      	ldr	r0, [r0, #4]
   d9676:	f7fd bbd9 	b.w	d6e2c <network_on>

000d967a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d967a:	2200      	movs	r2, #0
   d967c:	4611      	mov	r1, r2
   d967e:	6840      	ldr	r0, [r0, #4]
   d9680:	f7fd bbbc 	b.w	d6dfc <network_connecting>

000d9684 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9684:	2200      	movs	r2, #0
   d9686:	2102      	movs	r1, #2
   d9688:	6840      	ldr	r0, [r0, #4]
   d968a:	f7fd bbbf 	b.w	d6e0c <network_disconnect>

000d968e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d968e:	2300      	movs	r3, #0
   d9690:	461a      	mov	r2, r3
   d9692:	6840      	ldr	r0, [r0, #4]
   d9694:	f7fd bbaa 	b.w	d6dec <network_connect>

000d9698 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9698:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d969a:	4c08      	ldr	r4, [pc, #32]	; (d96bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d969c:	2528      	movs	r5, #40	; 0x28
   d969e:	462a      	mov	r2, r5
   d96a0:	2100      	movs	r1, #0
   d96a2:	4620      	mov	r0, r4
   d96a4:	f001 fa87 	bl	dabb6 <memset>
        cid = -1;
   d96a8:	f04f 33ff 	mov.w	r3, #4294967295
   d96ac:	6063      	str	r3, [r4, #4]
   d96ae:	4b04      	ldr	r3, [pc, #16]	; (d96c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d96b0:	8025      	strh	r5, [r4, #0]
   d96b2:	2204      	movs	r2, #4
   d96b4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d96b6:	4a03      	ldr	r2, [pc, #12]	; (d96c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d96b8:	601a      	str	r2, [r3, #0]
   d96ba:	bd38      	pop	{r3, r4, r5, pc}
   d96bc:	2003e3d8 	.word	0x2003e3d8
   d96c0:	2003e3d0 	.word	0x2003e3d0
   d96c4:	000dd950 	.word	0x000dd950

000d96c8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d96c8:	4770      	bx	lr

000d96ca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d96ca:	7441      	strb	r1, [r0, #17]
   d96cc:	4770      	bx	lr

000d96ce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d96ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d96d0:	7c00      	ldrb	r0, [r0, #16]
   d96d2:	f7fd fabf 	bl	d6c54 <HAL_USART_Available_Data_For_Write>
}
   d96d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d96da:	bd08      	pop	{r3, pc}

000d96dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d96dc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d96de:	7c00      	ldrb	r0, [r0, #16]
   d96e0:	f7fd fa90 	bl	d6c04 <HAL_USART_Available_Data>
}
   d96e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d96e8:	bd08      	pop	{r3, pc}

000d96ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d96ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d96ec:	7c00      	ldrb	r0, [r0, #16]
   d96ee:	f7fd fa99 	bl	d6c24 <HAL_USART_Peek_Data>
}
   d96f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d96f6:	bf28      	it	cs
   d96f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d96fc:	bd08      	pop	{r3, pc}

000d96fe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d96fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9700:	7c00      	ldrb	r0, [r0, #16]
   d9702:	f7fd fa87 	bl	d6c14 <HAL_USART_Read_Data>
}
   d9706:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d970a:	bf28      	it	cs
   d970c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9710:	bd08      	pop	{r3, pc}

000d9712 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9712:	7c00      	ldrb	r0, [r0, #16]
   d9714:	f7fd ba8e 	b.w	d6c34 <HAL_USART_Flush_Data>

000d9718 <_ZN11USARTSerialD0Ev>:
   d9718:	b510      	push	{r4, lr}
   d971a:	2114      	movs	r1, #20
   d971c:	4604      	mov	r4, r0
   d971e:	f000 fabb 	bl	d9c98 <_ZdlPvj>
   d9722:	4620      	mov	r0, r4
   d9724:	bd10      	pop	{r4, pc}

000d9726 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9726:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9728:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d972a:	4604      	mov	r4, r0
   d972c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d972e:	b925      	cbnz	r5, d973a <_ZN11USARTSerial5writeEh+0x14>
   d9730:	7c00      	ldrb	r0, [r0, #16]
   d9732:	f7fd fa8f 	bl	d6c54 <HAL_USART_Available_Data_For_Write>
   d9736:	2800      	cmp	r0, #0
   d9738:	dd05      	ble.n	d9746 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d973a:	4631      	mov	r1, r6
   d973c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d973e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9742:	f7fd ba57 	b.w	d6bf4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9746:	4628      	mov	r0, r5
   d9748:	bd70      	pop	{r4, r5, r6, pc}
	...

000d974c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d974c:	b510      	push	{r4, lr}
   d974e:	4604      	mov	r4, r0
   d9750:	4608      	mov	r0, r1
   d9752:	4611      	mov	r1, r2
   d9754:	2200      	movs	r2, #0
   d9756:	6062      	str	r2, [r4, #4]
   d9758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d975c:	60a2      	str	r2, [r4, #8]
   d975e:	4a05      	ldr	r2, [pc, #20]	; (d9774 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9760:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9762:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9764:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9766:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9768:	461a      	mov	r2, r3
   d976a:	f7fd fa3b 	bl	d6be4 <HAL_USART_Init>
}
   d976e:	4620      	mov	r0, r4
   d9770:	bd10      	pop	{r4, pc}
   d9772:	bf00      	nop
   d9774:	000dd984 	.word	0x000dd984

000d9778 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9778:	7c00      	ldrb	r0, [r0, #16]
   d977a:	f7fd ba63 	b.w	d6c44 <HAL_USART_Is_Enabled>
	...

000d9780 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9780:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9782:	4d0c      	ldr	r5, [pc, #48]	; (d97b4 <_Z22__fetch_global_Serial1v+0x34>)
   d9784:	6829      	ldr	r1, [r5, #0]
   d9786:	f011 0401 	ands.w	r4, r1, #1
   d978a:	d111      	bne.n	d97b0 <_Z22__fetch_global_Serial1v+0x30>
   d978c:	4628      	mov	r0, r5
   d978e:	f7fa fc8a 	bl	d40a6 <__cxa_guard_acquire>
   d9792:	b168      	cbz	r0, d97b0 <_Z22__fetch_global_Serial1v+0x30>
   d9794:	4a08      	ldr	r2, [pc, #32]	; (d97b8 <_Z22__fetch_global_Serial1v+0x38>)
   d9796:	4b09      	ldr	r3, [pc, #36]	; (d97bc <_Z22__fetch_global_Serial1v+0x3c>)
   d9798:	4809      	ldr	r0, [pc, #36]	; (d97c0 <_Z22__fetch_global_Serial1v+0x40>)
   d979a:	4621      	mov	r1, r4
   d979c:	f7ff ffd6 	bl	d974c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d97a0:	4628      	mov	r0, r5
   d97a2:	f7fa fc85 	bl	d40b0 <__cxa_guard_release>
   d97a6:	4a07      	ldr	r2, [pc, #28]	; (d97c4 <_Z22__fetch_global_Serial1v+0x44>)
   d97a8:	4907      	ldr	r1, [pc, #28]	; (d97c8 <_Z22__fetch_global_Serial1v+0x48>)
   d97aa:	4805      	ldr	r0, [pc, #20]	; (d97c0 <_Z22__fetch_global_Serial1v+0x40>)
   d97ac:	f000 fa66 	bl	d9c7c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d97b0:	4803      	ldr	r0, [pc, #12]	; (d97c0 <_Z22__fetch_global_Serial1v+0x40>)
   d97b2:	bd38      	pop	{r3, r4, r5, pc}
   d97b4:	2003e498 	.word	0x2003e498
   d97b8:	2003e49c 	.word	0x2003e49c
   d97bc:	2003e414 	.word	0x2003e414
   d97c0:	2003e400 	.word	0x2003e400
   d97c4:	2003d684 	.word	0x2003d684
   d97c8:	000d96c9 	.word	0x000d96c9

000d97cc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d97cc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d97ce:	6883      	ldr	r3, [r0, #8]
   d97d0:	4604      	mov	r4, r0
   d97d2:	b90b      	cbnz	r3, d97d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d97d4:	f000 fa73 	bl	d9cbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d97d8:	68c3      	ldr	r3, [r0, #12]
   d97da:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d97dc:	68a3      	ldr	r3, [r4, #8]
   d97de:	b11b      	cbz	r3, d97e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d97e0:	2203      	movs	r2, #3
   d97e2:	4621      	mov	r1, r4
   d97e4:	4620      	mov	r0, r4
   d97e6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d97e8:	4620      	mov	r0, r4
   d97ea:	2110      	movs	r1, #16
}
   d97ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d97f0:	f000 ba52 	b.w	d9c98 <_ZdlPvj>

000d97f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d97f4:	4770      	bx	lr

000d97f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d97f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97f8:	4606      	mov	r6, r0
   d97fa:	4615      	mov	r5, r2
   d97fc:	460c      	mov	r4, r1
   d97fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9800:	42bc      	cmp	r4, r7
   d9802:	d006      	beq.n	d9812 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9804:	6833      	ldr	r3, [r6, #0]
   d9806:	f814 1b01 	ldrb.w	r1, [r4], #1
   d980a:	689b      	ldr	r3, [r3, #8]
   d980c:	4630      	mov	r0, r6
   d980e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9810:	e7f6      	b.n	d9800 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9812:	4628      	mov	r0, r5
   d9814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9816 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d9816:	2200      	movs	r2, #0
   d9818:	7c00      	ldrb	r0, [r0, #16]
   d981a:	f7fd ba23 	b.w	d6c64 <HAL_I2C_Write_Data>

000d981e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d981e:	2100      	movs	r1, #0
   d9820:	7c00      	ldrb	r0, [r0, #16]
   d9822:	f7fd ba27 	b.w	d6c74 <HAL_I2C_Available_Data>

000d9826 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d9826:	2100      	movs	r1, #0
   d9828:	7c00      	ldrb	r0, [r0, #16]
   d982a:	f7fd ba2b 	b.w	d6c84 <HAL_I2C_Read_Data>

000d982e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d982e:	2100      	movs	r1, #0
   d9830:	7c00      	ldrb	r0, [r0, #16]
   d9832:	f7fd ba2f 	b.w	d6c94 <HAL_I2C_Peek_Data>

000d9836 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d9836:	2100      	movs	r1, #0
   d9838:	7c00      	ldrb	r0, [r0, #16]
   d983a:	f7fd ba33 	b.w	d6ca4 <HAL_I2C_Flush_Data>

000d983e <_ZN7TwoWireD0Ev>:
   d983e:	b510      	push	{r4, lr}
   d9840:	2114      	movs	r1, #20
   d9842:	4604      	mov	r4, r0
   d9844:	f000 fa28 	bl	d9c98 <_ZdlPvj>
   d9848:	4620      	mov	r0, r4
   d984a:	bd10      	pop	{r4, pc}

000d984c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d984c:	b510      	push	{r4, lr}
   d984e:	4604      	mov	r4, r0
   d9850:	2300      	movs	r3, #0
   d9852:	6063      	str	r3, [r4, #4]
   d9854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9858:	60a3      	str	r3, [r4, #8]
   d985a:	4b04      	ldr	r3, [pc, #16]	; (d986c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d985c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d985e:	4608      	mov	r0, r1
   d9860:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d9862:	4611      	mov	r1, r2
   d9864:	f7fd fa2e 	bl	d6cc4 <HAL_I2C_Init>
}
   d9868:	4620      	mov	r0, r4
   d986a:	bd10      	pop	{r4, pc}
   d986c:	000dd9b4 	.word	0x000dd9b4

000d9870 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d9870:	2100      	movs	r1, #0
   d9872:	7c00      	ldrb	r0, [r0, #16]
   d9874:	f7fd ba1e 	b.w	d6cb4 <HAL_I2C_Is_Enabled>

000d9878 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9878:	2200      	movs	r2, #0
   d987a:	4611      	mov	r1, r2
   d987c:	6840      	ldr	r0, [r0, #4]
   d987e:	f7fd baed 	b.w	d6e5c <network_listening>

000d9882 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9882:	2200      	movs	r2, #0
   d9884:	4611      	mov	r1, r2
   d9886:	6840      	ldr	r0, [r0, #4]
   d9888:	f7fd baf8 	b.w	d6e7c <network_get_listen_timeout>

000d988c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d988c:	2200      	movs	r2, #0
   d988e:	6840      	ldr	r0, [r0, #4]
   d9890:	f7fd baec 	b.w	d6e6c <network_set_listen_timeout>

000d9894 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9894:	2200      	movs	r2, #0
   d9896:	f081 0101 	eor.w	r1, r1, #1
   d989a:	6840      	ldr	r0, [r0, #4]
   d989c:	f7fd bad6 	b.w	d6e4c <network_listen>

000d98a0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d98a0:	2300      	movs	r3, #0
   d98a2:	461a      	mov	r2, r3
   d98a4:	2101      	movs	r1, #1
   d98a6:	6840      	ldr	r0, [r0, #4]
   d98a8:	f7fd bac8 	b.w	d6e3c <network_off>

000d98ac <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d98ac:	2300      	movs	r3, #0
   d98ae:	461a      	mov	r2, r3
   d98b0:	4619      	mov	r1, r3
   d98b2:	6840      	ldr	r0, [r0, #4]
   d98b4:	f7fd baba 	b.w	d6e2c <network_on>

000d98b8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d98b8:	2200      	movs	r2, #0
   d98ba:	4611      	mov	r1, r2
   d98bc:	6840      	ldr	r0, [r0, #4]
   d98be:	f7fd baad 	b.w	d6e1c <network_ready>

000d98c2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d98c2:	2200      	movs	r2, #0
   d98c4:	4611      	mov	r1, r2
   d98c6:	6840      	ldr	r0, [r0, #4]
   d98c8:	f7fd ba98 	b.w	d6dfc <network_connecting>

000d98cc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d98cc:	2200      	movs	r2, #0
   d98ce:	2102      	movs	r1, #2
   d98d0:	6840      	ldr	r0, [r0, #4]
   d98d2:	f7fd ba9b 	b.w	d6e0c <network_disconnect>

000d98d6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d98d6:	2300      	movs	r3, #0
   d98d8:	461a      	mov	r2, r3
   d98da:	6840      	ldr	r0, [r0, #4]
   d98dc:	f7fd ba86 	b.w	d6dec <network_connect>

000d98e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d98e0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d98e2:	4605      	mov	r5, r0
   d98e4:	b188      	cbz	r0, d990a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d98e6:	6804      	ldr	r4, [r0, #0]
   d98e8:	b14c      	cbz	r4, d98fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d98ea:	68a3      	ldr	r3, [r4, #8]
   d98ec:	b11b      	cbz	r3, d98f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d98ee:	2203      	movs	r2, #3
   d98f0:	4621      	mov	r1, r4
   d98f2:	4620      	mov	r0, r4
   d98f4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d98f6:	2110      	movs	r1, #16
   d98f8:	4620      	mov	r0, r4
   d98fa:	f000 f9cd 	bl	d9c98 <_ZdlPvj>
   d98fe:	4628      	mov	r0, r5
   d9900:	2114      	movs	r1, #20
      }
   d9902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9906:	f000 b9c7 	b.w	d9c98 <_ZdlPvj>
   d990a:	bd38      	pop	{r3, r4, r5, pc}

000d990c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d990c:	b110      	cbz	r0, d9914 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d990e:	6803      	ldr	r3, [r0, #0]
   d9910:	685b      	ldr	r3, [r3, #4]
   d9912:	4718      	bx	r3
   d9914:	4770      	bx	lr

000d9916 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9916:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9918:	6803      	ldr	r3, [r0, #0]
   d991a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d991c:	b1bb      	cbz	r3, d994e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d991e:	6858      	ldr	r0, [r3, #4]
   d9920:	f7fd f920 	bl	d6b64 <os_thread_is_current>
   d9924:	b978      	cbnz	r0, d9946 <_ZN6ThreadD1Ev+0x30>
   d9926:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d9928:	7c5a      	ldrb	r2, [r3, #17]
   d992a:	b912      	cbnz	r2, d9932 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d992c:	6858      	ldr	r0, [r3, #4]
   d992e:	f7fd f921 	bl	d6b74 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d9932:	6823      	ldr	r3, [r4, #0]
   d9934:	6858      	ldr	r0, [r3, #4]
   d9936:	f7fd f925 	bl	d6b84 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d993a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d993c:	2300      	movs	r3, #0
   d993e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d9940:	b128      	cbz	r0, d994e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d9942:	f7ff ffcd 	bl	d98e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9946:	6820      	ldr	r0, [r4, #0]
   d9948:	b108      	cbz	r0, d994e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d994a:	f7ff ffc9 	bl	d98e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d994e:	4620      	mov	r0, r4
   d9950:	bd10      	pop	{r4, pc}

000d9952 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d9952:	b538      	push	{r3, r4, r5, lr}
   d9954:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9956:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d995a:	b108      	cbz	r0, d9960 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d995c:	f7fa fba1 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d9960:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d9964:	b108      	cbz	r0, d996a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d9966:	f7fd f91d 	bl	d6ba4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d996a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d996e:	b135      	cbz	r5, d997e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9970:	4628      	mov	r0, r5
   d9972:	f7ff ffd0 	bl	d9916 <_ZN6ThreadD1Ev>
   d9976:	2104      	movs	r1, #4
   d9978:	4628      	mov	r0, r5
   d997a:	f000 f98d 	bl	d9c98 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d997e:	6820      	ldr	r0, [r4, #0]
   d9980:	b108      	cbz	r0, d9986 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d9982:	f7ff ffc3 	bl	d990c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d9986:	4620      	mov	r0, r4
   d9988:	bd38      	pop	{r3, r4, r5, pc}
	...

000d998c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d998c:	b510      	push	{r4, lr}
   d998e:	4b04      	ldr	r3, [pc, #16]	; (d99a0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d9990:	4604      	mov	r4, r0
   d9992:	f840 3b08 	str.w	r3, [r0], #8
   d9996:	f7ff ffdc 	bl	d9952 <_ZN5spark11MeshPublishD1Ev>
   d999a:	4620      	mov	r0, r4
   d999c:	bd10      	pop	{r4, pc}
   d999e:	bf00      	nop
   d99a0:	000dd9dc 	.word	0x000dd9dc

000d99a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d99a4:	b538      	push	{r3, r4, r5, lr}
   d99a6:	4c0e      	ldr	r4, [pc, #56]	; (d99e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d99a8:	4b0e      	ldr	r3, [pc, #56]	; (d99e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d99aa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d99ac:	2500      	movs	r5, #0
   d99ae:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d99b0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d99b4:	6063      	str	r3, [r4, #4]
   d99b6:	60a5      	str	r5, [r4, #8]
   d99b8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d99bc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d99c0:	f7fd f8e8 	bl	d6b94 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d99c4:	4b08      	ldr	r3, [pc, #32]	; (d99e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d99c6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d99ca:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d99ce:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d99d0:	4620      	mov	r0, r4
   d99d2:	4a06      	ldr	r2, [pc, #24]	; (d99ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d99d4:	4906      	ldr	r1, [pc, #24]	; (d99f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d99d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d99da:	f000 b94f 	b.w	d9c7c <__aeabi_atexit>
   d99de:	bf00      	nop
   d99e0:	2003e520 	.word	0x2003e520
   d99e4:	000dda10 	.word	0x000dda10
   d99e8:	000dd9dc 	.word	0x000dd9dc
   d99ec:	2003d684 	.word	0x2003d684
   d99f0:	000d998d 	.word	0x000d998d

000d99f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d99f4:	2300      	movs	r3, #0
   d99f6:	461a      	mov	r2, r3
   d99f8:	6840      	ldr	r0, [r0, #4]
   d99fa:	f7fd b9f7 	b.w	d6dec <network_connect>

000d99fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d99fe:	2200      	movs	r2, #0
   d9a00:	2102      	movs	r1, #2
   d9a02:	6840      	ldr	r0, [r0, #4]
   d9a04:	f7fd ba02 	b.w	d6e0c <network_disconnect>

000d9a08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9a08:	2200      	movs	r2, #0
   d9a0a:	4611      	mov	r1, r2
   d9a0c:	6840      	ldr	r0, [r0, #4]
   d9a0e:	f7fd b9f5 	b.w	d6dfc <network_connecting>

000d9a12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9a12:	2200      	movs	r2, #0
   d9a14:	4611      	mov	r1, r2
   d9a16:	6840      	ldr	r0, [r0, #4]
   d9a18:	f7fd ba00 	b.w	d6e1c <network_ready>

000d9a1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9a1c:	2300      	movs	r3, #0
   d9a1e:	461a      	mov	r2, r3
   d9a20:	4619      	mov	r1, r3
   d9a22:	6840      	ldr	r0, [r0, #4]
   d9a24:	f7fd ba02 	b.w	d6e2c <network_on>

000d9a28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9a28:	2300      	movs	r3, #0
   d9a2a:	461a      	mov	r2, r3
   d9a2c:	4619      	mov	r1, r3
   d9a2e:	6840      	ldr	r0, [r0, #4]
   d9a30:	f7fd ba04 	b.w	d6e3c <network_off>

000d9a34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9a34:	2200      	movs	r2, #0
   d9a36:	f081 0101 	eor.w	r1, r1, #1
   d9a3a:	6840      	ldr	r0, [r0, #4]
   d9a3c:	f7fd ba06 	b.w	d6e4c <network_listen>

000d9a40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9a40:	2200      	movs	r2, #0
   d9a42:	6840      	ldr	r0, [r0, #4]
   d9a44:	f7fd ba12 	b.w	d6e6c <network_set_listen_timeout>

000d9a48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9a48:	2200      	movs	r2, #0
   d9a4a:	4611      	mov	r1, r2
   d9a4c:	6840      	ldr	r0, [r0, #4]
   d9a4e:	f7fd ba15 	b.w	d6e7c <network_get_listen_timeout>

000d9a52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9a52:	2200      	movs	r2, #0
   d9a54:	4611      	mov	r1, r2
   d9a56:	6840      	ldr	r0, [r0, #4]
   d9a58:	f7fd ba00 	b.w	d6e5c <network_listening>

000d9a5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9a60:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d9a62:	b095      	sub	sp, #84	; 0x54
   d9a64:	4616      	mov	r6, r2
   d9a66:	460d      	mov	r5, r1
   d9a68:	4607      	mov	r7, r0
    IPAddress addr;
   d9a6a:	f7ff fd21 	bl	d94b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d9a6e:	4621      	mov	r1, r4
   d9a70:	2220      	movs	r2, #32
   d9a72:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9a74:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9a76:	f001 f89e 	bl	dabb6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9a7a:	2340      	movs	r3, #64	; 0x40
   d9a7c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9a7e:	4621      	mov	r1, r4
   d9a80:	466b      	mov	r3, sp
   d9a82:	aa0c      	add	r2, sp, #48	; 0x30
   d9a84:	4630      	mov	r0, r6
   d9a86:	f7fc ff29 	bl	d68dc <netdb_getaddrinfo>
    if (!r) {
   d9a8a:	4604      	mov	r4, r0
   d9a8c:	2800      	cmp	r0, #0
   d9a8e:	d144      	bne.n	d9b1a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9a90:	4602      	mov	r2, r0
   d9a92:	2101      	movs	r1, #1
   d9a94:	6868      	ldr	r0, [r5, #4]
   d9a96:	f7fd f9c1 	bl	d6e1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9a9a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9a9c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9a9e:	4622      	mov	r2, r4
   d9aa0:	6868      	ldr	r0, [r5, #4]
   d9aa2:	f7fd f9bb 	bl	d6e1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9aa6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9aa8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d9aaa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9aac:	2e00      	cmp	r6, #0
   d9aae:	d034      	beq.n	d9b1a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d9ab0:	2900      	cmp	r1, #0
   d9ab2:	d132      	bne.n	d9b1a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9ab4:	6873      	ldr	r3, [r6, #4]
   d9ab6:	2b02      	cmp	r3, #2
   d9ab8:	d002      	beq.n	d9ac0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d9aba:	2b0a      	cmp	r3, #10
   d9abc:	d009      	beq.n	d9ad2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d9abe:	e02a      	b.n	d9b16 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d9ac0:	f1b8 0f00 	cmp.w	r8, #0
   d9ac4:	d027      	beq.n	d9b16 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9ac6:	6971      	ldr	r1, [r6, #20]
   d9ac8:	4638      	mov	r0, r7
   d9aca:	3104      	adds	r1, #4
   d9acc:	f7ff fd1d 	bl	d950a <_ZN9IPAddressaSEPKh>
   d9ad0:	e020      	b.n	d9b14 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9ad2:	f1b9 0f00 	cmp.w	r9, #0
   d9ad6:	d01e      	beq.n	d9b16 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9ad8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9ada:	2211      	movs	r2, #17
   d9adc:	a801      	add	r0, sp, #4
   d9ade:	f001 f86a 	bl	dabb6 <memset>
                    a.v = 6;
   d9ae2:	2306      	movs	r3, #6
   d9ae4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9ae8:	ad01      	add	r5, sp, #4
   d9aea:	f104 0308 	add.w	r3, r4, #8
   d9aee:	3418      	adds	r4, #24
   d9af0:	6818      	ldr	r0, [r3, #0]
   d9af2:	6859      	ldr	r1, [r3, #4]
   d9af4:	462a      	mov	r2, r5
   d9af6:	c203      	stmia	r2!, {r0, r1}
   d9af8:	3308      	adds	r3, #8
   d9afa:	42a3      	cmp	r3, r4
   d9afc:	4615      	mov	r5, r2
   d9afe:	d1f7      	bne.n	d9af0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d9b00:	a901      	add	r1, sp, #4
   d9b02:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9b04:	ad07      	add	r5, sp, #28
   d9b06:	f7ff fce1 	bl	d94cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b0c:	1d3c      	adds	r4, r7, #4
   d9b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b10:	682b      	ldr	r3, [r5, #0]
   d9b12:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9b14:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b16:	69f6      	ldr	r6, [r6, #28]
   d9b18:	e7c8      	b.n	d9aac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9b1a:	9800      	ldr	r0, [sp, #0]
   d9b1c:	f7fc fed6 	bl	d68cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9b20:	4638      	mov	r0, r7
   d9b22:	b015      	add	sp, #84	; 0x54
   d9b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9b28 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9b28:	4b02      	ldr	r3, [pc, #8]	; (d9b34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9b2a:	4a03      	ldr	r2, [pc, #12]	; (d9b38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9b2c:	601a      	str	r2, [r3, #0]
   d9b2e:	2200      	movs	r2, #0
   d9b30:	605a      	str	r2, [r3, #4]
   d9b32:	4770      	bx	lr
   d9b34:	2003e6f4 	.word	0x2003e6f4
   d9b38:	000dda10 	.word	0x000dda10

000d9b3c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9b3c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9b3e:	4e18      	ldr	r6, [pc, #96]	; (d9ba0 <pinAvailable+0x64>)
   d9b40:	6831      	ldr	r1, [r6, #0]
   d9b42:	f011 0501 	ands.w	r5, r1, #1
   d9b46:	4604      	mov	r4, r0
   d9b48:	d10a      	bne.n	d9b60 <pinAvailable+0x24>
   d9b4a:	4630      	mov	r0, r6
   d9b4c:	f7fa faab 	bl	d40a6 <__cxa_guard_acquire>
   d9b50:	b130      	cbz	r0, d9b60 <pinAvailable+0x24>
   d9b52:	4629      	mov	r1, r5
   d9b54:	4813      	ldr	r0, [pc, #76]	; (d9ba4 <pinAvailable+0x68>)
   d9b56:	f7fd fa5d 	bl	d7014 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9b5a:	4630      	mov	r0, r6
   d9b5c:	f7fa faa8 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9b60:	4810      	ldr	r0, [pc, #64]	; (d9ba4 <pinAvailable+0x68>)
   d9b62:	f7fd fb14 	bl	d718e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9b66:	b128      	cbz	r0, d9b74 <pinAvailable+0x38>
   d9b68:	f1a4 030b 	sub.w	r3, r4, #11
   d9b6c:	2b02      	cmp	r3, #2
   d9b6e:	d801      	bhi.n	d9b74 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d9b70:	2000      	movs	r0, #0
   d9b72:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9b74:	f000 f85c 	bl	d9c30 <_Z19__fetch_global_Wirev>
   d9b78:	f7ff fe7a 	bl	d9870 <_ZN7TwoWire9isEnabledEv>
   d9b7c:	b108      	cbz	r0, d9b82 <pinAvailable+0x46>
   d9b7e:	2c01      	cmp	r4, #1
   d9b80:	d9f6      	bls.n	d9b70 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d9b82:	f7ff fdfd 	bl	d9780 <_Z22__fetch_global_Serial1v>
   d9b86:	f7ff fdf7 	bl	d9778 <_ZN11USARTSerial9isEnabledEv>
   d9b8a:	b118      	cbz	r0, d9b94 <pinAvailable+0x58>
   d9b8c:	f1a4 0309 	sub.w	r3, r4, #9
   d9b90:	2b01      	cmp	r3, #1
   d9b92:	d9ed      	bls.n	d9b70 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9b94:	2c25      	cmp	r4, #37	; 0x25
   d9b96:	bf8c      	ite	hi
   d9b98:	2000      	movhi	r0, #0
   d9b9a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9b9c:	bd70      	pop	{r4, r5, r6, pc}
   d9b9e:	bf00      	nop
   d9ba0:	2003e6fc 	.word	0x2003e6fc
   d9ba4:	2003e700 	.word	0x2003e700

000d9ba8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9ba8:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9baa:	b538      	push	{r3, r4, r5, lr}
   d9bac:	4604      	mov	r4, r0
   d9bae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9bb0:	d80a      	bhi.n	d9bc8 <pinMode+0x20>
   d9bb2:	29ff      	cmp	r1, #255	; 0xff
   d9bb4:	d008      	beq.n	d9bc8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9bb6:	f7ff ffc1 	bl	d9b3c <pinAvailable>
   d9bba:	b128      	cbz	r0, d9bc8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9bbc:	4629      	mov	r1, r5
   d9bbe:	4620      	mov	r0, r4
}
   d9bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9bc4:	f7fc be9a 	b.w	d68fc <HAL_Pin_Mode>
   d9bc8:	bd38      	pop	{r3, r4, r5, pc}

000d9bca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9bca:	b538      	push	{r3, r4, r5, lr}
   d9bcc:	4604      	mov	r4, r0
   d9bce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9bd0:	f7fc fe9c 	bl	d690c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9bd4:	28ff      	cmp	r0, #255	; 0xff
   d9bd6:	d010      	beq.n	d9bfa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9bd8:	2806      	cmp	r0, #6
   d9bda:	d804      	bhi.n	d9be6 <digitalWrite+0x1c>
   d9bdc:	234d      	movs	r3, #77	; 0x4d
   d9bde:	fa23 f000 	lsr.w	r0, r3, r0
   d9be2:	07c3      	lsls	r3, r0, #31
   d9be4:	d409      	bmi.n	d9bfa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9be6:	4620      	mov	r0, r4
   d9be8:	f7ff ffa8 	bl	d9b3c <pinAvailable>
   d9bec:	b128      	cbz	r0, d9bfa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9bee:	4629      	mov	r1, r5
   d9bf0:	4620      	mov	r0, r4
}
   d9bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9bf6:	f7fc be91 	b.w	d691c <HAL_GPIO_Write>
   d9bfa:	bd38      	pop	{r3, r4, r5, pc}

000d9bfc <_Z17acquireWireBufferv>:
   d9bfc:	b570      	push	{r4, r5, r6, lr}
   d9bfe:	4604      	mov	r4, r0
   d9c00:	2514      	movs	r5, #20
   d9c02:	462a      	mov	r2, r5
   d9c04:	4e09      	ldr	r6, [pc, #36]	; (d9c2c <_Z17acquireWireBufferv+0x30>)
   d9c06:	2100      	movs	r1, #0
   d9c08:	f000 ffd5 	bl	dabb6 <memset>
   d9c0c:	8025      	strh	r5, [r4, #0]
   d9c0e:	2520      	movs	r5, #32
   d9c10:	4631      	mov	r1, r6
   d9c12:	60a5      	str	r5, [r4, #8]
   d9c14:	6125      	str	r5, [r4, #16]
   d9c16:	4628      	mov	r0, r5
   d9c18:	f000 f840 	bl	d9c9c <_ZnajRKSt9nothrow_t>
   d9c1c:	4631      	mov	r1, r6
   d9c1e:	6060      	str	r0, [r4, #4]
   d9c20:	4628      	mov	r0, r5
   d9c22:	f000 f83b 	bl	d9c9c <_ZnajRKSt9nothrow_t>
   d9c26:	60e0      	str	r0, [r4, #12]
   d9c28:	4620      	mov	r0, r4
   d9c2a:	bd70      	pop	{r4, r5, r6, pc}
   d9c2c:	000dda3c 	.word	0x000dda3c

000d9c30 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9c30:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9c32:	4d0e      	ldr	r5, [pc, #56]	; (d9c6c <_Z19__fetch_global_Wirev+0x3c>)
   d9c34:	6829      	ldr	r1, [r5, #0]
   d9c36:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9c3a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9c3c:	d113      	bne.n	d9c66 <_Z19__fetch_global_Wirev+0x36>
   d9c3e:	4628      	mov	r0, r5
   d9c40:	f7fa fa31 	bl	d40a6 <__cxa_guard_acquire>
   d9c44:	b178      	cbz	r0, d9c66 <_Z19__fetch_global_Wirev+0x36>
   d9c46:	a801      	add	r0, sp, #4
   d9c48:	f7ff ffd8 	bl	d9bfc <_Z17acquireWireBufferv>
   d9c4c:	aa01      	add	r2, sp, #4
   d9c4e:	4621      	mov	r1, r4
   d9c50:	4807      	ldr	r0, [pc, #28]	; (d9c70 <_Z19__fetch_global_Wirev+0x40>)
   d9c52:	f7ff fdfb 	bl	d984c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d9c56:	4628      	mov	r0, r5
   d9c58:	f7fa fa2a 	bl	d40b0 <__cxa_guard_release>
   d9c5c:	4a05      	ldr	r2, [pc, #20]	; (d9c74 <_Z19__fetch_global_Wirev+0x44>)
   d9c5e:	4906      	ldr	r1, [pc, #24]	; (d9c78 <_Z19__fetch_global_Wirev+0x48>)
   d9c60:	4803      	ldr	r0, [pc, #12]	; (d9c70 <_Z19__fetch_global_Wirev+0x40>)
   d9c62:	f000 f80b 	bl	d9c7c <__aeabi_atexit>
	return wire;
}
   d9c66:	4802      	ldr	r0, [pc, #8]	; (d9c70 <_Z19__fetch_global_Wirev+0x40>)
   d9c68:	b007      	add	sp, #28
   d9c6a:	bd30      	pop	{r4, r5, pc}
   d9c6c:	2003e70c 	.word	0x2003e70c
   d9c70:	2003e710 	.word	0x2003e710
   d9c74:	2003d684 	.word	0x2003d684
   d9c78:	000d97f5 	.word	0x000d97f5

000d9c7c <__aeabi_atexit>:
   d9c7c:	460b      	mov	r3, r1
   d9c7e:	4601      	mov	r1, r0
   d9c80:	4618      	mov	r0, r3
   d9c82:	f000 be59 	b.w	da938 <__cxa_atexit>
	...

000d9c88 <_ZSt15get_new_handlerv>:
   d9c88:	4b02      	ldr	r3, [pc, #8]	; (d9c94 <_ZSt15get_new_handlerv+0xc>)
   d9c8a:	6818      	ldr	r0, [r3, #0]
   d9c8c:	f3bf 8f5f 	dmb	sy
   d9c90:	4770      	bx	lr
   d9c92:	bf00      	nop
   d9c94:	2003e724 	.word	0x2003e724

000d9c98 <_ZdlPvj>:
   d9c98:	f7fa ba01 	b.w	d409e <_ZdlPv>

000d9c9c <_ZnajRKSt9nothrow_t>:
   d9c9c:	f000 b800 	b.w	d9ca0 <_ZnwjRKSt9nothrow_t>

000d9ca0 <_ZnwjRKSt9nothrow_t>:
   d9ca0:	b510      	push	{r4, lr}
   d9ca2:	2800      	cmp	r0, #0
   d9ca4:	bf14      	ite	ne
   d9ca6:	4604      	movne	r4, r0
   d9ca8:	2401      	moveq	r4, #1
   d9caa:	4620      	mov	r0, r4
   d9cac:	f7fd f91e 	bl	d6eec <malloc>
   d9cb0:	b920      	cbnz	r0, d9cbc <_ZnwjRKSt9nothrow_t+0x1c>
   d9cb2:	f7ff ffe9 	bl	d9c88 <_ZSt15get_new_handlerv>
   d9cb6:	b108      	cbz	r0, d9cbc <_ZnwjRKSt9nothrow_t+0x1c>
   d9cb8:	4780      	blx	r0
   d9cba:	e7f6      	b.n	d9caa <_ZnwjRKSt9nothrow_t+0xa>
   d9cbc:	bd10      	pop	{r4, pc}

000d9cbe <_ZSt25__throw_bad_function_callv>:
   d9cbe:	b508      	push	{r3, lr}
   d9cc0:	f7fd f954 	bl	d6f6c <abort>

000d9cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9cc4:	4b18      	ldr	r3, [pc, #96]	; (d9d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9cc6:	681a      	ldr	r2, [r3, #0]
   d9cc8:	07d1      	lsls	r1, r2, #31
   d9cca:	bf5c      	itt	pl
   d9ccc:	2201      	movpl	r2, #1
   d9cce:	601a      	strpl	r2, [r3, #0]
   d9cd0:	4b16      	ldr	r3, [pc, #88]	; (d9d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9cd2:	681a      	ldr	r2, [r3, #0]
   d9cd4:	07d2      	lsls	r2, r2, #31
   d9cd6:	bf5c      	itt	pl
   d9cd8:	2201      	movpl	r2, #1
   d9cda:	601a      	strpl	r2, [r3, #0]
   d9cdc:	4b14      	ldr	r3, [pc, #80]	; (d9d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9cde:	681a      	ldr	r2, [r3, #0]
   d9ce0:	07d0      	lsls	r0, r2, #31
   d9ce2:	bf5c      	itt	pl
   d9ce4:	2201      	movpl	r2, #1
   d9ce6:	601a      	strpl	r2, [r3, #0]
   d9ce8:	4b12      	ldr	r3, [pc, #72]	; (d9d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9cea:	681a      	ldr	r2, [r3, #0]
   d9cec:	07d1      	lsls	r1, r2, #31
   d9cee:	bf5c      	itt	pl
   d9cf0:	2201      	movpl	r2, #1
   d9cf2:	601a      	strpl	r2, [r3, #0]
   d9cf4:	4b10      	ldr	r3, [pc, #64]	; (d9d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9cf6:	681a      	ldr	r2, [r3, #0]
   d9cf8:	07d2      	lsls	r2, r2, #31
   d9cfa:	bf5c      	itt	pl
   d9cfc:	2201      	movpl	r2, #1
   d9cfe:	601a      	strpl	r2, [r3, #0]
   d9d00:	4b0e      	ldr	r3, [pc, #56]	; (d9d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9d02:	681a      	ldr	r2, [r3, #0]
   d9d04:	07d0      	lsls	r0, r2, #31
   d9d06:	bf5c      	itt	pl
   d9d08:	2201      	movpl	r2, #1
   d9d0a:	601a      	strpl	r2, [r3, #0]
   d9d0c:	4b0c      	ldr	r3, [pc, #48]	; (d9d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9d0e:	681a      	ldr	r2, [r3, #0]
   d9d10:	07d1      	lsls	r1, r2, #31
   d9d12:	bf5c      	itt	pl
   d9d14:	2201      	movpl	r2, #1
   d9d16:	601a      	strpl	r2, [r3, #0]
   d9d18:	4b0a      	ldr	r3, [pc, #40]	; (d9d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9d1a:	681a      	ldr	r2, [r3, #0]
   d9d1c:	07d2      	lsls	r2, r2, #31
   d9d1e:	bf5c      	itt	pl
   d9d20:	2201      	movpl	r2, #1
   d9d22:	601a      	strpl	r2, [r3, #0]
   d9d24:	4770      	bx	lr
   d9d26:	bf00      	nop
   d9d28:	2003e744 	.word	0x2003e744
   d9d2c:	2003e740 	.word	0x2003e740
   d9d30:	2003e73c 	.word	0x2003e73c
   d9d34:	2003e738 	.word	0x2003e738
   d9d38:	2003e734 	.word	0x2003e734
   d9d3c:	2003e730 	.word	0x2003e730
   d9d40:	2003e72c 	.word	0x2003e72c
   d9d44:	2003e728 	.word	0x2003e728

000d9d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9d48:	4b24      	ldr	r3, [pc, #144]	; (d9ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d9d4a:	681a      	ldr	r2, [r3, #0]
   d9d4c:	07d0      	lsls	r0, r2, #31
   d9d4e:	bf5c      	itt	pl
   d9d50:	2201      	movpl	r2, #1
   d9d52:	601a      	strpl	r2, [r3, #0]
   d9d54:	4b22      	ldr	r3, [pc, #136]	; (d9de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d9d56:	681a      	ldr	r2, [r3, #0]
   d9d58:	07d1      	lsls	r1, r2, #31
   d9d5a:	bf5c      	itt	pl
   d9d5c:	2201      	movpl	r2, #1
   d9d5e:	601a      	strpl	r2, [r3, #0]
   d9d60:	4b20      	ldr	r3, [pc, #128]	; (d9de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d9d62:	681a      	ldr	r2, [r3, #0]
   d9d64:	07d2      	lsls	r2, r2, #31
   d9d66:	bf5c      	itt	pl
   d9d68:	2201      	movpl	r2, #1
   d9d6a:	601a      	strpl	r2, [r3, #0]
   d9d6c:	4b1e      	ldr	r3, [pc, #120]	; (d9de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d9d6e:	681a      	ldr	r2, [r3, #0]
   d9d70:	07d0      	lsls	r0, r2, #31
   d9d72:	bf5c      	itt	pl
   d9d74:	2201      	movpl	r2, #1
   d9d76:	601a      	strpl	r2, [r3, #0]
   d9d78:	4b1c      	ldr	r3, [pc, #112]	; (d9dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d9d7a:	681a      	ldr	r2, [r3, #0]
   d9d7c:	07d1      	lsls	r1, r2, #31
   d9d7e:	bf5c      	itt	pl
   d9d80:	2201      	movpl	r2, #1
   d9d82:	601a      	strpl	r2, [r3, #0]
   d9d84:	4b1a      	ldr	r3, [pc, #104]	; (d9df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d9d86:	681a      	ldr	r2, [r3, #0]
   d9d88:	07d2      	lsls	r2, r2, #31
   d9d8a:	bf5c      	itt	pl
   d9d8c:	2201      	movpl	r2, #1
   d9d8e:	601a      	strpl	r2, [r3, #0]
   d9d90:	4b18      	ldr	r3, [pc, #96]	; (d9df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9d92:	681a      	ldr	r2, [r3, #0]
   d9d94:	07d0      	lsls	r0, r2, #31
   d9d96:	bf5c      	itt	pl
   d9d98:	2201      	movpl	r2, #1
   d9d9a:	601a      	strpl	r2, [r3, #0]
   d9d9c:	4b16      	ldr	r3, [pc, #88]	; (d9df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d9d9e:	681a      	ldr	r2, [r3, #0]
   d9da0:	07d1      	lsls	r1, r2, #31
   d9da2:	bf5c      	itt	pl
   d9da4:	2201      	movpl	r2, #1
   d9da6:	601a      	strpl	r2, [r3, #0]
   d9da8:	4b14      	ldr	r3, [pc, #80]	; (d9dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d9daa:	681a      	ldr	r2, [r3, #0]
   d9dac:	07d2      	lsls	r2, r2, #31
   d9dae:	bf5c      	itt	pl
   d9db0:	2201      	movpl	r2, #1
   d9db2:	601a      	strpl	r2, [r3, #0]
   d9db4:	4b12      	ldr	r3, [pc, #72]	; (d9e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d9db6:	681a      	ldr	r2, [r3, #0]
   d9db8:	07d0      	lsls	r0, r2, #31
   d9dba:	bf5c      	itt	pl
   d9dbc:	2201      	movpl	r2, #1
   d9dbe:	601a      	strpl	r2, [r3, #0]
   d9dc0:	4b10      	ldr	r3, [pc, #64]	; (d9e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d9dc2:	681a      	ldr	r2, [r3, #0]
   d9dc4:	07d1      	lsls	r1, r2, #31
   d9dc6:	bf5c      	itt	pl
   d9dc8:	2201      	movpl	r2, #1
   d9dca:	601a      	strpl	r2, [r3, #0]
   d9dcc:	4b0e      	ldr	r3, [pc, #56]	; (d9e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d9dce:	681a      	ldr	r2, [r3, #0]
   d9dd0:	07d2      	lsls	r2, r2, #31
   d9dd2:	bf5c      	itt	pl
   d9dd4:	2201      	movpl	r2, #1
   d9dd6:	601a      	strpl	r2, [r3, #0]
   d9dd8:	4770      	bx	lr
   d9dda:	bf00      	nop
   d9ddc:	2003e774 	.word	0x2003e774
   d9de0:	2003e770 	.word	0x2003e770
   d9de4:	2003e76c 	.word	0x2003e76c
   d9de8:	2003e768 	.word	0x2003e768
   d9dec:	2003e764 	.word	0x2003e764
   d9df0:	2003e760 	.word	0x2003e760
   d9df4:	2003e75c 	.word	0x2003e75c
   d9df8:	2003e758 	.word	0x2003e758
   d9dfc:	2003e754 	.word	0x2003e754
   d9e00:	2003e750 	.word	0x2003e750
   d9e04:	2003e74c 	.word	0x2003e74c
   d9e08:	2003e748 	.word	0x2003e748

000d9e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9e0c:	4b24      	ldr	r3, [pc, #144]	; (d9ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9e0e:	681a      	ldr	r2, [r3, #0]
   d9e10:	07d0      	lsls	r0, r2, #31
   d9e12:	bf5c      	itt	pl
   d9e14:	2201      	movpl	r2, #1
   d9e16:	601a      	strpl	r2, [r3, #0]
   d9e18:	4b22      	ldr	r3, [pc, #136]	; (d9ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9e1a:	681a      	ldr	r2, [r3, #0]
   d9e1c:	07d1      	lsls	r1, r2, #31
   d9e1e:	bf5c      	itt	pl
   d9e20:	2201      	movpl	r2, #1
   d9e22:	601a      	strpl	r2, [r3, #0]
   d9e24:	4b20      	ldr	r3, [pc, #128]	; (d9ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9e26:	681a      	ldr	r2, [r3, #0]
   d9e28:	07d2      	lsls	r2, r2, #31
   d9e2a:	bf5c      	itt	pl
   d9e2c:	2201      	movpl	r2, #1
   d9e2e:	601a      	strpl	r2, [r3, #0]
   d9e30:	4b1e      	ldr	r3, [pc, #120]	; (d9eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9e32:	681a      	ldr	r2, [r3, #0]
   d9e34:	07d0      	lsls	r0, r2, #31
   d9e36:	bf5c      	itt	pl
   d9e38:	2201      	movpl	r2, #1
   d9e3a:	601a      	strpl	r2, [r3, #0]
   d9e3c:	4b1c      	ldr	r3, [pc, #112]	; (d9eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9e3e:	681a      	ldr	r2, [r3, #0]
   d9e40:	07d1      	lsls	r1, r2, #31
   d9e42:	bf5c      	itt	pl
   d9e44:	2201      	movpl	r2, #1
   d9e46:	601a      	strpl	r2, [r3, #0]
   d9e48:	4b1a      	ldr	r3, [pc, #104]	; (d9eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9e4a:	681a      	ldr	r2, [r3, #0]
   d9e4c:	07d2      	lsls	r2, r2, #31
   d9e4e:	bf5c      	itt	pl
   d9e50:	2201      	movpl	r2, #1
   d9e52:	601a      	strpl	r2, [r3, #0]
   d9e54:	4b18      	ldr	r3, [pc, #96]	; (d9eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9e56:	681a      	ldr	r2, [r3, #0]
   d9e58:	07d0      	lsls	r0, r2, #31
   d9e5a:	bf5c      	itt	pl
   d9e5c:	2201      	movpl	r2, #1
   d9e5e:	601a      	strpl	r2, [r3, #0]
   d9e60:	4b16      	ldr	r3, [pc, #88]	; (d9ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d9e62:	681a      	ldr	r2, [r3, #0]
   d9e64:	07d1      	lsls	r1, r2, #31
   d9e66:	bf5c      	itt	pl
   d9e68:	2201      	movpl	r2, #1
   d9e6a:	601a      	strpl	r2, [r3, #0]
   d9e6c:	4b14      	ldr	r3, [pc, #80]	; (d9ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d9e6e:	681a      	ldr	r2, [r3, #0]
   d9e70:	07d2      	lsls	r2, r2, #31
   d9e72:	bf5c      	itt	pl
   d9e74:	2201      	movpl	r2, #1
   d9e76:	601a      	strpl	r2, [r3, #0]
   d9e78:	4b12      	ldr	r3, [pc, #72]	; (d9ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d9e7a:	681a      	ldr	r2, [r3, #0]
   d9e7c:	07d0      	lsls	r0, r2, #31
   d9e7e:	bf5c      	itt	pl
   d9e80:	2201      	movpl	r2, #1
   d9e82:	601a      	strpl	r2, [r3, #0]
   d9e84:	4b10      	ldr	r3, [pc, #64]	; (d9ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9e86:	681a      	ldr	r2, [r3, #0]
   d9e88:	07d1      	lsls	r1, r2, #31
   d9e8a:	bf5c      	itt	pl
   d9e8c:	2201      	movpl	r2, #1
   d9e8e:	601a      	strpl	r2, [r3, #0]
   d9e90:	4b0e      	ldr	r3, [pc, #56]	; (d9ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9e92:	681a      	ldr	r2, [r3, #0]
   d9e94:	07d2      	lsls	r2, r2, #31
   d9e96:	bf5c      	itt	pl
   d9e98:	2201      	movpl	r2, #1
   d9e9a:	601a      	strpl	r2, [r3, #0]
   d9e9c:	4770      	bx	lr
   d9e9e:	bf00      	nop
   d9ea0:	2003e7a4 	.word	0x2003e7a4
   d9ea4:	2003e7a0 	.word	0x2003e7a0
   d9ea8:	2003e79c 	.word	0x2003e79c
   d9eac:	2003e798 	.word	0x2003e798
   d9eb0:	2003e794 	.word	0x2003e794
   d9eb4:	2003e790 	.word	0x2003e790
   d9eb8:	2003e78c 	.word	0x2003e78c
   d9ebc:	2003e788 	.word	0x2003e788
   d9ec0:	2003e784 	.word	0x2003e784
   d9ec4:	2003e780 	.word	0x2003e780
   d9ec8:	2003e77c 	.word	0x2003e77c
   d9ecc:	2003e778 	.word	0x2003e778

000d9ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9ed0:	4b18      	ldr	r3, [pc, #96]	; (d9f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9ed2:	681a      	ldr	r2, [r3, #0]
   d9ed4:	07d1      	lsls	r1, r2, #31
   d9ed6:	bf5c      	itt	pl
   d9ed8:	2201      	movpl	r2, #1
   d9eda:	601a      	strpl	r2, [r3, #0]
   d9edc:	4b16      	ldr	r3, [pc, #88]	; (d9f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9ede:	681a      	ldr	r2, [r3, #0]
   d9ee0:	07d2      	lsls	r2, r2, #31
   d9ee2:	bf5c      	itt	pl
   d9ee4:	2201      	movpl	r2, #1
   d9ee6:	601a      	strpl	r2, [r3, #0]
   d9ee8:	4b14      	ldr	r3, [pc, #80]	; (d9f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9eea:	681a      	ldr	r2, [r3, #0]
   d9eec:	07d0      	lsls	r0, r2, #31
   d9eee:	bf5c      	itt	pl
   d9ef0:	2201      	movpl	r2, #1
   d9ef2:	601a      	strpl	r2, [r3, #0]
   d9ef4:	4b12      	ldr	r3, [pc, #72]	; (d9f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9ef6:	681a      	ldr	r2, [r3, #0]
   d9ef8:	07d1      	lsls	r1, r2, #31
   d9efa:	bf5c      	itt	pl
   d9efc:	2201      	movpl	r2, #1
   d9efe:	601a      	strpl	r2, [r3, #0]
   d9f00:	4b10      	ldr	r3, [pc, #64]	; (d9f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9f02:	681a      	ldr	r2, [r3, #0]
   d9f04:	07d2      	lsls	r2, r2, #31
   d9f06:	bf5c      	itt	pl
   d9f08:	2201      	movpl	r2, #1
   d9f0a:	601a      	strpl	r2, [r3, #0]
   d9f0c:	4b0e      	ldr	r3, [pc, #56]	; (d9f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9f0e:	681a      	ldr	r2, [r3, #0]
   d9f10:	07d0      	lsls	r0, r2, #31
   d9f12:	bf5c      	itt	pl
   d9f14:	2201      	movpl	r2, #1
   d9f16:	601a      	strpl	r2, [r3, #0]
   d9f18:	4b0c      	ldr	r3, [pc, #48]	; (d9f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9f1a:	681a      	ldr	r2, [r3, #0]
   d9f1c:	07d1      	lsls	r1, r2, #31
   d9f1e:	bf5c      	itt	pl
   d9f20:	2201      	movpl	r2, #1
   d9f22:	601a      	strpl	r2, [r3, #0]
   d9f24:	4b0a      	ldr	r3, [pc, #40]	; (d9f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9f26:	681a      	ldr	r2, [r3, #0]
   d9f28:	07d2      	lsls	r2, r2, #31
   d9f2a:	bf5c      	itt	pl
   d9f2c:	2201      	movpl	r2, #1
   d9f2e:	601a      	strpl	r2, [r3, #0]
   d9f30:	4770      	bx	lr
   d9f32:	bf00      	nop
   d9f34:	2003e7c4 	.word	0x2003e7c4
   d9f38:	2003e7c0 	.word	0x2003e7c0
   d9f3c:	2003e7bc 	.word	0x2003e7bc
   d9f40:	2003e7b8 	.word	0x2003e7b8
   d9f44:	2003e7b4 	.word	0x2003e7b4
   d9f48:	2003e7b0 	.word	0x2003e7b0
   d9f4c:	2003e7ac 	.word	0x2003e7ac
   d9f50:	2003e7a8 	.word	0x2003e7a8

000d9f54 <__aeabi_drsub>:
   d9f54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9f58:	e002      	b.n	d9f60 <__adddf3>
   d9f5a:	bf00      	nop

000d9f5c <__aeabi_dsub>:
   d9f5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9f60 <__adddf3>:
   d9f60:	b530      	push	{r4, r5, lr}
   d9f62:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9f66:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9f6a:	ea94 0f05 	teq	r4, r5
   d9f6e:	bf08      	it	eq
   d9f70:	ea90 0f02 	teqeq	r0, r2
   d9f74:	bf1f      	itttt	ne
   d9f76:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9f7a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9f7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9f82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9f86:	f000 80e2 	beq.w	da14e <__adddf3+0x1ee>
   d9f8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9f8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9f92:	bfb8      	it	lt
   d9f94:	426d      	neglt	r5, r5
   d9f96:	dd0c      	ble.n	d9fb2 <__adddf3+0x52>
   d9f98:	442c      	add	r4, r5
   d9f9a:	ea80 0202 	eor.w	r2, r0, r2
   d9f9e:	ea81 0303 	eor.w	r3, r1, r3
   d9fa2:	ea82 0000 	eor.w	r0, r2, r0
   d9fa6:	ea83 0101 	eor.w	r1, r3, r1
   d9faa:	ea80 0202 	eor.w	r2, r0, r2
   d9fae:	ea81 0303 	eor.w	r3, r1, r3
   d9fb2:	2d36      	cmp	r5, #54	; 0x36
   d9fb4:	bf88      	it	hi
   d9fb6:	bd30      	pophi	{r4, r5, pc}
   d9fb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9fbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9fc0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9fc4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9fc8:	d002      	beq.n	d9fd0 <__adddf3+0x70>
   d9fca:	4240      	negs	r0, r0
   d9fcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9fd0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9fd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9fd8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9fdc:	d002      	beq.n	d9fe4 <__adddf3+0x84>
   d9fde:	4252      	negs	r2, r2
   d9fe0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9fe4:	ea94 0f05 	teq	r4, r5
   d9fe8:	f000 80a7 	beq.w	da13a <__adddf3+0x1da>
   d9fec:	f1a4 0401 	sub.w	r4, r4, #1
   d9ff0:	f1d5 0e20 	rsbs	lr, r5, #32
   d9ff4:	db0d      	blt.n	da012 <__adddf3+0xb2>
   d9ff6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9ffa:	fa22 f205 	lsr.w	r2, r2, r5
   d9ffe:	1880      	adds	r0, r0, r2
   da000:	f141 0100 	adc.w	r1, r1, #0
   da004:	fa03 f20e 	lsl.w	r2, r3, lr
   da008:	1880      	adds	r0, r0, r2
   da00a:	fa43 f305 	asr.w	r3, r3, r5
   da00e:	4159      	adcs	r1, r3
   da010:	e00e      	b.n	da030 <__adddf3+0xd0>
   da012:	f1a5 0520 	sub.w	r5, r5, #32
   da016:	f10e 0e20 	add.w	lr, lr, #32
   da01a:	2a01      	cmp	r2, #1
   da01c:	fa03 fc0e 	lsl.w	ip, r3, lr
   da020:	bf28      	it	cs
   da022:	f04c 0c02 	orrcs.w	ip, ip, #2
   da026:	fa43 f305 	asr.w	r3, r3, r5
   da02a:	18c0      	adds	r0, r0, r3
   da02c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da030:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da034:	d507      	bpl.n	da046 <__adddf3+0xe6>
   da036:	f04f 0e00 	mov.w	lr, #0
   da03a:	f1dc 0c00 	rsbs	ip, ip, #0
   da03e:	eb7e 0000 	sbcs.w	r0, lr, r0
   da042:	eb6e 0101 	sbc.w	r1, lr, r1
   da046:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da04a:	d31b      	bcc.n	da084 <__adddf3+0x124>
   da04c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da050:	d30c      	bcc.n	da06c <__adddf3+0x10c>
   da052:	0849      	lsrs	r1, r1, #1
   da054:	ea5f 0030 	movs.w	r0, r0, rrx
   da058:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da05c:	f104 0401 	add.w	r4, r4, #1
   da060:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da064:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da068:	f080 809a 	bcs.w	da1a0 <__adddf3+0x240>
   da06c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da070:	bf08      	it	eq
   da072:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da076:	f150 0000 	adcs.w	r0, r0, #0
   da07a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da07e:	ea41 0105 	orr.w	r1, r1, r5
   da082:	bd30      	pop	{r4, r5, pc}
   da084:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da088:	4140      	adcs	r0, r0
   da08a:	eb41 0101 	adc.w	r1, r1, r1
   da08e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da092:	f1a4 0401 	sub.w	r4, r4, #1
   da096:	d1e9      	bne.n	da06c <__adddf3+0x10c>
   da098:	f091 0f00 	teq	r1, #0
   da09c:	bf04      	itt	eq
   da09e:	4601      	moveq	r1, r0
   da0a0:	2000      	moveq	r0, #0
   da0a2:	fab1 f381 	clz	r3, r1
   da0a6:	bf08      	it	eq
   da0a8:	3320      	addeq	r3, #32
   da0aa:	f1a3 030b 	sub.w	r3, r3, #11
   da0ae:	f1b3 0220 	subs.w	r2, r3, #32
   da0b2:	da0c      	bge.n	da0ce <__adddf3+0x16e>
   da0b4:	320c      	adds	r2, #12
   da0b6:	dd08      	ble.n	da0ca <__adddf3+0x16a>
   da0b8:	f102 0c14 	add.w	ip, r2, #20
   da0bc:	f1c2 020c 	rsb	r2, r2, #12
   da0c0:	fa01 f00c 	lsl.w	r0, r1, ip
   da0c4:	fa21 f102 	lsr.w	r1, r1, r2
   da0c8:	e00c      	b.n	da0e4 <__adddf3+0x184>
   da0ca:	f102 0214 	add.w	r2, r2, #20
   da0ce:	bfd8      	it	le
   da0d0:	f1c2 0c20 	rsble	ip, r2, #32
   da0d4:	fa01 f102 	lsl.w	r1, r1, r2
   da0d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   da0dc:	bfdc      	itt	le
   da0de:	ea41 010c 	orrle.w	r1, r1, ip
   da0e2:	4090      	lslle	r0, r2
   da0e4:	1ae4      	subs	r4, r4, r3
   da0e6:	bfa2      	ittt	ge
   da0e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da0ec:	4329      	orrge	r1, r5
   da0ee:	bd30      	popge	{r4, r5, pc}
   da0f0:	ea6f 0404 	mvn.w	r4, r4
   da0f4:	3c1f      	subs	r4, #31
   da0f6:	da1c      	bge.n	da132 <__adddf3+0x1d2>
   da0f8:	340c      	adds	r4, #12
   da0fa:	dc0e      	bgt.n	da11a <__adddf3+0x1ba>
   da0fc:	f104 0414 	add.w	r4, r4, #20
   da100:	f1c4 0220 	rsb	r2, r4, #32
   da104:	fa20 f004 	lsr.w	r0, r0, r4
   da108:	fa01 f302 	lsl.w	r3, r1, r2
   da10c:	ea40 0003 	orr.w	r0, r0, r3
   da110:	fa21 f304 	lsr.w	r3, r1, r4
   da114:	ea45 0103 	orr.w	r1, r5, r3
   da118:	bd30      	pop	{r4, r5, pc}
   da11a:	f1c4 040c 	rsb	r4, r4, #12
   da11e:	f1c4 0220 	rsb	r2, r4, #32
   da122:	fa20 f002 	lsr.w	r0, r0, r2
   da126:	fa01 f304 	lsl.w	r3, r1, r4
   da12a:	ea40 0003 	orr.w	r0, r0, r3
   da12e:	4629      	mov	r1, r5
   da130:	bd30      	pop	{r4, r5, pc}
   da132:	fa21 f004 	lsr.w	r0, r1, r4
   da136:	4629      	mov	r1, r5
   da138:	bd30      	pop	{r4, r5, pc}
   da13a:	f094 0f00 	teq	r4, #0
   da13e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da142:	bf06      	itte	eq
   da144:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da148:	3401      	addeq	r4, #1
   da14a:	3d01      	subne	r5, #1
   da14c:	e74e      	b.n	d9fec <__adddf3+0x8c>
   da14e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da152:	bf18      	it	ne
   da154:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da158:	d029      	beq.n	da1ae <__adddf3+0x24e>
   da15a:	ea94 0f05 	teq	r4, r5
   da15e:	bf08      	it	eq
   da160:	ea90 0f02 	teqeq	r0, r2
   da164:	d005      	beq.n	da172 <__adddf3+0x212>
   da166:	ea54 0c00 	orrs.w	ip, r4, r0
   da16a:	bf04      	itt	eq
   da16c:	4619      	moveq	r1, r3
   da16e:	4610      	moveq	r0, r2
   da170:	bd30      	pop	{r4, r5, pc}
   da172:	ea91 0f03 	teq	r1, r3
   da176:	bf1e      	ittt	ne
   da178:	2100      	movne	r1, #0
   da17a:	2000      	movne	r0, #0
   da17c:	bd30      	popne	{r4, r5, pc}
   da17e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da182:	d105      	bne.n	da190 <__adddf3+0x230>
   da184:	0040      	lsls	r0, r0, #1
   da186:	4149      	adcs	r1, r1
   da188:	bf28      	it	cs
   da18a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da18e:	bd30      	pop	{r4, r5, pc}
   da190:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da194:	bf3c      	itt	cc
   da196:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da19a:	bd30      	popcc	{r4, r5, pc}
   da19c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da1a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da1a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da1a8:	f04f 0000 	mov.w	r0, #0
   da1ac:	bd30      	pop	{r4, r5, pc}
   da1ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da1b2:	bf1a      	itte	ne
   da1b4:	4619      	movne	r1, r3
   da1b6:	4610      	movne	r0, r2
   da1b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da1bc:	bf1c      	itt	ne
   da1be:	460b      	movne	r3, r1
   da1c0:	4602      	movne	r2, r0
   da1c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da1c6:	bf06      	itte	eq
   da1c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da1cc:	ea91 0f03 	teqeq	r1, r3
   da1d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da1d4:	bd30      	pop	{r4, r5, pc}
   da1d6:	bf00      	nop

000da1d8 <__aeabi_ui2d>:
   da1d8:	f090 0f00 	teq	r0, #0
   da1dc:	bf04      	itt	eq
   da1de:	2100      	moveq	r1, #0
   da1e0:	4770      	bxeq	lr
   da1e2:	b530      	push	{r4, r5, lr}
   da1e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da1e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da1ec:	f04f 0500 	mov.w	r5, #0
   da1f0:	f04f 0100 	mov.w	r1, #0
   da1f4:	e750      	b.n	da098 <__adddf3+0x138>
   da1f6:	bf00      	nop

000da1f8 <__aeabi_i2d>:
   da1f8:	f090 0f00 	teq	r0, #0
   da1fc:	bf04      	itt	eq
   da1fe:	2100      	moveq	r1, #0
   da200:	4770      	bxeq	lr
   da202:	b530      	push	{r4, r5, lr}
   da204:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da208:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da20c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da210:	bf48      	it	mi
   da212:	4240      	negmi	r0, r0
   da214:	f04f 0100 	mov.w	r1, #0
   da218:	e73e      	b.n	da098 <__adddf3+0x138>
   da21a:	bf00      	nop

000da21c <__aeabi_f2d>:
   da21c:	0042      	lsls	r2, r0, #1
   da21e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da222:	ea4f 0131 	mov.w	r1, r1, rrx
   da226:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da22a:	bf1f      	itttt	ne
   da22c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da230:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da234:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da238:	4770      	bxne	lr
   da23a:	f092 0f00 	teq	r2, #0
   da23e:	bf14      	ite	ne
   da240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da244:	4770      	bxeq	lr
   da246:	b530      	push	{r4, r5, lr}
   da248:	f44f 7460 	mov.w	r4, #896	; 0x380
   da24c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da254:	e720      	b.n	da098 <__adddf3+0x138>
   da256:	bf00      	nop

000da258 <__aeabi_ul2d>:
   da258:	ea50 0201 	orrs.w	r2, r0, r1
   da25c:	bf08      	it	eq
   da25e:	4770      	bxeq	lr
   da260:	b530      	push	{r4, r5, lr}
   da262:	f04f 0500 	mov.w	r5, #0
   da266:	e00a      	b.n	da27e <__aeabi_l2d+0x16>

000da268 <__aeabi_l2d>:
   da268:	ea50 0201 	orrs.w	r2, r0, r1
   da26c:	bf08      	it	eq
   da26e:	4770      	bxeq	lr
   da270:	b530      	push	{r4, r5, lr}
   da272:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da276:	d502      	bpl.n	da27e <__aeabi_l2d+0x16>
   da278:	4240      	negs	r0, r0
   da27a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da27e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da282:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da286:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da28a:	f43f aedc 	beq.w	da046 <__adddf3+0xe6>
   da28e:	f04f 0203 	mov.w	r2, #3
   da292:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da296:	bf18      	it	ne
   da298:	3203      	addne	r2, #3
   da29a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da29e:	bf18      	it	ne
   da2a0:	3203      	addne	r2, #3
   da2a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da2a6:	f1c2 0320 	rsb	r3, r2, #32
   da2aa:	fa00 fc03 	lsl.w	ip, r0, r3
   da2ae:	fa20 f002 	lsr.w	r0, r0, r2
   da2b2:	fa01 fe03 	lsl.w	lr, r1, r3
   da2b6:	ea40 000e 	orr.w	r0, r0, lr
   da2ba:	fa21 f102 	lsr.w	r1, r1, r2
   da2be:	4414      	add	r4, r2
   da2c0:	e6c1      	b.n	da046 <__adddf3+0xe6>
   da2c2:	bf00      	nop

000da2c4 <__aeabi_dmul>:
   da2c4:	b570      	push	{r4, r5, r6, lr}
   da2c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da2ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da2ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da2d2:	bf1d      	ittte	ne
   da2d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da2d8:	ea94 0f0c 	teqne	r4, ip
   da2dc:	ea95 0f0c 	teqne	r5, ip
   da2e0:	f000 f8de 	bleq	da4a0 <__aeabi_dmul+0x1dc>
   da2e4:	442c      	add	r4, r5
   da2e6:	ea81 0603 	eor.w	r6, r1, r3
   da2ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da2ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da2f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da2f6:	bf18      	it	ne
   da2f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da2fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da304:	d038      	beq.n	da378 <__aeabi_dmul+0xb4>
   da306:	fba0 ce02 	umull	ip, lr, r0, r2
   da30a:	f04f 0500 	mov.w	r5, #0
   da30e:	fbe1 e502 	umlal	lr, r5, r1, r2
   da312:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da316:	fbe0 e503 	umlal	lr, r5, r0, r3
   da31a:	f04f 0600 	mov.w	r6, #0
   da31e:	fbe1 5603 	umlal	r5, r6, r1, r3
   da322:	f09c 0f00 	teq	ip, #0
   da326:	bf18      	it	ne
   da328:	f04e 0e01 	orrne.w	lr, lr, #1
   da32c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da330:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da334:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da338:	d204      	bcs.n	da344 <__aeabi_dmul+0x80>
   da33a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da33e:	416d      	adcs	r5, r5
   da340:	eb46 0606 	adc.w	r6, r6, r6
   da344:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da348:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da34c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da350:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da354:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da358:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da35c:	bf88      	it	hi
   da35e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da362:	d81e      	bhi.n	da3a2 <__aeabi_dmul+0xde>
   da364:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da368:	bf08      	it	eq
   da36a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da36e:	f150 0000 	adcs.w	r0, r0, #0
   da372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da376:	bd70      	pop	{r4, r5, r6, pc}
   da378:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da37c:	ea46 0101 	orr.w	r1, r6, r1
   da380:	ea40 0002 	orr.w	r0, r0, r2
   da384:	ea81 0103 	eor.w	r1, r1, r3
   da388:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da38c:	bfc2      	ittt	gt
   da38e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da392:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da396:	bd70      	popgt	{r4, r5, r6, pc}
   da398:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da39c:	f04f 0e00 	mov.w	lr, #0
   da3a0:	3c01      	subs	r4, #1
   da3a2:	f300 80ab 	bgt.w	da4fc <__aeabi_dmul+0x238>
   da3a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da3aa:	bfde      	ittt	le
   da3ac:	2000      	movle	r0, #0
   da3ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da3b2:	bd70      	pople	{r4, r5, r6, pc}
   da3b4:	f1c4 0400 	rsb	r4, r4, #0
   da3b8:	3c20      	subs	r4, #32
   da3ba:	da35      	bge.n	da428 <__aeabi_dmul+0x164>
   da3bc:	340c      	adds	r4, #12
   da3be:	dc1b      	bgt.n	da3f8 <__aeabi_dmul+0x134>
   da3c0:	f104 0414 	add.w	r4, r4, #20
   da3c4:	f1c4 0520 	rsb	r5, r4, #32
   da3c8:	fa00 f305 	lsl.w	r3, r0, r5
   da3cc:	fa20 f004 	lsr.w	r0, r0, r4
   da3d0:	fa01 f205 	lsl.w	r2, r1, r5
   da3d4:	ea40 0002 	orr.w	r0, r0, r2
   da3d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da3dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da3e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da3e4:	fa21 f604 	lsr.w	r6, r1, r4
   da3e8:	eb42 0106 	adc.w	r1, r2, r6
   da3ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da3f0:	bf08      	it	eq
   da3f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da3f6:	bd70      	pop	{r4, r5, r6, pc}
   da3f8:	f1c4 040c 	rsb	r4, r4, #12
   da3fc:	f1c4 0520 	rsb	r5, r4, #32
   da400:	fa00 f304 	lsl.w	r3, r0, r4
   da404:	fa20 f005 	lsr.w	r0, r0, r5
   da408:	fa01 f204 	lsl.w	r2, r1, r4
   da40c:	ea40 0002 	orr.w	r0, r0, r2
   da410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da414:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da418:	f141 0100 	adc.w	r1, r1, #0
   da41c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da420:	bf08      	it	eq
   da422:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da426:	bd70      	pop	{r4, r5, r6, pc}
   da428:	f1c4 0520 	rsb	r5, r4, #32
   da42c:	fa00 f205 	lsl.w	r2, r0, r5
   da430:	ea4e 0e02 	orr.w	lr, lr, r2
   da434:	fa20 f304 	lsr.w	r3, r0, r4
   da438:	fa01 f205 	lsl.w	r2, r1, r5
   da43c:	ea43 0302 	orr.w	r3, r3, r2
   da440:	fa21 f004 	lsr.w	r0, r1, r4
   da444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da448:	fa21 f204 	lsr.w	r2, r1, r4
   da44c:	ea20 0002 	bic.w	r0, r0, r2
   da450:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da454:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da458:	bf08      	it	eq
   da45a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da45e:	bd70      	pop	{r4, r5, r6, pc}
   da460:	f094 0f00 	teq	r4, #0
   da464:	d10f      	bne.n	da486 <__aeabi_dmul+0x1c2>
   da466:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da46a:	0040      	lsls	r0, r0, #1
   da46c:	eb41 0101 	adc.w	r1, r1, r1
   da470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da474:	bf08      	it	eq
   da476:	3c01      	subeq	r4, #1
   da478:	d0f7      	beq.n	da46a <__aeabi_dmul+0x1a6>
   da47a:	ea41 0106 	orr.w	r1, r1, r6
   da47e:	f095 0f00 	teq	r5, #0
   da482:	bf18      	it	ne
   da484:	4770      	bxne	lr
   da486:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da48a:	0052      	lsls	r2, r2, #1
   da48c:	eb43 0303 	adc.w	r3, r3, r3
   da490:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da494:	bf08      	it	eq
   da496:	3d01      	subeq	r5, #1
   da498:	d0f7      	beq.n	da48a <__aeabi_dmul+0x1c6>
   da49a:	ea43 0306 	orr.w	r3, r3, r6
   da49e:	4770      	bx	lr
   da4a0:	ea94 0f0c 	teq	r4, ip
   da4a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da4a8:	bf18      	it	ne
   da4aa:	ea95 0f0c 	teqne	r5, ip
   da4ae:	d00c      	beq.n	da4ca <__aeabi_dmul+0x206>
   da4b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da4b4:	bf18      	it	ne
   da4b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da4ba:	d1d1      	bne.n	da460 <__aeabi_dmul+0x19c>
   da4bc:	ea81 0103 	eor.w	r1, r1, r3
   da4c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da4c4:	f04f 0000 	mov.w	r0, #0
   da4c8:	bd70      	pop	{r4, r5, r6, pc}
   da4ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da4ce:	bf06      	itte	eq
   da4d0:	4610      	moveq	r0, r2
   da4d2:	4619      	moveq	r1, r3
   da4d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da4d8:	d019      	beq.n	da50e <__aeabi_dmul+0x24a>
   da4da:	ea94 0f0c 	teq	r4, ip
   da4de:	d102      	bne.n	da4e6 <__aeabi_dmul+0x222>
   da4e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da4e4:	d113      	bne.n	da50e <__aeabi_dmul+0x24a>
   da4e6:	ea95 0f0c 	teq	r5, ip
   da4ea:	d105      	bne.n	da4f8 <__aeabi_dmul+0x234>
   da4ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da4f0:	bf1c      	itt	ne
   da4f2:	4610      	movne	r0, r2
   da4f4:	4619      	movne	r1, r3
   da4f6:	d10a      	bne.n	da50e <__aeabi_dmul+0x24a>
   da4f8:	ea81 0103 	eor.w	r1, r1, r3
   da4fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da500:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da508:	f04f 0000 	mov.w	r0, #0
   da50c:	bd70      	pop	{r4, r5, r6, pc}
   da50e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da512:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da516:	bd70      	pop	{r4, r5, r6, pc}

000da518 <__aeabi_ddiv>:
   da518:	b570      	push	{r4, r5, r6, lr}
   da51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da526:	bf1d      	ittte	ne
   da528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da52c:	ea94 0f0c 	teqne	r4, ip
   da530:	ea95 0f0c 	teqne	r5, ip
   da534:	f000 f8a7 	bleq	da686 <__aeabi_ddiv+0x16e>
   da538:	eba4 0405 	sub.w	r4, r4, r5
   da53c:	ea81 0e03 	eor.w	lr, r1, r3
   da540:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da544:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da548:	f000 8088 	beq.w	da65c <__aeabi_ddiv+0x144>
   da54c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da550:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da554:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da558:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da55c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da560:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da564:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da568:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da56c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da570:	429d      	cmp	r5, r3
   da572:	bf08      	it	eq
   da574:	4296      	cmpeq	r6, r2
   da576:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da57a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da57e:	d202      	bcs.n	da586 <__aeabi_ddiv+0x6e>
   da580:	085b      	lsrs	r3, r3, #1
   da582:	ea4f 0232 	mov.w	r2, r2, rrx
   da586:	1ab6      	subs	r6, r6, r2
   da588:	eb65 0503 	sbc.w	r5, r5, r3
   da58c:	085b      	lsrs	r3, r3, #1
   da58e:	ea4f 0232 	mov.w	r2, r2, rrx
   da592:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da596:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da59a:	ebb6 0e02 	subs.w	lr, r6, r2
   da59e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da5a2:	bf22      	ittt	cs
   da5a4:	1ab6      	subcs	r6, r6, r2
   da5a6:	4675      	movcs	r5, lr
   da5a8:	ea40 000c 	orrcs.w	r0, r0, ip
   da5ac:	085b      	lsrs	r3, r3, #1
   da5ae:	ea4f 0232 	mov.w	r2, r2, rrx
   da5b2:	ebb6 0e02 	subs.w	lr, r6, r2
   da5b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da5ba:	bf22      	ittt	cs
   da5bc:	1ab6      	subcs	r6, r6, r2
   da5be:	4675      	movcs	r5, lr
   da5c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da5c4:	085b      	lsrs	r3, r3, #1
   da5c6:	ea4f 0232 	mov.w	r2, r2, rrx
   da5ca:	ebb6 0e02 	subs.w	lr, r6, r2
   da5ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   da5d2:	bf22      	ittt	cs
   da5d4:	1ab6      	subcs	r6, r6, r2
   da5d6:	4675      	movcs	r5, lr
   da5d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da5dc:	085b      	lsrs	r3, r3, #1
   da5de:	ea4f 0232 	mov.w	r2, r2, rrx
   da5e2:	ebb6 0e02 	subs.w	lr, r6, r2
   da5e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da5ea:	bf22      	ittt	cs
   da5ec:	1ab6      	subcs	r6, r6, r2
   da5ee:	4675      	movcs	r5, lr
   da5f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da5f4:	ea55 0e06 	orrs.w	lr, r5, r6
   da5f8:	d018      	beq.n	da62c <__aeabi_ddiv+0x114>
   da5fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da5fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da602:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da606:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da60a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da60e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da612:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da616:	d1c0      	bne.n	da59a <__aeabi_ddiv+0x82>
   da618:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da61c:	d10b      	bne.n	da636 <__aeabi_ddiv+0x11e>
   da61e:	ea41 0100 	orr.w	r1, r1, r0
   da622:	f04f 0000 	mov.w	r0, #0
   da626:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da62a:	e7b6      	b.n	da59a <__aeabi_ddiv+0x82>
   da62c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da630:	bf04      	itt	eq
   da632:	4301      	orreq	r1, r0
   da634:	2000      	moveq	r0, #0
   da636:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da63a:	bf88      	it	hi
   da63c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da640:	f63f aeaf 	bhi.w	da3a2 <__aeabi_dmul+0xde>
   da644:	ebb5 0c03 	subs.w	ip, r5, r3
   da648:	bf04      	itt	eq
   da64a:	ebb6 0c02 	subseq.w	ip, r6, r2
   da64e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da652:	f150 0000 	adcs.w	r0, r0, #0
   da656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da65a:	bd70      	pop	{r4, r5, r6, pc}
   da65c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da660:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da664:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da668:	bfc2      	ittt	gt
   da66a:	ebd4 050c 	rsbsgt	r5, r4, ip
   da66e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da672:	bd70      	popgt	{r4, r5, r6, pc}
   da674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da678:	f04f 0e00 	mov.w	lr, #0
   da67c:	3c01      	subs	r4, #1
   da67e:	e690      	b.n	da3a2 <__aeabi_dmul+0xde>
   da680:	ea45 0e06 	orr.w	lr, r5, r6
   da684:	e68d      	b.n	da3a2 <__aeabi_dmul+0xde>
   da686:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da68a:	ea94 0f0c 	teq	r4, ip
   da68e:	bf08      	it	eq
   da690:	ea95 0f0c 	teqeq	r5, ip
   da694:	f43f af3b 	beq.w	da50e <__aeabi_dmul+0x24a>
   da698:	ea94 0f0c 	teq	r4, ip
   da69c:	d10a      	bne.n	da6b4 <__aeabi_ddiv+0x19c>
   da69e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da6a2:	f47f af34 	bne.w	da50e <__aeabi_dmul+0x24a>
   da6a6:	ea95 0f0c 	teq	r5, ip
   da6aa:	f47f af25 	bne.w	da4f8 <__aeabi_dmul+0x234>
   da6ae:	4610      	mov	r0, r2
   da6b0:	4619      	mov	r1, r3
   da6b2:	e72c      	b.n	da50e <__aeabi_dmul+0x24a>
   da6b4:	ea95 0f0c 	teq	r5, ip
   da6b8:	d106      	bne.n	da6c8 <__aeabi_ddiv+0x1b0>
   da6ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da6be:	f43f aefd 	beq.w	da4bc <__aeabi_dmul+0x1f8>
   da6c2:	4610      	mov	r0, r2
   da6c4:	4619      	mov	r1, r3
   da6c6:	e722      	b.n	da50e <__aeabi_dmul+0x24a>
   da6c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da6cc:	bf18      	it	ne
   da6ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da6d2:	f47f aec5 	bne.w	da460 <__aeabi_dmul+0x19c>
   da6d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da6da:	f47f af0d 	bne.w	da4f8 <__aeabi_dmul+0x234>
   da6de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da6e2:	f47f aeeb 	bne.w	da4bc <__aeabi_dmul+0x1f8>
   da6e6:	e712      	b.n	da50e <__aeabi_dmul+0x24a>

000da6e8 <__gedf2>:
   da6e8:	f04f 3cff 	mov.w	ip, #4294967295
   da6ec:	e006      	b.n	da6fc <__cmpdf2+0x4>
   da6ee:	bf00      	nop

000da6f0 <__ledf2>:
   da6f0:	f04f 0c01 	mov.w	ip, #1
   da6f4:	e002      	b.n	da6fc <__cmpdf2+0x4>
   da6f6:	bf00      	nop

000da6f8 <__cmpdf2>:
   da6f8:	f04f 0c01 	mov.w	ip, #1
   da6fc:	f84d cd04 	str.w	ip, [sp, #-4]!
   da700:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da704:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da708:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da70c:	bf18      	it	ne
   da70e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da712:	d01b      	beq.n	da74c <__cmpdf2+0x54>
   da714:	b001      	add	sp, #4
   da716:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da71a:	bf0c      	ite	eq
   da71c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da720:	ea91 0f03 	teqne	r1, r3
   da724:	bf02      	ittt	eq
   da726:	ea90 0f02 	teqeq	r0, r2
   da72a:	2000      	moveq	r0, #0
   da72c:	4770      	bxeq	lr
   da72e:	f110 0f00 	cmn.w	r0, #0
   da732:	ea91 0f03 	teq	r1, r3
   da736:	bf58      	it	pl
   da738:	4299      	cmppl	r1, r3
   da73a:	bf08      	it	eq
   da73c:	4290      	cmpeq	r0, r2
   da73e:	bf2c      	ite	cs
   da740:	17d8      	asrcs	r0, r3, #31
   da742:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da746:	f040 0001 	orr.w	r0, r0, #1
   da74a:	4770      	bx	lr
   da74c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da754:	d102      	bne.n	da75c <__cmpdf2+0x64>
   da756:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da75a:	d107      	bne.n	da76c <__cmpdf2+0x74>
   da75c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da764:	d1d6      	bne.n	da714 <__cmpdf2+0x1c>
   da766:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da76a:	d0d3      	beq.n	da714 <__cmpdf2+0x1c>
   da76c:	f85d 0b04 	ldr.w	r0, [sp], #4
   da770:	4770      	bx	lr
   da772:	bf00      	nop

000da774 <__aeabi_cdrcmple>:
   da774:	4684      	mov	ip, r0
   da776:	4610      	mov	r0, r2
   da778:	4662      	mov	r2, ip
   da77a:	468c      	mov	ip, r1
   da77c:	4619      	mov	r1, r3
   da77e:	4663      	mov	r3, ip
   da780:	e000      	b.n	da784 <__aeabi_cdcmpeq>
   da782:	bf00      	nop

000da784 <__aeabi_cdcmpeq>:
   da784:	b501      	push	{r0, lr}
   da786:	f7ff ffb7 	bl	da6f8 <__cmpdf2>
   da78a:	2800      	cmp	r0, #0
   da78c:	bf48      	it	mi
   da78e:	f110 0f00 	cmnmi.w	r0, #0
   da792:	bd01      	pop	{r0, pc}

000da794 <__aeabi_dcmpeq>:
   da794:	f84d ed08 	str.w	lr, [sp, #-8]!
   da798:	f7ff fff4 	bl	da784 <__aeabi_cdcmpeq>
   da79c:	bf0c      	ite	eq
   da79e:	2001      	moveq	r0, #1
   da7a0:	2000      	movne	r0, #0
   da7a2:	f85d fb08 	ldr.w	pc, [sp], #8
   da7a6:	bf00      	nop

000da7a8 <__aeabi_dcmplt>:
   da7a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   da7ac:	f7ff ffea 	bl	da784 <__aeabi_cdcmpeq>
   da7b0:	bf34      	ite	cc
   da7b2:	2001      	movcc	r0, #1
   da7b4:	2000      	movcs	r0, #0
   da7b6:	f85d fb08 	ldr.w	pc, [sp], #8
   da7ba:	bf00      	nop

000da7bc <__aeabi_dcmple>:
   da7bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   da7c0:	f7ff ffe0 	bl	da784 <__aeabi_cdcmpeq>
   da7c4:	bf94      	ite	ls
   da7c6:	2001      	movls	r0, #1
   da7c8:	2000      	movhi	r0, #0
   da7ca:	f85d fb08 	ldr.w	pc, [sp], #8
   da7ce:	bf00      	nop

000da7d0 <__aeabi_dcmpge>:
   da7d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   da7d4:	f7ff ffce 	bl	da774 <__aeabi_cdrcmple>
   da7d8:	bf94      	ite	ls
   da7da:	2001      	movls	r0, #1
   da7dc:	2000      	movhi	r0, #0
   da7de:	f85d fb08 	ldr.w	pc, [sp], #8
   da7e2:	bf00      	nop

000da7e4 <__aeabi_dcmpgt>:
   da7e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da7e8:	f7ff ffc4 	bl	da774 <__aeabi_cdrcmple>
   da7ec:	bf34      	ite	cc
   da7ee:	2001      	movcc	r0, #1
   da7f0:	2000      	movcs	r0, #0
   da7f2:	f85d fb08 	ldr.w	pc, [sp], #8
   da7f6:	bf00      	nop

000da7f8 <__aeabi_d2iz>:
   da7f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da7fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da800:	d215      	bcs.n	da82e <__aeabi_d2iz+0x36>
   da802:	d511      	bpl.n	da828 <__aeabi_d2iz+0x30>
   da804:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da808:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da80c:	d912      	bls.n	da834 <__aeabi_d2iz+0x3c>
   da80e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da816:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da81a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da81e:	fa23 f002 	lsr.w	r0, r3, r2
   da822:	bf18      	it	ne
   da824:	4240      	negne	r0, r0
   da826:	4770      	bx	lr
   da828:	f04f 0000 	mov.w	r0, #0
   da82c:	4770      	bx	lr
   da82e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da832:	d105      	bne.n	da840 <__aeabi_d2iz+0x48>
   da834:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da838:	bf08      	it	eq
   da83a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da83e:	4770      	bx	lr
   da840:	f04f 0000 	mov.w	r0, #0
   da844:	4770      	bx	lr
   da846:	bf00      	nop

000da848 <__aeabi_d2uiz>:
   da848:	004a      	lsls	r2, r1, #1
   da84a:	d211      	bcs.n	da870 <__aeabi_d2uiz+0x28>
   da84c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da850:	d211      	bcs.n	da876 <__aeabi_d2uiz+0x2e>
   da852:	d50d      	bpl.n	da870 <__aeabi_d2uiz+0x28>
   da854:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da858:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da85c:	d40e      	bmi.n	da87c <__aeabi_d2uiz+0x34>
   da85e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da866:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da86a:	fa23 f002 	lsr.w	r0, r3, r2
   da86e:	4770      	bx	lr
   da870:	f04f 0000 	mov.w	r0, #0
   da874:	4770      	bx	lr
   da876:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da87a:	d102      	bne.n	da882 <__aeabi_d2uiz+0x3a>
   da87c:	f04f 30ff 	mov.w	r0, #4294967295
   da880:	4770      	bx	lr
   da882:	f04f 0000 	mov.w	r0, #0
   da886:	4770      	bx	lr

000da888 <__aeabi_d2f>:
   da888:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da88c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da890:	bf24      	itt	cs
   da892:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da896:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da89a:	d90d      	bls.n	da8b8 <__aeabi_d2f+0x30>
   da89c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da8a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da8a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da8a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da8ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da8b0:	bf08      	it	eq
   da8b2:	f020 0001 	biceq.w	r0, r0, #1
   da8b6:	4770      	bx	lr
   da8b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da8bc:	d121      	bne.n	da902 <__aeabi_d2f+0x7a>
   da8be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da8c2:	bfbc      	itt	lt
   da8c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da8c8:	4770      	bxlt	lr
   da8ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da8ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da8d2:	f1c2 0218 	rsb	r2, r2, #24
   da8d6:	f1c2 0c20 	rsb	ip, r2, #32
   da8da:	fa10 f30c 	lsls.w	r3, r0, ip
   da8de:	fa20 f002 	lsr.w	r0, r0, r2
   da8e2:	bf18      	it	ne
   da8e4:	f040 0001 	orrne.w	r0, r0, #1
   da8e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da8ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da8f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   da8f4:	ea40 000c 	orr.w	r0, r0, ip
   da8f8:	fa23 f302 	lsr.w	r3, r3, r2
   da8fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da900:	e7cc      	b.n	da89c <__aeabi_d2f+0x14>
   da902:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da906:	d107      	bne.n	da918 <__aeabi_d2f+0x90>
   da908:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da90c:	bf1e      	ittt	ne
   da90e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da912:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da916:	4770      	bxne	lr
   da918:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da91c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da920:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da924:	4770      	bx	lr
   da926:	bf00      	nop

000da928 <atof>:
   da928:	2100      	movs	r1, #0
   da92a:	f001 b80d 	b.w	db948 <strtod>

000da92e <atoi>:
   da92e:	220a      	movs	r2, #10
   da930:	2100      	movs	r1, #0
   da932:	f001 b897 	b.w	dba64 <strtol>
	...

000da938 <__cxa_atexit>:
   da938:	b510      	push	{r4, lr}
   da93a:	4c05      	ldr	r4, [pc, #20]	; (da950 <__cxa_atexit+0x18>)
   da93c:	4613      	mov	r3, r2
   da93e:	b12c      	cbz	r4, da94c <__cxa_atexit+0x14>
   da940:	460a      	mov	r2, r1
   da942:	4601      	mov	r1, r0
   da944:	2002      	movs	r0, #2
   da946:	f3af 8000 	nop.w
   da94a:	bd10      	pop	{r4, pc}
   da94c:	4620      	mov	r0, r4
   da94e:	bd10      	pop	{r4, pc}
   da950:	00000000 	.word	0x00000000

000da954 <localtime>:
   da954:	b538      	push	{r3, r4, r5, lr}
   da956:	4b07      	ldr	r3, [pc, #28]	; (da974 <localtime+0x20>)
   da958:	681c      	ldr	r4, [r3, #0]
   da95a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da95c:	4605      	mov	r5, r0
   da95e:	b91b      	cbnz	r3, da968 <localtime+0x14>
   da960:	2024      	movs	r0, #36	; 0x24
   da962:	f7fc fac3 	bl	d6eec <malloc>
   da966:	63e0      	str	r0, [r4, #60]	; 0x3c
   da968:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da96a:	4628      	mov	r0, r5
   da96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da970:	f000 b802 	b.w	da978 <localtime_r>
   da974:	2003d5fc 	.word	0x2003d5fc

000da978 <localtime_r>:
   da978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da97c:	460c      	mov	r4, r1
   da97e:	4680      	mov	r8, r0
   da980:	f001 fe94 	bl	dc6ac <__gettzinfo>
   da984:	4621      	mov	r1, r4
   da986:	4607      	mov	r7, r0
   da988:	4640      	mov	r0, r8
   da98a:	f001 fe93 	bl	dc6b4 <gmtime_r>
   da98e:	6946      	ldr	r6, [r0, #20]
   da990:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   da994:	07b3      	lsls	r3, r6, #30
   da996:	4604      	mov	r4, r0
   da998:	d105      	bne.n	da9a6 <localtime_r+0x2e>
   da99a:	2264      	movs	r2, #100	; 0x64
   da99c:	fb96 f3f2 	sdiv	r3, r6, r2
   da9a0:	fb02 6313 	mls	r3, r2, r3, r6
   da9a4:	b94b      	cbnz	r3, da9ba <localtime_r+0x42>
   da9a6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da9aa:	fb96 f3f5 	sdiv	r3, r6, r5
   da9ae:	fb05 6513 	mls	r5, r5, r3, r6
   da9b2:	fab5 f385 	clz	r3, r5
   da9b6:	095b      	lsrs	r3, r3, #5
   da9b8:	e000      	b.n	da9bc <localtime_r+0x44>
   da9ba:	2301      	movs	r3, #1
   da9bc:	4a5f      	ldr	r2, [pc, #380]	; (dab3c <localtime_r+0x1c4>)
   da9be:	2530      	movs	r5, #48	; 0x30
   da9c0:	fb05 2503 	mla	r5, r5, r3, r2
   da9c4:	f001 f988 	bl	dbcd8 <__tz_lock>
   da9c8:	f001 f988 	bl	dbcdc <_tzset_unlocked>
   da9cc:	4b5c      	ldr	r3, [pc, #368]	; (dab40 <localtime_r+0x1c8>)
   da9ce:	681b      	ldr	r3, [r3, #0]
   da9d0:	b1f3      	cbz	r3, daa10 <localtime_r+0x98>
   da9d2:	687b      	ldr	r3, [r7, #4]
   da9d4:	429e      	cmp	r6, r3
   da9d6:	d105      	bne.n	da9e4 <localtime_r+0x6c>
   da9d8:	6839      	ldr	r1, [r7, #0]
   da9da:	f8d8 3000 	ldr.w	r3, [r8]
   da9de:	69fa      	ldr	r2, [r7, #28]
   da9e0:	b941      	cbnz	r1, da9f4 <localtime_r+0x7c>
   da9e2:	e00a      	b.n	da9fa <localtime_r+0x82>
   da9e4:	4630      	mov	r0, r6
   da9e6:	f001 f8cf 	bl	dbb88 <__tzcalc_limits>
   da9ea:	2800      	cmp	r0, #0
   da9ec:	d1f4      	bne.n	da9d8 <localtime_r+0x60>
   da9ee:	f04f 33ff 	mov.w	r3, #4294967295
   da9f2:	e00d      	b.n	daa10 <localtime_r+0x98>
   da9f4:	4293      	cmp	r3, r2
   da9f6:	db08      	blt.n	daa0a <localtime_r+0x92>
   da9f8:	e001      	b.n	da9fe <localtime_r+0x86>
   da9fa:	4293      	cmp	r3, r2
   da9fc:	da07      	bge.n	daa0e <localtime_r+0x96>
   da9fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   daa00:	4293      	cmp	r3, r2
   daa02:	bfac      	ite	ge
   daa04:	2300      	movge	r3, #0
   daa06:	2301      	movlt	r3, #1
   daa08:	e002      	b.n	daa10 <localtime_r+0x98>
   daa0a:	2300      	movs	r3, #0
   daa0c:	e000      	b.n	daa10 <localtime_r+0x98>
   daa0e:	2301      	movs	r3, #1
   daa10:	6223      	str	r3, [r4, #32]
   daa12:	6a23      	ldr	r3, [r4, #32]
   daa14:	2b01      	cmp	r3, #1
   daa16:	bf0c      	ite	eq
   daa18:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   daa1a:	6a39      	ldrne	r1, [r7, #32]
   daa1c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   daa20:	203c      	movs	r0, #60	; 0x3c
   daa22:	fb91 f6f3 	sdiv	r6, r1, r3
   daa26:	fb03 1316 	mls	r3, r3, r6, r1
   daa2a:	6861      	ldr	r1, [r4, #4]
   daa2c:	fb93 f2f0 	sdiv	r2, r3, r0
   daa30:	fb00 3012 	mls	r0, r0, r2, r3
   daa34:	6823      	ldr	r3, [r4, #0]
   daa36:	1a89      	subs	r1, r1, r2
   daa38:	68a2      	ldr	r2, [r4, #8]
   daa3a:	6061      	str	r1, [r4, #4]
   daa3c:	1a1b      	subs	r3, r3, r0
   daa3e:	1b92      	subs	r2, r2, r6
   daa40:	2b3b      	cmp	r3, #59	; 0x3b
   daa42:	6023      	str	r3, [r4, #0]
   daa44:	60a2      	str	r2, [r4, #8]
   daa46:	dd03      	ble.n	daa50 <localtime_r+0xd8>
   daa48:	3101      	adds	r1, #1
   daa4a:	6061      	str	r1, [r4, #4]
   daa4c:	3b3c      	subs	r3, #60	; 0x3c
   daa4e:	e004      	b.n	daa5a <localtime_r+0xe2>
   daa50:	2b00      	cmp	r3, #0
   daa52:	da03      	bge.n	daa5c <localtime_r+0xe4>
   daa54:	3901      	subs	r1, #1
   daa56:	6061      	str	r1, [r4, #4]
   daa58:	333c      	adds	r3, #60	; 0x3c
   daa5a:	6023      	str	r3, [r4, #0]
   daa5c:	6863      	ldr	r3, [r4, #4]
   daa5e:	2b3b      	cmp	r3, #59	; 0x3b
   daa60:	dd03      	ble.n	daa6a <localtime_r+0xf2>
   daa62:	3201      	adds	r2, #1
   daa64:	60a2      	str	r2, [r4, #8]
   daa66:	3b3c      	subs	r3, #60	; 0x3c
   daa68:	e004      	b.n	daa74 <localtime_r+0xfc>
   daa6a:	2b00      	cmp	r3, #0
   daa6c:	da03      	bge.n	daa76 <localtime_r+0xfe>
   daa6e:	3a01      	subs	r2, #1
   daa70:	60a2      	str	r2, [r4, #8]
   daa72:	333c      	adds	r3, #60	; 0x3c
   daa74:	6063      	str	r3, [r4, #4]
   daa76:	68a3      	ldr	r3, [r4, #8]
   daa78:	2b17      	cmp	r3, #23
   daa7a:	dd22      	ble.n	daac2 <localtime_r+0x14a>
   daa7c:	69e2      	ldr	r2, [r4, #28]
   daa7e:	3201      	adds	r2, #1
   daa80:	61e2      	str	r2, [r4, #28]
   daa82:	69a2      	ldr	r2, [r4, #24]
   daa84:	3201      	adds	r2, #1
   daa86:	2a06      	cmp	r2, #6
   daa88:	bfc8      	it	gt
   daa8a:	2200      	movgt	r2, #0
   daa8c:	61a2      	str	r2, [r4, #24]
   daa8e:	68e2      	ldr	r2, [r4, #12]
   daa90:	3b18      	subs	r3, #24
   daa92:	3201      	adds	r2, #1
   daa94:	60a3      	str	r3, [r4, #8]
   daa96:	6923      	ldr	r3, [r4, #16]
   daa98:	60e2      	str	r2, [r4, #12]
   daa9a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   daa9e:	428a      	cmp	r2, r1
   daaa0:	dd46      	ble.n	dab30 <localtime_r+0x1b8>
   daaa2:	3301      	adds	r3, #1
   daaa4:	2b0c      	cmp	r3, #12
   daaa6:	bf0c      	ite	eq
   daaa8:	6963      	ldreq	r3, [r4, #20]
   daaaa:	6123      	strne	r3, [r4, #16]
   daaac:	eba2 0201 	sub.w	r2, r2, r1
   daab0:	60e2      	str	r2, [r4, #12]
   daab2:	bf01      	itttt	eq
   daab4:	3301      	addeq	r3, #1
   daab6:	2200      	moveq	r2, #0
   daab8:	6122      	streq	r2, [r4, #16]
   daaba:	6163      	streq	r3, [r4, #20]
   daabc:	bf08      	it	eq
   daabe:	61e2      	streq	r2, [r4, #28]
   daac0:	e036      	b.n	dab30 <localtime_r+0x1b8>
   daac2:	2b00      	cmp	r3, #0
   daac4:	da34      	bge.n	dab30 <localtime_r+0x1b8>
   daac6:	69e2      	ldr	r2, [r4, #28]
   daac8:	3a01      	subs	r2, #1
   daaca:	61e2      	str	r2, [r4, #28]
   daacc:	69a2      	ldr	r2, [r4, #24]
   daace:	3a01      	subs	r2, #1
   daad0:	bf48      	it	mi
   daad2:	2206      	movmi	r2, #6
   daad4:	61a2      	str	r2, [r4, #24]
   daad6:	68e2      	ldr	r2, [r4, #12]
   daad8:	3318      	adds	r3, #24
   daada:	3a01      	subs	r2, #1
   daadc:	60e2      	str	r2, [r4, #12]
   daade:	60a3      	str	r3, [r4, #8]
   daae0:	bb32      	cbnz	r2, dab30 <localtime_r+0x1b8>
   daae2:	6923      	ldr	r3, [r4, #16]
   daae4:	3b01      	subs	r3, #1
   daae6:	d401      	bmi.n	daaec <localtime_r+0x174>
   daae8:	6123      	str	r3, [r4, #16]
   daaea:	e01d      	b.n	dab28 <localtime_r+0x1b0>
   daaec:	230b      	movs	r3, #11
   daaee:	6123      	str	r3, [r4, #16]
   daaf0:	6963      	ldr	r3, [r4, #20]
   daaf2:	1e5a      	subs	r2, r3, #1
   daaf4:	f012 0f03 	tst.w	r2, #3
   daaf8:	6162      	str	r2, [r4, #20]
   daafa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   daafe:	d105      	bne.n	dab0c <localtime_r+0x194>
   dab00:	2164      	movs	r1, #100	; 0x64
   dab02:	fb93 f2f1 	sdiv	r2, r3, r1
   dab06:	fb01 3212 	mls	r2, r1, r2, r3
   dab0a:	b94a      	cbnz	r2, dab20 <localtime_r+0x1a8>
   dab0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dab10:	fb93 f2f1 	sdiv	r2, r3, r1
   dab14:	fb01 3312 	mls	r3, r1, r2, r3
   dab18:	fab3 f383 	clz	r3, r3
   dab1c:	095b      	lsrs	r3, r3, #5
   dab1e:	e000      	b.n	dab22 <localtime_r+0x1aa>
   dab20:	2301      	movs	r3, #1
   dab22:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dab26:	61e3      	str	r3, [r4, #28]
   dab28:	6923      	ldr	r3, [r4, #16]
   dab2a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dab2e:	60e3      	str	r3, [r4, #12]
   dab30:	f001 f8d3 	bl	dbcda <__tz_unlock>
   dab34:	4620      	mov	r0, r4
   dab36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dab3a:	bf00      	nop
   dab3c:	000ddba8 	.word	0x000ddba8
   dab40:	2003e7e4 	.word	0x2003e7e4

000dab44 <_localeconv_r>:
   dab44:	4800      	ldr	r0, [pc, #0]	; (dab48 <_localeconv_r+0x4>)
   dab46:	4770      	bx	lr
   dab48:	2003d600 	.word	0x2003d600

000dab4c <memcmp>:
   dab4c:	b510      	push	{r4, lr}
   dab4e:	3901      	subs	r1, #1
   dab50:	4402      	add	r2, r0
   dab52:	4290      	cmp	r0, r2
   dab54:	d007      	beq.n	dab66 <memcmp+0x1a>
   dab56:	f810 3b01 	ldrb.w	r3, [r0], #1
   dab5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dab5e:	42a3      	cmp	r3, r4
   dab60:	d0f7      	beq.n	dab52 <memcmp+0x6>
   dab62:	1b18      	subs	r0, r3, r4
   dab64:	bd10      	pop	{r4, pc}
   dab66:	2000      	movs	r0, #0
   dab68:	bd10      	pop	{r4, pc}

000dab6a <memcpy>:
   dab6a:	b510      	push	{r4, lr}
   dab6c:	1e43      	subs	r3, r0, #1
   dab6e:	440a      	add	r2, r1
   dab70:	4291      	cmp	r1, r2
   dab72:	d004      	beq.n	dab7e <memcpy+0x14>
   dab74:	f811 4b01 	ldrb.w	r4, [r1], #1
   dab78:	f803 4f01 	strb.w	r4, [r3, #1]!
   dab7c:	e7f8      	b.n	dab70 <memcpy+0x6>
   dab7e:	bd10      	pop	{r4, pc}

000dab80 <memmove>:
   dab80:	4288      	cmp	r0, r1
   dab82:	b510      	push	{r4, lr}
   dab84:	eb01 0302 	add.w	r3, r1, r2
   dab88:	d801      	bhi.n	dab8e <memmove+0xe>
   dab8a:	1e42      	subs	r2, r0, #1
   dab8c:	e00b      	b.n	daba6 <memmove+0x26>
   dab8e:	4298      	cmp	r0, r3
   dab90:	d2fb      	bcs.n	dab8a <memmove+0xa>
   dab92:	1881      	adds	r1, r0, r2
   dab94:	1ad2      	subs	r2, r2, r3
   dab96:	42d3      	cmn	r3, r2
   dab98:	d004      	beq.n	daba4 <memmove+0x24>
   dab9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dab9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   daba2:	e7f8      	b.n	dab96 <memmove+0x16>
   daba4:	bd10      	pop	{r4, pc}
   daba6:	4299      	cmp	r1, r3
   daba8:	d004      	beq.n	dabb4 <memmove+0x34>
   dabaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   dabae:	f802 4f01 	strb.w	r4, [r2, #1]!
   dabb2:	e7f8      	b.n	daba6 <memmove+0x26>
   dabb4:	bd10      	pop	{r4, pc}

000dabb6 <memset>:
   dabb6:	4402      	add	r2, r0
   dabb8:	4603      	mov	r3, r0
   dabba:	4293      	cmp	r3, r2
   dabbc:	d002      	beq.n	dabc4 <memset+0xe>
   dabbe:	f803 1b01 	strb.w	r1, [r3], #1
   dabc2:	e7fa      	b.n	dabba <memset+0x4>
   dabc4:	4770      	bx	lr
	...

000dabc8 <srand>:
   dabc8:	b538      	push	{r3, r4, r5, lr}
   dabca:	4b12      	ldr	r3, [pc, #72]	; (dac14 <srand+0x4c>)
   dabcc:	681c      	ldr	r4, [r3, #0]
   dabce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dabd0:	4605      	mov	r5, r0
   dabd2:	b9d3      	cbnz	r3, dac0a <srand+0x42>
   dabd4:	2018      	movs	r0, #24
   dabd6:	f7fc f989 	bl	d6eec <malloc>
   dabda:	f243 330e 	movw	r3, #13070	; 0x330e
   dabde:	63a0      	str	r0, [r4, #56]	; 0x38
   dabe0:	8003      	strh	r3, [r0, #0]
   dabe2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dabe6:	8043      	strh	r3, [r0, #2]
   dabe8:	f241 2334 	movw	r3, #4660	; 0x1234
   dabec:	8083      	strh	r3, [r0, #4]
   dabee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dabf2:	80c3      	strh	r3, [r0, #6]
   dabf4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dabf8:	8103      	strh	r3, [r0, #8]
   dabfa:	2305      	movs	r3, #5
   dabfc:	8143      	strh	r3, [r0, #10]
   dabfe:	230b      	movs	r3, #11
   dac00:	8183      	strh	r3, [r0, #12]
   dac02:	2201      	movs	r2, #1
   dac04:	2300      	movs	r3, #0
   dac06:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dac0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dac0c:	2200      	movs	r2, #0
   dac0e:	611d      	str	r5, [r3, #16]
   dac10:	615a      	str	r2, [r3, #20]
   dac12:	bd38      	pop	{r3, r4, r5, pc}
   dac14:	2003d5fc 	.word	0x2003d5fc

000dac18 <strcat>:
   dac18:	b510      	push	{r4, lr}
   dac1a:	4602      	mov	r2, r0
   dac1c:	4613      	mov	r3, r2
   dac1e:	3201      	adds	r2, #1
   dac20:	781c      	ldrb	r4, [r3, #0]
   dac22:	2c00      	cmp	r4, #0
   dac24:	d1fa      	bne.n	dac1c <strcat+0x4>
   dac26:	3b01      	subs	r3, #1
   dac28:	f811 2b01 	ldrb.w	r2, [r1], #1
   dac2c:	f803 2f01 	strb.w	r2, [r3, #1]!
   dac30:	2a00      	cmp	r2, #0
   dac32:	d1f9      	bne.n	dac28 <strcat+0x10>
   dac34:	bd10      	pop	{r4, pc}

000dac36 <strcmp>:
   dac36:	f810 2b01 	ldrb.w	r2, [r0], #1
   dac3a:	f811 3b01 	ldrb.w	r3, [r1], #1
   dac3e:	2a01      	cmp	r2, #1
   dac40:	bf28      	it	cs
   dac42:	429a      	cmpcs	r2, r3
   dac44:	d0f7      	beq.n	dac36 <strcmp>
   dac46:	1ad0      	subs	r0, r2, r3
   dac48:	4770      	bx	lr

000dac4a <strcpy>:
   dac4a:	4603      	mov	r3, r0
   dac4c:	f811 2b01 	ldrb.w	r2, [r1], #1
   dac50:	f803 2b01 	strb.w	r2, [r3], #1
   dac54:	2a00      	cmp	r2, #0
   dac56:	d1f9      	bne.n	dac4c <strcpy+0x2>
   dac58:	4770      	bx	lr
	...

000dac5c <strdup>:
   dac5c:	4b02      	ldr	r3, [pc, #8]	; (dac68 <strdup+0xc>)
   dac5e:	4601      	mov	r1, r0
   dac60:	6818      	ldr	r0, [r3, #0]
   dac62:	f000 b803 	b.w	dac6c <_strdup_r>
   dac66:	bf00      	nop
   dac68:	2003d5fc 	.word	0x2003d5fc

000dac6c <_strdup_r>:
   dac6c:	b570      	push	{r4, r5, r6, lr}
   dac6e:	4606      	mov	r6, r0
   dac70:	4608      	mov	r0, r1
   dac72:	460c      	mov	r4, r1
   dac74:	f000 f80d 	bl	dac92 <strlen>
   dac78:	1c45      	adds	r5, r0, #1
   dac7a:	4629      	mov	r1, r5
   dac7c:	4630      	mov	r0, r6
   dac7e:	f7fc f97d 	bl	d6f7c <_malloc_r>
   dac82:	4606      	mov	r6, r0
   dac84:	b118      	cbz	r0, dac8e <_strdup_r+0x22>
   dac86:	462a      	mov	r2, r5
   dac88:	4621      	mov	r1, r4
   dac8a:	f7ff ff6e 	bl	dab6a <memcpy>
   dac8e:	4630      	mov	r0, r6
   dac90:	bd70      	pop	{r4, r5, r6, pc}

000dac92 <strlen>:
   dac92:	4603      	mov	r3, r0
   dac94:	f813 2b01 	ldrb.w	r2, [r3], #1
   dac98:	2a00      	cmp	r2, #0
   dac9a:	d1fb      	bne.n	dac94 <strlen+0x2>
   dac9c:	1a18      	subs	r0, r3, r0
   dac9e:	3801      	subs	r0, #1
   daca0:	4770      	bx	lr

000daca2 <strncmp>:
   daca2:	b530      	push	{r4, r5, lr}
   daca4:	b182      	cbz	r2, dacc8 <strncmp+0x26>
   daca6:	1e45      	subs	r5, r0, #1
   daca8:	3901      	subs	r1, #1
   dacaa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dacae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dacb2:	42a3      	cmp	r3, r4
   dacb4:	d106      	bne.n	dacc4 <strncmp+0x22>
   dacb6:	43ec      	mvns	r4, r5
   dacb8:	4414      	add	r4, r2
   dacba:	42e0      	cmn	r0, r4
   dacbc:	d001      	beq.n	dacc2 <strncmp+0x20>
   dacbe:	2b00      	cmp	r3, #0
   dacc0:	d1f3      	bne.n	dacaa <strncmp+0x8>
   dacc2:	461c      	mov	r4, r3
   dacc4:	1b18      	subs	r0, r3, r4
   dacc6:	bd30      	pop	{r4, r5, pc}
   dacc8:	4610      	mov	r0, r2
   dacca:	bd30      	pop	{r4, r5, pc}

000daccc <strncpy>:
   daccc:	b510      	push	{r4, lr}
   dacce:	4603      	mov	r3, r0
   dacd0:	b142      	cbz	r2, dace4 <strncpy+0x18>
   dacd2:	f811 4b01 	ldrb.w	r4, [r1], #1
   dacd6:	f803 4b01 	strb.w	r4, [r3], #1
   dacda:	3a01      	subs	r2, #1
   dacdc:	2c00      	cmp	r4, #0
   dacde:	d1f7      	bne.n	dacd0 <strncpy+0x4>
   dace0:	441a      	add	r2, r3
   dace2:	e000      	b.n	dace6 <strncpy+0x1a>
   dace4:	bd10      	pop	{r4, pc}
   dace6:	4293      	cmp	r3, r2
   dace8:	d002      	beq.n	dacf0 <strncpy+0x24>
   dacea:	f803 4b01 	strb.w	r4, [r3], #1
   dacee:	e7fa      	b.n	dace6 <strncpy+0x1a>
   dacf0:	bd10      	pop	{r4, pc}

000dacf2 <strnlen>:
   dacf2:	b510      	push	{r4, lr}
   dacf4:	4603      	mov	r3, r0
   dacf6:	4401      	add	r1, r0
   dacf8:	428b      	cmp	r3, r1
   dacfa:	d004      	beq.n	dad06 <strnlen+0x14>
   dacfc:	781a      	ldrb	r2, [r3, #0]
   dacfe:	1c5c      	adds	r4, r3, #1
   dad00:	b10a      	cbz	r2, dad06 <strnlen+0x14>
   dad02:	4623      	mov	r3, r4
   dad04:	e7f8      	b.n	dacf8 <strnlen+0x6>
   dad06:	1a18      	subs	r0, r3, r0
   dad08:	bd10      	pop	{r4, pc}

000dad0a <sulp>:
   dad0a:	b570      	push	{r4, r5, r6, lr}
   dad0c:	4604      	mov	r4, r0
   dad0e:	460d      	mov	r5, r1
   dad10:	ec45 4b10 	vmov	d0, r4, r5
   dad14:	4616      	mov	r6, r2
   dad16:	f002 f82b 	bl	dcd70 <__ulp>
   dad1a:	ec51 0b10 	vmov	r0, r1, d0
   dad1e:	b17e      	cbz	r6, dad40 <sulp+0x36>
   dad20:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dad24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dad28:	2b00      	cmp	r3, #0
   dad2a:	dd09      	ble.n	dad40 <sulp+0x36>
   dad2c:	051b      	lsls	r3, r3, #20
   dad2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dad32:	2400      	movs	r4, #0
   dad34:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dad38:	4622      	mov	r2, r4
   dad3a:	462b      	mov	r3, r5
   dad3c:	f7ff fac2 	bl	da2c4 <__aeabi_dmul>
   dad40:	bd70      	pop	{r4, r5, r6, pc}
   dad42:	0000      	movs	r0, r0
   dad44:	0000      	movs	r0, r0
	...

000dad48 <_strtod_r>:
   dad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad4c:	b09d      	sub	sp, #116	; 0x74
   dad4e:	2300      	movs	r3, #0
   dad50:	9002      	str	r0, [sp, #8]
   dad52:	460c      	mov	r4, r1
   dad54:	9213      	str	r2, [sp, #76]	; 0x4c
   dad56:	9318      	str	r3, [sp, #96]	; 0x60
   dad58:	f04f 0a00 	mov.w	sl, #0
   dad5c:	f04f 0b00 	mov.w	fp, #0
   dad60:	9117      	str	r1, [sp, #92]	; 0x5c
   dad62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dad64:	781a      	ldrb	r2, [r3, #0]
   dad66:	2a0d      	cmp	r2, #13
   dad68:	d805      	bhi.n	dad76 <_strtod_r+0x2e>
   dad6a:	2a09      	cmp	r2, #9
   dad6c:	d213      	bcs.n	dad96 <_strtod_r+0x4e>
   dad6e:	2a00      	cmp	r2, #0
   dad70:	f000 81ac 	beq.w	db0cc <_strtod_r+0x384>
   dad74:	e012      	b.n	dad9c <_strtod_r+0x54>
   dad76:	2a2b      	cmp	r2, #43	; 0x2b
   dad78:	d004      	beq.n	dad84 <_strtod_r+0x3c>
   dad7a:	2a2d      	cmp	r2, #45	; 0x2d
   dad7c:	d004      	beq.n	dad88 <_strtod_r+0x40>
   dad7e:	2a20      	cmp	r2, #32
   dad80:	d10c      	bne.n	dad9c <_strtod_r+0x54>
   dad82:	e008      	b.n	dad96 <_strtod_r+0x4e>
   dad84:	2200      	movs	r2, #0
   dad86:	e000      	b.n	dad8a <_strtod_r+0x42>
   dad88:	2201      	movs	r2, #1
   dad8a:	920c      	str	r2, [sp, #48]	; 0x30
   dad8c:	1c5a      	adds	r2, r3, #1
   dad8e:	9217      	str	r2, [sp, #92]	; 0x5c
   dad90:	785b      	ldrb	r3, [r3, #1]
   dad92:	b92b      	cbnz	r3, dada0 <_strtod_r+0x58>
   dad94:	e19a      	b.n	db0cc <_strtod_r+0x384>
   dad96:	3301      	adds	r3, #1
   dad98:	9317      	str	r3, [sp, #92]	; 0x5c
   dad9a:	e7e2      	b.n	dad62 <_strtod_r+0x1a>
   dad9c:	2300      	movs	r3, #0
   dad9e:	930c      	str	r3, [sp, #48]	; 0x30
   dada0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dada2:	782b      	ldrb	r3, [r5, #0]
   dada4:	2b30      	cmp	r3, #48	; 0x30
   dada6:	d15c      	bne.n	dae62 <_strtod_r+0x11a>
   dada8:	786b      	ldrb	r3, [r5, #1]
   dadaa:	2b58      	cmp	r3, #88	; 0x58
   dadac:	d001      	beq.n	dadb2 <_strtod_r+0x6a>
   dadae:	2b78      	cmp	r3, #120	; 0x78
   dadb0:	d14c      	bne.n	dae4c <_strtod_r+0x104>
   dadb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dadb4:	9301      	str	r3, [sp, #4]
   dadb6:	ab18      	add	r3, sp, #96	; 0x60
   dadb8:	9300      	str	r3, [sp, #0]
   dadba:	4aa9      	ldr	r2, [pc, #676]	; (db060 <_strtod_r+0x318>)
   dadbc:	9802      	ldr	r0, [sp, #8]
   dadbe:	ab19      	add	r3, sp, #100	; 0x64
   dadc0:	a917      	add	r1, sp, #92	; 0x5c
   dadc2:	f001 f95c 	bl	dc07e <__gethex>
   dadc6:	f010 0607 	ands.w	r6, r0, #7
   dadca:	4604      	mov	r4, r0
   dadcc:	f000 8587 	beq.w	db8de <_strtod_r+0xb96>
   dadd0:	2e06      	cmp	r6, #6
   dadd2:	d105      	bne.n	dade0 <_strtod_r+0x98>
   dadd4:	3501      	adds	r5, #1
   dadd6:	2300      	movs	r3, #0
   dadd8:	9517      	str	r5, [sp, #92]	; 0x5c
   dadda:	930c      	str	r3, [sp, #48]	; 0x30
   daddc:	f000 bd7f 	b.w	db8de <_strtod_r+0xb96>
   dade0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dade2:	b13a      	cbz	r2, dadf4 <_strtod_r+0xac>
   dade4:	2135      	movs	r1, #53	; 0x35
   dade6:	a81a      	add	r0, sp, #104	; 0x68
   dade8:	f002 f8af 	bl	dcf4a <__copybits>
   dadec:	9918      	ldr	r1, [sp, #96]	; 0x60
   dadee:	9802      	ldr	r0, [sp, #8]
   dadf0:	f001 fd2d 	bl	dc84e <_Bfree>
   dadf4:	2e06      	cmp	r6, #6
   dadf6:	d822      	bhi.n	dae3e <_strtod_r+0xf6>
   dadf8:	e8df f006 	tbb	[pc, r6]
   dadfc:	18080d04 	.word	0x18080d04
   dae00:	0d1d      	.short	0x0d1d
   dae02:	04          	.byte	0x04
   dae03:	00          	.byte	0x00
   dae04:	f04f 0b00 	mov.w	fp, #0
   dae08:	46da      	mov	sl, fp
   dae0a:	e018      	b.n	dae3e <_strtod_r+0xf6>
   dae0c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dae10:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dae14:	e013      	b.n	dae3e <_strtod_r+0xf6>
   dae16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dae18:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dae1a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dae1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dae22:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dae26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dae2a:	e008      	b.n	dae3e <_strtod_r+0xf6>
   dae2c:	f8df b234 	ldr.w	fp, [pc, #564]	; db064 <_strtod_r+0x31c>
   dae30:	f04f 0a00 	mov.w	sl, #0
   dae34:	e003      	b.n	dae3e <_strtod_r+0xf6>
   dae36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dae3a:	f04f 3aff 	mov.w	sl, #4294967295
   dae3e:	0721      	lsls	r1, r4, #28
   dae40:	f140 854d 	bpl.w	db8de <_strtod_r+0xb96>
   dae44:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dae48:	f000 bd49 	b.w	db8de <_strtod_r+0xb96>
   dae4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dae4e:	1c5a      	adds	r2, r3, #1
   dae50:	9217      	str	r2, [sp, #92]	; 0x5c
   dae52:	785b      	ldrb	r3, [r3, #1]
   dae54:	2b30      	cmp	r3, #48	; 0x30
   dae56:	d0f9      	beq.n	dae4c <_strtod_r+0x104>
   dae58:	2b00      	cmp	r3, #0
   dae5a:	f000 8540 	beq.w	db8de <_strtod_r+0xb96>
   dae5e:	2301      	movs	r3, #1
   dae60:	e000      	b.n	dae64 <_strtod_r+0x11c>
   dae62:	2300      	movs	r3, #0
   dae64:	f04f 0800 	mov.w	r8, #0
   dae68:	9306      	str	r3, [sp, #24]
   dae6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dae6c:	9307      	str	r3, [sp, #28]
   dae6e:	f8cd 8014 	str.w	r8, [sp, #20]
   dae72:	f8cd 8010 	str.w	r8, [sp, #16]
   dae76:	220a      	movs	r2, #10
   dae78:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dae7a:	782e      	ldrb	r6, [r5, #0]
   dae7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dae80:	b2d9      	uxtb	r1, r3
   dae82:	2909      	cmp	r1, #9
   dae84:	d80e      	bhi.n	daea4 <_strtod_r+0x15c>
   dae86:	9904      	ldr	r1, [sp, #16]
   dae88:	2908      	cmp	r1, #8
   dae8a:	bfdd      	ittte	le
   dae8c:	9905      	ldrle	r1, [sp, #20]
   dae8e:	fb02 3301 	mlale	r3, r2, r1, r3
   dae92:	9305      	strle	r3, [sp, #20]
   dae94:	fb02 3808 	mlagt	r8, r2, r8, r3
   dae98:	9b04      	ldr	r3, [sp, #16]
   dae9a:	3501      	adds	r5, #1
   dae9c:	3301      	adds	r3, #1
   dae9e:	9304      	str	r3, [sp, #16]
   daea0:	9517      	str	r5, [sp, #92]	; 0x5c
   daea2:	e7e9      	b.n	dae78 <_strtod_r+0x130>
   daea4:	9802      	ldr	r0, [sp, #8]
   daea6:	f7ff fe4d 	bl	dab44 <_localeconv_r>
   daeaa:	6807      	ldr	r7, [r0, #0]
   daeac:	9802      	ldr	r0, [sp, #8]
   daeae:	f7ff fe49 	bl	dab44 <_localeconv_r>
   daeb2:	6800      	ldr	r0, [r0, #0]
   daeb4:	f7ff feed 	bl	dac92 <strlen>
   daeb8:	4639      	mov	r1, r7
   daeba:	4602      	mov	r2, r0
   daebc:	4628      	mov	r0, r5
   daebe:	f7ff fef0 	bl	daca2 <strncmp>
   daec2:	4607      	mov	r7, r0
   daec4:	b128      	cbz	r0, daed2 <_strtod_r+0x18a>
   daec6:	2000      	movs	r0, #0
   daec8:	4633      	mov	r3, r6
   daeca:	9d04      	ldr	r5, [sp, #16]
   daecc:	4602      	mov	r2, r0
   daece:	4601      	mov	r1, r0
   daed0:	e057      	b.n	daf82 <_strtod_r+0x23a>
   daed2:	9802      	ldr	r0, [sp, #8]
   daed4:	f7ff fe36 	bl	dab44 <_localeconv_r>
   daed8:	6800      	ldr	r0, [r0, #0]
   daeda:	f7ff feda 	bl	dac92 <strlen>
   daede:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daee0:	181a      	adds	r2, r3, r0
   daee2:	9217      	str	r2, [sp, #92]	; 0x5c
   daee4:	9a04      	ldr	r2, [sp, #16]
   daee6:	5c1b      	ldrb	r3, [r3, r0]
   daee8:	2a00      	cmp	r2, #0
   daeea:	d142      	bne.n	daf72 <_strtod_r+0x22a>
   daeec:	4610      	mov	r0, r2
   daeee:	2b30      	cmp	r3, #48	; 0x30
   daef0:	d105      	bne.n	daefe <_strtod_r+0x1b6>
   daef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daef4:	1c5a      	adds	r2, r3, #1
   daef6:	9217      	str	r2, [sp, #92]	; 0x5c
   daef8:	3001      	adds	r0, #1
   daefa:	785b      	ldrb	r3, [r3, #1]
   daefc:	e7f7      	b.n	daeee <_strtod_r+0x1a6>
   daefe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   daf02:	2a08      	cmp	r2, #8
   daf04:	d843      	bhi.n	daf8e <_strtod_r+0x246>
   daf06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   daf08:	9207      	str	r2, [sp, #28]
   daf0a:	4602      	mov	r2, r0
   daf0c:	2000      	movs	r0, #0
   daf0e:	4605      	mov	r5, r0
   daf10:	3b30      	subs	r3, #48	; 0x30
   daf12:	f100 0101 	add.w	r1, r0, #1
   daf16:	d026      	beq.n	daf66 <_strtod_r+0x21e>
   daf18:	440a      	add	r2, r1
   daf1a:	eb05 0c00 	add.w	ip, r5, r0
   daf1e:	4629      	mov	r1, r5
   daf20:	260a      	movs	r6, #10
   daf22:	4561      	cmp	r1, ip
   daf24:	d00e      	beq.n	daf44 <_strtod_r+0x1fc>
   daf26:	3101      	adds	r1, #1
   daf28:	f101 3eff 	add.w	lr, r1, #4294967295
   daf2c:	f1be 0f08 	cmp.w	lr, #8
   daf30:	dc03      	bgt.n	daf3a <_strtod_r+0x1f2>
   daf32:	9f05      	ldr	r7, [sp, #20]
   daf34:	4377      	muls	r7, r6
   daf36:	9705      	str	r7, [sp, #20]
   daf38:	e7f3      	b.n	daf22 <_strtod_r+0x1da>
   daf3a:	2910      	cmp	r1, #16
   daf3c:	bfd8      	it	le
   daf3e:	fb06 f808 	mulle.w	r8, r6, r8
   daf42:	e7ee      	b.n	daf22 <_strtod_r+0x1da>
   daf44:	4428      	add	r0, r5
   daf46:	2808      	cmp	r0, #8
   daf48:	f100 0501 	add.w	r5, r0, #1
   daf4c:	dc05      	bgt.n	daf5a <_strtod_r+0x212>
   daf4e:	9805      	ldr	r0, [sp, #20]
   daf50:	210a      	movs	r1, #10
   daf52:	fb01 3300 	mla	r3, r1, r0, r3
   daf56:	9305      	str	r3, [sp, #20]
   daf58:	e004      	b.n	daf64 <_strtod_r+0x21c>
   daf5a:	2d10      	cmp	r5, #16
   daf5c:	bfdc      	itt	le
   daf5e:	210a      	movle	r1, #10
   daf60:	fb01 3808 	mlale	r8, r1, r8, r3
   daf64:	2100      	movs	r1, #0
   daf66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daf68:	1c58      	adds	r0, r3, #1
   daf6a:	9017      	str	r0, [sp, #92]	; 0x5c
   daf6c:	785b      	ldrb	r3, [r3, #1]
   daf6e:	4608      	mov	r0, r1
   daf70:	e002      	b.n	daf78 <_strtod_r+0x230>
   daf72:	9d04      	ldr	r5, [sp, #16]
   daf74:	4638      	mov	r0, r7
   daf76:	463a      	mov	r2, r7
   daf78:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   daf7c:	2909      	cmp	r1, #9
   daf7e:	d9c7      	bls.n	daf10 <_strtod_r+0x1c8>
   daf80:	2101      	movs	r1, #1
   daf82:	2b65      	cmp	r3, #101	; 0x65
   daf84:	d001      	beq.n	daf8a <_strtod_r+0x242>
   daf86:	2b45      	cmp	r3, #69	; 0x45
   daf88:	d151      	bne.n	db02e <_strtod_r+0x2e6>
   daf8a:	b96d      	cbnz	r5, dafa8 <_strtod_r+0x260>
   daf8c:	e004      	b.n	daf98 <_strtod_r+0x250>
   daf8e:	2b65      	cmp	r3, #101	; 0x65
   daf90:	f040 84b3 	bne.w	db8fa <_strtod_r+0xbb2>
   daf94:	2200      	movs	r2, #0
   daf96:	2101      	movs	r1, #1
   daf98:	b928      	cbnz	r0, dafa6 <_strtod_r+0x25e>
   daf9a:	9b06      	ldr	r3, [sp, #24]
   daf9c:	2b00      	cmp	r3, #0
   daf9e:	f000 8095 	beq.w	db0cc <_strtod_r+0x384>
   dafa2:	4605      	mov	r5, r0
   dafa4:	e000      	b.n	dafa8 <_strtod_r+0x260>
   dafa6:	2500      	movs	r5, #0
   dafa8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   dafaa:	1c63      	adds	r3, r4, #1
   dafac:	9317      	str	r3, [sp, #92]	; 0x5c
   dafae:	7863      	ldrb	r3, [r4, #1]
   dafb0:	2b2b      	cmp	r3, #43	; 0x2b
   dafb2:	d006      	beq.n	dafc2 <_strtod_r+0x27a>
   dafb4:	2b2d      	cmp	r3, #45	; 0x2d
   dafb6:	d002      	beq.n	dafbe <_strtod_r+0x276>
   dafb8:	2600      	movs	r6, #0
   dafba:	9603      	str	r6, [sp, #12]
   dafbc:	e006      	b.n	dafcc <_strtod_r+0x284>
   dafbe:	2301      	movs	r3, #1
   dafc0:	e000      	b.n	dafc4 <_strtod_r+0x27c>
   dafc2:	2300      	movs	r3, #0
   dafc4:	9303      	str	r3, [sp, #12]
   dafc6:	1ca3      	adds	r3, r4, #2
   dafc8:	9317      	str	r3, [sp, #92]	; 0x5c
   dafca:	78a3      	ldrb	r3, [r4, #2]
   dafcc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dafd0:	2e09      	cmp	r6, #9
   dafd2:	d82b      	bhi.n	db02c <_strtod_r+0x2e4>
   dafd4:	2b30      	cmp	r3, #48	; 0x30
   dafd6:	d104      	bne.n	dafe2 <_strtod_r+0x29a>
   dafd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dafda:	1c5e      	adds	r6, r3, #1
   dafdc:	9617      	str	r6, [sp, #92]	; 0x5c
   dafde:	785b      	ldrb	r3, [r3, #1]
   dafe0:	e7f8      	b.n	dafd4 <_strtod_r+0x28c>
   dafe2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   dafe6:	2e08      	cmp	r6, #8
   dafe8:	d821      	bhi.n	db02e <_strtod_r+0x2e6>
   dafea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dafee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daff0:	f04f 0c0a 	mov.w	ip, #10
   daff4:	461f      	mov	r7, r3
   daff6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daff8:	1c5e      	adds	r6, r3, #1
   daffa:	9617      	str	r6, [sp, #92]	; 0x5c
   daffc:	785b      	ldrb	r3, [r3, #1]
   daffe:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   db002:	f1b9 0f09 	cmp.w	r9, #9
   db006:	d804      	bhi.n	db012 <_strtod_r+0x2ca>
   db008:	fb0c 3e0e 	mla	lr, ip, lr, r3
   db00c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db010:	e7f1      	b.n	daff6 <_strtod_r+0x2ae>
   db012:	1bf6      	subs	r6, r6, r7
   db014:	2e08      	cmp	r6, #8
   db016:	f644 691f 	movw	r9, #19999	; 0x4e1f
   db01a:	dc02      	bgt.n	db022 <_strtod_r+0x2da>
   db01c:	45f1      	cmp	r9, lr
   db01e:	bfa8      	it	ge
   db020:	46f1      	movge	r9, lr
   db022:	9e03      	ldr	r6, [sp, #12]
   db024:	b12e      	cbz	r6, db032 <_strtod_r+0x2ea>
   db026:	f1c9 0900 	rsb	r9, r9, #0
   db02a:	e002      	b.n	db032 <_strtod_r+0x2ea>
   db02c:	9417      	str	r4, [sp, #92]	; 0x5c
   db02e:	f04f 0900 	mov.w	r9, #0
   db032:	2d00      	cmp	r5, #0
   db034:	d153      	bne.n	db0de <_strtod_r+0x396>
   db036:	2800      	cmp	r0, #0
   db038:	f040 8451 	bne.w	db8de <_strtod_r+0xb96>
   db03c:	9a06      	ldr	r2, [sp, #24]
   db03e:	2a00      	cmp	r2, #0
   db040:	f040 844d 	bne.w	db8de <_strtod_r+0xb96>
   db044:	2900      	cmp	r1, #0
   db046:	d141      	bne.n	db0cc <_strtod_r+0x384>
   db048:	2b4e      	cmp	r3, #78	; 0x4e
   db04a:	d020      	beq.n	db08e <_strtod_r+0x346>
   db04c:	dc02      	bgt.n	db054 <_strtod_r+0x30c>
   db04e:	2b49      	cmp	r3, #73	; 0x49
   db050:	d00a      	beq.n	db068 <_strtod_r+0x320>
   db052:	e03b      	b.n	db0cc <_strtod_r+0x384>
   db054:	2b69      	cmp	r3, #105	; 0x69
   db056:	d007      	beq.n	db068 <_strtod_r+0x320>
   db058:	2b6e      	cmp	r3, #110	; 0x6e
   db05a:	d018      	beq.n	db08e <_strtod_r+0x346>
   db05c:	e036      	b.n	db0cc <_strtod_r+0x384>
   db05e:	bf00      	nop
   db060:	000ddc08 	.word	0x000ddc08
   db064:	7ff00000 	.word	0x7ff00000
   db068:	49a8      	ldr	r1, [pc, #672]	; (db30c <_strtod_r+0x5c4>)
   db06a:	a817      	add	r0, sp, #92	; 0x5c
   db06c:	f001 fa38 	bl	dc4e0 <__match>
   db070:	b360      	cbz	r0, db0cc <_strtod_r+0x384>
   db072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db074:	49a6      	ldr	r1, [pc, #664]	; (db310 <_strtod_r+0x5c8>)
   db076:	3b01      	subs	r3, #1
   db078:	a817      	add	r0, sp, #92	; 0x5c
   db07a:	9317      	str	r3, [sp, #92]	; 0x5c
   db07c:	f001 fa30 	bl	dc4e0 <__match>
   db080:	b910      	cbnz	r0, db088 <_strtod_r+0x340>
   db082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db084:	3301      	adds	r3, #1
   db086:	9317      	str	r3, [sp, #92]	; 0x5c
   db088:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db32c <_strtod_r+0x5e4>
   db08c:	e01a      	b.n	db0c4 <_strtod_r+0x37c>
   db08e:	49a1      	ldr	r1, [pc, #644]	; (db314 <_strtod_r+0x5cc>)
   db090:	a817      	add	r0, sp, #92	; 0x5c
   db092:	f001 fa25 	bl	dc4e0 <__match>
   db096:	b1c8      	cbz	r0, db0cc <_strtod_r+0x384>
   db098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db09a:	781b      	ldrb	r3, [r3, #0]
   db09c:	2b28      	cmp	r3, #40	; 0x28
   db09e:	d10f      	bne.n	db0c0 <_strtod_r+0x378>
   db0a0:	aa1a      	add	r2, sp, #104	; 0x68
   db0a2:	499d      	ldr	r1, [pc, #628]	; (db318 <_strtod_r+0x5d0>)
   db0a4:	a817      	add	r0, sp, #92	; 0x5c
   db0a6:	f001 fa2e 	bl	dc506 <__hexnan>
   db0aa:	2805      	cmp	r0, #5
   db0ac:	d108      	bne.n	db0c0 <_strtod_r+0x378>
   db0ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db0b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db0b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db0b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db0bc:	f000 bc0f 	b.w	db8de <_strtod_r+0xb96>
   db0c0:	f8df b26c 	ldr.w	fp, [pc, #620]	; db330 <_strtod_r+0x5e8>
   db0c4:	f04f 0a00 	mov.w	sl, #0
   db0c8:	f000 bc09 	b.w	db8de <_strtod_r+0xb96>
   db0cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db0ce:	9417      	str	r4, [sp, #92]	; 0x5c
   db0d0:	2b00      	cmp	r3, #0
   db0d2:	f000 840f 	beq.w	db8f4 <_strtod_r+0xbac>
   db0d6:	2300      	movs	r3, #0
   db0d8:	930c      	str	r3, [sp, #48]	; 0x30
   db0da:	f000 bc02 	b.w	db8e2 <_strtod_r+0xb9a>
   db0de:	9b04      	ldr	r3, [sp, #16]
   db0e0:	9805      	ldr	r0, [sp, #20]
   db0e2:	2b00      	cmp	r3, #0
   db0e4:	bf08      	it	eq
   db0e6:	462b      	moveq	r3, r5
   db0e8:	2d10      	cmp	r5, #16
   db0ea:	462c      	mov	r4, r5
   db0ec:	ebc2 0909 	rsb	r9, r2, r9
   db0f0:	bfa8      	it	ge
   db0f2:	2410      	movge	r4, #16
   db0f4:	9304      	str	r3, [sp, #16]
   db0f6:	f7ff f86f 	bl	da1d8 <__aeabi_ui2d>
   db0fa:	2c09      	cmp	r4, #9
   db0fc:	4682      	mov	sl, r0
   db0fe:	468b      	mov	fp, r1
   db100:	dd13      	ble.n	db12a <_strtod_r+0x3e2>
   db102:	4b86      	ldr	r3, [pc, #536]	; (db31c <_strtod_r+0x5d4>)
   db104:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   db108:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db10c:	f7ff f8da 	bl	da2c4 <__aeabi_dmul>
   db110:	4606      	mov	r6, r0
   db112:	4640      	mov	r0, r8
   db114:	460f      	mov	r7, r1
   db116:	f7ff f85f 	bl	da1d8 <__aeabi_ui2d>
   db11a:	4602      	mov	r2, r0
   db11c:	460b      	mov	r3, r1
   db11e:	4630      	mov	r0, r6
   db120:	4639      	mov	r1, r7
   db122:	f7fe ff1d 	bl	d9f60 <__adddf3>
   db126:	4682      	mov	sl, r0
   db128:	468b      	mov	fp, r1
   db12a:	2d0f      	cmp	r5, #15
   db12c:	dc36      	bgt.n	db19c <_strtod_r+0x454>
   db12e:	f1b9 0f00 	cmp.w	r9, #0
   db132:	f000 83d4 	beq.w	db8de <_strtod_r+0xb96>
   db136:	dd24      	ble.n	db182 <_strtod_r+0x43a>
   db138:	f1b9 0f16 	cmp.w	r9, #22
   db13c:	dc07      	bgt.n	db14e <_strtod_r+0x406>
   db13e:	4d77      	ldr	r5, [pc, #476]	; (db31c <_strtod_r+0x5d4>)
   db140:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   db144:	4652      	mov	r2, sl
   db146:	465b      	mov	r3, fp
   db148:	e9d9 0100 	ldrd	r0, r1, [r9]
   db14c:	e014      	b.n	db178 <_strtod_r+0x430>
   db14e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db152:	4599      	cmp	r9, r3
   db154:	dc22      	bgt.n	db19c <_strtod_r+0x454>
   db156:	4c71      	ldr	r4, [pc, #452]	; (db31c <_strtod_r+0x5d4>)
   db158:	f1c5 050f 	rsb	r5, r5, #15
   db15c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db160:	ebc5 0509 	rsb	r5, r5, r9
   db164:	4652      	mov	r2, sl
   db166:	465b      	mov	r3, fp
   db168:	e9d1 0100 	ldrd	r0, r1, [r1]
   db16c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db170:	f7ff f8a8 	bl	da2c4 <__aeabi_dmul>
   db174:	e9d4 2300 	ldrd	r2, r3, [r4]
   db178:	f7ff f8a4 	bl	da2c4 <__aeabi_dmul>
   db17c:	4682      	mov	sl, r0
   db17e:	468b      	mov	fp, r1
   db180:	e3ad      	b.n	db8de <_strtod_r+0xb96>
   db182:	f119 0f16 	cmn.w	r9, #22
   db186:	db09      	blt.n	db19c <_strtod_r+0x454>
   db188:	4d64      	ldr	r5, [pc, #400]	; (db31c <_strtod_r+0x5d4>)
   db18a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   db18e:	e9d9 2300 	ldrd	r2, r3, [r9]
   db192:	4650      	mov	r0, sl
   db194:	4659      	mov	r1, fp
   db196:	f7ff f9bf 	bl	da518 <__aeabi_ddiv>
   db19a:	e7ef      	b.n	db17c <_strtod_r+0x434>
   db19c:	1b2c      	subs	r4, r5, r4
   db19e:	444c      	add	r4, r9
   db1a0:	2c00      	cmp	r4, #0
   db1a2:	dd57      	ble.n	db254 <_strtod_r+0x50c>
   db1a4:	f014 010f 	ands.w	r1, r4, #15
   db1a8:	d00a      	beq.n	db1c0 <_strtod_r+0x478>
   db1aa:	4b5c      	ldr	r3, [pc, #368]	; (db31c <_strtod_r+0x5d4>)
   db1ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   db1b0:	4652      	mov	r2, sl
   db1b2:	465b      	mov	r3, fp
   db1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   db1b8:	f7ff f884 	bl	da2c4 <__aeabi_dmul>
   db1bc:	4682      	mov	sl, r0
   db1be:	468b      	mov	fp, r1
   db1c0:	f034 040f 	bics.w	r4, r4, #15
   db1c4:	f000 80b8 	beq.w	db338 <_strtod_r+0x5f0>
   db1c8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   db1cc:	dd0b      	ble.n	db1e6 <_strtod_r+0x49e>
   db1ce:	2400      	movs	r4, #0
   db1d0:	4625      	mov	r5, r4
   db1d2:	9405      	str	r4, [sp, #20]
   db1d4:	9404      	str	r4, [sp, #16]
   db1d6:	9a02      	ldr	r2, [sp, #8]
   db1d8:	f8df b150 	ldr.w	fp, [pc, #336]	; db32c <_strtod_r+0x5e4>
   db1dc:	2322      	movs	r3, #34	; 0x22
   db1de:	6013      	str	r3, [r2, #0]
   db1e0:	f04f 0a00 	mov.w	sl, #0
   db1e4:	e187      	b.n	db4f6 <_strtod_r+0x7ae>
   db1e6:	4e4e      	ldr	r6, [pc, #312]	; (db320 <_strtod_r+0x5d8>)
   db1e8:	2300      	movs	r3, #0
   db1ea:	1124      	asrs	r4, r4, #4
   db1ec:	4650      	mov	r0, sl
   db1ee:	4659      	mov	r1, fp
   db1f0:	4698      	mov	r8, r3
   db1f2:	4637      	mov	r7, r6
   db1f4:	2c01      	cmp	r4, #1
   db1f6:	dd0b      	ble.n	db210 <_strtod_r+0x4c8>
   db1f8:	07e2      	lsls	r2, r4, #31
   db1fa:	d504      	bpl.n	db206 <_strtod_r+0x4be>
   db1fc:	e9d6 2300 	ldrd	r2, r3, [r6]
   db200:	f7ff f860 	bl	da2c4 <__aeabi_dmul>
   db204:	2301      	movs	r3, #1
   db206:	f108 0801 	add.w	r8, r8, #1
   db20a:	1064      	asrs	r4, r4, #1
   db20c:	3608      	adds	r6, #8
   db20e:	e7f1      	b.n	db1f4 <_strtod_r+0x4ac>
   db210:	b10b      	cbz	r3, db216 <_strtod_r+0x4ce>
   db212:	4682      	mov	sl, r0
   db214:	468b      	mov	fp, r1
   db216:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db21a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   db21e:	4652      	mov	r2, sl
   db220:	465b      	mov	r3, fp
   db222:	e9d7 0100 	ldrd	r0, r1, [r7]
   db226:	f7ff f84d 	bl	da2c4 <__aeabi_dmul>
   db22a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db22e:	468b      	mov	fp, r1
   db230:	460a      	mov	r2, r1
   db232:	0d1b      	lsrs	r3, r3, #20
   db234:	493b      	ldr	r1, [pc, #236]	; (db324 <_strtod_r+0x5dc>)
   db236:	051b      	lsls	r3, r3, #20
   db238:	428b      	cmp	r3, r1
   db23a:	4682      	mov	sl, r0
   db23c:	d8c7      	bhi.n	db1ce <_strtod_r+0x486>
   db23e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db242:	428b      	cmp	r3, r1
   db244:	bf86      	itte	hi
   db246:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db334 <_strtod_r+0x5ec>
   db24a:	f04f 3aff 	movhi.w	sl, #4294967295
   db24e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db252:	e071      	b.n	db338 <_strtod_r+0x5f0>
   db254:	d070      	beq.n	db338 <_strtod_r+0x5f0>
   db256:	4264      	negs	r4, r4
   db258:	f014 020f 	ands.w	r2, r4, #15
   db25c:	d00a      	beq.n	db274 <_strtod_r+0x52c>
   db25e:	4b2f      	ldr	r3, [pc, #188]	; (db31c <_strtod_r+0x5d4>)
   db260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db264:	4650      	mov	r0, sl
   db266:	4659      	mov	r1, fp
   db268:	e9d3 2300 	ldrd	r2, r3, [r3]
   db26c:	f7ff f954 	bl	da518 <__aeabi_ddiv>
   db270:	4682      	mov	sl, r0
   db272:	468b      	mov	fp, r1
   db274:	1124      	asrs	r4, r4, #4
   db276:	d05f      	beq.n	db338 <_strtod_r+0x5f0>
   db278:	2c1f      	cmp	r4, #31
   db27a:	dd04      	ble.n	db286 <_strtod_r+0x53e>
   db27c:	2400      	movs	r4, #0
   db27e:	4625      	mov	r5, r4
   db280:	9405      	str	r4, [sp, #20]
   db282:	9404      	str	r4, [sp, #16]
   db284:	e130      	b.n	db4e8 <_strtod_r+0x7a0>
   db286:	f014 0f10 	tst.w	r4, #16
   db28a:	bf0c      	ite	eq
   db28c:	2300      	moveq	r3, #0
   db28e:	236a      	movne	r3, #106	; 0x6a
   db290:	4e25      	ldr	r6, [pc, #148]	; (db328 <_strtod_r+0x5e0>)
   db292:	9303      	str	r3, [sp, #12]
   db294:	4650      	mov	r0, sl
   db296:	4659      	mov	r1, fp
   db298:	2300      	movs	r3, #0
   db29a:	2c00      	cmp	r4, #0
   db29c:	dd09      	ble.n	db2b2 <_strtod_r+0x56a>
   db29e:	07e2      	lsls	r2, r4, #31
   db2a0:	d504      	bpl.n	db2ac <_strtod_r+0x564>
   db2a2:	e9d6 2300 	ldrd	r2, r3, [r6]
   db2a6:	f7ff f80d 	bl	da2c4 <__aeabi_dmul>
   db2aa:	2301      	movs	r3, #1
   db2ac:	1064      	asrs	r4, r4, #1
   db2ae:	3608      	adds	r6, #8
   db2b0:	e7f3      	b.n	db29a <_strtod_r+0x552>
   db2b2:	b10b      	cbz	r3, db2b8 <_strtod_r+0x570>
   db2b4:	4682      	mov	sl, r0
   db2b6:	468b      	mov	fp, r1
   db2b8:	9b03      	ldr	r3, [sp, #12]
   db2ba:	b1eb      	cbz	r3, db2f8 <_strtod_r+0x5b0>
   db2bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db2c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db2c4:	2b00      	cmp	r3, #0
   db2c6:	4659      	mov	r1, fp
   db2c8:	dd16      	ble.n	db2f8 <_strtod_r+0x5b0>
   db2ca:	2b1f      	cmp	r3, #31
   db2cc:	dd0e      	ble.n	db2ec <_strtod_r+0x5a4>
   db2ce:	2b34      	cmp	r3, #52	; 0x34
   db2d0:	bfde      	ittt	le
   db2d2:	3b20      	suble	r3, #32
   db2d4:	f04f 32ff 	movle.w	r2, #4294967295
   db2d8:	fa02 f303 	lslle.w	r3, r2, r3
   db2dc:	f04f 0a00 	mov.w	sl, #0
   db2e0:	bfcc      	ite	gt
   db2e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db2e6:	ea03 0b01 	andle.w	fp, r3, r1
   db2ea:	e005      	b.n	db2f8 <_strtod_r+0x5b0>
   db2ec:	f04f 32ff 	mov.w	r2, #4294967295
   db2f0:	fa02 f303 	lsl.w	r3, r2, r3
   db2f4:	ea03 0a0a 	and.w	sl, r3, sl
   db2f8:	2200      	movs	r2, #0
   db2fa:	2300      	movs	r3, #0
   db2fc:	4650      	mov	r0, sl
   db2fe:	4659      	mov	r1, fp
   db300:	f7ff fa48 	bl	da794 <__aeabi_dcmpeq>
   db304:	2800      	cmp	r0, #0
   db306:	d1b9      	bne.n	db27c <_strtod_r+0x534>
   db308:	e018      	b.n	db33c <_strtod_r+0x5f4>
   db30a:	bf00      	nop
   db30c:	000ddc30 	.word	0x000ddc30
   db310:	000ddc33 	.word	0x000ddc33
   db314:	000ddc39 	.word	0x000ddc39
   db318:	000ddc1c 	.word	0x000ddc1c
   db31c:	000ddca8 	.word	0x000ddca8
   db320:	000ddd70 	.word	0x000ddd70
   db324:	7ca00000 	.word	0x7ca00000
   db328:	000ddc40 	.word	0x000ddc40
   db32c:	7ff00000 	.word	0x7ff00000
   db330:	fff80000 	.word	0xfff80000
   db334:	7fefffff 	.word	0x7fefffff
   db338:	2300      	movs	r3, #0
   db33a:	9303      	str	r3, [sp, #12]
   db33c:	9b05      	ldr	r3, [sp, #20]
   db33e:	9300      	str	r3, [sp, #0]
   db340:	9a04      	ldr	r2, [sp, #16]
   db342:	9907      	ldr	r1, [sp, #28]
   db344:	9802      	ldr	r0, [sp, #8]
   db346:	462b      	mov	r3, r5
   db348:	f001 fad3 	bl	dc8f2 <__s2b>
   db34c:	9005      	str	r0, [sp, #20]
   db34e:	2800      	cmp	r0, #0
   db350:	f43f af3d 	beq.w	db1ce <_strtod_r+0x486>
   db354:	f1b9 0f00 	cmp.w	r9, #0
   db358:	f1c9 0300 	rsb	r3, r9, #0
   db35c:	bfa8      	it	ge
   db35e:	2300      	movge	r3, #0
   db360:	930d      	str	r3, [sp, #52]	; 0x34
   db362:	2400      	movs	r4, #0
   db364:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db368:	9312      	str	r3, [sp, #72]	; 0x48
   db36a:	4625      	mov	r5, r4
   db36c:	9b05      	ldr	r3, [sp, #20]
   db36e:	9802      	ldr	r0, [sp, #8]
   db370:	6859      	ldr	r1, [r3, #4]
   db372:	f001 fa37 	bl	dc7e4 <_Balloc>
   db376:	9004      	str	r0, [sp, #16]
   db378:	2800      	cmp	r0, #0
   db37a:	f43f af2c 	beq.w	db1d6 <_strtod_r+0x48e>
   db37e:	9b05      	ldr	r3, [sp, #20]
   db380:	691a      	ldr	r2, [r3, #16]
   db382:	3202      	adds	r2, #2
   db384:	f103 010c 	add.w	r1, r3, #12
   db388:	0092      	lsls	r2, r2, #2
   db38a:	300c      	adds	r0, #12
   db38c:	f7ff fbed 	bl	dab6a <memcpy>
   db390:	aa1a      	add	r2, sp, #104	; 0x68
   db392:	a919      	add	r1, sp, #100	; 0x64
   db394:	ec4b ab10 	vmov	d0, sl, fp
   db398:	9802      	ldr	r0, [sp, #8]
   db39a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db39e:	f001 fd5c 	bl	dce5a <__d2b>
   db3a2:	9018      	str	r0, [sp, #96]	; 0x60
   db3a4:	2800      	cmp	r0, #0
   db3a6:	f43f af16 	beq.w	db1d6 <_strtod_r+0x48e>
   db3aa:	2101      	movs	r1, #1
   db3ac:	9802      	ldr	r0, [sp, #8]
   db3ae:	f001 fb2b 	bl	dca08 <__i2b>
   db3b2:	4605      	mov	r5, r0
   db3b4:	2800      	cmp	r0, #0
   db3b6:	f43f af0e 	beq.w	db1d6 <_strtod_r+0x48e>
   db3ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db3bc:	9903      	ldr	r1, [sp, #12]
   db3be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db3c0:	2b00      	cmp	r3, #0
   db3c2:	bfad      	iteet	ge
   db3c4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db3c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db3c8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db3cc:	eb02 0803 	addge.w	r8, r2, r3
   db3d0:	bfb8      	it	lt
   db3d2:	1ad2      	sublt	r2, r2, r3
   db3d4:	eba3 0301 	sub.w	r3, r3, r1
   db3d8:	4433      	add	r3, r6
   db3da:	49b5      	ldr	r1, [pc, #724]	; (db6b0 <_strtod_r+0x968>)
   db3dc:	bfa8      	it	ge
   db3de:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db3e0:	3b01      	subs	r3, #1
   db3e2:	428b      	cmp	r3, r1
   db3e4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db3e8:	f280 808a 	bge.w	db500 <_strtod_r+0x7b8>
   db3ec:	1ac9      	subs	r1, r1, r3
   db3ee:	291f      	cmp	r1, #31
   db3f0:	bfc8      	it	gt
   db3f2:	4fb0      	ldrgt	r7, [pc, #704]	; (db6b4 <_strtod_r+0x96c>)
   db3f4:	f04f 0901 	mov.w	r9, #1
   db3f8:	bfd4      	ite	le
   db3fa:	fa09 f301 	lslle.w	r3, r9, r1
   db3fe:	1aff      	subgt	r7, r7, r3
   db400:	eba6 0601 	sub.w	r6, r6, r1
   db404:	bfd9      	ittee	le
   db406:	9306      	strle	r3, [sp, #24]
   db408:	2700      	movle	r7, #0
   db40a:	fa09 f707 	lslgt.w	r7, r9, r7
   db40e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   db412:	eb08 0906 	add.w	r9, r8, r6
   db416:	9b03      	ldr	r3, [sp, #12]
   db418:	45c8      	cmp	r8, r9
   db41a:	4416      	add	r6, r2
   db41c:	441e      	add	r6, r3
   db41e:	4643      	mov	r3, r8
   db420:	bfa8      	it	ge
   db422:	464b      	movge	r3, r9
   db424:	42b3      	cmp	r3, r6
   db426:	bfa8      	it	ge
   db428:	4633      	movge	r3, r6
   db42a:	2b00      	cmp	r3, #0
   db42c:	bfc2      	ittt	gt
   db42e:	ebc3 0909 	rsbgt	r9, r3, r9
   db432:	1af6      	subgt	r6, r6, r3
   db434:	ebc3 0808 	rsbgt	r8, r3, r8
   db438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db43a:	2b00      	cmp	r3, #0
   db43c:	d164      	bne.n	db508 <_strtod_r+0x7c0>
   db43e:	f1b9 0f00 	cmp.w	r9, #0
   db442:	dc7a      	bgt.n	db53a <_strtod_r+0x7f2>
   db444:	9b12      	ldr	r3, [sp, #72]	; 0x48
   db446:	2b00      	cmp	r3, #0
   db448:	f040 8081 	bne.w	db54e <_strtod_r+0x806>
   db44c:	2e00      	cmp	r6, #0
   db44e:	f300 8088 	bgt.w	db562 <_strtod_r+0x81a>
   db452:	f1b8 0f00 	cmp.w	r8, #0
   db456:	f300 808e 	bgt.w	db576 <_strtod_r+0x82e>
   db45a:	9a04      	ldr	r2, [sp, #16]
   db45c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db45e:	9802      	ldr	r0, [sp, #8]
   db460:	f001 fc27 	bl	dccb2 <__mdiff>
   db464:	4604      	mov	r4, r0
   db466:	2800      	cmp	r0, #0
   db468:	f43f aeb5 	beq.w	db1d6 <_strtod_r+0x48e>
   db46c:	68c3      	ldr	r3, [r0, #12]
   db46e:	9307      	str	r3, [sp, #28]
   db470:	2300      	movs	r3, #0
   db472:	60c3      	str	r3, [r0, #12]
   db474:	4629      	mov	r1, r5
   db476:	f001 fc00 	bl	dcc7a <__mcmp>
   db47a:	2800      	cmp	r0, #0
   db47c:	f280 8089 	bge.w	db592 <_strtod_r+0x84a>
   db480:	9b07      	ldr	r3, [sp, #28]
   db482:	2b00      	cmp	r3, #0
   db484:	f040 8204 	bne.w	db890 <_strtod_r+0xb48>
   db488:	f1ba 0f00 	cmp.w	sl, #0
   db48c:	f040 8200 	bne.w	db890 <_strtod_r+0xb48>
   db490:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db494:	2b00      	cmp	r3, #0
   db496:	f040 81fb 	bne.w	db890 <_strtod_r+0xb48>
   db49a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db49e:	0d1b      	lsrs	r3, r3, #20
   db4a0:	051b      	lsls	r3, r3, #20
   db4a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db4a6:	f240 81f3 	bls.w	db890 <_strtod_r+0xb48>
   db4aa:	6963      	ldr	r3, [r4, #20]
   db4ac:	2b00      	cmp	r3, #0
   db4ae:	d06c      	beq.n	db58a <_strtod_r+0x842>
   db4b0:	4621      	mov	r1, r4
   db4b2:	2201      	movs	r2, #1
   db4b4:	9802      	ldr	r0, [sp, #8]
   db4b6:	f001 fb8f 	bl	dcbd8 <__lshift>
   db4ba:	4629      	mov	r1, r5
   db4bc:	4604      	mov	r4, r0
   db4be:	f001 fbdc 	bl	dcc7a <__mcmp>
   db4c2:	2800      	cmp	r0, #0
   db4c4:	f340 81e4 	ble.w	db890 <_strtod_r+0xb48>
   db4c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db4cc:	9a03      	ldr	r2, [sp, #12]
   db4ce:	0d1b      	lsrs	r3, r3, #20
   db4d0:	051b      	lsls	r3, r3, #20
   db4d2:	2a00      	cmp	r2, #0
   db4d4:	f000 808c 	beq.w	db5f0 <_strtod_r+0x8a8>
   db4d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db4dc:	f300 8088 	bgt.w	db5f0 <_strtod_r+0x8a8>
   db4e0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   db4e4:	f300 81d6 	bgt.w	db894 <_strtod_r+0xb4c>
   db4e8:	9a02      	ldr	r2, [sp, #8]
   db4ea:	2322      	movs	r3, #34	; 0x22
   db4ec:	f04f 0a00 	mov.w	sl, #0
   db4f0:	f04f 0b00 	mov.w	fp, #0
   db4f4:	6013      	str	r3, [r2, #0]
   db4f6:	9b05      	ldr	r3, [sp, #20]
   db4f8:	2b00      	cmp	r3, #0
   db4fa:	f040 81dc 	bne.w	db8b6 <_strtod_r+0xb6e>
   db4fe:	e1ee      	b.n	db8de <_strtod_r+0xb96>
   db500:	2301      	movs	r3, #1
   db502:	2700      	movs	r7, #0
   db504:	9306      	str	r3, [sp, #24]
   db506:	e784      	b.n	db412 <_strtod_r+0x6ca>
   db508:	4629      	mov	r1, r5
   db50a:	461a      	mov	r2, r3
   db50c:	9802      	ldr	r0, [sp, #8]
   db50e:	f001 fb15 	bl	dcb3c <__pow5mult>
   db512:	4605      	mov	r5, r0
   db514:	2800      	cmp	r0, #0
   db516:	f43f ae5e 	beq.w	db1d6 <_strtod_r+0x48e>
   db51a:	4601      	mov	r1, r0
   db51c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db51e:	9802      	ldr	r0, [sp, #8]
   db520:	f001 fa7b 	bl	dca1a <__multiply>
   db524:	9007      	str	r0, [sp, #28]
   db526:	2800      	cmp	r0, #0
   db528:	f43f ae55 	beq.w	db1d6 <_strtod_r+0x48e>
   db52c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db52e:	9802      	ldr	r0, [sp, #8]
   db530:	f001 f98d 	bl	dc84e <_Bfree>
   db534:	9b07      	ldr	r3, [sp, #28]
   db536:	9318      	str	r3, [sp, #96]	; 0x60
   db538:	e781      	b.n	db43e <_strtod_r+0x6f6>
   db53a:	464a      	mov	r2, r9
   db53c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db53e:	9802      	ldr	r0, [sp, #8]
   db540:	f001 fb4a 	bl	dcbd8 <__lshift>
   db544:	9018      	str	r0, [sp, #96]	; 0x60
   db546:	2800      	cmp	r0, #0
   db548:	f47f af7c 	bne.w	db444 <_strtod_r+0x6fc>
   db54c:	e643      	b.n	db1d6 <_strtod_r+0x48e>
   db54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db550:	9904      	ldr	r1, [sp, #16]
   db552:	9802      	ldr	r0, [sp, #8]
   db554:	f001 faf2 	bl	dcb3c <__pow5mult>
   db558:	9004      	str	r0, [sp, #16]
   db55a:	2800      	cmp	r0, #0
   db55c:	f47f af76 	bne.w	db44c <_strtod_r+0x704>
   db560:	e639      	b.n	db1d6 <_strtod_r+0x48e>
   db562:	4632      	mov	r2, r6
   db564:	9904      	ldr	r1, [sp, #16]
   db566:	9802      	ldr	r0, [sp, #8]
   db568:	f001 fb36 	bl	dcbd8 <__lshift>
   db56c:	9004      	str	r0, [sp, #16]
   db56e:	2800      	cmp	r0, #0
   db570:	f47f af6f 	bne.w	db452 <_strtod_r+0x70a>
   db574:	e62f      	b.n	db1d6 <_strtod_r+0x48e>
   db576:	4629      	mov	r1, r5
   db578:	4642      	mov	r2, r8
   db57a:	9802      	ldr	r0, [sp, #8]
   db57c:	f001 fb2c 	bl	dcbd8 <__lshift>
   db580:	4605      	mov	r5, r0
   db582:	2800      	cmp	r0, #0
   db584:	f47f af69 	bne.w	db45a <_strtod_r+0x712>
   db588:	e625      	b.n	db1d6 <_strtod_r+0x48e>
   db58a:	6923      	ldr	r3, [r4, #16]
   db58c:	2b01      	cmp	r3, #1
   db58e:	dc8f      	bgt.n	db4b0 <_strtod_r+0x768>
   db590:	e17e      	b.n	db890 <_strtod_r+0xb48>
   db592:	d161      	bne.n	db658 <_strtod_r+0x910>
   db594:	9a07      	ldr	r2, [sp, #28]
   db596:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db59a:	b322      	cbz	r2, db5e6 <_strtod_r+0x89e>
   db59c:	4946      	ldr	r1, [pc, #280]	; (db6b8 <_strtod_r+0x970>)
   db59e:	428b      	cmp	r3, r1
   db5a0:	465a      	mov	r2, fp
   db5a2:	d12e      	bne.n	db602 <_strtod_r+0x8ba>
   db5a4:	9b03      	ldr	r3, [sp, #12]
   db5a6:	4651      	mov	r1, sl
   db5a8:	b163      	cbz	r3, db5c4 <_strtod_r+0x87c>
   db5aa:	4b44      	ldr	r3, [pc, #272]	; (db6bc <_strtod_r+0x974>)
   db5ac:	4013      	ands	r3, r2
   db5ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db5b2:	d807      	bhi.n	db5c4 <_strtod_r+0x87c>
   db5b4:	0d1b      	lsrs	r3, r3, #20
   db5b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db5ba:	f04f 30ff 	mov.w	r0, #4294967295
   db5be:	fa00 f303 	lsl.w	r3, r0, r3
   db5c2:	e001      	b.n	db5c8 <_strtod_r+0x880>
   db5c4:	f04f 33ff 	mov.w	r3, #4294967295
   db5c8:	428b      	cmp	r3, r1
   db5ca:	d11a      	bne.n	db602 <_strtod_r+0x8ba>
   db5cc:	493c      	ldr	r1, [pc, #240]	; (db6c0 <_strtod_r+0x978>)
   db5ce:	428a      	cmp	r2, r1
   db5d0:	d102      	bne.n	db5d8 <_strtod_r+0x890>
   db5d2:	3301      	adds	r3, #1
   db5d4:	f43f adff 	beq.w	db1d6 <_strtod_r+0x48e>
   db5d8:	4b38      	ldr	r3, [pc, #224]	; (db6bc <_strtod_r+0x974>)
   db5da:	4013      	ands	r3, r2
   db5dc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db5e0:	f04f 0a00 	mov.w	sl, #0
   db5e4:	e154      	b.n	db890 <_strtod_r+0xb48>
   db5e6:	b963      	cbnz	r3, db602 <_strtod_r+0x8ba>
   db5e8:	f1ba 0f00 	cmp.w	sl, #0
   db5ec:	d109      	bne.n	db602 <_strtod_r+0x8ba>
   db5ee:	e76b      	b.n	db4c8 <_strtod_r+0x780>
   db5f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db5f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db5f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db5fc:	f04f 3aff 	mov.w	sl, #4294967295
   db600:	e146      	b.n	db890 <_strtod_r+0xb48>
   db602:	b117      	cbz	r7, db60a <_strtod_r+0x8c2>
   db604:	ea17 0f0b 	tst.w	r7, fp
   db608:	e002      	b.n	db610 <_strtod_r+0x8c8>
   db60a:	9b06      	ldr	r3, [sp, #24]
   db60c:	ea13 0f0a 	tst.w	r3, sl
   db610:	f000 813e 	beq.w	db890 <_strtod_r+0xb48>
   db614:	9b07      	ldr	r3, [sp, #28]
   db616:	9a03      	ldr	r2, [sp, #12]
   db618:	4650      	mov	r0, sl
   db61a:	4659      	mov	r1, fp
   db61c:	b153      	cbz	r3, db634 <_strtod_r+0x8ec>
   db61e:	f7ff fb74 	bl	dad0a <sulp>
   db622:	4602      	mov	r2, r0
   db624:	460b      	mov	r3, r1
   db626:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db62a:	f7fe fc99 	bl	d9f60 <__adddf3>
   db62e:	4682      	mov	sl, r0
   db630:	468b      	mov	fp, r1
   db632:	e12d      	b.n	db890 <_strtod_r+0xb48>
   db634:	f7ff fb69 	bl	dad0a <sulp>
   db638:	4602      	mov	r2, r0
   db63a:	460b      	mov	r3, r1
   db63c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db640:	f7fe fc8c 	bl	d9f5c <__aeabi_dsub>
   db644:	2200      	movs	r2, #0
   db646:	2300      	movs	r3, #0
   db648:	4682      	mov	sl, r0
   db64a:	468b      	mov	fp, r1
   db64c:	f7ff f8a2 	bl	da794 <__aeabi_dcmpeq>
   db650:	2800      	cmp	r0, #0
   db652:	f47f af49 	bne.w	db4e8 <_strtod_r+0x7a0>
   db656:	e11b      	b.n	db890 <_strtod_r+0xb48>
   db658:	4629      	mov	r1, r5
   db65a:	4620      	mov	r0, r4
   db65c:	f001 fc4b 	bl	dcef6 <__ratio>
   db660:	ec57 6b10 	vmov	r6, r7, d0
   db664:	2200      	movs	r2, #0
   db666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db66a:	ee10 0a10 	vmov	r0, s0
   db66e:	4639      	mov	r1, r7
   db670:	f7ff f8a4 	bl	da7bc <__aeabi_dcmple>
   db674:	2800      	cmp	r0, #0
   db676:	d042      	beq.n	db6fe <_strtod_r+0x9b6>
   db678:	9b07      	ldr	r3, [sp, #28]
   db67a:	b123      	cbz	r3, db686 <_strtod_r+0x93e>
   db67c:	f04f 0800 	mov.w	r8, #0
   db680:	f8df 9040 	ldr.w	r9, [pc, #64]	; db6c4 <_strtod_r+0x97c>
   db684:	e011      	b.n	db6aa <_strtod_r+0x962>
   db686:	f1ba 0f00 	cmp.w	sl, #0
   db68a:	d103      	bne.n	db694 <_strtod_r+0x94c>
   db68c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db690:	b93b      	cbnz	r3, db6a2 <_strtod_r+0x95a>
   db692:	e01b      	b.n	db6cc <_strtod_r+0x984>
   db694:	f1ba 0f01 	cmp.w	sl, #1
   db698:	d103      	bne.n	db6a2 <_strtod_r+0x95a>
   db69a:	f1bb 0f00 	cmp.w	fp, #0
   db69e:	f43f af23 	beq.w	db4e8 <_strtod_r+0x7a0>
   db6a2:	f8df 9024 	ldr.w	r9, [pc, #36]	; db6c8 <_strtod_r+0x980>
   db6a6:	f04f 0800 	mov.w	r8, #0
   db6aa:	2600      	movs	r6, #0
   db6ac:	4f05      	ldr	r7, [pc, #20]	; (db6c4 <_strtod_r+0x97c>)
   db6ae:	e039      	b.n	db724 <_strtod_r+0x9dc>
   db6b0:	fffffc02 	.word	0xfffffc02
   db6b4:	fffffbe2 	.word	0xfffffbe2
   db6b8:	000fffff 	.word	0x000fffff
   db6bc:	7ff00000 	.word	0x7ff00000
   db6c0:	7fefffff 	.word	0x7fefffff
   db6c4:	3ff00000 	.word	0x3ff00000
   db6c8:	bff00000 	.word	0xbff00000
   db6cc:	2200      	movs	r2, #0
   db6ce:	4b98      	ldr	r3, [pc, #608]	; (db930 <_strtod_r+0xbe8>)
   db6d0:	4630      	mov	r0, r6
   db6d2:	4639      	mov	r1, r7
   db6d4:	f7ff f868 	bl	da7a8 <__aeabi_dcmplt>
   db6d8:	b940      	cbnz	r0, db6ec <_strtod_r+0x9a4>
   db6da:	4630      	mov	r0, r6
   db6dc:	4639      	mov	r1, r7
   db6de:	2200      	movs	r2, #0
   db6e0:	4b94      	ldr	r3, [pc, #592]	; (db934 <_strtod_r+0xbec>)
   db6e2:	f7fe fdef 	bl	da2c4 <__aeabi_dmul>
   db6e6:	4606      	mov	r6, r0
   db6e8:	460f      	mov	r7, r1
   db6ea:	e001      	b.n	db6f0 <_strtod_r+0x9a8>
   db6ec:	4f91      	ldr	r7, [pc, #580]	; (db934 <_strtod_r+0xbec>)
   db6ee:	2600      	movs	r6, #0
   db6f0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db6f4:	9614      	str	r6, [sp, #80]	; 0x50
   db6f6:	9315      	str	r3, [sp, #84]	; 0x54
   db6f8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   db6fc:	e012      	b.n	db724 <_strtod_r+0x9dc>
   db6fe:	4b8d      	ldr	r3, [pc, #564]	; (db934 <_strtod_r+0xbec>)
   db700:	4630      	mov	r0, r6
   db702:	4639      	mov	r1, r7
   db704:	2200      	movs	r2, #0
   db706:	f7fe fddd 	bl	da2c4 <__aeabi_dmul>
   db70a:	9b07      	ldr	r3, [sp, #28]
   db70c:	4606      	mov	r6, r0
   db70e:	460f      	mov	r7, r1
   db710:	b923      	cbnz	r3, db71c <_strtod_r+0x9d4>
   db712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db716:	900e      	str	r0, [sp, #56]	; 0x38
   db718:	930f      	str	r3, [sp, #60]	; 0x3c
   db71a:	e001      	b.n	db720 <_strtod_r+0x9d8>
   db71c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   db720:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   db724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db728:	0d1b      	lsrs	r3, r3, #20
   db72a:	051b      	lsls	r3, r3, #20
   db72c:	9306      	str	r3, [sp, #24]
   db72e:	9a06      	ldr	r2, [sp, #24]
   db730:	4b81      	ldr	r3, [pc, #516]	; (db938 <_strtod_r+0xbf0>)
   db732:	429a      	cmp	r2, r3
   db734:	d12b      	bne.n	db78e <_strtod_r+0xa46>
   db736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db73a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db73e:	ec4b ab10 	vmov	d0, sl, fp
   db742:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   db746:	f001 fb13 	bl	dcd70 <__ulp>
   db74a:	4640      	mov	r0, r8
   db74c:	ec53 2b10 	vmov	r2, r3, d0
   db750:	4649      	mov	r1, r9
   db752:	f7fe fdb7 	bl	da2c4 <__aeabi_dmul>
   db756:	4652      	mov	r2, sl
   db758:	465b      	mov	r3, fp
   db75a:	f7fe fc01 	bl	d9f60 <__adddf3>
   db75e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db762:	0d1b      	lsrs	r3, r3, #20
   db764:	4a75      	ldr	r2, [pc, #468]	; (db93c <_strtod_r+0xbf4>)
   db766:	051b      	lsls	r3, r3, #20
   db768:	4293      	cmp	r3, r2
   db76a:	4682      	mov	sl, r0
   db76c:	d90c      	bls.n	db788 <_strtod_r+0xa40>
   db76e:	4b74      	ldr	r3, [pc, #464]	; (db940 <_strtod_r+0xbf8>)
   db770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db772:	429a      	cmp	r2, r3
   db774:	d103      	bne.n	db77e <_strtod_r+0xa36>
   db776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db778:	3301      	adds	r3, #1
   db77a:	f43f ad2c 	beq.w	db1d6 <_strtod_r+0x48e>
   db77e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; db940 <_strtod_r+0xbf8>
   db782:	f04f 3aff 	mov.w	sl, #4294967295
   db786:	e072      	b.n	db86e <_strtod_r+0xb26>
   db788:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   db78c:	e038      	b.n	db800 <_strtod_r+0xab8>
   db78e:	9b03      	ldr	r3, [sp, #12]
   db790:	b333      	cbz	r3, db7e0 <_strtod_r+0xa98>
   db792:	9b06      	ldr	r3, [sp, #24]
   db794:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db798:	d822      	bhi.n	db7e0 <_strtod_r+0xa98>
   db79a:	a35d      	add	r3, pc, #372	; (adr r3, db910 <_strtod_r+0xbc8>)
   db79c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db7a0:	4630      	mov	r0, r6
   db7a2:	4639      	mov	r1, r7
   db7a4:	f7ff f80a 	bl	da7bc <__aeabi_dcmple>
   db7a8:	b1a8      	cbz	r0, db7d6 <_strtod_r+0xa8e>
   db7aa:	4639      	mov	r1, r7
   db7ac:	4630      	mov	r0, r6
   db7ae:	f7ff f84b 	bl	da848 <__aeabi_d2uiz>
   db7b2:	2800      	cmp	r0, #0
   db7b4:	bf08      	it	eq
   db7b6:	2001      	moveq	r0, #1
   db7b8:	f7fe fd0e 	bl	da1d8 <__aeabi_ui2d>
   db7bc:	9b07      	ldr	r3, [sp, #28]
   db7be:	4606      	mov	r6, r0
   db7c0:	460f      	mov	r7, r1
   db7c2:	b923      	cbnz	r3, db7ce <_strtod_r+0xa86>
   db7c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db7c8:	9010      	str	r0, [sp, #64]	; 0x40
   db7ca:	9311      	str	r3, [sp, #68]	; 0x44
   db7cc:	e001      	b.n	db7d2 <_strtod_r+0xa8a>
   db7ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   db7d2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   db7d6:	9a06      	ldr	r2, [sp, #24]
   db7d8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   db7dc:	ebc2 0903 	rsb	r9, r2, r3
   db7e0:	ed9d 0b08 	vldr	d0, [sp, #32]
   db7e4:	f001 fac4 	bl	dcd70 <__ulp>
   db7e8:	4640      	mov	r0, r8
   db7ea:	ec53 2b10 	vmov	r2, r3, d0
   db7ee:	4649      	mov	r1, r9
   db7f0:	f7fe fd68 	bl	da2c4 <__aeabi_dmul>
   db7f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db7f8:	f7fe fbb2 	bl	d9f60 <__adddf3>
   db7fc:	4682      	mov	sl, r0
   db7fe:	468b      	mov	fp, r1
   db800:	9b03      	ldr	r3, [sp, #12]
   db802:	bba3      	cbnz	r3, db86e <_strtod_r+0xb26>
   db804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db808:	0d1b      	lsrs	r3, r3, #20
   db80a:	9a06      	ldr	r2, [sp, #24]
   db80c:	051b      	lsls	r3, r3, #20
   db80e:	429a      	cmp	r2, r3
   db810:	46d8      	mov	r8, fp
   db812:	d12c      	bne.n	db86e <_strtod_r+0xb26>
   db814:	4639      	mov	r1, r7
   db816:	4630      	mov	r0, r6
   db818:	f7fe ffee 	bl	da7f8 <__aeabi_d2iz>
   db81c:	f7fe fcec 	bl	da1f8 <__aeabi_i2d>
   db820:	460b      	mov	r3, r1
   db822:	4602      	mov	r2, r0
   db824:	4639      	mov	r1, r7
   db826:	4630      	mov	r0, r6
   db828:	f7fe fb98 	bl	d9f5c <__aeabi_dsub>
   db82c:	9b07      	ldr	r3, [sp, #28]
   db82e:	4606      	mov	r6, r0
   db830:	460f      	mov	r7, r1
   db832:	b92b      	cbnz	r3, db840 <_strtod_r+0xaf8>
   db834:	f1ba 0f00 	cmp.w	sl, #0
   db838:	d102      	bne.n	db840 <_strtod_r+0xaf8>
   db83a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db83e:	b183      	cbz	r3, db862 <_strtod_r+0xb1a>
   db840:	a335      	add	r3, pc, #212	; (adr r3, db918 <_strtod_r+0xbd0>)
   db842:	e9d3 2300 	ldrd	r2, r3, [r3]
   db846:	4630      	mov	r0, r6
   db848:	4639      	mov	r1, r7
   db84a:	f7fe ffad 	bl	da7a8 <__aeabi_dcmplt>
   db84e:	2800      	cmp	r0, #0
   db850:	d131      	bne.n	db8b6 <_strtod_r+0xb6e>
   db852:	a333      	add	r3, pc, #204	; (adr r3, db920 <_strtod_r+0xbd8>)
   db854:	e9d3 2300 	ldrd	r2, r3, [r3]
   db858:	4630      	mov	r0, r6
   db85a:	4639      	mov	r1, r7
   db85c:	f7fe ffc2 	bl	da7e4 <__aeabi_dcmpgt>
   db860:	e004      	b.n	db86c <_strtod_r+0xb24>
   db862:	a331      	add	r3, pc, #196	; (adr r3, db928 <_strtod_r+0xbe0>)
   db864:	e9d3 2300 	ldrd	r2, r3, [r3]
   db868:	f7fe ff9e 	bl	da7a8 <__aeabi_dcmplt>
   db86c:	bb18      	cbnz	r0, db8b6 <_strtod_r+0xb6e>
   db86e:	9918      	ldr	r1, [sp, #96]	; 0x60
   db870:	9802      	ldr	r0, [sp, #8]
   db872:	f000 ffec 	bl	dc84e <_Bfree>
   db876:	9904      	ldr	r1, [sp, #16]
   db878:	9802      	ldr	r0, [sp, #8]
   db87a:	f000 ffe8 	bl	dc84e <_Bfree>
   db87e:	4629      	mov	r1, r5
   db880:	9802      	ldr	r0, [sp, #8]
   db882:	f000 ffe4 	bl	dc84e <_Bfree>
   db886:	4621      	mov	r1, r4
   db888:	9802      	ldr	r0, [sp, #8]
   db88a:	f000 ffe0 	bl	dc84e <_Bfree>
   db88e:	e56d      	b.n	db36c <_strtod_r+0x624>
   db890:	9b03      	ldr	r3, [sp, #12]
   db892:	b183      	cbz	r3, db8b6 <_strtod_r+0xb6e>
   db894:	4b2b      	ldr	r3, [pc, #172]	; (db944 <_strtod_r+0xbfc>)
   db896:	930b      	str	r3, [sp, #44]	; 0x2c
   db898:	2300      	movs	r3, #0
   db89a:	930a      	str	r3, [sp, #40]	; 0x28
   db89c:	4650      	mov	r0, sl
   db89e:	4659      	mov	r1, fp
   db8a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db8a4:	f7fe fd0e 	bl	da2c4 <__aeabi_dmul>
   db8a8:	4682      	mov	sl, r0
   db8aa:	468b      	mov	fp, r1
   db8ac:	b919      	cbnz	r1, db8b6 <_strtod_r+0xb6e>
   db8ae:	b910      	cbnz	r0, db8b6 <_strtod_r+0xb6e>
   db8b0:	9a02      	ldr	r2, [sp, #8]
   db8b2:	2322      	movs	r3, #34	; 0x22
   db8b4:	6013      	str	r3, [r2, #0]
   db8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   db8b8:	9802      	ldr	r0, [sp, #8]
   db8ba:	f000 ffc8 	bl	dc84e <_Bfree>
   db8be:	9904      	ldr	r1, [sp, #16]
   db8c0:	9802      	ldr	r0, [sp, #8]
   db8c2:	f000 ffc4 	bl	dc84e <_Bfree>
   db8c6:	4629      	mov	r1, r5
   db8c8:	9802      	ldr	r0, [sp, #8]
   db8ca:	f000 ffc0 	bl	dc84e <_Bfree>
   db8ce:	9905      	ldr	r1, [sp, #20]
   db8d0:	9802      	ldr	r0, [sp, #8]
   db8d2:	f000 ffbc 	bl	dc84e <_Bfree>
   db8d6:	4621      	mov	r1, r4
   db8d8:	9802      	ldr	r0, [sp, #8]
   db8da:	f000 ffb8 	bl	dc84e <_Bfree>
   db8de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db8e0:	b113      	cbz	r3, db8e8 <_strtod_r+0xba0>
   db8e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   db8e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db8e6:	6013      	str	r3, [r2, #0]
   db8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db8ea:	b11b      	cbz	r3, db8f4 <_strtod_r+0xbac>
   db8ec:	4652      	mov	r2, sl
   db8ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db8f2:	e007      	b.n	db904 <_strtod_r+0xbbc>
   db8f4:	4652      	mov	r2, sl
   db8f6:	465b      	mov	r3, fp
   db8f8:	e004      	b.n	db904 <_strtod_r+0xbbc>
   db8fa:	2500      	movs	r5, #0
   db8fc:	462a      	mov	r2, r5
   db8fe:	2101      	movs	r1, #1
   db900:	f7ff bb41 	b.w	daf86 <_strtod_r+0x23e>
   db904:	ec43 2b10 	vmov	d0, r2, r3
   db908:	b01d      	add	sp, #116	; 0x74
   db90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db90e:	bf00      	nop
   db910:	ffc00000 	.word	0xffc00000
   db914:	41dfffff 	.word	0x41dfffff
   db918:	94a03595 	.word	0x94a03595
   db91c:	3fdfffff 	.word	0x3fdfffff
   db920:	35afe535 	.word	0x35afe535
   db924:	3fe00000 	.word	0x3fe00000
   db928:	94a03595 	.word	0x94a03595
   db92c:	3fcfffff 	.word	0x3fcfffff
   db930:	3ff00000 	.word	0x3ff00000
   db934:	3fe00000 	.word	0x3fe00000
   db938:	7fe00000 	.word	0x7fe00000
   db93c:	7c9fffff 	.word	0x7c9fffff
   db940:	7fefffff 	.word	0x7fefffff
   db944:	39500000 	.word	0x39500000

000db948 <strtod>:
   db948:	4b02      	ldr	r3, [pc, #8]	; (db954 <strtod+0xc>)
   db94a:	460a      	mov	r2, r1
   db94c:	4601      	mov	r1, r0
   db94e:	6818      	ldr	r0, [r3, #0]
   db950:	f7ff b9fa 	b.w	dad48 <_strtod_r>
   db954:	2003d5fc 	.word	0x2003d5fc

000db958 <_strtol_r>:
   db958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db95c:	4680      	mov	r8, r0
   db95e:	4840      	ldr	r0, [pc, #256]	; (dba60 <_strtol_r+0x108>)
   db960:	f8d0 9000 	ldr.w	r9, [r0]
   db964:	460f      	mov	r7, r1
   db966:	463d      	mov	r5, r7
   db968:	f815 4b01 	ldrb.w	r4, [r5], #1
   db96c:	eb09 0004 	add.w	r0, r9, r4
   db970:	7840      	ldrb	r0, [r0, #1]
   db972:	f000 0008 	and.w	r0, r0, #8
   db976:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db97a:	b108      	cbz	r0, db980 <_strtol_r+0x28>
   db97c:	462f      	mov	r7, r5
   db97e:	e7f2      	b.n	db966 <_strtol_r+0xe>
   db980:	2c2d      	cmp	r4, #45	; 0x2d
   db982:	d103      	bne.n	db98c <_strtol_r+0x34>
   db984:	1cbd      	adds	r5, r7, #2
   db986:	787c      	ldrb	r4, [r7, #1]
   db988:	2601      	movs	r6, #1
   db98a:	e003      	b.n	db994 <_strtol_r+0x3c>
   db98c:	2c2b      	cmp	r4, #43	; 0x2b
   db98e:	bf04      	itt	eq
   db990:	787c      	ldrbeq	r4, [r7, #1]
   db992:	1cbd      	addeq	r5, r7, #2
   db994:	b113      	cbz	r3, db99c <_strtol_r+0x44>
   db996:	2b10      	cmp	r3, #16
   db998:	d10a      	bne.n	db9b0 <_strtol_r+0x58>
   db99a:	e05b      	b.n	dba54 <_strtol_r+0xfc>
   db99c:	2c30      	cmp	r4, #48	; 0x30
   db99e:	d157      	bne.n	dba50 <_strtol_r+0xf8>
   db9a0:	7828      	ldrb	r0, [r5, #0]
   db9a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db9a6:	2858      	cmp	r0, #88	; 0x58
   db9a8:	d14d      	bne.n	dba46 <_strtol_r+0xee>
   db9aa:	786c      	ldrb	r4, [r5, #1]
   db9ac:	2310      	movs	r3, #16
   db9ae:	3502      	adds	r5, #2
   db9b0:	2e00      	cmp	r6, #0
   db9b2:	bf14      	ite	ne
   db9b4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db9b8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db9bc:	2700      	movs	r7, #0
   db9be:	fbbc faf3 	udiv	sl, ip, r3
   db9c2:	4638      	mov	r0, r7
   db9c4:	fb03 cc1a 	mls	ip, r3, sl, ip
   db9c8:	eb09 0e04 	add.w	lr, r9, r4
   db9cc:	f89e e001 	ldrb.w	lr, [lr, #1]
   db9d0:	f01e 0f04 	tst.w	lr, #4
   db9d4:	d001      	beq.n	db9da <_strtol_r+0x82>
   db9d6:	3c30      	subs	r4, #48	; 0x30
   db9d8:	e00b      	b.n	db9f2 <_strtol_r+0x9a>
   db9da:	f01e 0e03 	ands.w	lr, lr, #3
   db9de:	d01b      	beq.n	dba18 <_strtol_r+0xc0>
   db9e0:	f1be 0f01 	cmp.w	lr, #1
   db9e4:	bf0c      	ite	eq
   db9e6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db9ea:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db9ee:	ebce 0404 	rsb	r4, lr, r4
   db9f2:	42a3      	cmp	r3, r4
   db9f4:	dd10      	ble.n	dba18 <_strtol_r+0xc0>
   db9f6:	f1b7 3fff 	cmp.w	r7, #4294967295
   db9fa:	d00a      	beq.n	dba12 <_strtol_r+0xba>
   db9fc:	4550      	cmp	r0, sl
   db9fe:	d806      	bhi.n	dba0e <_strtol_r+0xb6>
   dba00:	d101      	bne.n	dba06 <_strtol_r+0xae>
   dba02:	4564      	cmp	r4, ip
   dba04:	dc03      	bgt.n	dba0e <_strtol_r+0xb6>
   dba06:	fb03 4000 	mla	r0, r3, r0, r4
   dba0a:	2701      	movs	r7, #1
   dba0c:	e001      	b.n	dba12 <_strtol_r+0xba>
   dba0e:	f04f 37ff 	mov.w	r7, #4294967295
   dba12:	f815 4b01 	ldrb.w	r4, [r5], #1
   dba16:	e7d7      	b.n	db9c8 <_strtol_r+0x70>
   dba18:	1c7b      	adds	r3, r7, #1
   dba1a:	d10c      	bne.n	dba36 <_strtol_r+0xde>
   dba1c:	2e00      	cmp	r6, #0
   dba1e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dba22:	bf14      	ite	ne
   dba24:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dba28:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dba2c:	f8c8 3000 	str.w	r3, [r8]
   dba30:	b92a      	cbnz	r2, dba3e <_strtol_r+0xe6>
   dba32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dba36:	b106      	cbz	r6, dba3a <_strtol_r+0xe2>
   dba38:	4240      	negs	r0, r0
   dba3a:	b172      	cbz	r2, dba5a <_strtol_r+0x102>
   dba3c:	b107      	cbz	r7, dba40 <_strtol_r+0xe8>
   dba3e:	1e69      	subs	r1, r5, #1
   dba40:	6011      	str	r1, [r2, #0]
   dba42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dba46:	2430      	movs	r4, #48	; 0x30
   dba48:	2b00      	cmp	r3, #0
   dba4a:	d1b1      	bne.n	db9b0 <_strtol_r+0x58>
   dba4c:	2308      	movs	r3, #8
   dba4e:	e7af      	b.n	db9b0 <_strtol_r+0x58>
   dba50:	230a      	movs	r3, #10
   dba52:	e7ad      	b.n	db9b0 <_strtol_r+0x58>
   dba54:	2c30      	cmp	r4, #48	; 0x30
   dba56:	d0a3      	beq.n	db9a0 <_strtol_r+0x48>
   dba58:	e7aa      	b.n	db9b0 <_strtol_r+0x58>
   dba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dba5e:	bf00      	nop
   dba60:	2003d598 	.word	0x2003d598

000dba64 <strtol>:
   dba64:	4613      	mov	r3, r2
   dba66:	460a      	mov	r2, r1
   dba68:	4601      	mov	r1, r0
   dba6a:	4802      	ldr	r0, [pc, #8]	; (dba74 <strtol+0x10>)
   dba6c:	6800      	ldr	r0, [r0, #0]
   dba6e:	f7ff bf73 	b.w	db958 <_strtol_r>
   dba72:	bf00      	nop
   dba74:	2003d5fc 	.word	0x2003d5fc

000dba78 <_strtoul_r>:
   dba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dba7c:	4680      	mov	r8, r0
   dba7e:	483c      	ldr	r0, [pc, #240]	; (dbb70 <_strtoul_r+0xf8>)
   dba80:	f8d0 9000 	ldr.w	r9, [r0]
   dba84:	460e      	mov	r6, r1
   dba86:	4635      	mov	r5, r6
   dba88:	f815 4b01 	ldrb.w	r4, [r5], #1
   dba8c:	eb09 0004 	add.w	r0, r9, r4
   dba90:	7840      	ldrb	r0, [r0, #1]
   dba92:	f000 0008 	and.w	r0, r0, #8
   dba96:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dba9a:	b108      	cbz	r0, dbaa0 <_strtoul_r+0x28>
   dba9c:	462e      	mov	r6, r5
   dba9e:	e7f2      	b.n	dba86 <_strtoul_r+0xe>
   dbaa0:	2c2d      	cmp	r4, #45	; 0x2d
   dbaa2:	d103      	bne.n	dbaac <_strtoul_r+0x34>
   dbaa4:	1cb5      	adds	r5, r6, #2
   dbaa6:	7874      	ldrb	r4, [r6, #1]
   dbaa8:	2701      	movs	r7, #1
   dbaaa:	e003      	b.n	dbab4 <_strtoul_r+0x3c>
   dbaac:	2c2b      	cmp	r4, #43	; 0x2b
   dbaae:	bf04      	itt	eq
   dbab0:	7874      	ldrbeq	r4, [r6, #1]
   dbab2:	1cb5      	addeq	r5, r6, #2
   dbab4:	b113      	cbz	r3, dbabc <_strtoul_r+0x44>
   dbab6:	2b10      	cmp	r3, #16
   dbab8:	d10a      	bne.n	dbad0 <_strtoul_r+0x58>
   dbaba:	e053      	b.n	dbb64 <_strtoul_r+0xec>
   dbabc:	2c30      	cmp	r4, #48	; 0x30
   dbabe:	d14f      	bne.n	dbb60 <_strtoul_r+0xe8>
   dbac0:	7828      	ldrb	r0, [r5, #0]
   dbac2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbac6:	2858      	cmp	r0, #88	; 0x58
   dbac8:	d145      	bne.n	dbb56 <_strtoul_r+0xde>
   dbaca:	786c      	ldrb	r4, [r5, #1]
   dbacc:	2310      	movs	r3, #16
   dbace:	3502      	adds	r5, #2
   dbad0:	f04f 3cff 	mov.w	ip, #4294967295
   dbad4:	2600      	movs	r6, #0
   dbad6:	fbbc fcf3 	udiv	ip, ip, r3
   dbada:	fb03 fa0c 	mul.w	sl, r3, ip
   dbade:	ea6f 0a0a 	mvn.w	sl, sl
   dbae2:	4630      	mov	r0, r6
   dbae4:	eb09 0e04 	add.w	lr, r9, r4
   dbae8:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbaec:	f01e 0f04 	tst.w	lr, #4
   dbaf0:	d001      	beq.n	dbaf6 <_strtoul_r+0x7e>
   dbaf2:	3c30      	subs	r4, #48	; 0x30
   dbaf4:	e00b      	b.n	dbb0e <_strtoul_r+0x96>
   dbaf6:	f01e 0e03 	ands.w	lr, lr, #3
   dbafa:	d01a      	beq.n	dbb32 <_strtoul_r+0xba>
   dbafc:	f1be 0f01 	cmp.w	lr, #1
   dbb00:	bf0c      	ite	eq
   dbb02:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbb06:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbb0a:	ebce 0404 	rsb	r4, lr, r4
   dbb0e:	42a3      	cmp	r3, r4
   dbb10:	dd0f      	ble.n	dbb32 <_strtoul_r+0xba>
   dbb12:	2e00      	cmp	r6, #0
   dbb14:	db08      	blt.n	dbb28 <_strtoul_r+0xb0>
   dbb16:	4560      	cmp	r0, ip
   dbb18:	d806      	bhi.n	dbb28 <_strtoul_r+0xb0>
   dbb1a:	d101      	bne.n	dbb20 <_strtoul_r+0xa8>
   dbb1c:	4554      	cmp	r4, sl
   dbb1e:	dc03      	bgt.n	dbb28 <_strtoul_r+0xb0>
   dbb20:	fb03 4000 	mla	r0, r3, r0, r4
   dbb24:	2601      	movs	r6, #1
   dbb26:	e001      	b.n	dbb2c <_strtoul_r+0xb4>
   dbb28:	f04f 36ff 	mov.w	r6, #4294967295
   dbb2c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbb30:	e7d8      	b.n	dbae4 <_strtoul_r+0x6c>
   dbb32:	2e00      	cmp	r6, #0
   dbb34:	da07      	bge.n	dbb46 <_strtoul_r+0xce>
   dbb36:	2322      	movs	r3, #34	; 0x22
   dbb38:	f8c8 3000 	str.w	r3, [r8]
   dbb3c:	f04f 30ff 	mov.w	r0, #4294967295
   dbb40:	b92a      	cbnz	r2, dbb4e <_strtoul_r+0xd6>
   dbb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb46:	b107      	cbz	r7, dbb4a <_strtoul_r+0xd2>
   dbb48:	4240      	negs	r0, r0
   dbb4a:	b172      	cbz	r2, dbb6a <_strtoul_r+0xf2>
   dbb4c:	b106      	cbz	r6, dbb50 <_strtoul_r+0xd8>
   dbb4e:	1e69      	subs	r1, r5, #1
   dbb50:	6011      	str	r1, [r2, #0]
   dbb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb56:	2430      	movs	r4, #48	; 0x30
   dbb58:	2b00      	cmp	r3, #0
   dbb5a:	d1b9      	bne.n	dbad0 <_strtoul_r+0x58>
   dbb5c:	2308      	movs	r3, #8
   dbb5e:	e7b7      	b.n	dbad0 <_strtoul_r+0x58>
   dbb60:	230a      	movs	r3, #10
   dbb62:	e7b5      	b.n	dbad0 <_strtoul_r+0x58>
   dbb64:	2c30      	cmp	r4, #48	; 0x30
   dbb66:	d0ab      	beq.n	dbac0 <_strtoul_r+0x48>
   dbb68:	e7b2      	b.n	dbad0 <_strtoul_r+0x58>
   dbb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb6e:	bf00      	nop
   dbb70:	2003d598 	.word	0x2003d598

000dbb74 <strtoul>:
   dbb74:	4613      	mov	r3, r2
   dbb76:	460a      	mov	r2, r1
   dbb78:	4601      	mov	r1, r0
   dbb7a:	4802      	ldr	r0, [pc, #8]	; (dbb84 <strtoul+0x10>)
   dbb7c:	6800      	ldr	r0, [r0, #0]
   dbb7e:	f7ff bf7b 	b.w	dba78 <_strtoul_r>
   dbb82:	bf00      	nop
   dbb84:	2003d5fc 	.word	0x2003d5fc

000dbb88 <__tzcalc_limits>:
   dbb88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbb8c:	4604      	mov	r4, r0
   dbb8e:	f000 fd8d 	bl	dc6ac <__gettzinfo>
   dbb92:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbb96:	429c      	cmp	r4, r3
   dbb98:	f340 8096 	ble.w	dbcc8 <__tzcalc_limits+0x140>
   dbb9c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbba0:	18e3      	adds	r3, r4, r3
   dbba2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbba6:	109b      	asrs	r3, r3, #2
   dbba8:	f240 156d 	movw	r5, #365	; 0x16d
   dbbac:	fb05 3502 	mla	r5, r5, r2, r3
   dbbb0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbbb4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbbb8:	fb92 f3f3 	sdiv	r3, r2, r3
   dbbbc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbbc0:	442b      	add	r3, r5
   dbbc2:	18a5      	adds	r5, r4, r2
   dbbc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbbc8:	fb95 f5f2 	sdiv	r5, r5, r2
   dbbcc:	441d      	add	r5, r3
   dbbce:	2364      	movs	r3, #100	; 0x64
   dbbd0:	fb94 f7f2 	sdiv	r7, r4, r2
   dbbd4:	fb94 f6f3 	sdiv	r6, r4, r3
   dbbd8:	fb02 4717 	mls	r7, r2, r7, r4
   dbbdc:	fb03 4616 	mls	r6, r3, r6, r4
   dbbe0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbbe4:	fab7 fe87 	clz	lr, r7
   dbbe8:	9301      	str	r3, [sp, #4]
   dbbea:	f004 0303 	and.w	r3, r4, #3
   dbbee:	6044      	str	r4, [r0, #4]
   dbbf0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbbf4:	4601      	mov	r1, r0
   dbbf6:	9300      	str	r3, [sp, #0]
   dbbf8:	f04f 0c07 	mov.w	ip, #7
   dbbfc:	7a0b      	ldrb	r3, [r1, #8]
   dbbfe:	2b4a      	cmp	r3, #74	; 0x4a
   dbc00:	d10e      	bne.n	dbc20 <__tzcalc_limits+0x98>
   dbc02:	694b      	ldr	r3, [r1, #20]
   dbc04:	9a00      	ldr	r2, [sp, #0]
   dbc06:	18ec      	adds	r4, r5, r3
   dbc08:	b902      	cbnz	r2, dbc0c <__tzcalc_limits+0x84>
   dbc0a:	b906      	cbnz	r6, dbc0e <__tzcalc_limits+0x86>
   dbc0c:	b927      	cbnz	r7, dbc18 <__tzcalc_limits+0x90>
   dbc0e:	2b3b      	cmp	r3, #59	; 0x3b
   dbc10:	bfd4      	ite	le
   dbc12:	2300      	movle	r3, #0
   dbc14:	2301      	movgt	r3, #1
   dbc16:	e000      	b.n	dbc1a <__tzcalc_limits+0x92>
   dbc18:	2300      	movs	r3, #0
   dbc1a:	4423      	add	r3, r4
   dbc1c:	3b01      	subs	r3, #1
   dbc1e:	e03f      	b.n	dbca0 <__tzcalc_limits+0x118>
   dbc20:	2b44      	cmp	r3, #68	; 0x44
   dbc22:	d102      	bne.n	dbc2a <__tzcalc_limits+0xa2>
   dbc24:	694b      	ldr	r3, [r1, #20]
   dbc26:	442b      	add	r3, r5
   dbc28:	e03a      	b.n	dbca0 <__tzcalc_limits+0x118>
   dbc2a:	9b00      	ldr	r3, [sp, #0]
   dbc2c:	b92b      	cbnz	r3, dbc3a <__tzcalc_limits+0xb2>
   dbc2e:	2e00      	cmp	r6, #0
   dbc30:	bf0c      	ite	eq
   dbc32:	46f0      	moveq	r8, lr
   dbc34:	f04f 0801 	movne.w	r8, #1
   dbc38:	e000      	b.n	dbc3c <__tzcalc_limits+0xb4>
   dbc3a:	46f0      	mov	r8, lr
   dbc3c:	4b24      	ldr	r3, [pc, #144]	; (dbcd0 <__tzcalc_limits+0x148>)
   dbc3e:	68cc      	ldr	r4, [r1, #12]
   dbc40:	2230      	movs	r2, #48	; 0x30
   dbc42:	fb02 3808 	mla	r8, r2, r8, r3
   dbc46:	f1a8 0a04 	sub.w	sl, r8, #4
   dbc4a:	46a9      	mov	r9, r5
   dbc4c:	2301      	movs	r3, #1
   dbc4e:	42a3      	cmp	r3, r4
   dbc50:	da04      	bge.n	dbc5c <__tzcalc_limits+0xd4>
   dbc52:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbc56:	3301      	adds	r3, #1
   dbc58:	44d9      	add	r9, fp
   dbc5a:	e7f8      	b.n	dbc4e <__tzcalc_limits+0xc6>
   dbc5c:	f109 0304 	add.w	r3, r9, #4
   dbc60:	fb93 fbfc 	sdiv	fp, r3, ip
   dbc64:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbc68:	2c01      	cmp	r4, #1
   dbc6a:	ebca 0a03 	rsb	sl, sl, r3
   dbc6e:	694b      	ldr	r3, [r1, #20]
   dbc70:	bfb8      	it	lt
   dbc72:	2401      	movlt	r4, #1
   dbc74:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbc78:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbc7c:	690b      	ldr	r3, [r1, #16]
   dbc7e:	f104 34ff 	add.w	r4, r4, #4294967295
   dbc82:	f103 33ff 	add.w	r3, r3, #4294967295
   dbc86:	bf48      	it	mi
   dbc88:	f10a 0a07 	addmi.w	sl, sl, #7
   dbc8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbc90:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbc94:	4453      	add	r3, sl
   dbc96:	42a3      	cmp	r3, r4
   dbc98:	db01      	blt.n	dbc9e <__tzcalc_limits+0x116>
   dbc9a:	3b07      	subs	r3, #7
   dbc9c:	e7fb      	b.n	dbc96 <__tzcalc_limits+0x10e>
   dbc9e:	444b      	add	r3, r9
   dbca0:	698c      	ldr	r4, [r1, #24]
   dbca2:	4a0c      	ldr	r2, [pc, #48]	; (dbcd4 <__tzcalc_limits+0x14c>)
   dbca4:	fb02 4303 	mla	r3, r2, r3, r4
   dbca8:	6a0c      	ldr	r4, [r1, #32]
   dbcaa:	4423      	add	r3, r4
   dbcac:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbcb0:	9b01      	ldr	r3, [sp, #4]
   dbcb2:	4299      	cmp	r1, r3
   dbcb4:	d1a2      	bne.n	dbbfc <__tzcalc_limits+0x74>
   dbcb6:	69c3      	ldr	r3, [r0, #28]
   dbcb8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbcba:	4293      	cmp	r3, r2
   dbcbc:	bfac      	ite	ge
   dbcbe:	2300      	movge	r3, #0
   dbcc0:	2301      	movlt	r3, #1
   dbcc2:	6003      	str	r3, [r0, #0]
   dbcc4:	2001      	movs	r0, #1
   dbcc6:	e000      	b.n	dbcca <__tzcalc_limits+0x142>
   dbcc8:	2000      	movs	r0, #0
   dbcca:	b003      	add	sp, #12
   dbccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbcd0:	000ddba8 	.word	0x000ddba8
   dbcd4:	00015180 	.word	0x00015180

000dbcd8 <__tz_lock>:
   dbcd8:	4770      	bx	lr

000dbcda <__tz_unlock>:
   dbcda:	4770      	bx	lr

000dbcdc <_tzset_unlocked>:
   dbcdc:	4b01      	ldr	r3, [pc, #4]	; (dbce4 <_tzset_unlocked+0x8>)
   dbcde:	6818      	ldr	r0, [r3, #0]
   dbce0:	f000 b802 	b.w	dbce8 <_tzset_unlocked_r>
   dbce4:	2003d5fc 	.word	0x2003d5fc

000dbce8 <_tzset_unlocked_r>:
   dbce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbcec:	b08d      	sub	sp, #52	; 0x34
   dbcee:	4607      	mov	r7, r0
   dbcf0:	f000 fcdc 	bl	dc6ac <__gettzinfo>
   dbcf4:	49b0      	ldr	r1, [pc, #704]	; (dbfb8 <_tzset_unlocked_r+0x2d0>)
   dbcf6:	4eb1      	ldr	r6, [pc, #708]	; (dbfbc <_tzset_unlocked_r+0x2d4>)
   dbcf8:	4604      	mov	r4, r0
   dbcfa:	4638      	mov	r0, r7
   dbcfc:	f000 fcce 	bl	dc69c <_getenv_r>
   dbd00:	4605      	mov	r5, r0
   dbd02:	b960      	cbnz	r0, dbd1e <_tzset_unlocked_r+0x36>
   dbd04:	4bae      	ldr	r3, [pc, #696]	; (dbfc0 <_tzset_unlocked_r+0x2d8>)
   dbd06:	4aaf      	ldr	r2, [pc, #700]	; (dbfc4 <_tzset_unlocked_r+0x2dc>)
   dbd08:	6018      	str	r0, [r3, #0]
   dbd0a:	4baf      	ldr	r3, [pc, #700]	; (dbfc8 <_tzset_unlocked_r+0x2e0>)
   dbd0c:	6018      	str	r0, [r3, #0]
   dbd0e:	4baf      	ldr	r3, [pc, #700]	; (dbfcc <_tzset_unlocked_r+0x2e4>)
   dbd10:	6830      	ldr	r0, [r6, #0]
   dbd12:	601a      	str	r2, [r3, #0]
   dbd14:	605a      	str	r2, [r3, #4]
   dbd16:	f7fb f8f1 	bl	d6efc <free>
   dbd1a:	6035      	str	r5, [r6, #0]
   dbd1c:	e148      	b.n	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbd1e:	6831      	ldr	r1, [r6, #0]
   dbd20:	b979      	cbnz	r1, dbd42 <_tzset_unlocked_r+0x5a>
   dbd22:	6830      	ldr	r0, [r6, #0]
   dbd24:	f7fb f8ea 	bl	d6efc <free>
   dbd28:	4628      	mov	r0, r5
   dbd2a:	f7fe ffb2 	bl	dac92 <strlen>
   dbd2e:	1c41      	adds	r1, r0, #1
   dbd30:	4638      	mov	r0, r7
   dbd32:	f7fb f923 	bl	d6f7c <_malloc_r>
   dbd36:	6030      	str	r0, [r6, #0]
   dbd38:	b148      	cbz	r0, dbd4e <_tzset_unlocked_r+0x66>
   dbd3a:	4629      	mov	r1, r5
   dbd3c:	f7fe ff85 	bl	dac4a <strcpy>
   dbd40:	e005      	b.n	dbd4e <_tzset_unlocked_r+0x66>
   dbd42:	f7fe ff78 	bl	dac36 <strcmp>
   dbd46:	2800      	cmp	r0, #0
   dbd48:	f000 8132 	beq.w	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbd4c:	e7e9      	b.n	dbd22 <_tzset_unlocked_r+0x3a>
   dbd4e:	782b      	ldrb	r3, [r5, #0]
   dbd50:	4a9f      	ldr	r2, [pc, #636]	; (dbfd0 <_tzset_unlocked_r+0x2e8>)
   dbd52:	49a0      	ldr	r1, [pc, #640]	; (dbfd4 <_tzset_unlocked_r+0x2ec>)
   dbd54:	2b3a      	cmp	r3, #58	; 0x3a
   dbd56:	bf08      	it	eq
   dbd58:	3501      	addeq	r5, #1
   dbd5a:	ae0a      	add	r6, sp, #40	; 0x28
   dbd5c:	4633      	mov	r3, r6
   dbd5e:	4628      	mov	r0, r5
   dbd60:	f7fb f8ec 	bl	d6f3c <siscanf>
   dbd64:	2800      	cmp	r0, #0
   dbd66:	f340 8123 	ble.w	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd6c:	18ef      	adds	r7, r5, r3
   dbd6e:	5ceb      	ldrb	r3, [r5, r3]
   dbd70:	2b2d      	cmp	r3, #45	; 0x2d
   dbd72:	d103      	bne.n	dbd7c <_tzset_unlocked_r+0x94>
   dbd74:	3701      	adds	r7, #1
   dbd76:	f04f 35ff 	mov.w	r5, #4294967295
   dbd7a:	e003      	b.n	dbd84 <_tzset_unlocked_r+0x9c>
   dbd7c:	2b2b      	cmp	r3, #43	; 0x2b
   dbd7e:	bf08      	it	eq
   dbd80:	3701      	addeq	r7, #1
   dbd82:	2501      	movs	r5, #1
   dbd84:	f10d 0a20 	add.w	sl, sp, #32
   dbd88:	f10d 0b1e 	add.w	fp, sp, #30
   dbd8c:	f04f 0800 	mov.w	r8, #0
   dbd90:	9603      	str	r6, [sp, #12]
   dbd92:	f8cd a008 	str.w	sl, [sp, #8]
   dbd96:	9601      	str	r6, [sp, #4]
   dbd98:	f8cd b000 	str.w	fp, [sp]
   dbd9c:	4633      	mov	r3, r6
   dbd9e:	aa07      	add	r2, sp, #28
   dbda0:	498d      	ldr	r1, [pc, #564]	; (dbfd8 <_tzset_unlocked_r+0x2f0>)
   dbda2:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbda6:	4638      	mov	r0, r7
   dbda8:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbdac:	f7fb f8c6 	bl	d6f3c <siscanf>
   dbdb0:	4540      	cmp	r0, r8
   dbdb2:	f340 80fd 	ble.w	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbdb6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbdba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbdbe:	f8df 9224 	ldr.w	r9, [pc, #548]	; dbfe4 <_tzset_unlocked_r+0x2fc>
   dbdc2:	213c      	movs	r1, #60	; 0x3c
   dbdc4:	fb01 3302 	mla	r3, r1, r2, r3
   dbdc8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbdcc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbdd0:	fb01 3302 	mla	r3, r1, r2, r3
   dbdd4:	435d      	muls	r5, r3
   dbdd6:	6225      	str	r5, [r4, #32]
   dbdd8:	4d7c      	ldr	r5, [pc, #496]	; (dbfcc <_tzset_unlocked_r+0x2e4>)
   dbdda:	4b7d      	ldr	r3, [pc, #500]	; (dbfd0 <_tzset_unlocked_r+0x2e8>)
   dbddc:	602b      	str	r3, [r5, #0]
   dbdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbde0:	497c      	ldr	r1, [pc, #496]	; (dbfd4 <_tzset_unlocked_r+0x2ec>)
   dbde2:	441f      	add	r7, r3
   dbde4:	464a      	mov	r2, r9
   dbde6:	4633      	mov	r3, r6
   dbde8:	4638      	mov	r0, r7
   dbdea:	f7fb f8a7 	bl	d6f3c <siscanf>
   dbdee:	4540      	cmp	r0, r8
   dbdf0:	dc08      	bgt.n	dbe04 <_tzset_unlocked_r+0x11c>
   dbdf2:	682b      	ldr	r3, [r5, #0]
   dbdf4:	606b      	str	r3, [r5, #4]
   dbdf6:	4b72      	ldr	r3, [pc, #456]	; (dbfc0 <_tzset_unlocked_r+0x2d8>)
   dbdf8:	6a22      	ldr	r2, [r4, #32]
   dbdfa:	601a      	str	r2, [r3, #0]
   dbdfc:	4b72      	ldr	r3, [pc, #456]	; (dbfc8 <_tzset_unlocked_r+0x2e0>)
   dbdfe:	f8c3 8000 	str.w	r8, [r3]
   dbe02:	e0d5      	b.n	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbe04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe06:	f8c5 9004 	str.w	r9, [r5, #4]
   dbe0a:	18fd      	adds	r5, r7, r3
   dbe0c:	5cfb      	ldrb	r3, [r7, r3]
   dbe0e:	2b2d      	cmp	r3, #45	; 0x2d
   dbe10:	d103      	bne.n	dbe1a <_tzset_unlocked_r+0x132>
   dbe12:	3501      	adds	r5, #1
   dbe14:	f04f 37ff 	mov.w	r7, #4294967295
   dbe18:	e003      	b.n	dbe22 <_tzset_unlocked_r+0x13a>
   dbe1a:	2b2b      	cmp	r3, #43	; 0x2b
   dbe1c:	bf08      	it	eq
   dbe1e:	3501      	addeq	r5, #1
   dbe20:	2701      	movs	r7, #1
   dbe22:	2300      	movs	r3, #0
   dbe24:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbe28:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbe2c:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbe30:	930a      	str	r3, [sp, #40]	; 0x28
   dbe32:	9603      	str	r6, [sp, #12]
   dbe34:	f8cd a008 	str.w	sl, [sp, #8]
   dbe38:	9601      	str	r6, [sp, #4]
   dbe3a:	f8cd b000 	str.w	fp, [sp]
   dbe3e:	4633      	mov	r3, r6
   dbe40:	aa07      	add	r2, sp, #28
   dbe42:	4965      	ldr	r1, [pc, #404]	; (dbfd8 <_tzset_unlocked_r+0x2f0>)
   dbe44:	4628      	mov	r0, r5
   dbe46:	f7fb f879 	bl	d6f3c <siscanf>
   dbe4a:	2800      	cmp	r0, #0
   dbe4c:	dc04      	bgt.n	dbe58 <_tzset_unlocked_r+0x170>
   dbe4e:	6a23      	ldr	r3, [r4, #32]
   dbe50:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dbe54:	63e3      	str	r3, [r4, #60]	; 0x3c
   dbe56:	e00e      	b.n	dbe76 <_tzset_unlocked_r+0x18e>
   dbe58:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbe5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbe60:	213c      	movs	r1, #60	; 0x3c
   dbe62:	fb01 3302 	mla	r3, r1, r2, r3
   dbe66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbe6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbe6e:	fb01 3302 	mla	r3, r1, r2, r3
   dbe72:	435f      	muls	r7, r3
   dbe74:	63e7      	str	r7, [r4, #60]	; 0x3c
   dbe76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe78:	4627      	mov	r7, r4
   dbe7a:	441d      	add	r5, r3
   dbe7c:	f04f 0900 	mov.w	r9, #0
   dbe80:	782b      	ldrb	r3, [r5, #0]
   dbe82:	2b2c      	cmp	r3, #44	; 0x2c
   dbe84:	bf08      	it	eq
   dbe86:	3501      	addeq	r5, #1
   dbe88:	f895 8000 	ldrb.w	r8, [r5]
   dbe8c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dbe90:	d126      	bne.n	dbee0 <_tzset_unlocked_r+0x1f8>
   dbe92:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dbe96:	9302      	str	r3, [sp, #8]
   dbe98:	ab09      	add	r3, sp, #36	; 0x24
   dbe9a:	9300      	str	r3, [sp, #0]
   dbe9c:	9603      	str	r6, [sp, #12]
   dbe9e:	9601      	str	r6, [sp, #4]
   dbea0:	4633      	mov	r3, r6
   dbea2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dbea6:	494d      	ldr	r1, [pc, #308]	; (dbfdc <_tzset_unlocked_r+0x2f4>)
   dbea8:	4628      	mov	r0, r5
   dbeaa:	f7fb f847 	bl	d6f3c <siscanf>
   dbeae:	2803      	cmp	r0, #3
   dbeb0:	d17e      	bne.n	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbeb2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dbeb6:	1e4b      	subs	r3, r1, #1
   dbeb8:	2b0b      	cmp	r3, #11
   dbeba:	d879      	bhi.n	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbebc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dbec0:	1e53      	subs	r3, r2, #1
   dbec2:	2b04      	cmp	r3, #4
   dbec4:	d874      	bhi.n	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbec6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dbeca:	2b06      	cmp	r3, #6
   dbecc:	d870      	bhi.n	dbfb0 <_tzset_unlocked_r+0x2c8>
   dbece:	f887 8008 	strb.w	r8, [r7, #8]
   dbed2:	60f9      	str	r1, [r7, #12]
   dbed4:	613a      	str	r2, [r7, #16]
   dbed6:	617b      	str	r3, [r7, #20]
   dbed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbeda:	eb05 0803 	add.w	r8, r5, r3
   dbede:	e02a      	b.n	dbf36 <_tzset_unlocked_r+0x24e>
   dbee0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dbee4:	bf06      	itte	eq
   dbee6:	3501      	addeq	r5, #1
   dbee8:	4643      	moveq	r3, r8
   dbeea:	2344      	movne	r3, #68	; 0x44
   dbeec:	220a      	movs	r2, #10
   dbeee:	a90b      	add	r1, sp, #44	; 0x2c
   dbef0:	4628      	mov	r0, r5
   dbef2:	9305      	str	r3, [sp, #20]
   dbef4:	f7ff fe3e 	bl	dbb74 <strtoul>
   dbef8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dbefc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dbf00:	4545      	cmp	r5, r8
   dbf02:	9b05      	ldr	r3, [sp, #20]
   dbf04:	d114      	bne.n	dbf30 <_tzset_unlocked_r+0x248>
   dbf06:	234d      	movs	r3, #77	; 0x4d
   dbf08:	f1b9 0f00 	cmp.w	r9, #0
   dbf0c:	d107      	bne.n	dbf1e <_tzset_unlocked_r+0x236>
   dbf0e:	7223      	strb	r3, [r4, #8]
   dbf10:	2303      	movs	r3, #3
   dbf12:	60e3      	str	r3, [r4, #12]
   dbf14:	2302      	movs	r3, #2
   dbf16:	6123      	str	r3, [r4, #16]
   dbf18:	f8c4 9014 	str.w	r9, [r4, #20]
   dbf1c:	e00b      	b.n	dbf36 <_tzset_unlocked_r+0x24e>
   dbf1e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dbf22:	230b      	movs	r3, #11
   dbf24:	62a3      	str	r3, [r4, #40]	; 0x28
   dbf26:	2301      	movs	r3, #1
   dbf28:	62e3      	str	r3, [r4, #44]	; 0x2c
   dbf2a:	2300      	movs	r3, #0
   dbf2c:	6323      	str	r3, [r4, #48]	; 0x30
   dbf2e:	e002      	b.n	dbf36 <_tzset_unlocked_r+0x24e>
   dbf30:	b280      	uxth	r0, r0
   dbf32:	723b      	strb	r3, [r7, #8]
   dbf34:	6178      	str	r0, [r7, #20]
   dbf36:	2302      	movs	r3, #2
   dbf38:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbf3c:	2300      	movs	r3, #0
   dbf3e:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbf42:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbf46:	930a      	str	r3, [sp, #40]	; 0x28
   dbf48:	f898 3000 	ldrb.w	r3, [r8]
   dbf4c:	2b2f      	cmp	r3, #47	; 0x2f
   dbf4e:	d10b      	bne.n	dbf68 <_tzset_unlocked_r+0x280>
   dbf50:	9603      	str	r6, [sp, #12]
   dbf52:	f8cd a008 	str.w	sl, [sp, #8]
   dbf56:	9601      	str	r6, [sp, #4]
   dbf58:	f8cd b000 	str.w	fp, [sp]
   dbf5c:	4633      	mov	r3, r6
   dbf5e:	aa07      	add	r2, sp, #28
   dbf60:	491f      	ldr	r1, [pc, #124]	; (dbfe0 <_tzset_unlocked_r+0x2f8>)
   dbf62:	4640      	mov	r0, r8
   dbf64:	f7fa ffea 	bl	d6f3c <siscanf>
   dbf68:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbf6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbf70:	213c      	movs	r1, #60	; 0x3c
   dbf72:	fb01 3302 	mla	r3, r1, r2, r3
   dbf76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbf7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbf7e:	fb01 3302 	mla	r3, r1, r2, r3
   dbf82:	61bb      	str	r3, [r7, #24]
   dbf84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dbf86:	f109 0901 	add.w	r9, r9, #1
   dbf8a:	f1b9 0f02 	cmp.w	r9, #2
   dbf8e:	4445      	add	r5, r8
   dbf90:	f107 071c 	add.w	r7, r7, #28
   dbf94:	f47f af74 	bne.w	dbe80 <_tzset_unlocked_r+0x198>
   dbf98:	6860      	ldr	r0, [r4, #4]
   dbf9a:	f7ff fdf5 	bl	dbb88 <__tzcalc_limits>
   dbf9e:	4b08      	ldr	r3, [pc, #32]	; (dbfc0 <_tzset_unlocked_r+0x2d8>)
   dbfa0:	6a22      	ldr	r2, [r4, #32]
   dbfa2:	601a      	str	r2, [r3, #0]
   dbfa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dbfa6:	1a9b      	subs	r3, r3, r2
   dbfa8:	4a07      	ldr	r2, [pc, #28]	; (dbfc8 <_tzset_unlocked_r+0x2e0>)
   dbfaa:	bf18      	it	ne
   dbfac:	2301      	movne	r3, #1
   dbfae:	6013      	str	r3, [r2, #0]
   dbfb0:	b00d      	add	sp, #52	; 0x34
   dbfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbfb6:	bf00      	nop
   dbfb8:	000ddc68 	.word	0x000ddc68
   dbfbc:	2003e7e0 	.word	0x2003e7e0
   dbfc0:	2003e7e8 	.word	0x2003e7e8
   dbfc4:	000ddc6b 	.word	0x000ddc6b
   dbfc8:	2003e7e4 	.word	0x2003e7e4
   dbfcc:	2003d638 	.word	0x2003d638
   dbfd0:	2003e7d3 	.word	0x2003e7d3
   dbfd4:	000ddc6f 	.word	0x000ddc6f
   dbfd8:	000ddc92 	.word	0x000ddc92
   dbfdc:	000ddc7e 	.word	0x000ddc7e
   dbfe0:	000ddc91 	.word	0x000ddc91
   dbfe4:	2003e7c8 	.word	0x2003e7c8

000dbfe8 <rshift>:
   dbfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbfea:	6906      	ldr	r6, [r0, #16]
   dbfec:	114b      	asrs	r3, r1, #5
   dbfee:	42b3      	cmp	r3, r6
   dbff0:	f100 0514 	add.w	r5, r0, #20
   dbff4:	da27      	bge.n	dc046 <rshift+0x5e>
   dbff6:	f011 011f 	ands.w	r1, r1, #31
   dbffa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dbffe:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dc002:	d101      	bne.n	dc008 <rshift+0x20>
   dc004:	4629      	mov	r1, r5
   dc006:	e016      	b.n	dc036 <rshift+0x4e>
   dc008:	1d14      	adds	r4, r2, #4
   dc00a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dc00e:	f1c1 0e20 	rsb	lr, r1, #32
   dc012:	40ca      	lsrs	r2, r1
   dc014:	462b      	mov	r3, r5
   dc016:	42b4      	cmp	r4, r6
   dc018:	d209      	bcs.n	dc02e <rshift+0x46>
   dc01a:	6827      	ldr	r7, [r4, #0]
   dc01c:	fa07 f70e 	lsl.w	r7, r7, lr
   dc020:	433a      	orrs	r2, r7
   dc022:	f843 2b04 	str.w	r2, [r3], #4
   dc026:	f854 2b04 	ldr.w	r2, [r4], #4
   dc02a:	40ca      	lsrs	r2, r1
   dc02c:	e7f3      	b.n	dc016 <rshift+0x2e>
   dc02e:	601a      	str	r2, [r3, #0]
   dc030:	b152      	cbz	r2, dc048 <rshift+0x60>
   dc032:	3304      	adds	r3, #4
   dc034:	e008      	b.n	dc048 <rshift+0x60>
   dc036:	42b2      	cmp	r2, r6
   dc038:	460b      	mov	r3, r1
   dc03a:	d205      	bcs.n	dc048 <rshift+0x60>
   dc03c:	f852 3b04 	ldr.w	r3, [r2], #4
   dc040:	f841 3b04 	str.w	r3, [r1], #4
   dc044:	e7f7      	b.n	dc036 <rshift+0x4e>
   dc046:	462b      	mov	r3, r5
   dc048:	1b5b      	subs	r3, r3, r5
   dc04a:	109b      	asrs	r3, r3, #2
   dc04c:	6103      	str	r3, [r0, #16]
   dc04e:	b903      	cbnz	r3, dc052 <rshift+0x6a>
   dc050:	6143      	str	r3, [r0, #20]
   dc052:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc054 <__hexdig_fun>:
   dc054:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc058:	2b09      	cmp	r3, #9
   dc05a:	d801      	bhi.n	dc060 <__hexdig_fun+0xc>
   dc05c:	3820      	subs	r0, #32
   dc05e:	e00a      	b.n	dc076 <__hexdig_fun+0x22>
   dc060:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc064:	2b05      	cmp	r3, #5
   dc066:	d801      	bhi.n	dc06c <__hexdig_fun+0x18>
   dc068:	3847      	subs	r0, #71	; 0x47
   dc06a:	e004      	b.n	dc076 <__hexdig_fun+0x22>
   dc06c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc070:	2b05      	cmp	r3, #5
   dc072:	d802      	bhi.n	dc07a <__hexdig_fun+0x26>
   dc074:	3827      	subs	r0, #39	; 0x27
   dc076:	b2c0      	uxtb	r0, r0
   dc078:	4770      	bx	lr
   dc07a:	2000      	movs	r0, #0
   dc07c:	4770      	bx	lr

000dc07e <__gethex>:
   dc07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc082:	b08b      	sub	sp, #44	; 0x2c
   dc084:	468a      	mov	sl, r1
   dc086:	4690      	mov	r8, r2
   dc088:	9306      	str	r3, [sp, #24]
   dc08a:	9002      	str	r0, [sp, #8]
   dc08c:	f7fe fd5a 	bl	dab44 <_localeconv_r>
   dc090:	6803      	ldr	r3, [r0, #0]
   dc092:	9303      	str	r3, [sp, #12]
   dc094:	4618      	mov	r0, r3
   dc096:	f7fe fdfc 	bl	dac92 <strlen>
   dc09a:	9b03      	ldr	r3, [sp, #12]
   dc09c:	9001      	str	r0, [sp, #4]
   dc09e:	4403      	add	r3, r0
   dc0a0:	f04f 0b00 	mov.w	fp, #0
   dc0a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc0a8:	9307      	str	r3, [sp, #28]
   dc0aa:	f8da 3000 	ldr.w	r3, [sl]
   dc0ae:	3302      	adds	r3, #2
   dc0b0:	461f      	mov	r7, r3
   dc0b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc0b6:	2830      	cmp	r0, #48	; 0x30
   dc0b8:	d102      	bne.n	dc0c0 <__gethex+0x42>
   dc0ba:	f10b 0b01 	add.w	fp, fp, #1
   dc0be:	e7f7      	b.n	dc0b0 <__gethex+0x32>
   dc0c0:	f7ff ffc8 	bl	dc054 <__hexdig_fun>
   dc0c4:	4604      	mov	r4, r0
   dc0c6:	b9e0      	cbnz	r0, dc102 <__gethex+0x84>
   dc0c8:	9a01      	ldr	r2, [sp, #4]
   dc0ca:	9903      	ldr	r1, [sp, #12]
   dc0cc:	4638      	mov	r0, r7
   dc0ce:	f7fe fde8 	bl	daca2 <strncmp>
   dc0d2:	2800      	cmp	r0, #0
   dc0d4:	d134      	bne.n	dc140 <__gethex+0xc2>
   dc0d6:	9b01      	ldr	r3, [sp, #4]
   dc0d8:	5cf8      	ldrb	r0, [r7, r3]
   dc0da:	18fe      	adds	r6, r7, r3
   dc0dc:	f7ff ffba 	bl	dc054 <__hexdig_fun>
   dc0e0:	b380      	cbz	r0, dc144 <__gethex+0xc6>
   dc0e2:	4633      	mov	r3, r6
   dc0e4:	7818      	ldrb	r0, [r3, #0]
   dc0e6:	2830      	cmp	r0, #48	; 0x30
   dc0e8:	461f      	mov	r7, r3
   dc0ea:	f103 0301 	add.w	r3, r3, #1
   dc0ee:	d0f9      	beq.n	dc0e4 <__gethex+0x66>
   dc0f0:	f7ff ffb0 	bl	dc054 <__hexdig_fun>
   dc0f4:	fab0 f580 	clz	r5, r0
   dc0f8:	096d      	lsrs	r5, r5, #5
   dc0fa:	4634      	mov	r4, r6
   dc0fc:	f04f 0b01 	mov.w	fp, #1
   dc100:	e001      	b.n	dc106 <__gethex+0x88>
   dc102:	2500      	movs	r5, #0
   dc104:	462c      	mov	r4, r5
   dc106:	463a      	mov	r2, r7
   dc108:	4616      	mov	r6, r2
   dc10a:	3201      	adds	r2, #1
   dc10c:	7830      	ldrb	r0, [r6, #0]
   dc10e:	f7ff ffa1 	bl	dc054 <__hexdig_fun>
   dc112:	2800      	cmp	r0, #0
   dc114:	d1f8      	bne.n	dc108 <__gethex+0x8a>
   dc116:	9a01      	ldr	r2, [sp, #4]
   dc118:	9903      	ldr	r1, [sp, #12]
   dc11a:	4630      	mov	r0, r6
   dc11c:	f7fe fdc1 	bl	daca2 <strncmp>
   dc120:	b950      	cbnz	r0, dc138 <__gethex+0xba>
   dc122:	b954      	cbnz	r4, dc13a <__gethex+0xbc>
   dc124:	9b01      	ldr	r3, [sp, #4]
   dc126:	18f4      	adds	r4, r6, r3
   dc128:	4622      	mov	r2, r4
   dc12a:	4616      	mov	r6, r2
   dc12c:	3201      	adds	r2, #1
   dc12e:	7830      	ldrb	r0, [r6, #0]
   dc130:	f7ff ff90 	bl	dc054 <__hexdig_fun>
   dc134:	2800      	cmp	r0, #0
   dc136:	d1f8      	bne.n	dc12a <__gethex+0xac>
   dc138:	b134      	cbz	r4, dc148 <__gethex+0xca>
   dc13a:	1ba4      	subs	r4, r4, r6
   dc13c:	00a4      	lsls	r4, r4, #2
   dc13e:	e003      	b.n	dc148 <__gethex+0xca>
   dc140:	463e      	mov	r6, r7
   dc142:	e000      	b.n	dc146 <__gethex+0xc8>
   dc144:	4604      	mov	r4, r0
   dc146:	2501      	movs	r5, #1
   dc148:	7833      	ldrb	r3, [r6, #0]
   dc14a:	2b50      	cmp	r3, #80	; 0x50
   dc14c:	d001      	beq.n	dc152 <__gethex+0xd4>
   dc14e:	2b70      	cmp	r3, #112	; 0x70
   dc150:	d12a      	bne.n	dc1a8 <__gethex+0x12a>
   dc152:	7873      	ldrb	r3, [r6, #1]
   dc154:	2b2b      	cmp	r3, #43	; 0x2b
   dc156:	d008      	beq.n	dc16a <__gethex+0xec>
   dc158:	2b2d      	cmp	r3, #45	; 0x2d
   dc15a:	d003      	beq.n	dc164 <__gethex+0xe6>
   dc15c:	1c71      	adds	r1, r6, #1
   dc15e:	f04f 0900 	mov.w	r9, #0
   dc162:	e005      	b.n	dc170 <__gethex+0xf2>
   dc164:	f04f 0901 	mov.w	r9, #1
   dc168:	e001      	b.n	dc16e <__gethex+0xf0>
   dc16a:	f04f 0900 	mov.w	r9, #0
   dc16e:	1cb1      	adds	r1, r6, #2
   dc170:	7808      	ldrb	r0, [r1, #0]
   dc172:	f7ff ff6f 	bl	dc054 <__hexdig_fun>
   dc176:	1e43      	subs	r3, r0, #1
   dc178:	b2db      	uxtb	r3, r3
   dc17a:	2b18      	cmp	r3, #24
   dc17c:	d814      	bhi.n	dc1a8 <__gethex+0x12a>
   dc17e:	f1a0 0210 	sub.w	r2, r0, #16
   dc182:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc186:	f7ff ff65 	bl	dc054 <__hexdig_fun>
   dc18a:	1e43      	subs	r3, r0, #1
   dc18c:	b2db      	uxtb	r3, r3
   dc18e:	2b18      	cmp	r3, #24
   dc190:	d804      	bhi.n	dc19c <__gethex+0x11e>
   dc192:	230a      	movs	r3, #10
   dc194:	fb03 0202 	mla	r2, r3, r2, r0
   dc198:	3a10      	subs	r2, #16
   dc19a:	e7f2      	b.n	dc182 <__gethex+0x104>
   dc19c:	f1b9 0f00 	cmp.w	r9, #0
   dc1a0:	d000      	beq.n	dc1a4 <__gethex+0x126>
   dc1a2:	4252      	negs	r2, r2
   dc1a4:	4414      	add	r4, r2
   dc1a6:	e000      	b.n	dc1aa <__gethex+0x12c>
   dc1a8:	4631      	mov	r1, r6
   dc1aa:	f8ca 1000 	str.w	r1, [sl]
   dc1ae:	b12d      	cbz	r5, dc1bc <__gethex+0x13e>
   dc1b0:	f1bb 0f00 	cmp.w	fp, #0
   dc1b4:	bf14      	ite	ne
   dc1b6:	2000      	movne	r0, #0
   dc1b8:	2006      	moveq	r0, #6
   dc1ba:	e17c      	b.n	dc4b6 <__gethex+0x438>
   dc1bc:	1bf3      	subs	r3, r6, r7
   dc1be:	3b01      	subs	r3, #1
   dc1c0:	4629      	mov	r1, r5
   dc1c2:	2b07      	cmp	r3, #7
   dc1c4:	dd02      	ble.n	dc1cc <__gethex+0x14e>
   dc1c6:	3101      	adds	r1, #1
   dc1c8:	105b      	asrs	r3, r3, #1
   dc1ca:	e7fa      	b.n	dc1c2 <__gethex+0x144>
   dc1cc:	9802      	ldr	r0, [sp, #8]
   dc1ce:	f000 fb09 	bl	dc7e4 <_Balloc>
   dc1d2:	9b01      	ldr	r3, [sp, #4]
   dc1d4:	f100 0a14 	add.w	sl, r0, #20
   dc1d8:	f04f 0900 	mov.w	r9, #0
   dc1dc:	f1c3 0301 	rsb	r3, r3, #1
   dc1e0:	4605      	mov	r5, r0
   dc1e2:	f8cd a010 	str.w	sl, [sp, #16]
   dc1e6:	46cb      	mov	fp, r9
   dc1e8:	9308      	str	r3, [sp, #32]
   dc1ea:	42b7      	cmp	r7, r6
   dc1ec:	d22f      	bcs.n	dc24e <__gethex+0x1d0>
   dc1ee:	1e73      	subs	r3, r6, #1
   dc1f0:	9305      	str	r3, [sp, #20]
   dc1f2:	9a07      	ldr	r2, [sp, #28]
   dc1f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc1f8:	4293      	cmp	r3, r2
   dc1fa:	d00b      	beq.n	dc214 <__gethex+0x196>
   dc1fc:	f1bb 0f20 	cmp.w	fp, #32
   dc200:	d116      	bne.n	dc230 <__gethex+0x1b2>
   dc202:	9b04      	ldr	r3, [sp, #16]
   dc204:	f8c3 9000 	str.w	r9, [r3]
   dc208:	3304      	adds	r3, #4
   dc20a:	f04f 0900 	mov.w	r9, #0
   dc20e:	9304      	str	r3, [sp, #16]
   dc210:	46cb      	mov	fp, r9
   dc212:	e00d      	b.n	dc230 <__gethex+0x1b2>
   dc214:	9b05      	ldr	r3, [sp, #20]
   dc216:	9a08      	ldr	r2, [sp, #32]
   dc218:	4413      	add	r3, r2
   dc21a:	429f      	cmp	r7, r3
   dc21c:	d8ee      	bhi.n	dc1fc <__gethex+0x17e>
   dc21e:	4618      	mov	r0, r3
   dc220:	9a01      	ldr	r2, [sp, #4]
   dc222:	9903      	ldr	r1, [sp, #12]
   dc224:	9309      	str	r3, [sp, #36]	; 0x24
   dc226:	f7fe fd3c 	bl	daca2 <strncmp>
   dc22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc22c:	b168      	cbz	r0, dc24a <__gethex+0x1cc>
   dc22e:	e7e5      	b.n	dc1fc <__gethex+0x17e>
   dc230:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc234:	f7ff ff0e 	bl	dc054 <__hexdig_fun>
   dc238:	f000 000f 	and.w	r0, r0, #15
   dc23c:	fa00 f00b 	lsl.w	r0, r0, fp
   dc240:	9b05      	ldr	r3, [sp, #20]
   dc242:	ea49 0900 	orr.w	r9, r9, r0
   dc246:	f10b 0b04 	add.w	fp, fp, #4
   dc24a:	461e      	mov	r6, r3
   dc24c:	e7cd      	b.n	dc1ea <__gethex+0x16c>
   dc24e:	9804      	ldr	r0, [sp, #16]
   dc250:	f840 9b04 	str.w	r9, [r0], #4
   dc254:	ebca 0000 	rsb	r0, sl, r0
   dc258:	1080      	asrs	r0, r0, #2
   dc25a:	6128      	str	r0, [r5, #16]
   dc25c:	0147      	lsls	r7, r0, #5
   dc25e:	4648      	mov	r0, r9
   dc260:	f000 fb85 	bl	dc96e <__hi0bits>
   dc264:	f8d8 6000 	ldr.w	r6, [r8]
   dc268:	1a38      	subs	r0, r7, r0
   dc26a:	42b0      	cmp	r0, r6
   dc26c:	dd26      	ble.n	dc2bc <__gethex+0x23e>
   dc26e:	1b87      	subs	r7, r0, r6
   dc270:	4639      	mov	r1, r7
   dc272:	4628      	mov	r0, r5
   dc274:	f000 fe83 	bl	dcf7e <__any_on>
   dc278:	b1c8      	cbz	r0, dc2ae <__gethex+0x230>
   dc27a:	1e7b      	subs	r3, r7, #1
   dc27c:	1159      	asrs	r1, r3, #5
   dc27e:	f003 021f 	and.w	r2, r3, #31
   dc282:	f04f 0901 	mov.w	r9, #1
   dc286:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc28a:	fa09 f202 	lsl.w	r2, r9, r2
   dc28e:	420a      	tst	r2, r1
   dc290:	d00e      	beq.n	dc2b0 <__gethex+0x232>
   dc292:	454b      	cmp	r3, r9
   dc294:	dc02      	bgt.n	dc29c <__gethex+0x21e>
   dc296:	f04f 0902 	mov.w	r9, #2
   dc29a:	e009      	b.n	dc2b0 <__gethex+0x232>
   dc29c:	1eb9      	subs	r1, r7, #2
   dc29e:	4628      	mov	r0, r5
   dc2a0:	f000 fe6d 	bl	dcf7e <__any_on>
   dc2a4:	2800      	cmp	r0, #0
   dc2a6:	d0f6      	beq.n	dc296 <__gethex+0x218>
   dc2a8:	f04f 0903 	mov.w	r9, #3
   dc2ac:	e000      	b.n	dc2b0 <__gethex+0x232>
   dc2ae:	4681      	mov	r9, r0
   dc2b0:	4639      	mov	r1, r7
   dc2b2:	4628      	mov	r0, r5
   dc2b4:	f7ff fe98 	bl	dbfe8 <rshift>
   dc2b8:	443c      	add	r4, r7
   dc2ba:	e00c      	b.n	dc2d6 <__gethex+0x258>
   dc2bc:	da09      	bge.n	dc2d2 <__gethex+0x254>
   dc2be:	1a37      	subs	r7, r6, r0
   dc2c0:	4629      	mov	r1, r5
   dc2c2:	463a      	mov	r2, r7
   dc2c4:	9802      	ldr	r0, [sp, #8]
   dc2c6:	f000 fc87 	bl	dcbd8 <__lshift>
   dc2ca:	1be4      	subs	r4, r4, r7
   dc2cc:	4605      	mov	r5, r0
   dc2ce:	f100 0a14 	add.w	sl, r0, #20
   dc2d2:	f04f 0900 	mov.w	r9, #0
   dc2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc2da:	429c      	cmp	r4, r3
   dc2dc:	dd08      	ble.n	dc2f0 <__gethex+0x272>
   dc2de:	9802      	ldr	r0, [sp, #8]
   dc2e0:	4629      	mov	r1, r5
   dc2e2:	f000 fab4 	bl	dc84e <_Bfree>
   dc2e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc2e8:	2300      	movs	r3, #0
   dc2ea:	6013      	str	r3, [r2, #0]
   dc2ec:	20a3      	movs	r0, #163	; 0xa3
   dc2ee:	e0e2      	b.n	dc4b6 <__gethex+0x438>
   dc2f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc2f4:	4284      	cmp	r4, r0
   dc2f6:	da53      	bge.n	dc3a0 <__gethex+0x322>
   dc2f8:	1b04      	subs	r4, r0, r4
   dc2fa:	42a6      	cmp	r6, r4
   dc2fc:	dc2e      	bgt.n	dc35c <__gethex+0x2de>
   dc2fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc302:	2b02      	cmp	r3, #2
   dc304:	d01a      	beq.n	dc33c <__gethex+0x2be>
   dc306:	2b03      	cmp	r3, #3
   dc308:	d01c      	beq.n	dc344 <__gethex+0x2c6>
   dc30a:	2b01      	cmp	r3, #1
   dc30c:	d11d      	bne.n	dc34a <__gethex+0x2cc>
   dc30e:	42a6      	cmp	r6, r4
   dc310:	d11b      	bne.n	dc34a <__gethex+0x2cc>
   dc312:	2e01      	cmp	r6, #1
   dc314:	dc0b      	bgt.n	dc32e <__gethex+0x2b0>
   dc316:	9a06      	ldr	r2, [sp, #24]
   dc318:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc31c:	6013      	str	r3, [r2, #0]
   dc31e:	2301      	movs	r3, #1
   dc320:	612b      	str	r3, [r5, #16]
   dc322:	f8ca 3000 	str.w	r3, [sl]
   dc326:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc328:	2062      	movs	r0, #98	; 0x62
   dc32a:	601d      	str	r5, [r3, #0]
   dc32c:	e0c3      	b.n	dc4b6 <__gethex+0x438>
   dc32e:	1e71      	subs	r1, r6, #1
   dc330:	4628      	mov	r0, r5
   dc332:	f000 fe24 	bl	dcf7e <__any_on>
   dc336:	2800      	cmp	r0, #0
   dc338:	d1ed      	bne.n	dc316 <__gethex+0x298>
   dc33a:	e006      	b.n	dc34a <__gethex+0x2cc>
   dc33c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc33e:	2b00      	cmp	r3, #0
   dc340:	d0e9      	beq.n	dc316 <__gethex+0x298>
   dc342:	e002      	b.n	dc34a <__gethex+0x2cc>
   dc344:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc346:	2b00      	cmp	r3, #0
   dc348:	d1e5      	bne.n	dc316 <__gethex+0x298>
   dc34a:	9802      	ldr	r0, [sp, #8]
   dc34c:	4629      	mov	r1, r5
   dc34e:	f000 fa7e 	bl	dc84e <_Bfree>
   dc352:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc354:	2300      	movs	r3, #0
   dc356:	6013      	str	r3, [r2, #0]
   dc358:	2050      	movs	r0, #80	; 0x50
   dc35a:	e0ac      	b.n	dc4b6 <__gethex+0x438>
   dc35c:	1e67      	subs	r7, r4, #1
   dc35e:	f1b9 0f00 	cmp.w	r9, #0
   dc362:	d106      	bne.n	dc372 <__gethex+0x2f4>
   dc364:	b13f      	cbz	r7, dc376 <__gethex+0x2f8>
   dc366:	4639      	mov	r1, r7
   dc368:	4628      	mov	r0, r5
   dc36a:	f000 fe08 	bl	dcf7e <__any_on>
   dc36e:	4681      	mov	r9, r0
   dc370:	e001      	b.n	dc376 <__gethex+0x2f8>
   dc372:	f04f 0901 	mov.w	r9, #1
   dc376:	117a      	asrs	r2, r7, #5
   dc378:	2301      	movs	r3, #1
   dc37a:	f007 071f 	and.w	r7, r7, #31
   dc37e:	fa03 f707 	lsl.w	r7, r3, r7
   dc382:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc386:	4621      	mov	r1, r4
   dc388:	421f      	tst	r7, r3
   dc38a:	4628      	mov	r0, r5
   dc38c:	bf18      	it	ne
   dc38e:	f049 0902 	orrne.w	r9, r9, #2
   dc392:	1b36      	subs	r6, r6, r4
   dc394:	f7ff fe28 	bl	dbfe8 <rshift>
   dc398:	2702      	movs	r7, #2
   dc39a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc39e:	e000      	b.n	dc3a2 <__gethex+0x324>
   dc3a0:	2701      	movs	r7, #1
   dc3a2:	f1b9 0f00 	cmp.w	r9, #0
   dc3a6:	f000 8081 	beq.w	dc4ac <__gethex+0x42e>
   dc3aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc3ae:	2b02      	cmp	r3, #2
   dc3b0:	d00e      	beq.n	dc3d0 <__gethex+0x352>
   dc3b2:	2b03      	cmp	r3, #3
   dc3b4:	d010      	beq.n	dc3d8 <__gethex+0x35a>
   dc3b6:	2b01      	cmp	r3, #1
   dc3b8:	d176      	bne.n	dc4a8 <__gethex+0x42a>
   dc3ba:	f019 0f02 	tst.w	r9, #2
   dc3be:	d073      	beq.n	dc4a8 <__gethex+0x42a>
   dc3c0:	f8da 0000 	ldr.w	r0, [sl]
   dc3c4:	ea49 0900 	orr.w	r9, r9, r0
   dc3c8:	f019 0f01 	tst.w	r9, #1
   dc3cc:	d107      	bne.n	dc3de <__gethex+0x360>
   dc3ce:	e06b      	b.n	dc4a8 <__gethex+0x42a>
   dc3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc3d2:	f1c3 0301 	rsb	r3, r3, #1
   dc3d6:	9315      	str	r3, [sp, #84]	; 0x54
   dc3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc3da:	2b00      	cmp	r3, #0
   dc3dc:	d064      	beq.n	dc4a8 <__gethex+0x42a>
   dc3de:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc3e2:	f105 0314 	add.w	r3, r5, #20
   dc3e6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc3ea:	eb03 0109 	add.w	r1, r3, r9
   dc3ee:	2000      	movs	r0, #0
   dc3f0:	681a      	ldr	r2, [r3, #0]
   dc3f2:	f1b2 3fff 	cmp.w	r2, #4294967295
   dc3f6:	d002      	beq.n	dc3fe <__gethex+0x380>
   dc3f8:	3201      	adds	r2, #1
   dc3fa:	601a      	str	r2, [r3, #0]
   dc3fc:	e020      	b.n	dc440 <__gethex+0x3c2>
   dc3fe:	f843 0b04 	str.w	r0, [r3], #4
   dc402:	4299      	cmp	r1, r3
   dc404:	d8f4      	bhi.n	dc3f0 <__gethex+0x372>
   dc406:	68ab      	ldr	r3, [r5, #8]
   dc408:	459a      	cmp	sl, r3
   dc40a:	db12      	blt.n	dc432 <__gethex+0x3b4>
   dc40c:	6869      	ldr	r1, [r5, #4]
   dc40e:	9802      	ldr	r0, [sp, #8]
   dc410:	3101      	adds	r1, #1
   dc412:	f000 f9e7 	bl	dc7e4 <_Balloc>
   dc416:	692a      	ldr	r2, [r5, #16]
   dc418:	3202      	adds	r2, #2
   dc41a:	f105 010c 	add.w	r1, r5, #12
   dc41e:	4683      	mov	fp, r0
   dc420:	0092      	lsls	r2, r2, #2
   dc422:	300c      	adds	r0, #12
   dc424:	f7fe fba1 	bl	dab6a <memcpy>
   dc428:	4629      	mov	r1, r5
   dc42a:	9802      	ldr	r0, [sp, #8]
   dc42c:	f000 fa0f 	bl	dc84e <_Bfree>
   dc430:	465d      	mov	r5, fp
   dc432:	692b      	ldr	r3, [r5, #16]
   dc434:	1c5a      	adds	r2, r3, #1
   dc436:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dc43a:	612a      	str	r2, [r5, #16]
   dc43c:	2201      	movs	r2, #1
   dc43e:	615a      	str	r2, [r3, #20]
   dc440:	2f02      	cmp	r7, #2
   dc442:	f105 0214 	add.w	r2, r5, #20
   dc446:	d111      	bne.n	dc46c <__gethex+0x3ee>
   dc448:	f8d8 3000 	ldr.w	r3, [r8]
   dc44c:	3b01      	subs	r3, #1
   dc44e:	429e      	cmp	r6, r3
   dc450:	d127      	bne.n	dc4a2 <__gethex+0x424>
   dc452:	1171      	asrs	r1, r6, #5
   dc454:	2301      	movs	r3, #1
   dc456:	f006 061f 	and.w	r6, r6, #31
   dc45a:	fa03 f606 	lsl.w	r6, r3, r6
   dc45e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dc462:	421e      	tst	r6, r3
   dc464:	bf0c      	ite	eq
   dc466:	2702      	moveq	r7, #2
   dc468:	2701      	movne	r7, #1
   dc46a:	e01a      	b.n	dc4a2 <__gethex+0x424>
   dc46c:	692b      	ldr	r3, [r5, #16]
   dc46e:	459a      	cmp	sl, r3
   dc470:	da0a      	bge.n	dc488 <__gethex+0x40a>
   dc472:	2101      	movs	r1, #1
   dc474:	4628      	mov	r0, r5
   dc476:	f7ff fdb7 	bl	dbfe8 <rshift>
   dc47a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc47e:	3401      	adds	r4, #1
   dc480:	429c      	cmp	r4, r3
   dc482:	f73f af2c 	bgt.w	dc2de <__gethex+0x260>
   dc486:	e00b      	b.n	dc4a0 <__gethex+0x422>
   dc488:	f016 061f 	ands.w	r6, r6, #31
   dc48c:	d008      	beq.n	dc4a0 <__gethex+0x422>
   dc48e:	4491      	add	r9, r2
   dc490:	f1c6 0620 	rsb	r6, r6, #32
   dc494:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dc498:	f000 fa69 	bl	dc96e <__hi0bits>
   dc49c:	42b0      	cmp	r0, r6
   dc49e:	dbe8      	blt.n	dc472 <__gethex+0x3f4>
   dc4a0:	2701      	movs	r7, #1
   dc4a2:	f047 0720 	orr.w	r7, r7, #32
   dc4a6:	e001      	b.n	dc4ac <__gethex+0x42e>
   dc4a8:	f047 0710 	orr.w	r7, r7, #16
   dc4ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc4ae:	601d      	str	r5, [r3, #0]
   dc4b0:	9b06      	ldr	r3, [sp, #24]
   dc4b2:	4638      	mov	r0, r7
   dc4b4:	601c      	str	r4, [r3, #0]
   dc4b6:	b00b      	add	sp, #44	; 0x2c
   dc4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc4bc <L_shift>:
   dc4bc:	f1c2 0208 	rsb	r2, r2, #8
   dc4c0:	0092      	lsls	r2, r2, #2
   dc4c2:	b570      	push	{r4, r5, r6, lr}
   dc4c4:	f1c2 0620 	rsb	r6, r2, #32
   dc4c8:	6843      	ldr	r3, [r0, #4]
   dc4ca:	6805      	ldr	r5, [r0, #0]
   dc4cc:	fa03 f406 	lsl.w	r4, r3, r6
   dc4d0:	432c      	orrs	r4, r5
   dc4d2:	40d3      	lsrs	r3, r2
   dc4d4:	6004      	str	r4, [r0, #0]
   dc4d6:	f840 3f04 	str.w	r3, [r0, #4]!
   dc4da:	4288      	cmp	r0, r1
   dc4dc:	d3f4      	bcc.n	dc4c8 <L_shift+0xc>
   dc4de:	bd70      	pop	{r4, r5, r6, pc}

000dc4e0 <__match>:
   dc4e0:	b530      	push	{r4, r5, lr}
   dc4e2:	6803      	ldr	r3, [r0, #0]
   dc4e4:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc4e8:	3301      	adds	r3, #1
   dc4ea:	b14c      	cbz	r4, dc500 <__match+0x20>
   dc4ec:	781a      	ldrb	r2, [r3, #0]
   dc4ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc4f2:	2d19      	cmp	r5, #25
   dc4f4:	bf98      	it	ls
   dc4f6:	3220      	addls	r2, #32
   dc4f8:	42a2      	cmp	r2, r4
   dc4fa:	d0f3      	beq.n	dc4e4 <__match+0x4>
   dc4fc:	2000      	movs	r0, #0
   dc4fe:	bd30      	pop	{r4, r5, pc}
   dc500:	6003      	str	r3, [r0, #0]
   dc502:	2001      	movs	r0, #1
   dc504:	bd30      	pop	{r4, r5, pc}

000dc506 <__hexnan>:
   dc506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc50a:	680b      	ldr	r3, [r1, #0]
   dc50c:	f8d0 b000 	ldr.w	fp, [r0]
   dc510:	115e      	asrs	r6, r3, #5
   dc512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc516:	f013 031f 	ands.w	r3, r3, #31
   dc51a:	b085      	sub	sp, #20
   dc51c:	bf18      	it	ne
   dc51e:	3604      	addne	r6, #4
   dc520:	1f35      	subs	r5, r6, #4
   dc522:	4617      	mov	r7, r2
   dc524:	2200      	movs	r2, #0
   dc526:	4682      	mov	sl, r0
   dc528:	9301      	str	r3, [sp, #4]
   dc52a:	f846 2c04 	str.w	r2, [r6, #-4]
   dc52e:	46a8      	mov	r8, r5
   dc530:	462c      	mov	r4, r5
   dc532:	9200      	str	r2, [sp, #0]
   dc534:	4691      	mov	r9, r2
   dc536:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dc53a:	2900      	cmp	r1, #0
   dc53c:	d03c      	beq.n	dc5b8 <__hexnan+0xb2>
   dc53e:	4608      	mov	r0, r1
   dc540:	9203      	str	r2, [sp, #12]
   dc542:	9102      	str	r1, [sp, #8]
   dc544:	f7ff fd86 	bl	dc054 <__hexdig_fun>
   dc548:	9a03      	ldr	r2, [sp, #12]
   dc54a:	bb00      	cbnz	r0, dc58e <__hexnan+0x88>
   dc54c:	9902      	ldr	r1, [sp, #8]
   dc54e:	2920      	cmp	r1, #32
   dc550:	d816      	bhi.n	dc580 <__hexnan+0x7a>
   dc552:	9b00      	ldr	r3, [sp, #0]
   dc554:	4599      	cmp	r9, r3
   dc556:	ddee      	ble.n	dc536 <__hexnan+0x30>
   dc558:	4544      	cmp	r4, r8
   dc55a:	d205      	bcs.n	dc568 <__hexnan+0x62>
   dc55c:	2a07      	cmp	r2, #7
   dc55e:	dc03      	bgt.n	dc568 <__hexnan+0x62>
   dc560:	4641      	mov	r1, r8
   dc562:	4620      	mov	r0, r4
   dc564:	f7ff ffaa 	bl	dc4bc <L_shift>
   dc568:	42bc      	cmp	r4, r7
   dc56a:	d923      	bls.n	dc5b4 <__hexnan+0xae>
   dc56c:	2300      	movs	r3, #0
   dc56e:	f1a4 0804 	sub.w	r8, r4, #4
   dc572:	f844 3c04 	str.w	r3, [r4, #-4]
   dc576:	f8cd 9000 	str.w	r9, [sp]
   dc57a:	4644      	mov	r4, r8
   dc57c:	461a      	mov	r2, r3
   dc57e:	e7da      	b.n	dc536 <__hexnan+0x30>
   dc580:	2929      	cmp	r1, #41	; 0x29
   dc582:	d148      	bne.n	dc616 <__hexnan+0x110>
   dc584:	f10b 0301 	add.w	r3, fp, #1
   dc588:	f8ca 3000 	str.w	r3, [sl]
   dc58c:	e014      	b.n	dc5b8 <__hexnan+0xb2>
   dc58e:	3201      	adds	r2, #1
   dc590:	2a08      	cmp	r2, #8
   dc592:	f109 0901 	add.w	r9, r9, #1
   dc596:	dd06      	ble.n	dc5a6 <__hexnan+0xa0>
   dc598:	42bc      	cmp	r4, r7
   dc59a:	d9cc      	bls.n	dc536 <__hexnan+0x30>
   dc59c:	2300      	movs	r3, #0
   dc59e:	f844 3c04 	str.w	r3, [r4, #-4]
   dc5a2:	2201      	movs	r2, #1
   dc5a4:	3c04      	subs	r4, #4
   dc5a6:	6821      	ldr	r1, [r4, #0]
   dc5a8:	f000 000f 	and.w	r0, r0, #15
   dc5ac:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dc5b0:	6020      	str	r0, [r4, #0]
   dc5b2:	e7c0      	b.n	dc536 <__hexnan+0x30>
   dc5b4:	2208      	movs	r2, #8
   dc5b6:	e7be      	b.n	dc536 <__hexnan+0x30>
   dc5b8:	f1b9 0f00 	cmp.w	r9, #0
   dc5bc:	d02b      	beq.n	dc616 <__hexnan+0x110>
   dc5be:	4544      	cmp	r4, r8
   dc5c0:	d205      	bcs.n	dc5ce <__hexnan+0xc8>
   dc5c2:	2a07      	cmp	r2, #7
   dc5c4:	dc03      	bgt.n	dc5ce <__hexnan+0xc8>
   dc5c6:	4641      	mov	r1, r8
   dc5c8:	4620      	mov	r0, r4
   dc5ca:	f7ff ff77 	bl	dc4bc <L_shift>
   dc5ce:	42bc      	cmp	r4, r7
   dc5d0:	d90c      	bls.n	dc5ec <__hexnan+0xe6>
   dc5d2:	463b      	mov	r3, r7
   dc5d4:	f854 2b04 	ldr.w	r2, [r4], #4
   dc5d8:	f843 2b04 	str.w	r2, [r3], #4
   dc5dc:	42a5      	cmp	r5, r4
   dc5de:	d2f9      	bcs.n	dc5d4 <__hexnan+0xce>
   dc5e0:	2200      	movs	r2, #0
   dc5e2:	f843 2b04 	str.w	r2, [r3], #4
   dc5e6:	429d      	cmp	r5, r3
   dc5e8:	d2fb      	bcs.n	dc5e2 <__hexnan+0xdc>
   dc5ea:	e00b      	b.n	dc604 <__hexnan+0xfe>
   dc5ec:	9b01      	ldr	r3, [sp, #4]
   dc5ee:	b14b      	cbz	r3, dc604 <__hexnan+0xfe>
   dc5f0:	f1c3 0220 	rsb	r2, r3, #32
   dc5f4:	f04f 33ff 	mov.w	r3, #4294967295
   dc5f8:	40d3      	lsrs	r3, r2
   dc5fa:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc5fe:	4013      	ands	r3, r2
   dc600:	f846 3c04 	str.w	r3, [r6, #-4]
   dc604:	682b      	ldr	r3, [r5, #0]
   dc606:	b943      	cbnz	r3, dc61a <__hexnan+0x114>
   dc608:	42bd      	cmp	r5, r7
   dc60a:	d102      	bne.n	dc612 <__hexnan+0x10c>
   dc60c:	2301      	movs	r3, #1
   dc60e:	602b      	str	r3, [r5, #0]
   dc610:	e003      	b.n	dc61a <__hexnan+0x114>
   dc612:	3d04      	subs	r5, #4
   dc614:	e7f6      	b.n	dc604 <__hexnan+0xfe>
   dc616:	2004      	movs	r0, #4
   dc618:	e000      	b.n	dc61c <__hexnan+0x116>
   dc61a:	2005      	movs	r0, #5
   dc61c:	b005      	add	sp, #20
   dc61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc624 <_findenv_r>:
   dc624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc628:	4607      	mov	r7, r0
   dc62a:	468b      	mov	fp, r1
   dc62c:	4690      	mov	r8, r2
   dc62e:	f000 fcd6 	bl	dcfde <__env_lock>
   dc632:	4b19      	ldr	r3, [pc, #100]	; (dc698 <_findenv_r+0x74>)
   dc634:	681d      	ldr	r5, [r3, #0]
   dc636:	469a      	mov	sl, r3
   dc638:	b13d      	cbz	r5, dc64a <_findenv_r+0x26>
   dc63a:	465c      	mov	r4, fp
   dc63c:	4623      	mov	r3, r4
   dc63e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc642:	b142      	cbz	r2, dc656 <_findenv_r+0x32>
   dc644:	2a3d      	cmp	r2, #61	; 0x3d
   dc646:	461c      	mov	r4, r3
   dc648:	d1f8      	bne.n	dc63c <_findenv_r+0x18>
   dc64a:	4638      	mov	r0, r7
   dc64c:	f000 fcc8 	bl	dcfe0 <__env_unlock>
   dc650:	2000      	movs	r0, #0
   dc652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc656:	ebcb 0404 	rsb	r4, fp, r4
   dc65a:	46a9      	mov	r9, r5
   dc65c:	f859 0b04 	ldr.w	r0, [r9], #4
   dc660:	2800      	cmp	r0, #0
   dc662:	d0f2      	beq.n	dc64a <_findenv_r+0x26>
   dc664:	4622      	mov	r2, r4
   dc666:	4659      	mov	r1, fp
   dc668:	f7fe fb1b 	bl	daca2 <strncmp>
   dc66c:	b988      	cbnz	r0, dc692 <_findenv_r+0x6e>
   dc66e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc672:	191e      	adds	r6, r3, r4
   dc674:	5d1b      	ldrb	r3, [r3, r4]
   dc676:	2b3d      	cmp	r3, #61	; 0x3d
   dc678:	d10b      	bne.n	dc692 <_findenv_r+0x6e>
   dc67a:	f8da 3000 	ldr.w	r3, [sl]
   dc67e:	1aed      	subs	r5, r5, r3
   dc680:	10ad      	asrs	r5, r5, #2
   dc682:	4638      	mov	r0, r7
   dc684:	f8c8 5000 	str.w	r5, [r8]
   dc688:	f000 fcaa 	bl	dcfe0 <__env_unlock>
   dc68c:	1c70      	adds	r0, r6, #1
   dc68e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc692:	464d      	mov	r5, r9
   dc694:	e7e1      	b.n	dc65a <_findenv_r+0x36>
   dc696:	bf00      	nop
   dc698:	2003d680 	.word	0x2003d680

000dc69c <_getenv_r>:
   dc69c:	b507      	push	{r0, r1, r2, lr}
   dc69e:	aa01      	add	r2, sp, #4
   dc6a0:	f7ff ffc0 	bl	dc624 <_findenv_r>
   dc6a4:	b003      	add	sp, #12
   dc6a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc6ac <__gettzinfo>:
   dc6ac:	4800      	ldr	r0, [pc, #0]	; (dc6b0 <__gettzinfo+0x4>)
   dc6ae:	4770      	bx	lr
   dc6b0:	2003d640 	.word	0x2003d640

000dc6b4 <gmtime_r>:
   dc6b4:	6802      	ldr	r2, [r0, #0]
   dc6b6:	4b47      	ldr	r3, [pc, #284]	; (dc7d4 <gmtime_r+0x120>)
   dc6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc6ba:	fb92 f4f3 	sdiv	r4, r2, r3
   dc6be:	fb03 2214 	mls	r2, r3, r4, r2
   dc6c2:	2a00      	cmp	r2, #0
   dc6c4:	bfbc      	itt	lt
   dc6c6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dc6ca:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dc6ce:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dc6d2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dc6d6:	fb92 f3f0 	sdiv	r3, r2, r0
   dc6da:	fb00 2213 	mls	r2, r0, r3, r2
   dc6de:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dc6e2:	bfac      	ite	ge
   dc6e4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dc6e8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dc6ec:	608b      	str	r3, [r1, #8]
   dc6ee:	fb92 f3f0 	sdiv	r3, r2, r0
   dc6f2:	fb00 2213 	mls	r2, r0, r3, r2
   dc6f6:	604b      	str	r3, [r1, #4]
   dc6f8:	600a      	str	r2, [r1, #0]
   dc6fa:	2307      	movs	r3, #7
   dc6fc:	1ce2      	adds	r2, r4, #3
   dc6fe:	fb92 f3f3 	sdiv	r3, r2, r3
   dc702:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc706:	1ad3      	subs	r3, r2, r3
   dc708:	618b      	str	r3, [r1, #24]
   dc70a:	4b33      	ldr	r3, [pc, #204]	; (dc7d8 <gmtime_r+0x124>)
   dc70c:	4d33      	ldr	r5, [pc, #204]	; (dc7dc <gmtime_r+0x128>)
   dc70e:	fb94 f5f5 	sdiv	r5, r4, r5
   dc712:	fb03 4405 	mla	r4, r3, r5, r4
   dc716:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dc71a:	fbb4 f2f2 	udiv	r2, r4, r2
   dc71e:	4422      	add	r2, r4
   dc720:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dc724:	fbb4 f3f7 	udiv	r3, r4, r7
   dc728:	1ad2      	subs	r2, r2, r3
   dc72a:	482d      	ldr	r0, [pc, #180]	; (dc7e0 <gmtime_r+0x12c>)
   dc72c:	fbb4 f0f0 	udiv	r0, r4, r0
   dc730:	f648 6694 	movw	r6, #36500	; 0x8e94
   dc734:	1a13      	subs	r3, r2, r0
   dc736:	fbb3 f6f6 	udiv	r6, r3, r6
   dc73a:	4434      	add	r4, r6
   dc73c:	f240 126d 	movw	r2, #365	; 0x16d
   dc740:	fbb3 f0f2 	udiv	r0, r3, r2
   dc744:	fbb3 f3f7 	udiv	r3, r3, r7
   dc748:	1ae3      	subs	r3, r4, r3
   dc74a:	fb02 3310 	mls	r3, r2, r0, r3
   dc74e:	2499      	movs	r4, #153	; 0x99
   dc750:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dc754:	3202      	adds	r2, #2
   dc756:	fbb2 f2f4 	udiv	r2, r2, r4
   dc75a:	2a0a      	cmp	r2, #10
   dc75c:	fb04 f402 	mul.w	r4, r4, r2
   dc760:	f104 0602 	add.w	r6, r4, #2
   dc764:	f04f 0405 	mov.w	r4, #5
   dc768:	fbb6 f4f4 	udiv	r4, r6, r4
   dc76c:	bf34      	ite	cc
   dc76e:	2602      	movcc	r6, #2
   dc770:	f06f 0609 	mvncs.w	r6, #9
   dc774:	4416      	add	r6, r2
   dc776:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc77a:	fb02 0505 	mla	r5, r2, r5, r0
   dc77e:	1c5f      	adds	r7, r3, #1
   dc780:	2e01      	cmp	r6, #1
   dc782:	bf98      	it	ls
   dc784:	3501      	addls	r5, #1
   dc786:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dc78a:	eba7 0704 	sub.w	r7, r7, r4
   dc78e:	d302      	bcc.n	dc796 <gmtime_r+0xe2>
   dc790:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dc794:	e014      	b.n	dc7c0 <gmtime_r+0x10c>
   dc796:	0782      	lsls	r2, r0, #30
   dc798:	d105      	bne.n	dc7a6 <gmtime_r+0xf2>
   dc79a:	2464      	movs	r4, #100	; 0x64
   dc79c:	fbb0 f2f4 	udiv	r2, r0, r4
   dc7a0:	fb04 0212 	mls	r2, r4, r2, r0
   dc7a4:	b94a      	cbnz	r2, dc7ba <gmtime_r+0x106>
   dc7a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc7aa:	fbb0 f4f2 	udiv	r4, r0, r2
   dc7ae:	fb02 0014 	mls	r0, r2, r4, r0
   dc7b2:	fab0 f280 	clz	r2, r0
   dc7b6:	0952      	lsrs	r2, r2, #5
   dc7b8:	e000      	b.n	dc7bc <gmtime_r+0x108>
   dc7ba:	2201      	movs	r2, #1
   dc7bc:	333b      	adds	r3, #59	; 0x3b
   dc7be:	441a      	add	r2, r3
   dc7c0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dc7c4:	2300      	movs	r3, #0
   dc7c6:	61ca      	str	r2, [r1, #28]
   dc7c8:	614d      	str	r5, [r1, #20]
   dc7ca:	610e      	str	r6, [r1, #16]
   dc7cc:	60cf      	str	r7, [r1, #12]
   dc7ce:	620b      	str	r3, [r1, #32]
   dc7d0:	4608      	mov	r0, r1
   dc7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc7d4:	00015180 	.word	0x00015180
   dc7d8:	fffdc54f 	.word	0xfffdc54f
   dc7dc:	00023ab1 	.word	0x00023ab1
   dc7e0:	00023ab0 	.word	0x00023ab0

000dc7e4 <_Balloc>:
   dc7e4:	b570      	push	{r4, r5, r6, lr}
   dc7e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dc7e8:	4604      	mov	r4, r0
   dc7ea:	460e      	mov	r6, r1
   dc7ec:	b93d      	cbnz	r5, dc7fe <_Balloc+0x1a>
   dc7ee:	2010      	movs	r0, #16
   dc7f0:	f7fa fb7c 	bl	d6eec <malloc>
   dc7f4:	6260      	str	r0, [r4, #36]	; 0x24
   dc7f6:	6045      	str	r5, [r0, #4]
   dc7f8:	6085      	str	r5, [r0, #8]
   dc7fa:	6005      	str	r5, [r0, #0]
   dc7fc:	60c5      	str	r5, [r0, #12]
   dc7fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dc800:	68eb      	ldr	r3, [r5, #12]
   dc802:	b143      	cbz	r3, dc816 <_Balloc+0x32>
   dc804:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc806:	68db      	ldr	r3, [r3, #12]
   dc808:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dc80c:	b178      	cbz	r0, dc82e <_Balloc+0x4a>
   dc80e:	6802      	ldr	r2, [r0, #0]
   dc810:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dc814:	e017      	b.n	dc846 <_Balloc+0x62>
   dc816:	2221      	movs	r2, #33	; 0x21
   dc818:	2104      	movs	r1, #4
   dc81a:	4620      	mov	r0, r4
   dc81c:	f000 fbd1 	bl	dcfc2 <_calloc_r>
   dc820:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc822:	60e8      	str	r0, [r5, #12]
   dc824:	68db      	ldr	r3, [r3, #12]
   dc826:	2b00      	cmp	r3, #0
   dc828:	d1ec      	bne.n	dc804 <_Balloc+0x20>
   dc82a:	2000      	movs	r0, #0
   dc82c:	bd70      	pop	{r4, r5, r6, pc}
   dc82e:	2101      	movs	r1, #1
   dc830:	fa01 f506 	lsl.w	r5, r1, r6
   dc834:	1d6a      	adds	r2, r5, #5
   dc836:	0092      	lsls	r2, r2, #2
   dc838:	4620      	mov	r0, r4
   dc83a:	f000 fbc2 	bl	dcfc2 <_calloc_r>
   dc83e:	2800      	cmp	r0, #0
   dc840:	d0f3      	beq.n	dc82a <_Balloc+0x46>
   dc842:	6046      	str	r6, [r0, #4]
   dc844:	6085      	str	r5, [r0, #8]
   dc846:	2300      	movs	r3, #0
   dc848:	6103      	str	r3, [r0, #16]
   dc84a:	60c3      	str	r3, [r0, #12]
   dc84c:	bd70      	pop	{r4, r5, r6, pc}

000dc84e <_Bfree>:
   dc84e:	b570      	push	{r4, r5, r6, lr}
   dc850:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dc852:	4606      	mov	r6, r0
   dc854:	460d      	mov	r5, r1
   dc856:	b93c      	cbnz	r4, dc868 <_Bfree+0x1a>
   dc858:	2010      	movs	r0, #16
   dc85a:	f7fa fb47 	bl	d6eec <malloc>
   dc85e:	6270      	str	r0, [r6, #36]	; 0x24
   dc860:	6044      	str	r4, [r0, #4]
   dc862:	6084      	str	r4, [r0, #8]
   dc864:	6004      	str	r4, [r0, #0]
   dc866:	60c4      	str	r4, [r0, #12]
   dc868:	b13d      	cbz	r5, dc87a <_Bfree+0x2c>
   dc86a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dc86c:	686a      	ldr	r2, [r5, #4]
   dc86e:	68db      	ldr	r3, [r3, #12]
   dc870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc874:	6029      	str	r1, [r5, #0]
   dc876:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dc87a:	bd70      	pop	{r4, r5, r6, pc}

000dc87c <__multadd>:
   dc87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc880:	690d      	ldr	r5, [r1, #16]
   dc882:	461f      	mov	r7, r3
   dc884:	4606      	mov	r6, r0
   dc886:	460c      	mov	r4, r1
   dc888:	f101 0e14 	add.w	lr, r1, #20
   dc88c:	2300      	movs	r3, #0
   dc88e:	f8de 0000 	ldr.w	r0, [lr]
   dc892:	b281      	uxth	r1, r0
   dc894:	fb02 7101 	mla	r1, r2, r1, r7
   dc898:	0c0f      	lsrs	r7, r1, #16
   dc89a:	0c00      	lsrs	r0, r0, #16
   dc89c:	fb02 7000 	mla	r0, r2, r0, r7
   dc8a0:	b289      	uxth	r1, r1
   dc8a2:	3301      	adds	r3, #1
   dc8a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dc8a8:	429d      	cmp	r5, r3
   dc8aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dc8ae:	f84e 1b04 	str.w	r1, [lr], #4
   dc8b2:	dcec      	bgt.n	dc88e <__multadd+0x12>
   dc8b4:	b1d7      	cbz	r7, dc8ec <__multadd+0x70>
   dc8b6:	68a3      	ldr	r3, [r4, #8]
   dc8b8:	429d      	cmp	r5, r3
   dc8ba:	db12      	blt.n	dc8e2 <__multadd+0x66>
   dc8bc:	6861      	ldr	r1, [r4, #4]
   dc8be:	4630      	mov	r0, r6
   dc8c0:	3101      	adds	r1, #1
   dc8c2:	f7ff ff8f 	bl	dc7e4 <_Balloc>
   dc8c6:	6922      	ldr	r2, [r4, #16]
   dc8c8:	3202      	adds	r2, #2
   dc8ca:	f104 010c 	add.w	r1, r4, #12
   dc8ce:	4680      	mov	r8, r0
   dc8d0:	0092      	lsls	r2, r2, #2
   dc8d2:	300c      	adds	r0, #12
   dc8d4:	f7fe f949 	bl	dab6a <memcpy>
   dc8d8:	4621      	mov	r1, r4
   dc8da:	4630      	mov	r0, r6
   dc8dc:	f7ff ffb7 	bl	dc84e <_Bfree>
   dc8e0:	4644      	mov	r4, r8
   dc8e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dc8e6:	3501      	adds	r5, #1
   dc8e8:	615f      	str	r7, [r3, #20]
   dc8ea:	6125      	str	r5, [r4, #16]
   dc8ec:	4620      	mov	r0, r4
   dc8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc8f2 <__s2b>:
   dc8f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc8f6:	460c      	mov	r4, r1
   dc8f8:	4615      	mov	r5, r2
   dc8fa:	461f      	mov	r7, r3
   dc8fc:	2209      	movs	r2, #9
   dc8fe:	3308      	adds	r3, #8
   dc900:	4606      	mov	r6, r0
   dc902:	fb93 f3f2 	sdiv	r3, r3, r2
   dc906:	2100      	movs	r1, #0
   dc908:	2201      	movs	r2, #1
   dc90a:	429a      	cmp	r2, r3
   dc90c:	da02      	bge.n	dc914 <__s2b+0x22>
   dc90e:	0052      	lsls	r2, r2, #1
   dc910:	3101      	adds	r1, #1
   dc912:	e7fa      	b.n	dc90a <__s2b+0x18>
   dc914:	4630      	mov	r0, r6
   dc916:	f7ff ff65 	bl	dc7e4 <_Balloc>
   dc91a:	9b08      	ldr	r3, [sp, #32]
   dc91c:	6143      	str	r3, [r0, #20]
   dc91e:	2d09      	cmp	r5, #9
   dc920:	f04f 0301 	mov.w	r3, #1
   dc924:	6103      	str	r3, [r0, #16]
   dc926:	dd11      	ble.n	dc94c <__s2b+0x5a>
   dc928:	f104 0809 	add.w	r8, r4, #9
   dc92c:	46c1      	mov	r9, r8
   dc92e:	442c      	add	r4, r5
   dc930:	f819 3b01 	ldrb.w	r3, [r9], #1
   dc934:	4601      	mov	r1, r0
   dc936:	3b30      	subs	r3, #48	; 0x30
   dc938:	220a      	movs	r2, #10
   dc93a:	4630      	mov	r0, r6
   dc93c:	f7ff ff9e 	bl	dc87c <__multadd>
   dc940:	45a1      	cmp	r9, r4
   dc942:	d1f5      	bne.n	dc930 <__s2b+0x3e>
   dc944:	eb08 0405 	add.w	r4, r8, r5
   dc948:	3c08      	subs	r4, #8
   dc94a:	e001      	b.n	dc950 <__s2b+0x5e>
   dc94c:	340a      	adds	r4, #10
   dc94e:	2509      	movs	r5, #9
   dc950:	1b2d      	subs	r5, r5, r4
   dc952:	1963      	adds	r3, r4, r5
   dc954:	429f      	cmp	r7, r3
   dc956:	dd08      	ble.n	dc96a <__s2b+0x78>
   dc958:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc95c:	4601      	mov	r1, r0
   dc95e:	3b30      	subs	r3, #48	; 0x30
   dc960:	220a      	movs	r2, #10
   dc962:	4630      	mov	r0, r6
   dc964:	f7ff ff8a 	bl	dc87c <__multadd>
   dc968:	e7f3      	b.n	dc952 <__s2b+0x60>
   dc96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dc96e <__hi0bits>:
   dc96e:	0c03      	lsrs	r3, r0, #16
   dc970:	041b      	lsls	r3, r3, #16
   dc972:	b913      	cbnz	r3, dc97a <__hi0bits+0xc>
   dc974:	0400      	lsls	r0, r0, #16
   dc976:	2310      	movs	r3, #16
   dc978:	e000      	b.n	dc97c <__hi0bits+0xe>
   dc97a:	2300      	movs	r3, #0
   dc97c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc980:	bf04      	itt	eq
   dc982:	0200      	lsleq	r0, r0, #8
   dc984:	3308      	addeq	r3, #8
   dc986:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc98a:	bf04      	itt	eq
   dc98c:	0100      	lsleq	r0, r0, #4
   dc98e:	3304      	addeq	r3, #4
   dc990:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc994:	bf04      	itt	eq
   dc996:	0080      	lsleq	r0, r0, #2
   dc998:	3302      	addeq	r3, #2
   dc99a:	2800      	cmp	r0, #0
   dc99c:	db03      	blt.n	dc9a6 <__hi0bits+0x38>
   dc99e:	0042      	lsls	r2, r0, #1
   dc9a0:	d503      	bpl.n	dc9aa <__hi0bits+0x3c>
   dc9a2:	1c58      	adds	r0, r3, #1
   dc9a4:	4770      	bx	lr
   dc9a6:	4618      	mov	r0, r3
   dc9a8:	4770      	bx	lr
   dc9aa:	2020      	movs	r0, #32
   dc9ac:	4770      	bx	lr

000dc9ae <__lo0bits>:
   dc9ae:	6803      	ldr	r3, [r0, #0]
   dc9b0:	f013 0207 	ands.w	r2, r3, #7
   dc9b4:	d00b      	beq.n	dc9ce <__lo0bits+0x20>
   dc9b6:	07d9      	lsls	r1, r3, #31
   dc9b8:	d422      	bmi.n	dca00 <__lo0bits+0x52>
   dc9ba:	079a      	lsls	r2, r3, #30
   dc9bc:	bf4b      	itete	mi
   dc9be:	085b      	lsrmi	r3, r3, #1
   dc9c0:	089b      	lsrpl	r3, r3, #2
   dc9c2:	6003      	strmi	r3, [r0, #0]
   dc9c4:	6003      	strpl	r3, [r0, #0]
   dc9c6:	bf4c      	ite	mi
   dc9c8:	2001      	movmi	r0, #1
   dc9ca:	2002      	movpl	r0, #2
   dc9cc:	4770      	bx	lr
   dc9ce:	b299      	uxth	r1, r3
   dc9d0:	b909      	cbnz	r1, dc9d6 <__lo0bits+0x28>
   dc9d2:	0c1b      	lsrs	r3, r3, #16
   dc9d4:	2210      	movs	r2, #16
   dc9d6:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc9da:	bf04      	itt	eq
   dc9dc:	0a1b      	lsreq	r3, r3, #8
   dc9de:	3208      	addeq	r2, #8
   dc9e0:	0719      	lsls	r1, r3, #28
   dc9e2:	bf04      	itt	eq
   dc9e4:	091b      	lsreq	r3, r3, #4
   dc9e6:	3204      	addeq	r2, #4
   dc9e8:	0799      	lsls	r1, r3, #30
   dc9ea:	bf04      	itt	eq
   dc9ec:	089b      	lsreq	r3, r3, #2
   dc9ee:	3202      	addeq	r2, #2
   dc9f0:	07d9      	lsls	r1, r3, #31
   dc9f2:	d402      	bmi.n	dc9fa <__lo0bits+0x4c>
   dc9f4:	085b      	lsrs	r3, r3, #1
   dc9f6:	d005      	beq.n	dca04 <__lo0bits+0x56>
   dc9f8:	3201      	adds	r2, #1
   dc9fa:	6003      	str	r3, [r0, #0]
   dc9fc:	4610      	mov	r0, r2
   dc9fe:	4770      	bx	lr
   dca00:	2000      	movs	r0, #0
   dca02:	4770      	bx	lr
   dca04:	2020      	movs	r0, #32
   dca06:	4770      	bx	lr

000dca08 <__i2b>:
   dca08:	b510      	push	{r4, lr}
   dca0a:	460c      	mov	r4, r1
   dca0c:	2101      	movs	r1, #1
   dca0e:	f7ff fee9 	bl	dc7e4 <_Balloc>
   dca12:	2201      	movs	r2, #1
   dca14:	6144      	str	r4, [r0, #20]
   dca16:	6102      	str	r2, [r0, #16]
   dca18:	bd10      	pop	{r4, pc}

000dca1a <__multiply>:
   dca1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca1e:	4614      	mov	r4, r2
   dca20:	690a      	ldr	r2, [r1, #16]
   dca22:	6923      	ldr	r3, [r4, #16]
   dca24:	429a      	cmp	r2, r3
   dca26:	bfb8      	it	lt
   dca28:	460b      	movlt	r3, r1
   dca2a:	4688      	mov	r8, r1
   dca2c:	bfbc      	itt	lt
   dca2e:	46a0      	movlt	r8, r4
   dca30:	461c      	movlt	r4, r3
   dca32:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dca36:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dca3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dca3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dca42:	eb07 0609 	add.w	r6, r7, r9
   dca46:	429e      	cmp	r6, r3
   dca48:	bfc8      	it	gt
   dca4a:	3101      	addgt	r1, #1
   dca4c:	f7ff feca 	bl	dc7e4 <_Balloc>
   dca50:	f100 0514 	add.w	r5, r0, #20
   dca54:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dca58:	462b      	mov	r3, r5
   dca5a:	2200      	movs	r2, #0
   dca5c:	4563      	cmp	r3, ip
   dca5e:	d202      	bcs.n	dca66 <__multiply+0x4c>
   dca60:	f843 2b04 	str.w	r2, [r3], #4
   dca64:	e7fa      	b.n	dca5c <__multiply+0x42>
   dca66:	f104 0214 	add.w	r2, r4, #20
   dca6a:	f108 0114 	add.w	r1, r8, #20
   dca6e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dca72:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dca76:	9300      	str	r3, [sp, #0]
   dca78:	9b00      	ldr	r3, [sp, #0]
   dca7a:	9201      	str	r2, [sp, #4]
   dca7c:	4293      	cmp	r3, r2
   dca7e:	d957      	bls.n	dcb30 <__multiply+0x116>
   dca80:	f8b2 b000 	ldrh.w	fp, [r2]
   dca84:	f1bb 0f00 	cmp.w	fp, #0
   dca88:	d023      	beq.n	dcad2 <__multiply+0xb8>
   dca8a:	4689      	mov	r9, r1
   dca8c:	46ae      	mov	lr, r5
   dca8e:	f04f 0800 	mov.w	r8, #0
   dca92:	f859 4b04 	ldr.w	r4, [r9], #4
   dca96:	f8be a000 	ldrh.w	sl, [lr]
   dca9a:	b2a3      	uxth	r3, r4
   dca9c:	fb0b a303 	mla	r3, fp, r3, sl
   dcaa0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dcaa4:	f8de 4000 	ldr.w	r4, [lr]
   dcaa8:	4443      	add	r3, r8
   dcaaa:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcaae:	fb0b 840a 	mla	r4, fp, sl, r8
   dcab2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dcab6:	46f2      	mov	sl, lr
   dcab8:	b29b      	uxth	r3, r3
   dcaba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dcabe:	454f      	cmp	r7, r9
   dcac0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcac4:	f84a 3b04 	str.w	r3, [sl], #4
   dcac8:	d901      	bls.n	dcace <__multiply+0xb4>
   dcaca:	46d6      	mov	lr, sl
   dcacc:	e7e1      	b.n	dca92 <__multiply+0x78>
   dcace:	f8ce 8004 	str.w	r8, [lr, #4]
   dcad2:	9b01      	ldr	r3, [sp, #4]
   dcad4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dcad8:	3204      	adds	r2, #4
   dcada:	f1ba 0f00 	cmp.w	sl, #0
   dcade:	d021      	beq.n	dcb24 <__multiply+0x10a>
   dcae0:	682b      	ldr	r3, [r5, #0]
   dcae2:	462c      	mov	r4, r5
   dcae4:	4689      	mov	r9, r1
   dcae6:	f04f 0800 	mov.w	r8, #0
   dcaea:	f8b9 e000 	ldrh.w	lr, [r9]
   dcaee:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dcaf2:	fb0a be0e 	mla	lr, sl, lr, fp
   dcaf6:	44f0      	add	r8, lr
   dcaf8:	46a3      	mov	fp, r4
   dcafa:	b29b      	uxth	r3, r3
   dcafc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dcb00:	f84b 3b04 	str.w	r3, [fp], #4
   dcb04:	f859 3b04 	ldr.w	r3, [r9], #4
   dcb08:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dcb0c:	0c1b      	lsrs	r3, r3, #16
   dcb0e:	fb0a e303 	mla	r3, sl, r3, lr
   dcb12:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dcb16:	454f      	cmp	r7, r9
   dcb18:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dcb1c:	d901      	bls.n	dcb22 <__multiply+0x108>
   dcb1e:	465c      	mov	r4, fp
   dcb20:	e7e3      	b.n	dcaea <__multiply+0xd0>
   dcb22:	6063      	str	r3, [r4, #4]
   dcb24:	3504      	adds	r5, #4
   dcb26:	e7a7      	b.n	dca78 <__multiply+0x5e>
   dcb28:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dcb2c:	b913      	cbnz	r3, dcb34 <__multiply+0x11a>
   dcb2e:	3e01      	subs	r6, #1
   dcb30:	2e00      	cmp	r6, #0
   dcb32:	dcf9      	bgt.n	dcb28 <__multiply+0x10e>
   dcb34:	6106      	str	r6, [r0, #16]
   dcb36:	b003      	add	sp, #12
   dcb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcb3c <__pow5mult>:
   dcb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcb40:	4615      	mov	r5, r2
   dcb42:	f012 0203 	ands.w	r2, r2, #3
   dcb46:	4606      	mov	r6, r0
   dcb48:	460f      	mov	r7, r1
   dcb4a:	d007      	beq.n	dcb5c <__pow5mult+0x20>
   dcb4c:	3a01      	subs	r2, #1
   dcb4e:	4c21      	ldr	r4, [pc, #132]	; (dcbd4 <__pow5mult+0x98>)
   dcb50:	2300      	movs	r3, #0
   dcb52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dcb56:	f7ff fe91 	bl	dc87c <__multadd>
   dcb5a:	4607      	mov	r7, r0
   dcb5c:	10ad      	asrs	r5, r5, #2
   dcb5e:	d036      	beq.n	dcbce <__pow5mult+0x92>
   dcb60:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dcb62:	b93c      	cbnz	r4, dcb74 <__pow5mult+0x38>
   dcb64:	2010      	movs	r0, #16
   dcb66:	f7fa f9c1 	bl	d6eec <malloc>
   dcb6a:	6270      	str	r0, [r6, #36]	; 0x24
   dcb6c:	6044      	str	r4, [r0, #4]
   dcb6e:	6084      	str	r4, [r0, #8]
   dcb70:	6004      	str	r4, [r0, #0]
   dcb72:	60c4      	str	r4, [r0, #12]
   dcb74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dcb78:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dcb7c:	b94c      	cbnz	r4, dcb92 <__pow5mult+0x56>
   dcb7e:	f240 2171 	movw	r1, #625	; 0x271
   dcb82:	4630      	mov	r0, r6
   dcb84:	f7ff ff40 	bl	dca08 <__i2b>
   dcb88:	2300      	movs	r3, #0
   dcb8a:	f8c8 0008 	str.w	r0, [r8, #8]
   dcb8e:	4604      	mov	r4, r0
   dcb90:	6003      	str	r3, [r0, #0]
   dcb92:	f04f 0800 	mov.w	r8, #0
   dcb96:	07eb      	lsls	r3, r5, #31
   dcb98:	d50a      	bpl.n	dcbb0 <__pow5mult+0x74>
   dcb9a:	4639      	mov	r1, r7
   dcb9c:	4622      	mov	r2, r4
   dcb9e:	4630      	mov	r0, r6
   dcba0:	f7ff ff3b 	bl	dca1a <__multiply>
   dcba4:	4639      	mov	r1, r7
   dcba6:	4681      	mov	r9, r0
   dcba8:	4630      	mov	r0, r6
   dcbaa:	f7ff fe50 	bl	dc84e <_Bfree>
   dcbae:	464f      	mov	r7, r9
   dcbb0:	106d      	asrs	r5, r5, #1
   dcbb2:	d00c      	beq.n	dcbce <__pow5mult+0x92>
   dcbb4:	6820      	ldr	r0, [r4, #0]
   dcbb6:	b108      	cbz	r0, dcbbc <__pow5mult+0x80>
   dcbb8:	4604      	mov	r4, r0
   dcbba:	e7ec      	b.n	dcb96 <__pow5mult+0x5a>
   dcbbc:	4622      	mov	r2, r4
   dcbbe:	4621      	mov	r1, r4
   dcbc0:	4630      	mov	r0, r6
   dcbc2:	f7ff ff2a 	bl	dca1a <__multiply>
   dcbc6:	6020      	str	r0, [r4, #0]
   dcbc8:	f8c0 8000 	str.w	r8, [r0]
   dcbcc:	e7f4      	b.n	dcbb8 <__pow5mult+0x7c>
   dcbce:	4638      	mov	r0, r7
   dcbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcbd4:	000ddd98 	.word	0x000ddd98

000dcbd8 <__lshift>:
   dcbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcbdc:	460c      	mov	r4, r1
   dcbde:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcbe2:	6926      	ldr	r6, [r4, #16]
   dcbe4:	6849      	ldr	r1, [r1, #4]
   dcbe6:	68a3      	ldr	r3, [r4, #8]
   dcbe8:	4456      	add	r6, sl
   dcbea:	4607      	mov	r7, r0
   dcbec:	4691      	mov	r9, r2
   dcbee:	1c75      	adds	r5, r6, #1
   dcbf0:	42ab      	cmp	r3, r5
   dcbf2:	da02      	bge.n	dcbfa <__lshift+0x22>
   dcbf4:	3101      	adds	r1, #1
   dcbf6:	005b      	lsls	r3, r3, #1
   dcbf8:	e7fa      	b.n	dcbf0 <__lshift+0x18>
   dcbfa:	4638      	mov	r0, r7
   dcbfc:	f7ff fdf2 	bl	dc7e4 <_Balloc>
   dcc00:	2300      	movs	r3, #0
   dcc02:	4680      	mov	r8, r0
   dcc04:	f100 0114 	add.w	r1, r0, #20
   dcc08:	461a      	mov	r2, r3
   dcc0a:	4553      	cmp	r3, sl
   dcc0c:	da03      	bge.n	dcc16 <__lshift+0x3e>
   dcc0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dcc12:	3301      	adds	r3, #1
   dcc14:	e7f9      	b.n	dcc0a <__lshift+0x32>
   dcc16:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dcc1a:	6920      	ldr	r0, [r4, #16]
   dcc1c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dcc20:	f019 091f 	ands.w	r9, r9, #31
   dcc24:	f104 0114 	add.w	r1, r4, #20
   dcc28:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dcc2c:	d014      	beq.n	dcc58 <__lshift+0x80>
   dcc2e:	f1c9 0c20 	rsb	ip, r9, #32
   dcc32:	2200      	movs	r2, #0
   dcc34:	6808      	ldr	r0, [r1, #0]
   dcc36:	fa00 f009 	lsl.w	r0, r0, r9
   dcc3a:	4302      	orrs	r2, r0
   dcc3c:	469a      	mov	sl, r3
   dcc3e:	f843 2b04 	str.w	r2, [r3], #4
   dcc42:	f851 2b04 	ldr.w	r2, [r1], #4
   dcc46:	458e      	cmp	lr, r1
   dcc48:	fa22 f20c 	lsr.w	r2, r2, ip
   dcc4c:	d8f2      	bhi.n	dcc34 <__lshift+0x5c>
   dcc4e:	f8ca 2004 	str.w	r2, [sl, #4]
   dcc52:	b142      	cbz	r2, dcc66 <__lshift+0x8e>
   dcc54:	1cb5      	adds	r5, r6, #2
   dcc56:	e006      	b.n	dcc66 <__lshift+0x8e>
   dcc58:	3b04      	subs	r3, #4
   dcc5a:	f851 2b04 	ldr.w	r2, [r1], #4
   dcc5e:	f843 2f04 	str.w	r2, [r3, #4]!
   dcc62:	458e      	cmp	lr, r1
   dcc64:	d8f9      	bhi.n	dcc5a <__lshift+0x82>
   dcc66:	3d01      	subs	r5, #1
   dcc68:	4638      	mov	r0, r7
   dcc6a:	f8c8 5010 	str.w	r5, [r8, #16]
   dcc6e:	4621      	mov	r1, r4
   dcc70:	f7ff fded 	bl	dc84e <_Bfree>
   dcc74:	4640      	mov	r0, r8
   dcc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dcc7a <__mcmp>:
   dcc7a:	6903      	ldr	r3, [r0, #16]
   dcc7c:	690a      	ldr	r2, [r1, #16]
   dcc7e:	1a9b      	subs	r3, r3, r2
   dcc80:	b510      	push	{r4, lr}
   dcc82:	d111      	bne.n	dcca8 <__mcmp+0x2e>
   dcc84:	0092      	lsls	r2, r2, #2
   dcc86:	3014      	adds	r0, #20
   dcc88:	3114      	adds	r1, #20
   dcc8a:	1883      	adds	r3, r0, r2
   dcc8c:	440a      	add	r2, r1
   dcc8e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dcc92:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dcc96:	428c      	cmp	r4, r1
   dcc98:	d002      	beq.n	dcca0 <__mcmp+0x26>
   dcc9a:	d307      	bcc.n	dccac <__mcmp+0x32>
   dcc9c:	2001      	movs	r0, #1
   dcc9e:	bd10      	pop	{r4, pc}
   dcca0:	4298      	cmp	r0, r3
   dcca2:	d3f4      	bcc.n	dcc8e <__mcmp+0x14>
   dcca4:	2000      	movs	r0, #0
   dcca6:	bd10      	pop	{r4, pc}
   dcca8:	4618      	mov	r0, r3
   dccaa:	bd10      	pop	{r4, pc}
   dccac:	f04f 30ff 	mov.w	r0, #4294967295
   dccb0:	bd10      	pop	{r4, pc}

000dccb2 <__mdiff>:
   dccb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dccb6:	460c      	mov	r4, r1
   dccb8:	4607      	mov	r7, r0
   dccba:	4611      	mov	r1, r2
   dccbc:	4620      	mov	r0, r4
   dccbe:	4615      	mov	r5, r2
   dccc0:	f7ff ffdb 	bl	dcc7a <__mcmp>
   dccc4:	1e06      	subs	r6, r0, #0
   dccc6:	d108      	bne.n	dccda <__mdiff+0x28>
   dccc8:	4631      	mov	r1, r6
   dccca:	4638      	mov	r0, r7
   dcccc:	f7ff fd8a 	bl	dc7e4 <_Balloc>
   dccd0:	2301      	movs	r3, #1
   dccd2:	6103      	str	r3, [r0, #16]
   dccd4:	6146      	str	r6, [r0, #20]
   dccd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dccda:	bfbc      	itt	lt
   dccdc:	4623      	movlt	r3, r4
   dccde:	462c      	movlt	r4, r5
   dcce0:	4638      	mov	r0, r7
   dcce2:	6861      	ldr	r1, [r4, #4]
   dcce4:	bfba      	itte	lt
   dcce6:	461d      	movlt	r5, r3
   dcce8:	2601      	movlt	r6, #1
   dccea:	2600      	movge	r6, #0
   dccec:	f7ff fd7a 	bl	dc7e4 <_Balloc>
   dccf0:	692b      	ldr	r3, [r5, #16]
   dccf2:	60c6      	str	r6, [r0, #12]
   dccf4:	6926      	ldr	r6, [r4, #16]
   dccf6:	f105 0914 	add.w	r9, r5, #20
   dccfa:	3414      	adds	r4, #20
   dccfc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dcd00:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dcd04:	f100 0514 	add.w	r5, r0, #20
   dcd08:	f04f 0c00 	mov.w	ip, #0
   dcd0c:	f854 3b04 	ldr.w	r3, [r4], #4
   dcd10:	f859 2b04 	ldr.w	r2, [r9], #4
   dcd14:	fa1c f183 	uxtah	r1, ip, r3
   dcd18:	fa1f fe82 	uxth.w	lr, r2
   dcd1c:	0c12      	lsrs	r2, r2, #16
   dcd1e:	ebce 0101 	rsb	r1, lr, r1
   dcd22:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dcd26:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dcd2a:	b289      	uxth	r1, r1
   dcd2c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dcd30:	45c8      	cmp	r8, r9
   dcd32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dcd36:	46a6      	mov	lr, r4
   dcd38:	f845 3b04 	str.w	r3, [r5], #4
   dcd3c:	d8e6      	bhi.n	dcd0c <__mdiff+0x5a>
   dcd3e:	45be      	cmp	lr, r7
   dcd40:	d20e      	bcs.n	dcd60 <__mdiff+0xae>
   dcd42:	f85e 1b04 	ldr.w	r1, [lr], #4
   dcd46:	fa1c f281 	uxtah	r2, ip, r1
   dcd4a:	1413      	asrs	r3, r2, #16
   dcd4c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dcd50:	b292      	uxth	r2, r2
   dcd52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dcd56:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dcd5a:	f845 2b04 	str.w	r2, [r5], #4
   dcd5e:	e7ee      	b.n	dcd3e <__mdiff+0x8c>
   dcd60:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dcd64:	b90b      	cbnz	r3, dcd6a <__mdiff+0xb8>
   dcd66:	3e01      	subs	r6, #1
   dcd68:	e7fa      	b.n	dcd60 <__mdiff+0xae>
   dcd6a:	6106      	str	r6, [r0, #16]
   dcd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcd70 <__ulp>:
   dcd70:	4b12      	ldr	r3, [pc, #72]	; (dcdbc <__ulp+0x4c>)
   dcd72:	ee10 2a90 	vmov	r2, s1
   dcd76:	401a      	ands	r2, r3
   dcd78:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dcd7c:	2b00      	cmp	r3, #0
   dcd7e:	dd02      	ble.n	dcd86 <__ulp+0x16>
   dcd80:	2000      	movs	r0, #0
   dcd82:	4619      	mov	r1, r3
   dcd84:	e017      	b.n	dcdb6 <__ulp+0x46>
   dcd86:	425b      	negs	r3, r3
   dcd88:	151b      	asrs	r3, r3, #20
   dcd8a:	2b13      	cmp	r3, #19
   dcd8c:	f04f 0000 	mov.w	r0, #0
   dcd90:	f04f 0100 	mov.w	r1, #0
   dcd94:	dc04      	bgt.n	dcda0 <__ulp+0x30>
   dcd96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dcd9a:	fa42 f103 	asr.w	r1, r2, r3
   dcd9e:	e00a      	b.n	dcdb6 <__ulp+0x46>
   dcda0:	3b14      	subs	r3, #20
   dcda2:	2b1e      	cmp	r3, #30
   dcda4:	f04f 0201 	mov.w	r2, #1
   dcda8:	bfda      	itte	le
   dcdaa:	f1c3 031f 	rsble	r3, r3, #31
   dcdae:	fa02 f303 	lslle.w	r3, r2, r3
   dcdb2:	4613      	movgt	r3, r2
   dcdb4:	4618      	mov	r0, r3
   dcdb6:	ec41 0b10 	vmov	d0, r0, r1
   dcdba:	4770      	bx	lr
   dcdbc:	7ff00000 	.word	0x7ff00000

000dcdc0 <__b2d>:
   dcdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcdc2:	6905      	ldr	r5, [r0, #16]
   dcdc4:	f100 0614 	add.w	r6, r0, #20
   dcdc8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dcdcc:	1f2f      	subs	r7, r5, #4
   dcdce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcdd2:	4620      	mov	r0, r4
   dcdd4:	f7ff fdcb 	bl	dc96e <__hi0bits>
   dcdd8:	f1c0 0320 	rsb	r3, r0, #32
   dcddc:	280a      	cmp	r0, #10
   dcdde:	600b      	str	r3, [r1, #0]
   dcde0:	dc14      	bgt.n	dce0c <__b2d+0x4c>
   dcde2:	f1c0 0e0b 	rsb	lr, r0, #11
   dcde6:	fa24 f10e 	lsr.w	r1, r4, lr
   dcdea:	42be      	cmp	r6, r7
   dcdec:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dcdf0:	bf34      	ite	cc
   dcdf2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcdf6:	2100      	movcs	r1, #0
   dcdf8:	3015      	adds	r0, #21
   dcdfa:	fa04 f000 	lsl.w	r0, r4, r0
   dcdfe:	fa21 f10e 	lsr.w	r1, r1, lr
   dce02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dce06:	ea40 0201 	orr.w	r2, r0, r1
   dce0a:	e023      	b.n	dce54 <__b2d+0x94>
   dce0c:	42be      	cmp	r6, r7
   dce0e:	bf3a      	itte	cc
   dce10:	f1a5 0708 	subcc.w	r7, r5, #8
   dce14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dce18:	2100      	movcs	r1, #0
   dce1a:	380b      	subs	r0, #11
   dce1c:	d015      	beq.n	dce4a <__b2d+0x8a>
   dce1e:	4084      	lsls	r4, r0
   dce20:	f1c0 0520 	rsb	r5, r0, #32
   dce24:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dce28:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dce2c:	42b7      	cmp	r7, r6
   dce2e:	fa21 fe05 	lsr.w	lr, r1, r5
   dce32:	ea44 030e 	orr.w	r3, r4, lr
   dce36:	bf8c      	ite	hi
   dce38:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dce3c:	2400      	movls	r4, #0
   dce3e:	fa01 f000 	lsl.w	r0, r1, r0
   dce42:	40ec      	lsrs	r4, r5
   dce44:	ea40 0204 	orr.w	r2, r0, r4
   dce48:	e004      	b.n	dce54 <__b2d+0x94>
   dce4a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dce4e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dce52:	460a      	mov	r2, r1
   dce54:	ec43 2b10 	vmov	d0, r2, r3
   dce58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dce5a <__d2b>:
   dce5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dce5e:	460e      	mov	r6, r1
   dce60:	2101      	movs	r1, #1
   dce62:	ec59 8b10 	vmov	r8, r9, d0
   dce66:	4615      	mov	r5, r2
   dce68:	f7ff fcbc 	bl	dc7e4 <_Balloc>
   dce6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dce70:	4607      	mov	r7, r0
   dce72:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dce76:	b10c      	cbz	r4, dce7c <__d2b+0x22>
   dce78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dce7c:	9301      	str	r3, [sp, #4]
   dce7e:	f1b8 0f00 	cmp.w	r8, #0
   dce82:	d019      	beq.n	dceb8 <__d2b+0x5e>
   dce84:	a802      	add	r0, sp, #8
   dce86:	f840 8d08 	str.w	r8, [r0, #-8]!
   dce8a:	f7ff fd90 	bl	dc9ae <__lo0bits>
   dce8e:	9b00      	ldr	r3, [sp, #0]
   dce90:	b148      	cbz	r0, dcea6 <__d2b+0x4c>
   dce92:	9a01      	ldr	r2, [sp, #4]
   dce94:	f1c0 0120 	rsb	r1, r0, #32
   dce98:	fa02 f101 	lsl.w	r1, r2, r1
   dce9c:	430b      	orrs	r3, r1
   dce9e:	40c2      	lsrs	r2, r0
   dcea0:	617b      	str	r3, [r7, #20]
   dcea2:	9201      	str	r2, [sp, #4]
   dcea4:	e000      	b.n	dcea8 <__d2b+0x4e>
   dcea6:	617b      	str	r3, [r7, #20]
   dcea8:	9b01      	ldr	r3, [sp, #4]
   dceaa:	61bb      	str	r3, [r7, #24]
   dceac:	2b00      	cmp	r3, #0
   dceae:	bf14      	ite	ne
   dceb0:	2102      	movne	r1, #2
   dceb2:	2101      	moveq	r1, #1
   dceb4:	6139      	str	r1, [r7, #16]
   dceb6:	e007      	b.n	dcec8 <__d2b+0x6e>
   dceb8:	a801      	add	r0, sp, #4
   dceba:	f7ff fd78 	bl	dc9ae <__lo0bits>
   dcebe:	9b01      	ldr	r3, [sp, #4]
   dcec0:	617b      	str	r3, [r7, #20]
   dcec2:	2101      	movs	r1, #1
   dcec4:	6139      	str	r1, [r7, #16]
   dcec6:	3020      	adds	r0, #32
   dcec8:	b134      	cbz	r4, dced8 <__d2b+0x7e>
   dceca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dcece:	4404      	add	r4, r0
   dced0:	6034      	str	r4, [r6, #0]
   dced2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dced6:	e009      	b.n	dceec <__d2b+0x92>
   dced8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dcedc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dcee0:	6030      	str	r0, [r6, #0]
   dcee2:	6918      	ldr	r0, [r3, #16]
   dcee4:	f7ff fd43 	bl	dc96e <__hi0bits>
   dcee8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dceec:	6028      	str	r0, [r5, #0]
   dceee:	4638      	mov	r0, r7
   dcef0:	b003      	add	sp, #12
   dcef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcef6 <__ratio>:
   dcef6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcefa:	4688      	mov	r8, r1
   dcefc:	4669      	mov	r1, sp
   dcefe:	4681      	mov	r9, r0
   dcf00:	f7ff ff5e 	bl	dcdc0 <__b2d>
   dcf04:	a901      	add	r1, sp, #4
   dcf06:	4640      	mov	r0, r8
   dcf08:	ec55 4b10 	vmov	r4, r5, d0
   dcf0c:	f7ff ff58 	bl	dcdc0 <__b2d>
   dcf10:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcf14:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcf18:	1a9a      	subs	r2, r3, r2
   dcf1a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dcf1e:	1ac9      	subs	r1, r1, r3
   dcf20:	ec57 6b10 	vmov	r6, r7, d0
   dcf24:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dcf28:	2b00      	cmp	r3, #0
   dcf2a:	bfcc      	ite	gt
   dcf2c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dcf30:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dcf34:	4632      	mov	r2, r6
   dcf36:	463b      	mov	r3, r7
   dcf38:	4620      	mov	r0, r4
   dcf3a:	4629      	mov	r1, r5
   dcf3c:	f7fd faec 	bl	da518 <__aeabi_ddiv>
   dcf40:	ec41 0b10 	vmov	d0, r0, r1
   dcf44:	b003      	add	sp, #12
   dcf46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcf4a <__copybits>:
   dcf4a:	3901      	subs	r1, #1
   dcf4c:	b510      	push	{r4, lr}
   dcf4e:	1149      	asrs	r1, r1, #5
   dcf50:	6914      	ldr	r4, [r2, #16]
   dcf52:	3101      	adds	r1, #1
   dcf54:	f102 0314 	add.w	r3, r2, #20
   dcf58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dcf5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcf60:	42a3      	cmp	r3, r4
   dcf62:	4602      	mov	r2, r0
   dcf64:	d204      	bcs.n	dcf70 <__copybits+0x26>
   dcf66:	f853 2b04 	ldr.w	r2, [r3], #4
   dcf6a:	f840 2b04 	str.w	r2, [r0], #4
   dcf6e:	e7f7      	b.n	dcf60 <__copybits+0x16>
   dcf70:	2300      	movs	r3, #0
   dcf72:	428a      	cmp	r2, r1
   dcf74:	d202      	bcs.n	dcf7c <__copybits+0x32>
   dcf76:	f842 3b04 	str.w	r3, [r2], #4
   dcf7a:	e7fa      	b.n	dcf72 <__copybits+0x28>
   dcf7c:	bd10      	pop	{r4, pc}

000dcf7e <__any_on>:
   dcf7e:	f100 0214 	add.w	r2, r0, #20
   dcf82:	6900      	ldr	r0, [r0, #16]
   dcf84:	114b      	asrs	r3, r1, #5
   dcf86:	4298      	cmp	r0, r3
   dcf88:	b510      	push	{r4, lr}
   dcf8a:	db0c      	blt.n	dcfa6 <__any_on+0x28>
   dcf8c:	dd0c      	ble.n	dcfa8 <__any_on+0x2a>
   dcf8e:	f011 011f 	ands.w	r1, r1, #31
   dcf92:	d009      	beq.n	dcfa8 <__any_on+0x2a>
   dcf94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcf98:	fa24 f001 	lsr.w	r0, r4, r1
   dcf9c:	fa00 f101 	lsl.w	r1, r0, r1
   dcfa0:	428c      	cmp	r4, r1
   dcfa2:	d10c      	bne.n	dcfbe <__any_on+0x40>
   dcfa4:	e000      	b.n	dcfa8 <__any_on+0x2a>
   dcfa6:	4603      	mov	r3, r0
   dcfa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcfac:	4293      	cmp	r3, r2
   dcfae:	d904      	bls.n	dcfba <__any_on+0x3c>
   dcfb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcfb4:	2900      	cmp	r1, #0
   dcfb6:	d0f9      	beq.n	dcfac <__any_on+0x2e>
   dcfb8:	e001      	b.n	dcfbe <__any_on+0x40>
   dcfba:	2000      	movs	r0, #0
   dcfbc:	bd10      	pop	{r4, pc}
   dcfbe:	2001      	movs	r0, #1
   dcfc0:	bd10      	pop	{r4, pc}

000dcfc2 <_calloc_r>:
   dcfc2:	b538      	push	{r3, r4, r5, lr}
   dcfc4:	fb02 f401 	mul.w	r4, r2, r1
   dcfc8:	4621      	mov	r1, r4
   dcfca:	f7f9 ffd7 	bl	d6f7c <_malloc_r>
   dcfce:	4605      	mov	r5, r0
   dcfd0:	b118      	cbz	r0, dcfda <_calloc_r+0x18>
   dcfd2:	4622      	mov	r2, r4
   dcfd4:	2100      	movs	r1, #0
   dcfd6:	f7fd fdee 	bl	dabb6 <memset>
   dcfda:	4628      	mov	r0, r5
   dcfdc:	bd38      	pop	{r3, r4, r5, pc}

000dcfde <__env_lock>:
   dcfde:	4770      	bx	lr

000dcfe0 <__env_unlock>:
   dcfe0:	4770      	bx	lr

000dcfe2 <link_code_end>:
	...

000dcfe4 <dynalib_user>:
   dcfe4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dcff4:	0000 0000                                   ....

000dcff8 <_ZTVN8particle13__SPISettingsE>:
	...
   dd000:	40d5 000d                                   .@..

000dd004 <_ZTV4File>:
	...
   dd00c:	40d3 000d 412d 000d 416d 000d 4167 000d     .@..-A..mA..gA..
   dd01c:	40b7 000d 4147 000d 4141 000d 413b 000d     .@..GA..AA..;A..
   dd02c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   dd03c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   dd04c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   dd05c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   dd06c:	2545 3e64 4200 746f 6431 7461 2500 3230     E%d>.Bot1dat.%02
   dd07c:	2564 3230 2564 3430 2564 3230 2564 3230     d%02d%04d%02d%02
   dd08c:	2564 3230 0064 6157 6574 4272 746f 5f00     d%02d.WaterBot._
   dd09c:	4f4c 2e47 7874 0074 7245 6f72 3a72 6320     LOG.txt.Error: c
   dd0ac:	756f 646c 6e20 746f 6320 6e6f 656e 7463     ould not connect
   dd0bc:	7420 206f 4453 6320 7261 2164 2500 2573      to SD card!.%s%
   dd0cc:	3230 0078 6966 656c 616e 656d 4600 6c69     02x.filename.Fil
   dd0dc:	2065 2527 2773 6120 726c 6165 7964 6520     e '%s' already e
   dd0ec:	6978 7473 2c73 6420 6c65 7465 6e69 2067     xists, deleting 
   dd0fc:	6e61 2064 766f 7265 7277 7469 6e69 0067     and overwriting.
   dd10c:	7453 7261 6974 676e 6f20 6666 6f6c 6461     Starting offload
   dd11c:	6f20 2066 6966 656c 203a 7325 6600 6c69      of file: %s.fil
   dd12c:	6365 6d6f 0070 6552 6361 6568 2064 6e65     ecomp.Reached en
   dd13c:	2064 666f 6620 6c69 3a65 2520 0073 6966     d of file: %s.fi
   dd14c:	656c 6f64 656e 5200 6365 6965 6576 2064     ledone.Received 
   dd15c:	6f64 656e 6320 6d6f 616d 646e 4300 6568     done command.Che
   dd16c:	6b63 7573 3a6d 2520 3230 2c78 2520 3330     cksum: %02x, %03
   dd17c:	0064 7453 6972 676e 4c20 6e65 203a 6425     d.String Len: %d
   dd18c:	202c 6843 6365 736b 6d75 203a 6425 5b00     , Checksum: %d.[
   dd19c:	4157 4e52 205d 654d 7373 6761 2065 6843     WARN] Message Ch
   dd1ac:	6365 736b 6d75 4420 656f 2073 6f4e 2074     ecksum Does Not 
   dd1bc:	614d 6374 2168 203a 7325 5700 7261 696e     Match!: %s.Warni
   dd1cc:	676e 202c 6863 6365 736b 6d75 6420 656f     ng, checksum doe
   dd1dc:	2073 6f6e 2074 616d 6374 0068 4343 3225     s not match.CC%2
   dd1ec:	6e73 6b61 3325 0073 6361 006b 7573 0070     snak%3s.ack.sup.
   dd1fc:	7525 2520 2075 7325 2520 0073 7453 7461     %u %u %s %s.Stat
   dd20c:	7375 5520 6470 7461 2165 2300 2323 2323     us Update!.#####
   dd21c:	2323 2323 2323 2323 2323 2323 2323 2323     ################
   dd22c:	2323 2323 0023 2323 2020 2020 5320 4154     #####.##     STA
   dd23c:	5554 2053 5055 4144 4554 2020 2020 2323     TUS UPDATE    ##
   dd24c:	2300 2023 2020 2020 2020 6f42 2074 3a23     .##       Bot #:
   dd25c:	2520 6431 2020 2020 2020 2323 2300 2023      %1d      ##.## 
   dd26c:	2020 2020 4220 7461 2074 3a25 2520 3330          Batt %: %03
   dd27c:	2064 2020 2020 2323 2300 2023 2020 4c20     d     ##.##    L
   dd28c:	4554 2020 4c42 2045 5820 6542 2065 2020     TE  BLE  XBee   
   dd29c:	2320 0023 2323 2020 2020 2520 2064 2020      ##.##     %d   
   dd2ac:	2520 2064 2020 2020 6425 2020 2020 2320      %d     %d     #
   dd2bc:	0023 2323 2020 614c 6974 7574 6564 4c20     #.##  Latitude L
   dd2cc:	6e6f 6967 7574 6564 2020 2323 2300 2023     ongitude  ##.## 
   dd2dc:	2e25 6636 2520 362e 2066 2323 4600 756f     %.6f %.6f ##.Fou
   dd2ec:	646e 6120 6e20 7765 7720 7461 7265 6220     nd a new water b
   dd2fc:	746f 4920 0044 7525 2520 2075 6625 2520     ot ID.%u %u %f %
   dd30c:	0066 616e 006b 7470 0073 6152 5777 6972     f.nak.pts.RawWri
   dd31c:	6574 742e 7478 4c00 4554 5800 6542 0065     te.txt.LTE.XBee.
   dd32c:	6c42 6575 6f74 746f 0068 654e 2077 7473     Bluetooth.New st
   dd33c:	6972 676e 6620 6f72 206d 7325 203a 5b00     ring from %s: .[
   dd34c:	4e49 4f46 205d 6552 6563 7669 6465 4c20     INFO] Received L
   dd35c:	4554 4d20 7365 6173 6567 203a 7325 4e00     TE Message: %s.N
   dd36c:	7765 4220 2054 6f43 6d6d 6e61 3a64 0020     ew BT Command: .
   dd37c:	495b 464e 5d4f 5220 6365 6965 6576 2064     [INFO] Received 
   dd38c:	4c42 2045 654d 7373 6761 3a65 2520 0073     BLE Message: %s.
   dd39c:	654e 2077 4258 6565 4320 6d6f 616d 646e     New XBee Command
   dd3ac:	003a 495b 464e 5d4f 5220 6365 6965 6576     :.[INFO] Receive
   dd3bc:	2064 4258 6565 4d20 7365 6173 6567 203a     d XBee Message: 
   dd3cc:	7325 4300 6e6f 656e 7463 6465 7420 206f     %s.Connected to 
   dd3dc:	6f42 2074 6425 2f00 4500 7272 726f 202c     Bot %d./.Error, 
   dd3ec:	6f63 6c75 2064 6f6e 2074 706f 6e65 7220     could not open r
   dd3fc:	6f6f 2074 6964 6572 7463 726f 2079 6e6f     oot directory on
   dd40c:	5320 2044 6143 6472 202e 7349 6920 2074      SD Card. Is it 
   dd41c:	6e69 6573 7472 6465 003f 4343 2542 6464     inserted?.CCB%dd
   dd42c:	706d 5200 7165 6575 7473 6465 5320 2044     mp.Requested SD 
   dd43c:	6143 6472 4420 7461 2061 7266 6d6f 4220     Card Data from B
   dd44c:	746f 2520 2064 764f 7265 4220 454c 000a     ot %d Over BLE..
   dd45c:	7543 7272 6e65 6c74 2079 6f63 6e6e 6365     Currently connec
   dd46c:	6574 2064 6f74 4220 746f 2520 2c66 6e20     ted to Bot %f, n
   dd47c:	6565 2064 6f74 6320 6e6f 656e 7463 7420     eed to connect t
   dd48c:	206f 6f42 2074 6425 5300 6375 6563 7373     o Bot %d.Success
   dd49c:	7566 6c6c 2079 6f63 6e6e 6365 6574 2064     fully connected 
   dd4ac:	6f74 4220 746f 2520 0064 7453 7261 6974     to Bot %d.Starti
   dd4bc:	676e 6620 6c69 2065 7274 6e61 6673 7265     ng file transfer
   dd4cc:	6620 6f72 206d 6f42 2074 6425 4600 6e69      from Bot %d.Fin
   dd4dc:	7369 6568 2064 7274 6e61 6673 7265 6972     ished transferri
   dd4ec:	676e 6620 6c69 2065 7266 6d6f 4220 746f     ng file from Bot
   dd4fc:	2520 0064 4343 3142 7470 6273 6769 6f62      %d.CCB1ptsbigbo
   dd50c:	0074 3462 3032 3936 3031 642d 3463 2d62     t.b4206910-dc4b-
   dd51c:	3735 3334 632d 6238 2d31 3239 3064 3765     5743-c8b1-92d0e7
   dd52c:	3135 3238 3062 6200 3234 3630 3139 2d32     5182b0.b4206912-
   dd53c:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   dd54c:	6432 6530 3537 3831 6232 0030 3462 3032     2d0e75182b0.b420
   dd55c:	3936 3331 642d 3463 2d62 3735 3334 632d     6913-dc4b-5743-c
   dd56c:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   dd57c:	6200 3234 3630 3139 2d34 6364 6234 352d     .b4206914-dc4b-5
   dd58c:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   dd59c:	3831 6232 0030 0000                         182b0...

000dd5a4 <_ZTVN5spark13EthernetClassE>:
	...
   dd5ac:	6feb 000d 6fe1 000d 6fd7 000d 6fcd 000d     .o...o...o...o..
   dd5bc:	6fc1 000d 6fb5 000d 6fa9 000d 6fa1 000d     .o...o...o...o..
   dd5cc:	6f97 000d 6f8d 000d 9a5d 000d               .o...o..]...

000dd5d8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd5d8:	0800 1810 2820 3830                         .... (08

000dd5e0 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd5e8:	733d 000d 7343 000d 874d 000d 736d 000d     =s..Cs..M...ms..
   dd5f8:	733f 000d                                   ?s..

000dd5fc <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd604:	7337 000d 7351 000d 8909 000d 7371 000d     7s..Qs......qs..
   dd614:	7339 000d                                   9s..

000dd618 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd620:	7331 000d 735f 000d 7de9 000d 7375 000d     1s.._s...}..us..
   dd630:	7333 000d 6977 6972 676e 622e 656c 5300     3s..wiring.ble.S
   dd640:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   dd650:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   dd660:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   dd670:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   dd680:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   dd690:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   dd6a0:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   dd6b0:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   dd6c0:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   dd6d0:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   dd6e0:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   dd6f0:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   dd700:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   dd710:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   dd720:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   dd730:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   dd740:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   dd750:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   dd760:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   dd770:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   dd780:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   dd790:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   dd7a0:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   dd7b0:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   dd7c0:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   dd7d0:	6465 002e                                   ed..

000dd7d4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dd7d4:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   dd7e4:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dd7f4:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dd804:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   dd814:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   dd824:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   dd834:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   dd844:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   dd854:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   dd864:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   dd874:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   dd884:	0020 0a0d 6c00 006e 6e66 6300 646f 0065      ....ln.fn.code.
   dd894:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   dd8a4:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   dd8b4:	0072 6170 696e 0063 6c61 006c 2b25 3330     r.panic.all.%+03
   dd8c4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   dd8d4:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   dd8e4:	656d 0000                                   me..

000dd8e8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd8f0:	8eb5 000d 8ebb 000d 8eff 000d 8ec9 000d     ................
   dd900:	8eb7 000d                                   ....

000dd904 <_ZTV9IPAddress>:
	...
   dd90c:	944d 000d 943d 000d 943f 000d               M...=...?...

000dd918 <_ZTV9USBSerial>:
	...
   dd920:	9525 000d 9575 000d 9583 000d 8a55 000d     %...u.......U...
   dd930:	9561 000d 9527 000d 953d 000d 956f 000d     a...'...=...o...
   dd940:	9553 000d 9521 000d                         S...!...

000dd948 <_ZTVN5spark13CellularClassE>:
	...
   dd950:	968f 000d 9685 000d 967b 000d 9631 000d     ........{...1...
   dd960:	966f 000d 9663 000d 9657 000d 964f 000d     o...c...W...O...
   dd970:	9645 000d 963b 000d 9a5d 000d               E...;...]...

000dd97c <_ZTV11USARTSerial>:
	...
   dd984:	96c9 000d 9719 000d 9727 000d 8a55 000d     ........'...U...
   dd994:	96dd 000d 96ff 000d 96eb 000d 9713 000d     ................
   dd9a4:	96cb 000d 96cf 000d                         ........

000dd9ac <_ZTV7TwoWire>:
	...
   dd9b4:	97f5 000d 983f 000d 9817 000d 97f7 000d     ....?...........
   dd9c4:	981f 000d 9827 000d 982f 000d 9837 000d     ....'.../...7...

000dd9d4 <_ZTVN5spark9MeshClassE>:
	...
   dd9dc:	98d7 000d 98cd 000d 98c3 000d 98b9 000d     ................
   dd9ec:	98ad 000d 98a1 000d 9895 000d 988d 000d     ................
   dd9fc:	9883 000d 9879 000d 9a5d 000d               ....y...]...

000dda08 <_ZTVN5spark12NetworkClassE>:
	...
   dda10:	99f5 000d 99ff 000d 9a09 000d 9a13 000d     ................
   dda20:	9a1d 000d 9a29 000d 9a35 000d 9a41 000d     ....)...5...A...
   dda30:	9a49 000d 9a53 000d 9a5d 000d               I...S...]...

000dda3c <_ZSt7nothrow>:
	...

000dda3d <_ctype_>:
   dda3d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dda4d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dda5d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dda6d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dda7d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dda8d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dda9d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddaad:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddabd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddb40 <__sf_fake_stdin>:
	...

000ddb60 <__sf_fake_stdout>:
	...

000ddb80 <__sf_fake_stderr>:
	...
   ddba0:	0043 4f50 4953 0058                         C.POSIX.

000ddba8 <__month_lengths>:
   ddba8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddbb8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbc8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddbd8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddbe8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbf8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddc08 <fpi.5344>:
   ddc08:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddc18:	0000 0000                                   ....

000ddc1c <fpinan.5380>:
   ddc1c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ddc2c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   ddc3c:	0000 0000                                   ....

000ddc40 <tinytens>:
   ddc40:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddc50:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddc60:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   ddc70:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   ddc80:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   ddc90:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   ddca0:	2575 006e 0000 0000                         u%n.....

000ddca8 <__mprec_tens>:
   ddca8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ddcb8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ddcc8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ddcd8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ddce8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ddcf8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ddd08:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ddd18:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ddd28:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ddd38:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ddd48:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ddd58:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ddd68:	9db4 79d9 7843 44ea                         ...yCx.D

000ddd70 <__mprec_bigtens>:
   ddd70:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ddd80:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ddd90:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ddd98 <p05.5387>:
   ddd98:	0005 0000 0019 0000 007d 0000               ........}...

000ddda4 <link_const_variable_data_end>:
   ddda4:	000d4f99 	.word	0x000d4f99
   ddda8:	000d516d 	.word	0x000d516d
   dddac:	000d5171 	.word	0x000d5171
   dddb0:	000d588d 	.word	0x000d588d
   dddb4:	000d5891 	.word	0x000d5891
   dddb8:	000d5895 	.word	0x000d5895
   dddbc:	000d5899 	.word	0x000d5899
   dddc0:	000d5f8d 	.word	0x000d5f8d
   dddc4:	000d5fb1 	.word	0x000d5fb1
   dddc8:	000d5fb5 	.word	0x000d5fb5
   dddcc:	000d62d9 	.word	0x000d62d9
   dddd0:	000d62dd 	.word	0x000d62dd
   dddd4:	000d62e1 	.word	0x000d62e1
   dddd8:	000d681b 	.word	0x000d681b
   ddddc:	000d681f 	.word	0x000d681f
   ddde0:	000d6823 	.word	0x000d6823
   ddde4:	000d68c9 	.word	0x000d68c9
   ddde8:	000d6ff5 	.word	0x000d6ff5
   dddec:	000d7195 	.word	0x000d7195
   dddf0:	000d8a2d 	.word	0x000d8a2d
   dddf4:	000d8bc9 	.word	0x000d8bc9
   dddf8:	000d8d31 	.word	0x000d8d31
   dddfc:	000d8d89 	.word	0x000d8d89
   dde00:	000d9699 	.word	0x000d9699
   dde04:	000d99a5 	.word	0x000d99a5
   dde08:	000d9b29 	.word	0x000d9b29
   dde0c:	000d9cc5 	.word	0x000d9cc5
   dde10:	000d9d49 	.word	0x000d9d49
   dde14:	000d9e0d 	.word	0x000d9e0d
   dde18:	000d9ed1 	.word	0x000d9ed1

000dde1c <link_constructors_end>:
   dde1c:	00000000 	.word	0x00000000
