
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/1.5.2/boron/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a440  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000de460  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003d538  000de464  0001d538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000011c8  2003d628  2003d628  0002d628  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000de554  000de554  0001e554  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000de57c  000de57c  0001e57c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019ae59  00000000  00000000  0001e580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f3aa  00000000  00000000  001b93d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002d27f  00000000  00000000  001d8783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003240  00000000  00000000  00205a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006228  00000000  00000000  00208c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004da9f  00000000  00000000  0020ee6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00054d95  00000000  00000000  0025c909  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117424  00000000  00000000  002b169e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fd64  00000000  00000000  003c8ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f89a 	bl	db16a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f8ba 	bl	db1b6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d538 	.word	0x2003d538
   d404c:	000de464 	.word	0x000de464
   d4050:	2003d628 	.word	0x2003d628
   d4054:	2003d628 	.word	0x2003d628
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f006 f82d 	bl	da0bc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000de454 	.word	0x000de454
   d4084:	000de3dc 	.word	0x000de3dc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b83e 	b.w	d5108 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f995 	bl	d53bc <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bfd3 	b.w	da040 <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 ba25 	b.w	d74e8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 ba2b 	b.w	d74f8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 ba29 	b.w	d74f8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b6:	7c03      	ldrb	r3, [r0, #16]
   d40b8:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40bc:	4602      	mov	r2, r0
   d40be:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40c2:	b12b      	cbz	r3, d40d0 <_ZN4File9availableEv+0x1a>
   d40c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c8:	1a18      	subs	r0, r3, r0
   d40ca:	bf48      	it	mi
   d40cc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40d0:	4770      	bx	lr
	...

000d40d4 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z12actionTimer5v+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
   d40da:	4770      	bx	lr
   d40dc:	2003d64c 	.word	0x2003d64c

000d40e0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e0:	6803      	ldr	r3, [r0, #0]
   d40e2:	4718      	bx	r3

000d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40e4:	2a01      	cmp	r2, #1
   d40e6:	d002      	beq.n	d40ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40e8:	2a02      	cmp	r2, #2
   d40ea:	d002      	beq.n	d40f2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40ec:	e004      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40ee:	6001      	str	r1, [r0, #0]
	      break;
   d40f0:	e002      	b.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f2:	680b      	ldr	r3, [r1, #0]
   d40f4:	b100      	cbz	r0, d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40f6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40f8:	2000      	movs	r0, #0
   d40fa:	4770      	bx	lr

000d40fc <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40fc:	4770      	bx	lr
	...

000d4100 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4100:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4102:	4602      	mov	r2, r0
   d4104:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4106:	7913      	ldrb	r3, [r2, #4]
   d4108:	6895      	ldr	r5, [r2, #8]
   d410a:	b133      	cbz	r3, d411a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d410c:	b93d      	cbnz	r5, d411e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d410e:	490c      	ldr	r1, [pc, #48]	; (d4140 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4110:	b004      	add	sp, #16
   d4112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4116:	f005 bb67 	b.w	d97e8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d411a:	4b0a      	ldr	r3, [pc, #40]	; (d4144 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d411c:	e000      	b.n	d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d411e:	4b0a      	ldr	r3, [pc, #40]	; (d4148 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4120:	7b16      	ldrb	r6, [r2, #12]
   d4122:	4c0a      	ldr	r4, [pc, #40]	; (d414c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4124:	490a      	ldr	r1, [pc, #40]	; (d4150 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4126:	7b52      	ldrb	r2, [r2, #13]
   d4128:	9202      	str	r2, [sp, #8]
   d412a:	2e01      	cmp	r6, #1
   d412c:	bf08      	it	eq
   d412e:	4621      	moveq	r1, r4
   d4130:	9101      	str	r1, [sp, #4]
   d4132:	9500      	str	r5, [sp, #0]
   d4134:	4a07      	ldr	r2, [pc, #28]	; (d4154 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4136:	2100      	movs	r1, #0
   d4138:	f005 fb93 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
  }
   d413c:	b004      	add	sp, #16
   d413e:	bd70      	pop	{r4, r5, r6, pc}
   d4140:	000dd651 	.word	0x000dd651
   d4144:	000ddf44 	.word	0x000ddf44
   d4148:	000dd640 	.word	0x000dd640
   d414c:	000dd649 	.word	0x000dd649
   d4150:	000dd64d 	.word	0x000dd64d
   d4154:	000dd667 	.word	0x000dd667

000d4158 <_ZN4FileD0Ev>:
   d4158:	b510      	push	{r4, lr}
   d415a:	2134      	movs	r1, #52	; 0x34
   d415c:	4604      	mov	r4, r0
   d415e:	f006 f892 	bl	da286 <_ZdlPvj>
   d4162:	4620      	mov	r0, r4
   d4164:	bd10      	pop	{r4, pc}

000d4166 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4166:	6943      	ldr	r3, [r0, #20]
   d4168:	b113      	cbz	r3, d4170 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d416a:	6983      	ldr	r3, [r0, #24]
   d416c:	300c      	adds	r0, #12
   d416e:	4718      	bx	r3
   d4170:	4770      	bx	lr

000d4172 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4172:	3010      	adds	r0, #16
   d4174:	f001 bcd4 	b.w	d5b20 <_ZN7FatFile4syncEv>

000d4178 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4178:	3010      	adds	r0, #16
   d417a:	f001 bbe9 	b.w	d5950 <_ZN7FatFile4peekEv>

000d417e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d417e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4180:	2201      	movs	r2, #1
   d4182:	f10d 0107 	add.w	r1, sp, #7
   d4186:	3010      	adds	r0, #16
   d4188:	f001 fb2f 	bl	d57ea <_ZN7FatFile4readEPvj>
   d418c:	2801      	cmp	r0, #1
   d418e:	bf0c      	ite	eq
   d4190:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4194:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d4198:	b003      	add	sp, #12
   d419a:	f85d fb04 	ldr.w	pc, [sp], #4

000d419e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d419e:	3010      	adds	r0, #16
   d41a0:	f001 bd5e 	b.w	d5c60 <_ZN7FatFile5writeEPKvj>

000d41a4 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d41a4:	b507      	push	{r0, r1, r2, lr}
   d41a6:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d41a8:	2201      	movs	r2, #1
   d41aa:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d41ae:	3010      	adds	r0, #16
   d41b0:	4619      	mov	r1, r3
   d41b2:	f001 fd55 	bl	d5c60 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d41b6:	b003      	add	sp, #12
   d41b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d41bc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41bc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41be:	2100      	movs	r1, #0
   d41c0:	4604      	mov	r4, r0
   d41c2:	4608      	mov	r0, r1
   d41c4:	f002 fefc 	bl	d6fc0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41c8:	a902      	add	r1, sp, #8
   d41ca:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41cc:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41ce:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d41d2:	f002 ff0d 	bl	d6ff0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41d6:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41d8:	b10c      	cbz	r4, d41de <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d41da:	2301      	movs	r3, #1
   d41dc:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41de:	2100      	movs	r1, #0
   d41e0:	2001      	movs	r0, #1
   d41e2:	f002 feed 	bl	d6fc0 <os_thread_scheduling>
            }
        }
        if (t) {
   d41e6:	b12c      	cbz	r4, d41f4 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d41e8:	6823      	ldr	r3, [r4, #0]
   d41ea:	4620      	mov	r0, r4
   d41ec:	689b      	ldr	r3, [r3, #8]
   d41ee:	4798      	blx	r3
            t->running = false;
   d41f0:	2300      	movs	r3, #0
   d41f2:	7123      	strb	r3, [r4, #4]
        }
    }
   d41f4:	b002      	add	sp, #8
   d41f6:	bd10      	pop	{r4, pc}

000d41f8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41f8:	b510      	push	{r4, lr}
   d41fa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41fc:	6800      	ldr	r0, [r0, #0]
   d41fe:	b108      	cbz	r0, d4204 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4200:	f003 f97a 	bl	d74f8 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4204:	4620      	mov	r0, r4
   d4206:	bd10      	pop	{r4, pc}

000d4208 <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   d4208:	4b0b      	ldr	r3, [pc, #44]	; (d4238 <_Z13actionTimer60v+0x30>)
   d420a:	6858      	ldr	r0, [r3, #4]
   d420c:	681b      	ldr	r3, [r3, #0]
        w.timeoutCount++;
    }
}

void actionTimer60(){
    bool reqLTEStatus = false;
   d420e:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   d4210:	4298      	cmp	r0, r3
   d4212:	d005      	beq.n	d4220 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   d4214:	6959      	ldr	r1, [r3, #20]
            reqLTEStatus = true;
   d4216:	2925      	cmp	r1, #37	; 0x25
   d4218:	bf28      	it	cs
   d421a:	2201      	movcs	r2, #1
   d421c:	3318      	adds	r3, #24
   d421e:	e7f7      	b.n	d4210 <_Z13actionTimer60v+0x8>
            w.timeoutCount = 0;            
        }
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   d4220:	b142      	cbz	r2, d4234 <_Z13actionTimer60v+0x2c>
   d4222:	4a06      	ldr	r2, [pc, #24]	; (d423c <_Z13actionTimer60v+0x34>)
   d4224:	7813      	ldrb	r3, [r2, #0]
   d4226:	2b18      	cmp	r3, #24
   d4228:	d804      	bhi.n	d4234 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   d422a:	3301      	adds	r3, #1
   d422c:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   d422e:	4b04      	ldr	r3, [pc, #16]	; (d4240 <_Z13actionTimer60v+0x38>)
   d4230:	2201      	movs	r2, #1
   d4232:	701a      	strb	r2, [r3, #0]
   d4234:	4770      	bx	lr
   d4236:	bf00      	nop
   d4238:	2003d640 	.word	0x2003d640
   d423c:	2003db74 	.word	0x2003db74
   d4240:	2003e291 	.word	0x2003e291

000d4244 <_ZNSt12_Vector_baseI7PairBotSaIS0_EE13_M_deallocateEPS0_j.isra.35>:

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4244:	b108      	cbz	r0, d424a <_ZNSt12_Vector_baseI7PairBotSaIS0_EE13_M_deallocateEPS0_j.isra.35+0x6>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4246:	f7ff bf2a 	b.w	d409e <_ZdlPv>
   d424a:	4770      	bx	lr

000d424c <_ZNSt6vectorI8WaterBotSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d424c:	b510      	push	{r4, lr}
   d424e:	4604      	mov	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
   d4250:	6800      	ldr	r0, [r0, #0]
   d4252:	f7ff fff7 	bl	d4244 <_ZNSt12_Vector_baseI7PairBotSaIS0_EE13_M_deallocateEPS0_j.isra.35>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4256:	4620      	mov	r0, r4
   d4258:	bd10      	pop	{r4, pc}

000d425a <_ZNSt6vectorI7PairBotSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d425a:	b510      	push	{r4, lr}
   d425c:	4604      	mov	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
   d425e:	6800      	ldr	r0, [r0, #0]
   d4260:	f7ff fff0 	bl	d4244 <_ZNSt12_Vector_baseI7PairBotSaIS0_EE13_M_deallocateEPS0_j.isra.35>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4264:	4620      	mov	r0, r4
   d4266:	bd10      	pop	{r4, pc}

000d4268 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4268:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d426a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d426c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d426e:	b113      	cbz	r3, d4276 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4270:	2203      	movs	r2, #3
   d4272:	4601      	mov	r1, r0
   d4274:	4798      	blx	r3
    }
   d4276:	4620      	mov	r0, r4
   d4278:	bd10      	pop	{r4, pc}
	...

000d427c <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d427c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d427e:	2500      	movs	r5, #0
   d4280:	468e      	mov	lr, r1
   d4282:	4915      	ldr	r1, [pc, #84]	; (d42d8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4284:	7105      	strb	r5, [r0, #4]
   d4286:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4288:	6145      	str	r5, [r0, #20]
   d428a:	6001      	str	r1, [r0, #0]
   d428c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d428e:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4292:	b085      	sub	sp, #20
   d4294:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4296:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d429a:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d429e:	e896 0003 	ldmia.w	r6, {r0, r1}
   d42a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42a6:	e897 0003 	ldmia.w	r7, {r0, r1}
   d42aa:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42ae:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42b0:	6960      	ldr	r0, [r4, #20]
   d42b2:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d42b4:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b6:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42b8:	69a0      	ldr	r0, [r4, #24]
   d42ba:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42bc:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d42be:	e88d 0028 	stmia.w	sp, {r3, r5}
   d42c2:	4a06      	ldr	r2, [pc, #24]	; (d42dc <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d42c4:	4623      	mov	r3, r4
   d42c6:	4671      	mov	r1, lr
   d42c8:	f104 0008 	add.w	r0, r4, #8
   d42cc:	f002 fe80 	bl	d6fd0 <os_timer_create>
    }
   d42d0:	4620      	mov	r0, r4
   d42d2:	b005      	add	sp, #20
   d42d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42d6:	bf00      	nop
   d42d8:	000dd60c 	.word	0x000dd60c
   d42dc:	000d41bd 	.word	0x000d41bd

000d42e0 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d42e0:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42e2:	6880      	ldr	r0, [r0, #8]
   d42e4:	2300      	movs	r3, #0
   d42e6:	b138      	cbz	r0, d42f8 <_ZN5Timer5_stopEjb+0x18>
   d42e8:	e88d 000a 	stmia.w	sp, {r1, r3}
   d42ec:	2102      	movs	r1, #2
   d42ee:	f002 fe87 	bl	d7000 <os_timer_change>
   d42f2:	fab0 f080 	clz	r0, r0
   d42f6:	0940      	lsrs	r0, r0, #5
    }
   d42f8:	b003      	add	sp, #12
   d42fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4300 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4300:	b538      	push	{r3, r4, r5, lr}
   d4302:	4b10      	ldr	r3, [pc, #64]	; (d4344 <_ZN5TimerD1Ev+0x44>)
   d4304:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4306:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4308:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d430a:	b1a3      	cbz	r3, d4336 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d430c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4310:	2200      	movs	r2, #0
   d4312:	f7ff ffe5 	bl	d42e0 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4316:	2100      	movs	r1, #0
   d4318:	68a0      	ldr	r0, [r4, #8]
   d431a:	f002 fe99 	bl	d7050 <os_timer_set_id>
            while (running) {
   d431e:	7923      	ldrb	r3, [r4, #4]
   d4320:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4324:	b113      	cbz	r3, d432c <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4326:	f002 fe33 	bl	d6f90 <os_thread_yield>
   d432a:	e7f8      	b.n	d431e <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d432c:	4629      	mov	r1, r5
   d432e:	68a0      	ldr	r0, [r4, #8]
   d4330:	f002 fe56 	bl	d6fe0 <os_timer_destroy>
            handle = nullptr;
   d4334:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4336:	f104 000c 	add.w	r0, r4, #12
   d433a:	f7ff ff95 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d433e:	4620      	mov	r0, r4
   d4340:	bd38      	pop	{r3, r4, r5, pc}
   d4342:	bf00      	nop
   d4344:	000dd60c 	.word	0x000dd60c

000d4348 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4348:	b510      	push	{r4, lr}
   d434a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d434c:	f7ff ffd8 	bl	d4300 <_ZN5TimerD1Ev>
   d4350:	4620      	mov	r0, r4
   d4352:	211c      	movs	r1, #28
   d4354:	f005 ff97 	bl	da286 <_ZdlPvj>
   d4358:	4620      	mov	r0, r4
   d435a:	bd10      	pop	{r4, pc}

000d435c <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d435c:	4613      	mov	r3, r2
   d435e:	460a      	mov	r2, r1
   d4360:	4901      	ldr	r1, [pc, #4]	; (d4368 <_ZN7FatFile4openEPKci+0xc>)
   d4362:	6809      	ldr	r1, [r1, #0]
   d4364:	f001 bc19 	b.w	d5b9a <_ZN7FatFile4openEPS_PKci>
   d4368:	2003e338 	.word	0x2003e338

000d436c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d436c:	b530      	push	{r4, r5, lr}
   d436e:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4370:	4b1c      	ldr	r3, [pc, #112]	; (d43e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4372:	9300      	str	r3, [sp, #0]
   d4374:	7913      	ldrb	r3, [r2, #4]
   d4376:	f88d 3004 	strb.w	r3, [sp, #4]
   d437a:	6893      	ldr	r3, [r2, #8]
   d437c:	9302      	str	r3, [sp, #8]
   d437e:	7b13      	ldrb	r3, [r2, #12]
   d4380:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4384:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4388:	7b53      	ldrb	r3, [r2, #13]
   d438a:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d438e:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4390:	460a      	mov	r2, r1
   d4392:	466b      	mov	r3, sp
   d4394:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4398:	4628      	mov	r0, r5
   d439a:	f002 fb2d 	bl	d69f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d439e:	b1f0      	cbz	r0, d43de <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d43a0:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d43a2:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d43a6:	4628      	mov	r0, r5
   d43a8:	f001 fbf0 	bl	d5b8c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d43ac:	2101      	movs	r1, #1
   d43ae:	4620      	mov	r0, r4
   d43b0:	f002 f9c7 	bl	d6742 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d43b4:	4601      	mov	r1, r0
   d43b6:	b168      	cbz	r0, d43d4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d43b8:	4621      	mov	r1, r4
   d43ba:	4628      	mov	r0, r5
   d43bc:	f001 f9fd 	bl	d57ba <_ZN7FatFile8openRootEP9FatVolume>
   d43c0:	b168      	cbz	r0, d43de <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d43c2:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d43c6:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d43ca:	bf16      	itet	ne
   d43cc:	4b06      	ldrne	r3, [pc, #24]	; (d43e8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d43ce:	4618      	moveq	r0, r3
   d43d0:	601d      	strne	r5, [r3, #0]
   d43d2:	e005      	b.n	d43e0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d43d4:	4620      	mov	r0, r4
   d43d6:	f002 f9b4 	bl	d6742 <_ZN9FatVolume4initEh>
   d43da:	2800      	cmp	r0, #0
   d43dc:	d1ec      	bne.n	d43b8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d43de:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d43e0:	b005      	add	sp, #20
   d43e2:	bd30      	pop	{r4, r5, pc}
   d43e4:	000dd600 	.word	0x000dd600
   d43e8:	2003e338 	.word	0x2003e338

000d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d43ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d43ee:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d43f0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d43f2:	b17c      	cbz	r4, d4414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d43f4:	6863      	ldr	r3, [r4, #4]
   d43f6:	3b01      	subs	r3, #1
   d43f8:	6063      	str	r3, [r4, #4]
   d43fa:	b95b      	cbnz	r3, d4414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d43fc:	6823      	ldr	r3, [r4, #0]
   d43fe:	4620      	mov	r0, r4
   d4400:	689b      	ldr	r3, [r3, #8]
   d4402:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4404:	68a3      	ldr	r3, [r4, #8]
   d4406:	3b01      	subs	r3, #1
   d4408:	60a3      	str	r3, [r4, #8]
   d440a:	b91b      	cbnz	r3, d4414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d440c:	6823      	ldr	r3, [r4, #0]
   d440e:	4620      	mov	r0, r4
   d4410:	68db      	ldr	r3, [r3, #12]
   d4412:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4414:	4628      	mov	r0, r5
   d4416:	bd38      	pop	{r3, r4, r5, pc}

000d4418 <_Z8sendDataPKchbbb>:
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}

void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   d4418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d441c:	b085      	sub	sp, #20
   d441e:	af02      	add	r7, sp, #8
   d4420:	4680      	mov	r8, r0
   d4422:	460d      	mov	r5, r1
   d4424:	4691      	mov	r9, r2
   d4426:	461e      	mov	r6, r3
    char outStr[strlen(dataOut)+2];
   d4428:	f006 ff33 	bl	db292 <strlen>
   d442c:	3009      	adds	r0, #9
   d442e:	f020 0007 	bic.w	r0, r0, #7
   d4432:	ebad 0d00 	sub.w	sp, sp, r0
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   d4436:	4640      	mov	r0, r8
   d4438:	f006 ff2b 	bl	db292 <strlen>
    myFile.print(dataStr);
    Serial.println(dataStr);
}

void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
    char outStr[strlen(dataOut)+2];
   d443c:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   d443e:	4603      	mov	r3, r0
   d4440:	4642      	mov	r2, r8
   d4442:	4925      	ldr	r1, [pc, #148]	; (d44d8 <_Z8sendDataPKchbbb+0xc0>)
   d4444:	4620      	mov	r0, r4
   d4446:	f003 f867 	bl	d7518 <sprintf>
    if(sendLTE || sendMode == 4){
   d444a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d444e:	b90b      	cbnz	r3, d4454 <_Z8sendDataPKchbbb+0x3c>
   d4450:	2d04      	cmp	r5, #4
   d4452:	d10c      	bne.n	d446e <_Z8sendDataPKchbbb+0x56>
   d4454:	4b21      	ldr	r3, [pc, #132]	; (d44dc <_Z8sendDataPKchbbb+0xc4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4456:	4922      	ldr	r1, [pc, #136]	; (d44e0 <_Z8sendDataPKchbbb+0xc8>)
   d4458:	781b      	ldrb	r3, [r3, #0]
   d445a:	f88d 3000 	strb.w	r3, [sp]
   d445e:	4638      	mov	r0, r7
   d4460:	233c      	movs	r3, #60	; 0x3c
   d4462:	4622      	mov	r2, r4
   d4464:	f004 fdcc 	bl	d9000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4468:	1d38      	adds	r0, r7, #4
   d446a:	f7ff ffbf 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
   d446e:	f1b9 0f00 	cmp.w	r9, #0
   d4472:	d101      	bne.n	d4478 <_Z8sendDataPKchbbb+0x60>
   d4474:	2d01      	cmp	r5, #1
   d4476:	d104      	bne.n	d4482 <_Z8sendDataPKchbbb+0x6a>
   d4478:	f003 fd16 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d447c:	f003 fd94 	bl	d7fa8 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4480:	b940      	cbnz	r0, d4494 <_Z8sendDataPKchbbb+0x7c>
        uint8_t txBuf_tmp[strlen(outStr)];
        memcpy(txBuf_tmp,outStr,strlen(outStr));
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
    }
    if(sendXBee || sendMode == 2){
   d4482:	b90e      	cbnz	r6, d4488 <_Z8sendDataPKchbbb+0x70>
   d4484:	2d02      	cmp	r5, #2
   d4486:	d123      	bne.n	d44d0 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   d4488:	f005 fd0e 	bl	d9ea8 <_Z22__fetch_global_Serial1v>
   d448c:	4621      	mov	r1, r4
   d448e:	f005 f9be 	bl	d980e <_ZN5Print7printlnEPKc>
    }
}
   d4492:	e01d      	b.n	d44d0 <_Z8sendDataPKchbbb+0xb8>
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(outStr)];
   d4494:	4620      	mov	r0, r4
   d4496:	f006 fefc 	bl	db292 <strlen>
   d449a:	3007      	adds	r0, #7
   d449c:	f020 0007 	bic.w	r0, r0, #7
        memcpy(txBuf_tmp,outStr,strlen(outStr));
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   d44a0:	46e9      	mov	r9, sp
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(outStr)];
   d44a2:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   d44a6:	4620      	mov	r0, r4
   d44a8:	f006 fef3 	bl	db292 <strlen>
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(outStr)];
   d44ac:	f10d 0808 	add.w	r8, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   d44b0:	4602      	mov	r2, r0
   d44b2:	4621      	mov	r1, r4
   d44b4:	4640      	mov	r0, r8
   d44b6:	f006 fe58 	bl	db16a <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   d44ba:	4620      	mov	r0, r4
   d44bc:	f006 fee9 	bl	db292 <strlen>
   d44c0:	2300      	movs	r3, #0
   d44c2:	4602      	mov	r2, r0
   d44c4:	4641      	mov	r1, r8
   d44c6:	4807      	ldr	r0, [pc, #28]	; (d44e4 <_Z8sendDataPKchbbb+0xcc>)
   d44c8:	f003 fb7e 	bl	d7bc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d44cc:	46cd      	mov	sp, r9
   d44ce:	e7d8      	b.n	d4482 <_Z8sendDataPKchbbb+0x6a>
    }
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}
   d44d0:	370c      	adds	r7, #12
   d44d2:	46bd      	mov	sp, r7
   d44d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44d8:	000dd685 	.word	0x000dd685
   d44dc:	2003d64d 	.word	0x2003d64d
   d44e0:	000dd68c 	.word	0x000dd68c
   d44e4:	2003d638 	.word	0x2003d638

000d44e8 <_Z14XBeeLTEPairSetv>:
            }
        }
    }
}

void XBeeLTEPairSet(){
   d44e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44ec:	4b0e      	ldr	r3, [pc, #56]	; (d4528 <_Z14XBeeLTEPairSetv+0x40>)
   d44ee:	e893 0120 	ldmia.w	r3, {r5, r8}
   d44f2:	b086      	sub	sp, #24
   d44f4:	461c      	mov	r4, r3
    for(WaterBot p: PairBots){
   d44f6:	45a8      	cmp	r8, r5
   d44f8:	d012      	beq.n	d4520 <_Z14XBeeLTEPairSetv+0x38>
   d44fa:	78ef      	ldrb	r7, [r5, #3]
   d44fc:	792e      	ldrb	r6, [r5, #4]
        char replyStr[10];
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   d44fe:	490b      	ldr	r1, [pc, #44]	; (d452c <_Z14XBeeLTEPairSetv+0x44>)
   d4500:	f815 2b18 	ldrb.w	r2, [r5], #24
   d4504:	a803      	add	r0, sp, #12
   d4506:	f003 f807 	bl	d7518 <sprintf>
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
   d450a:	2200      	movs	r2, #0
   d450c:	4633      	mov	r3, r6
   d450e:	9700      	str	r7, [sp, #0]
   d4510:	4611      	mov	r1, r2
   d4512:	a803      	add	r0, sp, #12
   d4514:	f7ff ff80 	bl	d4418 <_Z8sendDataPKchbbb>
       *  called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	--this->_M_impl._M_finish;
   d4518:	6863      	ldr	r3, [r4, #4]
   d451a:	3b18      	subs	r3, #24
   d451c:	6063      	str	r3, [r4, #4]
   d451e:	e7ea      	b.n	d44f6 <_Z14XBeeLTEPairSetv+0xe>
        PairBots.pop_back();
    }
}
   d4520:	b006      	add	sp, #24
   d4522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4526:	bf00      	nop
   d4528:	2003dbb0 	.word	0x2003dbb0
   d452c:	000dd694 	.word	0x000dd694

000d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4530:	4613      	mov	r3, r2
   d4532:	460a      	mov	r2, r1
   d4534:	2101      	movs	r1, #1
   d4536:	f005 b994 	b.w	d9862 <_ZN5Print11printf_implEbPKcz>

000d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
   d453a:	4613      	mov	r3, r2
   d453c:	460a      	mov	r2, r1
   d453e:	2101      	movs	r1, #1
   d4540:	f005 b98f 	b.w	d9862 <_ZN5Print11printf_implEbPKcz>

000d4544 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4544:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4546:	b095      	sub	sp, #84	; 0x54
   d4548:	4604      	mov	r4, r0
   d454a:	af00      	add	r7, sp, #0
   d454c:	460e      	mov	r6, r1
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   d454e:	2226      	movs	r2, #38	; 0x26
   d4550:	2100      	movs	r1, #0
   d4552:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4556:	f006 fe2e 	bl	db1b6 <memset>
    memcpy(fileCommand,data,8);
   d455a:	6820      	ldr	r0, [r4, #0]
   d455c:	6861      	ldr	r1, [r4, #4]
   d455e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   d4562:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   d4564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d4568:	2b66      	cmp	r3, #102	; 0x66
        }
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
   d456a:	466d      	mov	r5, sp

void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    char fileCommand[8 + MAX_FILENAME_LEN];
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
    memcpy(fileCommand,data,8);
    if(fileCommand[0] == 'f'){
   d456c:	d16a      	bne.n	d4644 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
        //Serial.printlnf("Found an 'f' command %s",fileCommand);
        if(!strcmp(fileCommand,"filename")){
   d456e:	4941      	ldr	r1, [pc, #260]	; (d4674 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   d4570:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4574:	f006 fe5f 	bl	db236 <strcmp>
   d4578:	2800      	cmp	r0, #0
   d457a:	d141      	bne.n	d4600 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>
   d457c:	483e      	ldr	r0, [pc, #248]	; (d4678 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d457e:	7c03      	ldrb	r3, [r0, #16]
   d4580:	b113      	cbz	r3, d4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   d4582:	3010      	adds	r0, #16
   d4584:	f001 fb02 	bl	d5b8c <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   d4588:	4623      	mov	r3, r4
   d458a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   d458e:	f104 0620 	add.w	r6, r4, #32
   d4592:	6818      	ldr	r0, [r3, #0]
   d4594:	6859      	ldr	r1, [r3, #4]
   d4596:	4614      	mov	r4, r2
   d4598:	c403      	stmia	r4!, {r0, r1}
   d459a:	3308      	adds	r3, #8
   d459c:	42b3      	cmp	r3, r6
   d459e:	4622      	mov	r2, r4
   d45a0:	d1f7      	bne.n	d4592 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   d45a2:	6818      	ldr	r0, [r3, #0]
   d45a4:	6020      	str	r0, [r4, #0]
   d45a6:	889b      	ldrh	r3, [r3, #4]
   d45a8:	80a3      	strh	r3, [r4, #4]
            memset(offloadFilename,0,MAX_FILENAME_LEN);
   d45aa:	221e      	movs	r2, #30
   d45ac:	2100      	movs	r1, #0
   d45ae:	4833      	ldr	r0, [pc, #204]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45b0:	f006 fe01 	bl	db1b6 <memset>
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   d45b4:	221e      	movs	r2, #30
   d45b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
   d45ba:	4830      	ldr	r0, [pc, #192]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45bc:	f006 fe86 	bl	db2cc <strncpy>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45c0:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d45c2:	4a2e      	ldr	r2, [pc, #184]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45c4:	492e      	ldr	r1, [pc, #184]	; (d4680 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45c6:	713b      	strb	r3, [r7, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d45c8:	1d38      	adds	r0, r7, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45ca:	717b      	strb	r3, [r7, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d45cc:	f001 fae5 	bl	d5b9a <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   d45d0:	b148      	cbz	r0, d45e6 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   d45d2:	f005 fcf1 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d45d6:	492b      	ldr	r1, [pc, #172]	; (d4684 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   d45d8:	4a28      	ldr	r2, [pc, #160]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45da:	f7ff ffae 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d45de:	4927      	ldr	r1, [pc, #156]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45e0:	4827      	ldr	r0, [pc, #156]	; (d4680 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   d45e2:	f001 fb29 	bl	d5c38 <_ZN7FatFile6removeEPS_PKc>
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   d45e6:	f005 fce7 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d45ea:	4a24      	ldr	r2, [pc, #144]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45ec:	4926      	ldr	r1, [pc, #152]	; (d4688 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   d45ee:	f7ff ffa4 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   d45f2:	f244 2202 	movw	r2, #16898	; 0x4202
   d45f6:	4921      	ldr	r1, [pc, #132]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d45f8:	4824      	ldr	r0, [pc, #144]	; (d468c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d45fa:	f7ff feaf 	bl	d435c <_ZN7FatFile4openEPKci>
            return;
   d45fe:	e034      	b.n	d466a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
        }
        else if(!strcmp(fileCommand,"filecomp")){
   d4600:	4923      	ldr	r1, [pc, #140]	; (d4690 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   d4602:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4606:	f006 fe16 	bl	db236 <strcmp>
   d460a:	b960      	cbnz	r0, d4626 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe2>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   d460c:	f005 fcd4 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4610:	4a1a      	ldr	r2, [pc, #104]	; (d467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   d4612:	4920      	ldr	r1, [pc, #128]	; (d4694 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   d4614:	f7ff ff91 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4618:	4b17      	ldr	r3, [pc, #92]	; (d4678 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
            if(myFile.isOpen()) myFile.close();
   d461a:	7c1b      	ldrb	r3, [r3, #16]
   d461c:	b32b      	cbz	r3, d466a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
   d461e:	481b      	ldr	r0, [pc, #108]	; (d468c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d4620:	f001 fab4 	bl	d5b8c <_ZN7FatFile5closeEv>
   d4624:	e021      	b.n	d466a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
            return;
        }
        else if(!strcmp(fileCommand,"filedone")){
   d4626:	491c      	ldr	r1, [pc, #112]	; (d4698 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   d4628:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d462c:	f006 fe03 	bl	db236 <strcmp>
   d4630:	b940      	cbnz	r0, d4644 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>
            Serial.println("Received done command");
   d4632:	f005 fcc1 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4636:	4919      	ldr	r1, [pc, #100]	; (d469c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   d4638:	f005 f8e9 	bl	d980e <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   d463c:	4b18      	ldr	r3, [pc, #96]	; (d46a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   d463e:	2201      	movs	r2, #1
   d4640:	701a      	strb	r2, [r3, #0]
   d4642:	e7e9      	b.n	d4618 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd4>
            if(myFile.isOpen()) myFile.close();
            return;
        }
    }
    char dataStr[len];
   d4644:	1df3      	adds	r3, r6, #7
   d4646:	f023 0307 	bic.w	r3, r3, #7
   d464a:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   d464e:	4632      	mov	r2, r6
   d4650:	4621      	mov	r1, r4
   d4652:	4668      	mov	r0, sp
   d4654:	f006 fd89 	bl	db16a <memcpy>
    myFile.print(dataStr);
   d4658:	4669      	mov	r1, sp
   d465a:	4807      	ldr	r0, [pc, #28]	; (d4678 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   d465c:	f005 f8c4 	bl	d97e8 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   d4660:	f005 fcaa 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4664:	4669      	mov	r1, sp
   d4666:	f005 f8d2 	bl	d980e <_ZN5Print7printlnEPKc>
}
   d466a:	3754      	adds	r7, #84	; 0x54
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
                sd.remove(offloadFilename);
            }
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
            return;
   d466c:	46ad      	mov	sp, r5
    }
    char dataStr[len];
    memcpy(dataStr,data,len);
    myFile.print(dataStr);
    Serial.println(dataStr);
}
   d466e:	46bd      	mov	sp, r7
   d4670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4672:	bf00      	nop
   d4674:	000dd69d 	.word	0x000dd69d
   d4678:	2003db40 	.word	0x2003db40
   d467c:	2003e261 	.word	0x2003e261
   d4680:	2003da8c 	.word	0x2003da8c
   d4684:	000dd6a6 	.word	0x000dd6a6
   d4688:	000dd6d9 	.word	0x000dd6d9
   d468c:	2003db50 	.word	0x2003db50
   d4690:	000dd6f6 	.word	0x000dd6f6
   d4694:	000dd6ff 	.word	0x000dd6ff
   d4698:	000dd717 	.word	0x000dd717
   d469c:	000dd720 	.word	0x000dd720
   d46a0:	2003e2ec 	.word	0x2003e2ec

000d46a4 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d46a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d46a8:	6804      	ldr	r4, [r0, #0]
   d46aa:	6843      	ldr	r3, [r0, #4]
   d46ac:	1b1b      	subs	r3, r3, r4
   d46ae:	4c1f      	ldr	r4, [pc, #124]	; (d472c <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x88>)
   d46b0:	10db      	asrs	r3, r3, #3
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d46b2:	435c      	muls	r4, r3
   d46b4:	bf14      	ite	ne
   d46b6:	4623      	movne	r3, r4
   d46b8:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d46ba:	18e3      	adds	r3, r4, r3
   d46bc:	4606      	mov	r6, r0
   d46be:	460f      	mov	r7, r1
   d46c0:	4c1b      	ldr	r4, [pc, #108]	; (d4730 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x8c>)
   d46c2:	d201      	bcs.n	d46c8 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d46c4:	42a3      	cmp	r3, r4
   d46c6:	d92c      	bls.n	d4722 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x7e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d46c8:	2018      	movs	r0, #24
   d46ca:	4360      	muls	r0, r4
   d46cc:	f7ff fce5 	bl	d409a <_Znwj>
   d46d0:	4680      	mov	r8, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d46d2:	f8d6 9000 	ldr.w	r9, [r6]
   d46d6:	6875      	ldr	r5, [r6, #4]
   d46d8:	ebc9 0505 	rsb	r5, r9, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d46dc:	eb18 0e05 	adds.w	lr, r8, r5
   d46e0:	bf1e      	ittt	ne
   d46e2:	cf0f      	ldmiane	r7!, {r0, r1, r2, r3}
   d46e4:	e8ae 000f 	stmiane.w	lr!, {r0, r1, r2, r3}
   d46e8:	e897 0003 	ldmiane.w	r7, {r0, r1}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d46ec:	4a0f      	ldr	r2, [pc, #60]	; (d472c <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x88>)
   d46ee:	ea4f 03e5 	mov.w	r3, r5, asr #3
   d46f2:	bf18      	it	ne
   d46f4:	e88e 0003 	stmiane.w	lr, {r0, r1}
   d46f8:	435a      	muls	r2, r3
   d46fa:	d004      	beq.n	d4706 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x62>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d46fc:	462a      	mov	r2, r5
   d46fe:	4649      	mov	r1, r9
   d4700:	4640      	mov	r0, r8
   d4702:	f006 fd3d 	bl	db180 <memmove>
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
   d4706:	4648      	mov	r0, r9
   d4708:	f7ff fd9c 	bl	d4244 <_ZNSt12_Vector_baseI7PairBotSaIS0_EE13_M_deallocateEPS0_j.isra.35>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d470c:	3518      	adds	r5, #24
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d470e:	2318      	movs	r3, #24
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d4710:	4445      	add	r5, r8
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4712:	fb03 8404 	mla	r4, r3, r4, r8
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4716:	f8c6 8000 	str.w	r8, [r6]
	this->_M_impl._M_finish = __new_finish;
   d471a:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d471c:	60b4      	str	r4, [r6, #8]
      }
   d471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4722:	461c      	mov	r4, r3
   d4724:	2b00      	cmp	r3, #0
   d4726:	d1cf      	bne.n	d46c8 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d4728:	4698      	mov	r8, r3
   d472a:	e7d2      	b.n	d46d2 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2e>
   d472c:	aaaaaaab 	.word	0xaaaaaaab
   d4730:	0aaaaaaa 	.word	0x0aaaaaaa

000d4734 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   d4734:	b570      	push	{r4, r5, r6, lr}
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4736:	6844      	ldr	r4, [r0, #4]
   d4738:	6883      	ldr	r3, [r0, #8]
   d473a:	429c      	cmp	r4, r3
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   d473c:	4606      	mov	r6, r0
   d473e:	460d      	mov	r5, r1
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4740:	d00a      	beq.n	d4758 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x24>
   d4742:	b12c      	cbz	r4, d4750 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x1c>
   d4744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4748:	e895 0003 	ldmia.w	r5, {r0, r1}
   d474c:	e884 0003 	stmia.w	r4, {r0, r1}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d4750:	6873      	ldr	r3, [r6, #4]
   d4752:	3318      	adds	r3, #24
   d4754:	6073      	str	r3, [r6, #4]
   d4756:	bd70      	pop	{r4, r5, r6, pc}
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d4758:	f7ff ffa4 	bl	d46a4 <_ZNSt6vectorI8WaterBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
   d475c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4760 <_Z14processCommandPKchb>:
    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4764:	ed2d 8b02 	vpush	{d8}
   d4768:	b09b      	sub	sp, #108	; 0x6c
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d476a:	7883      	ldrb	r3, [r0, #2]
   d476c:	2b41      	cmp	r3, #65	; 0x41
    }
    if(offloadingMode) DataOffloader();
    XBeeHandler();
}

void processCommand(const char *command, uint8_t mode, bool sendAck){
   d476e:	af04      	add	r7, sp, #16
   d4770:	4604      	mov	r4, r0
   d4772:	4688      	mov	r8, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   d4774:	d102      	bne.n	d477c <_Z14processCommandPKchb+0x1c>
   d4776:	78c3      	ldrb	r3, [r0, #3]
   d4778:	2b42      	cmp	r3, #66	; 0x42
   d477a:	e004      	b.n	d4786 <_Z14processCommandPKchb+0x26>
   d477c:	2b43      	cmp	r3, #67	; 0x43
   d477e:	f040 8245 	bne.w	d4c0c <_Z14processCommandPKchb+0x4ac>
   d4782:	78c3      	ldrb	r3, [r0, #3]
   d4784:	2b43      	cmp	r3, #67	; 0x43
   d4786:	f040 8241 	bne.w	d4c0c <_Z14processCommandPKchb+0x4ac>
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d478a:	4620      	mov	r0, r4
   d478c:	f006 fd81 	bl	db292 <strlen>
   d4790:	3801      	subs	r0, #1
   d4792:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d4796:	46e9      	mov	r9, sp

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d4798:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   d479c:	4620      	mov	r0, r4
   d479e:	f006 fd78 	bl	db292 <strlen>

void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d47a2:	ae04      	add	r6, sp, #16
        dataStr[strlen(command)-9] = '\0';
   d47a4:	4430      	add	r0, r6
   d47a6:	2500      	movs	r5, #0
   d47a8:	f800 5c09 	strb.w	r5, [r0, #-9]
        char rxIDBuf[1];
        rxIDBuf[0] = command[1];
   d47ac:	f107 0058 	add.w	r0, r7, #88	; 0x58
   d47b0:	7863      	ldrb	r3, [r4, #1]
   d47b2:	f800 3d50 	strb.w	r3, [r0, #-80]!
        uint8_t rxBotID = atoi(rxIDBuf);
   d47b6:	f006 fbba 	bl	daf2e <atoi>
   d47ba:	4683      	mov	fp, r0
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
   d47bc:	4620      	mov	r0, r4
        dataStr[strlen(command)-9] = '\0';
        char rxIDBuf[1];
        rxIDBuf[0] = command[1];
        uint8_t rxBotID = atoi(rxIDBuf);
        char cmdStr[4];
        cmdStr[3] = '\0';
   d47be:	74fd      	strb	r5, [r7, #19]
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
   d47c0:	f006 fd67 	bl	db292 <strlen>
   d47c4:	4420      	add	r0, r4
   d47c6:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   d47ca:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   d47cc:	4620      	mov	r0, r4
   d47ce:	f006 fd60 	bl	db292 <strlen>
   d47d2:	4420      	add	r0, r4
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d47d4:	4629      	mov	r1, r5
        uint8_t rxBotID = atoi(rxIDBuf);
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
   d47d6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   d47da:	737b      	strb	r3, [r7, #13]
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d47dc:	2210      	movs	r2, #16
   d47de:	f107 000c 	add.w	r0, r7, #12
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
   d47e2:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d47e4:	f007 fc3e 	bl	dc064 <strtol>
   d47e8:	4682      	mov	sl, r0
   d47ea:	fa5f fa8a 	uxtb.w	sl, sl
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   d47ee:	f005 fbe3 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d47f2:	f8cd a000 	str.w	sl, [sp]
   d47f6:	4653      	mov	r3, sl
   d47f8:	4ac0      	ldr	r2, [pc, #768]	; (d4afc <_Z14processCommandPKchb+0x39c>)
   d47fa:	2101      	movs	r1, #1
   d47fc:	f005 f831 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d4800:	2504      	movs	r5, #4
   d4802:	4620      	mov	r0, r4
   d4804:	f006 fd45 	bl	db292 <strlen>
   d4808:	3802      	subs	r0, #2
   d480a:	4285      	cmp	r5, r0
   d480c:	d211      	bcs.n	d4832 <_Z14processCommandPKchb+0xd2>
            if(i < 7) cmdStr[i-4] = command[i];
   d480e:	2d06      	cmp	r5, #6
   d4810:	bf9b      	ittet	ls
   d4812:	f107 0358 	addls.w	r3, r7, #88	; 0x58
   d4816:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   d4818:	1973      	addhi	r3, r6, r5
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d481a:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   d481c:	bf8c      	ite	hi
   d481e:	5d62      	ldrbhi	r2, [r4, r5]
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4820:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d4824:	f105 0501 	add.w	r5, r5, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d4828:	bf88      	it	hi
   d482a:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d482e:	b2ed      	uxtb	r5, r5
   d4830:	e7e7      	b.n	d4802 <_Z14processCommandPKchb+0xa2>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(checksum != strlen(command)-2){
   d4832:	4550      	cmp	r0, sl
   d4834:	d042      	beq.n	d48bc <_Z14processCommandPKchb+0x15c>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   d4836:	f005 fbbf 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d483a:	4605      	mov	r5, r0
   d483c:	4620      	mov	r0, r4
   d483e:	f006 fd28 	bl	db292 <strlen>
   d4842:	1e83      	subs	r3, r0, #2
   d4844:	4628      	mov	r0, r5
   d4846:	4dae      	ldr	r5, [pc, #696]	; (d4b00 <_Z14processCommandPKchb+0x3a0>)
   d4848:	f8cd a000 	str.w	sl, [sp]
   d484c:	4aad      	ldr	r2, [pc, #692]	; (d4b04 <_Z14processCommandPKchb+0x3a4>)
   d484e:	2101      	movs	r1, #1
   d4850:	f005 f807 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
            if(!logFile.isOpen()){
   d4854:	7c2b      	ldrb	r3, [r5, #16]
   d4856:	b983      	cbnz	r3, d487a <_Z14processCommandPKchb+0x11a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4858:	f244 2202 	movw	r2, #16898	; 0x4202
   d485c:	49aa      	ldr	r1, [pc, #680]	; (d4b08 <_Z14processCommandPKchb+0x3a8>)
   d485e:	f105 0010 	add.w	r0, r5, #16
   d4862:	f7ff fd7b 	bl	d435c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4866:	4622      	mov	r2, r4
   d4868:	49a8      	ldr	r1, [pc, #672]	; (d4b0c <_Z14processCommandPKchb+0x3ac>)
   d486a:	4628      	mov	r0, r5
   d486c:	f7ff fe65 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d4870:	f105 0010 	add.w	r0, r5, #16
   d4874:	f001 f98a 	bl	d5b8c <_ZN7FatFile5closeEv>
   d4878:	e004      	b.n	d4884 <_Z14processCommandPKchb+0x124>
            }
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d487a:	4622      	mov	r2, r4
   d487c:	49a3      	ldr	r1, [pc, #652]	; (d4b0c <_Z14processCommandPKchb+0x3ac>)
   d487e:	4628      	mov	r0, r5
   d4880:	f7ff fe5b 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            Serial.println("Warning, checksum does not match");
   d4884:	f005 fb98 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4888:	49a1      	ldr	r1, [pc, #644]	; (d4b10 <_Z14processCommandPKchb+0x3b0>)
   d488a:	f004 ffc0 	bl	d980e <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   d488e:	7863      	ldrb	r3, [r4, #1]
   d4890:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4894:	2a09      	cmp	r2, #9
   d4896:	d902      	bls.n	d489e <_Z14processCommandPKchb+0x13e>
   d4898:	2b43      	cmp	r3, #67	; 0x43
   d489a:	f040 81b6 	bne.w	d4c0a <_Z14processCommandPKchb+0x4aa>
                char rxBotNum[2];
                rxBotNum[0] = command[0];
   d489e:	7822      	ldrb	r2, [r4, #0]
   d48a0:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
                rxBotNum[1] = command[1];
   d48a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   d48a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   d48ac:	f107 0310 	add.w	r3, r7, #16
   d48b0:	4998      	ldr	r1, [pc, #608]	; (d4b14 <_Z14processCommandPKchb+0x3b4>)
   d48b2:	4899      	ldr	r0, [pc, #612]	; (d4b18 <_Z14processCommandPKchb+0x3b8>)
   d48b4:	f002 fe30 	bl	d7518 <sprintf>
                errModeReply = mode;
   d48b8:	4b98      	ldr	r3, [pc, #608]	; (d4b1c <_Z14processCommandPKchb+0x3bc>)
   d48ba:	e0e0      	b.n	d4a7e <_Z14processCommandPKchb+0x31e>
            }
            
            return;
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d48bc:	4998      	ldr	r1, [pc, #608]	; (d4b20 <_Z14processCommandPKchb+0x3c0>)
   d48be:	f107 0010 	add.w	r0, r7, #16
   d48c2:	f006 fcb8 	bl	db236 <strcmp>
   d48c6:	2800      	cmp	r0, #0
   d48c8:	f000 819f 	beq.w	d4c0a <_Z14processCommandPKchb+0x4aa>
            else if(mode == 2){ //Acknowledge from BLE
                
            }
            return;
        }
        else if(!strcmp(cmdStr,"sup")){
   d48cc:	4995      	ldr	r1, [pc, #596]	; (d4b24 <_Z14processCommandPKchb+0x3c4>)
   d48ce:	f107 0010 	add.w	r0, r7, #16
        uint8_t checksum;
        char dataStr[strlen(command)-8];
        dataStr[strlen(command)-9] = '\0';
        char rxIDBuf[1];
        rxIDBuf[0] = command[1];
        uint8_t rxBotID = atoi(rxIDBuf);
   d48d2:	fa5f f48b 	uxtb.w	r4, fp
            else if(mode == 2){ //Acknowledge from BLE
                
            }
            return;
        }
        else if(!strcmp(cmdStr,"sup")){
   d48d6:	f006 fcae 	bl	db236 <strcmp>
   d48da:	2800      	cmp	r0, #0
   d48dc:	f040 80c3 	bne.w	d4a66 <_Z14processCommandPKchb+0x306>
   d48e0:	4b91      	ldr	r3, [pc, #580]	; (d4b28 <_Z14processCommandPKchb+0x3c8>)
   d48e2:	e893 0420 	ldmia.w	r3, {r5, sl}
            
            bool newBot = true;
   d48e6:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   d48e8:	45aa      	cmp	sl, r5
   d48ea:	d077      	beq.n	d49dc <_Z14processCommandPKchb+0x27c>
                if(rxBotID == w.botNum){
   d48ec:	782a      	ldrb	r2, [r5, #0]
   d48ee:	42a2      	cmp	r2, r4
   d48f0:	d172      	bne.n	d49d8 <_Z14processCommandPKchb+0x278>
                    uint8_t statflags;
                    float latRX;
                    float lonRX;
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   d48f2:	f107 0828 	add.w	r8, r7, #40	; 0x28
   d48f6:	f107 0b18 	add.w	fp, r7, #24
   d48fa:	f107 0314 	add.w	r3, r7, #20
   d48fe:	f107 020b 	add.w	r2, r7, #11
   d4902:	498a      	ldr	r1, [pc, #552]	; (d4b2c <_Z14processCommandPKchb+0x3cc>)
   d4904:	f8cd 8004 	str.w	r8, [sp, #4]
   d4908:	f8cd b000 	str.w	fp, [sp]
   d490c:	4630      	mov	r0, r6
   d490e:	f002 fe0b 	bl	d7528 <sscanf>
                    latRX = atof(testLat);
   d4912:	4658      	mov	r0, fp
   d4914:	f006 fb08 	bl	daf28 <atof>
                    lonRX = atof(testLon);
   d4918:	4640      	mov	r0, r8
                    float latRX;
                    float lonRX;
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
                    latRX = atof(testLat);
   d491a:	eeb0 8a40 	vmov.f32	s16, s0
   d491e:	eef0 8a60 	vmov.f32	s17, s1
                    lonRX = atof(testLon);
   d4922:	f006 fb01 	bl	daf28 <atof>
                    w.battPercent = battpct;
                    w.LTEAvail = statflags & 1;
   d4926:	f897 8014 	ldrb.w	r8, [r7, #20]
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
                    latRX = atof(testLat);
                    lonRX = atof(testLon);
                    w.battPercent = battpct;
   d492a:	f897 b00b 	ldrb.w	fp, [r7, #11]
                    float lonRX;
                    char testLat[12];
                    char testLon[12];
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
                    latRX = atof(testLat);
                    lonRX = atof(testLon);
   d492e:	ed87 0b00 	vstr	d0, [r7]
                    w.manualRC = (statflags >> 4) & 1;
                    w.lowBatt = (statflags >> 5) & 1;
                    w.dataRecording = (statflags >> 6) & 1;
                    w.GPSLat = latRX;
                    w.GPSLon = lonRX;
                    Serial.println("Status Update!");
   d4932:	f005 fb41 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4936:	497e      	ldr	r1, [pc, #504]	; (d4b30 <_Z14processCommandPKchb+0x3d0>)
   d4938:	f004 ff69 	bl	d980e <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   d493c:	f005 fb3c 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4940:	497c      	ldr	r1, [pc, #496]	; (d4b34 <_Z14processCommandPKchb+0x3d4>)
   d4942:	f004 ff64 	bl	d980e <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   d4946:	f005 fb37 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d494a:	497b      	ldr	r1, [pc, #492]	; (d4b38 <_Z14processCommandPKchb+0x3d8>)
   d494c:	f004 ff5f 	bl	d980e <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   d4950:	f005 fb32 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4954:	4622      	mov	r2, r4
   d4956:	4979      	ldr	r1, [pc, #484]	; (d4b3c <_Z14processCommandPKchb+0x3dc>)
   d4958:	f7ff fdea 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   d495c:	f005 fb2c 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4960:	465a      	mov	r2, fp
   d4962:	4977      	ldr	r1, [pc, #476]	; (d4b40 <_Z14processCommandPKchb+0x3e0>)
   d4964:	f7ff fde4 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
                    Serial.println("##    LTE  BLE  XBee    ##");
   d4968:	f005 fb26 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d496c:	4975      	ldr	r1, [pc, #468]	; (d4b44 <_Z14processCommandPKchb+0x3e4>)
   d496e:	f004 ff4e 	bl	d980e <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   d4972:	f005 fb21 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4976:	f3c8 0340 	ubfx	r3, r8, #1, #1
   d497a:	9301      	str	r3, [sp, #4]
   d497c:	f3c8 0380 	ubfx	r3, r8, #2, #1
   d4980:	4a71      	ldr	r2, [pc, #452]	; (d4b48 <_Z14processCommandPKchb+0x3e8>)
   d4982:	9300      	str	r3, [sp, #0]
   d4984:	2101      	movs	r1, #1
   d4986:	f008 0301 	and.w	r3, r8, #1
   d498a:	f004 ff6a 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   d498e:	f005 fb13 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4992:	496e      	ldr	r1, [pc, #440]	; (d4b4c <_Z14processCommandPKchb+0x3ec>)
   d4994:	f004 ff3b 	bl	d980e <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   d4998:	f005 fb0e 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d499c:	ed97 0b00 	vldr	d0, [r7]
   d49a0:	4680      	mov	r8, r0
   d49a2:	ec51 0b10 	vmov	r0, r1, d0
   d49a6:	f006 fa6f 	bl	dae88 <__aeabi_d2f>
   d49aa:	f005 ff37 	bl	da81c <__aeabi_f2d>
   d49ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d49b2:	ec51 0b18 	vmov	r0, r1, d8
   d49b6:	f006 fa67 	bl	dae88 <__aeabi_d2f>
   d49ba:	f005 ff2f 	bl	da81c <__aeabi_f2d>
   d49be:	4a64      	ldr	r2, [pc, #400]	; (d4b50 <_Z14processCommandPKchb+0x3f0>)
   d49c0:	e9cd 0100 	strd	r0, r1, [sp]
   d49c4:	2101      	movs	r1, #1
   d49c6:	4640      	mov	r0, r8
   d49c8:	f004 ff4b 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
                    Serial.println("##########################");
   d49cc:	f005 faf4 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d49d0:	4958      	ldr	r1, [pc, #352]	; (d4b34 <_Z14processCommandPKchb+0x3d4>)
   d49d2:	f004 ff1c 	bl	d980e <_ZN5Print7printlnEPKc>
        else if(!strcmp(cmdStr,"sup")){
            
            bool newBot = true;
            for(WaterBot w: WaterBots){
                if(rxBotID == w.botNum){
                    newBot = false;
   d49d6:	2300      	movs	r3, #0
   d49d8:	3518      	adds	r5, #24
   d49da:	e785      	b.n	d48e8 <_Z14processCommandPKchb+0x188>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
                    Serial.println("##########################");
                }

            }
            if(newBot){
   d49dc:	2b00      	cmp	r3, #0
   d49de:	f000 8114 	beq.w	d4c0a <_Z14processCommandPKchb+0x4aa>
                Serial.println("Found a new water bot ID");
   d49e2:	f005 fae9 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d49e6:	495b      	ldr	r1, [pc, #364]	; (d4b54 <_Z14processCommandPKchb+0x3f4>)
   d49e8:	f004 ff11 	bl	d980e <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
                newWaterbot.BLEAvail = true;
   d49ec:	2301      	movs	r3, #1
   d49ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                newBot = false;
                uint8_t battpct;
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   d49f2:	f107 0318 	add.w	r3, r7, #24
            }
            if(newBot){
                Serial.println("Found a new water bot ID");
                WaterBot newWaterbot;
                newWaterbot.BLEAvail = true;
                newWaterbot.botNum = rxBotID;
   d49f6:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
                newBot = false;
                uint8_t battpct;
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   d49fa:	9301      	str	r3, [sp, #4]
   d49fc:	f107 0314 	add.w	r3, r7, #20
   d4a00:	9300      	str	r3, [sp, #0]
   d4a02:	f107 020a 	add.w	r2, r7, #10
   d4a06:	f107 030b 	add.w	r3, r7, #11
   d4a0a:	4953      	ldr	r1, [pc, #332]	; (d4b58 <_Z14processCommandPKchb+0x3f8>)
   d4a0c:	4630      	mov	r0, r6
   d4a0e:	f002 fd8b 	bl	d7528 <sscanf>
                newWaterbot.battPercent = battpct;
   d4a12:	7abb      	ldrb	r3, [r7, #10]
   d4a14:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                newWaterbot.LTEAvail = statflags & 1;
   d4a18:	7afb      	ldrb	r3, [r7, #11]
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
                WaterBots.push_back(newWaterbot);
   d4a1a:	4843      	ldr	r0, [pc, #268]	; (d4b28 <_Z14processCommandPKchb+0x3c8>)
                uint8_t statflags;
                float latRX;
                float lonRX;
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
                newWaterbot.battPercent = battpct;
                newWaterbot.LTEAvail = statflags & 1;
   d4a1c:	f003 0201 	and.w	r2, r3, #1
   d4a20:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   d4a24:	f3c3 0240 	ubfx	r2, r3, #1, #1
   d4a28:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   d4a2c:	f3c3 0280 	ubfx	r2, r3, #2, #1
   d4a30:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
                newWaterbot.offloading = (statflags >> 3) & 1;
   d4a34:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   d4a38:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
                newWaterbot.manualRC = (statflags >> 4) & 1;
   d4a3c:	f3c3 1200 	ubfx	r2, r3, #4, #1
   d4a40:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   d4a44:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   d4a48:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d4a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                newWaterbot.GPSLat = latRX;
   d4a50:	697b      	ldr	r3, [r7, #20]
   d4a52:	637b      	str	r3, [r7, #52]	; 0x34
                newWaterbot.GPSLon = lonRX;
                WaterBots.push_back(newWaterbot);
   d4a54:	f107 0128 	add.w	r1, r7, #40	; 0x28
                newWaterbot.offloading = (statflags >> 3) & 1;
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
   d4a58:	69bb      	ldr	r3, [r7, #24]
                newWaterbot.LTEAvail = statflags & 1;
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
                newWaterbot.offloading = (statflags >> 3) & 1;
                newWaterbot.manualRC = (statflags >> 4) & 1;
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   d4a5a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
                newWaterbot.dataRecording = (statflags >> 6) & 1;
                newWaterbot.GPSLat = latRX;
                newWaterbot.GPSLon = lonRX;
   d4a5e:	63bb      	str	r3, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   d4a60:	f7ff fe68 	bl	d4734 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   d4a64:	e0d1      	b.n	d4c0a <_Z14processCommandPKchb+0x4aa>
            }
        }
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   d4a66:	493d      	ldr	r1, [pc, #244]	; (d4b5c <_Z14processCommandPKchb+0x3fc>)
   d4a68:	f107 0010 	add.w	r0, r7, #16
   d4a6c:	f006 fbe3 	bl	db236 <strcmp>
   d4a70:	b940      	cbnz	r0, d4a84 <_Z14processCommandPKchb+0x324>
            strncpy(errCmdStr,dataStr,3);
   d4a72:	2203      	movs	r2, #3
   d4a74:	4631      	mov	r1, r6
   d4a76:	483a      	ldr	r0, [pc, #232]	; (d4b60 <_Z14processCommandPKchb+0x400>)
   d4a78:	f006 fc28 	bl	db2cc <strncpy>
            errCmdMode = mode;
   d4a7c:	4b39      	ldr	r3, [pc, #228]	; (d4b64 <_Z14processCommandPKchb+0x404>)
   d4a7e:	f883 8000 	strb.w	r8, [r3]
   d4a82:	e0c2      	b.n	d4c0a <_Z14processCommandPKchb+0x4aa>
        }
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   d4a84:	4938      	ldr	r1, [pc, #224]	; (d4b68 <_Z14processCommandPKchb+0x408>)
   d4a86:	f107 0010 	add.w	r0, r7, #16
   d4a8a:	f006 fbd4 	bl	db236 <strcmp>
   d4a8e:	2800      	cmp	r0, #0
   d4a90:	d170      	bne.n	d4b74 <_Z14processCommandPKchb+0x414>
   d4a92:	4b25      	ldr	r3, [pc, #148]	; (d4b28 <_Z14processCommandPKchb+0x3c8>)
   d4a94:	6858      	ldr	r0, [r3, #4]
   d4a96:	681a      	ldr	r2, [r3, #0]
            bool newBot = true;
   d4a98:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   d4a9a:	4290      	cmp	r0, r2
   d4a9c:	d005      	beq.n	d4aaa <_Z14processCommandPKchb+0x34a>
                if(rxBotID == w.botNum) newBot = false;
   d4a9e:	f812 1b18 	ldrb.w	r1, [r2], #24
   d4aa2:	42a1      	cmp	r1, r4
   d4aa4:	bf08      	it	eq
   d4aa6:	2300      	moveq	r3, #0
   d4aa8:	e7f7      	b.n	d4a9a <_Z14processCommandPKchb+0x33a>
            }
            if(newBot){
   d4aaa:	b31b      	cbz	r3, d4af4 <_Z14processCommandPKchb+0x394>
                Serial.println("Found a new water bot ID");
   d4aac:	f005 fa84 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4ab0:	4928      	ldr	r1, [pc, #160]	; (d4b54 <_Z14processCommandPKchb+0x3f4>)
   d4ab2:	f004 feac 	bl	d980e <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
                if(mode == 1) newWaterbot.BLEAvail = true;
   d4ab6:	f1b8 0f01 	cmp.w	r8, #1
   d4aba:	d102      	bne.n	d4ac2 <_Z14processCommandPKchb+0x362>
   d4abc:	f887 802a 	strb.w	r8, [r7, #42]	; 0x2a
   d4ac0:	e00c      	b.n	d4adc <_Z14processCommandPKchb+0x37c>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   d4ac2:	f1b8 0f02 	cmp.w	r8, #2
   d4ac6:	f04f 0301 	mov.w	r3, #1
   d4aca:	d102      	bne.n	d4ad2 <_Z14processCommandPKchb+0x372>
   d4acc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   d4ad0:	e004      	b.n	d4adc <_Z14processCommandPKchb+0x37c>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   d4ad2:	f1b8 0f03 	cmp.w	r8, #3
   d4ad6:	bf08      	it	eq
   d4ad8:	f887 302b 	strbeq.w	r3, [r7, #43]	; 0x2b
                newWaterbot.botNum = rxBotID;
   d4adc:	f107 0558 	add.w	r5, r7, #88	; 0x58
                WaterBots.push_back(newWaterbot);
   d4ae0:	4811      	ldr	r0, [pc, #68]	; (d4b28 <_Z14processCommandPKchb+0x3c8>)
                Serial.println("Found a new water bot ID");
                WaterBot newWaterbot;
                if(mode == 1) newWaterbot.BLEAvail = true;
                else if(mode == 2) newWaterbot.XBeeAvail = true;
                else if(mode == 3) newWaterbot.LTEAvail = true;
                newWaterbot.botNum = rxBotID;
   d4ae2:	f805 4d30 	strb.w	r4, [r5, #-48]!
                WaterBots.push_back(newWaterbot);
   d4ae6:	4629      	mov	r1, r5
   d4ae8:	f7ff fe24 	bl	d4734 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   d4aec:	4629      	mov	r1, r5
   d4aee:	481f      	ldr	r0, [pc, #124]	; (d4b6c <_Z14processCommandPKchb+0x40c>)
   d4af0:	f7ff fe20 	bl	d4734 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            }
            botPairRx = true;
   d4af4:	4b1e      	ldr	r3, [pc, #120]	; (d4b70 <_Z14processCommandPKchb+0x410>)
   d4af6:	2201      	movs	r2, #1
   d4af8:	701a      	strb	r2, [r3, #0]
   d4afa:	e086      	b.n	d4c0a <_Z14processCommandPKchb+0x4aa>
   d4afc:	000dd736 	.word	0x000dd736
   d4b00:	2003e304 	.word	0x2003e304
   d4b04:	000dd74b 	.word	0x000dd74b
   d4b08:	2003dad5 	.word	0x2003dad5
   d4b0c:	000dd768 	.word	0x000dd768
   d4b10:	000dd794 	.word	0x000dd794
   d4b14:	000dd7b5 	.word	0x000dd7b5
   d4b18:	2003e282 	.word	0x2003e282
   d4b1c:	2003dbbc 	.word	0x2003dbbc
   d4b20:	000dd7c1 	.word	0x000dd7c1
   d4b24:	000dd7c5 	.word	0x000dd7c5
   d4b28:	2003d640 	.word	0x2003d640
   d4b2c:	000dd7c9 	.word	0x000dd7c9
   d4b30:	000dd7d5 	.word	0x000dd7d5
   d4b34:	000dd7e4 	.word	0x000dd7e4
   d4b38:	000dd7ff 	.word	0x000dd7ff
   d4b3c:	000dd81a 	.word	0x000dd81a
   d4b40:	000dd836 	.word	0x000dd836
   d4b44:	000dd852 	.word	0x000dd852
   d4b48:	000dd86d 	.word	0x000dd86d
   d4b4c:	000dd88b 	.word	0x000dd88b
   d4b50:	000dd8a6 	.word	0x000dd8a6
   d4b54:	000dd8b6 	.word	0x000dd8b6
   d4b58:	000dd8cf 	.word	0x000dd8cf
   d4b5c:	000dd8db 	.word	0x000dd8db
   d4b60:	2003e27f 	.word	0x2003e27f
   d4b64:	2003e260 	.word	0x2003e260
   d4b68:	000dd9b4 	.word	0x000dd9b4
   d4b6c:	2003dbb0 	.word	0x2003dbb0
   d4b70:	2003db75 	.word	0x2003db75
        }
        else if(!strcmp(cmdStr,"pts")){
   d4b74:	4928      	ldr	r1, [pc, #160]	; (d4c18 <_Z14processCommandPKchb+0x4b8>)
   d4b76:	f107 0010 	add.w	r0, r7, #16
   d4b7a:	f006 fb5c 	bl	db236 <strcmp>
   d4b7e:	4604      	mov	r4, r0
   d4b80:	2800      	cmp	r0, #0
   d4b82:	d142      	bne.n	d4c0a <_Z14processCommandPKchb+0x4aa>
            Serial.println(dataStr);
   d4b84:	f005 fa18 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4b88:	4631      	mov	r1, r6
   d4b8a:	f004 fe40 	bl	d980e <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   d4b8e:	f244 2202 	movw	r2, #16898	; 0x4202
   d4b92:	4922      	ldr	r1, [pc, #136]	; (d4c1c <_Z14processCommandPKchb+0x4bc>)
   d4b94:	4822      	ldr	r0, [pc, #136]	; (d4c20 <_Z14processCommandPKchb+0x4c0>)
   d4b96:	f7ff fbe1 	bl	d435c <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d4b9a:	4922      	ldr	r1, [pc, #136]	; (d4c24 <_Z14processCommandPKchb+0x4c4>)
   d4b9c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4ba0:	f004 ffe9 	bl	d9b76 <_ZN6StringC1EPK19__FlashStringHelper>
   d4ba4:	4920      	ldr	r1, [pc, #128]	; (d4c28 <_Z14processCommandPKchb+0x4c8>)
   d4ba6:	f107 0038 	add.w	r0, r7, #56	; 0x38
   d4baa:	f004 ffe4 	bl	d9b76 <_ZN6StringC1EPK19__FlashStringHelper>
   d4bae:	491f      	ldr	r1, [pc, #124]	; (d4c2c <_Z14processCommandPKchb+0x4cc>)
   d4bb0:	f107 0048 	add.w	r0, r7, #72	; 0x48
   d4bb4:	f004 ffdf 	bl	d9b76 <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   d4bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   d4bbc:	eb03 1108 	add.w	r1, r3, r8, lsl #4
   d4bc0:	f107 0018 	add.w	r0, r7, #24
   d4bc4:	f004 fff9 	bl	d9bba <_ZN6StringC1ERKS_>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4bc8:	f107 0318 	add.w	r3, r7, #24
   d4bcc:	4a18      	ldr	r2, [pc, #96]	; (d4c30 <_Z14processCommandPKchb+0x4d0>)
   d4bce:	4819      	ldr	r0, [pc, #100]	; (d4c34 <_Z14processCommandPKchb+0x4d4>)
   d4bd0:	4621      	mov	r1, r4
   d4bd2:	f004 fe46 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
   d4bd6:	f107 0018 	add.w	r0, r7, #24
   d4bda:	f004 ff85 	bl	d9ae8 <_ZN6StringD1Ev>
            myFile.println(dataStr);
   d4bde:	4631      	mov	r1, r6
   d4be0:	4814      	ldr	r0, [pc, #80]	; (d4c34 <_Z14processCommandPKchb+0x4d4>)
   d4be2:	f004 fe14 	bl	d980e <_ZN5Print7printlnEPKc>
            delay(5);
   d4be6:	2005      	movs	r0, #5
   d4be8:	f002 fcce 	bl	d7588 <delay>
            myFile.close();
   d4bec:	480c      	ldr	r0, [pc, #48]	; (d4c20 <_Z14processCommandPKchb+0x4c0>)
   d4bee:	f000 ffcd 	bl	d5b8c <_ZN7FatFile5closeEv>
            botPairRx = true;
        }
        else if(!strcmp(cmdStr,"pts")){
            Serial.println(dataStr);
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   d4bf2:	f107 0048 	add.w	r0, r7, #72	; 0x48
   d4bf6:	f004 ff77 	bl	d9ae8 <_ZN6StringD1Ev>
   d4bfa:	f107 0038 	add.w	r0, r7, #56	; 0x38
   d4bfe:	f004 ff73 	bl	d9ae8 <_ZN6StringD1Ev>
   d4c02:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4c06:	f004 ff6f 	bl	d9ae8 <_ZN6StringD1Ev>
                rxBotNum[1] = command[1];
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
                errModeReply = mode;
            }
            
            return;
   d4c0a:	46cd      	mov	sp, r9
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d4c0c:	375c      	adds	r7, #92	; 0x5c
   d4c0e:	46bd      	mov	sp, r7
   d4c10:	ecbd 8b02 	vpop	{d8}
   d4c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c18:	000dd8df 	.word	0x000dd8df
   d4c1c:	000dd8e3 	.word	0x000dd8e3
   d4c20:	2003db50 	.word	0x2003db50
   d4c24:	000dd8f0 	.word	0x000dd8f0
   d4c28:	000dd8f4 	.word	0x000dd8f4
   d4c2c:	000dd8f9 	.word	0x000dd8f9
   d4c30:	000dd903 	.word	0x000dd903
   d4c34:	2003db40 	.word	0x2003db40

000d4c38 <_Z14dataLTEHandlerPKcS0_>:

void BLEScan(int BotNumber = -1);
void XBeeHandler();
void dataLTEHandler(const char *event, const char *data);

void dataLTEHandler(const char *event, const char *data){
   d4c38:	b510      	push	{r4, lr}
   d4c3a:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	2104      	movs	r1, #4
   d4c40:	4620      	mov	r0, r4
   d4c42:	f7ff fd8d 	bl	d4760 <_Z14processCommandPKchb>
    if(logMessages){
   d4c46:	4b0b      	ldr	r3, [pc, #44]	; (d4c74 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   d4c48:	781b      	ldrb	r3, [r3, #0]
   d4c4a:	b193      	cbz	r3, d4c72 <_Z14dataLTEHandlerPKcS0_+0x3a>
   d4c4c:	480a      	ldr	r0, [pc, #40]	; (d4c78 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c4e:	7c03      	ldrb	r3, [r0, #16]
   d4c50:	b92b      	cbnz	r3, d4c5e <_Z14dataLTEHandlerPKcS0_+0x26>
   d4c52:	f244 2202 	movw	r2, #16898	; 0x4202
   d4c56:	4909      	ldr	r1, [pc, #36]	; (d4c7c <_Z14dataLTEHandlerPKcS0_+0x44>)
   d4c58:	3010      	adds	r0, #16
   d4c5a:	f7ff fb7f 	bl	d435c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d4c5e:	4622      	mov	r2, r4
   d4c60:	4907      	ldr	r1, [pc, #28]	; (d4c80 <_Z14dataLTEHandlerPKcS0_+0x48>)
   d4c62:	4805      	ldr	r0, [pc, #20]	; (d4c78 <_Z14dataLTEHandlerPKcS0_+0x40>)
   d4c64:	f7ff fc69 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4c68:	4806      	ldr	r0, [pc, #24]	; (d4c84 <_Z14dataLTEHandlerPKcS0_+0x4c>)
    }
}
   d4c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void dataLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4c6e:	f000 bf8d 	b.w	d5b8c <_ZN7FatFile5closeEv>
   d4c72:	bd10      	pop	{r4, pc}
   d4c74:	2003db3c 	.word	0x2003db3c
   d4c78:	2003e304 	.word	0x2003e304
   d4c7c:	2003dad5 	.word	0x2003dad5
   d4c80:	000dd918 	.word	0x000dd918
   d4c84:	2003e314 	.word	0x2003e314

000d4c88 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
            logFile.close();
        }
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4c88:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len+1];
   d4c8a:	f101 0308 	add.w	r3, r1, #8
   d4c8e:	f023 0307 	bic.w	r3, r3, #7
            logFile.close();
        }
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4c92:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   d4c94:	ebad 0d03 	sub.w	sp, sp, r3
   d4c98:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	428b      	cmp	r3, r1
   d4c9e:	d003      	beq.n	d4ca8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
   d4ca0:	5cc2      	ldrb	r2, [r0, r3]
   d4ca2:	54e2      	strb	r2, [r4, r3]
   d4ca4:	3301      	adds	r3, #1
   d4ca6:	e7f9      	b.n	d4c9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   d4ca8:	1e5a      	subs	r2, r3, #1
   d4caa:	5ca1      	ldrb	r1, [r4, r2]
   d4cac:	b111      	cbz	r1, d4cb4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   d4cae:	2200      	movs	r2, #0
   d4cb0:	54e2      	strb	r2, [r4, r3]
   d4cb2:	e000      	b.n	d4cb6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
    else btBuf[len-1] = '\0';
   d4cb4:	54a1      	strb	r1, [r4, r2]
    Serial.print("New BT Command: ");
   d4cb6:	f005 f97f 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4cba:	4911      	ldr	r1, [pc, #68]	; (d4d00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d4cbc:	f004 fd94 	bl	d97e8 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   d4cc0:	f005 f97a 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4cc4:	4621      	mov	r1, r4
   d4cc6:	f004 fda2 	bl	d980e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d4cca:	2201      	movs	r2, #1
   d4ccc:	4611      	mov	r1, r2
   d4cce:	4620      	mov	r0, r4
   d4cd0:	f7ff fd46 	bl	d4760 <_Z14processCommandPKchb>
    if(logMessages){
   d4cd4:	4b0b      	ldr	r3, [pc, #44]	; (d4d04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d4cd6:	781b      	ldrb	r3, [r3, #0]
   d4cd8:	b183      	cbz	r3, d4cfc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   d4cda:	480b      	ldr	r0, [pc, #44]	; (d4d08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4cdc:	7c03      	ldrb	r3, [r0, #16]
   d4cde:	b92b      	cbnz	r3, d4cec <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   d4ce0:	f244 2202 	movw	r2, #16898	; 0x4202
   d4ce4:	4909      	ldr	r1, [pc, #36]	; (d4d0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   d4ce6:	3010      	adds	r0, #16
   d4ce8:	f7ff fb38 	bl	d435c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4cec:	4622      	mov	r2, r4
   d4cee:	4908      	ldr	r1, [pc, #32]	; (d4d10 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4cf0:	4805      	ldr	r0, [pc, #20]	; (d4d08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4cf2:	f7ff fc22 	bl	d453a <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4cf6:	4807      	ldr	r0, [pc, #28]	; (d4d14 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4cf8:	f000 ff48 	bl	d5b8c <_ZN7FatFile5closeEv>
    }
}
   d4cfc:	46bd      	mov	sp, r7
   d4cfe:	bd98      	pop	{r3, r4, r7, pc}
   d4d00:	000dd938 	.word	0x000dd938
   d4d04:	2003db3c 	.word	0x2003db3c
   d4d08:	2003e304 	.word	0x2003e304
   d4d0c:	2003dad5 	.word	0x2003dad5
   d4d10:	000dd949 	.word	0x000dd949
   d4d14:	2003e314 	.word	0x2003e314

000d4d18 <_Z11XBeeHandlerv>:
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
   d4d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        if(logMessages){
   d4d1c:	4e2e      	ldr	r6, [pc, #184]	; (d4dd8 <_Z11XBeeHandlerv+0xc0>)
   d4d1e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4dec <_Z11XBeeHandlerv+0xd4>
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
   d4d22:	b089      	sub	sp, #36	; 0x24
   d4d24:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   d4d26:	f005 f8bf 	bl	d9ea8 <_Z22__fetch_global_Serial1v>
   d4d2a:	6803      	ldr	r3, [r0, #0]
   d4d2c:	691b      	ldr	r3, [r3, #16]
   d4d2e:	4798      	blx	r3
   d4d30:	2800      	cmp	r0, #0
   d4d32:	d04c      	beq.n	d4dce <_Z11XBeeHandlerv+0xb6>
        String data = Serial1.readStringUntil('\n');
   d4d34:	f005 f8b8 	bl	d9ea8 <_Z22__fetch_global_Serial1v>
   d4d38:	220a      	movs	r2, #10
   d4d3a:	4601      	mov	r1, r0
   d4d3c:	4638      	mov	r0, r7
   d4d3e:	f004 febb 	bl	d9ab8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   d4d42:	68bb      	ldr	r3, [r7, #8]
   d4d44:	3307      	adds	r3, #7
   d4d46:	f023 0307 	bic.w	r3, r3, #7
        if(logMessages){
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
   d4d4a:	466d      	mov	r5, sp
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
        char buffer[data.length()];
   d4d4c:	ebad 0d03 	sub.w	sp, sp, r3
   d4d50:	46e9      	mov	r9, sp
   d4d52:	466c      	mov	r4, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   d4d54:	68bb      	ldr	r3, [r7, #8]
   d4d56:	ebc9 0104 	rsb	r1, r9, r4
   d4d5a:	428b      	cmp	r3, r1
   d4d5c:	d905      	bls.n	d4d6a <_Z11XBeeHandlerv+0x52>
   d4d5e:	4638      	mov	r0, r7
   d4d60:	f004 ff74 	bl	d9c4c <_ZNK6String6charAtEj>
   d4d64:	f804 0b01 	strb.w	r0, [r4], #1
   d4d68:	e7f4      	b.n	d4d54 <_Z11XBeeHandlerv+0x3c>
        processCommand(buffer,2,true);
   d4d6a:	2201      	movs	r2, #1
   d4d6c:	2102      	movs	r1, #2
   d4d6e:	4648      	mov	r0, r9
   d4d70:	f7ff fcf6 	bl	d4760 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   d4d74:	f005 f920 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4d78:	4918      	ldr	r1, [pc, #96]	; (d4ddc <_Z11XBeeHandlerv+0xc4>)
   d4d7a:	f004 fd48 	bl	d980e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   d4d7e:	f005 f91b 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4d82:	6839      	ldr	r1, [r7, #0]
   d4d84:	f004 fd43 	bl	d980e <_ZN5Print7printlnEPKc>
        if(logMessages){
   d4d88:	7833      	ldrb	r3, [r6, #0]
   d4d8a:	b1db      	cbz	r3, d4dc4 <_Z11XBeeHandlerv+0xac>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4d8c:	f898 3010 	ldrb.w	r3, [r8, #16]
   d4d90:	b92b      	cbnz	r3, d4d9e <_Z11XBeeHandlerv+0x86>
   d4d92:	f244 2202 	movw	r2, #16898	; 0x4202
   d4d96:	4912      	ldr	r1, [pc, #72]	; (d4de0 <_Z11XBeeHandlerv+0xc8>)
   d4d98:	4812      	ldr	r0, [pc, #72]	; (d4de4 <_Z11XBeeHandlerv+0xcc>)
   d4d9a:	f7ff fadf 	bl	d435c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   d4d9e:	4639      	mov	r1, r7
   d4da0:	f107 0010 	add.w	r0, r7, #16
   d4da4:	f004 ff09 	bl	d9bba <_ZN6StringC1ERKS_>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4da8:	f107 0310 	add.w	r3, r7, #16
   d4dac:	4a0e      	ldr	r2, [pc, #56]	; (d4de8 <_Z11XBeeHandlerv+0xd0>)
   d4dae:	480f      	ldr	r0, [pc, #60]	; (d4dec <_Z11XBeeHandlerv+0xd4>)
   d4db0:	2101      	movs	r1, #1
   d4db2:	f004 fd56 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
   d4db6:	f107 0010 	add.w	r0, r7, #16
   d4dba:	f004 fe95 	bl	d9ae8 <_ZN6StringD1Ev>
            logFile.close();
   d4dbe:	4809      	ldr	r0, [pc, #36]	; (d4de4 <_Z11XBeeHandlerv+0xcc>)
   d4dc0:	f000 fee4 	bl	d5b8c <_ZN7FatFile5closeEv>
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
   d4dc4:	4638      	mov	r0, r7
   d4dc6:	f004 fe8f 	bl	d9ae8 <_ZN6StringD1Ev>
   d4dca:	46ad      	mov	sp, r5
    }
    if(logDir.isOpen()) logDir.close();
}

void XBeeHandler(){  
    while(Serial1.available()){
   d4dcc:	e7ab      	b.n	d4d26 <_Z11XBeeHandlerv+0xe>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
}
   d4dce:	3724      	adds	r7, #36	; 0x24
   d4dd0:	46bd      	mov	sp, r7
   d4dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4dd6:	bf00      	nop
   d4dd8:	2003db3c 	.word	0x2003db3c
   d4ddc:	000dd969 	.word	0x000dd969
   d4de0:	2003dad5 	.word	0x2003dad5
   d4de4:	2003e314 	.word	0x2003e314
   d4de8:	000dd97b 	.word	0x000dd97b
   d4dec:	2003e304 	.word	0x2003e304

000d4df0 <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d4df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4df4:	6843      	ldr	r3, [r0, #4]
   d4df6:	6804      	ldr	r4, [r0, #0]
   d4df8:	1b1c      	subs	r4, r3, r4
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d4dfa:	10e4      	asrs	r4, r4, #3
   d4dfc:	bf14      	ite	ne
   d4dfe:	4623      	movne	r3, r4
   d4e00:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4e02:	18e4      	adds	r4, r4, r3
   d4e04:	4606      	mov	r6, r0
   d4e06:	4689      	mov	r9, r1
   d4e08:	d202      	bcs.n	d4e10 <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x20>
   d4e0a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   d4e0e:	d323      	bcc.n	d4e58 <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x68>
   d4e10:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4e14:	00e0      	lsls	r0, r4, #3
   d4e16:	f7ff f940 	bl	d409a <_Znwj>
   d4e1a:	4607      	mov	r7, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4e1c:	f8d6 8000 	ldr.w	r8, [r6]
   d4e20:	6875      	ldr	r5, [r6, #4]
   d4e22:	ebc8 0505 	rsb	r5, r8, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4e26:	197b      	adds	r3, r7, r5
   d4e28:	bf1c      	itt	ne
   d4e2a:	e899 0003 	ldmiane.w	r9, {r0, r1}
   d4e2e:	e883 0003 	stmiane.w	r3, {r0, r1}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4e32:	08eb      	lsrs	r3, r5, #3
   d4e34:	d004      	beq.n	d4e40 <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4e36:	462a      	mov	r2, r5
   d4e38:	4641      	mov	r1, r8
   d4e3a:	4638      	mov	r0, r7
   d4e3c:	f006 f9a0 	bl	db180 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d4e40:	3508      	adds	r5, #8
   d4e42:	443d      	add	r5, r7
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
   d4e44:	4640      	mov	r0, r8
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4e46:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
   d4e4a:	f7ff f9fb 	bl	d4244 <_ZNSt12_Vector_baseI7PairBotSaIS0_EE13_M_deallocateEPS0_j.isra.35>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4e4e:	6037      	str	r7, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
   d4e50:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4e52:	60b4      	str	r4, [r6, #8]
      }
   d4e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4e58:	2c00      	cmp	r4, #0
   d4e5a:	d1db      	bne.n	d4e14 <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d4e5c:	4627      	mov	r7, r4
   d4e5e:	e7dd      	b.n	d4e1c <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2c>

000d4e60 <_Z7BLEScani>:
        }

    }
}

void BLEScan(int BotNumber){
   d4e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e64:	b097      	sub	sp, #92	; 0x5c
   d4e66:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d4e68:	f003 f81e 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4e6c:	2214      	movs	r2, #20
   d4e6e:	495c      	ldr	r1, [pc, #368]	; (d4fe0 <_Z7BLEScani+0x180>)
   d4e70:	f003 f870 	bl	d7f54 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   d4e74:	4681      	mov	r9, r0
   d4e76:	2800      	cmp	r0, #0
   d4e78:	f000 80af 	beq.w	d4fda <_Z7BLEScani+0x17a>
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4e7c:	f8df a160 	ldr.w	sl, [pc, #352]	; d4fe0 <_Z7BLEScani+0x180>
   d4e80:	2700      	movs	r7, #0
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4e82:	b2fd      	uxtb	r5, r7
   d4e84:	45a9      	cmp	r9, r5
   d4e86:	f240 80a8 	bls.w	d4fda <_Z7BLEScani+0x17a>
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4e8a:	2454      	movs	r4, #84	; 0x54
   d4e8c:	fb04 a405 	mla	r4, r4, r5, sl

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4e90:	a803      	add	r0, sp, #12
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4e92:	3408      	adds	r4, #8

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
   d4e94:	f002 fc36 	bl	d7704 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4e98:	2201      	movs	r2, #1
   d4e9a:	a903      	add	r1, sp, #12
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f002 fe39 	bl	d7b14 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4ea2:	2208      	movs	r2, #8
void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
			BleUuid foundServiceUuid;
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4ea4:	4683      	mov	fp, r0
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
   d4ea6:	a901      	add	r1, sp, #4
   d4ea8:	484e      	ldr	r0, [pc, #312]	; (d4fe4 <_Z7BLEScani+0x184>)
   d4eaa:	f8df 8134 	ldr.w	r8, [pc, #308]	; d4fe0 <_Z7BLEScani+0x180>
   d4eae:	f002 fdef 	bl	d7a90 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d4eb2:	f1bb 0f00 	cmp.w	fp, #0
   d4eb6:	f000 808e 	beq.w	d4fd6 <_Z7BLEScani+0x176>
   d4eba:	494b      	ldr	r1, [pc, #300]	; (d4fe8 <_Z7BLEScani+0x188>)
   d4ebc:	a803      	add	r0, sp, #12
   d4ebe:	f002 fcc1 	bl	d7844 <_ZNK8particle7BleUuideqERKS0_>
   d4ec2:	2800      	cmp	r0, #0
   d4ec4:	f000 8087 	beq.w	d4fd6 <_Z7BLEScani+0x176>
                if(BotNumber == -2){
   d4ec8:	1cb3      	adds	r3, r6, #2
   d4eca:	d125      	bne.n	d4f18 <_Z7BLEScani+0xb8>
   d4ecc:	4b47      	ldr	r3, [pc, #284]	; (d4fec <_Z7BLEScani+0x18c>)
                    bool newBot = true;
                    PairBot *existingBot;
                    for(PairBot p: BLEPair){
                        if(BLECustomData[0] == p.botNum){
   d4ece:	f89d e004 	ldrb.w	lr, [sp, #4]
   d4ed2:	685a      	ldr	r2, [r3, #4]
   d4ed4:	6818      	ldr	r0, [r3, #0]
			size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
            uint8_t BLECustomData[CUSTOM_DATA_LEN];
            scanResults->advertisingData.customData(BLECustomData,CUSTOM_DATA_LEN);
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
                if(BotNumber == -2){
                    bool newBot = true;
   d4ed6:	2101      	movs	r1, #1
                    PairBot *existingBot;
                    for(PairBot p: BLEPair){
   d4ed8:	4282      	cmp	r2, r0
   d4eda:	d005      	beq.n	d4ee8 <_Z7BLEScani+0x88>
                        if(BLECustomData[0] == p.botNum){
   d4edc:	f810 cb08 	ldrb.w	ip, [r0], #8
                            newBot = false;
   d4ee0:	45f4      	cmp	ip, lr
   d4ee2:	bf08      	it	eq
   d4ee4:	2100      	moveq	r1, #0
   d4ee6:	e7f7      	b.n	d4ed8 <_Z7BLEScani+0x78>
                            existingBot = &p;
                        } 
                    }
                    if(newBot){
   d4ee8:	2900      	cmp	r1, #0
   d4eea:	d070      	beq.n	d4fce <_Z7BLEScani+0x16e>
                        PairBot NewBot;
                        NewBot.rssi = scanResults->rssi;
   d4eec:	f998 1050 	ldrsb.w	r1, [r8, #80]	; 0x50
   d4ef0:	910f      	str	r1, [sp, #60]	; 0x3c
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4ef2:	6899      	ldr	r1, [r3, #8]
                        NewBot.botNum = BLECustomData[0];
   d4ef4:	f88d e038 	strb.w	lr, [sp, #56]	; 0x38
   d4ef8:	428a      	cmp	r2, r1
   d4efa:	d008      	beq.n	d4f0e <_Z7BLEScani+0xae>
   d4efc:	b11a      	cbz	r2, d4f06 <_Z7BLEScani+0xa6>
   d4efe:	a90e      	add	r1, sp, #56	; 0x38
   d4f00:	c903      	ldmia	r1, {r0, r1}
   d4f02:	e882 0003 	stmia.w	r2, {r0, r1}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d4f06:	685a      	ldr	r2, [r3, #4]
   d4f08:	3208      	adds	r2, #8
   d4f0a:	605a      	str	r2, [r3, #4]
   d4f0c:	e05f      	b.n	d4fce <_Z7BLEScani+0x16e>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d4f0e:	a90e      	add	r1, sp, #56	; 0x38
   d4f10:	4836      	ldr	r0, [pc, #216]	; (d4fec <_Z7BLEScani+0x18c>)
   d4f12:	f7ff ff6d 	bl	d4df0 <_ZNSt6vectorI7PairBotSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
   d4f16:	e05a      	b.n	d4fce <_Z7BLEScani+0x16e>
                    }
                    else{
                        existingBot->rssi = (scanResults->rssi + existingBot->rssi) >> 1;
                    }
                }
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   d4f18:	1c72      	adds	r2, r6, #1
   d4f1a:	d158      	bne.n	d4fce <_Z7BLEScani+0x16e>
                    peer = BLE.connect(scanResults[ii].address);
   d4f1c:	f002 ffc4 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4f20:	2254      	movs	r2, #84	; 0x54
   d4f22:	2301      	movs	r3, #1
   d4f24:	fb02 8205 	mla	r2, r2, r5, r8
   d4f28:	4601      	mov	r1, r0
   d4f2a:	a80e      	add	r0, sp, #56	; 0x38
   d4f2c:	f003 fd06 	bl	d893c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4f30:	a90e      	add	r1, sp, #56	; 0x38
   d4f32:	482f      	ldr	r0, [pc, #188]	; (d4ff0 <_Z7BLEScani+0x190>)
   d4f34:	f003 f941 	bl	d81ba <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4f38:	a80e      	add	r0, sp, #56	; 0x38
   d4f3a:	f003 f862 	bl	d8002 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   d4f3e:	482c      	ldr	r0, [pc, #176]	; (d4ff0 <_Z7BLEScani+0x190>)
   d4f40:	f002 ff52 	bl	d7de8 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4f44:	2800      	cmp	r0, #0
   d4f46:	d048      	beq.n	d4fda <_Z7BLEScani+0x17a>
                        meshPair = false;
   d4f48:	4b2a      	ldr	r3, [pc, #168]	; (d4ff4 <_Z7BLEScani+0x194>)
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	701a      	strb	r2, [r3, #0]
                        uint8_t bufName[BLE_MAX_ADV_DATA_LEN];
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
   d4f4e:	a90e      	add	r1, sp, #56	; 0x38
   d4f50:	221f      	movs	r2, #31
   d4f52:	4620      	mov	r0, r4
   d4f54:	f002 fd9c 	bl	d7a90 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d4f58:	4a27      	ldr	r2, [pc, #156]	; (d4ff8 <_Z7BLEScani+0x198>)
   d4f5a:	4928      	ldr	r1, [pc, #160]	; (d4ffc <_Z7BLEScani+0x19c>)
   d4f5c:	4824      	ldr	r0, [pc, #144]	; (d4ff0 <_Z7BLEScani+0x190>)
   d4f5e:	f003 f908 	bl	d8172 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d4f62:	4a27      	ldr	r2, [pc, #156]	; (d5000 <_Z7BLEScani+0x1a0>)
   d4f64:	4927      	ldr	r1, [pc, #156]	; (d5004 <_Z7BLEScani+0x1a4>)
   d4f66:	4822      	ldr	r0, [pc, #136]	; (d4ff0 <_Z7BLEScani+0x190>)
   d4f68:	f003 f903 	bl	d8172 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   d4f6c:	4a26      	ldr	r2, [pc, #152]	; (d5008 <_Z7BLEScani+0x1a8>)
   d4f6e:	4927      	ldr	r1, [pc, #156]	; (d500c <_Z7BLEScani+0x1ac>)
   d4f70:	481f      	ldr	r0, [pc, #124]	; (d4ff0 <_Z7BLEScani+0x190>)
   d4f72:	f003 f8fe 	bl	d8172 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   d4f76:	f005 f81f 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4f7a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d4f7e:	4924      	ldr	r1, [pc, #144]	; (d5010 <_Z7BLEScani+0x1b0>)
   d4f80:	f7ff fad6 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
   d4f84:	4b23      	ldr	r3, [pc, #140]	; (d5014 <_Z7BLEScani+0x1b4>)
                        bool newBot = true;
                        for(WaterBot w: WaterBots){
                            if(bufName[0] == w.botNum){
   d4f86:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   d4f8a:	685d      	ldr	r5, [r3, #4]
   d4f8c:	6819      	ldr	r1, [r3, #0]
                        scanResults[ii].advertisingData.customData(bufName, BLE_MAX_ADV_DATA_LEN);
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
						Serial.printlnf("Connected to Bot %d",bufName[0]);
                        bool newBot = true;
   d4f8e:	2201      	movs	r2, #1
   d4f90:	461c      	mov	r4, r3
                        for(WaterBot w: WaterBots){
   d4f92:	428d      	cmp	r5, r1
   d4f94:	d005      	beq.n	d4fa2 <_Z7BLEScani+0x142>
                            if(bufName[0] == w.botNum){
   d4f96:	f811 3b18 	ldrb.w	r3, [r1], #24
                                newBot = false;
   d4f9a:	4283      	cmp	r3, r0
   d4f9c:	bf08      	it	eq
   d4f9e:	2200      	moveq	r2, #0
   d4fa0:	e7f7      	b.n	d4f92 <_Z7BLEScani+0x132>
                                w.BLEAvail = true;
                            }
                        }
                        if(newBot){
   d4fa2:	b1d2      	cbz	r2, d4fda <_Z7BLEScani+0x17a>
                            Serial.println("Found a new water bot ID");
   d4fa4:	f005 f808 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d4fa8:	491b      	ldr	r1, [pc, #108]	; (d5018 <_Z7BLEScani+0x1b8>)
   d4faa:	f004 fc30 	bl	d980e <_ZN5Print7printlnEPKc>
                            WaterBot newWaterbot;
                            newWaterbot.BLEAvail = true;
   d4fae:	2301      	movs	r3, #1
                            newWaterbot.botNum = bufName[0];
   d4fb0:	a916      	add	r1, sp, #88	; 0x58
                            }
                        }
                        if(newBot){
                            Serial.println("Found a new water bot ID");
                            WaterBot newWaterbot;
                            newWaterbot.BLEAvail = true;
   d4fb2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                            newWaterbot.botNum = bufName[0];
   d4fb6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   d4fba:	f801 3d38 	strb.w	r3, [r1, #-56]!
                            WaterBots.push_back(newWaterbot);
   d4fbe:	4815      	ldr	r0, [pc, #84]	; (d5014 <_Z7BLEScani+0x1b4>)
   d4fc0:	f7ff fbb8 	bl	d4734 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                            BLEBot = &WaterBots.back();
   d4fc4:	6863      	ldr	r3, [r4, #4]
   d4fc6:	4a15      	ldr	r2, [pc, #84]	; (d501c <_Z7BLEScani+0x1bc>)
   d4fc8:	3b18      	subs	r3, #24
   d4fca:	6013      	str	r3, [r2, #0]
                    break;
                }
			}
		}
	}
}
   d4fcc:	e005      	b.n	d4fda <_Z7BLEScani+0x17a>
                    }
                    else{
                        existingBot->rssi = (scanResults->rssi + existingBot->rssi) >> 1;
                    }
                }
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   d4fce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4fd2:	429e      	cmp	r6, r3
   d4fd4:	d0a2      	beq.n	d4f1c <_Z7BLEScani+0xbc>
   d4fd6:	3701      	adds	r7, #1
}

void BLEScan(int BotNumber){
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
	if (count > 0) {
		for (uint8_t ii = 0; ii < count; ii++) {
   d4fd8:	e753      	b.n	d4e82 <_Z7BLEScani+0x22>
                    break;
                }
			}
		}
	}
}
   d4fda:	b017      	add	sp, #92	; 0x5c
   d4fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fe0:	2003dbc0 	.word	0x2003dbc0
   d4fe4:	2003dbc8 	.word	0x2003dbc8
   d4fe8:	2003e2f0 	.word	0x2003e2f0
   d4fec:	2003e2c4 	.word	0x2003e2c4
   d4ff0:	2003e2d0 	.word	0x2003e2d0
   d4ff4:	2003db9c 	.word	0x2003db9c
   d4ff8:	2003e294 	.word	0x2003e294
   d4ffc:	2003dba0 	.word	0x2003dba0
   d5000:	2003daf4 	.word	0x2003daf4
   d5004:	2003d638 	.word	0x2003d638
   d5008:	2003e2d8 	.word	0x2003e2d8
   d500c:	2003dba8 	.word	0x2003dba8
   d5010:	000dd99c 	.word	0x000dd99c
   d5014:	2003d640 	.word	0x2003d640
   d5018:	000dd8b6 	.word	0x000dd8b6
   d501c:	2003db98 	.word	0x2003db98

000d5020 <_Z11startupPairv>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void startupPair(){
   d5020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startConnect = false;
   d5024:	4d2f      	ldr	r5, [pc, #188]	; (d50e4 <_Z11startupPairv+0xc4>)
   d5026:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d50f8 <_Z11startupPairv+0xd8>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d502a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d50fc <_Z11startupPairv+0xdc>
   d502e:	2300      	movs	r3, #0
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void startupPair(){
   d5030:	b085      	sub	sp, #20
    startConnect = false;
   d5032:	702b      	strb	r3, [r5, #0]
    while(!startConnect){
   d5034:	782b      	ldrb	r3, [r5, #0]
   d5036:	2b00      	cmp	r3, #0
   d5038:	d151      	bne.n	d50de <_Z11startupPairv+0xbe>
        BLEScan(-2);
   d503a:	f06f 0001 	mvn.w	r0, #1
   d503e:	f7ff ff0f 	bl	d4e60 <_Z7BLEScani>
        XBeeHandler();
   d5042:	f7ff fe69 	bl	d4d18 <_Z11XBeeHandlerv>
        XBeeLTEPairSet();
   d5046:	f7ff fa4f 	bl	d44e8 <_Z14XBeeLTEPairSetv>
        delay(100);
   d504a:	2064      	movs	r0, #100	; 0x64
   d504c:	f002 fa9c 	bl	d7588 <delay>
        if(digitalRead(PAIR_BUTTON)){
   d5050:	2003      	movs	r0, #3
   d5052:	f005 f8bf 	bl	da1d4 <digitalRead>
   d5056:	2800      	cmp	r0, #0
   d5058:	d0ec      	beq.n	d5034 <_Z11startupPairv+0x14>
   d505a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d505e:	f8d8 3000 	ldr.w	r3, [r8]
            int minRSSI = -999;
   d5062:	4a21      	ldr	r2, [pc, #132]	; (d50e8 <_Z11startupPairv+0xc8>)
            int selectedBot = -1;
   d5064:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
            for(PairBot pb: BLEPair){
   d5068:	4298      	cmp	r0, r3
   d506a:	d007      	beq.n	d507c <_Z11startupPairv+0x5c>
   d506c:	6859      	ldr	r1, [r3, #4]
   d506e:	781c      	ldrb	r4, [r3, #0]
                if(pb.rssi > minRSSI){
   d5070:	428a      	cmp	r2, r1
                    minRSSI = pb.rssi;
                    selectedBot = pb.botNum;
   d5072:	bfbc      	itt	lt
   d5074:	4626      	movlt	r6, r4
   d5076:	460a      	movlt	r2, r1
   d5078:	3308      	adds	r3, #8
   d507a:	e7f5      	b.n	d5068 <_Z11startupPairv+0x48>
                }
                
            }
            if(selectedBot > 0){
   d507c:	2e00      	cmp	r6, #0
   d507e:	4f1b      	ldr	r7, [pc, #108]	; (d50ec <_Z11startupPairv+0xcc>)
            }
            uint8_t BLETimeout = 0;
            while(meshPair){
                BLEScan(selectedBot);
                BLETimeout++;
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   d5080:	f8df b07c 	ldr.w	fp, [pc, #124]	; d5100 <_Z11startupPairv+0xe0>
   d5084:	f8df a07c 	ldr.w	sl, [pc, #124]	; d5104 <_Z11startupPairv+0xe4>
                    selectedBot = pb.botNum;
                }
                
            }
            if(selectedBot > 0){
                meshPair = true;    //Did we find any bots over BLE
   d5088:	bfc4      	itt	gt
   d508a:	2301      	movgt	r3, #1
   d508c:	703b      	strbgt	r3, [r7, #0]
   d508e:	2400      	movs	r4, #0
            }
            uint8_t BLETimeout = 0;
            while(meshPair){
   d5090:	783b      	ldrb	r3, [r7, #0]
   d5092:	2b00      	cmp	r3, #0
   d5094:	d0ce      	beq.n	d5034 <_Z11startupPairv+0x14>
                BLEScan(selectedBot);
   d5096:	4630      	mov	r0, r6
   d5098:	f7ff fee2 	bl	d4e60 <_Z7BLEScani>
                BLETimeout++;
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   d509c:	e899 000c 	ldmia.w	r9, {r2, r3}
   d50a0:	1a9b      	subs	r3, r3, r2
   d50a2:	10db      	asrs	r3, r3, #3
   d50a4:	465a      	mov	r2, fp
                meshPair = true;    //Did we find any bots over BLE
            }
            uint8_t BLETimeout = 0;
            while(meshPair){
                BLEScan(selectedBot);
                BLETimeout++;
   d50a6:	3401      	adds	r4, #1
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   d50a8:	435a      	muls	r2, r3
                meshPair = true;    //Did we find any bots over BLE
            }
            uint8_t BLETimeout = 0;
            while(meshPair){
                BLEScan(selectedBot);
                BLETimeout++;
   d50aa:	b2e4      	uxtb	r4, r4
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   d50ac:	d101      	bne.n	d50b2 <_Z11startupPairv+0x92>
   d50ae:	2c64      	cmp	r4, #100	; 0x64
   d50b0:	d007      	beq.n	d50c2 <_Z11startupPairv+0xa2>
                if(BLETimeout > BLE_MAX_CONN_TIME) meshPair = false;
   d50b2:	2cc8      	cmp	r4, #200	; 0xc8
   d50b4:	bf84      	itt	hi
   d50b6:	2300      	movhi	r3, #0
   d50b8:	703b      	strbhi	r3, [r7, #0]
                delay(100);
   d50ba:	2064      	movs	r0, #100	; 0x64
   d50bc:	f002 fa64 	bl	d7588 <delay>
            }
            if(selectedBot > 0){
                meshPair = true;    //Did we find any bots over BLE
            }
            uint8_t BLETimeout = 0;
            while(meshPair){
   d50c0:	e7e6      	b.n	d5090 <_Z11startupPairv+0x70>
   d50c2:	f89a 3000 	ldrb.w	r3, [sl]
   d50c6:	f88d 3000 	strb.w	r3, [sp]
   d50ca:	a802      	add	r0, sp, #8
   d50cc:	233c      	movs	r3, #60	; 0x3c
   d50ce:	4a08      	ldr	r2, [pc, #32]	; (d50f0 <_Z11startupPairv+0xd0>)
   d50d0:	4908      	ldr	r1, [pc, #32]	; (d50f4 <_Z11startupPairv+0xd4>)
   d50d2:	f003 ff95 	bl	d9000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d50d6:	a803      	add	r0, sp, #12
   d50d8:	f7ff f988 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50dc:	e7ed      	b.n	d50ba <_Z11startupPairv+0x9a>
                if(BLETimeout > BLE_MAX_CONN_TIME) meshPair = false;
                delay(100);
            }
        }
    }
}
   d50de:	b005      	add	sp, #20
   d50e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50e4:	2003dad4 	.word	0x2003dad4
   d50e8:	fffffc19 	.word	0xfffffc19
   d50ec:	2003db9c 	.word	0x2003db9c
   d50f0:	000dd9b0 	.word	0x000dd9b0
   d50f4:	000dd68c 	.word	0x000dd68c
   d50f8:	2003e2c4 	.word	0x2003e2c4
   d50fc:	2003d640 	.word	0x2003d640
   d5100:	aaaaaaab 	.word	0xaaaaaaab
   d5104:	2003d64d 	.word	0x2003d64d

000d5108 <setup>:
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
        PairBots.pop_back();
    }
}

void setup() {
   d5108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d510c:	b08f      	sub	sp, #60	; 0x3c

    Serial.begin(115200);
   d510e:	f004 ff53 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d5112:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5116:	f004 ff43 	bl	d9fa0 <_ZN9USBSerial5beginEl>
    pinMode(A0, INPUT_PULLDOWN);
   d511a:	2103      	movs	r1, #3
   d511c:	2013      	movs	r0, #19
   d511e:	f005 f82f 	bl	da180 <pinMode>
    pinMode(D7, OUTPUT);
   d5122:	2101      	movs	r1, #1
   d5124:	2007      	movs	r0, #7
   d5126:	f005 f82b 	bl	da180 <pinMode>
	BLE.on();
   d512a:	f002 febd 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d512e:	f002 ff01 	bl	d7f34 <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d5132:	4a3b      	ldr	r2, [pc, #236]	; (d5220 <setup+0x118>)
   d5134:	493b      	ldr	r1, [pc, #236]	; (d5224 <setup+0x11c>)
    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;

    logMessages = true;
   d5136:	4d3c      	ldr	r5, [pc, #240]	; (d5228 <setup+0x120>)

    Serial.begin(115200);
    pinMode(A0, INPUT_PULLDOWN);
    pinMode(D7, OUTPUT);
	BLE.on();
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   d5138:	4610      	mov	r0, r2
   d513a:	f002 fde7 	bl	d7d0c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   d513e:	4a3b      	ldr	r2, [pc, #236]	; (d522c <setup+0x124>)
   d5140:	493b      	ldr	r1, [pc, #236]	; (d5230 <setup+0x128>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5142:	2400      	movs	r4, #0
   d5144:	4610      	mov	r0, r2
   d5146:	f002 fde1 	bl	d7d0c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d514a:	4622      	mov	r2, r4
   d514c:	4939      	ldr	r1, [pc, #228]	; (d5234 <setup+0x12c>)
   d514e:	9401      	str	r4, [sp, #4]
   d5150:	9400      	str	r4, [sp, #0]
   d5152:	2301      	movs	r3, #1
   d5154:	4838      	ldr	r0, [pc, #224]	; (d5238 <setup+0x130>)
   d5156:	f002 f95f 	bl	d7418 <spark_subscribe>

    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
   d515a:	4b38      	ldr	r3, [pc, #224]	; (d523c <setup+0x134>)
   d515c:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   d515e:	4b38      	ldr	r3, [pc, #224]	; (d5240 <setup+0x138>)
   d5160:	701c      	strb	r4, [r3, #0]

    logMessages = true;
    postStatus = false;
   d5162:	4b38      	ldr	r3, [pc, #224]	; (d5244 <setup+0x13c>)
   d5164:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   d5166:	4b38      	ldr	r3, [pc, #224]	; (d5248 <setup+0x140>)
    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;

    logMessages = true;
   d5168:	2601      	movs	r6, #1
    postStatus = false;
    statusTimeout = false;
   d516a:	701c      	strb	r4, [r3, #0]
    Particle.subscribe("Bot1dat",dataLTEHandler);

    offloadingMode = false;
    offloadingDone = false;

    logMessages = true;
   d516c:	702e      	strb	r6, [r5, #0]
    postStatus = false;
    statusTimeout = false;

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d516e:	f004 fe23 	bl	d9db8 <_ZN9TimeClass5monthEv>
   d5172:	4607      	mov	r7, r0
   d5174:	f004 fe16 	bl	d9da4 <_ZN9TimeClass3dayEv>
   d5178:	4680      	mov	r8, r0
   d517a:	f004 fe25 	bl	d9dc8 <_ZN9TimeClass4yearEv>
   d517e:	4681      	mov	r9, r0
   d5180:	f004 fdf2 	bl	d9d68 <_ZN9TimeClass4hourEv>
   d5184:	4682      	mov	sl, r0
   d5186:	f004 fdf9 	bl	d9d7c <_ZN9TimeClass6minuteEv>
   d518a:	4683      	mov	fp, r0
   d518c:	f004 fe00 	bl	d9d90 <_ZN9TimeClass6secondEv>
   d5190:	463b      	mov	r3, r7
   d5192:	4a2e      	ldr	r2, [pc, #184]	; (d524c <setup+0x144>)
   d5194:	9004      	str	r0, [sp, #16]
   d5196:	2110      	movs	r1, #16
   d5198:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d519c:	a806      	add	r0, sp, #24
   d519e:	f002 f9d3 	bl	d7548 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   d51a2:	492b      	ldr	r1, [pc, #172]	; (d5250 <setup+0x148>)
   d51a4:	482b      	ldr	r0, [pc, #172]	; (d5254 <setup+0x14c>)
   d51a6:	f006 f850 	bl	db24a <strcpy>
    strcat(filenameMessages,timestamp);
   d51aa:	a906      	add	r1, sp, #24
   d51ac:	4829      	ldr	r0, [pc, #164]	; (d5254 <setup+0x14c>)
   d51ae:	f006 f833 	bl	db218 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d51b2:	4929      	ldr	r1, [pc, #164]	; (d5258 <setup+0x150>)
   d51b4:	4827      	ldr	r0, [pc, #156]	; (d5254 <setup+0x14c>)
   d51b6:	f006 f82f 	bl	db218 <strcat>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d51ba:	4b28      	ldr	r3, [pc, #160]	; (d525c <setup+0x154>)
   d51bc:	930a      	str	r3, [sp, #40]	; 0x28
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
    BLE.addCharacteristic(rxCharacteristic);
    advData.appendServiceUUID(RemoteService); // Add the app service
    advData.appendLocalName("RemoteTest");           //Local advertising name
    BLE.advertise(&advData);                    //Start advertising the characteristics*/
    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d51be:	aa0a      	add	r2, sp, #40	; 0x28
   d51c0:	4b27      	ldr	r3, [pc, #156]	; (d5260 <setup+0x158>)
   d51c2:	4828      	ldr	r0, [pc, #160]	; (d5264 <setup+0x15c>)
   d51c4:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   d51c8:	2108      	movs	r1, #8
   d51ca:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
   d51ce:	930c      	str	r3, [sp, #48]	; 0x30
   d51d0:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
   d51d4:	f7ff f8ca 	bl	d436c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d51d8:	4604      	mov	r4, r0
   d51da:	b928      	cbnz	r0, d51e8 <setup+0xe0>
        Serial.println("Error: could not connect to SD card!");
   d51dc:	f004 feec 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d51e0:	4921      	ldr	r1, [pc, #132]	; (d5268 <setup+0x160>)
   d51e2:	f004 fb14 	bl	d980e <_ZN5Print7printlnEPKc>
        logMessages = false;
   d51e6:	702c      	strb	r4, [r5, #0]
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d51e8:	4c20      	ldr	r4, [pc, #128]	; (d526c <setup+0x164>)
    }
    
    startupPair();
   d51ea:	f7ff ff19 	bl	d5020 <_Z11startupPairv>
   d51ee:	2200      	movs	r2, #0
   d51f0:	4611      	mov	r1, r2
   d51f2:	4620      	mov	r0, r4
   d51f4:	f7ff f874 	bl	d42e0 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d51f8:	68a0      	ldr	r0, [r4, #8]
   d51fa:	b140      	cbz	r0, d520e <setup+0x106>
   d51fc:	2300      	movs	r3, #0
   d51fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5202:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5206:	4619      	mov	r1, r3
   d5208:	461a      	mov	r2, r3
   d520a:	f001 fef9 	bl	d7000 <os_timer_change>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d520e:	2200      	movs	r2, #0
   d5210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5214:	4816      	ldr	r0, [pc, #88]	; (d5270 <setup+0x168>)
   d5216:	f7ff f863 	bl	d42e0 <_ZN5Timer5_stopEjb>

    at1.start();
    at2.stop();
}
   d521a:	b00f      	add	sp, #60	; 0x3c
   d521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5220:	2003dba0 	.word	0x2003dba0
   d5224:	000d4c89 	.word	0x000d4c89
   d5228:	2003db3c 	.word	0x2003db3c
   d522c:	2003dba8 	.word	0x2003dba8
   d5230:	000d4545 	.word	0x000d4545
   d5234:	000d4c39 	.word	0x000d4c39
   d5238:	000dd68c 	.word	0x000dd68c
   d523c:	2003d64e 	.word	0x2003d64e
   d5240:	2003e2ec 	.word	0x2003e2ec
   d5244:	2003d64c 	.word	0x2003d64c
   d5248:	2003e291 	.word	0x2003e291
   d524c:	000dd9b8 	.word	0x000dd9b8
   d5250:	000dd9d1 	.word	0x000dd9d1
   d5254:	2003dad5 	.word	0x2003dad5
   d5258:	000dd9da 	.word	0x000dd9da
   d525c:	000dd600 	.word	0x000dd600
   d5260:	003d0900 	.word	0x003d0900
   d5264:	2003d650 	.word	0x2003d650
   d5268:	000dd9e3 	.word	0x000dd9e3
   d526c:	2003db7c 	.word	0x2003db7c
   d5270:	2003e2a8 	.word	0x2003e2a8

000d5274 <_Z13DataOffloaderv>:
			}
		}
	}
}

void DataOffloader(){
   d5274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d5278:	2200      	movs	r2, #0
			}
		}
	}
}

void DataOffloader(){
   d527a:	b088      	sub	sp, #32
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
   d527c:	4940      	ldr	r1, [pc, #256]	; (d5380 <_Z13DataOffloaderv+0x10c>)
   d527e:	4841      	ldr	r0, [pc, #260]	; (d5384 <_Z13DataOffloaderv+0x110>)
   d5280:	f7ff f86c 	bl	d435c <_ZN7FatFile4openEPKci>
   d5284:	2401      	movs	r4, #1
   d5286:	b118      	cbz	r0, d5290 <_Z13DataOffloaderv+0x1c>
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
        peerRxCharacteristic.setValue(OffloadBuf,10);
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d5288:	4d3f      	ldr	r5, [pc, #252]	; (d5388 <_Z13DataOffloaderv+0x114>)
   d528a:	4f40      	ldr	r7, [pc, #256]	; (d538c <_Z13DataOffloaderv+0x118>)
   d528c:	462e      	mov	r6, r5
   d528e:	e010      	b.n	d52b2 <_Z13DataOffloaderv+0x3e>
}

void DataOffloader(){
    uint8_t OffloadingBot = 1;
    if (!logDir.open("/")) {
        offloadingDone = true;
   d5290:	4b3f      	ldr	r3, [pc, #252]	; (d5390 <_Z13DataOffloaderv+0x11c>)
   d5292:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   d5294:	f004 fe90 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d5298:	493e      	ldr	r1, [pc, #248]	; (d5394 <_Z13DataOffloaderv+0x120>)
   d529a:	f004 fab8 	bl	d980e <_ZN5Print7printlnEPKc>
        return;
   d529e:	e06b      	b.n	d5378 <_Z13DataOffloaderv+0x104>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
        offloadingDone = false;
        while(!offloadingDone) delay(100);
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   d52a0:	f004 fe8a 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d52a4:	6833      	ldr	r3, [r6, #0]
   d52a6:	493c      	ldr	r1, [pc, #240]	; (d5398 <_Z13DataOffloaderv+0x124>)
   d52a8:	781a      	ldrb	r2, [r3, #0]
   d52aa:	f7ff f941 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        OffloadingBot++;
   d52ae:	3401      	adds	r4, #1
   d52b0:	b2e4      	uxtb	r4, r4
    if (!logDir.open("/")) {
        offloadingDone = true;
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
        return;
    }
    while(OffloadingBot <= WaterBots.size()){
   d52b2:	e897 000c 	ldmia.w	r7, {r2, r3}
   d52b6:	1a9b      	subs	r3, r3, r2
   d52b8:	4a38      	ldr	r2, [pc, #224]	; (d539c <_Z13DataOffloaderv+0x128>)
   d52ba:	10db      	asrs	r3, r3, #3
   d52bc:	4353      	muls	r3, r2
   d52be:	429c      	cmp	r4, r3
   d52c0:	d854      	bhi.n	d536c <_Z13DataOffloaderv+0xf8>
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   d52c2:	f10d 0808 	add.w	r8, sp, #8
   d52c6:	4623      	mov	r3, r4
   d52c8:	4a35      	ldr	r2, [pc, #212]	; (d53a0 <_Z13DataOffloaderv+0x12c>)
   d52ca:	210a      	movs	r1, #10
   d52cc:	4640      	mov	r0, r8
   d52ce:	f002 f93b 	bl	d7548 <snprintf>
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d52d2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
   d52d6:	ab05      	add	r3, sp, #20
   d52d8:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d52da:	a905      	add	r1, sp, #20
    while(OffloadingBot <= WaterBots.size()){
        char OffloadCommand[10];
        uint8_t OffloadBuf[10];
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
        //Particle.publish("CCHub", OffloadCommand, PRIVATE);
        memcpy(OffloadBuf,OffloadCommand,10);
   d52dc:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   d52de:	4831      	ldr	r0, [pc, #196]	; (d53a4 <_Z13DataOffloaderv+0x130>)
   d52e0:	2300      	movs	r3, #0
   d52e2:	220a      	movs	r2, #10
   d52e4:	f002 fc70 	bl	d7bc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   d52e8:	f004 fe66 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d52ec:	682b      	ldr	r3, [r5, #0]
   d52ee:	492e      	ldr	r1, [pc, #184]	; (d53a8 <_Z13DataOffloaderv+0x134>)
   d52f0:	781a      	ldrb	r2, [r3, #0]
   d52f2:	f7ff f91d 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        delay(1000);
   d52f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d52fa:	f002 f945 	bl	d7588 <delay>
        if(BLEBot->botNum != OffloadingBot){
   d52fe:	682b      	ldr	r3, [r5, #0]
   d5300:	781b      	ldrb	r3, [r3, #0]
   d5302:	42a3      	cmp	r3, r4
   d5304:	d01f      	beq.n	d5346 <_Z13DataOffloaderv+0xd2>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   d5306:	f004 fe57 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d530a:	682b      	ldr	r3, [r5, #0]
   d530c:	4a27      	ldr	r2, [pc, #156]	; (d53ac <_Z13DataOffloaderv+0x138>)
   d530e:	781b      	ldrb	r3, [r3, #0]
   d5310:	9400      	str	r4, [sp, #0]
   d5312:	2101      	movs	r1, #1
   d5314:	f004 faa5 	bl	d9862 <_ZN5Print11printf_implEbPKcz>
            BLE.disconnect();
   d5318:	f002 fdc6 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d531c:	f002 ffb6 	bl	d828c <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   d5320:	f002 fdc2 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5324:	f002 fe40 	bl	d7fa8 <_ZNK8particle14BleLocalDevice9connectedEv>
   d5328:	b930      	cbnz	r0, d5338 <_Z13DataOffloaderv+0xc4>
                BLEScan(OffloadingBot);
   d532a:	4620      	mov	r0, r4
   d532c:	f7ff fd98 	bl	d4e60 <_Z7BLEScani>
                delay(50);
   d5330:	2032      	movs	r0, #50	; 0x32
   d5332:	f002 f929 	bl	d7588 <delay>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
        delay(1000);
        if(BLEBot->botNum != OffloadingBot){
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
            BLE.disconnect();
            while(!BLE.connected()){
   d5336:	e7f3      	b.n	d5320 <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
                delay(50);
            }
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   d5338:	f004 fe3e 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d533c:	6833      	ldr	r3, [r6, #0]
   d533e:	491c      	ldr	r1, [pc, #112]	; (d53b0 <_Z13DataOffloaderv+0x13c>)
   d5340:	781a      	ldrb	r2, [r3, #0]
   d5342:	f7ff f8f5 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        }
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   d5346:	f004 fe37 	bl	d9fb8 <_Z16_fetch_usbserialv>
   d534a:	6833      	ldr	r3, [r6, #0]
   d534c:	4919      	ldr	r1, [pc, #100]	; (d53b4 <_Z13DataOffloaderv+0x140>)
   d534e:	781a      	ldrb	r2, [r3, #0]
   d5350:	f7ff f8ee 	bl	d4530 <_ZN5Print8printlnfIIhEEEjPKcDpT_>
        offloadingDone = false;
   d5354:	4b0e      	ldr	r3, [pc, #56]	; (d5390 <_Z13DataOffloaderv+0x11c>)
   d5356:	2200      	movs	r2, #0
   d5358:	701a      	strb	r2, [r3, #0]
   d535a:	4698      	mov	r8, r3
        while(!offloadingDone) delay(100);
   d535c:	f898 3000 	ldrb.w	r3, [r8]
   d5360:	2b00      	cmp	r3, #0
   d5362:	d19d      	bne.n	d52a0 <_Z13DataOffloaderv+0x2c>
   d5364:	2064      	movs	r0, #100	; 0x64
   d5366:	f002 f90f 	bl	d7588 <delay>
   d536a:	e7f7      	b.n	d535c <_Z13DataOffloaderv+0xe8>
   d536c:	4812      	ldr	r0, [pc, #72]	; (d53b8 <_Z13DataOffloaderv+0x144>)
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
        OffloadingBot++;
    }
    if(logDir.isOpen()) logDir.close();
   d536e:	7c03      	ldrb	r3, [r0, #16]
   d5370:	b113      	cbz	r3, d5378 <_Z13DataOffloaderv+0x104>
   d5372:	3010      	adds	r0, #16
   d5374:	f000 fc0a 	bl	d5b8c <_ZN7FatFile5closeEv>
}
   d5378:	b008      	add	sp, #32
   d537a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d537e:	bf00      	nop
   d5380:	000dda08 	.word	0x000dda08
   d5384:	2003db18 	.word	0x2003db18
   d5388:	2003db98 	.word	0x2003db98
   d538c:	2003d640 	.word	0x2003d640
   d5390:	2003e2ec 	.word	0x2003e2ec
   d5394:	000dda0a 	.word	0x000dda0a
   d5398:	000ddafe 	.word	0x000ddafe
   d539c:	aaaaaaab 	.word	0xaaaaaaab
   d53a0:	000dda4b 	.word	0x000dda4b
   d53a4:	2003d638 	.word	0x2003d638
   d53a8:	000dda54 	.word	0x000dda54
   d53ac:	000dda81 	.word	0x000dda81
   d53b0:	000ddaba 	.word	0x000ddaba
   d53b4:	000ddadb 	.word	0x000ddadb
   d53b8:	2003db08 	.word	0x2003db08

000d53bc <loop>:

    at1.start();
    at2.stop();
}

void loop() {
   d53bc:	b530      	push	{r4, r5, lr}
    if(postStatus){
   d53be:	4b27      	ldr	r3, [pc, #156]	; (d545c <loop+0xa0>)
   d53c0:	781a      	ldrb	r2, [r3, #0]

    at1.start();
    at2.stop();
}

void loop() {
   d53c2:	b08b      	sub	sp, #44	; 0x2c
   d53c4:	461c      	mov	r4, r3
    if(postStatus){
   d53c6:	b1c2      	cbz	r2, d53fa <loop+0x3e>
        char statusStr[30];
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%d",ControlledBot->botNum);
   d53c8:	4b25      	ldr	r3, [pc, #148]	; (d5460 <loop+0xa4>)
   d53ca:	681b      	ldr	r3, [r3, #0]
   d53cc:	b12b      	cbz	r3, d53da <loop+0x1e>
   d53ce:	781a      	ldrb	r2, [r3, #0]
   d53d0:	4924      	ldr	r1, [pc, #144]	; (d5464 <loop+0xa8>)
   d53d2:	a802      	add	r0, sp, #8
   d53d4:	f002 f8a0 	bl	d7518 <sprintf>
   d53d8:	e003      	b.n	d53e2 <loop+0x26>
        else sprintf(statusStr,"CCABspcNB");
   d53da:	4923      	ldr	r1, [pc, #140]	; (d5468 <loop+0xac>)
   d53dc:	a802      	add	r0, sp, #8
   d53de:	f005 ff34 	bl	db24a <strcpy>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   d53e2:	4d22      	ldr	r5, [pc, #136]	; (d546c <loop+0xb0>)
   d53e4:	782b      	ldrb	r3, [r5, #0]
   d53e6:	9300      	str	r3, [sp, #0]
   d53e8:	2301      	movs	r3, #1
   d53ea:	461a      	mov	r2, r3
   d53ec:	2100      	movs	r1, #0
   d53ee:	a802      	add	r0, sp, #8
   d53f0:	f7ff f812 	bl	d4418 <_Z8sendDataPKchbbb>
        postStatus = false;
   d53f4:	2300      	movs	r3, #0
   d53f6:	7023      	strb	r3, [r4, #0]
        statusTimeout = false;
   d53f8:	702b      	strb	r3, [r5, #0]
    }


    if (BLE.connected()) {
   d53fa:	f002 fd55 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d53fe:	f002 fdd3 	bl	d7fa8 <_ZNK8particle14BleLocalDevice9connectedEv>
   d5402:	4601      	mov	r1, r0
   d5404:	b178      	cbz	r0, d5426 <loop+0x6a>
        //if(BLEBot) Serial.printlnf("Connected to Waterbot %d", BLEBot->botNum);
        //char testStr[30] = "CCB1ptsHello from CC Hub!";
        //uint8_t testBuf[30];
        //memcpy(testStr,testBuf,30);
        //peerRxCharacteristic.setValue(testStr);
        sendData("CCB1ptsbigbot",0,true,false,false);
   d5406:	2300      	movs	r3, #0
   d5408:	4619      	mov	r1, r3
   d540a:	9300      	str	r3, [sp, #0]
   d540c:	2201      	movs	r2, #1
   d540e:	4818      	ldr	r0, [pc, #96]	; (d5470 <loop+0xb4>)
   d5410:	f7ff f802 	bl	d4418 <_Z8sendDataPKchbbb>
        digitalWrite(D7,HIGH);
   d5414:	2101      	movs	r1, #1
   d5416:	2007      	movs	r0, #7
   d5418:	f004 fec3 	bl	da1a2 <digitalWrite>
        delay(1000);
   d541c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5420:	f002 f8b2 	bl	d7588 <delay>
   d5424:	e011      	b.n	d544a <loop+0x8e>
    }
    else {
        digitalWrite(D7,LOW);
   d5426:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d5428:	4c12      	ldr	r4, [pc, #72]	; (d5474 <loop+0xb8>)
        sendData("CCB1ptsbigbot",0,true,false,false);
        digitalWrite(D7,HIGH);
        delay(1000);
    }
    else {
        digitalWrite(D7,LOW);
   d542a:	f004 feba 	bl	da1a2 <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d542e:	f001 fe2f 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d5432:	6823      	ldr	r3, [r4, #0]
   d5434:	1ac0      	subs	r0, r0, r3
   d5436:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d543a:	d306      	bcc.n	d544a <loop+0x8e>
   d543c:	f001 fe28 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
    		// Time to scan
    		lastScan = millis();
   d5440:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   d5442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5446:	f7ff fd0b 	bl	d4e60 <_Z7BLEScani>
    	}

    }
    if(offloadingMode) DataOffloader();
   d544a:	4b0b      	ldr	r3, [pc, #44]	; (d5478 <loop+0xbc>)
   d544c:	781b      	ldrb	r3, [r3, #0]
   d544e:	b10b      	cbz	r3, d5454 <loop+0x98>
   d5450:	f7ff ff10 	bl	d5274 <_Z13DataOffloaderv>
    XBeeHandler();
   d5454:	f7ff fc60 	bl	d4d18 <_Z11XBeeHandlerv>
}
   d5458:	b00b      	add	sp, #44	; 0x2c
   d545a:	bd30      	pop	{r4, r5, pc}
   d545c:	2003d64c 	.word	0x2003d64c
   d5460:	2003e25c 	.word	0x2003e25c
   d5464:	000ddb25 	.word	0x000ddb25
   d5468:	000ddb30 	.word	0x000ddb30
   d546c:	2003e291 	.word	0x2003e291
   d5470:	000ddb3a 	.word	0x000ddb3a
   d5474:	2003db78 	.word	0x2003db78
   d5478:	2003d64e 	.word	0x2003d64e

000d547c <_GLOBAL__sub_I_SystemMode>:
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
        LTEStatuses++;
        statusTimeout = true;
    }
   d547c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d547e:	4b72      	ldr	r3, [pc, #456]	; (d5648 <_GLOBAL__sub_I_SystemMode+0x1cc>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5480:	4d72      	ldr	r5, [pc, #456]	; (d564c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d5482:	2201      	movs	r2, #1
   d5484:	701a      	strb	r2, [r3, #0]
   d5486:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5488:	f001 fe1a 	bl	d70c0 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d548c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5490:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5492:	602c      	str	r4, [r5, #0]
   d5494:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5496:	71ac      	strb	r4, [r5, #6]
   d5498:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d549a:	2003      	movs	r0, #3
   d549c:	f001 ff68 	bl	d7370 <set_system_mode>
#define PAIR_BUTTON             D3


// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);
   d54a0:	4a6b      	ldr	r2, [pc, #428]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d54a2:	496c      	ldr	r1, [pc, #432]	; (d5654 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d54a4:	4628      	mov	r0, r5
   d54a6:	f004 fee9 	bl	da27c <__aeabi_atexit>

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   d54aa:	496b      	ldr	r1, [pc, #428]	; (d5658 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d54ac:	486b      	ldr	r0, [pc, #428]	; (d565c <_GLOBAL__sub_I_SystemMode+0x1e0>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d54ae:	4d6c      	ldr	r5, [pc, #432]	; (d5660 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d54b0:	f002 fa3e 	bl	d7930 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   d54b4:	496b      	ldr	r1, [pc, #428]	; (d5664 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d54b6:	486c      	ldr	r0, [pc, #432]	; (d5668 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d54b8:	f002 fa3a 	bl	d7930 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   d54bc:	496b      	ldr	r1, [pc, #428]	; (d566c <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d54be:	486c      	ldr	r0, [pc, #432]	; (d5670 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d54c0:	f002 fa36 	bl	d7930 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   d54c4:	496b      	ldr	r1, [pc, #428]	; (d5674 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d54c6:	486c      	ldr	r0, [pc, #432]	; (d5678 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d54c8:	f002 fa32 	bl	d7930 <_ZN8particle7BleUuidC1EPKc>
   d54cc:	1928      	adds	r0, r5, r4
   d54ce:	f002 f907 	bl	d76e0 <_ZN8particle10BleAddressC1Ev>
   d54d2:	f104 0008 	add.w	r0, r4, #8
   d54d6:	4428      	add	r0, r5
   d54d8:	f002 faa4 	bl	d7a24 <_ZN8particle18BleAdvertisingDataC1Ev>
   d54dc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d54e0:	4428      	add	r0, r5
   d54e2:	3454      	adds	r4, #84	; 0x54
   d54e4:	f002 fa9e 	bl	d7a24 <_ZN8particle18BleAdvertisingDataC1Ev>
//BleCharacteristic rxCharacteristic("rxr", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, RemoteService, BLEDataReceived, NULL);

const size_t UART_TX_BUF_SIZE = 30;
const size_t SCAN_RESULT_COUNT = 20;

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d54e8:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d54ec:	d1ee      	bne.n	d54cc <_GLOBAL__sub_I_SystemMode+0x50>

BleCharacteristic peerTxCharacteristic;
   d54ee:	4863      	ldr	r0, [pc, #396]	; (d567c <_GLOBAL__sub_I_SystemMode+0x200>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d54f0:	4c63      	ldr	r4, [pc, #396]	; (d5680 <_GLOBAL__sub_I_SystemMode+0x204>)
   d54f2:	f003 fa87 	bl	d8a04 <_ZN8particle17BleCharacteristicC1Ev>
   d54f6:	4a56      	ldr	r2, [pc, #344]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d54f8:	4962      	ldr	r1, [pc, #392]	; (d5684 <_GLOBAL__sub_I_SystemMode+0x208>)
   d54fa:	4860      	ldr	r0, [pc, #384]	; (d567c <_GLOBAL__sub_I_SystemMode+0x200>)
   d54fc:	f004 febe 	bl	da27c <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d5500:	4861      	ldr	r0, [pc, #388]	; (d5688 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d5502:	f003 fa7f 	bl	d8a04 <_ZN8particle17BleCharacteristicC1Ev>
   d5506:	4a52      	ldr	r2, [pc, #328]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5508:	495e      	ldr	r1, [pc, #376]	; (d5684 <_GLOBAL__sub_I_SystemMode+0x208>)
   d550a:	485f      	ldr	r0, [pc, #380]	; (d5688 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d550c:	f004 feb6 	bl	da27c <__aeabi_atexit>
BleCharacteristic peerOffloadCharacteristic;
   d5510:	485e      	ldr	r0, [pc, #376]	; (d568c <_GLOBAL__sub_I_SystemMode+0x210>)
   d5512:	f003 fa77 	bl	d8a04 <_ZN8particle17BleCharacteristicC1Ev>
   d5516:	4a4e      	ldr	r2, [pc, #312]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5518:	495a      	ldr	r1, [pc, #360]	; (d5684 <_GLOBAL__sub_I_SystemMode+0x208>)
   d551a:	485c      	ldr	r0, [pc, #368]	; (d568c <_GLOBAL__sub_I_SystemMode+0x210>)
   d551c:	f004 feae 	bl	da27c <__aeabi_atexit>
BlePeerDevice peer;
   d5520:	485b      	ldr	r0, [pc, #364]	; (d5690 <_GLOBAL__sub_I_SystemMode+0x214>)
   d5522:	f002 fdc7 	bl	d80b4 <_ZN8particle13BlePeerDeviceC1Ev>
   d5526:	4a4a      	ldr	r2, [pc, #296]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5528:	495a      	ldr	r1, [pc, #360]	; (d5694 <_GLOBAL__sub_I_SystemMode+0x218>)
   d552a:	4859      	ldr	r0, [pc, #356]	; (d5690 <_GLOBAL__sub_I_SystemMode+0x214>)
   d552c:	f004 fea6 	bl	da27c <__aeabi_atexit>
   d5530:	6823      	ldr	r3, [r4, #0]
   d5532:	07db      	lsls	r3, r3, #31
   d5534:	d40a      	bmi.n	d554c <_GLOBAL__sub_I_SystemMode+0xd0>
   d5536:	4620      	mov	r0, r4
   d5538:	f7fe fdb5 	bl	d40a6 <__cxa_guard_acquire>
   d553c:	b130      	cbz	r0, d554c <_GLOBAL__sub_I_SystemMode+0xd0>
   d553e:	2101      	movs	r1, #1
   d5540:	4855      	ldr	r0, [pc, #340]	; (d5698 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d5542:	f004 f9e3 	bl	d990c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5546:	4620      	mov	r0, r4
   d5548:	f7fe fdb2 	bl	d40b0 <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d554c:	4b53      	ldr	r3, [pc, #332]	; (d569c <_GLOBAL__sub_I_SystemMode+0x220>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d554e:	4854      	ldr	r0, [pc, #336]	; (d56a0 <_GLOBAL__sub_I_SystemMode+0x224>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5550:	4d54      	ldr	r5, [pc, #336]	; (d56a4 <_GLOBAL__sub_I_SystemMode+0x228>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d5552:	4955      	ldr	r1, [pc, #340]	; (d56a8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d5554:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5556:	2264      	movs	r2, #100	; 0x64
   d5558:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d555c:	4a53      	ldr	r2, [pc, #332]	; (d56ac <_GLOBAL__sub_I_SystemMode+0x230>)
   d555e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d5562:	2201      	movs	r2, #1
   d5564:	2400      	movs	r4, #0
   d5566:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d556a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d556e:	4a4a      	ldr	r2, [pc, #296]	; (d5698 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d5570:	71dc      	strb	r4, [r3, #7]
   d5572:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5576:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d557a:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d557e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5582:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5586:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d558a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d558e:	7404      	strb	r4, [r0, #16]
   d5590:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5592:	6044      	str	r4, [r0, #4]
   d5594:	6086      	str	r6, [r0, #8]
   d5596:	4a2e      	ldr	r2, [pc, #184]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5598:	f004 fe70 	bl	da27c <__aeabi_atexit>
   d559c:	4844      	ldr	r0, [pc, #272]	; (d56b0 <_GLOBAL__sub_I_SystemMode+0x234>)
File logFile;
   d559e:	4a2c      	ldr	r2, [pc, #176]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d55a0:	7404      	strb	r4, [r0, #16]
   d55a2:	7444      	strb	r4, [r0, #17]
   d55a4:	6044      	str	r4, [r0, #4]
   d55a6:	6086      	str	r6, [r0, #8]
   d55a8:	493f      	ldr	r1, [pc, #252]	; (d56a8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d55aa:	6005      	str	r5, [r0, #0]
   d55ac:	f004 fe66 	bl	da27c <__aeabi_atexit>
   d55b0:	4840      	ldr	r0, [pc, #256]	; (d56b4 <_GLOBAL__sub_I_SystemMode+0x238>)
File logDir;
   d55b2:	4a27      	ldr	r2, [pc, #156]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d55b4:	7404      	strb	r4, [r0, #16]
   d55b6:	7444      	strb	r4, [r0, #17]
   d55b8:	6044      	str	r4, [r0, #4]
   d55ba:	6086      	str	r6, [r0, #8]
   d55bc:	493a      	ldr	r1, [pc, #232]	; (d56a8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d55be:	6005      	str	r5, [r0, #0]
   d55c0:	f004 fe5c 	bl	da27c <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d55c4:	483c      	ldr	r0, [pc, #240]	; (d56b8 <_GLOBAL__sub_I_SystemMode+0x23c>)
    int rssi;
};

WaterBot *BLEBot;   //Waterbot that is currently connected to over BLE
WaterBot *ControlledBot;
std::vector<WaterBot> WaterBots;
   d55c6:	4a22      	ldr	r2, [pc, #136]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d55c8:	6004      	str	r4, [r0, #0]
   d55ca:	6044      	str	r4, [r0, #4]
   d55cc:	6084      	str	r4, [r0, #8]
   d55ce:	493b      	ldr	r1, [pc, #236]	; (d56bc <_GLOBAL__sub_I_SystemMode+0x240>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55d0:	4e3b      	ldr	r6, [pc, #236]	; (d56c0 <_GLOBAL__sub_I_SystemMode+0x244>)
	    _M_manager = &_My_handler::_M_manager;
   d55d2:	4d3c      	ldr	r5, [pc, #240]	; (d56c4 <_GLOBAL__sub_I_SystemMode+0x248>)
   d55d4:	f004 fe52 	bl	da27c <__aeabi_atexit>
   d55d8:	483b      	ldr	r0, [pc, #236]	; (d56c8 <_GLOBAL__sub_I_SystemMode+0x24c>)
std::vector<WaterBot> PairBots;
   d55da:	4a1d      	ldr	r2, [pc, #116]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d55dc:	6004      	str	r4, [r0, #0]
   d55de:	6044      	str	r4, [r0, #4]
   d55e0:	6084      	str	r4, [r0, #8]
   d55e2:	4936      	ldr	r1, [pc, #216]	; (d56bc <_GLOBAL__sub_I_SystemMode+0x240>)
   d55e4:	f004 fe4a 	bl	da27c <__aeabi_atexit>
   d55e8:	4838      	ldr	r0, [pc, #224]	; (d56cc <_GLOBAL__sub_I_SystemMode+0x250>)
std::vector<PairBot> BLEPair;
   d55ea:	4a19      	ldr	r2, [pc, #100]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d55ec:	6004      	str	r4, [r0, #0]
   d55ee:	6044      	str	r4, [r0, #4]
   d55f0:	6084      	str	r4, [r0, #8]
   d55f2:	4937      	ldr	r1, [pc, #220]	; (d56d0 <_GLOBAL__sub_I_SystemMode+0x254>)
   d55f4:	f004 fe42 	bl	da27c <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d55f8:	4b36      	ldr	r3, [pc, #216]	; (d56d4 <_GLOBAL__sub_I_SystemMode+0x258>)
   d55fa:	9300      	str	r3, [sp, #0]

Timer at1(5000,actionTimer5);
   d55fc:	466a      	mov	r2, sp
   d55fe:	4623      	mov	r3, r4
   d5600:	f241 3188 	movw	r1, #5000	; 0x1388
   d5604:	4834      	ldr	r0, [pc, #208]	; (d56d8 <_GLOBAL__sub_I_SystemMode+0x25c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5606:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5608:	9502      	str	r5, [sp, #8]
   d560a:	f7fe fe37 	bl	d427c <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d560e:	4668      	mov	r0, sp
   d5610:	f7fe fe2a 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d5614:	4a0e      	ldr	r2, [pc, #56]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d5616:	4931      	ldr	r1, [pc, #196]	; (d56dc <_GLOBAL__sub_I_SystemMode+0x260>)
   d5618:	482f      	ldr	r0, [pc, #188]	; (d56d8 <_GLOBAL__sub_I_SystemMode+0x25c>)
   d561a:	f004 fe2f 	bl	da27c <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d561e:	4b30      	ldr	r3, [pc, #192]	; (d56e0 <_GLOBAL__sub_I_SystemMode+0x264>)
   d5620:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   d5622:	466a      	mov	r2, sp
   d5624:	4623      	mov	r3, r4
   d5626:	f64e 2160 	movw	r1, #60000	; 0xea60
   d562a:	482e      	ldr	r0, [pc, #184]	; (d56e4 <_GLOBAL__sub_I_SystemMode+0x268>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d562c:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d562e:	9502      	str	r5, [sp, #8]
   d5630:	f7fe fe24 	bl	d427c <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5634:	4668      	mov	r0, sp
   d5636:	f7fe fe17 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d563a:	4a05      	ldr	r2, [pc, #20]	; (d5650 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d563c:	4927      	ldr	r1, [pc, #156]	; (d56dc <_GLOBAL__sub_I_SystemMode+0x260>)
   d563e:	4829      	ldr	r0, [pc, #164]	; (d56e4 <_GLOBAL__sub_I_SystemMode+0x268>)
   d5640:	f004 fe1c 	bl	da27c <__aeabi_atexit>
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
        LTEStatuses++;
        statusTimeout = true;
    }
   d5644:	b004      	add	sp, #16
   d5646:	bd70      	pop	{r4, r5, r6, pc}
   d5648:	2003d64d 	.word	0x2003d64d
   d564c:	2003e250 	.word	0x2003e250
   d5650:	2003d628 	.word	0x2003d628
   d5654:	000d41f9 	.word	0x000d41f9
   d5658:	000ddb48 	.word	0x000ddb48
   d565c:	2003e2f0 	.word	0x2003e2f0
   d5660:	2003dbc0 	.word	0x2003dbc0
   d5664:	000ddb6d 	.word	0x000ddb6d
   d5668:	2003daf4 	.word	0x2003daf4
   d566c:	000ddb92 	.word	0x000ddb92
   d5670:	2003e294 	.word	0x2003e294
   d5674:	000ddbb7 	.word	0x000ddbb7
   d5678:	2003e2d8 	.word	0x2003e2d8
   d567c:	2003dba0 	.word	0x2003dba0
   d5680:	2003d62c 	.word	0x2003d62c
   d5684:	000d7ff5 	.word	0x000d7ff5
   d5688:	2003d638 	.word	0x2003d638
   d568c:	2003dba8 	.word	0x2003dba8
   d5690:	2003e2d0 	.word	0x2003e2d0
   d5694:	000d8003 	.word	0x000d8003
   d5698:	2003d630 	.word	0x2003d630
   d569c:	2003d650 	.word	0x2003d650
   d56a0:	2003db40 	.word	0x2003db40
   d56a4:	000dd620 	.word	0x000dd620
   d56a8:	000d40fd 	.word	0x000d40fd
   d56ac:	000dd600 	.word	0x000dd600
   d56b0:	2003e304 	.word	0x2003e304
   d56b4:	2003db08 	.word	0x2003db08
   d56b8:	2003d640 	.word	0x2003d640
   d56bc:	000d424d 	.word	0x000d424d
   d56c0:	000d40e1 	.word	0x000d40e1
   d56c4:	000d40e5 	.word	0x000d40e5
   d56c8:	2003dbb0 	.word	0x2003dbb0
   d56cc:	2003e2c4 	.word	0x2003e2c4
   d56d0:	000d425b 	.word	0x000d425b
   d56d4:	000d40d5 	.word	0x000d40d5
   d56d8:	2003db7c 	.word	0x2003db7c
   d56dc:	000d4301 	.word	0x000d4301
   d56e0:	000d4209 	.word	0x000d4209
   d56e4:	2003e2a8 	.word	0x2003e2a8

000d56e8 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d56e8:	f001 bcea 	b.w	d70c0 <HAL_Pin_Map>

000d56ec <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d56ec:	b510      	push	{r4, lr}
   d56ee:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d56f0:	3024      	adds	r0, #36	; 0x24
   d56f2:	f000 ff17 	bl	d6524 <_ZN8FatCache4syncEv>
   d56f6:	b128      	cbz	r0, d5704 <_ZN9FatVolume9cacheSyncEv+0x18>
   d56f8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d56fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5700:	f000 bf10 	b.w	d6524 <_ZN8FatCache4syncEv>
  }
   d5704:	bd10      	pop	{r4, pc}

000d5706 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5706:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5708:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d570a:	f043 0304 	orr.w	r3, r3, #4
   d570e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5710:	f100 0210 	add.w	r2, r0, #16
   d5714:	6880      	ldr	r0, [r0, #8]
   d5716:	f000 bfbb 	b.w	d6690 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d571c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5720:	7803      	ldrb	r3, [r0, #0]
   d5722:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5726:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5728:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d572c:	b10b      	cbz	r3, d5732 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d572e:	2600      	movs	r6, #0
   d5730:	e02e      	b.n	d5790 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5732:	6942      	ldr	r2, [r0, #20]
   d5734:	4b18      	ldr	r3, [pc, #96]	; (d5798 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5736:	429a      	cmp	r2, r3
   d5738:	d8f9      	bhi.n	d572e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d573a:	f7ff ffe4 	bl	d5706 <_ZN7FatFile10addClusterEv>
   d573e:	4606      	mov	r6, r0
   d5740:	2800      	cmp	r0, #0
   d5742:	d0f4      	beq.n	d572e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5744:	6921      	ldr	r1, [r4, #16]
   d5746:	68a0      	ldr	r0, [r4, #8]
   d5748:	f000 ff37 	bl	d65ba <_ZNK9FatVolume17clusterFirstBlockEm>
   d574c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d574e:	68a0      	ldr	r0, [r4, #8]
   d5750:	2205      	movs	r2, #5
   d5752:	4639      	mov	r1, r7
   d5754:	3024      	adds	r0, #36	; 0x24
   d5756:	f000 ff0c 	bl	d6572 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d575a:	4680      	mov	r8, r0
   d575c:	2800      	cmp	r0, #0
   d575e:	d0e6      	beq.n	d572e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5760:	4629      	mov	r1, r5
   d5762:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5766:	f005 fd26 	bl	db1b6 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d576a:	2501      	movs	r5, #1
   d576c:	68a3      	ldr	r3, [r4, #8]
   d576e:	791a      	ldrb	r2, [r3, #4]
   d5770:	42aa      	cmp	r2, r5
   d5772:	d909      	bls.n	d5788 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5774:	4642      	mov	r2, r8
   d5776:	19e9      	adds	r1, r5, r7
   d5778:	6818      	ldr	r0, [r3, #0]
   d577a:	f001 fa7b 	bl	d6c74 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d577e:	2800      	cmp	r0, #0
   d5780:	d0d5      	beq.n	d572e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5782:	3501      	adds	r5, #1
   d5784:	b2ed      	uxtb	r5, r5
   d5786:	e7f1      	b.n	d576c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5788:	6963      	ldr	r3, [r4, #20]
   d578a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d578e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5790:	4630      	mov	r0, r6
   d5792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5796:	bf00      	nop
   d5798:	001ffdff 	.word	0x001ffdff

000d579c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d579c:	b510      	push	{r4, lr}
   d579e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d57a0:	6880      	ldr	r0, [r0, #8]
   d57a2:	460a      	mov	r2, r1
   d57a4:	3024      	adds	r0, #36	; 0x24
   d57a6:	69a1      	ldr	r1, [r4, #24]
   d57a8:	f000 fee3 	bl	d6572 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d57ac:	b120      	cbz	r0, d57b8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d57ae:	88a3      	ldrh	r3, [r4, #4]
   d57b0:	f003 030f 	and.w	r3, r3, #15
   d57b4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d57ba:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d57bc:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d57be:	4605      	mov	r5, r0
   d57c0:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d57c2:	b984      	cbnz	r4, d57e6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d57c4:	2224      	movs	r2, #36	; 0x24
   d57c6:	4621      	mov	r1, r4
   d57c8:	f005 fcf5 	bl	db1b6 <memset>

  m_vol = vol;
   d57cc:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d57ce:	79f3      	ldrb	r3, [r6, #7]
   d57d0:	2b10      	cmp	r3, #16
   d57d2:	d003      	beq.n	d57dc <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d57d4:	2b20      	cmp	r3, #32
   d57d6:	d106      	bne.n	d57e6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d57d8:	2340      	movs	r3, #64	; 0x40
   d57da:	e000      	b.n	d57de <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d57dc:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d57de:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d57e0:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d57e2:	70a8      	strb	r0, [r5, #2]
   d57e4:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d57e6:	2000      	movs	r0, #0
   d57e8:	bd70      	pop	{r4, r5, r6, pc}

000d57ea <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d57ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57ee:	7803      	ldrb	r3, [r0, #0]
   d57f0:	4604      	mov	r4, r0
   d57f2:	4689      	mov	r9, r1
   d57f4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d57f6:	b14b      	cbz	r3, d580c <_ZN7FatFile4readEPvj+0x22>
   d57f8:	7882      	ldrb	r2, [r0, #2]
   d57fa:	07d1      	lsls	r1, r2, #31
   d57fc:	d506      	bpl.n	d580c <_ZN7FatFile4readEPvj+0x22>
   d57fe:	e00c      	b.n	d581a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5800:	465a      	mov	r2, fp
   d5802:	6921      	ldr	r1, [r4, #16]
   d5804:	f000 fedf 	bl	d65c6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5808:	2800      	cmp	r0, #0
   d580a:	da3d      	bge.n	d5888 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d580c:	7863      	ldrb	r3, [r4, #1]
   d580e:	f043 0302 	orr.w	r3, r3, #2
   d5812:	7063      	strb	r3, [r4, #1]
  return -1;
   d5814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5818:	e097      	b.n	d594a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d581a:	071a      	lsls	r2, r3, #28
   d581c:	d503      	bpl.n	d5826 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d581e:	69e3      	ldr	r3, [r4, #28]
   d5820:	6962      	ldr	r2, [r4, #20]
   d5822:	1a9b      	subs	r3, r3, r2
   d5824:	e007      	b.n	d5836 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5826:	069a      	lsls	r2, r3, #26
   d5828:	d508      	bpl.n	d583c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d582a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d582c:	891a      	ldrh	r2, [r3, #8]
   d582e:	6963      	ldr	r3, [r4, #20]
   d5830:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5834:	b29b      	uxth	r3, r3
   d5836:	429d      	cmp	r5, r3
   d5838:	bf28      	it	cs
   d583a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d583c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d583e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5842:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5846:	2e00      	cmp	r6, #0
   d5848:	d035      	beq.n	d58b6 <_ZN7FatFile4readEPvj+0xcc>
   d584a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d584c:	6963      	ldr	r3, [r4, #20]
   d584e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5850:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5854:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5858:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d585c:	d002      	beq.n	d5864 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d585e:	6a03      	ldr	r3, [r0, #32]
   d5860:	4419      	add	r1, r3
   d5862:	e01d      	b.n	d58a0 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5864:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5868:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d586c:	f1ba 0f00 	cmp.w	sl, #0
   d5870:	d110      	bne.n	d5894 <_ZN7FatFile4readEPvj+0xaa>
   d5872:	f1b8 0f00 	cmp.w	r8, #0
   d5876:	d10d      	bne.n	d5894 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5878:	2b00      	cmp	r3, #0
   d587a:	d1c1      	bne.n	d5800 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d587c:	0653      	lsls	r3, r2, #25
   d587e:	bf4c      	ite	mi
   d5880:	6a03      	ldrmi	r3, [r0, #32]
   d5882:	6a23      	ldrpl	r3, [r4, #32]
   d5884:	6123      	str	r3, [r4, #16]
   d5886:	e005      	b.n	d5894 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5888:	d104      	bne.n	d5894 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d588a:	7823      	ldrb	r3, [r4, #0]
   d588c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5890:	d111      	bne.n	d58b6 <_ZN7FatFile4readEPvj+0xcc>
   d5892:	e7bb      	b.n	d580c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5894:	6921      	ldr	r1, [r4, #16]
   d5896:	68a0      	ldr	r0, [r4, #8]
   d5898:	f000 fe8f 	bl	d65ba <_ZNK9FatVolume17clusterFirstBlockEm>
   d589c:	eb08 0100 	add.w	r1, r8, r0
   d58a0:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d58a2:	f1ba 0f00 	cmp.w	sl, #0
   d58a6:	d135      	bne.n	d5914 <_ZN7FatFile4readEPvj+0x12a>
   d58a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d58ac:	d332      	bcc.n	d5914 <_ZN7FatFile4readEPvj+0x12a>
   d58ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d58b0:	4299      	cmp	r1, r3
   d58b2:	d102      	bne.n	d58ba <_ZN7FatFile4readEPvj+0xd0>
   d58b4:	e02e      	b.n	d5914 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d58b6:	1ba8      	subs	r0, r5, r6
   d58b8:	e047      	b.n	d594a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d58ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d58be:	d31b      	bcc.n	d58f8 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d58c0:	7822      	ldrb	r2, [r4, #0]
   d58c2:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d58c4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d58c8:	d406      	bmi.n	d58d8 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d58ca:	7902      	ldrb	r2, [r0, #4]
   d58cc:	ebc8 0202 	rsb	r2, r8, r2
   d58d0:	b2d2      	uxtb	r2, r2
   d58d2:	4592      	cmp	sl, r2
   d58d4:	bf28      	it	cs
   d58d6:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d58d8:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d58da:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d58de:	d207      	bcs.n	d58f0 <_ZN7FatFile4readEPvj+0x106>
   d58e0:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d58e2:	4653      	mov	r3, sl
   d58e4:	464a      	mov	r2, r9
   d58e6:	6800      	ldr	r0, [r0, #0]
   d58e8:	f001 f982 	bl	d6bf0 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d58ec:	b960      	cbnz	r0, d5908 <_ZN7FatFile4readEPvj+0x11e>
   d58ee:	e78d      	b.n	d580c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d58f0:	4453      	add	r3, sl
   d58f2:	4299      	cmp	r1, r3
   d58f4:	d321      	bcc.n	d593a <_ZN7FatFile4readEPvj+0x150>
   d58f6:	e7f3      	b.n	d58e0 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d58f8:	464a      	mov	r2, r9
   d58fa:	6800      	ldr	r0, [r0, #0]
   d58fc:	f001 f930 	bl	d6b60 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5900:	2800      	cmp	r0, #0
   d5902:	d083      	beq.n	d580c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5904:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5908:	6963      	ldr	r3, [r4, #20]
   d590a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d590c:	44b9      	add	r9, r7
    m_curPosition += n;
   d590e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5910:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5912:	e798      	b.n	d5846 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5914:	2200      	movs	r2, #0
   d5916:	3024      	adds	r0, #36	; 0x24
   d5918:	f000 fe2b 	bl	d6572 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d591c:	2800      	cmp	r0, #0
   d591e:	f43f af75 	beq.w	d580c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5922:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5926:	42b7      	cmp	r7, r6
   d5928:	bf28      	it	cs
   d592a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d592c:	eb00 010a 	add.w	r1, r0, sl
   d5930:	463a      	mov	r2, r7
   d5932:	4648      	mov	r0, r9
   d5934:	f005 fc19 	bl	db16a <memcpy>
   d5938:	e7e6      	b.n	d5908 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d593a:	3024      	adds	r0, #36	; 0x24
   d593c:	9101      	str	r1, [sp, #4]
   d593e:	f000 fdf1 	bl	d6524 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5942:	9901      	ldr	r1, [sp, #4]
   d5944:	2800      	cmp	r0, #0
   d5946:	d1cb      	bne.n	d58e0 <_ZN7FatFile4readEPvj+0xf6>
   d5948:	e760      	b.n	d580c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d594a:	b003      	add	sp, #12
   d594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5950 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5950:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5952:	2201      	movs	r2, #1
   d5954:	f10d 0107 	add.w	r1, sp, #7
   d5958:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d595a:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d595c:	6905      	ldr	r5, [r0, #16]
   d595e:	f7ff ff44 	bl	d57ea <_ZN7FatFile4readEPvj>
   d5962:	2801      	cmp	r0, #1
   d5964:	bf05      	ittet	eq
   d5966:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d596a:	6166      	streq	r6, [r4, #20]
   d596c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d5970:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5972:	b002      	add	sp, #8
   d5974:	bd70      	pop	{r4, r5, r6, pc}

000d5976 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5976:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5978:	6943      	ldr	r3, [r0, #20]
   d597a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d597e:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5980:	b105      	cbz	r5, d5984 <_ZN7FatFile12readDirCacheEb+0xe>
   d5982:	b969      	cbnz	r1, d59a0 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5984:	2201      	movs	r2, #1
   d5986:	f10d 0107 	add.w	r1, sp, #7
   d598a:	4620      	mov	r0, r4
   d598c:	f7ff ff2d 	bl	d57ea <_ZN7FatFile4readEPvj>
   d5990:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5992:	2801      	cmp	r0, #1
   d5994:	d001      	beq.n	d599a <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5996:	2000      	movs	r0, #0
   d5998:	e008      	b.n	d59ac <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d599a:	6963      	ldr	r3, [r4, #20]
   d599c:	331f      	adds	r3, #31
   d599e:	e000      	b.n	d59a2 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d59a0:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d59a2:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d59a4:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d59a6:	3030      	adds	r0, #48	; 0x30
   d59a8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d59ac:	b003      	add	sp, #12
   d59ae:	bd30      	pop	{r4, r5, pc}

000d59b0 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d59b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59b4:	460e      	mov	r6, r1
   d59b6:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d59b8:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d59ba:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d59bc:	2900      	cmp	r1, #0
   d59be:	d039      	beq.n	d5a34 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d59c0:	6945      	ldr	r5, [r0, #20]
   d59c2:	42b5      	cmp	r5, r6
   d59c4:	d03a      	beq.n	d5a3c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d59c6:	b90e      	cbnz	r6, d59cc <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d59c8:	6106      	str	r6, [r0, #16]
    goto done;
   d59ca:	e031      	b.n	d5a30 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d59cc:	070b      	lsls	r3, r1, #28
   d59ce:	d503      	bpl.n	d59d8 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d59d0:	69c3      	ldr	r3, [r0, #28]
   d59d2:	429e      	cmp	r6, r3
   d59d4:	d82e      	bhi.n	d5a34 <_ZN7FatFile7seekSetEm+0x84>
   d59d6:	e007      	b.n	d59e8 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d59d8:	0688      	lsls	r0, r1, #26
   d59da:	d505      	bpl.n	d59e8 <_ZN7FatFile7seekSetEm+0x38>
   d59dc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d59de:	891b      	ldrh	r3, [r3, #8]
   d59e0:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d59e4:	d826      	bhi.n	d5a34 <_ZN7FatFile7seekSetEm+0x84>
   d59e6:	e023      	b.n	d5a30 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d59e8:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d59ec:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d59f0:	1e6a      	subs	r2, r5, #1
   d59f2:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d59f6:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d59f8:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d59fa:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d59fc:	429a      	cmp	r2, r3
   d59fe:	d800      	bhi.n	d5a02 <_ZN7FatFile7seekSetEm+0x52>
   d5a00:	b94d      	cbnz	r5, d5a16 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5a02:	064a      	lsls	r2, r1, #25
   d5a04:	bf4c      	ite	mi
   d5a06:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5a0a:	6a22      	ldrpl	r2, [r4, #32]
   d5a0c:	6122      	str	r2, [r4, #16]
   d5a0e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5a10:	f104 0810 	add.w	r8, r4, #16
   d5a14:	e00a      	b.n	d5a2c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5a16:	1a9b      	subs	r3, r3, r2
   d5a18:	e7f9      	b.n	d5a0e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5a1a:	4642      	mov	r2, r8
   d5a1c:	6921      	ldr	r1, [r4, #16]
   d5a1e:	68a0      	ldr	r0, [r4, #8]
   d5a20:	f000 fdd1 	bl	d65c6 <_ZN9FatVolume6fatGetEmPm>
   d5a24:	2800      	cmp	r0, #0
   d5a26:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d5a2a:	dd03      	ble.n	d5a34 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5a2c:	2d00      	cmp	r5, #0
   d5a2e:	d1f4      	bne.n	d5a1a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5a30:	6166      	str	r6, [r4, #20]
   d5a32:	e003      	b.n	d5a3c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5a34:	6127      	str	r7, [r4, #16]
  return false;
   d5a36:	2000      	movs	r0, #0
   d5a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5a3c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a42 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a44:	460f      	mov	r7, r1
   d5a46:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5a48:	2100      	movs	r1, #0
   d5a4a:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5a4c:	4604      	mov	r4, r0
   d5a4e:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5a50:	f005 fbb1 	bl	db1b6 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5a54:	68b8      	ldr	r0, [r7, #8]
   d5a56:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5a58:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5a5c:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5a5e:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5a62:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5a64:	6a3b      	ldr	r3, [r7, #32]
   d5a66:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5a68:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5a6a:	7acb      	ldrb	r3, [r1, #11]
   d5a6c:	071d      	lsls	r5, r3, #28
   d5a6e:	d44c      	bmi.n	d5b0a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5a70:	1883      	adds	r3, r0, r2
   d5a72:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5a76:	f003 0317 	and.w	r3, r3, #23
   d5a7a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5a7c:	7ac9      	ldrb	r1, [r1, #11]
   d5a7e:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5a82:	bf04      	itt	eq
   d5a84:	f043 0308 	orreq.w	r3, r3, #8
   d5a88:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5a8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5a8e:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5a90:	f006 0303 	and.w	r3, r6, #3
   d5a94:	2b01      	cmp	r3, #1
   d5a96:	d009      	beq.n	d5aac <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5a98:	2b02      	cmp	r3, #2
   d5a9a:	d005      	beq.n	d5aa8 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5a9c:	2b00      	cmp	r3, #0
   d5a9e:	d134      	bne.n	d5b0a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5aa0:	0571      	lsls	r1, r6, #21
   d5aa2:	d432      	bmi.n	d5b0a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5aa4:	2301      	movs	r3, #1
   d5aa6:	e002      	b.n	d5aae <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5aa8:	2303      	movs	r3, #3
   d5aaa:	e000      	b.n	d5aae <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5aac:	2302      	movs	r3, #2
   d5aae:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5ab0:	78a1      	ldrb	r1, [r4, #2]
   d5ab2:	078b      	lsls	r3, r1, #30
   d5ab4:	d503      	bpl.n	d5abe <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5ab6:	7823      	ldrb	r3, [r4, #0]
   d5ab8:	f013 0f11 	tst.w	r3, #17
   d5abc:	d125      	bne.n	d5b0a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5abe:	b24b      	sxtb	r3, r1
   d5ac0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5ac4:	f006 0108 	and.w	r1, r6, #8
   d5ac8:	bf14      	ite	ne
   d5aca:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5ace:	2700      	moveq	r7, #0
   d5ad0:	4319      	orrs	r1, r3
   d5ad2:	4339      	orrs	r1, r7
   d5ad4:	70a1      	strb	r1, [r4, #2]
   d5ad6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5ad8:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5ada:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5adc:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5ade:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5ae2:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5ae6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5aea:	d504      	bpl.n	d5af6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5aec:	b181      	cbz	r1, d5b10 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5aee:	f000 fe0a 	bl	d6706 <_ZN9FatVolume9freeChainEm>
   d5af2:	b968      	cbnz	r0, d5b10 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5af4:	e009      	b.n	d5b0a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5af6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5af8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5afa:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5afc:	0473      	lsls	r3, r6, #17
   d5afe:	d50c      	bpl.n	d5b1a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5b00:	69e1      	ldr	r1, [r4, #28]
   d5b02:	4620      	mov	r0, r4
   d5b04:	f7ff ff54 	bl	d59b0 <_ZN7FatFile7seekSetEm>
   d5b08:	b938      	cbnz	r0, d5b1a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5b0a:	2000      	movs	r0, #0
   d5b0c:	7020      	strb	r0, [r4, #0]
  return false;
   d5b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5b10:	78a3      	ldrb	r3, [r4, #2]
   d5b12:	f043 0304 	orr.w	r3, r3, #4
   d5b16:	70a3      	strb	r3, [r4, #2]
   d5b18:	e7f0      	b.n	d5afc <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5b1a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5b20 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5b20:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5b22:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5b24:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5b26:	b90b      	cbnz	r3, d5b2c <_ZN7FatFile4syncEv+0xc>
    return true;
   d5b28:	2001      	movs	r0, #1
   d5b2a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5b2c:	7883      	ldrb	r3, [r0, #2]
   d5b2e:	075a      	lsls	r2, r3, #29
   d5b30:	d523      	bpl.n	d5b7a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5b32:	2101      	movs	r1, #1
   d5b34:	f7ff fe32 	bl	d579c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5b38:	4605      	mov	r5, r0
   d5b3a:	b928      	cbnz	r0, d5b48 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5b3c:	7863      	ldrb	r3, [r4, #1]
   d5b3e:	f043 0301 	orr.w	r3, r3, #1
   d5b42:	7063      	strb	r3, [r4, #1]
  return false;
   d5b44:	2000      	movs	r0, #0
   d5b46:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5b48:	7803      	ldrb	r3, [r0, #0]
   d5b4a:	2be5      	cmp	r3, #229	; 0xe5
   d5b4c:	d0f6      	beq.n	d5b3c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5b4e:	7823      	ldrb	r3, [r4, #0]
   d5b50:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5b52:	bf44      	itt	mi
   d5b54:	69e3      	ldrmi	r3, [r4, #28]
   d5b56:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5b58:	8c23      	ldrh	r3, [r4, #32]
   d5b5a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5b5c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5b5e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5b60:	4b09      	ldr	r3, [pc, #36]	; (d5b88 <_ZN7FatFile4syncEv+0x68>)
   d5b62:	681b      	ldr	r3, [r3, #0]
   d5b64:	b12b      	cbz	r3, d5b72 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5b66:	f100 0116 	add.w	r1, r0, #22
   d5b6a:	3018      	adds	r0, #24
   d5b6c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5b6e:	8b2b      	ldrh	r3, [r5, #24]
   d5b70:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5b72:	78a3      	ldrb	r3, [r4, #2]
   d5b74:	f023 0304 	bic.w	r3, r3, #4
   d5b78:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5b7a:	68a0      	ldr	r0, [r4, #8]
   d5b7c:	f7ff fdb6 	bl	d56ec <_ZN9FatVolume9cacheSyncEv>
   d5b80:	2800      	cmp	r0, #0
   d5b82:	d0db      	beq.n	d5b3c <_ZN7FatFile4syncEv+0x1c>
   d5b84:	e7d0      	b.n	d5b28 <_ZN7FatFile4syncEv+0x8>
   d5b86:	bf00      	nop
   d5b88:	2003e33c 	.word	0x2003e33c

000d5b8c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5b8c:	b510      	push	{r4, lr}
   d5b8e:	4604      	mov	r4, r0
  bool rtn = sync();
   d5b90:	f7ff ffc6 	bl	d5b20 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5b94:	2300      	movs	r3, #0
   d5b96:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5b98:	bd10      	pop	{r4, pc}

000d5b9a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b9c:	b093      	sub	sp, #76	; 0x4c
   d5b9e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5ba0:	2300      	movs	r3, #0
   d5ba2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5ba6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5baa:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5bac:	9201      	str	r2, [sp, #4]
   d5bae:	4606      	mov	r6, r0
   d5bb0:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5bb2:	b10b      	cbz	r3, d5bb8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5bb4:	2000      	movs	r0, #0
   d5bb6:	e03d      	b.n	d5c34 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5bb8:	780b      	ldrb	r3, [r1, #0]
   d5bba:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5bbe:	d0f9      	beq.n	d5bb4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5bc0:	7813      	ldrb	r3, [r2, #0]
   d5bc2:	2b2f      	cmp	r3, #47	; 0x2f
   d5bc4:	d112      	bne.n	d5bec <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5bc6:	9b01      	ldr	r3, [sp, #4]
   d5bc8:	781a      	ldrb	r2, [r3, #0]
   d5bca:	2a2f      	cmp	r2, #47	; 0x2f
   d5bcc:	d102      	bne.n	d5bd4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5bce:	3301      	adds	r3, #1
   d5bd0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5bd2:	e7f8      	b.n	d5bc6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5bd4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5bd6:	b91a      	cbnz	r2, d5be0 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5bd8:	4630      	mov	r0, r6
   d5bda:	f7ff fdee 	bl	d57ba <_ZN7FatFile8openRootEP9FatVolume>
   d5bde:	e029      	b.n	d5c34 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5be0:	a809      	add	r0, sp, #36	; 0x24
   d5be2:	f7ff fdea 	bl	d57ba <_ZN7FatFile8openRootEP9FatVolume>
   d5be6:	2800      	cmp	r0, #0
   d5be8:	d0e4      	beq.n	d5bb4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5bea:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5bec:	aa01      	add	r2, sp, #4
   d5bee:	a903      	add	r1, sp, #12
   d5bf0:	9801      	ldr	r0, [sp, #4]
   d5bf2:	f000 f929 	bl	d5e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5bf6:	2800      	cmp	r0, #0
   d5bf8:	d0dc      	beq.n	d5bb4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5bfa:	9b01      	ldr	r3, [sp, #4]
   d5bfc:	781b      	ldrb	r3, [r3, #0]
   d5bfe:	b19b      	cbz	r3, d5c28 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5c00:	2300      	movs	r3, #0
   d5c02:	aa03      	add	r2, sp, #12
   d5c04:	4621      	mov	r1, r4
   d5c06:	4630      	mov	r0, r6
   d5c08:	f000 fac2 	bl	d6190 <_ZN7FatFile4openEPS_P7fname_ti>
   d5c0c:	2800      	cmp	r0, #0
   d5c0e:	d0d1      	beq.n	d5bb4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5c10:	4635      	mov	r5, r6
   d5c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c14:	ac09      	add	r4, sp, #36	; 0x24
   d5c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c1c:	682b      	ldr	r3, [r5, #0]
   d5c1e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5c20:	4630      	mov	r0, r6
   d5c22:	f7ff ffb3 	bl	d5b8c <_ZN7FatFile5closeEv>
   d5c26:	e7e0      	b.n	d5bea <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5c28:	463b      	mov	r3, r7
   d5c2a:	aa03      	add	r2, sp, #12
   d5c2c:	4621      	mov	r1, r4
   d5c2e:	4630      	mov	r0, r6
   d5c30:	f000 faae 	bl	d6190 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5c34:	b013      	add	sp, #76	; 0x4c
   d5c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c38 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d5c38:	b500      	push	{lr}
   d5c3a:	b08b      	sub	sp, #44	; 0x2c
   d5c3c:	2300      	movs	r3, #0
   d5c3e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5c42:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d5c46:	460a      	mov	r2, r1
   d5c48:	2301      	movs	r3, #1
   d5c4a:	4601      	mov	r1, r0
   d5c4c:	a801      	add	r0, sp, #4
   d5c4e:	f7ff ffa4 	bl	d5b9a <_ZN7FatFile4openEPS_PKci>
   d5c52:	b110      	cbz	r0, d5c5a <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d5c54:	a801      	add	r0, sp, #4
   d5c56:	f000 f9e3 	bl	d6020 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d5c5a:	b00b      	add	sp, #44	; 0x2c
   d5c5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c60 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5c64:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5c66:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5c68:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5c6a:	4604      	mov	r4, r0
   d5c6c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5c6e:	d508      	bpl.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
   d5c70:	7883      	ldrb	r3, [r0, #2]
   d5c72:	079a      	lsls	r2, r3, #30
   d5c74:	d505      	bpl.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5c76:	071b      	lsls	r3, r3, #28
   d5c78:	d50b      	bpl.n	d5c92 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5c7a:	69e1      	ldr	r1, [r4, #28]
   d5c7c:	f7ff fe98 	bl	d59b0 <_ZN7FatFile7seekSetEm>
   d5c80:	b938      	cbnz	r0, d5c92 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5c82:	7863      	ldrb	r3, [r4, #1]
   d5c84:	f043 0301 	orr.w	r3, r3, #1
   d5c88:	7063      	strb	r3, [r4, #1]
  return -1;
   d5c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5c92:	6963      	ldr	r3, [r4, #20]
   d5c94:	43db      	mvns	r3, r3
   d5c96:	4598      	cmp	r8, r3
   d5c98:	d8f3      	bhi.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
   d5c9a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5c9c:	f04f 0a00 	mov.w	sl, #0
   d5ca0:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5ca2:	2e00      	cmp	r6, #0
   d5ca4:	f000 8081 	beq.w	d5daa <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5ca8:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5caa:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5cac:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5cb0:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5cb4:	d11c      	bne.n	d5cf0 <_ZN7FatFile5writeEPKvj+0x90>
   d5cb6:	b9df      	cbnz	r7, d5cf0 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5cb8:	6921      	ldr	r1, [r4, #16]
   d5cba:	b171      	cbz	r1, d5cda <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5cbc:	f104 0210 	add.w	r2, r4, #16
   d5cc0:	f000 fc81 	bl	d65c6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5cc4:	2800      	cmp	r0, #0
   d5cc6:	dbdc      	blt.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5cc8:	f040 808e 	bne.w	d5de8 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5ccc:	4620      	mov	r0, r4
   d5cce:	f7ff fd1a 	bl	d5706 <_ZN7FatFile10addClusterEv>
   d5cd2:	2800      	cmp	r0, #0
   d5cd4:	f040 8088 	bne.w	d5de8 <_ZN7FatFile5writeEPKvj+0x188>
   d5cd8:	e7d3      	b.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5cda:	6a23      	ldr	r3, [r4, #32]
   d5cdc:	b93b      	cbnz	r3, d5cee <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5cde:	4620      	mov	r0, r4
   d5ce0:	f7ff fd11 	bl	d5706 <_ZN7FatFile10addClusterEv>
   d5ce4:	2800      	cmp	r0, #0
   d5ce6:	d0cc      	beq.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5ce8:	6923      	ldr	r3, [r4, #16]
   d5cea:	6223      	str	r3, [r4, #32]
   d5cec:	e000      	b.n	d5cf0 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5cee:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5cf0:	6921      	ldr	r1, [r4, #16]
   d5cf2:	68a0      	ldr	r0, [r4, #8]
   d5cf4:	f000 fc61 	bl	d65ba <_ZNK9FatVolume17clusterFirstBlockEm>
   d5cf8:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5cfa:	b917      	cbnz	r7, d5d02 <_ZN7FatFile5writeEPKvj+0xa2>
   d5cfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5d00:	d221      	bcs.n	d5d46 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5d02:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5d06:	42b5      	cmp	r5, r6
   d5d08:	bf28      	it	cs
   d5d0a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5d0c:	b937      	cbnz	r7, d5d1c <_ZN7FatFile5writeEPKvj+0xbc>
   d5d0e:	6963      	ldr	r3, [r4, #20]
   d5d10:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5d12:	4293      	cmp	r3, r2
   d5d14:	bf34      	ite	cc
   d5d16:	2201      	movcc	r2, #1
   d5d18:	2205      	movcs	r2, #5
   d5d1a:	e000      	b.n	d5d1e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5d1c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5d1e:	68a0      	ldr	r0, [r4, #8]
   d5d20:	3024      	adds	r0, #36	; 0x24
   d5d22:	f000 fc26 	bl	d6572 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5d26:	2800      	cmp	r0, #0
   d5d28:	d0ab      	beq.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5d2a:	4438      	add	r0, r7
   d5d2c:	462a      	mov	r2, r5
   d5d2e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5d30:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5d32:	f005 fa1a 	bl	db16a <memcpy>
      if (512 == (n + blockOffset)) {
   d5d36:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5d3a:	d130      	bne.n	d5d9e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5d3c:	68a0      	ldr	r0, [r4, #8]
   d5d3e:	3024      	adds	r0, #36	; 0x24
   d5d40:	f000 fbf0 	bl	d6524 <_ZN8FatCache4syncEv>
   d5d44:	e017      	b.n	d5d76 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5d46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5d4a:	68a0      	ldr	r0, [r4, #8]
   d5d4c:	d315      	bcc.n	d5d7a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5d4e:	7902      	ldrb	r2, [r0, #4]
   d5d50:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5d52:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5d54:	b2d2      	uxtb	r2, r2
   d5d56:	4293      	cmp	r3, r2
   d5d58:	bf28      	it	cs
   d5d5a:	4613      	movcs	r3, r2
   d5d5c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d5e:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5d60:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d64:	d302      	bcc.n	d5d6c <_ZN7FatFile5writeEPKvj+0x10c>
   d5d66:	441a      	add	r2, r3
   d5d68:	4291      	cmp	r1, r2
   d5d6a:	d337      	bcc.n	d5ddc <_ZN7FatFile5writeEPKvj+0x17c>
   d5d6c:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5d6e:	464a      	mov	r2, r9
   d5d70:	6838      	ldr	r0, [r7, #0]
   d5d72:	f000 fff1 	bl	d6d58 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5d76:	b990      	cbnz	r0, d5d9e <_ZN7FatFile5writeEPKvj+0x13e>
   d5d78:	e783      	b.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5d7c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5d7e:	bf02      	ittt	eq
   d5d80:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5d84:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5d88:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5d8a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5d8c:	464a      	mov	r2, r9
   d5d8e:	6818      	ldr	r0, [r3, #0]
   d5d90:	f000 ff70 	bl	d6c74 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5d94:	2800      	cmp	r0, #0
   d5d96:	f43f af74 	beq.w	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5d9a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5d9e:	6963      	ldr	r3, [r4, #20]
   d5da0:	442b      	add	r3, r5
   d5da2:	6163      	str	r3, [r4, #20]
    src += n;
   d5da4:	44a9      	add	r9, r5
    nToWrite -= n;
   d5da6:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5da8:	e77a      	b.n	d5ca0 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5daa:	69e2      	ldr	r2, [r4, #28]
   d5dac:	4293      	cmp	r3, r2
   d5dae:	d901      	bls.n	d5db4 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5db0:	61e3      	str	r3, [r4, #28]
   d5db2:	e002      	b.n	d5dba <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5db4:	4b0f      	ldr	r3, [pc, #60]	; (d5df4 <_ZN7FatFile5writeEPKvj+0x194>)
   d5db6:	681b      	ldr	r3, [r3, #0]
   d5db8:	b11b      	cbz	r3, d5dc2 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5dba:	78a3      	ldrb	r3, [r4, #2]
   d5dbc:	f043 0304 	orr.w	r3, r3, #4
   d5dc0:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5dc2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5dc6:	2b00      	cmp	r3, #0
   d5dc8:	db02      	blt.n	d5dd0 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5dca:	4640      	mov	r0, r8
   d5dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	f7ff fea5 	bl	d5b20 <_ZN7FatFile4syncEv>
   d5dd6:	2800      	cmp	r0, #0
   d5dd8:	d1f7      	bne.n	d5dca <_ZN7FatFile5writeEPKvj+0x16a>
   d5dda:	e752      	b.n	d5c82 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5de0:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5de4:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5de6:	e7c1      	b.n	d5d6c <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5de8:	6921      	ldr	r1, [r4, #16]
   d5dea:	68a0      	ldr	r0, [r4, #8]
   d5dec:	f000 fbe5 	bl	d65ba <_ZNK9FatVolume17clusterFirstBlockEm>
   d5df0:	4601      	mov	r1, r0
   d5df2:	e783      	b.n	d5cfc <_ZN7FatFile5writeEPKvj+0x9c>
   d5df4:	2003e33c 	.word	0x2003e33c

000d5df8 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5df8:	f001 b962 	b.w	d70c0 <HAL_Pin_Map>

000d5dfc <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d5dfc:	1e41      	subs	r1, r0, #1
   d5dfe:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5e02:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5e04:	0843      	lsrs	r3, r0, #1
   d5e06:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5e0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5e0e:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5e12:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5e14:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5e16:	d1f5      	bne.n	d5e04 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5e18:	4770      	bx	lr

000d5e1a <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5e1a:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d5e1c:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5e1e:	4604      	mov	r4, r0
   d5e20:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d5e22:	b923      	cbnz	r3, d5e2e <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d5e24:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d5e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d5e2a:	f7ff bcc6 	b.w	d57ba <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d5e2e:	2224      	movs	r2, #36	; 0x24
   d5e30:	2100      	movs	r1, #0
   d5e32:	f005 f9c0 	bl	db1b6 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d5e36:	2310      	movs	r3, #16
  m_flags = F_READ;
   d5e38:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d5e3a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d5e3c:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d5e3e:	68ab      	ldr	r3, [r5, #8]
   d5e40:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d5e42:	68eb      	ldr	r3, [r5, #12]
   d5e44:	6223      	str	r3, [r4, #32]
  return true;
}
   d5e46:	bd38      	pop	{r3, r4, r5, pc}

000d5e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5e4c:	7803      	ldrb	r3, [r0, #0]
   d5e4e:	2b20      	cmp	r3, #32
   d5e50:	f100 0401 	add.w	r4, r0, #1
   d5e54:	d101      	bne.n	d5e5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5e56:	4620      	mov	r0, r4
   d5e58:	e7f8      	b.n	d5e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5e5a:	4f70      	ldr	r7, [pc, #448]	; (d601c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5e5c:	6088      	str	r0, [r1, #8]
   d5e5e:	4605      	mov	r5, r0
   d5e60:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5e62:	462e      	mov	r6, r5
   d5e64:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5e68:	b30b      	cbz	r3, d5eae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5e6a:	2b2f      	cmp	r3, #47	; 0x2f
   d5e6c:	d101      	bne.n	d5e72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5e6e:	1903      	adds	r3, r0, r4
   d5e70:	e017      	b.n	d5ea2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5e72:	2b5c      	cmp	r3, #92	; 0x5c
   d5e74:	d102      	bne.n	d5e7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d5e76:	2000      	movs	r0, #0
   d5e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5e7c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5e80:	b2e4      	uxtb	r4, r4
   d5e82:	2c1d      	cmp	r4, #29
   d5e84:	d803      	bhi.n	d5e8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d5e86:	fa27 f404 	lsr.w	r4, r7, r4
   d5e8a:	07e4      	lsls	r4, r4, #31
   d5e8c:	d4f3      	bmi.n	d5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d5e8e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d5e92:	2c3c      	cmp	r4, #60	; 0x3c
   d5e94:	d0ef      	beq.n	d5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d5e96:	3b20      	subs	r3, #32
   d5e98:	2b5e      	cmp	r3, #94	; 0x5e
   d5e9a:	d9e1      	bls.n	d5e60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5e9c:	e7eb      	b.n	d5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d5e9e:	2d2f      	cmp	r5, #47	; 0x2f
   d5ea0:	d105      	bne.n	d5eae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5ea2:	461e      	mov	r6, r3
   d5ea4:	f813 5b01 	ldrb.w	r5, [r3], #1
   d5ea8:	2d20      	cmp	r5, #32
   d5eaa:	d1f8      	bne.n	d5e9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d5eac:	e7f9      	b.n	d5ea2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d5eae:	6016      	str	r6, [r2, #0]
   d5eb0:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d5eb2:	4298      	cmp	r0, r3
   d5eb4:	ebc0 0803 	rsb	r8, r0, r3
   d5eb8:	d009      	beq.n	d5ece <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d5eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d5ebe:	2a2e      	cmp	r2, #46	; 0x2e
   d5ec0:	d0f7      	beq.n	d5eb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d5ec2:	2a20      	cmp	r2, #32
   d5ec4:	d0f5      	beq.n	d5eb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d5ec6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d5eca:	dcd4      	bgt.n	d5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d5ecc:	e001      	b.n	d5ed2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d5ece:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d5ed2:	f8c1 8004 	str.w	r8, [r1, #4]
   d5ed6:	f101 030c 	add.w	r3, r1, #12
   d5eda:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d5ede:	2420      	movs	r4, #32
   d5ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5ee4:	4293      	cmp	r3, r2
   d5ee6:	d1fb      	bne.n	d5ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5ee8:	4603      	mov	r3, r0
   d5eea:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5eec:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5ef0:	2c2e      	cmp	r4, #46	; 0x2e
   d5ef2:	d0fa      	beq.n	d5eea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5ef4:	2c20      	cmp	r4, #32
   d5ef6:	d0f8      	beq.n	d5eea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d5ef8:	fab2 f482 	clz	r4, r2
   d5efc:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5efe:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d5f02:	1c73      	adds	r3, r6, #1
   d5f04:	d107      	bne.n	d5f16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d5f06:	2700      	movs	r7, #0
   d5f08:	f04f 0e07 	mov.w	lr, #7
   d5f0c:	463d      	mov	r5, r7
   d5f0e:	46ba      	mov	sl, r7
   d5f10:	f04f 0908 	mov.w	r9, #8
   d5f14:	e009      	b.n	d5f2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d5f16:	5d83      	ldrb	r3, [r0, r6]
   d5f18:	2b2e      	cmp	r3, #46	; 0x2e
   d5f1a:	d0f4      	beq.n	d5f06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5f1c:	3e01      	subs	r6, #1
   d5f1e:	e7f0      	b.n	d5f02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5f20:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d5f22:	2b20      	cmp	r3, #32
   d5f24:	d104      	bne.n	d5f30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d5f26:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5f28:	3201      	adds	r2, #1
   d5f2a:	4542      	cmp	r2, r8
   d5f2c:	dbf8      	blt.n	d5f20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5f2e:	e04b      	b.n	d5fc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5f30:	2b2e      	cmp	r3, #46	; 0x2e
   d5f32:	d102      	bne.n	d5f3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5f34:	42b2      	cmp	r2, r6
   d5f36:	d1f6      	bne.n	d5f26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5f38:	e003      	b.n	d5f42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d5f3a:	2b22      	cmp	r3, #34	; 0x22
   d5f3c:	d017      	beq.n	d5f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5f3e:	2b7c      	cmp	r3, #124	; 0x7c
   d5f40:	d015      	beq.n	d5f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d5f42:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d5f46:	f1bc 0f05 	cmp.w	ip, #5
   d5f4a:	d801      	bhi.n	d5f50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5f4c:	2b2d      	cmp	r3, #45	; 0x2d
   d5f4e:	d10e      	bne.n	d5f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5f50:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5f54:	f1bc 0f05 	cmp.w	ip, #5
   d5f58:	d909      	bls.n	d5f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5f5a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5f5e:	f1bc 0f02 	cmp.w	ip, #2
   d5f62:	d904      	bls.n	d5f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5f64:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5f68:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5f6c:	d902      	bls.n	d5f74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5f6e:	42b2      	cmp	r2, r6
   d5f70:	d10e      	bne.n	d5f90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5f72:	e049      	b.n	d6008 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5f74:	42b2      	cmp	r2, r6
   d5f76:	d047      	beq.n	d6008 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5f78:	4575      	cmp	r5, lr
   d5f7a:	d821      	bhi.n	d5fc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5f7c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5f80:	f1bc 0f19 	cmp.w	ip, #25
   d5f84:	d808      	bhi.n	d5f98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d5f86:	3b20      	subs	r3, #32
   d5f88:	b2db      	uxtb	r3, r3
        lc |= bit;
   d5f8a:	ea49 0707 	orr.w	r7, r9, r7
   d5f8e:	e00a      	b.n	d5fa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5f90:	4575      	cmp	r5, lr
   d5f92:	d815      	bhi.n	d5fc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d5f94:	2400      	movs	r4, #0
      c = '_';
   d5f96:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5f98:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5f9c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d5fa0:	bf98      	it	ls
   d5fa2:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d5fa6:	f105 0c01 	add.w	ip, r5, #1
   d5faa:	fa5f fc8c 	uxtb.w	ip, ip
   d5fae:	440d      	add	r5, r1
      if (i < 7) {
   d5fb0:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d5fb4:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d5fb6:	d801      	bhi.n	d5fbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d5fb8:	f881 c00c 	strb.w	ip, [r1, #12]
   d5fbc:	4665      	mov	r5, ip
   d5fbe:	e7b3      	b.n	d5f28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5fc0:	f1be 0f0a 	cmp.w	lr, #10
   d5fc4:	d117      	bne.n	d5ff6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d5fc6:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d5fc8:	7b4b      	ldrb	r3, [r1, #13]
   d5fca:	2b20      	cmp	r3, #32
   d5fcc:	f43f af53 	beq.w	d5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d5fd0:	b13c      	cbz	r4, d5fe2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d5fd2:	ea1a 0f07 	tst.w	sl, r7
   d5fd6:	bf18      	it	ne
   d5fd8:	2702      	movne	r7, #2
   d5fda:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5fdc:	2001      	movs	r0, #1
   d5fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d5fe2:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5fe4:	2001      	movs	r0, #1
   d5fe6:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5fe8:	4419      	add	r1, r3
   d5fea:	237e      	movs	r3, #126	; 0x7e
   d5fec:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5fee:	2331      	movs	r3, #49	; 0x31
   d5ff0:	738b      	strb	r3, [r1, #14]
   d5ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d5ff6:	42b2      	cmp	r2, r6
   d5ff8:	dce5      	bgt.n	d5fc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5ffa:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5ffc:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6000:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6002:	f04f 0910 	mov.w	r9, #16
   d6006:	e78e      	b.n	d5f26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6008:	f1be 0f0a 	cmp.w	lr, #10
   d600c:	d0db      	beq.n	d5fc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d600e:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6010:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6014:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6016:	f04f 0910 	mov.w	r9, #16
   d601a:	e785      	b.n	d5f28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d601c:	31000101 	.word	0x31000101

000d6020 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6020:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6022:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6024:	2300      	movs	r3, #0
   d6026:	f88d 3004 	strb.w	r3, [sp, #4]
   d602a:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d602e:	7803      	ldrb	r3, [r0, #0]
   d6030:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6032:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6034:	d508      	bpl.n	d6048 <_ZN7FatFile6removeEv+0x28>
   d6036:	7883      	ldrb	r3, [r0, #2]
   d6038:	079a      	lsls	r2, r3, #30
   d603a:	d505      	bpl.n	d6048 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d603c:	6a01      	ldr	r1, [r0, #32]
   d603e:	b129      	cbz	r1, d604c <_ZN7FatFile6removeEv+0x2c>
   d6040:	68a0      	ldr	r0, [r4, #8]
   d6042:	f000 fb60 	bl	d6706 <_ZN9FatVolume9freeChainEm>
   d6046:	b908      	cbnz	r0, d604c <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6048:	2000      	movs	r0, #0
   d604a:	e049      	b.n	d60e0 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d604c:	2101      	movs	r1, #1
   d604e:	4620      	mov	r0, r4
   d6050:	f7ff fba4 	bl	d579c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6054:	4605      	mov	r5, r0
   d6056:	2800      	cmp	r0, #0
   d6058:	d0f6      	beq.n	d6048 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d605a:	f7ff fecf 	bl	d5dfc <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d605e:	26e5      	movs	r6, #229	; 0xe5
   d6060:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6062:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6064:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6066:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6068:	68a0      	ldr	r0, [r4, #8]
   d606a:	f7ff fb3f 	bl	d56ec <_ZN9FatVolume9cacheSyncEv>
   d606e:	2800      	cmp	r0, #0
   d6070:	d0ea      	beq.n	d6048 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6072:	78e3      	ldrb	r3, [r4, #3]
   d6074:	2b00      	cmp	r3, #0
   d6076:	d033      	beq.n	d60e0 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6078:	4621      	mov	r1, r4
   d607a:	a801      	add	r0, sp, #4
   d607c:	f7ff fecd 	bl	d5e1a <_ZN7FatFile11openClusterEPS_>
   d6080:	2800      	cmp	r0, #0
   d6082:	d0e1      	beq.n	d6048 <_ZN7FatFile6removeEv+0x28>
   d6084:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6086:	78e3      	ldrb	r3, [r4, #3]
   d6088:	42ab      	cmp	r3, r5
   d608a:	d3dd      	bcc.n	d6048 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d608c:	88a1      	ldrh	r1, [r4, #4]
   d608e:	1b49      	subs	r1, r1, r5
   d6090:	0149      	lsls	r1, r1, #5
   d6092:	a801      	add	r0, sp, #4
   d6094:	f7ff fc8c 	bl	d59b0 <_ZN7FatFile7seekSetEm>
   d6098:	2800      	cmp	r0, #0
   d609a:	d0d5      	beq.n	d6048 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d609c:	2100      	movs	r1, #0
   d609e:	a801      	add	r0, sp, #4
   d60a0:	f7ff fc69 	bl	d5976 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d60a4:	2800      	cmp	r0, #0
   d60a6:	d0cf      	beq.n	d6048 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d60a8:	7ac3      	ldrb	r3, [r0, #11]
   d60aa:	2b0f      	cmp	r3, #15
   d60ac:	d1cc      	bne.n	d6048 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d60ae:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d60b0:	f002 031f 	and.w	r3, r2, #31
   d60b4:	429d      	cmp	r5, r3
   d60b6:	d1c7      	bne.n	d6048 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d60b8:	7b43      	ldrb	r3, [r0, #13]
   d60ba:	42bb      	cmp	r3, r7
   d60bc:	d1c4      	bne.n	d6048 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d60be:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d60c0:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d60c2:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d60c6:	f043 0301 	orr.w	r3, r3, #1
   d60ca:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d60ce:	0653      	lsls	r3, r2, #25
   d60d0:	d503      	bpl.n	d60da <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d60d2:	68a0      	ldr	r0, [r4, #8]
   d60d4:	f7ff fb0a 	bl	d56ec <_ZN9FatVolume9cacheSyncEv>
   d60d8:	e002      	b.n	d60e0 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d60da:	3501      	adds	r5, #1
   d60dc:	b2ed      	uxtb	r5, r5
   d60de:	e7d2      	b.n	d6086 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d60e0:	b00b      	add	sp, #44	; 0x2c
   d60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d60e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d60e8:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d60ec:	4606      	mov	r6, r0
   d60ee:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d60f0:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d60f2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d60f4:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d60f8:	6869      	ldr	r1, [r5, #4]
   d60fa:	68aa      	ldr	r2, [r5, #8]
   d60fc:	1863      	adds	r3, r4, r1
   d60fe:	b29b      	uxth	r3, r3
   d6100:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6102:	4291      	cmp	r1, r2
   d6104:	d006      	beq.n	d6114 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6106:	f812 0b01 	ldrb.w	r0, [r2], #1
   d610a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d610e:	4043      	eors	r3, r0
   d6110:	b29b      	uxth	r3, r3
   d6112:	e7f6      	b.n	d6102 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6114:	f1b9 0f03 	cmp.w	r9, #3
   d6118:	bf28      	it	cs
   d611a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d611e:	f109 0204 	add.w	r2, r9, #4
   d6122:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6124:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6128:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d612a:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d612c:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d612e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6130:	bf94      	ite	ls
   d6132:	3130      	addls	r1, #48	; 0x30
   d6134:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6136:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6138:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d613a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d613e:	d3f1      	bcc.n	d6124 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6140:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6144:	2100      	movs	r1, #0
   d6146:	735f      	strb	r7, [r3, #13]
   d6148:	4630      	mov	r0, r6
   d614a:	f7ff fc31 	bl	d59b0 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d614e:	2101      	movs	r1, #1
   d6150:	4630      	mov	r0, r6
   d6152:	f7ff fc10 	bl	d5976 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6156:	4601      	mov	r1, r0
   d6158:	b928      	cbnz	r0, d6166 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d615a:	7870      	ldrb	r0, [r6, #1]
   d615c:	fab0 f080 	clz	r0, r0
   d6160:	0940      	lsrs	r0, r0, #5
   d6162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6166:	7803      	ldrb	r3, [r0, #0]
   d6168:	b14b      	cbz	r3, d617e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d616a:	7ac3      	ldrb	r3, [r0, #11]
   d616c:	071b      	lsls	r3, r3, #28
   d616e:	d4ee      	bmi.n	d614e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6170:	220b      	movs	r2, #11
   d6172:	4640      	mov	r0, r8
   d6174:	f004 ffea 	bl	db14c <memcmp>
   d6178:	2800      	cmp	r0, #0
   d617a:	d1e8      	bne.n	d614e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d617c:	e002      	b.n	d6184 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d617e:	2001      	movs	r0, #1
   d6180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6184:	3401      	adds	r4, #1
   d6186:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6188:	2c64      	cmp	r4, #100	; 0x64
   d618a:	d1b5      	bne.n	d60f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d618c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6190 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6194:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6196:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6198:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d619a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d619e:	9005      	str	r0, [sp, #20]
   d61a0:	460e      	mov	r6, r1
   d61a2:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d61a4:	d101      	bne.n	d61aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d61a6:	2000      	movs	r0, #0
   d61a8:	e1a0      	b.n	d64ec <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d61aa:	9b05      	ldr	r3, [sp, #20]
   d61ac:	781b      	ldrb	r3, [r3, #0]
   d61ae:	2b00      	cmp	r3, #0
   d61b0:	d1f9      	bne.n	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d61b2:	6853      	ldr	r3, [r2, #4]
   d61b4:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d61b6:	7813      	ldrb	r3, [r2, #0]
   d61b8:	079b      	lsls	r3, r3, #30
   d61ba:	f000 818d 	beq.w	d64d8 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d61be:	9b02      	ldr	r3, [sp, #8]
   d61c0:	270d      	movs	r7, #13
   d61c2:	330c      	adds	r3, #12
   d61c4:	fbb3 f7f7 	udiv	r7, r3, r7
   d61c8:	3701      	adds	r7, #1
   d61ca:	b2ff      	uxtb	r7, r7
   d61cc:	2100      	movs	r1, #0
   d61ce:	4630      	mov	r0, r6
   d61d0:	f7ff fbee 	bl	d59b0 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d61d4:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d61d8:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d61dc:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d61e0:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d61e2:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d61e4:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d61e6:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d61ea:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d61ec:	6972      	ldr	r2, [r6, #20]
   d61ee:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d61f0:	2101      	movs	r1, #1
   d61f2:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d61f4:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d61f8:	f7ff fbbd 	bl	d5976 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d61fc:	9b07      	ldr	r3, [sp, #28]
   d61fe:	b920      	cbnz	r0, d620a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6200:	7873      	ldrb	r3, [r6, #1]
   d6202:	2b00      	cmp	r3, #0
   d6204:	f000 8090 	beq.w	d6328 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6208:	e7cd      	b.n	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d620a:	7802      	ldrb	r2, [r0, #0]
   d620c:	2ae5      	cmp	r2, #229	; 0xe5
   d620e:	d000      	beq.n	d6212 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6210:	b942      	cbnz	r2, d6224 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6212:	2c00      	cmp	r4, #0
   d6214:	bf08      	it	eq
   d6216:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6218:	42bc      	cmp	r4, r7
        freeFound++;
   d621a:	bf3c      	itt	cc
   d621c:	3401      	addcc	r4, #1
   d621e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6220:	b922      	cbnz	r2, d622c <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6222:	e081      	b.n	d6328 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6224:	42bc      	cmp	r4, r7
   d6226:	bf38      	it	cc
   d6228:	2400      	movcc	r4, #0
   d622a:	e003      	b.n	d6234 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d622c:	2ae5      	cmp	r2, #229	; 0xe5
   d622e:	d101      	bne.n	d6234 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6230:	2500      	movs	r5, #0
   d6232:	e7db      	b.n	d61ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6234:	2a2e      	cmp	r2, #46	; 0x2e
   d6236:	d0fb      	beq.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6238:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d623a:	290f      	cmp	r1, #15
   d623c:	d152      	bne.n	d62e4 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d623e:	b93d      	cbnz	r5, d6250 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6240:	0651      	lsls	r1, r2, #25
   d6242:	d5d3      	bpl.n	d61ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6244:	7b43      	ldrb	r3, [r0, #13]
   d6246:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6248:	f002 051f 	and.w	r5, r2, #31
   d624c:	462b      	mov	r3, r5
   d624e:	e007      	b.n	d6260 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6250:	3b01      	subs	r3, #1
   d6252:	b2db      	uxtb	r3, r3
   d6254:	429a      	cmp	r2, r3
   d6256:	d1eb      	bne.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6258:	7b42      	ldrb	r2, [r0, #13]
   d625a:	9903      	ldr	r1, [sp, #12]
   d625c:	4291      	cmp	r1, r2
   d625e:	d1e7      	bne.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6260:	1e5a      	subs	r2, r3, #1
   d6262:	f04f 0c0d 	mov.w	ip, #13
   d6266:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d626a:	9a02      	ldr	r2, [sp, #8]
   d626c:	4562      	cmp	r2, ip
   d626e:	d9df      	bls.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6270:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6274:	f1be 0f04 	cmp.w	lr, #4
   d6278:	fa5f f28e 	uxtb.w	r2, lr
   d627c:	d804      	bhi.n	d6288 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d627e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6282:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6286:	e00c      	b.n	d62a2 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6288:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d628a:	bf95      	itete	ls
   d628c:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6290:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6294:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6298:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d629c:	bf94      	ite	ls
   d629e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d62a0:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d62a2:	9902      	ldr	r1, [sp, #8]
   d62a4:	4561      	cmp	r1, ip
   d62a6:	d103      	bne.n	d62b0 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d62a8:	2a00      	cmp	r2, #0
   d62aa:	bf18      	it	ne
   d62ac:	2500      	movne	r5, #0
   d62ae:	e79d      	b.n	d61ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d62b0:	2aff      	cmp	r2, #255	; 0xff
   d62b2:	d8bd      	bhi.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d62b4:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d62b6:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d62ba:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d62bc:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d62c0:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d62c4:	bf98      	it	ls
   d62c6:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d62c8:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d62cc:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d62d0:	bf98      	it	ls
   d62d2:	b2d2      	uxtbls	r2, r2
   d62d4:	f1bc 0f19 	cmp.w	ip, #25
   d62d8:	bf9c      	itt	ls
   d62da:	3120      	addls	r1, #32
   d62dc:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d62de:	4291      	cmp	r1, r2
   d62e0:	d1a6      	bne.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d62e2:	e0fb      	b.n	d64dc <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d62e4:	0709      	lsls	r1, r1, #28
   d62e6:	d4a3      	bmi.n	d6230 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d62e8:	b14d      	cbz	r5, d62fe <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d62ea:	2b01      	cmp	r3, #1
   d62ec:	f47f af5b 	bne.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d62f0:	f7ff fd84 	bl	d5dfc <_ZN7FatFile11lfnChecksumEPh>
   d62f4:	9b03      	ldr	r3, [sp, #12]
   d62f6:	4283      	cmp	r3, r0
   d62f8:	f47f af55 	bne.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d62fc:	e00f      	b.n	d631e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d62fe:	220b      	movs	r2, #11
   d6300:	9906      	ldr	r1, [sp, #24]
   d6302:	9307      	str	r3, [sp, #28]
   d6304:	f004 ff22 	bl	db14c <memcmp>
   d6308:	9b07      	ldr	r3, [sp, #28]
   d630a:	2800      	cmp	r0, #0
   d630c:	f47f af6e 	bne.w	d61ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6310:	f899 2000 	ldrb.w	r2, [r9]
   d6314:	07d2      	lsls	r2, r2, #31
   d6316:	d502      	bpl.n	d631e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6318:	2201      	movs	r2, #1
   d631a:	9204      	str	r2, [sp, #16]
   d631c:	e766      	b.n	d61ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d631e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6322:	f000 80d1 	beq.w	d64c8 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6326:	e73e      	b.n	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6328:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d632c:	f43f af3b 	beq.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6330:	f00b 0303 	and.w	r3, fp, #3
   d6334:	3b01      	subs	r3, #1
   d6336:	2b01      	cmp	r3, #1
   d6338:	f63f af35 	bhi.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d633c:	2c00      	cmp	r4, #0
   d633e:	bf08      	it	eq
   d6340:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6342:	42bc      	cmp	r4, r7
   d6344:	d302      	bcc.n	d634c <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6346:	9b04      	ldr	r3, [sp, #16]
   d6348:	b9cb      	cbnz	r3, d637e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d634a:	e01f      	b.n	d638c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d634c:	2100      	movs	r1, #0
   d634e:	4630      	mov	r0, r6
   d6350:	f7ff fb11 	bl	d5976 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6354:	b910      	cbnz	r0, d635c <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6356:	7873      	ldrb	r3, [r6, #1]
   d6358:	b15b      	cbz	r3, d6372 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d635a:	e724      	b.n	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d635c:	3401      	adds	r4, #1
   d635e:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6360:	e7ef      	b.n	d6342 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6362:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6364:	791b      	ldrb	r3, [r3, #4]
   d6366:	2b01      	cmp	r3, #1
   d6368:	d8ed      	bhi.n	d6346 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d636a:	3410      	adds	r4, #16
   d636c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d636e:	42a7      	cmp	r7, r4
   d6370:	d9e9      	bls.n	d6346 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6372:	4630      	mov	r0, r6
   d6374:	f7ff f9d2 	bl	d571c <_ZN7FatFile13addDirClusterEv>
   d6378:	2800      	cmp	r0, #0
   d637a:	d1f2      	bne.n	d6362 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d637c:	e713      	b.n	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d637e:	4649      	mov	r1, r9
   d6380:	4630      	mov	r0, r6
   d6382:	f7ff feaf 	bl	d60e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6386:	2800      	cmp	r0, #0
   d6388:	f43f af0d 	beq.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d638c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6390:	4630      	mov	r0, r6
   d6392:	f7ff fb0d 	bl	d59b0 <_ZN7FatFile7seekSetEm>
   d6396:	2800      	cmp	r0, #0
   d6398:	f43f af05 	beq.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d639c:	1e7d      	subs	r5, r7, #1
   d639e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d63a0:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d63a2:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d63a6:	f04f 080f 	mov.w	r8, #15
   d63aa:	e041      	b.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d63ac:	2100      	movs	r1, #0
   d63ae:	4630      	mov	r0, r6
   d63b0:	f7ff fae1 	bl	d5976 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d63b4:	4607      	mov	r7, r0
   d63b6:	2800      	cmp	r0, #0
   d63b8:	f43f aef5 	beq.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d63bc:	68b2      	ldr	r2, [r6, #8]
   d63be:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d63c2:	42ac      	cmp	r4, r5
   d63c4:	f043 0301 	orr.w	r3, r3, #1
   d63c8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d63cc:	bf0c      	ite	eq
   d63ce:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d63d2:	4622      	movne	r2, r4
   d63d4:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d63d6:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d63da:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d63de:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d63e2:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d63e4:	f7ff fd0a 	bl	d5dfc <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d63e8:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d63ea:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d63ec:	f887 a01a 	strb.w	sl, [r7, #26]
   d63f0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d63f4:	f002 021f 	and.w	r2, r2, #31
   d63f8:	230d      	movs	r3, #13
   d63fa:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d63fc:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6400:	435a      	muls	r2, r3
   d6402:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6404:	9902      	ldr	r1, [sp, #8]
   d6406:	4291      	cmp	r1, r2
   d6408:	d915      	bls.n	d6436 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d640a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d640e:	2b04      	cmp	r3, #4
   d6410:	fa5f fc83 	uxtb.w	ip, r3
   d6414:	f103 0001 	add.w	r0, r3, #1
   d6418:	d813      	bhi.n	d6442 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d641a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d641e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6422:	280d      	cmp	r0, #13
   d6424:	f102 0201 	add.w	r2, r2, #1
   d6428:	4603      	mov	r3, r0
   d642a:	d1eb      	bne.n	d6404 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d642c:	3c01      	subs	r4, #1
   d642e:	b2e4      	uxtb	r4, r4
   d6430:	2c00      	cmp	r4, #0
   d6432:	d1bb      	bne.n	d63ac <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6434:	e00e      	b.n	d6454 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6436:	bf14      	ite	ne
   d6438:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d643c:	2100      	moveq	r1, #0
   d643e:	b289      	uxth	r1, r1
   d6440:	e7e5      	b.n	d640e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6442:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6446:	bf94      	ite	ls
   d6448:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d644c:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6450:	8099      	strh	r1, [r3, #4]
   d6452:	e7e6      	b.n	d6422 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6454:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6456:	4621      	mov	r1, r4
   d6458:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d645a:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d645e:	f7ff fa8a 	bl	d5976 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6462:	4607      	mov	r7, r0
   d6464:	2800      	cmp	r0, #0
   d6466:	f43f ae9e 	beq.w	d61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d646a:	2220      	movs	r2, #32
   d646c:	4621      	mov	r1, r4
   d646e:	f004 fea2 	bl	db1b6 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6472:	464b      	mov	r3, r9
   d6474:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6478:	603a      	str	r2, [r7, #0]
   d647a:	685a      	ldr	r2, [r3, #4]
   d647c:	607a      	str	r2, [r7, #4]
   d647e:	891a      	ldrh	r2, [r3, #8]
   d6480:	813a      	strh	r2, [r7, #8]
   d6482:	7a9b      	ldrb	r3, [r3, #10]
   d6484:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6486:	f899 3000 	ldrb.w	r3, [r9]
   d648a:	f003 0318 	and.w	r3, r3, #24
   d648e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6490:	4b18      	ldr	r3, [pc, #96]	; (d64f4 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6492:	681b      	ldr	r3, [r3, #0]
   d6494:	b12b      	cbz	r3, d64a2 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6496:	f107 010e 	add.w	r1, r7, #14
   d649a:	f107 0010 	add.w	r0, r7, #16
   d649e:	4798      	blx	r3
   d64a0:	e006      	b.n	d64b0 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d64a2:	2321      	movs	r3, #33	; 0x21
   d64a4:	743b      	strb	r3, [r7, #16]
   d64a6:	2328      	movs	r3, #40	; 0x28
   d64a8:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d64aa:	2308      	movs	r3, #8
   d64ac:	73bc      	strb	r4, [r7, #14]
   d64ae:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d64b0:	8a3b      	ldrh	r3, [r7, #16]
   d64b2:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d64b4:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d64b6:	89fb      	ldrh	r3, [r7, #14]
   d64b8:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d64ba:	68b2      	ldr	r2, [r6, #8]
   d64bc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d64c0:	f043 0301 	orr.w	r3, r3, #1
   d64c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d64c8:	9500      	str	r5, [sp, #0]
   d64ca:	465b      	mov	r3, fp
   d64cc:	4652      	mov	r2, sl
   d64ce:	4631      	mov	r1, r6
   d64d0:	9805      	ldr	r0, [sp, #20]
   d64d2:	f7ff fab6 	bl	d5a42 <_ZN7FatFile15openCachedEntryEPS_tih>
   d64d6:	e009      	b.n	d64ec <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d64d8:	2701      	movs	r7, #1
   d64da:	e677      	b.n	d61cc <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d64dc:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d64e0:	f1be 0f0d 	cmp.w	lr, #13
   d64e4:	f43f ae82 	beq.w	d61ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d64e8:	46d4      	mov	ip, sl
   d64ea:	e6c3      	b.n	d6274 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d64ec:	b009      	add	sp, #36	; 0x24
   d64ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64f2:	bf00      	nop
   d64f4:	2003e33c 	.word	0x2003e33c

000d64f8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d64f8:	f000 bde2 	b.w	d70c0 <HAL_Pin_Map>

000d64fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d64fc:	b570      	push	{r4, r5, r6, lr}
   d64fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6500:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6502:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6504:	b149      	cbz	r1, d651a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6506:	f004 fec4 	bl	db292 <strlen>
   d650a:	682b      	ldr	r3, [r5, #0]
   d650c:	4602      	mov	r2, r0
   d650e:	4621      	mov	r1, r4
   d6510:	4628      	mov	r0, r5
   d6512:	68db      	ldr	r3, [r3, #12]
    }
   d6514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6518:	4718      	bx	r3
    }
   d651a:	bd70      	pop	{r4, r5, r6, pc}

000d651c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d651c:	f000 bdd0 	b.w	d70c0 <HAL_Pin_Map>

000d6520 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6520:	f000 bdce 	b.w	d70c0 <HAL_Pin_Map>

000d6524 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6524:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d6526:	7803      	ldrb	r3, [r0, #0]
   d6528:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d652a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d652c:	d51e      	bpl.n	d656c <_ZN8FatCache4syncEv+0x48>
   d652e:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6530:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d6532:	f100 060c 	add.w	r6, r0, #12
   d6536:	4632      	mov	r2, r6
   d6538:	6818      	ldr	r0, [r3, #0]
   d653a:	f000 fb9b 	bl	d6c74 <_ZN9SdSpiCard10writeBlockEmPKh>
   d653e:	4605      	mov	r5, r0
   d6540:	b908      	cbnz	r0, d6546 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6542:	2500      	movs	r5, #0
   d6544:	e013      	b.n	d656e <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6546:	7823      	ldrb	r3, [r4, #0]
   d6548:	079b      	lsls	r3, r3, #30
   d654a:	d404      	bmi.n	d6556 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d654c:	7823      	ldrb	r3, [r4, #0]
   d654e:	f023 0301 	bic.w	r3, r3, #1
   d6552:	7023      	strb	r3, [r4, #0]
   d6554:	e00b      	b.n	d656e <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6556:	6863      	ldr	r3, [r4, #4]
   d6558:	68a0      	ldr	r0, [r4, #8]
   d655a:	6919      	ldr	r1, [r3, #16]
   d655c:	4632      	mov	r2, r6
   d655e:	4401      	add	r1, r0
   d6560:	6818      	ldr	r0, [r3, #0]
   d6562:	f000 fb87 	bl	d6c74 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6566:	2800      	cmp	r0, #0
   d6568:	d1f0      	bne.n	d654c <_ZN8FatCache4syncEv+0x28>
   d656a:	e7ea      	b.n	d6542 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d656c:	2501      	movs	r5, #1

fail:
  return false;
}
   d656e:	4628      	mov	r0, r5
   d6570:	bd70      	pop	{r4, r5, r6, pc}

000d6572 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6572:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6574:	6883      	ldr	r3, [r0, #8]
   d6576:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6578:	4604      	mov	r4, r0
   d657a:	460e      	mov	r6, r1
   d657c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d657e:	d014      	beq.n	d65aa <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6580:	f7ff ffd0 	bl	d6524 <_ZN8FatCache4syncEv>
   d6584:	b908      	cbnz	r0, d658a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d6586:	2000      	movs	r0, #0
   d6588:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d658a:	076b      	lsls	r3, r5, #29
   d658c:	d503      	bpl.n	d6596 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d658e:	2300      	movs	r3, #0
   d6590:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6592:	60a6      	str	r6, [r4, #8]
   d6594:	e009      	b.n	d65aa <_ZN8FatCache4readEmh+0x38>
   d6596:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6598:	f104 020c 	add.w	r2, r4, #12
   d659c:	4631      	mov	r1, r6
   d659e:	6818      	ldr	r0, [r3, #0]
   d65a0:	f000 fade 	bl	d6b60 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d65a4:	2800      	cmp	r0, #0
   d65a6:	d1f2      	bne.n	d658e <_ZN8FatCache4readEmh+0x1c>
   d65a8:	e7ed      	b.n	d6586 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d65aa:	7823      	ldrb	r3, [r4, #0]
   d65ac:	4620      	mov	r0, r4
   d65ae:	f005 0503 	and.w	r5, r5, #3
   d65b2:	431d      	orrs	r5, r3
   d65b4:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d65b8:	bd70      	pop	{r4, r5, r6, pc}

000d65ba <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d65ba:	7983      	ldrb	r3, [r0, #6]
   d65bc:	6940      	ldr	r0, [r0, #20]
   d65be:	3902      	subs	r1, #2
   d65c0:	4099      	lsls	r1, r3
}
   d65c2:	4408      	add	r0, r1
   d65c4:	4770      	bx	lr

000d65c6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d65c6:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d65c8:	b570      	push	{r4, r5, r6, lr}
   d65ca:	4605      	mov	r5, r0
   d65cc:	460c      	mov	r4, r1
   d65ce:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d65d0:	d802      	bhi.n	d65d8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d65d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d65d6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d65d8:	69c3      	ldr	r3, [r0, #28]
   d65da:	4299      	cmp	r1, r3
   d65dc:	d8f9      	bhi.n	d65d2 <_ZN9FatVolume6fatGetEmPm+0xc>
   d65de:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d65e0:	2b20      	cmp	r3, #32
   d65e2:	d110      	bne.n	d6606 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d65e4:	6981      	ldr	r1, [r0, #24]
   d65e6:	2202      	movs	r2, #2
   d65e8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d65ec:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d65f0:	f7ff ffbf 	bl	d6572 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d65f4:	2800      	cmp	r0, #0
   d65f6:	d0ec      	beq.n	d65d2 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d65f8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d65fc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6600:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6604:	e00f      	b.n	d6626 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d6606:	2b10      	cmp	r3, #16
   d6608:	d1e3      	bne.n	d65d2 <_ZN9FatVolume6fatGetEmPm+0xc>
   d660a:	6983      	ldr	r3, [r0, #24]
   d660c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6610:	2202      	movs	r2, #2
   d6612:	4419      	add	r1, r3
   d6614:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6618:	f7ff ffab 	bl	d6572 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d661c:	2800      	cmp	r0, #0
   d661e:	d0d8      	beq.n	d65d2 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6620:	b2e4      	uxtb	r4, r4
   d6622:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d6626:	69ea      	ldr	r2, [r5, #28]
   d6628:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d662a:	bf9a      	itte	ls
   d662c:	6033      	strls	r3, [r6, #0]
  return 1;
   d662e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6630:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6632:	bd70      	pop	{r4, r5, r6, pc}

000d6634 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6634:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6636:	b538      	push	{r3, r4, r5, lr}
   d6638:	460c      	mov	r4, r1
   d663a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d663c:	d801      	bhi.n	d6642 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d663e:	2000      	movs	r0, #0
   d6640:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6642:	69c3      	ldr	r3, [r0, #28]
   d6644:	4299      	cmp	r1, r3
   d6646:	d8fa      	bhi.n	d663e <_ZN9FatVolume6fatPutEmm+0xa>
   d6648:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d664a:	2b20      	cmp	r3, #32
   d664c:	d10e      	bne.n	d666c <_ZN9FatVolume6fatPutEmm+0x38>
   d664e:	6981      	ldr	r1, [r0, #24]
   d6650:	2203      	movs	r2, #3
   d6652:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6656:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d665a:	f7ff ff8a 	bl	d6572 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d665e:	2800      	cmp	r0, #0
   d6660:	d0ed      	beq.n	d663e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6662:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6666:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d666a:	e00f      	b.n	d668c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d666c:	2b10      	cmp	r3, #16
   d666e:	d1e6      	bne.n	d663e <_ZN9FatVolume6fatPutEmm+0xa>
   d6670:	6983      	ldr	r3, [r0, #24]
   d6672:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6676:	2203      	movs	r2, #3
   d6678:	4419      	add	r1, r3
   d667a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d667e:	f7ff ff78 	bl	d6572 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6682:	2800      	cmp	r0, #0
   d6684:	d0db      	beq.n	d663e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6686:	b2e4      	uxtb	r4, r4
   d6688:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d668c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d668e:	bd38      	pop	{r3, r4, r5, pc}

000d6690 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6694:	68c4      	ldr	r4, [r0, #12]
   d6696:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6698:	4605      	mov	r5, r0
   d669a:	460e      	mov	r6, r1
   d669c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d669e:	d207      	bcs.n	d66b0 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d66a0:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d66a2:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d66a4:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d66a6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d66a8:	429c      	cmp	r4, r3
   d66aa:	d903      	bls.n	d66b4 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d66ac:	b9cf      	cbnz	r7, d66e2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d66ae:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d66b0:	2701      	movs	r7, #1
   d66b2:	e7f7      	b.n	d66a4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d66b4:	42a6      	cmp	r6, r4
   d66b6:	d014      	beq.n	d66e2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d66b8:	aa01      	add	r2, sp, #4
   d66ba:	4621      	mov	r1, r4
   d66bc:	4628      	mov	r0, r5
   d66be:	f7ff ff82 	bl	d65c6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d66c2:	2800      	cmp	r0, #0
   d66c4:	db0d      	blt.n	d66e2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d66c6:	d0ed      	beq.n	d66a4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d66c8:	9b01      	ldr	r3, [sp, #4]
   d66ca:	2b00      	cmp	r3, #0
   d66cc:	d1ea      	bne.n	d66a4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d66ce:	b107      	cbz	r7, d66d2 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d66d0:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d66d2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d66d6:	4621      	mov	r1, r4
   d66d8:	4628      	mov	r0, r5
   d66da:	f7ff ffab 	bl	d6634 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d66de:	4607      	mov	r7, r0
   d66e0:	b908      	cbnz	r0, d66e6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d66e2:	2700      	movs	r7, #0
   d66e4:	e00b      	b.n	d66fe <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d66e6:	b916      	cbnz	r6, d66ee <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d66e8:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d66ec:	e007      	b.n	d66fe <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d66ee:	4622      	mov	r2, r4
   d66f0:	4631      	mov	r1, r6
   d66f2:	4628      	mov	r0, r5
   d66f4:	f7ff ff9e 	bl	d6634 <_ZN9FatVolume6fatPutEmm>
   d66f8:	2800      	cmp	r0, #0
   d66fa:	d1f5      	bne.n	d66e8 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d66fc:	e7f1      	b.n	d66e2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d66fe:	4638      	mov	r0, r7
   d6700:	b002      	add	sp, #8
   d6702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6706 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d6706:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6708:	4605      	mov	r5, r0
   d670a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d670c:	aa01      	add	r2, sp, #4
   d670e:	4621      	mov	r1, r4
   d6710:	4628      	mov	r0, r5
   d6712:	f7ff ff58 	bl	d65c6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6716:	1e06      	subs	r6, r0, #0
   d6718:	da01      	bge.n	d671e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d671a:	2000      	movs	r0, #0
   d671c:	e00f      	b.n	d673e <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d671e:	2200      	movs	r2, #0
   d6720:	4621      	mov	r1, r4
   d6722:	4628      	mov	r0, r5
   d6724:	f7ff ff86 	bl	d6634 <_ZN9FatVolume6fatPutEmm>
   d6728:	2800      	cmp	r0, #0
   d672a:	d0f6      	beq.n	d671a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d672c:	68eb      	ldr	r3, [r5, #12]
   d672e:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6730:	bf9c      	itt	ls
   d6732:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d6736:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6738:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d673a:	2e00      	cmp	r6, #0
   d673c:	d1e6      	bne.n	d670c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d673e:	b002      	add	sp, #8
   d6740:	bd70      	pop	{r4, r5, r6, pc}

000d6742 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6742:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6744:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6746:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6748:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d674a:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d674c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6750:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6752:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6754:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6756:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d675a:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d675c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6760:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6764:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6768:	b1a1      	cbz	r1, d6794 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d676a:	2904      	cmp	r1, #4
   d676c:	d85d      	bhi.n	d682a <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d676e:	4611      	mov	r1, r2
   d6770:	3024      	adds	r0, #36	; 0x24
   d6772:	f7ff fefe 	bl	d6572 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6776:	2800      	cmp	r0, #0
   d6778:	d057      	beq.n	d682a <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d677a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d677e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6782:	065b      	lsls	r3, r3, #25
   d6784:	d151      	bne.n	d682a <_ZN9FatVolume4initEh+0xe8>
   d6786:	351b      	adds	r5, #27
   d6788:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d678c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6790:	2d00      	cmp	r5, #0
   d6792:	d04a      	beq.n	d682a <_ZN9FatVolume4initEh+0xe8>
   d6794:	2200      	movs	r2, #0
   d6796:	4629      	mov	r1, r5
   d6798:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d679c:	f7ff fee9 	bl	d6572 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d67a0:	2800      	cmp	r0, #0
   d67a2:	d042      	beq.n	d682a <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d67a4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d67a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d67ac:	d13d      	bne.n	d682a <_ZN9FatVolume4initEh+0xe8>
   d67ae:	7c03      	ldrb	r3, [r0, #16]
   d67b0:	2b02      	cmp	r3, #2
   d67b2:	d13a      	bne.n	d682a <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d67b4:	89c3      	ldrh	r3, [r0, #14]
   d67b6:	2b00      	cmp	r3, #0
   d67b8:	d037      	beq.n	d682a <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d67ba:	7b41      	ldrb	r1, [r0, #13]
   d67bc:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d67be:	1e4b      	subs	r3, r1, #1
   d67c0:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d67c2:	2300      	movs	r3, #0
   d67c4:	71a3      	strb	r3, [r4, #6]
   d67c6:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d67c8:	2301      	movs	r3, #1
   d67ca:	428b      	cmp	r3, r1
   d67cc:	d007      	beq.n	d67de <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d67ce:	3e01      	subs	r6, #1
   d67d0:	d02b      	beq.n	d682a <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d67d2:	79a2      	ldrb	r2, [r4, #6]
   d67d4:	005b      	lsls	r3, r3, #1
   d67d6:	3201      	adds	r2, #1
   d67d8:	b2db      	uxtb	r3, r3
   d67da:	71a2      	strb	r2, [r4, #6]
   d67dc:	e7f5      	b.n	d67ca <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d67de:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d67e0:	b902      	cbnz	r2, d67e4 <_ZN9FatVolume4initEh+0xa2>
   d67e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d67e4:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d67e6:	89c6      	ldrh	r6, [r0, #14]
   d67e8:	442e      	add	r6, r5
   d67ea:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d67ec:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d67f0:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d67f2:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d67f6:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d67f8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d67fc:	0152      	lsls	r2, r2, #5
   d67fe:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d6802:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d6806:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6808:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d680c:	b903      	cbnz	r3, d6810 <_ZN9FatVolume4initEh+0xce>
   d680e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6810:	1aad      	subs	r5, r5, r2
   d6812:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d6814:	79a5      	ldrb	r5, [r4, #6]
   d6816:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d681a:	1c6b      	adds	r3, r5, #1
   d681c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d681e:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6822:	429d      	cmp	r5, r3
   d6824:	d803      	bhi.n	d682e <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d6826:	230c      	movs	r3, #12
   d6828:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d682a:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d682c:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d682e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6832:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d6834:	bf85      	ittet	hi
   d6836:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6838:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d683a:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d683c:	2320      	movhi	r3, #32
   d683e:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6840:	2001      	movs	r0, #1

fail:
  return false;
}
   d6842:	bd70      	pop	{r4, r5, r6, pc}

000d6844 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6844:	f000 bc3c 	b.w	d70c0 <HAL_Pin_Map>

000d6848 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6848:	f000 bc3a 	b.w	d70c0 <HAL_Pin_Map>

000d684c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d684c:	f000 bc38 	b.w	d70c0 <HAL_Pin_Map>

000d6850 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d6850:	f000 bc36 	b.w	d70c0 <HAL_Pin_Map>

000d6854 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6854:	f000 bc34 	b.w	d70c0 <HAL_Pin_Map>

000d6858 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6858:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d685a:	4c0e      	ldr	r4, [pc, #56]	; (d6894 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d685c:	460e      	mov	r6, r1
   d685e:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6860:	f000 fc0e 	bl	d7080 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6864:	6823      	ldr	r3, [r4, #0]
   d6866:	1ac0      	subs	r0, r0, r3
   d6868:	4b0b      	ldr	r3, [pc, #44]	; (d6898 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d686a:	4298      	cmp	r0, r3
   d686c:	d908      	bls.n	d6880 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d686e:	f000 fc0f 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6872:	4b0a      	ldr	r3, [pc, #40]	; (d689c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6874:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6876:	f000 fdb7 	bl	d73e8 <spark_process>
   d687a:	f000 fc01 	bl	d7080 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d687e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6880:	f000 fc06 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6884:	b280      	uxth	r0, r0
   d6886:	1b80      	subs	r0, r0, r6
}
   d6888:	42a8      	cmp	r0, r5
   d688a:	bfd4      	ite	le
   d688c:	2000      	movle	r0, #0
   d688e:	2001      	movgt	r0, #1
   d6890:	bd70      	pop	{r4, r5, r6, pc}
   d6892:	bf00      	nop
   d6894:	2003e340 	.word	0x2003e340
   d6898:	000186a0 	.word	0x000186a0
   d689c:	2003e708 	.word	0x2003e708

000d68a0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d68a0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d68a2:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d68a4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d68a6:	b94d      	cbnz	r5, d68bc <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d68a8:	6840      	ldr	r0, [r0, #4]
   d68aa:	f000 fa7d 	bl	d6da8 <_ZN14SdSpiAltDriver8activateEv>
   d68ae:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d68b0:	4629      	mov	r1, r5
   d68b2:	7d18      	ldrb	r0, [r3, #20]
   d68b4:	f003 fc75 	bl	da1a2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d68b8:	2301      	movs	r3, #1
   d68ba:	7223      	strb	r3, [r4, #8]
   d68bc:	bd38      	pop	{r3, r4, r5, pc}

000d68be <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d68be:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d68c0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d68c2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d68c4:	b16b      	cbz	r3, d68e2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d68c6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d68c8:	2101      	movs	r1, #1
   d68ca:	7d18      	ldrb	r0, [r3, #20]
   d68cc:	f003 fc69 	bl	da1a2 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d68d0:	21ff      	movs	r1, #255	; 0xff
   d68d2:	6860      	ldr	r0, [r4, #4]
   d68d4:	f000 fa9a 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d68d8:	6860      	ldr	r0, [r4, #4]
   d68da:	f000 fa79 	bl	d6dd0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d68de:	2300      	movs	r3, #0
   d68e0:	7223      	strb	r3, [r4, #8]
   d68e2:	bd10      	pop	{r4, pc}

000d68e4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d68e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68e6:	4604      	mov	r4, r0
   d68e8:	460d      	mov	r5, r1
   d68ea:	4616      	mov	r6, r2
   d68ec:	f000 fbd0 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d68f0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d68f2:	6860      	ldr	r0, [r4, #4]
   d68f4:	f000 fa6f 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d68f8:	28ff      	cmp	r0, #255	; 0xff
   d68fa:	7260      	strb	r0, [r4, #9]
   d68fc:	d109      	bne.n	d6912 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d68fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6902:	4639      	mov	r1, r7
   d6904:	4620      	mov	r0, r4
   d6906:	f7ff ffa7 	bl	d6858 <_ZN9SdSpiCard10isTimedOutEtt>
   d690a:	2800      	cmp	r0, #0
   d690c:	d0f1      	beq.n	d68f2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d690e:	2355      	movs	r3, #85	; 0x55
   d6910:	e00b      	b.n	d692a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d6912:	28fe      	cmp	r0, #254	; 0xfe
   d6914:	d001      	beq.n	d691a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d6916:	2350      	movs	r3, #80	; 0x50
   d6918:	e007      	b.n	d692a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d691a:	4632      	mov	r2, r6
   d691c:	4629      	mov	r1, r5
   d691e:	6860      	ldr	r0, [r4, #4]
   d6920:	f000 fa5e 	bl	d6de0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6924:	7260      	strb	r0, [r4, #9]
   d6926:	b130      	cbz	r0, d6936 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6928:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d692a:	4620      	mov	r0, r4
   d692c:	7023      	strb	r3, [r4, #0]
   d692e:	f7ff ffc6 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6932:	2000      	movs	r0, #0
}
   d6934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6936:	6860      	ldr	r0, [r4, #4]
   d6938:	f000 fa4d 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d693c:	6860      	ldr	r0, [r4, #4]
   d693e:	f000 fa4a 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d6942:	2001      	movs	r0, #1
   d6944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6946 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6946:	b570      	push	{r4, r5, r6, lr}
   d6948:	4604      	mov	r4, r0
   d694a:	460e      	mov	r6, r1
   d694c:	f000 fba0 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
   d6950:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6952:	4632      	mov	r2, r6
   d6954:	4629      	mov	r1, r5
   d6956:	4620      	mov	r0, r4
   d6958:	f7ff ff7e 	bl	d6858 <_ZN9SdSpiCard10isTimedOutEtt>
   d695c:	b930      	cbnz	r0, d696c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d695e:	6860      	ldr	r0, [r4, #4]
   d6960:	f000 fa39 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6964:	28ff      	cmp	r0, #255	; 0xff
   d6966:	d1f4      	bne.n	d6952 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6968:	2001      	movs	r0, #1
   d696a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d696c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d696e:	bd70      	pop	{r4, r5, r6, pc}

000d6970 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6972:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6974:	9201      	str	r2, [sp, #4]
   d6976:	4604      	mov	r4, r0
   d6978:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d697a:	b90b      	cbnz	r3, d6980 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d697c:	f7ff ff90 	bl	d68a0 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6980:	b125      	cbz	r5, d698c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6982:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6986:	4620      	mov	r0, r4
   d6988:	f7ff ffdd 	bl	d6946 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d698c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6990:	6860      	ldr	r0, [r4, #4]
   d6992:	f000 fa3b 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
   d6996:	f10d 0607 	add.w	r6, sp, #7
   d699a:	f10d 0703 	add.w	r7, sp, #3
   d699e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d69a2:	6860      	ldr	r0, [r4, #4]
   d69a4:	f000 fa32 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d69a8:	42be      	cmp	r6, r7
   d69aa:	d1f8      	bne.n	d699e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d69ac:	2d00      	cmp	r5, #0
   d69ae:	bf0c      	ite	eq
   d69b0:	2195      	moveq	r1, #149	; 0x95
   d69b2:	2187      	movne	r1, #135	; 0x87
   d69b4:	6860      	ldr	r0, [r4, #4]
   d69b6:	f000 fa29 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d69ba:	6860      	ldr	r0, [r4, #4]
   d69bc:	f000 fa0b 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d69c0:	250b      	movs	r5, #11
   d69c2:	6860      	ldr	r0, [r4, #4]
   d69c4:	f000 fa07 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d69c8:	0603      	lsls	r3, r0, #24
   d69ca:	7260      	strb	r0, [r4, #9]
   d69cc:	d503      	bpl.n	d69d6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d69ce:	3d01      	subs	r5, #1
   d69d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d69d4:	d1f5      	bne.n	d69c2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d69d6:	b003      	add	sp, #12
   d69d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69da <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d69da:	b570      	push	{r4, r5, r6, lr}
   d69dc:	4604      	mov	r4, r0
   d69de:	460d      	mov	r5, r1
   d69e0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d69e2:	2137      	movs	r1, #55	; 0x37
   d69e4:	2200      	movs	r2, #0
   d69e6:	f7ff ffc3 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d69ea:	4632      	mov	r2, r6
   d69ec:	4629      	mov	r1, r5
   d69ee:	4620      	mov	r0, r4
  }
   d69f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d69f4:	f7ff bfbc 	b.w	d6970 <_ZN9SdSpiCard11cardCommandEhm>

000d69f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d69f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d69fc:	2500      	movs	r5, #0
   d69fe:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6a00:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6a02:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6a04:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6a06:	4604      	mov	r4, r0
   d6a08:	4690      	mov	r8, r2
   d6a0a:	461e      	mov	r6, r3
   d6a0c:	f000 fb40 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6a10:	4641      	mov	r1, r8
   d6a12:	4607      	mov	r7, r0
   d6a14:	6860      	ldr	r0, [r4, #4]
   d6a16:	f000 f9cb 	bl	d6db0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6a1a:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6a1c:	4a4f      	ldr	r2, [pc, #316]	; (d6b5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6a1e:	721d      	strb	r5, [r3, #8]
   d6a20:	f04f 0801 	mov.w	r8, #1
   d6a24:	60da      	str	r2, [r3, #12]
   d6a26:	745d      	strb	r5, [r3, #17]
   d6a28:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	f7ff ff37 	bl	d68a0 <_ZN9SdSpiCard8spiStartEv>
   d6a32:	6863      	ldr	r3, [r4, #4]
   d6a34:	4641      	mov	r1, r8
   d6a36:	7d18      	ldrb	r0, [r3, #20]
   d6a38:	f003 fbb3 	bl	da1a2 <digitalWrite>
   d6a3c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6a3e:	21ff      	movs	r1, #255	; 0xff
   d6a40:	6860      	ldr	r0, [r4, #4]
   d6a42:	3d01      	subs	r5, #1
   d6a44:	f000 f9e2 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6a48:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6a4c:	d1f7      	bne.n	d6a3e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6a4e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6a50:	4629      	mov	r1, r5
   d6a52:	7d18      	ldrb	r0, [r3, #20]
   d6a54:	f003 fba5 	bl	da1a2 <digitalWrite>
   d6a58:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6a5a:	2200      	movs	r2, #0
   d6a5c:	4611      	mov	r1, r2
   d6a5e:	4620      	mov	r0, r4
   d6a60:	f7ff ff86 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6a64:	2801      	cmp	r0, #1
   d6a66:	4680      	mov	r8, r0
   d6a68:	d012      	beq.n	d6a90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6a6a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6a6c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6a70:	d101      	bne.n	d6a76 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6a72:	2320      	movs	r3, #32
   d6a74:	e057      	b.n	d6b26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6a76:	21fd      	movs	r1, #253	; 0xfd
   d6a78:	6860      	ldr	r0, [r4, #4]
   d6a7a:	f000 f9c7 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
   d6a7e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6a82:	6860      	ldr	r0, [r4, #4]
   d6a84:	f000 f9a7 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6a88:	f1b8 0801 	subs.w	r8, r8, #1
   d6a8c:	d1f9      	bne.n	d6a82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6a8e:	e7e4      	b.n	d6a5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6a90:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6a94:	2108      	movs	r1, #8
   d6a96:	4620      	mov	r0, r4
   d6a98:	f7ff ff6a 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6a9c:	2805      	cmp	r0, #5
   d6a9e:	d102      	bne.n	d6aa6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6aa0:	f884 800a 	strb.w	r8, [r4, #10]
   d6aa4:	e00f      	b.n	d6ac6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d6aa6:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6aa8:	6860      	ldr	r0, [r4, #4]
   d6aaa:	f000 f994 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d6aae:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6ab0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6ab4:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6ab6:	d1f7      	bne.n	d6aa8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6ab8:	28aa      	cmp	r0, #170	; 0xaa
   d6aba:	d102      	bne.n	d6ac2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6abc:	2302      	movs	r3, #2
   d6abe:	72a3      	strb	r3, [r4, #10]
   d6ac0:	e001      	b.n	d6ac6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6ac2:	2325      	movs	r3, #37	; 0x25
   d6ac4:	e02f      	b.n	d6b26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6ac6:	7aa3      	ldrb	r3, [r4, #10]
   d6ac8:	2b02      	cmp	r3, #2
   d6aca:	bf0c      	ite	eq
   d6acc:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6ad0:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6ad2:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6ad4:	462a      	mov	r2, r5
   d6ad6:	2129      	movs	r1, #41	; 0x29
   d6ad8:	4620      	mov	r0, r4
   d6ada:	f7ff ff7e 	bl	d69da <_ZN9SdSpiCard8cardAcmdEhm>
   d6ade:	4602      	mov	r2, r0
   d6ae0:	b148      	cbz	r0, d6af6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6ae2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6ae6:	4639      	mov	r1, r7
   d6ae8:	4620      	mov	r0, r4
   d6aea:	f7ff feb5 	bl	d6858 <_ZN9SdSpiCard10isTimedOutEtt>
   d6aee:	2800      	cmp	r0, #0
   d6af0:	d0f0      	beq.n	d6ad4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d6af2:	2343      	movs	r3, #67	; 0x43
   d6af4:	e017      	b.n	d6b26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6af6:	7aa3      	ldrb	r3, [r4, #10]
   d6af8:	2b02      	cmp	r3, #2
   d6afa:	d00e      	beq.n	d6b1a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6afc:	4620      	mov	r0, r4
   d6afe:	f7ff fede 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6b02:	6863      	ldr	r3, [r4, #4]
   d6b04:	68b0      	ldr	r0, [r6, #8]
   d6b06:	7934      	ldrb	r4, [r6, #4]
   d6b08:	7b31      	ldrb	r1, [r6, #12]
   d6b0a:	7b72      	ldrb	r2, [r6, #13]
   d6b0c:	745a      	strb	r2, [r3, #17]
   d6b0e:	60d8      	str	r0, [r3, #12]
   d6b10:	721c      	strb	r4, [r3, #8]
   d6b12:	7419      	strb	r1, [r3, #16]
  return true;
   d6b14:	2001      	movs	r0, #1
   d6b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6b1a:	213a      	movs	r1, #58	; 0x3a
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	f7ff ff27 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6b22:	b138      	cbz	r0, d6b34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6b24:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6b26:	4620      	mov	r0, r4
   d6b28:	7023      	strb	r3, [r4, #0]
   d6b2a:	f7ff fec8 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6b2e:	2000      	movs	r0, #0
}
   d6b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6b34:	6860      	ldr	r0, [r4, #4]
   d6b36:	f000 f94e 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6b3a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6b3e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6b40:	bf04      	itt	eq
   d6b42:	2303      	moveq	r3, #3
   d6b44:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6b46:	6860      	ldr	r0, [r4, #4]
   d6b48:	f000 f945 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d6b4c:	6860      	ldr	r0, [r4, #4]
   d6b4e:	f000 f942 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d6b52:	6860      	ldr	r0, [r4, #4]
   d6b54:	f000 f93f 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d6b58:	e7d0      	b.n	d6afc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6b5a:	bf00      	nop
   d6b5c:	0003d090 	.word	0x0003d090

000d6b60 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6b60:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6b62:	7a83      	ldrb	r3, [r0, #10]
   d6b64:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6b66:	bf18      	it	ne
   d6b68:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6b6a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6b6c:	460a      	mov	r2, r1
   d6b6e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6b70:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6b72:	f7ff fefd 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6b76:	b110      	cbz	r0, d6b7e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6b78:	2330      	movs	r3, #48	; 0x30
   d6b7a:	7023      	strb	r3, [r4, #0]
   d6b7c:	e00b      	b.n	d6b96 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6b7e:	4629      	mov	r1, r5
   d6b80:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6b84:	4620      	mov	r0, r4
   d6b86:	f7ff fead 	bl	d68e4 <_ZN9SdSpiCard8readDataEPhj>
   d6b8a:	4605      	mov	r5, r0
   d6b8c:	b118      	cbz	r0, d6b96 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6b8e:	4620      	mov	r0, r4
   d6b90:	f7ff fe95 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6b94:	e003      	b.n	d6b9e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6b96:	4620      	mov	r0, r4
   d6b98:	f7ff fe91 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6b9c:	2500      	movs	r5, #0
}
   d6b9e:	4628      	mov	r0, r5
   d6ba0:	bd38      	pop	{r3, r4, r5, pc}

000d6ba2 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6ba2:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6ba4:	7a83      	ldrb	r3, [r0, #10]
   d6ba6:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6ba8:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6baa:	bf18      	it	ne
   d6bac:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6bae:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6bb0:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6bb2:	f7ff fedd 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6bb6:	b130      	cbz	r0, d6bc6 <_ZN9SdSpiCard9readStartEm+0x24>
   d6bb8:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6bba:	4620      	mov	r0, r4
   d6bbc:	7023      	strb	r3, [r4, #0]
   d6bbe:	f7ff fe7e 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6bc2:	2000      	movs	r0, #0
   d6bc4:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6bc6:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6bc8:	bd10      	pop	{r4, pc}

000d6bca <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6bca:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6bcc:	2200      	movs	r2, #0
   d6bce:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6bd0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6bd2:	f7ff fecd 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6bd6:	b130      	cbz	r0, d6be6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6bd8:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6bda:	4620      	mov	r0, r4
   d6bdc:	7023      	strb	r3, [r4, #0]
   d6bde:	f7ff fe6e 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6be2:	2000      	movs	r0, #0
   d6be4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6be6:	4620      	mov	r0, r4
   d6be8:	f7ff fe69 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6bec:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6bee:	bd10      	pop	{r4, pc}

000d6bf0 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bf2:	4605      	mov	r5, r0
   d6bf4:	4616      	mov	r6, r2
   d6bf6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6bf8:	f7ff ffd3 	bl	d6ba2 <_ZN9SdSpiCard9readStartEm>
   d6bfc:	b198      	cbz	r0, d6c26 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6bfe:	2400      	movs	r4, #0
   d6c00:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6c02:	429f      	cmp	r7, r3
   d6c04:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6c08:	d908      	bls.n	d6c1c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6c0e:	4628      	mov	r0, r5
   d6c10:	f7ff fe68 	bl	d68e4 <_ZN9SdSpiCard8readDataEPhj>
   d6c14:	3401      	adds	r4, #1
   d6c16:	2800      	cmp	r0, #0
   d6c18:	d1f2      	bne.n	d6c00 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6c1a:	e004      	b.n	d6c26 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6c1c:	4628      	mov	r0, r5
}
   d6c1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6c22:	f7ff bfd2 	b.w	d6bca <_ZN9SdSpiCard8readStopEv>
}
   d6c26:	2000      	movs	r0, #0
   d6c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c2a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6c2a:	b538      	push	{r3, r4, r5, lr}
   d6c2c:	4604      	mov	r4, r0
   d6c2e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6c30:	6840      	ldr	r0, [r0, #4]
   d6c32:	f000 f8eb 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6c36:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6c3a:	4629      	mov	r1, r5
   d6c3c:	6860      	ldr	r0, [r4, #4]
   d6c3e:	f000 f8e9 	bl	d6e14 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6c42:	21ff      	movs	r1, #255	; 0xff
   d6c44:	6860      	ldr	r0, [r4, #4]
   d6c46:	f000 f8e1 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
   d6c4a:	21ff      	movs	r1, #255	; 0xff
   d6c4c:	6860      	ldr	r0, [r4, #4]
   d6c4e:	f000 f8dd 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6c52:	6860      	ldr	r0, [r4, #4]
   d6c54:	f000 f8bf 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6c58:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6c5a:	f000 001f 	and.w	r0, r0, #31
   d6c5e:	2805      	cmp	r0, #5
   d6c60:	d006      	beq.n	d6c70 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6c62:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6c64:	4620      	mov	r0, r4
   d6c66:	7023      	strb	r3, [r4, #0]
   d6c68:	f7ff fe29 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6c6c:	2000      	movs	r0, #0
   d6c6e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6c70:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6c72:	bd38      	pop	{r3, r4, r5, pc}

000d6c74 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6c74:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6c76:	7a83      	ldrb	r3, [r0, #10]
   d6c78:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6c7a:	bf18      	it	ne
   d6c7c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6c7e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6c80:	460a      	mov	r2, r1
   d6c82:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6c84:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6c86:	f7ff fe73 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6c8a:	4606      	mov	r6, r0
   d6c8c:	b108      	cbz	r0, d6c92 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6c8e:	2332      	movs	r3, #50	; 0x32
   d6c90:	e01d      	b.n	d6cce <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6c92:	462a      	mov	r2, r5
   d6c94:	21fe      	movs	r1, #254	; 0xfe
   d6c96:	4620      	mov	r0, r4
   d6c98:	f7ff ffc7 	bl	d6c2a <_ZN9SdSpiCard9writeDataEhPKh>
   d6c9c:	b1c0      	cbz	r0, d6cd0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6c9e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	f7ff fe4f 	bl	d6946 <_ZN9SdSpiCard11waitNotBusyEt>
   d6ca8:	4605      	mov	r5, r0
   d6caa:	b908      	cbnz	r0, d6cb0 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6cac:	235a      	movs	r3, #90	; 0x5a
   d6cae:	e00e      	b.n	d6cce <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6cb0:	4632      	mov	r2, r6
   d6cb2:	210d      	movs	r1, #13
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	f7ff fe5b 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6cba:	b938      	cbnz	r0, d6ccc <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6cbc:	6860      	ldr	r0, [r4, #4]
   d6cbe:	f000 f88a 	bl	d6dd6 <_ZN14SdSpiAltDriver7receiveEv>
   d6cc2:	b918      	cbnz	r0, d6ccc <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff fdfa 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6cca:	e005      	b.n	d6cd8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6ccc:	2329      	movs	r3, #41	; 0x29
   d6cce:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	f7ff fdf4 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6cd6:	2500      	movs	r5, #0
}
   d6cd8:	4628      	mov	r0, r5
   d6cda:	bd70      	pop	{r4, r5, r6, pc}

000d6cdc <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6cdc:	b538      	push	{r3, r4, r5, lr}
   d6cde:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6ce0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6ce4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6ce6:	f7ff fe2e 	bl	d6946 <_ZN9SdSpiCard11waitNotBusyEt>
   d6cea:	b910      	cbnz	r0, d6cf2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6cec:	235b      	movs	r3, #91	; 0x5b
   d6cee:	7023      	strb	r3, [r4, #0]
   d6cf0:	e005      	b.n	d6cfe <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6cf2:	462a      	mov	r2, r5
   d6cf4:	21fc      	movs	r1, #252	; 0xfc
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	f7ff ff97 	bl	d6c2a <_ZN9SdSpiCard9writeDataEhPKh>
   d6cfc:	b918      	cbnz	r0, d6d06 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6cfe:	4620      	mov	r0, r4
   d6d00:	f7ff fddd 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6d04:	2000      	movs	r0, #0
}
   d6d06:	bd38      	pop	{r3, r4, r5, pc}

000d6d08 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6d08:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6d0a:	7a83      	ldrb	r3, [r0, #10]
   d6d0c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6d0e:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6d10:	bf18      	it	ne
   d6d12:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6d14:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6d16:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6d18:	f7ff fe2a 	bl	d6970 <_ZN9SdSpiCard11cardCommandEhm>
   d6d1c:	b130      	cbz	r0, d6d2c <_ZN9SdSpiCard10writeStartEm+0x24>
   d6d1e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6d20:	4620      	mov	r0, r4
   d6d22:	7023      	strb	r3, [r4, #0]
   d6d24:	f7ff fdcb 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6d28:	2000      	movs	r0, #0
   d6d2a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6d2c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6d2e:	bd10      	pop	{r4, pc}

000d6d30 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6d30:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6d32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6d36:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6d38:	f7ff fe05 	bl	d6946 <_ZN9SdSpiCard11waitNotBusyEt>
   d6d3c:	4605      	mov	r5, r0
   d6d3e:	b120      	cbz	r0, d6d4a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6d40:	21fd      	movs	r1, #253	; 0xfd
   d6d42:	6860      	ldr	r0, [r4, #4]
   d6d44:	f000 f862 	bl	d6e0c <_ZN14SdSpiAltDriver4sendEh>
   d6d48:	e001      	b.n	d6d4e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6d4a:	2356      	movs	r3, #86	; 0x56
   d6d4c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6d4e:	4620      	mov	r0, r4
   d6d50:	f7ff fdb5 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6d54:	4628      	mov	r0, r5
   d6d56:	bd38      	pop	{r3, r4, r5, pc}

000d6d58 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d5a:	4605      	mov	r5, r0
   d6d5c:	4616      	mov	r6, r2
   d6d5e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6d60:	f7ff ffd2 	bl	d6d08 <_ZN9SdSpiCard10writeStartEm>
   d6d64:	b170      	cbz	r0, d6d84 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6d66:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6d68:	42bc      	cmp	r4, r7
   d6d6a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6d6e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6d70:	d004      	beq.n	d6d7c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6d72:	f7ff ffb3 	bl	d6cdc <_ZN9SdSpiCard9writeDataEPKh>
   d6d76:	b128      	cbz	r0, d6d84 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6d78:	3401      	adds	r4, #1
   d6d7a:	e7f5      	b.n	d6d68 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6d7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6d80:	f7ff bfd6 	b.w	d6d30 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6d84:	4628      	mov	r0, r5
   d6d86:	f7ff fd9a 	bl	d68be <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6d8a:	2000      	movs	r0, #0
   d6d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d8e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6d8e:	f000 b997 	b.w	d70c0 <HAL_Pin_Map>

000d6d92 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6d92:	f000 b995 	b.w	d70c0 <HAL_Pin_Map>

000d6d96 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6d96:	f000 b993 	b.w	d70c0 <HAL_Pin_Map>
	...

000d6d9c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6d9c:	4b01      	ldr	r3, [pc, #4]	; (d6da4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6d9e:	2201      	movs	r2, #1
   d6da0:	701a      	strb	r2, [r3, #0]
   d6da2:	4770      	bx	lr
   d6da4:	2003e344 	.word	0x2003e344

000d6da8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6da8:	1d01      	adds	r1, r0, #4
   d6daa:	6800      	ldr	r0, [r0, #0]
   d6dac:	f002 bde2 	b.w	d9974 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6db0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6db0:	b510      	push	{r4, lr}
   d6db2:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6db4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6db6:	6800      	ldr	r0, [r0, #0]
   d6db8:	f002 fdb2 	bl	d9920 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6dbc:	7d20      	ldrb	r0, [r4, #20]
   d6dbe:	2101      	movs	r1, #1
   d6dc0:	f003 f9de 	bl	da180 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6dc4:	7d20      	ldrb	r0, [r4, #20]
   d6dc6:	2101      	movs	r1, #1
}
   d6dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6dcc:	f003 b9e9 	b.w	da1a2 <digitalWrite>

000d6dd0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6dd0:	6800      	ldr	r0, [r0, #0]
   d6dd2:	f002 bdb6 	b.w	d9942 <_ZN8SPIClass14endTransactionEv>

000d6dd6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6dd6:	21ff      	movs	r1, #255	; 0xff
   d6dd8:	6800      	ldr	r0, [r0, #0]
   d6dda:	f002 be3b 	b.w	d9a54 <_ZN8SPIClass8transferEh>
	...

000d6de0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6de2:	4b08      	ldr	r3, [pc, #32]	; (d6e04 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6de4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6de6:	2500      	movs	r5, #0
   d6de8:	4c07      	ldr	r4, [pc, #28]	; (d6e08 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6dea:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6dec:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6dee:	4613      	mov	r3, r2
   d6df0:	460a      	mov	r2, r1
   d6df2:	4629      	mov	r1, r5
   d6df4:	f002 fe34 	bl	d9a60 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6df8:	7823      	ldrb	r3, [r4, #0]
   d6dfa:	2b00      	cmp	r3, #0
   d6dfc:	d0fc      	beq.n	d6df8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6dfe:	2000      	movs	r0, #0
   d6e00:	b003      	add	sp, #12
   d6e02:	bd30      	pop	{r4, r5, pc}
   d6e04:	000d6d9d 	.word	0x000d6d9d
   d6e08:	2003e344 	.word	0x2003e344

000d6e0c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6e0c:	6800      	ldr	r0, [r0, #0]
   d6e0e:	f002 be21 	b.w	d9a54 <_ZN8SPIClass8transferEh>
	...

000d6e14 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6e16:	4b07      	ldr	r3, [pc, #28]	; (d6e34 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6e18:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6e1a:	2500      	movs	r5, #0
   d6e1c:	4c06      	ldr	r4, [pc, #24]	; (d6e38 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6e1e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6e20:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6e22:	4613      	mov	r3, r2
   d6e24:	462a      	mov	r2, r5
   d6e26:	f002 fe1b 	bl	d9a60 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6e2a:	7823      	ldrb	r3, [r4, #0]
   d6e2c:	2b00      	cmp	r3, #0
   d6e2e:	d0fc      	beq.n	d6e2a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6e30:	b003      	add	sp, #12
   d6e32:	bd30      	pop	{r4, r5, pc}
   d6e34:	000d6d9d 	.word	0x000d6d9d
   d6e38:	2003e344 	.word	0x2003e344

000d6e3c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6e3c:	f000 b940 	b.w	d70c0 <HAL_Pin_Map>

000d6e40 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6e40:	f000 b93e 	b.w	d70c0 <HAL_Pin_Map>

000d6e44 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6e44:	f000 b93c 	b.w	d70c0 <HAL_Pin_Map>

000d6e48 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <hal_ble_stack_init+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	689b      	ldr	r3, [r3, #8]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030278 	.word	0x00030278

000d6e58 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <hal_ble_gap_start_scan+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030278 	.word	0x00030278

000d6e68 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b03      	ldr	r3, [pc, #12]	; (d6e78 <hal_ble_gap_stop_scan+0x10>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d6e72:	9301      	str	r3, [sp, #4]
   d6e74:	bd08      	pop	{r3, pc}
   d6e76:	0000      	.short	0x0000
   d6e78:	00030278 	.word	0x00030278

000d6e7c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b03      	ldr	r3, [pc, #12]	; (d6e8c <hal_ble_gap_disconnect+0x10>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6e86:	9301      	str	r3, [sp, #4]
   d6e88:	bd08      	pop	{r3, pc}
   d6e8a:	0000      	.short	0x0000
   d6e8c:	00030278 	.word	0x00030278

000d6e90 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b03      	ldr	r3, [pc, #12]	; (d6ea0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d6e9a:	9301      	str	r3, [sp, #4]
   d6e9c:	bd08      	pop	{r3, pc}
   d6e9e:	0000      	.short	0x0000
   d6ea0:	00030278 	.word	0x00030278

000d6ea4 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	4b03      	ldr	r3, [pc, #12]	; (d6eb4 <hal_ble_gatt_client_discover_all_services+0x10>)
   d6ea8:	681b      	ldr	r3, [r3, #0]
   d6eaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d6eae:	9301      	str	r3, [sp, #4]
   d6eb0:	bd08      	pop	{r3, pc}
   d6eb2:	0000      	.short	0x0000
   d6eb4:	00030278 	.word	0x00030278

000d6eb8 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b03      	ldr	r3, [pc, #12]	; (d6ec8 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d6ec2:	9301      	str	r3, [sp, #4]
   d6ec4:	bd08      	pop	{r3, pc}
   d6ec6:	0000      	.short	0x0000
   d6ec8:	00030278 	.word	0x00030278

000d6ecc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b03      	ldr	r3, [pc, #12]	; (d6edc <hal_ble_gatt_client_write_with_response+0x10>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d6ed6:	9301      	str	r3, [sp, #4]
   d6ed8:	bd08      	pop	{r3, pc}
   d6eda:	0000      	.short	0x0000
   d6edc:	00030278 	.word	0x00030278

000d6ee0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b03      	ldr	r3, [pc, #12]	; (d6ef0 <hal_ble_gatt_client_write_without_response+0x10>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d6eea:	9301      	str	r3, [sp, #4]
   d6eec:	bd08      	pop	{r3, pc}
   d6eee:	0000      	.short	0x0000
   d6ef0:	00030278 	.word	0x00030278

000d6ef4 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d6ef4:	b508      	push	{r3, lr}
   d6ef6:	4b03      	ldr	r3, [pc, #12]	; (d6f04 <hal_ble_gatt_client_read+0x10>)
   d6ef8:	681b      	ldr	r3, [r3, #0]
   d6efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d6efe:	9301      	str	r3, [sp, #4]
   d6f00:	bd08      	pop	{r3, pc}
   d6f02:	0000      	.short	0x0000
   d6f04:	00030278 	.word	0x00030278

000d6f08 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b03      	ldr	r3, [pc, #12]	; (d6f18 <hal_ble_gap_connect+0x10>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d6f12:	9301      	str	r3, [sp, #4]
   d6f14:	bd08      	pop	{r3, pc}
   d6f16:	0000      	.short	0x0000
   d6f18:	00030278 	.word	0x00030278

000d6f1c <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b03      	ldr	r3, [pc, #12]	; (d6f2c <hal_ble_gap_get_connection_info+0x10>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d6f26:	9301      	str	r3, [sp, #4]
   d6f28:	bd08      	pop	{r3, pc}
   d6f2a:	0000      	.short	0x0000
   d6f2c:	00030278 	.word	0x00030278

000d6f30 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b03      	ldr	r3, [pc, #12]	; (d6f40 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d6f3a:	9301      	str	r3, [sp, #4]
   d6f3c:	bd08      	pop	{r3, pc}
   d6f3e:	0000      	.short	0x0000
   d6f40:	00030278 	.word	0x00030278

000d6f44 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d6f44:	b508      	push	{r3, lr}
   d6f46:	4b03      	ldr	r3, [pc, #12]	; (d6f54 <hal_ble_gatt_client_configure_cccd+0x10>)
   d6f48:	681b      	ldr	r3, [r3, #0]
   d6f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d6f4e:	9301      	str	r3, [sp, #4]
   d6f50:	bd08      	pop	{r3, pc}
   d6f52:	0000      	.short	0x0000
   d6f54:	00030278 	.word	0x00030278

000d6f58 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	4b03      	ldr	r3, [pc, #12]	; (d6f68 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d6f5c:	681b      	ldr	r3, [r3, #0]
   d6f5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d6f62:	9301      	str	r3, [sp, #4]
   d6f64:	bd08      	pop	{r3, pc}
   d6f66:	0000      	.short	0x0000
   d6f68:	00030278 	.word	0x00030278

000d6f6c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b03      	ldr	r3, [pc, #12]	; (d6f7c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d6f76:	9301      	str	r3, [sp, #4]
   d6f78:	bd08      	pop	{r3, pc}
   d6f7a:	0000      	.short	0x0000
   d6f7c:	00030278 	.word	0x00030278

000d6f80 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <os_thread_is_current+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	689b      	ldr	r3, [r3, #8]
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	00030248 	.word	0x00030248

000d6f90 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <os_thread_yield+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	68db      	ldr	r3, [r3, #12]
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	00030248 	.word	0x00030248

000d6fa0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <os_thread_join+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	691b      	ldr	r3, [r3, #16]
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	00030248 	.word	0x00030248

000d6fb0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <os_thread_cleanup+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	695b      	ldr	r3, [r3, #20]
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	00030248 	.word	0x00030248

000d6fc0 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <os_thread_scheduling+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	69db      	ldr	r3, [r3, #28]
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	00030248 	.word	0x00030248

000d6fd0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <os_timer_create+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	6a1b      	ldr	r3, [r3, #32]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	00030248 	.word	0x00030248

000d6fe0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <os_timer_destroy+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	00030248 	.word	0x00030248

000d6ff0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <os_timer_get_id+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	00030248 	.word	0x00030248

000d7000 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <os_timer_change+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	00030248 	.word	0x00030248

000d7010 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <os_mutex_recursive_create+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	00030248 	.word	0x00030248

000d7020 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7020:	b508      	push	{r3, lr}
   d7022:	4b02      	ldr	r3, [pc, #8]	; (d702c <os_mutex_recursive_destroy+0xc>)
   d7024:	681b      	ldr	r3, [r3, #0]
   d7026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7028:	9301      	str	r3, [sp, #4]
   d702a:	bd08      	pop	{r3, pc}
   d702c:	00030248 	.word	0x00030248

000d7030 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7030:	b508      	push	{r3, lr}
   d7032:	4b02      	ldr	r3, [pc, #8]	; (d703c <os_mutex_recursive_lock+0xc>)
   d7034:	681b      	ldr	r3, [r3, #0]
   d7036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7038:	9301      	str	r3, [sp, #4]
   d703a:	bd08      	pop	{r3, pc}
   d703c:	00030248 	.word	0x00030248

000d7040 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7040:	b508      	push	{r3, lr}
   d7042:	4b02      	ldr	r3, [pc, #8]	; (d704c <os_mutex_recursive_unlock+0xc>)
   d7044:	681b      	ldr	r3, [r3, #0]
   d7046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7048:	9301      	str	r3, [sp, #4]
   d704a:	bd08      	pop	{r3, pc}
   d704c:	00030248 	.word	0x00030248

000d7050 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7050:	b508      	push	{r3, lr}
   d7052:	4b02      	ldr	r3, [pc, #8]	; (d705c <os_timer_set_id+0xc>)
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7058:	9301      	str	r3, [sp, #4]
   d705a:	bd08      	pop	{r3, pc}
   d705c:	00030248 	.word	0x00030248

000d7060 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7060:	b508      	push	{r3, lr}
   d7062:	4b02      	ldr	r3, [pc, #8]	; (d706c <HAL_RNG_GetRandomNumber+0xc>)
   d7064:	681b      	ldr	r3, [r3, #0]
   d7066:	685b      	ldr	r3, [r3, #4]
   d7068:	9301      	str	r3, [sp, #4]
   d706a:	bd08      	pop	{r3, pc}
   d706c:	00030218 	.word	0x00030218

000d7070 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7070:	b508      	push	{r3, lr}
   d7072:	4b02      	ldr	r3, [pc, #8]	; (d707c <HAL_Delay_Microseconds+0xc>)
   d7074:	681b      	ldr	r3, [r3, #0]
   d7076:	68db      	ldr	r3, [r3, #12]
   d7078:	9301      	str	r3, [sp, #4]
   d707a:	bd08      	pop	{r3, pc}
   d707c:	00030218 	.word	0x00030218

000d7080 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7080:	b508      	push	{r3, lr}
   d7082:	4b02      	ldr	r3, [pc, #8]	; (d708c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7084:	681b      	ldr	r3, [r3, #0]
   d7086:	691b      	ldr	r3, [r3, #16]
   d7088:	9301      	str	r3, [sp, #4]
   d708a:	bd08      	pop	{r3, pc}
   d708c:	00030218 	.word	0x00030218

000d7090 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7090:	b508      	push	{r3, lr}
   d7092:	4b02      	ldr	r3, [pc, #8]	; (d709c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7094:	681b      	ldr	r3, [r3, #0]
   d7096:	695b      	ldr	r3, [r3, #20]
   d7098:	9301      	str	r3, [sp, #4]
   d709a:	bd08      	pop	{r3, pc}
   d709c:	00030218 	.word	0x00030218

000d70a0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d70a0:	b508      	push	{r3, lr}
   d70a2:	4b02      	ldr	r3, [pc, #8]	; (d70ac <HAL_RTC_Get_UnixTime+0xc>)
   d70a4:	681b      	ldr	r3, [r3, #0]
   d70a6:	69db      	ldr	r3, [r3, #28]
   d70a8:	9301      	str	r3, [sp, #4]
   d70aa:	bd08      	pop	{r3, pc}
   d70ac:	00030218 	.word	0x00030218

000d70b0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d70b0:	b508      	push	{r3, lr}
   d70b2:	4b02      	ldr	r3, [pc, #8]	; (d70bc <HAL_RTC_Time_Is_Valid+0xc>)
   d70b4:	681b      	ldr	r3, [r3, #0]
   d70b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d70b8:	9301      	str	r3, [sp, #4]
   d70ba:	bd08      	pop	{r3, pc}
   d70bc:	00030218 	.word	0x00030218

000d70c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d70c0:	b508      	push	{r3, lr}
   d70c2:	4b02      	ldr	r3, [pc, #8]	; (d70cc <HAL_Pin_Map+0xc>)
   d70c4:	681b      	ldr	r3, [r3, #0]
   d70c6:	681b      	ldr	r3, [r3, #0]
   d70c8:	9301      	str	r3, [sp, #4]
   d70ca:	bd08      	pop	{r3, pc}
   d70cc:	0003022c 	.word	0x0003022c

000d70d0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d70d0:	b508      	push	{r3, lr}
   d70d2:	4b02      	ldr	r3, [pc, #8]	; (d70dc <HAL_Pin_Mode+0xc>)
   d70d4:	681b      	ldr	r3, [r3, #0]
   d70d6:	689b      	ldr	r3, [r3, #8]
   d70d8:	9301      	str	r3, [sp, #4]
   d70da:	bd08      	pop	{r3, pc}
   d70dc:	0003022c 	.word	0x0003022c

000d70e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d70e0:	b508      	push	{r3, lr}
   d70e2:	4b02      	ldr	r3, [pc, #8]	; (d70ec <HAL_Get_Pin_Mode+0xc>)
   d70e4:	681b      	ldr	r3, [r3, #0]
   d70e6:	68db      	ldr	r3, [r3, #12]
   d70e8:	9301      	str	r3, [sp, #4]
   d70ea:	bd08      	pop	{r3, pc}
   d70ec:	0003022c 	.word	0x0003022c

000d70f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d70f0:	b508      	push	{r3, lr}
   d70f2:	4b02      	ldr	r3, [pc, #8]	; (d70fc <HAL_GPIO_Write+0xc>)
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	691b      	ldr	r3, [r3, #16]
   d70f8:	9301      	str	r3, [sp, #4]
   d70fa:	bd08      	pop	{r3, pc}
   d70fc:	0003022c 	.word	0x0003022c

000d7100 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7100:	b508      	push	{r3, lr}
   d7102:	4b02      	ldr	r3, [pc, #8]	; (d710c <HAL_GPIO_Read+0xc>)
   d7104:	681b      	ldr	r3, [r3, #0]
   d7106:	695b      	ldr	r3, [r3, #20]
   d7108:	9301      	str	r3, [sp, #4]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	0003022c 	.word	0x0003022c

000d7110 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <HAL_I2C_Write_Data+0xc>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	6a1b      	ldr	r3, [r3, #32]
   d7118:	9301      	str	r3, [sp, #4]
   d711a:	bd08      	pop	{r3, pc}
   d711c:	00030228 	.word	0x00030228

000d7120 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7120:	b508      	push	{r3, lr}
   d7122:	4b02      	ldr	r3, [pc, #8]	; (d712c <HAL_I2C_Available_Data+0xc>)
   d7124:	681b      	ldr	r3, [r3, #0]
   d7126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7128:	9301      	str	r3, [sp, #4]
   d712a:	bd08      	pop	{r3, pc}
   d712c:	00030228 	.word	0x00030228

000d7130 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7130:	b508      	push	{r3, lr}
   d7132:	4b02      	ldr	r3, [pc, #8]	; (d713c <HAL_I2C_Read_Data+0xc>)
   d7134:	681b      	ldr	r3, [r3, #0]
   d7136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7138:	9301      	str	r3, [sp, #4]
   d713a:	bd08      	pop	{r3, pc}
   d713c:	00030228 	.word	0x00030228

000d7140 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7140:	b508      	push	{r3, lr}
   d7142:	4b02      	ldr	r3, [pc, #8]	; (d714c <HAL_I2C_Peek_Data+0xc>)
   d7144:	681b      	ldr	r3, [r3, #0]
   d7146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7148:	9301      	str	r3, [sp, #4]
   d714a:	bd08      	pop	{r3, pc}
   d714c:	00030228 	.word	0x00030228

000d7150 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7150:	b508      	push	{r3, lr}
   d7152:	4b02      	ldr	r3, [pc, #8]	; (d715c <HAL_I2C_Flush_Data+0xc>)
   d7154:	681b      	ldr	r3, [r3, #0]
   d7156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7158:	9301      	str	r3, [sp, #4]
   d715a:	bd08      	pop	{r3, pc}
   d715c:	00030228 	.word	0x00030228

000d7160 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7160:	b508      	push	{r3, lr}
   d7162:	4b02      	ldr	r3, [pc, #8]	; (d716c <HAL_I2C_Is_Enabled+0xc>)
   d7164:	681b      	ldr	r3, [r3, #0]
   d7166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7168:	9301      	str	r3, [sp, #4]
   d716a:	bd08      	pop	{r3, pc}
   d716c:	00030228 	.word	0x00030228

000d7170 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7170:	b508      	push	{r3, lr}
   d7172:	4b02      	ldr	r3, [pc, #8]	; (d717c <HAL_I2C_Init+0xc>)
   d7174:	681b      	ldr	r3, [r3, #0]
   d7176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7178:	9301      	str	r3, [sp, #4]
   d717a:	bd08      	pop	{r3, pc}
   d717c:	00030228 	.word	0x00030228

000d7180 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7180:	b508      	push	{r3, lr}
   d7182:	4b02      	ldr	r3, [pc, #8]	; (d718c <inet_inet_ntop+0xc>)
   d7184:	681b      	ldr	r3, [r3, #0]
   d7186:	695b      	ldr	r3, [r3, #20]
   d7188:	9301      	str	r3, [sp, #4]
   d718a:	bd08      	pop	{r3, pc}
   d718c:	00030264 	.word	0x00030264

000d7190 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7190:	b508      	push	{r3, lr}
   d7192:	4b02      	ldr	r3, [pc, #8]	; (d719c <netdb_freeaddrinfo+0xc>)
   d7194:	681b      	ldr	r3, [r3, #0]
   d7196:	689b      	ldr	r3, [r3, #8]
   d7198:	9301      	str	r3, [sp, #4]
   d719a:	bd08      	pop	{r3, pc}
   d719c:	00030268 	.word	0x00030268

000d71a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d71a0:	b508      	push	{r3, lr}
   d71a2:	4b02      	ldr	r3, [pc, #8]	; (d71ac <netdb_getaddrinfo+0xc>)
   d71a4:	681b      	ldr	r3, [r3, #0]
   d71a6:	68db      	ldr	r3, [r3, #12]
   d71a8:	9301      	str	r3, [sp, #4]
   d71aa:	bd08      	pop	{r3, pc}
   d71ac:	00030268 	.word	0x00030268

000d71b0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d71b0:	b508      	push	{r3, lr}
   d71b2:	4b02      	ldr	r3, [pc, #8]	; (d71bc <HAL_SPI_Begin+0xc>)
   d71b4:	681b      	ldr	r3, [r3, #0]
   d71b6:	681b      	ldr	r3, [r3, #0]
   d71b8:	9301      	str	r3, [sp, #4]
   d71ba:	bd08      	pop	{r3, pc}
   d71bc:	00030230 	.word	0x00030230

000d71c0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d71c0:	b508      	push	{r3, lr}
   d71c2:	4b02      	ldr	r3, [pc, #8]	; (d71cc <HAL_SPI_Send_Receive_Data+0xc>)
   d71c4:	681b      	ldr	r3, [r3, #0]
   d71c6:	695b      	ldr	r3, [r3, #20]
   d71c8:	9301      	str	r3, [sp, #4]
   d71ca:	bd08      	pop	{r3, pc}
   d71cc:	00030230 	.word	0x00030230

000d71d0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d71d0:	b508      	push	{r3, lr}
   d71d2:	4b02      	ldr	r3, [pc, #8]	; (d71dc <HAL_SPI_Init+0xc>)
   d71d4:	681b      	ldr	r3, [r3, #0]
   d71d6:	69db      	ldr	r3, [r3, #28]
   d71d8:	9301      	str	r3, [sp, #4]
   d71da:	bd08      	pop	{r3, pc}
   d71dc:	00030230 	.word	0x00030230

000d71e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d71e0:	b508      	push	{r3, lr}
   d71e2:	4b02      	ldr	r3, [pc, #8]	; (d71ec <HAL_SPI_Is_Enabled+0xc>)
   d71e4:	681b      	ldr	r3, [r3, #0]
   d71e6:	6a1b      	ldr	r3, [r3, #32]
   d71e8:	9301      	str	r3, [sp, #4]
   d71ea:	bd08      	pop	{r3, pc}
   d71ec:	00030230 	.word	0x00030230

000d71f0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d71f0:	b508      	push	{r3, lr}
   d71f2:	4b02      	ldr	r3, [pc, #8]	; (d71fc <HAL_SPI_Info+0xc>)
   d71f4:	681b      	ldr	r3, [r3, #0]
   d71f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d71f8:	9301      	str	r3, [sp, #4]
   d71fa:	bd08      	pop	{r3, pc}
   d71fc:	00030230 	.word	0x00030230

000d7200 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d7200:	b508      	push	{r3, lr}
   d7202:	4b02      	ldr	r3, [pc, #8]	; (d720c <HAL_SPI_DMA_Transfer+0xc>)
   d7204:	681b      	ldr	r3, [r3, #0]
   d7206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7208:	9301      	str	r3, [sp, #4]
   d720a:	bd08      	pop	{r3, pc}
   d720c:	00030230 	.word	0x00030230

000d7210 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d7210:	b508      	push	{r3, lr}
   d7212:	4b02      	ldr	r3, [pc, #8]	; (d721c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d7214:	681b      	ldr	r3, [r3, #0]
   d7216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7218:	9301      	str	r3, [sp, #4]
   d721a:	bd08      	pop	{r3, pc}
   d721c:	00030230 	.word	0x00030230

000d7220 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7220:	b508      	push	{r3, lr}
   d7222:	4b02      	ldr	r3, [pc, #8]	; (d722c <HAL_SPI_Set_Settings+0xc>)
   d7224:	681b      	ldr	r3, [r3, #0]
   d7226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7228:	9301      	str	r3, [sp, #4]
   d722a:	bd08      	pop	{r3, pc}
   d722c:	00030230 	.word	0x00030230

000d7230 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7230:	b508      	push	{r3, lr}
   d7232:	4b02      	ldr	r3, [pc, #8]	; (d723c <HAL_SPI_Acquire+0xc>)
   d7234:	681b      	ldr	r3, [r3, #0]
   d7236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7238:	9301      	str	r3, [sp, #4]
   d723a:	bd08      	pop	{r3, pc}
   d723c:	00030230 	.word	0x00030230

000d7240 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7240:	b508      	push	{r3, lr}
   d7242:	4b02      	ldr	r3, [pc, #8]	; (d724c <HAL_SPI_Release+0xc>)
   d7244:	681b      	ldr	r3, [r3, #0]
   d7246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7248:	9301      	str	r3, [sp, #4]
   d724a:	bd08      	pop	{r3, pc}
   d724c:	00030230 	.word	0x00030230

000d7250 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7250:	b508      	push	{r3, lr}
   d7252:	4b02      	ldr	r3, [pc, #8]	; (d725c <HAL_USART_Init+0xc>)
   d7254:	681b      	ldr	r3, [r3, #0]
   d7256:	681b      	ldr	r3, [r3, #0]
   d7258:	9301      	str	r3, [sp, #4]
   d725a:	bd08      	pop	{r3, pc}
   d725c:	0003023c 	.word	0x0003023c

000d7260 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7260:	b508      	push	{r3, lr}
   d7262:	4b02      	ldr	r3, [pc, #8]	; (d726c <HAL_USART_Write_Data+0xc>)
   d7264:	681b      	ldr	r3, [r3, #0]
   d7266:	68db      	ldr	r3, [r3, #12]
   d7268:	9301      	str	r3, [sp, #4]
   d726a:	bd08      	pop	{r3, pc}
   d726c:	0003023c 	.word	0x0003023c

000d7270 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7270:	b508      	push	{r3, lr}
   d7272:	4b02      	ldr	r3, [pc, #8]	; (d727c <HAL_USART_Available_Data+0xc>)
   d7274:	681b      	ldr	r3, [r3, #0]
   d7276:	691b      	ldr	r3, [r3, #16]
   d7278:	9301      	str	r3, [sp, #4]
   d727a:	bd08      	pop	{r3, pc}
   d727c:	0003023c 	.word	0x0003023c

000d7280 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7280:	b508      	push	{r3, lr}
   d7282:	4b02      	ldr	r3, [pc, #8]	; (d728c <HAL_USART_Read_Data+0xc>)
   d7284:	681b      	ldr	r3, [r3, #0]
   d7286:	695b      	ldr	r3, [r3, #20]
   d7288:	9301      	str	r3, [sp, #4]
   d728a:	bd08      	pop	{r3, pc}
   d728c:	0003023c 	.word	0x0003023c

000d7290 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7290:	b508      	push	{r3, lr}
   d7292:	4b02      	ldr	r3, [pc, #8]	; (d729c <HAL_USART_Peek_Data+0xc>)
   d7294:	681b      	ldr	r3, [r3, #0]
   d7296:	699b      	ldr	r3, [r3, #24]
   d7298:	9301      	str	r3, [sp, #4]
   d729a:	bd08      	pop	{r3, pc}
   d729c:	0003023c 	.word	0x0003023c

000d72a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d72a0:	b508      	push	{r3, lr}
   d72a2:	4b02      	ldr	r3, [pc, #8]	; (d72ac <HAL_USART_Flush_Data+0xc>)
   d72a4:	681b      	ldr	r3, [r3, #0]
   d72a6:	69db      	ldr	r3, [r3, #28]
   d72a8:	9301      	str	r3, [sp, #4]
   d72aa:	bd08      	pop	{r3, pc}
   d72ac:	0003023c 	.word	0x0003023c

000d72b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d72b0:	b508      	push	{r3, lr}
   d72b2:	4b02      	ldr	r3, [pc, #8]	; (d72bc <HAL_USART_Is_Enabled+0xc>)
   d72b4:	681b      	ldr	r3, [r3, #0]
   d72b6:	6a1b      	ldr	r3, [r3, #32]
   d72b8:	9301      	str	r3, [sp, #4]
   d72ba:	bd08      	pop	{r3, pc}
   d72bc:	0003023c 	.word	0x0003023c

000d72c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d72c0:	b508      	push	{r3, lr}
   d72c2:	4b02      	ldr	r3, [pc, #8]	; (d72cc <HAL_USART_Available_Data_For_Write+0xc>)
   d72c4:	681b      	ldr	r3, [r3, #0]
   d72c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d72c8:	9301      	str	r3, [sp, #4]
   d72ca:	bd08      	pop	{r3, pc}
   d72cc:	0003023c 	.word	0x0003023c

000d72d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d72d0:	b508      	push	{r3, lr}
   d72d2:	4b02      	ldr	r3, [pc, #8]	; (d72dc <HAL_USB_USART_Init+0xc>)
   d72d4:	681b      	ldr	r3, [r3, #0]
   d72d6:	681b      	ldr	r3, [r3, #0]
   d72d8:	9301      	str	r3, [sp, #4]
   d72da:	bd08      	pop	{r3, pc}
   d72dc:	0003024c 	.word	0x0003024c

000d72e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d72e0:	b508      	push	{r3, lr}
   d72e2:	4b02      	ldr	r3, [pc, #8]	; (d72ec <HAL_USB_USART_Begin+0xc>)
   d72e4:	681b      	ldr	r3, [r3, #0]
   d72e6:	685b      	ldr	r3, [r3, #4]
   d72e8:	9301      	str	r3, [sp, #4]
   d72ea:	bd08      	pop	{r3, pc}
   d72ec:	0003024c 	.word	0x0003024c

000d72f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d72f0:	b508      	push	{r3, lr}
   d72f2:	4b02      	ldr	r3, [pc, #8]	; (d72fc <HAL_USB_USART_Available_Data+0xc>)
   d72f4:	681b      	ldr	r3, [r3, #0]
   d72f6:	691b      	ldr	r3, [r3, #16]
   d72f8:	9301      	str	r3, [sp, #4]
   d72fa:	bd08      	pop	{r3, pc}
   d72fc:	0003024c 	.word	0x0003024c

000d7300 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7300:	b508      	push	{r3, lr}
   d7302:	4b02      	ldr	r3, [pc, #8]	; (d730c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7304:	681b      	ldr	r3, [r3, #0]
   d7306:	695b      	ldr	r3, [r3, #20]
   d7308:	9301      	str	r3, [sp, #4]
   d730a:	bd08      	pop	{r3, pc}
   d730c:	0003024c 	.word	0x0003024c

000d7310 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7310:	b508      	push	{r3, lr}
   d7312:	4b02      	ldr	r3, [pc, #8]	; (d731c <HAL_USB_USART_Receive_Data+0xc>)
   d7314:	681b      	ldr	r3, [r3, #0]
   d7316:	699b      	ldr	r3, [r3, #24]
   d7318:	9301      	str	r3, [sp, #4]
   d731a:	bd08      	pop	{r3, pc}
   d731c:	0003024c 	.word	0x0003024c

000d7320 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7320:	b508      	push	{r3, lr}
   d7322:	4b02      	ldr	r3, [pc, #8]	; (d732c <HAL_USB_USART_Send_Data+0xc>)
   d7324:	681b      	ldr	r3, [r3, #0]
   d7326:	69db      	ldr	r3, [r3, #28]
   d7328:	9301      	str	r3, [sp, #4]
   d732a:	bd08      	pop	{r3, pc}
   d732c:	0003024c 	.word	0x0003024c

000d7330 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7330:	b508      	push	{r3, lr}
   d7332:	4b02      	ldr	r3, [pc, #8]	; (d733c <HAL_USB_USART_Flush_Data+0xc>)
   d7334:	681b      	ldr	r3, [r3, #0]
   d7336:	6a1b      	ldr	r3, [r3, #32]
   d7338:	9301      	str	r3, [sp, #4]
   d733a:	bd08      	pop	{r3, pc}
   d733c:	0003024c 	.word	0x0003024c

000d7340 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7340:	b508      	push	{r3, lr}
   d7342:	4b02      	ldr	r3, [pc, #8]	; (d734c <panic_+0xc>)
   d7344:	681b      	ldr	r3, [r3, #0]
   d7346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7348:	9301      	str	r3, [sp, #4]
   d734a:	bd08      	pop	{r3, pc}
   d734c:	00030260 	.word	0x00030260

000d7350 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7350:	b508      	push	{r3, lr}
   d7352:	4b02      	ldr	r3, [pc, #8]	; (d735c <log_message+0xc>)
   d7354:	681b      	ldr	r3, [r3, #0]
   d7356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7358:	9301      	str	r3, [sp, #4]
   d735a:	bd08      	pop	{r3, pc}
   d735c:	00030260 	.word	0x00030260

000d7360 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7360:	b508      	push	{r3, lr}
   d7362:	4b02      	ldr	r3, [pc, #8]	; (d736c <system_mode+0xc>)
   d7364:	681b      	ldr	r3, [r3, #0]
   d7366:	681b      	ldr	r3, [r3, #0]
   d7368:	9301      	str	r3, [sp, #4]
   d736a:	bd08      	pop	{r3, pc}
   d736c:	00030220 	.word	0x00030220

000d7370 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7370:	b508      	push	{r3, lr}
   d7372:	4b02      	ldr	r3, [pc, #8]	; (d737c <set_system_mode+0xc>)
   d7374:	681b      	ldr	r3, [r3, #0]
   d7376:	685b      	ldr	r3, [r3, #4]
   d7378:	9301      	str	r3, [sp, #4]
   d737a:	bd08      	pop	{r3, pc}
   d737c:	00030220 	.word	0x00030220

000d7380 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7380:	b508      	push	{r3, lr}
   d7382:	4b02      	ldr	r3, [pc, #8]	; (d738c <system_delay_ms+0xc>)
   d7384:	681b      	ldr	r3, [r3, #0]
   d7386:	695b      	ldr	r3, [r3, #20]
   d7388:	9301      	str	r3, [sp, #4]
   d738a:	bd08      	pop	{r3, pc}
   d738c:	00030220 	.word	0x00030220

000d7390 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7390:	b508      	push	{r3, lr}
   d7392:	4b02      	ldr	r3, [pc, #8]	; (d739c <application_thread_current+0xc>)
   d7394:	681b      	ldr	r3, [r3, #0]
   d7396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7398:	9301      	str	r3, [sp, #4]
   d739a:	bd08      	pop	{r3, pc}
   d739c:	00030220 	.word	0x00030220

000d73a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d73a0:	b508      	push	{r3, lr}
   d73a2:	4b02      	ldr	r3, [pc, #8]	; (d73ac <application_thread_invoke+0xc>)
   d73a4:	681b      	ldr	r3, [r3, #0]
   d73a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d73a8:	9301      	str	r3, [sp, #4]
   d73aa:	bd08      	pop	{r3, pc}
   d73ac:	00030220 	.word	0x00030220

000d73b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d73b0:	b508      	push	{r3, lr}
   d73b2:	4b02      	ldr	r3, [pc, #8]	; (d73bc <system_thread_get_state+0xc>)
   d73b4:	681b      	ldr	r3, [r3, #0]
   d73b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d73b8:	9301      	str	r3, [sp, #4]
   d73ba:	bd08      	pop	{r3, pc}
   d73bc:	00030220 	.word	0x00030220

000d73c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d73c0:	b508      	push	{r3, lr}
   d73c2:	4b03      	ldr	r3, [pc, #12]	; (d73d0 <system_ctrl_set_app_request_handler+0x10>)
   d73c4:	681b      	ldr	r3, [r3, #0]
   d73c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d73ca:	9301      	str	r3, [sp, #4]
   d73cc:	bd08      	pop	{r3, pc}
   d73ce:	0000      	.short	0x0000
   d73d0:	00030220 	.word	0x00030220

000d73d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d73d4:	b508      	push	{r3, lr}
   d73d6:	4b03      	ldr	r3, [pc, #12]	; (d73e4 <system_ctrl_set_result+0x10>)
   d73d8:	681b      	ldr	r3, [r3, #0]
   d73da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d73de:	9301      	str	r3, [sp, #4]
   d73e0:	bd08      	pop	{r3, pc}
   d73e2:	0000      	.short	0x0000
   d73e4:	00030220 	.word	0x00030220

000d73e8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d73e8:	b508      	push	{r3, lr}
   d73ea:	4b02      	ldr	r3, [pc, #8]	; (d73f4 <spark_process+0xc>)
   d73ec:	681b      	ldr	r3, [r3, #0]
   d73ee:	689b      	ldr	r3, [r3, #8]
   d73f0:	9301      	str	r3, [sp, #4]
   d73f2:	bd08      	pop	{r3, pc}
   d73f4:	00030244 	.word	0x00030244

000d73f8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d73f8:	b508      	push	{r3, lr}
   d73fa:	4b02      	ldr	r3, [pc, #8]	; (d7404 <spark_cloud_flag_connected+0xc>)
   d73fc:	681b      	ldr	r3, [r3, #0]
   d73fe:	695b      	ldr	r3, [r3, #20]
   d7400:	9301      	str	r3, [sp, #4]
   d7402:	bd08      	pop	{r3, pc}
   d7404:	00030244 	.word	0x00030244

000d7408 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7408:	b508      	push	{r3, lr}
   d740a:	4b02      	ldr	r3, [pc, #8]	; (d7414 <spark_send_event+0xc>)
   d740c:	681b      	ldr	r3, [r3, #0]
   d740e:	6a1b      	ldr	r3, [r3, #32]
   d7410:	9301      	str	r3, [sp, #4]
   d7412:	bd08      	pop	{r3, pc}
   d7414:	00030244 	.word	0x00030244

000d7418 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7418:	b508      	push	{r3, lr}
   d741a:	4b02      	ldr	r3, [pc, #8]	; (d7424 <spark_subscribe+0xc>)
   d741c:	681b      	ldr	r3, [r3, #0]
   d741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7420:	9301      	str	r3, [sp, #4]
   d7422:	bd08      	pop	{r3, pc}
   d7424:	00030244 	.word	0x00030244

000d7428 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7428:	b508      	push	{r3, lr}
   d742a:	4b02      	ldr	r3, [pc, #8]	; (d7434 <spark_sync_time_pending+0xc>)
   d742c:	681b      	ldr	r3, [r3, #0]
   d742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7430:	9301      	str	r3, [sp, #4]
   d7432:	bd08      	pop	{r3, pc}
   d7434:	00030244 	.word	0x00030244

000d7438 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7438:	b508      	push	{r3, lr}
   d743a:	4b02      	ldr	r3, [pc, #8]	; (d7444 <spark_set_random_seed_from_cloud_handler+0xc>)
   d743c:	681b      	ldr	r3, [r3, #0]
   d743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7440:	9301      	str	r3, [sp, #4]
   d7442:	bd08      	pop	{r3, pc}
   d7444:	00030244 	.word	0x00030244

000d7448 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7448:	b508      	push	{r3, lr}
   d744a:	4b02      	ldr	r3, [pc, #8]	; (d7454 <network_connect+0xc>)
   d744c:	681b      	ldr	r3, [r3, #0]
   d744e:	685b      	ldr	r3, [r3, #4]
   d7450:	9301      	str	r3, [sp, #4]
   d7452:	bd08      	pop	{r3, pc}
   d7454:	00030240 	.word	0x00030240

000d7458 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7458:	b508      	push	{r3, lr}
   d745a:	4b02      	ldr	r3, [pc, #8]	; (d7464 <network_connecting+0xc>)
   d745c:	681b      	ldr	r3, [r3, #0]
   d745e:	689b      	ldr	r3, [r3, #8]
   d7460:	9301      	str	r3, [sp, #4]
   d7462:	bd08      	pop	{r3, pc}
   d7464:	00030240 	.word	0x00030240

000d7468 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7468:	b508      	push	{r3, lr}
   d746a:	4b02      	ldr	r3, [pc, #8]	; (d7474 <network_disconnect+0xc>)
   d746c:	681b      	ldr	r3, [r3, #0]
   d746e:	68db      	ldr	r3, [r3, #12]
   d7470:	9301      	str	r3, [sp, #4]
   d7472:	bd08      	pop	{r3, pc}
   d7474:	00030240 	.word	0x00030240

000d7478 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7478:	b508      	push	{r3, lr}
   d747a:	4b02      	ldr	r3, [pc, #8]	; (d7484 <network_ready+0xc>)
   d747c:	681b      	ldr	r3, [r3, #0]
   d747e:	691b      	ldr	r3, [r3, #16]
   d7480:	9301      	str	r3, [sp, #4]
   d7482:	bd08      	pop	{r3, pc}
   d7484:	00030240 	.word	0x00030240

000d7488 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7488:	b508      	push	{r3, lr}
   d748a:	4b02      	ldr	r3, [pc, #8]	; (d7494 <network_on+0xc>)
   d748c:	681b      	ldr	r3, [r3, #0]
   d748e:	695b      	ldr	r3, [r3, #20]
   d7490:	9301      	str	r3, [sp, #4]
   d7492:	bd08      	pop	{r3, pc}
   d7494:	00030240 	.word	0x00030240

000d7498 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7498:	b508      	push	{r3, lr}
   d749a:	4b02      	ldr	r3, [pc, #8]	; (d74a4 <network_off+0xc>)
   d749c:	681b      	ldr	r3, [r3, #0]
   d749e:	699b      	ldr	r3, [r3, #24]
   d74a0:	9301      	str	r3, [sp, #4]
   d74a2:	bd08      	pop	{r3, pc}
   d74a4:	00030240 	.word	0x00030240

000d74a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d74a8:	b508      	push	{r3, lr}
   d74aa:	4b02      	ldr	r3, [pc, #8]	; (d74b4 <network_listen+0xc>)
   d74ac:	681b      	ldr	r3, [r3, #0]
   d74ae:	69db      	ldr	r3, [r3, #28]
   d74b0:	9301      	str	r3, [sp, #4]
   d74b2:	bd08      	pop	{r3, pc}
   d74b4:	00030240 	.word	0x00030240

000d74b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d74b8:	b508      	push	{r3, lr}
   d74ba:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <network_listening+0xc>)
   d74bc:	681b      	ldr	r3, [r3, #0]
   d74be:	6a1b      	ldr	r3, [r3, #32]
   d74c0:	9301      	str	r3, [sp, #4]
   d74c2:	bd08      	pop	{r3, pc}
   d74c4:	00030240 	.word	0x00030240

000d74c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d74c8:	b508      	push	{r3, lr}
   d74ca:	4b02      	ldr	r3, [pc, #8]	; (d74d4 <network_set_listen_timeout+0xc>)
   d74cc:	681b      	ldr	r3, [r3, #0]
   d74ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	bd08      	pop	{r3, pc}
   d74d4:	00030240 	.word	0x00030240

000d74d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d74d8:	b508      	push	{r3, lr}
   d74da:	4b02      	ldr	r3, [pc, #8]	; (d74e4 <network_get_listen_timeout+0xc>)
   d74dc:	681b      	ldr	r3, [r3, #0]
   d74de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d74e0:	9301      	str	r3, [sp, #4]
   d74e2:	bd08      	pop	{r3, pc}
   d74e4:	00030240 	.word	0x00030240

000d74e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d74e8:	b508      	push	{r3, lr}
   d74ea:	4b02      	ldr	r3, [pc, #8]	; (d74f4 <malloc+0xc>)
   d74ec:	681b      	ldr	r3, [r3, #0]
   d74ee:	681b      	ldr	r3, [r3, #0]
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	bd08      	pop	{r3, pc}
   d74f4:	0003021c 	.word	0x0003021c

000d74f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d74f8:	b508      	push	{r3, lr}
   d74fa:	4b02      	ldr	r3, [pc, #8]	; (d7504 <free+0xc>)
   d74fc:	681b      	ldr	r3, [r3, #0]
   d74fe:	685b      	ldr	r3, [r3, #4]
   d7500:	9301      	str	r3, [sp, #4]
   d7502:	bd08      	pop	{r3, pc}
   d7504:	0003021c 	.word	0x0003021c

000d7508 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7508:	b508      	push	{r3, lr}
   d750a:	4b02      	ldr	r3, [pc, #8]	; (d7514 <realloc+0xc>)
   d750c:	681b      	ldr	r3, [r3, #0]
   d750e:	689b      	ldr	r3, [r3, #8]
   d7510:	9301      	str	r3, [sp, #4]
   d7512:	bd08      	pop	{r3, pc}
   d7514:	0003021c 	.word	0x0003021c

000d7518 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7518:	b508      	push	{r3, lr}
   d751a:	4b02      	ldr	r3, [pc, #8]	; (d7524 <sprintf+0xc>)
   d751c:	681b      	ldr	r3, [r3, #0]
   d751e:	68db      	ldr	r3, [r3, #12]
   d7520:	9301      	str	r3, [sp, #4]
   d7522:	bd08      	pop	{r3, pc}
   d7524:	0003021c 	.word	0x0003021c

000d7528 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d7528:	b508      	push	{r3, lr}
   d752a:	4b02      	ldr	r3, [pc, #8]	; (d7534 <sscanf+0xc>)
   d752c:	681b      	ldr	r3, [r3, #0]
   d752e:	695b      	ldr	r3, [r3, #20]
   d7530:	9301      	str	r3, [sp, #4]
   d7532:	bd08      	pop	{r3, pc}
   d7534:	0003021c 	.word	0x0003021c

000d7538 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d7538:	b508      	push	{r3, lr}
   d753a:	4b02      	ldr	r3, [pc, #8]	; (d7544 <siscanf+0xc>)
   d753c:	681b      	ldr	r3, [r3, #0]
   d753e:	699b      	ldr	r3, [r3, #24]
   d7540:	9301      	str	r3, [sp, #4]
   d7542:	bd08      	pop	{r3, pc}
   d7544:	0003021c 	.word	0x0003021c

000d7548 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7548:	b508      	push	{r3, lr}
   d754a:	4b02      	ldr	r3, [pc, #8]	; (d7554 <snprintf+0xc>)
   d754c:	681b      	ldr	r3, [r3, #0]
   d754e:	69db      	ldr	r3, [r3, #28]
   d7550:	9301      	str	r3, [sp, #4]
   d7552:	bd08      	pop	{r3, pc}
   d7554:	0003021c 	.word	0x0003021c

000d7558 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7558:	b508      	push	{r3, lr}
   d755a:	4b02      	ldr	r3, [pc, #8]	; (d7564 <vsnprintf+0xc>)
   d755c:	681b      	ldr	r3, [r3, #0]
   d755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7560:	9301      	str	r3, [sp, #4]
   d7562:	bd08      	pop	{r3, pc}
   d7564:	0003021c 	.word	0x0003021c

000d7568 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7568:	b508      	push	{r3, lr}
   d756a:	4b02      	ldr	r3, [pc, #8]	; (d7574 <abort+0xc>)
   d756c:	681b      	ldr	r3, [r3, #0]
   d756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7570:	9301      	str	r3, [sp, #4]
   d7572:	bd08      	pop	{r3, pc}
   d7574:	0003021c 	.word	0x0003021c

000d7578 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7578:	b508      	push	{r3, lr}
   d757a:	4b02      	ldr	r3, [pc, #8]	; (d7584 <_malloc_r+0xc>)
   d757c:	681b      	ldr	r3, [r3, #0]
   d757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7580:	9301      	str	r3, [sp, #4]
   d7582:	bd08      	pop	{r3, pc}
   d7584:	0003021c 	.word	0x0003021c

000d7588 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7588:	2100      	movs	r1, #0
   d758a:	f7ff bef9 	b.w	d7380 <system_delay_ms>

000d758e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d758e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7590:	6883      	ldr	r3, [r0, #8]
   d7592:	4604      	mov	r4, r0
   d7594:	b90b      	cbnz	r3, d759a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7596:	f002 fe92 	bl	da2be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d759a:	68c3      	ldr	r3, [r0, #12]
   d759c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d759e:	68a3      	ldr	r3, [r4, #8]
   d75a0:	b11b      	cbz	r3, d75aa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d75a2:	2203      	movs	r2, #3
   d75a4:	4621      	mov	r1, r4
   d75a6:	4620      	mov	r0, r4
   d75a8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d75aa:	4620      	mov	r0, r4
   d75ac:	2110      	movs	r1, #16
}
   d75ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d75b2:	f002 be68 	b.w	da286 <_ZdlPvj>

000d75b6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d75b6:	4770      	bx	lr

000d75b8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d75b8:	2000      	movs	r0, #0
   d75ba:	4770      	bx	lr

000d75bc <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d75bc:	4770      	bx	lr

000d75be <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d75be:	2000      	movs	r0, #0
   d75c0:	4770      	bx	lr

000d75c2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d75c2:	4770      	bx	lr

000d75c4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d75c4:	2000      	movs	r0, #0
   d75c6:	4770      	bx	lr

000d75c8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d75c8:	b510      	push	{r4, lr}
   d75ca:	2114      	movs	r1, #20
   d75cc:	4604      	mov	r4, r0
   d75ce:	f002 fe5a 	bl	da286 <_ZdlPvj>
   d75d2:	4620      	mov	r0, r4
   d75d4:	bd10      	pop	{r4, pc}

000d75d6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d75d6:	b510      	push	{r4, lr}
   d75d8:	2114      	movs	r1, #20
   d75da:	4604      	mov	r4, r0
   d75dc:	f002 fe53 	bl	da286 <_ZdlPvj>
   d75e0:	4620      	mov	r0, r4
   d75e2:	bd10      	pop	{r4, pc}

000d75e4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d75e4:	b510      	push	{r4, lr}
   d75e6:	2114      	movs	r1, #20
   d75e8:	4604      	mov	r4, r0
   d75ea:	f002 fe4c 	bl	da286 <_ZdlPvj>
   d75ee:	4620      	mov	r0, r4
   d75f0:	bd10      	pop	{r4, pc}

000d75f2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d75f2:	f7fc bd54 	b.w	d409e <_ZdlPv>

000d75f6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d75f6:	f7fc bd52 	b.w	d409e <_ZdlPv>

000d75fa <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d75fa:	f7fc bd50 	b.w	d409e <_ZdlPv>

000d75fe <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d75fe:	b510      	push	{r4, lr}
   d7600:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7602:	6800      	ldr	r0, [r0, #0]
   d7604:	b108      	cbz	r0, d760a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7606:	f7ff fd0b 	bl	d7020 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d760a:	4620      	mov	r0, r4
   d760c:	bd10      	pop	{r4, pc}
	...

000d7610 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d7610:	b530      	push	{r4, r5, lr}
   d7612:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d7614:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d7616:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d7618:	2400      	movs	r4, #0
   d761a:	9302      	str	r3, [sp, #8]
   d761c:	4b08      	ldr	r3, [pc, #32]	; (d7640 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d761e:	9300      	str	r3, [sp, #0]
   d7620:	aa02      	add	r2, sp, #8
   d7622:	4623      	mov	r3, r4
   d7624:	4907      	ldr	r1, [pc, #28]	; (d7644 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d7626:	9403      	str	r4, [sp, #12]
   d7628:	2001      	movs	r0, #1
   d762a:	f7ff fe91 	bl	d7350 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d762e:	6828      	ldr	r0, [r5, #0]
   d7630:	4905      	ldr	r1, [pc, #20]	; (d7648 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d7632:	8800      	ldrh	r0, [r0, #0]
   d7634:	4623      	mov	r3, r4
   d7636:	462a      	mov	r2, r5
   d7638:	f7ff fc34 	bl	d6ea4 <hal_ble_gatt_client_discover_all_services>
    }
   d763c:	b00b      	add	sp, #44	; 0x2c
   d763e:	bd30      	pop	{r4, r5, pc}
   d7640:	000ddc3b 	.word	0x000ddc3b
   d7644:	000ddc30 	.word	0x000ddc30
   d7648:	000d8c11 	.word	0x000d8c11

000d764c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d764c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d764e:	200a      	movs	r0, #10
   d7650:	4a02      	ldr	r2, [pc, #8]	; (d765c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d7652:	2100      	movs	r1, #0
   d7654:	f7ff fe74 	bl	d7340 <panic_>
    }
}
   d7658:	bd08      	pop	{r3, pc}
   d765a:	bf00      	nop
   d765c:	000d7071 	.word	0x000d7071

000d7660 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7660:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7662:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7664:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7666:	689b      	ldr	r3, [r3, #8]
   d7668:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d766a:	68a3      	ldr	r3, [r4, #8]
   d766c:	3b01      	subs	r3, #1
   d766e:	60a3      	str	r3, [r4, #8]
   d7670:	b92b      	cbnz	r3, d767e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d7672:	6823      	ldr	r3, [r4, #0]
   d7674:	4620      	mov	r0, r4
   d7676:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d767c:	4718      	bx	r3
   d767e:	bd10      	pop	{r4, pc}

000d7680 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d7680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7684:	b2da      	uxtb	r2, r3
   d7686:	2a09      	cmp	r2, #9
   d7688:	d801      	bhi.n	d768e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d768a:	4618      	mov	r0, r3
   d768c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d768e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d7692:	2b05      	cmp	r3, #5
   d7694:	d801      	bhi.n	d769a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d7696:	3857      	subs	r0, #87	; 0x57
   d7698:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d769a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d769e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d76a0:	bf94      	ite	ls
   d76a2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d76a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d76a8:	4770      	bx	lr
	...

000d76ac <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d76ac:	b510      	push	{r4, lr}
            locked_(false) {
   d76ae:	2300      	movs	r3, #0
   d76b0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d76b2:	4b04      	ldr	r3, [pc, #16]	; (d76c4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d76b4:	4604      	mov	r4, r0
   d76b6:	6818      	ldr	r0, [r3, #0]
   d76b8:	f7ff fcba 	bl	d7030 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d76bc:	2301      	movs	r3, #1
   d76be:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d76c0:	4620      	mov	r0, r4
   d76c2:	bd10      	pop	{r4, pc}
   d76c4:	2003e350 	.word	0x2003e350

000d76c8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d76c8:	b510      	push	{r4, lr}
        if (locked_) {
   d76ca:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d76cc:	4604      	mov	r4, r0
        if (locked_) {
   d76ce:	b11b      	cbz	r3, d76d8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d76d0:	4b02      	ldr	r3, [pc, #8]	; (d76dc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d76d2:	6818      	ldr	r0, [r3, #0]
   d76d4:	f7ff fcb4 	bl	d7040 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d76d8:	4620      	mov	r0, r4
   d76da:	bd10      	pop	{r4, pc}
   d76dc:	2003e350 	.word	0x2003e350

000d76e0 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d76e0:	2200      	movs	r2, #0
   d76e2:	6002      	str	r2, [r0, #0]
   d76e4:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d76e6:	4770      	bx	lr

000d76e8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d76e8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d76ea:	7982      	ldrb	r2, [r0, #6]
   d76ec:	798b      	ldrb	r3, [r1, #6]
   d76ee:	429a      	cmp	r2, r3
   d76f0:	d106      	bne.n	d7700 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d76f2:	2206      	movs	r2, #6
   d76f4:	f003 fd2a 	bl	db14c <memcmp>
   d76f8:	fab0 f080 	clz	r0, r0
   d76fc:	0940      	lsrs	r0, r0, #5
   d76fe:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d7700:	2000      	movs	r0, #0
}
   d7702:	bd08      	pop	{r3, pc}

000d7704 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d7704:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d7706:	2301      	movs	r3, #1
   d7708:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d770a:	4b05      	ldr	r3, [pc, #20]	; (d7720 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d770c:	4602      	mov	r2, r0
   d770e:	f103 0110 	add.w	r1, r3, #16
   d7712:	f853 4b04 	ldr.w	r4, [r3], #4
   d7716:	f842 4b04 	str.w	r4, [r2], #4
   d771a:	428b      	cmp	r3, r1
   d771c:	d1f9      	bne.n	d7712 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d771e:	bd10      	pop	{r4, pc}
   d7720:	000dddd0 	.word	0x000dddd0

000d7724 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d7724:	7c0b      	ldrb	r3, [r1, #16]
   d7726:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d772a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d772c:	d110      	bne.n	d7750 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d772e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7730:	4b0d      	ldr	r3, [pc, #52]	; (d7768 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d7732:	4602      	mov	r2, r0
   d7734:	f103 0410 	add.w	r4, r3, #16
   d7738:	f853 5b04 	ldr.w	r5, [r3], #4
   d773c:	f842 5b04 	str.w	r5, [r2], #4
   d7740:	42a3      	cmp	r3, r4
   d7742:	d1f9      	bne.n	d7738 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d7744:	880b      	ldrh	r3, [r1, #0]
   d7746:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d7748:	880b      	ldrh	r3, [r1, #0]
   d774a:	121b      	asrs	r3, r3, #8
   d774c:	7343      	strb	r3, [r0, #13]
   d774e:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d7750:	2301      	movs	r3, #1
   d7752:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d7754:	f101 0210 	add.w	r2, r1, #16
   d7758:	4603      	mov	r3, r0
   d775a:	f851 4b04 	ldr.w	r4, [r1], #4
   d775e:	f843 4b04 	str.w	r4, [r3], #4
   d7762:	4291      	cmp	r1, r2
   d7764:	d1f9      	bne.n	d775a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d7766:	bd30      	pop	{r4, r5, pc}
   d7768:	000dddd0 	.word	0x000dddd0

000d776c <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d776c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d776e:	690b      	ldr	r3, [r1, #16]
   d7770:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d7772:	f101 0210 	add.w	r2, r1, #16
   d7776:	4603      	mov	r3, r0
   d7778:	f851 4b04 	ldr.w	r4, [r1], #4
   d777c:	f843 4b04 	str.w	r4, [r3], #4
   d7780:	4291      	cmp	r1, r2
   d7782:	d1f9      	bne.n	d7778 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d7784:	bd10      	pop	{r4, pc}

000d7786 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d7786:	b510      	push	{r4, lr}
    if (uuid128) {
   d7788:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d778a:	4604      	mov	r4, r0
    if (uuid128) {
   d778c:	b1b9      	cbz	r1, d77be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d778e:	2a01      	cmp	r2, #1
   d7790:	d109      	bne.n	d77a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d7792:	4603      	mov	r3, r0
   d7794:	f101 0210 	add.w	r2, r1, #16
   d7798:	f851 0b04 	ldr.w	r0, [r1], #4
   d779c:	f843 0b04 	str.w	r0, [r3], #4
   d77a0:	4291      	cmp	r1, r2
   d77a2:	d1f9      	bne.n	d7798 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d77a4:	e008      	b.n	d77b8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d77a6:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d77a8:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d77aa:	5c98      	ldrb	r0, [r3, r2]
   d77ac:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d77b0:	3a01      	subs	r2, #1
   d77b2:	b2d2      	uxtb	r2, r2
   d77b4:	2aff      	cmp	r2, #255	; 0xff
   d77b6:	d1f8      	bne.n	d77aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d77b8:	2301      	movs	r3, #1
   d77ba:	6123      	str	r3, [r4, #16]
   d77bc:	e002      	b.n	d77c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d77be:	2210      	movs	r2, #16
   d77c0:	f003 fcf9 	bl	db1b6 <memset>
    }
}
   d77c4:	4620      	mov	r0, r4
   d77c6:	bd10      	pop	{r4, pc}

000d77c8 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d77c8:	b538      	push	{r3, r4, r5, lr}
   d77ca:	4604      	mov	r4, r0
   d77cc:	460d      	mov	r5, r1
        : BleUuid() {
   d77ce:	f7ff ff99 	bl	d7704 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d77d2:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d77d4:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d77d6:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d77d8:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d77da:	7365      	strb	r5, [r4, #13]
}
   d77dc:	4620      	mov	r0, r4
   d77de:	bd38      	pop	{r3, r4, r5, pc}

000d77e0 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d77e0:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d77e2:	690b      	ldr	r3, [r1, #16]
   d77e4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d77e6:	f101 0210 	add.w	r2, r1, #16
   d77ea:	4603      	mov	r3, r0
   d77ec:	f851 4b04 	ldr.w	r4, [r1], #4
   d77f0:	f843 4b04 	str.w	r4, [r3], #4
   d77f4:	4291      	cmp	r1, r2
   d77f6:	d1f9      	bne.n	d77ec <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d77f8:	bd10      	pop	{r4, pc}

000d77fa <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d77fa:	b510      	push	{r4, lr}
   d77fc:	b086      	sub	sp, #24
   d77fe:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d7800:	2201      	movs	r2, #1
   d7802:	a801      	add	r0, sp, #4
   d7804:	f7ff ffbf 	bl	d7786 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7808:	a901      	add	r1, sp, #4
   d780a:	4620      	mov	r0, r4
   d780c:	f7ff ffe8 	bl	d77e0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7810:	b006      	add	sp, #24
   d7812:	bd10      	pop	{r4, pc}

000d7814 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d7814:	b510      	push	{r4, lr}
   d7816:	b086      	sub	sp, #24
   d7818:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d781a:	a801      	add	r0, sp, #4
   d781c:	f7ff ffd4 	bl	d77c8 <_ZN8particle7BleUuidC1Et>
   d7820:	a901      	add	r1, sp, #4
   d7822:	4620      	mov	r0, r4
   d7824:	f7ff ffdc 	bl	d77e0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7828:	b006      	add	sp, #24
   d782a:	bd10      	pop	{r4, pc}

000d782c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d782c:	b510      	push	{r4, lr}
   d782e:	b086      	sub	sp, #24
   d7830:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d7832:	a801      	add	r0, sp, #4
   d7834:	f7ff ff76 	bl	d7724 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d7838:	a901      	add	r1, sp, #4
   d783a:	4620      	mov	r0, r4
   d783c:	f7ff ffd0 	bl	d77e0 <_ZN8particle7BleUuidaSERKS0_>
}
   d7840:	b006      	add	sp, #24
   d7842:	bd10      	pop	{r4, pc}

000d7844 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d7844:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d7846:	6902      	ldr	r2, [r0, #16]
   d7848:	690b      	ldr	r3, [r1, #16]
   d784a:	429a      	cmp	r2, r3
   d784c:	d106      	bne.n	d785c <_ZNK8particle7BleUuideqERKS0_+0x18>
   d784e:	2210      	movs	r2, #16
   d7850:	f003 fc7c 	bl	db14c <memcmp>
   d7854:	fab0 f080 	clz	r0, r0
   d7858:	0940      	lsrs	r0, r0, #5
   d785a:	bd08      	pop	{r3, pc}
   d785c:	2000      	movs	r0, #0
}
   d785e:	bd08      	pop	{r3, pc}

000d7860 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d7860:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d7864:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7866:	4b31      	ldr	r3, [pc, #196]	; (d792c <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7868:	460e      	mov	r6, r1
   d786a:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d786c:	4602      	mov	r2, r0
   d786e:	f103 0110 	add.w	r1, r3, #16
   d7872:	f853 0b04 	ldr.w	r0, [r3], #4
   d7876:	f842 0b04 	str.w	r0, [r2], #4
   d787a:	428b      	cmp	r3, r1
   d787c:	d1f9      	bne.n	d7872 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d787e:	2e00      	cmp	r6, #0
   d7880:	d051      	beq.n	d7926 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d7882:	2124      	movs	r1, #36	; 0x24
   d7884:	4630      	mov	r0, r6
   d7886:	f003 fd34 	bl	db2f2 <strnlen>
   d788a:	2804      	cmp	r0, #4
   d788c:	d010      	beq.n	d78b0 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d788e:	2700      	movs	r7, #0
   d7890:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7892:	2124      	movs	r1, #36	; 0x24
   d7894:	4630      	mov	r0, r6
   d7896:	f003 fd2c 	bl	db2f2 <strnlen>
   d789a:	42b8      	cmp	r0, r7
   d789c:	d901      	bls.n	d78a2 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d789e:	bb44      	cbnz	r4, d78f2 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d78a0:	e041      	b.n	d7926 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d78a2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d78a4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d78a6:	42a5      	cmp	r5, r4
   d78a8:	d03d      	beq.n	d7926 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d78aa:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d78ae:	e7fa      	b.n	d78a6 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d78b0:	7830      	ldrb	r0, [r6, #0]
   d78b2:	f7ff fee5 	bl	d7680 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d78b6:	1e04      	subs	r4, r0, #0
   d78b8:	db18      	blt.n	d78ec <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d78ba:	7870      	ldrb	r0, [r6, #1]
   d78bc:	f7ff fee0 	bl	d7680 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d78c0:	2800      	cmp	r0, #0
   d78c2:	db13      	blt.n	d78ec <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d78c4:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d78c8:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d78cc:	78b0      	ldrb	r0, [r6, #2]
   d78ce:	f7ff fed7 	bl	d7680 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d78d2:	1e04      	subs	r4, r0, #0
   d78d4:	db0a      	blt.n	d78ec <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d78d6:	78f0      	ldrb	r0, [r6, #3]
   d78d8:	f7ff fed2 	bl	d7680 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d78dc:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d78de:	bfa1      	itttt	ge
   d78e0:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d78e4:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d78e8:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d78ea:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d78ec:	2300      	movs	r3, #0
   d78ee:	612b      	str	r3, [r5, #16]
   d78f0:	e019      	b.n	d7926 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d78f2:	5df0      	ldrb	r0, [r6, r7]
   d78f4:	f7ff fec4 	bl	d7680 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d78f8:	0603      	lsls	r3, r0, #24
   d78fa:	d412      	bmi.n	d7922 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d78fc:	3c01      	subs	r4, #1
   d78fe:	0100      	lsls	r0, r0, #4
   d7900:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d7902:	2124      	movs	r1, #36	; 0x24
   d7904:	4630      	mov	r0, r6
   d7906:	f003 fcf4 	bl	db2f2 <strnlen>
   d790a:	3701      	adds	r7, #1
   d790c:	4287      	cmp	r7, r0
   d790e:	d208      	bcs.n	d7922 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d7910:	5df0      	ldrb	r0, [r6, r7]
   d7912:	f7ff feb5 	bl	d7680 <_ZN8particle11hexToNibbleEc>
   d7916:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7918:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d791a:	bfa2      	ittt	ge
   d791c:	5d2b      	ldrbge	r3, [r5, r4]
   d791e:	4318      	orrge	r0, r3
   d7920:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7922:	3701      	adds	r7, #1
   d7924:	e7b5      	b.n	d7892 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d7926:	b003      	add	sp, #12
   d7928:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d792a:	bf00      	nop
   d792c:	000dddd0 	.word	0x000dddd0

000d7930 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d7930:	b538      	push	{r3, r4, r5, lr}
   d7932:	4604      	mov	r4, r0
   d7934:	460d      	mov	r5, r1
        : BleUuid() {
   d7936:	f7ff fee5 	bl	d7704 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d793a:	4620      	mov	r0, r4
   d793c:	4629      	mov	r1, r5
   d793e:	f7ff ff8f 	bl	d7860 <_ZN8particle7BleUuid9constructEPKc>
}
   d7942:	4620      	mov	r0, r4
   d7944:	bd38      	pop	{r3, r4, r5, pc}

000d7946 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d7946:	b538      	push	{r3, r4, r5, lr}
   d7948:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d794a:	b101      	cbz	r1, d794e <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d794c:	b912      	cbnz	r2, d7954 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d794e:	2000      	movs	r0, #0
   d7950:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d7952:	bd38      	pop	{r3, r4, r5, pc}
   d7954:	2a1f      	cmp	r2, #31
   d7956:	bf28      	it	cs
   d7958:	221f      	movcs	r2, #31
   d795a:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d795c:	f003 fc05 	bl	db16a <memcpy>
    selfLen_ = len;
   d7960:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d7962:	4620      	mov	r0, r4
}
   d7964:	bd38      	pop	{r3, r4, r5, pc}

000d7966 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d7966:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d7968:	b18b      	cbz	r3, d798e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d796a:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d796c:	1ce5      	adds	r5, r4, #3
   d796e:	428d      	cmp	r5, r1
   d7970:	d80f      	bhi.n	d7992 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d7972:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d7974:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d7976:	5d87      	ldrb	r7, [r0, r6]
   d7978:	4297      	cmp	r7, r2
   d797a:	d105      	bne.n	d7988 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d797c:	442e      	add	r6, r5
   d797e:	42b1      	cmp	r1, r6
   d7980:	d307      	bcc.n	d7992 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d7982:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d7984:	1c68      	adds	r0, r5, #1
                return adsLen;
   d7986:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d7988:	3501      	adds	r5, #1
   d798a:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d798c:	e7ee      	b.n	d796c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d798e:	4618      	mov	r0, r3
   d7990:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7992:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d7994:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7996 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d7996:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d799a:	4604      	mov	r4, r0
   d799c:	460e      	mov	r6, r1
   d799e:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d79a0:	4617      	mov	r7, r2
   d79a2:	2a00      	cmp	r2, #0
   d79a4:	d03a      	beq.n	d7a1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d79a6:	460a      	mov	r2, r1
   d79a8:	ab01      	add	r3, sp, #4
   d79aa:	6a01      	ldr	r1, [r0, #32]
   d79ac:	f7ff ffdb 	bl	d7966 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d79b0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d79b4:	6a22      	ldr	r2, [r4, #32]
   d79b6:	bb03      	cbnz	r3, d79fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d79b8:	b1f8      	cbz	r0, d79fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d79ba:	1c96      	adds	r6, r2, #2
   d79bc:	442e      	add	r6, r5
   d79be:	1a36      	subs	r6, r6, r0
   d79c0:	2e1f      	cmp	r6, #31
   d79c2:	d82b      	bhi.n	d7a1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d79c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d79c8:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d79cc:	ebc8 0202 	rsb	r2, r8, r2
   d79d0:	1a12      	subs	r2, r2, r0
   d79d2:	eb00 0108 	add.w	r1, r0, r8
   d79d6:	eb05 0009 	add.w	r0, r5, r9
   d79da:	b292      	uxth	r2, r2
   d79dc:	4421      	add	r1, r4
   d79de:	4420      	add	r0, r4
   d79e0:	f003 fbce 	bl	db180 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d79e4:	1c6b      	adds	r3, r5, #1
   d79e6:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d79ea:	462a      	mov	r2, r5
   d79ec:	4639      	mov	r1, r7
   d79ee:	eb04 0009 	add.w	r0, r4, r9
   d79f2:	f003 fbba 	bl	db16a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d79f6:	6226      	str	r6, [r4, #32]
   d79f8:	e010      	b.n	d7a1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d79fa:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d79fc:	182b      	adds	r3, r5, r0
   d79fe:	2b1f      	cmp	r3, #31
   d7a00:	d80c      	bhi.n	d7a1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d7a02:	1c6b      	adds	r3, r5, #1
   d7a04:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7a06:	4422      	add	r2, r4
   d7a08:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d7a0a:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7a0c:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d7a0e:	4420      	add	r0, r4
   d7a10:	462a      	mov	r2, r5
   d7a12:	f003 fbaa 	bl	db16a <memcpy>
        selfLen_ += len;
   d7a16:	6a22      	ldr	r2, [r4, #32]
   d7a18:	442a      	add	r2, r5
   d7a1a:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d7a1c:	6a20      	ldr	r0, [r4, #32]
}
   d7a1e:	b003      	add	sp, #12
   d7a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7a24 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d7a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7a26:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d7a28:	4603      	mov	r3, r0
   d7a2a:	f100 021f 	add.w	r2, r0, #31
   d7a2e:	2000      	movs	r0, #0
   d7a30:	f803 0b01 	strb.w	r0, [r3], #1
   d7a34:	4293      	cmp	r3, r2
   d7a36:	f04f 0100 	mov.w	r1, #0
   d7a3a:	d1f9      	bne.n	d7a30 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d7a3c:	aa04      	add	r2, sp, #16
   d7a3e:	2306      	movs	r3, #6
   d7a40:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7a44:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7a46:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7a48:	9100      	str	r1, [sp, #0]
   d7a4a:	4620      	mov	r0, r4
   d7a4c:	4619      	mov	r1, r3
   d7a4e:	f7ff ffa2 	bl	d7996 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7a52:	4620      	mov	r0, r4
   d7a54:	b004      	add	sp, #16
   d7a56:	bd10      	pop	{r4, pc}

000d7a58 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d7a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a5a:	4615      	mov	r5, r2
   d7a5c:	461c      	mov	r4, r3
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d7a5e:	460a      	mov	r2, r1
   d7a60:	ab01      	add	r3, sp, #4
   d7a62:	6a01      	ldr	r1, [r0, #32]
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d7a64:	4606      	mov	r6, r0
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d7a66:	f7ff ff7e 	bl	d7966 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
   d7a6a:	4603      	mov	r3, r0
    if (adsLen > 0) {
   d7a6c:	f030 0002 	bics.w	r0, r0, #2
   d7a70:	d00c      	beq.n	d7a8c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
   d7a72:	1e98      	subs	r0, r3, #2
   d7a74:	4284      	cmp	r4, r0
   d7a76:	bf28      	it	cs
   d7a78:	4604      	movcs	r4, r0
        if ((adsLen - 2) > 0) {
            adsLen -= 2;
            len = std::min(len, adsLen);
            if (buf != nullptr) {
   d7a7a:	b135      	cbz	r5, d7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x32>
                memcpy(buf, &selfData_[offset + 2], len);
   d7a7c:	9901      	ldr	r1, [sp, #4]
   d7a7e:	3102      	adds	r1, #2
   d7a80:	4622      	mov	r2, r4
   d7a82:	4431      	add	r1, r6
   d7a84:	4628      	mov	r0, r5
   d7a86:	f003 fb70 	bl	db16a <memcpy>
            }
            return len;
   d7a8a:	4620      	mov	r0, r4
        }
    }
    return 0;
}
   d7a8c:	b002      	add	sp, #8
   d7a8e:	bd70      	pop	{r4, r5, r6, pc}

000d7a90 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
    return found;
}

size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   d7a90:	4613      	mov	r3, r2
   d7a92:	460a      	mov	r2, r1
   d7a94:	21ff      	movs	r1, #255	; 0xff
   d7a96:	f7ff bfdf 	b.w	d7a58 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000d7a9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7a9e:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7aa0:	b085      	sub	sp, #20
   d7aa2:	4606      	mov	r6, r0
   d7aa4:	4689      	mov	r9, r1
   d7aa6:	4617      	mov	r7, r2
   d7aa8:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d7aaa:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d7aac:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7ab0:	6a31      	ldr	r1, [r6, #32]
   d7ab2:	428d      	cmp	r5, r1
   d7ab4:	d22a      	bcs.n	d7b0c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d7ab6:	ab03      	add	r3, sp, #12
   d7ab8:	464a      	mov	r2, r9
   d7aba:	1b49      	subs	r1, r1, r5
   d7abc:	1970      	adds	r0, r6, r5
   d7abe:	f7ff ff52 	bl	d7966 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d7ac2:	4683      	mov	fp, r0
   d7ac4:	b310      	cbz	r0, d7b0c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d7ac6:	4554      	cmp	r4, sl
   d7ac8:	d220      	bcs.n	d7b0c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d7aca:	2804      	cmp	r0, #4
   d7acc:	9903      	ldr	r1, [sp, #12]
   d7ace:	d10c      	bne.n	d7aea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d7ad0:	4429      	add	r1, r5
   d7ad2:	1872      	adds	r2, r6, r1
   d7ad4:	1c63      	adds	r3, r4, #1
   d7ad6:	78d1      	ldrb	r1, [r2, #3]
   d7ad8:	7892      	ldrb	r2, [r2, #2]
   d7ada:	9301      	str	r3, [sp, #4]
   d7adc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d7ae0:	fb08 7004 	mla	r0, r8, r4, r7
   d7ae4:	f7ff fe96 	bl	d7814 <_ZN8particle7BleUuidaSEt>
   d7ae8:	e00a      	b.n	d7b00 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d7aea:	2812      	cmp	r0, #18
   d7aec:	d10a      	bne.n	d7b04 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d7aee:	3102      	adds	r1, #2
   d7af0:	4429      	add	r1, r5
   d7af2:	1c63      	adds	r3, r4, #1
   d7af4:	4431      	add	r1, r6
   d7af6:	fb08 7004 	mla	r0, r8, r4, r7
   d7afa:	9301      	str	r3, [sp, #4]
   d7afc:	f7ff fe7d 	bl	d77fa <_ZN8particle7BleUuidaSEPKh>
   d7b00:	9b01      	ldr	r3, [sp, #4]
   d7b02:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7b04:	9b03      	ldr	r3, [sp, #12]
   d7b06:	445b      	add	r3, fp
   d7b08:	441d      	add	r5, r3
   d7b0a:	e7d1      	b.n	d7ab0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	b005      	add	sp, #20
   d7b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7b14 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7b18:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7b1a:	460d      	mov	r5, r1
   d7b1c:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7b1e:	460a      	mov	r2, r1
   d7b20:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7b22:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7b24:	f7ff ffb9 	bl	d7a9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7b28:	f04f 0814 	mov.w	r8, #20
   d7b2c:	1a33      	subs	r3, r6, r0
   d7b2e:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7b32:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7b34:	2103      	movs	r1, #3
   d7b36:	4638      	mov	r0, r7
   d7b38:	f7ff ffaf 	bl	d7a9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d7b3c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7b3e:	1b33      	subs	r3, r6, r4
   d7b40:	fb08 5204 	mla	r2, r8, r4, r5
   d7b44:	2106      	movs	r1, #6
   d7b46:	4638      	mov	r0, r7
   d7b48:	f7ff ffa7 	bl	d7a9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d7b4c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d7b4e:	1b33      	subs	r3, r6, r4
   d7b50:	fb08 5204 	mla	r2, r8, r4, r5
   d7b54:	2107      	movs	r1, #7
   d7b56:	4638      	mov	r0, r7
   d7b58:	f7ff ff9f 	bl	d7a9a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d7b5c:	4420      	add	r0, r4
   d7b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d7b64 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7b64:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7b66:	2500      	movs	r5, #0
   d7b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7b6c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7b6e:	8043      	strh	r3, [r0, #2]
   d7b70:	220e      	movs	r2, #14
   d7b72:	4629      	mov	r1, r5
   d7b74:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d7b76:	7105      	strb	r5, [r0, #4]
   d7b78:	3006      	adds	r0, #6
   d7b7a:	f003 fb1c 	bl	db1b6 <memset>
   d7b7e:	f104 0014 	add.w	r0, r4, #20
   d7b82:	f7ff fdbf 	bl	d7704 <_ZN8particle7BleUuidC1Ev>
   d7b86:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7b8a:	f7ff fdbb 	bl	d7704 <_ZN8particle7BleUuidC1Ev>
   d7b8e:	4904      	ldr	r1, [pc, #16]	; (d7ba0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7b90:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7b94:	f001 ffef 	bl	d9b76 <_ZN6StringC1EPK19__FlashStringHelper>
   d7b98:	64e5      	str	r5, [r4, #76]	; 0x4c
   d7b9a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d7b9c:	4620      	mov	r0, r4
   d7b9e:	bd38      	pop	{r3, r4, r5, pc}
   d7ba0:	000ddf44 	.word	0x000ddf44

000d7ba4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d7ba4:	b510      	push	{r4, lr}
   d7ba6:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7ba8:	69c2      	ldr	r2, [r0, #28]
   d7baa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d7bae:	4293      	cmp	r3, r2
   d7bb0:	4618      	mov	r0, r3
   d7bb2:	d006      	beq.n	d7bc2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d7bb4:	6804      	ldr	r4, [r0, #0]
   d7bb6:	8824      	ldrh	r4, [r4, #0]
   d7bb8:	428c      	cmp	r4, r1
   d7bba:	f103 0308 	add.w	r3, r3, #8
   d7bbe:	d1f6      	bne.n	d7bae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d7bc0:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d7bc2:	2000      	movs	r0, #0
    }
   d7bc4:	bd10      	pop	{r4, pc}
	...

000d7bc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d7bc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7bcc:	4680      	mov	r8, r0
   d7bce:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d7bd0:	460e      	mov	r6, r1
   d7bd2:	b369      	cbz	r1, d7c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d7bd4:	b362      	cbz	r2, d7c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d7bd6:	2af4      	cmp	r2, #244	; 0xf4
   d7bd8:	6805      	ldr	r5, [r0, #0]
   d7bda:	bf28      	it	cs
   d7bdc:	22f4      	movcs	r2, #244	; 0xf4
   d7bde:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d7be0:	782a      	ldrb	r2, [r5, #0]
   d7be2:	b1a2      	cbz	r2, d7c0e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d7be4:	792b      	ldrb	r3, [r5, #4]
   d7be6:	0798      	lsls	r0, r3, #30
   d7be8:	d507      	bpl.n	d7bfa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d7bea:	2300      	movs	r3, #0
   d7bec:	4622      	mov	r2, r4
   d7bee:	89a8      	ldrh	r0, [r5, #12]
   d7bf0:	f7ff f94e 	bl	d6e90 <hal_ble_gatt_server_set_characteristic_value>
   d7bf4:	2800      	cmp	r0, #0
   d7bf6:	da02      	bge.n	d7bfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d7bf8:	e043      	b.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d7bfa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7bfe:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d7c02:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d7c04:	06da      	lsls	r2, r3, #27
   d7c06:	d518      	bpl.n	d7c3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d7c08:	2f01      	cmp	r7, #1
   d7c0a:	d123      	bne.n	d7c54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d7c0c:	e015      	b.n	d7c3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d7c0e:	8868      	ldrh	r0, [r5, #2]
   d7c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7c14:	4298      	cmp	r0, r3
   d7c16:	d00d      	beq.n	d7c34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d7c18:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d7c1a:	0759      	lsls	r1, r3, #29
   d7c1c:	d523      	bpl.n	d7c66 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d7c1e:	2f01      	cmp	r7, #1
   d7c20:	d021      	beq.n	d7c66 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7c22:	89a9      	ldrh	r1, [r5, #12]
   d7c24:	9200      	str	r2, [sp, #0]
   d7c26:	4623      	mov	r3, r4
   d7c28:	4632      	mov	r2, r6
   d7c2a:	f7ff f959 	bl	d6ee0 <hal_ble_gatt_client_write_without_response>
   d7c2e:	e028      	b.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7c30:	4815      	ldr	r0, [pc, #84]	; (d7c88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d7c32:	e026      	b.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d7c34:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7c38:	e023      	b.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d7c3a:	069a      	lsls	r2, r3, #26
   d7c3c:	d521      	bpl.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d7c3e:	2f02      	cmp	r7, #2
   d7c40:	d01f      	beq.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7c42:	89a8      	ldrh	r0, [r5, #12]
   d7c44:	2300      	movs	r3, #0
   d7c46:	4622      	mov	r2, r4
   d7c48:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7c4a:	b002      	add	sp, #8
   d7c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7c50:	f7ff b98c 	b.w	d6f6c <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7c54:	89a8      	ldrh	r0, [r5, #12]
   d7c56:	2300      	movs	r3, #0
   d7c58:	4622      	mov	r2, r4
   d7c5a:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7c5c:	b002      	add	sp, #8
   d7c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7c62:	f7ff b979 	b.w	d6f58 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d7c66:	071b      	lsls	r3, r3, #28
   d7c68:	d501      	bpl.n	d7c6e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d7c6a:	2f02      	cmp	r7, #2
   d7c6c:	d102      	bne.n	d7c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d7c6e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d7c72:	e006      	b.n	d7c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7c74:	2300      	movs	r3, #0
   d7c76:	89a9      	ldrh	r1, [r5, #12]
   d7c78:	9300      	str	r3, [sp, #0]
   d7c7a:	4632      	mov	r2, r6
   d7c7c:	4623      	mov	r3, r4
   d7c7e:	f7ff f925 	bl	d6ecc <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7c82:	b002      	add	sp, #8
   d7c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7c88:	fffffef2 	.word	0xfffffef2

000d7c8c <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7c8c:	b570      	push	{r4, r5, r6, lr}
   d7c8e:	6804      	ldr	r4, [r0, #0]
   d7c90:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7c92:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7c94:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7c96:	2900      	cmp	r1, #0
   d7c98:	d12e      	bne.n	d7cf8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d7c9a:	8862      	ldrh	r2, [r4, #2]
   d7c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7ca0:	429a      	cmp	r2, r3
   d7ca2:	d029      	beq.n	d7cf8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d7ca4:	8a23      	ldrh	r3, [r4, #16]
   d7ca6:	b353      	cbz	r3, d7cfe <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d7ca8:	2518      	movs	r5, #24
   d7caa:	462a      	mov	r2, r5
   d7cac:	4668      	mov	r0, sp
   d7cae:	f003 fa82 	bl	db1b6 <memset>
    config.version = BLE_API_VERSION;
   d7cb2:	2301      	movs	r3, #1
   d7cb4:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d7cb8:	4b13      	ldr	r3, [pc, #76]	; (d7d08 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d7cba:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d7cbe:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d7cc0:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d7cc2:	8863      	ldrh	r3, [r4, #2]
   d7cc4:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d7cc8:	8a23      	ldrh	r3, [r4, #16]
   d7cca:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d7cce:	89a3      	ldrh	r3, [r4, #12]
   d7cd0:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d7cd4:	b15e      	cbz	r6, d7cee <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d7cd6:	7923      	ldrb	r3, [r4, #4]
   d7cd8:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d7cda:	bf44      	itt	mi
   d7cdc:	2302      	movmi	r3, #2
   d7cde:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d7ce0:	7923      	ldrb	r3, [r4, #4]
   d7ce2:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d7ce4:	bf42      	ittt	mi
   d7ce6:	9b05      	ldrmi	r3, [sp, #20]
   d7ce8:	f043 0301 	orrmi.w	r3, r3, #1
   d7cec:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d7cee:	2100      	movs	r1, #0
   d7cf0:	4668      	mov	r0, sp
   d7cf2:	f7ff f927 	bl	d6f44 <hal_ble_gatt_client_configure_cccd>
   d7cf6:	e004      	b.n	d7d02 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7cf8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7cfc:	e001      	b.n	d7d02 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d7cfe:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d7d02:	b006      	add	sp, #24
   d7d04:	bd70      	pop	{r4, r5, r6, pc}
   d7d06:	bf00      	nop
   d7d08:	000d7ee5 	.word	0x000d7ee5

000d7d0c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d7d0c:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d7d0e:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d7d10:	651a      	str	r2, [r3, #80]	; 0x50
   d7d12:	4770      	bx	lr

000d7d14 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d18:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d7d1a:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7d1c:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d7d1e:	9302      	str	r3, [sp, #8]
   d7d20:	2500      	movs	r5, #0
   d7d22:	4b2e      	ldr	r3, [pc, #184]	; (d7ddc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d7d24:	9300      	str	r3, [sp, #0]
   d7d26:	aa02      	add	r2, sp, #8
   d7d28:	462b      	mov	r3, r5
   d7d2a:	492d      	ldr	r1, [pc, #180]	; (d7de0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d7d2c:	9503      	str	r5, [sp, #12]
   d7d2e:	2001      	movs	r0, #1
   d7d30:	f7ff fb0e 	bl	d7350 <log_message>
   d7d34:	6833      	ldr	r3, [r6, #0]
   d7d36:	68dc      	ldr	r4, [r3, #12]
   d7d38:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7d3a:	f04f 081c 	mov.w	r8, #28
   d7d3e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d7d42:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d7d44:	f1a4 0308 	sub.w	r3, r4, #8
   d7d48:	429f      	cmp	r7, r3
   d7d4a:	6832      	ldr	r2, [r6, #0]
   d7d4c:	d017      	beq.n	d7d7e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7d4e:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d7d52:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7d56:	8a9b      	ldrh	r3, [r3, #20]
   d7d58:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d7d5c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7d60:	8adb      	ldrh	r3, [r3, #22]
   d7d62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d7d66:	8810      	ldrh	r0, [r2, #0]
   d7d68:	9500      	str	r5, [sp, #0]
   d7d6a:	4633      	mov	r3, r6
   d7d6c:	4a1d      	ldr	r2, [pc, #116]	; (d7de4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d7d6e:	a902      	add	r1, sp, #8
   d7d70:	f7ff f8a2 	bl	d6eb8 <hal_ble_gatt_client_discover_characteristics>
   d7d74:	2800      	cmp	r0, #0
   d7d76:	f104 0408 	add.w	r4, r4, #8
   d7d7a:	dae3      	bge.n	d7d44 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d7d7c:	e02a      	b.n	d7dd4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d7d7e:	6994      	ldr	r4, [r2, #24]
   d7d80:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d7d82:	2700      	movs	r7, #0
   d7d84:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d7d88:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d7d8a:	f1a4 0308 	sub.w	r3, r4, #8
   d7d8e:	429d      	cmp	r5, r3
   d7d90:	d01f      	beq.n	d7dd2 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d7d92:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7d96:	89db      	ldrh	r3, [r3, #14]
   d7d98:	b1cb      	cbz	r3, d7dce <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d7d9a:	2214      	movs	r2, #20
   d7d9c:	2100      	movs	r1, #0
   d7d9e:	a802      	add	r0, sp, #8
   d7da0:	f003 fa09 	bl	db1b6 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d7da4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7da8:	89d9      	ldrh	r1, [r3, #14]
   d7daa:	6833      	ldr	r3, [r6, #0]
   d7dac:	aa02      	add	r2, sp, #8
   d7dae:	8818      	ldrh	r0, [r3, #0]
   d7db0:	9700      	str	r7, [sp, #0]
   d7db2:	2313      	movs	r3, #19
   d7db4:	f7ff f89e 	bl	d6ef4 <hal_ble_gatt_client_read>
                if (len > 0) {
   d7db8:	b148      	cbz	r0, d7dce <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d7dba:	ab0a      	add	r3, sp, #40	; 0x28
   d7dbc:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d7dbe:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d7dc0:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d7dc4:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d7dc8:	303c      	adds	r0, #60	; 0x3c
   d7dca:	f001 ff01 	bl	d9bd0 <_ZN6StringaSEPKc>
   d7dce:	3408      	adds	r4, #8
   d7dd0:	e7db      	b.n	d7d8a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d7dd2:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d7dd4:	b00a      	add	sp, #40	; 0x28
   d7dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7dda:	bf00      	nop
   d7ddc:	000ddc57 	.word	0x000ddc57
   d7de0:	000ddc30 	.word	0x000ddc30
   d7de4:	000d8a59 	.word	0x000d8a59

000d7de8 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d7de8:	6803      	ldr	r3, [r0, #0]
   d7dea:	8818      	ldrh	r0, [r3, #0]
}
   d7dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7df0:	1ac0      	subs	r0, r0, r3
   d7df2:	bf18      	it	ne
   d7df4:	2001      	movne	r0, #1
   d7df6:	4770      	bx	lr

000d7df8 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d7df8:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d7dfa:	680b      	ldr	r3, [r1, #0]
   d7dfc:	f8c2 3002 	str.w	r3, [r2, #2]
   d7e00:	684b      	ldr	r3, [r1, #4]
   d7e02:	f8c2 3006 	str.w	r3, [r2, #6]
   d7e06:	4770      	bx	lr

000d7e08 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d7e08:	b510      	push	{r4, lr}
    return impl()->address();
   d7e0a:	680a      	ldr	r2, [r1, #0]
   d7e0c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d7e10:	6003      	str	r3, [r0, #0]
   d7e12:	6853      	ldr	r3, [r2, #4]
   d7e14:	6043      	str	r3, [r0, #4]
}
   d7e16:	bd10      	pop	{r4, pc}

000d7e18 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7e1a:	6802      	ldr	r2, [r0, #0]
   d7e1c:	680b      	ldr	r3, [r1, #0]
   d7e1e:	8812      	ldrh	r2, [r2, #0]
   d7e20:	881b      	ldrh	r3, [r3, #0]
   d7e22:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7e24:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7e26:	d10c      	bne.n	d7e42 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7e28:	4601      	mov	r1, r0
   d7e2a:	4668      	mov	r0, sp
   d7e2c:	f7ff ffec 	bl	d7e08 <_ZNK8particle13BlePeerDevice7addressEv>
   d7e30:	4621      	mov	r1, r4
   d7e32:	a802      	add	r0, sp, #8
   d7e34:	f7ff ffe8 	bl	d7e08 <_ZNK8particle13BlePeerDevice7addressEv>
   d7e38:	a902      	add	r1, sp, #8
   d7e3a:	4668      	mov	r0, sp
   d7e3c:	f7ff fc54 	bl	d76e8 <_ZNK8particle10BleAddresseqERKS0_>
   d7e40:	b900      	cbnz	r0, d7e44 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d7e42:	2000      	movs	r0, #0
}
   d7e44:	b004      	add	sp, #16
   d7e46:	bd10      	pop	{r4, pc}

000d7e48 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7e48:	b510      	push	{r4, lr}
   d7e4a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7e4c:	2034      	movs	r0, #52	; 0x34
   d7e4e:	f7fc f924 	bl	d409a <_Znwj>
   d7e52:	4601      	mov	r1, r0
   d7e54:	b168      	cbz	r0, d7e72 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e56:	2300      	movs	r3, #0
   d7e58:	6003      	str	r3, [r0, #0]
   d7e5a:	6043      	str	r3, [r0, #4]
   d7e5c:	6083      	str	r3, [r0, #8]
   d7e5e:	60c3      	str	r3, [r0, #12]
   d7e60:	6103      	str	r3, [r0, #16]
   d7e62:	6143      	str	r3, [r0, #20]
   d7e64:	6183      	str	r3, [r0, #24]
   d7e66:	61c3      	str	r3, [r0, #28]
   d7e68:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d7e6a:	6243      	str	r3, [r0, #36]	; 0x24
   d7e6c:	6283      	str	r3, [r0, #40]	; 0x28
   d7e6e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7e70:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7e72:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7e74:	b919      	cbnz	r1, d7e7e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d7e76:	4a0a      	ldr	r2, [pc, #40]	; (d7ea0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7e78:	200a      	movs	r0, #10
   d7e7a:	f7ff fa61 	bl	d7340 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d7e7e:	2000      	movs	r0, #0
   d7e80:	f7fe ffe2 	bl	d6e48 <hal_ble_stack_init>
   d7e84:	b120      	cbz	r0, d7e90 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d7e86:	4a06      	ldr	r2, [pc, #24]	; (d7ea0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7e88:	2100      	movs	r1, #0
   d7e8a:	200a      	movs	r0, #10
   d7e8c:	f7ff fa58 	bl	d7340 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d7e90:	2200      	movs	r2, #0
   d7e92:	6821      	ldr	r1, [r4, #0]
   d7e94:	4803      	ldr	r0, [pc, #12]	; (d7ea4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d7e96:	f7ff f84b 	bl	d6f30 <hal_ble_set_callback_on_periph_link_events>
}
   d7e9a:	4620      	mov	r0, r4
   d7e9c:	bd10      	pop	{r4, pc}
   d7e9e:	bf00      	nop
   d7ea0:	000d7071 	.word	0x000d7071
   d7ea4:	000d8385 	.word	0x000d8385

000d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7ea8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d7eaa:	4c0a      	ldr	r4, [pc, #40]	; (d7ed4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d7eac:	6823      	ldr	r3, [r4, #0]
   d7eae:	07db      	lsls	r3, r3, #31
   d7eb0:	d40e      	bmi.n	d7ed0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7eb2:	4620      	mov	r0, r4
   d7eb4:	f7fc f8f7 	bl	d40a6 <__cxa_guard_acquire>
   d7eb8:	b150      	cbz	r0, d7ed0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7eba:	4807      	ldr	r0, [pc, #28]	; (d7ed8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7ebc:	f7ff ffc4 	bl	d7e48 <_ZN8particle14BleLocalDeviceC1Ev>
   d7ec0:	4620      	mov	r0, r4
   d7ec2:	f7fc f8f5 	bl	d40b0 <__cxa_guard_release>
   d7ec6:	4a05      	ldr	r2, [pc, #20]	; (d7edc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d7ec8:	4905      	ldr	r1, [pc, #20]	; (d7ee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d7eca:	4803      	ldr	r0, [pc, #12]	; (d7ed8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7ecc:	f002 f9d6 	bl	da27c <__aeabi_atexit>
    return instance;
}
   d7ed0:	4801      	ldr	r0, [pc, #4]	; (d7ed8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7ed2:	bd10      	pop	{r4, pc}
   d7ed4:	2003e34c 	.word	0x2003e34c
   d7ed8:	2003e348 	.word	0x2003e348
   d7edc:	2003d628 	.word	0x2003d628
   d7ee0:	000d8077 	.word	0x000d8077

000d7ee4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7ee4:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7ee6:	6803      	ldr	r3, [r0, #0]
   d7ee8:	3b09      	subs	r3, #9
   d7eea:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7eec:	b08a      	sub	sp, #40	; 0x28
   d7eee:	4604      	mov	r4, r0
   d7ef0:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7ef2:	d819      	bhi.n	d7f28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d7ef4:	f7ff ffd8 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7ef8:	88a1      	ldrh	r1, [r4, #4]
   d7efa:	6800      	ldr	r0, [r0, #0]
   d7efc:	f7ff fe52 	bl	d7ba4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d7f00:	4602      	mov	r2, r0
   d7f02:	b958      	cbnz	r0, d7f1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d7f04:	2320      	movs	r3, #32
   d7f06:	9302      	str	r3, [sp, #8]
   d7f08:	4b08      	ldr	r3, [pc, #32]	; (d7f2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d7f0a:	9003      	str	r0, [sp, #12]
   d7f0c:	9300      	str	r3, [sp, #0]
   d7f0e:	aa02      	add	r2, sp, #8
   d7f10:	4603      	mov	r3, r0
   d7f12:	4907      	ldr	r1, [pc, #28]	; (d7f30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d7f14:	2032      	movs	r0, #50	; 0x32
   d7f16:	f7ff fa1b 	bl	d7350 <log_message>
   d7f1a:	e005      	b.n	d7f28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d7f1c:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d7f1e:	b11d      	cbz	r5, d7f28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d7f20:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d7f22:	68e1      	ldr	r1, [r4, #12]
   d7f24:	6920      	ldr	r0, [r4, #16]
   d7f26:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7f28:	b00a      	add	sp, #40	; 0x28
   d7f2a:	bd70      	pop	{r4, r5, r6, pc}
   d7f2c:	000ddc7a 	.word	0x000ddc7a
   d7f30:	000ddc30 	.word	0x000ddc30

000d7f34 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7f34:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7f36:	a801      	add	r0, sp, #4
   d7f38:	f7ff fbb8 	bl	d76ac <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d7f3c:	2000      	movs	r0, #0
   d7f3e:	f7fe ff83 	bl	d6e48 <hal_ble_stack_init>
   d7f42:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d7f44:	a801      	add	r0, sp, #4
   d7f46:	f7ff fbbf 	bl	d76c8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d7f4a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d7f4e:	b002      	add	sp, #8
   d7f50:	bd10      	pop	{r4, pc}
	...

000d7f54 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7f54:	b530      	push	{r4, r5, lr}
   d7f56:	b08b      	sub	sp, #44	; 0x2c
   d7f58:	460d      	mov	r5, r1
    WiringBleLock lk;
   d7f5a:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7f5c:	4614      	mov	r4, r2
    WiringBleLock lk;
   d7f5e:	f7ff fba5 	bl	d76ac <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d7f62:	b1b5      	cbz	r5, d7f92 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7f64:	b1ac      	cbz	r4, d7f92 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7f66:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7f68:	a902      	add	r1, sp, #8
   d7f6a:	480d      	ldr	r0, [pc, #52]	; (d7fa0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d7f6c:	9406      	str	r4, [sp, #24]
   d7f6e:	9202      	str	r2, [sp, #8]
   d7f70:	9203      	str	r2, [sp, #12]
   d7f72:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d7f74:	9207      	str	r2, [sp, #28]
   d7f76:	9208      	str	r2, [sp, #32]
   d7f78:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d7f7a:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7f7c:	f7fe ff6c 	bl	d6e58 <hal_ble_gap_start_scan>
   d7f80:	2800      	cmp	r0, #0
   d7f82:	bfb8      	it	lt
   d7f84:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7f86:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d7f88:	bfa8      	it	ge
   d7f8a:	9c07      	ldrge	r4, [sp, #28]
   d7f8c:	f7ff fab4 	bl	d74f8 <free>
   d7f90:	e000      	b.n	d7f94 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7f92:	4c04      	ldr	r4, [pc, #16]	; (d7fa4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d7f94:	a801      	add	r0, sp, #4
   d7f96:	f7ff fb97 	bl	d76c8 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d7f9a:	4620      	mov	r0, r4
   d7f9c:	b00b      	add	sp, #44	; 0x2c
   d7f9e:	bd30      	pop	{r4, r5, pc}
   d7fa0:	000d84f3 	.word	0x000d84f3
   d7fa4:	fffffef2 	.word	0xfffffef2

000d7fa8 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d7fa8:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d7faa:	69d8      	ldr	r0, [r3, #28]
}
   d7fac:	2800      	cmp	r0, #0
   d7fae:	bfd4      	ite	le
   d7fb0:	2000      	movle	r0, #0
   d7fb2:	2001      	movgt	r0, #1
   d7fb4:	4770      	bx	lr

000d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7fb6:	680b      	ldr	r3, [r1, #0]
   d7fb8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7fba:	b113      	cbz	r3, d7fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7fbc:	685a      	ldr	r2, [r3, #4]
   d7fbe:	3201      	adds	r2, #1
   d7fc0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7fc2:	4770      	bx	lr

000d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d7fc4:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7fc6:	f851 3b04 	ldr.w	r3, [r1], #4
   d7fca:	4604      	mov	r4, r0
   d7fcc:	f840 3b04 	str.w	r3, [r0], #4
   d7fd0:	f7ff fff1 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d7fd4:	6823      	ldr	r3, [r4, #0]
   d7fd6:	b90b      	cbnz	r3, d7fdc <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d7fd8:	f7ff fb38 	bl	d764c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d7fdc:	4620      	mov	r0, r4
   d7fde:	bd10      	pop	{r4, pc}

000d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7fe0:	b510      	push	{r4, lr}
   d7fe2:	f851 3b04 	ldr.w	r3, [r1], #4
   d7fe6:	4604      	mov	r4, r0
   d7fe8:	f840 3b04 	str.w	r3, [r0], #4
   d7fec:	f7ff ffe3 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	bd10      	pop	{r4, pc}

000d7ff4 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d7ff4:	b510      	push	{r4, lr}
   d7ff6:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7ff8:	3004      	adds	r0, #4
   d7ffa:	f7fc f9f7 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7ffe:	4620      	mov	r0, r4
   d8000:	bd10      	pop	{r4, pc}

000d8002 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d8002:	b510      	push	{r4, lr}
   d8004:	4604      	mov	r4, r0
   d8006:	3004      	adds	r0, #4
   d8008:	f7fc f9f0 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d800c:	4620      	mov	r0, r4
   d800e:	bd10      	pop	{r4, pc}

000d8010 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8010:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8012:	6804      	ldr	r4, [r0, #0]
   d8014:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8016:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8018:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d801c:	42a6      	cmp	r6, r4
   d801e:	d004      	beq.n	d802a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d8020:	1d20      	adds	r0, r4, #4
   d8022:	f7fc f9e3 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8026:	3408      	adds	r4, #8
   d8028:	e7f8      	b.n	d801c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d802a:	6828      	ldr	r0, [r5, #0]
   d802c:	f7ff fa64 	bl	d74f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8030:	4628      	mov	r0, r5
   d8032:	bd70      	pop	{r4, r5, r6, pc}

000d8034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8034:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8036:	6804      	ldr	r4, [r0, #0]
   d8038:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d803a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d803c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8040:	42a6      	cmp	r6, r4
   d8042:	d004      	beq.n	d804e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d8044:	1d20      	adds	r0, r4, #4
   d8046:	f7fc f9d1 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d804a:	3408      	adds	r4, #8
   d804c:	e7f8      	b.n	d8040 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d804e:	6828      	ldr	r0, [r5, #0]
   d8050:	f7ff fa52 	bl	d74f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8054:	4628      	mov	r0, r5
   d8056:	bd70      	pop	{r4, r5, r6, pc}

000d8058 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8058:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d805a:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d805c:	f104 0018 	add.w	r0, r4, #24
   d8060:	f7ff ffe8 	bl	d8034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8064:	f104 000c 	add.w	r0, r4, #12
   d8068:	f7ff ffd2 	bl	d8010 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d806c:	4620      	mov	r0, r4
   d806e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8072:	f7fc b814 	b.w	d409e <_ZdlPv>

000d8076 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d8076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8078:	6804      	ldr	r4, [r0, #0]
   d807a:	4607      	mov	r7, r0
   d807c:	b1c4      	cbz	r4, d80b0 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d807e:	69a5      	ldr	r5, [r4, #24]
   d8080:	69e3      	ldr	r3, [r4, #28]
   d8082:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8086:	42ae      	cmp	r6, r5
   d8088:	d004      	beq.n	d8094 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d808a:	1d28      	adds	r0, r5, #4
   d808c:	f7fc f9ae 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8090:	3508      	adds	r5, #8
   d8092:	e7f8      	b.n	d8086 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8094:	69a0      	ldr	r0, [r4, #24]
   d8096:	f7ff fa2f 	bl	d74f8 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d809a:	f104 000c 	add.w	r0, r4, #12
   d809e:	f7ff ffc9 	bl	d8034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d80a2:	4620      	mov	r0, r4
   d80a4:	f7ff ffb4 	bl	d8010 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d80a8:	2134      	movs	r1, #52	; 0x34
   d80aa:	4620      	mov	r0, r4
   d80ac:	f002 f8eb 	bl	da286 <_ZdlPvj>
   d80b0:	4638      	mov	r0, r7
   d80b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d80b4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d80b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d80b6:	2500      	movs	r5, #0
   d80b8:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d80ba:	6045      	str	r5, [r0, #4]
   d80bc:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80be:	2024      	movs	r0, #36	; 0x24
   d80c0:	f7fb ffeb 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d80c4:	4604      	mov	r4, r0
   d80c6:	b178      	cbz	r0, d80e8 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d80c8:	4603      	mov	r3, r0
   d80ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d80ce:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d80d2:	f8c0 5002 	str.w	r5, [r0, #2]
   d80d6:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d80d8:	7285      	strb	r5, [r0, #10]
   d80da:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d80dc:	60c5      	str	r5, [r0, #12]
   d80de:	6105      	str	r5, [r0, #16]
   d80e0:	6145      	str	r5, [r0, #20]
   d80e2:	6185      	str	r5, [r0, #24]
   d80e4:	61c5      	str	r5, [r0, #28]
   d80e6:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d80e8:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80ea:	2014      	movs	r0, #20
   d80ec:	9301      	str	r3, [sp, #4]
   d80ee:	f7fb ffd4 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d80f2:	4603      	mov	r3, r0
   d80f4:	b128      	cbz	r0, d8102 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d80f6:	2201      	movs	r2, #1
   d80f8:	6042      	str	r2, [r0, #4]
   d80fa:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d80fc:	4a08      	ldr	r2, [pc, #32]	; (d8120 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d80fe:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8100:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8102:	a802      	add	r0, sp, #8
   d8104:	6872      	ldr	r2, [r6, #4]
   d8106:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d810a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d810c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d810e:	f7fc f96d 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d8112:	6833      	ldr	r3, [r6, #0]
   d8114:	b90b      	cbnz	r3, d811a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d8116:	f7ff fa99 	bl	d764c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d811a:	4630      	mov	r0, r6
   d811c:	b002      	add	sp, #8
   d811e:	bd70      	pop	{r4, r5, r6, pc}
   d8120:	000ddc1c 	.word	0x000ddc1c

000d8124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d8124:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8126:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d8128:	6803      	ldr	r3, [r0, #0]
   d812a:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d812c:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d812e:	d00c      	beq.n	d814a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d8130:	b114      	cbz	r4, d8138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8132:	6863      	ldr	r3, [r4, #4]
   d8134:	3301      	adds	r3, #1
   d8136:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d8138:	6828      	ldr	r0, [r5, #0]
   d813a:	b128      	cbz	r0, d8148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d813c:	6843      	ldr	r3, [r0, #4]
   d813e:	3b01      	subs	r3, #1
   d8140:	6043      	str	r3, [r0, #4]
   d8142:	b90b      	cbnz	r3, d8148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d8144:	f7ff fa8c 	bl	d7660 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d8148:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d814a:	4628      	mov	r0, r5
   d814c:	bd38      	pop	{r3, r4, r5, pc}

000d814e <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d814e:	b510      	push	{r4, lr}
   d8150:	6802      	ldr	r2, [r0, #0]
   d8152:	680b      	ldr	r3, [r1, #0]
   d8154:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d8156:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d8158:	b110      	cbz	r0, d8160 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d815a:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d815c:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d815e:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8160:	4620      	mov	r0, r4
   d8162:	f851 3b04 	ldr.w	r3, [r1], #4
   d8166:	f840 3b04 	str.w	r3, [r0], #4
   d816a:	f7ff ffdb 	bl	d8124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d816e:	4620      	mov	r0, r4
   d8170:	bd10      	pop	{r4, pc}

000d8172 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d8172:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8176:	6803      	ldr	r3, [r0, #0]
   d8178:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d817a:	69de      	ldr	r6, [r3, #28]
   d817c:	b087      	sub	sp, #28
   d817e:	460f      	mov	r7, r1
   d8180:	4690      	mov	r8, r2
   d8182:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d8186:	42b4      	cmp	r4, r6
   d8188:	46a1      	mov	r9, r4
   d818a:	d011      	beq.n	d81b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d818c:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d8190:	a801      	add	r0, sp, #4
   d8192:	3114      	adds	r1, #20
   d8194:	f7ff faea 	bl	d776c <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d8198:	4641      	mov	r1, r8
   d819a:	a801      	add	r0, sp, #4
   d819c:	f7ff fb52 	bl	d7844 <_ZNK8particle7BleUuideqERKS0_>
   d81a0:	4605      	mov	r5, r0
   d81a2:	2800      	cmp	r0, #0
   d81a4:	d0ef      	beq.n	d8186 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d81a6:	4649      	mov	r1, r9
   d81a8:	4638      	mov	r0, r7
   d81aa:	f7ff ffd0 	bl	d814e <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d81ae:	e000      	b.n	d81b2 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d81b0:	2500      	movs	r5, #0
}
   d81b2:	4628      	mov	r0, r5
   d81b4:	b007      	add	sp, #28
   d81b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d81ba <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d81ba:	b510      	push	{r4, lr}
   d81bc:	f851 3b04 	ldr.w	r3, [r1], #4
   d81c0:	4604      	mov	r4, r0
   d81c2:	f840 3b04 	str.w	r3, [r0], #4
   d81c6:	f7ff ffad 	bl	d8124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d81ca:	4620      	mov	r0, r4
   d81cc:	bd10      	pop	{r4, pc}

000d81ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d81ce:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d81d0:	b570      	push	{r4, r5, r6, lr}
   d81d2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d81d4:	d91a      	bls.n	d820c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d81d6:	4290      	cmp	r0, r2
   d81d8:	d219      	bcs.n	d820e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d81da:	f1a1 0608 	sub.w	r6, r1, #8
   d81de:	1a51      	subs	r1, r2, r1
   d81e0:	3904      	subs	r1, #4
   d81e2:	1f15      	subs	r5, r2, #4
   d81e4:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d81e6:	1f2b      	subs	r3, r5, #4
   d81e8:	429e      	cmp	r6, r3
   d81ea:	d025      	beq.n	d8238 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d81ec:	2c04      	cmp	r4, #4
   d81ee:	d007      	beq.n	d8200 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d81f0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d81f4:	f844 3c04 	str.w	r3, [r4, #-4]
   d81f8:	4629      	mov	r1, r5
   d81fa:	4620      	mov	r0, r4
   d81fc:	f7ff fedb 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8200:	4628      	mov	r0, r5
   d8202:	f7fc f8f3 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8206:	3d08      	subs	r5, #8
   d8208:	3c08      	subs	r4, #8
   d820a:	e7ec      	b.n	d81e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d820c:	d014      	beq.n	d8238 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d820e:	1d0c      	adds	r4, r1, #4
   d8210:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d8212:	1f23      	subs	r3, r4, #4
   d8214:	429d      	cmp	r5, r3
   d8216:	d00f      	beq.n	d8238 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d8218:	2e04      	cmp	r6, #4
   d821a:	d007      	beq.n	d822c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d821c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d8220:	f846 3c04 	str.w	r3, [r6, #-4]
   d8224:	4621      	mov	r1, r4
   d8226:	4630      	mov	r0, r6
   d8228:	f7ff fec5 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d822c:	4620      	mov	r0, r4
   d822e:	f7fc f8dd 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8232:	3408      	adds	r4, #8
   d8234:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8236:	e7ec      	b.n	d8212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d8238:	bd70      	pop	{r4, r5, r6, pc}

000d823a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d823e:	6804      	ldr	r4, [r0, #0]
   d8240:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8242:	4605      	mov	r5, r0
   d8244:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d8246:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d824a:	42a7      	cmp	r7, r4
   d824c:	d018      	beq.n	d8280 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d824e:	4641      	mov	r1, r8
   d8250:	4620      	mov	r0, r4
   d8252:	f7ff fde1 	bl	d7e18 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d8256:	4606      	mov	r6, r0
   d8258:	b908      	cbnz	r0, d825e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d825a:	3408      	adds	r4, #8
   d825c:	e7f5      	b.n	d824a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d825e:	b18c      	cbz	r4, d8284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d8260:	1d20      	adds	r0, r4, #4
   d8262:	f7fc f8c3 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d8266:	682b      	ldr	r3, [r5, #0]
   d8268:	686a      	ldr	r2, [r5, #4]
   d826a:	f104 0108 	add.w	r1, r4, #8
   d826e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8272:	4620      	mov	r0, r4
   d8274:	f7ff ffab 	bl	d81ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d8278:	686b      	ldr	r3, [r5, #4]
   d827a:	3b01      	subs	r3, #1
   d827c:	606b      	str	r3, [r5, #4]
    return true;
   d827e:	e002      	b.n	d8286 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d8280:	2600      	movs	r6, #0
   d8282:	e000      	b.n	d8286 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d8284:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d8286:	4630      	mov	r0, r6
   d8288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d828c <_ZNK8particle14BleLocalDevice10disconnectEv>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
   d828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8290:	4680      	mov	r8, r0
   d8292:	b08a      	sub	sp, #40	; 0x28
    WiringBleLock lk;
   d8294:	4668      	mov	r0, sp
   d8296:	f7ff fa09 	bl	d76ac <_ZN8particle3ble13WiringBleLockC1Ev>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d829a:	f8d8 3000 	ldr.w	r3, [r8]
   d829e:	699d      	ldr	r5, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d82a0:	69de      	ldr	r6, [r3, #28]
   d82a2:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    for (auto& p : impl()->peers()) {
   d82a6:	42b5      	cmp	r5, r6
   d82a8:	462f      	mov	r7, r5
   d82aa:	d023      	beq.n	d82f4 <_ZNK8particle14BleLocalDevice10disconnectEv+0x68>
        hal_ble_conn_info_t connInfo = {};
   d82ac:	2224      	movs	r2, #36	; 0x24
   d82ae:	2100      	movs	r1, #0
   d82b0:	a801      	add	r0, sp, #4
   d82b2:	f002 ff80 	bl	db1b6 <memset>
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
   d82b6:	682b      	ldr	r3, [r5, #0]
   d82b8:	2200      	movs	r2, #0
   d82ba:	a901      	add	r1, sp, #4
   d82bc:	8818      	ldrh	r0, [r3, #0]
   d82be:	f7fe fe2d 	bl	d6f1c <hal_ble_gap_get_connection_info>
   d82c2:	2800      	cmp	r0, #0
   d82c4:	db14      	blt.n	d82f0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d82c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d82ca:	2b01      	cmp	r3, #1
   d82cc:	f105 0508 	add.w	r5, r5, #8
   d82d0:	d1e9      	bne.n	d82a6 <_ZNK8particle14BleLocalDevice10disconnectEv+0x1a>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d82d2:	683b      	ldr	r3, [r7, #0]
   d82d4:	2100      	movs	r1, #0
   d82d6:	8818      	ldrh	r0, [r3, #0]
   d82d8:	f7fe fdd0 	bl	d6e7c <hal_ble_gap_disconnect>
   d82dc:	2800      	cmp	r0, #0
   d82de:	db07      	blt.n	d82f0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x64>
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d82e0:	f8d8 0000 	ldr.w	r0, [r8]
    for (auto& p : impl()->peers()) {
        hal_ble_conn_info_t connInfo = {};
        CHECK(hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr));
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
            impl()->peers().removeOne(p);
   d82e4:	4639      	mov	r1, r7
   d82e6:	3018      	adds	r0, #24
   d82e8:	f7ff ffa7 	bl	d823a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d82ec:	2400      	movs	r4, #0
   d82ee:	e003      	b.n	d82f8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
   d82f0:	4604      	mov	r4, r0
   d82f2:	e001      	b.n	d82f8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x6c>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
   d82f4:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}

int BleLocalDevice::disconnect() const {
    WiringBleLock lk;
   d82f8:	4668      	mov	r0, sp
   d82fa:	f7ff f9e5 	bl	d76c8 <_ZN8particle3ble13WiringBleLockD1Ev>
            impl()->peers().removeOne(p);
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d82fe:	4620      	mov	r0, r4
   d8300:	b00a      	add	sp, #40	; 0x28
   d8302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8306 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8308:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d830a:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d830e:	6847      	ldr	r7, [r0, #4]
   d8310:	9300      	str	r3, [sp, #0]
   d8312:	a801      	add	r0, sp, #4
   d8314:	f7ff fe4f 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8318:	6866      	ldr	r6, [r4, #4]
   d831a:	68a3      	ldr	r3, [r4, #8]
   d831c:	429e      	cmp	r6, r3
   d831e:	db14      	blt.n	d834a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d8320:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8322:	2e00      	cmp	r6, #0
   d8324:	dd0b      	ble.n	d833e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8326:	00f0      	lsls	r0, r6, #3
   d8328:	f7ff f8de 	bl	d74e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d832c:	4605      	mov	r5, r0
   d832e:	b318      	cbz	r0, d8378 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d8330:	e894 0006 	ldmia.w	r4, {r1, r2}
   d8334:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8338:	f7ff ff49 	bl	d81ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d833c:	e000      	b.n	d8340 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d833e:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8340:	6820      	ldr	r0, [r4, #0]
   d8342:	f7ff f8d9 	bl	d74f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8346:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d8348:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d834a:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d834c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d834e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d8352:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d8356:	4629      	mov	r1, r5
   d8358:	f105 0008 	add.w	r0, r5, #8
   d835c:	f7ff ff37 	bl	d81ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8360:	b135      	cbz	r5, d8370 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d8362:	9b00      	ldr	r3, [sp, #0]
   d8364:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d8368:	a901      	add	r1, sp, #4
   d836a:	1d28      	adds	r0, r5, #4
   d836c:	f7ff fe23 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d8370:	6863      	ldr	r3, [r4, #4]
   d8372:	3301      	adds	r3, #1
   d8374:	6063      	str	r3, [r4, #4]
   d8376:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8378:	a801      	add	r0, sp, #4
   d837a:	f7fc f837 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d837e:	4628      	mov	r0, r5
   d8380:	b003      	add	sp, #12
   d8382:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8384 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8388:	4604      	mov	r4, r0
   d838a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d838c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d838e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8390:	f7ff f98c 	bl	d76ac <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d8394:	6823      	ldr	r3, [r4, #0]
   d8396:	2b03      	cmp	r3, #3
   d8398:	d002      	beq.n	d83a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d839a:	2b04      	cmp	r3, #4
   d839c:	d042      	beq.n	d8424 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d839e:	e087      	b.n	d84b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d83a0:	a804      	add	r0, sp, #16
   d83a2:	f7ff fe87 	bl	d80b4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d83a6:	9b04      	ldr	r3, [sp, #16]
   d83a8:	8922      	ldrh	r2, [r4, #8]
   d83aa:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d83ac:	6862      	ldr	r2, [r4, #4]
   d83ae:	9904      	ldr	r1, [sp, #16]
   d83b0:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d83b4:	f8c1 3002 	str.w	r3, [r1, #2]
   d83b8:	6853      	ldr	r3, [r2, #4]
   d83ba:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d83be:	a807      	add	r0, sp, #28
   d83c0:	9b04      	ldr	r3, [sp, #16]
   d83c2:	9306      	str	r3, [sp, #24]
   d83c4:	a905      	add	r1, sp, #20
   d83c6:	f7ff fdf6 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d83ca:	a906      	add	r1, sp, #24
   d83cc:	f105 0018 	add.w	r0, r5, #24
   d83d0:	f7ff ff99 	bl	d8306 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d83d4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d83d6:	a807      	add	r0, sp, #28
   d83d8:	f7fc f808 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d83dc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d83de:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d83e0:	b974      	cbnz	r4, d8400 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d83e2:	4b36      	ldr	r3, [pc, #216]	; (d84bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d83e4:	9300      	str	r3, [sp, #0]
   d83e6:	aa06      	add	r2, sp, #24
   d83e8:	4623      	mov	r3, r4
   d83ea:	4935      	ldr	r1, [pc, #212]	; (d84c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d83ec:	9407      	str	r4, [sp, #28]
   d83ee:	2032      	movs	r0, #50	; 0x32
   d83f0:	f7fe ffae 	bl	d7350 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d83f4:	9b04      	ldr	r3, [sp, #16]
   d83f6:	4621      	mov	r1, r4
   d83f8:	8818      	ldrh	r0, [r3, #0]
   d83fa:	f7fe fd3f 	bl	d6e7c <hal_ble_gap_disconnect>
   d83fe:	e00d      	b.n	d841c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d8400:	4a30      	ldr	r2, [pc, #192]	; (d84c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d8402:	9200      	str	r2, [sp, #0]
   d8404:	2300      	movs	r3, #0
   d8406:	aa06      	add	r2, sp, #24
   d8408:	492d      	ldr	r1, [pc, #180]	; (d84c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d840a:	9307      	str	r3, [sp, #28]
   d840c:	2001      	movs	r0, #1
   d840e:	f7fe ff9f 	bl	d7350 <log_message>
                if (impl->connectedCb_) {
   d8412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8414:	b113      	cbz	r3, d841c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d8416:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d8418:	a804      	add	r0, sp, #16
   d841a:	4798      	blx	r3
   d841c:	a805      	add	r0, sp, #20
   d841e:	f7fb ffe5 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8422:	e045      	b.n	d84b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d8424:	8921      	ldrh	r1, [r4, #8]
   d8426:	4628      	mov	r0, r5
   d8428:	f7ff fbbc 	bl	d7ba4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d842c:	4607      	mov	r7, r0
   d842e:	2800      	cmp	r0, #0
   d8430:	d03e      	beq.n	d84b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d8432:	6804      	ldr	r4, [r0, #0]
   d8434:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8436:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d8438:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d843c:	8022      	strh	r2, [r4, #0]
   d843e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d8442:	4299      	cmp	r1, r3
   d8444:	d003      	beq.n	d844e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d8446:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d844a:	8042      	strh	r2, [r0, #2]
   d844c:	e7f9      	b.n	d8442 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d844e:	68e6      	ldr	r6, [r4, #12]
   d8450:	6923      	ldr	r3, [r4, #16]
   d8452:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8456:	45b0      	cmp	r8, r6
   d8458:	d004      	beq.n	d8464 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d845a:	1d30      	adds	r0, r6, #4
   d845c:	f7fb ffc6 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8460:	3608      	adds	r6, #8
   d8462:	e7f8      	b.n	d8456 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8464:	2300      	movs	r3, #0
   d8466:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8468:	69a6      	ldr	r6, [r4, #24]
   d846a:	69e3      	ldr	r3, [r4, #28]
   d846c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8470:	45b0      	cmp	r8, r6
   d8472:	d004      	beq.n	d847e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d8474:	1d30      	adds	r0, r6, #4
   d8476:	f7fb ffb9 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d847a:	3608      	adds	r6, #8
   d847c:	e7f8      	b.n	d8470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d847e:	2300      	movs	r3, #0
   d8480:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d8482:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d8484:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d8486:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d8488:	b113      	cbz	r3, d8490 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d848a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d848c:	4638      	mov	r0, r7
   d848e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d8490:	2320      	movs	r3, #32
   d8492:	4a0d      	ldr	r2, [pc, #52]	; (d84c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d8494:	9306      	str	r3, [sp, #24]
   d8496:	9200      	str	r2, [sp, #0]
   d8498:	2300      	movs	r3, #0
   d849a:	4909      	ldr	r1, [pc, #36]	; (d84c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d849c:	9307      	str	r3, [sp, #28]
   d849e:	2001      	movs	r0, #1
   d84a0:	aa06      	add	r2, sp, #24
   d84a2:	f7fe ff55 	bl	d7350 <log_message>
                    impl->peers_.removeOne(*peer);
   d84a6:	4639      	mov	r1, r7
   d84a8:	f105 0018 	add.w	r0, r5, #24
   d84ac:	f7ff fec5 	bl	d823a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d84b0:	a803      	add	r0, sp, #12
   d84b2:	f7ff f909 	bl	d76c8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d84b6:	b00e      	add	sp, #56	; 0x38
   d84b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84bc:	000ddc92 	.word	0x000ddc92
   d84c0:	000ddc30 	.word	0x000ddc30
   d84c4:	000ddcb8 	.word	0x000ddcb8
   d84c8:	000ddcd5 	.word	0x000ddcd5

000d84cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d84cc:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d84ce:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d84d0:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d84d2:	dd06      	ble.n	d84e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d84d4:	2154      	movs	r1, #84	; 0x54
   d84d6:	4369      	muls	r1, r5
   d84d8:	6800      	ldr	r0, [r0, #0]
   d84da:	f7ff f815 	bl	d7508 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d84de:	b920      	cbnz	r0, d84ea <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d84e0:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d84e2:	6800      	ldr	r0, [r0, #0]
   d84e4:	f7ff f808 	bl	d74f8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d84e8:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d84ea:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d84ec:	60a5      	str	r5, [r4, #8]
        return true;
   d84ee:	2001      	movs	r0, #1
    }
   d84f0:	bd38      	pop	{r3, r4, r5, pc}

000d84f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d84f2:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d84f4:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d84f6:	b0c0      	sub	sp, #256	; 0x100
   d84f8:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d84fa:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d84fc:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d84fe:	a801      	add	r0, sp, #4
   d8500:	2100      	movs	r1, #0
   d8502:	f002 fe58 	bl	db1b6 <memset>
   d8506:	a803      	add	r0, sp, #12
   d8508:	f7ff fa8c 	bl	d7a24 <_ZN8particle18BleAdvertisingDataC1Ev>
   d850c:	a80c      	add	r0, sp, #48	; 0x30
   d850e:	f7ff fa89 	bl	d7a24 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d8512:	462a      	mov	r2, r5
   d8514:	ab01      	add	r3, sp, #4
   d8516:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d851a:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d851c:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d851e:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d8520:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d8522:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d8524:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d8528:	a80c      	add	r0, sp, #48	; 0x30
   d852a:	f7ff fa0c 	bl	d7946 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d852e:	89aa      	ldrh	r2, [r5, #12]
   d8530:	6869      	ldr	r1, [r5, #4]
   d8532:	a803      	add	r0, sp, #12
   d8534:	f7ff fa07 	bl	d7946 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d8538:	69a5      	ldr	r5, [r4, #24]
   d853a:	b11d      	cbz	r5, d8544 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d853c:	69e1      	ldr	r1, [r4, #28]
   d853e:	a801      	add	r0, sp, #4
   d8540:	47a8      	blx	r5
   d8542:	e03c      	b.n	d85be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d8544:	68e0      	ldr	r0, [r4, #12]
   d8546:	b198      	cbz	r0, d8570 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d8548:	6963      	ldr	r3, [r4, #20]
   d854a:	6922      	ldr	r2, [r4, #16]
   d854c:	4293      	cmp	r3, r2
   d854e:	d239      	bcs.n	d85c4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d8550:	1c5a      	adds	r2, r3, #1
   d8552:	6162      	str	r2, [r4, #20]
   d8554:	fb06 0003 	mla	r0, r6, r3, r0
   d8558:	2251      	movs	r2, #81	; 0x51
   d855a:	a901      	add	r1, sp, #4
   d855c:	f002 fe05 	bl	db16a <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d8560:	6962      	ldr	r2, [r4, #20]
   d8562:	6923      	ldr	r3, [r4, #16]
   d8564:	429a      	cmp	r2, r3
   d8566:	d32d      	bcc.n	d85c4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d8568:	4628      	mov	r0, r5
   d856a:	f7fe fc7d 	bl	d6e68 <hal_ble_gap_stop_scan>
   d856e:	e029      	b.n	d85c4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d8570:	4632      	mov	r2, r6
   d8572:	a901      	add	r1, sp, #4
   d8574:	a816      	add	r0, sp, #88	; 0x58
   d8576:	f002 fdf8 	bl	db16a <memcpy>
   d857a:	4632      	mov	r2, r6
   d857c:	a916      	add	r1, sp, #88	; 0x58
   d857e:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8580:	6865      	ldr	r5, [r4, #4]
   d8582:	f002 fdf2 	bl	db16a <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8586:	68a3      	ldr	r3, [r4, #8]
   d8588:	429d      	cmp	r5, r3
   d858a:	db04      	blt.n	d8596 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d858c:	1c69      	adds	r1, r5, #1
   d858e:	4620      	mov	r0, r4
   d8590:	f7ff ff9c 	bl	d84cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8594:	b1b0      	cbz	r0, d85c4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8596:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8598:	6822      	ldr	r2, [r4, #0]
   d859a:	2654      	movs	r6, #84	; 0x54
   d859c:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d85a0:	fb06 2203 	mla	r2, r6, r3, r2
   d85a4:	1b52      	subs	r2, r2, r5
   d85a6:	4629      	mov	r1, r5
   d85a8:	19a8      	adds	r0, r5, r6
   d85aa:	f002 fde9 	bl	db180 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d85ae:	4632      	mov	r2, r6
   d85b0:	a92b      	add	r1, sp, #172	; 0xac
   d85b2:	4628      	mov	r0, r5
   d85b4:	f002 fdd9 	bl	db16a <memcpy>
    ++size_;
   d85b8:	6863      	ldr	r3, [r4, #4]
   d85ba:	3301      	adds	r3, #1
   d85bc:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d85be:	6963      	ldr	r3, [r4, #20]
   d85c0:	3301      	adds	r3, #1
   d85c2:	6163      	str	r3, [r4, #20]
        }
    }
   d85c4:	b040      	add	sp, #256	; 0x100
   d85c6:	bd70      	pop	{r4, r5, r6, pc}

000d85c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d85c8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d85ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85cc:	4606      	mov	r6, r0
   d85ce:	460c      	mov	r4, r1
   d85d0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d85d2:	d914      	bls.n	d85fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d85d4:	4290      	cmp	r0, r2
   d85d6:	d213      	bcs.n	d8600 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d85d8:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d85dc:	1a6c      	subs	r4, r5, r1
   d85de:	f1a1 0708 	sub.w	r7, r1, #8
   d85e2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d85e4:	42af      	cmp	r7, r5
   d85e6:	d018      	beq.n	d861a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d85e8:	b11c      	cbz	r4, d85f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d85ea:	4629      	mov	r1, r5
   d85ec:	4620      	mov	r0, r4
   d85ee:	f7ff fcf7 	bl	d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d85f2:	1d28      	adds	r0, r5, #4
   d85f4:	f7fb fefa 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d85f8:	3d08      	subs	r5, #8
   d85fa:	3c08      	subs	r4, #8
   d85fc:	e7f2      	b.n	d85e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d85fe:	d00c      	beq.n	d861a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8600:	42ac      	cmp	r4, r5
   d8602:	d00a      	beq.n	d861a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d8604:	b11e      	cbz	r6, d860e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d8606:	4621      	mov	r1, r4
   d8608:	4630      	mov	r0, r6
   d860a:	f7ff fce9 	bl	d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d860e:	1d20      	adds	r0, r4, #4
   d8610:	f7fb feec 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8614:	3408      	adds	r4, #8
   d8616:	3608      	adds	r6, #8
   d8618:	e7f2      	b.n	d8600 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d861a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d861c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d861c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d861e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8620:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8622:	dd0b      	ble.n	d863c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8624:	00f0      	lsls	r0, r6, #3
   d8626:	f7fe ff5f 	bl	d74e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d862a:	4604      	mov	r4, r0
   d862c:	b170      	cbz	r0, d864c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d862e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8632:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8636:	f7ff ffc7 	bl	d85c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d863a:	e000      	b.n	d863e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d863c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d863e:	6828      	ldr	r0, [r5, #0]
   d8640:	f7fe ff5a 	bl	d74f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8644:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d8646:	60ae      	str	r6, [r5, #8]
        return true;
   d8648:	2001      	movs	r0, #1
   d864a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d864c:	bd70      	pop	{r4, r5, r6, pc}

000d864e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d864e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8652:	2300      	movs	r3, #0
   d8654:	6003      	str	r3, [r0, #0]
   d8656:	6043      	str	r3, [r0, #4]
   d8658:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d865a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d865c:	6849      	ldr	r1, [r1, #4]
   d865e:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d8660:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d8662:	dd13      	ble.n	d868c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d8664:	f7ff ffda 	bl	d861c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8668:	b180      	cbz	r0, d868c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d866a:	6835      	ldr	r5, [r6, #0]
   d866c:	6873      	ldr	r3, [r6, #4]
   d866e:	6827      	ldr	r7, [r4, #0]
   d8670:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d8674:	4545      	cmp	r5, r8
   d8676:	d007      	beq.n	d8688 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d8678:	b11f      	cbz	r7, d8682 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d867a:	4629      	mov	r1, r5
   d867c:	4638      	mov	r0, r7
   d867e:	f7ff fcaf 	bl	d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d8682:	3508      	adds	r5, #8
   d8684:	3708      	adds	r7, #8
   d8686:	e7f5      	b.n	d8674 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d8688:	6873      	ldr	r3, [r6, #4]
   d868a:	6063      	str	r3, [r4, #4]
    }
}
   d868c:	4620      	mov	r0, r4
   d868e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8692 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d8692:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d8694:	680b      	ldr	r3, [r1, #0]
   d8696:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d8698:	4605      	mov	r5, r0
   d869a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d869c:	b933      	cbnz	r3, d86ac <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d869e:	4608      	mov	r0, r1
   d86a0:	f7fe ffb6 	bl	d7610 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d86a4:	b910      	cbnz	r0, d86ac <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d86a6:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d86a8:	2201      	movs	r2, #1
   d86aa:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d86ac:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d86ae:	4628      	mov	r0, r5
   d86b0:	310c      	adds	r1, #12
   d86b2:	f7ff ffcc 	bl	d864e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d86b6:	4628      	mov	r0, r5
   d86b8:	bd38      	pop	{r3, r4, r5, pc}

000d86ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d86ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d86bc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d86be:	6845      	ldr	r5, [r0, #4]
   d86c0:	4668      	mov	r0, sp
   d86c2:	f7ff fc8d 	bl	d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d86c6:	6861      	ldr	r1, [r4, #4]
   d86c8:	68a3      	ldr	r3, [r4, #8]
   d86ca:	4299      	cmp	r1, r3
   d86cc:	db05      	blt.n	d86da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d86ce:	3101      	adds	r1, #1
   d86d0:	4620      	mov	r0, r4
   d86d2:	f7ff ffa3 	bl	d861c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d86d6:	4606      	mov	r6, r0
   d86d8:	b198      	cbz	r0, d8702 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d86da:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d86dc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d86de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d86e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d86e6:	4629      	mov	r1, r5
   d86e8:	f105 0008 	add.w	r0, r5, #8
   d86ec:	f7ff ff6c 	bl	d85c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d86f0:	b11d      	cbz	r5, d86fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d86f2:	4669      	mov	r1, sp
   d86f4:	4628      	mov	r0, r5
   d86f6:	f7ff fc73 	bl	d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d86fa:	6863      	ldr	r3, [r4, #4]
   d86fc:	3301      	adds	r3, #1
   d86fe:	6063      	str	r3, [r4, #4]
   d8700:	2601      	movs	r6, #1
   d8702:	a801      	add	r0, sp, #4
   d8704:	f7fb fe72 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8708:	4630      	mov	r0, r6
   d870a:	b002      	add	sp, #8
   d870c:	bd70      	pop	{r4, r5, r6, pc}

000d870e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d870e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8712:	4606      	mov	r6, r0
   d8714:	460c      	mov	r4, r1
   d8716:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8718:	d914      	bls.n	d8744 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d871a:	4290      	cmp	r0, r2
   d871c:	d213      	bcs.n	d8746 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d871e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d8722:	1a6c      	subs	r4, r5, r1
   d8724:	f1a1 0708 	sub.w	r7, r1, #8
   d8728:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d872a:	42af      	cmp	r7, r5
   d872c:	d018      	beq.n	d8760 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d872e:	b11c      	cbz	r4, d8738 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d8730:	4629      	mov	r1, r5
   d8732:	4620      	mov	r0, r4
   d8734:	f7ff fc46 	bl	d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8738:	1d28      	adds	r0, r5, #4
   d873a:	f7fb fe57 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d873e:	3d08      	subs	r5, #8
   d8740:	3c08      	subs	r4, #8
   d8742:	e7f2      	b.n	d872a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8744:	d00c      	beq.n	d8760 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8746:	42ac      	cmp	r4, r5
   d8748:	d00a      	beq.n	d8760 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d874a:	b11e      	cbz	r6, d8754 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d874c:	4621      	mov	r1, r4
   d874e:	4630      	mov	r0, r6
   d8750:	f7ff fc38 	bl	d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8754:	1d20      	adds	r0, r4, #4
   d8756:	f7fb fe49 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d875a:	3408      	adds	r4, #8
   d875c:	3608      	adds	r6, #8
   d875e:	e7f2      	b.n	d8746 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d8760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8762 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8762:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d8764:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8766:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8768:	dd0b      	ble.n	d8782 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d876a:	00f0      	lsls	r0, r6, #3
   d876c:	f7fe febc 	bl	d74e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8770:	4604      	mov	r4, r0
   d8772:	b170      	cbz	r0, d8792 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8774:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8778:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d877c:	f7ff ffc7 	bl	d870e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8780:	e000      	b.n	d8784 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8782:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8784:	6828      	ldr	r0, [r5, #0]
   d8786:	f7fe feb7 	bl	d74f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d878a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d878c:	60ae      	str	r6, [r5, #8]
        return true;
   d878e:	2001      	movs	r0, #1
   d8790:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8792:	bd70      	pop	{r4, r5, r6, pc}

000d8794 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d8794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8798:	2300      	movs	r3, #0
   d879a:	6003      	str	r3, [r0, #0]
   d879c:	6043      	str	r3, [r0, #4]
   d879e:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d87a0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d87a2:	6849      	ldr	r1, [r1, #4]
   d87a4:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d87a6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d87a8:	dd13      	ble.n	d87d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d87aa:	f7ff ffda 	bl	d8762 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d87ae:	b180      	cbz	r0, d87d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d87b0:	6835      	ldr	r5, [r6, #0]
   d87b2:	6873      	ldr	r3, [r6, #4]
   d87b4:	6827      	ldr	r7, [r4, #0]
   d87b6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d87ba:	4545      	cmp	r5, r8
   d87bc:	d007      	beq.n	d87ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d87be:	b11f      	cbz	r7, d87c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d87c0:	4629      	mov	r1, r5
   d87c2:	4638      	mov	r0, r7
   d87c4:	f7ff fbfe 	bl	d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d87c8:	3508      	adds	r5, #8
   d87ca:	3708      	adds	r7, #8
   d87cc:	e7f5      	b.n	d87ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d87ce:	6873      	ldr	r3, [r6, #4]
   d87d0:	6063      	str	r3, [r4, #4]
    }
}
   d87d2:	4620      	mov	r0, r4
   d87d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d87d8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d87d8:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d87da:	680b      	ldr	r3, [r1, #0]
   d87dc:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d87de:	b085      	sub	sp, #20
   d87e0:	4605      	mov	r5, r0
   d87e2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d87e4:	b92b      	cbnz	r3, d87f2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d87e6:	a801      	add	r0, sp, #4
   d87e8:	f7ff ff53 	bl	d8692 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d87ec:	a801      	add	r0, sp, #4
   d87ee:	f7ff fc0f 	bl	d8010 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d87f2:	6823      	ldr	r3, [r4, #0]
   d87f4:	7adb      	ldrb	r3, [r3, #11]
   d87f6:	b93b      	cbnz	r3, d8808 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d87f8:	4621      	mov	r1, r4
   d87fa:	a801      	add	r0, sp, #4
   d87fc:	f7ff fa8a 	bl	d7d14 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d8800:	b910      	cbnz	r0, d8808 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d8802:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d8804:	2201      	movs	r2, #1
   d8806:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8808:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d880a:	4628      	mov	r0, r5
   d880c:	3118      	adds	r1, #24
   d880e:	f7ff ffc1 	bl	d8794 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d8812:	4628      	mov	r0, r5
   d8814:	b005      	add	sp, #20
   d8816:	bd30      	pop	{r4, r5, pc}

000d8818 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d8818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d881c:	460d      	mov	r5, r1
   d881e:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d8820:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d8824:	4617      	mov	r7, r2
   d8826:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d8828:	4642      	mov	r2, r8
   d882a:	2100      	movs	r1, #0
   d882c:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d882e:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d8830:	f002 fcc1 	bl	db1b6 <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d8834:	6869      	ldr	r1, [r5, #4]
   d8836:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d8838:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d883a:	ab02      	add	r3, sp, #8
   d883c:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d883e:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d8842:	ab05      	add	r3, sp, #20
   d8844:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d8848:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d884c:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d8850:	f7ff fb2a 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d8854:	4b34      	ldr	r3, [pc, #208]	; (d8928 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d8856:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d8858:	f7ff fb26 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d885c:	2200      	movs	r2, #0
   d885e:	6803      	ldr	r3, [r0, #0]
   d8860:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d8862:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d8864:	a804      	add	r0, sp, #16
   d8866:	f7fe fb4f 	bl	d6f08 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d886a:	4607      	mov	r7, r0
   d886c:	b120      	cbz	r0, d8878 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d886e:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8870:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8874:	801a      	strh	r2, [r3, #0]
        return ret;
   d8876:	e053      	b.n	d8920 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d8878:	4629      	mov	r1, r5
   d887a:	4630      	mov	r0, r6
   d887c:	f7ff fabc 	bl	d7df8 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8880:	f7ff fb12 	bl	d7ea8 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8884:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d8886:	6803      	ldr	r3, [r0, #0]
   d8888:	ad12      	add	r5, sp, #72	; 0x48
   d888a:	f103 0818 	add.w	r8, r3, #24
   d888e:	f851 3b04 	ldr.w	r3, [r1], #4
   d8892:	f845 3d20 	str.w	r3, [r5, #-32]!
   d8896:	a80b      	add	r0, sp, #44	; 0x2c
   d8898:	f7ff fb8d 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d889c:	4629      	mov	r1, r5
   d889e:	4640      	mov	r0, r8
   d88a0:	f7ff fd31 	bl	d8306 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d88a4:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88a6:	a80b      	add	r0, sp, #44	; 0x2c
   d88a8:	f7fb fda0 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88ac:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d88ae:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d88b0:	f1b8 0f00 	cmp.w	r8, #0
   d88b4:	d114      	bne.n	d88e0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d88b6:	4b1d      	ldr	r3, [pc, #116]	; (d892c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d88b8:	9300      	str	r3, [sp, #0]
   d88ba:	462a      	mov	r2, r5
   d88bc:	4643      	mov	r3, r8
   d88be:	491c      	ldr	r1, [pc, #112]	; (d8930 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d88c0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d88c4:	2032      	movs	r0, #50	; 0x32
   d88c6:	f7fe fd43 	bl	d7350 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d88ca:	6833      	ldr	r3, [r6, #0]
   d88cc:	4641      	mov	r1, r8
   d88ce:	8818      	ldrh	r0, [r3, #0]
   d88d0:	f7fe fad4 	bl	d6e7c <hal_ble_gap_disconnect>
   d88d4:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d88d6:	4817      	ldr	r0, [pc, #92]	; (d8934 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d88d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d88dc:	801a      	strh	r2, [r3, #0]
   d88de:	e01f      	b.n	d8920 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d88e0:	4b15      	ldr	r3, [pc, #84]	; (d8938 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d88e2:	9300      	str	r3, [sp, #0]
   d88e4:	462a      	mov	r2, r5
   d88e6:	463b      	mov	r3, r7
   d88e8:	4911      	ldr	r1, [pc, #68]	; (d8930 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d88ea:	970b      	str	r7, [sp, #44]	; 0x2c
   d88ec:	4648      	mov	r0, r9
   d88ee:	f7fe fd2f 	bl	d7350 <log_message>
    if (automatic) {
   d88f2:	b1a4      	cbz	r4, d891e <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d88f4:	4631      	mov	r1, r6
   d88f6:	4628      	mov	r0, r5
   d88f8:	f7ff ff6e 	bl	d87d8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d88fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d88fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8900:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d8904:	42a6      	cmp	r6, r4
   d8906:	d005      	beq.n	d8914 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d8908:	4620      	mov	r0, r4
   d890a:	2101      	movs	r1, #1
   d890c:	f7ff f9be 	bl	d7c8c <_ZNK8particle17BleCharacteristic9subscribeEb>
   d8910:	3408      	adds	r4, #8
   d8912:	e7f7      	b.n	d8904 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d8914:	4628      	mov	r0, r5
   d8916:	f7ff fb8d 	bl	d8034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d891a:	2000      	movs	r0, #0
   d891c:	e000      	b.n	d8920 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d891e:	4620      	mov	r0, r4
}
   d8920:	b013      	add	sp, #76	; 0x4c
   d8922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8926:	bf00      	nop
   d8928:	000d8385 	.word	0x000d8385
   d892c:	000ddcf4 	.word	0x000ddcf4
   d8930:	000ddc30 	.word	0x000ddc30
   d8934:	fffffefc 	.word	0xfffffefc
   d8938:	000ddd10 	.word	0x000ddd10

000d893c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d893c:	b570      	push	{r4, r5, r6, lr}
   d893e:	4604      	mov	r4, r0
   d8940:	4615      	mov	r5, r2
   d8942:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d8944:	f7ff fbb6 	bl	d80b4 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d8948:	4633      	mov	r3, r6
   d894a:	2200      	movs	r2, #0
   d894c:	4629      	mov	r1, r5
   d894e:	4620      	mov	r0, r4
   d8950:	f7ff ff62 	bl	d8818 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d8954:	4620      	mov	r0, r4
   d8956:	bd70      	pop	{r4, r5, r6, pc}

000d8958 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8958:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d895a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d895c:	6845      	ldr	r5, [r0, #4]
   d895e:	4668      	mov	r0, sp
   d8960:	f7ff fb30 	bl	d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8964:	6861      	ldr	r1, [r4, #4]
   d8966:	68a3      	ldr	r3, [r4, #8]
   d8968:	4299      	cmp	r1, r3
   d896a:	db05      	blt.n	d8978 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d896c:	3101      	adds	r1, #1
   d896e:	4620      	mov	r0, r4
   d8970:	f7ff fef7 	bl	d8762 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8974:	4606      	mov	r6, r0
   d8976:	b198      	cbz	r0, d89a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d8978:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d897a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d897c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8980:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8984:	4629      	mov	r1, r5
   d8986:	f105 0008 	add.w	r0, r5, #8
   d898a:	f7ff fec0 	bl	d870e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d898e:	b11d      	cbz	r5, d8998 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8990:	4669      	mov	r1, sp
   d8992:	4628      	mov	r0, r5
   d8994:	f7ff fb16 	bl	d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d8998:	6863      	ldr	r3, [r4, #4]
   d899a:	3301      	adds	r3, #1
   d899c:	6063      	str	r3, [r4, #4]
   d899e:	2601      	movs	r6, #1
   d89a0:	a801      	add	r0, sp, #4
   d89a2:	f7fb fd23 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d89a6:	4630      	mov	r0, r6
   d89a8:	b002      	add	sp, #8
   d89aa:	bd70      	pop	{r4, r5, r6, pc}

000d89ac <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d89ac:	b510      	push	{r4, lr}
   d89ae:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d89b0:	6840      	ldr	r0, [r0, #4]
   d89b2:	b108      	cbz	r0, d89b8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d89b4:	f7fb fb73 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d89b8:	4620      	mov	r0, r4
   d89ba:	bd10      	pop	{r4, pc}

000d89bc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d89bc:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d89be:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d89c0:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d89c2:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d89c6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d89ca:	f001 f88d 	bl	d9ae8 <_ZN6StringD1Ev>
   d89ce:	4668      	mov	r0, sp
   d89d0:	f7ff ffec 	bl	d89ac <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d89d4:	b003      	add	sp, #12
   d89d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d89dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d89dc:	b538      	push	{r3, r4, r5, lr}
   d89de:	2300      	movs	r3, #0
   d89e0:	4604      	mov	r4, r0
   d89e2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d89e4:	2014      	movs	r0, #20
   d89e6:	460d      	mov	r5, r1
   d89e8:	f7fb fb57 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d89ec:	b128      	cbz	r0, d89fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d89ee:	2301      	movs	r3, #1
   d89f0:	6043      	str	r3, [r0, #4]
   d89f2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d89f4:	4b02      	ldr	r3, [pc, #8]	; (d8a00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d89f6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d89f8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d89fa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d89fc:	4620      	mov	r0, r4
   d89fe:	bd38      	pop	{r3, r4, r5, pc}
   d8a00:	000ddbe4 	.word	0x000ddbe4

000d8a04 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d8a04:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8a06:	2500      	movs	r5, #0
   d8a08:	b086      	sub	sp, #24
   d8a0a:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8a0c:	6045      	str	r5, [r0, #4]
   d8a0e:	4604      	mov	r4, r0
   d8a10:	2054      	movs	r0, #84	; 0x54
   d8a12:	f7fb fb42 	bl	d409a <_Znwj>
   d8a16:	f8cd d010 	str.w	sp, [sp, #16]
   d8a1a:	4606      	mov	r6, r0
   d8a1c:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8a1e:	b108      	cbz	r0, d8a24 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d8a20:	f7ff f8a0 	bl	d7b64 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8a24:	4631      	mov	r1, r6
   d8a26:	ab01      	add	r3, sp, #4
   d8a28:	aa02      	add	r2, sp, #8
   d8a2a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8a2c:	9505      	str	r5, [sp, #20]
   d8a2e:	f7ff ffd5 	bl	d89dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8a32:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8a34:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8a36:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8a38:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8a3a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8a3c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8a3e:	f7fb fcd5 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8a42:	a804      	add	r0, sp, #16
   d8a44:	f7ff ffb2 	bl	d89ac <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d8a48:	6823      	ldr	r3, [r4, #0]
   d8a4a:	b90b      	cbnz	r3, d8a50 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d8a4c:	f7fe fdfe 	bl	d764c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d8a50:	4620      	mov	r0, r4
   d8a52:	b006      	add	sp, #24
   d8a54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8a58 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d8a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d8a5c:	f8df 8104 	ldr.w	r8, [pc, #260]	; d8b64 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d8a60:	b08c      	sub	sp, #48	; 0x30
   d8a62:	4605      	mov	r5, r0
   d8a64:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8a66:	2600      	movs	r6, #0
   d8a68:	682b      	ldr	r3, [r5, #0]
   d8a6a:	429e      	cmp	r6, r3
   d8a6c:	d275      	bcs.n	d8b5a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d8a6e:	a802      	add	r0, sp, #8
   d8a70:	f7ff ffc8 	bl	d8a04 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d8a74:	9b02      	ldr	r3, [sp, #8]
   d8a76:	892a      	ldrh	r2, [r5, #8]
   d8a78:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d8a7a:	686b      	ldr	r3, [r5, #4]
   d8a7c:	9802      	ldr	r0, [sp, #8]
   d8a7e:	242a      	movs	r4, #42	; 0x2a
   d8a80:	4374      	muls	r4, r6
   d8a82:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d8a84:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d8a86:	7e5b      	ldrb	r3, [r3, #25]
   d8a88:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d8a8c:	bf1e      	ittt	ne
   d8a8e:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d8a92:	f043 0302 	orrne.w	r3, r3, #2
   d8a96:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d8a9a:	686b      	ldr	r3, [r5, #4]
   d8a9c:	4423      	add	r3, r4
   d8a9e:	7e5b      	ldrb	r3, [r3, #25]
   d8aa0:	075b      	lsls	r3, r3, #29
   d8aa2:	bf42      	ittt	mi
   d8aa4:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8aa8:	f043 0304 	orrmi.w	r3, r3, #4
   d8aac:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d8ab0:	686b      	ldr	r3, [r5, #4]
   d8ab2:	4423      	add	r3, r4
   d8ab4:	7e5b      	ldrb	r3, [r3, #25]
   d8ab6:	0719      	lsls	r1, r3, #28
   d8ab8:	bf42      	ittt	mi
   d8aba:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8abe:	f043 0308 	orrmi.w	r3, r3, #8
   d8ac2:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d8ac6:	686b      	ldr	r3, [r5, #4]
   d8ac8:	4423      	add	r3, r4
   d8aca:	7e5b      	ldrb	r3, [r3, #25]
   d8acc:	06da      	lsls	r2, r3, #27
   d8ace:	bf42      	ittt	mi
   d8ad0:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8ad4:	f043 0310 	orrmi.w	r3, r3, #16
   d8ad8:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d8adc:	686b      	ldr	r3, [r5, #4]
   d8ade:	4423      	add	r3, r4
   d8ae0:	7e5b      	ldrb	r3, [r3, #25]
   d8ae2:	069b      	lsls	r3, r3, #26
   d8ae4:	bf42      	ittt	mi
   d8ae6:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8aea:	f043 0320 	orrmi.w	r3, r3, #32
   d8aee:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d8af2:	6869      	ldr	r1, [r5, #4]
   d8af4:	4421      	add	r1, r4
   d8af6:	3104      	adds	r1, #4
   d8af8:	f7fe fe98 	bl	d782c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d8afc:	686a      	ldr	r2, [r5, #4]
   d8afe:	9b02      	ldr	r3, [sp, #8]
   d8b00:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d8b02:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d8b04:	8be2      	ldrh	r2, [r4, #30]
   d8b06:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d8b08:	8c22      	ldrh	r2, [r4, #32]
   d8b0a:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d8b0c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d8b0e:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d8b10:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d8b12:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d8b14:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d8b16:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d8b18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d8b1a:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8b1c:	6838      	ldr	r0, [r7, #0]
   d8b1e:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d8b22:	a804      	add	r0, sp, #16
   d8b24:	f7ff fa4e 	bl	d7fc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8b28:	4620      	mov	r0, r4
   d8b2a:	a904      	add	r1, sp, #16
   d8b2c:	f7ff ff14 	bl	d8958 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d8b30:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8b32:	a805      	add	r0, sp, #20
   d8b34:	f7fb fc5a 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b38:	b954      	cbnz	r4, d8b50 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d8b3a:	2320      	movs	r3, #32
   d8b3c:	9304      	str	r3, [sp, #16]
   d8b3e:	f8cd 8000 	str.w	r8, [sp]
   d8b42:	4623      	mov	r3, r4
   d8b44:	aa04      	add	r2, sp, #16
   d8b46:	4906      	ldr	r1, [pc, #24]	; (d8b60 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d8b48:	9405      	str	r4, [sp, #20]
   d8b4a:	2032      	movs	r0, #50	; 0x32
   d8b4c:	f7fe fc00 	bl	d7350 <log_message>
   d8b50:	a803      	add	r0, sp, #12
   d8b52:	f7fb fc4b 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8b56:	3601      	adds	r6, #1
   d8b58:	e786      	b.n	d8a68 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d8b5a:	b00c      	add	sp, #48	; 0x30
   d8b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b60:	000ddc30 	.word	0x000ddc30
   d8b64:	000ddd2d 	.word	0x000ddd2d

000d8b68 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8b68:	b510      	push	{r4, lr}
   d8b6a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8b6c:	6840      	ldr	r0, [r0, #4]
   d8b6e:	b108      	cbz	r0, d8b74 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8b70:	f7fb fa95 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d8b74:	4620      	mov	r0, r4
   d8b76:	bd10      	pop	{r4, pc}

000d8b78 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8b78:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8b7a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8b7c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8b7e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d8b82:	4668      	mov	r0, sp
   d8b84:	f7ff fff0 	bl	d8b68 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8b88:	b003      	add	sp, #12
   d8b8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8b90:	b538      	push	{r3, r4, r5, lr}
   d8b92:	2300      	movs	r3, #0
   d8b94:	4604      	mov	r4, r0
   d8b96:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b98:	2014      	movs	r0, #20
   d8b9a:	460d      	mov	r5, r1
   d8b9c:	f7fb fa7d 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8ba0:	b128      	cbz	r0, d8bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8ba2:	2301      	movs	r3, #1
   d8ba4:	6043      	str	r3, [r0, #4]
   d8ba6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8ba8:	4b02      	ldr	r3, [pc, #8]	; (d8bb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d8baa:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8bac:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8bae:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8bb0:	4620      	mov	r0, r4
   d8bb2:	bd38      	pop	{r3, r4, r5, pc}
   d8bb4:	000ddc00 	.word	0x000ddc00

000d8bb8 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d8bb8:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8bba:	2500      	movs	r5, #0
   d8bbc:	b086      	sub	sp, #24
   d8bbe:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8bc0:	6045      	str	r5, [r0, #4]
   d8bc2:	4604      	mov	r4, r0
   d8bc4:	2018      	movs	r0, #24
   d8bc6:	f7fb fa68 	bl	d409a <_Znwj>
   d8bca:	f8cd d010 	str.w	sp, [sp, #16]
   d8bce:	4606      	mov	r6, r0
   d8bd0:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8bd2:	b118      	cbz	r0, d8bdc <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d8bd4:	f7fe fd96 	bl	d7704 <_ZN8particle7BleUuidC1Ev>
   d8bd8:	82b5      	strh	r5, [r6, #20]
   d8bda:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8bdc:	4631      	mov	r1, r6
   d8bde:	ab01      	add	r3, sp, #4
   d8be0:	aa02      	add	r2, sp, #8
   d8be2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8be4:	9505      	str	r5, [sp, #20]
   d8be6:	f7ff ffd3 	bl	d8b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8bea:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8bec:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8bee:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8bf0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8bf2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8bf4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8bf6:	f7fb fbf9 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8bfa:	a804      	add	r0, sp, #16
   d8bfc:	f7ff ffb4 	bl	d8b68 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d8c00:	6823      	ldr	r3, [r4, #0]
   d8c02:	b90b      	cbnz	r3, d8c08 <_ZN8particle10BleServiceC1Ev+0x50>
   d8c04:	f7fe fd22 	bl	d764c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8c08:	4620      	mov	r0, r4
   d8c0a:	b006      	add	sp, #24
   d8c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8c10 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d8c14:	f8df 8080 	ldr.w	r8, [pc, #128]	; d8c98 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8c18:	b08c      	sub	sp, #48	; 0x30
   d8c1a:	4606      	mov	r6, r0
   d8c1c:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8c1e:	2500      	movs	r5, #0
   d8c20:	6833      	ldr	r3, [r6, #0]
   d8c22:	429d      	cmp	r5, r3
   d8c24:	d233      	bcs.n	d8c8e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d8c26:	a802      	add	r0, sp, #8
   d8c28:	f7ff ffc6 	bl	d8bb8 <_ZN8particle10BleServiceC1Ev>
   d8c2c:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d8c2e:	6871      	ldr	r1, [r6, #4]
   d8c30:	9802      	ldr	r0, [sp, #8]
   d8c32:	436c      	muls	r4, r5
   d8c34:	4421      	add	r1, r4
   d8c36:	3104      	adds	r1, #4
   d8c38:	f7fe fdf8 	bl	d782c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d8c3c:	6873      	ldr	r3, [r6, #4]
   d8c3e:	9a02      	ldr	r2, [sp, #8]
   d8c40:	4423      	add	r3, r4
   d8c42:	a902      	add	r1, sp, #8
   d8c44:	8b1b      	ldrh	r3, [r3, #24]
   d8c46:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d8c48:	6873      	ldr	r3, [r6, #4]
   d8c4a:	441c      	add	r4, r3
   d8c4c:	8b63      	ldrh	r3, [r4, #26]
   d8c4e:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d8c50:	6838      	ldr	r0, [r7, #0]
   d8c52:	f100 040c 	add.w	r4, r0, #12
   d8c56:	a804      	add	r0, sp, #16
   d8c58:	f7ff f9c2 	bl	d7fe0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	a904      	add	r1, sp, #16
   d8c60:	f7ff fd2b 	bl	d86ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d8c64:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8c66:	a805      	add	r0, sp, #20
   d8c68:	f7fb fbc0 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c6c:	b954      	cbnz	r4, d8c84 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d8c6e:	2320      	movs	r3, #32
   d8c70:	9304      	str	r3, [sp, #16]
   d8c72:	f8cd 8000 	str.w	r8, [sp]
   d8c76:	4623      	mov	r3, r4
   d8c78:	aa04      	add	r2, sp, #16
   d8c7a:	4906      	ldr	r1, [pc, #24]	; (d8c94 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d8c7c:	9405      	str	r4, [sp, #20]
   d8c7e:	2032      	movs	r0, #50	; 0x32
   d8c80:	f7fe fb66 	bl	d7350 <log_message>
   d8c84:	a803      	add	r0, sp, #12
   d8c86:	f7fb fbb1 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8c8a:	3501      	adds	r5, #1
   d8c8c:	e7c8      	b.n	d8c20 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d8c8e:	b00c      	add	sp, #48	; 0x30
   d8c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8c94:	000ddc30 	.word	0x000ddc30
   d8c98:	000ddd59 	.word	0x000ddd59

000d8c9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8c9c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8c9e:	4c06      	ldr	r4, [pc, #24]	; (d8cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8ca0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8ca2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8ca4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8ca6:	f7fe f9b3 	bl	d7010 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8caa:	4620      	mov	r0, r4
   d8cac:	4a03      	ldr	r2, [pc, #12]	; (d8cbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8cae:	4904      	ldr	r1, [pc, #16]	; (d8cc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8cb4:	f001 bae2 	b.w	da27c <__aeabi_atexit>
   d8cb8:	2003e350 	.word	0x2003e350
   d8cbc:	2003d628 	.word	0x2003d628
   d8cc0:	000d75ff 	.word	0x000d75ff

000d8cc4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8cc4:	2200      	movs	r2, #0
   d8cc6:	4611      	mov	r1, r2
   d8cc8:	6840      	ldr	r0, [r0, #4]
   d8cca:	f7fe bbd5 	b.w	d7478 <network_ready>

000d8cce <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8cce:	2200      	movs	r2, #0
   d8cd0:	4611      	mov	r1, r2
   d8cd2:	6840      	ldr	r0, [r0, #4]
   d8cd4:	f7fe bbf0 	b.w	d74b8 <network_listening>

000d8cd8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8cd8:	2200      	movs	r2, #0
   d8cda:	4611      	mov	r1, r2
   d8cdc:	6840      	ldr	r0, [r0, #4]
   d8cde:	f7fe bbfb 	b.w	d74d8 <network_get_listen_timeout>

000d8ce2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8ce2:	2200      	movs	r2, #0
   d8ce4:	6840      	ldr	r0, [r0, #4]
   d8ce6:	f7fe bbef 	b.w	d74c8 <network_set_listen_timeout>

000d8cea <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8cea:	2200      	movs	r2, #0
   d8cec:	f081 0101 	eor.w	r1, r1, #1
   d8cf0:	6840      	ldr	r0, [r0, #4]
   d8cf2:	f7fe bbd9 	b.w	d74a8 <network_listen>

000d8cf6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d8cf6:	2300      	movs	r3, #0
   d8cf8:	461a      	mov	r2, r3
   d8cfa:	4619      	mov	r1, r3
   d8cfc:	6840      	ldr	r0, [r0, #4]
   d8cfe:	f7fe bbcb 	b.w	d7498 <network_off>

000d8d02 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d8d02:	2300      	movs	r3, #0
   d8d04:	461a      	mov	r2, r3
   d8d06:	4619      	mov	r1, r3
   d8d08:	6840      	ldr	r0, [r0, #4]
   d8d0a:	f7fe bbbd 	b.w	d7488 <network_on>

000d8d0e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8d0e:	2200      	movs	r2, #0
   d8d10:	4611      	mov	r1, r2
   d8d12:	6840      	ldr	r0, [r0, #4]
   d8d14:	f7fe bba0 	b.w	d7458 <network_connecting>

000d8d18 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8d18:	2200      	movs	r2, #0
   d8d1a:	2102      	movs	r1, #2
   d8d1c:	6840      	ldr	r0, [r0, #4]
   d8d1e:	f7fe bba3 	b.w	d7468 <network_disconnect>

000d8d22 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8d22:	2300      	movs	r3, #0
   d8d24:	461a      	mov	r2, r3
   d8d26:	6840      	ldr	r0, [r0, #4]
   d8d28:	f7fe bb8e 	b.w	d7448 <network_connect>

000d8d2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8d2c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8d2e:	4c08      	ldr	r4, [pc, #32]	; (d8d50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8d30:	2528      	movs	r5, #40	; 0x28
   d8d32:	462a      	mov	r2, r5
   d8d34:	2100      	movs	r1, #0
   d8d36:	4620      	mov	r0, r4
   d8d38:	f002 fa3d 	bl	db1b6 <memset>
        cid = -1;
   d8d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8d40:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8d42:	4b04      	ldr	r3, [pc, #16]	; (d8d54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8d44:	8025      	strh	r5, [r4, #0]
   d8d46:	2204      	movs	r2, #4
   d8d48:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8d4a:	4a03      	ldr	r2, [pc, #12]	; (d8d58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8d4c:	601a      	str	r2, [r3, #0]
   d8d4e:	bd38      	pop	{r3, r4, r5, pc}
   d8d50:	2003e35c 	.word	0x2003e35c
   d8d54:	2003e354 	.word	0x2003e354
   d8d58:	000ddde8 	.word	0x000ddde8

000d8d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8d5c:	4770      	bx	lr

000d8d5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d8d5e:	2000      	movs	r0, #0
   d8d60:	4770      	bx	lr

000d8d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8d62:	b510      	push	{r4, lr}
   d8d64:	2110      	movs	r1, #16
   d8d66:	4604      	mov	r4, r0
   d8d68:	f001 fa8d 	bl	da286 <_ZdlPvj>
   d8d6c:	4620      	mov	r0, r4
   d8d6e:	bd10      	pop	{r4, pc}

000d8d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d8d70:	b508      	push	{r3, lr}
      { delete this; }
   d8d72:	b108      	cbz	r0, d8d78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d8d74:	f7ff fff5 	bl	d8d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8d78:	bd08      	pop	{r3, pc}

000d8d7a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8d7a:	2200      	movs	r2, #0
   d8d7c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8d7e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8d80:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d8d84:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8d86:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d8d8a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d8c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d8e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8d90:	680c      	ldr	r4, [r1, #0]
   d8d92:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d94:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d8d96:	bd10      	pop	{r4, pc}

000d8d98 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8d98:	b510      	push	{r4, lr}
   d8d9a:	4604      	mov	r4, r0
    free((void*)msg_);
   d8d9c:	6800      	ldr	r0, [r0, #0]
   d8d9e:	f7fe fbab 	bl	d74f8 <free>
}
   d8da2:	4620      	mov	r0, r4
   d8da4:	bd10      	pop	{r4, pc}

000d8da6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d8da6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8da8:	68c4      	ldr	r4, [r0, #12]
   d8daa:	b1f4      	cbz	r4, d8dea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d8dac:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8dae:	2b02      	cmp	r3, #2
   d8db0:	d103      	bne.n	d8dba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8db2:	f104 000c 	add.w	r0, r4, #12
   d8db6:	f7ff ffef 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d8dba:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d8dbc:	b135      	cbz	r5, d8dcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8dbe:	4628      	mov	r0, r5
   d8dc0:	f7fb fa52 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d8dc4:	2110      	movs	r1, #16
   d8dc6:	4628      	mov	r0, r5
   d8dc8:	f001 fa5d 	bl	da286 <_ZdlPvj>
   d8dcc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8dce:	b135      	cbz	r5, d8dde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8dd0:	4628      	mov	r0, r5
   d8dd2:	f7fb fa49 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d8dd6:	2110      	movs	r1, #16
   d8dd8:	4628      	mov	r0, r5
   d8dda:	f001 fa54 	bl	da286 <_ZdlPvj>
   d8dde:	4620      	mov	r0, r4
   d8de0:	2114      	movs	r1, #20
   d8de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8de6:	f001 ba4e 	b.w	da286 <_ZdlPvj>
   d8dea:	bd38      	pop	{r3, r4, r5, pc}

000d8dec <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d8dec:	b513      	push	{r0, r1, r4, lr}
   d8dee:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8df0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d8df4:	2300      	movs	r3, #0
   d8df6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8df8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8dfa:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8dfc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8dfe:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8e00:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8e02:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8e04:	f7fb faf2 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e08:	4620      	mov	r0, r4
   d8e0a:	b002      	add	sp, #8
   d8e0c:	bd10      	pop	{r4, pc}

000d8e0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e10:	460c      	mov	r4, r1
   d8e12:	ad02      	add	r5, sp, #8
   d8e14:	f854 3b04 	ldr.w	r3, [r4], #4
   d8e18:	f845 3d08 	str.w	r3, [r5, #-8]!
   d8e1c:	4606      	mov	r6, r0
   d8e1e:	460f      	mov	r7, r1
   d8e20:	a801      	add	r0, sp, #4
   d8e22:	4621      	mov	r1, r4
   d8e24:	f7ff f8c7 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d8e28:	4629      	mov	r1, r5
   d8e2a:	4630      	mov	r0, r6
   d8e2c:	f7ff ffde 	bl	d8dec <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8e30:	a801      	add	r0, sp, #4
   d8e32:	f7fb fadb 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e36:	4620      	mov	r0, r4
   d8e38:	f7fb fad8 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d8e3c:	4638      	mov	r0, r7
   d8e3e:	2108      	movs	r1, #8
   d8e40:	f001 fa21 	bl	da286 <_ZdlPvj>
        return p;
    }
   d8e44:	4630      	mov	r0, r6
   d8e46:	b003      	add	sp, #12
   d8e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8e4a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d8e4a:	b513      	push	{r0, r1, r4, lr}
   d8e4c:	460b      	mov	r3, r1
   d8e4e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8e50:	c803      	ldmia	r0, {r0, r1}
   d8e52:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8e56:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8e5a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8e5e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d8e62:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8e66:	b002      	add	sp, #8
   d8e68:	bd10      	pop	{r4, pc}
	...

000d8e6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8e6c:	b538      	push	{r3, r4, r5, lr}
   d8e6e:	2300      	movs	r3, #0
   d8e70:	4604      	mov	r4, r0
   d8e72:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8e74:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8e76:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8e78:	f7fb f90f 	bl	d409a <_Znwj>
   d8e7c:	b128      	cbz	r0, d8e8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8e7e:	2301      	movs	r3, #1
   d8e80:	6043      	str	r3, [r0, #4]
   d8e82:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d8e84:	4b02      	ldr	r3, [pc, #8]	; (d8e90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8e86:	6003      	str	r3, [r0, #0]
   d8e88:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8e8a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d8e8c:	4620      	mov	r0, r4
   d8e8e:	bd38      	pop	{r3, r4, r5, pc}
   d8e90:	000dde1c 	.word	0x000dde1c

000d8e94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8e94:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8e96:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8e98:	b90a      	cbnz	r2, d8e9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8e9a:	f001 fa10 	bl	da2be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8e9e:	68c3      	ldr	r3, [r0, #12]
    }
   d8ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ea4:	4718      	bx	r3

000d8ea6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ea6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8ea8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d8eaa:	f100 0110 	add.w	r1, r0, #16
   d8eae:	f7ff fff1 	bl	d8e94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8eb2:	bd08      	pop	{r3, pc}

000d8eb4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8eb4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8eb6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8eb8:	b90a      	cbnz	r2, d8ebe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8eba:	f001 fa00 	bl	da2be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ebe:	68c3      	ldr	r3, [r0, #12]
    }
   d8ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ec4:	4718      	bx	r3

000d8ec6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ec6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8ec8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d8eca:	f100 0110 	add.w	r1, r0, #16
   d8ece:	f7ff fff1 	bl	d8eb4 <_ZNKSt8functionIFvRKbEEclES1_>
   d8ed2:	bd08      	pop	{r3, pc}

000d8ed4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8ed4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8ed6:	2300      	movs	r3, #0
   d8ed8:	6083      	str	r3, [r0, #8]
   d8eda:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8edc:	4604      	mov	r4, r0
   d8ede:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8ee0:	b12b      	cbz	r3, d8eee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8ee2:	2202      	movs	r2, #2
   d8ee4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8ee6:	68eb      	ldr	r3, [r5, #12]
   d8ee8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8eea:	68ab      	ldr	r3, [r5, #8]
   d8eec:	60a3      	str	r3, [r4, #8]
	}
    }
   d8eee:	4620      	mov	r0, r4
   d8ef0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d8ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ef6:	b089      	sub	sp, #36	; 0x24
   d8ef8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8efa:	4668      	mov	r0, sp
   d8efc:	f7ff ff3d 	bl	d8d7a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8f00:	2300      	movs	r3, #0
   d8f02:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8f06:	f04f 0202 	mov.w	r2, #2
   d8f0a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d8f0e:	2b00      	cmp	r3, #0
   d8f10:	d103      	bne.n	d8f1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d8f12:	e8c4 2f41 	strexb	r1, r2, [r4]
   d8f16:	2900      	cmp	r1, #0
   d8f18:	d1f7      	bne.n	d8f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d8f1a:	d002      	beq.n	d8f22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d8f1c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8f20:	e063      	b.n	d8fea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d8f22:	f114 050c 	adds.w	r5, r4, #12
   d8f26:	d003      	beq.n	d8f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d8f28:	4669      	mov	r1, sp
   d8f2a:	4628      	mov	r0, r5
   d8f2c:	f7ff ff25 	bl	d8d7a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8f30:	f3bf 8f5f 	dmb	sy
   d8f34:	2301      	movs	r3, #1
   d8f36:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8f38:	2000      	movs	r0, #0
   d8f3a:	f104 0308 	add.w	r3, r4, #8
   d8f3e:	f3bf 8f5f 	dmb	sy
   d8f42:	e853 6f00 	ldrex	r6, [r3]
   d8f46:	e843 0200 	strex	r2, r0, [r3]
   d8f4a:	2a00      	cmp	r2, #0
   d8f4c:	d1f9      	bne.n	d8f42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d8f4e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8f52:	2e00      	cmp	r6, #0
   d8f54:	d049      	beq.n	d8fea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8f56:	f7fe fa1b 	bl	d7390 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8f5a:	b120      	cbz	r0, d8f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8f5c:	4629      	mov	r1, r5
   d8f5e:	4630      	mov	r0, r6
   d8f60:	f7ff ff98 	bl	d8e94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8f64:	e03a      	b.n	d8fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8f66:	4631      	mov	r1, r6
   d8f68:	a802      	add	r0, sp, #8
   d8f6a:	f7ff ffb3 	bl	d8ed4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8f6e:	68e0      	ldr	r0, [r4, #12]
   d8f70:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8f74:	b108      	cbz	r0, d8f7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d8f76:	f002 f971 	bl	db25c <strdup>
   d8f7a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8f7c:	2010      	movs	r0, #16
   d8f7e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8f82:	f7fb f88a 	bl	d409a <_Znwj>
   d8f86:	4605      	mov	r5, r0
   d8f88:	b1e8      	cbz	r0, d8fc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8f8a:	2700      	movs	r7, #0
   d8f8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8f8e:	2018      	movs	r0, #24
   d8f90:	f7fb f883 	bl	d409a <_Znwj>
   d8f94:	4604      	mov	r4, r0
   d8f96:	b188      	cbz	r0, d8fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8f98:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8f9a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8f9c:	a802      	add	r0, sp, #8
   d8f9e:	f7ff ff54 	bl	d8e4a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8fa2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8fa4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fa6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8fa8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8faa:	9204      	str	r2, [sp, #16]
   d8fac:	a906      	add	r1, sp, #24
   d8fae:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fb0:	60e3      	str	r3, [r4, #12]
   d8fb2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8fb6:	9205      	str	r2, [sp, #20]
   d8fb8:	f7ff fedf 	bl	d8d7a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8fbc:	4b0d      	ldr	r3, [pc, #52]	; (d8ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d8fbe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8fc0:	4b0d      	ldr	r3, [pc, #52]	; (d8ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8fc2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8fc4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d8fc6:	a806      	add	r0, sp, #24
   d8fc8:	f7ff fee6 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8fcc:	a802      	add	r0, sp, #8
   d8fce:	f7fb f94b 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8fd2:	2200      	movs	r2, #0
   d8fd4:	4629      	mov	r1, r5
   d8fd6:	4809      	ldr	r0, [pc, #36]	; (d8ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d8fd8:	f7fe f9e2 	bl	d73a0 <application_thread_invoke>
   d8fdc:	4630      	mov	r0, r6
   d8fde:	f7fb f943 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8fe2:	2110      	movs	r1, #16
   d8fe4:	4630      	mov	r0, r6
   d8fe6:	f001 f94e 	bl	da286 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d8fea:	4668      	mov	r0, sp
   d8fec:	f7ff fed4 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
    }
   d8ff0:	b009      	add	sp, #36	; 0x24
   d8ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ff4:	000d8ea7 	.word	0x000d8ea7
   d8ff8:	000d911d 	.word	0x000d911d
   d8ffc:	000d758f 	.word	0x000d758f

000d9000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9004:	b08b      	sub	sp, #44	; 0x2c
   d9006:	4606      	mov	r6, r0
   d9008:	460f      	mov	r7, r1
   d900a:	4690      	mov	r8, r2
   d900c:	4699      	mov	r9, r3
   d900e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9012:	f7fe f9f1 	bl	d73f8 <spark_cloud_flag_connected>
   d9016:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d9018:	4683      	mov	fp, r0
   d901a:	bb30      	cbnz	r0, d906a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d901c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d9020:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9022:	a905      	add	r1, sp, #20
   d9024:	4628      	mov	r0, r5
   d9026:	f8ad 3018 	strh.w	r3, [sp, #24]
   d902a:	f7ff fea6 	bl	d8d7a <_ZN8particle5ErrorC1EOS0_>
   d902e:	2014      	movs	r0, #20
   d9030:	f7fb f833 	bl	d409a <_Znwj>
   d9034:	4604      	mov	r4, r0
   d9036:	b158      	cbz	r0, d9050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9038:	2302      	movs	r3, #2
   d903a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d903c:	2301      	movs	r3, #1
   d903e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9040:	f8c0 b004 	str.w	fp, [r0, #4]
   d9044:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d9048:	4629      	mov	r1, r5
   d904a:	300c      	adds	r0, #12
   d904c:	f7ff fe95 	bl	d8d7a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d9050:	4630      	mov	r0, r6
   d9052:	4621      	mov	r1, r4
   d9054:	f840 4b04 	str.w	r4, [r0], #4
   d9058:	f7ff ff08 	bl	d8e6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d905c:	4628      	mov	r0, r5
   d905e:	f7ff fe9b 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d9062:	a805      	add	r0, sp, #20
   d9064:	f7ff fe98 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
   d9068:	e052      	b.n	d9110 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d906a:	2400      	movs	r4, #0
   d906c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d906e:	2014      	movs	r0, #20
   d9070:	606c      	str	r4, [r5, #4]
   d9072:	60ac      	str	r4, [r5, #8]
   d9074:	9307      	str	r3, [sp, #28]
   d9076:	f7fb f810 	bl	d409a <_Znwj>
   d907a:	4601      	mov	r1, r0
   d907c:	b118      	cbz	r0, d9086 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d907e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9080:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9082:	6044      	str	r4, [r0, #4]
   d9084:	6084      	str	r4, [r0, #8]
   d9086:	a804      	add	r0, sp, #16
   d9088:	9103      	str	r1, [sp, #12]
   d908a:	f7ff feef 	bl	d8e6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d908e:	4b22      	ldr	r3, [pc, #136]	; (d9118 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d9090:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9092:	2008      	movs	r0, #8
   d9094:	f7fb f801 	bl	d409a <_Znwj>
   d9098:	4604      	mov	r4, r0
   d909a:	b128      	cbz	r0, d90a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d909c:	9b03      	ldr	r3, [sp, #12]
   d909e:	f840 3b04 	str.w	r3, [r0], #4
   d90a2:	a904      	add	r1, sp, #16
   d90a4:	f7fe ff87 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d90a8:	9500      	str	r5, [sp, #0]
   d90aa:	fa5f f38a 	uxtb.w	r3, sl
   d90ae:	464a      	mov	r2, r9
   d90b0:	4641      	mov	r1, r8
   d90b2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d90b4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d90b6:	f7fe f9a7 	bl	d7408 <spark_send_event>
   d90ba:	b920      	cbnz	r0, d90c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d90bc:	9b03      	ldr	r3, [sp, #12]
   d90be:	785b      	ldrb	r3, [r3, #1]
   d90c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d90c4:	b183      	cbz	r3, d90e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d90c6:	9b03      	ldr	r3, [sp, #12]
   d90c8:	9305      	str	r3, [sp, #20]
   d90ca:	a904      	add	r1, sp, #16
   d90cc:	a806      	add	r0, sp, #24
   d90ce:	f7fe ff72 	bl	d7fb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d90d2:	a905      	add	r1, sp, #20
   d90d4:	4630      	mov	r0, r6
   d90d6:	f7ff fe89 	bl	d8dec <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d90da:	a806      	add	r0, sp, #24
   d90dc:	f7fb f986 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d90e0:	a804      	add	r0, sp, #16
   d90e2:	f7fb f983 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d90e6:	e013      	b.n	d9110 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d90e8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d90ec:	a905      	add	r1, sp, #20
   d90ee:	a803      	add	r0, sp, #12
   d90f0:	9205      	str	r2, [sp, #20]
   d90f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d90f6:	f7ff fefd 	bl	d8ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d90fa:	a805      	add	r0, sp, #20
   d90fc:	f7ff fe4c 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d9100:	a805      	add	r0, sp, #20
   d9102:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9104:	f7ff fe83 	bl	d8e0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d9108:	a806      	add	r0, sp, #24
   d910a:	f7fb f96f 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d910e:	e7da      	b.n	d90c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d9110:	4630      	mov	r0, r6
   d9112:	b00b      	add	sp, #44	; 0x2c
   d9114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9118:	000d928d 	.word	0x000d928d

000d911c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d911c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d911e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9120:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9122:	d006      	beq.n	d9132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d9124:	2a03      	cmp	r2, #3
   d9126:	d017      	beq.n	d9158 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d9128:	2a01      	cmp	r2, #1
   d912a:	d122      	bne.n	d9172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d912c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d912e:	6003      	str	r3, [r0, #0]
	      break;
   d9130:	e01f      	b.n	d9172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9132:	2018      	movs	r0, #24
   d9134:	680e      	ldr	r6, [r1, #0]
   d9136:	f7fa ffb0 	bl	d409a <_Znwj>
   d913a:	4605      	mov	r5, r0
   d913c:	b150      	cbz	r0, d9154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d913e:	4631      	mov	r1, r6
   d9140:	f7ff fec8 	bl	d8ed4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d9144:	6930      	ldr	r0, [r6, #16]
   d9146:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d914a:	b108      	cbz	r0, d9150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d914c:	f002 f886 	bl	db25c <strdup>
   d9150:	6128      	str	r0, [r5, #16]
   d9152:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9154:	6025      	str	r5, [r4, #0]
   d9156:	e00c      	b.n	d9172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9158:	6804      	ldr	r4, [r0, #0]
   d915a:	b154      	cbz	r4, d9172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d915c:	f104 0010 	add.w	r0, r4, #16
   d9160:	f7ff fe1a 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9164:	4620      	mov	r0, r4
   d9166:	f7fb f87f 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d916a:	2118      	movs	r1, #24
   d916c:	4620      	mov	r0, r4
   d916e:	f001 f88a 	bl	da286 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9172:	2000      	movs	r0, #0
   d9174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9176 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9176:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9178:	2300      	movs	r3, #0
   d917a:	6083      	str	r3, [r0, #8]
   d917c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d917e:	4604      	mov	r4, r0
   d9180:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9182:	b12b      	cbz	r3, d9190 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9184:	2202      	movs	r2, #2
   d9186:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9188:	68eb      	ldr	r3, [r5, #12]
   d918a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d918c:	68ab      	ldr	r3, [r5, #8]
   d918e:	60a3      	str	r3, [r4, #8]
	}
    }
   d9190:	4620      	mov	r0, r4
   d9192:	bd38      	pop	{r3, r4, r5, pc}

000d9194 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9194:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9196:	b570      	push	{r4, r5, r6, lr}
   d9198:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d919a:	d006      	beq.n	d91aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d919c:	2a03      	cmp	r2, #3
   d919e:	d011      	beq.n	d91c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d91a0:	2a01      	cmp	r2, #1
   d91a2:	d118      	bne.n	d91d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d91a4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d91a6:	6003      	str	r3, [r0, #0]
	      break;
   d91a8:	e015      	b.n	d91d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d91aa:	2014      	movs	r0, #20
   d91ac:	680e      	ldr	r6, [r1, #0]
   d91ae:	f7fa ff74 	bl	d409a <_Znwj>
   d91b2:	4605      	mov	r5, r0
   d91b4:	b120      	cbz	r0, d91c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d91b6:	4631      	mov	r1, r6
   d91b8:	f7ff ffdd 	bl	d9176 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d91bc:	7c33      	ldrb	r3, [r6, #16]
   d91be:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d91c0:	6025      	str	r5, [r4, #0]
   d91c2:	e008      	b.n	d91d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d91c4:	6804      	ldr	r4, [r0, #0]
   d91c6:	b134      	cbz	r4, d91d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d91c8:	4620      	mov	r0, r4
   d91ca:	f7fb f84d 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d91ce:	2114      	movs	r1, #20
   d91d0:	4620      	mov	r0, r4
   d91d2:	f001 f858 	bl	da286 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d91d6:	2000      	movs	r0, #0
   d91d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d91dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d91dc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d91de:	2300      	movs	r3, #0
   d91e0:	b087      	sub	sp, #28
   d91e2:	460c      	mov	r4, r1
   d91e4:	f3bf 8f5f 	dmb	sy
   d91e8:	e850 6f00 	ldrex	r6, [r0]
   d91ec:	e840 3200 	strex	r2, r3, [r0]
   d91f0:	2a00      	cmp	r2, #0
   d91f2:	d1f9      	bne.n	d91e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d91f4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d91f8:	2e00      	cmp	r6, #0
   d91fa:	d03f      	beq.n	d927c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d91fc:	4618      	mov	r0, r3
   d91fe:	f7fe f8c7 	bl	d7390 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9202:	4607      	mov	r7, r0
   d9204:	b120      	cbz	r0, d9210 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9206:	4621      	mov	r1, r4
   d9208:	4630      	mov	r0, r6
   d920a:	f7ff fe53 	bl	d8eb4 <_ZNKSt8functionIFvRKbEEclES1_>
   d920e:	e02e      	b.n	d926e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9210:	4631      	mov	r1, r6
   d9212:	a801      	add	r0, sp, #4
   d9214:	f7ff ffaf 	bl	d9176 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9218:	7823      	ldrb	r3, [r4, #0]
   d921a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d921e:	2010      	movs	r0, #16
   d9220:	f7fa ff3b 	bl	d409a <_Znwj>
   d9224:	4605      	mov	r5, r0
   d9226:	b1d0      	cbz	r0, d925e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9228:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d922a:	2014      	movs	r0, #20
   d922c:	f7fa ff35 	bl	d409a <_Znwj>
   d9230:	4604      	mov	r4, r0
   d9232:	b178      	cbz	r0, d9254 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9234:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9236:	4601      	mov	r1, r0
   d9238:	a801      	add	r0, sp, #4
   d923a:	f7ff fe06 	bl	d8e4a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d923e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9240:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9242:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9244:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9246:	9203      	str	r2, [sp, #12]
   d9248:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d924a:	60e3      	str	r3, [r4, #12]
   d924c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9250:	9204      	str	r2, [sp, #16]
   d9252:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9254:	4b0a      	ldr	r3, [pc, #40]	; (d9280 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d9256:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9258:	4b0a      	ldr	r3, [pc, #40]	; (d9284 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d925a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d925c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d925e:	a801      	add	r0, sp, #4
   d9260:	f7fb f802 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9264:	2200      	movs	r2, #0
   d9266:	4629      	mov	r1, r5
   d9268:	4807      	ldr	r0, [pc, #28]	; (d9288 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d926a:	f7fe f899 	bl	d73a0 <application_thread_invoke>
   d926e:	4630      	mov	r0, r6
   d9270:	f7fa fffa 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9274:	2110      	movs	r1, #16
   d9276:	4630      	mov	r0, r6
   d9278:	f001 f805 	bl	da286 <_ZdlPvj>
        }
    }
   d927c:	b007      	add	sp, #28
   d927e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9280:	000d8ec7 	.word	0x000d8ec7
   d9284:	000d9195 	.word	0x000d9195
   d9288:	000d758f 	.word	0x000d758f

000d928c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d928c:	b530      	push	{r4, r5, lr}
   d928e:	b085      	sub	sp, #20
   d9290:	4604      	mov	r4, r0
   d9292:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9294:	4668      	mov	r0, sp
   d9296:	4611      	mov	r1, r2
   d9298:	f7ff fdb9 	bl	d8e0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d929c:	b17c      	cbz	r4, d92be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d929e:	b224      	sxth	r4, r4
   d92a0:	4628      	mov	r0, r5
   d92a2:	b10d      	cbz	r5, d92a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d92a4:	f001 ffda 	bl	db25c <strdup>
   d92a8:	9002      	str	r0, [sp, #8]
   d92aa:	a902      	add	r1, sp, #8
   d92ac:	4668      	mov	r0, sp
   d92ae:	f8ad 400c 	strh.w	r4, [sp, #12]
   d92b2:	f7ff fe1f 	bl	d8ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d92b6:	a802      	add	r0, sp, #8
   d92b8:	f7ff fd6e 	bl	d8d98 <_ZN8particle5ErrorD1Ev>
   d92bc:	e01d      	b.n	d92fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d92be:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d92c0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d92c4:	f04f 0201 	mov.w	r2, #1
   d92c8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d92cc:	42a3      	cmp	r3, r4
   d92ce:	d103      	bne.n	d92d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d92d0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d92d4:	2900      	cmp	r1, #0
   d92d6:	d1f7      	bne.n	d92c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d92d8:	d002      	beq.n	d92e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d92da:	f88d 3008 	strb.w	r3, [sp, #8]
   d92de:	e00c      	b.n	d92fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d92e0:	f110 010c 	adds.w	r1, r0, #12
   d92e4:	f04f 0301 	mov.w	r3, #1
   d92e8:	bf18      	it	ne
   d92ea:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d92ec:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d92f0:	3004      	adds	r0, #4
   d92f2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d92f6:	f7ff ff71 	bl	d91dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d92fa:	a801      	add	r0, sp, #4
   d92fc:	f7fb f876 	bl	d43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d9300:	b005      	add	sp, #20
   d9302:	bd30      	pop	{r4, r5, pc}

000d9304 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9304:	2200      	movs	r2, #0
   d9306:	4611      	mov	r1, r2
   d9308:	6840      	ldr	r0, [r0, #4]
   d930a:	f7fe b8d5 	b.w	d74b8 <network_listening>

000d930e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d930e:	2200      	movs	r2, #0
   d9310:	4611      	mov	r1, r2
   d9312:	6840      	ldr	r0, [r0, #4]
   d9314:	f7fe b8e0 	b.w	d74d8 <network_get_listen_timeout>

000d9318 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9318:	2200      	movs	r2, #0
   d931a:	6840      	ldr	r0, [r0, #4]
   d931c:	f7fe b8d4 	b.w	d74c8 <network_set_listen_timeout>

000d9320 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9320:	2200      	movs	r2, #0
   d9322:	f081 0101 	eor.w	r1, r1, #1
   d9326:	6840      	ldr	r0, [r0, #4]
   d9328:	f7fe b8be 	b.w	d74a8 <network_listen>

000d932c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d932c:	2300      	movs	r3, #0
   d932e:	461a      	mov	r2, r3
   d9330:	4619      	mov	r1, r3
   d9332:	6840      	ldr	r0, [r0, #4]
   d9334:	f7fe b8b0 	b.w	d7498 <network_off>

000d9338 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9338:	2300      	movs	r3, #0
   d933a:	461a      	mov	r2, r3
   d933c:	4619      	mov	r1, r3
   d933e:	6840      	ldr	r0, [r0, #4]
   d9340:	f7fe b8a2 	b.w	d7488 <network_on>

000d9344 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9344:	2200      	movs	r2, #0
   d9346:	4611      	mov	r1, r2
   d9348:	6840      	ldr	r0, [r0, #4]
   d934a:	f7fe b895 	b.w	d7478 <network_ready>

000d934e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d934e:	2200      	movs	r2, #0
   d9350:	4611      	mov	r1, r2
   d9352:	6840      	ldr	r0, [r0, #4]
   d9354:	f7fe b880 	b.w	d7458 <network_connecting>

000d9358 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9358:	2200      	movs	r2, #0
   d935a:	2102      	movs	r1, #2
   d935c:	6840      	ldr	r0, [r0, #4]
   d935e:	f7fe b883 	b.w	d7468 <network_disconnect>

000d9362 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9362:	2300      	movs	r3, #0
   d9364:	461a      	mov	r2, r3
   d9366:	6840      	ldr	r0, [r0, #4]
   d9368:	f7fe b86e 	b.w	d7448 <network_connect>

000d936c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d936c:	4b02      	ldr	r3, [pc, #8]	; (d9378 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d936e:	2203      	movs	r2, #3
   d9370:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9372:	4a02      	ldr	r2, [pc, #8]	; (d937c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9374:	601a      	str	r2, [r3, #0]
   d9376:	4770      	bx	lr
   d9378:	2003e384 	.word	0x2003e384
   d937c:	000dde38 	.word	0x000dde38

000d9380 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d9380:	4770      	bx	lr

000d9382 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9384:	4606      	mov	r6, r0
   d9386:	4615      	mov	r5, r2
   d9388:	460c      	mov	r4, r1
   d938a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d938c:	42bc      	cmp	r4, r7
   d938e:	d006      	beq.n	d939e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9390:	6833      	ldr	r3, [r6, #0]
   d9392:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9396:	689b      	ldr	r3, [r3, #8]
   d9398:	4630      	mov	r0, r6
   d939a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d939c:	e7f6      	b.n	d938c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d939e:	4628      	mov	r0, r5
   d93a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d93a2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d93a2:	2200      	movs	r2, #0
   d93a4:	7c00      	ldrb	r0, [r0, #16]
   d93a6:	f7fd beb3 	b.w	d7110 <HAL_I2C_Write_Data>

000d93aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d93aa:	2100      	movs	r1, #0
   d93ac:	7c00      	ldrb	r0, [r0, #16]
   d93ae:	f7fd beb7 	b.w	d7120 <HAL_I2C_Available_Data>

000d93b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d93b2:	2100      	movs	r1, #0
   d93b4:	7c00      	ldrb	r0, [r0, #16]
   d93b6:	f7fd bebb 	b.w	d7130 <HAL_I2C_Read_Data>

000d93ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d93ba:	2100      	movs	r1, #0
   d93bc:	7c00      	ldrb	r0, [r0, #16]
   d93be:	f7fd bebf 	b.w	d7140 <HAL_I2C_Peek_Data>

000d93c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d93c2:	2100      	movs	r1, #0
   d93c4:	7c00      	ldrb	r0, [r0, #16]
   d93c6:	f7fd bec3 	b.w	d7150 <HAL_I2C_Flush_Data>

000d93ca <_ZN7TwoWireD0Ev>:
   d93ca:	b510      	push	{r4, lr}
   d93cc:	2114      	movs	r1, #20
   d93ce:	4604      	mov	r4, r0
   d93d0:	f000 ff59 	bl	da286 <_ZdlPvj>
   d93d4:	4620      	mov	r0, r4
   d93d6:	bd10      	pop	{r4, pc}

000d93d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d93d8:	b510      	push	{r4, lr}
   d93da:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d93dc:	2300      	movs	r3, #0
   d93de:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d93e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d93e4:	60a3      	str	r3, [r4, #8]
   d93e6:	4b04      	ldr	r3, [pc, #16]	; (d93f8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d93e8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d93ea:	4608      	mov	r0, r1
   d93ec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d93ee:	4611      	mov	r1, r2
   d93f0:	f7fd febe 	bl	d7170 <HAL_I2C_Init>
}
   d93f4:	4620      	mov	r0, r4
   d93f6:	bd10      	pop	{r4, pc}
   d93f8:	000dde6c 	.word	0x000dde6c

000d93fc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d93fc:	2100      	movs	r1, #0
   d93fe:	7c00      	ldrb	r0, [r0, #16]
   d9400:	f7fd beae 	b.w	d7160 <HAL_I2C_Is_Enabled>

000d9404 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9404:	4770      	bx	lr

000d9406 <_ZN9IPAddressD0Ev>:
   d9406:	b510      	push	{r4, lr}
   d9408:	2118      	movs	r1, #24
   d940a:	4604      	mov	r4, r0
   d940c:	f000 ff3b 	bl	da286 <_ZdlPvj>
   d9410:	4620      	mov	r0, r4
   d9412:	bd10      	pop	{r4, pc}

000d9414 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9414:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9416:	7d03      	ldrb	r3, [r0, #20]
   d9418:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d941a:	b08d      	sub	sp, #52	; 0x34
   d941c:	460e      	mov	r6, r1
   d941e:	f100 0704 	add.w	r7, r0, #4
   d9422:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9426:	d002      	beq.n	d942e <_ZNK9IPAddress7printToER5Print+0x1a>
   d9428:	f100 0508 	add.w	r5, r0, #8
   d942c:	e018      	b.n	d9460 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d942e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9430:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9432:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9436:	232f      	movs	r3, #47	; 0x2f
   d9438:	462a      	mov	r2, r5
   d943a:	200a      	movs	r0, #10
   d943c:	f7fd fea0 	bl	d7180 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9440:	4628      	mov	r0, r5
   d9442:	f001 ff26 	bl	db292 <strlen>
   d9446:	6833      	ldr	r3, [r6, #0]
   d9448:	4602      	mov	r2, r0
   d944a:	68db      	ldr	r3, [r3, #12]
   d944c:	4629      	mov	r1, r5
   d944e:	4630      	mov	r0, r6
   d9450:	4798      	blx	r3
   d9452:	e00f      	b.n	d9474 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9454:	b124      	cbz	r4, d9460 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9456:	212e      	movs	r1, #46	; 0x2e
   d9458:	4630      	mov	r0, r6
   d945a:	f000 f9c9 	bl	d97f0 <_ZN5Print5printEc>
   d945e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9460:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9464:	220a      	movs	r2, #10
   d9466:	4630      	mov	r0, r6
   d9468:	f000 f9db 	bl	d9822 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d946c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d946e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9470:	d1f0      	bne.n	d9454 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9472:	4620      	mov	r0, r4
    }
    return n;
}
   d9474:	b00d      	add	sp, #52	; 0x34
   d9476:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9478 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9478:	b510      	push	{r4, lr}
   d947a:	4b05      	ldr	r3, [pc, #20]	; (d9490 <_ZN9IPAddressC1Ev+0x18>)
   d947c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d947e:	2211      	movs	r2, #17
   d9480:	f840 3b04 	str.w	r3, [r0], #4
   d9484:	2100      	movs	r1, #0
   d9486:	f001 fe96 	bl	db1b6 <memset>
{
    clear();
}
   d948a:	4620      	mov	r0, r4
   d948c:	bd10      	pop	{r4, pc}
   d948e:	bf00      	nop
   d9490:	000dde94 	.word	0x000dde94

000d9494 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9494:	4603      	mov	r3, r0
   d9496:	4a07      	ldr	r2, [pc, #28]	; (d94b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9498:	b510      	push	{r4, lr}
   d949a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d949e:	f101 0210 	add.w	r2, r1, #16
   d94a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d94a6:	f843 4b04 	str.w	r4, [r3], #4
   d94aa:	4291      	cmp	r1, r2
   d94ac:	d1f9      	bne.n	d94a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d94ae:	780a      	ldrb	r2, [r1, #0]
   d94b0:	701a      	strb	r2, [r3, #0]
}
   d94b2:	bd10      	pop	{r4, pc}
   d94b4:	000dde94 	.word	0x000dde94

000d94b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d94b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d94ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d94be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d94c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d94c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d94ca:	2304      	movs	r3, #4
   d94cc:	6041      	str	r1, [r0, #4]
   d94ce:	7503      	strb	r3, [r0, #20]
   d94d0:	bd10      	pop	{r4, pc}

000d94d2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d94d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d94d4:	780d      	ldrb	r5, [r1, #0]
   d94d6:	788b      	ldrb	r3, [r1, #2]
   d94d8:	784a      	ldrb	r2, [r1, #1]
   d94da:	78c9      	ldrb	r1, [r1, #3]
   d94dc:	9100      	str	r1, [sp, #0]
   d94de:	4629      	mov	r1, r5
   d94e0:	f7ff ffea 	bl	d94b8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d94e4:	b003      	add	sp, #12
   d94e6:	bd30      	pop	{r4, r5, pc}

000d94e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d94e8:	4b01      	ldr	r3, [pc, #4]	; (d94f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d94ea:	4a02      	ldr	r2, [pc, #8]	; (d94f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d94ec:	601a      	str	r2, [r3, #0]
   d94ee:	4770      	bx	lr
   d94f0:	2003e38c 	.word	0x2003e38c
   d94f4:	000ddf13 	.word	0x000ddf13

000d94f8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d94f8:	2200      	movs	r2, #0
   d94fa:	4611      	mov	r1, r2
   d94fc:	6840      	ldr	r0, [r0, #4]
   d94fe:	f7fd bfdb 	b.w	d74b8 <network_listening>

000d9502 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9502:	2200      	movs	r2, #0
   d9504:	4611      	mov	r1, r2
   d9506:	6840      	ldr	r0, [r0, #4]
   d9508:	f7fd bfe6 	b.w	d74d8 <network_get_listen_timeout>

000d950c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d950c:	2200      	movs	r2, #0
   d950e:	6840      	ldr	r0, [r0, #4]
   d9510:	f7fd bfda 	b.w	d74c8 <network_set_listen_timeout>

000d9514 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9514:	2200      	movs	r2, #0
   d9516:	f081 0101 	eor.w	r1, r1, #1
   d951a:	6840      	ldr	r0, [r0, #4]
   d951c:	f7fd bfc4 	b.w	d74a8 <network_listen>

000d9520 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d9520:	2300      	movs	r3, #0
   d9522:	461a      	mov	r2, r3
   d9524:	2101      	movs	r1, #1
   d9526:	6840      	ldr	r0, [r0, #4]
   d9528:	f7fd bfb6 	b.w	d7498 <network_off>

000d952c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d952c:	2300      	movs	r3, #0
   d952e:	461a      	mov	r2, r3
   d9530:	4619      	mov	r1, r3
   d9532:	6840      	ldr	r0, [r0, #4]
   d9534:	f7fd bfa8 	b.w	d7488 <network_on>

000d9538 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9538:	2200      	movs	r2, #0
   d953a:	4611      	mov	r1, r2
   d953c:	6840      	ldr	r0, [r0, #4]
   d953e:	f7fd bf9b 	b.w	d7478 <network_ready>

000d9542 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9542:	2200      	movs	r2, #0
   d9544:	4611      	mov	r1, r2
   d9546:	6840      	ldr	r0, [r0, #4]
   d9548:	f7fd bf86 	b.w	d7458 <network_connecting>

000d954c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d954c:	2200      	movs	r2, #0
   d954e:	2102      	movs	r1, #2
   d9550:	6840      	ldr	r0, [r0, #4]
   d9552:	f7fd bf89 	b.w	d7468 <network_disconnect>

000d9556 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9556:	2300      	movs	r3, #0
   d9558:	461a      	mov	r2, r3
   d955a:	6840      	ldr	r0, [r0, #4]
   d955c:	f7fd bf74 	b.w	d7448 <network_connect>

000d9560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d9560:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9562:	4605      	mov	r5, r0
   d9564:	b188      	cbz	r0, d958a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9566:	6804      	ldr	r4, [r0, #0]
   d9568:	b14c      	cbz	r4, d957e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d956a:	68a3      	ldr	r3, [r4, #8]
   d956c:	b11b      	cbz	r3, d9576 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d956e:	2203      	movs	r2, #3
   d9570:	4621      	mov	r1, r4
   d9572:	4620      	mov	r0, r4
   d9574:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9576:	2110      	movs	r1, #16
   d9578:	4620      	mov	r0, r4
   d957a:	f000 fe84 	bl	da286 <_ZdlPvj>
   d957e:	4628      	mov	r0, r5
   d9580:	2114      	movs	r1, #20
      }
   d9582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9586:	f000 be7e 	b.w	da286 <_ZdlPvj>
   d958a:	bd38      	pop	{r3, r4, r5, pc}

000d958c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d958c:	b110      	cbz	r0, d9594 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d958e:	6803      	ldr	r3, [r0, #0]
   d9590:	685b      	ldr	r3, [r3, #4]
   d9592:	4718      	bx	r3
   d9594:	4770      	bx	lr

000d9596 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9596:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9598:	6803      	ldr	r3, [r0, #0]
   d959a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d959c:	b1bb      	cbz	r3, d95ce <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d959e:	6858      	ldr	r0, [r3, #4]
   d95a0:	f7fd fcee 	bl	d6f80 <os_thread_is_current>
   d95a4:	b978      	cbnz	r0, d95c6 <_ZN6ThreadD1Ev+0x30>
   d95a6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d95a8:	7c5a      	ldrb	r2, [r3, #17]
   d95aa:	b912      	cbnz	r2, d95b2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d95ac:	6858      	ldr	r0, [r3, #4]
   d95ae:	f7fd fcf7 	bl	d6fa0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d95b2:	6823      	ldr	r3, [r4, #0]
   d95b4:	6858      	ldr	r0, [r3, #4]
   d95b6:	f7fd fcfb 	bl	d6fb0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d95ba:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d95bc:	2300      	movs	r3, #0
   d95be:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d95c0:	b128      	cbz	r0, d95ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d95c2:	f7ff ffcd 	bl	d9560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d95c6:	6820      	ldr	r0, [r4, #0]
   d95c8:	b108      	cbz	r0, d95ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d95ca:	f7ff ffc9 	bl	d9560 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d95ce:	4620      	mov	r0, r4
   d95d0:	bd10      	pop	{r4, pc}

000d95d2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d95d2:	b538      	push	{r3, r4, r5, lr}
   d95d4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d95d6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d95da:	b108      	cbz	r0, d95e0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d95dc:	f7fa fd61 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d95e0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d95e4:	b108      	cbz	r0, d95ea <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d95e6:	f7fd fd1b 	bl	d7020 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d95ea:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d95ee:	b135      	cbz	r5, d95fe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d95f0:	4628      	mov	r0, r5
   d95f2:	f7ff ffd0 	bl	d9596 <_ZN6ThreadD1Ev>
   d95f6:	2104      	movs	r1, #4
   d95f8:	4628      	mov	r0, r5
   d95fa:	f000 fe44 	bl	da286 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d95fe:	6820      	ldr	r0, [r4, #0]
   d9600:	b108      	cbz	r0, d9606 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d9602:	f7ff ffc3 	bl	d958c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d9606:	4620      	mov	r0, r4
   d9608:	bd38      	pop	{r3, r4, r5, pc}
	...

000d960c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d960c:	b510      	push	{r4, lr}
   d960e:	4b04      	ldr	r3, [pc, #16]	; (d9620 <_ZN5spark9MeshClassD1Ev+0x14>)
   d9610:	4604      	mov	r4, r0
   d9612:	f840 3b08 	str.w	r3, [r0], #8
   d9616:	f7ff ffdc 	bl	d95d2 <_ZN5spark11MeshPublishD1Ev>
   d961a:	4620      	mov	r0, r4
   d961c:	bd10      	pop	{r4, pc}
   d961e:	bf00      	nop
   d9620:	000ddf84 	.word	0x000ddf84

000d9624 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d9624:	b538      	push	{r3, r4, r5, lr}
   d9626:	4c0e      	ldr	r4, [pc, #56]	; (d9660 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d9628:	4b0e      	ldr	r3, [pc, #56]	; (d9664 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d962a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d962c:	2500      	movs	r5, #0
   d962e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d9630:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d9634:	6063      	str	r3, [r4, #4]
   d9636:	60a5      	str	r5, [r4, #8]
   d9638:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d963c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d9640:	f7fd fce6 	bl	d7010 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d9644:	4b08      	ldr	r3, [pc, #32]	; (d9668 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d9646:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d964a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d964e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d9650:	4620      	mov	r0, r4
   d9652:	4a06      	ldr	r2, [pc, #24]	; (d966c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d9654:	4906      	ldr	r1, [pc, #24]	; (d9670 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d9656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d965a:	f000 be0f 	b.w	da27c <__aeabi_atexit>
   d965e:	bf00      	nop
   d9660:	2003e390 	.word	0x2003e390
   d9664:	000ddfb8 	.word	0x000ddfb8
   d9668:	000ddf84 	.word	0x000ddf84
   d966c:	2003d628 	.word	0x2003d628
   d9670:	000d960d 	.word	0x000d960d

000d9674 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9674:	2300      	movs	r3, #0
   d9676:	461a      	mov	r2, r3
   d9678:	6840      	ldr	r0, [r0, #4]
   d967a:	f7fd bee5 	b.w	d7448 <network_connect>

000d967e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d967e:	2200      	movs	r2, #0
   d9680:	2102      	movs	r1, #2
   d9682:	6840      	ldr	r0, [r0, #4]
   d9684:	f7fd bef0 	b.w	d7468 <network_disconnect>

000d9688 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9688:	2200      	movs	r2, #0
   d968a:	4611      	mov	r1, r2
   d968c:	6840      	ldr	r0, [r0, #4]
   d968e:	f7fd bee3 	b.w	d7458 <network_connecting>

000d9692 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9692:	2200      	movs	r2, #0
   d9694:	4611      	mov	r1, r2
   d9696:	6840      	ldr	r0, [r0, #4]
   d9698:	f7fd beee 	b.w	d7478 <network_ready>

000d969c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d969c:	2300      	movs	r3, #0
   d969e:	461a      	mov	r2, r3
   d96a0:	4619      	mov	r1, r3
   d96a2:	6840      	ldr	r0, [r0, #4]
   d96a4:	f7fd bef0 	b.w	d7488 <network_on>

000d96a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d96a8:	2300      	movs	r3, #0
   d96aa:	461a      	mov	r2, r3
   d96ac:	4619      	mov	r1, r3
   d96ae:	6840      	ldr	r0, [r0, #4]
   d96b0:	f7fd bef2 	b.w	d7498 <network_off>

000d96b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d96b4:	2200      	movs	r2, #0
   d96b6:	f081 0101 	eor.w	r1, r1, #1
   d96ba:	6840      	ldr	r0, [r0, #4]
   d96bc:	f7fd bef4 	b.w	d74a8 <network_listen>

000d96c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d96c0:	2200      	movs	r2, #0
   d96c2:	6840      	ldr	r0, [r0, #4]
   d96c4:	f7fd bf00 	b.w	d74c8 <network_set_listen_timeout>

000d96c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d96c8:	2200      	movs	r2, #0
   d96ca:	4611      	mov	r1, r2
   d96cc:	6840      	ldr	r0, [r0, #4]
   d96ce:	f7fd bf03 	b.w	d74d8 <network_get_listen_timeout>

000d96d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d96d2:	2200      	movs	r2, #0
   d96d4:	4611      	mov	r1, r2
   d96d6:	6840      	ldr	r0, [r0, #4]
   d96d8:	f7fd beee 	b.w	d74b8 <network_listening>

000d96dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d96dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d96e0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d96e2:	b095      	sub	sp, #84	; 0x54
   d96e4:	4616      	mov	r6, r2
   d96e6:	460d      	mov	r5, r1
   d96e8:	4607      	mov	r7, r0
    IPAddress addr;
   d96ea:	f7ff fec5 	bl	d9478 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d96ee:	4621      	mov	r1, r4
   d96f0:	2220      	movs	r2, #32
   d96f2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d96f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d96f6:	f001 fd5e 	bl	db1b6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d96fa:	2340      	movs	r3, #64	; 0x40
   d96fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d96fe:	4621      	mov	r1, r4
   d9700:	466b      	mov	r3, sp
   d9702:	aa0c      	add	r2, sp, #48	; 0x30
   d9704:	4630      	mov	r0, r6
   d9706:	f7fd fd4b 	bl	d71a0 <netdb_getaddrinfo>
    if (!r) {
   d970a:	4604      	mov	r4, r0
   d970c:	2800      	cmp	r0, #0
   d970e:	d144      	bne.n	d979a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9710:	4602      	mov	r2, r0
   d9712:	2101      	movs	r1, #1
   d9714:	6868      	ldr	r0, [r5, #4]
   d9716:	f7fd feaf 	bl	d7478 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d971a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d971c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d971e:	4622      	mov	r2, r4
   d9720:	6868      	ldr	r0, [r5, #4]
   d9722:	f7fd fea9 	bl	d7478 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9726:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9728:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d972a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d972c:	2e00      	cmp	r6, #0
   d972e:	d034      	beq.n	d979a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d9730:	2900      	cmp	r1, #0
   d9732:	d132      	bne.n	d979a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9734:	6873      	ldr	r3, [r6, #4]
   d9736:	2b02      	cmp	r3, #2
   d9738:	d002      	beq.n	d9740 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d973a:	2b0a      	cmp	r3, #10
   d973c:	d009      	beq.n	d9752 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d973e:	e02a      	b.n	d9796 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d9740:	f1b8 0f00 	cmp.w	r8, #0
   d9744:	d027      	beq.n	d9796 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9746:	6971      	ldr	r1, [r6, #20]
   d9748:	4638      	mov	r0, r7
   d974a:	3104      	adds	r1, #4
   d974c:	f7ff fec1 	bl	d94d2 <_ZN9IPAddressaSEPKh>
   d9750:	e020      	b.n	d9794 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9752:	f1b9 0f00 	cmp.w	r9, #0
   d9756:	d01e      	beq.n	d9796 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9758:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d975a:	2211      	movs	r2, #17
   d975c:	a801      	add	r0, sp, #4
   d975e:	f001 fd2a 	bl	db1b6 <memset>
                    a.v = 6;
   d9762:	2306      	movs	r3, #6
   d9764:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9768:	ad01      	add	r5, sp, #4
   d976a:	f104 0308 	add.w	r3, r4, #8
   d976e:	3418      	adds	r4, #24
   d9770:	6818      	ldr	r0, [r3, #0]
   d9772:	6859      	ldr	r1, [r3, #4]
   d9774:	462a      	mov	r2, r5
   d9776:	c203      	stmia	r2!, {r0, r1}
   d9778:	3308      	adds	r3, #8
   d977a:	42a3      	cmp	r3, r4
   d977c:	4615      	mov	r5, r2
   d977e:	d1f7      	bne.n	d9770 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d9780:	a901      	add	r1, sp, #4
   d9782:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9784:	ad07      	add	r5, sp, #28
   d9786:	f7ff fe85 	bl	d9494 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d978a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d978c:	1d3c      	adds	r4, r7, #4
   d978e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9790:	682b      	ldr	r3, [r5, #0]
   d9792:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9794:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9796:	69f6      	ldr	r6, [r6, #28]
   d9798:	e7c8      	b.n	d972c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d979a:	9800      	ldr	r0, [sp, #0]
   d979c:	f7fd fcf8 	bl	d7190 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d97a0:	4638      	mov	r0, r7
   d97a2:	b015      	add	sp, #84	; 0x54
   d97a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d97a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d97a8:	4b02      	ldr	r3, [pc, #8]	; (d97b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d97aa:	4a03      	ldr	r2, [pc, #12]	; (d97b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d97ac:	601a      	str	r2, [r3, #0]
   d97ae:	2200      	movs	r2, #0
   d97b0:	605a      	str	r2, [r3, #4]
   d97b2:	4770      	bx	lr
   d97b4:	2003e564 	.word	0x2003e564
   d97b8:	000ddfb8 	.word	0x000ddfb8

000d97bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d97bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97be:	4606      	mov	r6, r0
   d97c0:	460d      	mov	r5, r1
   d97c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d97c4:	2400      	movs	r4, #0
  while (size--) {
   d97c6:	42bd      	cmp	r5, r7
   d97c8:	d00c      	beq.n	d97e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d97ca:	6833      	ldr	r3, [r6, #0]
   d97cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d97d0:	689b      	ldr	r3, [r3, #8]
   d97d2:	4630      	mov	r0, r6
   d97d4:	4798      	blx	r3
     if (chunk>=0)
   d97d6:	2800      	cmp	r0, #0
   d97d8:	db01      	blt.n	d97de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d97da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d97dc:	e7f3      	b.n	d97c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d97de:	2c00      	cmp	r4, #0
   d97e0:	bf08      	it	eq
   d97e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d97e4:	4620      	mov	r0, r4
   d97e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d97e8 <_ZN5Print5printEPKc>:
   d97e8:	b508      	push	{r3, lr}
   d97ea:	f7fc fe87 	bl	d64fc <_ZN5Print5writeEPKc>
   d97ee:	bd08      	pop	{r3, pc}

000d97f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d97f0:	6803      	ldr	r3, [r0, #0]
   d97f2:	689b      	ldr	r3, [r3, #8]
   d97f4:	4718      	bx	r3

000d97f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d97f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d97f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d97fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d97fc:	f7ff fff8 	bl	d97f0 <_ZN5Print5printEc>
  n += print('\n');
   d9800:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d9802:	4604      	mov	r4, r0
  n += print('\n');
   d9804:	4628      	mov	r0, r5
   d9806:	f7ff fff3 	bl	d97f0 <_ZN5Print5printEc>
  return n;
}
   d980a:	4420      	add	r0, r4
   d980c:	bd38      	pop	{r3, r4, r5, pc}

000d980e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d980e:	b538      	push	{r3, r4, r5, lr}
   d9810:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9812:	f7fc fe73 	bl	d64fc <_ZN5Print5writeEPKc>
   d9816:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9818:	4628      	mov	r0, r5
   d981a:	f7ff ffec 	bl	d97f6 <_ZN5Print7printlnEv>
  return n;
}
   d981e:	4420      	add	r0, r4
   d9820:	bd38      	pop	{r3, r4, r5, pc}

000d9822 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9822:	b530      	push	{r4, r5, lr}
   d9824:	b08b      	sub	sp, #44	; 0x2c
   d9826:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9828:	2100      	movs	r1, #0
   d982a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d982e:	2a01      	cmp	r2, #1
   d9830:	bf98      	it	ls
   d9832:	220a      	movls	r2, #10
   d9834:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d9838:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d983c:	fb05 3312 	mls	r3, r5, r2, r3
   d9840:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9844:	2b09      	cmp	r3, #9
   d9846:	bf94      	ite	ls
   d9848:	3330      	addls	r3, #48	; 0x30
   d984a:	3337      	addhi	r3, #55	; 0x37
   d984c:	b2db      	uxtb	r3, r3
   d984e:	4621      	mov	r1, r4
   d9850:	f804 3901 	strb.w	r3, [r4], #-1
   d9854:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9856:	2d00      	cmp	r5, #0
   d9858:	d1ee      	bne.n	d9838 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d985a:	f7fc fe4f 	bl	d64fc <_ZN5Print5writeEPKc>
}
   d985e:	b00b      	add	sp, #44	; 0x2c
   d9860:	bd30      	pop	{r4, r5, pc}

000d9862 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9862:	b40c      	push	{r2, r3}
   d9864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9868:	b087      	sub	sp, #28
   d986a:	af00      	add	r7, sp, #0
   d986c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d9870:	4605      	mov	r5, r0
   d9872:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d9876:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9878:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d987a:	4623      	mov	r3, r4
   d987c:	464a      	mov	r2, r9
   d987e:	2114      	movs	r1, #20
   d9880:	1d38      	adds	r0, r7, #4
   d9882:	f7fd fe69 	bl	d7558 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d9886:	2813      	cmp	r0, #19
   d9888:	d805      	bhi.n	d9896 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d988a:	1d39      	adds	r1, r7, #4
   d988c:	4628      	mov	r0, r5
   d988e:	f7fc fe35 	bl	d64fc <_ZN5Print5writeEPKc>
   d9892:	4604      	mov	r4, r0
   d9894:	e013      	b.n	d98be <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d9896:	f100 0308 	add.w	r3, r0, #8
   d989a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d989e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d98a0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d98a4:	1c41      	adds	r1, r0, #1
   d98a6:	4623      	mov	r3, r4
   d98a8:	464a      	mov	r2, r9
   d98aa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d98ac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d98ae:	f7fd fe53 	bl	d7558 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d98b2:	4669      	mov	r1, sp
   d98b4:	4628      	mov	r0, r5
   d98b6:	f7fc fe21 	bl	d64fc <_ZN5Print5writeEPKc>
   d98ba:	4604      	mov	r4, r0
   d98bc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d98be:	b11e      	cbz	r6, d98c8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d98c0:	4628      	mov	r0, r5
   d98c2:	f7ff ff98 	bl	d97f6 <_ZN5Print7printlnEv>
   d98c6:	4404      	add	r4, r0
    return n;
}
   d98c8:	4620      	mov	r0, r4
   d98ca:	371c      	adds	r7, #28
   d98cc:	46bd      	mov	sp, r7
   d98ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d98d2:	b002      	add	sp, #8
   d98d4:	4770      	bx	lr

000d98d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d98d6:	b510      	push	{r4, lr}
   d98d8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d98da:	f7fa fcc5 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d98de:	4620      	mov	r0, r4
   d98e0:	bd10      	pop	{r4, pc}
	...

000d98e4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d98e4:	4803      	ldr	r0, [pc, #12]	; (d98f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d98e6:	4a04      	ldr	r2, [pc, #16]	; (d98f8 <_GLOBAL__sub_I_RGB+0x14>)
   d98e8:	4904      	ldr	r1, [pc, #16]	; (d98fc <_GLOBAL__sub_I_RGB+0x18>)
   d98ea:	2300      	movs	r3, #0
   d98ec:	6083      	str	r3, [r0, #8]
   d98ee:	f000 bcc5 	b.w	da27c <__aeabi_atexit>
   d98f2:	bf00      	nop
   d98f4:	2003e56c 	.word	0x2003e56c
   d98f8:	2003d628 	.word	0x2003d628
   d98fc:	000d98d7 	.word	0x000d98d7

000d9900 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d9900:	2100      	movs	r1, #0
   d9902:	f7fd bc95 	b.w	d7230 <HAL_SPI_Acquire>

000d9906 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d9906:	2100      	movs	r1, #0
   d9908:	f7fd bc9a 	b.w	d7240 <HAL_SPI_Release>

000d990c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d990c:	b510      	push	{r4, lr}
   d990e:	4604      	mov	r4, r0
{
    _spi = spi;
   d9910:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d9912:	4608      	mov	r0, r1
   d9914:	f7fd fc5c 	bl	d71d0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9918:	2300      	movs	r3, #0
   d991a:	6063      	str	r3, [r4, #4]
}
   d991c:	4620      	mov	r0, r4
   d991e:	bd10      	pop	{r4, pc}

000d9920 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9920:	b510      	push	{r4, lr}
   d9922:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9924:	7800      	ldrb	r0, [r0, #0]
   d9926:	f7ff ffeb 	bl	d9900 <_ZN8SPIClass4lockEv.isra.0>
   d992a:	b948      	cbnz	r0, d9940 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d992c:	7820      	ldrb	r0, [r4, #0]
   d992e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9932:	f7fd fc3d 	bl	d71b0 <HAL_SPI_Begin>
        unlock();
   d9936:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d993c:	f7ff bfe3 	b.w	d9906 <_ZN8SPIClass6unlockEv.isra.1>
   d9940:	bd10      	pop	{r4, pc}

000d9942 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9942:	7800      	ldrb	r0, [r0, #0]
   d9944:	f7ff bfdf 	b.w	d9906 <_ZN8SPIClass6unlockEv.isra.1>

000d9948 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9948:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d994a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d994c:	6018      	str	r0, [r3, #0]
   d994e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9950:	6818      	ldr	r0, [r3, #0]
   d9952:	4288      	cmp	r0, r1
   d9954:	b2e5      	uxtb	r5, r4
   d9956:	d906      	bls.n	d9966 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9958:	3401      	adds	r4, #1
   d995a:	2c08      	cmp	r4, #8
   d995c:	d002      	beq.n	d9964 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d995e:	0840      	lsrs	r0, r0, #1
   d9960:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d9962:	e7f5      	b.n	d9950 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9964:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d9966:	4b02      	ldr	r3, [pc, #8]	; (d9970 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9968:	5d5b      	ldrb	r3, [r3, r5]
   d996a:	7013      	strb	r3, [r2, #0]
   d996c:	bd30      	pop	{r4, r5, pc}
   d996e:	bf00      	nop
   d9970:	000ddfe4 	.word	0x000ddfe4

000d9974 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9978:	4607      	mov	r7, r0
   d997a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d997c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d997e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d9980:	f7ff ffbe 	bl	d9900 <_ZN8SPIClass4lockEv.isra.0>
   d9984:	2800      	cmp	r0, #0
   d9986:	db62      	blt.n	d9a4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d9988:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d998a:	2214      	movs	r2, #20
   d998c:	2100      	movs	r1, #0
   d998e:	a809      	add	r0, sp, #36	; 0x24
   d9990:	f001 fc11 	bl	db1b6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9994:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d9996:	4620      	mov	r0, r4
   d9998:	2200      	movs	r2, #0
   d999a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d999c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d99a0:	f7fd fc26 	bl	d71f0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d99a4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d99a8:	b154      	cbz	r4, d99c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d99aa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d99ae:	b935      	cbnz	r5, d99be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d99b0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d99b4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d99b8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d99bc:	e003      	b.n	d99c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d99be:	2400      	movs	r4, #0
   d99c0:	46a1      	mov	r9, r4
   d99c2:	46a0      	mov	r8, r4
   d99c4:	2501      	movs	r5, #1
   d99c6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d99c8:	b105      	cbz	r5, d99cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d99ca:	b9bb      	cbnz	r3, d99fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d99cc:	429d      	cmp	r5, r3
   d99ce:	d10b      	bne.n	d99e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d99d0:	68b2      	ldr	r2, [r6, #8]
   d99d2:	4542      	cmp	r2, r8
   d99d4:	d108      	bne.n	d99e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d99d6:	f88d 9020 	strb.w	r9, [sp, #32]
   d99da:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d99de:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d99e2:	89b2      	ldrh	r2, [r6, #12]
   d99e4:	4291      	cmp	r1, r2
   d99e6:	d009      	beq.n	d99fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d99e8:	b153      	cbz	r3, d9a00 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d99ea:	2400      	movs	r4, #0
   d99ec:	7838      	ldrb	r0, [r7, #0]
   d99ee:	9401      	str	r4, [sp, #4]
   d99f0:	9400      	str	r4, [sp, #0]
   d99f2:	4623      	mov	r3, r4
   d99f4:	4622      	mov	r2, r4
   d99f6:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d99f8:	f7fd fc12 	bl	d7220 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d99fc:	2000      	movs	r0, #0
   d99fe:	e026      	b.n	d9a4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9a00:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9a04:	68b1      	ldr	r1, [r6, #8]
   d9a06:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9a08:	ab04      	add	r3, sp, #16
   d9a0a:	f10d 020f 	add.w	r2, sp, #15
   d9a0e:	f7ff ff9b 	bl	d9948 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d9a12:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9a14:	b105      	cbz	r5, d9a18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d9a16:	b9b1      	cbnz	r1, d9a46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d9a18:	42a9      	cmp	r1, r5
   d9a1a:	d008      	beq.n	d9a2e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9a1c:	2400      	movs	r4, #0
   d9a1e:	7838      	ldrb	r0, [r7, #0]
   d9a20:	9401      	str	r4, [sp, #4]
   d9a22:	7b74      	ldrb	r4, [r6, #13]
   d9a24:	7b33      	ldrb	r3, [r6, #12]
   d9a26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9a2a:	9400      	str	r4, [sp, #0]
   d9a2c:	e7e4      	b.n	d99f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d9a2e:	68b3      	ldr	r3, [r6, #8]
   d9a30:	4543      	cmp	r3, r8
   d9a32:	d3f3      	bcc.n	d9a1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9a34:	f88d 9020 	strb.w	r9, [sp, #32]
   d9a38:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9a3c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9a40:	89b3      	ldrh	r3, [r6, #12]
   d9a42:	429a      	cmp	r2, r3
   d9a44:	d1ea      	bne.n	d9a1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9a46:	9b04      	ldr	r3, [sp, #16]
   d9a48:	4543      	cmp	r3, r8
   d9a4a:	d1e7      	bne.n	d9a1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d9a4c:	e7d6      	b.n	d99fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d9a4e:	b00f      	add	sp, #60	; 0x3c
   d9a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9a54 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9a54:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d9a56:	7800      	ldrb	r0, [r0, #0]
   d9a58:	f7fd fbb2 	bl	d71c0 <HAL_SPI_Send_Receive_Data>
}
   d9a5c:	b2c0      	uxtb	r0, r0
   d9a5e:	bd08      	pop	{r3, pc}

000d9a60 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9a60:	b530      	push	{r4, r5, lr}
   d9a62:	b087      	sub	sp, #28
   d9a64:	4604      	mov	r4, r0
   d9a66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9a68:	7800      	ldrb	r0, [r0, #0]
   d9a6a:	9500      	str	r5, [sp, #0]
   d9a6c:	f7fd fbc8 	bl	d7200 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d9a70:	b93d      	cbnz	r5, d9a82 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d9a72:	a902      	add	r1, sp, #8
   d9a74:	7820      	ldrb	r0, [r4, #0]
   d9a76:	f7fd fbcb 	bl	d7210 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d9a7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9a7e:	07db      	lsls	r3, r3, #31
   d9a80:	d4f7      	bmi.n	d9a72 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d9a82:	b007      	add	sp, #28
   d9a84:	bd30      	pop	{r4, r5, pc}

000d9a86 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d9a86:	7800      	ldrb	r0, [r0, #0]
   d9a88:	f7fd bbaa 	b.w	d71e0 <HAL_SPI_Is_Enabled>

000d9a8c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d9a8c:	b510      	push	{r4, lr}
   d9a8e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d9a90:	f7fd fafe 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d9a94:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d9a96:	6823      	ldr	r3, [r4, #0]
   d9a98:	4620      	mov	r0, r4
   d9a9a:	695b      	ldr	r3, [r3, #20]
   d9a9c:	4798      	blx	r3
    if (c >= 0) return c;
   d9a9e:	2800      	cmp	r0, #0
   d9aa0:	da08      	bge.n	d9ab4 <_ZN6Stream9timedReadEv+0x28>
   d9aa2:	f7fd faf5 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d9aa6:	68e3      	ldr	r3, [r4, #12]
   d9aa8:	1ac0      	subs	r0, r0, r3
   d9aaa:	68a3      	ldr	r3, [r4, #8]
   d9aac:	4298      	cmp	r0, r3
   d9aae:	d3f2      	bcc.n	d9a96 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d9ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d9ab4:	bd10      	pop	{r4, pc}
	...

000d9ab8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d9ab8:	b570      	push	{r4, r5, r6, lr}
   d9aba:	460d      	mov	r5, r1
  String ret;
   d9abc:	4909      	ldr	r1, [pc, #36]	; (d9ae4 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d9abe:	4604      	mov	r4, r0
   d9ac0:	4616      	mov	r6, r2
  String ret;
   d9ac2:	f000 f858 	bl	d9b76 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d9ac6:	4628      	mov	r0, r5
   d9ac8:	f7ff ffe0 	bl	d9a8c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d9acc:	2800      	cmp	r0, #0
   d9ace:	db06      	blt.n	d9ade <_ZN6Stream15readStringUntilEc+0x26>
   d9ad0:	42b0      	cmp	r0, r6
   d9ad2:	d004      	beq.n	d9ade <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d9ad4:	b2c1      	uxtb	r1, r0
   d9ad6:	4620      	mov	r0, r4
   d9ad8:	f000 f8a2 	bl	d9c20 <_ZN6String6concatEc>
   d9adc:	e7f3      	b.n	d9ac6 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d9ade:	4620      	mov	r0, r4
   d9ae0:	bd70      	pop	{r4, r5, r6, pc}
   d9ae2:	bf00      	nop
   d9ae4:	000ddf44 	.word	0x000ddf44

000d9ae8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9ae8:	b510      	push	{r4, lr}
   d9aea:	4604      	mov	r4, r0
{
	free(buffer);
   d9aec:	6800      	ldr	r0, [r0, #0]
   d9aee:	f7fd fd03 	bl	d74f8 <free>
}
   d9af2:	4620      	mov	r0, r4
   d9af4:	bd10      	pop	{r4, pc}

000d9af6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9af6:	b510      	push	{r4, lr}
   d9af8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9afa:	6800      	ldr	r0, [r0, #0]
   d9afc:	b108      	cbz	r0, d9b02 <_ZN6String10invalidateEv+0xc>
   d9afe:	f7fd fcfb 	bl	d74f8 <free>
	buffer = NULL;
   d9b02:	2300      	movs	r3, #0
   d9b04:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9b06:	60a3      	str	r3, [r4, #8]
   d9b08:	6063      	str	r3, [r4, #4]
   d9b0a:	bd10      	pop	{r4, pc}

000d9b0c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9b0c:	b538      	push	{r3, r4, r5, lr}
   d9b0e:	4604      	mov	r4, r0
   d9b10:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9b12:	6800      	ldr	r0, [r0, #0]
   d9b14:	3101      	adds	r1, #1
   d9b16:	f7fd fcf7 	bl	d7508 <realloc>
	if (newbuffer) {
   d9b1a:	b110      	cbz	r0, d9b22 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9b1c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9b20:	2001      	movs	r0, #1
	}
	return 0;
}
   d9b22:	bd38      	pop	{r3, r4, r5, pc}

000d9b24 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9b24:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9b26:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9b28:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9b2a:	b113      	cbz	r3, d9b32 <_ZN6String7reserveEj+0xe>
   d9b2c:	6843      	ldr	r3, [r0, #4]
   d9b2e:	428b      	cmp	r3, r1
   d9b30:	d207      	bcs.n	d9b42 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9b32:	4620      	mov	r0, r4
   d9b34:	f7ff ffea 	bl	d9b0c <_ZN6String12changeBufferEj>
   d9b38:	b120      	cbz	r0, d9b44 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d9b3a:	68a3      	ldr	r3, [r4, #8]
   d9b3c:	b90b      	cbnz	r3, d9b42 <_ZN6String7reserveEj+0x1e>
   d9b3e:	6822      	ldr	r2, [r4, #0]
   d9b40:	7013      	strb	r3, [r2, #0]
   d9b42:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9b44:	bd10      	pop	{r4, pc}

000d9b46 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9b46:	b570      	push	{r4, r5, r6, lr}
   d9b48:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d9b4a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9b4c:	4604      	mov	r4, r0
   d9b4e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9b50:	f7ff ffe8 	bl	d9b24 <_ZN6String7reserveEj>
   d9b54:	b918      	cbnz	r0, d9b5e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9b56:	4620      	mov	r0, r4
   d9b58:	f7ff ffcd 	bl	d9af6 <_ZN6String10invalidateEv>
		return *this;
   d9b5c:	e009      	b.n	d9b72 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9b5e:	462a      	mov	r2, r5
   d9b60:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9b62:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9b64:	6820      	ldr	r0, [r4, #0]
   d9b66:	f001 fb00 	bl	db16a <memcpy>
	buffer[len] = 0;
   d9b6a:	6822      	ldr	r2, [r4, #0]
   d9b6c:	68a3      	ldr	r3, [r4, #8]
   d9b6e:	2100      	movs	r1, #0
   d9b70:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9b72:	4620      	mov	r0, r4
   d9b74:	bd70      	pop	{r4, r5, r6, pc}

000d9b76 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9b76:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9b78:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9b7a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9b7c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9b7e:	6043      	str	r3, [r0, #4]
	len = 0;
   d9b80:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9b82:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9b84:	460d      	mov	r5, r1
   d9b86:	b139      	cbz	r1, d9b98 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9b88:	4608      	mov	r0, r1
   d9b8a:	f001 fb82 	bl	db292 <strlen>
   d9b8e:	4629      	mov	r1, r5
   d9b90:	4602      	mov	r2, r0
   d9b92:	4620      	mov	r0, r4
   d9b94:	f7ff ffd7 	bl	d9b46 <_ZN6String4copyEPKcj>
}
   d9b98:	4620      	mov	r0, r4
   d9b9a:	bd38      	pop	{r3, r4, r5, pc}

000d9b9c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9b9c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9b9e:	b510      	push	{r4, lr}
   d9ba0:	460b      	mov	r3, r1
   d9ba2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9ba4:	d007      	beq.n	d9bb6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9ba6:	6809      	ldr	r1, [r1, #0]
   d9ba8:	b119      	cbz	r1, d9bb2 <_ZN6StringaSERKS_+0x16>
   d9baa:	689a      	ldr	r2, [r3, #8]
   d9bac:	f7ff ffcb 	bl	d9b46 <_ZN6String4copyEPKcj>
   d9bb0:	e001      	b.n	d9bb6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9bb2:	f7ff ffa0 	bl	d9af6 <_ZN6String10invalidateEv>

	return *this;
}
   d9bb6:	4620      	mov	r0, r4
   d9bb8:	bd10      	pop	{r4, pc}

000d9bba <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9bba:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9bbc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9bbe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9bc0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9bc2:	6043      	str	r3, [r0, #4]
	len = 0;
   d9bc4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9bc6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d9bc8:	f7ff ffe8 	bl	d9b9c <_ZN6StringaSERKS_>
}
   d9bcc:	4620      	mov	r0, r4
   d9bce:	bd10      	pop	{r4, pc}

000d9bd0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9bd0:	b538      	push	{r3, r4, r5, lr}
   d9bd2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9bd4:	460c      	mov	r4, r1
   d9bd6:	b141      	cbz	r1, d9bea <_ZN6StringaSEPKc+0x1a>
   d9bd8:	4608      	mov	r0, r1
   d9bda:	f001 fb5a 	bl	db292 <strlen>
   d9bde:	4621      	mov	r1, r4
   d9be0:	4602      	mov	r2, r0
   d9be2:	4628      	mov	r0, r5
   d9be4:	f7ff ffaf 	bl	d9b46 <_ZN6String4copyEPKcj>
   d9be8:	e001      	b.n	d9bee <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d9bea:	f7ff ff84 	bl	d9af6 <_ZN6String10invalidateEv>

	return *this;
}
   d9bee:	4628      	mov	r0, r5
   d9bf0:	bd38      	pop	{r3, r4, r5, pc}

000d9bf2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9bf2:	b570      	push	{r4, r5, r6, lr}
   d9bf4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9bf6:	460e      	mov	r6, r1
   d9bf8:	b909      	cbnz	r1, d9bfe <_ZN6String6concatEPKcj+0xc>
   d9bfa:	2000      	movs	r0, #0
   d9bfc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9bfe:	b16a      	cbz	r2, d9c1c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d9c00:	6883      	ldr	r3, [r0, #8]
   d9c02:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d9c04:	4629      	mov	r1, r5
   d9c06:	f7ff ff8d 	bl	d9b24 <_ZN6String7reserveEj>
   d9c0a:	2800      	cmp	r0, #0
   d9c0c:	d0f5      	beq.n	d9bfa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9c0e:	6820      	ldr	r0, [r4, #0]
   d9c10:	68a3      	ldr	r3, [r4, #8]
   d9c12:	4631      	mov	r1, r6
   d9c14:	4418      	add	r0, r3
   d9c16:	f001 fb18 	bl	db24a <strcpy>
	len = newlen;
   d9c1a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d9c1c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9c1e:	bd70      	pop	{r4, r5, r6, pc}

000d9c20 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d9c20:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d9c22:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d9c24:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d9c28:	2201      	movs	r2, #1
   d9c2a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d9c2c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d9c30:	f7ff ffdf 	bl	d9bf2 <_ZN6String6concatEPKcj>
}
   d9c34:	b003      	add	sp, #12
   d9c36:	f85d fb04 	ldr.w	pc, [sp], #4

000d9c3a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d9c3a:	6883      	ldr	r3, [r0, #8]
   d9c3c:	428b      	cmp	r3, r1
   d9c3e:	d903      	bls.n	d9c48 <_ZNK6StringixEj+0xe>
   d9c40:	6800      	ldr	r0, [r0, #0]
   d9c42:	b110      	cbz	r0, d9c4a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d9c44:	5c40      	ldrb	r0, [r0, r1]
   d9c46:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d9c48:	2000      	movs	r0, #0
	return buffer[index];
}
   d9c4a:	4770      	bx	lr

000d9c4c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d9c4c:	f7ff bff5 	b.w	d9c3a <_ZNK6StringixEj>

000d9c50 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9c50:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9c52:	4c09      	ldr	r4, [pc, #36]	; (d9c78 <_GLOBAL__sub_I_System+0x28>)
   d9c54:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9c56:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9c5a:	6020      	str	r0, [r4, #0]
   d9c5c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9c5e:	71a0      	strb	r0, [r4, #6]
   d9c60:	8120      	strh	r0, [r4, #8]
   d9c62:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9c64:	f7fd fb84 	bl	d7370 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9c68:	4620      	mov	r0, r4
   d9c6a:	4a04      	ldr	r2, [pc, #16]	; (d9c7c <_GLOBAL__sub_I_System+0x2c>)
   d9c6c:	4904      	ldr	r1, [pc, #16]	; (d9c80 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9c72:	f000 bb03 	b.w	da27c <__aeabi_atexit>
   d9c76:	bf00      	nop
   d9c78:	2003e57c 	.word	0x2003e57c
   d9c7c:	2003d628 	.word	0x2003d628
   d9c80:	000d41f9 	.word	0x000d41f9

000d9c84 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d9c86:	4b14      	ldr	r3, [pc, #80]	; (d9cd8 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9c88:	4f14      	ldr	r7, [pc, #80]	; (d9cdc <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d9c8a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d9c8c:	4b14      	ldr	r3, [pc, #80]	; (d9ce0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d9c8e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d9c90:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d9c92:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9c94:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d9c96:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9c98:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9c9a:	d01b      	beq.n	d9cd4 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d9c9c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d9c9e:	ad01      	add	r5, sp, #4
   d9ca0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9ca4:	f001 f956 	bl	daf54 <localtime>
	calendar_time->tm_year += 1900;
   d9ca8:	6943      	ldr	r3, [r0, #20]
   d9caa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9cae:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9cb0:	4604      	mov	r4, r0
   d9cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9cba:	f8d4 e000 	ldr.w	lr, [r4]
   d9cbe:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9cc2:	ad01      	add	r5, sp, #4
   d9cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9cc6:	4c07      	ldr	r4, [pc, #28]	; (d9ce4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d9cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9cce:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9cd0:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9cd4:	b00b      	add	sp, #44	; 0x2c
   d9cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9cd8:	2003e5b8 	.word	0x2003e5b8
   d9cdc:	2003e5b4 	.word	0x2003e5b4
   d9ce0:	2003e5b0 	.word	0x2003e5b0
   d9ce4:	2003e588 	.word	0x2003e588

000d9ce8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d9ce8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9cea:	2000      	movs	r0, #0
   d9cec:	f7fd fb9c 	bl	d7428 <spark_sync_time_pending>
   d9cf0:	b128      	cbz	r0, d9cfe <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9cf2:	f7fd fb81 	bl	d73f8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9cf6:	f080 0001 	eor.w	r0, r0, #1
   d9cfa:	b2c0      	uxtb	r0, r0
   d9cfc:	bd08      	pop	{r3, pc}
   d9cfe:	2001      	movs	r0, #1
    }
   d9d00:	bd08      	pop	{r3, pc}
	...

000d9d04 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9d04:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9d06:	f7ff ffbd 	bl	d9c84 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9d0a:	4b02      	ldr	r3, [pc, #8]	; (d9d14 <_ZN9TimeClass5monthEl+0x10>)
   d9d0c:	6918      	ldr	r0, [r3, #16]
}
   d9d0e:	3001      	adds	r0, #1
   d9d10:	bd08      	pop	{r3, pc}
   d9d12:	bf00      	nop
   d9d14:	2003e588 	.word	0x2003e588

000d9d18 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d9d18:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d9d1a:	2000      	movs	r0, #0
   d9d1c:	f7fd f9c8 	bl	d70b0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d9d20:	4604      	mov	r4, r0
   d9d22:	b968      	cbnz	r0, d9d40 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9d24:	f7fd fb1c 	bl	d7360 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9d28:	2801      	cmp	r0, #1
   d9d2a:	d10b      	bne.n	d9d44 <_ZN9TimeClass7isValidEv+0x2c>
   d9d2c:	4620      	mov	r0, r4
   d9d2e:	f7fd fb3f 	bl	d73b0 <system_thread_get_state>
   d9d32:	b938      	cbnz	r0, d9d44 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9d34:	f7ff ffd8 	bl	d9ce8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9d38:	b930      	cbnz	r0, d9d48 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d9d3a:	f7fd fb55 	bl	d73e8 <spark_process>
   d9d3e:	e7f9      	b.n	d9d34 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9d40:	2001      	movs	r0, #1
   d9d42:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9d44:	2000      	movs	r0, #0
   d9d46:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9d48:	f7ff ffce 	bl	d9ce8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9d4c:	2000      	movs	r0, #0
   d9d4e:	f7fd f9af 	bl	d70b0 <HAL_RTC_Time_Is_Valid>
   d9d52:	3000      	adds	r0, #0
   d9d54:	bf18      	it	ne
   d9d56:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9d58:	bd10      	pop	{r4, pc}

000d9d5a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9d5a:	b508      	push	{r3, lr}
    (void)isValid();
   d9d5c:	f7ff ffdc 	bl	d9d18 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9d64:	f7fd b99c 	b.w	d70a0 <HAL_RTC_Get_UnixTime>

000d9d68 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9d68:	b508      	push	{r3, lr}
	return hour(now());
   d9d6a:	f7ff fff6 	bl	d9d5a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9d6e:	f7ff ff89 	bl	d9c84 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9d72:	4b01      	ldr	r3, [pc, #4]	; (d9d78 <_ZN9TimeClass4hourEv+0x10>)
   d9d74:	6898      	ldr	r0, [r3, #8]
   d9d76:	bd08      	pop	{r3, pc}
   d9d78:	2003e588 	.word	0x2003e588

000d9d7c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9d7c:	b508      	push	{r3, lr}
	return minute(now());
   d9d7e:	f7ff ffec 	bl	d9d5a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9d82:	f7ff ff7f 	bl	d9c84 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9d86:	4b01      	ldr	r3, [pc, #4]	; (d9d8c <_ZN9TimeClass6minuteEv+0x10>)
   d9d88:	6858      	ldr	r0, [r3, #4]
   d9d8a:	bd08      	pop	{r3, pc}
   d9d8c:	2003e588 	.word	0x2003e588

000d9d90 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d9d90:	b508      	push	{r3, lr}
	return second(now());
   d9d92:	f7ff ffe2 	bl	d9d5a <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9d96:	f7ff ff75 	bl	d9c84 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d9d9a:	4b01      	ldr	r3, [pc, #4]	; (d9da0 <_ZN9TimeClass6secondEv+0x10>)
   d9d9c:	6818      	ldr	r0, [r3, #0]
   d9d9e:	bd08      	pop	{r3, pc}
   d9da0:	2003e588 	.word	0x2003e588

000d9da4 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9da4:	b508      	push	{r3, lr}
	return day(now());
   d9da6:	f7ff ffd8 	bl	d9d5a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9daa:	f7ff ff6b 	bl	d9c84 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9dae:	4b01      	ldr	r3, [pc, #4]	; (d9db4 <_ZN9TimeClass3dayEv+0x10>)
   d9db0:	68d8      	ldr	r0, [r3, #12]
   d9db2:	bd08      	pop	{r3, pc}
   d9db4:	2003e588 	.word	0x2003e588

000d9db8 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9db8:	b508      	push	{r3, lr}
	return month(now());
   d9dba:	f7ff ffce 	bl	d9d5a <_ZN9TimeClass3nowEv>
}
   d9dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9dc2:	f7ff bf9f 	b.w	d9d04 <_ZN9TimeClass5monthEl>
	...

000d9dc8 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9dc8:	b508      	push	{r3, lr}
	return year(now());
   d9dca:	f7ff ffc6 	bl	d9d5a <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9dce:	f7ff ff59 	bl	d9c84 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9dd2:	4b01      	ldr	r3, [pc, #4]	; (d9dd8 <_ZN9TimeClass4yearEv+0x10>)
   d9dd4:	6958      	ldr	r0, [r3, #20]
   d9dd6:	bd08      	pop	{r3, pc}
   d9dd8:	2003e588 	.word	0x2003e588

000d9ddc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9ddc:	4b02      	ldr	r3, [pc, #8]	; (d9de8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9dde:	681a      	ldr	r2, [r3, #0]
   d9de0:	4b02      	ldr	r3, [pc, #8]	; (d9dec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9de2:	601a      	str	r2, [r3, #0]
   d9de4:	4770      	bx	lr
   d9de6:	bf00      	nop
   d9de8:	2003d538 	.word	0x2003d538
   d9dec:	2003e5ac 	.word	0x2003e5ac

000d9df0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9df0:	4770      	bx	lr

000d9df2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9df2:	7441      	strb	r1, [r0, #17]
   d9df4:	4770      	bx	lr

000d9df6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9df6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9df8:	7c00      	ldrb	r0, [r0, #16]
   d9dfa:	f7fd fa61 	bl	d72c0 <HAL_USART_Available_Data_For_Write>
}
   d9dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e02:	bd08      	pop	{r3, pc}

000d9e04 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9e04:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9e06:	7c00      	ldrb	r0, [r0, #16]
   d9e08:	f7fd fa32 	bl	d7270 <HAL_USART_Available_Data>
}
   d9e0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e10:	bd08      	pop	{r3, pc}

000d9e12 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9e12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9e14:	7c00      	ldrb	r0, [r0, #16]
   d9e16:	f7fd fa3b 	bl	d7290 <HAL_USART_Peek_Data>
}
   d9e1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e1e:	bf28      	it	cs
   d9e20:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9e24:	bd08      	pop	{r3, pc}

000d9e26 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9e26:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9e28:	7c00      	ldrb	r0, [r0, #16]
   d9e2a:	f7fd fa29 	bl	d7280 <HAL_USART_Read_Data>
}
   d9e2e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e32:	bf28      	it	cs
   d9e34:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9e38:	bd08      	pop	{r3, pc}

000d9e3a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9e3a:	7c00      	ldrb	r0, [r0, #16]
   d9e3c:	f7fd ba30 	b.w	d72a0 <HAL_USART_Flush_Data>

000d9e40 <_ZN11USARTSerialD0Ev>:
   d9e40:	b510      	push	{r4, lr}
   d9e42:	2114      	movs	r1, #20
   d9e44:	4604      	mov	r4, r0
   d9e46:	f000 fa1e 	bl	da286 <_ZdlPvj>
   d9e4a:	4620      	mov	r0, r4
   d9e4c:	bd10      	pop	{r4, pc}

000d9e4e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9e4e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9e50:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9e52:	4604      	mov	r4, r0
   d9e54:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9e56:	b925      	cbnz	r5, d9e62 <_ZN11USARTSerial5writeEh+0x14>
   d9e58:	7c00      	ldrb	r0, [r0, #16]
   d9e5a:	f7fd fa31 	bl	d72c0 <HAL_USART_Available_Data_For_Write>
   d9e5e:	2800      	cmp	r0, #0
   d9e60:	dd05      	ble.n	d9e6e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9e62:	4631      	mov	r1, r6
   d9e64:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9e6a:	f7fd b9f9 	b.w	d7260 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9e6e:	4628      	mov	r0, r5
   d9e70:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9e74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9e74:	b510      	push	{r4, lr}
   d9e76:	4604      	mov	r4, r0
   d9e78:	4608      	mov	r0, r1
   d9e7a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9e7c:	2200      	movs	r2, #0
   d9e7e:	6062      	str	r2, [r4, #4]
   d9e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9e84:	60a2      	str	r2, [r4, #8]
   d9e86:	4a05      	ldr	r2, [pc, #20]	; (d9e9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9e88:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9e8a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9e8c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9e8e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9e90:	461a      	mov	r2, r3
   d9e92:	f7fd f9dd 	bl	d7250 <HAL_USART_Init>
}
   d9e96:	4620      	mov	r0, r4
   d9e98:	bd10      	pop	{r4, pc}
   d9e9a:	bf00      	nop
   d9e9c:	000de01c 	.word	0x000de01c

000d9ea0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9ea0:	7c00      	ldrb	r0, [r0, #16]
   d9ea2:	f7fd ba05 	b.w	d72b0 <HAL_USART_Is_Enabled>
	...

000d9ea8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9ea8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9eaa:	4d0c      	ldr	r5, [pc, #48]	; (d9edc <_Z22__fetch_global_Serial1v+0x34>)
   d9eac:	6829      	ldr	r1, [r5, #0]
   d9eae:	f011 0401 	ands.w	r4, r1, #1
   d9eb2:	d111      	bne.n	d9ed8 <_Z22__fetch_global_Serial1v+0x30>
   d9eb4:	4628      	mov	r0, r5
   d9eb6:	f7fa f8f6 	bl	d40a6 <__cxa_guard_acquire>
   d9eba:	b168      	cbz	r0, d9ed8 <_Z22__fetch_global_Serial1v+0x30>
   d9ebc:	4a08      	ldr	r2, [pc, #32]	; (d9ee0 <_Z22__fetch_global_Serial1v+0x38>)
   d9ebe:	4b09      	ldr	r3, [pc, #36]	; (d9ee4 <_Z22__fetch_global_Serial1v+0x3c>)
   d9ec0:	4809      	ldr	r0, [pc, #36]	; (d9ee8 <_Z22__fetch_global_Serial1v+0x40>)
   d9ec2:	4621      	mov	r1, r4
   d9ec4:	f7ff ffd6 	bl	d9e74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9ec8:	4628      	mov	r0, r5
   d9eca:	f7fa f8f1 	bl	d40b0 <__cxa_guard_release>
   d9ece:	4a07      	ldr	r2, [pc, #28]	; (d9eec <_Z22__fetch_global_Serial1v+0x44>)
   d9ed0:	4907      	ldr	r1, [pc, #28]	; (d9ef0 <_Z22__fetch_global_Serial1v+0x48>)
   d9ed2:	4805      	ldr	r0, [pc, #20]	; (d9ee8 <_Z22__fetch_global_Serial1v+0x40>)
   d9ed4:	f000 f9d2 	bl	da27c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9ed8:	4803      	ldr	r0, [pc, #12]	; (d9ee8 <_Z22__fetch_global_Serial1v+0x40>)
   d9eda:	bd38      	pop	{r3, r4, r5, pc}
   d9edc:	2003e654 	.word	0x2003e654
   d9ee0:	2003e658 	.word	0x2003e658
   d9ee4:	2003e5d0 	.word	0x2003e5d0
   d9ee8:	2003e5bc 	.word	0x2003e5bc
   d9eec:	2003d628 	.word	0x2003d628
   d9ef0:	000d9df1 	.word	0x000d9df1

000d9ef4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ef4:	7441      	strb	r1, [r0, #17]
   d9ef6:	4770      	bx	lr

000d9ef8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9ef8:	4770      	bx	lr

000d9efa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9efa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9efc:	2100      	movs	r1, #0
   d9efe:	7c00      	ldrb	r0, [r0, #16]
   d9f00:	f7fd fa06 	bl	d7310 <HAL_USB_USART_Receive_Data>
}
   d9f04:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9f08:	bf28      	it	cs
   d9f0a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9f0e:	bd08      	pop	{r3, pc}

000d9f10 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9f10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9f12:	2101      	movs	r1, #1
   d9f14:	7c00      	ldrb	r0, [r0, #16]
   d9f16:	f7fd f9fb 	bl	d7310 <HAL_USB_USART_Receive_Data>
}
   d9f1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9f1e:	bf28      	it	cs
   d9f20:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9f24:	bd08      	pop	{r3, pc}

000d9f26 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9f26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9f28:	7c00      	ldrb	r0, [r0, #16]
   d9f2a:	f7fd f9e9 	bl	d7300 <HAL_USB_USART_Available_Data_For_Write>
}
   d9f2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9f32:	bd08      	pop	{r3, pc}

000d9f34 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9f34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9f36:	7c00      	ldrb	r0, [r0, #16]
   d9f38:	f7fd f9da 	bl	d72f0 <HAL_USB_USART_Available_Data>
}
   d9f3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9f40:	bd08      	pop	{r3, pc}

000d9f42 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9f42:	7c00      	ldrb	r0, [r0, #16]
   d9f44:	f7fd b9f4 	b.w	d7330 <HAL_USB_USART_Flush_Data>

000d9f48 <_ZN9USBSerialD0Ev>:
   d9f48:	b510      	push	{r4, lr}
   d9f4a:	2114      	movs	r1, #20
   d9f4c:	4604      	mov	r4, r0
   d9f4e:	f000 f99a 	bl	da286 <_ZdlPvj>
   d9f52:	4620      	mov	r0, r4
   d9f54:	bd10      	pop	{r4, pc}

000d9f56 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9f56:	b538      	push	{r3, r4, r5, lr}
   d9f58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9f5a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9f5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9f5e:	f7fd f9cf 	bl	d7300 <HAL_USB_USART_Available_Data_For_Write>
   d9f62:	2800      	cmp	r0, #0
   d9f64:	dc01      	bgt.n	d9f6a <_ZN9USBSerial5writeEh+0x14>
   d9f66:	7c60      	ldrb	r0, [r4, #17]
   d9f68:	b128      	cbz	r0, d9f76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9f6a:	4629      	mov	r1, r5
   d9f6c:	7c20      	ldrb	r0, [r4, #16]
   d9f6e:	f7fd f9d7 	bl	d7320 <HAL_USB_USART_Send_Data>
   d9f72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9f76:	bd38      	pop	{r3, r4, r5, pc}

000d9f78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9f78:	b510      	push	{r4, lr}
   d9f7a:	4604      	mov	r4, r0
   d9f7c:	2300      	movs	r3, #0
   d9f7e:	6063      	str	r3, [r4, #4]
   d9f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9f84:	60a3      	str	r3, [r4, #8]
   d9f86:	4b05      	ldr	r3, [pc, #20]	; (d9f9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9f88:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9f8a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9f8c:	4608      	mov	r0, r1
{
  _serial = serial;
   d9f8e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9f90:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9f92:	4611      	mov	r1, r2
   d9f94:	f7fd f99c 	bl	d72d0 <HAL_USB_USART_Init>
}
   d9f98:	4620      	mov	r0, r4
   d9f9a:	bd10      	pop	{r4, pc}
   d9f9c:	000de04c 	.word	0x000de04c

000d9fa0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9fa0:	2200      	movs	r2, #0
   d9fa2:	7c00      	ldrb	r0, [r0, #16]
   d9fa4:	f7fd b99c 	b.w	d72e0 <HAL_USB_USART_Begin>

000d9fa8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9fa8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9faa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9fac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9fae:	2100      	movs	r1, #0
   d9fb0:	f001 f901 	bl	db1b6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9fb4:	4620      	mov	r0, r4
   d9fb6:	bd10      	pop	{r4, pc}

000d9fb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9fb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9fba:	4d0e      	ldr	r5, [pc, #56]	; (d9ff4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9fbc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9fbe:	a801      	add	r0, sp, #4
   d9fc0:	f7ff fff2 	bl	d9fa8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9fc4:	6829      	ldr	r1, [r5, #0]
   d9fc6:	f011 0401 	ands.w	r4, r1, #1
   d9fca:	d110      	bne.n	d9fee <_Z16_fetch_usbserialv+0x36>
   d9fcc:	4628      	mov	r0, r5
   d9fce:	f7fa f86a 	bl	d40a6 <__cxa_guard_acquire>
   d9fd2:	b160      	cbz	r0, d9fee <_Z16_fetch_usbserialv+0x36>
   d9fd4:	aa01      	add	r2, sp, #4
   d9fd6:	4621      	mov	r1, r4
   d9fd8:	4807      	ldr	r0, [pc, #28]	; (d9ff8 <_Z16_fetch_usbserialv+0x40>)
   d9fda:	f7ff ffcd 	bl	d9f78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9fde:	4628      	mov	r0, r5
   d9fe0:	f7fa f866 	bl	d40b0 <__cxa_guard_release>
   d9fe4:	4a05      	ldr	r2, [pc, #20]	; (d9ffc <_Z16_fetch_usbserialv+0x44>)
   d9fe6:	4906      	ldr	r1, [pc, #24]	; (da000 <_Z16_fetch_usbserialv+0x48>)
   d9fe8:	4803      	ldr	r0, [pc, #12]	; (d9ff8 <_Z16_fetch_usbserialv+0x40>)
   d9fea:	f000 f947 	bl	da27c <__aeabi_atexit>
	return _usbserial;
}
   d9fee:	4802      	ldr	r0, [pc, #8]	; (d9ff8 <_Z16_fetch_usbserialv+0x40>)
   d9ff0:	b007      	add	sp, #28
   d9ff2:	bd30      	pop	{r4, r5, pc}
   d9ff4:	2003e6dc 	.word	0x2003e6dc
   d9ff8:	2003e6e0 	.word	0x2003e6e0
   d9ffc:	2003d628 	.word	0x2003d628
   da000:	000d9ef9 	.word	0x000d9ef9

000da004 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   da004:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da006:	4b0c      	ldr	r3, [pc, #48]	; (da038 <serialEventRun+0x34>)
   da008:	b133      	cbz	r3, da018 <serialEventRun+0x14>
   da00a:	f7ff ffd5 	bl	d9fb8 <_Z16_fetch_usbserialv>
   da00e:	6803      	ldr	r3, [r0, #0]
   da010:	691b      	ldr	r3, [r3, #16]
   da012:	4798      	blx	r3
   da014:	2800      	cmp	r0, #0
   da016:	dc09      	bgt.n	da02c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   da018:	4b08      	ldr	r3, [pc, #32]	; (da03c <serialEventRun+0x38>)
   da01a:	b163      	cbz	r3, da036 <serialEventRun+0x32>
   da01c:	f7ff ff44 	bl	d9ea8 <_Z22__fetch_global_Serial1v>
   da020:	6803      	ldr	r3, [r0, #0]
   da022:	691b      	ldr	r3, [r3, #16]
   da024:	4798      	blx	r3
   da026:	2800      	cmp	r0, #0
   da028:	dc03      	bgt.n	da032 <serialEventRun+0x2e>
   da02a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   da02c:	f3af 8000 	nop.w
   da030:	e7f2      	b.n	da018 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   da032:	f3af 8000 	nop.w
   da036:	bd08      	pop	{r3, pc}
	...

000da040 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   da040:	b508      	push	{r3, lr}
	serialEventRun();
   da042:	f7ff ffdf 	bl	da004 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da046:	f7fd f823 	bl	d7090 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da04a:	4b01      	ldr	r3, [pc, #4]	; (da050 <_post_loop+0x10>)
   da04c:	6018      	str	r0, [r3, #0]
   da04e:	bd08      	pop	{r3, pc}
   da050:	2003e708 	.word	0x2003e708

000da054 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da054:	4802      	ldr	r0, [pc, #8]	; (da060 <_Z33system_initialize_user_backup_ramv+0xc>)
   da056:	4a03      	ldr	r2, [pc, #12]	; (da064 <_Z33system_initialize_user_backup_ramv+0x10>)
   da058:	4903      	ldr	r1, [pc, #12]	; (da068 <_Z33system_initialize_user_backup_ramv+0x14>)
   da05a:	1a12      	subs	r2, r2, r0
   da05c:	f001 b885 	b.w	db16a <memcpy>
   da060:	2003f400 	.word	0x2003f400
   da064:	2003f404 	.word	0x2003f404
   da068:	000de460 	.word	0x000de460

000da06c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da06c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da06e:	2300      	movs	r3, #0
   da070:	9300      	str	r3, [sp, #0]
   da072:	461a      	mov	r2, r3
   da074:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da078:	f7fd f9ac 	bl	d73d4 <system_ctrl_set_result>
}
   da07c:	b003      	add	sp, #12
   da07e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da084 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   da084:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da086:	8843      	ldrh	r3, [r0, #2]
   da088:	2b0a      	cmp	r3, #10
   da08a:	d008      	beq.n	da09e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da08c:	2b50      	cmp	r3, #80	; 0x50
   da08e:	d109      	bne.n	da0a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   da090:	4b09      	ldr	r3, [pc, #36]	; (da0b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da092:	681b      	ldr	r3, [r3, #0]
   da094:	b13b      	cbz	r3, da0a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   da096:	b003      	add	sp, #12
   da098:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   da09c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   da09e:	f7ff ffe5 	bl	da06c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   da0a2:	e006      	b.n	da0b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da0a4:	2300      	movs	r3, #0
   da0a6:	9300      	str	r3, [sp, #0]
   da0a8:	461a      	mov	r2, r3
   da0aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da0ae:	f7fd f991 	bl	d73d4 <system_ctrl_set_result>
        break;
    }
}
   da0b2:	b003      	add	sp, #12
   da0b4:	f85d fb04 	ldr.w	pc, [sp], #4
   da0b8:	2003e6f4 	.word	0x2003e6f4

000da0bc <module_user_init_hook>:

void module_user_init_hook()
{
   da0bc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da0be:	4c10      	ldr	r4, [pc, #64]	; (da100 <module_user_init_hook+0x44>)
   da0c0:	4d10      	ldr	r5, [pc, #64]	; (da104 <module_user_init_hook+0x48>)
   da0c2:	6823      	ldr	r3, [r4, #0]
   da0c4:	42ab      	cmp	r3, r5
   da0c6:	4b10      	ldr	r3, [pc, #64]	; (da108 <module_user_init_hook+0x4c>)
   da0c8:	bf0c      	ite	eq
   da0ca:	2201      	moveq	r2, #1
   da0cc:	2200      	movne	r2, #0
   da0ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da0d0:	d002      	beq.n	da0d8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   da0d2:	f7ff ffbf 	bl	da054 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da0d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da0d8:	f7fc ffc2 	bl	d7060 <HAL_RNG_GetRandomNumber>
   da0dc:	4604      	mov	r4, r0
    srand(seed);
   da0de:	f001 f873 	bl	db1c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da0e2:	4b0a      	ldr	r3, [pc, #40]	; (da10c <module_user_init_hook+0x50>)
   da0e4:	b113      	cbz	r3, da0ec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   da0e6:	4620      	mov	r0, r4
   da0e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da0ec:	2100      	movs	r1, #0
   da0ee:	4807      	ldr	r0, [pc, #28]	; (da10c <module_user_init_hook+0x50>)
   da0f0:	f7fd f9a2 	bl	d7438 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da0f4:	2100      	movs	r1, #0
   da0f6:	4806      	ldr	r0, [pc, #24]	; (da110 <module_user_init_hook+0x54>)
}
   da0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da0fc:	f7fd b960 	b.w	d73c0 <system_ctrl_set_app_request_handler>
   da100:	2003f400 	.word	0x2003f400
   da104:	9a271c1e 	.word	0x9a271c1e
   da108:	2003e6f8 	.word	0x2003e6f8
   da10c:	00000000 	.word	0x00000000
   da110:	000da085 	.word	0x000da085

000da114 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da114:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da116:	4e18      	ldr	r6, [pc, #96]	; (da178 <pinAvailable+0x64>)
   da118:	6831      	ldr	r1, [r6, #0]
   da11a:	f011 0501 	ands.w	r5, r1, #1
   da11e:	4604      	mov	r4, r0
   da120:	d10a      	bne.n	da138 <pinAvailable+0x24>
   da122:	4630      	mov	r0, r6
   da124:	f7f9 ffbf 	bl	d40a6 <__cxa_guard_acquire>
   da128:	b130      	cbz	r0, da138 <pinAvailable+0x24>
   da12a:	4629      	mov	r1, r5
   da12c:	4813      	ldr	r0, [pc, #76]	; (da17c <pinAvailable+0x68>)
   da12e:	f7ff fbed 	bl	d990c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da132:	4630      	mov	r0, r6
   da134:	f7f9 ffbc 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da138:	4810      	ldr	r0, [pc, #64]	; (da17c <pinAvailable+0x68>)
   da13a:	f7ff fca4 	bl	d9a86 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da13e:	b128      	cbz	r0, da14c <pinAvailable+0x38>
   da140:	f1a4 030b 	sub.w	r3, r4, #11
   da144:	2b02      	cmp	r3, #2
   da146:	d801      	bhi.n	da14c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da148:	2000      	movs	r0, #0
   da14a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da14c:	f000 f870 	bl	da230 <_Z19__fetch_global_Wirev>
   da150:	f7ff f954 	bl	d93fc <_ZN7TwoWire9isEnabledEv>
   da154:	b108      	cbz	r0, da15a <pinAvailable+0x46>
   da156:	2c01      	cmp	r4, #1
   da158:	d9f6      	bls.n	da148 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da15a:	f7ff fea5 	bl	d9ea8 <_Z22__fetch_global_Serial1v>
   da15e:	f7ff fe9f 	bl	d9ea0 <_ZN11USARTSerial9isEnabledEv>
   da162:	b118      	cbz	r0, da16c <pinAvailable+0x58>
   da164:	f1a4 0309 	sub.w	r3, r4, #9
   da168:	2b01      	cmp	r3, #1
   da16a:	d9ed      	bls.n	da148 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da16c:	2c23      	cmp	r4, #35	; 0x23
   da16e:	bf8c      	ite	hi
   da170:	2000      	movhi	r0, #0
   da172:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da174:	bd70      	pop	{r4, r5, r6, pc}
   da176:	bf00      	nop
   da178:	2003e6fc 	.word	0x2003e6fc
   da17c:	2003e700 	.word	0x2003e700

000da180 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da180:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da182:	b538      	push	{r3, r4, r5, lr}
   da184:	4604      	mov	r4, r0
   da186:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da188:	d80a      	bhi.n	da1a0 <pinMode+0x20>
   da18a:	29ff      	cmp	r1, #255	; 0xff
   da18c:	d008      	beq.n	da1a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da18e:	f7ff ffc1 	bl	da114 <pinAvailable>
   da192:	b128      	cbz	r0, da1a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da194:	4629      	mov	r1, r5
   da196:	4620      	mov	r0, r4
}
   da198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da19c:	f7fc bf98 	b.w	d70d0 <HAL_Pin_Mode>
   da1a0:	bd38      	pop	{r3, r4, r5, pc}

000da1a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da1a2:	b538      	push	{r3, r4, r5, lr}
   da1a4:	4604      	mov	r4, r0
   da1a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da1a8:	f7fc ff9a 	bl	d70e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da1ac:	28ff      	cmp	r0, #255	; 0xff
   da1ae:	d010      	beq.n	da1d2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da1b0:	2806      	cmp	r0, #6
   da1b2:	d804      	bhi.n	da1be <digitalWrite+0x1c>
   da1b4:	234d      	movs	r3, #77	; 0x4d
   da1b6:	fa23 f000 	lsr.w	r0, r3, r0
   da1ba:	07c3      	lsls	r3, r0, #31
   da1bc:	d409      	bmi.n	da1d2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da1be:	4620      	mov	r0, r4
   da1c0:	f7ff ffa8 	bl	da114 <pinAvailable>
   da1c4:	b128      	cbz	r0, da1d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da1c6:	4629      	mov	r1, r5
   da1c8:	4620      	mov	r0, r4
}
   da1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da1ce:	f7fc bf8f 	b.w	d70f0 <HAL_GPIO_Write>
   da1d2:	bd38      	pop	{r3, r4, r5, pc}

000da1d4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da1d4:	b510      	push	{r4, lr}
   da1d6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da1d8:	f7fc ff82 	bl	d70e0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da1dc:	3804      	subs	r0, #4
   da1de:	b2c0      	uxtb	r0, r0
   da1e0:	2801      	cmp	r0, #1
   da1e2:	d908      	bls.n	da1f6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da1e4:	4620      	mov	r0, r4
   da1e6:	f7ff ff95 	bl	da114 <pinAvailable>
   da1ea:	b120      	cbz	r0, da1f6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da1ec:	4620      	mov	r0, r4
}
   da1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da1f2:	f7fc bf85 	b.w	d7100 <HAL_GPIO_Read>
}
   da1f6:	2000      	movs	r0, #0
   da1f8:	bd10      	pop	{r4, pc}
	...

000da1fc <_Z17acquireWireBufferv>:
   da1fc:	b570      	push	{r4, r5, r6, lr}
   da1fe:	4604      	mov	r4, r0
   da200:	2514      	movs	r5, #20
   da202:	462a      	mov	r2, r5
   da204:	4e09      	ldr	r6, [pc, #36]	; (da22c <_Z17acquireWireBufferv+0x30>)
   da206:	2100      	movs	r1, #0
   da208:	f000 ffd5 	bl	db1b6 <memset>
   da20c:	8025      	strh	r5, [r4, #0]
   da20e:	2520      	movs	r5, #32
   da210:	4631      	mov	r1, r6
   da212:	60a5      	str	r5, [r4, #8]
   da214:	6125      	str	r5, [r4, #16]
   da216:	4628      	mov	r0, r5
   da218:	f000 f84f 	bl	da2ba <_ZnajRKSt9nothrow_t>
   da21c:	4631      	mov	r1, r6
   da21e:	6060      	str	r0, [r4, #4]
   da220:	4628      	mov	r0, r5
   da222:	f000 f84a 	bl	da2ba <_ZnajRKSt9nothrow_t>
   da226:	60e0      	str	r0, [r4, #12]
   da228:	4620      	mov	r0, r4
   da22a:	bd70      	pop	{r4, r5, r6, pc}
   da22c:	000de074 	.word	0x000de074

000da230 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da230:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da232:	4d0e      	ldr	r5, [pc, #56]	; (da26c <_Z19__fetch_global_Wirev+0x3c>)
   da234:	6829      	ldr	r1, [r5, #0]
   da236:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da23a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da23c:	d113      	bne.n	da266 <_Z19__fetch_global_Wirev+0x36>
   da23e:	4628      	mov	r0, r5
   da240:	f7f9 ff31 	bl	d40a6 <__cxa_guard_acquire>
   da244:	b178      	cbz	r0, da266 <_Z19__fetch_global_Wirev+0x36>
   da246:	a801      	add	r0, sp, #4
   da248:	f7ff ffd8 	bl	da1fc <_Z17acquireWireBufferv>
   da24c:	aa01      	add	r2, sp, #4
   da24e:	4621      	mov	r1, r4
   da250:	4807      	ldr	r0, [pc, #28]	; (da270 <_Z19__fetch_global_Wirev+0x40>)
   da252:	f7ff f8c1 	bl	d93d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da256:	4628      	mov	r0, r5
   da258:	f7f9 ff2a 	bl	d40b0 <__cxa_guard_release>
   da25c:	4a05      	ldr	r2, [pc, #20]	; (da274 <_Z19__fetch_global_Wirev+0x44>)
   da25e:	4906      	ldr	r1, [pc, #24]	; (da278 <_Z19__fetch_global_Wirev+0x48>)
   da260:	4803      	ldr	r0, [pc, #12]	; (da270 <_Z19__fetch_global_Wirev+0x40>)
   da262:	f000 f80b 	bl	da27c <__aeabi_atexit>
	return wire;
}
   da266:	4802      	ldr	r0, [pc, #8]	; (da270 <_Z19__fetch_global_Wirev+0x40>)
   da268:	b007      	add	sp, #28
   da26a:	bd30      	pop	{r4, r5, pc}
   da26c:	2003e70c 	.word	0x2003e70c
   da270:	2003e710 	.word	0x2003e710
   da274:	2003d628 	.word	0x2003d628
   da278:	000d9381 	.word	0x000d9381

000da27c <__aeabi_atexit>:
   da27c:	460b      	mov	r3, r1
   da27e:	4601      	mov	r1, r0
   da280:	4618      	mov	r0, r3
   da282:	f000 be59 	b.w	daf38 <__cxa_atexit>

000da286 <_ZdlPvj>:
   da286:	f7f9 bf0a 	b.w	d409e <_ZdlPv>
	...

000da28c <_ZSt15get_new_handlerv>:
   da28c:	4b02      	ldr	r3, [pc, #8]	; (da298 <_ZSt15get_new_handlerv+0xc>)
   da28e:	6818      	ldr	r0, [r3, #0]
   da290:	f3bf 8f5f 	dmb	sy
   da294:	4770      	bx	lr
   da296:	bf00      	nop
   da298:	2003e724 	.word	0x2003e724

000da29c <_ZnwjRKSt9nothrow_t>:
   da29c:	b510      	push	{r4, lr}
   da29e:	2800      	cmp	r0, #0
   da2a0:	bf14      	ite	ne
   da2a2:	4604      	movne	r4, r0
   da2a4:	2401      	moveq	r4, #1
   da2a6:	4620      	mov	r0, r4
   da2a8:	f7fd f91e 	bl	d74e8 <malloc>
   da2ac:	b920      	cbnz	r0, da2b8 <_ZnwjRKSt9nothrow_t+0x1c>
   da2ae:	f7ff ffed 	bl	da28c <_ZSt15get_new_handlerv>
   da2b2:	b108      	cbz	r0, da2b8 <_ZnwjRKSt9nothrow_t+0x1c>
   da2b4:	4780      	blx	r0
   da2b6:	e7f6      	b.n	da2a6 <_ZnwjRKSt9nothrow_t+0xa>
   da2b8:	bd10      	pop	{r4, pc}

000da2ba <_ZnajRKSt9nothrow_t>:
   da2ba:	f7ff bfef 	b.w	da29c <_ZnwjRKSt9nothrow_t>

000da2be <_ZSt25__throw_bad_function_callv>:
   da2be:	b508      	push	{r3, lr}
   da2c0:	f7fd f952 	bl	d7568 <abort>

000da2c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da2c4:	4b24      	ldr	r3, [pc, #144]	; (da358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da2c6:	681a      	ldr	r2, [r3, #0]
   da2c8:	07d0      	lsls	r0, r2, #31
   da2ca:	bf5c      	itt	pl
   da2cc:	2201      	movpl	r2, #1
   da2ce:	601a      	strpl	r2, [r3, #0]
   da2d0:	4b22      	ldr	r3, [pc, #136]	; (da35c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da2d2:	681a      	ldr	r2, [r3, #0]
   da2d4:	07d1      	lsls	r1, r2, #31
   da2d6:	bf5c      	itt	pl
   da2d8:	2201      	movpl	r2, #1
   da2da:	601a      	strpl	r2, [r3, #0]
   da2dc:	4b20      	ldr	r3, [pc, #128]	; (da360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da2de:	681a      	ldr	r2, [r3, #0]
   da2e0:	07d2      	lsls	r2, r2, #31
   da2e2:	bf5c      	itt	pl
   da2e4:	2201      	movpl	r2, #1
   da2e6:	601a      	strpl	r2, [r3, #0]
   da2e8:	4b1e      	ldr	r3, [pc, #120]	; (da364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da2ea:	681a      	ldr	r2, [r3, #0]
   da2ec:	07d0      	lsls	r0, r2, #31
   da2ee:	bf5c      	itt	pl
   da2f0:	2201      	movpl	r2, #1
   da2f2:	601a      	strpl	r2, [r3, #0]
   da2f4:	4b1c      	ldr	r3, [pc, #112]	; (da368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da2f6:	681a      	ldr	r2, [r3, #0]
   da2f8:	07d1      	lsls	r1, r2, #31
   da2fa:	bf5c      	itt	pl
   da2fc:	2201      	movpl	r2, #1
   da2fe:	601a      	strpl	r2, [r3, #0]
   da300:	4b1a      	ldr	r3, [pc, #104]	; (da36c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da302:	681a      	ldr	r2, [r3, #0]
   da304:	07d2      	lsls	r2, r2, #31
   da306:	bf5c      	itt	pl
   da308:	2201      	movpl	r2, #1
   da30a:	601a      	strpl	r2, [r3, #0]
   da30c:	4b18      	ldr	r3, [pc, #96]	; (da370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da30e:	681a      	ldr	r2, [r3, #0]
   da310:	07d0      	lsls	r0, r2, #31
   da312:	bf5c      	itt	pl
   da314:	2201      	movpl	r2, #1
   da316:	601a      	strpl	r2, [r3, #0]
   da318:	4b16      	ldr	r3, [pc, #88]	; (da374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da31a:	681a      	ldr	r2, [r3, #0]
   da31c:	07d1      	lsls	r1, r2, #31
   da31e:	bf5c      	itt	pl
   da320:	2201      	movpl	r2, #1
   da322:	601a      	strpl	r2, [r3, #0]
   da324:	4b14      	ldr	r3, [pc, #80]	; (da378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da326:	681a      	ldr	r2, [r3, #0]
   da328:	07d2      	lsls	r2, r2, #31
   da32a:	bf5c      	itt	pl
   da32c:	2201      	movpl	r2, #1
   da32e:	601a      	strpl	r2, [r3, #0]
   da330:	4b12      	ldr	r3, [pc, #72]	; (da37c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da332:	681a      	ldr	r2, [r3, #0]
   da334:	07d0      	lsls	r0, r2, #31
   da336:	bf5c      	itt	pl
   da338:	2201      	movpl	r2, #1
   da33a:	601a      	strpl	r2, [r3, #0]
   da33c:	4b10      	ldr	r3, [pc, #64]	; (da380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da33e:	681a      	ldr	r2, [r3, #0]
   da340:	07d1      	lsls	r1, r2, #31
   da342:	bf5c      	itt	pl
   da344:	2201      	movpl	r2, #1
   da346:	601a      	strpl	r2, [r3, #0]
   da348:	4b0e      	ldr	r3, [pc, #56]	; (da384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da34a:	681a      	ldr	r2, [r3, #0]
   da34c:	07d2      	lsls	r2, r2, #31
   da34e:	bf5c      	itt	pl
   da350:	2201      	movpl	r2, #1
   da352:	601a      	strpl	r2, [r3, #0]
   da354:	4770      	bx	lr
   da356:	bf00      	nop
   da358:	2003e754 	.word	0x2003e754
   da35c:	2003e750 	.word	0x2003e750
   da360:	2003e74c 	.word	0x2003e74c
   da364:	2003e748 	.word	0x2003e748
   da368:	2003e744 	.word	0x2003e744
   da36c:	2003e740 	.word	0x2003e740
   da370:	2003e73c 	.word	0x2003e73c
   da374:	2003e738 	.word	0x2003e738
   da378:	2003e734 	.word	0x2003e734
   da37c:	2003e730 	.word	0x2003e730
   da380:	2003e72c 	.word	0x2003e72c
   da384:	2003e728 	.word	0x2003e728

000da388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da388:	4b18      	ldr	r3, [pc, #96]	; (da3ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da38a:	681a      	ldr	r2, [r3, #0]
   da38c:	07d1      	lsls	r1, r2, #31
   da38e:	bf5c      	itt	pl
   da390:	2201      	movpl	r2, #1
   da392:	601a      	strpl	r2, [r3, #0]
   da394:	4b16      	ldr	r3, [pc, #88]	; (da3f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da396:	681a      	ldr	r2, [r3, #0]
   da398:	07d2      	lsls	r2, r2, #31
   da39a:	bf5c      	itt	pl
   da39c:	2201      	movpl	r2, #1
   da39e:	601a      	strpl	r2, [r3, #0]
   da3a0:	4b14      	ldr	r3, [pc, #80]	; (da3f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da3a2:	681a      	ldr	r2, [r3, #0]
   da3a4:	07d0      	lsls	r0, r2, #31
   da3a6:	bf5c      	itt	pl
   da3a8:	2201      	movpl	r2, #1
   da3aa:	601a      	strpl	r2, [r3, #0]
   da3ac:	4b12      	ldr	r3, [pc, #72]	; (da3f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da3ae:	681a      	ldr	r2, [r3, #0]
   da3b0:	07d1      	lsls	r1, r2, #31
   da3b2:	bf5c      	itt	pl
   da3b4:	2201      	movpl	r2, #1
   da3b6:	601a      	strpl	r2, [r3, #0]
   da3b8:	4b10      	ldr	r3, [pc, #64]	; (da3fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da3ba:	681a      	ldr	r2, [r3, #0]
   da3bc:	07d2      	lsls	r2, r2, #31
   da3be:	bf5c      	itt	pl
   da3c0:	2201      	movpl	r2, #1
   da3c2:	601a      	strpl	r2, [r3, #0]
   da3c4:	4b0e      	ldr	r3, [pc, #56]	; (da400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da3c6:	681a      	ldr	r2, [r3, #0]
   da3c8:	07d0      	lsls	r0, r2, #31
   da3ca:	bf5c      	itt	pl
   da3cc:	2201      	movpl	r2, #1
   da3ce:	601a      	strpl	r2, [r3, #0]
   da3d0:	4b0c      	ldr	r3, [pc, #48]	; (da404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da3d2:	681a      	ldr	r2, [r3, #0]
   da3d4:	07d1      	lsls	r1, r2, #31
   da3d6:	bf5c      	itt	pl
   da3d8:	2201      	movpl	r2, #1
   da3da:	601a      	strpl	r2, [r3, #0]
   da3dc:	4b0a      	ldr	r3, [pc, #40]	; (da408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da3de:	681a      	ldr	r2, [r3, #0]
   da3e0:	07d2      	lsls	r2, r2, #31
   da3e2:	bf5c      	itt	pl
   da3e4:	2201      	movpl	r2, #1
   da3e6:	601a      	strpl	r2, [r3, #0]
   da3e8:	4770      	bx	lr
   da3ea:	bf00      	nop
   da3ec:	2003e774 	.word	0x2003e774
   da3f0:	2003e770 	.word	0x2003e770
   da3f4:	2003e76c 	.word	0x2003e76c
   da3f8:	2003e768 	.word	0x2003e768
   da3fc:	2003e764 	.word	0x2003e764
   da400:	2003e760 	.word	0x2003e760
   da404:	2003e75c 	.word	0x2003e75c
   da408:	2003e758 	.word	0x2003e758

000da40c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da40c:	4b18      	ldr	r3, [pc, #96]	; (da470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da40e:	681a      	ldr	r2, [r3, #0]
   da410:	07d1      	lsls	r1, r2, #31
   da412:	bf5c      	itt	pl
   da414:	2201      	movpl	r2, #1
   da416:	601a      	strpl	r2, [r3, #0]
   da418:	4b16      	ldr	r3, [pc, #88]	; (da474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da41a:	681a      	ldr	r2, [r3, #0]
   da41c:	07d2      	lsls	r2, r2, #31
   da41e:	bf5c      	itt	pl
   da420:	2201      	movpl	r2, #1
   da422:	601a      	strpl	r2, [r3, #0]
   da424:	4b14      	ldr	r3, [pc, #80]	; (da478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da426:	681a      	ldr	r2, [r3, #0]
   da428:	07d0      	lsls	r0, r2, #31
   da42a:	bf5c      	itt	pl
   da42c:	2201      	movpl	r2, #1
   da42e:	601a      	strpl	r2, [r3, #0]
   da430:	4b12      	ldr	r3, [pc, #72]	; (da47c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da432:	681a      	ldr	r2, [r3, #0]
   da434:	07d1      	lsls	r1, r2, #31
   da436:	bf5c      	itt	pl
   da438:	2201      	movpl	r2, #1
   da43a:	601a      	strpl	r2, [r3, #0]
   da43c:	4b10      	ldr	r3, [pc, #64]	; (da480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da43e:	681a      	ldr	r2, [r3, #0]
   da440:	07d2      	lsls	r2, r2, #31
   da442:	bf5c      	itt	pl
   da444:	2201      	movpl	r2, #1
   da446:	601a      	strpl	r2, [r3, #0]
   da448:	4b0e      	ldr	r3, [pc, #56]	; (da484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da44a:	681a      	ldr	r2, [r3, #0]
   da44c:	07d0      	lsls	r0, r2, #31
   da44e:	bf5c      	itt	pl
   da450:	2201      	movpl	r2, #1
   da452:	601a      	strpl	r2, [r3, #0]
   da454:	4b0c      	ldr	r3, [pc, #48]	; (da488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da456:	681a      	ldr	r2, [r3, #0]
   da458:	07d1      	lsls	r1, r2, #31
   da45a:	bf5c      	itt	pl
   da45c:	2201      	movpl	r2, #1
   da45e:	601a      	strpl	r2, [r3, #0]
   da460:	4b0a      	ldr	r3, [pc, #40]	; (da48c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da462:	681a      	ldr	r2, [r3, #0]
   da464:	07d2      	lsls	r2, r2, #31
   da466:	bf5c      	itt	pl
   da468:	2201      	movpl	r2, #1
   da46a:	601a      	strpl	r2, [r3, #0]
   da46c:	4770      	bx	lr
   da46e:	bf00      	nop
   da470:	2003e794 	.word	0x2003e794
   da474:	2003e790 	.word	0x2003e790
   da478:	2003e78c 	.word	0x2003e78c
   da47c:	2003e788 	.word	0x2003e788
   da480:	2003e784 	.word	0x2003e784
   da484:	2003e780 	.word	0x2003e780
   da488:	2003e77c 	.word	0x2003e77c
   da48c:	2003e778 	.word	0x2003e778

000da490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da490:	4b24      	ldr	r3, [pc, #144]	; (da524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da492:	681a      	ldr	r2, [r3, #0]
   da494:	07d0      	lsls	r0, r2, #31
   da496:	bf5c      	itt	pl
   da498:	2201      	movpl	r2, #1
   da49a:	601a      	strpl	r2, [r3, #0]
   da49c:	4b22      	ldr	r3, [pc, #136]	; (da528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da49e:	681a      	ldr	r2, [r3, #0]
   da4a0:	07d1      	lsls	r1, r2, #31
   da4a2:	bf5c      	itt	pl
   da4a4:	2201      	movpl	r2, #1
   da4a6:	601a      	strpl	r2, [r3, #0]
   da4a8:	4b20      	ldr	r3, [pc, #128]	; (da52c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da4aa:	681a      	ldr	r2, [r3, #0]
   da4ac:	07d2      	lsls	r2, r2, #31
   da4ae:	bf5c      	itt	pl
   da4b0:	2201      	movpl	r2, #1
   da4b2:	601a      	strpl	r2, [r3, #0]
   da4b4:	4b1e      	ldr	r3, [pc, #120]	; (da530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da4b6:	681a      	ldr	r2, [r3, #0]
   da4b8:	07d0      	lsls	r0, r2, #31
   da4ba:	bf5c      	itt	pl
   da4bc:	2201      	movpl	r2, #1
   da4be:	601a      	strpl	r2, [r3, #0]
   da4c0:	4b1c      	ldr	r3, [pc, #112]	; (da534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da4c2:	681a      	ldr	r2, [r3, #0]
   da4c4:	07d1      	lsls	r1, r2, #31
   da4c6:	bf5c      	itt	pl
   da4c8:	2201      	movpl	r2, #1
   da4ca:	601a      	strpl	r2, [r3, #0]
   da4cc:	4b1a      	ldr	r3, [pc, #104]	; (da538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da4ce:	681a      	ldr	r2, [r3, #0]
   da4d0:	07d2      	lsls	r2, r2, #31
   da4d2:	bf5c      	itt	pl
   da4d4:	2201      	movpl	r2, #1
   da4d6:	601a      	strpl	r2, [r3, #0]
   da4d8:	4b18      	ldr	r3, [pc, #96]	; (da53c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da4da:	681a      	ldr	r2, [r3, #0]
   da4dc:	07d0      	lsls	r0, r2, #31
   da4de:	bf5c      	itt	pl
   da4e0:	2201      	movpl	r2, #1
   da4e2:	601a      	strpl	r2, [r3, #0]
   da4e4:	4b16      	ldr	r3, [pc, #88]	; (da540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da4e6:	681a      	ldr	r2, [r3, #0]
   da4e8:	07d1      	lsls	r1, r2, #31
   da4ea:	bf5c      	itt	pl
   da4ec:	2201      	movpl	r2, #1
   da4ee:	601a      	strpl	r2, [r3, #0]
   da4f0:	4b14      	ldr	r3, [pc, #80]	; (da544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da4f2:	681a      	ldr	r2, [r3, #0]
   da4f4:	07d2      	lsls	r2, r2, #31
   da4f6:	bf5c      	itt	pl
   da4f8:	2201      	movpl	r2, #1
   da4fa:	601a      	strpl	r2, [r3, #0]
   da4fc:	4b12      	ldr	r3, [pc, #72]	; (da548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da4fe:	681a      	ldr	r2, [r3, #0]
   da500:	07d0      	lsls	r0, r2, #31
   da502:	bf5c      	itt	pl
   da504:	2201      	movpl	r2, #1
   da506:	601a      	strpl	r2, [r3, #0]
   da508:	4b10      	ldr	r3, [pc, #64]	; (da54c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da50a:	681a      	ldr	r2, [r3, #0]
   da50c:	07d1      	lsls	r1, r2, #31
   da50e:	bf5c      	itt	pl
   da510:	2201      	movpl	r2, #1
   da512:	601a      	strpl	r2, [r3, #0]
   da514:	4b0e      	ldr	r3, [pc, #56]	; (da550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da516:	681a      	ldr	r2, [r3, #0]
   da518:	07d2      	lsls	r2, r2, #31
   da51a:	bf5c      	itt	pl
   da51c:	2201      	movpl	r2, #1
   da51e:	601a      	strpl	r2, [r3, #0]
   da520:	4770      	bx	lr
   da522:	bf00      	nop
   da524:	2003e7c4 	.word	0x2003e7c4
   da528:	2003e7c0 	.word	0x2003e7c0
   da52c:	2003e7bc 	.word	0x2003e7bc
   da530:	2003e7b8 	.word	0x2003e7b8
   da534:	2003e7b4 	.word	0x2003e7b4
   da538:	2003e7b0 	.word	0x2003e7b0
   da53c:	2003e7ac 	.word	0x2003e7ac
   da540:	2003e7a8 	.word	0x2003e7a8
   da544:	2003e7a4 	.word	0x2003e7a4
   da548:	2003e7a0 	.word	0x2003e7a0
   da54c:	2003e79c 	.word	0x2003e79c
   da550:	2003e798 	.word	0x2003e798

000da554 <__aeabi_drsub>:
   da554:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da558:	e002      	b.n	da560 <__adddf3>
   da55a:	bf00      	nop

000da55c <__aeabi_dsub>:
   da55c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da560 <__adddf3>:
   da560:	b530      	push	{r4, r5, lr}
   da562:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da566:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da56a:	ea94 0f05 	teq	r4, r5
   da56e:	bf08      	it	eq
   da570:	ea90 0f02 	teqeq	r0, r2
   da574:	bf1f      	itttt	ne
   da576:	ea54 0c00 	orrsne.w	ip, r4, r0
   da57a:	ea55 0c02 	orrsne.w	ip, r5, r2
   da57e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da582:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da586:	f000 80e2 	beq.w	da74e <__adddf3+0x1ee>
   da58a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da58e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da592:	bfb8      	it	lt
   da594:	426d      	neglt	r5, r5
   da596:	dd0c      	ble.n	da5b2 <__adddf3+0x52>
   da598:	442c      	add	r4, r5
   da59a:	ea80 0202 	eor.w	r2, r0, r2
   da59e:	ea81 0303 	eor.w	r3, r1, r3
   da5a2:	ea82 0000 	eor.w	r0, r2, r0
   da5a6:	ea83 0101 	eor.w	r1, r3, r1
   da5aa:	ea80 0202 	eor.w	r2, r0, r2
   da5ae:	ea81 0303 	eor.w	r3, r1, r3
   da5b2:	2d36      	cmp	r5, #54	; 0x36
   da5b4:	bf88      	it	hi
   da5b6:	bd30      	pophi	{r4, r5, pc}
   da5b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da5bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da5c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da5c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da5c8:	d002      	beq.n	da5d0 <__adddf3+0x70>
   da5ca:	4240      	negs	r0, r0
   da5cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da5d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da5d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da5d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da5dc:	d002      	beq.n	da5e4 <__adddf3+0x84>
   da5de:	4252      	negs	r2, r2
   da5e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da5e4:	ea94 0f05 	teq	r4, r5
   da5e8:	f000 80a7 	beq.w	da73a <__adddf3+0x1da>
   da5ec:	f1a4 0401 	sub.w	r4, r4, #1
   da5f0:	f1d5 0e20 	rsbs	lr, r5, #32
   da5f4:	db0d      	blt.n	da612 <__adddf3+0xb2>
   da5f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   da5fa:	fa22 f205 	lsr.w	r2, r2, r5
   da5fe:	1880      	adds	r0, r0, r2
   da600:	f141 0100 	adc.w	r1, r1, #0
   da604:	fa03 f20e 	lsl.w	r2, r3, lr
   da608:	1880      	adds	r0, r0, r2
   da60a:	fa43 f305 	asr.w	r3, r3, r5
   da60e:	4159      	adcs	r1, r3
   da610:	e00e      	b.n	da630 <__adddf3+0xd0>
   da612:	f1a5 0520 	sub.w	r5, r5, #32
   da616:	f10e 0e20 	add.w	lr, lr, #32
   da61a:	2a01      	cmp	r2, #1
   da61c:	fa03 fc0e 	lsl.w	ip, r3, lr
   da620:	bf28      	it	cs
   da622:	f04c 0c02 	orrcs.w	ip, ip, #2
   da626:	fa43 f305 	asr.w	r3, r3, r5
   da62a:	18c0      	adds	r0, r0, r3
   da62c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da634:	d507      	bpl.n	da646 <__adddf3+0xe6>
   da636:	f04f 0e00 	mov.w	lr, #0
   da63a:	f1dc 0c00 	rsbs	ip, ip, #0
   da63e:	eb7e 0000 	sbcs.w	r0, lr, r0
   da642:	eb6e 0101 	sbc.w	r1, lr, r1
   da646:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da64a:	d31b      	bcc.n	da684 <__adddf3+0x124>
   da64c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da650:	d30c      	bcc.n	da66c <__adddf3+0x10c>
   da652:	0849      	lsrs	r1, r1, #1
   da654:	ea5f 0030 	movs.w	r0, r0, rrx
   da658:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da65c:	f104 0401 	add.w	r4, r4, #1
   da660:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da664:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da668:	f080 809a 	bcs.w	da7a0 <__adddf3+0x240>
   da66c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da670:	bf08      	it	eq
   da672:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da676:	f150 0000 	adcs.w	r0, r0, #0
   da67a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da67e:	ea41 0105 	orr.w	r1, r1, r5
   da682:	bd30      	pop	{r4, r5, pc}
   da684:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da688:	4140      	adcs	r0, r0
   da68a:	eb41 0101 	adc.w	r1, r1, r1
   da68e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da692:	f1a4 0401 	sub.w	r4, r4, #1
   da696:	d1e9      	bne.n	da66c <__adddf3+0x10c>
   da698:	f091 0f00 	teq	r1, #0
   da69c:	bf04      	itt	eq
   da69e:	4601      	moveq	r1, r0
   da6a0:	2000      	moveq	r0, #0
   da6a2:	fab1 f381 	clz	r3, r1
   da6a6:	bf08      	it	eq
   da6a8:	3320      	addeq	r3, #32
   da6aa:	f1a3 030b 	sub.w	r3, r3, #11
   da6ae:	f1b3 0220 	subs.w	r2, r3, #32
   da6b2:	da0c      	bge.n	da6ce <__adddf3+0x16e>
   da6b4:	320c      	adds	r2, #12
   da6b6:	dd08      	ble.n	da6ca <__adddf3+0x16a>
   da6b8:	f102 0c14 	add.w	ip, r2, #20
   da6bc:	f1c2 020c 	rsb	r2, r2, #12
   da6c0:	fa01 f00c 	lsl.w	r0, r1, ip
   da6c4:	fa21 f102 	lsr.w	r1, r1, r2
   da6c8:	e00c      	b.n	da6e4 <__adddf3+0x184>
   da6ca:	f102 0214 	add.w	r2, r2, #20
   da6ce:	bfd8      	it	le
   da6d0:	f1c2 0c20 	rsble	ip, r2, #32
   da6d4:	fa01 f102 	lsl.w	r1, r1, r2
   da6d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   da6dc:	bfdc      	itt	le
   da6de:	ea41 010c 	orrle.w	r1, r1, ip
   da6e2:	4090      	lslle	r0, r2
   da6e4:	1ae4      	subs	r4, r4, r3
   da6e6:	bfa2      	ittt	ge
   da6e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da6ec:	4329      	orrge	r1, r5
   da6ee:	bd30      	popge	{r4, r5, pc}
   da6f0:	ea6f 0404 	mvn.w	r4, r4
   da6f4:	3c1f      	subs	r4, #31
   da6f6:	da1c      	bge.n	da732 <__adddf3+0x1d2>
   da6f8:	340c      	adds	r4, #12
   da6fa:	dc0e      	bgt.n	da71a <__adddf3+0x1ba>
   da6fc:	f104 0414 	add.w	r4, r4, #20
   da700:	f1c4 0220 	rsb	r2, r4, #32
   da704:	fa20 f004 	lsr.w	r0, r0, r4
   da708:	fa01 f302 	lsl.w	r3, r1, r2
   da70c:	ea40 0003 	orr.w	r0, r0, r3
   da710:	fa21 f304 	lsr.w	r3, r1, r4
   da714:	ea45 0103 	orr.w	r1, r5, r3
   da718:	bd30      	pop	{r4, r5, pc}
   da71a:	f1c4 040c 	rsb	r4, r4, #12
   da71e:	f1c4 0220 	rsb	r2, r4, #32
   da722:	fa20 f002 	lsr.w	r0, r0, r2
   da726:	fa01 f304 	lsl.w	r3, r1, r4
   da72a:	ea40 0003 	orr.w	r0, r0, r3
   da72e:	4629      	mov	r1, r5
   da730:	bd30      	pop	{r4, r5, pc}
   da732:	fa21 f004 	lsr.w	r0, r1, r4
   da736:	4629      	mov	r1, r5
   da738:	bd30      	pop	{r4, r5, pc}
   da73a:	f094 0f00 	teq	r4, #0
   da73e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da742:	bf06      	itte	eq
   da744:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da748:	3401      	addeq	r4, #1
   da74a:	3d01      	subne	r5, #1
   da74c:	e74e      	b.n	da5ec <__adddf3+0x8c>
   da74e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da752:	bf18      	it	ne
   da754:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da758:	d029      	beq.n	da7ae <__adddf3+0x24e>
   da75a:	ea94 0f05 	teq	r4, r5
   da75e:	bf08      	it	eq
   da760:	ea90 0f02 	teqeq	r0, r2
   da764:	d005      	beq.n	da772 <__adddf3+0x212>
   da766:	ea54 0c00 	orrs.w	ip, r4, r0
   da76a:	bf04      	itt	eq
   da76c:	4619      	moveq	r1, r3
   da76e:	4610      	moveq	r0, r2
   da770:	bd30      	pop	{r4, r5, pc}
   da772:	ea91 0f03 	teq	r1, r3
   da776:	bf1e      	ittt	ne
   da778:	2100      	movne	r1, #0
   da77a:	2000      	movne	r0, #0
   da77c:	bd30      	popne	{r4, r5, pc}
   da77e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da782:	d105      	bne.n	da790 <__adddf3+0x230>
   da784:	0040      	lsls	r0, r0, #1
   da786:	4149      	adcs	r1, r1
   da788:	bf28      	it	cs
   da78a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da78e:	bd30      	pop	{r4, r5, pc}
   da790:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da794:	bf3c      	itt	cc
   da796:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da79a:	bd30      	popcc	{r4, r5, pc}
   da79c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da7a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da7a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da7a8:	f04f 0000 	mov.w	r0, #0
   da7ac:	bd30      	pop	{r4, r5, pc}
   da7ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da7b2:	bf1a      	itte	ne
   da7b4:	4619      	movne	r1, r3
   da7b6:	4610      	movne	r0, r2
   da7b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da7bc:	bf1c      	itt	ne
   da7be:	460b      	movne	r3, r1
   da7c0:	4602      	movne	r2, r0
   da7c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da7c6:	bf06      	itte	eq
   da7c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da7cc:	ea91 0f03 	teqeq	r1, r3
   da7d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da7d4:	bd30      	pop	{r4, r5, pc}
   da7d6:	bf00      	nop

000da7d8 <__aeabi_ui2d>:
   da7d8:	f090 0f00 	teq	r0, #0
   da7dc:	bf04      	itt	eq
   da7de:	2100      	moveq	r1, #0
   da7e0:	4770      	bxeq	lr
   da7e2:	b530      	push	{r4, r5, lr}
   da7e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da7e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7ec:	f04f 0500 	mov.w	r5, #0
   da7f0:	f04f 0100 	mov.w	r1, #0
   da7f4:	e750      	b.n	da698 <__adddf3+0x138>
   da7f6:	bf00      	nop

000da7f8 <__aeabi_i2d>:
   da7f8:	f090 0f00 	teq	r0, #0
   da7fc:	bf04      	itt	eq
   da7fe:	2100      	moveq	r1, #0
   da800:	4770      	bxeq	lr
   da802:	b530      	push	{r4, r5, lr}
   da804:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da808:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da80c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da810:	bf48      	it	mi
   da812:	4240      	negmi	r0, r0
   da814:	f04f 0100 	mov.w	r1, #0
   da818:	e73e      	b.n	da698 <__adddf3+0x138>
   da81a:	bf00      	nop

000da81c <__aeabi_f2d>:
   da81c:	0042      	lsls	r2, r0, #1
   da81e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da822:	ea4f 0131 	mov.w	r1, r1, rrx
   da826:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da82a:	bf1f      	itttt	ne
   da82c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da830:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da834:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da838:	4770      	bxne	lr
   da83a:	f092 0f00 	teq	r2, #0
   da83e:	bf14      	ite	ne
   da840:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da844:	4770      	bxeq	lr
   da846:	b530      	push	{r4, r5, lr}
   da848:	f44f 7460 	mov.w	r4, #896	; 0x380
   da84c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da850:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da854:	e720      	b.n	da698 <__adddf3+0x138>
   da856:	bf00      	nop

000da858 <__aeabi_ul2d>:
   da858:	ea50 0201 	orrs.w	r2, r0, r1
   da85c:	bf08      	it	eq
   da85e:	4770      	bxeq	lr
   da860:	b530      	push	{r4, r5, lr}
   da862:	f04f 0500 	mov.w	r5, #0
   da866:	e00a      	b.n	da87e <__aeabi_l2d+0x16>

000da868 <__aeabi_l2d>:
   da868:	ea50 0201 	orrs.w	r2, r0, r1
   da86c:	bf08      	it	eq
   da86e:	4770      	bxeq	lr
   da870:	b530      	push	{r4, r5, lr}
   da872:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da876:	d502      	bpl.n	da87e <__aeabi_l2d+0x16>
   da878:	4240      	negs	r0, r0
   da87a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da87e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da882:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da886:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da88a:	f43f aedc 	beq.w	da646 <__adddf3+0xe6>
   da88e:	f04f 0203 	mov.w	r2, #3
   da892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da896:	bf18      	it	ne
   da898:	3203      	addne	r2, #3
   da89a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da89e:	bf18      	it	ne
   da8a0:	3203      	addne	r2, #3
   da8a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da8a6:	f1c2 0320 	rsb	r3, r2, #32
   da8aa:	fa00 fc03 	lsl.w	ip, r0, r3
   da8ae:	fa20 f002 	lsr.w	r0, r0, r2
   da8b2:	fa01 fe03 	lsl.w	lr, r1, r3
   da8b6:	ea40 000e 	orr.w	r0, r0, lr
   da8ba:	fa21 f102 	lsr.w	r1, r1, r2
   da8be:	4414      	add	r4, r2
   da8c0:	e6c1      	b.n	da646 <__adddf3+0xe6>
   da8c2:	bf00      	nop

000da8c4 <__aeabi_dmul>:
   da8c4:	b570      	push	{r4, r5, r6, lr}
   da8c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da8ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da8ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da8d2:	bf1d      	ittte	ne
   da8d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da8d8:	ea94 0f0c 	teqne	r4, ip
   da8dc:	ea95 0f0c 	teqne	r5, ip
   da8e0:	f000 f8de 	bleq	daaa0 <__aeabi_dmul+0x1dc>
   da8e4:	442c      	add	r4, r5
   da8e6:	ea81 0603 	eor.w	r6, r1, r3
   da8ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da8ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da8f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da8f6:	bf18      	it	ne
   da8f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da8fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da904:	d038      	beq.n	da978 <__aeabi_dmul+0xb4>
   da906:	fba0 ce02 	umull	ip, lr, r0, r2
   da90a:	f04f 0500 	mov.w	r5, #0
   da90e:	fbe1 e502 	umlal	lr, r5, r1, r2
   da912:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da916:	fbe0 e503 	umlal	lr, r5, r0, r3
   da91a:	f04f 0600 	mov.w	r6, #0
   da91e:	fbe1 5603 	umlal	r5, r6, r1, r3
   da922:	f09c 0f00 	teq	ip, #0
   da926:	bf18      	it	ne
   da928:	f04e 0e01 	orrne.w	lr, lr, #1
   da92c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da930:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da934:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da938:	d204      	bcs.n	da944 <__aeabi_dmul+0x80>
   da93a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da93e:	416d      	adcs	r5, r5
   da940:	eb46 0606 	adc.w	r6, r6, r6
   da944:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da948:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da94c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da950:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da954:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da958:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da95c:	bf88      	it	hi
   da95e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da962:	d81e      	bhi.n	da9a2 <__aeabi_dmul+0xde>
   da964:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da968:	bf08      	it	eq
   da96a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da96e:	f150 0000 	adcs.w	r0, r0, #0
   da972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da976:	bd70      	pop	{r4, r5, r6, pc}
   da978:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da97c:	ea46 0101 	orr.w	r1, r6, r1
   da980:	ea40 0002 	orr.w	r0, r0, r2
   da984:	ea81 0103 	eor.w	r1, r1, r3
   da988:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da98c:	bfc2      	ittt	gt
   da98e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da996:	bd70      	popgt	{r4, r5, r6, pc}
   da998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da99c:	f04f 0e00 	mov.w	lr, #0
   da9a0:	3c01      	subs	r4, #1
   da9a2:	f300 80ab 	bgt.w	daafc <__aeabi_dmul+0x238>
   da9a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da9aa:	bfde      	ittt	le
   da9ac:	2000      	movle	r0, #0
   da9ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da9b2:	bd70      	pople	{r4, r5, r6, pc}
   da9b4:	f1c4 0400 	rsb	r4, r4, #0
   da9b8:	3c20      	subs	r4, #32
   da9ba:	da35      	bge.n	daa28 <__aeabi_dmul+0x164>
   da9bc:	340c      	adds	r4, #12
   da9be:	dc1b      	bgt.n	da9f8 <__aeabi_dmul+0x134>
   da9c0:	f104 0414 	add.w	r4, r4, #20
   da9c4:	f1c4 0520 	rsb	r5, r4, #32
   da9c8:	fa00 f305 	lsl.w	r3, r0, r5
   da9cc:	fa20 f004 	lsr.w	r0, r0, r4
   da9d0:	fa01 f205 	lsl.w	r2, r1, r5
   da9d4:	ea40 0002 	orr.w	r0, r0, r2
   da9d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da9dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da9e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da9e4:	fa21 f604 	lsr.w	r6, r1, r4
   da9e8:	eb42 0106 	adc.w	r1, r2, r6
   da9ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da9f0:	bf08      	it	eq
   da9f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da9f6:	bd70      	pop	{r4, r5, r6, pc}
   da9f8:	f1c4 040c 	rsb	r4, r4, #12
   da9fc:	f1c4 0520 	rsb	r5, r4, #32
   daa00:	fa00 f304 	lsl.w	r3, r0, r4
   daa04:	fa20 f005 	lsr.w	r0, r0, r5
   daa08:	fa01 f204 	lsl.w	r2, r1, r4
   daa0c:	ea40 0002 	orr.w	r0, r0, r2
   daa10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   daa18:	f141 0100 	adc.w	r1, r1, #0
   daa1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daa20:	bf08      	it	eq
   daa22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daa26:	bd70      	pop	{r4, r5, r6, pc}
   daa28:	f1c4 0520 	rsb	r5, r4, #32
   daa2c:	fa00 f205 	lsl.w	r2, r0, r5
   daa30:	ea4e 0e02 	orr.w	lr, lr, r2
   daa34:	fa20 f304 	lsr.w	r3, r0, r4
   daa38:	fa01 f205 	lsl.w	r2, r1, r5
   daa3c:	ea43 0302 	orr.w	r3, r3, r2
   daa40:	fa21 f004 	lsr.w	r0, r1, r4
   daa44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa48:	fa21 f204 	lsr.w	r2, r1, r4
   daa4c:	ea20 0002 	bic.w	r0, r0, r2
   daa50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   daa54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daa58:	bf08      	it	eq
   daa5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daa5e:	bd70      	pop	{r4, r5, r6, pc}
   daa60:	f094 0f00 	teq	r4, #0
   daa64:	d10f      	bne.n	daa86 <__aeabi_dmul+0x1c2>
   daa66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   daa6a:	0040      	lsls	r0, r0, #1
   daa6c:	eb41 0101 	adc.w	r1, r1, r1
   daa70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daa74:	bf08      	it	eq
   daa76:	3c01      	subeq	r4, #1
   daa78:	d0f7      	beq.n	daa6a <__aeabi_dmul+0x1a6>
   daa7a:	ea41 0106 	orr.w	r1, r1, r6
   daa7e:	f095 0f00 	teq	r5, #0
   daa82:	bf18      	it	ne
   daa84:	4770      	bxne	lr
   daa86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   daa8a:	0052      	lsls	r2, r2, #1
   daa8c:	eb43 0303 	adc.w	r3, r3, r3
   daa90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   daa94:	bf08      	it	eq
   daa96:	3d01      	subeq	r5, #1
   daa98:	d0f7      	beq.n	daa8a <__aeabi_dmul+0x1c6>
   daa9a:	ea43 0306 	orr.w	r3, r3, r6
   daa9e:	4770      	bx	lr
   daaa0:	ea94 0f0c 	teq	r4, ip
   daaa4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   daaa8:	bf18      	it	ne
   daaaa:	ea95 0f0c 	teqne	r5, ip
   daaae:	d00c      	beq.n	daaca <__aeabi_dmul+0x206>
   daab0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daab4:	bf18      	it	ne
   daab6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daaba:	d1d1      	bne.n	daa60 <__aeabi_dmul+0x19c>
   daabc:	ea81 0103 	eor.w	r1, r1, r3
   daac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daac4:	f04f 0000 	mov.w	r0, #0
   daac8:	bd70      	pop	{r4, r5, r6, pc}
   daaca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daace:	bf06      	itte	eq
   daad0:	4610      	moveq	r0, r2
   daad2:	4619      	moveq	r1, r3
   daad4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daad8:	d019      	beq.n	dab0e <__aeabi_dmul+0x24a>
   daada:	ea94 0f0c 	teq	r4, ip
   daade:	d102      	bne.n	daae6 <__aeabi_dmul+0x222>
   daae0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daae4:	d113      	bne.n	dab0e <__aeabi_dmul+0x24a>
   daae6:	ea95 0f0c 	teq	r5, ip
   daaea:	d105      	bne.n	daaf8 <__aeabi_dmul+0x234>
   daaec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daaf0:	bf1c      	itt	ne
   daaf2:	4610      	movne	r0, r2
   daaf4:	4619      	movne	r1, r3
   daaf6:	d10a      	bne.n	dab0e <__aeabi_dmul+0x24a>
   daaf8:	ea81 0103 	eor.w	r1, r1, r3
   daafc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dab00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dab04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dab08:	f04f 0000 	mov.w	r0, #0
   dab0c:	bd70      	pop	{r4, r5, r6, pc}
   dab0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dab12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dab16:	bd70      	pop	{r4, r5, r6, pc}

000dab18 <__aeabi_ddiv>:
   dab18:	b570      	push	{r4, r5, r6, lr}
   dab1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dab1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dab22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dab26:	bf1d      	ittte	ne
   dab28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dab2c:	ea94 0f0c 	teqne	r4, ip
   dab30:	ea95 0f0c 	teqne	r5, ip
   dab34:	f000 f8a7 	bleq	dac86 <__aeabi_ddiv+0x16e>
   dab38:	eba4 0405 	sub.w	r4, r4, r5
   dab3c:	ea81 0e03 	eor.w	lr, r1, r3
   dab40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dab44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dab48:	f000 8088 	beq.w	dac5c <__aeabi_ddiv+0x144>
   dab4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dab50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dab54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dab58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dab5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dab60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dab64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dab68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dab6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dab70:	429d      	cmp	r5, r3
   dab72:	bf08      	it	eq
   dab74:	4296      	cmpeq	r6, r2
   dab76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dab7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dab7e:	d202      	bcs.n	dab86 <__aeabi_ddiv+0x6e>
   dab80:	085b      	lsrs	r3, r3, #1
   dab82:	ea4f 0232 	mov.w	r2, r2, rrx
   dab86:	1ab6      	subs	r6, r6, r2
   dab88:	eb65 0503 	sbc.w	r5, r5, r3
   dab8c:	085b      	lsrs	r3, r3, #1
   dab8e:	ea4f 0232 	mov.w	r2, r2, rrx
   dab92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dab96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dab9a:	ebb6 0e02 	subs.w	lr, r6, r2
   dab9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   daba2:	bf22      	ittt	cs
   daba4:	1ab6      	subcs	r6, r6, r2
   daba6:	4675      	movcs	r5, lr
   daba8:	ea40 000c 	orrcs.w	r0, r0, ip
   dabac:	085b      	lsrs	r3, r3, #1
   dabae:	ea4f 0232 	mov.w	r2, r2, rrx
   dabb2:	ebb6 0e02 	subs.w	lr, r6, r2
   dabb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dabba:	bf22      	ittt	cs
   dabbc:	1ab6      	subcs	r6, r6, r2
   dabbe:	4675      	movcs	r5, lr
   dabc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dabc4:	085b      	lsrs	r3, r3, #1
   dabc6:	ea4f 0232 	mov.w	r2, r2, rrx
   dabca:	ebb6 0e02 	subs.w	lr, r6, r2
   dabce:	eb75 0e03 	sbcs.w	lr, r5, r3
   dabd2:	bf22      	ittt	cs
   dabd4:	1ab6      	subcs	r6, r6, r2
   dabd6:	4675      	movcs	r5, lr
   dabd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dabdc:	085b      	lsrs	r3, r3, #1
   dabde:	ea4f 0232 	mov.w	r2, r2, rrx
   dabe2:	ebb6 0e02 	subs.w	lr, r6, r2
   dabe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dabea:	bf22      	ittt	cs
   dabec:	1ab6      	subcs	r6, r6, r2
   dabee:	4675      	movcs	r5, lr
   dabf0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dabf4:	ea55 0e06 	orrs.w	lr, r5, r6
   dabf8:	d018      	beq.n	dac2c <__aeabi_ddiv+0x114>
   dabfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dabfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dac02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dac06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dac0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dac0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dac12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dac16:	d1c0      	bne.n	dab9a <__aeabi_ddiv+0x82>
   dac18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dac1c:	d10b      	bne.n	dac36 <__aeabi_ddiv+0x11e>
   dac1e:	ea41 0100 	orr.w	r1, r1, r0
   dac22:	f04f 0000 	mov.w	r0, #0
   dac26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dac2a:	e7b6      	b.n	dab9a <__aeabi_ddiv+0x82>
   dac2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dac30:	bf04      	itt	eq
   dac32:	4301      	orreq	r1, r0
   dac34:	2000      	moveq	r0, #0
   dac36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dac3a:	bf88      	it	hi
   dac3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dac40:	f63f aeaf 	bhi.w	da9a2 <__aeabi_dmul+0xde>
   dac44:	ebb5 0c03 	subs.w	ip, r5, r3
   dac48:	bf04      	itt	eq
   dac4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dac4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dac52:	f150 0000 	adcs.w	r0, r0, #0
   dac56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dac5a:	bd70      	pop	{r4, r5, r6, pc}
   dac5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dac60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dac64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dac68:	bfc2      	ittt	gt
   dac6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dac6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dac72:	bd70      	popgt	{r4, r5, r6, pc}
   dac74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dac78:	f04f 0e00 	mov.w	lr, #0
   dac7c:	3c01      	subs	r4, #1
   dac7e:	e690      	b.n	da9a2 <__aeabi_dmul+0xde>
   dac80:	ea45 0e06 	orr.w	lr, r5, r6
   dac84:	e68d      	b.n	da9a2 <__aeabi_dmul+0xde>
   dac86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dac8a:	ea94 0f0c 	teq	r4, ip
   dac8e:	bf08      	it	eq
   dac90:	ea95 0f0c 	teqeq	r5, ip
   dac94:	f43f af3b 	beq.w	dab0e <__aeabi_dmul+0x24a>
   dac98:	ea94 0f0c 	teq	r4, ip
   dac9c:	d10a      	bne.n	dacb4 <__aeabi_ddiv+0x19c>
   dac9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   daca2:	f47f af34 	bne.w	dab0e <__aeabi_dmul+0x24a>
   daca6:	ea95 0f0c 	teq	r5, ip
   dacaa:	f47f af25 	bne.w	daaf8 <__aeabi_dmul+0x234>
   dacae:	4610      	mov	r0, r2
   dacb0:	4619      	mov	r1, r3
   dacb2:	e72c      	b.n	dab0e <__aeabi_dmul+0x24a>
   dacb4:	ea95 0f0c 	teq	r5, ip
   dacb8:	d106      	bne.n	dacc8 <__aeabi_ddiv+0x1b0>
   dacba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dacbe:	f43f aefd 	beq.w	daabc <__aeabi_dmul+0x1f8>
   dacc2:	4610      	mov	r0, r2
   dacc4:	4619      	mov	r1, r3
   dacc6:	e722      	b.n	dab0e <__aeabi_dmul+0x24a>
   dacc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daccc:	bf18      	it	ne
   dacce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dacd2:	f47f aec5 	bne.w	daa60 <__aeabi_dmul+0x19c>
   dacd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dacda:	f47f af0d 	bne.w	daaf8 <__aeabi_dmul+0x234>
   dacde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dace2:	f47f aeeb 	bne.w	daabc <__aeabi_dmul+0x1f8>
   dace6:	e712      	b.n	dab0e <__aeabi_dmul+0x24a>

000dace8 <__gedf2>:
   dace8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dacec:	e006      	b.n	dacfc <__cmpdf2+0x4>
   dacee:	bf00      	nop

000dacf0 <__ledf2>:
   dacf0:	f04f 0c01 	mov.w	ip, #1
   dacf4:	e002      	b.n	dacfc <__cmpdf2+0x4>
   dacf6:	bf00      	nop

000dacf8 <__cmpdf2>:
   dacf8:	f04f 0c01 	mov.w	ip, #1
   dacfc:	f84d cd04 	str.w	ip, [sp, #-4]!
   dad00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dad04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dad0c:	bf18      	it	ne
   dad0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dad12:	d01b      	beq.n	dad4c <__cmpdf2+0x54>
   dad14:	b001      	add	sp, #4
   dad16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dad1a:	bf0c      	ite	eq
   dad1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dad20:	ea91 0f03 	teqne	r1, r3
   dad24:	bf02      	ittt	eq
   dad26:	ea90 0f02 	teqeq	r0, r2
   dad2a:	2000      	moveq	r0, #0
   dad2c:	4770      	bxeq	lr
   dad2e:	f110 0f00 	cmn.w	r0, #0
   dad32:	ea91 0f03 	teq	r1, r3
   dad36:	bf58      	it	pl
   dad38:	4299      	cmppl	r1, r3
   dad3a:	bf08      	it	eq
   dad3c:	4290      	cmpeq	r0, r2
   dad3e:	bf2c      	ite	cs
   dad40:	17d8      	asrcs	r0, r3, #31
   dad42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dad46:	f040 0001 	orr.w	r0, r0, #1
   dad4a:	4770      	bx	lr
   dad4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dad50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad54:	d102      	bne.n	dad5c <__cmpdf2+0x64>
   dad56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dad5a:	d107      	bne.n	dad6c <__cmpdf2+0x74>
   dad5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dad60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad64:	d1d6      	bne.n	dad14 <__cmpdf2+0x1c>
   dad66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dad6a:	d0d3      	beq.n	dad14 <__cmpdf2+0x1c>
   dad6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   dad70:	4770      	bx	lr
   dad72:	bf00      	nop

000dad74 <__aeabi_cdrcmple>:
   dad74:	4684      	mov	ip, r0
   dad76:	4610      	mov	r0, r2
   dad78:	4662      	mov	r2, ip
   dad7a:	468c      	mov	ip, r1
   dad7c:	4619      	mov	r1, r3
   dad7e:	4663      	mov	r3, ip
   dad80:	e000      	b.n	dad84 <__aeabi_cdcmpeq>
   dad82:	bf00      	nop

000dad84 <__aeabi_cdcmpeq>:
   dad84:	b501      	push	{r0, lr}
   dad86:	f7ff ffb7 	bl	dacf8 <__cmpdf2>
   dad8a:	2800      	cmp	r0, #0
   dad8c:	bf48      	it	mi
   dad8e:	f110 0f00 	cmnmi.w	r0, #0
   dad92:	bd01      	pop	{r0, pc}

000dad94 <__aeabi_dcmpeq>:
   dad94:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad98:	f7ff fff4 	bl	dad84 <__aeabi_cdcmpeq>
   dad9c:	bf0c      	ite	eq
   dad9e:	2001      	moveq	r0, #1
   dada0:	2000      	movne	r0, #0
   dada2:	f85d fb08 	ldr.w	pc, [sp], #8
   dada6:	bf00      	nop

000dada8 <__aeabi_dcmplt>:
   dada8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dadac:	f7ff ffea 	bl	dad84 <__aeabi_cdcmpeq>
   dadb0:	bf34      	ite	cc
   dadb2:	2001      	movcc	r0, #1
   dadb4:	2000      	movcs	r0, #0
   dadb6:	f85d fb08 	ldr.w	pc, [sp], #8
   dadba:	bf00      	nop

000dadbc <__aeabi_dcmple>:
   dadbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dadc0:	f7ff ffe0 	bl	dad84 <__aeabi_cdcmpeq>
   dadc4:	bf94      	ite	ls
   dadc6:	2001      	movls	r0, #1
   dadc8:	2000      	movhi	r0, #0
   dadca:	f85d fb08 	ldr.w	pc, [sp], #8
   dadce:	bf00      	nop

000dadd0 <__aeabi_dcmpge>:
   dadd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dadd4:	f7ff ffce 	bl	dad74 <__aeabi_cdrcmple>
   dadd8:	bf94      	ite	ls
   dadda:	2001      	movls	r0, #1
   daddc:	2000      	movhi	r0, #0
   dadde:	f85d fb08 	ldr.w	pc, [sp], #8
   dade2:	bf00      	nop

000dade4 <__aeabi_dcmpgt>:
   dade4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dade8:	f7ff ffc4 	bl	dad74 <__aeabi_cdrcmple>
   dadec:	bf34      	ite	cc
   dadee:	2001      	movcc	r0, #1
   dadf0:	2000      	movcs	r0, #0
   dadf2:	f85d fb08 	ldr.w	pc, [sp], #8
   dadf6:	bf00      	nop

000dadf8 <__aeabi_d2iz>:
   dadf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dadfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dae00:	d215      	bcs.n	dae2e <__aeabi_d2iz+0x36>
   dae02:	d511      	bpl.n	dae28 <__aeabi_d2iz+0x30>
   dae04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dae08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dae0c:	d912      	bls.n	dae34 <__aeabi_d2iz+0x3c>
   dae0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dae16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dae1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dae1e:	fa23 f002 	lsr.w	r0, r3, r2
   dae22:	bf18      	it	ne
   dae24:	4240      	negne	r0, r0
   dae26:	4770      	bx	lr
   dae28:	f04f 0000 	mov.w	r0, #0
   dae2c:	4770      	bx	lr
   dae2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dae32:	d105      	bne.n	dae40 <__aeabi_d2iz+0x48>
   dae34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dae38:	bf08      	it	eq
   dae3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dae3e:	4770      	bx	lr
   dae40:	f04f 0000 	mov.w	r0, #0
   dae44:	4770      	bx	lr
   dae46:	bf00      	nop

000dae48 <__aeabi_d2uiz>:
   dae48:	004a      	lsls	r2, r1, #1
   dae4a:	d211      	bcs.n	dae70 <__aeabi_d2uiz+0x28>
   dae4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dae50:	d211      	bcs.n	dae76 <__aeabi_d2uiz+0x2e>
   dae52:	d50d      	bpl.n	dae70 <__aeabi_d2uiz+0x28>
   dae54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dae58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dae5c:	d40e      	bmi.n	dae7c <__aeabi_d2uiz+0x34>
   dae5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dae66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dae6a:	fa23 f002 	lsr.w	r0, r3, r2
   dae6e:	4770      	bx	lr
   dae70:	f04f 0000 	mov.w	r0, #0
   dae74:	4770      	bx	lr
   dae76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dae7a:	d102      	bne.n	dae82 <__aeabi_d2uiz+0x3a>
   dae7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dae80:	4770      	bx	lr
   dae82:	f04f 0000 	mov.w	r0, #0
   dae86:	4770      	bx	lr

000dae88 <__aeabi_d2f>:
   dae88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dae8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dae90:	bf24      	itt	cs
   dae92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dae96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dae9a:	d90d      	bls.n	daeb8 <__aeabi_d2f+0x30>
   dae9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   daea0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   daea4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   daea8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   daeac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   daeb0:	bf08      	it	eq
   daeb2:	f020 0001 	biceq.w	r0, r0, #1
   daeb6:	4770      	bx	lr
   daeb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   daebc:	d121      	bne.n	daf02 <__aeabi_d2f+0x7a>
   daebe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   daec2:	bfbc      	itt	lt
   daec4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   daec8:	4770      	bxlt	lr
   daeca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daece:	ea4f 5252 	mov.w	r2, r2, lsr #21
   daed2:	f1c2 0218 	rsb	r2, r2, #24
   daed6:	f1c2 0c20 	rsb	ip, r2, #32
   daeda:	fa10 f30c 	lsls.w	r3, r0, ip
   daede:	fa20 f002 	lsr.w	r0, r0, r2
   daee2:	bf18      	it	ne
   daee4:	f040 0001 	orrne.w	r0, r0, #1
   daee8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daeec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   daef0:	fa03 fc0c 	lsl.w	ip, r3, ip
   daef4:	ea40 000c 	orr.w	r0, r0, ip
   daef8:	fa23 f302 	lsr.w	r3, r3, r2
   daefc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   daf00:	e7cc      	b.n	dae9c <__aeabi_d2f+0x14>
   daf02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   daf06:	d107      	bne.n	daf18 <__aeabi_d2f+0x90>
   daf08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   daf0c:	bf1e      	ittt	ne
   daf0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   daf12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   daf16:	4770      	bxne	lr
   daf18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   daf1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   daf20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   daf24:	4770      	bx	lr
   daf26:	bf00      	nop

000daf28 <atof>:
   daf28:	2100      	movs	r1, #0
   daf2a:	f001 b80d 	b.w	dbf48 <strtod>

000daf2e <atoi>:
   daf2e:	220a      	movs	r2, #10
   daf30:	2100      	movs	r1, #0
   daf32:	f001 b897 	b.w	dc064 <strtol>
	...

000daf38 <__cxa_atexit>:
   daf38:	b510      	push	{r4, lr}
   daf3a:	4c05      	ldr	r4, [pc, #20]	; (daf50 <__cxa_atexit+0x18>)
   daf3c:	4613      	mov	r3, r2
   daf3e:	b12c      	cbz	r4, daf4c <__cxa_atexit+0x14>
   daf40:	460a      	mov	r2, r1
   daf42:	4601      	mov	r1, r0
   daf44:	2002      	movs	r0, #2
   daf46:	f3af 8000 	nop.w
   daf4a:	bd10      	pop	{r4, pc}
   daf4c:	4620      	mov	r0, r4
   daf4e:	bd10      	pop	{r4, pc}
   daf50:	00000000 	.word	0x00000000

000daf54 <localtime>:
   daf54:	b538      	push	{r3, r4, r5, lr}
   daf56:	4b07      	ldr	r3, [pc, #28]	; (daf74 <localtime+0x20>)
   daf58:	681c      	ldr	r4, [r3, #0]
   daf5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daf5c:	4605      	mov	r5, r0
   daf5e:	b91b      	cbnz	r3, daf68 <localtime+0x14>
   daf60:	2024      	movs	r0, #36	; 0x24
   daf62:	f7fc fac1 	bl	d74e8 <malloc>
   daf66:	63e0      	str	r0, [r4, #60]	; 0x3c
   daf68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daf6a:	4628      	mov	r0, r5
   daf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daf70:	f000 b802 	b.w	daf78 <localtime_r>
   daf74:	2003d5a0 	.word	0x2003d5a0

000daf78 <localtime_r>:
   daf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daf7c:	460c      	mov	r4, r1
   daf7e:	4680      	mov	r8, r0
   daf80:	f001 fe94 	bl	dccac <__gettzinfo>
   daf84:	4621      	mov	r1, r4
   daf86:	4607      	mov	r7, r0
   daf88:	4640      	mov	r0, r8
   daf8a:	f001 fe93 	bl	dccb4 <gmtime_r>
   daf8e:	6946      	ldr	r6, [r0, #20]
   daf90:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   daf94:	07b3      	lsls	r3, r6, #30
   daf96:	4604      	mov	r4, r0
   daf98:	d105      	bne.n	dafa6 <localtime_r+0x2e>
   daf9a:	2264      	movs	r2, #100	; 0x64
   daf9c:	fb96 f3f2 	sdiv	r3, r6, r2
   dafa0:	fb02 6313 	mls	r3, r2, r3, r6
   dafa4:	b94b      	cbnz	r3, dafba <localtime_r+0x42>
   dafa6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dafaa:	fb96 f3f5 	sdiv	r3, r6, r5
   dafae:	fb05 6513 	mls	r5, r5, r3, r6
   dafb2:	fab5 f385 	clz	r3, r5
   dafb6:	095b      	lsrs	r3, r3, #5
   dafb8:	e000      	b.n	dafbc <localtime_r+0x44>
   dafba:	2301      	movs	r3, #1
   dafbc:	4a5f      	ldr	r2, [pc, #380]	; (db13c <localtime_r+0x1c4>)
   dafbe:	2530      	movs	r5, #48	; 0x30
   dafc0:	fb05 2503 	mla	r5, r5, r3, r2
   dafc4:	f001 f988 	bl	dc2d8 <__tz_lock>
   dafc8:	f001 f988 	bl	dc2dc <_tzset_unlocked>
   dafcc:	4b5c      	ldr	r3, [pc, #368]	; (db140 <localtime_r+0x1c8>)
   dafce:	681b      	ldr	r3, [r3, #0]
   dafd0:	b1f3      	cbz	r3, db010 <localtime_r+0x98>
   dafd2:	687b      	ldr	r3, [r7, #4]
   dafd4:	429e      	cmp	r6, r3
   dafd6:	d105      	bne.n	dafe4 <localtime_r+0x6c>
   dafd8:	6839      	ldr	r1, [r7, #0]
   dafda:	f8d8 3000 	ldr.w	r3, [r8]
   dafde:	69fa      	ldr	r2, [r7, #28]
   dafe0:	b941      	cbnz	r1, daff4 <localtime_r+0x7c>
   dafe2:	e00a      	b.n	daffa <localtime_r+0x82>
   dafe4:	4630      	mov	r0, r6
   dafe6:	f001 f8cf 	bl	dc188 <__tzcalc_limits>
   dafea:	2800      	cmp	r0, #0
   dafec:	d1f4      	bne.n	dafd8 <localtime_r+0x60>
   dafee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   daff2:	e00d      	b.n	db010 <localtime_r+0x98>
   daff4:	4293      	cmp	r3, r2
   daff6:	db08      	blt.n	db00a <localtime_r+0x92>
   daff8:	e001      	b.n	daffe <localtime_r+0x86>
   daffa:	4293      	cmp	r3, r2
   daffc:	da07      	bge.n	db00e <localtime_r+0x96>
   daffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db000:	4293      	cmp	r3, r2
   db002:	bfac      	ite	ge
   db004:	2300      	movge	r3, #0
   db006:	2301      	movlt	r3, #1
   db008:	e002      	b.n	db010 <localtime_r+0x98>
   db00a:	2300      	movs	r3, #0
   db00c:	e000      	b.n	db010 <localtime_r+0x98>
   db00e:	2301      	movs	r3, #1
   db010:	6223      	str	r3, [r4, #32]
   db012:	6a23      	ldr	r3, [r4, #32]
   db014:	2b01      	cmp	r3, #1
   db016:	bf0c      	ite	eq
   db018:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db01a:	6a39      	ldrne	r1, [r7, #32]
   db01c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db020:	203c      	movs	r0, #60	; 0x3c
   db022:	fb91 f6f3 	sdiv	r6, r1, r3
   db026:	fb03 1316 	mls	r3, r3, r6, r1
   db02a:	6861      	ldr	r1, [r4, #4]
   db02c:	fb93 f2f0 	sdiv	r2, r3, r0
   db030:	fb00 3012 	mls	r0, r0, r2, r3
   db034:	6823      	ldr	r3, [r4, #0]
   db036:	1a89      	subs	r1, r1, r2
   db038:	68a2      	ldr	r2, [r4, #8]
   db03a:	6061      	str	r1, [r4, #4]
   db03c:	1a1b      	subs	r3, r3, r0
   db03e:	1b92      	subs	r2, r2, r6
   db040:	2b3b      	cmp	r3, #59	; 0x3b
   db042:	6023      	str	r3, [r4, #0]
   db044:	60a2      	str	r2, [r4, #8]
   db046:	dd03      	ble.n	db050 <localtime_r+0xd8>
   db048:	3101      	adds	r1, #1
   db04a:	6061      	str	r1, [r4, #4]
   db04c:	3b3c      	subs	r3, #60	; 0x3c
   db04e:	e004      	b.n	db05a <localtime_r+0xe2>
   db050:	2b00      	cmp	r3, #0
   db052:	da03      	bge.n	db05c <localtime_r+0xe4>
   db054:	3901      	subs	r1, #1
   db056:	6061      	str	r1, [r4, #4]
   db058:	333c      	adds	r3, #60	; 0x3c
   db05a:	6023      	str	r3, [r4, #0]
   db05c:	6863      	ldr	r3, [r4, #4]
   db05e:	2b3b      	cmp	r3, #59	; 0x3b
   db060:	dd03      	ble.n	db06a <localtime_r+0xf2>
   db062:	3201      	adds	r2, #1
   db064:	60a2      	str	r2, [r4, #8]
   db066:	3b3c      	subs	r3, #60	; 0x3c
   db068:	e004      	b.n	db074 <localtime_r+0xfc>
   db06a:	2b00      	cmp	r3, #0
   db06c:	da03      	bge.n	db076 <localtime_r+0xfe>
   db06e:	3a01      	subs	r2, #1
   db070:	60a2      	str	r2, [r4, #8]
   db072:	333c      	adds	r3, #60	; 0x3c
   db074:	6063      	str	r3, [r4, #4]
   db076:	68a3      	ldr	r3, [r4, #8]
   db078:	2b17      	cmp	r3, #23
   db07a:	dd22      	ble.n	db0c2 <localtime_r+0x14a>
   db07c:	69e2      	ldr	r2, [r4, #28]
   db07e:	3201      	adds	r2, #1
   db080:	61e2      	str	r2, [r4, #28]
   db082:	69a2      	ldr	r2, [r4, #24]
   db084:	3201      	adds	r2, #1
   db086:	2a06      	cmp	r2, #6
   db088:	bfc8      	it	gt
   db08a:	2200      	movgt	r2, #0
   db08c:	61a2      	str	r2, [r4, #24]
   db08e:	68e2      	ldr	r2, [r4, #12]
   db090:	3b18      	subs	r3, #24
   db092:	3201      	adds	r2, #1
   db094:	60a3      	str	r3, [r4, #8]
   db096:	6923      	ldr	r3, [r4, #16]
   db098:	60e2      	str	r2, [r4, #12]
   db09a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db09e:	428a      	cmp	r2, r1
   db0a0:	dd46      	ble.n	db130 <localtime_r+0x1b8>
   db0a2:	3301      	adds	r3, #1
   db0a4:	2b0c      	cmp	r3, #12
   db0a6:	bf0c      	ite	eq
   db0a8:	6963      	ldreq	r3, [r4, #20]
   db0aa:	6123      	strne	r3, [r4, #16]
   db0ac:	eba2 0201 	sub.w	r2, r2, r1
   db0b0:	60e2      	str	r2, [r4, #12]
   db0b2:	bf01      	itttt	eq
   db0b4:	3301      	addeq	r3, #1
   db0b6:	2200      	moveq	r2, #0
   db0b8:	6122      	streq	r2, [r4, #16]
   db0ba:	6163      	streq	r3, [r4, #20]
   db0bc:	bf08      	it	eq
   db0be:	61e2      	streq	r2, [r4, #28]
   db0c0:	e036      	b.n	db130 <localtime_r+0x1b8>
   db0c2:	2b00      	cmp	r3, #0
   db0c4:	da34      	bge.n	db130 <localtime_r+0x1b8>
   db0c6:	69e2      	ldr	r2, [r4, #28]
   db0c8:	3a01      	subs	r2, #1
   db0ca:	61e2      	str	r2, [r4, #28]
   db0cc:	69a2      	ldr	r2, [r4, #24]
   db0ce:	3a01      	subs	r2, #1
   db0d0:	bf48      	it	mi
   db0d2:	2206      	movmi	r2, #6
   db0d4:	61a2      	str	r2, [r4, #24]
   db0d6:	68e2      	ldr	r2, [r4, #12]
   db0d8:	3318      	adds	r3, #24
   db0da:	3a01      	subs	r2, #1
   db0dc:	60e2      	str	r2, [r4, #12]
   db0de:	60a3      	str	r3, [r4, #8]
   db0e0:	bb32      	cbnz	r2, db130 <localtime_r+0x1b8>
   db0e2:	6923      	ldr	r3, [r4, #16]
   db0e4:	3b01      	subs	r3, #1
   db0e6:	d401      	bmi.n	db0ec <localtime_r+0x174>
   db0e8:	6123      	str	r3, [r4, #16]
   db0ea:	e01d      	b.n	db128 <localtime_r+0x1b0>
   db0ec:	230b      	movs	r3, #11
   db0ee:	6123      	str	r3, [r4, #16]
   db0f0:	6963      	ldr	r3, [r4, #20]
   db0f2:	1e5a      	subs	r2, r3, #1
   db0f4:	f012 0f03 	tst.w	r2, #3
   db0f8:	6162      	str	r2, [r4, #20]
   db0fa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db0fe:	d105      	bne.n	db10c <localtime_r+0x194>
   db100:	2164      	movs	r1, #100	; 0x64
   db102:	fb93 f2f1 	sdiv	r2, r3, r1
   db106:	fb01 3212 	mls	r2, r1, r2, r3
   db10a:	b94a      	cbnz	r2, db120 <localtime_r+0x1a8>
   db10c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db110:	fb93 f2f1 	sdiv	r2, r3, r1
   db114:	fb01 3312 	mls	r3, r1, r2, r3
   db118:	fab3 f383 	clz	r3, r3
   db11c:	095b      	lsrs	r3, r3, #5
   db11e:	e000      	b.n	db122 <localtime_r+0x1aa>
   db120:	2301      	movs	r3, #1
   db122:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db126:	61e3      	str	r3, [r4, #28]
   db128:	6923      	ldr	r3, [r4, #16]
   db12a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db12e:	60e3      	str	r3, [r4, #12]
   db130:	f001 f8d3 	bl	dc2da <__tz_unlock>
   db134:	4620      	mov	r0, r4
   db136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db13a:	bf00      	nop
   db13c:	000de1e0 	.word	0x000de1e0
   db140:	2003e7e4 	.word	0x2003e7e4

000db144 <_localeconv_r>:
   db144:	4800      	ldr	r0, [pc, #0]	; (db148 <_localeconv_r+0x4>)
   db146:	4770      	bx	lr
   db148:	2003d5a4 	.word	0x2003d5a4

000db14c <memcmp>:
   db14c:	b510      	push	{r4, lr}
   db14e:	3901      	subs	r1, #1
   db150:	4402      	add	r2, r0
   db152:	4290      	cmp	r0, r2
   db154:	d007      	beq.n	db166 <memcmp+0x1a>
   db156:	f810 3b01 	ldrb.w	r3, [r0], #1
   db15a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db15e:	42a3      	cmp	r3, r4
   db160:	d0f7      	beq.n	db152 <memcmp+0x6>
   db162:	1b18      	subs	r0, r3, r4
   db164:	bd10      	pop	{r4, pc}
   db166:	2000      	movs	r0, #0
   db168:	bd10      	pop	{r4, pc}

000db16a <memcpy>:
   db16a:	b510      	push	{r4, lr}
   db16c:	1e43      	subs	r3, r0, #1
   db16e:	440a      	add	r2, r1
   db170:	4291      	cmp	r1, r2
   db172:	d004      	beq.n	db17e <memcpy+0x14>
   db174:	f811 4b01 	ldrb.w	r4, [r1], #1
   db178:	f803 4f01 	strb.w	r4, [r3, #1]!
   db17c:	e7f8      	b.n	db170 <memcpy+0x6>
   db17e:	bd10      	pop	{r4, pc}

000db180 <memmove>:
   db180:	4288      	cmp	r0, r1
   db182:	b510      	push	{r4, lr}
   db184:	eb01 0302 	add.w	r3, r1, r2
   db188:	d801      	bhi.n	db18e <memmove+0xe>
   db18a:	1e42      	subs	r2, r0, #1
   db18c:	e00b      	b.n	db1a6 <memmove+0x26>
   db18e:	4298      	cmp	r0, r3
   db190:	d2fb      	bcs.n	db18a <memmove+0xa>
   db192:	1881      	adds	r1, r0, r2
   db194:	1ad2      	subs	r2, r2, r3
   db196:	42d3      	cmn	r3, r2
   db198:	d004      	beq.n	db1a4 <memmove+0x24>
   db19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db19e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db1a2:	e7f8      	b.n	db196 <memmove+0x16>
   db1a4:	bd10      	pop	{r4, pc}
   db1a6:	4299      	cmp	r1, r3
   db1a8:	d004      	beq.n	db1b4 <memmove+0x34>
   db1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   db1ae:	f802 4f01 	strb.w	r4, [r2, #1]!
   db1b2:	e7f8      	b.n	db1a6 <memmove+0x26>
   db1b4:	bd10      	pop	{r4, pc}

000db1b6 <memset>:
   db1b6:	4402      	add	r2, r0
   db1b8:	4603      	mov	r3, r0
   db1ba:	4293      	cmp	r3, r2
   db1bc:	d002      	beq.n	db1c4 <memset+0xe>
   db1be:	f803 1b01 	strb.w	r1, [r3], #1
   db1c2:	e7fa      	b.n	db1ba <memset+0x4>
   db1c4:	4770      	bx	lr
	...

000db1c8 <srand>:
   db1c8:	b538      	push	{r3, r4, r5, lr}
   db1ca:	4b12      	ldr	r3, [pc, #72]	; (db214 <srand+0x4c>)
   db1cc:	681c      	ldr	r4, [r3, #0]
   db1ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db1d0:	4605      	mov	r5, r0
   db1d2:	b9d3      	cbnz	r3, db20a <srand+0x42>
   db1d4:	2018      	movs	r0, #24
   db1d6:	f7fc f987 	bl	d74e8 <malloc>
   db1da:	f243 330e 	movw	r3, #13070	; 0x330e
   db1de:	63a0      	str	r0, [r4, #56]	; 0x38
   db1e0:	8003      	strh	r3, [r0, #0]
   db1e2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db1e6:	8043      	strh	r3, [r0, #2]
   db1e8:	f241 2334 	movw	r3, #4660	; 0x1234
   db1ec:	8083      	strh	r3, [r0, #4]
   db1ee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db1f2:	80c3      	strh	r3, [r0, #6]
   db1f4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db1f8:	8103      	strh	r3, [r0, #8]
   db1fa:	2305      	movs	r3, #5
   db1fc:	8143      	strh	r3, [r0, #10]
   db1fe:	230b      	movs	r3, #11
   db200:	8183      	strh	r3, [r0, #12]
   db202:	2201      	movs	r2, #1
   db204:	2300      	movs	r3, #0
   db206:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db20a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db20c:	2200      	movs	r2, #0
   db20e:	611d      	str	r5, [r3, #16]
   db210:	615a      	str	r2, [r3, #20]
   db212:	bd38      	pop	{r3, r4, r5, pc}
   db214:	2003d5a0 	.word	0x2003d5a0

000db218 <strcat>:
   db218:	b510      	push	{r4, lr}
   db21a:	4602      	mov	r2, r0
   db21c:	4613      	mov	r3, r2
   db21e:	3201      	adds	r2, #1
   db220:	781c      	ldrb	r4, [r3, #0]
   db222:	2c00      	cmp	r4, #0
   db224:	d1fa      	bne.n	db21c <strcat+0x4>
   db226:	3b01      	subs	r3, #1
   db228:	f811 2b01 	ldrb.w	r2, [r1], #1
   db22c:	f803 2f01 	strb.w	r2, [r3, #1]!
   db230:	2a00      	cmp	r2, #0
   db232:	d1f9      	bne.n	db228 <strcat+0x10>
   db234:	bd10      	pop	{r4, pc}

000db236 <strcmp>:
   db236:	f810 2b01 	ldrb.w	r2, [r0], #1
   db23a:	f811 3b01 	ldrb.w	r3, [r1], #1
   db23e:	2a01      	cmp	r2, #1
   db240:	bf28      	it	cs
   db242:	429a      	cmpcs	r2, r3
   db244:	d0f7      	beq.n	db236 <strcmp>
   db246:	1ad0      	subs	r0, r2, r3
   db248:	4770      	bx	lr

000db24a <strcpy>:
   db24a:	4603      	mov	r3, r0
   db24c:	f811 2b01 	ldrb.w	r2, [r1], #1
   db250:	f803 2b01 	strb.w	r2, [r3], #1
   db254:	2a00      	cmp	r2, #0
   db256:	d1f9      	bne.n	db24c <strcpy+0x2>
   db258:	4770      	bx	lr
	...

000db25c <strdup>:
   db25c:	4b02      	ldr	r3, [pc, #8]	; (db268 <strdup+0xc>)
   db25e:	4601      	mov	r1, r0
   db260:	6818      	ldr	r0, [r3, #0]
   db262:	f000 b803 	b.w	db26c <_strdup_r>
   db266:	bf00      	nop
   db268:	2003d5a0 	.word	0x2003d5a0

000db26c <_strdup_r>:
   db26c:	b570      	push	{r4, r5, r6, lr}
   db26e:	4606      	mov	r6, r0
   db270:	4608      	mov	r0, r1
   db272:	460c      	mov	r4, r1
   db274:	f000 f80d 	bl	db292 <strlen>
   db278:	1c45      	adds	r5, r0, #1
   db27a:	4629      	mov	r1, r5
   db27c:	4630      	mov	r0, r6
   db27e:	f7fc f97b 	bl	d7578 <_malloc_r>
   db282:	4606      	mov	r6, r0
   db284:	b118      	cbz	r0, db28e <_strdup_r+0x22>
   db286:	462a      	mov	r2, r5
   db288:	4621      	mov	r1, r4
   db28a:	f7ff ff6e 	bl	db16a <memcpy>
   db28e:	4630      	mov	r0, r6
   db290:	bd70      	pop	{r4, r5, r6, pc}

000db292 <strlen>:
   db292:	4603      	mov	r3, r0
   db294:	f813 2b01 	ldrb.w	r2, [r3], #1
   db298:	2a00      	cmp	r2, #0
   db29a:	d1fb      	bne.n	db294 <strlen+0x2>
   db29c:	1a18      	subs	r0, r3, r0
   db29e:	3801      	subs	r0, #1
   db2a0:	4770      	bx	lr

000db2a2 <strncmp>:
   db2a2:	b530      	push	{r4, r5, lr}
   db2a4:	b182      	cbz	r2, db2c8 <strncmp+0x26>
   db2a6:	1e45      	subs	r5, r0, #1
   db2a8:	3901      	subs	r1, #1
   db2aa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   db2ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db2b2:	42a3      	cmp	r3, r4
   db2b4:	d106      	bne.n	db2c4 <strncmp+0x22>
   db2b6:	43ec      	mvns	r4, r5
   db2b8:	4414      	add	r4, r2
   db2ba:	42e0      	cmn	r0, r4
   db2bc:	d001      	beq.n	db2c2 <strncmp+0x20>
   db2be:	2b00      	cmp	r3, #0
   db2c0:	d1f3      	bne.n	db2aa <strncmp+0x8>
   db2c2:	461c      	mov	r4, r3
   db2c4:	1b18      	subs	r0, r3, r4
   db2c6:	bd30      	pop	{r4, r5, pc}
   db2c8:	4610      	mov	r0, r2
   db2ca:	bd30      	pop	{r4, r5, pc}

000db2cc <strncpy>:
   db2cc:	b510      	push	{r4, lr}
   db2ce:	4603      	mov	r3, r0
   db2d0:	b142      	cbz	r2, db2e4 <strncpy+0x18>
   db2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   db2d6:	f803 4b01 	strb.w	r4, [r3], #1
   db2da:	3a01      	subs	r2, #1
   db2dc:	2c00      	cmp	r4, #0
   db2de:	d1f7      	bne.n	db2d0 <strncpy+0x4>
   db2e0:	441a      	add	r2, r3
   db2e2:	e000      	b.n	db2e6 <strncpy+0x1a>
   db2e4:	bd10      	pop	{r4, pc}
   db2e6:	4293      	cmp	r3, r2
   db2e8:	d002      	beq.n	db2f0 <strncpy+0x24>
   db2ea:	f803 4b01 	strb.w	r4, [r3], #1
   db2ee:	e7fa      	b.n	db2e6 <strncpy+0x1a>
   db2f0:	bd10      	pop	{r4, pc}

000db2f2 <strnlen>:
   db2f2:	b510      	push	{r4, lr}
   db2f4:	4603      	mov	r3, r0
   db2f6:	4401      	add	r1, r0
   db2f8:	428b      	cmp	r3, r1
   db2fa:	d004      	beq.n	db306 <strnlen+0x14>
   db2fc:	781a      	ldrb	r2, [r3, #0]
   db2fe:	1c5c      	adds	r4, r3, #1
   db300:	b10a      	cbz	r2, db306 <strnlen+0x14>
   db302:	4623      	mov	r3, r4
   db304:	e7f8      	b.n	db2f8 <strnlen+0x6>
   db306:	1a18      	subs	r0, r3, r0
   db308:	bd10      	pop	{r4, pc}

000db30a <sulp>:
   db30a:	b570      	push	{r4, r5, r6, lr}
   db30c:	4604      	mov	r4, r0
   db30e:	460d      	mov	r5, r1
   db310:	ec45 4b10 	vmov	d0, r4, r5
   db314:	4616      	mov	r6, r2
   db316:	f002 f82b 	bl	dd370 <__ulp>
   db31a:	ec51 0b10 	vmov	r0, r1, d0
   db31e:	b17e      	cbz	r6, db340 <sulp+0x36>
   db320:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db324:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db328:	2b00      	cmp	r3, #0
   db32a:	dd09      	ble.n	db340 <sulp+0x36>
   db32c:	051b      	lsls	r3, r3, #20
   db32e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db332:	2400      	movs	r4, #0
   db334:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db338:	4622      	mov	r2, r4
   db33a:	462b      	mov	r3, r5
   db33c:	f7ff fac2 	bl	da8c4 <__aeabi_dmul>
   db340:	bd70      	pop	{r4, r5, r6, pc}
   db342:	0000      	movs	r0, r0
   db344:	0000      	movs	r0, r0
	...

000db348 <_strtod_r>:
   db348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db34c:	b09d      	sub	sp, #116	; 0x74
   db34e:	2300      	movs	r3, #0
   db350:	9002      	str	r0, [sp, #8]
   db352:	460c      	mov	r4, r1
   db354:	9213      	str	r2, [sp, #76]	; 0x4c
   db356:	9318      	str	r3, [sp, #96]	; 0x60
   db358:	f04f 0a00 	mov.w	sl, #0
   db35c:	f04f 0b00 	mov.w	fp, #0
   db360:	9117      	str	r1, [sp, #92]	; 0x5c
   db362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db364:	781a      	ldrb	r2, [r3, #0]
   db366:	2a0d      	cmp	r2, #13
   db368:	d805      	bhi.n	db376 <_strtod_r+0x2e>
   db36a:	2a09      	cmp	r2, #9
   db36c:	d213      	bcs.n	db396 <_strtod_r+0x4e>
   db36e:	2a00      	cmp	r2, #0
   db370:	f000 81ac 	beq.w	db6cc <_strtod_r+0x384>
   db374:	e012      	b.n	db39c <_strtod_r+0x54>
   db376:	2a2b      	cmp	r2, #43	; 0x2b
   db378:	d004      	beq.n	db384 <_strtod_r+0x3c>
   db37a:	2a2d      	cmp	r2, #45	; 0x2d
   db37c:	d004      	beq.n	db388 <_strtod_r+0x40>
   db37e:	2a20      	cmp	r2, #32
   db380:	d10c      	bne.n	db39c <_strtod_r+0x54>
   db382:	e008      	b.n	db396 <_strtod_r+0x4e>
   db384:	2200      	movs	r2, #0
   db386:	e000      	b.n	db38a <_strtod_r+0x42>
   db388:	2201      	movs	r2, #1
   db38a:	920c      	str	r2, [sp, #48]	; 0x30
   db38c:	1c5a      	adds	r2, r3, #1
   db38e:	9217      	str	r2, [sp, #92]	; 0x5c
   db390:	785b      	ldrb	r3, [r3, #1]
   db392:	b92b      	cbnz	r3, db3a0 <_strtod_r+0x58>
   db394:	e19a      	b.n	db6cc <_strtod_r+0x384>
   db396:	3301      	adds	r3, #1
   db398:	9317      	str	r3, [sp, #92]	; 0x5c
   db39a:	e7e2      	b.n	db362 <_strtod_r+0x1a>
   db39c:	2300      	movs	r3, #0
   db39e:	930c      	str	r3, [sp, #48]	; 0x30
   db3a0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   db3a2:	782b      	ldrb	r3, [r5, #0]
   db3a4:	2b30      	cmp	r3, #48	; 0x30
   db3a6:	d15c      	bne.n	db462 <_strtod_r+0x11a>
   db3a8:	786b      	ldrb	r3, [r5, #1]
   db3aa:	2b58      	cmp	r3, #88	; 0x58
   db3ac:	d001      	beq.n	db3b2 <_strtod_r+0x6a>
   db3ae:	2b78      	cmp	r3, #120	; 0x78
   db3b0:	d14c      	bne.n	db44c <_strtod_r+0x104>
   db3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db3b4:	9301      	str	r3, [sp, #4]
   db3b6:	ab18      	add	r3, sp, #96	; 0x60
   db3b8:	9300      	str	r3, [sp, #0]
   db3ba:	4aa9      	ldr	r2, [pc, #676]	; (db660 <_strtod_r+0x318>)
   db3bc:	9802      	ldr	r0, [sp, #8]
   db3be:	ab19      	add	r3, sp, #100	; 0x64
   db3c0:	a917      	add	r1, sp, #92	; 0x5c
   db3c2:	f001 f95c 	bl	dc67e <__gethex>
   db3c6:	f010 0607 	ands.w	r6, r0, #7
   db3ca:	4604      	mov	r4, r0
   db3cc:	f000 8587 	beq.w	dbede <_strtod_r+0xb96>
   db3d0:	2e06      	cmp	r6, #6
   db3d2:	d105      	bne.n	db3e0 <_strtod_r+0x98>
   db3d4:	3501      	adds	r5, #1
   db3d6:	2300      	movs	r3, #0
   db3d8:	9517      	str	r5, [sp, #92]	; 0x5c
   db3da:	930c      	str	r3, [sp, #48]	; 0x30
   db3dc:	f000 bd7f 	b.w	dbede <_strtod_r+0xb96>
   db3e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db3e2:	b13a      	cbz	r2, db3f4 <_strtod_r+0xac>
   db3e4:	2135      	movs	r1, #53	; 0x35
   db3e6:	a81a      	add	r0, sp, #104	; 0x68
   db3e8:	f002 f8af 	bl	dd54a <__copybits>
   db3ec:	9918      	ldr	r1, [sp, #96]	; 0x60
   db3ee:	9802      	ldr	r0, [sp, #8]
   db3f0:	f001 fd2d 	bl	dce4e <_Bfree>
   db3f4:	2e06      	cmp	r6, #6
   db3f6:	d822      	bhi.n	db43e <_strtod_r+0xf6>
   db3f8:	e8df f006 	tbb	[pc, r6]
   db3fc:	18080d04 	.word	0x18080d04
   db400:	0d1d      	.short	0x0d1d
   db402:	04          	.byte	0x04
   db403:	00          	.byte	0x00
   db404:	f04f 0b00 	mov.w	fp, #0
   db408:	46da      	mov	sl, fp
   db40a:	e018      	b.n	db43e <_strtod_r+0xf6>
   db40c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db410:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   db414:	e013      	b.n	db43e <_strtod_r+0xf6>
   db416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db418:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db41a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db41e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db422:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db426:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db42a:	e008      	b.n	db43e <_strtod_r+0xf6>
   db42c:	f8df b234 	ldr.w	fp, [pc, #564]	; db664 <_strtod_r+0x31c>
   db430:	f04f 0a00 	mov.w	sl, #0
   db434:	e003      	b.n	db43e <_strtod_r+0xf6>
   db436:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db43a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db43e:	0721      	lsls	r1, r4, #28
   db440:	f140 854d 	bpl.w	dbede <_strtod_r+0xb96>
   db444:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db448:	f000 bd49 	b.w	dbede <_strtod_r+0xb96>
   db44c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db44e:	1c5a      	adds	r2, r3, #1
   db450:	9217      	str	r2, [sp, #92]	; 0x5c
   db452:	785b      	ldrb	r3, [r3, #1]
   db454:	2b30      	cmp	r3, #48	; 0x30
   db456:	d0f9      	beq.n	db44c <_strtod_r+0x104>
   db458:	2b00      	cmp	r3, #0
   db45a:	f000 8540 	beq.w	dbede <_strtod_r+0xb96>
   db45e:	2301      	movs	r3, #1
   db460:	e000      	b.n	db464 <_strtod_r+0x11c>
   db462:	2300      	movs	r3, #0
   db464:	f04f 0800 	mov.w	r8, #0
   db468:	9306      	str	r3, [sp, #24]
   db46a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db46c:	9307      	str	r3, [sp, #28]
   db46e:	f8cd 8014 	str.w	r8, [sp, #20]
   db472:	f8cd 8010 	str.w	r8, [sp, #16]
   db476:	220a      	movs	r2, #10
   db478:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   db47a:	782e      	ldrb	r6, [r5, #0]
   db47c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db480:	b2d9      	uxtb	r1, r3
   db482:	2909      	cmp	r1, #9
   db484:	d80e      	bhi.n	db4a4 <_strtod_r+0x15c>
   db486:	9904      	ldr	r1, [sp, #16]
   db488:	2908      	cmp	r1, #8
   db48a:	bfdd      	ittte	le
   db48c:	9905      	ldrle	r1, [sp, #20]
   db48e:	fb02 3301 	mlale	r3, r2, r1, r3
   db492:	9305      	strle	r3, [sp, #20]
   db494:	fb02 3808 	mlagt	r8, r2, r8, r3
   db498:	9b04      	ldr	r3, [sp, #16]
   db49a:	3501      	adds	r5, #1
   db49c:	3301      	adds	r3, #1
   db49e:	9304      	str	r3, [sp, #16]
   db4a0:	9517      	str	r5, [sp, #92]	; 0x5c
   db4a2:	e7e9      	b.n	db478 <_strtod_r+0x130>
   db4a4:	9802      	ldr	r0, [sp, #8]
   db4a6:	f7ff fe4d 	bl	db144 <_localeconv_r>
   db4aa:	6807      	ldr	r7, [r0, #0]
   db4ac:	9802      	ldr	r0, [sp, #8]
   db4ae:	f7ff fe49 	bl	db144 <_localeconv_r>
   db4b2:	6800      	ldr	r0, [r0, #0]
   db4b4:	f7ff feed 	bl	db292 <strlen>
   db4b8:	4639      	mov	r1, r7
   db4ba:	4602      	mov	r2, r0
   db4bc:	4628      	mov	r0, r5
   db4be:	f7ff fef0 	bl	db2a2 <strncmp>
   db4c2:	4607      	mov	r7, r0
   db4c4:	b128      	cbz	r0, db4d2 <_strtod_r+0x18a>
   db4c6:	2000      	movs	r0, #0
   db4c8:	4633      	mov	r3, r6
   db4ca:	9d04      	ldr	r5, [sp, #16]
   db4cc:	4602      	mov	r2, r0
   db4ce:	4601      	mov	r1, r0
   db4d0:	e057      	b.n	db582 <_strtod_r+0x23a>
   db4d2:	9802      	ldr	r0, [sp, #8]
   db4d4:	f7ff fe36 	bl	db144 <_localeconv_r>
   db4d8:	6800      	ldr	r0, [r0, #0]
   db4da:	f7ff feda 	bl	db292 <strlen>
   db4de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db4e0:	181a      	adds	r2, r3, r0
   db4e2:	9217      	str	r2, [sp, #92]	; 0x5c
   db4e4:	9a04      	ldr	r2, [sp, #16]
   db4e6:	5c1b      	ldrb	r3, [r3, r0]
   db4e8:	2a00      	cmp	r2, #0
   db4ea:	d142      	bne.n	db572 <_strtod_r+0x22a>
   db4ec:	4610      	mov	r0, r2
   db4ee:	2b30      	cmp	r3, #48	; 0x30
   db4f0:	d105      	bne.n	db4fe <_strtod_r+0x1b6>
   db4f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db4f4:	1c5a      	adds	r2, r3, #1
   db4f6:	9217      	str	r2, [sp, #92]	; 0x5c
   db4f8:	3001      	adds	r0, #1
   db4fa:	785b      	ldrb	r3, [r3, #1]
   db4fc:	e7f7      	b.n	db4ee <_strtod_r+0x1a6>
   db4fe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db502:	2a08      	cmp	r2, #8
   db504:	d843      	bhi.n	db58e <_strtod_r+0x246>
   db506:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   db508:	9207      	str	r2, [sp, #28]
   db50a:	4602      	mov	r2, r0
   db50c:	2000      	movs	r0, #0
   db50e:	4605      	mov	r5, r0
   db510:	3b30      	subs	r3, #48	; 0x30
   db512:	f100 0101 	add.w	r1, r0, #1
   db516:	d026      	beq.n	db566 <_strtod_r+0x21e>
   db518:	440a      	add	r2, r1
   db51a:	eb05 0c00 	add.w	ip, r5, r0
   db51e:	4629      	mov	r1, r5
   db520:	260a      	movs	r6, #10
   db522:	4561      	cmp	r1, ip
   db524:	d00e      	beq.n	db544 <_strtod_r+0x1fc>
   db526:	3101      	adds	r1, #1
   db528:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   db52c:	f1be 0f08 	cmp.w	lr, #8
   db530:	dc03      	bgt.n	db53a <_strtod_r+0x1f2>
   db532:	9f05      	ldr	r7, [sp, #20]
   db534:	4377      	muls	r7, r6
   db536:	9705      	str	r7, [sp, #20]
   db538:	e7f3      	b.n	db522 <_strtod_r+0x1da>
   db53a:	2910      	cmp	r1, #16
   db53c:	bfd8      	it	le
   db53e:	fb06 f808 	mulle.w	r8, r6, r8
   db542:	e7ee      	b.n	db522 <_strtod_r+0x1da>
   db544:	4428      	add	r0, r5
   db546:	2808      	cmp	r0, #8
   db548:	f100 0501 	add.w	r5, r0, #1
   db54c:	dc05      	bgt.n	db55a <_strtod_r+0x212>
   db54e:	9805      	ldr	r0, [sp, #20]
   db550:	210a      	movs	r1, #10
   db552:	fb01 3300 	mla	r3, r1, r0, r3
   db556:	9305      	str	r3, [sp, #20]
   db558:	e004      	b.n	db564 <_strtod_r+0x21c>
   db55a:	2d10      	cmp	r5, #16
   db55c:	bfdc      	itt	le
   db55e:	210a      	movle	r1, #10
   db560:	fb01 3808 	mlale	r8, r1, r8, r3
   db564:	2100      	movs	r1, #0
   db566:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db568:	1c58      	adds	r0, r3, #1
   db56a:	9017      	str	r0, [sp, #92]	; 0x5c
   db56c:	785b      	ldrb	r3, [r3, #1]
   db56e:	4608      	mov	r0, r1
   db570:	e002      	b.n	db578 <_strtod_r+0x230>
   db572:	9d04      	ldr	r5, [sp, #16]
   db574:	4638      	mov	r0, r7
   db576:	463a      	mov	r2, r7
   db578:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db57c:	2909      	cmp	r1, #9
   db57e:	d9c7      	bls.n	db510 <_strtod_r+0x1c8>
   db580:	2101      	movs	r1, #1
   db582:	2b65      	cmp	r3, #101	; 0x65
   db584:	d001      	beq.n	db58a <_strtod_r+0x242>
   db586:	2b45      	cmp	r3, #69	; 0x45
   db588:	d151      	bne.n	db62e <_strtod_r+0x2e6>
   db58a:	b96d      	cbnz	r5, db5a8 <_strtod_r+0x260>
   db58c:	e004      	b.n	db598 <_strtod_r+0x250>
   db58e:	2b65      	cmp	r3, #101	; 0x65
   db590:	f040 84b3 	bne.w	dbefa <_strtod_r+0xbb2>
   db594:	2200      	movs	r2, #0
   db596:	2101      	movs	r1, #1
   db598:	b928      	cbnz	r0, db5a6 <_strtod_r+0x25e>
   db59a:	9b06      	ldr	r3, [sp, #24]
   db59c:	2b00      	cmp	r3, #0
   db59e:	f000 8095 	beq.w	db6cc <_strtod_r+0x384>
   db5a2:	4605      	mov	r5, r0
   db5a4:	e000      	b.n	db5a8 <_strtod_r+0x260>
   db5a6:	2500      	movs	r5, #0
   db5a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   db5aa:	1c63      	adds	r3, r4, #1
   db5ac:	9317      	str	r3, [sp, #92]	; 0x5c
   db5ae:	7863      	ldrb	r3, [r4, #1]
   db5b0:	2b2b      	cmp	r3, #43	; 0x2b
   db5b2:	d006      	beq.n	db5c2 <_strtod_r+0x27a>
   db5b4:	2b2d      	cmp	r3, #45	; 0x2d
   db5b6:	d002      	beq.n	db5be <_strtod_r+0x276>
   db5b8:	2600      	movs	r6, #0
   db5ba:	9603      	str	r6, [sp, #12]
   db5bc:	e006      	b.n	db5cc <_strtod_r+0x284>
   db5be:	2301      	movs	r3, #1
   db5c0:	e000      	b.n	db5c4 <_strtod_r+0x27c>
   db5c2:	2300      	movs	r3, #0
   db5c4:	9303      	str	r3, [sp, #12]
   db5c6:	1ca3      	adds	r3, r4, #2
   db5c8:	9317      	str	r3, [sp, #92]	; 0x5c
   db5ca:	78a3      	ldrb	r3, [r4, #2]
   db5cc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db5d0:	2e09      	cmp	r6, #9
   db5d2:	d82b      	bhi.n	db62c <_strtod_r+0x2e4>
   db5d4:	2b30      	cmp	r3, #48	; 0x30
   db5d6:	d104      	bne.n	db5e2 <_strtod_r+0x29a>
   db5d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db5da:	1c5e      	adds	r6, r3, #1
   db5dc:	9617      	str	r6, [sp, #92]	; 0x5c
   db5de:	785b      	ldrb	r3, [r3, #1]
   db5e0:	e7f8      	b.n	db5d4 <_strtod_r+0x28c>
   db5e2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   db5e6:	2e08      	cmp	r6, #8
   db5e8:	d821      	bhi.n	db62e <_strtod_r+0x2e6>
   db5ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db5ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db5f0:	f04f 0c0a 	mov.w	ip, #10
   db5f4:	461f      	mov	r7, r3
   db5f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db5f8:	1c5e      	adds	r6, r3, #1
   db5fa:	9617      	str	r6, [sp, #92]	; 0x5c
   db5fc:	785b      	ldrb	r3, [r3, #1]
   db5fe:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   db602:	f1b9 0f09 	cmp.w	r9, #9
   db606:	d804      	bhi.n	db612 <_strtod_r+0x2ca>
   db608:	fb0c 3e0e 	mla	lr, ip, lr, r3
   db60c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db610:	e7f1      	b.n	db5f6 <_strtod_r+0x2ae>
   db612:	1bf6      	subs	r6, r6, r7
   db614:	2e08      	cmp	r6, #8
   db616:	f644 691f 	movw	r9, #19999	; 0x4e1f
   db61a:	dc02      	bgt.n	db622 <_strtod_r+0x2da>
   db61c:	45f1      	cmp	r9, lr
   db61e:	bfa8      	it	ge
   db620:	46f1      	movge	r9, lr
   db622:	9e03      	ldr	r6, [sp, #12]
   db624:	b12e      	cbz	r6, db632 <_strtod_r+0x2ea>
   db626:	f1c9 0900 	rsb	r9, r9, #0
   db62a:	e002      	b.n	db632 <_strtod_r+0x2ea>
   db62c:	9417      	str	r4, [sp, #92]	; 0x5c
   db62e:	f04f 0900 	mov.w	r9, #0
   db632:	2d00      	cmp	r5, #0
   db634:	d153      	bne.n	db6de <_strtod_r+0x396>
   db636:	2800      	cmp	r0, #0
   db638:	f040 8451 	bne.w	dbede <_strtod_r+0xb96>
   db63c:	9a06      	ldr	r2, [sp, #24]
   db63e:	2a00      	cmp	r2, #0
   db640:	f040 844d 	bne.w	dbede <_strtod_r+0xb96>
   db644:	2900      	cmp	r1, #0
   db646:	d141      	bne.n	db6cc <_strtod_r+0x384>
   db648:	2b4e      	cmp	r3, #78	; 0x4e
   db64a:	d020      	beq.n	db68e <_strtod_r+0x346>
   db64c:	dc02      	bgt.n	db654 <_strtod_r+0x30c>
   db64e:	2b49      	cmp	r3, #73	; 0x49
   db650:	d00a      	beq.n	db668 <_strtod_r+0x320>
   db652:	e03b      	b.n	db6cc <_strtod_r+0x384>
   db654:	2b69      	cmp	r3, #105	; 0x69
   db656:	d007      	beq.n	db668 <_strtod_r+0x320>
   db658:	2b6e      	cmp	r3, #110	; 0x6e
   db65a:	d018      	beq.n	db68e <_strtod_r+0x346>
   db65c:	e036      	b.n	db6cc <_strtod_r+0x384>
   db65e:	bf00      	nop
   db660:	000de240 	.word	0x000de240
   db664:	7ff00000 	.word	0x7ff00000
   db668:	49a8      	ldr	r1, [pc, #672]	; (db90c <_strtod_r+0x5c4>)
   db66a:	a817      	add	r0, sp, #92	; 0x5c
   db66c:	f001 fa38 	bl	dcae0 <__match>
   db670:	b360      	cbz	r0, db6cc <_strtod_r+0x384>
   db672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db674:	49a6      	ldr	r1, [pc, #664]	; (db910 <_strtod_r+0x5c8>)
   db676:	3b01      	subs	r3, #1
   db678:	a817      	add	r0, sp, #92	; 0x5c
   db67a:	9317      	str	r3, [sp, #92]	; 0x5c
   db67c:	f001 fa30 	bl	dcae0 <__match>
   db680:	b910      	cbnz	r0, db688 <_strtod_r+0x340>
   db682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db684:	3301      	adds	r3, #1
   db686:	9317      	str	r3, [sp, #92]	; 0x5c
   db688:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db92c <_strtod_r+0x5e4>
   db68c:	e01a      	b.n	db6c4 <_strtod_r+0x37c>
   db68e:	49a1      	ldr	r1, [pc, #644]	; (db914 <_strtod_r+0x5cc>)
   db690:	a817      	add	r0, sp, #92	; 0x5c
   db692:	f001 fa25 	bl	dcae0 <__match>
   db696:	b1c8      	cbz	r0, db6cc <_strtod_r+0x384>
   db698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db69a:	781b      	ldrb	r3, [r3, #0]
   db69c:	2b28      	cmp	r3, #40	; 0x28
   db69e:	d10f      	bne.n	db6c0 <_strtod_r+0x378>
   db6a0:	aa1a      	add	r2, sp, #104	; 0x68
   db6a2:	499d      	ldr	r1, [pc, #628]	; (db918 <_strtod_r+0x5d0>)
   db6a4:	a817      	add	r0, sp, #92	; 0x5c
   db6a6:	f001 fa2e 	bl	dcb06 <__hexnan>
   db6aa:	2805      	cmp	r0, #5
   db6ac:	d108      	bne.n	db6c0 <_strtod_r+0x378>
   db6ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db6b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db6b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db6b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db6bc:	f000 bc0f 	b.w	dbede <_strtod_r+0xb96>
   db6c0:	f8df b26c 	ldr.w	fp, [pc, #620]	; db930 <_strtod_r+0x5e8>
   db6c4:	f04f 0a00 	mov.w	sl, #0
   db6c8:	f000 bc09 	b.w	dbede <_strtod_r+0xb96>
   db6cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db6ce:	9417      	str	r4, [sp, #92]	; 0x5c
   db6d0:	2b00      	cmp	r3, #0
   db6d2:	f000 840f 	beq.w	dbef4 <_strtod_r+0xbac>
   db6d6:	2300      	movs	r3, #0
   db6d8:	930c      	str	r3, [sp, #48]	; 0x30
   db6da:	f000 bc02 	b.w	dbee2 <_strtod_r+0xb9a>
   db6de:	9b04      	ldr	r3, [sp, #16]
   db6e0:	9805      	ldr	r0, [sp, #20]
   db6e2:	2b00      	cmp	r3, #0
   db6e4:	bf08      	it	eq
   db6e6:	462b      	moveq	r3, r5
   db6e8:	2d10      	cmp	r5, #16
   db6ea:	462c      	mov	r4, r5
   db6ec:	ebc2 0909 	rsb	r9, r2, r9
   db6f0:	bfa8      	it	ge
   db6f2:	2410      	movge	r4, #16
   db6f4:	9304      	str	r3, [sp, #16]
   db6f6:	f7ff f86f 	bl	da7d8 <__aeabi_ui2d>
   db6fa:	2c09      	cmp	r4, #9
   db6fc:	4682      	mov	sl, r0
   db6fe:	468b      	mov	fp, r1
   db700:	dd13      	ble.n	db72a <_strtod_r+0x3e2>
   db702:	4b86      	ldr	r3, [pc, #536]	; (db91c <_strtod_r+0x5d4>)
   db704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   db708:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db70c:	f7ff f8da 	bl	da8c4 <__aeabi_dmul>
   db710:	4606      	mov	r6, r0
   db712:	4640      	mov	r0, r8
   db714:	460f      	mov	r7, r1
   db716:	f7ff f85f 	bl	da7d8 <__aeabi_ui2d>
   db71a:	4602      	mov	r2, r0
   db71c:	460b      	mov	r3, r1
   db71e:	4630      	mov	r0, r6
   db720:	4639      	mov	r1, r7
   db722:	f7fe ff1d 	bl	da560 <__adddf3>
   db726:	4682      	mov	sl, r0
   db728:	468b      	mov	fp, r1
   db72a:	2d0f      	cmp	r5, #15
   db72c:	dc36      	bgt.n	db79c <_strtod_r+0x454>
   db72e:	f1b9 0f00 	cmp.w	r9, #0
   db732:	f000 83d4 	beq.w	dbede <_strtod_r+0xb96>
   db736:	dd24      	ble.n	db782 <_strtod_r+0x43a>
   db738:	f1b9 0f16 	cmp.w	r9, #22
   db73c:	dc07      	bgt.n	db74e <_strtod_r+0x406>
   db73e:	4d77      	ldr	r5, [pc, #476]	; (db91c <_strtod_r+0x5d4>)
   db740:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   db744:	4652      	mov	r2, sl
   db746:	465b      	mov	r3, fp
   db748:	e9d9 0100 	ldrd	r0, r1, [r9]
   db74c:	e014      	b.n	db778 <_strtod_r+0x430>
   db74e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db752:	4599      	cmp	r9, r3
   db754:	dc22      	bgt.n	db79c <_strtod_r+0x454>
   db756:	4c71      	ldr	r4, [pc, #452]	; (db91c <_strtod_r+0x5d4>)
   db758:	f1c5 050f 	rsb	r5, r5, #15
   db75c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db760:	ebc5 0509 	rsb	r5, r5, r9
   db764:	4652      	mov	r2, sl
   db766:	465b      	mov	r3, fp
   db768:	e9d1 0100 	ldrd	r0, r1, [r1]
   db76c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db770:	f7ff f8a8 	bl	da8c4 <__aeabi_dmul>
   db774:	e9d4 2300 	ldrd	r2, r3, [r4]
   db778:	f7ff f8a4 	bl	da8c4 <__aeabi_dmul>
   db77c:	4682      	mov	sl, r0
   db77e:	468b      	mov	fp, r1
   db780:	e3ad      	b.n	dbede <_strtod_r+0xb96>
   db782:	f119 0f16 	cmn.w	r9, #22
   db786:	db09      	blt.n	db79c <_strtod_r+0x454>
   db788:	4d64      	ldr	r5, [pc, #400]	; (db91c <_strtod_r+0x5d4>)
   db78a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   db78e:	e9d9 2300 	ldrd	r2, r3, [r9]
   db792:	4650      	mov	r0, sl
   db794:	4659      	mov	r1, fp
   db796:	f7ff f9bf 	bl	dab18 <__aeabi_ddiv>
   db79a:	e7ef      	b.n	db77c <_strtod_r+0x434>
   db79c:	1b2c      	subs	r4, r5, r4
   db79e:	444c      	add	r4, r9
   db7a0:	2c00      	cmp	r4, #0
   db7a2:	dd57      	ble.n	db854 <_strtod_r+0x50c>
   db7a4:	f014 010f 	ands.w	r1, r4, #15
   db7a8:	d00a      	beq.n	db7c0 <_strtod_r+0x478>
   db7aa:	4b5c      	ldr	r3, [pc, #368]	; (db91c <_strtod_r+0x5d4>)
   db7ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   db7b0:	4652      	mov	r2, sl
   db7b2:	465b      	mov	r3, fp
   db7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   db7b8:	f7ff f884 	bl	da8c4 <__aeabi_dmul>
   db7bc:	4682      	mov	sl, r0
   db7be:	468b      	mov	fp, r1
   db7c0:	f034 040f 	bics.w	r4, r4, #15
   db7c4:	f000 80b8 	beq.w	db938 <_strtod_r+0x5f0>
   db7c8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   db7cc:	dd0b      	ble.n	db7e6 <_strtod_r+0x49e>
   db7ce:	2400      	movs	r4, #0
   db7d0:	4625      	mov	r5, r4
   db7d2:	9405      	str	r4, [sp, #20]
   db7d4:	9404      	str	r4, [sp, #16]
   db7d6:	9a02      	ldr	r2, [sp, #8]
   db7d8:	f8df b150 	ldr.w	fp, [pc, #336]	; db92c <_strtod_r+0x5e4>
   db7dc:	2322      	movs	r3, #34	; 0x22
   db7de:	6013      	str	r3, [r2, #0]
   db7e0:	f04f 0a00 	mov.w	sl, #0
   db7e4:	e187      	b.n	dbaf6 <_strtod_r+0x7ae>
   db7e6:	4e4e      	ldr	r6, [pc, #312]	; (db920 <_strtod_r+0x5d8>)
   db7e8:	2300      	movs	r3, #0
   db7ea:	1124      	asrs	r4, r4, #4
   db7ec:	4650      	mov	r0, sl
   db7ee:	4659      	mov	r1, fp
   db7f0:	4698      	mov	r8, r3
   db7f2:	4637      	mov	r7, r6
   db7f4:	2c01      	cmp	r4, #1
   db7f6:	dd0b      	ble.n	db810 <_strtod_r+0x4c8>
   db7f8:	07e2      	lsls	r2, r4, #31
   db7fa:	d504      	bpl.n	db806 <_strtod_r+0x4be>
   db7fc:	e9d6 2300 	ldrd	r2, r3, [r6]
   db800:	f7ff f860 	bl	da8c4 <__aeabi_dmul>
   db804:	2301      	movs	r3, #1
   db806:	f108 0801 	add.w	r8, r8, #1
   db80a:	1064      	asrs	r4, r4, #1
   db80c:	3608      	adds	r6, #8
   db80e:	e7f1      	b.n	db7f4 <_strtod_r+0x4ac>
   db810:	b10b      	cbz	r3, db816 <_strtod_r+0x4ce>
   db812:	4682      	mov	sl, r0
   db814:	468b      	mov	fp, r1
   db816:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db81a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   db81e:	4652      	mov	r2, sl
   db820:	465b      	mov	r3, fp
   db822:	e9d7 0100 	ldrd	r0, r1, [r7]
   db826:	f7ff f84d 	bl	da8c4 <__aeabi_dmul>
   db82a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db82e:	468b      	mov	fp, r1
   db830:	460a      	mov	r2, r1
   db832:	0d1b      	lsrs	r3, r3, #20
   db834:	493b      	ldr	r1, [pc, #236]	; (db924 <_strtod_r+0x5dc>)
   db836:	051b      	lsls	r3, r3, #20
   db838:	428b      	cmp	r3, r1
   db83a:	4682      	mov	sl, r0
   db83c:	d8c7      	bhi.n	db7ce <_strtod_r+0x486>
   db83e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db842:	428b      	cmp	r3, r1
   db844:	bf86      	itte	hi
   db846:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db934 <_strtod_r+0x5ec>
   db84a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db84e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db852:	e071      	b.n	db938 <_strtod_r+0x5f0>
   db854:	d070      	beq.n	db938 <_strtod_r+0x5f0>
   db856:	4264      	negs	r4, r4
   db858:	f014 020f 	ands.w	r2, r4, #15
   db85c:	d00a      	beq.n	db874 <_strtod_r+0x52c>
   db85e:	4b2f      	ldr	r3, [pc, #188]	; (db91c <_strtod_r+0x5d4>)
   db860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db864:	4650      	mov	r0, sl
   db866:	4659      	mov	r1, fp
   db868:	e9d3 2300 	ldrd	r2, r3, [r3]
   db86c:	f7ff f954 	bl	dab18 <__aeabi_ddiv>
   db870:	4682      	mov	sl, r0
   db872:	468b      	mov	fp, r1
   db874:	1124      	asrs	r4, r4, #4
   db876:	d05f      	beq.n	db938 <_strtod_r+0x5f0>
   db878:	2c1f      	cmp	r4, #31
   db87a:	dd04      	ble.n	db886 <_strtod_r+0x53e>
   db87c:	2400      	movs	r4, #0
   db87e:	4625      	mov	r5, r4
   db880:	9405      	str	r4, [sp, #20]
   db882:	9404      	str	r4, [sp, #16]
   db884:	e130      	b.n	dbae8 <_strtod_r+0x7a0>
   db886:	f014 0f10 	tst.w	r4, #16
   db88a:	bf0c      	ite	eq
   db88c:	2300      	moveq	r3, #0
   db88e:	236a      	movne	r3, #106	; 0x6a
   db890:	4e25      	ldr	r6, [pc, #148]	; (db928 <_strtod_r+0x5e0>)
   db892:	9303      	str	r3, [sp, #12]
   db894:	4650      	mov	r0, sl
   db896:	4659      	mov	r1, fp
   db898:	2300      	movs	r3, #0
   db89a:	2c00      	cmp	r4, #0
   db89c:	dd09      	ble.n	db8b2 <_strtod_r+0x56a>
   db89e:	07e2      	lsls	r2, r4, #31
   db8a0:	d504      	bpl.n	db8ac <_strtod_r+0x564>
   db8a2:	e9d6 2300 	ldrd	r2, r3, [r6]
   db8a6:	f7ff f80d 	bl	da8c4 <__aeabi_dmul>
   db8aa:	2301      	movs	r3, #1
   db8ac:	1064      	asrs	r4, r4, #1
   db8ae:	3608      	adds	r6, #8
   db8b0:	e7f3      	b.n	db89a <_strtod_r+0x552>
   db8b2:	b10b      	cbz	r3, db8b8 <_strtod_r+0x570>
   db8b4:	4682      	mov	sl, r0
   db8b6:	468b      	mov	fp, r1
   db8b8:	9b03      	ldr	r3, [sp, #12]
   db8ba:	b1eb      	cbz	r3, db8f8 <_strtod_r+0x5b0>
   db8bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db8c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db8c4:	2b00      	cmp	r3, #0
   db8c6:	4659      	mov	r1, fp
   db8c8:	dd16      	ble.n	db8f8 <_strtod_r+0x5b0>
   db8ca:	2b1f      	cmp	r3, #31
   db8cc:	dd0e      	ble.n	db8ec <_strtod_r+0x5a4>
   db8ce:	2b34      	cmp	r3, #52	; 0x34
   db8d0:	bfde      	ittt	le
   db8d2:	3b20      	suble	r3, #32
   db8d4:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db8d8:	fa02 f303 	lslle.w	r3, r2, r3
   db8dc:	f04f 0a00 	mov.w	sl, #0
   db8e0:	bfcc      	ite	gt
   db8e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db8e6:	ea03 0b01 	andle.w	fp, r3, r1
   db8ea:	e005      	b.n	db8f8 <_strtod_r+0x5b0>
   db8ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db8f0:	fa02 f303 	lsl.w	r3, r2, r3
   db8f4:	ea03 0a0a 	and.w	sl, r3, sl
   db8f8:	2200      	movs	r2, #0
   db8fa:	2300      	movs	r3, #0
   db8fc:	4650      	mov	r0, sl
   db8fe:	4659      	mov	r1, fp
   db900:	f7ff fa48 	bl	dad94 <__aeabi_dcmpeq>
   db904:	2800      	cmp	r0, #0
   db906:	d1b9      	bne.n	db87c <_strtod_r+0x534>
   db908:	e018      	b.n	db93c <_strtod_r+0x5f4>
   db90a:	bf00      	nop
   db90c:	000de268 	.word	0x000de268
   db910:	000de26b 	.word	0x000de26b
   db914:	000de271 	.word	0x000de271
   db918:	000de254 	.word	0x000de254
   db91c:	000de2e0 	.word	0x000de2e0
   db920:	000de3a8 	.word	0x000de3a8
   db924:	7ca00000 	.word	0x7ca00000
   db928:	000de278 	.word	0x000de278
   db92c:	7ff00000 	.word	0x7ff00000
   db930:	fff80000 	.word	0xfff80000
   db934:	7fefffff 	.word	0x7fefffff
   db938:	2300      	movs	r3, #0
   db93a:	9303      	str	r3, [sp, #12]
   db93c:	9b05      	ldr	r3, [sp, #20]
   db93e:	9300      	str	r3, [sp, #0]
   db940:	9a04      	ldr	r2, [sp, #16]
   db942:	9907      	ldr	r1, [sp, #28]
   db944:	9802      	ldr	r0, [sp, #8]
   db946:	462b      	mov	r3, r5
   db948:	f001 fad3 	bl	dcef2 <__s2b>
   db94c:	9005      	str	r0, [sp, #20]
   db94e:	2800      	cmp	r0, #0
   db950:	f43f af3d 	beq.w	db7ce <_strtod_r+0x486>
   db954:	f1b9 0f00 	cmp.w	r9, #0
   db958:	f1c9 0300 	rsb	r3, r9, #0
   db95c:	bfa8      	it	ge
   db95e:	2300      	movge	r3, #0
   db960:	930d      	str	r3, [sp, #52]	; 0x34
   db962:	2400      	movs	r4, #0
   db964:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db968:	9312      	str	r3, [sp, #72]	; 0x48
   db96a:	4625      	mov	r5, r4
   db96c:	9b05      	ldr	r3, [sp, #20]
   db96e:	9802      	ldr	r0, [sp, #8]
   db970:	6859      	ldr	r1, [r3, #4]
   db972:	f001 fa37 	bl	dcde4 <_Balloc>
   db976:	9004      	str	r0, [sp, #16]
   db978:	2800      	cmp	r0, #0
   db97a:	f43f af2c 	beq.w	db7d6 <_strtod_r+0x48e>
   db97e:	9b05      	ldr	r3, [sp, #20]
   db980:	691a      	ldr	r2, [r3, #16]
   db982:	3202      	adds	r2, #2
   db984:	f103 010c 	add.w	r1, r3, #12
   db988:	0092      	lsls	r2, r2, #2
   db98a:	300c      	adds	r0, #12
   db98c:	f7ff fbed 	bl	db16a <memcpy>
   db990:	aa1a      	add	r2, sp, #104	; 0x68
   db992:	a919      	add	r1, sp, #100	; 0x64
   db994:	ec4b ab10 	vmov	d0, sl, fp
   db998:	9802      	ldr	r0, [sp, #8]
   db99a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db99e:	f001 fd5c 	bl	dd45a <__d2b>
   db9a2:	9018      	str	r0, [sp, #96]	; 0x60
   db9a4:	2800      	cmp	r0, #0
   db9a6:	f43f af16 	beq.w	db7d6 <_strtod_r+0x48e>
   db9aa:	2101      	movs	r1, #1
   db9ac:	9802      	ldr	r0, [sp, #8]
   db9ae:	f001 fb2b 	bl	dd008 <__i2b>
   db9b2:	4605      	mov	r5, r0
   db9b4:	2800      	cmp	r0, #0
   db9b6:	f43f af0e 	beq.w	db7d6 <_strtod_r+0x48e>
   db9ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db9bc:	9903      	ldr	r1, [sp, #12]
   db9be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db9c0:	2b00      	cmp	r3, #0
   db9c2:	bfad      	iteet	ge
   db9c4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db9c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db9c8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db9cc:	eb02 0803 	addge.w	r8, r2, r3
   db9d0:	bfb8      	it	lt
   db9d2:	1ad2      	sublt	r2, r2, r3
   db9d4:	eba3 0301 	sub.w	r3, r3, r1
   db9d8:	4433      	add	r3, r6
   db9da:	49b5      	ldr	r1, [pc, #724]	; (dbcb0 <_strtod_r+0x968>)
   db9dc:	bfa8      	it	ge
   db9de:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db9e0:	3b01      	subs	r3, #1
   db9e2:	428b      	cmp	r3, r1
   db9e4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db9e8:	f280 808a 	bge.w	dbb00 <_strtod_r+0x7b8>
   db9ec:	1ac9      	subs	r1, r1, r3
   db9ee:	291f      	cmp	r1, #31
   db9f0:	bfc8      	it	gt
   db9f2:	4fb0      	ldrgt	r7, [pc, #704]	; (dbcb4 <_strtod_r+0x96c>)
   db9f4:	f04f 0901 	mov.w	r9, #1
   db9f8:	bfd4      	ite	le
   db9fa:	fa09 f301 	lslle.w	r3, r9, r1
   db9fe:	1aff      	subgt	r7, r7, r3
   dba00:	eba6 0601 	sub.w	r6, r6, r1
   dba04:	bfd9      	ittee	le
   dba06:	9306      	strle	r3, [sp, #24]
   dba08:	2700      	movle	r7, #0
   dba0a:	fa09 f707 	lslgt.w	r7, r9, r7
   dba0e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   dba12:	eb08 0906 	add.w	r9, r8, r6
   dba16:	9b03      	ldr	r3, [sp, #12]
   dba18:	45c8      	cmp	r8, r9
   dba1a:	4416      	add	r6, r2
   dba1c:	441e      	add	r6, r3
   dba1e:	4643      	mov	r3, r8
   dba20:	bfa8      	it	ge
   dba22:	464b      	movge	r3, r9
   dba24:	42b3      	cmp	r3, r6
   dba26:	bfa8      	it	ge
   dba28:	4633      	movge	r3, r6
   dba2a:	2b00      	cmp	r3, #0
   dba2c:	bfc2      	ittt	gt
   dba2e:	ebc3 0909 	rsbgt	r9, r3, r9
   dba32:	1af6      	subgt	r6, r6, r3
   dba34:	ebc3 0808 	rsbgt	r8, r3, r8
   dba38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dba3a:	2b00      	cmp	r3, #0
   dba3c:	d164      	bne.n	dbb08 <_strtod_r+0x7c0>
   dba3e:	f1b9 0f00 	cmp.w	r9, #0
   dba42:	dc7a      	bgt.n	dbb3a <_strtod_r+0x7f2>
   dba44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dba46:	2b00      	cmp	r3, #0
   dba48:	f040 8081 	bne.w	dbb4e <_strtod_r+0x806>
   dba4c:	2e00      	cmp	r6, #0
   dba4e:	f300 8088 	bgt.w	dbb62 <_strtod_r+0x81a>
   dba52:	f1b8 0f00 	cmp.w	r8, #0
   dba56:	f300 808e 	bgt.w	dbb76 <_strtod_r+0x82e>
   dba5a:	9a04      	ldr	r2, [sp, #16]
   dba5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dba5e:	9802      	ldr	r0, [sp, #8]
   dba60:	f001 fc27 	bl	dd2b2 <__mdiff>
   dba64:	4604      	mov	r4, r0
   dba66:	2800      	cmp	r0, #0
   dba68:	f43f aeb5 	beq.w	db7d6 <_strtod_r+0x48e>
   dba6c:	68c3      	ldr	r3, [r0, #12]
   dba6e:	9307      	str	r3, [sp, #28]
   dba70:	2300      	movs	r3, #0
   dba72:	60c3      	str	r3, [r0, #12]
   dba74:	4629      	mov	r1, r5
   dba76:	f001 fc00 	bl	dd27a <__mcmp>
   dba7a:	2800      	cmp	r0, #0
   dba7c:	f280 8089 	bge.w	dbb92 <_strtod_r+0x84a>
   dba80:	9b07      	ldr	r3, [sp, #28]
   dba82:	2b00      	cmp	r3, #0
   dba84:	f040 8204 	bne.w	dbe90 <_strtod_r+0xb48>
   dba88:	f1ba 0f00 	cmp.w	sl, #0
   dba8c:	f040 8200 	bne.w	dbe90 <_strtod_r+0xb48>
   dba90:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dba94:	2b00      	cmp	r3, #0
   dba96:	f040 81fb 	bne.w	dbe90 <_strtod_r+0xb48>
   dba9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dba9e:	0d1b      	lsrs	r3, r3, #20
   dbaa0:	051b      	lsls	r3, r3, #20
   dbaa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dbaa6:	f240 81f3 	bls.w	dbe90 <_strtod_r+0xb48>
   dbaaa:	6963      	ldr	r3, [r4, #20]
   dbaac:	2b00      	cmp	r3, #0
   dbaae:	d06c      	beq.n	dbb8a <_strtod_r+0x842>
   dbab0:	4621      	mov	r1, r4
   dbab2:	2201      	movs	r2, #1
   dbab4:	9802      	ldr	r0, [sp, #8]
   dbab6:	f001 fb8f 	bl	dd1d8 <__lshift>
   dbaba:	4629      	mov	r1, r5
   dbabc:	4604      	mov	r4, r0
   dbabe:	f001 fbdc 	bl	dd27a <__mcmp>
   dbac2:	2800      	cmp	r0, #0
   dbac4:	f340 81e4 	ble.w	dbe90 <_strtod_r+0xb48>
   dbac8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbacc:	9a03      	ldr	r2, [sp, #12]
   dbace:	0d1b      	lsrs	r3, r3, #20
   dbad0:	051b      	lsls	r3, r3, #20
   dbad2:	2a00      	cmp	r2, #0
   dbad4:	f000 808c 	beq.w	dbbf0 <_strtod_r+0x8a8>
   dbad8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dbadc:	f300 8088 	bgt.w	dbbf0 <_strtod_r+0x8a8>
   dbae0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   dbae4:	f300 81d6 	bgt.w	dbe94 <_strtod_r+0xb4c>
   dbae8:	9a02      	ldr	r2, [sp, #8]
   dbaea:	2322      	movs	r3, #34	; 0x22
   dbaec:	f04f 0a00 	mov.w	sl, #0
   dbaf0:	f04f 0b00 	mov.w	fp, #0
   dbaf4:	6013      	str	r3, [r2, #0]
   dbaf6:	9b05      	ldr	r3, [sp, #20]
   dbaf8:	2b00      	cmp	r3, #0
   dbafa:	f040 81dc 	bne.w	dbeb6 <_strtod_r+0xb6e>
   dbafe:	e1ee      	b.n	dbede <_strtod_r+0xb96>
   dbb00:	2301      	movs	r3, #1
   dbb02:	2700      	movs	r7, #0
   dbb04:	9306      	str	r3, [sp, #24]
   dbb06:	e784      	b.n	dba12 <_strtod_r+0x6ca>
   dbb08:	4629      	mov	r1, r5
   dbb0a:	461a      	mov	r2, r3
   dbb0c:	9802      	ldr	r0, [sp, #8]
   dbb0e:	f001 fb15 	bl	dd13c <__pow5mult>
   dbb12:	4605      	mov	r5, r0
   dbb14:	2800      	cmp	r0, #0
   dbb16:	f43f ae5e 	beq.w	db7d6 <_strtod_r+0x48e>
   dbb1a:	4601      	mov	r1, r0
   dbb1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dbb1e:	9802      	ldr	r0, [sp, #8]
   dbb20:	f001 fa7b 	bl	dd01a <__multiply>
   dbb24:	9007      	str	r0, [sp, #28]
   dbb26:	2800      	cmp	r0, #0
   dbb28:	f43f ae55 	beq.w	db7d6 <_strtod_r+0x48e>
   dbb2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dbb2e:	9802      	ldr	r0, [sp, #8]
   dbb30:	f001 f98d 	bl	dce4e <_Bfree>
   dbb34:	9b07      	ldr	r3, [sp, #28]
   dbb36:	9318      	str	r3, [sp, #96]	; 0x60
   dbb38:	e781      	b.n	dba3e <_strtod_r+0x6f6>
   dbb3a:	464a      	mov	r2, r9
   dbb3c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dbb3e:	9802      	ldr	r0, [sp, #8]
   dbb40:	f001 fb4a 	bl	dd1d8 <__lshift>
   dbb44:	9018      	str	r0, [sp, #96]	; 0x60
   dbb46:	2800      	cmp	r0, #0
   dbb48:	f47f af7c 	bne.w	dba44 <_strtod_r+0x6fc>
   dbb4c:	e643      	b.n	db7d6 <_strtod_r+0x48e>
   dbb4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   dbb50:	9904      	ldr	r1, [sp, #16]
   dbb52:	9802      	ldr	r0, [sp, #8]
   dbb54:	f001 faf2 	bl	dd13c <__pow5mult>
   dbb58:	9004      	str	r0, [sp, #16]
   dbb5a:	2800      	cmp	r0, #0
   dbb5c:	f47f af76 	bne.w	dba4c <_strtod_r+0x704>
   dbb60:	e639      	b.n	db7d6 <_strtod_r+0x48e>
   dbb62:	4632      	mov	r2, r6
   dbb64:	9904      	ldr	r1, [sp, #16]
   dbb66:	9802      	ldr	r0, [sp, #8]
   dbb68:	f001 fb36 	bl	dd1d8 <__lshift>
   dbb6c:	9004      	str	r0, [sp, #16]
   dbb6e:	2800      	cmp	r0, #0
   dbb70:	f47f af6f 	bne.w	dba52 <_strtod_r+0x70a>
   dbb74:	e62f      	b.n	db7d6 <_strtod_r+0x48e>
   dbb76:	4629      	mov	r1, r5
   dbb78:	4642      	mov	r2, r8
   dbb7a:	9802      	ldr	r0, [sp, #8]
   dbb7c:	f001 fb2c 	bl	dd1d8 <__lshift>
   dbb80:	4605      	mov	r5, r0
   dbb82:	2800      	cmp	r0, #0
   dbb84:	f47f af69 	bne.w	dba5a <_strtod_r+0x712>
   dbb88:	e625      	b.n	db7d6 <_strtod_r+0x48e>
   dbb8a:	6923      	ldr	r3, [r4, #16]
   dbb8c:	2b01      	cmp	r3, #1
   dbb8e:	dc8f      	bgt.n	dbab0 <_strtod_r+0x768>
   dbb90:	e17e      	b.n	dbe90 <_strtod_r+0xb48>
   dbb92:	d161      	bne.n	dbc58 <_strtod_r+0x910>
   dbb94:	9a07      	ldr	r2, [sp, #28]
   dbb96:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbb9a:	b322      	cbz	r2, dbbe6 <_strtod_r+0x89e>
   dbb9c:	4946      	ldr	r1, [pc, #280]	; (dbcb8 <_strtod_r+0x970>)
   dbb9e:	428b      	cmp	r3, r1
   dbba0:	465a      	mov	r2, fp
   dbba2:	d12e      	bne.n	dbc02 <_strtod_r+0x8ba>
   dbba4:	9b03      	ldr	r3, [sp, #12]
   dbba6:	4651      	mov	r1, sl
   dbba8:	b163      	cbz	r3, dbbc4 <_strtod_r+0x87c>
   dbbaa:	4b44      	ldr	r3, [pc, #272]	; (dbcbc <_strtod_r+0x974>)
   dbbac:	4013      	ands	r3, r2
   dbbae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dbbb2:	d807      	bhi.n	dbbc4 <_strtod_r+0x87c>
   dbbb4:	0d1b      	lsrs	r3, r3, #20
   dbbb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbbba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbbbe:	fa00 f303 	lsl.w	r3, r0, r3
   dbbc2:	e001      	b.n	dbbc8 <_strtod_r+0x880>
   dbbc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dbbc8:	428b      	cmp	r3, r1
   dbbca:	d11a      	bne.n	dbc02 <_strtod_r+0x8ba>
   dbbcc:	493c      	ldr	r1, [pc, #240]	; (dbcc0 <_strtod_r+0x978>)
   dbbce:	428a      	cmp	r2, r1
   dbbd0:	d102      	bne.n	dbbd8 <_strtod_r+0x890>
   dbbd2:	3301      	adds	r3, #1
   dbbd4:	f43f adff 	beq.w	db7d6 <_strtod_r+0x48e>
   dbbd8:	4b38      	ldr	r3, [pc, #224]	; (dbcbc <_strtod_r+0x974>)
   dbbda:	4013      	ands	r3, r2
   dbbdc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dbbe0:	f04f 0a00 	mov.w	sl, #0
   dbbe4:	e154      	b.n	dbe90 <_strtod_r+0xb48>
   dbbe6:	b963      	cbnz	r3, dbc02 <_strtod_r+0x8ba>
   dbbe8:	f1ba 0f00 	cmp.w	sl, #0
   dbbec:	d109      	bne.n	dbc02 <_strtod_r+0x8ba>
   dbbee:	e76b      	b.n	dbac8 <_strtod_r+0x780>
   dbbf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dbbf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dbbf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dbbfc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbc00:	e146      	b.n	dbe90 <_strtod_r+0xb48>
   dbc02:	b117      	cbz	r7, dbc0a <_strtod_r+0x8c2>
   dbc04:	ea17 0f0b 	tst.w	r7, fp
   dbc08:	e002      	b.n	dbc10 <_strtod_r+0x8c8>
   dbc0a:	9b06      	ldr	r3, [sp, #24]
   dbc0c:	ea13 0f0a 	tst.w	r3, sl
   dbc10:	f000 813e 	beq.w	dbe90 <_strtod_r+0xb48>
   dbc14:	9b07      	ldr	r3, [sp, #28]
   dbc16:	9a03      	ldr	r2, [sp, #12]
   dbc18:	4650      	mov	r0, sl
   dbc1a:	4659      	mov	r1, fp
   dbc1c:	b153      	cbz	r3, dbc34 <_strtod_r+0x8ec>
   dbc1e:	f7ff fb74 	bl	db30a <sulp>
   dbc22:	4602      	mov	r2, r0
   dbc24:	460b      	mov	r3, r1
   dbc26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dbc2a:	f7fe fc99 	bl	da560 <__adddf3>
   dbc2e:	4682      	mov	sl, r0
   dbc30:	468b      	mov	fp, r1
   dbc32:	e12d      	b.n	dbe90 <_strtod_r+0xb48>
   dbc34:	f7ff fb69 	bl	db30a <sulp>
   dbc38:	4602      	mov	r2, r0
   dbc3a:	460b      	mov	r3, r1
   dbc3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dbc40:	f7fe fc8c 	bl	da55c <__aeabi_dsub>
   dbc44:	2200      	movs	r2, #0
   dbc46:	2300      	movs	r3, #0
   dbc48:	4682      	mov	sl, r0
   dbc4a:	468b      	mov	fp, r1
   dbc4c:	f7ff f8a2 	bl	dad94 <__aeabi_dcmpeq>
   dbc50:	2800      	cmp	r0, #0
   dbc52:	f47f af49 	bne.w	dbae8 <_strtod_r+0x7a0>
   dbc56:	e11b      	b.n	dbe90 <_strtod_r+0xb48>
   dbc58:	4629      	mov	r1, r5
   dbc5a:	4620      	mov	r0, r4
   dbc5c:	f001 fc4b 	bl	dd4f6 <__ratio>
   dbc60:	ec57 6b10 	vmov	r6, r7, d0
   dbc64:	2200      	movs	r2, #0
   dbc66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dbc6a:	ee10 0a10 	vmov	r0, s0
   dbc6e:	4639      	mov	r1, r7
   dbc70:	f7ff f8a4 	bl	dadbc <__aeabi_dcmple>
   dbc74:	2800      	cmp	r0, #0
   dbc76:	d042      	beq.n	dbcfe <_strtod_r+0x9b6>
   dbc78:	9b07      	ldr	r3, [sp, #28]
   dbc7a:	b123      	cbz	r3, dbc86 <_strtod_r+0x93e>
   dbc7c:	f04f 0800 	mov.w	r8, #0
   dbc80:	f8df 9040 	ldr.w	r9, [pc, #64]	; dbcc4 <_strtod_r+0x97c>
   dbc84:	e011      	b.n	dbcaa <_strtod_r+0x962>
   dbc86:	f1ba 0f00 	cmp.w	sl, #0
   dbc8a:	d103      	bne.n	dbc94 <_strtod_r+0x94c>
   dbc8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbc90:	b93b      	cbnz	r3, dbca2 <_strtod_r+0x95a>
   dbc92:	e01b      	b.n	dbccc <_strtod_r+0x984>
   dbc94:	f1ba 0f01 	cmp.w	sl, #1
   dbc98:	d103      	bne.n	dbca2 <_strtod_r+0x95a>
   dbc9a:	f1bb 0f00 	cmp.w	fp, #0
   dbc9e:	f43f af23 	beq.w	dbae8 <_strtod_r+0x7a0>
   dbca2:	f8df 9024 	ldr.w	r9, [pc, #36]	; dbcc8 <_strtod_r+0x980>
   dbca6:	f04f 0800 	mov.w	r8, #0
   dbcaa:	2600      	movs	r6, #0
   dbcac:	4f05      	ldr	r7, [pc, #20]	; (dbcc4 <_strtod_r+0x97c>)
   dbcae:	e039      	b.n	dbd24 <_strtod_r+0x9dc>
   dbcb0:	fffffc02 	.word	0xfffffc02
   dbcb4:	fffffbe2 	.word	0xfffffbe2
   dbcb8:	000fffff 	.word	0x000fffff
   dbcbc:	7ff00000 	.word	0x7ff00000
   dbcc0:	7fefffff 	.word	0x7fefffff
   dbcc4:	3ff00000 	.word	0x3ff00000
   dbcc8:	bff00000 	.word	0xbff00000
   dbccc:	2200      	movs	r2, #0
   dbcce:	4b98      	ldr	r3, [pc, #608]	; (dbf30 <_strtod_r+0xbe8>)
   dbcd0:	4630      	mov	r0, r6
   dbcd2:	4639      	mov	r1, r7
   dbcd4:	f7ff f868 	bl	dada8 <__aeabi_dcmplt>
   dbcd8:	b940      	cbnz	r0, dbcec <_strtod_r+0x9a4>
   dbcda:	4630      	mov	r0, r6
   dbcdc:	4639      	mov	r1, r7
   dbcde:	2200      	movs	r2, #0
   dbce0:	4b94      	ldr	r3, [pc, #592]	; (dbf34 <_strtod_r+0xbec>)
   dbce2:	f7fe fdef 	bl	da8c4 <__aeabi_dmul>
   dbce6:	4606      	mov	r6, r0
   dbce8:	460f      	mov	r7, r1
   dbcea:	e001      	b.n	dbcf0 <_strtod_r+0x9a8>
   dbcec:	4f91      	ldr	r7, [pc, #580]	; (dbf34 <_strtod_r+0xbec>)
   dbcee:	2600      	movs	r6, #0
   dbcf0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dbcf4:	9614      	str	r6, [sp, #80]	; 0x50
   dbcf6:	9315      	str	r3, [sp, #84]	; 0x54
   dbcf8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   dbcfc:	e012      	b.n	dbd24 <_strtod_r+0x9dc>
   dbcfe:	4b8d      	ldr	r3, [pc, #564]	; (dbf34 <_strtod_r+0xbec>)
   dbd00:	4630      	mov	r0, r6
   dbd02:	4639      	mov	r1, r7
   dbd04:	2200      	movs	r2, #0
   dbd06:	f7fe fddd 	bl	da8c4 <__aeabi_dmul>
   dbd0a:	9b07      	ldr	r3, [sp, #28]
   dbd0c:	4606      	mov	r6, r0
   dbd0e:	460f      	mov	r7, r1
   dbd10:	b923      	cbnz	r3, dbd1c <_strtod_r+0x9d4>
   dbd12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbd16:	900e      	str	r0, [sp, #56]	; 0x38
   dbd18:	930f      	str	r3, [sp, #60]	; 0x3c
   dbd1a:	e001      	b.n	dbd20 <_strtod_r+0x9d8>
   dbd1c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   dbd20:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   dbd24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbd28:	0d1b      	lsrs	r3, r3, #20
   dbd2a:	051b      	lsls	r3, r3, #20
   dbd2c:	9306      	str	r3, [sp, #24]
   dbd2e:	9a06      	ldr	r2, [sp, #24]
   dbd30:	4b81      	ldr	r3, [pc, #516]	; (dbf38 <_strtod_r+0xbf0>)
   dbd32:	429a      	cmp	r2, r3
   dbd34:	d12b      	bne.n	dbd8e <_strtod_r+0xa46>
   dbd36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dbd3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dbd3e:	ec4b ab10 	vmov	d0, sl, fp
   dbd42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   dbd46:	f001 fb13 	bl	dd370 <__ulp>
   dbd4a:	4640      	mov	r0, r8
   dbd4c:	ec53 2b10 	vmov	r2, r3, d0
   dbd50:	4649      	mov	r1, r9
   dbd52:	f7fe fdb7 	bl	da8c4 <__aeabi_dmul>
   dbd56:	4652      	mov	r2, sl
   dbd58:	465b      	mov	r3, fp
   dbd5a:	f7fe fc01 	bl	da560 <__adddf3>
   dbd5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dbd62:	0d1b      	lsrs	r3, r3, #20
   dbd64:	4a75      	ldr	r2, [pc, #468]	; (dbf3c <_strtod_r+0xbf4>)
   dbd66:	051b      	lsls	r3, r3, #20
   dbd68:	4293      	cmp	r3, r2
   dbd6a:	4682      	mov	sl, r0
   dbd6c:	d90c      	bls.n	dbd88 <_strtod_r+0xa40>
   dbd6e:	4b74      	ldr	r3, [pc, #464]	; (dbf40 <_strtod_r+0xbf8>)
   dbd70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dbd72:	429a      	cmp	r2, r3
   dbd74:	d103      	bne.n	dbd7e <_strtod_r+0xa36>
   dbd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbd78:	3301      	adds	r3, #1
   dbd7a:	f43f ad2c 	beq.w	db7d6 <_strtod_r+0x48e>
   dbd7e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; dbf40 <_strtod_r+0xbf8>
   dbd82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbd86:	e072      	b.n	dbe6e <_strtod_r+0xb26>
   dbd88:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   dbd8c:	e038      	b.n	dbe00 <_strtod_r+0xab8>
   dbd8e:	9b03      	ldr	r3, [sp, #12]
   dbd90:	b333      	cbz	r3, dbde0 <_strtod_r+0xa98>
   dbd92:	9b06      	ldr	r3, [sp, #24]
   dbd94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dbd98:	d822      	bhi.n	dbde0 <_strtod_r+0xa98>
   dbd9a:	a35d      	add	r3, pc, #372	; (adr r3, dbf10 <_strtod_r+0xbc8>)
   dbd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbda0:	4630      	mov	r0, r6
   dbda2:	4639      	mov	r1, r7
   dbda4:	f7ff f80a 	bl	dadbc <__aeabi_dcmple>
   dbda8:	b1a8      	cbz	r0, dbdd6 <_strtod_r+0xa8e>
   dbdaa:	4639      	mov	r1, r7
   dbdac:	4630      	mov	r0, r6
   dbdae:	f7ff f84b 	bl	dae48 <__aeabi_d2uiz>
   dbdb2:	2800      	cmp	r0, #0
   dbdb4:	bf08      	it	eq
   dbdb6:	2001      	moveq	r0, #1
   dbdb8:	f7fe fd0e 	bl	da7d8 <__aeabi_ui2d>
   dbdbc:	9b07      	ldr	r3, [sp, #28]
   dbdbe:	4606      	mov	r6, r0
   dbdc0:	460f      	mov	r7, r1
   dbdc2:	b923      	cbnz	r3, dbdce <_strtod_r+0xa86>
   dbdc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbdc8:	9010      	str	r0, [sp, #64]	; 0x40
   dbdca:	9311      	str	r3, [sp, #68]	; 0x44
   dbdcc:	e001      	b.n	dbdd2 <_strtod_r+0xa8a>
   dbdce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   dbdd2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   dbdd6:	9a06      	ldr	r2, [sp, #24]
   dbdd8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   dbddc:	ebc2 0903 	rsb	r9, r2, r3
   dbde0:	ed9d 0b08 	vldr	d0, [sp, #32]
   dbde4:	f001 fac4 	bl	dd370 <__ulp>
   dbde8:	4640      	mov	r0, r8
   dbdea:	ec53 2b10 	vmov	r2, r3, d0
   dbdee:	4649      	mov	r1, r9
   dbdf0:	f7fe fd68 	bl	da8c4 <__aeabi_dmul>
   dbdf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dbdf8:	f7fe fbb2 	bl	da560 <__adddf3>
   dbdfc:	4682      	mov	sl, r0
   dbdfe:	468b      	mov	fp, r1
   dbe00:	9b03      	ldr	r3, [sp, #12]
   dbe02:	bba3      	cbnz	r3, dbe6e <_strtod_r+0xb26>
   dbe04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbe08:	0d1b      	lsrs	r3, r3, #20
   dbe0a:	9a06      	ldr	r2, [sp, #24]
   dbe0c:	051b      	lsls	r3, r3, #20
   dbe0e:	429a      	cmp	r2, r3
   dbe10:	46d8      	mov	r8, fp
   dbe12:	d12c      	bne.n	dbe6e <_strtod_r+0xb26>
   dbe14:	4639      	mov	r1, r7
   dbe16:	4630      	mov	r0, r6
   dbe18:	f7fe ffee 	bl	dadf8 <__aeabi_d2iz>
   dbe1c:	f7fe fcec 	bl	da7f8 <__aeabi_i2d>
   dbe20:	460b      	mov	r3, r1
   dbe22:	4602      	mov	r2, r0
   dbe24:	4639      	mov	r1, r7
   dbe26:	4630      	mov	r0, r6
   dbe28:	f7fe fb98 	bl	da55c <__aeabi_dsub>
   dbe2c:	9b07      	ldr	r3, [sp, #28]
   dbe2e:	4606      	mov	r6, r0
   dbe30:	460f      	mov	r7, r1
   dbe32:	b92b      	cbnz	r3, dbe40 <_strtod_r+0xaf8>
   dbe34:	f1ba 0f00 	cmp.w	sl, #0
   dbe38:	d102      	bne.n	dbe40 <_strtod_r+0xaf8>
   dbe3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbe3e:	b183      	cbz	r3, dbe62 <_strtod_r+0xb1a>
   dbe40:	a335      	add	r3, pc, #212	; (adr r3, dbf18 <_strtod_r+0xbd0>)
   dbe42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe46:	4630      	mov	r0, r6
   dbe48:	4639      	mov	r1, r7
   dbe4a:	f7fe ffad 	bl	dada8 <__aeabi_dcmplt>
   dbe4e:	2800      	cmp	r0, #0
   dbe50:	d131      	bne.n	dbeb6 <_strtod_r+0xb6e>
   dbe52:	a333      	add	r3, pc, #204	; (adr r3, dbf20 <_strtod_r+0xbd8>)
   dbe54:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe58:	4630      	mov	r0, r6
   dbe5a:	4639      	mov	r1, r7
   dbe5c:	f7fe ffc2 	bl	dade4 <__aeabi_dcmpgt>
   dbe60:	e004      	b.n	dbe6c <_strtod_r+0xb24>
   dbe62:	a331      	add	r3, pc, #196	; (adr r3, dbf28 <_strtod_r+0xbe0>)
   dbe64:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe68:	f7fe ff9e 	bl	dada8 <__aeabi_dcmplt>
   dbe6c:	bb18      	cbnz	r0, dbeb6 <_strtod_r+0xb6e>
   dbe6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   dbe70:	9802      	ldr	r0, [sp, #8]
   dbe72:	f000 ffec 	bl	dce4e <_Bfree>
   dbe76:	9904      	ldr	r1, [sp, #16]
   dbe78:	9802      	ldr	r0, [sp, #8]
   dbe7a:	f000 ffe8 	bl	dce4e <_Bfree>
   dbe7e:	4629      	mov	r1, r5
   dbe80:	9802      	ldr	r0, [sp, #8]
   dbe82:	f000 ffe4 	bl	dce4e <_Bfree>
   dbe86:	4621      	mov	r1, r4
   dbe88:	9802      	ldr	r0, [sp, #8]
   dbe8a:	f000 ffe0 	bl	dce4e <_Bfree>
   dbe8e:	e56d      	b.n	db96c <_strtod_r+0x624>
   dbe90:	9b03      	ldr	r3, [sp, #12]
   dbe92:	b183      	cbz	r3, dbeb6 <_strtod_r+0xb6e>
   dbe94:	4b2b      	ldr	r3, [pc, #172]	; (dbf44 <_strtod_r+0xbfc>)
   dbe96:	930b      	str	r3, [sp, #44]	; 0x2c
   dbe98:	2300      	movs	r3, #0
   dbe9a:	930a      	str	r3, [sp, #40]	; 0x28
   dbe9c:	4650      	mov	r0, sl
   dbe9e:	4659      	mov	r1, fp
   dbea0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dbea4:	f7fe fd0e 	bl	da8c4 <__aeabi_dmul>
   dbea8:	4682      	mov	sl, r0
   dbeaa:	468b      	mov	fp, r1
   dbeac:	b919      	cbnz	r1, dbeb6 <_strtod_r+0xb6e>
   dbeae:	b910      	cbnz	r0, dbeb6 <_strtod_r+0xb6e>
   dbeb0:	9a02      	ldr	r2, [sp, #8]
   dbeb2:	2322      	movs	r3, #34	; 0x22
   dbeb4:	6013      	str	r3, [r2, #0]
   dbeb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   dbeb8:	9802      	ldr	r0, [sp, #8]
   dbeba:	f000 ffc8 	bl	dce4e <_Bfree>
   dbebe:	9904      	ldr	r1, [sp, #16]
   dbec0:	9802      	ldr	r0, [sp, #8]
   dbec2:	f000 ffc4 	bl	dce4e <_Bfree>
   dbec6:	4629      	mov	r1, r5
   dbec8:	9802      	ldr	r0, [sp, #8]
   dbeca:	f000 ffc0 	bl	dce4e <_Bfree>
   dbece:	9905      	ldr	r1, [sp, #20]
   dbed0:	9802      	ldr	r0, [sp, #8]
   dbed2:	f000 ffbc 	bl	dce4e <_Bfree>
   dbed6:	4621      	mov	r1, r4
   dbed8:	9802      	ldr	r0, [sp, #8]
   dbeda:	f000 ffb8 	bl	dce4e <_Bfree>
   dbede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dbee0:	b113      	cbz	r3, dbee8 <_strtod_r+0xba0>
   dbee2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dbee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dbee6:	6013      	str	r3, [r2, #0]
   dbee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dbeea:	b11b      	cbz	r3, dbef4 <_strtod_r+0xbac>
   dbeec:	4652      	mov	r2, sl
   dbeee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dbef2:	e007      	b.n	dbf04 <_strtod_r+0xbbc>
   dbef4:	4652      	mov	r2, sl
   dbef6:	465b      	mov	r3, fp
   dbef8:	e004      	b.n	dbf04 <_strtod_r+0xbbc>
   dbefa:	2500      	movs	r5, #0
   dbefc:	462a      	mov	r2, r5
   dbefe:	2101      	movs	r1, #1
   dbf00:	f7ff bb41 	b.w	db586 <_strtod_r+0x23e>
   dbf04:	ec43 2b10 	vmov	d0, r2, r3
   dbf08:	b01d      	add	sp, #116	; 0x74
   dbf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf0e:	bf00      	nop
   dbf10:	ffc00000 	.word	0xffc00000
   dbf14:	41dfffff 	.word	0x41dfffff
   dbf18:	94a03595 	.word	0x94a03595
   dbf1c:	3fdfffff 	.word	0x3fdfffff
   dbf20:	35afe535 	.word	0x35afe535
   dbf24:	3fe00000 	.word	0x3fe00000
   dbf28:	94a03595 	.word	0x94a03595
   dbf2c:	3fcfffff 	.word	0x3fcfffff
   dbf30:	3ff00000 	.word	0x3ff00000
   dbf34:	3fe00000 	.word	0x3fe00000
   dbf38:	7fe00000 	.word	0x7fe00000
   dbf3c:	7c9fffff 	.word	0x7c9fffff
   dbf40:	7fefffff 	.word	0x7fefffff
   dbf44:	39500000 	.word	0x39500000

000dbf48 <strtod>:
   dbf48:	4b02      	ldr	r3, [pc, #8]	; (dbf54 <strtod+0xc>)
   dbf4a:	460a      	mov	r2, r1
   dbf4c:	4601      	mov	r1, r0
   dbf4e:	6818      	ldr	r0, [r3, #0]
   dbf50:	f7ff b9fa 	b.w	db348 <_strtod_r>
   dbf54:	2003d5a0 	.word	0x2003d5a0

000dbf58 <_strtol_r>:
   dbf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbf5c:	4680      	mov	r8, r0
   dbf5e:	4840      	ldr	r0, [pc, #256]	; (dc060 <_strtol_r+0x108>)
   dbf60:	f8d0 9000 	ldr.w	r9, [r0]
   dbf64:	460f      	mov	r7, r1
   dbf66:	463d      	mov	r5, r7
   dbf68:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbf6c:	eb09 0004 	add.w	r0, r9, r4
   dbf70:	7840      	ldrb	r0, [r0, #1]
   dbf72:	f000 0008 	and.w	r0, r0, #8
   dbf76:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dbf7a:	b108      	cbz	r0, dbf80 <_strtol_r+0x28>
   dbf7c:	462f      	mov	r7, r5
   dbf7e:	e7f2      	b.n	dbf66 <_strtol_r+0xe>
   dbf80:	2c2d      	cmp	r4, #45	; 0x2d
   dbf82:	d103      	bne.n	dbf8c <_strtol_r+0x34>
   dbf84:	1cbd      	adds	r5, r7, #2
   dbf86:	787c      	ldrb	r4, [r7, #1]
   dbf88:	2601      	movs	r6, #1
   dbf8a:	e003      	b.n	dbf94 <_strtol_r+0x3c>
   dbf8c:	2c2b      	cmp	r4, #43	; 0x2b
   dbf8e:	bf04      	itt	eq
   dbf90:	787c      	ldrbeq	r4, [r7, #1]
   dbf92:	1cbd      	addeq	r5, r7, #2
   dbf94:	b113      	cbz	r3, dbf9c <_strtol_r+0x44>
   dbf96:	2b10      	cmp	r3, #16
   dbf98:	d10a      	bne.n	dbfb0 <_strtol_r+0x58>
   dbf9a:	e05b      	b.n	dc054 <_strtol_r+0xfc>
   dbf9c:	2c30      	cmp	r4, #48	; 0x30
   dbf9e:	d157      	bne.n	dc050 <_strtol_r+0xf8>
   dbfa0:	7828      	ldrb	r0, [r5, #0]
   dbfa2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbfa6:	2858      	cmp	r0, #88	; 0x58
   dbfa8:	d14d      	bne.n	dc046 <_strtol_r+0xee>
   dbfaa:	786c      	ldrb	r4, [r5, #1]
   dbfac:	2310      	movs	r3, #16
   dbfae:	3502      	adds	r5, #2
   dbfb0:	2e00      	cmp	r6, #0
   dbfb2:	bf14      	ite	ne
   dbfb4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dbfb8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dbfbc:	2700      	movs	r7, #0
   dbfbe:	fbbc faf3 	udiv	sl, ip, r3
   dbfc2:	4638      	mov	r0, r7
   dbfc4:	fb03 cc1a 	mls	ip, r3, sl, ip
   dbfc8:	eb09 0e04 	add.w	lr, r9, r4
   dbfcc:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbfd0:	f01e 0f04 	tst.w	lr, #4
   dbfd4:	d001      	beq.n	dbfda <_strtol_r+0x82>
   dbfd6:	3c30      	subs	r4, #48	; 0x30
   dbfd8:	e00b      	b.n	dbff2 <_strtol_r+0x9a>
   dbfda:	f01e 0e03 	ands.w	lr, lr, #3
   dbfde:	d01b      	beq.n	dc018 <_strtol_r+0xc0>
   dbfe0:	f1be 0f01 	cmp.w	lr, #1
   dbfe4:	bf0c      	ite	eq
   dbfe6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbfea:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbfee:	ebce 0404 	rsb	r4, lr, r4
   dbff2:	42a3      	cmp	r3, r4
   dbff4:	dd10      	ble.n	dc018 <_strtol_r+0xc0>
   dbff6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dbffa:	d00a      	beq.n	dc012 <_strtol_r+0xba>
   dbffc:	4550      	cmp	r0, sl
   dbffe:	d806      	bhi.n	dc00e <_strtol_r+0xb6>
   dc000:	d101      	bne.n	dc006 <_strtol_r+0xae>
   dc002:	4564      	cmp	r4, ip
   dc004:	dc03      	bgt.n	dc00e <_strtol_r+0xb6>
   dc006:	fb03 4000 	mla	r0, r3, r0, r4
   dc00a:	2701      	movs	r7, #1
   dc00c:	e001      	b.n	dc012 <_strtol_r+0xba>
   dc00e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc012:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc016:	e7d7      	b.n	dbfc8 <_strtol_r+0x70>
   dc018:	1c7b      	adds	r3, r7, #1
   dc01a:	d10c      	bne.n	dc036 <_strtol_r+0xde>
   dc01c:	2e00      	cmp	r6, #0
   dc01e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dc022:	bf14      	ite	ne
   dc024:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dc028:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc02c:	f8c8 3000 	str.w	r3, [r8]
   dc030:	b92a      	cbnz	r2, dc03e <_strtol_r+0xe6>
   dc032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc036:	b106      	cbz	r6, dc03a <_strtol_r+0xe2>
   dc038:	4240      	negs	r0, r0
   dc03a:	b172      	cbz	r2, dc05a <_strtol_r+0x102>
   dc03c:	b107      	cbz	r7, dc040 <_strtol_r+0xe8>
   dc03e:	1e69      	subs	r1, r5, #1
   dc040:	6011      	str	r1, [r2, #0]
   dc042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc046:	2430      	movs	r4, #48	; 0x30
   dc048:	2b00      	cmp	r3, #0
   dc04a:	d1b1      	bne.n	dbfb0 <_strtol_r+0x58>
   dc04c:	2308      	movs	r3, #8
   dc04e:	e7af      	b.n	dbfb0 <_strtol_r+0x58>
   dc050:	230a      	movs	r3, #10
   dc052:	e7ad      	b.n	dbfb0 <_strtol_r+0x58>
   dc054:	2c30      	cmp	r4, #48	; 0x30
   dc056:	d0a3      	beq.n	dbfa0 <_strtol_r+0x48>
   dc058:	e7aa      	b.n	dbfb0 <_strtol_r+0x58>
   dc05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc05e:	bf00      	nop
   dc060:	2003d53c 	.word	0x2003d53c

000dc064 <strtol>:
   dc064:	4613      	mov	r3, r2
   dc066:	460a      	mov	r2, r1
   dc068:	4601      	mov	r1, r0
   dc06a:	4802      	ldr	r0, [pc, #8]	; (dc074 <strtol+0x10>)
   dc06c:	6800      	ldr	r0, [r0, #0]
   dc06e:	f7ff bf73 	b.w	dbf58 <_strtol_r>
   dc072:	bf00      	nop
   dc074:	2003d5a0 	.word	0x2003d5a0

000dc078 <_strtoul_r>:
   dc078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc07c:	4680      	mov	r8, r0
   dc07e:	483c      	ldr	r0, [pc, #240]	; (dc170 <_strtoul_r+0xf8>)
   dc080:	f8d0 9000 	ldr.w	r9, [r0]
   dc084:	460e      	mov	r6, r1
   dc086:	4635      	mov	r5, r6
   dc088:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc08c:	eb09 0004 	add.w	r0, r9, r4
   dc090:	7840      	ldrb	r0, [r0, #1]
   dc092:	f000 0008 	and.w	r0, r0, #8
   dc096:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc09a:	b108      	cbz	r0, dc0a0 <_strtoul_r+0x28>
   dc09c:	462e      	mov	r6, r5
   dc09e:	e7f2      	b.n	dc086 <_strtoul_r+0xe>
   dc0a0:	2c2d      	cmp	r4, #45	; 0x2d
   dc0a2:	d103      	bne.n	dc0ac <_strtoul_r+0x34>
   dc0a4:	1cb5      	adds	r5, r6, #2
   dc0a6:	7874      	ldrb	r4, [r6, #1]
   dc0a8:	2701      	movs	r7, #1
   dc0aa:	e003      	b.n	dc0b4 <_strtoul_r+0x3c>
   dc0ac:	2c2b      	cmp	r4, #43	; 0x2b
   dc0ae:	bf04      	itt	eq
   dc0b0:	7874      	ldrbeq	r4, [r6, #1]
   dc0b2:	1cb5      	addeq	r5, r6, #2
   dc0b4:	b113      	cbz	r3, dc0bc <_strtoul_r+0x44>
   dc0b6:	2b10      	cmp	r3, #16
   dc0b8:	d10a      	bne.n	dc0d0 <_strtoul_r+0x58>
   dc0ba:	e053      	b.n	dc164 <_strtoul_r+0xec>
   dc0bc:	2c30      	cmp	r4, #48	; 0x30
   dc0be:	d14f      	bne.n	dc160 <_strtoul_r+0xe8>
   dc0c0:	7828      	ldrb	r0, [r5, #0]
   dc0c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc0c6:	2858      	cmp	r0, #88	; 0x58
   dc0c8:	d145      	bne.n	dc156 <_strtoul_r+0xde>
   dc0ca:	786c      	ldrb	r4, [r5, #1]
   dc0cc:	2310      	movs	r3, #16
   dc0ce:	3502      	adds	r5, #2
   dc0d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc0d4:	2600      	movs	r6, #0
   dc0d6:	fbbc fcf3 	udiv	ip, ip, r3
   dc0da:	fb03 fa0c 	mul.w	sl, r3, ip
   dc0de:	ea6f 0a0a 	mvn.w	sl, sl
   dc0e2:	4630      	mov	r0, r6
   dc0e4:	eb09 0e04 	add.w	lr, r9, r4
   dc0e8:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc0ec:	f01e 0f04 	tst.w	lr, #4
   dc0f0:	d001      	beq.n	dc0f6 <_strtoul_r+0x7e>
   dc0f2:	3c30      	subs	r4, #48	; 0x30
   dc0f4:	e00b      	b.n	dc10e <_strtoul_r+0x96>
   dc0f6:	f01e 0e03 	ands.w	lr, lr, #3
   dc0fa:	d01a      	beq.n	dc132 <_strtoul_r+0xba>
   dc0fc:	f1be 0f01 	cmp.w	lr, #1
   dc100:	bf0c      	ite	eq
   dc102:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc106:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc10a:	ebce 0404 	rsb	r4, lr, r4
   dc10e:	42a3      	cmp	r3, r4
   dc110:	dd0f      	ble.n	dc132 <_strtoul_r+0xba>
   dc112:	2e00      	cmp	r6, #0
   dc114:	db08      	blt.n	dc128 <_strtoul_r+0xb0>
   dc116:	4560      	cmp	r0, ip
   dc118:	d806      	bhi.n	dc128 <_strtoul_r+0xb0>
   dc11a:	d101      	bne.n	dc120 <_strtoul_r+0xa8>
   dc11c:	4554      	cmp	r4, sl
   dc11e:	dc03      	bgt.n	dc128 <_strtoul_r+0xb0>
   dc120:	fb03 4000 	mla	r0, r3, r0, r4
   dc124:	2601      	movs	r6, #1
   dc126:	e001      	b.n	dc12c <_strtoul_r+0xb4>
   dc128:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc12c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc130:	e7d8      	b.n	dc0e4 <_strtoul_r+0x6c>
   dc132:	2e00      	cmp	r6, #0
   dc134:	da07      	bge.n	dc146 <_strtoul_r+0xce>
   dc136:	2322      	movs	r3, #34	; 0x22
   dc138:	f8c8 3000 	str.w	r3, [r8]
   dc13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc140:	b92a      	cbnz	r2, dc14e <_strtoul_r+0xd6>
   dc142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc146:	b107      	cbz	r7, dc14a <_strtoul_r+0xd2>
   dc148:	4240      	negs	r0, r0
   dc14a:	b172      	cbz	r2, dc16a <_strtoul_r+0xf2>
   dc14c:	b106      	cbz	r6, dc150 <_strtoul_r+0xd8>
   dc14e:	1e69      	subs	r1, r5, #1
   dc150:	6011      	str	r1, [r2, #0]
   dc152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc156:	2430      	movs	r4, #48	; 0x30
   dc158:	2b00      	cmp	r3, #0
   dc15a:	d1b9      	bne.n	dc0d0 <_strtoul_r+0x58>
   dc15c:	2308      	movs	r3, #8
   dc15e:	e7b7      	b.n	dc0d0 <_strtoul_r+0x58>
   dc160:	230a      	movs	r3, #10
   dc162:	e7b5      	b.n	dc0d0 <_strtoul_r+0x58>
   dc164:	2c30      	cmp	r4, #48	; 0x30
   dc166:	d0ab      	beq.n	dc0c0 <_strtoul_r+0x48>
   dc168:	e7b2      	b.n	dc0d0 <_strtoul_r+0x58>
   dc16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc16e:	bf00      	nop
   dc170:	2003d53c 	.word	0x2003d53c

000dc174 <strtoul>:
   dc174:	4613      	mov	r3, r2
   dc176:	460a      	mov	r2, r1
   dc178:	4601      	mov	r1, r0
   dc17a:	4802      	ldr	r0, [pc, #8]	; (dc184 <strtoul+0x10>)
   dc17c:	6800      	ldr	r0, [r0, #0]
   dc17e:	f7ff bf7b 	b.w	dc078 <_strtoul_r>
   dc182:	bf00      	nop
   dc184:	2003d5a0 	.word	0x2003d5a0

000dc188 <__tzcalc_limits>:
   dc188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc18c:	4604      	mov	r4, r0
   dc18e:	f000 fd8d 	bl	dccac <__gettzinfo>
   dc192:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc196:	429c      	cmp	r4, r3
   dc198:	f340 8096 	ble.w	dc2c8 <__tzcalc_limits+0x140>
   dc19c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc1a0:	18e3      	adds	r3, r4, r3
   dc1a2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc1a6:	109b      	asrs	r3, r3, #2
   dc1a8:	f240 156d 	movw	r5, #365	; 0x16d
   dc1ac:	fb05 3502 	mla	r5, r5, r2, r3
   dc1b0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc1b4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc1b8:	fb92 f3f3 	sdiv	r3, r2, r3
   dc1bc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc1c0:	442b      	add	r3, r5
   dc1c2:	18a5      	adds	r5, r4, r2
   dc1c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc1c8:	fb95 f5f2 	sdiv	r5, r5, r2
   dc1cc:	441d      	add	r5, r3
   dc1ce:	2364      	movs	r3, #100	; 0x64
   dc1d0:	fb94 f7f2 	sdiv	r7, r4, r2
   dc1d4:	fb94 f6f3 	sdiv	r6, r4, r3
   dc1d8:	fb02 4717 	mls	r7, r2, r7, r4
   dc1dc:	fb03 4616 	mls	r6, r3, r6, r4
   dc1e0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc1e4:	fab7 fe87 	clz	lr, r7
   dc1e8:	9301      	str	r3, [sp, #4]
   dc1ea:	f004 0303 	and.w	r3, r4, #3
   dc1ee:	6044      	str	r4, [r0, #4]
   dc1f0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc1f4:	4601      	mov	r1, r0
   dc1f6:	9300      	str	r3, [sp, #0]
   dc1f8:	f04f 0c07 	mov.w	ip, #7
   dc1fc:	7a0b      	ldrb	r3, [r1, #8]
   dc1fe:	2b4a      	cmp	r3, #74	; 0x4a
   dc200:	d10e      	bne.n	dc220 <__tzcalc_limits+0x98>
   dc202:	694b      	ldr	r3, [r1, #20]
   dc204:	9a00      	ldr	r2, [sp, #0]
   dc206:	18ec      	adds	r4, r5, r3
   dc208:	b902      	cbnz	r2, dc20c <__tzcalc_limits+0x84>
   dc20a:	b906      	cbnz	r6, dc20e <__tzcalc_limits+0x86>
   dc20c:	b927      	cbnz	r7, dc218 <__tzcalc_limits+0x90>
   dc20e:	2b3b      	cmp	r3, #59	; 0x3b
   dc210:	bfd4      	ite	le
   dc212:	2300      	movle	r3, #0
   dc214:	2301      	movgt	r3, #1
   dc216:	e000      	b.n	dc21a <__tzcalc_limits+0x92>
   dc218:	2300      	movs	r3, #0
   dc21a:	4423      	add	r3, r4
   dc21c:	3b01      	subs	r3, #1
   dc21e:	e03f      	b.n	dc2a0 <__tzcalc_limits+0x118>
   dc220:	2b44      	cmp	r3, #68	; 0x44
   dc222:	d102      	bne.n	dc22a <__tzcalc_limits+0xa2>
   dc224:	694b      	ldr	r3, [r1, #20]
   dc226:	442b      	add	r3, r5
   dc228:	e03a      	b.n	dc2a0 <__tzcalc_limits+0x118>
   dc22a:	9b00      	ldr	r3, [sp, #0]
   dc22c:	b92b      	cbnz	r3, dc23a <__tzcalc_limits+0xb2>
   dc22e:	2e00      	cmp	r6, #0
   dc230:	bf0c      	ite	eq
   dc232:	46f0      	moveq	r8, lr
   dc234:	f04f 0801 	movne.w	r8, #1
   dc238:	e000      	b.n	dc23c <__tzcalc_limits+0xb4>
   dc23a:	46f0      	mov	r8, lr
   dc23c:	4b24      	ldr	r3, [pc, #144]	; (dc2d0 <__tzcalc_limits+0x148>)
   dc23e:	68cc      	ldr	r4, [r1, #12]
   dc240:	2230      	movs	r2, #48	; 0x30
   dc242:	fb02 3808 	mla	r8, r2, r8, r3
   dc246:	f1a8 0a04 	sub.w	sl, r8, #4
   dc24a:	46a9      	mov	r9, r5
   dc24c:	2301      	movs	r3, #1
   dc24e:	42a3      	cmp	r3, r4
   dc250:	da04      	bge.n	dc25c <__tzcalc_limits+0xd4>
   dc252:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc256:	3301      	adds	r3, #1
   dc258:	44d9      	add	r9, fp
   dc25a:	e7f8      	b.n	dc24e <__tzcalc_limits+0xc6>
   dc25c:	f109 0304 	add.w	r3, r9, #4
   dc260:	fb93 fbfc 	sdiv	fp, r3, ip
   dc264:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc268:	2c01      	cmp	r4, #1
   dc26a:	ebca 0a03 	rsb	sl, sl, r3
   dc26e:	694b      	ldr	r3, [r1, #20]
   dc270:	bfb8      	it	lt
   dc272:	2401      	movlt	r4, #1
   dc274:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc278:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc27c:	690b      	ldr	r3, [r1, #16]
   dc27e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dc282:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dc286:	bf48      	it	mi
   dc288:	f10a 0a07 	addmi.w	sl, sl, #7
   dc28c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc290:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc294:	4453      	add	r3, sl
   dc296:	42a3      	cmp	r3, r4
   dc298:	db01      	blt.n	dc29e <__tzcalc_limits+0x116>
   dc29a:	3b07      	subs	r3, #7
   dc29c:	e7fb      	b.n	dc296 <__tzcalc_limits+0x10e>
   dc29e:	444b      	add	r3, r9
   dc2a0:	698c      	ldr	r4, [r1, #24]
   dc2a2:	4a0c      	ldr	r2, [pc, #48]	; (dc2d4 <__tzcalc_limits+0x14c>)
   dc2a4:	fb02 4303 	mla	r3, r2, r3, r4
   dc2a8:	6a0c      	ldr	r4, [r1, #32]
   dc2aa:	4423      	add	r3, r4
   dc2ac:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc2b0:	9b01      	ldr	r3, [sp, #4]
   dc2b2:	4299      	cmp	r1, r3
   dc2b4:	d1a2      	bne.n	dc1fc <__tzcalc_limits+0x74>
   dc2b6:	69c3      	ldr	r3, [r0, #28]
   dc2b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc2ba:	4293      	cmp	r3, r2
   dc2bc:	bfac      	ite	ge
   dc2be:	2300      	movge	r3, #0
   dc2c0:	2301      	movlt	r3, #1
   dc2c2:	6003      	str	r3, [r0, #0]
   dc2c4:	2001      	movs	r0, #1
   dc2c6:	e000      	b.n	dc2ca <__tzcalc_limits+0x142>
   dc2c8:	2000      	movs	r0, #0
   dc2ca:	b003      	add	sp, #12
   dc2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc2d0:	000de1e0 	.word	0x000de1e0
   dc2d4:	00015180 	.word	0x00015180

000dc2d8 <__tz_lock>:
   dc2d8:	4770      	bx	lr

000dc2da <__tz_unlock>:
   dc2da:	4770      	bx	lr

000dc2dc <_tzset_unlocked>:
   dc2dc:	4b01      	ldr	r3, [pc, #4]	; (dc2e4 <_tzset_unlocked+0x8>)
   dc2de:	6818      	ldr	r0, [r3, #0]
   dc2e0:	f000 b802 	b.w	dc2e8 <_tzset_unlocked_r>
   dc2e4:	2003d5a0 	.word	0x2003d5a0

000dc2e8 <_tzset_unlocked_r>:
   dc2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc2ec:	b08d      	sub	sp, #52	; 0x34
   dc2ee:	4607      	mov	r7, r0
   dc2f0:	f000 fcdc 	bl	dccac <__gettzinfo>
   dc2f4:	49b0      	ldr	r1, [pc, #704]	; (dc5b8 <_tzset_unlocked_r+0x2d0>)
   dc2f6:	4eb1      	ldr	r6, [pc, #708]	; (dc5bc <_tzset_unlocked_r+0x2d4>)
   dc2f8:	4604      	mov	r4, r0
   dc2fa:	4638      	mov	r0, r7
   dc2fc:	f000 fcce 	bl	dcc9c <_getenv_r>
   dc300:	4605      	mov	r5, r0
   dc302:	b960      	cbnz	r0, dc31e <_tzset_unlocked_r+0x36>
   dc304:	4bae      	ldr	r3, [pc, #696]	; (dc5c0 <_tzset_unlocked_r+0x2d8>)
   dc306:	4aaf      	ldr	r2, [pc, #700]	; (dc5c4 <_tzset_unlocked_r+0x2dc>)
   dc308:	6018      	str	r0, [r3, #0]
   dc30a:	4baf      	ldr	r3, [pc, #700]	; (dc5c8 <_tzset_unlocked_r+0x2e0>)
   dc30c:	6018      	str	r0, [r3, #0]
   dc30e:	4baf      	ldr	r3, [pc, #700]	; (dc5cc <_tzset_unlocked_r+0x2e4>)
   dc310:	6830      	ldr	r0, [r6, #0]
   dc312:	601a      	str	r2, [r3, #0]
   dc314:	605a      	str	r2, [r3, #4]
   dc316:	f7fb f8ef 	bl	d74f8 <free>
   dc31a:	6035      	str	r5, [r6, #0]
   dc31c:	e148      	b.n	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc31e:	6831      	ldr	r1, [r6, #0]
   dc320:	b979      	cbnz	r1, dc342 <_tzset_unlocked_r+0x5a>
   dc322:	6830      	ldr	r0, [r6, #0]
   dc324:	f7fb f8e8 	bl	d74f8 <free>
   dc328:	4628      	mov	r0, r5
   dc32a:	f7fe ffb2 	bl	db292 <strlen>
   dc32e:	1c41      	adds	r1, r0, #1
   dc330:	4638      	mov	r0, r7
   dc332:	f7fb f921 	bl	d7578 <_malloc_r>
   dc336:	6030      	str	r0, [r6, #0]
   dc338:	b148      	cbz	r0, dc34e <_tzset_unlocked_r+0x66>
   dc33a:	4629      	mov	r1, r5
   dc33c:	f7fe ff85 	bl	db24a <strcpy>
   dc340:	e005      	b.n	dc34e <_tzset_unlocked_r+0x66>
   dc342:	f7fe ff78 	bl	db236 <strcmp>
   dc346:	2800      	cmp	r0, #0
   dc348:	f000 8132 	beq.w	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc34c:	e7e9      	b.n	dc322 <_tzset_unlocked_r+0x3a>
   dc34e:	782b      	ldrb	r3, [r5, #0]
   dc350:	4a9f      	ldr	r2, [pc, #636]	; (dc5d0 <_tzset_unlocked_r+0x2e8>)
   dc352:	49a0      	ldr	r1, [pc, #640]	; (dc5d4 <_tzset_unlocked_r+0x2ec>)
   dc354:	2b3a      	cmp	r3, #58	; 0x3a
   dc356:	bf08      	it	eq
   dc358:	3501      	addeq	r5, #1
   dc35a:	ae0a      	add	r6, sp, #40	; 0x28
   dc35c:	4633      	mov	r3, r6
   dc35e:	4628      	mov	r0, r5
   dc360:	f7fb f8ea 	bl	d7538 <siscanf>
   dc364:	2800      	cmp	r0, #0
   dc366:	f340 8123 	ble.w	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc36c:	18ef      	adds	r7, r5, r3
   dc36e:	5ceb      	ldrb	r3, [r5, r3]
   dc370:	2b2d      	cmp	r3, #45	; 0x2d
   dc372:	d103      	bne.n	dc37c <_tzset_unlocked_r+0x94>
   dc374:	3701      	adds	r7, #1
   dc376:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dc37a:	e003      	b.n	dc384 <_tzset_unlocked_r+0x9c>
   dc37c:	2b2b      	cmp	r3, #43	; 0x2b
   dc37e:	bf08      	it	eq
   dc380:	3701      	addeq	r7, #1
   dc382:	2501      	movs	r5, #1
   dc384:	f10d 0a20 	add.w	sl, sp, #32
   dc388:	f10d 0b1e 	add.w	fp, sp, #30
   dc38c:	f04f 0800 	mov.w	r8, #0
   dc390:	9603      	str	r6, [sp, #12]
   dc392:	f8cd a008 	str.w	sl, [sp, #8]
   dc396:	9601      	str	r6, [sp, #4]
   dc398:	f8cd b000 	str.w	fp, [sp]
   dc39c:	4633      	mov	r3, r6
   dc39e:	aa07      	add	r2, sp, #28
   dc3a0:	498d      	ldr	r1, [pc, #564]	; (dc5d8 <_tzset_unlocked_r+0x2f0>)
   dc3a2:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc3a6:	4638      	mov	r0, r7
   dc3a8:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc3ac:	f7fb f8c4 	bl	d7538 <siscanf>
   dc3b0:	4540      	cmp	r0, r8
   dc3b2:	f340 80fd 	ble.w	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc3b6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc3ba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc3be:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc5e4 <_tzset_unlocked_r+0x2fc>
   dc3c2:	213c      	movs	r1, #60	; 0x3c
   dc3c4:	fb01 3302 	mla	r3, r1, r2, r3
   dc3c8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc3cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc3d0:	fb01 3302 	mla	r3, r1, r2, r3
   dc3d4:	435d      	muls	r5, r3
   dc3d6:	6225      	str	r5, [r4, #32]
   dc3d8:	4d7c      	ldr	r5, [pc, #496]	; (dc5cc <_tzset_unlocked_r+0x2e4>)
   dc3da:	4b7d      	ldr	r3, [pc, #500]	; (dc5d0 <_tzset_unlocked_r+0x2e8>)
   dc3dc:	602b      	str	r3, [r5, #0]
   dc3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc3e0:	497c      	ldr	r1, [pc, #496]	; (dc5d4 <_tzset_unlocked_r+0x2ec>)
   dc3e2:	441f      	add	r7, r3
   dc3e4:	464a      	mov	r2, r9
   dc3e6:	4633      	mov	r3, r6
   dc3e8:	4638      	mov	r0, r7
   dc3ea:	f7fb f8a5 	bl	d7538 <siscanf>
   dc3ee:	4540      	cmp	r0, r8
   dc3f0:	dc08      	bgt.n	dc404 <_tzset_unlocked_r+0x11c>
   dc3f2:	682b      	ldr	r3, [r5, #0]
   dc3f4:	606b      	str	r3, [r5, #4]
   dc3f6:	4b72      	ldr	r3, [pc, #456]	; (dc5c0 <_tzset_unlocked_r+0x2d8>)
   dc3f8:	6a22      	ldr	r2, [r4, #32]
   dc3fa:	601a      	str	r2, [r3, #0]
   dc3fc:	4b72      	ldr	r3, [pc, #456]	; (dc5c8 <_tzset_unlocked_r+0x2e0>)
   dc3fe:	f8c3 8000 	str.w	r8, [r3]
   dc402:	e0d5      	b.n	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc406:	f8c5 9004 	str.w	r9, [r5, #4]
   dc40a:	18fd      	adds	r5, r7, r3
   dc40c:	5cfb      	ldrb	r3, [r7, r3]
   dc40e:	2b2d      	cmp	r3, #45	; 0x2d
   dc410:	d103      	bne.n	dc41a <_tzset_unlocked_r+0x132>
   dc412:	3501      	adds	r5, #1
   dc414:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc418:	e003      	b.n	dc422 <_tzset_unlocked_r+0x13a>
   dc41a:	2b2b      	cmp	r3, #43	; 0x2b
   dc41c:	bf08      	it	eq
   dc41e:	3501      	addeq	r5, #1
   dc420:	2701      	movs	r7, #1
   dc422:	2300      	movs	r3, #0
   dc424:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc428:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc42c:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc430:	930a      	str	r3, [sp, #40]	; 0x28
   dc432:	9603      	str	r6, [sp, #12]
   dc434:	f8cd a008 	str.w	sl, [sp, #8]
   dc438:	9601      	str	r6, [sp, #4]
   dc43a:	f8cd b000 	str.w	fp, [sp]
   dc43e:	4633      	mov	r3, r6
   dc440:	aa07      	add	r2, sp, #28
   dc442:	4965      	ldr	r1, [pc, #404]	; (dc5d8 <_tzset_unlocked_r+0x2f0>)
   dc444:	4628      	mov	r0, r5
   dc446:	f7fb f877 	bl	d7538 <siscanf>
   dc44a:	2800      	cmp	r0, #0
   dc44c:	dc04      	bgt.n	dc458 <_tzset_unlocked_r+0x170>
   dc44e:	6a23      	ldr	r3, [r4, #32]
   dc450:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc454:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc456:	e00e      	b.n	dc476 <_tzset_unlocked_r+0x18e>
   dc458:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc45c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc460:	213c      	movs	r1, #60	; 0x3c
   dc462:	fb01 3302 	mla	r3, r1, r2, r3
   dc466:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc46a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc46e:	fb01 3302 	mla	r3, r1, r2, r3
   dc472:	435f      	muls	r7, r3
   dc474:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc478:	4627      	mov	r7, r4
   dc47a:	441d      	add	r5, r3
   dc47c:	f04f 0900 	mov.w	r9, #0
   dc480:	782b      	ldrb	r3, [r5, #0]
   dc482:	2b2c      	cmp	r3, #44	; 0x2c
   dc484:	bf08      	it	eq
   dc486:	3501      	addeq	r5, #1
   dc488:	f895 8000 	ldrb.w	r8, [r5]
   dc48c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc490:	d126      	bne.n	dc4e0 <_tzset_unlocked_r+0x1f8>
   dc492:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc496:	9302      	str	r3, [sp, #8]
   dc498:	ab09      	add	r3, sp, #36	; 0x24
   dc49a:	9300      	str	r3, [sp, #0]
   dc49c:	9603      	str	r6, [sp, #12]
   dc49e:	9601      	str	r6, [sp, #4]
   dc4a0:	4633      	mov	r3, r6
   dc4a2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc4a6:	494d      	ldr	r1, [pc, #308]	; (dc5dc <_tzset_unlocked_r+0x2f4>)
   dc4a8:	4628      	mov	r0, r5
   dc4aa:	f7fb f845 	bl	d7538 <siscanf>
   dc4ae:	2803      	cmp	r0, #3
   dc4b0:	d17e      	bne.n	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc4b2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc4b6:	1e4b      	subs	r3, r1, #1
   dc4b8:	2b0b      	cmp	r3, #11
   dc4ba:	d879      	bhi.n	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc4bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc4c0:	1e53      	subs	r3, r2, #1
   dc4c2:	2b04      	cmp	r3, #4
   dc4c4:	d874      	bhi.n	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc4c6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc4ca:	2b06      	cmp	r3, #6
   dc4cc:	d870      	bhi.n	dc5b0 <_tzset_unlocked_r+0x2c8>
   dc4ce:	f887 8008 	strb.w	r8, [r7, #8]
   dc4d2:	60f9      	str	r1, [r7, #12]
   dc4d4:	613a      	str	r2, [r7, #16]
   dc4d6:	617b      	str	r3, [r7, #20]
   dc4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc4da:	eb05 0803 	add.w	r8, r5, r3
   dc4de:	e02a      	b.n	dc536 <_tzset_unlocked_r+0x24e>
   dc4e0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc4e4:	bf06      	itte	eq
   dc4e6:	3501      	addeq	r5, #1
   dc4e8:	4643      	moveq	r3, r8
   dc4ea:	2344      	movne	r3, #68	; 0x44
   dc4ec:	220a      	movs	r2, #10
   dc4ee:	a90b      	add	r1, sp, #44	; 0x2c
   dc4f0:	4628      	mov	r0, r5
   dc4f2:	9305      	str	r3, [sp, #20]
   dc4f4:	f7ff fe3e 	bl	dc174 <strtoul>
   dc4f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc4fc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc500:	4545      	cmp	r5, r8
   dc502:	9b05      	ldr	r3, [sp, #20]
   dc504:	d114      	bne.n	dc530 <_tzset_unlocked_r+0x248>
   dc506:	234d      	movs	r3, #77	; 0x4d
   dc508:	f1b9 0f00 	cmp.w	r9, #0
   dc50c:	d107      	bne.n	dc51e <_tzset_unlocked_r+0x236>
   dc50e:	7223      	strb	r3, [r4, #8]
   dc510:	2303      	movs	r3, #3
   dc512:	60e3      	str	r3, [r4, #12]
   dc514:	2302      	movs	r3, #2
   dc516:	6123      	str	r3, [r4, #16]
   dc518:	f8c4 9014 	str.w	r9, [r4, #20]
   dc51c:	e00b      	b.n	dc536 <_tzset_unlocked_r+0x24e>
   dc51e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc522:	230b      	movs	r3, #11
   dc524:	62a3      	str	r3, [r4, #40]	; 0x28
   dc526:	2301      	movs	r3, #1
   dc528:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc52a:	2300      	movs	r3, #0
   dc52c:	6323      	str	r3, [r4, #48]	; 0x30
   dc52e:	e002      	b.n	dc536 <_tzset_unlocked_r+0x24e>
   dc530:	b280      	uxth	r0, r0
   dc532:	723b      	strb	r3, [r7, #8]
   dc534:	6178      	str	r0, [r7, #20]
   dc536:	2302      	movs	r3, #2
   dc538:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc53c:	2300      	movs	r3, #0
   dc53e:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc542:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc546:	930a      	str	r3, [sp, #40]	; 0x28
   dc548:	f898 3000 	ldrb.w	r3, [r8]
   dc54c:	2b2f      	cmp	r3, #47	; 0x2f
   dc54e:	d10b      	bne.n	dc568 <_tzset_unlocked_r+0x280>
   dc550:	9603      	str	r6, [sp, #12]
   dc552:	f8cd a008 	str.w	sl, [sp, #8]
   dc556:	9601      	str	r6, [sp, #4]
   dc558:	f8cd b000 	str.w	fp, [sp]
   dc55c:	4633      	mov	r3, r6
   dc55e:	aa07      	add	r2, sp, #28
   dc560:	491f      	ldr	r1, [pc, #124]	; (dc5e0 <_tzset_unlocked_r+0x2f8>)
   dc562:	4640      	mov	r0, r8
   dc564:	f7fa ffe8 	bl	d7538 <siscanf>
   dc568:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc56c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc570:	213c      	movs	r1, #60	; 0x3c
   dc572:	fb01 3302 	mla	r3, r1, r2, r3
   dc576:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc57a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc57e:	fb01 3302 	mla	r3, r1, r2, r3
   dc582:	61bb      	str	r3, [r7, #24]
   dc584:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc586:	f109 0901 	add.w	r9, r9, #1
   dc58a:	f1b9 0f02 	cmp.w	r9, #2
   dc58e:	4445      	add	r5, r8
   dc590:	f107 071c 	add.w	r7, r7, #28
   dc594:	f47f af74 	bne.w	dc480 <_tzset_unlocked_r+0x198>
   dc598:	6860      	ldr	r0, [r4, #4]
   dc59a:	f7ff fdf5 	bl	dc188 <__tzcalc_limits>
   dc59e:	4b08      	ldr	r3, [pc, #32]	; (dc5c0 <_tzset_unlocked_r+0x2d8>)
   dc5a0:	6a22      	ldr	r2, [r4, #32]
   dc5a2:	601a      	str	r2, [r3, #0]
   dc5a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc5a6:	1a9b      	subs	r3, r3, r2
   dc5a8:	4a07      	ldr	r2, [pc, #28]	; (dc5c8 <_tzset_unlocked_r+0x2e0>)
   dc5aa:	bf18      	it	ne
   dc5ac:	2301      	movne	r3, #1
   dc5ae:	6013      	str	r3, [r2, #0]
   dc5b0:	b00d      	add	sp, #52	; 0x34
   dc5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5b6:	bf00      	nop
   dc5b8:	000de2a0 	.word	0x000de2a0
   dc5bc:	2003e7e0 	.word	0x2003e7e0
   dc5c0:	2003e7e8 	.word	0x2003e7e8
   dc5c4:	000de2a3 	.word	0x000de2a3
   dc5c8:	2003e7e4 	.word	0x2003e7e4
   dc5cc:	2003d5dc 	.word	0x2003d5dc
   dc5d0:	2003e7d3 	.word	0x2003e7d3
   dc5d4:	000de2a7 	.word	0x000de2a7
   dc5d8:	000de2ca 	.word	0x000de2ca
   dc5dc:	000de2b6 	.word	0x000de2b6
   dc5e0:	000de2c9 	.word	0x000de2c9
   dc5e4:	2003e7c8 	.word	0x2003e7c8

000dc5e8 <rshift>:
   dc5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc5ea:	6906      	ldr	r6, [r0, #16]
   dc5ec:	114b      	asrs	r3, r1, #5
   dc5ee:	42b3      	cmp	r3, r6
   dc5f0:	f100 0514 	add.w	r5, r0, #20
   dc5f4:	da27      	bge.n	dc646 <rshift+0x5e>
   dc5f6:	f011 011f 	ands.w	r1, r1, #31
   dc5fa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dc5fe:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dc602:	d101      	bne.n	dc608 <rshift+0x20>
   dc604:	4629      	mov	r1, r5
   dc606:	e016      	b.n	dc636 <rshift+0x4e>
   dc608:	1d14      	adds	r4, r2, #4
   dc60a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dc60e:	f1c1 0e20 	rsb	lr, r1, #32
   dc612:	40ca      	lsrs	r2, r1
   dc614:	462b      	mov	r3, r5
   dc616:	42b4      	cmp	r4, r6
   dc618:	d209      	bcs.n	dc62e <rshift+0x46>
   dc61a:	6827      	ldr	r7, [r4, #0]
   dc61c:	fa07 f70e 	lsl.w	r7, r7, lr
   dc620:	433a      	orrs	r2, r7
   dc622:	f843 2b04 	str.w	r2, [r3], #4
   dc626:	f854 2b04 	ldr.w	r2, [r4], #4
   dc62a:	40ca      	lsrs	r2, r1
   dc62c:	e7f3      	b.n	dc616 <rshift+0x2e>
   dc62e:	601a      	str	r2, [r3, #0]
   dc630:	b152      	cbz	r2, dc648 <rshift+0x60>
   dc632:	3304      	adds	r3, #4
   dc634:	e008      	b.n	dc648 <rshift+0x60>
   dc636:	42b2      	cmp	r2, r6
   dc638:	460b      	mov	r3, r1
   dc63a:	d205      	bcs.n	dc648 <rshift+0x60>
   dc63c:	f852 3b04 	ldr.w	r3, [r2], #4
   dc640:	f841 3b04 	str.w	r3, [r1], #4
   dc644:	e7f7      	b.n	dc636 <rshift+0x4e>
   dc646:	462b      	mov	r3, r5
   dc648:	1b5b      	subs	r3, r3, r5
   dc64a:	109b      	asrs	r3, r3, #2
   dc64c:	6103      	str	r3, [r0, #16]
   dc64e:	b903      	cbnz	r3, dc652 <rshift+0x6a>
   dc650:	6143      	str	r3, [r0, #20]
   dc652:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc654 <__hexdig_fun>:
   dc654:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc658:	2b09      	cmp	r3, #9
   dc65a:	d801      	bhi.n	dc660 <__hexdig_fun+0xc>
   dc65c:	3820      	subs	r0, #32
   dc65e:	e00a      	b.n	dc676 <__hexdig_fun+0x22>
   dc660:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc664:	2b05      	cmp	r3, #5
   dc666:	d801      	bhi.n	dc66c <__hexdig_fun+0x18>
   dc668:	3847      	subs	r0, #71	; 0x47
   dc66a:	e004      	b.n	dc676 <__hexdig_fun+0x22>
   dc66c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc670:	2b05      	cmp	r3, #5
   dc672:	d802      	bhi.n	dc67a <__hexdig_fun+0x26>
   dc674:	3827      	subs	r0, #39	; 0x27
   dc676:	b2c0      	uxtb	r0, r0
   dc678:	4770      	bx	lr
   dc67a:	2000      	movs	r0, #0
   dc67c:	4770      	bx	lr

000dc67e <__gethex>:
   dc67e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc682:	b08b      	sub	sp, #44	; 0x2c
   dc684:	468a      	mov	sl, r1
   dc686:	4690      	mov	r8, r2
   dc688:	9306      	str	r3, [sp, #24]
   dc68a:	9002      	str	r0, [sp, #8]
   dc68c:	f7fe fd5a 	bl	db144 <_localeconv_r>
   dc690:	6803      	ldr	r3, [r0, #0]
   dc692:	9303      	str	r3, [sp, #12]
   dc694:	4618      	mov	r0, r3
   dc696:	f7fe fdfc 	bl	db292 <strlen>
   dc69a:	9b03      	ldr	r3, [sp, #12]
   dc69c:	9001      	str	r0, [sp, #4]
   dc69e:	4403      	add	r3, r0
   dc6a0:	f04f 0b00 	mov.w	fp, #0
   dc6a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc6a8:	9307      	str	r3, [sp, #28]
   dc6aa:	f8da 3000 	ldr.w	r3, [sl]
   dc6ae:	3302      	adds	r3, #2
   dc6b0:	461f      	mov	r7, r3
   dc6b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc6b6:	2830      	cmp	r0, #48	; 0x30
   dc6b8:	d102      	bne.n	dc6c0 <__gethex+0x42>
   dc6ba:	f10b 0b01 	add.w	fp, fp, #1
   dc6be:	e7f7      	b.n	dc6b0 <__gethex+0x32>
   dc6c0:	f7ff ffc8 	bl	dc654 <__hexdig_fun>
   dc6c4:	4604      	mov	r4, r0
   dc6c6:	b9e0      	cbnz	r0, dc702 <__gethex+0x84>
   dc6c8:	9a01      	ldr	r2, [sp, #4]
   dc6ca:	9903      	ldr	r1, [sp, #12]
   dc6cc:	4638      	mov	r0, r7
   dc6ce:	f7fe fde8 	bl	db2a2 <strncmp>
   dc6d2:	2800      	cmp	r0, #0
   dc6d4:	d134      	bne.n	dc740 <__gethex+0xc2>
   dc6d6:	9b01      	ldr	r3, [sp, #4]
   dc6d8:	5cf8      	ldrb	r0, [r7, r3]
   dc6da:	18fe      	adds	r6, r7, r3
   dc6dc:	f7ff ffba 	bl	dc654 <__hexdig_fun>
   dc6e0:	b380      	cbz	r0, dc744 <__gethex+0xc6>
   dc6e2:	4633      	mov	r3, r6
   dc6e4:	7818      	ldrb	r0, [r3, #0]
   dc6e6:	2830      	cmp	r0, #48	; 0x30
   dc6e8:	461f      	mov	r7, r3
   dc6ea:	f103 0301 	add.w	r3, r3, #1
   dc6ee:	d0f9      	beq.n	dc6e4 <__gethex+0x66>
   dc6f0:	f7ff ffb0 	bl	dc654 <__hexdig_fun>
   dc6f4:	fab0 f580 	clz	r5, r0
   dc6f8:	096d      	lsrs	r5, r5, #5
   dc6fa:	4634      	mov	r4, r6
   dc6fc:	f04f 0b01 	mov.w	fp, #1
   dc700:	e001      	b.n	dc706 <__gethex+0x88>
   dc702:	2500      	movs	r5, #0
   dc704:	462c      	mov	r4, r5
   dc706:	463a      	mov	r2, r7
   dc708:	4616      	mov	r6, r2
   dc70a:	3201      	adds	r2, #1
   dc70c:	7830      	ldrb	r0, [r6, #0]
   dc70e:	f7ff ffa1 	bl	dc654 <__hexdig_fun>
   dc712:	2800      	cmp	r0, #0
   dc714:	d1f8      	bne.n	dc708 <__gethex+0x8a>
   dc716:	9a01      	ldr	r2, [sp, #4]
   dc718:	9903      	ldr	r1, [sp, #12]
   dc71a:	4630      	mov	r0, r6
   dc71c:	f7fe fdc1 	bl	db2a2 <strncmp>
   dc720:	b950      	cbnz	r0, dc738 <__gethex+0xba>
   dc722:	b954      	cbnz	r4, dc73a <__gethex+0xbc>
   dc724:	9b01      	ldr	r3, [sp, #4]
   dc726:	18f4      	adds	r4, r6, r3
   dc728:	4622      	mov	r2, r4
   dc72a:	4616      	mov	r6, r2
   dc72c:	3201      	adds	r2, #1
   dc72e:	7830      	ldrb	r0, [r6, #0]
   dc730:	f7ff ff90 	bl	dc654 <__hexdig_fun>
   dc734:	2800      	cmp	r0, #0
   dc736:	d1f8      	bne.n	dc72a <__gethex+0xac>
   dc738:	b134      	cbz	r4, dc748 <__gethex+0xca>
   dc73a:	1ba4      	subs	r4, r4, r6
   dc73c:	00a4      	lsls	r4, r4, #2
   dc73e:	e003      	b.n	dc748 <__gethex+0xca>
   dc740:	463e      	mov	r6, r7
   dc742:	e000      	b.n	dc746 <__gethex+0xc8>
   dc744:	4604      	mov	r4, r0
   dc746:	2501      	movs	r5, #1
   dc748:	7833      	ldrb	r3, [r6, #0]
   dc74a:	2b50      	cmp	r3, #80	; 0x50
   dc74c:	d001      	beq.n	dc752 <__gethex+0xd4>
   dc74e:	2b70      	cmp	r3, #112	; 0x70
   dc750:	d12a      	bne.n	dc7a8 <__gethex+0x12a>
   dc752:	7873      	ldrb	r3, [r6, #1]
   dc754:	2b2b      	cmp	r3, #43	; 0x2b
   dc756:	d008      	beq.n	dc76a <__gethex+0xec>
   dc758:	2b2d      	cmp	r3, #45	; 0x2d
   dc75a:	d003      	beq.n	dc764 <__gethex+0xe6>
   dc75c:	1c71      	adds	r1, r6, #1
   dc75e:	f04f 0900 	mov.w	r9, #0
   dc762:	e005      	b.n	dc770 <__gethex+0xf2>
   dc764:	f04f 0901 	mov.w	r9, #1
   dc768:	e001      	b.n	dc76e <__gethex+0xf0>
   dc76a:	f04f 0900 	mov.w	r9, #0
   dc76e:	1cb1      	adds	r1, r6, #2
   dc770:	7808      	ldrb	r0, [r1, #0]
   dc772:	f7ff ff6f 	bl	dc654 <__hexdig_fun>
   dc776:	1e43      	subs	r3, r0, #1
   dc778:	b2db      	uxtb	r3, r3
   dc77a:	2b18      	cmp	r3, #24
   dc77c:	d814      	bhi.n	dc7a8 <__gethex+0x12a>
   dc77e:	f1a0 0210 	sub.w	r2, r0, #16
   dc782:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc786:	f7ff ff65 	bl	dc654 <__hexdig_fun>
   dc78a:	1e43      	subs	r3, r0, #1
   dc78c:	b2db      	uxtb	r3, r3
   dc78e:	2b18      	cmp	r3, #24
   dc790:	d804      	bhi.n	dc79c <__gethex+0x11e>
   dc792:	230a      	movs	r3, #10
   dc794:	fb03 0202 	mla	r2, r3, r2, r0
   dc798:	3a10      	subs	r2, #16
   dc79a:	e7f2      	b.n	dc782 <__gethex+0x104>
   dc79c:	f1b9 0f00 	cmp.w	r9, #0
   dc7a0:	d000      	beq.n	dc7a4 <__gethex+0x126>
   dc7a2:	4252      	negs	r2, r2
   dc7a4:	4414      	add	r4, r2
   dc7a6:	e000      	b.n	dc7aa <__gethex+0x12c>
   dc7a8:	4631      	mov	r1, r6
   dc7aa:	f8ca 1000 	str.w	r1, [sl]
   dc7ae:	b12d      	cbz	r5, dc7bc <__gethex+0x13e>
   dc7b0:	f1bb 0f00 	cmp.w	fp, #0
   dc7b4:	bf14      	ite	ne
   dc7b6:	2000      	movne	r0, #0
   dc7b8:	2006      	moveq	r0, #6
   dc7ba:	e17c      	b.n	dcab6 <__gethex+0x438>
   dc7bc:	1bf3      	subs	r3, r6, r7
   dc7be:	3b01      	subs	r3, #1
   dc7c0:	4629      	mov	r1, r5
   dc7c2:	2b07      	cmp	r3, #7
   dc7c4:	dd02      	ble.n	dc7cc <__gethex+0x14e>
   dc7c6:	3101      	adds	r1, #1
   dc7c8:	105b      	asrs	r3, r3, #1
   dc7ca:	e7fa      	b.n	dc7c2 <__gethex+0x144>
   dc7cc:	9802      	ldr	r0, [sp, #8]
   dc7ce:	f000 fb09 	bl	dcde4 <_Balloc>
   dc7d2:	9b01      	ldr	r3, [sp, #4]
   dc7d4:	f100 0a14 	add.w	sl, r0, #20
   dc7d8:	f04f 0900 	mov.w	r9, #0
   dc7dc:	f1c3 0301 	rsb	r3, r3, #1
   dc7e0:	4605      	mov	r5, r0
   dc7e2:	f8cd a010 	str.w	sl, [sp, #16]
   dc7e6:	46cb      	mov	fp, r9
   dc7e8:	9308      	str	r3, [sp, #32]
   dc7ea:	42b7      	cmp	r7, r6
   dc7ec:	d22f      	bcs.n	dc84e <__gethex+0x1d0>
   dc7ee:	1e73      	subs	r3, r6, #1
   dc7f0:	9305      	str	r3, [sp, #20]
   dc7f2:	9a07      	ldr	r2, [sp, #28]
   dc7f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc7f8:	4293      	cmp	r3, r2
   dc7fa:	d00b      	beq.n	dc814 <__gethex+0x196>
   dc7fc:	f1bb 0f20 	cmp.w	fp, #32
   dc800:	d116      	bne.n	dc830 <__gethex+0x1b2>
   dc802:	9b04      	ldr	r3, [sp, #16]
   dc804:	f8c3 9000 	str.w	r9, [r3]
   dc808:	3304      	adds	r3, #4
   dc80a:	f04f 0900 	mov.w	r9, #0
   dc80e:	9304      	str	r3, [sp, #16]
   dc810:	46cb      	mov	fp, r9
   dc812:	e00d      	b.n	dc830 <__gethex+0x1b2>
   dc814:	9b05      	ldr	r3, [sp, #20]
   dc816:	9a08      	ldr	r2, [sp, #32]
   dc818:	4413      	add	r3, r2
   dc81a:	429f      	cmp	r7, r3
   dc81c:	d8ee      	bhi.n	dc7fc <__gethex+0x17e>
   dc81e:	4618      	mov	r0, r3
   dc820:	9a01      	ldr	r2, [sp, #4]
   dc822:	9903      	ldr	r1, [sp, #12]
   dc824:	9309      	str	r3, [sp, #36]	; 0x24
   dc826:	f7fe fd3c 	bl	db2a2 <strncmp>
   dc82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc82c:	b168      	cbz	r0, dc84a <__gethex+0x1cc>
   dc82e:	e7e5      	b.n	dc7fc <__gethex+0x17e>
   dc830:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc834:	f7ff ff0e 	bl	dc654 <__hexdig_fun>
   dc838:	f000 000f 	and.w	r0, r0, #15
   dc83c:	fa00 f00b 	lsl.w	r0, r0, fp
   dc840:	9b05      	ldr	r3, [sp, #20]
   dc842:	ea49 0900 	orr.w	r9, r9, r0
   dc846:	f10b 0b04 	add.w	fp, fp, #4
   dc84a:	461e      	mov	r6, r3
   dc84c:	e7cd      	b.n	dc7ea <__gethex+0x16c>
   dc84e:	9804      	ldr	r0, [sp, #16]
   dc850:	f840 9b04 	str.w	r9, [r0], #4
   dc854:	ebca 0000 	rsb	r0, sl, r0
   dc858:	1080      	asrs	r0, r0, #2
   dc85a:	6128      	str	r0, [r5, #16]
   dc85c:	0147      	lsls	r7, r0, #5
   dc85e:	4648      	mov	r0, r9
   dc860:	f000 fb85 	bl	dcf6e <__hi0bits>
   dc864:	f8d8 6000 	ldr.w	r6, [r8]
   dc868:	1a38      	subs	r0, r7, r0
   dc86a:	42b0      	cmp	r0, r6
   dc86c:	dd26      	ble.n	dc8bc <__gethex+0x23e>
   dc86e:	1b87      	subs	r7, r0, r6
   dc870:	4639      	mov	r1, r7
   dc872:	4628      	mov	r0, r5
   dc874:	f000 fe83 	bl	dd57e <__any_on>
   dc878:	b1c8      	cbz	r0, dc8ae <__gethex+0x230>
   dc87a:	1e7b      	subs	r3, r7, #1
   dc87c:	1159      	asrs	r1, r3, #5
   dc87e:	f003 021f 	and.w	r2, r3, #31
   dc882:	f04f 0901 	mov.w	r9, #1
   dc886:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc88a:	fa09 f202 	lsl.w	r2, r9, r2
   dc88e:	420a      	tst	r2, r1
   dc890:	d00e      	beq.n	dc8b0 <__gethex+0x232>
   dc892:	454b      	cmp	r3, r9
   dc894:	dc02      	bgt.n	dc89c <__gethex+0x21e>
   dc896:	f04f 0902 	mov.w	r9, #2
   dc89a:	e009      	b.n	dc8b0 <__gethex+0x232>
   dc89c:	1eb9      	subs	r1, r7, #2
   dc89e:	4628      	mov	r0, r5
   dc8a0:	f000 fe6d 	bl	dd57e <__any_on>
   dc8a4:	2800      	cmp	r0, #0
   dc8a6:	d0f6      	beq.n	dc896 <__gethex+0x218>
   dc8a8:	f04f 0903 	mov.w	r9, #3
   dc8ac:	e000      	b.n	dc8b0 <__gethex+0x232>
   dc8ae:	4681      	mov	r9, r0
   dc8b0:	4639      	mov	r1, r7
   dc8b2:	4628      	mov	r0, r5
   dc8b4:	f7ff fe98 	bl	dc5e8 <rshift>
   dc8b8:	443c      	add	r4, r7
   dc8ba:	e00c      	b.n	dc8d6 <__gethex+0x258>
   dc8bc:	da09      	bge.n	dc8d2 <__gethex+0x254>
   dc8be:	1a37      	subs	r7, r6, r0
   dc8c0:	4629      	mov	r1, r5
   dc8c2:	463a      	mov	r2, r7
   dc8c4:	9802      	ldr	r0, [sp, #8]
   dc8c6:	f000 fc87 	bl	dd1d8 <__lshift>
   dc8ca:	1be4      	subs	r4, r4, r7
   dc8cc:	4605      	mov	r5, r0
   dc8ce:	f100 0a14 	add.w	sl, r0, #20
   dc8d2:	f04f 0900 	mov.w	r9, #0
   dc8d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc8da:	429c      	cmp	r4, r3
   dc8dc:	dd08      	ble.n	dc8f0 <__gethex+0x272>
   dc8de:	9802      	ldr	r0, [sp, #8]
   dc8e0:	4629      	mov	r1, r5
   dc8e2:	f000 fab4 	bl	dce4e <_Bfree>
   dc8e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc8e8:	2300      	movs	r3, #0
   dc8ea:	6013      	str	r3, [r2, #0]
   dc8ec:	20a3      	movs	r0, #163	; 0xa3
   dc8ee:	e0e2      	b.n	dcab6 <__gethex+0x438>
   dc8f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc8f4:	4284      	cmp	r4, r0
   dc8f6:	da53      	bge.n	dc9a0 <__gethex+0x322>
   dc8f8:	1b04      	subs	r4, r0, r4
   dc8fa:	42a6      	cmp	r6, r4
   dc8fc:	dc2e      	bgt.n	dc95c <__gethex+0x2de>
   dc8fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc902:	2b02      	cmp	r3, #2
   dc904:	d01a      	beq.n	dc93c <__gethex+0x2be>
   dc906:	2b03      	cmp	r3, #3
   dc908:	d01c      	beq.n	dc944 <__gethex+0x2c6>
   dc90a:	2b01      	cmp	r3, #1
   dc90c:	d11d      	bne.n	dc94a <__gethex+0x2cc>
   dc90e:	42a6      	cmp	r6, r4
   dc910:	d11b      	bne.n	dc94a <__gethex+0x2cc>
   dc912:	2e01      	cmp	r6, #1
   dc914:	dc0b      	bgt.n	dc92e <__gethex+0x2b0>
   dc916:	9a06      	ldr	r2, [sp, #24]
   dc918:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc91c:	6013      	str	r3, [r2, #0]
   dc91e:	2301      	movs	r3, #1
   dc920:	612b      	str	r3, [r5, #16]
   dc922:	f8ca 3000 	str.w	r3, [sl]
   dc926:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc928:	2062      	movs	r0, #98	; 0x62
   dc92a:	601d      	str	r5, [r3, #0]
   dc92c:	e0c3      	b.n	dcab6 <__gethex+0x438>
   dc92e:	1e71      	subs	r1, r6, #1
   dc930:	4628      	mov	r0, r5
   dc932:	f000 fe24 	bl	dd57e <__any_on>
   dc936:	2800      	cmp	r0, #0
   dc938:	d1ed      	bne.n	dc916 <__gethex+0x298>
   dc93a:	e006      	b.n	dc94a <__gethex+0x2cc>
   dc93c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc93e:	2b00      	cmp	r3, #0
   dc940:	d0e9      	beq.n	dc916 <__gethex+0x298>
   dc942:	e002      	b.n	dc94a <__gethex+0x2cc>
   dc944:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc946:	2b00      	cmp	r3, #0
   dc948:	d1e5      	bne.n	dc916 <__gethex+0x298>
   dc94a:	9802      	ldr	r0, [sp, #8]
   dc94c:	4629      	mov	r1, r5
   dc94e:	f000 fa7e 	bl	dce4e <_Bfree>
   dc952:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc954:	2300      	movs	r3, #0
   dc956:	6013      	str	r3, [r2, #0]
   dc958:	2050      	movs	r0, #80	; 0x50
   dc95a:	e0ac      	b.n	dcab6 <__gethex+0x438>
   dc95c:	1e67      	subs	r7, r4, #1
   dc95e:	f1b9 0f00 	cmp.w	r9, #0
   dc962:	d106      	bne.n	dc972 <__gethex+0x2f4>
   dc964:	b13f      	cbz	r7, dc976 <__gethex+0x2f8>
   dc966:	4639      	mov	r1, r7
   dc968:	4628      	mov	r0, r5
   dc96a:	f000 fe08 	bl	dd57e <__any_on>
   dc96e:	4681      	mov	r9, r0
   dc970:	e001      	b.n	dc976 <__gethex+0x2f8>
   dc972:	f04f 0901 	mov.w	r9, #1
   dc976:	117a      	asrs	r2, r7, #5
   dc978:	2301      	movs	r3, #1
   dc97a:	f007 071f 	and.w	r7, r7, #31
   dc97e:	fa03 f707 	lsl.w	r7, r3, r7
   dc982:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc986:	4621      	mov	r1, r4
   dc988:	421f      	tst	r7, r3
   dc98a:	4628      	mov	r0, r5
   dc98c:	bf18      	it	ne
   dc98e:	f049 0902 	orrne.w	r9, r9, #2
   dc992:	1b36      	subs	r6, r6, r4
   dc994:	f7ff fe28 	bl	dc5e8 <rshift>
   dc998:	2702      	movs	r7, #2
   dc99a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc99e:	e000      	b.n	dc9a2 <__gethex+0x324>
   dc9a0:	2701      	movs	r7, #1
   dc9a2:	f1b9 0f00 	cmp.w	r9, #0
   dc9a6:	f000 8081 	beq.w	dcaac <__gethex+0x42e>
   dc9aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc9ae:	2b02      	cmp	r3, #2
   dc9b0:	d00e      	beq.n	dc9d0 <__gethex+0x352>
   dc9b2:	2b03      	cmp	r3, #3
   dc9b4:	d010      	beq.n	dc9d8 <__gethex+0x35a>
   dc9b6:	2b01      	cmp	r3, #1
   dc9b8:	d176      	bne.n	dcaa8 <__gethex+0x42a>
   dc9ba:	f019 0f02 	tst.w	r9, #2
   dc9be:	d073      	beq.n	dcaa8 <__gethex+0x42a>
   dc9c0:	f8da 0000 	ldr.w	r0, [sl]
   dc9c4:	ea49 0900 	orr.w	r9, r9, r0
   dc9c8:	f019 0f01 	tst.w	r9, #1
   dc9cc:	d107      	bne.n	dc9de <__gethex+0x360>
   dc9ce:	e06b      	b.n	dcaa8 <__gethex+0x42a>
   dc9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc9d2:	f1c3 0301 	rsb	r3, r3, #1
   dc9d6:	9315      	str	r3, [sp, #84]	; 0x54
   dc9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc9da:	2b00      	cmp	r3, #0
   dc9dc:	d064      	beq.n	dcaa8 <__gethex+0x42a>
   dc9de:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc9e2:	f105 0314 	add.w	r3, r5, #20
   dc9e6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc9ea:	eb03 0109 	add.w	r1, r3, r9
   dc9ee:	2000      	movs	r0, #0
   dc9f0:	681a      	ldr	r2, [r3, #0]
   dc9f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc9f6:	d002      	beq.n	dc9fe <__gethex+0x380>
   dc9f8:	3201      	adds	r2, #1
   dc9fa:	601a      	str	r2, [r3, #0]
   dc9fc:	e020      	b.n	dca40 <__gethex+0x3c2>
   dc9fe:	f843 0b04 	str.w	r0, [r3], #4
   dca02:	4299      	cmp	r1, r3
   dca04:	d8f4      	bhi.n	dc9f0 <__gethex+0x372>
   dca06:	68ab      	ldr	r3, [r5, #8]
   dca08:	459a      	cmp	sl, r3
   dca0a:	db12      	blt.n	dca32 <__gethex+0x3b4>
   dca0c:	6869      	ldr	r1, [r5, #4]
   dca0e:	9802      	ldr	r0, [sp, #8]
   dca10:	3101      	adds	r1, #1
   dca12:	f000 f9e7 	bl	dcde4 <_Balloc>
   dca16:	692a      	ldr	r2, [r5, #16]
   dca18:	3202      	adds	r2, #2
   dca1a:	f105 010c 	add.w	r1, r5, #12
   dca1e:	4683      	mov	fp, r0
   dca20:	0092      	lsls	r2, r2, #2
   dca22:	300c      	adds	r0, #12
   dca24:	f7fe fba1 	bl	db16a <memcpy>
   dca28:	4629      	mov	r1, r5
   dca2a:	9802      	ldr	r0, [sp, #8]
   dca2c:	f000 fa0f 	bl	dce4e <_Bfree>
   dca30:	465d      	mov	r5, fp
   dca32:	692b      	ldr	r3, [r5, #16]
   dca34:	1c5a      	adds	r2, r3, #1
   dca36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dca3a:	612a      	str	r2, [r5, #16]
   dca3c:	2201      	movs	r2, #1
   dca3e:	615a      	str	r2, [r3, #20]
   dca40:	2f02      	cmp	r7, #2
   dca42:	f105 0214 	add.w	r2, r5, #20
   dca46:	d111      	bne.n	dca6c <__gethex+0x3ee>
   dca48:	f8d8 3000 	ldr.w	r3, [r8]
   dca4c:	3b01      	subs	r3, #1
   dca4e:	429e      	cmp	r6, r3
   dca50:	d127      	bne.n	dcaa2 <__gethex+0x424>
   dca52:	1171      	asrs	r1, r6, #5
   dca54:	2301      	movs	r3, #1
   dca56:	f006 061f 	and.w	r6, r6, #31
   dca5a:	fa03 f606 	lsl.w	r6, r3, r6
   dca5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dca62:	421e      	tst	r6, r3
   dca64:	bf0c      	ite	eq
   dca66:	2702      	moveq	r7, #2
   dca68:	2701      	movne	r7, #1
   dca6a:	e01a      	b.n	dcaa2 <__gethex+0x424>
   dca6c:	692b      	ldr	r3, [r5, #16]
   dca6e:	459a      	cmp	sl, r3
   dca70:	da0a      	bge.n	dca88 <__gethex+0x40a>
   dca72:	2101      	movs	r1, #1
   dca74:	4628      	mov	r0, r5
   dca76:	f7ff fdb7 	bl	dc5e8 <rshift>
   dca7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dca7e:	3401      	adds	r4, #1
   dca80:	429c      	cmp	r4, r3
   dca82:	f73f af2c 	bgt.w	dc8de <__gethex+0x260>
   dca86:	e00b      	b.n	dcaa0 <__gethex+0x422>
   dca88:	f016 061f 	ands.w	r6, r6, #31
   dca8c:	d008      	beq.n	dcaa0 <__gethex+0x422>
   dca8e:	4491      	add	r9, r2
   dca90:	f1c6 0620 	rsb	r6, r6, #32
   dca94:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dca98:	f000 fa69 	bl	dcf6e <__hi0bits>
   dca9c:	42b0      	cmp	r0, r6
   dca9e:	dbe8      	blt.n	dca72 <__gethex+0x3f4>
   dcaa0:	2701      	movs	r7, #1
   dcaa2:	f047 0720 	orr.w	r7, r7, #32
   dcaa6:	e001      	b.n	dcaac <__gethex+0x42e>
   dcaa8:	f047 0710 	orr.w	r7, r7, #16
   dcaac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcaae:	601d      	str	r5, [r3, #0]
   dcab0:	9b06      	ldr	r3, [sp, #24]
   dcab2:	4638      	mov	r0, r7
   dcab4:	601c      	str	r4, [r3, #0]
   dcab6:	b00b      	add	sp, #44	; 0x2c
   dcab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcabc <L_shift>:
   dcabc:	f1c2 0208 	rsb	r2, r2, #8
   dcac0:	0092      	lsls	r2, r2, #2
   dcac2:	b570      	push	{r4, r5, r6, lr}
   dcac4:	f1c2 0620 	rsb	r6, r2, #32
   dcac8:	6843      	ldr	r3, [r0, #4]
   dcaca:	6805      	ldr	r5, [r0, #0]
   dcacc:	fa03 f406 	lsl.w	r4, r3, r6
   dcad0:	432c      	orrs	r4, r5
   dcad2:	40d3      	lsrs	r3, r2
   dcad4:	6004      	str	r4, [r0, #0]
   dcad6:	f840 3f04 	str.w	r3, [r0, #4]!
   dcada:	4288      	cmp	r0, r1
   dcadc:	d3f4      	bcc.n	dcac8 <L_shift+0xc>
   dcade:	bd70      	pop	{r4, r5, r6, pc}

000dcae0 <__match>:
   dcae0:	b530      	push	{r4, r5, lr}
   dcae2:	6803      	ldr	r3, [r0, #0]
   dcae4:	f811 4b01 	ldrb.w	r4, [r1], #1
   dcae8:	3301      	adds	r3, #1
   dcaea:	b14c      	cbz	r4, dcb00 <__match+0x20>
   dcaec:	781a      	ldrb	r2, [r3, #0]
   dcaee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dcaf2:	2d19      	cmp	r5, #25
   dcaf4:	bf98      	it	ls
   dcaf6:	3220      	addls	r2, #32
   dcaf8:	42a2      	cmp	r2, r4
   dcafa:	d0f3      	beq.n	dcae4 <__match+0x4>
   dcafc:	2000      	movs	r0, #0
   dcafe:	bd30      	pop	{r4, r5, pc}
   dcb00:	6003      	str	r3, [r0, #0]
   dcb02:	2001      	movs	r0, #1
   dcb04:	bd30      	pop	{r4, r5, pc}

000dcb06 <__hexnan>:
   dcb06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb0a:	680b      	ldr	r3, [r1, #0]
   dcb0c:	f8d0 b000 	ldr.w	fp, [r0]
   dcb10:	115e      	asrs	r6, r3, #5
   dcb12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dcb16:	f013 031f 	ands.w	r3, r3, #31
   dcb1a:	b085      	sub	sp, #20
   dcb1c:	bf18      	it	ne
   dcb1e:	3604      	addne	r6, #4
   dcb20:	1f35      	subs	r5, r6, #4
   dcb22:	4617      	mov	r7, r2
   dcb24:	2200      	movs	r2, #0
   dcb26:	4682      	mov	sl, r0
   dcb28:	9301      	str	r3, [sp, #4]
   dcb2a:	f846 2c04 	str.w	r2, [r6, #-4]
   dcb2e:	46a8      	mov	r8, r5
   dcb30:	462c      	mov	r4, r5
   dcb32:	9200      	str	r2, [sp, #0]
   dcb34:	4691      	mov	r9, r2
   dcb36:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dcb3a:	2900      	cmp	r1, #0
   dcb3c:	d03c      	beq.n	dcbb8 <__hexnan+0xb2>
   dcb3e:	4608      	mov	r0, r1
   dcb40:	9203      	str	r2, [sp, #12]
   dcb42:	9102      	str	r1, [sp, #8]
   dcb44:	f7ff fd86 	bl	dc654 <__hexdig_fun>
   dcb48:	9a03      	ldr	r2, [sp, #12]
   dcb4a:	bb00      	cbnz	r0, dcb8e <__hexnan+0x88>
   dcb4c:	9902      	ldr	r1, [sp, #8]
   dcb4e:	2920      	cmp	r1, #32
   dcb50:	d816      	bhi.n	dcb80 <__hexnan+0x7a>
   dcb52:	9b00      	ldr	r3, [sp, #0]
   dcb54:	4599      	cmp	r9, r3
   dcb56:	ddee      	ble.n	dcb36 <__hexnan+0x30>
   dcb58:	4544      	cmp	r4, r8
   dcb5a:	d205      	bcs.n	dcb68 <__hexnan+0x62>
   dcb5c:	2a07      	cmp	r2, #7
   dcb5e:	dc03      	bgt.n	dcb68 <__hexnan+0x62>
   dcb60:	4641      	mov	r1, r8
   dcb62:	4620      	mov	r0, r4
   dcb64:	f7ff ffaa 	bl	dcabc <L_shift>
   dcb68:	42bc      	cmp	r4, r7
   dcb6a:	d923      	bls.n	dcbb4 <__hexnan+0xae>
   dcb6c:	2300      	movs	r3, #0
   dcb6e:	f1a4 0804 	sub.w	r8, r4, #4
   dcb72:	f844 3c04 	str.w	r3, [r4, #-4]
   dcb76:	f8cd 9000 	str.w	r9, [sp]
   dcb7a:	4644      	mov	r4, r8
   dcb7c:	461a      	mov	r2, r3
   dcb7e:	e7da      	b.n	dcb36 <__hexnan+0x30>
   dcb80:	2929      	cmp	r1, #41	; 0x29
   dcb82:	d148      	bne.n	dcc16 <__hexnan+0x110>
   dcb84:	f10b 0301 	add.w	r3, fp, #1
   dcb88:	f8ca 3000 	str.w	r3, [sl]
   dcb8c:	e014      	b.n	dcbb8 <__hexnan+0xb2>
   dcb8e:	3201      	adds	r2, #1
   dcb90:	2a08      	cmp	r2, #8
   dcb92:	f109 0901 	add.w	r9, r9, #1
   dcb96:	dd06      	ble.n	dcba6 <__hexnan+0xa0>
   dcb98:	42bc      	cmp	r4, r7
   dcb9a:	d9cc      	bls.n	dcb36 <__hexnan+0x30>
   dcb9c:	2300      	movs	r3, #0
   dcb9e:	f844 3c04 	str.w	r3, [r4, #-4]
   dcba2:	2201      	movs	r2, #1
   dcba4:	3c04      	subs	r4, #4
   dcba6:	6821      	ldr	r1, [r4, #0]
   dcba8:	f000 000f 	and.w	r0, r0, #15
   dcbac:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dcbb0:	6020      	str	r0, [r4, #0]
   dcbb2:	e7c0      	b.n	dcb36 <__hexnan+0x30>
   dcbb4:	2208      	movs	r2, #8
   dcbb6:	e7be      	b.n	dcb36 <__hexnan+0x30>
   dcbb8:	f1b9 0f00 	cmp.w	r9, #0
   dcbbc:	d02b      	beq.n	dcc16 <__hexnan+0x110>
   dcbbe:	4544      	cmp	r4, r8
   dcbc0:	d205      	bcs.n	dcbce <__hexnan+0xc8>
   dcbc2:	2a07      	cmp	r2, #7
   dcbc4:	dc03      	bgt.n	dcbce <__hexnan+0xc8>
   dcbc6:	4641      	mov	r1, r8
   dcbc8:	4620      	mov	r0, r4
   dcbca:	f7ff ff77 	bl	dcabc <L_shift>
   dcbce:	42bc      	cmp	r4, r7
   dcbd0:	d90c      	bls.n	dcbec <__hexnan+0xe6>
   dcbd2:	463b      	mov	r3, r7
   dcbd4:	f854 2b04 	ldr.w	r2, [r4], #4
   dcbd8:	f843 2b04 	str.w	r2, [r3], #4
   dcbdc:	42a5      	cmp	r5, r4
   dcbde:	d2f9      	bcs.n	dcbd4 <__hexnan+0xce>
   dcbe0:	2200      	movs	r2, #0
   dcbe2:	f843 2b04 	str.w	r2, [r3], #4
   dcbe6:	429d      	cmp	r5, r3
   dcbe8:	d2fb      	bcs.n	dcbe2 <__hexnan+0xdc>
   dcbea:	e00b      	b.n	dcc04 <__hexnan+0xfe>
   dcbec:	9b01      	ldr	r3, [sp, #4]
   dcbee:	b14b      	cbz	r3, dcc04 <__hexnan+0xfe>
   dcbf0:	f1c3 0220 	rsb	r2, r3, #32
   dcbf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dcbf8:	40d3      	lsrs	r3, r2
   dcbfa:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dcbfe:	4013      	ands	r3, r2
   dcc00:	f846 3c04 	str.w	r3, [r6, #-4]
   dcc04:	682b      	ldr	r3, [r5, #0]
   dcc06:	b943      	cbnz	r3, dcc1a <__hexnan+0x114>
   dcc08:	42bd      	cmp	r5, r7
   dcc0a:	d102      	bne.n	dcc12 <__hexnan+0x10c>
   dcc0c:	2301      	movs	r3, #1
   dcc0e:	602b      	str	r3, [r5, #0]
   dcc10:	e003      	b.n	dcc1a <__hexnan+0x114>
   dcc12:	3d04      	subs	r5, #4
   dcc14:	e7f6      	b.n	dcc04 <__hexnan+0xfe>
   dcc16:	2004      	movs	r0, #4
   dcc18:	e000      	b.n	dcc1c <__hexnan+0x116>
   dcc1a:	2005      	movs	r0, #5
   dcc1c:	b005      	add	sp, #20
   dcc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dcc24 <_findenv_r>:
   dcc24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcc28:	4607      	mov	r7, r0
   dcc2a:	468b      	mov	fp, r1
   dcc2c:	4690      	mov	r8, r2
   dcc2e:	f000 fcd6 	bl	dd5de <__env_lock>
   dcc32:	4b19      	ldr	r3, [pc, #100]	; (dcc98 <_findenv_r+0x74>)
   dcc34:	681d      	ldr	r5, [r3, #0]
   dcc36:	469a      	mov	sl, r3
   dcc38:	b13d      	cbz	r5, dcc4a <_findenv_r+0x26>
   dcc3a:	465c      	mov	r4, fp
   dcc3c:	4623      	mov	r3, r4
   dcc3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcc42:	b142      	cbz	r2, dcc56 <_findenv_r+0x32>
   dcc44:	2a3d      	cmp	r2, #61	; 0x3d
   dcc46:	461c      	mov	r4, r3
   dcc48:	d1f8      	bne.n	dcc3c <_findenv_r+0x18>
   dcc4a:	4638      	mov	r0, r7
   dcc4c:	f000 fcc8 	bl	dd5e0 <__env_unlock>
   dcc50:	2000      	movs	r0, #0
   dcc52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcc56:	ebcb 0404 	rsb	r4, fp, r4
   dcc5a:	46a9      	mov	r9, r5
   dcc5c:	f859 0b04 	ldr.w	r0, [r9], #4
   dcc60:	2800      	cmp	r0, #0
   dcc62:	d0f2      	beq.n	dcc4a <_findenv_r+0x26>
   dcc64:	4622      	mov	r2, r4
   dcc66:	4659      	mov	r1, fp
   dcc68:	f7fe fb1b 	bl	db2a2 <strncmp>
   dcc6c:	b988      	cbnz	r0, dcc92 <_findenv_r+0x6e>
   dcc6e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dcc72:	191e      	adds	r6, r3, r4
   dcc74:	5d1b      	ldrb	r3, [r3, r4]
   dcc76:	2b3d      	cmp	r3, #61	; 0x3d
   dcc78:	d10b      	bne.n	dcc92 <_findenv_r+0x6e>
   dcc7a:	f8da 3000 	ldr.w	r3, [sl]
   dcc7e:	1aed      	subs	r5, r5, r3
   dcc80:	10ad      	asrs	r5, r5, #2
   dcc82:	4638      	mov	r0, r7
   dcc84:	f8c8 5000 	str.w	r5, [r8]
   dcc88:	f000 fcaa 	bl	dd5e0 <__env_unlock>
   dcc8c:	1c70      	adds	r0, r6, #1
   dcc8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcc92:	464d      	mov	r5, r9
   dcc94:	e7e1      	b.n	dcc5a <_findenv_r+0x36>
   dcc96:	bf00      	nop
   dcc98:	2003d624 	.word	0x2003d624

000dcc9c <_getenv_r>:
   dcc9c:	b507      	push	{r0, r1, r2, lr}
   dcc9e:	aa01      	add	r2, sp, #4
   dcca0:	f7ff ffc0 	bl	dcc24 <_findenv_r>
   dcca4:	b003      	add	sp, #12
   dcca6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dccac <__gettzinfo>:
   dccac:	4800      	ldr	r0, [pc, #0]	; (dccb0 <__gettzinfo+0x4>)
   dccae:	4770      	bx	lr
   dccb0:	2003d5e4 	.word	0x2003d5e4

000dccb4 <gmtime_r>:
   dccb4:	6802      	ldr	r2, [r0, #0]
   dccb6:	4b47      	ldr	r3, [pc, #284]	; (dcdd4 <gmtime_r+0x120>)
   dccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dccba:	fb92 f4f3 	sdiv	r4, r2, r3
   dccbe:	fb03 2214 	mls	r2, r3, r4, r2
   dccc2:	2a00      	cmp	r2, #0
   dccc4:	bfbc      	itt	lt
   dccc6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dccca:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dccce:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dccd2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dccd6:	fb92 f3f0 	sdiv	r3, r2, r0
   dccda:	fb00 2213 	mls	r2, r0, r3, r2
   dccde:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dcce2:	bfac      	ite	ge
   dcce4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dcce8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dccec:	608b      	str	r3, [r1, #8]
   dccee:	fb92 f3f0 	sdiv	r3, r2, r0
   dccf2:	fb00 2213 	mls	r2, r0, r3, r2
   dccf6:	604b      	str	r3, [r1, #4]
   dccf8:	600a      	str	r2, [r1, #0]
   dccfa:	2307      	movs	r3, #7
   dccfc:	1ce2      	adds	r2, r4, #3
   dccfe:	fb92 f3f3 	sdiv	r3, r2, r3
   dcd02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dcd06:	1ad3      	subs	r3, r2, r3
   dcd08:	618b      	str	r3, [r1, #24]
   dcd0a:	4b33      	ldr	r3, [pc, #204]	; (dcdd8 <gmtime_r+0x124>)
   dcd0c:	4d33      	ldr	r5, [pc, #204]	; (dcddc <gmtime_r+0x128>)
   dcd0e:	fb94 f5f5 	sdiv	r5, r4, r5
   dcd12:	fb03 4405 	mla	r4, r3, r5, r4
   dcd16:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dcd1a:	fbb4 f2f2 	udiv	r2, r4, r2
   dcd1e:	4422      	add	r2, r4
   dcd20:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dcd24:	fbb4 f3f7 	udiv	r3, r4, r7
   dcd28:	1ad2      	subs	r2, r2, r3
   dcd2a:	482d      	ldr	r0, [pc, #180]	; (dcde0 <gmtime_r+0x12c>)
   dcd2c:	fbb4 f0f0 	udiv	r0, r4, r0
   dcd30:	f648 6694 	movw	r6, #36500	; 0x8e94
   dcd34:	1a13      	subs	r3, r2, r0
   dcd36:	fbb3 f6f6 	udiv	r6, r3, r6
   dcd3a:	4434      	add	r4, r6
   dcd3c:	f240 126d 	movw	r2, #365	; 0x16d
   dcd40:	fbb3 f0f2 	udiv	r0, r3, r2
   dcd44:	fbb3 f3f7 	udiv	r3, r3, r7
   dcd48:	1ae3      	subs	r3, r4, r3
   dcd4a:	fb02 3310 	mls	r3, r2, r0, r3
   dcd4e:	2499      	movs	r4, #153	; 0x99
   dcd50:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dcd54:	3202      	adds	r2, #2
   dcd56:	fbb2 f2f4 	udiv	r2, r2, r4
   dcd5a:	2a0a      	cmp	r2, #10
   dcd5c:	fb04 f402 	mul.w	r4, r4, r2
   dcd60:	f104 0602 	add.w	r6, r4, #2
   dcd64:	f04f 0405 	mov.w	r4, #5
   dcd68:	fbb6 f4f4 	udiv	r4, r6, r4
   dcd6c:	bf34      	ite	cc
   dcd6e:	2602      	movcc	r6, #2
   dcd70:	f06f 0609 	mvncs.w	r6, #9
   dcd74:	4416      	add	r6, r2
   dcd76:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dcd7a:	fb02 0505 	mla	r5, r2, r5, r0
   dcd7e:	1c5f      	adds	r7, r3, #1
   dcd80:	2e01      	cmp	r6, #1
   dcd82:	bf98      	it	ls
   dcd84:	3501      	addls	r5, #1
   dcd86:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dcd8a:	eba7 0704 	sub.w	r7, r7, r4
   dcd8e:	d302      	bcc.n	dcd96 <gmtime_r+0xe2>
   dcd90:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dcd94:	e014      	b.n	dcdc0 <gmtime_r+0x10c>
   dcd96:	0782      	lsls	r2, r0, #30
   dcd98:	d105      	bne.n	dcda6 <gmtime_r+0xf2>
   dcd9a:	2464      	movs	r4, #100	; 0x64
   dcd9c:	fbb0 f2f4 	udiv	r2, r0, r4
   dcda0:	fb04 0212 	mls	r2, r4, r2, r0
   dcda4:	b94a      	cbnz	r2, dcdba <gmtime_r+0x106>
   dcda6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dcdaa:	fbb0 f4f2 	udiv	r4, r0, r2
   dcdae:	fb02 0014 	mls	r0, r2, r4, r0
   dcdb2:	fab0 f280 	clz	r2, r0
   dcdb6:	0952      	lsrs	r2, r2, #5
   dcdb8:	e000      	b.n	dcdbc <gmtime_r+0x108>
   dcdba:	2201      	movs	r2, #1
   dcdbc:	333b      	adds	r3, #59	; 0x3b
   dcdbe:	441a      	add	r2, r3
   dcdc0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dcdc4:	2300      	movs	r3, #0
   dcdc6:	61ca      	str	r2, [r1, #28]
   dcdc8:	614d      	str	r5, [r1, #20]
   dcdca:	610e      	str	r6, [r1, #16]
   dcdcc:	60cf      	str	r7, [r1, #12]
   dcdce:	620b      	str	r3, [r1, #32]
   dcdd0:	4608      	mov	r0, r1
   dcdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcdd4:	00015180 	.word	0x00015180
   dcdd8:	fffdc54f 	.word	0xfffdc54f
   dcddc:	00023ab1 	.word	0x00023ab1
   dcde0:	00023ab0 	.word	0x00023ab0

000dcde4 <_Balloc>:
   dcde4:	b570      	push	{r4, r5, r6, lr}
   dcde6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dcde8:	4604      	mov	r4, r0
   dcdea:	460e      	mov	r6, r1
   dcdec:	b93d      	cbnz	r5, dcdfe <_Balloc+0x1a>
   dcdee:	2010      	movs	r0, #16
   dcdf0:	f7fa fb7a 	bl	d74e8 <malloc>
   dcdf4:	6260      	str	r0, [r4, #36]	; 0x24
   dcdf6:	6045      	str	r5, [r0, #4]
   dcdf8:	6085      	str	r5, [r0, #8]
   dcdfa:	6005      	str	r5, [r0, #0]
   dcdfc:	60c5      	str	r5, [r0, #12]
   dcdfe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dce00:	68eb      	ldr	r3, [r5, #12]
   dce02:	b143      	cbz	r3, dce16 <_Balloc+0x32>
   dce04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dce06:	68db      	ldr	r3, [r3, #12]
   dce08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dce0c:	b178      	cbz	r0, dce2e <_Balloc+0x4a>
   dce0e:	6802      	ldr	r2, [r0, #0]
   dce10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dce14:	e017      	b.n	dce46 <_Balloc+0x62>
   dce16:	2221      	movs	r2, #33	; 0x21
   dce18:	2104      	movs	r1, #4
   dce1a:	4620      	mov	r0, r4
   dce1c:	f000 fbd1 	bl	dd5c2 <_calloc_r>
   dce20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dce22:	60e8      	str	r0, [r5, #12]
   dce24:	68db      	ldr	r3, [r3, #12]
   dce26:	2b00      	cmp	r3, #0
   dce28:	d1ec      	bne.n	dce04 <_Balloc+0x20>
   dce2a:	2000      	movs	r0, #0
   dce2c:	bd70      	pop	{r4, r5, r6, pc}
   dce2e:	2101      	movs	r1, #1
   dce30:	fa01 f506 	lsl.w	r5, r1, r6
   dce34:	1d6a      	adds	r2, r5, #5
   dce36:	0092      	lsls	r2, r2, #2
   dce38:	4620      	mov	r0, r4
   dce3a:	f000 fbc2 	bl	dd5c2 <_calloc_r>
   dce3e:	2800      	cmp	r0, #0
   dce40:	d0f3      	beq.n	dce2a <_Balloc+0x46>
   dce42:	6046      	str	r6, [r0, #4]
   dce44:	6085      	str	r5, [r0, #8]
   dce46:	2300      	movs	r3, #0
   dce48:	6103      	str	r3, [r0, #16]
   dce4a:	60c3      	str	r3, [r0, #12]
   dce4c:	bd70      	pop	{r4, r5, r6, pc}

000dce4e <_Bfree>:
   dce4e:	b570      	push	{r4, r5, r6, lr}
   dce50:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dce52:	4606      	mov	r6, r0
   dce54:	460d      	mov	r5, r1
   dce56:	b93c      	cbnz	r4, dce68 <_Bfree+0x1a>
   dce58:	2010      	movs	r0, #16
   dce5a:	f7fa fb45 	bl	d74e8 <malloc>
   dce5e:	6270      	str	r0, [r6, #36]	; 0x24
   dce60:	6044      	str	r4, [r0, #4]
   dce62:	6084      	str	r4, [r0, #8]
   dce64:	6004      	str	r4, [r0, #0]
   dce66:	60c4      	str	r4, [r0, #12]
   dce68:	b13d      	cbz	r5, dce7a <_Bfree+0x2c>
   dce6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dce6c:	686a      	ldr	r2, [r5, #4]
   dce6e:	68db      	ldr	r3, [r3, #12]
   dce70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dce74:	6029      	str	r1, [r5, #0]
   dce76:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dce7a:	bd70      	pop	{r4, r5, r6, pc}

000dce7c <__multadd>:
   dce7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dce80:	690d      	ldr	r5, [r1, #16]
   dce82:	461f      	mov	r7, r3
   dce84:	4606      	mov	r6, r0
   dce86:	460c      	mov	r4, r1
   dce88:	f101 0e14 	add.w	lr, r1, #20
   dce8c:	2300      	movs	r3, #0
   dce8e:	f8de 0000 	ldr.w	r0, [lr]
   dce92:	b281      	uxth	r1, r0
   dce94:	fb02 7101 	mla	r1, r2, r1, r7
   dce98:	0c0f      	lsrs	r7, r1, #16
   dce9a:	0c00      	lsrs	r0, r0, #16
   dce9c:	fb02 7000 	mla	r0, r2, r0, r7
   dcea0:	b289      	uxth	r1, r1
   dcea2:	3301      	adds	r3, #1
   dcea4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dcea8:	429d      	cmp	r5, r3
   dceaa:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dceae:	f84e 1b04 	str.w	r1, [lr], #4
   dceb2:	dcec      	bgt.n	dce8e <__multadd+0x12>
   dceb4:	b1d7      	cbz	r7, dceec <__multadd+0x70>
   dceb6:	68a3      	ldr	r3, [r4, #8]
   dceb8:	429d      	cmp	r5, r3
   dceba:	db12      	blt.n	dcee2 <__multadd+0x66>
   dcebc:	6861      	ldr	r1, [r4, #4]
   dcebe:	4630      	mov	r0, r6
   dcec0:	3101      	adds	r1, #1
   dcec2:	f7ff ff8f 	bl	dcde4 <_Balloc>
   dcec6:	6922      	ldr	r2, [r4, #16]
   dcec8:	3202      	adds	r2, #2
   dceca:	f104 010c 	add.w	r1, r4, #12
   dcece:	4680      	mov	r8, r0
   dced0:	0092      	lsls	r2, r2, #2
   dced2:	300c      	adds	r0, #12
   dced4:	f7fe f949 	bl	db16a <memcpy>
   dced8:	4621      	mov	r1, r4
   dceda:	4630      	mov	r0, r6
   dcedc:	f7ff ffb7 	bl	dce4e <_Bfree>
   dcee0:	4644      	mov	r4, r8
   dcee2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dcee6:	3501      	adds	r5, #1
   dcee8:	615f      	str	r7, [r3, #20]
   dceea:	6125      	str	r5, [r4, #16]
   dceec:	4620      	mov	r0, r4
   dceee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcef2 <__s2b>:
   dcef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcef6:	460c      	mov	r4, r1
   dcef8:	4615      	mov	r5, r2
   dcefa:	461f      	mov	r7, r3
   dcefc:	2209      	movs	r2, #9
   dcefe:	3308      	adds	r3, #8
   dcf00:	4606      	mov	r6, r0
   dcf02:	fb93 f3f2 	sdiv	r3, r3, r2
   dcf06:	2100      	movs	r1, #0
   dcf08:	2201      	movs	r2, #1
   dcf0a:	429a      	cmp	r2, r3
   dcf0c:	da02      	bge.n	dcf14 <__s2b+0x22>
   dcf0e:	0052      	lsls	r2, r2, #1
   dcf10:	3101      	adds	r1, #1
   dcf12:	e7fa      	b.n	dcf0a <__s2b+0x18>
   dcf14:	4630      	mov	r0, r6
   dcf16:	f7ff ff65 	bl	dcde4 <_Balloc>
   dcf1a:	9b08      	ldr	r3, [sp, #32]
   dcf1c:	6143      	str	r3, [r0, #20]
   dcf1e:	2d09      	cmp	r5, #9
   dcf20:	f04f 0301 	mov.w	r3, #1
   dcf24:	6103      	str	r3, [r0, #16]
   dcf26:	dd11      	ble.n	dcf4c <__s2b+0x5a>
   dcf28:	f104 0809 	add.w	r8, r4, #9
   dcf2c:	46c1      	mov	r9, r8
   dcf2e:	442c      	add	r4, r5
   dcf30:	f819 3b01 	ldrb.w	r3, [r9], #1
   dcf34:	4601      	mov	r1, r0
   dcf36:	3b30      	subs	r3, #48	; 0x30
   dcf38:	220a      	movs	r2, #10
   dcf3a:	4630      	mov	r0, r6
   dcf3c:	f7ff ff9e 	bl	dce7c <__multadd>
   dcf40:	45a1      	cmp	r9, r4
   dcf42:	d1f5      	bne.n	dcf30 <__s2b+0x3e>
   dcf44:	eb08 0405 	add.w	r4, r8, r5
   dcf48:	3c08      	subs	r4, #8
   dcf4a:	e001      	b.n	dcf50 <__s2b+0x5e>
   dcf4c:	340a      	adds	r4, #10
   dcf4e:	2509      	movs	r5, #9
   dcf50:	1b2d      	subs	r5, r5, r4
   dcf52:	1963      	adds	r3, r4, r5
   dcf54:	429f      	cmp	r7, r3
   dcf56:	dd08      	ble.n	dcf6a <__s2b+0x78>
   dcf58:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcf5c:	4601      	mov	r1, r0
   dcf5e:	3b30      	subs	r3, #48	; 0x30
   dcf60:	220a      	movs	r2, #10
   dcf62:	4630      	mov	r0, r6
   dcf64:	f7ff ff8a 	bl	dce7c <__multadd>
   dcf68:	e7f3      	b.n	dcf52 <__s2b+0x60>
   dcf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcf6e <__hi0bits>:
   dcf6e:	0c03      	lsrs	r3, r0, #16
   dcf70:	041b      	lsls	r3, r3, #16
   dcf72:	b913      	cbnz	r3, dcf7a <__hi0bits+0xc>
   dcf74:	0400      	lsls	r0, r0, #16
   dcf76:	2310      	movs	r3, #16
   dcf78:	e000      	b.n	dcf7c <__hi0bits+0xe>
   dcf7a:	2300      	movs	r3, #0
   dcf7c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dcf80:	bf04      	itt	eq
   dcf82:	0200      	lsleq	r0, r0, #8
   dcf84:	3308      	addeq	r3, #8
   dcf86:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dcf8a:	bf04      	itt	eq
   dcf8c:	0100      	lsleq	r0, r0, #4
   dcf8e:	3304      	addeq	r3, #4
   dcf90:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dcf94:	bf04      	itt	eq
   dcf96:	0080      	lsleq	r0, r0, #2
   dcf98:	3302      	addeq	r3, #2
   dcf9a:	2800      	cmp	r0, #0
   dcf9c:	db03      	blt.n	dcfa6 <__hi0bits+0x38>
   dcf9e:	0042      	lsls	r2, r0, #1
   dcfa0:	d503      	bpl.n	dcfaa <__hi0bits+0x3c>
   dcfa2:	1c58      	adds	r0, r3, #1
   dcfa4:	4770      	bx	lr
   dcfa6:	4618      	mov	r0, r3
   dcfa8:	4770      	bx	lr
   dcfaa:	2020      	movs	r0, #32
   dcfac:	4770      	bx	lr

000dcfae <__lo0bits>:
   dcfae:	6803      	ldr	r3, [r0, #0]
   dcfb0:	f013 0207 	ands.w	r2, r3, #7
   dcfb4:	d00b      	beq.n	dcfce <__lo0bits+0x20>
   dcfb6:	07d9      	lsls	r1, r3, #31
   dcfb8:	d422      	bmi.n	dd000 <__lo0bits+0x52>
   dcfba:	079a      	lsls	r2, r3, #30
   dcfbc:	bf4b      	itete	mi
   dcfbe:	085b      	lsrmi	r3, r3, #1
   dcfc0:	089b      	lsrpl	r3, r3, #2
   dcfc2:	6003      	strmi	r3, [r0, #0]
   dcfc4:	6003      	strpl	r3, [r0, #0]
   dcfc6:	bf4c      	ite	mi
   dcfc8:	2001      	movmi	r0, #1
   dcfca:	2002      	movpl	r0, #2
   dcfcc:	4770      	bx	lr
   dcfce:	b299      	uxth	r1, r3
   dcfd0:	b909      	cbnz	r1, dcfd6 <__lo0bits+0x28>
   dcfd2:	0c1b      	lsrs	r3, r3, #16
   dcfd4:	2210      	movs	r2, #16
   dcfd6:	f013 0fff 	tst.w	r3, #255	; 0xff
   dcfda:	bf04      	itt	eq
   dcfdc:	0a1b      	lsreq	r3, r3, #8
   dcfde:	3208      	addeq	r2, #8
   dcfe0:	0719      	lsls	r1, r3, #28
   dcfe2:	bf04      	itt	eq
   dcfe4:	091b      	lsreq	r3, r3, #4
   dcfe6:	3204      	addeq	r2, #4
   dcfe8:	0799      	lsls	r1, r3, #30
   dcfea:	bf04      	itt	eq
   dcfec:	089b      	lsreq	r3, r3, #2
   dcfee:	3202      	addeq	r2, #2
   dcff0:	07d9      	lsls	r1, r3, #31
   dcff2:	d402      	bmi.n	dcffa <__lo0bits+0x4c>
   dcff4:	085b      	lsrs	r3, r3, #1
   dcff6:	d005      	beq.n	dd004 <__lo0bits+0x56>
   dcff8:	3201      	adds	r2, #1
   dcffa:	6003      	str	r3, [r0, #0]
   dcffc:	4610      	mov	r0, r2
   dcffe:	4770      	bx	lr
   dd000:	2000      	movs	r0, #0
   dd002:	4770      	bx	lr
   dd004:	2020      	movs	r0, #32
   dd006:	4770      	bx	lr

000dd008 <__i2b>:
   dd008:	b510      	push	{r4, lr}
   dd00a:	460c      	mov	r4, r1
   dd00c:	2101      	movs	r1, #1
   dd00e:	f7ff fee9 	bl	dcde4 <_Balloc>
   dd012:	2201      	movs	r2, #1
   dd014:	6144      	str	r4, [r0, #20]
   dd016:	6102      	str	r2, [r0, #16]
   dd018:	bd10      	pop	{r4, pc}

000dd01a <__multiply>:
   dd01a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd01e:	4614      	mov	r4, r2
   dd020:	690a      	ldr	r2, [r1, #16]
   dd022:	6923      	ldr	r3, [r4, #16]
   dd024:	429a      	cmp	r2, r3
   dd026:	bfb8      	it	lt
   dd028:	460b      	movlt	r3, r1
   dd02a:	4688      	mov	r8, r1
   dd02c:	bfbc      	itt	lt
   dd02e:	46a0      	movlt	r8, r4
   dd030:	461c      	movlt	r4, r3
   dd032:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dd036:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dd03a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd03e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dd042:	eb07 0609 	add.w	r6, r7, r9
   dd046:	429e      	cmp	r6, r3
   dd048:	bfc8      	it	gt
   dd04a:	3101      	addgt	r1, #1
   dd04c:	f7ff feca 	bl	dcde4 <_Balloc>
   dd050:	f100 0514 	add.w	r5, r0, #20
   dd054:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dd058:	462b      	mov	r3, r5
   dd05a:	2200      	movs	r2, #0
   dd05c:	4563      	cmp	r3, ip
   dd05e:	d202      	bcs.n	dd066 <__multiply+0x4c>
   dd060:	f843 2b04 	str.w	r2, [r3], #4
   dd064:	e7fa      	b.n	dd05c <__multiply+0x42>
   dd066:	f104 0214 	add.w	r2, r4, #20
   dd06a:	f108 0114 	add.w	r1, r8, #20
   dd06e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dd072:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dd076:	9300      	str	r3, [sp, #0]
   dd078:	9b00      	ldr	r3, [sp, #0]
   dd07a:	9201      	str	r2, [sp, #4]
   dd07c:	4293      	cmp	r3, r2
   dd07e:	d957      	bls.n	dd130 <__multiply+0x116>
   dd080:	f8b2 b000 	ldrh.w	fp, [r2]
   dd084:	f1bb 0f00 	cmp.w	fp, #0
   dd088:	d023      	beq.n	dd0d2 <__multiply+0xb8>
   dd08a:	4689      	mov	r9, r1
   dd08c:	46ae      	mov	lr, r5
   dd08e:	f04f 0800 	mov.w	r8, #0
   dd092:	f859 4b04 	ldr.w	r4, [r9], #4
   dd096:	f8be a000 	ldrh.w	sl, [lr]
   dd09a:	b2a3      	uxth	r3, r4
   dd09c:	fb0b a303 	mla	r3, fp, r3, sl
   dd0a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dd0a4:	f8de 4000 	ldr.w	r4, [lr]
   dd0a8:	4443      	add	r3, r8
   dd0aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dd0ae:	fb0b 840a 	mla	r4, fp, sl, r8
   dd0b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dd0b6:	46f2      	mov	sl, lr
   dd0b8:	b29b      	uxth	r3, r3
   dd0ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dd0be:	454f      	cmp	r7, r9
   dd0c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dd0c4:	f84a 3b04 	str.w	r3, [sl], #4
   dd0c8:	d901      	bls.n	dd0ce <__multiply+0xb4>
   dd0ca:	46d6      	mov	lr, sl
   dd0cc:	e7e1      	b.n	dd092 <__multiply+0x78>
   dd0ce:	f8ce 8004 	str.w	r8, [lr, #4]
   dd0d2:	9b01      	ldr	r3, [sp, #4]
   dd0d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dd0d8:	3204      	adds	r2, #4
   dd0da:	f1ba 0f00 	cmp.w	sl, #0
   dd0de:	d021      	beq.n	dd124 <__multiply+0x10a>
   dd0e0:	682b      	ldr	r3, [r5, #0]
   dd0e2:	462c      	mov	r4, r5
   dd0e4:	4689      	mov	r9, r1
   dd0e6:	f04f 0800 	mov.w	r8, #0
   dd0ea:	f8b9 e000 	ldrh.w	lr, [r9]
   dd0ee:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dd0f2:	fb0a be0e 	mla	lr, sl, lr, fp
   dd0f6:	44f0      	add	r8, lr
   dd0f8:	46a3      	mov	fp, r4
   dd0fa:	b29b      	uxth	r3, r3
   dd0fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dd100:	f84b 3b04 	str.w	r3, [fp], #4
   dd104:	f859 3b04 	ldr.w	r3, [r9], #4
   dd108:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dd10c:	0c1b      	lsrs	r3, r3, #16
   dd10e:	fb0a e303 	mla	r3, sl, r3, lr
   dd112:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dd116:	454f      	cmp	r7, r9
   dd118:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dd11c:	d901      	bls.n	dd122 <__multiply+0x108>
   dd11e:	465c      	mov	r4, fp
   dd120:	e7e3      	b.n	dd0ea <__multiply+0xd0>
   dd122:	6063      	str	r3, [r4, #4]
   dd124:	3504      	adds	r5, #4
   dd126:	e7a7      	b.n	dd078 <__multiply+0x5e>
   dd128:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dd12c:	b913      	cbnz	r3, dd134 <__multiply+0x11a>
   dd12e:	3e01      	subs	r6, #1
   dd130:	2e00      	cmp	r6, #0
   dd132:	dcf9      	bgt.n	dd128 <__multiply+0x10e>
   dd134:	6106      	str	r6, [r0, #16]
   dd136:	b003      	add	sp, #12
   dd138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd13c <__pow5mult>:
   dd13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd140:	4615      	mov	r5, r2
   dd142:	f012 0203 	ands.w	r2, r2, #3
   dd146:	4606      	mov	r6, r0
   dd148:	460f      	mov	r7, r1
   dd14a:	d007      	beq.n	dd15c <__pow5mult+0x20>
   dd14c:	3a01      	subs	r2, #1
   dd14e:	4c21      	ldr	r4, [pc, #132]	; (dd1d4 <__pow5mult+0x98>)
   dd150:	2300      	movs	r3, #0
   dd152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dd156:	f7ff fe91 	bl	dce7c <__multadd>
   dd15a:	4607      	mov	r7, r0
   dd15c:	10ad      	asrs	r5, r5, #2
   dd15e:	d036      	beq.n	dd1ce <__pow5mult+0x92>
   dd160:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dd162:	b93c      	cbnz	r4, dd174 <__pow5mult+0x38>
   dd164:	2010      	movs	r0, #16
   dd166:	f7fa f9bf 	bl	d74e8 <malloc>
   dd16a:	6270      	str	r0, [r6, #36]	; 0x24
   dd16c:	6044      	str	r4, [r0, #4]
   dd16e:	6084      	str	r4, [r0, #8]
   dd170:	6004      	str	r4, [r0, #0]
   dd172:	60c4      	str	r4, [r0, #12]
   dd174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dd178:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dd17c:	b94c      	cbnz	r4, dd192 <__pow5mult+0x56>
   dd17e:	f240 2171 	movw	r1, #625	; 0x271
   dd182:	4630      	mov	r0, r6
   dd184:	f7ff ff40 	bl	dd008 <__i2b>
   dd188:	2300      	movs	r3, #0
   dd18a:	f8c8 0008 	str.w	r0, [r8, #8]
   dd18e:	4604      	mov	r4, r0
   dd190:	6003      	str	r3, [r0, #0]
   dd192:	f04f 0800 	mov.w	r8, #0
   dd196:	07eb      	lsls	r3, r5, #31
   dd198:	d50a      	bpl.n	dd1b0 <__pow5mult+0x74>
   dd19a:	4639      	mov	r1, r7
   dd19c:	4622      	mov	r2, r4
   dd19e:	4630      	mov	r0, r6
   dd1a0:	f7ff ff3b 	bl	dd01a <__multiply>
   dd1a4:	4639      	mov	r1, r7
   dd1a6:	4681      	mov	r9, r0
   dd1a8:	4630      	mov	r0, r6
   dd1aa:	f7ff fe50 	bl	dce4e <_Bfree>
   dd1ae:	464f      	mov	r7, r9
   dd1b0:	106d      	asrs	r5, r5, #1
   dd1b2:	d00c      	beq.n	dd1ce <__pow5mult+0x92>
   dd1b4:	6820      	ldr	r0, [r4, #0]
   dd1b6:	b108      	cbz	r0, dd1bc <__pow5mult+0x80>
   dd1b8:	4604      	mov	r4, r0
   dd1ba:	e7ec      	b.n	dd196 <__pow5mult+0x5a>
   dd1bc:	4622      	mov	r2, r4
   dd1be:	4621      	mov	r1, r4
   dd1c0:	4630      	mov	r0, r6
   dd1c2:	f7ff ff2a 	bl	dd01a <__multiply>
   dd1c6:	6020      	str	r0, [r4, #0]
   dd1c8:	f8c0 8000 	str.w	r8, [r0]
   dd1cc:	e7f4      	b.n	dd1b8 <__pow5mult+0x7c>
   dd1ce:	4638      	mov	r0, r7
   dd1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd1d4:	000de3d0 	.word	0x000de3d0

000dd1d8 <__lshift>:
   dd1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd1dc:	460c      	mov	r4, r1
   dd1de:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dd1e2:	6926      	ldr	r6, [r4, #16]
   dd1e4:	6849      	ldr	r1, [r1, #4]
   dd1e6:	68a3      	ldr	r3, [r4, #8]
   dd1e8:	4456      	add	r6, sl
   dd1ea:	4607      	mov	r7, r0
   dd1ec:	4691      	mov	r9, r2
   dd1ee:	1c75      	adds	r5, r6, #1
   dd1f0:	42ab      	cmp	r3, r5
   dd1f2:	da02      	bge.n	dd1fa <__lshift+0x22>
   dd1f4:	3101      	adds	r1, #1
   dd1f6:	005b      	lsls	r3, r3, #1
   dd1f8:	e7fa      	b.n	dd1f0 <__lshift+0x18>
   dd1fa:	4638      	mov	r0, r7
   dd1fc:	f7ff fdf2 	bl	dcde4 <_Balloc>
   dd200:	2300      	movs	r3, #0
   dd202:	4680      	mov	r8, r0
   dd204:	f100 0114 	add.w	r1, r0, #20
   dd208:	461a      	mov	r2, r3
   dd20a:	4553      	cmp	r3, sl
   dd20c:	da03      	bge.n	dd216 <__lshift+0x3e>
   dd20e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dd212:	3301      	adds	r3, #1
   dd214:	e7f9      	b.n	dd20a <__lshift+0x32>
   dd216:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dd21a:	6920      	ldr	r0, [r4, #16]
   dd21c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dd220:	f019 091f 	ands.w	r9, r9, #31
   dd224:	f104 0114 	add.w	r1, r4, #20
   dd228:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dd22c:	d014      	beq.n	dd258 <__lshift+0x80>
   dd22e:	f1c9 0c20 	rsb	ip, r9, #32
   dd232:	2200      	movs	r2, #0
   dd234:	6808      	ldr	r0, [r1, #0]
   dd236:	fa00 f009 	lsl.w	r0, r0, r9
   dd23a:	4302      	orrs	r2, r0
   dd23c:	469a      	mov	sl, r3
   dd23e:	f843 2b04 	str.w	r2, [r3], #4
   dd242:	f851 2b04 	ldr.w	r2, [r1], #4
   dd246:	458e      	cmp	lr, r1
   dd248:	fa22 f20c 	lsr.w	r2, r2, ip
   dd24c:	d8f2      	bhi.n	dd234 <__lshift+0x5c>
   dd24e:	f8ca 2004 	str.w	r2, [sl, #4]
   dd252:	b142      	cbz	r2, dd266 <__lshift+0x8e>
   dd254:	1cb5      	adds	r5, r6, #2
   dd256:	e006      	b.n	dd266 <__lshift+0x8e>
   dd258:	3b04      	subs	r3, #4
   dd25a:	f851 2b04 	ldr.w	r2, [r1], #4
   dd25e:	f843 2f04 	str.w	r2, [r3, #4]!
   dd262:	458e      	cmp	lr, r1
   dd264:	d8f9      	bhi.n	dd25a <__lshift+0x82>
   dd266:	3d01      	subs	r5, #1
   dd268:	4638      	mov	r0, r7
   dd26a:	f8c8 5010 	str.w	r5, [r8, #16]
   dd26e:	4621      	mov	r1, r4
   dd270:	f7ff fded 	bl	dce4e <_Bfree>
   dd274:	4640      	mov	r0, r8
   dd276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dd27a <__mcmp>:
   dd27a:	6903      	ldr	r3, [r0, #16]
   dd27c:	690a      	ldr	r2, [r1, #16]
   dd27e:	1a9b      	subs	r3, r3, r2
   dd280:	b510      	push	{r4, lr}
   dd282:	d111      	bne.n	dd2a8 <__mcmp+0x2e>
   dd284:	0092      	lsls	r2, r2, #2
   dd286:	3014      	adds	r0, #20
   dd288:	3114      	adds	r1, #20
   dd28a:	1883      	adds	r3, r0, r2
   dd28c:	440a      	add	r2, r1
   dd28e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dd292:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dd296:	428c      	cmp	r4, r1
   dd298:	d002      	beq.n	dd2a0 <__mcmp+0x26>
   dd29a:	d307      	bcc.n	dd2ac <__mcmp+0x32>
   dd29c:	2001      	movs	r0, #1
   dd29e:	bd10      	pop	{r4, pc}
   dd2a0:	4298      	cmp	r0, r3
   dd2a2:	d3f4      	bcc.n	dd28e <__mcmp+0x14>
   dd2a4:	2000      	movs	r0, #0
   dd2a6:	bd10      	pop	{r4, pc}
   dd2a8:	4618      	mov	r0, r3
   dd2aa:	bd10      	pop	{r4, pc}
   dd2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd2b0:	bd10      	pop	{r4, pc}

000dd2b2 <__mdiff>:
   dd2b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd2b6:	460c      	mov	r4, r1
   dd2b8:	4607      	mov	r7, r0
   dd2ba:	4611      	mov	r1, r2
   dd2bc:	4620      	mov	r0, r4
   dd2be:	4615      	mov	r5, r2
   dd2c0:	f7ff ffdb 	bl	dd27a <__mcmp>
   dd2c4:	1e06      	subs	r6, r0, #0
   dd2c6:	d108      	bne.n	dd2da <__mdiff+0x28>
   dd2c8:	4631      	mov	r1, r6
   dd2ca:	4638      	mov	r0, r7
   dd2cc:	f7ff fd8a 	bl	dcde4 <_Balloc>
   dd2d0:	2301      	movs	r3, #1
   dd2d2:	6103      	str	r3, [r0, #16]
   dd2d4:	6146      	str	r6, [r0, #20]
   dd2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd2da:	bfbc      	itt	lt
   dd2dc:	4623      	movlt	r3, r4
   dd2de:	462c      	movlt	r4, r5
   dd2e0:	4638      	mov	r0, r7
   dd2e2:	6861      	ldr	r1, [r4, #4]
   dd2e4:	bfba      	itte	lt
   dd2e6:	461d      	movlt	r5, r3
   dd2e8:	2601      	movlt	r6, #1
   dd2ea:	2600      	movge	r6, #0
   dd2ec:	f7ff fd7a 	bl	dcde4 <_Balloc>
   dd2f0:	692b      	ldr	r3, [r5, #16]
   dd2f2:	60c6      	str	r6, [r0, #12]
   dd2f4:	6926      	ldr	r6, [r4, #16]
   dd2f6:	f105 0914 	add.w	r9, r5, #20
   dd2fa:	3414      	adds	r4, #20
   dd2fc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dd300:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dd304:	f100 0514 	add.w	r5, r0, #20
   dd308:	f04f 0c00 	mov.w	ip, #0
   dd30c:	f854 3b04 	ldr.w	r3, [r4], #4
   dd310:	f859 2b04 	ldr.w	r2, [r9], #4
   dd314:	fa1c f183 	uxtah	r1, ip, r3
   dd318:	fa1f fe82 	uxth.w	lr, r2
   dd31c:	0c12      	lsrs	r2, r2, #16
   dd31e:	ebce 0101 	rsb	r1, lr, r1
   dd322:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dd326:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dd32a:	b289      	uxth	r1, r1
   dd32c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dd330:	45c8      	cmp	r8, r9
   dd332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dd336:	46a6      	mov	lr, r4
   dd338:	f845 3b04 	str.w	r3, [r5], #4
   dd33c:	d8e6      	bhi.n	dd30c <__mdiff+0x5a>
   dd33e:	45be      	cmp	lr, r7
   dd340:	d20e      	bcs.n	dd360 <__mdiff+0xae>
   dd342:	f85e 1b04 	ldr.w	r1, [lr], #4
   dd346:	fa1c f281 	uxtah	r2, ip, r1
   dd34a:	1413      	asrs	r3, r2, #16
   dd34c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dd350:	b292      	uxth	r2, r2
   dd352:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dd356:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dd35a:	f845 2b04 	str.w	r2, [r5], #4
   dd35e:	e7ee      	b.n	dd33e <__mdiff+0x8c>
   dd360:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dd364:	b90b      	cbnz	r3, dd36a <__mdiff+0xb8>
   dd366:	3e01      	subs	r6, #1
   dd368:	e7fa      	b.n	dd360 <__mdiff+0xae>
   dd36a:	6106      	str	r6, [r0, #16]
   dd36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dd370 <__ulp>:
   dd370:	4b12      	ldr	r3, [pc, #72]	; (dd3bc <__ulp+0x4c>)
   dd372:	ee10 2a90 	vmov	r2, s1
   dd376:	401a      	ands	r2, r3
   dd378:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dd37c:	2b00      	cmp	r3, #0
   dd37e:	dd02      	ble.n	dd386 <__ulp+0x16>
   dd380:	2000      	movs	r0, #0
   dd382:	4619      	mov	r1, r3
   dd384:	e017      	b.n	dd3b6 <__ulp+0x46>
   dd386:	425b      	negs	r3, r3
   dd388:	151b      	asrs	r3, r3, #20
   dd38a:	2b13      	cmp	r3, #19
   dd38c:	f04f 0000 	mov.w	r0, #0
   dd390:	f04f 0100 	mov.w	r1, #0
   dd394:	dc04      	bgt.n	dd3a0 <__ulp+0x30>
   dd396:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dd39a:	fa42 f103 	asr.w	r1, r2, r3
   dd39e:	e00a      	b.n	dd3b6 <__ulp+0x46>
   dd3a0:	3b14      	subs	r3, #20
   dd3a2:	2b1e      	cmp	r3, #30
   dd3a4:	f04f 0201 	mov.w	r2, #1
   dd3a8:	bfda      	itte	le
   dd3aa:	f1c3 031f 	rsble	r3, r3, #31
   dd3ae:	fa02 f303 	lslle.w	r3, r2, r3
   dd3b2:	4613      	movgt	r3, r2
   dd3b4:	4618      	mov	r0, r3
   dd3b6:	ec41 0b10 	vmov	d0, r0, r1
   dd3ba:	4770      	bx	lr
   dd3bc:	7ff00000 	.word	0x7ff00000

000dd3c0 <__b2d>:
   dd3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd3c2:	6905      	ldr	r5, [r0, #16]
   dd3c4:	f100 0614 	add.w	r6, r0, #20
   dd3c8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dd3cc:	1f2f      	subs	r7, r5, #4
   dd3ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd3d2:	4620      	mov	r0, r4
   dd3d4:	f7ff fdcb 	bl	dcf6e <__hi0bits>
   dd3d8:	f1c0 0320 	rsb	r3, r0, #32
   dd3dc:	280a      	cmp	r0, #10
   dd3de:	600b      	str	r3, [r1, #0]
   dd3e0:	dc14      	bgt.n	dd40c <__b2d+0x4c>
   dd3e2:	f1c0 0e0b 	rsb	lr, r0, #11
   dd3e6:	fa24 f10e 	lsr.w	r1, r4, lr
   dd3ea:	42be      	cmp	r6, r7
   dd3ec:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dd3f0:	bf34      	ite	cc
   dd3f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd3f6:	2100      	movcs	r1, #0
   dd3f8:	3015      	adds	r0, #21
   dd3fa:	fa04 f000 	lsl.w	r0, r4, r0
   dd3fe:	fa21 f10e 	lsr.w	r1, r1, lr
   dd402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd406:	ea40 0201 	orr.w	r2, r0, r1
   dd40a:	e023      	b.n	dd454 <__b2d+0x94>
   dd40c:	42be      	cmp	r6, r7
   dd40e:	bf3a      	itte	cc
   dd410:	f1a5 0708 	subcc.w	r7, r5, #8
   dd414:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd418:	2100      	movcs	r1, #0
   dd41a:	380b      	subs	r0, #11
   dd41c:	d015      	beq.n	dd44a <__b2d+0x8a>
   dd41e:	4084      	lsls	r4, r0
   dd420:	f1c0 0520 	rsb	r5, r0, #32
   dd424:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dd428:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dd42c:	42b7      	cmp	r7, r6
   dd42e:	fa21 fe05 	lsr.w	lr, r1, r5
   dd432:	ea44 030e 	orr.w	r3, r4, lr
   dd436:	bf8c      	ite	hi
   dd438:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dd43c:	2400      	movls	r4, #0
   dd43e:	fa01 f000 	lsl.w	r0, r1, r0
   dd442:	40ec      	lsrs	r4, r5
   dd444:	ea40 0204 	orr.w	r2, r0, r4
   dd448:	e004      	b.n	dd454 <__b2d+0x94>
   dd44a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dd44e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd452:	460a      	mov	r2, r1
   dd454:	ec43 2b10 	vmov	d0, r2, r3
   dd458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd45a <__d2b>:
   dd45a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd45e:	460e      	mov	r6, r1
   dd460:	2101      	movs	r1, #1
   dd462:	ec59 8b10 	vmov	r8, r9, d0
   dd466:	4615      	mov	r5, r2
   dd468:	f7ff fcbc 	bl	dcde4 <_Balloc>
   dd46c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dd470:	4607      	mov	r7, r0
   dd472:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dd476:	b10c      	cbz	r4, dd47c <__d2b+0x22>
   dd478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd47c:	9301      	str	r3, [sp, #4]
   dd47e:	f1b8 0f00 	cmp.w	r8, #0
   dd482:	d019      	beq.n	dd4b8 <__d2b+0x5e>
   dd484:	a802      	add	r0, sp, #8
   dd486:	f840 8d08 	str.w	r8, [r0, #-8]!
   dd48a:	f7ff fd90 	bl	dcfae <__lo0bits>
   dd48e:	9b00      	ldr	r3, [sp, #0]
   dd490:	b148      	cbz	r0, dd4a6 <__d2b+0x4c>
   dd492:	9a01      	ldr	r2, [sp, #4]
   dd494:	f1c0 0120 	rsb	r1, r0, #32
   dd498:	fa02 f101 	lsl.w	r1, r2, r1
   dd49c:	430b      	orrs	r3, r1
   dd49e:	40c2      	lsrs	r2, r0
   dd4a0:	617b      	str	r3, [r7, #20]
   dd4a2:	9201      	str	r2, [sp, #4]
   dd4a4:	e000      	b.n	dd4a8 <__d2b+0x4e>
   dd4a6:	617b      	str	r3, [r7, #20]
   dd4a8:	9b01      	ldr	r3, [sp, #4]
   dd4aa:	61bb      	str	r3, [r7, #24]
   dd4ac:	2b00      	cmp	r3, #0
   dd4ae:	bf14      	ite	ne
   dd4b0:	2102      	movne	r1, #2
   dd4b2:	2101      	moveq	r1, #1
   dd4b4:	6139      	str	r1, [r7, #16]
   dd4b6:	e007      	b.n	dd4c8 <__d2b+0x6e>
   dd4b8:	a801      	add	r0, sp, #4
   dd4ba:	f7ff fd78 	bl	dcfae <__lo0bits>
   dd4be:	9b01      	ldr	r3, [sp, #4]
   dd4c0:	617b      	str	r3, [r7, #20]
   dd4c2:	2101      	movs	r1, #1
   dd4c4:	6139      	str	r1, [r7, #16]
   dd4c6:	3020      	adds	r0, #32
   dd4c8:	b134      	cbz	r4, dd4d8 <__d2b+0x7e>
   dd4ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dd4ce:	4404      	add	r4, r0
   dd4d0:	6034      	str	r4, [r6, #0]
   dd4d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd4d6:	e009      	b.n	dd4ec <__d2b+0x92>
   dd4d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dd4dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd4e0:	6030      	str	r0, [r6, #0]
   dd4e2:	6918      	ldr	r0, [r3, #16]
   dd4e4:	f7ff fd43 	bl	dcf6e <__hi0bits>
   dd4e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dd4ec:	6028      	str	r0, [r5, #0]
   dd4ee:	4638      	mov	r0, r7
   dd4f0:	b003      	add	sp, #12
   dd4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd4f6 <__ratio>:
   dd4f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd4fa:	4688      	mov	r8, r1
   dd4fc:	4669      	mov	r1, sp
   dd4fe:	4681      	mov	r9, r0
   dd500:	f7ff ff5e 	bl	dd3c0 <__b2d>
   dd504:	a901      	add	r1, sp, #4
   dd506:	4640      	mov	r0, r8
   dd508:	ec55 4b10 	vmov	r4, r5, d0
   dd50c:	f7ff ff58 	bl	dd3c0 <__b2d>
   dd510:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd514:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd518:	1a9a      	subs	r2, r3, r2
   dd51a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dd51e:	1ac9      	subs	r1, r1, r3
   dd520:	ec57 6b10 	vmov	r6, r7, d0
   dd524:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dd528:	2b00      	cmp	r3, #0
   dd52a:	bfcc      	ite	gt
   dd52c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dd530:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dd534:	4632      	mov	r2, r6
   dd536:	463b      	mov	r3, r7
   dd538:	4620      	mov	r0, r4
   dd53a:	4629      	mov	r1, r5
   dd53c:	f7fd faec 	bl	dab18 <__aeabi_ddiv>
   dd540:	ec41 0b10 	vmov	d0, r0, r1
   dd544:	b003      	add	sp, #12
   dd546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd54a <__copybits>:
   dd54a:	3901      	subs	r1, #1
   dd54c:	b510      	push	{r4, lr}
   dd54e:	1149      	asrs	r1, r1, #5
   dd550:	6914      	ldr	r4, [r2, #16]
   dd552:	3101      	adds	r1, #1
   dd554:	f102 0314 	add.w	r3, r2, #20
   dd558:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd55c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd560:	42a3      	cmp	r3, r4
   dd562:	4602      	mov	r2, r0
   dd564:	d204      	bcs.n	dd570 <__copybits+0x26>
   dd566:	f853 2b04 	ldr.w	r2, [r3], #4
   dd56a:	f840 2b04 	str.w	r2, [r0], #4
   dd56e:	e7f7      	b.n	dd560 <__copybits+0x16>
   dd570:	2300      	movs	r3, #0
   dd572:	428a      	cmp	r2, r1
   dd574:	d202      	bcs.n	dd57c <__copybits+0x32>
   dd576:	f842 3b04 	str.w	r3, [r2], #4
   dd57a:	e7fa      	b.n	dd572 <__copybits+0x28>
   dd57c:	bd10      	pop	{r4, pc}

000dd57e <__any_on>:
   dd57e:	f100 0214 	add.w	r2, r0, #20
   dd582:	6900      	ldr	r0, [r0, #16]
   dd584:	114b      	asrs	r3, r1, #5
   dd586:	4298      	cmp	r0, r3
   dd588:	b510      	push	{r4, lr}
   dd58a:	db0c      	blt.n	dd5a6 <__any_on+0x28>
   dd58c:	dd0c      	ble.n	dd5a8 <__any_on+0x2a>
   dd58e:	f011 011f 	ands.w	r1, r1, #31
   dd592:	d009      	beq.n	dd5a8 <__any_on+0x2a>
   dd594:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dd598:	fa24 f001 	lsr.w	r0, r4, r1
   dd59c:	fa00 f101 	lsl.w	r1, r0, r1
   dd5a0:	428c      	cmp	r4, r1
   dd5a2:	d10c      	bne.n	dd5be <__any_on+0x40>
   dd5a4:	e000      	b.n	dd5a8 <__any_on+0x2a>
   dd5a6:	4603      	mov	r3, r0
   dd5a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dd5ac:	4293      	cmp	r3, r2
   dd5ae:	d904      	bls.n	dd5ba <__any_on+0x3c>
   dd5b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dd5b4:	2900      	cmp	r1, #0
   dd5b6:	d0f9      	beq.n	dd5ac <__any_on+0x2e>
   dd5b8:	e001      	b.n	dd5be <__any_on+0x40>
   dd5ba:	2000      	movs	r0, #0
   dd5bc:	bd10      	pop	{r4, pc}
   dd5be:	2001      	movs	r0, #1
   dd5c0:	bd10      	pop	{r4, pc}

000dd5c2 <_calloc_r>:
   dd5c2:	b538      	push	{r3, r4, r5, lr}
   dd5c4:	fb02 f401 	mul.w	r4, r2, r1
   dd5c8:	4621      	mov	r1, r4
   dd5ca:	f7f9 ffd5 	bl	d7578 <_malloc_r>
   dd5ce:	4605      	mov	r5, r0
   dd5d0:	b118      	cbz	r0, dd5da <_calloc_r+0x18>
   dd5d2:	4622      	mov	r2, r4
   dd5d4:	2100      	movs	r1, #0
   dd5d6:	f7fd fdee 	bl	db1b6 <memset>
   dd5da:	4628      	mov	r0, r5
   dd5dc:	bd38      	pop	{r3, r4, r5, pc}

000dd5de <__env_lock>:
   dd5de:	4770      	bx	lr

000dd5e0 <__env_unlock>:
   dd5e0:	4770      	bx	lr

000dd5e2 <link_code_end>:
	...

000dd5e4 <dynalib_user>:
   dd5e4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dd5f4:	0000 0000                                   ....

000dd5f8 <_ZTVN8particle13__SPISettingsE>:
	...
   dd600:	4101 000d                                   .A..

000dd604 <_ZTV5Timer>:
	...
   dd60c:	4301 000d 4349 000d 4167 000d               .C..IC..gA..

000dd618 <_ZTV4File>:
	...
   dd620:	40fd 000d 4159 000d 41a5 000d 419f 000d     .@..YA...A...A..
   dd630:	40b7 000d 417f 000d 4179 000d 4173 000d     .@...A..yA..sA..
   dd640:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   dd650:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   dd660:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   dd670:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   dd680:	2545 3e64 2500 2573 3230 0078 6f42 3174     E%d>.%s%02x.Bot1
   dd690:	6164 0074 4343 2542 6864 6177 6600 6c69     dat.CCB%dhwa.fil
   dd6a0:	6e65 6d61 0065 6946 656c 2720 7325 2027     ename.File '%s' 
   dd6b0:	6c61 6572 6461 2079 7865 7369 7374 202c     already exists, 
   dd6c0:	6564 656c 6974 676e 6120 646e 6f20 6576     deleting and ove
   dd6d0:	7772 6972 6974 676e 5300 6174 7472 6e69     rwriting.Startin
   dd6e0:	2067 666f 6c66 616f 2064 666f 6620 6c69     g offload of fil
   dd6f0:	3a65 2520 0073 6966 656c 6f63 706d 5200     e: %s.filecomp.R
   dd700:	6165 6863 6465 6520 646e 6f20 2066 6966     eached end of fi
   dd710:	656c 203a 7325 6600 6c69 6465 6e6f 0065     le: %s.filedone.
   dd720:	6552 6563 7669 6465 6420 6e6f 2065 6f63     Received done co
   dd730:	6d6d 6e61 0064 6843 6365 736b 6d75 203a     mmand.Checksum: 
   dd740:	3025 7832 202c 3025 6433 5300 7274 6e69     %02x, %03d.Strin
   dd750:	2067 654c 3a6e 2520 2c64 4320 6568 6b63     g Len: %d, Check
   dd760:	7573 3a6d 2520 0064 575b 5241 5d4e 4d20     sum: %d.[WARN] M
   dd770:	7365 6173 6567 4320 6568 6b63 7573 206d     essage Checksum 
   dd780:	6f44 7365 4e20 746f 4d20 7461 6863 3a21     Does Not Match!:
   dd790:	2520 0073 6157 6e72 6e69 2c67 6320 6568      %s.Warning, che
   dd7a0:	6b63 7573 206d 6f64 7365 6e20 746f 6d20     cksum does not m
   dd7b0:	7461 6863 4300 2543 7332 616e 256b 7333     atch.CC%2snak%3s
   dd7c0:	6100 6b63 7300 7075 2500 2075 7525 2520     .ack.sup.%u %u %
   dd7d0:	2073 7325 5300 6174 7574 2073 7055 6164     s %s.Status Upda
   dd7e0:	6574 0021 2323 2323 2323 2323 2323 2323     te!.############
   dd7f0:	2323 2323 2323 2323 2323 2323 2323 2300     ##############.#
   dd800:	2023 2020 2020 5453 5441 5355 5520 4450     #     STATUS UPD
   dd810:	5441 2045 2020 2320 0023 2323 2020 2020     ATE    ##.##    
   dd820:	2020 4220 746f 2320 203a 3125 2064 2020        Bot #: %1d   
   dd830:	2020 2320 0023 2323 2020 2020 2020 6142        ##.##      Ba
   dd840:	7474 2520 203a 3025 6433 2020 2020 2320     tt %: %03d     #
   dd850:	0023 2323 2020 2020 544c 2045 4220 454c     #.##    LTE  BLE
   dd860:	2020 4258 6565 2020 2020 2323 2300 2023       XBee    ##.## 
   dd870:	2020 2020 6425 2020 2020 6425 2020 2020         %d    %d    
   dd880:	2520 2064 2020 2020 2323 2300 2023 4c20      %d     ##.##  L
   dd890:	7461 7469 6475 2065 6f4c 676e 7469 6475     atitude Longitud
   dd8a0:	2065 2320 0023 2323 2520 362e 2066 2e25     e  ##.## %.6f %.
   dd8b0:	6636 2320 0023 6f46 6e75 2064 2061 656e     6f ##.Found a ne
   dd8c0:	2077 6177 6574 2072 6f62 2074 4449 2500     w water bot ID.%
   dd8d0:	2075 7525 2520 2066 6625 6e00 6b61 7000     u %u %f %f.nak.p
   dd8e0:	7374 5200 7761 7257 7469 2e65 7874 0074     ts.RawWrite.txt.
   dd8f0:	544c 0045 4258 6565 4200 756c 7465 6f6f     LTE.XBee.Bluetoo
   dd900:	6874 4e00 7765 7320 7274 6e69 2067 7266     th.New string fr
   dd910:	6d6f 2520 3a73 0020 495b 464e 5d4f 5220     om %s: .[INFO] R
   dd920:	6365 6965 6576 2064 544c 2045 654d 7373     eceived LTE Mess
   dd930:	6761 3a65 2520 0073 654e 2077 5442 4320     age: %s.New BT C
   dd940:	6d6f 616d 646e 203a 5b00 4e49 4f46 205d     ommand: .[INFO] 
   dd950:	6552 6563 7669 6465 4220 454c 4d20 7365     Received BLE Mes
   dd960:	6173 6567 203a 7325 4e00 7765 5820 6542     sage: %s.New XBe
   dd970:	2065 6f43 6d6d 6e61 3a64 5b00 4e49 4f46     e Command:.[INFO
   dd980:	205d 6552 6563 7669 6465 5820 6542 2065     ] Received XBee 
   dd990:	654d 7373 6761 3a65 2520 0073 6f43 6e6e     Message: %s.Conn
   dd9a0:	6365 6574 2064 6f74 4220 746f 2520 0064     ected to Bot %d.
   dd9b0:	4343 4241 7768 0064 3025 6432 3025 6432     CCABhwd.%02d%02d
   dd9c0:	3025 6434 3025 6432 3025 6432 3025 6432     %04d%02d%02d%02d
   dd9d0:	5700 7461 7265 6f42 0074 4c5f 474f 742e     .WaterBot._LOG.t
   dd9e0:	7478 4500 7272 726f 203a 6f63 6c75 2064     xt.Error: could 
   dd9f0:	6f6e 2074 6f63 6e6e 6365 2074 6f74 5320     not connect to S
   dda00:	2044 6163 6472 0021 002f 7245 6f72 2c72     D card!./.Error,
   dda10:	6320 756f 646c 6e20 746f 6f20 6570 206e      could not open 
   dda20:	6f72 746f 6420 7269 6365 6f74 7972 6f20     root directory o
   dda30:	206e 4453 4320 7261 2e64 4920 2073 7469     n SD Card. Is it
   dda40:	6920 736e 7265 6574 3f64 4300 4243 6425      inserted?.CCB%d
   dda50:	6d64 0070 6552 7571 7365 6574 2064 4453     dmp.Requested SD
   dda60:	4320 7261 2064 6144 6174 6620 6f72 206d      Card Data from 
   dda70:	6f42 2074 6425 4f20 6576 2072 4c42 0a45     Bot %d Over BLE.
   dda80:	4300 7275 6572 746e 796c 6320 6e6f 656e     .Currently conne
   dda90:	7463 6465 7420 206f 6f42 2074 6625 202c     cted to Bot %f, 
   ddaa0:	656e 6465 7420 206f 6f63 6e6e 6365 2074     need to connect 
   ddab0:	6f74 4220 746f 2520 0064 7553 6363 7365     to Bot %d.Succes
   ddac0:	6673 6c75 796c 6320 6e6f 656e 7463 6465     sfully connected
   ddad0:	7420 206f 6f42 2074 6425 5300 6174 7472      to Bot %d.Start
   ddae0:	6e69 2067 6966 656c 7420 6172 736e 6566     ing file transfe
   ddaf0:	2072 7266 6d6f 4220 746f 2520 0064 6946     r from Bot %d.Fi
   ddb00:	696e 6873 6465 7420 6172 736e 6566 7272     nished transferr
   ddb10:	6e69 2067 6966 656c 6620 6f72 206d 6f42     ing file from Bo
   ddb20:	2074 6425 4300 4143 7342 6370 2542 0064     t %d.CCABspcB%d.
   ddb30:	4343 4241 7073 4e63 0042 4343 3142 7470     CCABspcNB.CCB1pt
   ddb40:	6273 6769 6f62 0074 3462 3032 3936 3031     sbigbot.b4206910
   ddb50:	642d 3463 2d62 3735 3334 632d 6238 2d31     -dc4b-5743-c8b1-
   ddb60:	3239 3064 3765 3135 3238 3062 6200 3234     92d0e75182b0.b42
   ddb70:	3630 3139 2d32 6364 6234 352d 3437 2d33     06912-dc4b-5743-
   ddb80:	3863 3162 392d 6432 6530 3537 3831 6232     c8b1-92d0e75182b
   ddb90:	0030 3462 3032 3936 3331 642d 3463 2d62     0.b4206913-dc4b-
   ddba0:	3735 3334 632d 6238 2d31 3239 3064 3765     5743-c8b1-92d0e7
   ddbb0:	3135 3238 3062 6200 3234 3630 3139 2d34     5182b0.b4206914-
   ddbc0:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   ddbd0:	6432 6530 3537 3831 6232 0030               2d0e75182b0.

000ddbdc <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   ddbe4:	75c3 000d 75c9 000d 89bd 000d 75f3 000d     .u...u.......u..
   ddbf4:	75c5 000d                                   .u..

000ddbf8 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   ddc00:	75bd 000d 75d7 000d 8b79 000d 75f7 000d     .u...u..y....u..
   ddc10:	75bf 000d                                   .u..

000ddc14 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   ddc1c:	75b7 000d 75e5 000d 8059 000d 75fb 000d     .u...u..Y....u..
   ddc2c:	75b9 000d 6977 6972 676e 622e 656c 5300     .u..wiring.ble.S
   ddc3c:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   ddc4c:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   ddc5c:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   ddc6c:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   ddc7c:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   ddc8c:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   ddc9c:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   ddcac:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   ddcbc:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   ddccc:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   ddcdc:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   ddcec:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   ddcfc:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   ddd0c:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   ddd1c:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   ddd2c:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   ddd3c:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   ddd4c:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   ddd5c:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   ddd6c:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   ddd7c:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   ddd8c:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   ddd9c:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   dddac:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   dddbc:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   dddcc:	6465 002e                                   ed..

000dddd0 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dddd0:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000ddde0 <_ZTVN5spark13CellularClassE>:
	...
   ddde8:	8d23 000d 8d19 000d 8d0f 000d 8cc5 000d     #...............
   dddf8:	8d03 000d 8cf7 000d 8ceb 000d 8ce3 000d     ................
   dde08:	8cd9 000d 8ccf 000d 96dd 000d               ............

000dde14 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dde1c:	8d5d 000d 8d63 000d 8da7 000d 8d71 000d     ]...c.......q...
   dde2c:	8d5f 000d                                   _...

000dde30 <_ZTVN5spark13EthernetClassE>:
	...
   dde38:	9363 000d 9359 000d 934f 000d 9345 000d     c...Y...O...E...
   dde48:	9339 000d 932d 000d 9321 000d 9319 000d     9...-...!.......
   dde58:	930f 000d 9305 000d 96dd 000d               ............

000dde64 <_ZTV7TwoWire>:
	...
   dde6c:	9381 000d 93cb 000d 93a3 000d 9383 000d     ................
   dde7c:	93ab 000d 93b3 000d 93bb 000d 93c3 000d     ................

000dde8c <_ZTV9IPAddress>:
	...
   dde94:	9415 000d 9405 000d 9407 000d 6162 6475     ............baud
   ddea4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   ddeb4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   ddec4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   dded4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   ddee4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   ddef4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   ddf04:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   ddf14:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   ddf24:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   ddf34:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   ddf44:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   ddf54:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   ddf64:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   ddf74:	696e 0063 6c61 006c                         nic.all.

000ddf7c <_ZTVN5spark9MeshClassE>:
	...
   ddf84:	9557 000d 954d 000d 9543 000d 9539 000d     W...M...C...9...
   ddf94:	952d 000d 9521 000d 9515 000d 950d 000d     -...!...........
   ddfa4:	9503 000d 94f9 000d 96dd 000d               ............

000ddfb0 <_ZTVN5spark12NetworkClassE>:
	...
   ddfb8:	9675 000d 967f 000d 9689 000d 9693 000d     u...............
   ddfc8:	969d 000d 96a9 000d 96b5 000d 96c1 000d     ................
   ddfd8:	96c9 000d 96d3 000d 96dd 000d               ............

000ddfe4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddfe4:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   ddff4:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   de004:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000de014 <_ZTV11USARTSerial>:
	...
   de01c:	9df1 000d 9e41 000d 9e4f 000d 97bd 000d     ....A...O.......
   de02c:	9e05 000d 9e27 000d 9e13 000d 9e3b 000d     ....'.......;...
   de03c:	9df3 000d 9df7 000d                         ........

000de044 <_ZTV9USBSerial>:
	...
   de04c:	9ef9 000d 9f49 000d 9f57 000d 97bd 000d     ....I...W.......
   de05c:	9f35 000d 9efb 000d 9f11 000d 9f43 000d     5...........C...
   de06c:	9f27 000d 9ef5 000d                         '.......

000de074 <_ZSt7nothrow>:
	...

000de075 <_ctype_>:
   de075:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de085:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de095:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de0a5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de0b5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de0c5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de0d5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de0e5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de0f5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de178 <__sf_fake_stdin>:
	...

000de198 <__sf_fake_stdout>:
	...

000de1b8 <__sf_fake_stderr>:
	...
   de1d8:	0043 4f50 4953 0058                         C.POSIX.

000de1e0 <__month_lengths>:
   de1e0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   de1f0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   de200:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   de210:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   de220:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   de230:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000de240 <fpi.5344>:
   de240:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de250:	0000 0000                                   ....

000de254 <fpinan.5380>:
   de254:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   de264:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   de274:	0000 0000                                   ....

000de278 <tinytens>:
   de278:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de288:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de298:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   de2a8:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   de2b8:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   de2c8:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   de2d8:	2575 006e 0000 0000                         u%n.....

000de2e0 <__mprec_tens>:
   de2e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de2f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de300:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de310:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de320:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de330:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de340:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de350:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de360:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de370:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de380:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de390:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de3a0:	9db4 79d9 7843 44ea                         ...yCx.D

000de3a8 <__mprec_bigtens>:
   de3a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de3b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de3c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de3d0 <p05.5387>:
   de3d0:	0005 0000 0019 0000 007d 0000               ........}...

000de3dc <link_const_variable_data_end>:
   de3dc:	000d547d 	.word	0x000d547d
   de3e0:	000d56e9 	.word	0x000d56e9
   de3e4:	000d5df9 	.word	0x000d5df9
   de3e8:	000d64f9 	.word	0x000d64f9
   de3ec:	000d651d 	.word	0x000d651d
   de3f0:	000d6521 	.word	0x000d6521
   de3f4:	000d6845 	.word	0x000d6845
   de3f8:	000d6849 	.word	0x000d6849
   de3fc:	000d684d 	.word	0x000d684d
   de400:	000d6851 	.word	0x000d6851
   de404:	000d6855 	.word	0x000d6855
   de408:	000d6d8f 	.word	0x000d6d8f
   de40c:	000d6d93 	.word	0x000d6d93
   de410:	000d6d97 	.word	0x000d6d97
   de414:	000d6e3d 	.word	0x000d6e3d
   de418:	000d6e41 	.word	0x000d6e41
   de41c:	000d6e45 	.word	0x000d6e45
   de420:	000d8c9d 	.word	0x000d8c9d
   de424:	000d8d2d 	.word	0x000d8d2d
   de428:	000d936d 	.word	0x000d936d
   de42c:	000d94e9 	.word	0x000d94e9
   de430:	000d9625 	.word	0x000d9625
   de434:	000d97a9 	.word	0x000d97a9
   de438:	000d98e5 	.word	0x000d98e5
   de43c:	000d9c51 	.word	0x000d9c51
   de440:	000d9ddd 	.word	0x000d9ddd
   de444:	000da2c5 	.word	0x000da2c5
   de448:	000da389 	.word	0x000da389
   de44c:	000da40d 	.word	0x000da40d
   de450:	000da491 	.word	0x000da491

000de454 <link_constructors_end>:
	...
