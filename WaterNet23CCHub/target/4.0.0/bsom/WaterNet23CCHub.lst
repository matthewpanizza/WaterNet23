
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000dfd0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1ff0  000c1ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2014  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da88  000c2018  0002da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b88  2003dc68  2003dc68  0003dc68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c21f8  000c21f8  000321f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2220  000c2220  00032220  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001c346c  00000000  00000000  00032224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001dfdc  00000000  00000000  001f5690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000581fd  00000000  00000000  0021366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b28  00000000  00000000  0026b869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e038  00000000  00000000  0026f391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004caa8  00000000  00000000  0027d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0006c406  00000000  00000000  002c9e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ba1a  00000000  00000000  00336277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bce8  00000000  00000000  00481c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a f8ea 	bl	be20a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a f90c 	bl	be25a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da88 	.word	0x2003da88
   b404c:	000c2018 	.word	0x000c2018
   b4050:	2003dc68 	.word	0x2003dc68
   b4054:	2003dc68 	.word	0x2003dc68
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f009 f8c5 	bl	bd1f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1fc4 	.word	0x000c1fc4
   b4080:	000c1fe8 	.word	0x000c1fe8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bdd8 	b.w	b5c38 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fa85 	bl	b6598 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f009 b865 	b.w	bd160 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 bb69 	b.w	b976c <malloc>

000b409a <_Znaj>:
   b409a:	f005 bb67 	b.w	b976c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 bb6d 	b.w	b977c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fa7a 	bl	b95a4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9255 	.word	0x000b9255
   b40b8:	000c0390 	.word	0x000c0390

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b01      	ldr	r3, [pc, #4]	; (b40f0 <_Z12actionTimer5v+0x8>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40ee:	4770      	bx	lr
   b40f0:	2003dedc 	.word	0x2003dedc

000b40f4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f4:	4770      	bx	lr

000b40f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40f6:	b510      	push	{r4, lr}
  }
   b40f8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40fa:	4604      	mov	r4, r0
  }
   b40fc:	f7ff ffcf 	bl	b409e <_ZdlPvj>
   b4100:	4620      	mov	r0, r4
   b4102:	bd10      	pop	{r4, pc}

000b4104 <_ZN4FileD0Ev>:
   b4104:	b510      	push	{r4, lr}
   b4106:	2134      	movs	r1, #52	; 0x34
   b4108:	4604      	mov	r4, r0
   b410a:	f7ff ffc8 	bl	b409e <_ZdlPvj>
   b410e:	4620      	mov	r0, r4
   b4110:	bd10      	pop	{r4, pc}

000b4112 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b4112:	3010      	adds	r0, #16
   b4114:	f002 bd22 	b.w	b6b5c <_ZN7FatFile4syncEv>

000b4118 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4118:	3010      	adds	r0, #16
   b411a:	f002 bc40 	b.w	b699e <_ZN7FatFile4peekEv>

000b411e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b411e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4120:	2201      	movs	r2, #1
   b4122:	f10d 0107 	add.w	r1, sp, #7
   b4126:	3010      	adds	r0, #16
   b4128:	f002 fb8b 	bl	b6842 <_ZN7FatFile4readEPvj>
   b412c:	2801      	cmp	r0, #1
   b412e:	bf0c      	ite	eq
   b4130:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4134:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4138:	b003      	add	sp, #12
   b413a:	f85d fb04 	ldr.w	pc, [sp], #4

000b413e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b413e:	3010      	adds	r0, #16
   b4140:	f002 bda6 	b.w	b6c90 <_ZN7FatFile5writeEPKvj>

000b4144 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4144:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4146:	2201      	movs	r2, #1
   b4148:	f88d 1007 	strb.w	r1, [sp, #7]
   b414c:	3010      	adds	r0, #16
   b414e:	f10d 0107 	add.w	r1, sp, #7
   b4152:	f002 fd9d 	bl	b6c90 <_ZN7FatFile5writeEPKvj>
  }
   b4156:	b003      	add	sp, #12
   b4158:	f85d fb04 	ldr.w	pc, [sp], #4

000b415c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b415c:	6943      	ldr	r3, [r0, #20]
   b415e:	b113      	cbz	r3, b4166 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4160:	6983      	ldr	r3, [r0, #24]
   b4162:	300c      	adds	r0, #12
   b4164:	4718      	bx	r3
            callback();
        }
    }
   b4166:	4770      	bx	lr

000b4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b416a:	2100      	movs	r1, #0
   b416c:	4604      	mov	r4, r0
   b416e:	4608      	mov	r0, r1
   b4170:	f005 f810 	bl	b9194 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4176:	4620      	mov	r0, r4
   b4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b417c:	f005 f822 	bl	b91c4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4182:	b10c      	cbz	r4, b4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4184:	2301      	movs	r3, #1
   b4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4188:	2100      	movs	r1, #0
   b418a:	2001      	movs	r0, #1
   b418c:	f005 f802 	bl	b9194 <os_thread_scheduling>
            }
        }
        if (t) {
   b4190:	b12c      	cbz	r4, b419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4192:	6823      	ldr	r3, [r4, #0]
   b4194:	4620      	mov	r0, r4
   b4196:	689b      	ldr	r3, [r3, #8]
   b4198:	4798      	blx	r3
            t->running = false;
   b419a:	2300      	movs	r3, #0
   b419c:	7123      	strb	r3, [r4, #4]
        }
    }
   b419e:	b002      	add	sp, #8
   b41a0:	bd10      	pop	{r4, pc}
	...

000b41a4 <_Z10entHandlerv>:
    MenuItems.push_back(sentryToggle);

    SelectedItem = &MenuItems.at(menuItem);
}

void entHandler(){
   b41a4:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41a6:	4c0e      	ldr	r4, [pc, #56]	; (b41e0 <_Z10entHandlerv+0x3c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a8:	f005 f864 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
   b41ac:	6823      	ldr	r3, [r4, #0]
   b41ae:	1ac0      	subs	r0, r0, r3
   b41b0:	2863      	cmp	r0, #99	; 0x63
   b41b2:	d913      	bls.n	b41dc <_Z10entHandlerv+0x38>
    Serial.println("Enter trigger");
   b41b4:	f008 ff8c 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b41b8:	490a      	ldr	r1, [pc, #40]	; (b41e4 <_Z10entHandlerv+0x40>)
   b41ba:	f008 fb94 	bl	bc8e6 <_ZN5Print7printlnEPKc>
   b41be:	f005 f859 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
    
    redrawMenu = true;  
   b41c2:	4b09      	ldr	r3, [pc, #36]	; (b41e8 <_Z10entHandlerv+0x44>)
    selectingBots = !selectingBots;
   b41c4:	4909      	ldr	r1, [pc, #36]	; (b41ec <_Z10entHandlerv+0x48>)
    debounceTime = millis();
   b41c6:	6020      	str	r0, [r4, #0]
    redrawMenu = true;  
   b41c8:	2201      	movs	r2, #1
   b41ca:	701a      	strb	r2, [r3, #0]
    selectingBots = !selectingBots;
   b41cc:	780b      	ldrb	r3, [r1, #0]
   b41ce:	4053      	eors	r3, r2
   b41d0:	700b      	strb	r3, [r1, #0]
    if(modifiedValue) updateControl = true;
   b41d2:	4b07      	ldr	r3, [pc, #28]	; (b41f0 <_Z10entHandlerv+0x4c>)
   b41d4:	781b      	ldrb	r3, [r3, #0]
   b41d6:	b10b      	cbz	r3, b41dc <_Z10entHandlerv+0x38>
   b41d8:	4b06      	ldr	r3, [pc, #24]	; (b41f4 <_Z10entHandlerv+0x50>)
   b41da:	701a      	strb	r2, [r3, #0]
}
   b41dc:	bd10      	pop	{r4, pc}
   b41de:	bf00      	nop
   b41e0:	2003dd50 	.word	0x2003dd50
   b41e4:	000c03a5 	.word	0x000c03a5
   b41e8:	2003da88 	.word	0x2003da88
   b41ec:	2003da89 	.word	0x2003da89
   b41f0:	2003ddf7 	.word	0x2003ddf7
   b41f4:	2003e636 	.word	0x2003e636

000b41f8 <_Z8jHandlerv>:
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
    redrawMenu = true;  
}

void jHandler(){
   b41f8:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41fa:	4c09      	ldr	r4, [pc, #36]	; (b4220 <_Z8jHandlerv+0x28>)
   b41fc:	f005 f83a 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
   b4200:	6823      	ldr	r3, [r4, #0]
   b4202:	1ac0      	subs	r0, r0, r3
   b4204:	2863      	cmp	r0, #99	; 0x63
   b4206:	d909      	bls.n	b421c <_Z8jHandlerv+0x24>
   b4208:	f005 f834 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b420c:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b420e:	f008 ff5f 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b4216:	4903      	ldr	r1, [pc, #12]	; (b4224 <_Z8jHandlerv+0x2c>)
   b4218:	f008 bb65 	b.w	bc8e6 <_ZN5Print7printlnEPKc>
   b421c:	bd10      	pop	{r4, pc}
   b421e:	bf00      	nop
   b4220:	2003dd50 	.word	0x2003dd50
   b4224:	000c03b3 	.word	0x000c03b3

000b4228 <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b4228:	4b0b      	ldr	r3, [pc, #44]	; (b4258 <_Z13actionTimer60v+0x30>)
   b422a:	e9d3 3000 	ldrd	r3, r0, [r3]
    bool reqLTEStatus = false;
   b422e:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4230:	4283      	cmp	r3, r0
   b4232:	d005      	beq.n	b4240 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4234:	6b19      	ldr	r1, [r3, #48]	; 0x30
            reqLTEStatus = true;
   b4236:	2925      	cmp	r1, #37	; 0x25
   b4238:	bf28      	it	cs
   b423a:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b423c:	3334      	adds	r3, #52	; 0x34
      {
	++_M_current;
	return *this;
   b423e:	e7f7      	b.n	b4230 <_Z13actionTimer60v+0x8>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b4240:	b142      	cbz	r2, b4254 <_Z13actionTimer60v+0x2c>
   b4242:	4a06      	ldr	r2, [pc, #24]	; (b425c <_Z13actionTimer60v+0x34>)
   b4244:	7813      	ldrb	r3, [r2, #0]
   b4246:	2b18      	cmp	r3, #24
   b4248:	d804      	bhi.n	b4254 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b424a:	3301      	adds	r3, #1
   b424c:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b424e:	4b04      	ldr	r3, [pc, #16]	; (b4260 <_Z13actionTimer60v+0x38>)
   b4250:	2201      	movs	r2, #1
   b4252:	701a      	strb	r2, [r3, #0]
}
   b4254:	4770      	bx	lr
   b4256:	bf00      	nop
   b4258:	2003dcb4 	.word	0x2003dcb4
   b425c:	2003dc88 	.word	0x2003dc88
   b4260:	2003e635 	.word	0x2003e635

000b4264 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4264:	2a01      	cmp	r2, #1
   b4266:	d102      	bne.n	b426e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4268:	6001      	str	r1, [r0, #0]
      }
   b426a:	2000      	movs	r0, #0
   b426c:	4770      	bx	lr
	  switch (__op)
   b426e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4270:	bf04      	itt	eq
   b4272:	680b      	ldreq	r3, [r1, #0]
   b4274:	6003      	streq	r3, [r0, #0]
	      break;
   b4276:	e7f8      	b.n	b426a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4278 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4278:	6803      	ldr	r3, [r0, #0]
   b427a:	4718      	bx	r3

000b427c <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b427c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b427e:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4280:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4282:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4284:	b130      	cbz	r0, b4294 <_ZN5Timer5startEj.isra.0+0x18>
   b4286:	2300      	movs	r3, #0
   b4288:	e9cd 3300 	strd	r3, r3, [sp]
   b428c:	461a      	mov	r2, r3
   b428e:	2102      	movs	r1, #2
   b4290:	f004 ffa0 	bl	b91d4 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4294:	68a0      	ldr	r0, [r4, #8]
   b4296:	b130      	cbz	r0, b42a6 <_ZN5Timer5startEj.isra.0+0x2a>
   b4298:	2300      	movs	r3, #0
   b429a:	e9cd 5300 	strd	r5, r3, [sp]
   b429e:	461a      	mov	r2, r3
   b42a0:	4619      	mov	r1, r3
   b42a2:	f004 ff97 	bl	b91d4 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42a6:	b003      	add	sp, #12
   b42a8:	bd30      	pop	{r4, r5, pc}

000b42aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42aa:	b40e      	push	{r1, r2, r3}
   b42ac:	b503      	push	{r0, r1, lr}
   b42ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42b8:	f008 fb3d 	bl	bc936 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42bc:	b002      	add	sp, #8
   b42be:	f85d eb04 	ldr.w	lr, [sp], #4
   b42c2:	b003      	add	sp, #12
   b42c4:	4770      	bx	lr
	...

000b42c8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42ca:	4604      	mov	r4, r0
   b42cc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42ce:	7922      	ldrb	r2, [r4, #4]
   b42d0:	68a3      	ldr	r3, [r4, #8]
   b42d2:	b132      	cbz	r2, b42e2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42d4:	b9a3      	cbnz	r3, b4300 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42d6:	490b      	ldr	r1, [pc, #44]	; (b4304 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42d8:	b002      	add	sp, #8
   b42da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42de:	f008 baef 	b.w	bc8c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42e2:	4a09      	ldr	r2, [pc, #36]	; (b4308 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b42e4:	7b26      	ldrb	r6, [r4, #12]
   b42e6:	4d09      	ldr	r5, [pc, #36]	; (b430c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b42e8:	4909      	ldr	r1, [pc, #36]	; (b4310 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b42ea:	7b64      	ldrb	r4, [r4, #13]
   b42ec:	2e01      	cmp	r6, #1
   b42ee:	bf18      	it	ne
   b42f0:	4629      	movne	r1, r5
   b42f2:	e9cd 1400 	strd	r1, r4, [sp]
   b42f6:	4907      	ldr	r1, [pc, #28]	; (b4314 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b42f8:	f7ff ffd7 	bl	b42aa <_ZN5Print6printfEPKcz>
  }
   b42fc:	b002      	add	sp, #8
   b42fe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4300:	4a05      	ldr	r2, [pc, #20]	; (b4318 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4302:	e7ef      	b.n	b42e4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4304:	000c03d5 	.word	0x000c03d5
   b4308:	000c0907 	.word	0x000c0907
   b430c:	000c03d1 	.word	0x000c03d1
   b4310:	000c03cd 	.word	0x000c03cd
   b4314:	000c03eb 	.word	0x000c03eb
   b4318:	000c03c4 	.word	0x000c03c4

000b431c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b431c:	b40e      	push	{r1, r2, r3}
   b431e:	b503      	push	{r0, r1, lr}
   b4320:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4322:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4324:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4328:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b432a:	f008 fb04 	bl	bc936 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b432e:	b002      	add	sp, #8
   b4330:	f85d eb04 	ldr.w	lr, [sp], #4
   b4334:	b003      	add	sp, #12
   b4336:	4770      	bx	lr

000b4338 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4338:	b510      	push	{r4, lr}
      if (_M_manager)
   b433a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b433c:	4604      	mov	r4, r0
      if (_M_manager)
   b433e:	b113      	cbz	r3, b4346 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4340:	2203      	movs	r2, #3
   b4342:	4601      	mov	r1, r0
   b4344:	4798      	blx	r3
    }
   b4346:	4620      	mov	r0, r4
   b4348:	bd10      	pop	{r4, pc}
	...

000b434c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b434c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b434e:	4b13      	ldr	r3, [pc, #76]	; (b439c <_ZN5TimerD1Ev+0x50>)
   b4350:	6003      	str	r3, [r0, #0]
   b4352:	4604      	mov	r4, r0
        if (handle) {
   b4354:	6880      	ldr	r0, [r0, #8]
   b4356:	b1c8      	cbz	r0, b438c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4358:	2500      	movs	r5, #0
   b435a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b435e:	e9cd 3500 	strd	r3, r5, [sp]
   b4362:	2102      	movs	r1, #2
   b4364:	462b      	mov	r3, r5
   b4366:	462a      	mov	r2, r5
   b4368:	f004 ff34 	bl	b91d4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b436c:	68a0      	ldr	r0, [r4, #8]
   b436e:	4629      	mov	r1, r5
   b4370:	f004 ff60 	bl	b9234 <os_timer_set_id>
            while (running) {
   b4374:	7923      	ldrb	r3, [r4, #4]
   b4376:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b437a:	b113      	cbz	r3, b4382 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b437c:	f004 ff02 	bl	b9184 <os_thread_yield>
            while (running) {
   b4380:	e7f8      	b.n	b4374 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4382:	68a0      	ldr	r0, [r4, #8]
   b4384:	4629      	mov	r1, r5
   b4386:	f004 ff15 	bl	b91b4 <os_timer_destroy>
            handle = nullptr;
   b438a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b438c:	f104 000c 	add.w	r0, r4, #12
   b4390:	f7ff ffd2 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    }
   b4394:	4620      	mov	r0, r4
   b4396:	b003      	add	sp, #12
   b4398:	bd30      	pop	{r4, r5, pc}
   b439a:	bf00      	nop
   b439c:	000c0b74 	.word	0x000c0b74

000b43a0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43a0:	b510      	push	{r4, lr}
   b43a2:	4604      	mov	r4, r0
    }
   b43a4:	f7ff ffd2 	bl	b434c <_ZN5TimerD1Ev>
   b43a8:	4620      	mov	r0, r4
   b43aa:	211c      	movs	r1, #28
   b43ac:	f7ff fe77 	bl	b409e <_ZdlPvj>
   b43b0:	4620      	mov	r0, r4
   b43b2:	bd10      	pop	{r4, pc}

000b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b43b4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b43b6:	6843      	ldr	r3, [r0, #4]
   b43b8:	3b01      	subs	r3, #1
    {
   b43ba:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b43bc:	6043      	str	r3, [r0, #4]
   b43be:	b963      	cbnz	r3, b43da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b43c0:	6803      	ldr	r3, [r0, #0]
   b43c2:	689b      	ldr	r3, [r3, #8]
   b43c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43c6:	68a3      	ldr	r3, [r4, #8]
   b43c8:	3b01      	subs	r3, #1
   b43ca:	60a3      	str	r3, [r4, #8]
   b43cc:	b92b      	cbnz	r3, b43da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b43ce:	6823      	ldr	r3, [r4, #0]
   b43d0:	4620      	mov	r0, r4
   b43d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   b43d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b43d8:	4718      	bx	r3
    }
   b43da:	bd10      	pop	{r4, pc}

000b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43de:	468c      	mov	ip, r1
   b43e0:	2500      	movs	r5, #0
   b43e2:	4914      	ldr	r1, [pc, #80]	; (b4434 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b43e4:	7105      	strb	r5, [r0, #4]
   b43e6:	4604      	mov	r4, r0
   b43e8:	6085      	str	r5, [r0, #8]
   b43ea:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43ec:	e892 0003 	ldmia.w	r2, {r0, r1}
   b43f0:	b085      	sub	sp, #20
   b43f2:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b43f4:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43f8:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b43fc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4400:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4404:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4408:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b440c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b440e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4410:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4412:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4414:	6095      	str	r5, [r2, #8]
   b4416:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4418:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b441a:	e9cd 3500 	strd	r3, r5, [sp]
   b441e:	4a06      	ldr	r2, [pc, #24]	; (b4438 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4420:	4623      	mov	r3, r4
   b4422:	4661      	mov	r1, ip
   b4424:	f104 0008 	add.w	r0, r4, #8
   b4428:	f004 febc 	bl	b91a4 <os_timer_create>
    }
   b442c:	4620      	mov	r0, r4
   b442e:	b005      	add	sp, #20
   b4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4432:	bf00      	nop
   b4434:	000c0b74 	.word	0x000c0b74
   b4438:	000b4169 	.word	0x000b4169

000b443c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b443c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b443e:	460a      	mov	r2, r1
   b4440:	4901      	ldr	r1, [pc, #4]	; (b4448 <_ZN7FatFile4openEPKci+0xc>)
   b4442:	6809      	ldr	r1, [r1, #0]
   b4444:	f002 bbc7 	b.w	b6bd6 <_ZN7FatFile4openEPS_PKci>
   b4448:	2003e63c 	.word	0x2003e63c

000b444c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b444c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b444e:	b095      	sub	sp, #84	; 0x54
   b4450:	4604      	mov	r4, r0
   b4452:	af00      	add	r7, sp, #0
   b4454:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4456:	221e      	movs	r2, #30
   b4458:	2100      	movs	r1, #0
   b445a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b445e:	f009 fefc 	bl	be25a <memset>
    memcpy(fileCommand,data,8);
   b4462:	6820      	ldr	r0, [r4, #0]
   b4464:	6861      	ldr	r1, [r4, #4]
   b4466:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b446a:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b446c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b4470:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b4472:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b4474:	d168      	bne.n	b4548 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b4476:	493e      	ldr	r1, [pc, #248]	; (b4570 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b4478:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b447c:	f009 ff71 	bl	be362 <strcmp>
   b4480:	2800      	cmp	r0, #0
   b4482:	d13e      	bne.n	b4502 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b4484:	483b      	ldr	r0, [pc, #236]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4486:	7c03      	ldrb	r3, [r0, #16]
   b4488:	b113      	cbz	r3, b4490 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b448a:	3010      	adds	r0, #16
   b448c:	f002 fb9c 	bl	b6bc8 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b4490:	4623      	mov	r3, r4
   b4492:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4496:	f104 0520 	add.w	r5, r4, #32
   b449a:	6818      	ldr	r0, [r3, #0]
   b449c:	6859      	ldr	r1, [r3, #4]
   b449e:	4614      	mov	r4, r2
   b44a0:	c403      	stmia	r4!, {r0, r1}
   b44a2:	3308      	adds	r3, #8
   b44a4:	42ab      	cmp	r3, r5
   b44a6:	4622      	mov	r2, r4
   b44a8:	d1f7      	bne.n	b449a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b44aa:	6818      	ldr	r0, [r3, #0]
   b44ac:	6020      	str	r0, [r4, #0]
   b44ae:	889b      	ldrh	r3, [r3, #4]
   b44b0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b44b2:	221e      	movs	r2, #30
   b44b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b44b8:	482f      	ldr	r0, [pc, #188]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44ba:	f009 ff9e 	bl	be3fa <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44be:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b44c0:	4a2d      	ldr	r2, [pc, #180]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44c2:	492e      	ldr	r1, [pc, #184]	; (b457c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44c4:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b44c6:	1d38      	adds	r0, r7, #4
   b44c8:	f002 fb85 	bl	b6bd6 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b44cc:	b148      	cbz	r0, b44e2 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b44ce:	f008 fdff 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b44d2:	492b      	ldr	r1, [pc, #172]	; (b4580 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b44d4:	4a28      	ldr	r2, [pc, #160]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44d6:	f7ff ff21 	bl	b431c <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b44da:	4927      	ldr	r1, [pc, #156]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44dc:	4827      	ldr	r0, [pc, #156]	; (b457c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b44de:	f002 fbc6 	bl	b6c6e <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b44e2:	f008 fdf5 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b44e6:	4a24      	ldr	r2, [pc, #144]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44e8:	4926      	ldr	r1, [pc, #152]	; (b4584 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b44ea:	f7ff ff17 	bl	b431c <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b44ee:	4922      	ldr	r1, [pc, #136]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44f0:	4825      	ldr	r0, [pc, #148]	; (b4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b44f2:	f244 2202 	movw	r2, #16898	; 0x4202
   b44f6:	f7ff ffa1 	bl	b443c <_ZN7FatFile4openEPKci>
}
   b44fa:	3754      	adds	r7, #84	; 0x54
   b44fc:	46b5      	mov	sp, r6
   b44fe:	46bd      	mov	sp, r7
   b4500:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4502:	4922      	ldr	r1, [pc, #136]	; (b458c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4504:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4508:	f009 ff2b 	bl	be362 <strcmp>
   b450c:	b968      	cbnz	r0, b452a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b450e:	f008 fddf 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4512:	4a19      	ldr	r2, [pc, #100]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4514:	491e      	ldr	r1, [pc, #120]	; (b4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4516:	f7ff ff01 	bl	b431c <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b451a:	4b16      	ldr	r3, [pc, #88]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b451c:	7c1b      	ldrb	r3, [r3, #16]
   b451e:	2b00      	cmp	r3, #0
   b4520:	d0eb      	beq.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4522:	4819      	ldr	r0, [pc, #100]	; (b4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4524:	f002 fb50 	bl	b6bc8 <_ZN7FatFile5closeEv>
   b4528:	e7e7      	b.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b452a:	491a      	ldr	r1, [pc, #104]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b452c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4530:	f009 ff17 	bl	be362 <strcmp>
   b4534:	b940      	cbnz	r0, b4548 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4536:	f008 fdcb 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b453a:	4917      	ldr	r1, [pc, #92]	; (b4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b453c:	f008 f9d3 	bl	bc8e6 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4540:	4b16      	ldr	r3, [pc, #88]	; (b459c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4542:	2201      	movs	r2, #1
   b4544:	701a      	strb	r2, [r3, #0]
   b4546:	e7e8      	b.n	b451a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4548:	1deb      	adds	r3, r5, #7
   b454a:	f023 0307 	bic.w	r3, r3, #7
   b454e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4552:	462a      	mov	r2, r5
   b4554:	4621      	mov	r1, r4
   b4556:	4668      	mov	r0, sp
   b4558:	f009 fe57 	bl	be20a <memcpy>
    myFile.print(dataStr);
   b455c:	4669      	mov	r1, sp
   b455e:	4805      	ldr	r0, [pc, #20]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b4560:	f008 f9ae 	bl	bc8c0 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b4564:	f008 fdb4 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4568:	4669      	mov	r1, sp
   b456a:	f008 f9bc 	bl	bc8e6 <_ZN5Print7printlnEPKc>
   b456e:	e7c4      	b.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4570:	000c0408 	.word	0x000c0408
   b4574:	2003ddf8 	.word	0x2003ddf8
   b4578:	2003de2c 	.word	0x2003de2c
   b457c:	2003e5ec 	.word	0x2003e5ec
   b4580:	000c0411 	.word	0x000c0411
   b4584:	000c0444 	.word	0x000c0444
   b4588:	2003de08 	.word	0x2003de08
   b458c:	000c0461 	.word	0x000c0461
   b4590:	000c046a 	.word	0x000c046a
   b4594:	000c0482 	.word	0x000c0482
   b4598:	000c048b 	.word	0x000c048b
   b459c:	2003de4a 	.word	0x2003de4a

000b45a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45a0:	b530      	push	{r4, r5, lr}
   b45a2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b45a4:	4b1b      	ldr	r3, [pc, #108]	; (b4614 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b45a6:	9300      	str	r3, [sp, #0]
   b45a8:	7913      	ldrb	r3, [r2, #4]
   b45aa:	f88d 3004 	strb.w	r3, [sp, #4]
   b45ae:	6893      	ldr	r3, [r2, #8]
   b45b0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45b2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b45b6:	8993      	ldrh	r3, [r2, #12]
   b45b8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45bc:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45be:	460a      	mov	r2, r1
   b45c0:	466b      	mov	r3, sp
   b45c2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b45c6:	4628      	mov	r0, r5
   b45c8:	f003 fa24 	bl	b7a14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b45cc:	b910      	cbnz	r0, b45d4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b45ce:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b45d0:	b005      	add	sp, #20
   b45d2:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b45d4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b45d6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b45da:	4628      	mov	r0, r5
   b45dc:	f002 faf4 	bl	b6bc8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b45e0:	2101      	movs	r1, #1
   b45e2:	4620      	mov	r0, r4
   b45e4:	f003 f8c0 	bl	b7768 <_ZN9FatVolume4initEh>
   b45e8:	4601      	mov	r1, r0
   b45ea:	b168      	cbz	r0, b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b45ec:	4621      	mov	r1, r4
   b45ee:	4628      	mov	r0, r5
   b45f0:	f002 f921 	bl	b6836 <_ZN7FatFile8openRootEP9FatVolume>
   b45f4:	2800      	cmp	r0, #0
   b45f6:	d0ea      	beq.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b45f8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b45fc:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4600:	d0e5      	beq.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4602:	4b05      	ldr	r3, [pc, #20]	; (b4618 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4604:	601d      	str	r5, [r3, #0]
    return true;
   b4606:	e7e3      	b.n	b45d0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4608:	4620      	mov	r0, r4
   b460a:	f003 f8ad 	bl	b7768 <_ZN9FatVolume4initEh>
   b460e:	2800      	cmp	r0, #0
   b4610:	d1ec      	bne.n	b45ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4612:	e7dc      	b.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4614:	000c0b60 	.word	0x000c0b60
   b4618:	2003e63c 	.word	0x2003e63c

000b461c <_ZN8WaterBotC1Ev>:
class WaterBot{
   b461c:	2200      	movs	r2, #0
   b461e:	7202      	strb	r2, [r0, #8]
   b4620:	4a05      	ldr	r2, [pc, #20]	; (b4638 <_ZN8WaterBotC1Ev+0x1c>)
   b4622:	60c2      	str	r2, [r0, #12]
   b4624:	6102      	str	r2, [r0, #16]
   b4626:	2200      	movs	r2, #0
   b4628:	6142      	str	r2, [r0, #20]
   b462a:	6182      	str	r2, [r0, #24]
   b462c:	61c2      	str	r2, [r0, #28]
   b462e:	6202      	str	r2, [r0, #32]
   b4630:	6242      	str	r2, [r0, #36]	; 0x24
   b4632:	6282      	str	r2, [r0, #40]	; 0x28
   b4634:	62c2      	str	r2, [r0, #44]	; 0x2c
   b4636:	4770      	bx	lr
   b4638:	c479c000 	.word	0xc479c000

000b463c <_Z9setupXBeev>:
void setupXBee(){
   b463c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b463e:	f008 fef3 	bl	bd428 <_Z22__fetch_global_Serial1v>
   b4642:	4908      	ldr	r1, [pc, #32]	; (b4664 <_Z9setupXBeev+0x28>)
   b4644:	f7ff fe31 	bl	b42aa <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4648:	2014      	movs	r0, #20
   b464a:	f005 f8f7 	bl	b983c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b464e:	f008 feeb 	bl	bd428 <_Z22__fetch_global_Serial1v>
   b4652:	4905      	ldr	r1, [pc, #20]	; (b4668 <_Z9setupXBeev+0x2c>)
   b4654:	f7ff fe29 	bl	b42aa <_ZN5Print6printfEPKcz>
}
   b4658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b465c:	2014      	movs	r0, #20
   b465e:	f005 b8ed 	b.w	b983c <delay>
   b4662:	bf00      	nop
   b4664:	000c0906 	.word	0x000c0906
   b4668:	000c0b19 	.word	0x000c0b19

000b466c <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b466c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4670:	b084      	sub	sp, #16
   b4672:	af02      	add	r7, sp, #8
   b4674:	4680      	mov	r8, r0
   b4676:	4691      	mov	r9, r2
   b4678:	461e      	mov	r6, r3
   b467a:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b467c:	f009 fea1 	bl	be3c2 <strlen>
   b4680:	3009      	adds	r0, #9
   b4682:	f020 0107 	bic.w	r1, r0, #7
   b4686:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b468a:	4640      	mov	r0, r8
   b468c:	f009 fe99 	bl	be3c2 <strlen>
    char outStr[strlen(dataOut)+2];
   b4690:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4692:	4929      	ldr	r1, [pc, #164]	; (b4738 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4694:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4698:	4603      	mov	r3, r0
   b469a:	4642      	mov	r2, r8
   b469c:	4620      	mov	r0, r4
   b469e:	f005 f87d 	bl	b979c <sprintf>
    if(VERBOSE) Serial.println(outStr);
   b46a2:	f008 fd15 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b46a6:	4621      	mov	r1, r4
   b46a8:	f008 f91d 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b46ac:	f1ba 0f00 	cmp.w	sl, #0
   b46b0:	d101      	bne.n	b46b6 <_Z8sendDataPKchbbb+0x4a>
   b46b2:	2d04      	cmp	r5, #4
   b46b4:	d10d      	bne.n	b46d2 <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b46b6:	4b21      	ldr	r3, [pc, #132]	; (b473c <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b46b8:	4921      	ldr	r1, [pc, #132]	; (b4740 <_Z8sendDataPKchbbb+0xd4>)
   b46ba:	781b      	ldrb	r3, [r3, #0]
   b46bc:	f88d 3000 	strb.w	r3, [sp]
   b46c0:	4638      	mov	r0, r7
   b46c2:	233c      	movs	r3, #60	; 0x3c
   b46c4:	4622      	mov	r2, r4
   b46c6:	f007 fd87 	bl	bc1d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b46ca:	6878      	ldr	r0, [r7, #4]
   b46cc:	b108      	cbz	r0, b46d2 <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b46ce:	f7ff fe71 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b46d2:	f1b9 0f00 	cmp.w	r9, #0
   b46d6:	d101      	bne.n	b46dc <_Z8sendDataPKchbbb+0x70>
   b46d8:	2d01      	cmp	r5, #1
   b46da:	d121      	bne.n	b4720 <_Z8sendDataPKchbbb+0xb4>
   b46dc:	f005 fdc8 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b46e0:	f005 fe73 	bl	ba3ca <_ZNK8particle14BleLocalDevice9connectedEv>
   b46e4:	b1e0      	cbz	r0, b4720 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b46e6:	4620      	mov	r0, r4
   b46e8:	f009 fe6b 	bl	be3c2 <strlen>
   b46ec:	3007      	adds	r0, #7
   b46ee:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b46f2:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b46f4:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b46f8:	4620      	mov	r0, r4
   b46fa:	f009 fe62 	bl	be3c2 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b46fe:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4702:	4602      	mov	r2, r0
   b4704:	4621      	mov	r1, r4
   b4706:	4648      	mov	r0, r9
   b4708:	f009 fd7f 	bl	be20a <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b470c:	4620      	mov	r0, r4
   b470e:	f009 fe58 	bl	be3c2 <strlen>
   b4712:	2300      	movs	r3, #0
   b4714:	4602      	mov	r2, r0
   b4716:	4649      	mov	r1, r9
   b4718:	480a      	ldr	r0, [pc, #40]	; (b4744 <_Z8sendDataPKchbbb+0xd8>)
   b471a:	f005 fc43 	bl	b9fa4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b471e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4720:	b90e      	cbnz	r6, b4726 <_Z8sendDataPKchbbb+0xba>
   b4722:	2d02      	cmp	r5, #2
   b4724:	d104      	bne.n	b4730 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4726:	f008 fe7f 	bl	bd428 <_Z22__fetch_global_Serial1v>
   b472a:	4621      	mov	r1, r4
   b472c:	f008 f8db 	bl	bc8e6 <_ZN5Print7printlnEPKc>
}
   b4730:	3708      	adds	r7, #8
   b4732:	46bd      	mov	sp, r7
   b4734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4738:	000c04a1 	.word	0x000c04a1
   b473c:	2003dcfc 	.word	0x2003dcfc
   b4740:	000c04a8 	.word	0x000c04a8
   b4744:	2003decc 	.word	0x2003decc

000b4748 <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b4748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b474c:	4606      	mov	r6, r0
   b474e:	b086      	sub	sp, #24
    VRead = 4095-analogRead(JOYV_ADC);
   b4750:	2010      	movs	r0, #16
   b4752:	f008 fdfa 	bl	bd34a <analogRead>
   b4756:	f5c0 677f 	rsb	r7, r0, #4080	; 0xff0
   b475a:	4605      	mov	r5, r0
   b475c:	370f      	adds	r7, #15
    HRead = analogRead(JOYH_ADC);
   b475e:	2011      	movs	r0, #17
   b4760:	f008 fdf3 	bl	bd34a <analogRead>
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4764:	f5b7 6ff9 	cmp.w	r7, #1992	; 0x7c8
   b4768:	dc35      	bgt.n	b47d6 <_Z18manualMotorControlh+0x8e>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b476a:	f5c5 6503 	rsb	r5, r5, #2096	; 0x830
        if(VSet < -90) VSet = -90;
   b476e:	4b51      	ldr	r3, [pc, #324]	; (b48b4 <_Z18manualMotorControlh+0x16c>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4770:	3506      	adds	r5, #6
   b4772:	f06f 0159 	mvn.w	r1, #89	; 0x59
   b4776:	434d      	muls	r5, r1
        if(VSet < -90) VSet = -90;
   b4778:	429d      	cmp	r5, r3
   b477a:	dc03      	bgt.n	b4784 <_Z18manualMotorControlh+0x3c>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b477c:	f2a1 710b 	subw	r1, r1, #1803	; 0x70b
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4780:	fb95 f1f1 	sdiv	r1, r5, r1
    if(HRead < JOY_MID - JOY_DEADZONE){
   b4784:	f5b0 6ff9 	cmp.w	r0, #1992	; 0x7c8
   b4788:	dc35      	bgt.n	b47f6 <_Z18manualMotorControlh+0xae>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b478a:	f46f 63f9 	mvn.w	r3, #1992	; 0x7c8
   b478e:	4418      	add	r0, r3
   b4790:	f06f 0459 	mvn.w	r4, #89	; 0x59
        if(HSet < -90) HSet = -90;
   b4794:	4b47      	ldr	r3, [pc, #284]	; (b48b4 <_Z18manualMotorControlh+0x16c>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4796:	4360      	muls	r0, r4
        if(HSet < -90) HSet = -90;
   b4798:	4298      	cmp	r0, r3
   b479a:	dc03      	bgt.n	b47a4 <_Z18manualMotorControlh+0x5c>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b479c:	f2a4 740b 	subw	r4, r4, #1803	; 0x70b
   b47a0:	fb90 f4f4 	sdiv	r4, r0, r4
    LSpeed = 90 + VSet/2;
   b47a4:	eb01 77d1 	add.w	r7, r1, r1, lsr #31
   b47a8:	f101 055a 	add.w	r5, r1, #90	; 0x5a
    if(VSet > 0){
   b47ac:	2900      	cmp	r1, #0
    LSpeed = 90 + VSet/2;
   b47ae:	f3c7 0747 	ubfx	r7, r7, #1, #8
    if(VSet > 0){
   b47b2:	b2ed      	uxtb	r5, r5
   b47b4:	dd3d      	ble.n	b4832 <_Z18manualMotorControlh+0xea>
        if(HSet > 0){
   b47b6:	0fe3      	lsrs	r3, r4, #31
   b47b8:	2c00      	cmp	r4, #0
                RSpeed = 90 - HSet/2 + VSet;
   b47ba:	4423      	add	r3, r4
        if(HSet > 0){
   b47bc:	dd2d      	ble.n	b481a <_Z18manualMotorControlh+0xd2>
                RSpeed = 90 - HSet/2 + VSet;
   b47be:	eba5 0263 	sub.w	r2, r5, r3, asr #1
            if(HSet > VSet){
   b47c2:	42a1      	cmp	r1, r4
                RSpeed = 90 - HSet/2 + VSet;
   b47c4:	b2d2      	uxtb	r2, r2
            if(HSet > VSet){
   b47c6:	da72      	bge.n	b48ae <_Z18manualMotorControlh+0x166>
                LSpeed = 90 + HSet/2 + VSet/2;
   b47c8:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   b47cc:	eb03 0364 	add.w	r3, r3, r4, asr #1
   b47d0:	b2db      	uxtb	r3, r3
                RSpeed = 90 - HSet/2 + VSet;
   b47d2:	4615      	mov	r5, r2
   b47d4:	e046      	b.n	b4864 <_Z18manualMotorControlh+0x11c>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b47d6:	f640 0337 	movw	r3, #2103	; 0x837
   b47da:	429f      	cmp	r7, r3
   b47dc:	dd09      	ble.n	b47f2 <_Z18manualMotorControlh+0xaa>
        if(VSet > 90) VSet = 90;
   b47de:	4b36      	ldr	r3, [pc, #216]	; (b48b8 <_Z18manualMotorControlh+0x170>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b47e0:	f5c5 65f9 	rsb	r5, r5, #1992	; 0x7c8
   b47e4:	215a      	movs	r1, #90	; 0x5a
   b47e6:	434d      	muls	r5, r1
        if(VSet > 90) VSet = 90;
   b47e8:	429d      	cmp	r5, r3
   b47ea:	dccb      	bgt.n	b4784 <_Z18manualMotorControlh+0x3c>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b47ec:	f240 7164 	movw	r1, #1892	; 0x764
   b47f0:	e7c6      	b.n	b4780 <_Z18manualMotorControlh+0x38>
        VSet = 0;
   b47f2:	2100      	movs	r1, #0
   b47f4:	e7c6      	b.n	b4784 <_Z18manualMotorControlh+0x3c>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b47f6:	f640 0337 	movw	r3, #2103	; 0x837
   b47fa:	4298      	cmp	r0, r3
   b47fc:	dd0b      	ble.n	b4816 <_Z18manualMotorControlh+0xce>
        if(HSet > 90) HSet = 90;
   b47fe:	4b2e      	ldr	r3, [pc, #184]	; (b48b8 <_Z18manualMotorControlh+0x170>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4800:	f6a0 0037 	subw	r0, r0, #2103	; 0x837
   b4804:	245a      	movs	r4, #90	; 0x5a
   b4806:	4360      	muls	r0, r4
        if(HSet > 90) HSet = 90;
   b4808:	4298      	cmp	r0, r3
   b480a:	dccb      	bgt.n	b47a4 <_Z18manualMotorControlh+0x5c>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b480c:	f240 7464 	movw	r4, #1892	; 0x764
   b4810:	fbb0 f4f4 	udiv	r4, r0, r4
   b4814:	e7c6      	b.n	b47a4 <_Z18manualMotorControlh+0x5c>
        HSet = 0;
   b4816:	2400      	movs	r4, #0
   b4818:	e7c4      	b.n	b47a4 <_Z18manualMotorControlh+0x5c>
            if((0-HSet) > VSet){
   b481a:	4264      	negs	r4, r4
                LSpeed = 90 + HSet/2 + VSet;
   b481c:	105a      	asrs	r2, r3, #1
            if((0-HSet) > VSet){
   b481e:	428c      	cmp	r4, r1
                LSpeed = 90 + HSet/2 + VSet;
   b4820:	eb05 0363 	add.w	r3, r5, r3, asr #1
   b4824:	b2db      	uxtb	r3, r3
            if((0-HSet) > VSet){
   b4826:	dd1d      	ble.n	b4864 <_Z18manualMotorControlh+0x11c>
                RSpeed = 90 - HSet/2 + VSet/2;
   b4828:	f107 055a 	add.w	r5, r7, #90	; 0x5a
   b482c:	1aad      	subs	r5, r5, r2
                RSpeed = 90 + HSet/2 + VSet/2;
   b482e:	b2ed      	uxtb	r5, r5
                LSpeed = 90 - HSet/2 + VSet;
   b4830:	e018      	b.n	b4864 <_Z18manualMotorControlh+0x11c>
        if(HSet > 0){
   b4832:	2c00      	cmp	r4, #0
   b4834:	dd2e      	ble.n	b4894 <_Z18manualMotorControlh+0x14c>
            if(HSet > (0-VSet)){
   b4836:	4249      	negs	r1, r1
   b4838:	42a1      	cmp	r1, r4
                LSpeed = 90 + HSet/2 + VSet/2;
   b483a:	f3c4 0847 	ubfx	r8, r4, #1, #8
            if(HSet > (0-VSet)){
   b483e:	da0d      	bge.n	b485c <_Z18manualMotorControlh+0x114>
                Serial.println("Hello World!!!!!!!");
   b4840:	f008 fc46 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4844:	491d      	ldr	r1, [pc, #116]	; (b48bc <_Z18manualMotorControlh+0x174>)
   b4846:	f008 f84e 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                LSpeed = (90 + HSet/2 + VSet/2);
   b484a:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   b484e:	4443      	add	r3, r8
                RSpeed = (90 - HSet/2 + VSet);
   b4850:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
                LSpeed = (90 + HSet/2 + VSet/2);
   b4854:	b2db      	uxtb	r3, r3
                RSpeed = (90 - HSet/2 + VSet);
   b4856:	eba5 0564 	sub.w	r5, r5, r4, asr #1
   b485a:	e7e8      	b.n	b482e <_Z18manualMotorControlh+0xe6>
                RSpeed = 90 + HSet/2 + VSet;
   b485c:	44a8      	add	r8, r5
                LSpeed = 90 + VSet;
   b485e:	462b      	mov	r3, r5
                RSpeed = 90 + HSet/2 + VSet;
   b4860:	fa5f f588 	uxtb.w	r5, r8
    sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4864:	4632      	mov	r2, r6
   b4866:	4916      	ldr	r1, [pc, #88]	; (b48c0 <_Z18manualMotorControlh+0x178>)
   b4868:	9500      	str	r5, [sp, #0]
   b486a:	a802      	add	r0, sp, #8
   b486c:	f004 ff96 	bl	b979c <sprintf>
    Serial.println(mtrStr);
   b4870:	f008 fc2e 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4874:	a902      	add	r1, sp, #8
   b4876:	f008 f836 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    sendData(mtrStr,0,true,false, false);
   b487a:	2300      	movs	r3, #0
   b487c:	9300      	str	r3, [sp, #0]
   b487e:	2201      	movs	r2, #1
   b4880:	4619      	mov	r1, r3
   b4882:	a802      	add	r0, sp, #8
   b4884:	f7ff fef2 	bl	b466c <_Z8sendDataPKchbbb>
    delay(100);
   b4888:	2064      	movs	r0, #100	; 0x64
   b488a:	f004 ffd7 	bl	b983c <delay>
}
   b488e:	b006      	add	sp, #24
   b4890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                RSpeed = 90 - HSet/2 + VSet;
   b4894:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
   b4898:	eba5 0362 	sub.w	r3, r5, r2, asr #1
            if((0-HSet) > (0-VSet)){
   b489c:	42a1      	cmp	r1, r4
                RSpeed = 90 - HSet/2 + VSet;
   b489e:	b2db      	uxtb	r3, r3
   b48a0:	ea4f 0262 	mov.w	r2, r2, asr #1
            if((0-HSet) > (0-VSet)){
   b48a4:	ddde      	ble.n	b4864 <_Z18manualMotorControlh+0x11c>
                RSpeed = 90 + HSet/2 + VSet/2;
   b48a6:	f107 055a 	add.w	r5, r7, #90	; 0x5a
   b48aa:	4415      	add	r5, r2
   b48ac:	e7bf      	b.n	b482e <_Z18manualMotorControlh+0xe6>
                LSpeed = 90 + VSet;
   b48ae:	462b      	mov	r3, r5
   b48b0:	e78f      	b.n	b47d2 <_Z18manualMotorControlh+0x8a>
   b48b2:	bf00      	nop
   b48b4:	0002a0e6 	.word	0x0002a0e6
   b48b8:	0002a08b 	.word	0x0002a08b
   b48bc:	000c04b0 	.word	0x000c04b0
   b48c0:	000c04c3 	.word	0x000c04c3

000b48c4 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b48c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b48c8:	4d0e      	ldr	r5, [pc, #56]	; (b4904 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b48ca:	4f0f      	ldr	r7, [pc, #60]	; (b4908 <_Z14XBeeLTEPairSetv+0x44>)
   b48cc:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b48d0:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b48d2:	45a0      	cmp	r8, r4
   b48d4:	d013      	beq.n	b48fe <_Z14XBeeLTEPairSetv+0x3a>
   b48d6:	7923      	ldrb	r3, [r4, #4]
   b48d8:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b48da:	f814 2b34 	ldrb.w	r2, [r4], #52
    for(WaterBot p: PairBots){
   b48de:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b48e0:	4639      	mov	r1, r7
   b48e2:	a805      	add	r0, sp, #20
   b48e4:	f004 ff5a 	bl	b979c <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b48e8:	9b03      	ldr	r3, [sp, #12]
   b48ea:	9600      	str	r6, [sp, #0]
   b48ec:	2201      	movs	r2, #1
   b48ee:	2100      	movs	r1, #0
   b48f0:	a805      	add	r0, sp, #20
   b48f2:	f7ff febb 	bl	b466c <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b48f6:	686b      	ldr	r3, [r5, #4]
   b48f8:	3b34      	subs	r3, #52	; 0x34
   b48fa:	606b      	str	r3, [r5, #4]
	return *this;
   b48fc:	e7e9      	b.n	b48d2 <_Z14XBeeLTEPairSetv+0xe>
}
   b48fe:	b008      	add	sp, #32
   b4900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4904:	2003dc98 	.word	0x2003dc98
   b4908:	000c04d4 	.word	0x000c04d4

000b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b490c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b490e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4912:	4806      	ldr	r0, [pc, #24]	; (b492c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b4914:	1b12      	subs	r2, r2, r4
   b4916:	1092      	asrs	r2, r2, #2
   b4918:	4342      	muls	r2, r0
	if (__n >= this->size())
   b491a:	4291      	cmp	r1, r2
   b491c:	d302      	bcc.n	b4924 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b491e:	4804      	ldr	r0, [pc, #16]	; (b4930 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b4920:	f008 fdae 	bl	bd480 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4924:	2034      	movs	r0, #52	; 0x34
   b4926:	fb00 4001 	mla	r0, r0, r1, r4
   b492a:	bd10      	pop	{r4, pc}
   b492c:	c4ec4ec5 	.word	0xc4ec4ec5
   b4930:	000c04dd 	.word	0x000c04dd

000b4934 <_Z8lHandlerv>:
void lHandler(){
   b4934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4938:	4c3d      	ldr	r4, [pc, #244]	; (b4a30 <_Z8lHandlerv+0xfc>)
void lHandler(){
   b493a:	b087      	sub	sp, #28
   b493c:	f004 fc9a 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4940:	6823      	ldr	r3, [r4, #0]
   b4942:	1ac0      	subs	r0, r0, r3
   b4944:	2863      	cmp	r0, #99	; 0x63
   b4946:	d970      	bls.n	b4a2a <_Z8lHandlerv+0xf6>
    Serial.println("Right trigger");
   b4948:	f008 fbc2 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b494c:	4939      	ldr	r1, [pc, #228]	; (b4a34 <_Z8lHandlerv+0x100>)
   b494e:	f007 ffca 	bl	bc8e6 <_ZN5Print7printlnEPKc>
   b4952:	f004 fc8f 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    redrawMenu = true;
   b4956:	4b38      	ldr	r3, [pc, #224]	; (b4a38 <_Z8lHandlerv+0x104>)
    debounceTime = millis();
   b4958:	6020      	str	r0, [r4, #0]
    redrawMenu = true;
   b495a:	2201      	movs	r2, #1
   b495c:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b495e:	4b37      	ldr	r3, [pc, #220]	; (b4a3c <_Z8lHandlerv+0x108>)
   b4960:	4a37      	ldr	r2, [pc, #220]	; (b4a40 <_Z8lHandlerv+0x10c>)
   b4962:	781c      	ldrb	r4, [r3, #0]
   b4964:	b18c      	cbz	r4, b498a <_Z8lHandlerv+0x56>
      : _M_current(__i) { }
   b4966:	6813      	ldr	r3, [r2, #0]
        if(botSelect != WaterBots.front().botNum){
   b4968:	4836      	ldr	r0, [pc, #216]	; (b4a44 <_Z8lHandlerv+0x110>)
   b496a:	7819      	ldrb	r1, [r3, #0]
   b496c:	7804      	ldrb	r4, [r0, #0]
   b496e:	428c      	cmp	r4, r1
   b4970:	d05b      	beq.n	b4a2a <_Z8lHandlerv+0xf6>
   b4972:	6854      	ldr	r4, [r2, #4]
            for(WaterBot ws: WaterBots){
   b4974:	429c      	cmp	r4, r3
   b4976:	d058      	beq.n	b4a2a <_Z8lHandlerv+0xf6>
   b4978:	781a      	ldrb	r2, [r3, #0]
                if(ws.botNum == botSelect) botSelect = newBotNum;
   b497a:	7805      	ldrb	r5, [r0, #0]
   b497c:	4295      	cmp	r5, r2
   b497e:	bf04      	itt	eq
   b4980:	460a      	moveq	r2, r1
   b4982:	7001      	strbeq	r1, [r0, #0]
   b4984:	3334      	adds	r3, #52	; 0x34
	return *this;
   b4986:	4611      	mov	r1, r2
   b4988:	e7f4      	b.n	b4974 <_Z8lHandlerv+0x40>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b498a:	e9d2 7800 	ldrd	r7, r8, [r2]
            if(ws.botNum == botSelect){
   b498e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b4a44 <_Z8lHandlerv+0x110>
                MenuItem curItem = *SelectedItem;
   b4992:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b4a50 <_Z8lHandlerv+0x11c>
                modifiedValue = true;
   b4996:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4a54 <_Z8lHandlerv+0x120>
        for(WaterBot ws: WaterBots){
   b499a:	45b8      	cmp	r8, r7
   b499c:	d045      	beq.n	b4a2a <_Z8lHandlerv+0xf6>
            if(ws.botNum == botSelect){
   b499e:	783a      	ldrb	r2, [r7, #0]
   b49a0:	f899 3000 	ldrb.w	r3, [r9]
   b49a4:	429a      	cmp	r2, r3
   b49a6:	d12e      	bne.n	b4a06 <_Z8lHandlerv+0xd2>
                MenuItem curItem = *SelectedItem;
   b49a8:	f8da 6000 	ldr.w	r6, [sl]
   b49ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b49ae:	466d      	mov	r5, sp
   b49b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b49b2:	e896 0003 	ldmia.w	r6, {r0, r1}
   b49b6:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b49ba:	f008 fb89 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b49be:	f10d 010d 	add.w	r1, sp, #13
   b49c2:	f007 ff90 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b49c6:	f89d 500a 	ldrb.w	r5, [sp, #10]
   b49ca:	bb75      	cbnz	r5, b4a2a <_Z8lHandlerv+0xf6>
                if(curItem.onOffSetting){
   b49cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b49d0:	b1e3      	cbz	r3, b4a0c <_Z8lHandlerv+0xd8>
                    Serial.println("Modified an On/Off Control");
   b49d2:	f008 fb7d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b49d6:	491c      	ldr	r1, [pc, #112]	; (b4a48 <_Z8lHandlerv+0x114>)
   b49d8:	f007 ff85 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = false;//!(WaterBots.at(index).*(curItem.MethodPointerBool));
   b49dc:	4621      	mov	r1, r4
   b49de:	4818      	ldr	r0, [pc, #96]	; (b4a40 <_Z8lHandlerv+0x10c>)
   b49e0:	f7ff ff94 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b49e4:	9b01      	ldr	r3, [sp, #4]
   b49e6:	54c5      	strb	r5, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b49e8:	f008 fb72 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b49ec:	4621      	mov	r1, r4
   b49ee:	4605      	mov	r5, r0
   b49f0:	4813      	ldr	r0, [pc, #76]	; (b4a40 <_Z8lHandlerv+0x10c>)
   b49f2:	f7ff ff8b 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b49f6:	4915      	ldr	r1, [pc, #84]	; (b4a4c <_Z8lHandlerv+0x118>)
   b49f8:	7802      	ldrb	r2, [r0, #0]
   b49fa:	4628      	mov	r0, r5
   b49fc:	f7ff fc8e 	bl	b431c <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4a00:	2301      	movs	r3, #1
   b4a02:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b4a06:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4a08:	3734      	adds	r7, #52	; 0x34
	return *this;
   b4a0a:	e7c6      	b.n	b499a <_Z8lHandlerv+0x66>
                    if(WaterBots.at(index).*(curItem.MethodPointer) > curItem.minVal) WaterBots.at(index).*(curItem.MethodPointer) -= curItem.stepSize;
   b4a0c:	4621      	mov	r1, r4
   b4a0e:	480c      	ldr	r0, [pc, #48]	; (b4a40 <_Z8lHandlerv+0x10c>)
   b4a10:	f7ff ff7c 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4a14:	9a00      	ldr	r2, [sp, #0]
   b4a16:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b4a1a:	5c83      	ldrb	r3, [r0, r2]
   b4a1c:	4299      	cmp	r1, r3
   b4a1e:	bf3e      	ittt	cc
   b4a20:	f89d 1008 	ldrbcc.w	r1, [sp, #8]
   b4a24:	1a5b      	subcc	r3, r3, r1
   b4a26:	5483      	strbcc	r3, [r0, r2]
   b4a28:	e7ea      	b.n	b4a00 <_Z8lHandlerv+0xcc>
}
   b4a2a:	b007      	add	sp, #28
   b4a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4a30:	2003dd50 	.word	0x2003dd50
   b4a34:	000c0527 	.word	0x000c0527
   b4a38:	2003da88 	.word	0x2003da88
   b4a3c:	2003da89 	.word	0x2003da89
   b4a40:	2003dcb4 	.word	0x2003dcb4
   b4a44:	2003dd4d 	.word	0x2003dd4d
   b4a48:	000c0535 	.word	0x000c0535
   b4a4c:	000c0550 	.word	0x000c0550
   b4a50:	2003dca4 	.word	0x2003dca4
   b4a54:	2003ddf7 	.word	0x2003ddf7

000b4a58 <_Z8rHandlerv>:
void rHandler(){
   b4a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a5c:	4c3f      	ldr	r4, [pc, #252]	; (b4b5c <_Z8rHandlerv+0x104>)
void rHandler(){
   b4a5e:	b087      	sub	sp, #28
   b4a60:	f004 fc08 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a64:	6823      	ldr	r3, [r4, #0]
   b4a66:	1ac0      	subs	r0, r0, r3
   b4a68:	2863      	cmp	r0, #99	; 0x63
   b4a6a:	d91d      	bls.n	b4aa8 <_Z8rHandlerv+0x50>
   b4a6c:	f004 fc02 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4a70:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b4a72:	f008 fb2d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4a76:	493a      	ldr	r1, [pc, #232]	; (b4b60 <_Z8rHandlerv+0x108>)
   b4a78:	f007 ff35 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4a7c:	4b39      	ldr	r3, [pc, #228]	; (b4b64 <_Z8rHandlerv+0x10c>)
   b4a7e:	2201      	movs	r2, #1
   b4a80:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b4a82:	4b39      	ldr	r3, [pc, #228]	; (b4b68 <_Z8rHandlerv+0x110>)
   b4a84:	781c      	ldrb	r4, [r3, #0]
   b4a86:	4b39      	ldr	r3, [pc, #228]	; (b4b6c <_Z8rHandlerv+0x114>)
   b4a88:	b1ac      	cbz	r4, b4ab6 <_Z8rHandlerv+0x5e>
      : _M_current(__i) { }
   b4a8a:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b4a8c:	4d38      	ldr	r5, [pc, #224]	; (b4b70 <_Z8rHandlerv+0x118>)
   b4a8e:	f814 2c34 	ldrb.w	r2, [r4, #-52]
   b4a92:	7828      	ldrb	r0, [r5, #0]
   b4a94:	4282      	cmp	r2, r0
   b4a96:	d007      	beq.n	b4aa8 <_Z8rHandlerv+0x50>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4a98:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b4a9a:	2200      	movs	r2, #0
            for(WaterBot ws: WaterBots){
   b4a9c:	429c      	cmp	r4, r3
   b4a9e:	d003      	beq.n	b4aa8 <_Z8rHandlerv+0x50>
   b4aa0:	f813 1b34 	ldrb.w	r1, [r3], #52
                if(findCurrent){
   b4aa4:	b11a      	cbz	r2, b4aae <_Z8rHandlerv+0x56>
                    botSelect = ws.botNum;
   b4aa6:	7029      	strb	r1, [r5, #0]
}
   b4aa8:	b007      	add	sp, #28
   b4aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b4aae:	1a41      	subs	r1, r0, r1
   b4ab0:	424a      	negs	r2, r1
   b4ab2:	414a      	adcs	r2, r1
	return *this;
   b4ab4:	e7f2      	b.n	b4a9c <_Z8rHandlerv+0x44>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4ab6:	e9d3 7800 	ldrd	r7, r8, [r3]
            if(ws.botNum == botSelect){
   b4aba:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b4b70 <_Z8rHandlerv+0x118>
                MenuItem curItem = *SelectedItem;
   b4abe:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b4b7c <_Z8rHandlerv+0x124>
                modifiedValue = true;
   b4ac2:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4b80 <_Z8rHandlerv+0x128>
        for(WaterBot ws: WaterBots){
   b4ac6:	45b8      	cmp	r8, r7
   b4ac8:	d0ee      	beq.n	b4aa8 <_Z8rHandlerv+0x50>
            if(ws.botNum == botSelect){
   b4aca:	783a      	ldrb	r2, [r7, #0]
   b4acc:	f899 3000 	ldrb.w	r3, [r9]
   b4ad0:	429a      	cmp	r2, r3
   b4ad2:	d130      	bne.n	b4b36 <_Z8rHandlerv+0xde>
                MenuItem curItem = *SelectedItem;
   b4ad4:	f8da 6000 	ldr.w	r6, [sl]
   b4ad8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4ada:	466d      	mov	r5, sp
   b4adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4ade:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4ae2:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b4ae6:	f008 faf3 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4aea:	f10d 010d 	add.w	r1, sp, #13
   b4aee:	f007 fefa 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b4af2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b4af6:	2b00      	cmp	r3, #0
   b4af8:	d1d6      	bne.n	b4aa8 <_Z8rHandlerv+0x50>
                if(curItem.onOffSetting){
   b4afa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4afe:	b1eb      	cbz	r3, b4b3c <_Z8rHandlerv+0xe4>
                    Serial.println("Modified an On/Off Control");
   b4b00:	f008 fae6 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4b04:	491b      	ldr	r1, [pc, #108]	; (b4b74 <_Z8rHandlerv+0x11c>)
   b4b06:	f007 feee 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = true;
   b4b0a:	4621      	mov	r1, r4
   b4b0c:	4817      	ldr	r0, [pc, #92]	; (b4b6c <_Z8rHandlerv+0x114>)
   b4b0e:	f7ff fefd 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4b12:	9b01      	ldr	r3, [sp, #4]
   b4b14:	2201      	movs	r2, #1
   b4b16:	54c2      	strb	r2, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b4b18:	f008 fada 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4b1c:	4621      	mov	r1, r4
   b4b1e:	4605      	mov	r5, r0
   b4b20:	4812      	ldr	r0, [pc, #72]	; (b4b6c <_Z8rHandlerv+0x114>)
   b4b22:	f7ff fef3 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4b26:	4914      	ldr	r1, [pc, #80]	; (b4b78 <_Z8rHandlerv+0x120>)
   b4b28:	7802      	ldrb	r2, [r0, #0]
   b4b2a:	4628      	mov	r0, r5
   b4b2c:	f7ff fbf6 	bl	b431c <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4b30:	2301      	movs	r3, #1
   b4b32:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b4b36:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4b38:	3734      	adds	r7, #52	; 0x34
	return *this;
   b4b3a:	e7c4      	b.n	b4ac6 <_Z8rHandlerv+0x6e>
                    if(WaterBots.at(index).*(curItem.MethodPointer) < curItem.maxVal) WaterBots.at(index).*(curItem.MethodPointer) += curItem.stepSize;
   b4b3c:	4621      	mov	r1, r4
   b4b3e:	480b      	ldr	r0, [pc, #44]	; (b4b6c <_Z8rHandlerv+0x114>)
   b4b40:	f7ff fee4 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4b44:	9a00      	ldr	r2, [sp, #0]
   b4b46:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4b4a:	5c83      	ldrb	r3, [r0, r2]
   b4b4c:	4299      	cmp	r1, r3
   b4b4e:	bf82      	ittt	hi
   b4b50:	f89d 1008 	ldrbhi.w	r1, [sp, #8]
   b4b54:	185b      	addhi	r3, r3, r1
   b4b56:	5483      	strbhi	r3, [r0, r2]
   b4b58:	e7ea      	b.n	b4b30 <_Z8rHandlerv+0xd8>
   b4b5a:	bf00      	nop
   b4b5c:	2003dd50 	.word	0x2003dd50
   b4b60:	000c0527 	.word	0x000c0527
   b4b64:	2003da88 	.word	0x2003da88
   b4b68:	2003da89 	.word	0x2003da89
   b4b6c:	2003dcb4 	.word	0x2003dcb4
   b4b70:	2003dd4d 	.word	0x2003dd4d
   b4b74:	000c0535 	.word	0x000c0535
   b4b78:	000c0550 	.word	0x000c0550
   b4b7c:	2003dca4 	.word	0x2003dca4
   b4b80:	2003ddf7 	.word	0x2003ddf7

000b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4b84:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b86:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4b8a:	4806      	ldr	r0, [pc, #24]	; (b4ba4 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4b8c:	1b12      	subs	r2, r2, r4
   b4b8e:	10d2      	asrs	r2, r2, #3
   b4b90:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4b92:	4291      	cmp	r1, r2
   b4b94:	d302      	bcc.n	b4b9c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4b96:	4804      	ldr	r0, [pc, #16]	; (b4ba8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4b98:	f008 fc72 	bl	bd480 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4b9c:	2018      	movs	r0, #24
   b4b9e:	fb00 4001 	mla	r0, r0, r1, r4
   b4ba2:	bd10      	pop	{r4, pc}
   b4ba4:	aaaaaaab 	.word	0xaaaaaaab
   b4ba8:	000c04dd 	.word	0x000c04dd

000b4bac <_Z8uHandlerv>:
void uHandler(){
   b4bac:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4bae:	4c0f      	ldr	r4, [pc, #60]	; (b4bec <_Z8uHandlerv+0x40>)
   b4bb0:	f004 fb60 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
   b4bb4:	6823      	ldr	r3, [r4, #0]
   b4bb6:	1ac0      	subs	r0, r0, r3
   b4bb8:	2863      	cmp	r0, #99	; 0x63
   b4bba:	d915      	bls.n	b4be8 <_Z8uHandlerv+0x3c>
   b4bbc:	f004 fb5a 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4bc0:	4a0b      	ldr	r2, [pc, #44]	; (b4bf0 <_Z8uHandlerv+0x44>)
    debounceTime = millis();
   b4bc2:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4bc4:	7813      	ldrb	r3, [r2, #0]
   b4bc6:	b10b      	cbz	r3, b4bcc <_Z8uHandlerv+0x20>
   b4bc8:	3b01      	subs	r3, #1
   b4bca:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4bcc:	7811      	ldrb	r1, [r2, #0]
   b4bce:	4809      	ldr	r0, [pc, #36]	; (b4bf4 <_Z8uHandlerv+0x48>)
   b4bd0:	f7ff ffd8 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4bd4:	4b08      	ldr	r3, [pc, #32]	; (b4bf8 <_Z8uHandlerv+0x4c>)
   b4bd6:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4bd8:	f008 fa7a 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4bdc:	4907      	ldr	r1, [pc, #28]	; (b4bfc <_Z8uHandlerv+0x50>)
   b4bde:	f007 fe82 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4be2:	4b07      	ldr	r3, [pc, #28]	; (b4c00 <_Z8uHandlerv+0x54>)
   b4be4:	2201      	movs	r2, #1
   b4be6:	701a      	strb	r2, [r3, #0]
}
   b4be8:	bd10      	pop	{r4, pc}
   b4bea:	bf00      	nop
   b4bec:	2003dd50 	.word	0x2003dd50
   b4bf0:	2003ddf5 	.word	0x2003ddf5
   b4bf4:	2003dc8c 	.word	0x2003dc8c
   b4bf8:	2003dca4 	.word	0x2003dca4
   b4bfc:	000c0563 	.word	0x000c0563
   b4c00:	2003da88 	.word	0x2003da88

000b4c04 <_Z8dHandlerv>:
void dHandler(){
   b4c04:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4c06:	4c0f      	ldr	r4, [pc, #60]	; (b4c44 <_Z8dHandlerv+0x40>)
   b4c08:	f004 fb34 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
   b4c0c:	6823      	ldr	r3, [r4, #0]
   b4c0e:	1ac0      	subs	r0, r0, r3
   b4c10:	2863      	cmp	r0, #99	; 0x63
   b4c12:	d916      	bls.n	b4c42 <_Z8dHandlerv+0x3e>
   b4c14:	f004 fb2e 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4c18:	4a0b      	ldr	r2, [pc, #44]	; (b4c48 <_Z8dHandlerv+0x44>)
    debounceTime = millis();
   b4c1a:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4c1c:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4c1e:	480b      	ldr	r0, [pc, #44]	; (b4c4c <_Z8dHandlerv+0x48>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4c20:	2b02      	cmp	r3, #2
   b4c22:	bf9c      	itt	ls
   b4c24:	3301      	addls	r3, #1
   b4c26:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4c28:	7811      	ldrb	r1, [r2, #0]
   b4c2a:	f7ff ffab 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4c2e:	4b08      	ldr	r3, [pc, #32]	; (b4c50 <_Z8dHandlerv+0x4c>)
   b4c30:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b4c32:	f008 fa4d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4c36:	4907      	ldr	r1, [pc, #28]	; (b4c54 <_Z8dHandlerv+0x50>)
   b4c38:	f007 fe55 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4c3c:	4b06      	ldr	r3, [pc, #24]	; (b4c58 <_Z8dHandlerv+0x54>)
   b4c3e:	2201      	movs	r2, #1
   b4c40:	701a      	strb	r2, [r3, #0]
}
   b4c42:	bd10      	pop	{r4, pc}
   b4c44:	2003dd50 	.word	0x2003dd50
   b4c48:	2003ddf5 	.word	0x2003ddf5
   b4c4c:	2003dc8c 	.word	0x2003dc8c
   b4c50:	2003dca4 	.word	0x2003dca4
   b4c54:	000c056e 	.word	0x000c056e
   b4c58:	2003da88 	.word	0x2003da88

000b4c5c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c60:	6843      	ldr	r3, [r0, #4]
   b4c62:	f8d0 a000 	ldr.w	sl, [r0]
   b4c66:	9301      	str	r3, [sp, #4]
   b4c68:	eba3 040a 	sub.w	r4, r3, sl
   b4c6c:	4b41      	ldr	r3, [pc, #260]	; (b4d74 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b4c6e:	10a4      	asrs	r4, r4, #2
   b4c70:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4c72:	4b41      	ldr	r3, [pc, #260]	; (b4d78 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b4c74:	429c      	cmp	r4, r3
   b4c76:	4681      	mov	r9, r0
   b4c78:	468b      	mov	fp, r1
   b4c7a:	4616      	mov	r6, r2
   b4c7c:	d102      	bne.n	b4c84 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b4c7e:	483f      	ldr	r0, [pc, #252]	; (b4d7c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>)
   b4c80:	f008 fbfb 	bl	bd47a <_ZSt20__throw_length_errorPKc>
   b4c84:	2c01      	cmp	r4, #1
   b4c86:	4622      	mov	r2, r4
   b4c88:	bf38      	it	cc
   b4c8a:	2201      	movcc	r2, #1
   b4c8c:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4c8e:	eba1 070a 	sub.w	r7, r1, sl

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4c92:	d229      	bcs.n	b4ce8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4c94:	b354      	cbz	r4, b4cec <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b4c96:	429c      	cmp	r4, r3
   b4c98:	bf28      	it	cs
   b4c9a:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4c9c:	2034      	movs	r0, #52	; 0x34
   b4c9e:	4360      	muls	r0, r4
   b4ca0:	f7ff f9f9 	bl	b4096 <_Znwj>
   b4ca4:	4680      	mov	r8, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4ca6:	eb18 0507 	adds.w	r5, r8, r7
   b4caa:	d007      	beq.n	b4cbc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
   b4cac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cb8:	6833      	ldr	r3, [r6, #0]
   b4cba:	602b      	str	r3, [r5, #0]
   b4cbc:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cbe:	46d6      	mov	lr, sl
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b4cc0:	45f3      	cmp	fp, lr
   b4cc2:	d015      	beq.n	b4cf0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b4cc4:	f1bc 0f00 	cmp.w	ip, #0
   b4cc8:	d009      	beq.n	b4cde <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b4cca:	4676      	mov	r6, lr
   b4ccc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4cce:	4665      	mov	r5, ip
   b4cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cda:	6833      	ldr	r3, [r6, #0]
   b4cdc:	602b      	str	r3, [r5, #0]
   b4cde:	f10e 0e34 	add.w	lr, lr, #52	; 0x34
   b4ce2:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4ce6:	e7eb      	b.n	b4cc0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4ce8:	461c      	mov	r4, r3
   b4cea:	e7d7      	b.n	b4c9c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4cec:	46a0      	mov	r8, r4
   b4cee:	e7da      	b.n	b4ca6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b4cf0:	f8df e08c 	ldr.w	lr, [pc, #140]	; b4d80 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>
   b4cf4:	08bf      	lsrs	r7, r7, #2
   b4cf6:	fb0e f707 	mul.w	r7, lr, r7
   b4cfa:	2334      	movs	r3, #52	; 0x34
   b4cfc:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b4d00:	435f      	muls	r7, r3
   b4d02:	eb0a 0b07 	add.w	fp, sl, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b4d06:	441f      	add	r7, r3
   b4d08:	eb08 0307 	add.w	r3, r8, r7
   b4d0c:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b4d0e:	469c      	mov	ip, r3
   b4d10:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b4d12:	9b01      	ldr	r3, [sp, #4]
   b4d14:	429f      	cmp	r7, r3
   b4d16:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4d1a:	d00c      	beq.n	b4d36 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   b4d1c:	463e      	mov	r6, r7
   b4d1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4d20:	f1ac 0534 	sub.w	r5, ip, #52	; 0x34
   b4d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4d26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4d2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4d2e:	6833      	ldr	r3, [r6, #0]
   b4d30:	602b      	str	r3, [r5, #0]
   b4d32:	3734      	adds	r7, #52	; 0x34
   b4d34:	e7ed      	b.n	b4d12 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
   b4d36:	eba7 070b 	sub.w	r7, r7, fp
   b4d3a:	08bf      	lsrs	r7, r7, #2
   b4d3c:	fb0e fe07 	mul.w	lr, lr, r7
   b4d40:	9b00      	ldr	r3, [sp, #0]
   b4d42:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b4d46:	2734      	movs	r7, #52	; 0x34
   b4d48:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b4d4c:	f1ba 0f00 	cmp.w	sl, #0
   b4d50:	d006      	beq.n	b4d60 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x104>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4d52:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b4d56:	4650      	mov	r0, sl
   b4d58:	eba1 010a 	sub.w	r1, r1, sl
   b4d5c:	f7ff f99f 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4d60:	2034      	movs	r0, #52	; 0x34
   b4d62:	fb00 8404 	mla	r4, r0, r4, r8
      this->_M_impl._M_finish = __new_finish;
   b4d66:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4d6a:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   b4d6e:	b003      	add	sp, #12
   b4d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4d74:	c4ec4ec5 	.word	0xc4ec4ec5
   b4d78:	02762762 	.word	0x02762762
   b4d7c:	000c057b 	.word	0x000c057b
   b4d80:	04ec4ec5 	.word	0x04ec4ec5

000b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b4d84:	b570      	push	{r4, r5, r6, lr}
   b4d86:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4d88:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b4d8c:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b4d8e:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4d90:	d00e      	beq.n	b4db0 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4d92:	b149      	cbz	r1, b4da8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x24>
   b4d94:	4615      	mov	r5, r2
   b4d96:	460c      	mov	r4, r1
   b4d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4da4:	682b      	ldr	r3, [r5, #0]
   b4da6:	6023      	str	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
   b4da8:	6873      	ldr	r3, [r6, #4]
   b4daa:	3334      	adds	r3, #52	; 0x34
   b4dac:	6073      	str	r3, [r6, #4]
      }
   b4dae:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b4db0:	f7ff ff54 	bl	b4c5c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b4db4:	e7fb      	b.n	b4dae <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2a>
	...

000b4db8 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4dbc:	b0a5      	sub	sp, #148	; 0x94
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4dbe:	7883      	ldrb	r3, [r0, #2]
   b4dc0:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4dc2:	af06      	add	r7, sp, #24
   b4dc4:	4683      	mov	fp, r0
   b4dc6:	460e      	mov	r6, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4dc8:	d125      	bne.n	b4e16 <_Z14processCommandPKchb+0x5e>
   b4dca:	78c3      	ldrb	r3, [r0, #3]
   b4dcc:	2b42      	cmp	r3, #66	; 0x42
   b4dce:	f040 81b7 	bne.w	b5140 <_Z14processCommandPKchb+0x388>
        rxIDBuf[0] = command[1];
   b4dd2:	f89b 3001 	ldrb.w	r3, [fp, #1]
      : _M_current(__i) { }
   b4dd6:	f8df a38c 	ldr.w	sl, [pc, #908]	; b5164 <_Z14processCommandPKchb+0x3ac>
   b4dda:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4ddc:	f107 0018 	add.w	r0, r7, #24
   b4de0:	f009 f9ff 	bl	be1e2 <atoi>
   b4de4:	e9da 8300 	ldrd	r8, r3, [sl]
        }
   b4de8:	46e9      	mov	r9, sp
        uint8_t rxBotID = atoi(rxIDBuf);
   b4dea:	b2c5      	uxtb	r5, r0
        int index = 0;
   b4dec:	2100      	movs	r1, #0
        bool newBot = true;
   b4dee:	2201      	movs	r2, #1
        for(WaterBot w: WaterBots){
   b4df0:	4598      	cmp	r8, r3
   b4df2:	d016      	beq.n	b4e22 <_Z14processCommandPKchb+0x6a>
            if(rxBotID == w.botNum){
   b4df4:	f898 0000 	ldrb.w	r0, [r8]
   b4df8:	42a8      	cmp	r0, r5
   b4dfa:	d108      	bne.n	b4e0e <_Z14processCommandPKchb+0x56>
                TargetWB = &WaterBots.at(index);
   b4dfc:	4650      	mov	r0, sl
   b4dfe:	60bb      	str	r3, [r7, #8]
   b4e00:	6179      	str	r1, [r7, #20]
   b4e02:	f7ff fd83 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b4e06:	68bb      	ldr	r3, [r7, #8]
   b4e08:	6979      	ldr	r1, [r7, #20]
                TargetWB = &WaterBots.at(index);
   b4e0a:	4604      	mov	r4, r0
                newBot = false;
   b4e0c:	2200      	movs	r2, #0
            index++;
   b4e0e:	3101      	adds	r1, #1
	++_M_current;
   b4e10:	f108 0834 	add.w	r8, r8, #52	; 0x34
	return *this;
   b4e14:	e7ec      	b.n	b4df0 <_Z14processCommandPKchb+0x38>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4e16:	2b43      	cmp	r3, #67	; 0x43
   b4e18:	f040 8192 	bne.w	b5140 <_Z14processCommandPKchb+0x388>
   b4e1c:	78c3      	ldrb	r3, [r0, #3]
   b4e1e:	2b43      	cmp	r3, #67	; 0x43
   b4e20:	e7d5      	b.n	b4dce <_Z14processCommandPKchb+0x16>
        if(newBot){
   b4e22:	b16a      	cbz	r2, b4e40 <_Z14processCommandPKchb+0x88>
            WaterBot newWaterbot;
   b4e24:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b4e28:	f7ff fbf8 	bl	b461c <_ZN8WaterBotC1Ev>
            WaterBots.push_back(newWaterbot);
   b4e2c:	48cd      	ldr	r0, [pc, #820]	; (b5164 <_Z14processCommandPKchb+0x3ac>)
            newWaterbot.botNum = rxBotID;
   b4e2e:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
            WaterBots.push_back(newWaterbot);
   b4e32:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b4e36:	f7ff ffa5 	bl	b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b4e3a:	f8da 4004 	ldr.w	r4, [sl, #4]
   b4e3e:	3c34      	subs	r4, #52	; 0x34
        char dataStr[strlen(command)-8];
   b4e40:	4658      	mov	r0, fp
   b4e42:	f009 fabe 	bl	be3c2 <strlen>
   b4e46:	3801      	subs	r0, #1
   b4e48:	f020 0007 	bic.w	r0, r0, #7
   b4e4c:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4e50:	4658      	mov	r0, fp
   b4e52:	f009 fab6 	bl	be3c2 <strlen>
        char dataStr[strlen(command)-8];
   b4e56:	f10d 0818 	add.w	r8, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4e5a:	4440      	add	r0, r8
   b4e5c:	2100      	movs	r1, #0
   b4e5e:	f800 1c09 	strb.w	r1, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b4e62:	4658      	mov	r0, fp
        cmdStr[3] = '\0';
   b4e64:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b4e68:	f009 faab 	bl	be3c2 <strlen>
   b4e6c:	4458      	add	r0, fp
   b4e6e:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4e72:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b4e74:	4658      	mov	r0, fp
   b4e76:	f009 faa4 	bl	be3c2 <strlen>
   b4e7a:	4458      	add	r0, fp
        checkStr[2] = '\0';
   b4e7c:	2100      	movs	r1, #0
        checkStr[1] = command[strlen(command)-1];
   b4e7e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4e82:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4e84:	2210      	movs	r2, #16
   b4e86:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b4e8a:	77b9      	strb	r1, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4e8c:	f00a f984 	bl	bf198 <strtol>
   b4e90:	6178      	str	r0, [r7, #20]
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4e92:	f008 f91d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4e96:	697b      	ldr	r3, [r7, #20]
   b4e98:	49b3      	ldr	r1, [pc, #716]	; (b5168 <_Z14processCommandPKchb+0x3b0>)
   b4e9a:	b2db      	uxtb	r3, r3
   b4e9c:	461a      	mov	r2, r3
   b4e9e:	617b      	str	r3, [r7, #20]
   b4ea0:	f7ff fa3c 	bl	b431c <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4ea4:	697b      	ldr	r3, [r7, #20]
   b4ea6:	2104      	movs	r1, #4
   b4ea8:	4658      	mov	r0, fp
   b4eaa:	60bb      	str	r3, [r7, #8]
   b4eac:	6179      	str	r1, [r7, #20]
   b4eae:	f009 fa88 	bl	be3c2 <strlen>
   b4eb2:	6979      	ldr	r1, [r7, #20]
   b4eb4:	68bb      	ldr	r3, [r7, #8]
   b4eb6:	3802      	subs	r0, #2
   b4eb8:	4281      	cmp	r1, r0
   b4eba:	d214      	bcs.n	b4ee6 <_Z14processCommandPKchb+0x12e>
            if(i < 7) cmdStr[i-4] = command[i];
   b4ebc:	2906      	cmp	r1, #6
   b4ebe:	bf9b      	ittet	ls
   b4ec0:	f107 0278 	addls.w	r2, r7, #120	; 0x78
   b4ec4:	1852      	addls	r2, r2, r1
            else dataStr[i-7] = command[i];
   b4ec6:	eb08 0201 	addhi.w	r2, r8, r1
            if(i < 7) cmdStr[i-4] = command[i];
   b4eca:	f81b 0001 	ldrbls.w	r0, [fp, r1]
            else dataStr[i-7] = command[i];
   b4ece:	bf8c      	ite	hi
   b4ed0:	f81b 0001 	ldrbhi.w	r0, [fp, r1]
            if(i < 7) cmdStr[i-4] = command[i];
   b4ed4:	f802 0c5c 	strbls.w	r0, [r2, #-92]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4ed8:	f101 0101 	add.w	r1, r1, #1
            else dataStr[i-7] = command[i];
   b4edc:	bf88      	it	hi
   b4ede:	f802 0c07 	strbhi.w	r0, [r2, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4ee2:	b2c9      	uxtb	r1, r1
   b4ee4:	e7e0      	b.n	b4ea8 <_Z14processCommandPKchb+0xf0>
        if(checksum != strlen(command)-2){
   b4ee6:	4298      	cmp	r0, r3
   b4ee8:	d044      	beq.n	b4f74 <_Z14processCommandPKchb+0x1bc>
   b4eea:	617b      	str	r3, [r7, #20]
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4eec:	f008 f8f0 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4ef0:	4604      	mov	r4, r0
   b4ef2:	4658      	mov	r0, fp
   b4ef4:	f009 fa65 	bl	be3c2 <strlen>
   b4ef8:	1e82      	subs	r2, r0, #2
   b4efa:	4620      	mov	r0, r4
    return m_attr;
   b4efc:	4c9b      	ldr	r4, [pc, #620]	; (b516c <_Z14processCommandPKchb+0x3b4>)
   b4efe:	697b      	ldr	r3, [r7, #20]
   b4f00:	499b      	ldr	r1, [pc, #620]	; (b5170 <_Z14processCommandPKchb+0x3b8>)
   b4f02:	f7ff fa0b 	bl	b431c <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4f06:	7c23      	ldrb	r3, [r4, #16]
   b4f08:	bb73      	cbnz	r3, b4f68 <_Z14processCommandPKchb+0x1b0>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4f0a:	499a      	ldr	r1, [pc, #616]	; (b5174 <_Z14processCommandPKchb+0x3bc>)
   b4f0c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4f10:	f104 0010 	add.w	r0, r4, #16
   b4f14:	f7ff fa92 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4f18:	4997      	ldr	r1, [pc, #604]	; (b5178 <_Z14processCommandPKchb+0x3c0>)
   b4f1a:	465a      	mov	r2, fp
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	f7ff f9fd 	bl	b431c <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4f22:	f104 0010 	add.w	r0, r4, #16
   b4f26:	f001 fe4f 	bl	b6bc8 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4f2a:	f008 f8d1 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4f2e:	4993      	ldr	r1, [pc, #588]	; (b517c <_Z14processCommandPKchb+0x3c4>)
   b4f30:	f007 fcd9 	bl	bc8e6 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4f34:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b4f38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4f3c:	2a09      	cmp	r2, #9
   b4f3e:	d902      	bls.n	b4f46 <_Z14processCommandPKchb+0x18e>
   b4f40:	2b43      	cmp	r3, #67	; 0x43
   b4f42:	f040 80fc 	bne.w	b513e <_Z14processCommandPKchb+0x386>
                rxBotNum[0] = command[0];
   b4f46:	f89b 2000 	ldrb.w	r2, [fp]
   b4f4a:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
                rxBotNum[1] = command[1];
   b4f4e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4f52:	498b      	ldr	r1, [pc, #556]	; (b5180 <_Z14processCommandPKchb+0x3c8>)
   b4f54:	488b      	ldr	r0, [pc, #556]	; (b5184 <_Z14processCommandPKchb+0x3cc>)
   b4f56:	f107 0320 	add.w	r3, r7, #32
   b4f5a:	f107 0244 	add.w	r2, r7, #68	; 0x44
   b4f5e:	f004 fc1d 	bl	b979c <sprintf>
                errModeReply = mode;
   b4f62:	4b89      	ldr	r3, [pc, #548]	; (b5188 <_Z14processCommandPKchb+0x3d0>)
            errCmdMode = mode;
   b4f64:	701e      	strb	r6, [r3, #0]
   b4f66:	e0ea      	b.n	b513e <_Z14processCommandPKchb+0x386>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4f68:	4983      	ldr	r1, [pc, #524]	; (b5178 <_Z14processCommandPKchb+0x3c0>)
   b4f6a:	465a      	mov	r2, fp
   b4f6c:	4620      	mov	r0, r4
   b4f6e:	f7ff f9d5 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b4f72:	e7da      	b.n	b4f2a <_Z14processCommandPKchb+0x172>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4f74:	4985      	ldr	r1, [pc, #532]	; (b518c <_Z14processCommandPKchb+0x3d4>)
   b4f76:	f107 0020 	add.w	r0, r7, #32
   b4f7a:	f009 f9f2 	bl	be362 <strcmp>
   b4f7e:	2800      	cmp	r0, #0
   b4f80:	f000 80dd 	beq.w	b513e <_Z14processCommandPKchb+0x386>
        else if(!strcmp(cmdStr,"sup")){
   b4f84:	4982      	ldr	r1, [pc, #520]	; (b5190 <_Z14processCommandPKchb+0x3d8>)
   b4f86:	f107 0020 	add.w	r0, r7, #32
   b4f8a:	f009 f9ea 	bl	be362 <strcmp>
   b4f8e:	2800      	cmp	r0, #0
   b4f90:	d17e      	bne.n	b5090 <_Z14processCommandPKchb+0x2d8>
      : _M_current(__i) { }
   b4f92:	f8da 3004 	ldr.w	r3, [sl, #4]
   b4f96:	613b      	str	r3, [r7, #16]
   b4f98:	f8da 3000 	ldr.w	r3, [sl]
            for(WaterBot w: WaterBots){
   b4f9c:	617b      	str	r3, [r7, #20]
   b4f9e:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
   b4fa2:	4293      	cmp	r3, r2
   b4fa4:	d074      	beq.n	b5090 <_Z14processCommandPKchb+0x2d8>
   b4fa6:	7813      	ldrb	r3, [r2, #0]
                if(rxBotID == w.botNum){
   b4fa8:	429d      	cmp	r5, r3
   b4faa:	d16e      	bne.n	b508a <_Z14processCommandPKchb+0x2d2>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4fac:	f107 0a44 	add.w	sl, r7, #68	; 0x44
   b4fb0:	f107 0b38 	add.w	fp, r7, #56	; 0x38
   b4fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   b4fb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   b4fbc:	4975      	ldr	r1, [pc, #468]	; (b5194 <_Z14processCommandPKchb+0x3dc>)
   b4fbe:	f8cd a004 	str.w	sl, [sp, #4]
   b4fc2:	f8cd b000 	str.w	fp, [sp]
   b4fc6:	4640      	mov	r0, r8
   b4fc8:	f004 fbf0 	bl	b97ac <sscanf>
                    latRX = atof(testLat);
   b4fcc:	4658      	mov	r0, fp
   b4fce:	f009 f905 	bl	be1dc <atof>
                    lonRX = atof(testLon);
   b4fd2:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b4fd4:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4fd8:	f009 f900 	bl	be1dc <atof>
                    w.LTEAvail = statflags & 1;
   b4fdc:	f897 a034 	ldrb.w	sl, [r7, #52]	; 0x34
                    w.battPercent = battpct;
   b4fe0:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
                    lonRX = atof(testLon);
   b4fe4:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4fe8:	f008 f872 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4fec:	496a      	ldr	r1, [pc, #424]	; (b5198 <_Z14processCommandPKchb+0x3e0>)
   b4fee:	f007 fc7a 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b4ff2:	f008 f86d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b4ff6:	4969      	ldr	r1, [pc, #420]	; (b519c <_Z14processCommandPKchb+0x3e4>)
   b4ff8:	f007 fc75 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4ffc:	f008 f868 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5000:	4967      	ldr	r1, [pc, #412]	; (b51a0 <_Z14processCommandPKchb+0x3e8>)
   b5002:	f007 fc70 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b5006:	f008 f863 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b500a:	4966      	ldr	r1, [pc, #408]	; (b51a4 <_Z14processCommandPKchb+0x3ec>)
   b500c:	462a      	mov	r2, r5
   b500e:	f7ff f985 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b5012:	f008 f85d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5016:	465a      	mov	r2, fp
   b5018:	4963      	ldr	r1, [pc, #396]	; (b51a8 <_Z14processCommandPKchb+0x3f0>)
   b501a:	f7ff f97f 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b501e:	f008 f857 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5022:	4962      	ldr	r1, [pc, #392]	; (b51ac <_Z14processCommandPKchb+0x3f4>)
   b5024:	f007 fc5f 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b5028:	f008 f852 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b502c:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b5030:	f00a 0201 	and.w	r2, sl, #1
   b5034:	495e      	ldr	r1, [pc, #376]	; (b51b0 <_Z14processCommandPKchb+0x3f8>)
   b5036:	9300      	str	r3, [sp, #0]
   b5038:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b503c:	f7ff f96e 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b5040:	f008 f846 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5044:	495b      	ldr	r1, [pc, #364]	; (b51b4 <_Z14processCommandPKchb+0x3fc>)
   b5046:	f007 fc4e 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b504a:	f008 f841 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b504e:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b5050:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b5054:	f009 f84e 	bl	be0f4 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b5058:	f008 fd3a 	bl	bdad0 <__aeabi_f2d>
   b505c:	4602      	mov	r2, r0
   b505e:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b5060:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b5064:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b5068:	f009 f844 	bl	be0f4 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b506c:	f008 fd30 	bl	bdad0 <__aeabi_f2d>
   b5070:	e9cd 0100 	strd	r0, r1, [sp]
   b5074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b5078:	494f      	ldr	r1, [pc, #316]	; (b51b8 <_Z14processCommandPKchb+0x400>)
   b507a:	4650      	mov	r0, sl
   b507c:	f7ff f94e 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b5080:	f008 f826 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5084:	4945      	ldr	r1, [pc, #276]	; (b519c <_Z14processCommandPKchb+0x3e4>)
   b5086:	f007 fc2e 	bl	bc8e6 <_ZN5Print7printlnEPKc>
      operator++() _GLIBCXX_NOEXCEPT
   b508a:	697b      	ldr	r3, [r7, #20]
   b508c:	3334      	adds	r3, #52	; 0x34
   b508e:	e785      	b.n	b4f9c <_Z14processCommandPKchb+0x1e4>
        if(!strcmp(cmdStr,"sns")){
   b5090:	494a      	ldr	r1, [pc, #296]	; (b51bc <_Z14processCommandPKchb+0x404>)
   b5092:	f107 0020 	add.w	r0, r7, #32
   b5096:	f009 f964 	bl	be362 <strcmp>
   b509a:	2800      	cmp	r0, #0
   b509c:	d154      	bne.n	b5148 <_Z14processCommandPKchb+0x390>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b509e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   b50a2:	9304      	str	r3, [sp, #16]
   b50a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
   b50a8:	9303      	str	r3, [sp, #12]
   b50aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b50ae:	9302      	str	r3, [sp, #8]
   b50b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b50ba:	4941      	ldr	r1, [pc, #260]	; (b51c0 <_Z14processCommandPKchb+0x408>)
   b50bc:	9300      	str	r3, [sp, #0]
   b50be:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b50c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
   b50c6:	4640      	mov	r0, r8
   b50c8:	f004 fb70 	bl	b97ac <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b50cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   b50d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b50d4:	eddf 7a3b 	vldr	s15, [pc, #236]	; b51c4 <_Z14processCommandPKchb+0x40c>
   b50d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b50dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
            TargetWB->DO = ((float)do_in)/1000.0;
   b50e0:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
            TargetWB->pH = ((float)pH_in)/1000.0;
   b50e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b50e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b50ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
            TargetWB->pH = ((float)pH_in)/1000.0;
   b50f0:	edc4 6a07 	vstr	s13, [r4, #28]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b50f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b50f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b50fc:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b5100:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   b5104:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5108:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b510c:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
            TargetWB->temp = ((float)temp_in)/1000.0;
   b5110:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
   b5114:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5118:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b511c:	edc4 6a08 	vstr	s13, [r4, #32]
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b5120:	f007 ffd6 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5124:	7822      	ldrb	r2, [r4, #0]
   b5126:	617a      	str	r2, [r7, #20]
   b5128:	4605      	mov	r5, r0
   b512a:	6a20      	ldr	r0, [r4, #32]
   b512c:	f008 fcd0 	bl	bdad0 <__aeabi_f2d>
   b5130:	e9cd 0100 	strd	r0, r1, [sp]
   b5134:	697a      	ldr	r2, [r7, #20]
   b5136:	4924      	ldr	r1, [pc, #144]	; (b51c8 <_Z14processCommandPKchb+0x410>)
   b5138:	4628      	mov	r0, r5
   b513a:	f7ff f8ef 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b513e:	46cd      	mov	sp, r9
}
   b5140:	377c      	adds	r7, #124	; 0x7c
   b5142:	46bd      	mov	sp, r7
   b5144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b5148:	4920      	ldr	r1, [pc, #128]	; (b51cc <_Z14processCommandPKchb+0x414>)
   b514a:	f107 0020 	add.w	r0, r7, #32
   b514e:	f009 f908 	bl	be362 <strcmp>
   b5152:	2800      	cmp	r0, #0
   b5154:	d140      	bne.n	b51d8 <_Z14processCommandPKchb+0x420>
            strncpy(errCmdStr,dataStr,3);
   b5156:	481e      	ldr	r0, [pc, #120]	; (b51d0 <_Z14processCommandPKchb+0x418>)
   b5158:	2203      	movs	r2, #3
   b515a:	4641      	mov	r1, r8
   b515c:	f009 f94d 	bl	be3fa <strncpy>
            errCmdMode = mode;
   b5160:	4b1c      	ldr	r3, [pc, #112]	; (b51d4 <_Z14processCommandPKchb+0x41c>)
   b5162:	e6ff      	b.n	b4f64 <_Z14processCommandPKchb+0x1ac>
   b5164:	2003dcb4 	.word	0x2003dcb4
   b5168:	000c0595 	.word	0x000c0595
   b516c:	2003ddc0 	.word	0x2003ddc0
   b5170:	000c05aa 	.word	0x000c05aa
   b5174:	2003dd68 	.word	0x2003dd68
   b5178:	000c05c7 	.word	0x000c05c7
   b517c:	000c05f3 	.word	0x000c05f3
   b5180:	000c0614 	.word	0x000c0614
   b5184:	2003dd54 	.word	0x2003dd54
   b5188:	2003dd67 	.word	0x2003dd67
   b518c:	000c0620 	.word	0x000c0620
   b5190:	000c0624 	.word	0x000c0624
   b5194:	000c0628 	.word	0x000c0628
   b5198:	000c0634 	.word	0x000c0634
   b519c:	000c0643 	.word	0x000c0643
   b51a0:	000c065e 	.word	0x000c065e
   b51a4:	000c0679 	.word	0x000c0679
   b51a8:	000c0695 	.word	0x000c0695
   b51ac:	000c06b1 	.word	0x000c06b1
   b51b0:	000c06cc 	.word	0x000c06cc
   b51b4:	000c06ea 	.word	0x000c06ea
   b51b8:	000c0705 	.word	0x000c0705
   b51bc:	000c0715 	.word	0x000c0715
   b51c0:	000c0719 	.word	0x000c0719
   b51c4:	447a0000 	.word	0x447a0000
   b51c8:	000c072e 	.word	0x000c072e
   b51cc:	000c0741 	.word	0x000c0741
   b51d0:	2003dd64 	.word	0x2003dd64
   b51d4:	2003dd63 	.word	0x2003dd63
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b51d8:	492e      	ldr	r1, [pc, #184]	; (b5294 <_Z14processCommandPKchb+0x4dc>)
   b51da:	f107 0020 	add.w	r0, r7, #32
   b51de:	f009 f8c0 	bl	be362 <strcmp>
   b51e2:	bba8      	cbnz	r0, b5250 <_Z14processCommandPKchb+0x498>
      : _M_current(__i) { }
   b51e4:	4b2c      	ldr	r3, [pc, #176]	; (b5298 <_Z14processCommandPKchb+0x4e0>)
   b51e6:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b51ea:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b51ec:	4282      	cmp	r2, r0
   b51ee:	d005      	beq.n	b51fc <_Z14processCommandPKchb+0x444>
                if(rxBotID == w.botNum) newBot = false;
   b51f0:	f812 1b34 	ldrb.w	r1, [r2], #52
   b51f4:	42a9      	cmp	r1, r5
   b51f6:	bf08      	it	eq
   b51f8:	2300      	moveq	r3, #0
	return *this;
   b51fa:	e7f7      	b.n	b51ec <_Z14processCommandPKchb+0x434>
            if(newBot){
   b51fc:	b1c3      	cbz	r3, b5230 <_Z14processCommandPKchb+0x478>
                Serial.println("Found a new water bot ID");
   b51fe:	f007 ff67 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5202:	4926      	ldr	r1, [pc, #152]	; (b529c <_Z14processCommandPKchb+0x4e4>)
   b5204:	f007 fb6f 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b5208:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b520c:	f7ff fa06 	bl	b461c <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b5210:	2e01      	cmp	r6, #1
   b5212:	d111      	bne.n	b5238 <_Z14processCommandPKchb+0x480>
   b5214:	f887 6046 	strb.w	r6, [r7, #70]	; 0x46
                WaterBots.push_back(newWaterbot);
   b5218:	481f      	ldr	r0, [pc, #124]	; (b5298 <_Z14processCommandPKchb+0x4e0>)
                newWaterbot.botNum = rxBotID;
   b521a:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b521e:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5222:	f7ff fdaf 	bl	b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b5226:	481e      	ldr	r0, [pc, #120]	; (b52a0 <_Z14processCommandPKchb+0x4e8>)
   b5228:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b522c:	f7ff fdaa 	bl	b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b5230:	4b1c      	ldr	r3, [pc, #112]	; (b52a4 <_Z14processCommandPKchb+0x4ec>)
   b5232:	2201      	movs	r2, #1
   b5234:	701a      	strb	r2, [r3, #0]
   b5236:	e782      	b.n	b513e <_Z14processCommandPKchb+0x386>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b5238:	2e02      	cmp	r6, #2
   b523a:	f04f 0301 	mov.w	r3, #1
   b523e:	d102      	bne.n	b5246 <_Z14processCommandPKchb+0x48e>
   b5240:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   b5244:	e7e8      	b.n	b5218 <_Z14processCommandPKchb+0x460>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b5246:	2e03      	cmp	r6, #3
   b5248:	bf08      	it	eq
   b524a:	f887 3047 	strbeq.w	r3, [r7, #71]	; 0x47
   b524e:	e7e3      	b.n	b5218 <_Z14processCommandPKchb+0x460>
        else if(!strcmp(cmdStr,"pts")){
   b5250:	4915      	ldr	r1, [pc, #84]	; (b52a8 <_Z14processCommandPKchb+0x4f0>)
   b5252:	f107 0020 	add.w	r0, r7, #32
   b5256:	f009 f884 	bl	be362 <strcmp>
   b525a:	2800      	cmp	r0, #0
   b525c:	f47f af6f 	bne.w	b513e <_Z14processCommandPKchb+0x386>
   b5260:	4c12      	ldr	r4, [pc, #72]	; (b52ac <_Z14processCommandPKchb+0x4f4>)
            if(!logFile.isOpen()){
   b5262:	7c23      	ldrb	r3, [r4, #16]
   b5264:	b983      	cbnz	r3, b5288 <_Z14processCommandPKchb+0x4d0>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5266:	4912      	ldr	r1, [pc, #72]	; (b52b0 <_Z14processCommandPKchb+0x4f8>)
   b5268:	f244 2202 	movw	r2, #16898	; 0x4202
   b526c:	f104 0010 	add.w	r0, r4, #16
   b5270:	f7ff f8e4 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5274:	490f      	ldr	r1, [pc, #60]	; (b52b4 <_Z14processCommandPKchb+0x4fc>)
   b5276:	4642      	mov	r2, r8
   b5278:	4620      	mov	r0, r4
   b527a:	f7ff f84f 	bl	b431c <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b527e:	f104 0010 	add.w	r0, r4, #16
   b5282:	f001 fca1 	bl	b6bc8 <_ZN7FatFile5closeEv>
   b5286:	e75a      	b.n	b513e <_Z14processCommandPKchb+0x386>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5288:	490a      	ldr	r1, [pc, #40]	; (b52b4 <_Z14processCommandPKchb+0x4fc>)
   b528a:	4642      	mov	r2, r8
   b528c:	4620      	mov	r0, r4
   b528e:	f7ff f845 	bl	b431c <_ZN5Print8printlnfEPKcz>
        if(sendAck){    //Transmit out acknowledgement if needed
   b5292:	e754      	b.n	b513e <_Z14processCommandPKchb+0x386>
   b5294:	000c0745 	.word	0x000c0745
   b5298:	2003dcb4 	.word	0x2003dcb4
   b529c:	000c0749 	.word	0x000c0749
   b52a0:	2003dc98 	.word	0x2003dc98
   b52a4:	2003dd4c 	.word	0x2003dd4c
   b52a8:	000c0762 	.word	0x000c0762
   b52ac:	2003ddc0 	.word	0x2003ddc0
   b52b0:	2003dd68 	.word	0x2003dd68
   b52b4:	000c0766 	.word	0x000c0766

000b52b8 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b52b8:	b510      	push	{r4, lr}
   b52ba:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b52bc:	2200      	movs	r2, #0
   b52be:	2104      	movs	r1, #4
   b52c0:	4620      	mov	r0, r4
   b52c2:	f7ff fd79 	bl	b4db8 <_Z14processCommandPKchb>
    if(logMessages){
   b52c6:	4b0b      	ldr	r3, [pc, #44]	; (b52f4 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b52c8:	781b      	ldrb	r3, [r3, #0]
   b52ca:	b193      	cbz	r3, b52f2 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b52cc:	480a      	ldr	r0, [pc, #40]	; (b52f8 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b52ce:	7c03      	ldrb	r3, [r0, #16]
   b52d0:	b92b      	cbnz	r3, b52de <_Z14dataLTEHandlerPKcS0_+0x26>
   b52d2:	490a      	ldr	r1, [pc, #40]	; (b52fc <_Z14dataLTEHandlerPKcS0_+0x44>)
   b52d4:	f244 2202 	movw	r2, #16898	; 0x4202
   b52d8:	3010      	adds	r0, #16
   b52da:	f7ff f8af 	bl	b443c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b52de:	4622      	mov	r2, r4
   b52e0:	4907      	ldr	r1, [pc, #28]	; (b5300 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b52e2:	4805      	ldr	r0, [pc, #20]	; (b52f8 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b52e4:	f7ff f81a 	bl	b431c <_ZN5Print8printlnfEPKcz>
}
   b52e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b52ec:	4805      	ldr	r0, [pc, #20]	; (b5304 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b52ee:	f001 bc6b 	b.w	b6bc8 <_ZN7FatFile5closeEv>
}
   b52f2:	bd10      	pop	{r4, pc}
   b52f4:	2003ddf4 	.word	0x2003ddf4
   b52f8:	2003ddc0 	.word	0x2003ddc0
   b52fc:	2003dd68 	.word	0x2003dd68
   b5300:	000c0789 	.word	0x000c0789
   b5304:	2003ddd0 	.word	0x2003ddd0

000b5308 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5308:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b530a:	f101 0308 	add.w	r3, r1, #8
   b530e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5312:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5314:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5318:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b531a:	460a      	mov	r2, r1
   b531c:	4601      	mov	r1, r0
   b531e:	4668      	mov	r0, sp
   b5320:	f008 ff73 	bl	be20a <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5324:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5328:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b532a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b532e:	b113      	cbz	r3, b5336 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b5330:	2300      	movs	r3, #0
   b5332:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b5336:	f007 fecb 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b533a:	4911      	ldr	r1, [pc, #68]	; (b5380 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b533c:	f007 fac0 	bl	bc8c0 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b5340:	f007 fec6 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5344:	4629      	mov	r1, r5
   b5346:	f007 face 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b534a:	2201      	movs	r2, #1
   b534c:	4611      	mov	r1, r2
   b534e:	4628      	mov	r0, r5
   b5350:	f7ff fd32 	bl	b4db8 <_Z14processCommandPKchb>
    if(logMessages){
   b5354:	4b0b      	ldr	r3, [pc, #44]	; (b5384 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b5356:	781b      	ldrb	r3, [r3, #0]
   b5358:	b183      	cbz	r3, b537c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b535a:	480b      	ldr	r0, [pc, #44]	; (b5388 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b535c:	7c03      	ldrb	r3, [r0, #16]
   b535e:	b92b      	cbnz	r3, b536c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b5360:	490a      	ldr	r1, [pc, #40]	; (b538c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b5362:	f244 2202 	movw	r2, #16898	; 0x4202
   b5366:	3010      	adds	r0, #16
   b5368:	f7ff f868 	bl	b443c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b536c:	4908      	ldr	r1, [pc, #32]	; (b5390 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b536e:	4806      	ldr	r0, [pc, #24]	; (b5388 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b5370:	462a      	mov	r2, r5
   b5372:	f7fe ffd3 	bl	b431c <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5376:	4807      	ldr	r0, [pc, #28]	; (b5394 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b5378:	f001 fc26 	bl	b6bc8 <_ZN7FatFile5closeEv>
}
   b537c:	46bd      	mov	sp, r7
   b537e:	bdb0      	pop	{r4, r5, r7, pc}
   b5380:	000c07a9 	.word	0x000c07a9
   b5384:	2003ddf4 	.word	0x2003ddf4
   b5388:	2003ddc0 	.word	0x2003ddc0
   b538c:	2003dd68 	.word	0x2003dd68
   b5390:	000c07ba 	.word	0x000c07ba
   b5394:	2003ddd0 	.word	0x2003ddd0

000b5398 <_Z10RPiHandlerv>:
void RPiHandler(){
   b5398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(logMessages){
   b539c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b5480 <_Z10RPiHandlerv+0xe8>
   b53a0:	4d34      	ldr	r5, [pc, #208]	; (b5474 <_Z10RPiHandlerv+0xdc>)
void RPiHandler(){
   b53a2:	b089      	sub	sp, #36	; 0x24
   b53a4:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b53a6:	f007 fe93 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b53aa:	6803      	ldr	r3, [r0, #0]
   b53ac:	691b      	ldr	r3, [r3, #16]
   b53ae:	4798      	blx	r3
   b53b0:	2800      	cmp	r0, #0
   b53b2:	d05b      	beq.n	b546c <_Z10RPiHandlerv+0xd4>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b53b4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b5484 <_Z10RPiHandlerv+0xec>
        while(Serial.available()){
   b53b8:	f007 fe8a 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b53bc:	6803      	ldr	r3, [r0, #0]
   b53be:	691b      	ldr	r3, [r3, #16]
   b53c0:	4798      	blx	r3
   b53c2:	2800      	cmp	r0, #0
   b53c4:	d0ef      	beq.n	b53a6 <_Z10RPiHandlerv+0xe>
            String data = Serial.readStringUntil('\n');
   b53c6:	f007 fe83 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b53ca:	220a      	movs	r2, #10
   b53cc:	4601      	mov	r1, r0
   b53ce:	4638      	mov	r0, r7
   b53d0:	f007 fbce 	bl	bcb70 <_ZN6Stream15readStringUntilEc>
            char buffer[data.length()];
   b53d4:	68bb      	ldr	r3, [r7, #8]
   b53d6:	3307      	adds	r3, #7
   b53d8:	f023 0307 	bic.w	r3, r3, #7
        }
   b53dc:	466e      	mov	r6, sp
            char buffer[data.length()];
   b53de:	ebad 0d03 	sub.w	sp, sp, r3
   b53e2:	46ea      	mov	sl, sp
   b53e4:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b53e6:	68b9      	ldr	r1, [r7, #8]
   b53e8:	fa1f fb83 	uxth.w	fp, r3
            for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b53ec:	458b      	cmp	fp, r1
   b53ee:	f103 0401 	add.w	r4, r3, #1
   b53f2:	d207      	bcs.n	b5404 <_Z10RPiHandlerv+0x6c>
   b53f4:	4659      	mov	r1, fp
   b53f6:	4638      	mov	r0, r7
   b53f8:	f007 fcd4 	bl	bcda4 <_ZNK6String6charAtEj>
   b53fc:	4623      	mov	r3, r4
   b53fe:	f80a 000b 	strb.w	r0, [sl, fp]
   b5402:	e7f0      	b.n	b53e6 <_Z10RPiHandlerv+0x4e>
            if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5404:	2901      	cmp	r1, #1
   b5406:	d90a      	bls.n	b541e <_Z10RPiHandlerv+0x86>
   b5408:	3901      	subs	r1, #1
   b540a:	4638      	mov	r0, r7
   b540c:	f007 fcca 	bl	bcda4 <_ZNK6String6charAtEj>
   b5410:	280d      	cmp	r0, #13
   b5412:	bf01      	itttt	eq
   b5414:	68bb      	ldreq	r3, [r7, #8]
   b5416:	4453      	addeq	r3, sl
   b5418:	2200      	moveq	r2, #0
   b541a:	f803 2c01 	strbeq.w	r2, [r3, #-1]
            processCommand(buffer,3,true);
   b541e:	2201      	movs	r2, #1
   b5420:	2103      	movs	r1, #3
   b5422:	4650      	mov	r0, sl
   b5424:	f7ff fcc8 	bl	b4db8 <_Z14processCommandPKchb>
            if(logMessages){
   b5428:	f899 3000 	ldrb.w	r3, [r9]
   b542c:	b1cb      	cbz	r3, b5462 <_Z10RPiHandlerv+0xca>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b542e:	7c2b      	ldrb	r3, [r5, #16]
   b5430:	b92b      	cbnz	r3, b543e <_Z10RPiHandlerv+0xa6>
   b5432:	4911      	ldr	r1, [pc, #68]	; (b5478 <_Z10RPiHandlerv+0xe0>)
   b5434:	4811      	ldr	r0, [pc, #68]	; (b547c <_Z10RPiHandlerv+0xe4>)
   b5436:	f244 2202 	movw	r2, #16898	; 0x4202
   b543a:	f7fe ffff 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b543e:	4639      	mov	r1, r7
   b5440:	f107 0010 	add.w	r0, r7, #16
   b5444:	f007 fc42 	bl	bcccc <_ZN6StringC1ERKS_>
   b5448:	f107 0210 	add.w	r2, r7, #16
   b544c:	4641      	mov	r1, r8
   b544e:	4628      	mov	r0, r5
   b5450:	f7fe ff64 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b5454:	f107 0010 	add.w	r0, r7, #16
   b5458:	f007 fba2 	bl	bcba0 <_ZN6StringD1Ev>
                logFile.close();
   b545c:	4807      	ldr	r0, [pc, #28]	; (b547c <_Z10RPiHandlerv+0xe4>)
   b545e:	f001 fbb3 	bl	b6bc8 <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b5462:	4638      	mov	r0, r7
   b5464:	f007 fb9c 	bl	bcba0 <_ZN6StringD1Ev>
   b5468:	46b5      	mov	sp, r6
        while(Serial.available()){
   b546a:	e7a5      	b.n	b53b8 <_Z10RPiHandlerv+0x20>
}
   b546c:	3724      	adds	r7, #36	; 0x24
   b546e:	46bd      	mov	sp, r7
   b5470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5474:	2003ddc0 	.word	0x2003ddc0
   b5478:	2003dd68 	.word	0x2003dd68
   b547c:	2003ddd0 	.word	0x2003ddd0
   b5480:	2003ddf4 	.word	0x2003ddf4
   b5484:	000c07da 	.word	0x000c07da

000b5488 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b548c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b557c <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b5490:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5580 <_Z11XBeeHandlerv+0xf8>
   b5494:	4d35      	ldr	r5, [pc, #212]	; (b556c <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b5496:	b089      	sub	sp, #36	; 0x24
   b5498:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b549a:	f007 ffc5 	bl	bd428 <_Z22__fetch_global_Serial1v>
   b549e:	6803      	ldr	r3, [r0, #0]
   b54a0:	691b      	ldr	r3, [r3, #16]
   b54a2:	4798      	blx	r3
   b54a4:	2800      	cmp	r0, #0
   b54a6:	d05c      	beq.n	b5562 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b54a8:	f007 ffbe 	bl	bd428 <_Z22__fetch_global_Serial1v>
   b54ac:	220a      	movs	r2, #10
   b54ae:	4601      	mov	r1, r0
   b54b0:	4638      	mov	r0, r7
   b54b2:	f007 fb5d 	bl	bcb70 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b54b6:	68bb      	ldr	r3, [r7, #8]
   b54b8:	3307      	adds	r3, #7
   b54ba:	f023 0307 	bic.w	r3, r3, #7
    }
   b54be:	466e      	mov	r6, sp
        char buffer[data.length()];
   b54c0:	ebad 0d03 	sub.w	sp, sp, r3
   b54c4:	46ea      	mov	sl, sp
   b54c6:	2300      	movs	r3, #0
   b54c8:	68b9      	ldr	r1, [r7, #8]
   b54ca:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b54ce:	458b      	cmp	fp, r1
   b54d0:	f103 0401 	add.w	r4, r3, #1
   b54d4:	d207      	bcs.n	b54e6 <_Z11XBeeHandlerv+0x5e>
   b54d6:	4659      	mov	r1, fp
   b54d8:	4638      	mov	r0, r7
   b54da:	f007 fc63 	bl	bcda4 <_ZNK6String6charAtEj>
   b54de:	4623      	mov	r3, r4
   b54e0:	f80a 000b 	strb.w	r0, [sl, fp]
   b54e4:	e7f0      	b.n	b54c8 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b54e6:	2901      	cmp	r1, #1
   b54e8:	d90a      	bls.n	b5500 <_Z11XBeeHandlerv+0x78>
   b54ea:	3901      	subs	r1, #1
   b54ec:	4638      	mov	r0, r7
   b54ee:	f007 fc59 	bl	bcda4 <_ZNK6String6charAtEj>
   b54f2:	280d      	cmp	r0, #13
   b54f4:	bf01      	itttt	eq
   b54f6:	68bb      	ldreq	r3, [r7, #8]
   b54f8:	4453      	addeq	r3, sl
   b54fa:	2200      	moveq	r2, #0
   b54fc:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5500:	2201      	movs	r2, #1
   b5502:	2102      	movs	r1, #2
   b5504:	4650      	mov	r0, sl
   b5506:	f7ff fc57 	bl	b4db8 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b550a:	f007 fde1 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b550e:	4641      	mov	r1, r8
   b5510:	f007 f9e9 	bl	bc8e6 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5514:	f007 fddc 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5518:	6839      	ldr	r1, [r7, #0]
   b551a:	f007 f9e4 	bl	bc8e6 <_ZN5Print7printlnEPKc>
        if(logMessages){
   b551e:	f899 3000 	ldrb.w	r3, [r9]
   b5522:	b1cb      	cbz	r3, b5558 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5524:	7c2b      	ldrb	r3, [r5, #16]
   b5526:	b92b      	cbnz	r3, b5534 <_Z11XBeeHandlerv+0xac>
   b5528:	4911      	ldr	r1, [pc, #68]	; (b5570 <_Z11XBeeHandlerv+0xe8>)
   b552a:	4812      	ldr	r0, [pc, #72]	; (b5574 <_Z11XBeeHandlerv+0xec>)
   b552c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5530:	f7fe ff84 	bl	b443c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5534:	4639      	mov	r1, r7
   b5536:	f107 0010 	add.w	r0, r7, #16
   b553a:	f007 fbc7 	bl	bcccc <_ZN6StringC1ERKS_>
   b553e:	490e      	ldr	r1, [pc, #56]	; (b5578 <_Z11XBeeHandlerv+0xf0>)
   b5540:	f107 0210 	add.w	r2, r7, #16
   b5544:	4628      	mov	r0, r5
   b5546:	f7fe fee9 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b554a:	f107 0010 	add.w	r0, r7, #16
   b554e:	f007 fb27 	bl	bcba0 <_ZN6StringD1Ev>
            logFile.close();
   b5552:	4808      	ldr	r0, [pc, #32]	; (b5574 <_Z11XBeeHandlerv+0xec>)
   b5554:	f001 fb38 	bl	b6bc8 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5558:	4638      	mov	r0, r7
   b555a:	f007 fb21 	bl	bcba0 <_ZN6StringD1Ev>
   b555e:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5560:	e79b      	b.n	b549a <_Z11XBeeHandlerv+0x12>
}
   b5562:	3724      	adds	r7, #36	; 0x24
   b5564:	46bd      	mov	sp, r7
   b5566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b556a:	bf00      	nop
   b556c:	2003ddc0 	.word	0x2003ddc0
   b5570:	2003dd68 	.word	0x2003dd68
   b5574:	2003ddd0 	.word	0x2003ddd0
   b5578:	000c0815 	.word	0x000c0815
   b557c:	000c0803 	.word	0x000c0803
   b5580:	2003ddf4 	.word	0x2003ddf4

000b5584 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5588:	4d1e      	ldr	r5, [pc, #120]	; (b5604 <_Z11WaterBotSimh+0x80>)
        WaterBots.push_back(simBot);
   b558a:	f8df a078 	ldr.w	sl, [pc, #120]	; b5604 <_Z11WaterBotSimh+0x80>
   b558e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5592:	1a9b      	subs	r3, r3, r2
   b5594:	4a1c      	ldr	r2, [pc, #112]	; (b5608 <_Z11WaterBotSimh+0x84>)
   b5596:	109b      	asrs	r3, r3, #2
   b5598:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b559a:	b2dc      	uxtb	r4, r3
   b559c:	4403      	add	r3, r0
   b559e:	2b0a      	cmp	r3, #10
   b55a0:	bf84      	itt	hi
   b55a2:	f1c4 000a 	rsbhi	r0, r4, #10
   b55a6:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b55a8:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b55aa:	b08e      	sub	sp, #56	; 0x38
    uint8_t botloop = count+WaterBots.size();
   b55ac:	b2c4      	uxtb	r4, r0
   b55ae:	2700      	movs	r7, #0
        simBot.XBeeAvail = true;
   b55b0:	f04f 0901 	mov.w	r9, #1
   b55b4:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b55b8:	4544      	cmp	r4, r8
   b55ba:	d91f      	bls.n	b55fc <_Z11WaterBotSimh+0x78>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b55bc:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b55c0:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b55c2:	4299      	cmp	r1, r3
   b55c4:	d005      	beq.n	b55d2 <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b55c6:	f813 2b34 	ldrb.w	r2, [r3], #52
   b55ca:	4542      	cmp	r2, r8
   b55cc:	bf08      	it	eq
   b55ce:	2601      	moveq	r6, #1
	return *this;
   b55d0:	e7f7      	b.n	b55c2 <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b55d2:	b98e      	cbnz	r6, b55f8 <_Z11WaterBotSimh+0x74>
        WaterBot simBot;
   b55d4:	a801      	add	r0, sp, #4
   b55d6:	f7ff f821 	bl	b461c <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b55da:	2064      	movs	r0, #100	; 0x64
        simBot.botNum = temp;
   b55dc:	f88d 8004 	strb.w	r8, [sp, #4]
        simBot.BLEAvail = false;
   b55e0:	f8ad 6006 	strh.w	r6, [sp, #6]
        simBot.XBeeAvail = true;
   b55e4:	f88d 9008 	strb.w	r9, [sp, #8]
        simBot.battPercent = random(100);
   b55e8:	f007 f9d6 	bl	bc998 <_Z6randomi>
        WaterBots.push_back(simBot);
   b55ec:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b55ee:	f88d 0005 	strb.w	r0, [sp, #5]
        WaterBots.push_back(simBot);
   b55f2:	4650      	mov	r0, sl
   b55f4:	f7ff fbc6 	bl	b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b55f8:	3701      	adds	r7, #1
   b55fa:	e7db      	b.n	b55b4 <_Z11WaterBotSimh+0x30>
}
   b55fc:	b00e      	add	sp, #56	; 0x38
   b55fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5602:	bf00      	nop
   b5604:	2003dcb4 	.word	0x2003dcb4
   b5608:	c4ec4ec5 	.word	0xc4ec4ec5

000b560c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b560c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5610:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5614:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5616:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b561a:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b561e:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5622:	4607      	mov	r7, r0
   b5624:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5626:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b562a:	d102      	bne.n	b5632 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b562c:	4820      	ldr	r0, [pc, #128]	; (b56b0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b562e:	f007 ff24 	bl	bd47a <_ZSt20__throw_length_errorPKc>
   b5632:	2c01      	cmp	r4, #1
   b5634:	4622      	mov	r2, r4
   b5636:	bf38      	it	cc
   b5638:	2201      	movcc	r2, #1
   b563a:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b563c:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5640:	d231      	bcs.n	b56a6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5642:	b394      	cbz	r4, b56aa <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5644:	429c      	cmp	r4, r3
   b5646:	bf28      	it	cs
   b5648:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b564a:	00e0      	lsls	r0, r4, #3
   b564c:	f7fe fd23 	bl	b4096 <_Znwj>
   b5650:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5652:	1973      	adds	r3, r6, r5
   b5654:	bf1c      	itt	ne
   b5656:	e9db 0100 	ldrdne	r0, r1, [fp]
   b565a:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b565e:	2d00      	cmp	r5, #0
   b5660:	dd04      	ble.n	b566c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5662:	462a      	mov	r2, r5
   b5664:	4641      	mov	r1, r8
   b5666:	4630      	mov	r0, r6
   b5668:	f008 fddd 	bl	be226 <memmove>
      ptrdiff_t __count = __last - __first;
   b566c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5670:	3508      	adds	r5, #8
      if (__count > 0)
   b5672:	f1b9 0f00 	cmp.w	r9, #0
   b5676:	4435      	add	r5, r6
   b5678:	dd04      	ble.n	b5684 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b567a:	464a      	mov	r2, r9
   b567c:	4651      	mov	r1, sl
   b567e:	4628      	mov	r0, r5
   b5680:	f008 fdc3 	bl	be20a <memcpy>
      return __result + __count;
   b5684:	444d      	add	r5, r9
	if (__p)
   b5686:	f1b8 0f00 	cmp.w	r8, #0
   b568a:	d005      	beq.n	b5698 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b568c:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b568e:	4640      	mov	r0, r8
   b5690:	eba1 0108 	sub.w	r1, r1, r8
   b5694:	f7fe fd03 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5698:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b569c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b56a0:	60bc      	str	r4, [r7, #8]
    }
   b56a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b56a6:	461c      	mov	r4, r3
   b56a8:	e7cf      	b.n	b564a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b56aa:	4626      	mov	r6, r4
   b56ac:	e7d1      	b.n	b5652 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b56ae:	bf00      	nop
   b56b0:	000c057b 	.word	0x000c057b

000b56b4 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b56b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56b8:	b0b3      	sub	sp, #204	; 0xcc
   b56ba:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b56bc:	f004 fdd8 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56c0:	4984      	ldr	r1, [pc, #528]	; (b58d4 <_Z7BLEScani+0x220>)
   b56c2:	2214      	movs	r2, #20
   b56c4:	f004 fecc 	bl	ba460 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b56c8:	4680      	mov	r8, r0
   b56ca:	2800      	cmp	r0, #0
   b56cc:	f000 80ff 	beq.w	b58ce <_Z7BLEScani+0x21a>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b56d0:	f8df b200 	ldr.w	fp, [pc, #512]	; b58d4 <_Z7BLEScani+0x220>
		for (uint8_t ii = 0; ii < count; ii++) {
   b56d4:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b56d6:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b56da:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b56de:	f109 0708 	add.w	r7, r9, #8
   b56e2:	a80b      	add	r0, sp, #44	; 0x2c
   b56e4:	445f      	add	r7, fp
   b56e6:	f004 fa27 	bl	b9b38 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b56ea:	2201      	movs	r2, #1
   b56ec:	a90b      	add	r1, sp, #44	; 0x2c
   b56ee:	4638      	mov	r0, r7
   b56f0:	f005 fd7e 	bl	bb1f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b56f4:	4682      	mov	sl, r0
   b56f6:	2800      	cmp	r0, #0
   b56f8:	d056      	beq.n	b57a8 <_Z7BLEScani+0xf4>
   b56fa:	4977      	ldr	r1, [pc, #476]	; (b58d8 <_Z7BLEScani+0x224>)
   b56fc:	a80b      	add	r0, sp, #44	; 0x2c
   b56fe:	f004 fa76 	bl	b9bee <_ZNK8particle7BleUuideqERKS0_>
   b5702:	4605      	mov	r5, r0
   b5704:	2800      	cmp	r0, #0
   b5706:	d04f      	beq.n	b57a8 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5708:	2208      	movs	r2, #8
   b570a:	a909      	add	r1, sp, #36	; 0x24
   b570c:	4638      	mov	r0, r7
   b570e:	f004 fbcb 	bl	b9ea8 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5712:	1cb2      	adds	r2, r6, #2
   b5714:	d153      	bne.n	b57be <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b5716:	f007 fcdb 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b571a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b571e:	9305      	str	r3, [sp, #20]
   b5720:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b5724:	9304      	str	r3, [sp, #16]
   b5726:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b572a:	9303      	str	r3, [sp, #12]
   b572c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b5730:	9302      	str	r3, [sp, #8]
   b5732:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
      : _M_current(__i) { }
   b5736:	4f69      	ldr	r7, [pc, #420]	; (b58dc <_Z7BLEScani+0x228>)
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b573e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b5742:	4967      	ldr	r1, [pc, #412]	; (b58e0 <_Z7BLEScani+0x22c>)
   b5744:	9300      	str	r3, [sp, #0]
   b5746:	f8cd a018 	str.w	sl, [sp, #24]
   b574a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b574e:	f7fe fde5 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b5752:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b5754:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   b5758:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b575a:	4293      	cmp	r3, r2
   b575c:	d005      	beq.n	b576a <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b575e:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b5762:	4288      	cmp	r0, r1
   b5764:	bf08      	it	eq
   b5766:	2500      	moveq	r5, #0
	return *this;
   b5768:	e7f7      	b.n	b575a <_Z7BLEScani+0xa6>
                    if(newBot){
   b576a:	b1ed      	cbz	r5, b57a8 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b576c:	2224      	movs	r2, #36	; 0x24
   b576e:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b5772:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
                        NewBot.rssi = scanResults[ii].rssi();
   b5776:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b577a:	9226      	str	r2, [sp, #152]	; 0x98
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b577c:	68ba      	ldr	r2, [r7, #8]
   b577e:	4293      	cmp	r3, r2
   b5780:	d017      	beq.n	b57b2 <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5782:	b11b      	cbz	r3, b578c <_Z7BLEScani+0xd8>
   b5784:	e9dd 0125 	ldrd	r0, r1, [sp, #148]	; 0x94
   b5788:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b578c:	687b      	ldr	r3, [r7, #4]
   b578e:	3308      	adds	r3, #8
   b5790:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b5792:	f007 fc9d 	bl	bd0d0 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5796:	e9d7 2300 	ldrd	r2, r3, [r7]
   b579a:	1a9b      	subs	r3, r3, r2
   b579c:	4951      	ldr	r1, [pc, #324]	; (b58e4 <_Z7BLEScani+0x230>)
   b579e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b57a2:	10db      	asrs	r3, r3, #3
   b57a4:	f7fe fdba 	bl	b431c <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b57a8:	3401      	adds	r4, #1
   b57aa:	b2e4      	uxtb	r4, r4
   b57ac:	4544      	cmp	r4, r8
   b57ae:	d392      	bcc.n	b56d6 <_Z7BLEScani+0x22>
   b57b0:	e08d      	b.n	b58ce <_Z7BLEScani+0x21a>
	  _M_realloc_insert(end(), __x);
   b57b2:	484a      	ldr	r0, [pc, #296]	; (b58dc <_Z7BLEScani+0x228>)
   b57b4:	aa25      	add	r2, sp, #148	; 0x94
   b57b6:	4619      	mov	r1, r3
   b57b8:	f7ff ff28 	bl	b560c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b57bc:	e7e9      	b.n	b5792 <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b57be:	1c73      	adds	r3, r6, #1
   b57c0:	d003      	beq.n	b57ca <_Z7BLEScani+0x116>
   b57c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b57c6:	42b3      	cmp	r3, r6
   b57c8:	d1ee      	bne.n	b57a8 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b57ca:	f004 fd51 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57ce:	f10d 0894 	add.w	r8, sp, #148	; 0x94
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b57d2:	4d45      	ldr	r5, [pc, #276]	; (b58e8 <_Z7BLEScani+0x234>)
   b57d4:	4601      	mov	r1, r0
   b57d6:	2301      	movs	r3, #1
   b57d8:	eb0b 0209 	add.w	r2, fp, r9
   b57dc:	4640      	mov	r0, r8
   b57de:	f006 f93f 	bl	bba60 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b57e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b57e4:	9c26      	ldr	r4, [sp, #152]	; 0x98
   b57e6:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b57e8:	686b      	ldr	r3, [r5, #4]
   b57ea:	429c      	cmp	r4, r3
   b57ec:	d008      	beq.n	b5800 <_Z7BLEScani+0x14c>
	    if (__tmp != 0)
   b57ee:	b114      	cbz	r4, b57f6 <_Z7BLEScani+0x142>
    { ++_M_use_count; }
   b57f0:	6863      	ldr	r3, [r4, #4]
   b57f2:	3301      	adds	r3, #1
   b57f4:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b57f6:	6868      	ldr	r0, [r5, #4]
   b57f8:	b108      	cbz	r0, b57fe <_Z7BLEScani+0x14a>
	      _M_pi->_M_release();
   b57fa:	f7fe fddb 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b57fe:	606c      	str	r4, [r5, #4]
   b5800:	4640      	mov	r0, r8
   b5802:	f004 fea4 	bl	ba54e <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5806:	4838      	ldr	r0, [pc, #224]	; (b58e8 <_Z7BLEScani+0x234>)
   b5808:	f004 fca4 	bl	ba154 <_ZNK8particle13BlePeerDevice9connectedEv>
   b580c:	4606      	mov	r6, r0
   b580e:	2800      	cmp	r0, #0
   b5810:	d05d      	beq.n	b58ce <_Z7BLEScani+0x21a>
                        meshPair = false;
   b5812:	4b36      	ldr	r3, [pc, #216]	; (b58ec <_Z7BLEScani+0x238>)
      : _M_current(__i) { }
   b5814:	f8df 9100 	ldr.w	r9, [pc, #256]	; b5918 <_Z7BLEScani+0x264>
   b5818:	2200      	movs	r2, #0
   b581a:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b581c:	4b34      	ldr	r3, [pc, #208]	; (b58f0 <_Z7BLEScani+0x23c>)
   b581e:	f04f 0a01 	mov.w	sl, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5822:	221f      	movs	r2, #31
   b5824:	a910      	add	r1, sp, #64	; 0x40
   b5826:	4638      	mov	r0, r7
                        startConnect = true;
   b5828:	f883 a000 	strb.w	sl, [r3]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b582c:	f004 fb3c 	bl	b9ea8 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5830:	4a30      	ldr	r2, [pc, #192]	; (b58f4 <_Z7BLEScani+0x240>)
   b5832:	4931      	ldr	r1, [pc, #196]	; (b58f8 <_Z7BLEScani+0x244>)
   b5834:	482c      	ldr	r0, [pc, #176]	; (b58e8 <_Z7BLEScani+0x234>)
   b5836:	f005 fda7 	bl	bb388 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b583a:	4a30      	ldr	r2, [pc, #192]	; (b58fc <_Z7BLEScani+0x248>)
   b583c:	4930      	ldr	r1, [pc, #192]	; (b5900 <_Z7BLEScani+0x24c>)
   b583e:	482a      	ldr	r0, [pc, #168]	; (b58e8 <_Z7BLEScani+0x234>)
   b5840:	f005 fda2 	bl	bb388 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5844:	4a2f      	ldr	r2, [pc, #188]	; (b5904 <_Z7BLEScani+0x250>)
   b5846:	4930      	ldr	r1, [pc, #192]	; (b5908 <_Z7BLEScani+0x254>)
   b5848:	4827      	ldr	r0, [pc, #156]	; (b58e8 <_Z7BLEScani+0x234>)
   b584a:	f005 fd9d 	bl	bb388 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b584e:	f007 fc3f 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5852:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b5856:	492d      	ldr	r1, [pc, #180]	; (b590c <_Z7BLEScani+0x258>)
   b5858:	f7fe fd60 	bl	b431c <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b585c:	a818      	add	r0, sp, #96	; 0x60
   b585e:	f7fe fedd 	bl	b461c <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b5862:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
                        PairBots.push_back(newWaterbot);
   b5866:	482a      	ldr	r0, [pc, #168]	; (b5910 <_Z7BLEScani+0x25c>)
                        newWaterbot.BLEAvail = true;
   b5868:	f88d a062 	strb.w	sl, [sp, #98]	; 0x62
                        PairBots.push_back(newWaterbot);
   b586c:	a918      	add	r1, sp, #96	; 0x60
                        newWaterbot.botNum = bufName[0];
   b586e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                        PairBots.push_back(newWaterbot);
   b5872:	f7ff fa87 	bl	b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5876:	e9d9 7c00 	ldrd	r7, ip, [r9]
                                BLEBot = &w;
   b587a:	f8df e0a0 	ldr.w	lr, [pc, #160]	; b591c <_Z7BLEScani+0x268>
                        for(WaterBot w: WaterBots){
   b587e:	45bc      	cmp	ip, r7
   b5880:	d016      	beq.n	b58b0 <_Z7BLEScani+0x1fc>
   b5882:	463d      	mov	r5, r7
   b5884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5886:	4644      	mov	r4, r8
   b5888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b588a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b588c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b588e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5892:	682b      	ldr	r3, [r5, #0]
   b5894:	6023      	str	r3, [r4, #0]
                            if(bufName[0] == w.botNum){
   b5896:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b589a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   b589e:	429a      	cmp	r2, r3
                                w.BLEAvail = true;
   b58a0:	bf02      	ittt	eq
   b58a2:	f88d a096 	strbeq.w	sl, [sp, #150]	; 0x96
                                BLEBot = &w;
   b58a6:	f8ce 8000 	streq.w	r8, [lr]
                                newBot = false;
   b58aa:	2600      	moveq	r6, #0
      operator++() _GLIBCXX_NOEXCEPT
   b58ac:	3734      	adds	r7, #52	; 0x34
	return *this;
   b58ae:	e7e6      	b.n	b587e <_Z7BLEScani+0x1ca>
                        if(newBot){
   b58b0:	b16e      	cbz	r6, b58ce <_Z7BLEScani+0x21a>
                            Serial.println("Found a new water bot ID");
   b58b2:	f007 fc0d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b58b6:	4917      	ldr	r1, [pc, #92]	; (b5914 <_Z7BLEScani+0x260>)
   b58b8:	f007 f815 	bl	bc8e6 <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b58bc:	4816      	ldr	r0, [pc, #88]	; (b5918 <_Z7BLEScani+0x264>)
   b58be:	a918      	add	r1, sp, #96	; 0x60
   b58c0:	f7ff fa60 	bl	b4d84 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b58c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
                            BLEBot = &WaterBots.back();
   b58c8:	4a14      	ldr	r2, [pc, #80]	; (b591c <_Z7BLEScani+0x268>)
   b58ca:	3b34      	subs	r3, #52	; 0x34
   b58cc:	6013      	str	r3, [r2, #0]
}
   b58ce:	b033      	add	sp, #204	; 0xcc
   b58d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b58d4:	2003dee0 	.word	0x2003dee0
   b58d8:	2003dcc0 	.word	0x2003dcc0
   b58dc:	2003dc78 	.word	0x2003dc78
   b58e0:	000c0836 	.word	0x000c0836
   b58e4:	000c0869 	.word	0x000c0869
   b58e8:	2003debc 	.word	0x2003debc
   b58ec:	2003ddf6 	.word	0x2003ddf6
   b58f0:	2003e634 	.word	0x2003e634
   b58f4:	2003dce8 	.word	0x2003dce8
   b58f8:	2003ded4 	.word	0x2003ded4
   b58fc:	2003dcd4 	.word	0x2003dcd4
   b5900:	2003decc 	.word	0x2003decc
   b5904:	2003dd00 	.word	0x2003dd00
   b5908:	2003dec4 	.word	0x2003dec4
   b590c:	000c087b 	.word	0x000c087b
   b5910:	2003dc98 	.word	0x2003dc98
   b5914:	000c0749 	.word	0x000c0749
   b5918:	2003dcb4 	.word	0x2003dcb4
   b591c:	2003dc74 	.word	0x2003dc74

000b5920 <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b5920:	b530      	push	{r4, r5, lr}
    if (!logDir.open("/")) {
   b5922:	4938      	ldr	r1, [pc, #224]	; (b5a04 <_Z13DataOffloaderh+0xe4>)
void DataOffloader(uint8_t bot_id){
   b5924:	b087      	sub	sp, #28
   b5926:	4605      	mov	r5, r0
    if (!logDir.open("/")) {
   b5928:	2200      	movs	r2, #0
   b592a:	4837      	ldr	r0, [pc, #220]	; (b5a08 <_Z13DataOffloaderh+0xe8>)
   b592c:	f7fe fd86 	bl	b443c <_ZN7FatFile4openEPKci>
   b5930:	b950      	cbnz	r0, b5948 <_Z13DataOffloaderh+0x28>
        offloadingDone = true;
   b5932:	4b36      	ldr	r3, [pc, #216]	; (b5a0c <_Z13DataOffloaderh+0xec>)
   b5934:	2201      	movs	r2, #1
   b5936:	701a      	strb	r2, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5938:	f007 fbca 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b593c:	4934      	ldr	r1, [pc, #208]	; (b5a10 <_Z13DataOffloaderh+0xf0>)
}
   b593e:	b007      	add	sp, #28
   b5940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5944:	f006 bfcf 	b.w	bc8e6 <_ZN5Print7printlnEPKc>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5948:	4a32      	ldr	r2, [pc, #200]	; (b5a14 <_Z13DataOffloaderh+0xf4>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b594a:	4c33      	ldr	r4, [pc, #204]	; (b5a18 <_Z13DataOffloaderh+0xf8>)
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b594c:	462b      	mov	r3, r5
   b594e:	210a      	movs	r1, #10
   b5950:	a803      	add	r0, sp, #12
   b5952:	f003 ff33 	bl	b97bc <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b5956:	2300      	movs	r3, #0
   b5958:	4619      	mov	r1, r3
   b595a:	9300      	str	r3, [sp, #0]
   b595c:	2201      	movs	r2, #1
   b595e:	a803      	add	r0, sp, #12
   b5960:	f7fe fe84 	bl	b466c <_Z8sendDataPKchbbb>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5964:	f007 fbb4 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5968:	6823      	ldr	r3, [r4, #0]
   b596a:	492c      	ldr	r1, [pc, #176]	; (b5a1c <_Z13DataOffloaderh+0xfc>)
   b596c:	781a      	ldrb	r2, [r3, #0]
   b596e:	f7fe fcd5 	bl	b431c <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b5972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5976:	f003 ff61 	bl	b983c <delay>
        if(BLEBot->botNum != OffloadingBot){
   b597a:	6823      	ldr	r3, [r4, #0]
   b597c:	781b      	ldrb	r3, [r3, #0]
   b597e:	42ab      	cmp	r3, r5
   b5980:	d01e      	beq.n	b59c0 <_Z13DataOffloaderh+0xa0>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5982:	f007 fba5 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5986:	6822      	ldr	r2, [r4, #0]
   b5988:	4925      	ldr	r1, [pc, #148]	; (b5a20 <_Z13DataOffloaderh+0x100>)
   b598a:	7812      	ldrb	r2, [r2, #0]
   b598c:	462b      	mov	r3, r5
   b598e:	f7fe fcc5 	bl	b431c <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b5992:	f004 fc6d 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5996:	f005 fa89 	bl	baeac <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b599a:	f004 fc69 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b599e:	f004 fd14 	bl	ba3ca <_ZNK8particle14BleLocalDevice9connectedEv>
   b59a2:	b930      	cbnz	r0, b59b2 <_Z13DataOffloaderh+0x92>
                BLEScan(OffloadingBot);
   b59a4:	4628      	mov	r0, r5
   b59a6:	f7ff fe85 	bl	b56b4 <_Z7BLEScani>
                delay(50);
   b59aa:	2032      	movs	r0, #50	; 0x32
   b59ac:	f003 ff46 	bl	b983c <delay>
            while(!BLE.connected()){
   b59b0:	e7f3      	b.n	b599a <_Z13DataOffloaderh+0x7a>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b59b2:	f007 fb8d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b59b6:	6823      	ldr	r3, [r4, #0]
   b59b8:	491a      	ldr	r1, [pc, #104]	; (b5a24 <_Z13DataOffloaderh+0x104>)
   b59ba:	781a      	ldrb	r2, [r3, #0]
   b59bc:	f7fe fcae 	bl	b431c <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b59c0:	f007 fb86 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b59c4:	6823      	ldr	r3, [r4, #0]
   b59c6:	4918      	ldr	r1, [pc, #96]	; (b5a28 <_Z13DataOffloaderh+0x108>)
   b59c8:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b59ca:	4d10      	ldr	r5, [pc, #64]	; (b5a0c <_Z13DataOffloaderh+0xec>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b59cc:	f7fe fca6 	bl	b431c <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b59d0:	2300      	movs	r3, #0
   b59d2:	702b      	strb	r3, [r5, #0]
        while(!offloadingDone) delay(100);
   b59d4:	2064      	movs	r0, #100	; 0x64
   b59d6:	f003 ff31 	bl	b983c <delay>
   b59da:	782b      	ldrb	r3, [r5, #0]
   b59dc:	2b00      	cmp	r3, #0
   b59de:	d0f9      	beq.n	b59d4 <_Z13DataOffloaderh+0xb4>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b59e0:	f007 fb76 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b59e4:	6823      	ldr	r3, [r4, #0]
   b59e6:	4911      	ldr	r1, [pc, #68]	; (b5a2c <_Z13DataOffloaderh+0x10c>)
   b59e8:	781a      	ldrb	r2, [r3, #0]
   b59ea:	f7fe fc97 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b59ee:	4810      	ldr	r0, [pc, #64]	; (b5a30 <_Z13DataOffloaderh+0x110>)
    if(logDir.isOpen()) logDir.close();
   b59f0:	7c03      	ldrb	r3, [r0, #16]
   b59f2:	b113      	cbz	r3, b59fa <_Z13DataOffloaderh+0xda>
   b59f4:	3010      	adds	r0, #16
   b59f6:	f001 f8e7 	bl	b6bc8 <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b59fa:	4b0e      	ldr	r3, [pc, #56]	; (b5a34 <_Z13DataOffloaderh+0x114>)
   b59fc:	2200      	movs	r2, #0
   b59fe:	701a      	strb	r2, [r3, #0]
}
   b5a00:	b007      	add	sp, #28
   b5a02:	bd30      	pop	{r4, r5, pc}
   b5a04:	000c088f 	.word	0x000c088f
   b5a08:	2003dd9c 	.word	0x2003dd9c
   b5a0c:	2003de4a 	.word	0x2003de4a
   b5a10:	000c0891 	.word	0x000c0891
   b5a14:	000c08d2 	.word	0x000c08d2
   b5a18:	2003dc74 	.word	0x2003dc74
   b5a1c:	000c08db 	.word	0x000c08db
   b5a20:	000c0908 	.word	0x000c0908
   b5a24:	000c0941 	.word	0x000c0941
   b5a28:	000c0962 	.word	0x000c0962
   b5a2c:	000c0985 	.word	0x000c0985
   b5a30:	2003dd8c 	.word	0x2003dd8c
   b5a34:	2003de4b 	.word	0x2003de4b

000b5a38 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a3c:	6843      	ldr	r3, [r0, #4]
   b5a3e:	f8d0 8000 	ldr.w	r8, [r0]
   b5a42:	9301      	str	r3, [sp, #4]
   b5a44:	eba3 0408 	sub.w	r4, r3, r8
   b5a48:	4b40      	ldr	r3, [pc, #256]	; (b5b4c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>)
   b5a4a:	10e4      	asrs	r4, r4, #3
   b5a4c:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b5a4e:	4b40      	ldr	r3, [pc, #256]	; (b5b50 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b5a50:	429c      	cmp	r4, r3
   b5a52:	4607      	mov	r7, r0
   b5a54:	4689      	mov	r9, r1
   b5a56:	4692      	mov	sl, r2
   b5a58:	d102      	bne.n	b5a60 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b5a5a:	483e      	ldr	r0, [pc, #248]	; (b5b54 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b5a5c:	f007 fd0d 	bl	bd47a <_ZSt20__throw_length_errorPKc>
   b5a60:	2c01      	cmp	r4, #1
   b5a62:	4622      	mov	r2, r4
   b5a64:	bf38      	it	cc
   b5a66:	2201      	movcc	r2, #1
   b5a68:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5a6a:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5a6e:	d229      	bcs.n	b5ac4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5a70:	b354      	cbz	r4, b5ac8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b5a72:	429c      	cmp	r4, r3
   b5a74:	bf28      	it	cs
   b5a76:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5a78:	2018      	movs	r0, #24
   b5a7a:	4360      	muls	r0, r4
   b5a7c:	f7fe fb0b 	bl	b4096 <_Znwj>
   b5a80:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5a82:	eb16 0c05 	adds.w	ip, r6, r5
   b5a86:	bf1f      	itttt	ne
   b5a88:	e8ba 000f 	ldmiane.w	sl!, {r0, r1, r2, r3}
   b5a8c:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b5a90:	e9da 0100 	ldrdne	r0, r1, [sl]
   b5a94:	e9cc 0100 	strdne	r0, r1, [ip]
   b5a98:	46b2      	mov	sl, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a9a:	46c3      	mov	fp, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b5a9c:	45d9      	cmp	r9, fp
   b5a9e:	d015      	beq.n	b5acc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b5aa0:	f1ba 0f00 	cmp.w	sl, #0
   b5aa4:	d009      	beq.n	b5aba <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b5aa6:	46de      	mov	lr, fp
   b5aa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5aac:	46d4      	mov	ip, sl
   b5aae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5ab2:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b5ab6:	e88c 0003 	stmia.w	ip, {r0, r1}
   b5aba:	f10b 0b18 	add.w	fp, fp, #24
   b5abe:	f10a 0a18 	add.w	sl, sl, #24
   b5ac2:	e7eb      	b.n	b5a9c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5ac4:	461c      	mov	r4, r3
   b5ac6:	e7d7      	b.n	b5a78 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5ac8:	4626      	mov	r6, r4
   b5aca:	e7da      	b.n	b5a82 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b5acc:	f8df a088 	ldr.w	sl, [pc, #136]	; b5b58 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
   b5ad0:	08ed      	lsrs	r5, r5, #3
   b5ad2:	fb0a f505 	mul.w	r5, sl, r5
   b5ad6:	2318      	movs	r3, #24
   b5ad8:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
   b5adc:	435d      	muls	r5, r3
   b5ade:	eb08 0b05 	add.w	fp, r8, r5
	      ++__new_finish;
   b5ae2:	441d      	add	r5, r3
   b5ae4:	1973      	adds	r3, r6, r5
   b5ae6:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5ae8:	4699      	mov	r9, r3
   b5aea:	465d      	mov	r5, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b5aec:	9b01      	ldr	r3, [sp, #4]
   b5aee:	429d      	cmp	r5, r3
   b5af0:	f109 0918 	add.w	r9, r9, #24
   b5af4:	d00c      	beq.n	b5b10 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
   b5af6:	46ae      	mov	lr, r5
   b5af8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5afc:	f1a9 0c18 	sub.w	ip, r9, #24
   b5b00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b04:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b5b08:	3518      	adds	r5, #24
   b5b0a:	e88c 0003 	stmia.w	ip, {r0, r1}
   b5b0e:	e7ed      	b.n	b5aec <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
   b5b10:	eba5 050b 	sub.w	r5, r5, fp
   b5b14:	08ed      	lsrs	r5, r5, #3
   b5b16:	fb0a fa05 	mul.w	sl, sl, r5
   b5b1a:	9b00      	ldr	r3, [sp, #0]
   b5b1c:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
   b5b20:	2518      	movs	r5, #24
   b5b22:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
   b5b26:	f1b8 0f00 	cmp.w	r8, #0
   b5b2a:	d005      	beq.n	b5b38 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5b2c:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5b2e:	4640      	mov	r0, r8
   b5b30:	eba1 0108 	sub.w	r1, r1, r8
   b5b34:	f7fe fab3 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5b38:	2018      	movs	r0, #24
   b5b3a:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b5b3e:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5b42:	60bc      	str	r4, [r7, #8]
    }
   b5b44:	b003      	add	sp, #12
   b5b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b4a:	bf00      	nop
   b5b4c:	aaaaaaab 	.word	0xaaaaaaab
   b5b50:	05555555 	.word	0x05555555
   b5b54:	000c057b 	.word	0x000c057b
   b5b58:	0aaaaaab 	.word	0x0aaaaaab

000b5b5c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5b5c:	b570      	push	{r4, r5, r6, lr}
   b5b5e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5b60:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5b64:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b5b66:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5b68:	d00c      	beq.n	b5b84 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5b6a:	b139      	cbz	r1, b5b7c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x20>
   b5b6c:	4615      	mov	r5, r2
   b5b6e:	460c      	mov	r4, r1
   b5b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b74:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5b78:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5b7c:	6873      	ldr	r3, [r6, #4]
   b5b7e:	3318      	adds	r3, #24
   b5b80:	6073      	str	r3, [r6, #4]
      }
   b5b82:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b5b84:	f7ff ff58 	bl	b5a38 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b5b88:	e7fb      	b.n	b5b82 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x26>
	...

000b5b8c <_Z10createMenuv>:
void createMenu(){
   b5b8c:	b530      	push	{r4, r5, lr}
   b5b8e:	b099      	sub	sp, #100	; 0x64
            strcpy(itemName,itemString);
   b5b90:	4922      	ldr	r1, [pc, #136]	; (b5c1c <_Z10createMenuv+0x90>)
   b5b92:	f10d 000d 	add.w	r0, sp, #13
   b5b96:	f008 fbee 	bl	be376 <strcpy>
            maxVal = maxV;
   b5b9a:	2401      	movs	r4, #1
            stepSize = inStep;
   b5b9c:	f240 1501 	movw	r5, #257	; 0x101
   b5ba0:	2307      	movs	r3, #7
            strcpy(itemName,itemString);
   b5ba2:	491f      	ldr	r1, [pc, #124]	; (b5c20 <_Z10createMenuv+0x94>)
            maxVal = maxV;
   b5ba4:	f88d 400c 	strb.w	r4, [sp, #12]
            strcpy(itemName,itemString);
   b5ba8:	f10d 0025 	add.w	r0, sp, #37	; 0x25
            stepSize = inStep;
   b5bac:	e9cd 3501 	strd	r3, r5, [sp, #4]
            strcpy(itemName,itemString);
   b5bb0:	f008 fbe1 	bl	be376 <strcpy>
            stepSize = inStep;
   b5bb4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5bb8:	9308      	str	r3, [sp, #32]
            strcpy(itemName,itemString);
   b5bba:	491a      	ldr	r1, [pc, #104]	; (b5c24 <_Z10createMenuv+0x98>)
    battStat.MethodPointer = &WaterBot::battPercent;
   b5bbc:	9406      	str	r4, [sp, #24]
            maxVal = maxV;
   b5bbe:	2364      	movs	r3, #100	; 0x64
            strcpy(itemName,itemString);
   b5bc0:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
            maxVal = maxV;
   b5bc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            strcpy(itemName,itemString);
   b5bc8:	f008 fbd5 	bl	be376 <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b5bcc:	2308      	movs	r3, #8
            strcpy(itemName,itemString);
   b5bce:	4916      	ldr	r1, [pc, #88]	; (b5c28 <_Z10createMenuv+0x9c>)
            maxVal = maxV;
   b5bd0:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
            strcpy(itemName,itemString);
   b5bd4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
            stepSize = inStep;
   b5bd8:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
   b5bdc:	9514      	str	r5, [sp, #80]	; 0x50
            maxVal = maxV;
   b5bde:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
            strcpy(itemName,itemString);
   b5be2:	f008 fbc8 	bl	be376 <strcpy>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b5be6:	2305      	movs	r3, #5
    MenuItems.push_back(dataRecord);
   b5be8:	4669      	mov	r1, sp
   b5bea:	4810      	ldr	r0, [pc, #64]	; (b5c2c <_Z10createMenuv+0xa0>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b5bec:	9312      	str	r3, [sp, #72]	; 0x48
    MenuItems.push_back(dataRecord);
   b5bee:	f7ff ffb5 	bl	b5b5c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b5bf2:	a906      	add	r1, sp, #24
   b5bf4:	480d      	ldr	r0, [pc, #52]	; (b5c2c <_Z10createMenuv+0xa0>)
   b5bf6:	f7ff ffb1 	bl	b5b5c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b5bfa:	a90c      	add	r1, sp, #48	; 0x30
   b5bfc:	480b      	ldr	r0, [pc, #44]	; (b5c2c <_Z10createMenuv+0xa0>)
   b5bfe:	f7ff ffad 	bl	b5b5c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b5c02:	a912      	add	r1, sp, #72	; 0x48
   b5c04:	4809      	ldr	r0, [pc, #36]	; (b5c2c <_Z10createMenuv+0xa0>)
   b5c06:	f7ff ffa9 	bl	b5b5c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b5c0a:	4b09      	ldr	r3, [pc, #36]	; (b5c30 <_Z10createMenuv+0xa4>)
   b5c0c:	4807      	ldr	r0, [pc, #28]	; (b5c2c <_Z10createMenuv+0xa0>)
   b5c0e:	7819      	ldrb	r1, [r3, #0]
   b5c10:	f7fe ffb8 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5c14:	4b07      	ldr	r3, [pc, #28]	; (b5c34 <_Z10createMenuv+0xa8>)
   b5c16:	6018      	str	r0, [r3, #0]
}
   b5c18:	b019      	add	sp, #100	; 0x64
   b5c1a:	bd30      	pop	{r4, r5, pc}
   b5c1c:	000c09ac 	.word	0x000c09ac
   b5c20:	000c09b3 	.word	0x000c09b3
   b5c24:	000c09bb 	.word	0x000c09bb
   b5c28:	000c09c3 	.word	0x000c09c3
   b5c2c:	2003dc8c 	.word	0x2003dc8c
   b5c30:	2003ddf5 	.word	0x2003ddf5
   b5c34:	2003dca4 	.word	0x2003dca4

000b5c38 <setup>:
void setup() {
   b5c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLUP);
   b5c3c:	2102      	movs	r1, #2
void setup() {
   b5c3e:	b090      	sub	sp, #64	; 0x40
    pinMode(E_DPAD,INPUT_PULLUP);
   b5c40:	201c      	movs	r0, #28
   b5c42:	f007 fb45 	bl	bd2d0 <pinMode>
    pinMode(U_DPAD,INPUT_PULLUP);
   b5c46:	2102      	movs	r1, #2
   b5c48:	200e      	movs	r0, #14
   b5c4a:	f007 fb41 	bl	bd2d0 <pinMode>
    pinMode(D_DPAD,INPUT_PULLUP);
   b5c4e:	2102      	movs	r1, #2
   b5c50:	2007      	movs	r0, #7
   b5c52:	f007 fb3d 	bl	bd2d0 <pinMode>
    pinMode(L_DPAD,INPUT_PULLUP);
   b5c56:	2102      	movs	r1, #2
   b5c58:	200f      	movs	r0, #15
   b5c5a:	f007 fb39 	bl	bd2d0 <pinMode>
    pinMode(R_DPAD,INPUT_PULLUP);
   b5c5e:	2102      	movs	r1, #2
   b5c60:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5c62:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLUP);
   b5c64:	f007 fb34 	bl	bd2d0 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLUP);
   b5c68:	2102      	movs	r1, #2
   b5c6a:	201d      	movs	r0, #29
   b5c6c:	f007 fb30 	bl	bd2d0 <pinMode>
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5c70:	496b      	ldr	r1, [pc, #428]	; (b5e20 <setup+0x1e8>)
   b5c72:	9400      	str	r4, [sp, #0]
   b5c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c78:	2202      	movs	r2, #2
   b5c7a:	201c      	movs	r0, #28
   b5c7c:	f006 fcae 	bl	bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,FALLING);
   b5c80:	4968      	ldr	r1, [pc, #416]	; (b5e24 <setup+0x1ec>)
   b5c82:	9400      	str	r4, [sp, #0]
   b5c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c88:	2202      	movs	r2, #2
   b5c8a:	200e      	movs	r0, #14
   b5c8c:	f006 fca6 	bl	bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,FALLING);
   b5c90:	4965      	ldr	r1, [pc, #404]	; (b5e28 <setup+0x1f0>)
   b5c92:	9400      	str	r4, [sp, #0]
   b5c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c98:	2202      	movs	r2, #2
   b5c9a:	2007      	movs	r0, #7
   b5c9c:	f006 fc9e 	bl	bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,FALLING);
   b5ca0:	4962      	ldr	r1, [pc, #392]	; (b5e2c <setup+0x1f4>)
   b5ca2:	9400      	str	r4, [sp, #0]
   b5ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5ca8:	2202      	movs	r2, #2
   b5caa:	200f      	movs	r0, #15
   b5cac:	f006 fc96 	bl	bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,FALLING);
   b5cb0:	495f      	ldr	r1, [pc, #380]	; (b5e30 <setup+0x1f8>)
   b5cb2:	9400      	str	r4, [sp, #0]
   b5cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5cb8:	2202      	movs	r2, #2
   b5cba:	2012      	movs	r0, #18
   b5cbc:	f006 fc8e 	bl	bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,FALLING);
   b5cc0:	2202      	movs	r2, #2
   b5cc2:	495c      	ldr	r1, [pc, #368]	; (b5e34 <setup+0x1fc>)
   b5cc4:	9400      	str	r4, [sp, #0]
   b5cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5cca:	201d      	movs	r0, #29
   b5ccc:	f006 fc86 	bl	bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>
   b5cd0:	f003 fad0 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b5cd4:	4b58      	ldr	r3, [pc, #352]	; (b5e38 <setup+0x200>)
    logMessages = true;
   b5cd6:	4f59      	ldr	r7, [pc, #356]	; (b5e3c <setup+0x204>)
    debounceTime = millis();
   b5cd8:	6018      	str	r0, [r3, #0]
    Serial.begin(115200);
   b5cda:	f007 f9f9 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5cde:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b5ce2:	f007 f9e9 	bl	bd0b8 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5ce6:	f007 fb9f 	bl	bd428 <_Z22__fetch_global_Serial1v>
   b5cea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5cee:	f007 f98d 	bl	bd00c <_ZN11USARTSerial5beginEm>
    setupXBee();
   b5cf2:	f7fe fca3 	bl	b463c <_Z9setupXBeev>
	BLE.on();
   b5cf6:	f004 fabb 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5cfa:	f004 fb03 	bl	ba304 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b5cfe:	f004 fab7 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d02:	2132      	movs	r1, #50	; 0x32
   b5d04:	f004 fb48 	bl	ba398 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b5d08:	f004 fab2 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d0c:	2108      	movs	r1, #8
   b5d0e:	f004 fb00 	bl	ba312 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b5d12:	4a4b      	ldr	r2, [pc, #300]	; (b5e40 <setup+0x208>)
   b5d14:	494b      	ldr	r1, [pc, #300]	; (b5e44 <setup+0x20c>)
   b5d16:	4610      	mov	r0, r2
   b5d18:	f005 fb60 	bl	bb3dc <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b5d1c:	4a4a      	ldr	r2, [pc, #296]	; (b5e48 <setup+0x210>)
   b5d1e:	494b      	ldr	r1, [pc, #300]	; (b5e4c <setup+0x214>)
   b5d20:	4610      	mov	r0, r2
   b5d22:	f005 fb5b 	bl	bb3dc <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5d26:	4622      	mov	r2, r4
   b5d28:	4949      	ldr	r1, [pc, #292]	; (b5e50 <setup+0x218>)
   b5d2a:	484a      	ldr	r0, [pc, #296]	; (b5e54 <setup+0x21c>)
   b5d2c:	e9cd 4400 	strd	r4, r4, [sp]
   b5d30:	2301      	movs	r3, #1
   b5d32:	f003 fca3 	bl	b967c <spark_subscribe>
    offloadingMode = false;
   b5d36:	4b48      	ldr	r3, [pc, #288]	; (b5e58 <setup+0x220>)
   b5d38:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b5d3a:	4b48      	ldr	r3, [pc, #288]	; (b5e5c <setup+0x224>)
   b5d3c:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b5d3e:	4b48      	ldr	r3, [pc, #288]	; (b5e60 <setup+0x228>)
   b5d40:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b5d42:	4b48      	ldr	r3, [pc, #288]	; (b5e64 <setup+0x22c>)
    logMessages = true;
   b5d44:	f04f 0901 	mov.w	r9, #1
    statusTimeout = false;
   b5d48:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b5d4a:	f887 9000 	strb.w	r9, [r7]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5d4e:	f007 f8e9 	bl	bcf24 <_ZN9TimeClass5monthEv>
   b5d52:	9007      	str	r0, [sp, #28]
   b5d54:	f007 f8da 	bl	bcf0c <_ZN9TimeClass3dayEv>
   b5d58:	4605      	mov	r5, r0
   b5d5a:	f007 f8eb 	bl	bcf34 <_ZN9TimeClass4yearEv>
   b5d5e:	4606      	mov	r6, r0
   b5d60:	f007 f8b0 	bl	bcec4 <_ZN9TimeClass4hourEv>
   b5d64:	4680      	mov	r8, r0
   b5d66:	f007 f8b9 	bl	bcedc <_ZN9TimeClass6minuteEv>
   b5d6a:	4682      	mov	sl, r0
   b5d6c:	f007 f8c2 	bl	bcef4 <_ZN9TimeClass6secondEv>
   b5d70:	9b07      	ldr	r3, [sp, #28]
   b5d72:	4a3d      	ldr	r2, [pc, #244]	; (b5e68 <setup+0x230>)
   b5d74:	9500      	str	r5, [sp, #0]
   b5d76:	e9cd a003 	strd	sl, r0, [sp, #12]
   b5d7a:	2110      	movs	r1, #16
   b5d7c:	e9cd 6801 	strd	r6, r8, [sp, #4]
   b5d80:	a808      	add	r0, sp, #32
   b5d82:	f003 fd1b 	bl	b97bc <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b5d86:	4939      	ldr	r1, [pc, #228]	; (b5e6c <setup+0x234>)
   b5d88:	4839      	ldr	r0, [pc, #228]	; (b5e70 <setup+0x238>)
   b5d8a:	f008 faf4 	bl	be376 <strcpy>
    strcat(filenameMessages,timestamp);
   b5d8e:	a908      	add	r1, sp, #32
   b5d90:	4837      	ldr	r0, [pc, #220]	; (b5e70 <setup+0x238>)
   b5d92:	f008 fad7 	bl	be344 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5d96:	4937      	ldr	r1, [pc, #220]	; (b5e74 <setup+0x23c>)
   b5d98:	4835      	ldr	r0, [pc, #212]	; (b5e70 <setup+0x238>)
   b5d9a:	f008 fad3 	bl	be344 <strcat>
    createMenu();
   b5d9e:	f7ff fef5 	bl	b5b8c <_Z10createMenuv>
    oled.setup(); 
   b5da2:	4835      	ldr	r0, [pc, #212]	; (b5e78 <setup+0x240>)
   b5da4:	f003 f910 	bl	b8fc8 <_ZN16OledWingAdafruit5setupEv>
    oled.clearDisplay();
   b5da8:	4833      	ldr	r0, [pc, #204]	; (b5e78 <setup+0x240>)
   b5daa:	f002 fd9b 	bl	b88e4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.display();
   b5dae:	4832      	ldr	r0, [pc, #200]	; (b5e78 <setup+0x240>)
   b5db0:	f003 f806 	bl	b8dc0 <_ZN16Adafruit_SSD13067displayEv>
      dataMode_{dataMode}
   b5db4:	4b31      	ldr	r3, [pc, #196]	; (b5e7c <setup+0x244>)
   b5db6:	930c      	str	r3, [sp, #48]	; 0x30
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5db8:	4831      	ldr	r0, [pc, #196]	; (b5e80 <setup+0x248>)
   b5dba:	4b32      	ldr	r3, [pc, #200]	; (b5e84 <setup+0x24c>)
   b5dbc:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   b5dc0:	aa0c      	add	r2, sp, #48	; 0x30
   b5dc2:	2108      	movs	r1, #8
   b5dc4:	930e      	str	r3, [sp, #56]	; 0x38
   b5dc6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
   b5dca:	f7fe fbe9 	bl	b45a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5dce:	4604      	mov	r4, r0
   b5dd0:	b928      	cbnz	r0, b5dde <setup+0x1a6>
        Serial.println("Error: could not connect to SD card!");
   b5dd2:	f007 f97d 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b5dd6:	492c      	ldr	r1, [pc, #176]	; (b5e88 <setup+0x250>)
   b5dd8:	f006 fd85 	bl	bc8e6 <_ZN5Print7printlnEPKc>
        logMessages = false;
   b5ddc:	703c      	strb	r4, [r7, #0]
    oled.setTextSize(2);
   b5dde:	4c26      	ldr	r4, [pc, #152]	; (b5e78 <setup+0x240>)
   b5de0:	2102      	movs	r1, #2
   b5de2:	4620      	mov	r0, r4
   b5de4:	f002 fc05 	bl	b85f2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5de8:	2200      	movs	r2, #0
   b5dea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5dee:	e9c4 2304 	strd	r2, r3, [r4, #16]
    oled.print(" Starting ");
   b5df2:	4926      	ldr	r1, [pc, #152]	; (b5e8c <setup+0x254>)
   b5df4:	4620      	mov	r0, r4
   b5df6:	f006 fd63 	bl	bc8c0 <_ZN5Print5printEPKc>
    oled.display();
   b5dfa:	4620      	mov	r0, r4
   b5dfc:	f002 ffe0 	bl	b8dc0 <_ZN16Adafruit_SSD13067displayEv>
    at1.start();
   b5e00:	4823      	ldr	r0, [pc, #140]	; (b5e90 <setup+0x258>)
   b5e02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5e06:	f7fe fa39 	bl	b427c <_ZN5Timer5startEj.isra.0>
    at2.start();
   b5e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5e0e:	4821      	ldr	r0, [pc, #132]	; (b5e94 <setup+0x25c>)
   b5e10:	f7fe fa34 	bl	b427c <_ZN5Timer5startEj.isra.0>
    WaterBotSim(2);
   b5e14:	2002      	movs	r0, #2
   b5e16:	f7ff fbb5 	bl	b5584 <_Z11WaterBotSimh>
}
   b5e1a:	b010      	add	sp, #64	; 0x40
   b5e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5e20:	000b41a5 	.word	0x000b41a5
   b5e24:	000b4bad 	.word	0x000b4bad
   b5e28:	000b4c05 	.word	0x000b4c05
   b5e2c:	000b4935 	.word	0x000b4935
   b5e30:	000b4a59 	.word	0x000b4a59
   b5e34:	000b41f9 	.word	0x000b41f9
   b5e38:	2003dd50 	.word	0x2003dd50
   b5e3c:	2003ddf4 	.word	0x2003ddf4
   b5e40:	2003ded4 	.word	0x2003ded4
   b5e44:	000b5309 	.word	0x000b5309
   b5e48:	2003dec4 	.word	0x2003dec4
   b5e4c:	000b444d 	.word	0x000b444d
   b5e50:	000b52b9 	.word	0x000b52b9
   b5e54:	000c04a8 	.word	0x000c04a8
   b5e58:	2003de4b 	.word	0x2003de4b
   b5e5c:	2003de4a 	.word	0x2003de4a
   b5e60:	2003dedc 	.word	0x2003dedc
   b5e64:	2003e635 	.word	0x2003e635
   b5e68:	000c09ca 	.word	0x000c09ca
   b5e6c:	000c09e3 	.word	0x000c09e3
   b5e70:	2003dd68 	.word	0x2003dd68
   b5e74:	000c09ec 	.word	0x000c09ec
   b5e78:	2003de4c 	.word	0x2003de4c
   b5e7c:	000c0b60 	.word	0x000c0b60
   b5e80:	2003e1b0 	.word	0x2003e1b0
   b5e84:	007a1200 	.word	0x007a1200
   b5e88:	000c09f5 	.word	0x000c09f5
   b5e8c:	000c0a1a 	.word	0x000c0a1a
   b5e90:	2003dd14 	.word	0x2003dd14
   b5e94:	2003dd30 	.word	0x2003dd30

000b5e98 <_GLOBAL__sub_I_SystemMode>:
   b5e98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b5e9a:	4b55      	ldr	r3, [pc, #340]	; (b5ff0 <_GLOBAL__sub_I_SystemMode+0x158>)
   b5e9c:	4c55      	ldr	r4, [pc, #340]	; (b5ff4 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b5e9e:	2201      	movs	r2, #1
   b5ea0:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5ea2:	4b55      	ldr	r3, [pc, #340]	; (b5ff8 <_GLOBAL__sub_I_SystemMode+0x160>)
   b5ea4:	2200      	movs	r2, #0
   b5ea6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b5eaa:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5eae:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5eb0:	2003      	movs	r0, #3
   b5eb2:	f003 fb8f 	bl	b95d4 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b5eb6:	4951      	ldr	r1, [pc, #324]	; (b5ffc <_GLOBAL__sub_I_SystemMode+0x164>)
   b5eb8:	4851      	ldr	r0, [pc, #324]	; (b6000 <_GLOBAL__sub_I_SystemMode+0x168>)
   b5eba:	f003 ff17 	bl	b9cec <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b5ebe:	4951      	ldr	r1, [pc, #324]	; (b6004 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b5ec0:	4851      	ldr	r0, [pc, #324]	; (b6008 <_GLOBAL__sub_I_SystemMode+0x170>)
   b5ec2:	f003 ff13 	bl	b9cec <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b5ec6:	4951      	ldr	r1, [pc, #324]	; (b600c <_GLOBAL__sub_I_SystemMode+0x174>)
   b5ec8:	4851      	ldr	r0, [pc, #324]	; (b6010 <_GLOBAL__sub_I_SystemMode+0x178>)
   b5eca:	f003 ff0f 	bl	b9cec <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b5ece:	4951      	ldr	r1, [pc, #324]	; (b6014 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b5ed0:	4851      	ldr	r0, [pc, #324]	; (b6018 <_GLOBAL__sub_I_SystemMode+0x180>)
   b5ed2:	f003 ff0b 	bl	b9cec <_ZN8particle7BleUuidC1EPKc>
   b5ed6:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b5ed8:	267f      	movs	r6, #127	; 0x7f
   b5eda:	4620      	mov	r0, r4
   b5edc:	f003 fe21 	bl	b9b22 <_ZN8particle10BleAddressC1Ev>
   b5ee0:	f104 0008 	add.w	r0, r4, #8
   b5ee4:	f004 fe4d 	bl	bab82 <_ZN8particle18BleAdvertisingDataC1Ev>
   b5ee8:	f104 0014 	add.w	r0, r4, #20
   b5eec:	f004 fe49 	bl	bab82 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b5ef0:	3d01      	subs	r5, #1
   b5ef2:	f884 6020 	strb.w	r6, [r4, #32]
   b5ef6:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5efa:	d1ee      	bne.n	b5eda <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5efc:	4847      	ldr	r0, [pc, #284]	; (b601c <_GLOBAL__sub_I_SystemMode+0x184>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5efe:	4c48      	ldr	r4, [pc, #288]	; (b6020 <_GLOBAL__sub_I_SystemMode+0x188>)
   b5f00:	f004 f82a 	bl	b9f58 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b5f04:	4847      	ldr	r0, [pc, #284]	; (b6024 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b5f06:	f004 f827 	bl	b9f58 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5f0a:	4847      	ldr	r0, [pc, #284]	; (b6028 <_GLOBAL__sub_I_SystemMode+0x190>)
   b5f0c:	f004 f824 	bl	b9f58 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b5f10:	4846      	ldr	r0, [pc, #280]	; (b602c <_GLOBAL__sub_I_SystemMode+0x194>)
   b5f12:	f004 f8fd 	bl	ba110 <_ZN8particle13BlePeerDeviceC1Ev>
OledWingAdafruit oled;
   b5f16:	4846      	ldr	r0, [pc, #280]	; (b6030 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5f18:	2107      	movs	r1, #7
   b5f1a:	f003 f827 	bl	b8f6c <_ZN16OledWingAdafruitC1Ei>
   b5f1e:	7823      	ldrb	r3, [r4, #0]
   b5f20:	f3bf 8f5b 	dmb	ish
   b5f24:	07db      	lsls	r3, r3, #31
   b5f26:	d40a      	bmi.n	b5f3e <_GLOBAL__sub_I_SystemMode+0xa6>
   b5f28:	4620      	mov	r0, r4
   b5f2a:	f7fe f8c7 	bl	b40bc <__cxa_guard_acquire>
   b5f2e:	b130      	cbz	r0, b5f3e <_GLOBAL__sub_I_SystemMode+0xa6>
   b5f30:	4840      	ldr	r0, [pc, #256]	; (b6034 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5f32:	2101      	movs	r1, #1
   b5f34:	f006 fd48 	bl	bc9c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f38:	4620      	mov	r0, r4
   b5f3a:	f7fe f8c4 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b5f3e:	4b3e      	ldr	r3, [pc, #248]	; (b6038 <_GLOBAL__sub_I_SystemMode+0x1a0>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f40:	4e3e      	ldr	r6, [pc, #248]	; (b603c <_GLOBAL__sub_I_SystemMode+0x1a4>)
	    _M_manager = &_My_handler::_M_manager;
   b5f42:	4d3f      	ldr	r5, [pc, #252]	; (b6040 <_GLOBAL__sub_I_SystemMode+0x1a8>)
Timer at1(5000,actionTimer5);
   b5f44:	483f      	ldr	r0, [pc, #252]	; (b6044 <_GLOBAL__sub_I_SystemMode+0x1ac>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f46:	9603      	str	r6, [sp, #12]
   b5f48:	2264      	movs	r2, #100	; 0x64
   b5f4a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5f4e:	4a3e      	ldr	r2, [pc, #248]	; (b6048 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b5f50:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5f54:	2201      	movs	r2, #1
   b5f56:	2400      	movs	r4, #0
   b5f58:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5f5c:	4a35      	ldr	r2, [pc, #212]	; (b6034 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5f5e:	605c      	str	r4, [r3, #4]
   b5f60:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5f64:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b5f68:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5f6c:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5f70:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5f74:	4b35      	ldr	r3, [pc, #212]	; (b604c <_GLOBAL__sub_I_SystemMode+0x1b4>)
  File() {}
   b5f76:	4a36      	ldr	r2, [pc, #216]	; (b6050 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5f78:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5f7e:	6099      	str	r1, [r3, #8]
   b5f80:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5f82:	611c      	str	r4, [r3, #16]
   b5f84:	4b33      	ldr	r3, [pc, #204]	; (b6054 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5f86:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5f8a:	601a      	str	r2, [r3, #0]
   b5f8c:	611c      	str	r4, [r3, #16]
   b5f8e:	4b32      	ldr	r3, [pc, #200]	; (b6058 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5f90:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5f94:	601a      	str	r2, [r3, #0]
   b5f96:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f98:	4b30      	ldr	r3, [pc, #192]	; (b605c <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5f9a:	e9c3 4400 	strd	r4, r4, [r3]
   b5f9e:	609c      	str	r4, [r3, #8]
   b5fa0:	4b2f      	ldr	r3, [pc, #188]	; (b6060 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5fa2:	e9c3 4400 	strd	r4, r4, [r3]
   b5fa6:	609c      	str	r4, [r3, #8]
   b5fa8:	4b2e      	ldr	r3, [pc, #184]	; (b6064 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5faa:	e9c3 4400 	strd	r4, r4, [r3]
   b5fae:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5fb0:	4b2d      	ldr	r3, [pc, #180]	; (b6068 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5fb2:	9300      	str	r3, [sp, #0]
   b5fb4:	466a      	mov	r2, sp
   b5fb6:	4623      	mov	r3, r4
   b5fb8:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b5fbc:	9502      	str	r5, [sp, #8]
   b5fbe:	f7fe fa0d 	bl	b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fc2:	4668      	mov	r0, sp
   b5fc4:	f7fe f9b8 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5fc8:	4b28      	ldr	r3, [pc, #160]	; (b606c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5fca:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b5fcc:	466a      	mov	r2, sp
   b5fce:	4623      	mov	r3, r4
   b5fd0:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5fd4:	4826      	ldr	r0, [pc, #152]	; (b6070 <_GLOBAL__sub_I_SystemMode+0x1d8>)
	    _M_manager = &_My_handler::_M_manager;
   b5fd6:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b5fda:	f7fe f9ff 	bl	b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fde:	4668      	mov	r0, sp
   b5fe0:	f7fe f9aa 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   b5fe4:	4b23      	ldr	r3, [pc, #140]	; (b6074 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5fe6:	e9c3 4400 	strd	r4, r4, [r3]
   b5fea:	609c      	str	r4, [r3, #8]
   b5fec:	b004      	add	sp, #16
   b5fee:	bd70      	pop	{r4, r5, r6, pc}
   b5ff0:	2003dcfc 	.word	0x2003dcfc
   b5ff4:	2003dee0 	.word	0x2003dee0
   b5ff8:	2003dca8 	.word	0x2003dca8
   b5ffc:	000c0a25 	.word	0x000c0a25
   b6000:	2003dcc0 	.word	0x2003dcc0
   b6004:	000c0a4a 	.word	0x000c0a4a
   b6008:	2003dcd4 	.word	0x2003dcd4
   b600c:	000c0a6f 	.word	0x000c0a6f
   b6010:	2003dce8 	.word	0x2003dce8
   b6014:	000c0a94 	.word	0x000c0a94
   b6018:	2003dd00 	.word	0x2003dd00
   b601c:	2003ded4 	.word	0x2003ded4
   b6020:	2003dc68 	.word	0x2003dc68
   b6024:	2003decc 	.word	0x2003decc
   b6028:	2003dec4 	.word	0x2003dec4
   b602c:	2003debc 	.word	0x2003debc
   b6030:	2003de4c 	.word	0x2003de4c
   b6034:	2003dc6c 	.word	0x2003dc6c
   b6038:	2003e1b0 	.word	0x2003e1b0
   b603c:	000b4279 	.word	0x000b4279
   b6040:	000b4265 	.word	0x000b4265
   b6044:	2003dd14 	.word	0x2003dd14
   b6048:	000c0b60 	.word	0x000c0b60
   b604c:	2003ddf8 	.word	0x2003ddf8
   b6050:	000c0b88 	.word	0x000c0b88
   b6054:	2003ddc0 	.word	0x2003ddc0
   b6058:	2003dd8c 	.word	0x2003dd8c
   b605c:	2003dcb4 	.word	0x2003dcb4
   b6060:	2003dc98 	.word	0x2003dc98
   b6064:	2003dc78 	.word	0x2003dc78
   b6068:	000b40e9 	.word	0x000b40e9
   b606c:	000b4229 	.word	0x000b4229
   b6070:	2003dd30 	.word	0x2003dd30
   b6074:	2003dc8c 	.word	0x2003dc8c

000b6078 <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b6078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b607c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b6080:	4c5d      	ldr	r4, [pc, #372]	; (b61f8 <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b6082:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b6084:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6086:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b6088:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b608a:	4690      	mov	r8, r2
   b608c:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b608e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b6092:	fa0f f983 	sxth.w	r9, r3
   b6096:	b236      	sxth	r6, r6
   b6098:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b609c:	2f00      	cmp	r7, #0
   b609e:	d067      	beq.n	b6170 <_Z13printMenuItemhbbtt8WaterBot+0xf8>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b60a0:	2701      	movs	r7, #1
   b60a2:	2358      	movs	r3, #88	; 0x58
   b60a4:	4620      	mov	r0, r4
   b60a6:	e9cd a700 	strd	sl, r7, [sp]
   b60aa:	9203      	str	r2, [sp, #12]
   b60ac:	f001 ff85 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b60b0:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b60b4:	2102      	movs	r1, #2
   b60b6:	4620      	mov	r0, r4
   b60b8:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b60ba:	f04f 0900 	mov.w	r9, #0
   b60be:	f002 fa98 	bl	b85f2 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b60c2:	4629      	mov	r1, r5
   b60c4:	484d      	ldr	r0, [pc, #308]	; (b61fc <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b60c6:	f8c4 9014 	str.w	r9, [r4, #20]
   b60ca:	f7fe fd5b 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b60ce:	f100 010d 	add.w	r1, r0, #13
   b60d2:	4620      	mov	r0, r4
   b60d4:	f006 fbf4 	bl	bc8c0 <_ZN5Print5printEPKc>
        if(selected){
   b60d8:	9a03      	ldr	r2, [sp, #12]
   b60da:	f1b8 0f00 	cmp.w	r8, #0
   b60de:	d030      	beq.n	b6142 <_Z13printMenuItemhbbtt8WaterBot+0xca>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b60e0:	237f      	movs	r3, #127	; 0x7f
   b60e2:	e9cd a700 	strd	sl, r7, [sp]
   b60e6:	2158      	movs	r1, #88	; 0x58
   b60e8:	4620      	mov	r0, r4
   b60ea:	f001 ff66 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b60ee:	2359      	movs	r3, #89	; 0x59
   b60f0:	8223      	strh	r3, [r4, #16]
   b60f2:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b60f4:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b60f8:	4840      	ldr	r0, [pc, #256]	; (b61fc <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b60fa:	4629      	mov	r1, r5
   b60fc:	f7fe fd42 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6100:	7a43      	ldrb	r3, [r0, #9]
   b6102:	b363      	cbz	r3, b615e <_Z13printMenuItemhbbtt8WaterBot+0xe6>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6104:	6843      	ldr	r3, [r0, #4]
   b6106:	aa0c      	add	r2, sp, #48	; 0x30
   b6108:	4413      	add	r3, r2
   b610a:	791b      	ldrb	r3, [r3, #4]
   b610c:	b1bb      	cbz	r3, b613e <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b610e:	493c      	ldr	r1, [pc, #240]	; (b6200 <_Z13printMenuItemhbbtt8WaterBot+0x188>)
                else oled.printf("Off");
   b6110:	4839      	ldr	r0, [pc, #228]	; (b61f8 <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b6112:	f7fe f8ca 	bl	b42aa <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b6116:	f006 ffdb 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b611a:	4629      	mov	r1, r5
   b611c:	4604      	mov	r4, r0
   b611e:	4837      	ldr	r0, [pc, #220]	; (b61fc <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b6120:	f7fe fd30 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6124:	4937      	ldr	r1, [pc, #220]	; (b6204 <_Z13printMenuItemhbbtt8WaterBot+0x18c>)
   b6126:	f100 020d 	add.w	r2, r0, #13
   b612a:	4620      	mov	r0, r4
   b612c:	f7fe f8f6 	bl	b431c <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b6130:	4629      	mov	r1, r5
   b6132:	4832      	ldr	r0, [pc, #200]	; (b61fc <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b6134:	f7fe fd26 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b6138:	b004      	add	sp, #16
   b613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b613e:	4932      	ldr	r1, [pc, #200]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b6140:	e7e6      	b.n	b6110 <_Z13printMenuItemhbbtt8WaterBot+0x98>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b6142:	237f      	movs	r3, #127	; 0x7f
   b6144:	e9cd a800 	strd	sl, r8, [sp]
   b6148:	2158      	movs	r1, #88	; 0x58
   b614a:	4620      	mov	r0, r4
   b614c:	f001 ff35 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6150:	2359      	movs	r3, #89	; 0x59
   b6152:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6154:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6158:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b615a:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b615c:	e7cc      	b.n	b60f8 <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b615e:	6803      	ldr	r3, [r0, #0]
   b6160:	492a      	ldr	r1, [pc, #168]	; (b620c <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b6162:	aa0c      	add	r2, sp, #48	; 0x30
   b6164:	4413      	add	r3, r2
   b6166:	4620      	mov	r0, r4
   b6168:	791a      	ldrb	r2, [r3, #4]
   b616a:	f7fe f89e 	bl	b42aa <_ZN5Print6printfEPKcz>
   b616e:	e7d2      	b.n	b6116 <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b6170:	2358      	movs	r3, #88	; 0x58
   b6172:	4620      	mov	r0, r4
   b6174:	e9cd a700 	strd	sl, r7, [sp]
   b6178:	9203      	str	r2, [sp, #12]
   b617a:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b617e:	f001 ff1c 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b6182:	2102      	movs	r1, #2
   b6184:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6186:	f8a4 9010 	strh.w	r9, [r4, #16]
   b618a:	8266      	strh	r6, [r4, #18]
   b618c:	f002 fa31 	bl	b85f2 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6190:	4629      	mov	r1, r5
   b6192:	481a      	ldr	r0, [pc, #104]	; (b61fc <_Z13printMenuItemhbbtt8WaterBot+0x184>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6194:	f8c4 8014 	str.w	r8, [r4, #20]
   b6198:	f7fe fcf4 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b619c:	f100 010d 	add.w	r1, r0, #13
   b61a0:	4620      	mov	r0, r4
   b61a2:	f006 fb8d 	bl	bc8c0 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b61a6:	9a03      	ldr	r2, [sp, #12]
   b61a8:	237f      	movs	r3, #127	; 0x7f
   b61aa:	2158      	movs	r1, #88	; 0x58
   b61ac:	4620      	mov	r0, r4
   b61ae:	e9cd a700 	strd	sl, r7, [sp]
   b61b2:	f001 ff02 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b61b6:	2359      	movs	r3, #89	; 0x59
   b61b8:	8223      	strh	r3, [r4, #16]
        if(MenuItems.at(id).onOffSetting){
   b61ba:	4810      	ldr	r0, [pc, #64]	; (b61fc <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b61bc:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b61be:	f8c4 8014 	str.w	r8, [r4, #20]
   b61c2:	4629      	mov	r1, r5
   b61c4:	f7fe fcde 	bl	b4b84 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b61c8:	7a43      	ldrb	r3, [r0, #9]
   b61ca:	b15b      	cbz	r3, b61e4 <_Z13printMenuItemhbbtt8WaterBot+0x16c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b61cc:	6843      	ldr	r3, [r0, #4]
   b61ce:	aa0c      	add	r2, sp, #48	; 0x30
   b61d0:	4413      	add	r3, r2
   b61d2:	791b      	ldrb	r3, [r3, #4]
   b61d4:	b123      	cbz	r3, b61e0 <_Z13printMenuItemhbbtt8WaterBot+0x168>
   b61d6:	490a      	ldr	r1, [pc, #40]	; (b6200 <_Z13printMenuItemhbbtt8WaterBot+0x188>)
            else oled.printf("Off");
   b61d8:	4620      	mov	r0, r4
   b61da:	f7fe f866 	bl	b42aa <_ZN5Print6printfEPKcz>
   b61de:	e7a7      	b.n	b6130 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b61e0:	4909      	ldr	r1, [pc, #36]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b61e2:	e7f9      	b.n	b61d8 <_Z13printMenuItemhbbtt8WaterBot+0x160>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b61e4:	6803      	ldr	r3, [r0, #0]
   b61e6:	4909      	ldr	r1, [pc, #36]	; (b620c <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b61e8:	aa0c      	add	r2, sp, #48	; 0x30
   b61ea:	4413      	add	r3, r2
   b61ec:	4620      	mov	r0, r4
   b61ee:	791a      	ldrb	r2, [r3, #4]
   b61f0:	f7fe f85b 	bl	b42aa <_ZN5Print6printfEPKcz>
   b61f4:	e79c      	b.n	b6130 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b61f6:	bf00      	nop
   b61f8:	2003de4c 	.word	0x2003de4c
   b61fc:	2003dc8c 	.word	0x2003dc8c
   b6200:	000c0ab9 	.word	0x000c0ab9
   b6204:	000c0ac0 	.word	0x000c0ac0
   b6208:	000c0abc 	.word	0x000c0abc
   b620c:	000c05c4 	.word	0x000c05c4

000b6210 <_Z10updateMenuv>:
void updateMenu(){
   b6210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b6214:	4ba5      	ldr	r3, [pc, #660]	; (b64ac <_Z10updateMenuv+0x29c>)
   b6216:	781b      	ldrb	r3, [r3, #0]
void updateMenu(){
   b6218:	b08f      	sub	sp, #60	; 0x3c
    if(redrawMenu){
   b621a:	2b00      	cmp	r3, #0
   b621c:	f000 8142 	beq.w	b64a4 <_Z10updateMenuv+0x294>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b6220:	2600      	movs	r6, #0
   b6222:	230f      	movs	r3, #15
   b6224:	e9cd 3600 	strd	r3, r6, [sp]
   b6228:	48a1      	ldr	r0, [pc, #644]	; (b64b0 <_Z10updateMenuv+0x2a0>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b622a:	f8df 9298 	ldr.w	r9, [pc, #664]	; b64c4 <_Z10updateMenuv+0x2b4>
   b622e:	f8df a2a4 	ldr.w	sl, [pc, #676]	; b64d4 <_Z10updateMenuv+0x2c4>
            if(WaterBots.at(i).botNum == botSelect){
   b6232:	f8df b2a4 	ldr.w	fp, [pc, #676]	; b64d8 <_Z10updateMenuv+0x2c8>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b6236:	2380      	movs	r3, #128	; 0x80
   b6238:	4632      	mov	r2, r6
   b623a:	4631      	mov	r1, r6
   b623c:	f001 febd 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
        uint8_t menuSelect = 0;
   b6240:	4635      	mov	r5, r6
   b6242:	e9d9 2300 	ldrd	r2, r3, [r9]
   b6246:	1a9b      	subs	r3, r3, r2
   b6248:	109b      	asrs	r3, r3, #2
   b624a:	b2f7      	uxtb	r7, r6
   b624c:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6250:	429f      	cmp	r7, r3
   b6252:	d248      	bcs.n	b62e6 <_Z10updateMenuv+0xd6>
            if(WaterBots.at(i).botNum == botSelect){
   b6254:	4639      	mov	r1, r7
   b6256:	4648      	mov	r0, r9
   b6258:	f7fe fb58 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b625c:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b6260:	7801      	ldrb	r1, [r0, #0]
   b6262:	f89b 3000 	ldrb.w	r3, [fp]
   b6266:	4c92      	ldr	r4, [pc, #584]	; (b64b0 <_Z10updateMenuv+0x2a0>)
                oled.setCursor(5+18*i,4);
   b6268:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b626c:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b6270:	4299      	cmp	r1, r3
   b6272:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b6276:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b627a:	8222      	strh	r2, [r4, #16]
   b627c:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b627e:	f04f 0101 	mov.w	r1, #1
   b6282:	4620      	mov	r0, r4
            if(WaterBots.at(i).botNum == botSelect){
   b6284:	d117      	bne.n	b62b6 <_Z10updateMenuv+0xa6>
                oled.setTextSize(1);
   b6286:	f002 f9b4 	bl	b85f2 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b628a:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b628c:	2201      	movs	r2, #1
   b628e:	6163      	str	r3, [r4, #20]
   b6290:	230e      	movs	r3, #14
   b6292:	e9cd 3200 	strd	r3, r2, [sp]
   b6296:	4641      	mov	r1, r8
   b6298:	4620      	mov	r0, r4
   b629a:	f001 fe8e 	bl	b7fba <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b629e:	4639      	mov	r1, r7
   b62a0:	4648      	mov	r0, r9
   b62a2:	f7fe fb33 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62a6:	4983      	ldr	r1, [pc, #524]	; (b64b4 <_Z10updateMenuv+0x2a4>)
   b62a8:	7802      	ldrb	r2, [r0, #0]
   b62aa:	4620      	mov	r0, r4
   b62ac:	f7fd fffd 	bl	b42aa <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b62b0:	3601      	adds	r6, #1
   b62b2:	463d      	mov	r5, r7
   b62b4:	e7c5      	b.n	b6242 <_Z10updateMenuv+0x32>
                oled.setTextSize(1);
   b62b6:	f002 f99c 	bl	b85f2 <_ZN12Adafruit_GFX11setTextSizeEh>
   b62ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b62be:	2201      	movs	r2, #1
   b62c0:	6163      	str	r3, [r4, #20]
   b62c2:	230e      	movs	r3, #14
   b62c4:	e9cd 3200 	strd	r3, r2, [sp]
   b62c8:	4641      	mov	r1, r8
   b62ca:	4620      	mov	r0, r4
   b62cc:	f001 fee8 	bl	b80a0 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b62d0:	4639      	mov	r1, r7
   b62d2:	4648      	mov	r0, r9
   b62d4:	f7fe fb1a 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62d8:	4976      	ldr	r1, [pc, #472]	; (b64b4 <_Z10updateMenuv+0x2a4>)
   b62da:	7802      	ldrb	r2, [r0, #0]
   b62dc:	4620      	mov	r0, r4
   b62de:	f7fd ffe4 	bl	b42aa <_ZN5Print6printfEPKcz>
   b62e2:	462f      	mov	r7, r5
   b62e4:	e7e4      	b.n	b62b0 <_Z10updateMenuv+0xa0>
        if(menuItem == 0){
   b62e6:	4f74      	ldr	r7, [pc, #464]	; (b64b8 <_Z10updateMenuv+0x2a8>)
   b62e8:	f897 8000 	ldrb.w	r8, [r7]
   b62ec:	f1b8 0f00 	cmp.w	r8, #0
   b62f0:	d160      	bne.n	b63b4 <_Z10updateMenuv+0x1a4>
   b62f2:	4f72      	ldr	r7, [pc, #456]	; (b64bc <_Z10updateMenuv+0x2ac>)
            Serial.println("Menu item 0");
   b62f4:	f006 feec 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b62f8:	4971      	ldr	r1, [pc, #452]	; (b64c0 <_Z10updateMenuv+0x2b0>)
   b62fa:	f006 faf4 	bl	bc8e6 <_ZN5Print7printlnEPKc>
            if(MenuItems.size()) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b62fe:	e9d7 3200 	ldrd	r3, r2, [r7]
   b6302:	429a      	cmp	r2, r3
   b6304:	d019      	beq.n	b633a <_Z10updateMenuv+0x12a>
   b6306:	4629      	mov	r1, r5
   b6308:	486e      	ldr	r0, [pc, #440]	; (b64c4 <_Z10updateMenuv+0x2b4>)
   b630a:	f7fe faff 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b630e:	4b6e      	ldr	r3, [pc, #440]	; (b64c8 <_Z10updateMenuv+0x2b8>)
   b6310:	4604      	mov	r4, r0
   b6312:	f893 c000 	ldrb.w	ip, [r3]
   b6316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6318:	ae01      	add	r6, sp, #4
   b631a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b631c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b631e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6322:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6324:	6823      	ldr	r3, [r4, #0]
   b6326:	6033      	str	r3, [r6, #0]
   b6328:	2310      	movs	r3, #16
   b632a:	9300      	str	r3, [sp, #0]
   b632c:	f08c 0201 	eor.w	r2, ip, #1
   b6330:	4643      	mov	r3, r8
   b6332:	2101      	movs	r1, #1
   b6334:	4640      	mov	r0, r8
   b6336:	f7ff fe9f 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
   b633a:	e9d7 3600 	ldrd	r3, r6, [r7]
   b633e:	1af6      	subs	r6, r6, r3
   b6340:	4b62      	ldr	r3, [pc, #392]	; (b64cc <_Z10updateMenuv+0x2bc>)
                Serial.printlnf("Menu item %d", mi);
   b6342:	f8df a18c 	ldr.w	sl, [pc, #396]	; b64d0 <_Z10updateMenuv+0x2c0>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6346:	f8df 917c 	ldr.w	r9, [pc, #380]	; b64c4 <_Z10updateMenuv+0x2b4>
   b634a:	f8df b17c 	ldr.w	fp, [pc, #380]	; b64c8 <_Z10updateMenuv+0x2b8>
   b634e:	10f6      	asrs	r6, r6, #3
   b6350:	435e      	muls	r6, r3
            uint8_t loopIter = MenuItems.size();
   b6352:	b2f6      	uxtb	r6, r6
            if(loopIter > 2) loopIter = 2;
   b6354:	2e02      	cmp	r6, #2
   b6356:	bf28      	it	cs
   b6358:	2602      	movcs	r6, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b635a:	2701      	movs	r7, #1
   b635c:	42be      	cmp	r6, r7
   b635e:	f2c0 809b 	blt.w	b6498 <_Z10updateMenuv+0x288>
                Serial.printlnf("Menu item %d", mi);
   b6362:	f006 feb5 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b6366:	463a      	mov	r2, r7
   b6368:	4651      	mov	r1, sl
   b636a:	f7fd ffd7 	bl	b431c <_ZN5Print8printlnfEPKcz>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b636e:	4629      	mov	r1, r5
   b6370:	4648      	mov	r0, r9
   b6372:	f7fe facb 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6376:	4604      	mov	r4, r0
   b6378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b637a:	f10d 0c04 	add.w	ip, sp, #4
   b637e:	f89b e000 	ldrb.w	lr, [fp]
   b6382:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b638c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b638e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6392:	fa5f f887 	uxtb.w	r8, r7
   b6396:	6823      	ldr	r3, [r4, #0]
   b6398:	f8cc 3000 	str.w	r3, [ip]
   b639c:	3701      	adds	r7, #1
   b639e:	013b      	lsls	r3, r7, #4
   b63a0:	b29b      	uxth	r3, r3
   b63a2:	9300      	str	r3, [sp, #0]
   b63a4:	2300      	movs	r3, #0
   b63a6:	f08e 0201 	eor.w	r2, lr, #1
   b63aa:	4619      	mov	r1, r3
   b63ac:	4640      	mov	r0, r8
   b63ae:	f7ff fe63 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b63b2:	e7d3      	b.n	b635c <_Z10updateMenuv+0x14c>
        else if(menuItem == MAX_MENU_ITEMS-1){
   b63b4:	f1b8 0f03 	cmp.w	r8, #3
   b63b8:	f8df 810c 	ldr.w	r8, [pc, #268]	; b64c8 <_Z10updateMenuv+0x2b8>
   b63bc:	f040 808e 	bne.w	b64dc <_Z10updateMenuv+0x2cc>
            Serial.printlnf("Menu item %d", menuItem);
   b63c0:	f006 fe86 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b63c4:	783a      	ldrb	r2, [r7, #0]
   b63c6:	4942      	ldr	r1, [pc, #264]	; (b64d0 <_Z10updateMenuv+0x2c0>)
   b63c8:	f7fd ffa8 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b63cc:	4629      	mov	r1, r5
   b63ce:	483d      	ldr	r0, [pc, #244]	; (b64c4 <_Z10updateMenuv+0x2b4>)
   b63d0:	f897 9000 	ldrb.w	r9, [r7]
   b63d4:	f7fe fa9a 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b63d8:	4606      	mov	r6, r0
   b63da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63dc:	ac01      	add	r4, sp, #4
   b63de:	f898 c000 	ldrb.w	ip, [r8]
   b63e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63ec:	6833      	ldr	r3, [r6, #0]
   b63ee:	6023      	str	r3, [r4, #0]
   b63f0:	2330      	movs	r3, #48	; 0x30
   b63f2:	f08c 0201 	eor.w	r2, ip, #1
   b63f6:	2101      	movs	r1, #1
   b63f8:	4648      	mov	r0, r9
   b63fa:	9300      	str	r3, [sp, #0]
   b63fc:	2300      	movs	r3, #0
   b63fe:	f7ff fe3b 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6402:	f006 fe65 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b6406:	783a      	ldrb	r2, [r7, #0]
   b6408:	4931      	ldr	r1, [pc, #196]	; (b64d0 <_Z10updateMenuv+0x2c0>)
   b640a:	3a01      	subs	r2, #1
   b640c:	f7fd ff86 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6410:	4629      	mov	r1, r5
   b6412:	482c      	ldr	r0, [pc, #176]	; (b64c4 <_Z10updateMenuv+0x2b4>)
   b6414:	f7fe fa7a 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6418:	4606      	mov	r6, r0
   b641a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b641c:	f10d 0c04 	add.w	ip, sp, #4
   b6420:	f897 e000 	ldrb.w	lr, [r7]
   b6424:	f898 9000 	ldrb.w	r9, [r8]
   b6428:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b642c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b642e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6432:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6434:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6438:	6833      	ldr	r3, [r6, #0]
   b643a:	6023      	str	r3, [r4, #0]
   b643c:	2320      	movs	r3, #32
   b643e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b6442:	9300      	str	r3, [sp, #0]
   b6444:	2300      	movs	r3, #0
   b6446:	4619      	mov	r1, r3
   b6448:	fa5f f08e 	uxtb.w	r0, lr
   b644c:	f089 0201 	eor.w	r2, r9, #1
   b6450:	f7ff fe12 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-2);
   b6454:	f006 fe3c 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b6458:	783a      	ldrb	r2, [r7, #0]
   b645a:	491d      	ldr	r1, [pc, #116]	; (b64d0 <_Z10updateMenuv+0x2c0>)
   b645c:	3a02      	subs	r2, #2
   b645e:	f7fd ff5d 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6462:	4818      	ldr	r0, [pc, #96]	; (b64c4 <_Z10updateMenuv+0x2b4>)
   b6464:	4629      	mov	r1, r5
   b6466:	f7fe fa51 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b646a:	783f      	ldrb	r7, [r7, #0]
   b646c:	f898 c000 	ldrb.w	ip, [r8]
   b6470:	3f02      	subs	r7, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6472:	4605      	mov	r5, r0
   b6474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6476:	ae01      	add	r6, sp, #4
   b6478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b647a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b647c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b647e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6480:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6482:	682b      	ldr	r3, [r5, #0]
   b6484:	6023      	str	r3, [r4, #0]
   b6486:	2310      	movs	r3, #16
   b6488:	9300      	str	r3, [sp, #0]
   b648a:	2300      	movs	r3, #0
   b648c:	f08c 0201 	eor.w	r2, ip, #1
   b6490:	4619      	mov	r1, r3
   b6492:	b2f8      	uxtb	r0, r7
   b6494:	f7ff fdf0 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b6498:	4805      	ldr	r0, [pc, #20]	; (b64b0 <_Z10updateMenuv+0x2a0>)
   b649a:	f002 fc91 	bl	b8dc0 <_ZN16Adafruit_SSD13067displayEv>
        redrawMenu = false;
   b649e:	4a03      	ldr	r2, [pc, #12]	; (b64ac <_Z10updateMenuv+0x29c>)
   b64a0:	2300      	movs	r3, #0
   b64a2:	7013      	strb	r3, [r2, #0]
}
   b64a4:	b00f      	add	sp, #60	; 0x3c
   b64a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b64aa:	bf00      	nop
   b64ac:	2003da88 	.word	0x2003da88
   b64b0:	2003de4c 	.word	0x2003de4c
   b64b4:	000c05c4 	.word	0x000c05c4
   b64b8:	2003ddf5 	.word	0x2003ddf5
   b64bc:	2003dc8c 	.word	0x2003dc8c
   b64c0:	000c0aec 	.word	0x000c0aec
   b64c4:	2003dcb4 	.word	0x2003dcb4
   b64c8:	2003da89 	.word	0x2003da89
   b64cc:	aaaaaaab 	.word	0xaaaaaaab
   b64d0:	000c0af8 	.word	0x000c0af8
   b64d4:	c4ec4ec5 	.word	0xc4ec4ec5
   b64d8:	2003dd4d 	.word	0x2003dd4d
            Serial.printlnf("Menu item %d", menuItem+1);
   b64dc:	f006 fdf8 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b64e0:	783a      	ldrb	r2, [r7, #0]
   b64e2:	492b      	ldr	r1, [pc, #172]	; (b6590 <_Z10updateMenuv+0x380>)
   b64e4:	3201      	adds	r2, #1
   b64e6:	f7fd ff19 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b64ea:	4629      	mov	r1, r5
   b64ec:	4829      	ldr	r0, [pc, #164]	; (b6594 <_Z10updateMenuv+0x384>)
   b64ee:	f7fe fa0d 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b64f2:	4606      	mov	r6, r0
   b64f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b64f6:	ac01      	add	r4, sp, #4
   b64f8:	f898 e000 	ldrb.w	lr, [r8]
   b64fc:	f897 c000 	ldrb.w	ip, [r7]
   b6500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6502:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b650a:	6833      	ldr	r3, [r6, #0]
   b650c:	6023      	str	r3, [r4, #0]
   b650e:	2330      	movs	r3, #48	; 0x30
   b6510:	f10c 0c01 	add.w	ip, ip, #1
   b6514:	9300      	str	r3, [sp, #0]
   b6516:	2300      	movs	r3, #0
   b6518:	f08e 0201 	eor.w	r2, lr, #1
   b651c:	4619      	mov	r1, r3
   b651e:	fa5f f08c 	uxtb.w	r0, ip
   b6522:	f7ff fda9 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem);
   b6526:	f006 fdd3 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b652a:	783a      	ldrb	r2, [r7, #0]
   b652c:	4918      	ldr	r1, [pc, #96]	; (b6590 <_Z10updateMenuv+0x380>)
   b652e:	f7fd fef5 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6532:	4629      	mov	r1, r5
   b6534:	4817      	ldr	r0, [pc, #92]	; (b6594 <_Z10updateMenuv+0x384>)
   b6536:	f897 9000 	ldrb.w	r9, [r7]
   b653a:	f7fe f9e7 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b653e:	4606      	mov	r6, r0
   b6540:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6542:	f10d 0c04 	add.w	ip, sp, #4
   b6546:	f898 e000 	ldrb.w	lr, [r8]
   b654a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b654e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6550:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6554:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b655a:	6833      	ldr	r3, [r6, #0]
   b655c:	6023      	str	r3, [r4, #0]
   b655e:	2320      	movs	r3, #32
   b6560:	f08e 0201 	eor.w	r2, lr, #1
   b6564:	2101      	movs	r1, #1
   b6566:	9300      	str	r3, [sp, #0]
   b6568:	4648      	mov	r0, r9
   b656a:	2300      	movs	r3, #0
   b656c:	f7ff fd84 	bl	b6078 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6570:	f006 fdae 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b6574:	783a      	ldrb	r2, [r7, #0]
   b6576:	4906      	ldr	r1, [pc, #24]	; (b6590 <_Z10updateMenuv+0x380>)
   b6578:	3a01      	subs	r2, #1
   b657a:	f7fd fecf 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b657e:	4805      	ldr	r0, [pc, #20]	; (b6594 <_Z10updateMenuv+0x384>)
   b6580:	4629      	mov	r1, r5
   b6582:	f7fe f9c3 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6586:	783f      	ldrb	r7, [r7, #0]
   b6588:	f898 c000 	ldrb.w	ip, [r8]
   b658c:	3f01      	subs	r7, #1
   b658e:	e770      	b.n	b6472 <_Z10updateMenuv+0x262>
   b6590:	000c0af8 	.word	0x000c0af8
   b6594:	2003dcb4 	.word	0x2003dcb4

000b6598 <loop>:
void loop() {
   b6598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(postStatus){
   b659c:	4d58      	ldr	r5, [pc, #352]	; (b6700 <loop+0x168>)
   b659e:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b65a0:	b08b      	sub	sp, #44	; 0x2c
    if(postStatus){
   b65a2:	b1a3      	cbz	r3, b65ce <loop+0x36>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b65a4:	4b57      	ldr	r3, [pc, #348]	; (b6704 <loop+0x16c>)
   b65a6:	681b      	ldr	r3, [r3, #0]
   b65a8:	2b00      	cmp	r3, #0
   b65aa:	d039      	beq.n	b6620 <loop+0x88>
   b65ac:	781a      	ldrb	r2, [r3, #0]
   b65ae:	4956      	ldr	r1, [pc, #344]	; (b6708 <loop+0x170>)
   b65b0:	a802      	add	r0, sp, #8
   b65b2:	f003 f8f3 	bl	b979c <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b65b6:	4c55      	ldr	r4, [pc, #340]	; (b670c <loop+0x174>)
   b65b8:	7823      	ldrb	r3, [r4, #0]
   b65ba:	9300      	str	r3, [sp, #0]
   b65bc:	2301      	movs	r3, #1
   b65be:	461a      	mov	r2, r3
   b65c0:	2100      	movs	r1, #0
   b65c2:	a802      	add	r0, sp, #8
   b65c4:	f7fe f852 	bl	b466c <_Z8sendDataPKchbbb>
        postStatus = false;
   b65c8:	2300      	movs	r3, #0
   b65ca:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b65cc:	7023      	strb	r3, [r4, #0]
    updateMenu();
   b65ce:	f7ff fe1f 	bl	b6210 <_Z10updateMenuv>
    if(!logMessages) Serial.println("Error, SD Card Not working");
   b65d2:	4b4f      	ldr	r3, [pc, #316]	; (b6710 <loop+0x178>)
   b65d4:	781b      	ldrb	r3, [r3, #0]
   b65d6:	b923      	cbnz	r3, b65e2 <loop+0x4a>
   b65d8:	f006 fd7a 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b65dc:	494d      	ldr	r1, [pc, #308]	; (b6714 <loop+0x17c>)
   b65de:	f006 f982 	bl	bc8e6 <_ZN5Print7printlnEPKc>
    if(updateControl){
   b65e2:	4b4d      	ldr	r3, [pc, #308]	; (b6718 <loop+0x180>)
   b65e4:	4e4d      	ldr	r6, [pc, #308]	; (b671c <loop+0x184>)
   b65e6:	781a      	ldrb	r2, [r3, #0]
   b65e8:	2a00      	cmp	r2, #0
   b65ea:	d035      	beq.n	b6658 <loop+0xc0>
   b65ec:	f8df 8144 	ldr.w	r8, [pc, #324]	; b6734 <loop+0x19c>
        ControlledBot = NULL;
   b65f0:	4f44      	ldr	r7, [pc, #272]	; (b6704 <loop+0x16c>)
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b65f2:	f896 9000 	ldrb.w	r9, [r6]
        updateControl = false;
   b65f6:	2400      	movs	r4, #0
   b65f8:	701c      	strb	r4, [r3, #0]
   b65fa:	e9d8 5300 	ldrd	r5, r3, [r8]
   b65fe:	1b5d      	subs	r5, r3, r5
   b6600:	4b47      	ldr	r3, [pc, #284]	; (b6720 <loop+0x188>)
        ControlledBot = NULL;
   b6602:	603c      	str	r4, [r7, #0]
   b6604:	10ad      	asrs	r5, r5, #2
   b6606:	435d      	muls	r5, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6608:	b2e1      	uxtb	r1, r4
   b660a:	428d      	cmp	r5, r1
   b660c:	d90d      	bls.n	b662a <loop+0x92>
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b660e:	4640      	mov	r0, r8
   b6610:	f7fe f97c 	bl	b490c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6614:	7803      	ldrb	r3, [r0, #0]
   b6616:	454b      	cmp	r3, r9
   b6618:	bf08      	it	eq
   b661a:	6038      	streq	r0, [r7, #0]
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b661c:	3401      	adds	r4, #1
   b661e:	e7f3      	b.n	b6608 <loop+0x70>
        else sprintf(statusStr,"CCABspcNB");
   b6620:	4940      	ldr	r1, [pc, #256]	; (b6724 <loop+0x18c>)
   b6622:	a802      	add	r0, sp, #8
   b6624:	f007 fea7 	bl	be376 <strcpy>
   b6628:	e7c5      	b.n	b65b6 <loop+0x1e>
        if(ControlledBot == NULL) return;
   b662a:	683a      	ldr	r2, [r7, #0]
   b662c:	2a00      	cmp	r2, #0
   b662e:	d064      	beq.n	b66fa <loop+0x162>
        if(ControlledBot->offloading) offloadingMode = true;
   b6630:	7a13      	ldrb	r3, [r2, #8]
   b6632:	b113      	cbz	r3, b663a <loop+0xa2>
   b6634:	4b3c      	ldr	r3, [pc, #240]	; (b6728 <loop+0x190>)
   b6636:	2101      	movs	r1, #1
   b6638:	7019      	strb	r1, [r3, #0]
        sprintf(statusStr,"CCB%dcnf%1d",ControlledBot->botNum,int(ControlledBot->dataRecording));
   b663a:	79d3      	ldrb	r3, [r2, #7]
   b663c:	493b      	ldr	r1, [pc, #236]	; (b672c <loop+0x194>)
   b663e:	7812      	ldrb	r2, [r2, #0]
   b6640:	a802      	add	r0, sp, #8
   b6642:	f003 f8ab 	bl	b979c <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b6646:	4b31      	ldr	r3, [pc, #196]	; (b670c <loop+0x174>)
   b6648:	781b      	ldrb	r3, [r3, #0]
   b664a:	9300      	str	r3, [sp, #0]
   b664c:	2301      	movs	r3, #1
   b664e:	461a      	mov	r2, r3
   b6650:	2100      	movs	r1, #0
   b6652:	a802      	add	r0, sp, #8
   b6654:	f7fe f80a 	bl	b466c <_Z8sendDataPKchbbb>
    manualMotorControl(botSelect);
   b6658:	7830      	ldrb	r0, [r6, #0]
   b665a:	f7fe f875 	bl	b4748 <_Z18manualMotorControlh>
    if (BLE.connected()) {
   b665e:	f003 fe07 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6662:	f003 feb2 	bl	ba3ca <_ZNK8particle14BleLocalDevice9connectedEv>
   b6666:	2800      	cmp	r0, #0
   b6668:	d037      	beq.n	b66da <loop+0x142>
        if(!digitalRead(D_DPAD)) sendData("CCB1req",0,true,false,false);//offloadingMode = true;
   b666a:	2007      	movs	r0, #7
   b666c:	f006 fe5a 	bl	bd324 <digitalRead>
   b6670:	4603      	mov	r3, r0
   b6672:	b928      	cbnz	r0, b6680 <loop+0xe8>
   b6674:	9000      	str	r0, [sp, #0]
   b6676:	4601      	mov	r1, r0
   b6678:	2201      	movs	r2, #1
   b667a:	482d      	ldr	r0, [pc, #180]	; (b6730 <loop+0x198>)
   b667c:	f7fd fff6 	bl	b466c <_Z8sendDataPKchbbb>
      : _M_current(__i) { }
   b6680:	4b2c      	ldr	r3, [pc, #176]	; (b6734 <loop+0x19c>)
        for(WaterBot ws: WaterBots) Serial.printlnf("Temp: %0.6f",ws.temp);
   b6682:	4e2d      	ldr	r6, [pc, #180]	; (b6738 <loop+0x1a0>)
   b6684:	e9d3 4700 	ldrd	r4, r7, [r3]
   b6688:	42a7      	cmp	r7, r4
   b668a:	d00f      	beq.n	b66ac <loop+0x114>
   b668c:	f8d4 8020 	ldr.w	r8, [r4, #32]
   b6690:	f006 fd1e 	bl	bd0d0 <_Z16_fetch_usbserialv>
   b6694:	4605      	mov	r5, r0
   b6696:	4640      	mov	r0, r8
   b6698:	f007 fa1a 	bl	bdad0 <__aeabi_f2d>
   b669c:	4602      	mov	r2, r0
   b669e:	460b      	mov	r3, r1
   b66a0:	4628      	mov	r0, r5
   b66a2:	4631      	mov	r1, r6
   b66a4:	f7fd fe3a 	bl	b431c <_ZN5Print8printlnfEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
   b66a8:	3434      	adds	r4, #52	; 0x34
	return *this;
   b66aa:	e7ed      	b.n	b6688 <loop+0xf0>
        delay(250);
   b66ac:	20fa      	movs	r0, #250	; 0xfa
   b66ae:	f003 f8c5 	bl	b983c <delay>
    if(offloadingMode){
   b66b2:	4b1d      	ldr	r3, [pc, #116]	; (b6728 <loop+0x190>)
   b66b4:	781b      	ldrb	r3, [r3, #0]
   b66b6:	b13b      	cbz	r3, b66c8 <loop+0x130>
        DataOffloader(ControlledBot->botNum);
   b66b8:	4c12      	ldr	r4, [pc, #72]	; (b6704 <loop+0x16c>)
   b66ba:	6823      	ldr	r3, [r4, #0]
   b66bc:	7818      	ldrb	r0, [r3, #0]
   b66be:	f7ff f92f 	bl	b5920 <_Z13DataOffloaderh>
        ControlledBot->offloading = false;
   b66c2:	6823      	ldr	r3, [r4, #0]
   b66c4:	2200      	movs	r2, #0
   b66c6:	721a      	strb	r2, [r3, #8]
    XBeeHandler();
   b66c8:	f7fe fede 	bl	b5488 <_Z11XBeeHandlerv>
    RPiHandler();
   b66cc:	f7fe fe64 	bl	b5398 <_Z10RPiHandlerv>
}
   b66d0:	b00b      	add	sp, #44	; 0x2c
   b66d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    XBeeLTEPairSet();
   b66d6:	f7fe b8f5 	b.w	b48c4 <_Z14XBeeLTEPairSetv>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b66da:	4c18      	ldr	r4, [pc, #96]	; (b673c <loop+0x1a4>)
   b66dc:	f002 fdca 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
   b66e0:	6823      	ldr	r3, [r4, #0]
   b66e2:	1ac0      	subs	r0, r0, r3
   b66e4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b66e8:	d3e3      	bcc.n	b66b2 <loop+0x11a>
   b66ea:	f002 fdc3 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b66ee:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b66f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b66f4:	f7fe ffde 	bl	b56b4 <_Z7BLEScani>
   b66f8:	e7db      	b.n	b66b2 <loop+0x11a>
}
   b66fa:	b00b      	add	sp, #44	; 0x2c
   b66fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6700:	2003dedc 	.word	0x2003dedc
   b6704:	2003dc84 	.word	0x2003dc84
   b6708:	000c0b05 	.word	0x000c0b05
   b670c:	2003e635 	.word	0x2003e635
   b6710:	2003ddf4 	.word	0x2003ddf4
   b6714:	000c0b1b 	.word	0x000c0b1b
   b6718:	2003e636 	.word	0x2003e636
   b671c:	2003dd4d 	.word	0x2003dd4d
   b6720:	c4ec4ec5 	.word	0xc4ec4ec5
   b6724:	000c0b11 	.word	0x000c0b11
   b6728:	2003de4b 	.word	0x2003de4b
   b672c:	000c0b36 	.word	0x000c0b36
   b6730:	000c0b42 	.word	0x000c0b42
   b6734:	2003dcb4 	.word	0x2003dcb4
   b6738:	000c0b4a 	.word	0x000c0b4a
   b673c:	2003dd88 	.word	0x2003dd88

000b6740 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6740:	b538      	push	{r3, r4, r5, lr}
   b6742:	4604      	mov	r4, r0
   b6744:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6746:	2224      	movs	r2, #36	; 0x24
   b6748:	2100      	movs	r1, #0
   b674a:	f007 fd86 	bl	be25a <memset>

  m_vol = vol;
   b674e:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6750:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6752:	2b10      	cmp	r3, #16
   b6754:	d003      	beq.n	b675e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6756:	2b20      	cmp	r3, #32
   b6758:	d006      	beq.n	b6768 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b675a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b675c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b675e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6760:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6762:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6764:	70a0      	strb	r0, [r4, #2]
  return true;
   b6766:	e7f9      	b.n	b675c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6768:	2340      	movs	r3, #64	; 0x40
   b676a:	e7f9      	b.n	b6760 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b676c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b676c:	b510      	push	{r4, lr}
   b676e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6770:	3024      	adds	r0, #36	; 0x24
   b6772:	f000 feeb 	bl	b754c <_ZN8FatCache4syncEv>
   b6776:	b128      	cbz	r0, b6784 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6778:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b677c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6780:	f000 bee4 	b.w	b754c <_ZN8FatCache4syncEv>
  }
   b6784:	bd10      	pop	{r4, pc}

000b6786 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6786:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6788:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b678a:	f043 0304 	orr.w	r3, r3, #4
   b678e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6790:	f100 0210 	add.w	r2, r0, #16
   b6794:	6880      	ldr	r0, [r0, #8]
   b6796:	f000 bf8f 	b.w	b76b8 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b679c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b67a0:	7801      	ldrb	r1, [r0, #0]
   b67a2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b67a6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b67a8:	d003      	beq.n	b67b2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b67aa:	2600      	movs	r6, #0
}
   b67ac:	4630      	mov	r0, r6
   b67ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b67b2:	6942      	ldr	r2, [r0, #20]
   b67b4:	4b17      	ldr	r3, [pc, #92]	; (b6814 <_ZN7FatFile13addDirClusterEv+0x78>)
   b67b6:	429a      	cmp	r2, r3
   b67b8:	d2f7      	bcs.n	b67aa <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b67ba:	f7ff ffe4 	bl	b6786 <_ZN7FatFile10addClusterEv>
   b67be:	4606      	mov	r6, r0
   b67c0:	2800      	cmp	r0, #0
   b67c2:	d0f2      	beq.n	b67aa <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b67c4:	6921      	ldr	r1, [r4, #16]
   b67c6:	68a0      	ldr	r0, [r4, #8]
   b67c8:	f000 ff0b 	bl	b75e2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b67cc:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b67ce:	68a0      	ldr	r0, [r4, #8]
   b67d0:	2205      	movs	r2, #5
   b67d2:	4639      	mov	r1, r7
   b67d4:	3024      	adds	r0, #36	; 0x24
   b67d6:	f000 fee1 	bl	b759c <_ZN8FatCache4readEmh>
  if (!pc) {
   b67da:	4680      	mov	r8, r0
   b67dc:	2800      	cmp	r0, #0
   b67de:	d0e4      	beq.n	b67aa <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b67e0:	4629      	mov	r1, r5
   b67e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b67e6:	f007 fd38 	bl	be25a <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b67ea:	2501      	movs	r5, #1
   b67ec:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b67ee:	791a      	ldrb	r2, [r3, #4]
   b67f0:	42aa      	cmp	r2, r5
   b67f2:	d909      	bls.n	b6808 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b67f4:	6818      	ldr	r0, [r3, #0]
   b67f6:	4642      	mov	r2, r8
   b67f8:	19e9      	adds	r1, r5, r7
   b67fa:	f001 fa3c 	bl	b7c76 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b67fe:	2800      	cmp	r0, #0
   b6800:	d0d3      	beq.n	b67aa <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6802:	3501      	adds	r5, #1
   b6804:	b2ed      	uxtb	r5, r5
   b6806:	e7f1      	b.n	b67ec <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6808:	6963      	ldr	r3, [r4, #20]
   b680a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b680e:	6163      	str	r3, [r4, #20]
  return true;
   b6810:	e7cc      	b.n	b67ac <_ZN7FatFile13addDirClusterEv+0x10>
   b6812:	bf00      	nop
   b6814:	001ffe00 	.word	0x001ffe00

000b6818 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6818:	b510      	push	{r4, lr}
   b681a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b681c:	6880      	ldr	r0, [r0, #8]
   b681e:	460a      	mov	r2, r1
   b6820:	3024      	adds	r0, #36	; 0x24
   b6822:	69a1      	ldr	r1, [r4, #24]
   b6824:	f000 feba 	bl	b759c <_ZN8FatCache4readEmh>
  if (!pc) {
   b6828:	b120      	cbz	r0, b6834 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b682a:	88a3      	ldrh	r3, [r4, #4]
   b682c:	f003 030f 	and.w	r3, r3, #15
   b6830:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6834:	bd10      	pop	{r4, pc}

000b6836 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6836:	7803      	ldrb	r3, [r0, #0]
   b6838:	b90b      	cbnz	r3, b683e <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b683a:	f7ff bf81 	b.w	b6740 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b683e:	2000      	movs	r0, #0
   b6840:	4770      	bx	lr

000b6842 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6846:	7803      	ldrb	r3, [r0, #0]
   b6848:	4604      	mov	r4, r0
   b684a:	4688      	mov	r8, r1
   b684c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b684e:	2b00      	cmp	r3, #0
   b6850:	d05d      	beq.n	b690e <_ZN7FatFile4readEPvj+0xcc>
   b6852:	7882      	ldrb	r2, [r0, #2]
   b6854:	07d1      	lsls	r1, r2, #31
   b6856:	d55a      	bpl.n	b690e <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6858:	071a      	lsls	r2, r3, #28
   b685a:	d52d      	bpl.n	b68b8 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b685c:	69c3      	ldr	r3, [r0, #28]
   b685e:	6942      	ldr	r2, [r0, #20]
   b6860:	1a9b      	subs	r3, r3, r2
   b6862:	429d      	cmp	r5, r3
   b6864:	bf28      	it	cs
   b6866:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6868:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b686a:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b686e:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6872:	2e00      	cmp	r6, #0
   b6874:	f000 808f 	beq.w	b6996 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6878:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b687a:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b687c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b687e:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6880:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6884:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6888:	d51f      	bpl.n	b68ca <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b688a:	6a00      	ldr	r0, [r0, #32]
   b688c:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b688e:	68a0      	ldr	r0, [r4, #8]
   b6890:	f1ba 0f00 	cmp.w	sl, #0
   b6894:	d142      	bne.n	b691c <_ZN7FatFile4readEPvj+0xda>
   b6896:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b689a:	d33f      	bcc.n	b691c <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b689c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b689e:	4299      	cmp	r1, r3
   b68a0:	d03c      	beq.n	b691c <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b68a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b68a6:	d252      	bcs.n	b694e <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b68a8:	6800      	ldr	r0, [r0, #0]
   b68aa:	4642      	mov	r2, r8
   b68ac:	f001 f95a 	bl	b7b64 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b68b0:	b368      	cbz	r0, b690e <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b68b2:	f44f 7700 	mov.w	r7, #512	; 0x200
   b68b6:	e044      	b.n	b6942 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b68b8:	069b      	lsls	r3, r3, #26
   b68ba:	d5d5      	bpl.n	b6868 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b68bc:	6883      	ldr	r3, [r0, #8]
   b68be:	891a      	ldrh	r2, [r3, #8]
   b68c0:	6943      	ldr	r3, [r0, #20]
   b68c2:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b68c6:	b29b      	uxth	r3, r3
   b68c8:	e7cb      	b.n	b6862 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b68ca:	f890 9005 	ldrb.w	r9, [r0, #5]
   b68ce:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b68d2:	f1ba 0f00 	cmp.w	sl, #0
   b68d6:	d108      	bne.n	b68ea <_ZN7FatFile4readEPvj+0xa8>
   b68d8:	f1b9 0f00 	cmp.w	r9, #0
   b68dc:	d105      	bne.n	b68ea <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b68de:	b95b      	cbnz	r3, b68f8 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b68e0:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b68e2:	bf4c      	ite	mi
   b68e4:	6a03      	ldrmi	r3, [r0, #32]
   b68e6:	6a23      	ldrpl	r3, [r4, #32]
   b68e8:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b68ea:	6921      	ldr	r1, [r4, #16]
   b68ec:	68a0      	ldr	r0, [r4, #8]
   b68ee:	f000 fe78 	bl	b75e2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b68f2:	eb09 0100 	add.w	r1, r9, r0
   b68f6:	e7ca      	b.n	b688e <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b68f8:	6921      	ldr	r1, [r4, #16]
   b68fa:	465a      	mov	r2, fp
   b68fc:	f000 fe77 	bl	b75ee <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6900:	2800      	cmp	r0, #0
   b6902:	db04      	blt.n	b690e <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6904:	d1f1      	bne.n	b68ea <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6906:	7823      	ldrb	r3, [r4, #0]
   b6908:	f013 0f70 	tst.w	r3, #112	; 0x70
   b690c:	d143      	bne.n	b6996 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b690e:	7863      	ldrb	r3, [r4, #1]
   b6910:	f043 0302 	orr.w	r3, r3, #2
   b6914:	7063      	strb	r3, [r4, #1]
  return -1;
   b6916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b691a:	e03d      	b.n	b6998 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b691c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6920:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6922:	f04f 0200 	mov.w	r2, #0
   b6926:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b692a:	bf28      	it	cs
   b692c:	4637      	movcs	r7, r6
   b692e:	f000 fe35 	bl	b759c <_ZN8FatCache4readEmh>
      if (!pc) {
   b6932:	2800      	cmp	r0, #0
   b6934:	d0eb      	beq.n	b690e <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6936:	eb00 010a 	add.w	r1, r0, sl
   b693a:	463a      	mov	r2, r7
   b693c:	4640      	mov	r0, r8
   b693e:	f007 fc64 	bl	be20a <memcpy>
    m_curPosition += n;
   b6942:	6963      	ldr	r3, [r4, #20]
   b6944:	443b      	add	r3, r7
    dst += n;
   b6946:	44b8      	add	r8, r7
    m_curPosition += n;
   b6948:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b694a:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b694c:	e791      	b.n	b6872 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b694e:	7822      	ldrb	r2, [r4, #0]
   b6950:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6952:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6956:	d406      	bmi.n	b6966 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6958:	7902      	ldrb	r2, [r0, #4]
   b695a:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b695e:	b2d2      	uxtb	r2, r2
   b6960:	4592      	cmp	sl, r2
   b6962:	bf28      	it	cs
   b6964:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6966:	4299      	cmp	r1, r3
      n = 512*nb;
   b6968:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b696c:	d208      	bcs.n	b6980 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b696e:	68a0      	ldr	r0, [r4, #8]
   b6970:	4653      	mov	r3, sl
   b6972:	6800      	ldr	r0, [r0, #0]
   b6974:	4642      	mov	r2, r8
   b6976:	f001 f93d 	bl	b7bf4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b697a:	2800      	cmp	r0, #0
   b697c:	d1e1      	bne.n	b6942 <_ZN7FatFile4readEPvj+0x100>
   b697e:	e7c6      	b.n	b690e <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6980:	4453      	add	r3, sl
   b6982:	428b      	cmp	r3, r1
   b6984:	d9f3      	bls.n	b696e <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6986:	3024      	adds	r0, #36	; 0x24
   b6988:	9101      	str	r1, [sp, #4]
   b698a:	f000 fddf 	bl	b754c <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b698e:	9901      	ldr	r1, [sp, #4]
   b6990:	2800      	cmp	r0, #0
   b6992:	d1ec      	bne.n	b696e <_ZN7FatFile4readEPvj+0x12c>
   b6994:	e7bb      	b.n	b690e <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6996:	1ba8      	subs	r0, r5, r6
}
   b6998:	b003      	add	sp, #12
   b699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b699e <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b699e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b69a0:	2201      	movs	r2, #1
   b69a2:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b69a6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b69aa:	4604      	mov	r4, r0
   b69ac:	f7ff ff49 	bl	b6842 <_ZN7FatFile4readEPvj>
   b69b0:	2801      	cmp	r0, #1
   b69b2:	bf0a      	itet	eq
   b69b4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b69b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b69bc:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b69c0:	b002      	add	sp, #8
   b69c2:	bd70      	pop	{r4, r5, r6, pc}

000b69c4 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b69c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b69c6:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b69c8:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b69cc:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b69ce:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b69d2:	d000      	beq.n	b69d6 <_ZN7FatFile12readDirCacheEb+0x12>
   b69d4:	b999      	cbnz	r1, b69fe <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b69d6:	2201      	movs	r2, #1
   b69d8:	f10d 0107 	add.w	r1, sp, #7
   b69dc:	4620      	mov	r0, r4
   b69de:	f7ff ff30 	bl	b6842 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b69e2:	b240      	sxtb	r0, r0
   b69e4:	2801      	cmp	r0, #1
   b69e6:	d002      	beq.n	b69ee <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b69e8:	2000      	movs	r0, #0
}
   b69ea:	b003      	add	sp, #12
   b69ec:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b69ee:	6963      	ldr	r3, [r4, #20]
   b69f0:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b69f2:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b69f4:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b69f6:	3030      	adds	r0, #48	; 0x30
   b69f8:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b69fc:	e7f5      	b.n	b69ea <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b69fe:	3320      	adds	r3, #32
   b6a00:	e7f7      	b.n	b69f2 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6a02 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6a06:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6a08:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6a0a:	4604      	mov	r4, r0
   b6a0c:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6a0e:	b162      	cbz	r2, b6a2a <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6a10:	6940      	ldr	r0, [r0, #20]
   b6a12:	4288      	cmp	r0, r1
   b6a14:	d002      	beq.n	b6a1c <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6a16:	b919      	cbnz	r1, b6a20 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6a18:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6a1a:	6165      	str	r5, [r4, #20]
    return true;
   b6a1c:	2001      	movs	r0, #1
   b6a1e:	e006      	b.n	b6a2e <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6a20:	0716      	lsls	r6, r2, #28
   b6a22:	d506      	bpl.n	b6a32 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6a24:	69e3      	ldr	r3, [r4, #28]
   b6a26:	428b      	cmp	r3, r1
   b6a28:	d20b      	bcs.n	b6a42 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6a2a:	6127      	str	r7, [r4, #16]
  return false;
   b6a2c:	2000      	movs	r0, #0
}
   b6a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6a32:	0691      	lsls	r1, r2, #26
   b6a34:	d505      	bpl.n	b6a42 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6a36:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6a38:	891b      	ldrh	r3, [r3, #8]
   b6a3a:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6a3e:	d9ec      	bls.n	b6a1a <_ZN7FatFile7seekSetEm+0x18>
   b6a40:	e7f3      	b.n	b6a2a <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a42:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6a46:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6a4a:	1e43      	subs	r3, r0, #1
   b6a4c:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a50:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a52:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a54:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6a56:	42b3      	cmp	r3, r6
   b6a58:	d800      	bhi.n	b6a5c <_ZN7FatFile7seekSetEm+0x5a>
   b6a5a:	b998      	cbnz	r0, b6a84 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6a5c:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6a5e:	bf4c      	ite	mi
   b6a60:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6a64:	6a23      	ldrpl	r3, [r4, #32]
   b6a66:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6a68:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6a6c:	2e00      	cmp	r6, #0
   b6a6e:	d0d4      	beq.n	b6a1a <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6a70:	6921      	ldr	r1, [r4, #16]
   b6a72:	68a0      	ldr	r0, [r4, #8]
   b6a74:	4642      	mov	r2, r8
   b6a76:	f000 fdba 	bl	b75ee <_ZN9FatVolume6fatGetEmPm>
   b6a7a:	2800      	cmp	r0, #0
   b6a7c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6a80:	dcf4      	bgt.n	b6a6c <_ZN7FatFile7seekSetEm+0x6a>
   b6a82:	e7d2      	b.n	b6a2a <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6a84:	1af6      	subs	r6, r6, r3
   b6a86:	e7ef      	b.n	b6a68 <_ZN7FatFile7seekSetEm+0x66>

000b6a88 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a8a:	460f      	mov	r7, r1
   b6a8c:	4604      	mov	r4, r0
   b6a8e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6a90:	2100      	movs	r1, #0
   b6a92:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6a94:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6a96:	f007 fbe0 	bl	be25a <memset>
  m_vol = dirFile->m_vol;
   b6a9a:	68b8      	ldr	r0, [r7, #8]
   b6a9c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6a9e:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6aa0:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6aa4:	6a3b      	ldr	r3, [r7, #32]
   b6aa6:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6aa8:	016a      	lsls	r2, r5, #5
   b6aaa:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6aae:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6ab2:	071f      	lsls	r7, r3, #28
   b6ab4:	d444      	bmi.n	b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6ab6:	f003 0317 	and.w	r3, r3, #23
   b6aba:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6abc:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6ac0:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6ac4:	bf04      	itt	eq
   b6ac6:	f043 0308 	orreq.w	r3, r3, #8
   b6aca:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6acc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6ad0:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6ad2:	f006 0303 	and.w	r3, r6, #3
   b6ad6:	2b01      	cmp	r3, #1
   b6ad8:	d02c      	beq.n	b6b34 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6ada:	2b02      	cmp	r3, #2
   b6adc:	d028      	beq.n	b6b30 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6ade:	bb7b      	cbnz	r3, b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6ae0:	0571      	lsls	r1, r6, #21
   b6ae2:	d42d      	bmi.n	b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6ae4:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6ae6:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6ae8:	78a1      	ldrb	r1, [r4, #2]
   b6aea:	078b      	lsls	r3, r1, #30
   b6aec:	d504      	bpl.n	b6af8 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6aee:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6af0:	06df      	lsls	r7, r3, #27
   b6af2:	d425      	bmi.n	b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6af4:	07dd      	lsls	r5, r3, #31
   b6af6:	d423      	bmi.n	b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6af8:	11b3      	asrs	r3, r6, #6
   b6afa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6afe:	f006 0508 	and.w	r5, r6, #8
   b6b02:	432b      	orrs	r3, r5
   b6b04:	430b      	orrs	r3, r1
   b6b06:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6b08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6b0a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6b0c:	1883      	adds	r3, r0, r2
   b6b0e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6b12:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6b16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6b1a:	0572      	lsls	r2, r6, #21
   b6b1c:	d513      	bpl.n	b6b46 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6b1e:	b959      	cbnz	r1, b6b38 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6b20:	78a3      	ldrb	r3, [r4, #2]
   b6b22:	f043 0304 	orr.w	r3, r3, #4
   b6b26:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6b28:	0473      	lsls	r3, r6, #17
   b6b2a:	d410      	bmi.n	b6b4e <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6b2c:	2001      	movs	r0, #1
}
   b6b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6b30:	2303      	movs	r3, #3
   b6b32:	e7d8      	b.n	b6ae6 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6b34:	2302      	movs	r3, #2
   b6b36:	e7d6      	b.n	b6ae6 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6b38:	f000 fdf9 	bl	b772e <_ZN9FatVolume9freeChainEm>
   b6b3c:	2800      	cmp	r0, #0
   b6b3e:	d1ef      	bne.n	b6b20 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6b40:	2000      	movs	r0, #0
   b6b42:	7020      	strb	r0, [r4, #0]
  return false;
   b6b44:	e7f3      	b.n	b6b2e <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6b46:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6b4a:	61e3      	str	r3, [r4, #28]
   b6b4c:	e7ec      	b.n	b6b28 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6b4e:	69e1      	ldr	r1, [r4, #28]
   b6b50:	4620      	mov	r0, r4
   b6b52:	f7ff ff56 	bl	b6a02 <_ZN7FatFile7seekSetEm>
   b6b56:	2800      	cmp	r0, #0
   b6b58:	d1e8      	bne.n	b6b2c <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6b5a:	e7f1      	b.n	b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6b5c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6b5c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6b5e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6b60:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6b62:	b90b      	cbnz	r3, b6b68 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6b64:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6b66:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6b68:	7883      	ldrb	r3, [r0, #2]
   b6b6a:	075a      	lsls	r2, r3, #29
   b6b6c:	d523      	bpl.n	b6bb6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6b6e:	2101      	movs	r1, #1
   b6b70:	f7ff fe52 	bl	b6818 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6b74:	4605      	mov	r5, r0
   b6b76:	b928      	cbnz	r0, b6b84 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6b78:	7863      	ldrb	r3, [r4, #1]
   b6b7a:	f043 0301 	orr.w	r3, r3, #1
   b6b7e:	7063      	strb	r3, [r4, #1]
  return false;
   b6b80:	2000      	movs	r0, #0
   b6b82:	e7f0      	b.n	b6b66 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6b84:	7803      	ldrb	r3, [r0, #0]
   b6b86:	2be5      	cmp	r3, #229	; 0xe5
   b6b88:	d0f6      	beq.n	b6b78 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6b8a:	7823      	ldrb	r3, [r4, #0]
   b6b8c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6b8e:	bf44      	itt	mi
   b6b90:	69e3      	ldrmi	r3, [r4, #28]
   b6b92:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6b94:	6a23      	ldr	r3, [r4, #32]
   b6b96:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6b98:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6b9a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6b9c:	4b09      	ldr	r3, [pc, #36]	; (b6bc4 <_ZN7FatFile4syncEv+0x68>)
   b6b9e:	681b      	ldr	r3, [r3, #0]
   b6ba0:	b12b      	cbz	r3, b6bae <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6ba2:	f100 0116 	add.w	r1, r0, #22
   b6ba6:	3018      	adds	r0, #24
   b6ba8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6baa:	8b2b      	ldrh	r3, [r5, #24]
   b6bac:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6bae:	78a3      	ldrb	r3, [r4, #2]
   b6bb0:	f023 0304 	bic.w	r3, r3, #4
   b6bb4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6bb6:	68a0      	ldr	r0, [r4, #8]
   b6bb8:	f7ff fdd8 	bl	b676c <_ZN9FatVolume9cacheSyncEv>
   b6bbc:	2800      	cmp	r0, #0
   b6bbe:	d0db      	beq.n	b6b78 <_ZN7FatFile4syncEv+0x1c>
   b6bc0:	e7d0      	b.n	b6b64 <_ZN7FatFile4syncEv+0x8>
   b6bc2:	bf00      	nop
   b6bc4:	2003e638 	.word	0x2003e638

000b6bc8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6bc8:	b510      	push	{r4, lr}
   b6bca:	4604      	mov	r4, r0
  bool rtn = sync();
   b6bcc:	f7ff ffc6 	bl	b6b5c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6bd0:	2300      	movs	r3, #0
   b6bd2:	7023      	strb	r3, [r4, #0]
}
   b6bd4:	bd10      	pop	{r4, pc}

000b6bd6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bd8:	b093      	sub	sp, #76	; 0x4c
   b6bda:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6bdc:	2300      	movs	r3, #0
   b6bde:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6be0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6be2:	9201      	str	r2, [sp, #4]
   b6be4:	4606      	mov	r6, r0
   b6be6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6be8:	b113      	cbz	r3, b6bf0 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6bea:	2000      	movs	r0, #0
}
   b6bec:	b013      	add	sp, #76	; 0x4c
   b6bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6bf0:	780b      	ldrb	r3, [r1, #0]
   b6bf2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6bf6:	d0f8      	beq.n	b6bea <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6bf8:	7813      	ldrb	r3, [r2, #0]
   b6bfa:	2b2f      	cmp	r3, #47	; 0x2f
   b6bfc:	d112      	bne.n	b6c24 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6bfe:	9a01      	ldr	r2, [sp, #4]
   b6c00:	7813      	ldrb	r3, [r2, #0]
   b6c02:	2b2f      	cmp	r3, #47	; 0x2f
   b6c04:	d102      	bne.n	b6c0c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6c06:	3201      	adds	r2, #1
   b6c08:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6c0a:	e7f8      	b.n	b6bfe <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6c0c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6c0e:	b91b      	cbnz	r3, b6c18 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6c10:	4630      	mov	r0, r6
   b6c12:	f7ff fe10 	bl	b6836 <_ZN7FatFile8openRootEP9FatVolume>
   b6c16:	e7e9      	b.n	b6bec <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6c18:	a809      	add	r0, sp, #36	; 0x24
   b6c1a:	f7ff fd91 	bl	b6740 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6c1e:	2800      	cmp	r0, #0
   b6c20:	d0e3      	beq.n	b6bea <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6c22:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6c24:	9801      	ldr	r0, [sp, #4]
   b6c26:	aa01      	add	r2, sp, #4
   b6c28:	a903      	add	r1, sp, #12
   b6c2a:	f000 f931 	bl	b6e90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6c2e:	2800      	cmp	r0, #0
   b6c30:	d0db      	beq.n	b6bea <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6c32:	9b01      	ldr	r3, [sp, #4]
   b6c34:	781b      	ldrb	r3, [r3, #0]
   b6c36:	b19b      	cbz	r3, b6c60 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6c38:	2300      	movs	r3, #0
   b6c3a:	aa03      	add	r2, sp, #12
   b6c3c:	4621      	mov	r1, r4
   b6c3e:	4630      	mov	r0, r6
   b6c40:	f000 faba 	bl	b71b8 <_ZN7FatFile4openEPS_P7fname_ti>
   b6c44:	2800      	cmp	r0, #0
   b6c46:	d0d0      	beq.n	b6bea <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6c48:	4635      	mov	r5, r6
   b6c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c4c:	ac09      	add	r4, sp, #36	; 0x24
   b6c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c54:	682b      	ldr	r3, [r5, #0]
   b6c56:	6023      	str	r3, [r4, #0]
    close();
   b6c58:	4630      	mov	r0, r6
   b6c5a:	f7ff ffb5 	bl	b6bc8 <_ZN7FatFile5closeEv>
  while (1) {
   b6c5e:	e7e0      	b.n	b6c22 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6c60:	463b      	mov	r3, r7
   b6c62:	aa03      	add	r2, sp, #12
   b6c64:	4621      	mov	r1, r4
   b6c66:	4630      	mov	r0, r6
   b6c68:	f000 faa6 	bl	b71b8 <_ZN7FatFile4openEPS_P7fname_ti>
   b6c6c:	e7be      	b.n	b6bec <_ZN7FatFile4openEPS_PKci+0x16>

000b6c6e <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b6c6e:	b500      	push	{lr}
   b6c70:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6c72:	2300      	movs	r3, #0
   b6c74:	460a      	mov	r2, r1
   b6c76:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b6c78:	4601      	mov	r1, r0
   b6c7a:	2301      	movs	r3, #1
   b6c7c:	a801      	add	r0, sp, #4
   b6c7e:	f7ff ffaa 	bl	b6bd6 <_ZN7FatFile4openEPS_PKci>
   b6c82:	b110      	cbz	r0, b6c8a <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b6c84:	a801      	add	r0, sp, #4
   b6c86:	f000 f9e1 	bl	b704c <_ZN7FatFile6removeEv>
}
   b6c8a:	b00b      	add	sp, #44	; 0x2c
   b6c8c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c90 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6c94:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6c96:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6c98:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6c9a:	4604      	mov	r4, r0
   b6c9c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6c9e:	d55b      	bpl.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
   b6ca0:	7883      	ldrb	r3, [r0, #2]
   b6ca2:	079a      	lsls	r2, r3, #30
   b6ca4:	d558      	bpl.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6ca6:	071b      	lsls	r3, r3, #28
   b6ca8:	d451      	bmi.n	b6d4e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6caa:	6963      	ldr	r3, [r4, #20]
   b6cac:	43db      	mvns	r3, r3
   b6cae:	42bb      	cmp	r3, r7
   b6cb0:	d352      	bcc.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
   b6cb2:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6cb4:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6cb8:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6cba:	f1b8 0f00 	cmp.w	r8, #0
   b6cbe:	f000 8091 	beq.w	b6de4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6cc2:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6cc4:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6cc6:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6cca:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6cce:	d10e      	bne.n	b6cee <_ZN7FatFile5writeEPKvj+0x5e>
   b6cd0:	b96d      	cbnz	r5, b6cee <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6cd2:	6921      	ldr	r1, [r4, #16]
   b6cd4:	2900      	cmp	r1, #0
   b6cd6:	d046      	beq.n	b6d66 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6cd8:	4652      	mov	r2, sl
   b6cda:	f000 fc88 	bl	b75ee <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6cde:	2800      	cmp	r0, #0
   b6ce0:	db3a      	blt.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6ce2:	d104      	bne.n	b6cee <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	f7ff fd4e 	bl	b6786 <_ZN7FatFile10addClusterEv>
   b6cea:	2800      	cmp	r0, #0
   b6cec:	d034      	beq.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6cee:	6921      	ldr	r1, [r4, #16]
   b6cf0:	68a0      	ldr	r0, [r4, #8]
   b6cf2:	f000 fc76 	bl	b75e2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6cf6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6cf8:	68a0      	ldr	r0, [r4, #8]
   b6cfa:	b915      	cbnz	r5, b6d02 <_ZN7FatFile5writeEPKvj+0x72>
   b6cfc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6d00:	d23f      	bcs.n	b6d82 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6d02:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6d06:	4546      	cmp	r6, r8
   b6d08:	bf28      	it	cs
   b6d0a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6d0c:	2d00      	cmp	r5, #0
   b6d0e:	d136      	bne.n	b6d7e <_ZN7FatFile5writeEPKvj+0xee>
   b6d10:	6962      	ldr	r2, [r4, #20]
   b6d12:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6d14:	429a      	cmp	r2, r3
   b6d16:	bf34      	ite	cc
   b6d18:	2201      	movcc	r2, #1
   b6d1a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6d1c:	3024      	adds	r0, #36	; 0x24
   b6d1e:	f000 fc3d 	bl	b759c <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6d22:	b1c8      	cbz	r0, b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6d24:	4428      	add	r0, r5
   b6d26:	4632      	mov	r2, r6
   b6d28:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6d2a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6d2c:	f007 fa6d 	bl	be20a <memcpy>
      if (512 == (n + blockOffset)) {
   b6d30:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6d34:	d104      	bne.n	b6d40 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6d36:	68a0      	ldr	r0, [r4, #8]
   b6d38:	3024      	adds	r0, #36	; 0x24
   b6d3a:	f000 fc07 	bl	b754c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6d3e:	b158      	cbz	r0, b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6d40:	6963      	ldr	r3, [r4, #20]
   b6d42:	4433      	add	r3, r6
   b6d44:	6163      	str	r3, [r4, #20]
    src += n;
   b6d46:	44b1      	add	r9, r6
    nToWrite -= n;
   b6d48:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6d4c:	e7b4      	b.n	b6cb8 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6d4e:	69c1      	ldr	r1, [r0, #28]
   b6d50:	f7ff fe57 	bl	b6a02 <_ZN7FatFile7seekSetEm>
   b6d54:	2800      	cmp	r0, #0
   b6d56:	d1a8      	bne.n	b6caa <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6d58:	7863      	ldrb	r3, [r4, #1]
   b6d5a:	f043 0301 	orr.w	r3, r3, #1
   b6d5e:	7063      	strb	r3, [r4, #1]
  return -1;
   b6d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d64:	e050      	b.n	b6e08 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6d66:	6a23      	ldr	r3, [r4, #32]
   b6d68:	b93b      	cbnz	r3, b6d7a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	f7ff fd0b 	bl	b6786 <_ZN7FatFile10addClusterEv>
   b6d70:	2800      	cmp	r0, #0
   b6d72:	d0f1      	beq.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6d74:	6923      	ldr	r3, [r4, #16]
   b6d76:	6223      	str	r3, [r4, #32]
   b6d78:	e7b9      	b.n	b6cee <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6d7a:	6123      	str	r3, [r4, #16]
   b6d7c:	e7b7      	b.n	b6cee <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6d7e:	2201      	movs	r2, #1
   b6d80:	e7cc      	b.n	b6d1c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6d82:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6d86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6d88:	d31b      	bcc.n	b6dc2 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6d8a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6d8e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6d92:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6d94:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6d98:	4573      	cmp	r3, lr
   b6d9a:	bf28      	it	cs
   b6d9c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6d9e:	4291      	cmp	r1, r2
      n = 512*nb;
   b6da0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6da4:	d307      	bcc.n	b6db6 <_ZN7FatFile5writeEPKvj+0x126>
   b6da6:	441a      	add	r2, r3
   b6da8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6daa:	bf82      	ittt	hi
   b6dac:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6db0:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6db4:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6db6:	68a5      	ldr	r5, [r4, #8]
   b6db8:	464a      	mov	r2, r9
   b6dba:	6828      	ldr	r0, [r5, #0]
   b6dbc:	f000 ffd1 	bl	b7d62 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6dc0:	e7bd      	b.n	b6d3e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6dc2:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6dc4:	bf02      	ittt	eq
   b6dc6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b6dca:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6dce:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6dd0:	68a3      	ldr	r3, [r4, #8]
   b6dd2:	464a      	mov	r2, r9
   b6dd4:	6818      	ldr	r0, [r3, #0]
   b6dd6:	f000 ff4e 	bl	b7c76 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6dda:	2800      	cmp	r0, #0
   b6ddc:	d0bc      	beq.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6dde:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6de2:	e7ad      	b.n	b6d40 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6de4:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6de6:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6de8:	42b2      	cmp	r2, r6
   b6dea:	d204      	bcs.n	b6df6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6dec:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6dee:	f043 0304 	orr.w	r3, r3, #4
   b6df2:	70a3      	strb	r3, [r4, #2]
   b6df4:	e003      	b.n	b6dfe <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6df6:	4a08      	ldr	r2, [pc, #32]	; (b6e18 <_ZN7FatFile5writeEPKvj+0x188>)
   b6df8:	6812      	ldr	r2, [r2, #0]
   b6dfa:	2a00      	cmp	r2, #0
   b6dfc:	d1f7      	bne.n	b6dee <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6dfe:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6e02:	2b00      	cmp	r3, #0
   b6e04:	db02      	blt.n	b6e0c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6e06:	4638      	mov	r0, r7
}
   b6e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	f7ff fea5 	bl	b6b5c <_ZN7FatFile4syncEv>
   b6e12:	2800      	cmp	r0, #0
   b6e14:	d1f7      	bne.n	b6e06 <_ZN7FatFile5writeEPKvj+0x176>
   b6e16:	e79f      	b.n	b6d58 <_ZN7FatFile5writeEPKvj+0xc8>
   b6e18:	2003e638 	.word	0x2003e638

000b6e1c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6e1c:	2904      	cmp	r1, #4
   b6e1e:	d804      	bhi.n	b6e2a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6e20:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6e24:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6e28:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6e2a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6e2c:	bf9b      	ittet	ls
   b6e2e:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6e32:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6e36:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6e38:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6e3a:	bf84      	itt	hi
   b6e3c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6e40:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6e42:	4770      	bx	lr

000b6e44 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6e44:	1e41      	subs	r1, r0, #1
   b6e46:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6e4a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6e4c:	0842      	lsrs	r2, r0, #1
   b6e4e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6e52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6e56:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6e5a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6e5c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6e5e:	d1f5      	bne.n	b6e4c <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6e60:	4770      	bx	lr

000b6e62 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6e62:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6e64:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6e66:	4604      	mov	r4, r0
   b6e68:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6e6a:	b923      	cbnz	r3, b6e76 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6e70:	6889      	ldr	r1, [r1, #8]
   b6e72:	f7ff bce0 	b.w	b6836 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6e76:	2224      	movs	r2, #36	; 0x24
   b6e78:	2100      	movs	r1, #0
   b6e7a:	f007 f9ee 	bl	be25a <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6e7e:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6e80:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6e82:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6e84:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6e86:	68ab      	ldr	r3, [r5, #8]
   b6e88:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6e8a:	68eb      	ldr	r3, [r5, #12]
   b6e8c:	6223      	str	r3, [r4, #32]
}
   b6e8e:	bd38      	pop	{r3, r4, r5, pc}

000b6e90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6e94:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6e96:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6e9a:	2b20      	cmp	r3, #32
   b6e9c:	d0fa      	beq.n	b6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6e9e:	4d6a      	ldr	r5, [pc, #424]	; (b7048 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6ea0:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6ea2:	2400      	movs	r4, #0
    c = path[len];
   b6ea4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6ea6:	b1c3      	cbz	r3, b6eda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6ea8:	2b2f      	cmp	r3, #47	; 0x2f
   b6eaa:	d016      	beq.n	b6eda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6eac:	2b5c      	cmp	r3, #92	; 0x5c
   b6eae:	d102      	bne.n	b6eb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6eb0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6eb6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6eba:	b2c0      	uxtb	r0, r0
   b6ebc:	281d      	cmp	r0, #29
   b6ebe:	d803      	bhi.n	b6ec8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6ec0:	fa25 f000 	lsr.w	r0, r5, r0
   b6ec4:	07c0      	lsls	r0, r0, #31
   b6ec6:	d4f3      	bmi.n	b6eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6ec8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6ecc:	283c      	cmp	r0, #60	; 0x3c
   b6ece:	d0ef      	beq.n	b6eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6ed0:	3b20      	subs	r3, #32
   b6ed2:	2b5e      	cmp	r3, #94	; 0x5e
   b6ed4:	d8ec      	bhi.n	b6eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6ed6:	3401      	adds	r4, #1
    c = path[len];
   b6ed8:	e7e4      	b.n	b6ea4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6eda:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6edc:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6ede:	4607      	mov	r7, r0
   b6ee0:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6ee4:	2d20      	cmp	r5, #32
   b6ee6:	d0fa      	beq.n	b6ede <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6ee8:	2d2f      	cmp	r5, #47	; 0x2f
   b6eea:	d0f8      	beq.n	b6ede <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6eec:	6017      	str	r7, [r2, #0]
  while (len) {
   b6eee:	b14c      	cbz	r4, b6f04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6ef4:	2a2e      	cmp	r2, #46	; 0x2e
   b6ef6:	d001      	beq.n	b6efc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6ef8:	2a20      	cmp	r2, #32
   b6efa:	d101      	bne.n	b6f00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6efc:	3c01      	subs	r4, #1
  while (len) {
   b6efe:	e7f6      	b.n	b6eee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6f00:	2cff      	cmp	r4, #255	; 0xff
   b6f02:	dcd5      	bgt.n	b6eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6f04:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6f08:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6f0c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6f0e:	f8c1 300d 	str.w	r3, [r1, #13]
   b6f12:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6f14:	f04f 0800 	mov.w	r8, #0
   b6f18:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6f1c:	2b2e      	cmp	r3, #46	; 0x2e
   b6f1e:	d001      	beq.n	b6f24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6f20:	2b20      	cmp	r3, #32
   b6f22:	d102      	bne.n	b6f2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6f24:	f108 0801 	add.w	r8, r8, #1
   b6f28:	e7f6      	b.n	b6f18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6f2a:	fab8 f088 	clz	r0, r8
   b6f2e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6f30:	1e65      	subs	r5, r4, #1
   b6f32:	1c6b      	adds	r3, r5, #1
   b6f34:	d002      	beq.n	b6f3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6f36:	5d73      	ldrb	r3, [r6, r5]
   b6f38:	2b2e      	cmp	r3, #46	; 0x2e
   b6f3a:	d114      	bne.n	b6f66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6f3c:	f04f 0900 	mov.w	r9, #0
   b6f40:	2707      	movs	r7, #7
   b6f42:	464a      	mov	r2, r9
   b6f44:	46ca      	mov	sl, r9
   b6f46:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6f4a:	45a0      	cmp	r8, r4
   b6f4c:	da68      	bge.n	b7020 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6f4e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6f52:	2b20      	cmp	r3, #32
   b6f54:	d003      	beq.n	b6f5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6f56:	2b2e      	cmp	r3, #46	; 0x2e
   b6f58:	d107      	bne.n	b6f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6f5a:	45a8      	cmp	r8, r5
   b6f5c:	d012      	beq.n	b6f84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6f5e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6f60:	f108 0801 	add.w	r8, r8, #1
   b6f64:	e7f1      	b.n	b6f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6f66:	3d01      	subs	r5, #1
   b6f68:	e7e3      	b.n	b6f32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6f6a:	2b22      	cmp	r3, #34	; 0x22
   b6f6c:	d008      	beq.n	b6f80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6f6e:	2b7c      	cmp	r3, #124	; 0x7c
   b6f70:	d006      	beq.n	b6f80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6f72:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6f76:	f1bc 0f05 	cmp.w	ip, #5
   b6f7a:	d80a      	bhi.n	b6f92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6f7c:	2b2d      	cmp	r3, #45	; 0x2d
   b6f7e:	d012      	beq.n	b6fa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6f80:	45a8      	cmp	r8, r5
   b6f82:	d15b      	bne.n	b703c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6f84:	2f0a      	cmp	r7, #10
   b6f86:	d04a      	beq.n	b701e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6f88:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6f8a:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6f8c:	f04f 0e10 	mov.w	lr, #16
   b6f90:	e7e6      	b.n	b6f60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6f92:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6f96:	f1bc 0f05 	cmp.w	ip, #5
   b6f9a:	d9f1      	bls.n	b6f80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6f9c:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6fa0:	f1bc 0f02 	cmp.w	ip, #2
   b6fa4:	d9ec      	bls.n	b6f80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6fa6:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6faa:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6fae:	d8e7      	bhi.n	b6f80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6fb0:	45a8      	cmp	r8, r5
   b6fb2:	d0e7      	beq.n	b6f84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6fb4:	42ba      	cmp	r2, r7
   b6fb6:	d830      	bhi.n	b701a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6fb8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6fbc:	f1bc 0f19 	cmp.w	ip, #25
   b6fc0:	d81a      	bhi.n	b6ff8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6fc2:	3b20      	subs	r3, #32
        lc |= bit;
   b6fc4:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6fc8:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6fca:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6fce:	f102 0c01 	add.w	ip, r2, #1
   b6fd2:	fa5f fc8c 	uxtb.w	ip, ip
   b6fd6:	440a      	add	r2, r1
      if (i < 7) {
   b6fd8:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6fdc:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6fde:	d801      	bhi.n	b6fe4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6fe0:	f881 c00c 	strb.w	ip, [r1, #12]
   b6fe4:	4662      	mov	r2, ip
   b6fe6:	e7bb      	b.n	b6f60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6fe8:	45a8      	cmp	r8, r5
   b6fea:	dc18      	bgt.n	b701e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6fec:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6fee:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6ff0:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6ff2:	f04f 0e10 	mov.w	lr, #16
   b6ff6:	e7b2      	b.n	b6f5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6ff8:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6ffc:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b7000:	bf98      	it	ls
   b7002:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b7006:	e7e2      	b.n	b6fce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b7008:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b700a:	2001      	movs	r0, #1
   b700c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b700e:	4419      	add	r1, r3
   b7010:	237e      	movs	r3, #126	; 0x7e
   b7012:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b7014:	2331      	movs	r3, #49	; 0x31
   b7016:	738b      	strb	r3, [r1, #14]
   b7018:	e74b      	b.n	b6eb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b701a:	2f0a      	cmp	r7, #10
   b701c:	d1e4      	bne.n	b6fe8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b701e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b7020:	7b4b      	ldrb	r3, [r1, #13]
   b7022:	2b20      	cmp	r3, #32
   b7024:	f43f af44 	beq.w	b6eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7028:	2800      	cmp	r0, #0
   b702a:	d0ed      	beq.n	b7008 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b702c:	ea1a 0f09 	tst.w	sl, r9
   b7030:	bf18      	it	ne
   b7032:	f04f 0902 	movne.w	r9, #2
   b7036:	f881 9000 	strb.w	r9, [r1]
   b703a:	e73a      	b.n	b6eb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b703c:	42ba      	cmp	r2, r7
   b703e:	d8ec      	bhi.n	b701a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7040:	2000      	movs	r0, #0
      c = '_';
   b7042:	235f      	movs	r3, #95	; 0x5f
   b7044:	e7c3      	b.n	b6fce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b7046:	bf00      	nop
   b7048:	31000101 	.word	0x31000101

000b704c <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7050:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7052:	2300      	movs	r3, #0
   b7054:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7056:	7803      	ldrb	r3, [r0, #0]
   b7058:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b705a:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b705c:	d50a      	bpl.n	b7074 <_ZN7FatFile6removeEv+0x28>
   b705e:	7883      	ldrb	r3, [r0, #2]
   b7060:	079a      	lsls	r2, r3, #30
   b7062:	d507      	bpl.n	b7074 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7064:	6a01      	ldr	r1, [r0, #32]
   b7066:	b939      	cbnz	r1, b7078 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7068:	2101      	movs	r1, #1
   b706a:	4620      	mov	r0, r4
   b706c:	f7ff fbd4 	bl	b6818 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7070:	4605      	mov	r5, r0
   b7072:	b938      	cbnz	r0, b7084 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b7074:	2000      	movs	r0, #0
   b7076:	e048      	b.n	b710a <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7078:	6880      	ldr	r0, [r0, #8]
   b707a:	f000 fb58 	bl	b772e <_ZN9FatVolume9freeChainEm>
   b707e:	2800      	cmp	r0, #0
   b7080:	d1f2      	bne.n	b7068 <_ZN7FatFile6removeEv+0x1c>
   b7082:	e7f7      	b.n	b7074 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b7084:	f7ff fede 	bl	b6e44 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b7088:	27e5      	movs	r7, #229	; 0xe5
   b708a:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b708c:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b708e:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b7090:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b7092:	68a0      	ldr	r0, [r4, #8]
   b7094:	f7ff fb6a 	bl	b676c <_ZN9FatVolume9cacheSyncEv>
   b7098:	2800      	cmp	r0, #0
   b709a:	d0eb      	beq.n	b7074 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b709c:	78e3      	ldrb	r3, [r4, #3]
   b709e:	2b00      	cmp	r3, #0
   b70a0:	d033      	beq.n	b710a <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b70a2:	4621      	mov	r1, r4
   b70a4:	a801      	add	r0, sp, #4
   b70a6:	f7ff fedc 	bl	b6e62 <_ZN7FatFile11openClusterEPS_>
   b70aa:	2800      	cmp	r0, #0
   b70ac:	d0e2      	beq.n	b7074 <_ZN7FatFile6removeEv+0x28>
   b70ae:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b70b0:	78e3      	ldrb	r3, [r4, #3]
   b70b2:	fa5f f885 	uxtb.w	r8, r5
   b70b6:	4543      	cmp	r3, r8
   b70b8:	d3dc      	bcc.n	b7074 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b70ba:	88a1      	ldrh	r1, [r4, #4]
   b70bc:	1b49      	subs	r1, r1, r5
   b70be:	0149      	lsls	r1, r1, #5
   b70c0:	a801      	add	r0, sp, #4
   b70c2:	f7ff fc9e 	bl	b6a02 <_ZN7FatFile7seekSetEm>
   b70c6:	2800      	cmp	r0, #0
   b70c8:	d0d4      	beq.n	b7074 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b70ca:	2100      	movs	r1, #0
   b70cc:	a801      	add	r0, sp, #4
   b70ce:	f7ff fc79 	bl	b69c4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b70d2:	2800      	cmp	r0, #0
   b70d4:	d0ce      	beq.n	b7074 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b70d6:	7ac3      	ldrb	r3, [r0, #11]
   b70d8:	2b0f      	cmp	r3, #15
   b70da:	d1cb      	bne.n	b7074 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b70dc:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b70de:	f002 031f 	and.w	r3, r2, #31
   b70e2:	4543      	cmp	r3, r8
   b70e4:	d1c6      	bne.n	b7074 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b70e6:	7b43      	ldrb	r3, [r0, #13]
   b70e8:	42b3      	cmp	r3, r6
   b70ea:	d1c3      	bne.n	b7074 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b70ec:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b70ee:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b70f0:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b70f4:	f043 0301 	orr.w	r3, r3, #1
   b70f8:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b70fc:	0653      	lsls	r3, r2, #25
   b70fe:	f105 0501 	add.w	r5, r5, #1
   b7102:	d5d5      	bpl.n	b70b0 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b7104:	68a0      	ldr	r0, [r4, #8]
   b7106:	f7ff fb31 	bl	b676c <_ZN9FatVolume9cacheSyncEv>
}
   b710a:	b00a      	add	sp, #40	; 0x28
   b710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7110 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7114:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7118:	4606      	mov	r6, r0
   b711a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b711c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b711e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7120:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7124:	6861      	ldr	r1, [r4, #4]
   b7126:	68a2      	ldr	r2, [r4, #8]
   b7128:	186b      	adds	r3, r5, r1
   b712a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b712c:	4411      	add	r1, r2
   b712e:	4291      	cmp	r1, r2
   b7130:	d006      	beq.n	b7140 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b7132:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7136:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b713a:	4043      	eors	r3, r0
   b713c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b713e:	e7f6      	b.n	b712e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7140:	f1b9 0f03 	cmp.w	r9, #3
   b7144:	bf28      	it	cs
   b7146:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b714a:	f109 0204 	add.w	r2, r9, #4
   b714e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7150:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7154:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7156:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7158:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b715a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b715c:	bf94      	ite	ls
   b715e:	3130      	addls	r1, #48	; 0x30
   b7160:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7162:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7164:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b7166:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b716a:	d1f1      	bne.n	b7150 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b716c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7170:	2100      	movs	r1, #0
   b7172:	735f      	strb	r7, [r3, #13]
   b7174:	4630      	mov	r0, r6
   b7176:	f7ff fc44 	bl	b6a02 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b717a:	2101      	movs	r1, #1
   b717c:	4630      	mov	r0, r6
   b717e:	f7ff fc21 	bl	b69c4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7182:	4601      	mov	r1, r0
   b7184:	b928      	cbnz	r0, b7192 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b7186:	7870      	ldrb	r0, [r6, #1]
   b7188:	fab0 f080 	clz	r0, r0
   b718c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b7192:	7803      	ldrb	r3, [r0, #0]
   b7194:	b16b      	cbz	r3, b71b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7196:	7ac3      	ldrb	r3, [r0, #11]
   b7198:	071b      	lsls	r3, r3, #28
   b719a:	d4ee      	bmi.n	b717a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b719c:	220b      	movs	r2, #11
   b719e:	4640      	mov	r0, r8
   b71a0:	f007 f823 	bl	be1ea <memcmp>
   b71a4:	2800      	cmp	r0, #0
   b71a6:	d1e8      	bne.n	b717a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b71a8:	3501      	adds	r5, #1
   b71aa:	b2ad      	uxth	r5, r5
   b71ac:	2d64      	cmp	r5, #100	; 0x64
   b71ae:	d1b9      	bne.n	b7124 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b71b0:	e7ed      	b.n	b718e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b71b2:	2001      	movs	r0, #1
   b71b4:	e7eb      	b.n	b718e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b71b8 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71bc:	ed2d 8b02 	vpush	{d8}
   b71c0:	b08b      	sub	sp, #44	; 0x2c
   b71c2:	460d      	mov	r5, r1
   b71c4:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b71c6:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71c8:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b71ca:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71ce:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b71d0:	d105      	bne.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b71d2:	2000      	movs	r0, #0
}
   b71d4:	b00b      	add	sp, #44	; 0x2c
   b71d6:	ecbd 8b02 	vpop	{d8}
   b71da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b71de:	9b07      	ldr	r3, [sp, #28]
   b71e0:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b71e2:	2b00      	cmp	r3, #0
   b71e4:	d1f5      	bne.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b71e6:	6853      	ldr	r3, [r2, #4]
   b71e8:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b71ea:	7813      	ldrb	r3, [r2, #0]
   b71ec:	079c      	lsls	r4, r3, #30
   b71ee:	bf1f      	itttt	ne
   b71f0:	9b05      	ldrne	r3, [sp, #20]
   b71f2:	330c      	addne	r3, #12
   b71f4:	220d      	movne	r2, #13
   b71f6:	fbb3 f3f2 	udivne	r3, r3, r2
   b71fa:	bf1a      	itte	ne
   b71fc:	3301      	addne	r3, #1
   b71fe:	b2db      	uxtbne	r3, r3
   b7200:	2301      	moveq	r3, #1
    seekSet(0);
   b7202:	2100      	movs	r1, #0
   b7204:	4628      	mov	r0, r5
   b7206:	9303      	str	r3, [sp, #12]
   b7208:	f7ff fbfb 	bl	b6a02 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b720c:	f107 030d 	add.w	r3, r7, #13
  }
   b7210:	f04f 0b00 	mov.w	fp, #0
   b7214:	ee08 3a10 	vmov	s16, r3
   b7218:	46da      	mov	sl, fp
   b721a:	465c      	mov	r4, fp
   b721c:	465e      	mov	r6, fp
   b721e:	f8cd b010 	str.w	fp, [sp, #16]
   b7222:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7224:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b7226:	2101      	movs	r1, #1
   b7228:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b722a:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b722e:	f7ff fbc9 	bl	b69c4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7232:	4603      	mov	r3, r0
   b7234:	2800      	cmp	r0, #0
   b7236:	d171      	bne.n	b731c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7238:	786b      	ldrb	r3, [r5, #1]
   b723a:	2b00      	cmp	r3, #0
   b723c:	d1c9      	bne.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b723e:	9b06      	ldr	r3, [sp, #24]
   b7240:	059a      	lsls	r2, r3, #22
   b7242:	d5c6      	bpl.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7244:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7248:	3b01      	subs	r3, #1
   b724a:	2b01      	cmp	r3, #1
   b724c:	d8c1      	bhi.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b724e:	9b04      	ldr	r3, [sp, #16]
   b7250:	2c00      	cmp	r4, #0
   b7252:	bf08      	it	eq
   b7254:	4643      	moveq	r3, r8
   b7256:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7258:	9b03      	ldr	r3, [sp, #12]
   b725a:	429c      	cmp	r4, r3
   b725c:	f0c0 80f1 	bcc.w	b7442 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7260:	f1b9 0f00 	cmp.w	r9, #0
   b7264:	f040 810a 	bne.w	b747c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7268:	9b04      	ldr	r3, [sp, #16]
   b726a:	4628      	mov	r0, r5
   b726c:	0159      	lsls	r1, r3, #5
   b726e:	f7ff fbc8 	bl	b6a02 <_ZN7FatFile7seekSetEm>
   b7272:	2800      	cmp	r0, #0
   b7274:	d0ad      	beq.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b7276:	9b03      	ldr	r3, [sp, #12]
   b7278:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b727c:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7280:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7282:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b7286:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b728a:	2e00      	cmp	r6, #0
   b728c:	f000 810d 	beq.w	b74aa <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7290:	2100      	movs	r1, #0
   b7292:	4628      	mov	r0, r5
   b7294:	f7ff fb96 	bl	b69c4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7298:	4604      	mov	r4, r0
   b729a:	2800      	cmp	r0, #0
   b729c:	d099      	beq.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b729e:	68aa      	ldr	r2, [r5, #8]
   b72a0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b72a4:	454e      	cmp	r6, r9
   b72a6:	f043 0301 	orr.w	r3, r3, #1
   b72aa:	bf0c      	ite	eq
   b72ac:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b72b0:	46b3      	movne	fp, r6
   b72b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b72b6:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b72ba:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b72be:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b72c2:	f107 000d 	add.w	r0, r7, #13
   b72c6:	f7ff fdbd 	bl	b6e44 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b72ca:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b72ce:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b72d0:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b72d4:	f00b 031f 	and.w	r3, fp, #31
   b72d8:	220d      	movs	r2, #13
   b72da:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b72dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b72e0:	4353      	muls	r3, r2
   b72e2:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b72e4:	9905      	ldr	r1, [sp, #20]
   b72e6:	4299      	cmp	r1, r3
   b72e8:	f240 80d0 	bls.w	b748c <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b72ec:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b72f0:	2a04      	cmp	r2, #4
   b72f2:	fa5f fe82 	uxtb.w	lr, r2
   b72f6:	f102 0001 	add.w	r0, r2, #1
   b72fa:	f200 80cd 	bhi.w	b7498 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b72fe:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7302:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b7306:	280d      	cmp	r0, #13
   b7308:	f103 0301 	add.w	r3, r3, #1
   b730c:	4602      	mov	r2, r0
   b730e:	d1e9      	bne.n	b72e4 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7310:	3e01      	subs	r6, #1
   b7312:	b2f6      	uxtb	r6, r6
   b7314:	e7b9      	b.n	b728a <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b7316:	f04f 0901 	mov.w	r9, #1
   b731a:	e783      	b.n	b7224 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b731c:	7802      	ldrb	r2, [r0, #0]
   b731e:	2ae5      	cmp	r2, #229	; 0xe5
   b7320:	d000      	beq.n	b7324 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7322:	b97a      	cbnz	r2, b7344 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7324:	9904      	ldr	r1, [sp, #16]
   b7326:	2c00      	cmp	r4, #0
   b7328:	bf08      	it	eq
   b732a:	4641      	moveq	r1, r8
   b732c:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b732e:	9903      	ldr	r1, [sp, #12]
   b7330:	428c      	cmp	r4, r1
        freeFound++;
   b7332:	bf3c      	itt	cc
   b7334:	3401      	addcc	r4, #1
   b7336:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7338:	2a00      	cmp	r2, #0
   b733a:	d080      	beq.n	b723e <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b733c:	2ae5      	cmp	r2, #229	; 0xe5
   b733e:	d105      	bne.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7340:	2600      	movs	r6, #0
   b7342:	e76f      	b.n	b7224 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7344:	9903      	ldr	r1, [sp, #12]
   b7346:	428c      	cmp	r4, r1
   b7348:	bf38      	it	cc
   b734a:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b734c:	2a2e      	cmp	r2, #46	; 0x2e
   b734e:	d0f7      	beq.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7350:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7352:	290f      	cmp	r1, #15
   b7354:	d14a      	bne.n	b73ec <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b7356:	bb16      	cbnz	r6, b739e <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b7358:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b735c:	f43f af62 	beq.w	b7224 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7360:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7364:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b7368:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b736a:	220d      	movs	r2, #13
   b736c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7370:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7374:	9a05      	ldr	r2, [sp, #20]
   b7376:	4542      	cmp	r2, r8
   b7378:	d9e2      	bls.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b737a:	eba2 0208 	sub.w	r2, r2, r8
   b737e:	9208      	str	r2, [sp, #32]
   b7380:	2200      	movs	r2, #0
   b7382:	eb02 0108 	add.w	r1, r2, r8
   b7386:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b7388:	4618      	mov	r0, r3
   b738a:	b2d1      	uxtb	r1, r2
   b738c:	f7ff fd46 	bl	b6e1c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7390:	9908      	ldr	r1, [sp, #32]
   b7392:	428a      	cmp	r2, r1
   b7394:	d10d      	bne.n	b73b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b7396:	2800      	cmp	r0, #0
   b7398:	bf18      	it	ne
   b739a:	2600      	movne	r6, #0
   b739c:	e742      	b.n	b7224 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b739e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b73a2:	fa5f fa8a 	uxtb.w	sl, sl
   b73a6:	4552      	cmp	r2, sl
   b73a8:	d1ca      	bne.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b73aa:	7b5a      	ldrb	r2, [r3, #13]
   b73ac:	455a      	cmp	r2, fp
   b73ae:	d0dc      	beq.n	b736a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b73b0:	e7c6      	b.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73b2:	28ff      	cmp	r0, #255	; 0xff
   b73b4:	d8c4      	bhi.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b73b6:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73ba:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b73be:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73c0:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73c2:	bf9c      	itt	ls
   b73c4:	f10e 0020 	addls.w	r0, lr, #32
   b73c8:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73cc:	4608      	mov	r0, r1
   b73ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   b73d0:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73d2:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b73d6:	f1bc 0f19 	cmp.w	ip, #25
   b73da:	bf9c      	itt	ls
   b73dc:	3120      	addls	r1, #32
   b73de:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73e0:	4571      	cmp	r1, lr
   b73e2:	d1ad      	bne.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b73e4:	3201      	adds	r2, #1
   b73e6:	2a0d      	cmp	r2, #13
   b73e8:	d1cb      	bne.n	b7382 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b73ea:	e71b      	b.n	b7224 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b73ec:	0708      	lsls	r0, r1, #28
   b73ee:	d4a7      	bmi.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b73f0:	b15e      	cbz	r6, b740a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b73f2:	f1ba 0f01 	cmp.w	sl, #1
   b73f6:	f47f aeec 	bne.w	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b73fa:	4618      	mov	r0, r3
   b73fc:	f7ff fd22 	bl	b6e44 <_ZN7FatFile11lfnChecksumEPh>
   b7400:	4558      	cmp	r0, fp
   b7402:	f47f aee6 	bne.w	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7406:	46b1      	mov	r9, r6
   b7408:	e00e      	b.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b740a:	ee18 1a10 	vmov	r1, s16
   b740e:	220b      	movs	r2, #11
   b7410:	4618      	mov	r0, r3
   b7412:	f006 feea 	bl	be1ea <memcmp>
   b7416:	2800      	cmp	r0, #0
   b7418:	f47f af04 	bne.w	b7224 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b741c:	f897 9000 	ldrb.w	r9, [r7]
   b7420:	f019 0901 	ands.w	r9, r9, #1
   b7424:	f47f af77 	bne.w	b7316 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7428:	9b06      	ldr	r3, [sp, #24]
   b742a:	0519      	lsls	r1, r3, #20
   b742c:	f53f aed1 	bmi.w	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7430:	9b06      	ldr	r3, [sp, #24]
   b7432:	9807      	ldr	r0, [sp, #28]
   b7434:	f8cd 9000 	str.w	r9, [sp]
   b7438:	4642      	mov	r2, r8
   b743a:	4629      	mov	r1, r5
   b743c:	f7ff fb24 	bl	b6a88 <_ZN7FatFile15openCachedEntryEPS_tih>
   b7440:	e6c8      	b.n	b71d4 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7442:	2100      	movs	r1, #0
   b7444:	4628      	mov	r0, r5
   b7446:	f7ff fabd 	bl	b69c4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b744a:	b9a0      	cbnz	r0, b7476 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b744c:	786b      	ldrb	r3, [r5, #1]
   b744e:	2b00      	cmp	r3, #0
   b7450:	f47f aebf 	bne.w	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7454:	4628      	mov	r0, r5
   b7456:	f7ff f9a1 	bl	b679c <_ZN7FatFile13addDirClusterEv>
   b745a:	2800      	cmp	r0, #0
   b745c:	f43f aeb9 	beq.w	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7460:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7462:	791b      	ldrb	r3, [r3, #4]
   b7464:	2b01      	cmp	r3, #1
   b7466:	f63f aefb 	bhi.w	b7260 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b746a:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b746c:	3410      	adds	r4, #16
   b746e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7470:	42a3      	cmp	r3, r4
   b7472:	d8ef      	bhi.n	b7454 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7474:	e6f4      	b.n	b7260 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b7476:	3401      	adds	r4, #1
   b7478:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b747a:	e6ed      	b.n	b7258 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b747c:	4639      	mov	r1, r7
   b747e:	4628      	mov	r0, r5
   b7480:	f7ff fe46 	bl	b7110 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7484:	2800      	cmp	r0, #0
   b7486:	f47f aeef 	bne.w	b7268 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b748a:	e6a2      	b.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b748c:	bf14      	ite	ne
   b748e:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7492:	2100      	moveq	r1, #0
   b7494:	b289      	uxth	r1, r1
   b7496:	e72b      	b.n	b72f0 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7498:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b749c:	bf94      	ite	ls
   b749e:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b74a2:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b74a6:	8091      	strh	r1, [r2, #4]
   b74a8:	e72d      	b.n	b7306 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b74aa:	4631      	mov	r1, r6
   b74ac:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b74ae:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b74b2:	f7ff fa87 	bl	b69c4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b74b6:	4604      	mov	r4, r0
   b74b8:	2800      	cmp	r0, #0
   b74ba:	f43f ae8a 	beq.w	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b74be:	2220      	movs	r2, #32
   b74c0:	4631      	mov	r1, r6
   b74c2:	f006 feca 	bl	be25a <memset>
  memcpy(dir->name, fname->sfn, 11);
   b74c6:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b74ca:	6023      	str	r3, [r4, #0]
   b74cc:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b74d0:	6063      	str	r3, [r4, #4]
   b74d2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b74d6:	8123      	strh	r3, [r4, #8]
   b74d8:	7dfb      	ldrb	r3, [r7, #23]
   b74da:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b74dc:	783b      	ldrb	r3, [r7, #0]
   b74de:	f003 0318 	and.w	r3, r3, #24
   b74e2:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b74e4:	4b0f      	ldr	r3, [pc, #60]	; (b7524 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b74e6:	681b      	ldr	r3, [r3, #0]
   b74e8:	b19b      	cbz	r3, b7512 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b74ea:	f104 010e 	add.w	r1, r4, #14
   b74ee:	f104 0010 	add.w	r0, r4, #16
   b74f2:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b74f4:	8a23      	ldrh	r3, [r4, #16]
   b74f6:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b74f8:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b74fa:	89e3      	ldrh	r3, [r4, #14]
   b74fc:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b74fe:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7500:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7504:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7508:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b750c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7510:	e78e      	b.n	b7430 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7512:	2321      	movs	r3, #33	; 0x21
   b7514:	7423      	strb	r3, [r4, #16]
   b7516:	2328      	movs	r3, #40	; 0x28
   b7518:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b751a:	2308      	movs	r3, #8
   b751c:	73a6      	strb	r6, [r4, #14]
   b751e:	73e3      	strb	r3, [r4, #15]
   b7520:	e7e8      	b.n	b74f4 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7522:	bf00      	nop
   b7524:	2003e638 	.word	0x2003e638

000b7528 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7528:	b513      	push	{r0, r1, r4, lr}
   b752a:	4604      	mov	r4, r0
    }
   b752c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b752e:	b159      	cbz	r1, b7548 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7530:	9101      	str	r1, [sp, #4]
   b7532:	f006 ff46 	bl	be3c2 <strlen>
   b7536:	6823      	ldr	r3, [r4, #0]
   b7538:	9901      	ldr	r1, [sp, #4]
   b753a:	68db      	ldr	r3, [r3, #12]
   b753c:	4602      	mov	r2, r0
   b753e:	4620      	mov	r0, r4
    }
   b7540:	b002      	add	sp, #8
   b7542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7546:	4718      	bx	r3
    }
   b7548:	b002      	add	sp, #8
   b754a:	bd10      	pop	{r4, pc}

000b754c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b754c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b754e:	7803      	ldrb	r3, [r0, #0]
   b7550:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7552:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7554:	d520      	bpl.n	b7598 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7556:	6843      	ldr	r3, [r0, #4]
   b7558:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b755a:	f100 020c 	add.w	r2, r0, #12
   b755e:	6818      	ldr	r0, [r3, #0]
   b7560:	9201      	str	r2, [sp, #4]
   b7562:	f000 fb88 	bl	b7c76 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7566:	9a01      	ldr	r2, [sp, #4]
   b7568:	4605      	mov	r5, r0
   b756a:	b918      	cbnz	r0, b7574 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b756c:	2500      	movs	r5, #0
}
   b756e:	4628      	mov	r0, r5
   b7570:	b003      	add	sp, #12
   b7572:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7574:	7823      	ldrb	r3, [r4, #0]
   b7576:	079b      	lsls	r3, r3, #30
   b7578:	d404      	bmi.n	b7584 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b757a:	7823      	ldrb	r3, [r4, #0]
   b757c:	f023 0301 	bic.w	r3, r3, #1
   b7580:	7023      	strb	r3, [r4, #0]
   b7582:	e7f4      	b.n	b756e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7584:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7588:	6919      	ldr	r1, [r3, #16]
   b758a:	4401      	add	r1, r0
   b758c:	6818      	ldr	r0, [r3, #0]
   b758e:	f000 fb72 	bl	b7c76 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7592:	2800      	cmp	r0, #0
   b7594:	d1f1      	bne.n	b757a <_ZN8FatCache4syncEv+0x2e>
   b7596:	e7e9      	b.n	b756c <_ZN8FatCache4syncEv+0x20>
  return true;
   b7598:	2501      	movs	r5, #1
   b759a:	e7e8      	b.n	b756e <_ZN8FatCache4syncEv+0x22>

000b759c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b759c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b759e:	6883      	ldr	r3, [r0, #8]
   b75a0:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b75a2:	4604      	mov	r4, r0
   b75a4:	460e      	mov	r6, r1
   b75a6:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b75a8:	d009      	beq.n	b75be <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b75aa:	f7ff ffcf 	bl	b754c <_ZN8FatCache4syncEv>
   b75ae:	b908      	cbnz	r0, b75b4 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b75b0:	2000      	movs	r0, #0
}
   b75b2:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b75b4:	076b      	lsls	r3, r5, #29
   b75b6:	d50a      	bpl.n	b75ce <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b75b8:	2300      	movs	r3, #0
   b75ba:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b75bc:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b75be:	7822      	ldrb	r2, [r4, #0]
   b75c0:	f005 0503 	and.w	r5, r5, #3
   b75c4:	4620      	mov	r0, r4
   b75c6:	4315      	orrs	r5, r2
   b75c8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b75cc:	e7f1      	b.n	b75b2 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b75ce:	6863      	ldr	r3, [r4, #4]
   b75d0:	f104 020c 	add.w	r2, r4, #12
   b75d4:	6818      	ldr	r0, [r3, #0]
   b75d6:	4631      	mov	r1, r6
   b75d8:	f000 fac4 	bl	b7b64 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b75dc:	2800      	cmp	r0, #0
   b75de:	d1eb      	bne.n	b75b8 <_ZN8FatCache4readEmh+0x1c>
   b75e0:	e7e6      	b.n	b75b0 <_ZN8FatCache4readEmh+0x14>

000b75e2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b75e2:	7983      	ldrb	r3, [r0, #6]
   b75e4:	6940      	ldr	r0, [r0, #20]
   b75e6:	3902      	subs	r1, #2
   b75e8:	4099      	lsls	r1, r3
}
   b75ea:	4408      	add	r0, r1
   b75ec:	4770      	bx	lr

000b75ee <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b75ee:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b75f0:	b570      	push	{r4, r5, r6, lr}
   b75f2:	4605      	mov	r5, r0
   b75f4:	460c      	mov	r4, r1
   b75f6:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b75f8:	d802      	bhi.n	b7600 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b75fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b75fe:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7600:	69c3      	ldr	r3, [r0, #28]
   b7602:	428b      	cmp	r3, r1
   b7604:	d3f9      	bcc.n	b75fa <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7606:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7608:	2b20      	cmp	r3, #32
   b760a:	d116      	bne.n	b763a <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b760c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b760e:	2202      	movs	r2, #2
   b7610:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7614:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7618:	f7ff ffc0 	bl	b759c <_ZN8FatCache4readEmh>
    if (!pc) {
   b761c:	2800      	cmp	r0, #0
   b761e:	d0ec      	beq.n	b75fa <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7620:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7624:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7628:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b762c:	69ea      	ldr	r2, [r5, #28]
   b762e:	429a      	cmp	r2, r3
  *value = next;
   b7630:	bf26      	itte	cs
   b7632:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7634:	2001      	movcs	r0, #1
    return 0;
   b7636:	2000      	movcc	r0, #0
   b7638:	e7e1      	b.n	b75fe <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b763a:	2b10      	cmp	r3, #16
   b763c:	d1dd      	bne.n	b75fa <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b763e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7642:	6981      	ldr	r1, [r0, #24]
   b7644:	2202      	movs	r2, #2
   b7646:	4419      	add	r1, r3
   b7648:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b764c:	f7ff ffa6 	bl	b759c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7650:	2800      	cmp	r0, #0
   b7652:	d0d2      	beq.n	b75fa <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7654:	b2e4      	uxtb	r4, r4
   b7656:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b765a:	e7e7      	b.n	b762c <_ZN9FatVolume6fatGetEmPm+0x3e>

000b765c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b765c:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b765e:	b538      	push	{r3, r4, r5, lr}
   b7660:	460c      	mov	r4, r1
   b7662:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7664:	d801      	bhi.n	b766a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7666:	2000      	movs	r0, #0
}
   b7668:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b766a:	69c3      	ldr	r3, [r0, #28]
   b766c:	428b      	cmp	r3, r1
   b766e:	d3fa      	bcc.n	b7666 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7670:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7672:	2b20      	cmp	r3, #32
   b7674:	d10f      	bne.n	b7696 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7676:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7678:	2203      	movs	r2, #3
   b767a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b767e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7682:	f7ff ff8b 	bl	b759c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7686:	2800      	cmp	r0, #0
   b7688:	d0ed      	beq.n	b7666 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b768a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b768e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7692:	2001      	movs	r0, #1
   b7694:	e7e8      	b.n	b7668 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7696:	2b10      	cmp	r3, #16
   b7698:	d1e5      	bne.n	b7666 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b769a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b769e:	6981      	ldr	r1, [r0, #24]
   b76a0:	2203      	movs	r2, #3
   b76a2:	4419      	add	r1, r3
   b76a4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b76a8:	f7ff ff78 	bl	b759c <_ZN8FatCache4readEmh>
    if (!pc) {
   b76ac:	2800      	cmp	r0, #0
   b76ae:	d0da      	beq.n	b7666 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b76b0:	b2e4      	uxtb	r4, r4
   b76b2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b76b6:	e7ec      	b.n	b7692 <_ZN9FatVolume6fatPutEmm+0x36>

000b76b8 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b76b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b76bc:	68c4      	ldr	r4, [r0, #12]
   b76be:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b76c0:	4605      	mov	r5, r0
   b76c2:	460e      	mov	r6, r1
   b76c4:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b76c6:	d301      	bcc.n	b76cc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b76c8:	2701      	movs	r7, #1
   b76ca:	e001      	b.n	b76d0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b76cc:	460c      	mov	r4, r1
    setStart = false;
   b76ce:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b76d0:	69eb      	ldr	r3, [r5, #28]
    find++;
   b76d2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b76d4:	42a3      	cmp	r3, r4
   b76d6:	d202      	bcs.n	b76de <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b76d8:	b9c7      	cbnz	r7, b770c <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b76da:	68ec      	ldr	r4, [r5, #12]
   b76dc:	e7f4      	b.n	b76c8 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b76de:	42a6      	cmp	r6, r4
   b76e0:	d014      	beq.n	b770c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b76e2:	aa01      	add	r2, sp, #4
   b76e4:	4621      	mov	r1, r4
   b76e6:	4628      	mov	r0, r5
   b76e8:	f7ff ff81 	bl	b75ee <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b76ec:	2800      	cmp	r0, #0
   b76ee:	db0d      	blt.n	b770c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b76f0:	d0ee      	beq.n	b76d0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b76f2:	9b01      	ldr	r3, [sp, #4]
   b76f4:	2b00      	cmp	r3, #0
   b76f6:	d1eb      	bne.n	b76d0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b76f8:	b107      	cbz	r7, b76fc <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b76fa:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b76fc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7700:	4621      	mov	r1, r4
   b7702:	4628      	mov	r0, r5
   b7704:	f7ff ffaa 	bl	b765c <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7708:	4607      	mov	r7, r0
   b770a:	b920      	cbnz	r0, b7716 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b770c:	2700      	movs	r7, #0
}
   b770e:	4638      	mov	r0, r7
   b7710:	b002      	add	sp, #8
   b7712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7716:	b916      	cbnz	r6, b771e <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7718:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b771c:	e7f7      	b.n	b770e <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b771e:	4622      	mov	r2, r4
   b7720:	4631      	mov	r1, r6
   b7722:	4628      	mov	r0, r5
   b7724:	f7ff ff9a 	bl	b765c <_ZN9FatVolume6fatPutEmm>
   b7728:	2800      	cmp	r0, #0
   b772a:	d1f5      	bne.n	b7718 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b772c:	e7ee      	b.n	b770c <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b772e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b772e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7730:	4605      	mov	r5, r0
   b7732:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7734:	aa01      	add	r2, sp, #4
   b7736:	4621      	mov	r1, r4
   b7738:	4628      	mov	r0, r5
   b773a:	f7ff ff58 	bl	b75ee <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b773e:	1e06      	subs	r6, r0, #0
   b7740:	db10      	blt.n	b7764 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7742:	2200      	movs	r2, #0
   b7744:	4621      	mov	r1, r4
   b7746:	4628      	mov	r0, r5
   b7748:	f7ff ff88 	bl	b765c <_ZN9FatVolume6fatPutEmm>
   b774c:	b150      	cbz	r0, b7764 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b774e:	68eb      	ldr	r3, [r5, #12]
   b7750:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7752:	bf24      	itt	cs
   b7754:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7758:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b775a:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b775c:	2e00      	cmp	r6, #0
   b775e:	d1e9      	bne.n	b7734 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7760:	b002      	add	sp, #8
   b7762:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7764:	2000      	movs	r0, #0
   b7766:	e7fb      	b.n	b7760 <_ZN9FatVolume9freeChainEm+0x32>

000b7768 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7768:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b776a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b776c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b776e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7774:	4604      	mov	r4, r0
  m_fatType = 0;
   b7776:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7778:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b777c:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b777e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7782:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7784:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7788:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b778c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7790:	460d      	mov	r5, r1
   b7792:	b1b9      	cbz	r1, b77c4 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7794:	2904      	cmp	r1, #4
   b7796:	d901      	bls.n	b779c <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7798:	2000      	movs	r0, #0
}
   b779a:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b779c:	4611      	mov	r1, r2
   b779e:	4630      	mov	r0, r6
   b77a0:	f7ff fefc 	bl	b759c <_ZN8FatCache4readEmh>
    if (!pc) {
   b77a4:	2800      	cmp	r0, #0
   b77a6:	d0f7      	beq.n	b7798 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b77a8:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b77ac:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b77b0:	065b      	lsls	r3, r3, #25
   b77b2:	d1f1      	bne.n	b7798 <_ZN9FatVolume4initEh+0x30>
   b77b4:	f105 011b 	add.w	r1, r5, #27
   b77b8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b77bc:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b77c0:	2d00      	cmp	r5, #0
   b77c2:	d0e9      	beq.n	b7798 <_ZN9FatVolume4initEh+0x30>
   b77c4:	2200      	movs	r2, #0
   b77c6:	4629      	mov	r1, r5
   b77c8:	4630      	mov	r0, r6
   b77ca:	f7ff fee7 	bl	b759c <_ZN8FatCache4readEmh>
  if (!pc) {
   b77ce:	2800      	cmp	r0, #0
   b77d0:	d0e2      	beq.n	b7798 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b77d2:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b77d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b77da:	d1dd      	bne.n	b7798 <_ZN9FatVolume4initEh+0x30>
   b77dc:	7c03      	ldrb	r3, [r0, #16]
   b77de:	2b02      	cmp	r3, #2
   b77e0:	d1da      	bne.n	b7798 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b77e2:	89c3      	ldrh	r3, [r0, #14]
   b77e4:	2b00      	cmp	r3, #0
   b77e6:	d0d7      	beq.n	b7798 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b77e8:	7b41      	ldrb	r1, [r0, #13]
   b77ea:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b77ec:	1e4b      	subs	r3, r1, #1
   b77ee:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b77f0:	2300      	movs	r3, #0
   b77f2:	71a3      	strb	r3, [r4, #6]
   b77f4:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b77f6:	2301      	movs	r3, #1
   b77f8:	4299      	cmp	r1, r3
   b77fa:	d007      	beq.n	b780c <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b77fc:	3e01      	subs	r6, #1
   b77fe:	d0cb      	beq.n	b7798 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7800:	79a2      	ldrb	r2, [r4, #6]
   b7802:	005b      	lsls	r3, r3, #1
   b7804:	3201      	adds	r2, #1
   b7806:	b2db      	uxtb	r3, r3
   b7808:	71a2      	strb	r2, [r4, #6]
   b780a:	e7f5      	b.n	b77f8 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b780c:	8ac1      	ldrh	r1, [r0, #22]
   b780e:	b901      	cbnz	r1, b7812 <_ZN9FatVolume4initEh+0xaa>
   b7810:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7812:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7814:	89c3      	ldrh	r3, [r0, #14]
   b7816:	442b      	add	r3, r5
   b7818:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b781a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b781e:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7820:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7824:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7826:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b782a:	0149      	lsls	r1, r1, #5
   b782c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7830:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7834:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7836:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b783a:	b902      	cbnz	r2, b783e <_ZN9FatVolume4initEh+0xd6>
   b783c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b783e:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7840:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7842:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7844:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7846:	1c4b      	adds	r3, r1, #1
   b7848:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b784a:	f640 73f4 	movw	r3, #4084	; 0xff4
   b784e:	4299      	cmp	r1, r3
   b7850:	d802      	bhi.n	b7858 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7852:	230c      	movs	r3, #12
   b7854:	71e3      	strb	r3, [r4, #7]
   b7856:	e79f      	b.n	b7798 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7858:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b785c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b785e:	bf85      	ittet	hi
   b7860:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7862:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7864:	2310      	movls	r3, #16
    m_fatType = 32;
   b7866:	2320      	movhi	r3, #32
   b7868:	71e3      	strb	r3, [r4, #7]
  return true;
   b786a:	2001      	movs	r0, #1
   b786c:	e795      	b.n	b779a <_ZN9FatVolume4initEh+0x32>

000b786e <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b786e:	f000 bacb 	b.w	b7e08 <_ZN14SdSpiAltDriver4sendEh>

000b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7872:	f000 baae 	b.w	b7dd2 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7878 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7878:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b787a:	4e0e      	ldr	r6, [pc, #56]	; (b78b4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b787c:	460d      	mov	r5, r1
   b787e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7880:	f001 fcf0 	bl	b9264 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7884:	6833      	ldr	r3, [r6, #0]
   b7886:	1ac0      	subs	r0, r0, r3
   b7888:	4b0b      	ldr	r3, [pc, #44]	; (b78b8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b788a:	4298      	cmp	r0, r3
   b788c:	d908      	bls.n	b78a0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b788e:	f001 fcf1 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7892:	4b0a      	ldr	r3, [pc, #40]	; (b78bc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7894:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7896:	f001 fed9 	bl	b964c <spark_process>
   b789a:	f001 fce3 	bl	b9264 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b789e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b78a0:	f001 fce8 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b78a4:	b280      	uxth	r0, r0
   b78a6:	1b40      	subs	r0, r0, r5
}
   b78a8:	42a0      	cmp	r0, r4
   b78aa:	bfd4      	ite	le
   b78ac:	2000      	movle	r0, #0
   b78ae:	2001      	movgt	r0, #1
   b78b0:	bd70      	pop	{r4, r5, r6, pc}
   b78b2:	bf00      	nop
   b78b4:	2003e640 	.word	0x2003e640
   b78b8:	000186a0 	.word	0x000186a0
   b78bc:	2003e728 	.word	0x2003e728

000b78c0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b78c0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b78c2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b78c4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b78c6:	b94d      	cbnz	r5, b78dc <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b78c8:	6840      	ldr	r0, [r0, #4]
   b78ca:	f000 fa6b 	bl	b7da4 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b78ce:	6863      	ldr	r3, [r4, #4]
   b78d0:	4629      	mov	r1, r5
   b78d2:	7d18      	ldrb	r0, [r3, #20]
   b78d4:	f005 fd0d 	bl	bd2f2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b78d8:	2301      	movs	r3, #1
   b78da:	7223      	strb	r3, [r4, #8]
  }
}
   b78dc:	bd38      	pop	{r3, r4, r5, pc}

000b78de <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b78de:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b78e0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b78e2:	4604      	mov	r4, r0
  if (m_spiActive) {
   b78e4:	b16b      	cbz	r3, b7902 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b78e6:	6843      	ldr	r3, [r0, #4]
   b78e8:	2101      	movs	r1, #1
   b78ea:	7d18      	ldrb	r0, [r3, #20]
   b78ec:	f005 fd01 	bl	bd2f2 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b78f0:	6860      	ldr	r0, [r4, #4]
   b78f2:	21ff      	movs	r1, #255	; 0xff
   b78f4:	f7ff ffbb 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b78f8:	6860      	ldr	r0, [r4, #4]
   b78fa:	f000 fa67 	bl	b7dcc <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b78fe:	2300      	movs	r3, #0
   b7900:	7223      	strb	r3, [r4, #8]
  }
}
   b7902:	bd10      	pop	{r4, pc}

000b7904 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7906:	4604      	mov	r4, r0
   b7908:	460d      	mov	r5, r1
   b790a:	4616      	mov	r6, r2
   b790c:	f001 fcb2 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7910:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7912:	6860      	ldr	r0, [r4, #4]
   b7914:	f7ff ffad 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7918:	28ff      	cmp	r0, #255	; 0xff
   b791a:	7260      	strb	r0, [r4, #9]
   b791c:	d10e      	bne.n	b793c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b791e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7922:	4639      	mov	r1, r7
   b7924:	4620      	mov	r0, r4
   b7926:	f7ff ffa7 	bl	b7878 <_ZN9SdSpiCard10isTimedOutEtt>
   b792a:	2800      	cmp	r0, #0
   b792c:	d0f1      	beq.n	b7912 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b792e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7930:	4620      	mov	r0, r4
   b7932:	7023      	strb	r3, [r4, #0]
   b7934:	f7ff ffd3 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7938:	2000      	movs	r0, #0
}
   b793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b793c:	28fe      	cmp	r0, #254	; 0xfe
   b793e:	d001      	beq.n	b7944 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7940:	2350      	movs	r3, #80	; 0x50
   b7942:	e7f5      	b.n	b7930 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7944:	6860      	ldr	r0, [r4, #4]
   b7946:	4632      	mov	r2, r6
   b7948:	4629      	mov	r1, r5
   b794a:	f000 fa47 	bl	b7ddc <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b794e:	7260      	strb	r0, [r4, #9]
   b7950:	b108      	cbz	r0, b7956 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7952:	2360      	movs	r3, #96	; 0x60
   b7954:	e7ec      	b.n	b7930 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7956:	6860      	ldr	r0, [r4, #4]
   b7958:	f7ff ff8b 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b795c:	6860      	ldr	r0, [r4, #4]
   b795e:	f7ff ff88 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7962:	2001      	movs	r0, #1
   b7964:	e7e9      	b.n	b793a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7966 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7966:	b570      	push	{r4, r5, r6, lr}
   b7968:	4604      	mov	r4, r0
   b796a:	460e      	mov	r6, r1
   b796c:	f001 fc82 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
   b7970:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7972:	4632      	mov	r2, r6
   b7974:	4629      	mov	r1, r5
   b7976:	4620      	mov	r0, r4
   b7978:	f7ff ff7e 	bl	b7878 <_ZN9SdSpiCard10isTimedOutEtt>
   b797c:	b930      	cbnz	r0, b798c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b797e:	6860      	ldr	r0, [r4, #4]
   b7980:	f7ff ff77 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7984:	28ff      	cmp	r0, #255	; 0xff
   b7986:	d1f4      	bne.n	b7972 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7988:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b798a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b798c:	2000      	movs	r0, #0
   b798e:	e7fc      	b.n	b798a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7990 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7992:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7994:	9201      	str	r2, [sp, #4]
   b7996:	4604      	mov	r4, r0
   b7998:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b799a:	b90b      	cbnz	r3, b79a0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b799c:	f7ff ff90 	bl	b78c0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b79a0:	b125      	cbz	r5, b79ac <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b79a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b79a6:	4620      	mov	r0, r4
   b79a8:	f7ff ffdd 	bl	b7966 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b79ac:	6860      	ldr	r0, [r4, #4]
   b79ae:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b79b2:	f7ff ff5c 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b79b6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b79b8:	af01      	add	r7, sp, #4
   b79ba:	5db9      	ldrb	r1, [r7, r6]
   b79bc:	6860      	ldr	r0, [r4, #4]
   b79be:	f7ff ff56 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b79c2:	3e01      	subs	r6, #1
   b79c4:	d2f9      	bcs.n	b79ba <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b79c6:	2d00      	cmp	r5, #0
   b79c8:	6860      	ldr	r0, [r4, #4]
   b79ca:	bf0c      	ite	eq
   b79cc:	2195      	moveq	r1, #149	; 0x95
   b79ce:	2187      	movne	r1, #135	; 0x87
   b79d0:	f7ff ff4d 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b79d4:	6860      	ldr	r0, [r4, #4]
   b79d6:	f7ff ff4c 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79da:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b79dc:	6860      	ldr	r0, [r4, #4]
   b79de:	f7ff ff48 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79e2:	0603      	lsls	r3, r0, #24
   b79e4:	7260      	strb	r0, [r4, #9]
   b79e6:	d503      	bpl.n	b79f0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b79e8:	3d01      	subs	r5, #1
   b79ea:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b79ee:	d1f5      	bne.n	b79dc <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b79f0:	b003      	add	sp, #12
   b79f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79f4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b79f4:	b570      	push	{r4, r5, r6, lr}
   b79f6:	4604      	mov	r4, r0
   b79f8:	460d      	mov	r5, r1
   b79fa:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b79fc:	2137      	movs	r1, #55	; 0x37
   b79fe:	2200      	movs	r2, #0
   b7a00:	f7ff ffc6 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7a04:	4632      	mov	r2, r6
   b7a06:	4629      	mov	r1, r5
   b7a08:	4620      	mov	r0, r4
  }
   b7a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7a0e:	f7ff bfbf 	b.w	b7990 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7a14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7a18:	2500      	movs	r5, #0
   b7a1a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7a1c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7a1e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7a20:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7a22:	4604      	mov	r4, r0
   b7a24:	4690      	mov	r8, r2
   b7a26:	461e      	mov	r6, r3
   b7a28:	f001 fc24 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7a2c:	4641      	mov	r1, r8
   b7a2e:	4607      	mov	r7, r0
   b7a30:	6860      	ldr	r0, [r4, #4]
   b7a32:	f000 f9bb 	bl	b7dac <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7a36:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7a38:	4a49      	ldr	r2, [pc, #292]	; (b7b60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7a3a:	721d      	strb	r5, [r3, #8]
   b7a3c:	2501      	movs	r5, #1
   b7a3e:	60da      	str	r2, [r3, #12]
   b7a40:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7a42:	4620      	mov	r0, r4
   b7a44:	f7ff ff3c 	bl	b78c0 <_ZN9SdSpiCard8spiStartEv>
   b7a48:	6863      	ldr	r3, [r4, #4]
   b7a4a:	4629      	mov	r1, r5
   b7a4c:	7d18      	ldrb	r0, [r3, #20]
   b7a4e:	f005 fc50 	bl	bd2f2 <digitalWrite>
   b7a52:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7a54:	6860      	ldr	r0, [r4, #4]
   b7a56:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7a58:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7a5a:	f7ff ff08 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7a5e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7a62:	d1f7      	bne.n	b7a54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7a64:	6863      	ldr	r3, [r4, #4]
   b7a66:	4629      	mov	r1, r5
   b7a68:	7d18      	ldrb	r0, [r3, #20]
   b7a6a:	f005 fc42 	bl	bd2f2 <digitalWrite>
  }
   b7a6e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7a70:	2200      	movs	r2, #0
   b7a72:	4611      	mov	r1, r2
   b7a74:	4620      	mov	r0, r4
   b7a76:	f7ff ff8b 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7a7a:	2801      	cmp	r0, #1
   b7a7c:	4680      	mov	r8, r0
   b7a7e:	d018      	beq.n	b7ab2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7a80:	3d01      	subs	r5, #1
   b7a82:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7a86:	d107      	bne.n	b7a98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7a88:	2320      	movs	r3, #32
  spiStop();
   b7a8a:	4620      	mov	r0, r4
   b7a8c:	7023      	strb	r3, [r4, #0]
   b7a8e:	f7ff ff26 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a92:	2000      	movs	r0, #0
}
   b7a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7a98:	6860      	ldr	r0, [r4, #4]
   b7a9a:	21fd      	movs	r1, #253	; 0xfd
   b7a9c:	f7ff fee7 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7aa0:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7aa4:	6860      	ldr	r0, [r4, #4]
   b7aa6:	f7ff fee4 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7aaa:	f1b8 0801 	subs.w	r8, r8, #1
   b7aae:	d1f9      	bne.n	b7aa4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7ab0:	e7de      	b.n	b7a70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7ab2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7ab6:	2108      	movs	r1, #8
   b7ab8:	4620      	mov	r0, r4
   b7aba:	f7ff ff69 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7abe:	2805      	cmp	r0, #5
   b7ac0:	d114      	bne.n	b7aec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7ac2:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7ac6:	2500      	movs	r5, #0
   b7ac8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7aca:	462a      	mov	r2, r5
   b7acc:	2129      	movs	r1, #41	; 0x29
   b7ace:	4620      	mov	r0, r4
   b7ad0:	f7ff ff90 	bl	b79f4 <_ZN9SdSpiCard8cardAcmdEhm>
   b7ad4:	4602      	mov	r2, r0
   b7ad6:	b1d8      	cbz	r0, b7b10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7ad8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7adc:	4639      	mov	r1, r7
   b7ade:	4620      	mov	r0, r4
   b7ae0:	f7ff feca 	bl	b7878 <_ZN9SdSpiCard10isTimedOutEtt>
   b7ae4:	2800      	cmp	r0, #0
   b7ae6:	d0f0      	beq.n	b7aca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7ae8:	2343      	movs	r3, #67	; 0x43
   b7aea:	e7ce      	b.n	b7a8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7aec:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7aee:	6860      	ldr	r0, [r4, #4]
   b7af0:	f7ff febf 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7af4:	3d01      	subs	r5, #1
   b7af6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7afa:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7afc:	d1f7      	bne.n	b7aee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7afe:	28aa      	cmp	r0, #170	; 0xaa
   b7b00:	d104      	bne.n	b7b0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7b02:	2302      	movs	r3, #2
   b7b04:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7b06:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7b0a:	e7dd      	b.n	b7ac8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7b0c:	2325      	movs	r3, #37	; 0x25
   b7b0e:	e7bc      	b.n	b7a8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7b10:	7aa3      	ldrb	r3, [r4, #10]
   b7b12:	2b02      	cmp	r3, #2
   b7b14:	d118      	bne.n	b7b48 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7b16:	213a      	movs	r1, #58	; 0x3a
   b7b18:	4620      	mov	r0, r4
   b7b1a:	f7ff ff39 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7b1e:	b108      	cbz	r0, b7b24 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7b20:	2337      	movs	r3, #55	; 0x37
   b7b22:	e7b2      	b.n	b7a8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7b24:	6860      	ldr	r0, [r4, #4]
   b7b26:	f7ff fea4 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b2a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7b2e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7b30:	bf04      	itt	eq
   b7b32:	2303      	moveq	r3, #3
   b7b34:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7b36:	6860      	ldr	r0, [r4, #4]
   b7b38:	f7ff fe9b 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b3c:	6860      	ldr	r0, [r4, #4]
   b7b3e:	f7ff fe98 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b42:	6860      	ldr	r0, [r4, #4]
   b7b44:	f7ff fe95 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7b48:	4620      	mov	r0, r4
   b7b4a:	f7ff fec8 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7b4e:	6863      	ldr	r3, [r4, #4]
   b7b50:	7930      	ldrb	r0, [r6, #4]
   b7b52:	68b1      	ldr	r1, [r6, #8]
   b7b54:	89b2      	ldrh	r2, [r6, #12]
   b7b56:	821a      	strh	r2, [r3, #16]
   b7b58:	7218      	strb	r0, [r3, #8]
   b7b5a:	60d9      	str	r1, [r3, #12]
  return true;
   b7b5c:	2001      	movs	r0, #1
   b7b5e:	e799      	b.n	b7a94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7b60:	0003d090 	.word	0x0003d090

000b7b64 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7b64:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b66:	7a83      	ldrb	r3, [r0, #10]
   b7b68:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7b6a:	bf18      	it	ne
   b7b6c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7b6e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7b70:	460a      	mov	r2, r1
   b7b72:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7b74:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7b76:	f7ff ff0b 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7b7a:	b130      	cbz	r0, b7b8a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7b7c:	2330      	movs	r3, #48	; 0x30
   b7b7e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b80:	4620      	mov	r0, r4
   b7b82:	f7ff feac 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b86:	2500      	movs	r5, #0
   b7b88:	e00b      	b.n	b7ba2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7b8a:	4629      	mov	r1, r5
   b7b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7b90:	4620      	mov	r0, r4
   b7b92:	f7ff feb7 	bl	b7904 <_ZN9SdSpiCard8readDataEPhj>
   b7b96:	4605      	mov	r5, r0
   b7b98:	2800      	cmp	r0, #0
   b7b9a:	d0f1      	beq.n	b7b80 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	f7ff fe9e 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
}
   b7ba2:	4628      	mov	r0, r5
   b7ba4:	bd38      	pop	{r3, r4, r5, pc}

000b7ba6 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7ba6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7ba8:	7a83      	ldrb	r3, [r0, #10]
   b7baa:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7bac:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7bae:	bf18      	it	ne
   b7bb0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7bb2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7bb4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7bb6:	f7ff feeb 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7bba:	b130      	cbz	r0, b7bca <_ZN9SdSpiCard9readStartEm+0x24>
   b7bbc:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7bbe:	4620      	mov	r0, r4
   b7bc0:	7023      	strb	r3, [r4, #0]
   b7bc2:	f7ff fe8c 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bc6:	2000      	movs	r0, #0
}
   b7bc8:	bd10      	pop	{r4, pc}
  return true;
   b7bca:	2001      	movs	r0, #1
   b7bcc:	e7fc      	b.n	b7bc8 <_ZN9SdSpiCard9readStartEm+0x22>

000b7bce <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7bce:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7bd0:	2200      	movs	r2, #0
   b7bd2:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7bd4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7bd6:	f7ff fedb 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7bda:	b130      	cbz	r0, b7bea <_ZN9SdSpiCard8readStopEv+0x1c>
   b7bdc:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7bde:	4620      	mov	r0, r4
   b7be0:	7023      	strb	r3, [r4, #0]
   b7be2:	f7ff fe7c 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7be6:	2000      	movs	r0, #0
}
   b7be8:	bd10      	pop	{r4, pc}
  spiStop();
   b7bea:	4620      	mov	r0, r4
   b7bec:	f7ff fe77 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7bf0:	2001      	movs	r0, #1
   b7bf2:	e7f9      	b.n	b7be8 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7bf4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bf6:	4604      	mov	r4, r0
   b7bf8:	4616      	mov	r6, r2
   b7bfa:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7bfc:	f7ff ffd3 	bl	b7ba6 <_ZN9SdSpiCard9readStartEm>
   b7c00:	b168      	cbz	r0, b7c1e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7c02:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7c04:	b2ab      	uxth	r3, r5
   b7c06:	429f      	cmp	r7, r3
   b7c08:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7c0c:	d909      	bls.n	b7c22 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7c12:	4620      	mov	r0, r4
   b7c14:	f7ff fe76 	bl	b7904 <_ZN9SdSpiCard8readDataEPhj>
   b7c18:	3501      	adds	r5, #1
   b7c1a:	2800      	cmp	r0, #0
   b7c1c:	d1f2      	bne.n	b7c04 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7c1e:	2000      	movs	r0, #0
   b7c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7c22:	4620      	mov	r0, r4
}
   b7c24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7c28:	f7ff bfd1 	b.w	b7bce <_ZN9SdSpiCard8readStopEv>

000b7c2c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7c2c:	b538      	push	{r3, r4, r5, lr}
   b7c2e:	4604      	mov	r4, r0
   b7c30:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7c32:	6840      	ldr	r0, [r0, #4]
   b7c34:	f7ff fe1b 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7c38:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7c3c:	6860      	ldr	r0, [r4, #4]
   b7c3e:	4629      	mov	r1, r5
   b7c40:	f000 f8e6 	bl	b7e10 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7c44:	6860      	ldr	r0, [r4, #4]
   b7c46:	21ff      	movs	r1, #255	; 0xff
   b7c48:	f7ff fe11 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7c4c:	6860      	ldr	r0, [r4, #4]
   b7c4e:	21ff      	movs	r1, #255	; 0xff
   b7c50:	f7ff fe0d 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7c54:	6860      	ldr	r0, [r4, #4]
   b7c56:	f7ff fe0c 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c5a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7c5c:	f000 001f 	and.w	r0, r0, #31
   b7c60:	2805      	cmp	r0, #5
   b7c62:	d006      	beq.n	b7c72 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7c64:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7c66:	4620      	mov	r0, r4
   b7c68:	7023      	strb	r3, [r4, #0]
   b7c6a:	f7ff fe38 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c6e:	2000      	movs	r0, #0
}
   b7c70:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7c72:	2001      	movs	r0, #1
   b7c74:	e7fc      	b.n	b7c70 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7c76 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7c76:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7c78:	7a83      	ldrb	r3, [r0, #10]
   b7c7a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7c7c:	bf18      	it	ne
   b7c7e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7c80:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7c82:	460a      	mov	r2, r1
   b7c84:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7c86:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7c88:	f7ff fe82 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7c8c:	4606      	mov	r6, r0
   b7c8e:	b130      	cbz	r0, b7c9e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7c90:	2332      	movs	r3, #50	; 0x32
   b7c92:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7c94:	4620      	mov	r0, r4
   b7c96:	f7ff fe22 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c9a:	2500      	movs	r5, #0
   b7c9c:	e01f      	b.n	b7cde <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7c9e:	462a      	mov	r2, r5
   b7ca0:	21fe      	movs	r1, #254	; 0xfe
   b7ca2:	4620      	mov	r0, r4
   b7ca4:	f7ff ffc2 	bl	b7c2c <_ZN9SdSpiCard9writeDataEhPKh>
   b7ca8:	2800      	cmp	r0, #0
   b7caa:	d0f3      	beq.n	b7c94 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7cac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7cb0:	4620      	mov	r0, r4
   b7cb2:	f7ff fe58 	bl	b7966 <_ZN9SdSpiCard11waitNotBusyEt>
   b7cb6:	4605      	mov	r5, r0
   b7cb8:	b908      	cbnz	r0, b7cbe <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7cba:	235a      	movs	r3, #90	; 0x5a
   b7cbc:	e7e9      	b.n	b7c92 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7cbe:	4632      	mov	r2, r6
   b7cc0:	210d      	movs	r1, #13
   b7cc2:	4620      	mov	r0, r4
   b7cc4:	f7ff fe64 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7cc8:	b108      	cbz	r0, b7cce <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7cca:	2329      	movs	r3, #41	; 0x29
   b7ccc:	e7e1      	b.n	b7c92 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7cce:	6860      	ldr	r0, [r4, #4]
   b7cd0:	f7ff fdcf 	bl	b7872 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7cd4:	2800      	cmp	r0, #0
   b7cd6:	d1f8      	bne.n	b7cca <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7cd8:	4620      	mov	r0, r4
   b7cda:	f7ff fe00 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
}
   b7cde:	4628      	mov	r0, r5
   b7ce0:	bd70      	pop	{r4, r5, r6, pc}

000b7ce2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7ce2:	b513      	push	{r0, r1, r4, lr}
   b7ce4:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7ce6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7cea:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7cec:	f7ff fe3b 	bl	b7966 <_ZN9SdSpiCard11waitNotBusyEt>
   b7cf0:	9a01      	ldr	r2, [sp, #4]
   b7cf2:	b930      	cbnz	r0, b7d02 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7cf4:	235b      	movs	r3, #91	; 0x5b
   b7cf6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7cf8:	4620      	mov	r0, r4
   b7cfa:	f7ff fdf0 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7cfe:	2000      	movs	r0, #0
   b7d00:	e005      	b.n	b7d0e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7d02:	21fc      	movs	r1, #252	; 0xfc
   b7d04:	4620      	mov	r0, r4
   b7d06:	f7ff ff91 	bl	b7c2c <_ZN9SdSpiCard9writeDataEhPKh>
   b7d0a:	2800      	cmp	r0, #0
   b7d0c:	d0f4      	beq.n	b7cf8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7d0e:	b002      	add	sp, #8
   b7d10:	bd10      	pop	{r4, pc}

000b7d12 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7d12:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7d14:	7a83      	ldrb	r3, [r0, #10]
   b7d16:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7d18:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7d1a:	bf18      	it	ne
   b7d1c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7d1e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7d20:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7d22:	f7ff fe35 	bl	b7990 <_ZN9SdSpiCard11cardCommandEhm>
   b7d26:	b130      	cbz	r0, b7d36 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7d28:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7d2a:	4620      	mov	r0, r4
   b7d2c:	7023      	strb	r3, [r4, #0]
   b7d2e:	f7ff fdd6 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d32:	2000      	movs	r0, #0
}
   b7d34:	bd10      	pop	{r4, pc}
  return true;
   b7d36:	2001      	movs	r0, #1
   b7d38:	e7fc      	b.n	b7d34 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7d3a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7d3a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7d3c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7d40:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7d42:	f7ff fe10 	bl	b7966 <_ZN9SdSpiCard11waitNotBusyEt>
   b7d46:	4605      	mov	r5, r0
   b7d48:	b930      	cbnz	r0, b7d58 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7d4a:	2356      	movs	r3, #86	; 0x56
   b7d4c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7d4e:	4620      	mov	r0, r4
   b7d50:	f7ff fdc5 	bl	b78de <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7d54:	4628      	mov	r0, r5
   b7d56:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7d58:	6860      	ldr	r0, [r4, #4]
   b7d5a:	21fd      	movs	r1, #253	; 0xfd
   b7d5c:	f7ff fd87 	bl	b786e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7d60:	e7f5      	b.n	b7d4e <_ZN9SdSpiCard9writeStopEv+0x14>

000b7d62 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d64:	4604      	mov	r4, r0
   b7d66:	4616      	mov	r6, r2
   b7d68:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7d6a:	f7ff ffd2 	bl	b7d12 <_ZN9SdSpiCard10writeStartEm>
   b7d6e:	b170      	cbz	r0, b7d8e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7d70:	2500      	movs	r5, #0
   b7d72:	42bd      	cmp	r5, r7
   b7d74:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7d78:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7d7a:	d004      	beq.n	b7d86 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7d7c:	f7ff ffb1 	bl	b7ce2 <_ZN9SdSpiCard9writeDataEPKh>
   b7d80:	b128      	cbz	r0, b7d8e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7d82:	3501      	adds	r5, #1
   b7d84:	e7f5      	b.n	b7d72 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7d8a:	f7ff bfd6 	b.w	b7d3a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7d8e:	4620      	mov	r0, r4
   b7d90:	f7ff fda5 	bl	b78de <_ZN9SdSpiCard7spiStopEv>
}
   b7d94:	2000      	movs	r0, #0
   b7d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d98 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7d98:	4b01      	ldr	r3, [pc, #4]	; (b7da0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7d9a:	2201      	movs	r2, #1
   b7d9c:	701a      	strb	r2, [r3, #0]
}
   b7d9e:	4770      	bx	lr
   b7da0:	2003e644 	.word	0x2003e644

000b7da4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7da4:	1d01      	adds	r1, r0, #4
   b7da6:	6800      	ldr	r0, [r0, #0]
   b7da8:	f004 be46 	b.w	bca38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7dac <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7dac:	b510      	push	{r4, lr}
   b7dae:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7db0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7db2:	6800      	ldr	r0, [r0, #0]
   b7db4:	f004 fe12 	bl	bc9dc <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7db8:	7d20      	ldrb	r0, [r4, #20]
   b7dba:	2101      	movs	r1, #1
   b7dbc:	f005 fa88 	bl	bd2d0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7dc0:	7d20      	ldrb	r0, [r4, #20]
   b7dc2:	2101      	movs	r1, #1
}
   b7dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7dc8:	f005 ba93 	b.w	bd2f2 <digitalWrite>

000b7dcc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7dcc:	6800      	ldr	r0, [r0, #0]
   b7dce:	f004 be19 	b.w	bca04 <_ZN8SPIClass14endTransactionEv>

000b7dd2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7dd2:	6800      	ldr	r0, [r0, #0]
   b7dd4:	21ff      	movs	r1, #255	; 0xff
   b7dd6:	f004 be9d 	b.w	bcb14 <_ZN8SPIClass8transferEh>
	...

000b7ddc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7dde:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7de0:	4a07      	ldr	r2, [pc, #28]	; (b7e00 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7de2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7de4:	2500      	movs	r5, #0
   b7de6:	4c07      	ldr	r4, [pc, #28]	; (b7e04 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7de8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7dea:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7dec:	460a      	mov	r2, r1
   b7dee:	4629      	mov	r1, r5
   b7df0:	f004 fe96 	bl	bcb20 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7df4:	7823      	ldrb	r3, [r4, #0]
   b7df6:	2b00      	cmp	r3, #0
   b7df8:	d0fc      	beq.n	b7df4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7dfa:	2000      	movs	r0, #0
   b7dfc:	b003      	add	sp, #12
   b7dfe:	bd30      	pop	{r4, r5, pc}
   b7e00:	000b7d99 	.word	0x000b7d99
   b7e04:	2003e644 	.word	0x2003e644

000b7e08 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7e08:	6800      	ldr	r0, [r0, #0]
   b7e0a:	f004 be83 	b.w	bcb14 <_ZN8SPIClass8transferEh>
	...

000b7e10 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e12:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7e14:	4a06      	ldr	r2, [pc, #24]	; (b7e30 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7e16:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7e18:	2500      	movs	r5, #0
   b7e1a:	4c06      	ldr	r4, [pc, #24]	; (b7e34 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7e1c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7e1e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7e20:	462a      	mov	r2, r5
   b7e22:	f004 fe7d 	bl	bcb20 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7e26:	7823      	ldrb	r3, [r4, #0]
   b7e28:	2b00      	cmp	r3, #0
   b7e2a:	d0fc      	beq.n	b7e26 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7e2c:	b003      	add	sp, #12
   b7e2e:	bd30      	pop	{r4, r5, pc}
   b7e30:	000b7d99 	.word	0x000b7d99
   b7e34:	2003e644 	.word	0x2003e644

000b7e38 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e3c:	b085      	sub	sp, #20
   b7e3e:	461f      	mov	r7, r3
   b7e40:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7e44:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7e48:	eba8 0902 	sub.w	r9, r8, r2
   b7e4c:	eba7 0a01 	sub.w	sl, r7, r1
   b7e50:	f1b9 0f00 	cmp.w	r9, #0
   b7e54:	bfb8      	it	lt
   b7e56:	f1c9 0900 	rsblt	r9, r9, #0
   b7e5a:	f1ba 0f00 	cmp.w	sl, #0
   b7e5e:	bfb8      	it	lt
   b7e60:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b7e64:	45d1      	cmp	r9, sl
        uint16_t color) {
   b7e66:	4683      	mov	fp, r0
   b7e68:	460c      	mov	r4, r1
   b7e6a:	4615      	mov	r5, r2
    if (steep) {
   b7e6c:	dd04      	ble.n	b7e78 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7e6e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7e70:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b7e72:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b7e74:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b7e76:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7e78:	42bc      	cmp	r4, r7
   b7e7a:	dd05      	ble.n	b7e88 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7e7c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7e7e:	4645      	mov	r5, r8
   b7e80:	4690      	mov	r8, r2
    if (x0 > x1) {
   b7e82:	4622      	mov	r2, r4
   b7e84:	463c      	mov	r4, r7
   b7e86:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b7e88:	1b3e      	subs	r6, r7, r4
   b7e8a:	b2b2      	uxth	r2, r6
   b7e8c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b7e8e:	eba8 0205 	sub.w	r2, r8, r5
   b7e92:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b7e96:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b7e9a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b7e9e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b7ea2:	4545      	cmp	r5, r8
   b7ea4:	bfb4      	ite	lt
   b7ea6:	2201      	movlt	r2, #1
   b7ea8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b7eac:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b7eae:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b7eb0:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b7eb2:	42bc      	cmp	r4, r7
   b7eb4:	dc1c      	bgt.n	b7ef0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b7eb6:	f8db 2000 	ldr.w	r2, [fp]
   b7eba:	9303      	str	r3, [sp, #12]
        if (steep) {
   b7ebc:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b7ebe:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b7ec2:	bfc7      	ittee	gt
   b7ec4:	4629      	movgt	r1, r5
   b7ec6:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b7ec8:	462a      	movle	r2, r5
   b7eca:	4621      	movle	r1, r4
   b7ecc:	4658      	mov	r0, fp
   b7ece:	47c0      	blx	r8
        }
        err -= dy;
   b7ed0:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b7ed2:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b7ed4:	1ab6      	subs	r6, r6, r2
   b7ed6:	b2b1      	uxth	r1, r6
   b7ed8:	b236      	sxth	r6, r6
        if (err < 0) {
   b7eda:	2e00      	cmp	r6, #0
   b7edc:	da05      	bge.n	b7eea <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b7ede:	9a02      	ldr	r2, [sp, #8]
   b7ee0:	4415      	add	r5, r2
            err += dx;
   b7ee2:	9a00      	ldr	r2, [sp, #0]
   b7ee4:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b7ee6:	b22d      	sxth	r5, r5
            err += dx;
   b7ee8:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7eea:	3401      	adds	r4, #1
   b7eec:	b224      	sxth	r4, r4
   b7eee:	e7e0      	b.n	b7eb2 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7ef0:	b005      	add	sp, #20
   b7ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7ef6 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b7ef6:	4770      	bx	lr

000b7ef8 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7ef8:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7efa:	6804      	ldr	r4, [r0, #0]
   b7efc:	6924      	ldr	r4, [r4, #16]
   b7efe:	46a4      	mov	ip, r4
}
   b7f00:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b7f04:	4760      	bx	ip

000b7f06 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7f06:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7f08:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7f0a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7f0e:	9502      	str	r5, [sp, #8]
   b7f10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7f12:	46a4      	mov	ip, r4
}
   b7f14:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b7f16:	4760      	bx	ip

000b7f18 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7f18:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7f1a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7f1c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7f20:	9502      	str	r5, [sp, #8]
   b7f22:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b7f24:	46a4      	mov	ip, r4
}
   b7f26:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7f28:	4760      	bx	ip

000b7f2a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7f2a:	b470      	push	{r4, r5, r6}
   b7f2c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7f30:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b7f34:	6804      	ldr	r4, [r0, #0]
   b7f36:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b7f3a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7f3c:	46a4      	mov	ip, r4
}
   b7f3e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b7f40:	4760      	bx	ip

000b7f42 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7f42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7f46:	461c      	mov	r4, r3
    startWrite();
   b7f48:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b7f4a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7f4e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b7f50:	4605      	mov	r5, r0
   b7f52:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b7f54:	3c01      	subs	r4, #1
   b7f56:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b7f58:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b7f5a:	b224      	sxth	r4, r4
    startWrite();
   b7f5c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b7f5e:	682b      	ldr	r3, [r5, #0]
   b7f60:	f8cd 8004 	str.w	r8, [sp, #4]
   b7f64:	9400      	str	r4, [sp, #0]
   b7f66:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b7f68:	4628      	mov	r0, r5
   b7f6a:	463b      	mov	r3, r7
   b7f6c:	4632      	mov	r2, r6
   b7f6e:	4639      	mov	r1, r7
   b7f70:	47a0      	blx	r4
    endWrite();
   b7f72:	682b      	ldr	r3, [r5, #0]
   b7f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f76:	4628      	mov	r0, r5
}
   b7f78:	b002      	add	sp, #8
   b7f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7f7e:	4718      	bx	r3

000b7f80 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7f80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7f84:	461d      	mov	r5, r3
    startWrite();
   b7f86:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b7f88:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7f8c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b7f8e:	4604      	mov	r4, r0
   b7f90:	4617      	mov	r7, r2
   b7f92:	460e      	mov	r6, r1
    startWrite();
   b7f94:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b7f96:	e9cd 7800 	strd	r7, r8, [sp]
   b7f9a:	6822      	ldr	r2, [r4, #0]
   b7f9c:	1e6b      	subs	r3, r5, #1
   b7f9e:	4433      	add	r3, r6
   b7fa0:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b7fa2:	4620      	mov	r0, r4
   b7fa4:	b21b      	sxth	r3, r3
   b7fa6:	463a      	mov	r2, r7
   b7fa8:	4631      	mov	r1, r6
   b7faa:	47a8      	blx	r5
    endWrite();
   b7fac:	6823      	ldr	r3, [r4, #0]
   b7fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7fb0:	4620      	mov	r0, r4
}
   b7fb2:	b002      	add	sp, #8
   b7fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7fb8:	4718      	bx	r3

000b7fba <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7fba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7fbe:	461e      	mov	r6, r3
    startWrite();
   b7fc0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7fc2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b7fc6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7fc8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b7fcc:	460c      	mov	r4, r1
   b7fce:	4605      	mov	r5, r0
   b7fd0:	4617      	mov	r7, r2
    startWrite();
   b7fd2:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b7fd4:	4426      	add	r6, r4
   b7fd6:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b7fd8:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b7fda:	da0b      	bge.n	b7ff4 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b7fdc:	f8cd 8000 	str.w	r8, [sp]
   b7fe0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7fe4:	4621      	mov	r1, r4
   b7fe6:	464b      	mov	r3, r9
   b7fe8:	463a      	mov	r2, r7
   b7fea:	4628      	mov	r0, r5
   b7fec:	3401      	adds	r4, #1
   b7fee:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b7ff0:	b224      	sxth	r4, r4
   b7ff2:	e7f0      	b.n	b7fd6 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b7ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7ff6:	4628      	mov	r0, r5
}
   b7ff8:	b002      	add	sp, #8
   b7ffa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7ffe:	4718      	bx	r3

000b8000 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b8000:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b8002:	6802      	ldr	r2, [r0, #0]
   b8004:	9101      	str	r1, [sp, #4]
   b8006:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b800a:	9100      	str	r1, [sp, #0]
   b800c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b800e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8012:	2200      	movs	r2, #0
   b8014:	4611      	mov	r1, r2
   b8016:	47a0      	blx	r4
}
   b8018:	b002      	add	sp, #8
   b801a:	bd10      	pop	{r4, pc}

000b801c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b801c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b8020:	4299      	cmp	r1, r3
        uint16_t color) {
   b8022:	4616      	mov	r6, r2
   b8024:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b8028:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b802c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b802e:	4680      	mov	r8, r0
   b8030:	460d      	mov	r5, r1
   b8032:	461c      	mov	r4, r3
    if(x0 == x1){
   b8034:	d113      	bne.n	b805e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8036:	42be      	cmp	r6, r7
   b8038:	bfc8      	it	gt
   b803a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b803c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8040:	bfc4      	itt	gt
   b8042:	463e      	movgt	r6, r7
   b8044:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8046:	1c7b      	adds	r3, r7, #1
   b8048:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b804a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b804c:	b21b      	sxth	r3, r3
   b804e:	4632      	mov	r2, r6
   b8050:	4629      	mov	r1, r5
   b8052:	4640      	mov	r0, r8
   b8054:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b8056:	b003      	add	sp, #12
   b8058:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b805c:	4760      	bx	ip
    } else if(y0 == y1){
   b805e:	42be      	cmp	r6, r7
   b8060:	d10a      	bne.n	b8078 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b8062:	4299      	cmp	r1, r3
   b8064:	bfc2      	ittt	gt
   b8066:	460b      	movgt	r3, r1
   b8068:	4625      	movgt	r5, r4
   b806a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b806c:	1c63      	adds	r3, r4, #1
   b806e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b8072:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8074:	1b5b      	subs	r3, r3, r5
   b8076:	e7e9      	b.n	b804c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8078:	6953      	ldr	r3, [r2, #20]
   b807a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b807c:	e9cd 7900 	strd	r7, r9, [sp]
   b8080:	f8d8 3000 	ldr.w	r3, [r8]
   b8084:	4640      	mov	r0, r8
   b8086:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8088:	4632      	mov	r2, r6
   b808a:	4623      	mov	r3, r4
   b808c:	4629      	mov	r1, r5
   b808e:	47b8      	blx	r7
        endWrite();
   b8090:	f8d8 3000 	ldr.w	r3, [r8]
   b8094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8096:	4640      	mov	r0, r8
}
   b8098:	b003      	add	sp, #12
   b809a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b809e:	4718      	bx	r3

000b80a0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b80a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b80a4:	461d      	mov	r5, r3
    startWrite();
   b80a6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b80a8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b80ac:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b80ae:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b80b2:	4604      	mov	r4, r0
   b80b4:	460f      	mov	r7, r1
   b80b6:	4616      	mov	r6, r2
    startWrite();
   b80b8:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b80ba:	6823      	ldr	r3, [r4, #0]
   b80bc:	f8cd 8000 	str.w	r8, [sp]
   b80c0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b80c4:	4632      	mov	r2, r6
   b80c6:	462b      	mov	r3, r5
   b80c8:	4639      	mov	r1, r7
   b80ca:	4620      	mov	r0, r4
   b80cc:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b80ce:	6823      	ldr	r3, [r4, #0]
   b80d0:	f8cd 8000 	str.w	r8, [sp]
   b80d4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b80d8:	4432      	add	r2, r6
   b80da:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b80de:	4639      	mov	r1, r7
   b80e0:	462b      	mov	r3, r5
   b80e2:	4620      	mov	r0, r4
   b80e4:	b212      	sxth	r2, r2
   b80e6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b80e8:	6823      	ldr	r3, [r4, #0]
   b80ea:	f8cd 8000 	str.w	r8, [sp]
   b80ee:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b80f2:	4632      	mov	r2, r6
   b80f4:	464b      	mov	r3, r9
   b80f6:	4639      	mov	r1, r7
   b80f8:	4620      	mov	r0, r4
   b80fa:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b80fc:	1e6b      	subs	r3, r5, #1
   b80fe:	19d9      	adds	r1, r3, r7
   b8100:	6823      	ldr	r3, [r4, #0]
   b8102:	f8cd 8000 	str.w	r8, [sp]
   b8106:	6a1d      	ldr	r5, [r3, #32]
   b8108:	4620      	mov	r0, r4
   b810a:	464b      	mov	r3, r9
   b810c:	4632      	mov	r2, r6
   b810e:	b209      	sxth	r1, r1
   b8110:	47a8      	blx	r5
    endWrite();
   b8112:	6823      	ldr	r3, [r4, #0]
   b8114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8116:	4620      	mov	r0, r4
}
   b8118:	b002      	add	sp, #8
   b811a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b811e:	4718      	bx	r3

000b8120 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b8120:	4770      	bx	lr

000b8122 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b8122:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b8126:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b812a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b812c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b812e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b8132:	bf59      	ittee	pl
   b8134:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b8136:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8138:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b813a:	81c3      	strhmi	r3, [r0, #14]
}
   b813c:	4770      	bx	lr
	...

000b8140 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b8140:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b8142:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b8144:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b8146:	4a07      	ldr	r2, [pc, #28]	; (b8164 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8148:	4d07      	ldr	r5, [pc, #28]	; (b8168 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b814a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b814c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b814e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b8150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8154:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8158:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b815a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b815c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b815e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b8160:	6204      	str	r4, [r0, #32]
}
   b8162:	bd30      	pop	{r4, r5, pc}
   b8164:	01000101 	.word	0x01000101
   b8168:	000c10b0 	.word	0x000c10b0

000b816c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8170:	b089      	sub	sp, #36	; 0x24
   b8172:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8176:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8178:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b817c:	9304      	str	r3, [sp, #16]
   b817e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8182:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8184:	9305      	str	r3, [sp, #20]
   b8186:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b818a:	4604      	mov	r4, r0
    startWrite();
   b818c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b818e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8192:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8196:	bf48      	it	mi
   b8198:	f108 020e 	addmi.w	r2, r8, #14
   b819c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b81a0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b81a2:	4635      	mov	r5, r6
   b81a4:	9b03      	ldr	r3, [sp, #12]
   b81a6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b81a8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b81ac:	189a      	adds	r2, r3, r2
   b81ae:	9b05      	ldr	r3, [sp, #20]
   b81b0:	428b      	cmp	r3, r1
   b81b2:	b212      	sxth	r2, r2
   b81b4:	dd27      	ble.n	b8206 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81b6:	9b04      	ldr	r3, [sp, #16]
   b81b8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b81ba:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81be:	9306      	str	r3, [sp, #24]
   b81c0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b81c4:	4580      	cmp	r8, r0
   b81c6:	fa1f f189 	uxth.w	r1, r9
   b81ca:	dd17      	ble.n	b81fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b81cc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81ce:	bf05      	ittet	eq
   b81d0:	9b06      	ldreq	r3, [sp, #24]
   b81d2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b81d4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81d6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b81d8:	bf18      	it	ne
   b81da:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b81dc:	062b      	lsls	r3, r5, #24
   b81de:	d50a      	bpl.n	b81f6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b81e0:	9b02      	ldr	r3, [sp, #8]
   b81e2:	6820      	ldr	r0, [r4, #0]
   b81e4:	9207      	str	r2, [sp, #28]
   b81e6:	4419      	add	r1, r3
   b81e8:	6983      	ldr	r3, [r0, #24]
   b81ea:	b209      	sxth	r1, r1
   b81ec:	461f      	mov	r7, r3
   b81ee:	4620      	mov	r0, r4
   b81f0:	4653      	mov	r3, sl
   b81f2:	47b8      	blx	r7
   b81f4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b81f6:	f109 0901 	add.w	r9, r9, #1
   b81fa:	e7e1      	b.n	b81c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b81fc:	9b01      	ldr	r3, [sp, #4]
   b81fe:	3301      	adds	r3, #1
   b8200:	9301      	str	r3, [sp, #4]
   b8202:	445e      	add	r6, fp
   b8204:	e7ce      	b.n	b81a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8206:	6823      	ldr	r3, [r4, #0]
   b8208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b820a:	4620      	mov	r0, r4
}
   b820c:	b009      	add	sp, #36	; 0x24
   b820e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8212:	4718      	bx	r3

000b8214 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8218:	ed2d 8b02 	vpush	{d8}
   b821c:	b091      	sub	sp, #68	; 0x44
   b821e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8220:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8222:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8226:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b822a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b822e:	9103      	str	r1, [sp, #12]
   b8230:	461f      	mov	r7, r3
   b8232:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8236:	9304      	str	r3, [sp, #16]
   b8238:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b823a:	2a00      	cmp	r2, #0
   b823c:	f040 80c5 	bne.w	b83ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8240:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8244:	428b      	cmp	r3, r1
   b8246:	f340 814c 	ble.w	b84e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b824a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b824e:	42b3      	cmp	r3, r6
   b8250:	f340 8147 	ble.w	b84e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8254:	2306      	movs	r3, #6
   b8256:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b825a:	2b00      	cmp	r3, #0
   b825c:	f340 8141 	ble.w	b84e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8260:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8264:	2b00      	cmp	r3, #0
   b8266:	f340 813c 	ble.w	b84e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b826a:	7f03      	ldrb	r3, [r0, #28]
   b826c:	b91b      	cbnz	r3, b8276 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b826e:	2faf      	cmp	r7, #175	; 0xaf
   b8270:	bf84      	itt	hi
   b8272:	3701      	addhi	r7, #1
   b8274:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8276:	f8db 3000 	ldr.w	r3, [fp]
   b827a:	4658      	mov	r0, fp
   b827c:	695b      	ldr	r3, [r3, #20]
   b827e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8280:	2205      	movs	r2, #5
   b8282:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8284:	2200      	movs	r2, #0
   b8286:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8288:	4a98      	ldr	r2, [pc, #608]	; (b84ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b828a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b828e:	18d3      	adds	r3, r2, r3
   b8290:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8292:	b2b3      	uxth	r3, r6
   b8294:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8296:	9a05      	ldr	r2, [sp, #20]
   b8298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b829a:	5c9b      	ldrb	r3, [r3, r2]
   b829c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b829e:	b2ab      	uxth	r3, r5
   b82a0:	930b      	str	r3, [sp, #44]	; 0x2c
   b82a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b82a6:	9308      	str	r3, [sp, #32]
   b82a8:	9b03      	ldr	r3, [sp, #12]
   b82aa:	fb02 f905 	mul.w	r9, r2, r5
   b82ae:	fa19 f983 	uxtah	r9, r9, r3
   b82b2:	fa0f f389 	sxth.w	r3, r9
   b82b6:	ee08 3a10 	vmov	s16, r3
   b82ba:	2308      	movs	r3, #8
   b82bc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b82be:	9b03      	ldr	r3, [sp, #12]
   b82c0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b82c4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b82c8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b82cc:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b82ce:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b82d2:	07d2      	lsls	r2, r2, #31
   b82d4:	d552      	bpl.n	b837c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b82d6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b82d8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b82dc:	d13e      	bne.n	b835c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b82de:	2c01      	cmp	r4, #1
   b82e0:	d13c      	bne.n	b835c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b82e2:	699b      	ldr	r3, [r3, #24]
   b82e4:	9906      	ldr	r1, [sp, #24]
   b82e6:	461f      	mov	r7, r3
   b82e8:	9b04      	ldr	r3, [sp, #16]
   b82ea:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b82ec:	b212      	sxth	r2, r2
   b82ee:	4651      	mov	r1, sl
   b82f0:	4658      	mov	r0, fp
   b82f2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b82f4:	f109 0301 	add.w	r3, r9, #1
   b82f8:	fa4f f983 	sxtb.w	r9, r3
   b82fc:	9b07      	ldr	r3, [sp, #28]
   b82fe:	085b      	lsrs	r3, r3, #1
   b8300:	9307      	str	r3, [sp, #28]
   b8302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8304:	3b01      	subs	r3, #1
   b8306:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b830a:	930a      	str	r3, [sp, #40]	; 0x28
   b830c:	d1de      	bne.n	b82cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b830e:	9f05      	ldr	r7, [sp, #20]
   b8310:	3701      	adds	r7, #1
   b8312:	b27b      	sxtb	r3, r7
   b8314:	9305      	str	r3, [sp, #20]
   b8316:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8318:	3b01      	subs	r3, #1
   b831a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b831e:	9309      	str	r3, [sp, #36]	; 0x24
   b8320:	d1b9      	bne.n	b8296 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b8322:	9b04      	ldr	r3, [sp, #16]
   b8324:	4543      	cmp	r3, r8
   b8326:	d00f      	beq.n	b8348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8328:	2d01      	cmp	r5, #1
   b832a:	f8db 3000 	ldr.w	r3, [fp]
   b832e:	d13b      	bne.n	b83a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8330:	2c01      	cmp	r4, #1
   b8332:	d139      	bne.n	b83a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8334:	9908      	ldr	r1, [sp, #32]
   b8336:	f8cd 8000 	str.w	r8, [sp]
   b833a:	3105      	adds	r1, #5
   b833c:	6a1c      	ldr	r4, [r3, #32]
   b833e:	4632      	mov	r2, r6
   b8340:	2308      	movs	r3, #8
   b8342:	b209      	sxth	r1, r1
   b8344:	4658      	mov	r0, fp
   b8346:	47a0      	blx	r4
        endWrite();
   b8348:	f8db 3000 	ldr.w	r3, [fp]
   b834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b834e:	4658      	mov	r0, fp
}
   b8350:	b011      	add	sp, #68	; 0x44
   b8352:	ecbd 8b02 	vpop	{d8}
   b8356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b835a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b835c:	9906      	ldr	r1, [sp, #24]
   b835e:	fb14 f202 	smulbb	r2, r4, r2
   b8362:	440a      	add	r2, r1
   b8364:	9904      	ldr	r1, [sp, #16]
   b8366:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8368:	9400      	str	r4, [sp, #0]
   b836a:	69db      	ldr	r3, [r3, #28]
   b836c:	ee18 1a10 	vmov	r1, s16
   b8370:	461f      	mov	r7, r3
   b8372:	b212      	sxth	r2, r2
   b8374:	462b      	mov	r3, r5
   b8376:	4658      	mov	r0, fp
   b8378:	47b8      	blx	r7
   b837a:	e7bb      	b.n	b82f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b837c:	9a04      	ldr	r2, [sp, #16]
   b837e:	4542      	cmp	r2, r8
   b8380:	d0b8      	beq.n	b82f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8382:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8384:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8388:	d107      	bne.n	b839a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b838a:	2c01      	cmp	r4, #1
   b838c:	d105      	bne.n	b839a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b838e:	699b      	ldr	r3, [r3, #24]
   b8390:	9906      	ldr	r1, [sp, #24]
   b8392:	461f      	mov	r7, r3
   b8394:	440a      	add	r2, r1
   b8396:	4643      	mov	r3, r8
   b8398:	e7a8      	b.n	b82ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b839a:	9906      	ldr	r1, [sp, #24]
   b839c:	f8cd 8004 	str.w	r8, [sp, #4]
   b83a0:	fb14 f202 	smulbb	r2, r4, r2
   b83a4:	440a      	add	r2, r1
   b83a6:	e7df      	b.n	b8368 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b83a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b83aa:	f8cd 8004 	str.w	r8, [sp, #4]
   b83ae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b83b2:	9a08      	ldr	r2, [sp, #32]
   b83b4:	00e4      	lsls	r4, r4, #3
   b83b6:	440a      	add	r2, r1
   b83b8:	4611      	mov	r1, r2
   b83ba:	9400      	str	r4, [sp, #0]
   b83bc:	69dc      	ldr	r4, [r3, #28]
   b83be:	4632      	mov	r2, r6
   b83c0:	462b      	mov	r3, r5
   b83c2:	b209      	sxth	r1, r1
   b83c4:	4658      	mov	r0, fp
   b83c6:	47a0      	blx	r4
        endWrite();
   b83c8:	e7be      	b.n	b8348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b83ca:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b83cc:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b83ce:	6812      	ldr	r2, [r2, #0]
   b83d0:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b83d2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b83d4:	b2ff      	uxtb	r7, r7
   b83d6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b83da:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b83de:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b83e0:	789a      	ldrb	r2, [r3, #2]
   b83e2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b83e4:	78da      	ldrb	r2, [r3, #3]
   b83e6:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b83e8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b83ea:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b83ee:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b83f2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b83f4:	d801      	bhi.n	b83fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b83f6:	2c01      	cmp	r4, #1
   b83f8:	d957      	bls.n	b84aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b83fa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b83fe:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8400:	fa0f f38a 	sxth.w	r3, sl
   b8404:	9307      	str	r3, [sp, #28]
        startWrite();
   b8406:	f8db 3000 	ldr.w	r3, [fp]
   b840a:	4658      	mov	r0, fp
   b840c:	695b      	ldr	r3, [r3, #20]
   b840e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8410:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8412:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8416:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8418:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b841c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b841e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8420:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8424:	429f      	cmp	r7, r3
   b8426:	d28f      	bcs.n	b8348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8428:	9b07      	ldr	r3, [sp, #28]
   b842a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b842c:	443b      	add	r3, r7
   b842e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8432:	2200      	movs	r2, #0
   b8434:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8438:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b843a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b843e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8442:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8446:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8448:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b844a:	9905      	ldr	r1, [sp, #20]
   b844c:	4291      	cmp	r1, r2
   b844e:	d241      	bcs.n	b84d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8450:	1c5a      	adds	r2, r3, #1
   b8452:	b2d2      	uxtb	r2, r2
   b8454:	075b      	lsls	r3, r3, #29
   b8456:	920d      	str	r2, [sp, #52]	; 0x34
   b8458:	d107      	bne.n	b846a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b845a:	9b06      	ldr	r3, [sp, #24]
   b845c:	9906      	ldr	r1, [sp, #24]
   b845e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8460:	3301      	adds	r3, #1
   b8462:	b29b      	uxth	r3, r3
   b8464:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8468:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b846a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b846e:	d012      	beq.n	b8496 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8470:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8472:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8476:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b847a:	d11a      	bne.n	b84b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b847c:	2c01      	cmp	r4, #1
   b847e:	d118      	bne.n	b84b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8482:	699b      	ldr	r3, [r3, #24]
   b8484:	4411      	add	r1, r2
   b8486:	9a05      	ldr	r2, [sp, #20]
   b8488:	4411      	add	r1, r2
   b848a:	461e      	mov	r6, r3
   b848c:	4652      	mov	r2, sl
   b848e:	9b04      	ldr	r3, [sp, #16]
   b8490:	b209      	sxth	r1, r1
   b8492:	4658      	mov	r0, fp
   b8494:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b8496:	9e05      	ldr	r6, [sp, #20]
   b8498:	3601      	adds	r6, #1
   b849a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b849c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b84a0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b84a2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b84a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b84a8:	e7ce      	b.n	b8448 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b84aa:	2300      	movs	r3, #0
   b84ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b84b0:	e7a9      	b.n	b8406 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b84b2:	9805      	ldr	r0, [sp, #20]
   b84b4:	9a08      	ldr	r2, [sp, #32]
   b84b6:	4402      	add	r2, r0
   b84b8:	fb02 1105 	mla	r1, r2, r5, r1
   b84bc:	9a04      	ldr	r2, [sp, #16]
   b84be:	e9cd 4200 	strd	r4, r2, [sp]
   b84c2:	69db      	ldr	r3, [r3, #28]
   b84c4:	ee18 2a10 	vmov	r2, s16
   b84c8:	461e      	mov	r6, r3
   b84ca:	b209      	sxth	r1, r1
   b84cc:	462b      	mov	r3, r5
   b84ce:	4658      	mov	r0, fp
   b84d0:	47b0      	blx	r6
   b84d2:	e7e0      	b.n	b8496 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b84d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b84d6:	3701      	adds	r7, #1
   b84d8:	4498      	add	r8, r3
   b84da:	fa5f f888 	uxtb.w	r8, r8
   b84de:	b2ff      	uxtb	r7, r7
   b84e0:	e79f      	b.n	b8422 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b84e2:	b011      	add	sp, #68	; 0x44
   b84e4:	ecbd 8b02 	vpop	{d8}
   b84e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b84ec:	000c0ba8 	.word	0x000c0ba8

000b84f0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b84f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b84f2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b84f4:	b085      	sub	sp, #20
   b84f6:	4604      	mov	r4, r0
   b84f8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b84fa:	2a00      	cmp	r2, #0
   b84fc:	d134      	bne.n	b8568 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b84fe:	290a      	cmp	r1, #10
   b8500:	d108      	bne.n	b8514 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8502:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8504:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8506:	7e42      	ldrb	r2, [r0, #25]
   b8508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b850c:	8263      	strh	r3, [r4, #18]
}
   b850e:	2001      	movs	r0, #1
   b8510:	b005      	add	sp, #20
   b8512:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8514:	290d      	cmp	r1, #13
   b8516:	d0fa      	beq.n	b850e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8518:	7ee1      	ldrb	r1, [r4, #27]
   b851a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b851c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b851e:	b171      	cbz	r1, b853e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8520:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8524:	2106      	movs	r1, #6
   b8526:	fb11 6100 	smlabb	r1, r1, r0, r6
   b852a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b852e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8530:	bfc1      	itttt	gt
   b8532:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8536:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8538:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b853c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b853e:	8ae2      	ldrh	r2, [r4, #22]
   b8540:	9201      	str	r2, [sp, #4]
   b8542:	8aa2      	ldrh	r2, [r4, #20]
   b8544:	9200      	str	r2, [sp, #0]
   b8546:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b854a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b854e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8552:	4620      	mov	r0, r4
   b8554:	f7ff fe5e 	bl	b8214 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8558:	7e23      	ldrb	r3, [r4, #24]
   b855a:	8a22      	ldrh	r2, [r4, #16]
   b855c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8560:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8564:	8223      	strh	r3, [r4, #16]
   b8566:	e7d2      	b.n	b850e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8568:	290a      	cmp	r1, #10
   b856a:	d107      	bne.n	b857c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b856c:	2300      	movs	r3, #0
   b856e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8570:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8572:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8574:	8a43      	ldrh	r3, [r0, #18]
   b8576:	fb01 3302 	mla	r3, r1, r2, r3
   b857a:	e7c7      	b.n	b850c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b857c:	290d      	cmp	r1, #13
   b857e:	d0c6      	beq.n	b850e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8580:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8582:	42a9      	cmp	r1, r5
   b8584:	d3c3      	bcc.n	b850e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8586:	7a51      	ldrb	r1, [r2, #9]
   b8588:	4299      	cmp	r1, r3
   b858a:	d3c0      	bcc.n	b850e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b858c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b858e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8590:	b2ed      	uxtb	r5, r5
   b8592:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b8596:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8598:	b328      	cbz	r0, b85e6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b859a:	78e9      	ldrb	r1, [r5, #3]
   b859c:	b319      	cbz	r1, b85e6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b859e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b85a0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b85a2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b85a4:	b191      	cbz	r1, b85cc <_ZN12Adafruit_GFX5writeEh+0xdc>
   b85a6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b85aa:	4408      	add	r0, r1
   b85ac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b85b0:	fb06 1100 	mla	r1, r6, r0, r1
   b85b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b85b8:	4281      	cmp	r1, r0
   b85ba:	dd07      	ble.n	b85cc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b85bc:	2000      	movs	r0, #0
   b85be:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b85c0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b85c4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b85c6:	fb02 1207 	mla	r2, r2, r7, r1
   b85ca:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b85cc:	8ae2      	ldrh	r2, [r4, #22]
   b85ce:	9201      	str	r2, [sp, #4]
   b85d0:	8aa2      	ldrh	r2, [r4, #20]
   b85d2:	9200      	str	r2, [sp, #0]
   b85d4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b85d8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b85dc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b85e0:	4620      	mov	r0, r4
   b85e2:	f7ff fe17 	bl	b8214 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b85e6:	7929      	ldrb	r1, [r5, #4]
   b85e8:	7e22      	ldrb	r2, [r4, #24]
   b85ea:	8a23      	ldrh	r3, [r4, #16]
   b85ec:	fb01 3302 	mla	r3, r1, r2, r3
   b85f0:	e7b8      	b.n	b8564 <_ZN12Adafruit_GFX5writeEh+0x74>

000b85f2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b85f2:	2901      	cmp	r1, #1
   b85f4:	bf38      	it	cc
   b85f6:	2101      	movcc	r1, #1
   b85f8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b85fa:	7641      	strb	r1, [r0, #25]
}
   b85fc:	4770      	bx	lr
	...

000b8600 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8600:	b510      	push	{r4, lr}
   b8602:	4b04      	ldr	r3, [pc, #16]	; (b8614 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b8604:	6003      	str	r3, [r0, #0]
   b8606:	4604      	mov	r4, r0
  if(buffer) {
   b8608:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b860a:	b108      	cbz	r0, b8610 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b860c:	f001 f8b6 	bl	b977c <free>
    buffer = NULL;
  }
}
   b8610:	4620      	mov	r0, r4
   b8612:	bd10      	pop	{r4, pc}
   b8614:	000c15a8 	.word	0x000c15a8

000b8618 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8618:	b510      	push	{r4, lr}
   b861a:	4604      	mov	r4, r0
}
   b861c:	f7ff fff0 	bl	b8600 <_ZN16Adafruit_SSD1306D1Ev>
   b8620:	4620      	mov	r0, r4
   b8622:	2150      	movs	r1, #80	; 0x50
   b8624:	f7fb fd3b 	bl	b409e <_ZdlPvj>
   b8628:	4620      	mov	r0, r4
   b862a:	bd10      	pop	{r4, pc}

000b862c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b862c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b862e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8630:	db4b      	blt.n	b86ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8632:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b8636:	428c      	cmp	r4, r1
   b8638:	dd47      	ble.n	b86ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b863a:	2a00      	cmp	r2, #0
   b863c:	db45      	blt.n	b86ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b863e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b8642:	4294      	cmp	r4, r2
   b8644:	dd41      	ble.n	b86ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b8646:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b8648:	2c02      	cmp	r4, #2
   b864a:	d01f      	beq.n	b868c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b864c:	2c03      	cmp	r4, #3
   b864e:	d026      	beq.n	b869e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b8650:	2c01      	cmp	r4, #1
   b8652:	d104      	bne.n	b865e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b8654:	8904      	ldrh	r4, [r0, #8]
   b8656:	43d2      	mvns	r2, r2
   b8658:	4414      	add	r4, r2
      break;
   b865a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b865c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b865e:	2b01      	cmp	r3, #1
   b8660:	d023      	beq.n	b86aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b8662:	2b02      	cmp	r3, #2
   b8664:	d032      	beq.n	b86cc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b8666:	bb83      	cbnz	r3, b86ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b8668:	2a00      	cmp	r2, #0
   b866a:	4613      	mov	r3, r2
   b866c:	8904      	ldrh	r4, [r0, #8]
   b866e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8670:	bfb8      	it	lt
   b8672:	1dd3      	addlt	r3, r2, #7
   b8674:	10db      	asrs	r3, r3, #3
   b8676:	fb13 1104 	smlabb	r1, r3, r4, r1
   b867a:	f002 0207 	and.w	r2, r2, #7
   b867e:	2301      	movs	r3, #1
   b8680:	4093      	lsls	r3, r2
   b8682:	5c42      	ldrb	r2, [r0, r1]
   b8684:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b8688:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b868a:	e01e      	b.n	b86ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b868c:	8904      	ldrh	r4, [r0, #8]
   b868e:	3c01      	subs	r4, #1
   b8690:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b8692:	8944      	ldrh	r4, [r0, #10]
   b8694:	43d2      	mvns	r2, r2
   b8696:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b8698:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b869a:	b212      	sxth	r2, r2
      break;
   b869c:	e7df      	b.n	b865e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b869e:	8944      	ldrh	r4, [r0, #10]
   b86a0:	3c01      	subs	r4, #1
   b86a2:	1a64      	subs	r4, r4, r1
      break;
   b86a4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b86a6:	b222      	sxth	r2, r4
      break;
   b86a8:	e7d9      	b.n	b865e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b86aa:	2a00      	cmp	r2, #0
   b86ac:	8904      	ldrh	r4, [r0, #8]
   b86ae:	4613      	mov	r3, r2
   b86b0:	bfb8      	it	lt
   b86b2:	1dd3      	addlt	r3, r2, #7
   b86b4:	10db      	asrs	r3, r3, #3
   b86b6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b86ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b86bc:	f002 0007 	and.w	r0, r2, #7
   b86c0:	2201      	movs	r2, #1
   b86c2:	4082      	lsls	r2, r0
   b86c4:	5c58      	ldrb	r0, [r3, r1]
   b86c6:	4302      	orrs	r2, r0
   b86c8:	545a      	strb	r2, [r3, r1]
}
   b86ca:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b86cc:	2a00      	cmp	r2, #0
   b86ce:	4613      	mov	r3, r2
   b86d0:	8904      	ldrh	r4, [r0, #8]
   b86d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b86d4:	bfb8      	it	lt
   b86d6:	1dd3      	addlt	r3, r2, #7
   b86d8:	10db      	asrs	r3, r3, #3
   b86da:	fb13 1104 	smlabb	r1, r3, r4, r1
   b86de:	f002 0207 	and.w	r2, r2, #7
   b86e2:	2301      	movs	r3, #1
   b86e4:	fa03 f202 	lsl.w	r2, r3, r2
   b86e8:	5c43      	ldrb	r3, [r0, r1]
   b86ea:	405a      	eors	r2, r3
   b86ec:	e7cc      	b.n	b8688 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b86f0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b86f0:	b570      	push	{r4, r5, r6, lr}
   b86f2:	4604      	mov	r4, r0
   b86f4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b86f6:	2600      	movs	r6, #0
   b86f8:	f7ff fd22 	bl	b8140 <_ZN12Adafruit_GFXC1Ess>
   b86fc:	4b11      	ldr	r3, [pc, #68]	; (b8744 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b86fe:	6023      	str	r3, [r4, #0]
   b8700:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b8702:	b915      	cbnz	r5, b870a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b8704:	f004 fe50 	bl	bd3a8 <_Z19__fetch_global_Wirev>
   b8708:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b870a:	23ff      	movs	r3, #255	; 0xff
   b870c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b8710:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b8714:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b8718:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b871c:	4b0a      	ldr	r3, [pc, #40]	; (b8748 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b871e:	63a3      	str	r3, [r4, #56]	; 0x38
   b8720:	2301      	movs	r3, #1
   b8722:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b8726:	9b05      	ldr	r3, [sp, #20]
   b8728:	64a3      	str	r3, [r4, #72]	; 0x48
   b872a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b872e:	9b06      	ldr	r3, [sp, #24]
   b8730:	86a2      	strh	r2, [r4, #52]	; 0x34
   b8732:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b8736:	6426      	str	r6, [r4, #64]	; 0x40
   b8738:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b873c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b873e:	4620      	mov	r0, r4
   b8740:	bd70      	pop	{r4, r5, r6, pc}
   b8742:	bf00      	nop
   b8744:	000c15a8 	.word	0x000c15a8
   b8748:	000c0b60 	.word	0x000c0b60

000b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b874e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8750:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8752:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8754:	b190      	cbz	r0, b877c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b8756:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b875a:	f003 ff33 	bl	bc5c4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b875e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8760:	6803      	ldr	r3, [r0, #0]
   b8762:	2100      	movs	r1, #0
   b8764:	689b      	ldr	r3, [r3, #8]
   b8766:	4798      	blx	r3
    WIRE_WRITE(c);
   b8768:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b876a:	6803      	ldr	r3, [r0, #0]
   b876c:	4629      	mov	r1, r5
   b876e:	689b      	ldr	r3, [r3, #8]
   b8770:	4798      	blx	r3
    wire->endTransmission();
   b8772:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b8774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b8778:	f003 bf2b 	b.w	bc5d2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b877c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8780:	4601      	mov	r1, r0
   b8782:	b298      	uxth	r0, r3
   b8784:	f004 fdb5 	bl	bd2f2 <digitalWrite>
  if(spi) {
   b8788:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b878a:	b120      	cbz	r0, b8796 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b878c:	4629      	mov	r1, r5
}
   b878e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b8792:	f004 b9bf 	b.w	bcb14 <_ZN8SPIClass8transferEh>
   b8796:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8798:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b879a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b879e:	ea05 0107 	and.w	r1, r5, r7
   b87a2:	b280      	uxth	r0, r0
   b87a4:	f004 fda5 	bl	bd2f2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b87a8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87ac:	2101      	movs	r1, #1
   b87ae:	b280      	uxth	r0, r0
   b87b0:	f004 fd9f 	bl	bd2f2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b87b4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87b8:	2100      	movs	r1, #0
   b87ba:	b280      	uxth	r0, r0
   b87bc:	f004 fd99 	bl	bd2f2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87c0:	3e01      	subs	r6, #1
   b87c2:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b87c6:	d1e8      	bne.n	b879a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b87c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87ca <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b87ca:	b538      	push	{r3, r4, r5, lr}
   b87cc:	4604      	mov	r4, r0
  TRANSACTION_START
   b87ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b87d0:	460d      	mov	r5, r1
  TRANSACTION_START
   b87d2:	b180      	cbz	r0, b87f6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b87d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b87d6:	f003 fee7 	bl	bc5a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b87da:	2d00      	cmp	r5, #0
   b87dc:	4620      	mov	r0, r4
   b87de:	bf14      	ite	ne
   b87e0:	21a7      	movne	r1, #167	; 0xa7
   b87e2:	21a6      	moveq	r1, #166	; 0xa6
   b87e4:	f7ff ffb2 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b87e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b87ea:	b188      	cbz	r0, b8810 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b87ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b87ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b87f2:	f003 bed9 	b.w	bc5a8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b87f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b87f8:	b118      	cbz	r0, b8802 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b87fa:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b87fe:	f004 f91b 	bl	bca38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8802:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8806:	2100      	movs	r1, #0
   b8808:	b280      	uxth	r0, r0
   b880a:	f004 fd72 	bl	bd2f2 <digitalWrite>
   b880e:	e7e4      	b.n	b87da <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b8810:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8814:	2101      	movs	r1, #1
   b8816:	b280      	uxth	r0, r0
   b8818:	f004 fd6b 	bl	bd2f2 <digitalWrite>
   b881c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b881e:	b118      	cbz	r0, b8828 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b8820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b8824:	f004 b8ee 	b.w	bca04 <_ZN8SPIClass14endTransactionEv>
}
   b8828:	bd38      	pop	{r3, r4, r5, pc}

000b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b882a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b882e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8830:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b8832:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8834:	188f      	adds	r7, r1, r2
   b8836:	b340      	cbz	r0, b888a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b8838:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b883c:	f003 fec2 	bl	bc5c4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8840:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8842:	6803      	ldr	r3, [r0, #0]
   b8844:	2100      	movs	r1, #0
   b8846:	689b      	ldr	r3, [r3, #8]
   b8848:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b884a:	2601      	movs	r6, #1
    while(n--) {
   b884c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b884e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b8850:	d017      	beq.n	b8882 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b8852:	2e1f      	cmp	r6, #31
   b8854:	d90c      	bls.n	b8870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b8856:	f003 febc 	bl	bc5d2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b885a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b885e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8860:	f003 feb0 	bl	bc5c4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8864:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8866:	6803      	ldr	r3, [r0, #0]
   b8868:	2100      	movs	r1, #0
   b886a:	689b      	ldr	r3, [r3, #8]
   b886c:	4798      	blx	r3
        bytesOut = 1;
   b886e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b8870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8872:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8876:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8878:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b887a:	689b      	ldr	r3, [r3, #8]
   b887c:	4798      	blx	r3
      bytesOut++;
   b887e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b8880:	e7e4      	b.n	b884c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b8882:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b8886:	f003 bea4 	b.w	bc5d2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b888a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b888e:	4601      	mov	r1, r0
   b8890:	b298      	uxth	r0, r3
   b8892:	f004 fd2e 	bl	bd2f2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b8896:	42bd      	cmp	r5, r7
   b8898:	d022      	beq.n	b88e0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b889a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b889c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b88a0:	b118      	cbz	r0, b88aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b88a2:	4649      	mov	r1, r9
   b88a4:	f004 f936 	bl	bcb14 <_ZN8SPIClass8transferEh>
   b88a8:	e7f5      	b.n	b8896 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b88aa:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b88ac:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b88b0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b88b4:	ea09 0108 	and.w	r1, r9, r8
   b88b8:	b280      	uxth	r0, r0
   b88ba:	f004 fd1a 	bl	bd2f2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b88be:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b88c2:	2101      	movs	r1, #1
   b88c4:	b280      	uxth	r0, r0
   b88c6:	f004 fd14 	bl	bd2f2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b88ca:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b88ce:	2100      	movs	r1, #0
   b88d0:	b280      	uxth	r0, r0
   b88d2:	f004 fd0e 	bl	bd2f2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b88d6:	3e01      	subs	r6, #1
   b88d8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b88dc:	d1e8      	bne.n	b88b0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b88de:	e7da      	b.n	b8896 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b88e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b88e4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b88e4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b88e8:	1dda      	adds	r2, r3, #7
   b88ea:	bf48      	it	mi
   b88ec:	f103 020e 	addmi.w	r2, r3, #14
   b88f0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b88f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b88f6:	10d2      	asrs	r2, r2, #3
   b88f8:	435a      	muls	r2, r3
   b88fa:	2100      	movs	r1, #0
   b88fc:	f005 bcad 	b.w	be25a <memset>

000b8900 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b8900:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8904:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8906:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b8908:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b890c:	4604      	mov	r4, r0
   b890e:	460f      	mov	r7, r1
   b8910:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8912:	b1c3      	cbz	r3, b8946 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b8914:	4620      	mov	r0, r4
   b8916:	f7ff ffe5 	bl	b88e4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b891a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b891e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b8922:	2820      	cmp	r0, #32
   b8924:	dc21      	bgt.n	b896a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8926:	2320      	movs	r3, #32
   b8928:	2201      	movs	r2, #1
   b892a:	3820      	subs	r0, #32
   b892c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b8930:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b8934:	2373      	movs	r3, #115	; 0x73
   b8936:	3973      	subs	r1, #115	; 0x73
   b8938:	9300      	str	r3, [sp, #0]
   b893a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b893e:	4b89      	ldr	r3, [pc, #548]	; (b8b64 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b8940:	f340 024f 	sbfx	r2, r0, #1, #16
   b8944:	e021      	b.n	b898a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8946:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b894a:	1dd8      	adds	r0, r3, #7
   b894c:	bf48      	it	mi
   b894e:	f103 000e 	addmi.w	r0, r3, #14
   b8952:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b8956:	10c0      	asrs	r0, r0, #3
   b8958:	4358      	muls	r0, r3
   b895a:	f000 ff07 	bl	b976c <malloc>
   b895e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b8960:	2800      	cmp	r0, #0
   b8962:	d1d7      	bne.n	b8914 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b8964:	b004      	add	sp, #16
   b8966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b896a:	3840      	subs	r0, #64	; 0x40
   b896c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b8970:	fa02 f280 	sxtah	r2, r2, r0
   b8974:	2340      	movs	r3, #64	; 0x40
   b8976:	2001      	movs	r0, #1
   b8978:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b897c:	2352      	movs	r3, #82	; 0x52
   b897e:	3952      	subs	r1, #82	; 0x52
   b8980:	9300      	str	r3, [sp, #0]
   b8982:	4b79      	ldr	r3, [pc, #484]	; (b8b68 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b8984:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b8988:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b898a:	4620      	mov	r0, r4
   b898c:	f341 014f 	sbfx	r1, r1, #1, #16
   b8990:	f7ff fbec 	bl	b816c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b8994:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b8996:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b899a:	2800      	cmp	r0, #0
   b899c:	d078      	beq.n	b8a90 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b899e:	2d00      	cmp	r5, #0
   b89a0:	d174      	bne.n	b8a8c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b89a2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b89a6:	2b20      	cmp	r3, #32
   b89a8:	bf0c      	ite	eq
   b89aa:	253c      	moveq	r5, #60	; 0x3c
   b89ac:	253d      	movne	r5, #61	; 0x3d
   b89ae:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b89b2:	f1b8 0f00 	cmp.w	r8, #0
   b89b6:	d001      	beq.n	b89bc <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b89b8:	f003 fdfa 	bl	bc5b0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b89bc:	b1fe      	cbz	r6, b89fe <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b89be:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89c2:	2800      	cmp	r0, #0
   b89c4:	db1b      	blt.n	b89fe <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b89c6:	2101      	movs	r1, #1
   b89c8:	b280      	uxth	r0, r0
   b89ca:	f004 fc81 	bl	bd2d0 <pinMode>
    digitalWrite(rstPin, HIGH);
   b89ce:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89d2:	2101      	movs	r1, #1
   b89d4:	b280      	uxth	r0, r0
   b89d6:	f004 fc8c 	bl	bd2f2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b89da:	2001      	movs	r0, #1
   b89dc:	f000 ff2e 	bl	b983c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b89e0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89e4:	2100      	movs	r1, #0
   b89e6:	b280      	uxth	r0, r0
   b89e8:	f004 fc83 	bl	bd2f2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b89ec:	200a      	movs	r0, #10
   b89ee:	f000 ff25 	bl	b983c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b89f2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89f6:	2101      	movs	r1, #1
   b89f8:	b280      	uxth	r0, r0
   b89fa:	f004 fc7a 	bl	bd2f2 <digitalWrite>
  TRANSACTION_START
   b89fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8a00:	2800      	cmp	r0, #0
   b8a02:	d074      	beq.n	b8aee <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8a04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8a06:	f003 fdcf 	bl	bc5a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b8a0a:	2204      	movs	r2, #4
   b8a0c:	4957      	ldr	r1, [pc, #348]	; (b8b6c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b8a0e:	4620      	mov	r0, r4
   b8a10:	f7ff ff0b 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b8a14:	8961      	ldrh	r1, [r4, #10]
   b8a16:	3901      	subs	r1, #1
   b8a18:	b2c9      	uxtb	r1, r1
   b8a1a:	4620      	mov	r0, r4
   b8a1c:	f7ff fe96 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b8a20:	4953      	ldr	r1, [pc, #332]	; (b8b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b8a22:	2204      	movs	r2, #4
   b8a24:	4620      	mov	r0, r4
   b8a26:	f7ff ff00 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b8a2a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8a2e:	2b01      	cmp	r3, #1
   b8a30:	bf0c      	ite	eq
   b8a32:	2110      	moveq	r1, #16
   b8a34:	2114      	movne	r1, #20
   b8a36:	4620      	mov	r0, r4
   b8a38:	f7ff fe88 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8a3c:	2204      	movs	r2, #4
   b8a3e:	494d      	ldr	r1, [pc, #308]	; (b8b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b8a40:	4620      	mov	r0, r4
   b8a42:	f7ff fef2 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b8a46:	68a3      	ldr	r3, [r4, #8]
   b8a48:	4a4b      	ldr	r2, [pc, #300]	; (b8b78 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b8a4a:	4293      	cmp	r3, r2
   b8a4c:	d15c      	bne.n	b8b08 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b8a4e:	494b      	ldr	r1, [pc, #300]	; (b8b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b8a50:	2204      	movs	r2, #4
   b8a52:	4620      	mov	r0, r4
   b8a54:	f7ff fee9 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b8a58:	21d9      	movs	r1, #217	; 0xd9
   b8a5a:	4620      	mov	r0, r4
   b8a5c:	f7ff fe76 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8a60:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8a64:	2b01      	cmp	r3, #1
   b8a66:	bf0c      	ite	eq
   b8a68:	2122      	moveq	r1, #34	; 0x22
   b8a6a:	21f1      	movne	r1, #241	; 0xf1
   b8a6c:	4620      	mov	r0, r4
   b8a6e:	f7ff fe6d 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b8a72:	4620      	mov	r0, r4
   b8a74:	4942      	ldr	r1, [pc, #264]	; (b8b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b8a76:	2206      	movs	r2, #6
   b8a78:	f7ff fed7 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8a7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8a7e:	2800      	cmp	r0, #0
   b8a80:	d063      	beq.n	b8b4a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b8a82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8a84:	f003 fd90 	bl	bc5a8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b8a88:	2001      	movs	r0, #1
   b8a8a:	e76b      	b.n	b8964 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8a8c:	b26d      	sxtb	r5, r5
   b8a8e:	e78e      	b.n	b89ae <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8a90:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8a94:	2101      	movs	r1, #1
   b8a96:	b280      	uxth	r0, r0
   b8a98:	f004 fc1a 	bl	bd2d0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b8a9c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8aa0:	2101      	movs	r1, #1
   b8aa2:	b280      	uxth	r0, r0
   b8aa4:	f004 fc14 	bl	bd2d0 <pinMode>
    SSD1306_DESELECT
   b8aa8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8aac:	2101      	movs	r1, #1
   b8aae:	b280      	uxth	r0, r0
   b8ab0:	f004 fc1f 	bl	bd2f2 <digitalWrite>
    if(spi) { // Hardware SPI
   b8ab4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b8ab6:	b13d      	cbz	r5, b8ac8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b8ab8:	f1b8 0f00 	cmp.w	r8, #0
   b8abc:	f43f af7e 	beq.w	b89bc <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b8ac0:	4628      	mov	r0, r5
   b8ac2:	f003 ff8b 	bl	bc9dc <_ZN8SPIClass5beginEv>
   b8ac6:	e779      	b.n	b89bc <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b8ac8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8acc:	2101      	movs	r1, #1
   b8ace:	b280      	uxth	r0, r0
   b8ad0:	f004 fbfe 	bl	bd2d0 <pinMode>
      pinMode(clkPin , OUTPUT);
   b8ad4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8ad8:	2101      	movs	r1, #1
   b8ada:	b280      	uxth	r0, r0
   b8adc:	f004 fbf8 	bl	bd2d0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8ae0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8ae4:	4629      	mov	r1, r5
   b8ae6:	b280      	uxth	r0, r0
   b8ae8:	f004 fc03 	bl	bd2f2 <digitalWrite>
   b8aec:	e766      	b.n	b89bc <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b8aee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8af0:	b118      	cbz	r0, b8afa <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b8af2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8af6:	f003 ff9f 	bl	bca38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8afa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8afe:	2100      	movs	r1, #0
   b8b00:	b280      	uxth	r0, r0
   b8b02:	f004 fbf6 	bl	bd2f2 <digitalWrite>
   b8b06:	e780      	b.n	b8a0a <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b8b08:	4a1e      	ldr	r2, [pc, #120]	; (b8b84 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b8b0a:	4293      	cmp	r3, r2
   b8b0c:	d10e      	bne.n	b8b2c <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8b0e:	491e      	ldr	r1, [pc, #120]	; (b8b88 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b8b10:	2203      	movs	r2, #3
   b8b12:	4620      	mov	r0, r4
   b8b14:	f7ff fe89 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b8b18:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8b1c:	2b01      	cmp	r3, #1
   b8b1e:	bf0c      	ite	eq
   b8b20:	219f      	moveq	r1, #159	; 0x9f
   b8b22:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8b24:	4620      	mov	r0, r4
   b8b26:	f7ff fe11 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b8b2a:	e795      	b.n	b8a58 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b8b2c:	4a17      	ldr	r2, [pc, #92]	; (b8b8c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b8b2e:	4293      	cmp	r3, r2
   b8b30:	d192      	bne.n	b8a58 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b8b32:	4917      	ldr	r1, [pc, #92]	; (b8b90 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b8b34:	2203      	movs	r2, #3
   b8b36:	4620      	mov	r0, r4
   b8b38:	f7ff fe77 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8b3c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8b40:	2b01      	cmp	r3, #1
   b8b42:	bf0c      	ite	eq
   b8b44:	2110      	moveq	r1, #16
   b8b46:	21af      	movne	r1, #175	; 0xaf
   b8b48:	e7ec      	b.n	b8b24 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b8b4a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8b4e:	2101      	movs	r1, #1
   b8b50:	b280      	uxth	r0, r0
   b8b52:	f004 fbce 	bl	bd2f2 <digitalWrite>
   b8b56:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8b58:	2800      	cmp	r0, #0
   b8b5a:	d095      	beq.n	b8a88 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8b5c:	f003 ff52 	bl	bca04 <_ZN8SPIClass14endTransactionEv>
   b8b60:	e792      	b.n	b8a88 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8b62:	bf00      	nop
   b8b64:	000c13c0 	.word	0x000c13c0
   b8b68:	000c1100 	.word	0x000c1100
   b8b6c:	000c1608 	.word	0x000c1608
   b8b70:	000c160c 	.word	0x000c160c
   b8b74:	000c1610 	.word	0x000c1610
   b8b78:	00200080 	.word	0x00200080
   b8b7c:	000c161a 	.word	0x000c161a
   b8b80:	000c1614 	.word	0x000c1614
   b8b84:	00400080 	.word	0x00400080
   b8b88:	000c161e 	.word	0x000c161e
   b8b8c:	00100060 	.word	0x00100060
   b8b90:	000c1621 	.word	0x000c1621

000b8b94 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8b94:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8b96:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8b98:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8b9c:	db3d      	blt.n	b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8b9e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8ba2:	4294      	cmp	r4, r2
   b8ba4:	dd39      	ble.n	b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b8ba6:	2900      	cmp	r1, #0
      w += x;
   b8ba8:	bfbe      	ittt	lt
   b8baa:	185b      	addlt	r3, r3, r1
   b8bac:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8bae:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8bb0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8bb4:	18ce      	adds	r6, r1, r3
   b8bb6:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8bb8:	bfc4      	itt	gt
   b8bba:	1a63      	subgt	r3, r4, r1
   b8bbc:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8bbe:	2b00      	cmp	r3, #0
   b8bc0:	dd2b      	ble.n	b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8bc2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8bc4:	10d6      	asrs	r6, r2, #3
   b8bc6:	fb14 1106 	smlabb	r1, r4, r6, r1
   b8bca:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8bcc:	f002 0007 	and.w	r0, r2, #7
   b8bd0:	2201      	movs	r2, #1
   b8bd2:	4082      	lsls	r2, r0
      switch(color) {
   b8bd4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b8bd6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8bd8:	d016      	beq.n	b8c08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8bda:	2d02      	cmp	r5, #2
   b8bdc:	d00b      	beq.n	b8bf6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8bde:	b9e5      	cbnz	r5, b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8be0:	43d2      	mvns	r2, r2
   b8be2:	b2d2      	uxtb	r2, r2
   b8be4:	440b      	add	r3, r1
   b8be6:	4299      	cmp	r1, r3
   b8be8:	d017      	beq.n	b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8bea:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8bee:	4010      	ands	r0, r2
   b8bf0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8bf4:	e7f7      	b.n	b8be6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b8bf6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8bf8:	4299      	cmp	r1, r3
   b8bfa:	d00e      	beq.n	b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8bfc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8c00:	4050      	eors	r0, r2
   b8c02:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8c06:	e7f7      	b.n	b8bf8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8c08:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8c0a:	4299      	cmp	r1, r3
   b8c0c:	d005      	beq.n	b8c1a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8c0e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8c12:	4310      	orrs	r0, r2
   b8c14:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8c18:	e7f7      	b.n	b8c0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8c1a:	bd70      	pop	{r4, r5, r6, pc}

000b8c1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8c1e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8c20:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8c24:	db76      	blt.n	b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b8c26:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b8c2a:	42b1      	cmp	r1, r6
   b8c2c:	da72      	bge.n	b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8c2e:	2a00      	cmp	r2, #0
      __h += __y;
   b8c30:	bfbe      	ittt	lt
   b8c32:	189b      	addlt	r3, r3, r2
   b8c34:	b21b      	sxthlt	r3, r3
      __y = 0;
   b8c36:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b8c38:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8c3c:	18d7      	adds	r7, r2, r3
   b8c3e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8c40:	bfc4      	itt	gt
   b8c42:	1aa3      	subgt	r3, r4, r2
   b8c44:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b8c46:	2b00      	cmp	r3, #0
   b8c48:	dd64      	ble.n	b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8c4a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8c4e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8c50:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8c54:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b8c58:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8c5a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8c5e:	d023      	beq.n	b8ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8c60:	f1c2 0208 	rsb	r2, r2, #8
   b8c64:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8c66:	492d      	ldr	r1, [pc, #180]	; (b8d1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8c68:	4293      	cmp	r3, r2
   b8c6a:	bf3c      	itt	cc
   b8c6c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8c70:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8c74:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8c76:	bf3c      	itt	cc
   b8c78:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8c7c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8c80:	2d01      	cmp	r5, #1
   b8c82:	d007      	beq.n	b8c94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8c84:	2d02      	cmp	r5, #2
   b8c86:	d02e      	beq.n	b8ce6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8c88:	b94d      	cbnz	r5, b8c9e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b8c8a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8c8e:	ea2c 0101 	bic.w	r1, ip, r1
   b8c92:	e003      	b.n	b8c9c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8c94:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8c98:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8c9c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8c9e:	4293      	cmp	r3, r2
   b8ca0:	d338      	bcc.n	b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8ca2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b8ca6:	440c      	add	r4, r1
        h -= mod;
   b8ca8:	1a9a      	subs	r2, r3, r2
   b8caa:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8cac:	2a07      	cmp	r2, #7
   b8cae:	d90e      	bls.n	b8cce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8cb0:	2d02      	cmp	r5, #2
   b8cb2:	d11d      	bne.n	b8cf0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8cb4:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b8cb6:	7821      	ldrb	r1, [r4, #0]
   b8cb8:	43c9      	mvns	r1, r1
   b8cba:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8cbc:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8cbe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8cc2:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8cc4:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8cc6:	440c      	add	r4, r1
            } while(h >= 8);
   b8cc8:	d8f5      	bhi.n	b8cb6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b8cca:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8cce:	b30a      	cbz	r2, b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8cd0:	4b13      	ldr	r3, [pc, #76]	; (b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8cd2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8cd4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b8cd6:	d01a      	beq.n	b8d0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8cd8:	2d02      	cmp	r5, #2
   b8cda:	d01c      	beq.n	b8d16 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8cdc:	b9d5      	cbnz	r5, b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8cde:	7822      	ldrb	r2, [r4, #0]
   b8ce0:	ea22 0303 	bic.w	r3, r2, r3
   b8ce4:	e015      	b.n	b8d12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b8ce6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8cea:	ea81 010c 	eor.w	r1, r1, ip
   b8cee:	e7d5      	b.n	b8c9c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8cf0:	1e29      	subs	r1, r5, #0
   b8cf2:	bf18      	it	ne
   b8cf4:	2101      	movne	r1, #1
   b8cf6:	4249      	negs	r1, r1
   b8cf8:	b2c9      	uxtb	r1, r1
   b8cfa:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8cfc:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8cfe:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8d00:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b8d04:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8d06:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8d08:	4434      	add	r4, r6
            } while(h >= 8);
   b8d0a:	d8f7      	bhi.n	b8cfc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8d0c:	e7dd      	b.n	b8cca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8d0e:	7822      	ldrb	r2, [r4, #0]
   b8d10:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b8d12:	7023      	strb	r3, [r4, #0]
}
   b8d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b8d16:	7822      	ldrb	r2, [r4, #0]
   b8d18:	4053      	eors	r3, r2
   b8d1a:	e7fa      	b.n	b8d12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8d1c:	000c15f8 	.word	0x000c15f8
   b8d20:	000c1600 	.word	0x000c1600

000b8d24 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8d24:	b470      	push	{r4, r5, r6}
   b8d26:	4614      	mov	r4, r2
  switch(rotation) {
   b8d28:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8d2a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8d2e:	2a02      	cmp	r2, #2
   b8d30:	d00d      	beq.n	b8d4e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b8d32:	2a03      	cmp	r2, #3
   b8d34:	d018      	beq.n	b8d68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b8d36:	2a01      	cmp	r2, #1
   b8d38:	d111      	bne.n	b8d5e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b8d3a:	8902      	ldrh	r2, [r0, #8]
   b8d3c:	43e4      	mvns	r4, r4
   b8d3e:	4414      	add	r4, r2
   b8d40:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8d42:	9603      	str	r6, [sp, #12]
   b8d44:	460a      	mov	r2, r1
   b8d46:	4621      	mov	r1, r4
}
   b8d48:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8d4a:	f7ff bf67 	b.w	b8c1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8d4e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8d50:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8d52:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8d54:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b8d56:	4414      	add	r4, r2
    x -= (w-1);
   b8d58:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b8d5a:	b224      	sxth	r4, r4
    x -= (w-1);
   b8d5c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8d5e:	9603      	str	r6, [sp, #12]
   b8d60:	4622      	mov	r2, r4
}
   b8d62:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8d64:	f7ff bf16 	b.w	b8b94 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8d68:	8945      	ldrh	r5, [r0, #10]
   b8d6a:	4419      	add	r1, r3
   b8d6c:	1a69      	subs	r1, r5, r1
   b8d6e:	b209      	sxth	r1, r1
    break;
   b8d70:	e7e7      	b.n	b8d42 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8d72 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8d72:	b430      	push	{r4, r5}
   b8d74:	4614      	mov	r4, r2
  switch(rotation) {
   b8d76:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8d78:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8d7c:	2a02      	cmp	r2, #2
   b8d7e:	d00d      	beq.n	b8d9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8d80:	2a03      	cmp	r2, #3
   b8d82:	d018      	beq.n	b8db6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8d84:	2a01      	cmp	r2, #1
   b8d86:	d111      	bne.n	b8dac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8d88:	18e2      	adds	r2, r4, r3
   b8d8a:	8904      	ldrh	r4, [r0, #8]
   b8d8c:	1aa4      	subs	r4, r4, r2
   b8d8e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8d90:	9502      	str	r5, [sp, #8]
   b8d92:	460a      	mov	r2, r1
   b8d94:	4621      	mov	r1, r4
}
   b8d96:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8d98:	f7ff befc 	b.w	b8b94 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8d9c:	8902      	ldrh	r2, [r0, #8]
   b8d9e:	43c9      	mvns	r1, r1
   b8da0:	4411      	add	r1, r2
    y -= (h-1);
   b8da2:	18e2      	adds	r2, r4, r3
   b8da4:	8944      	ldrh	r4, [r0, #10]
   b8da6:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8da8:	b209      	sxth	r1, r1
    y -= (h-1);
   b8daa:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8dac:	9502      	str	r5, [sp, #8]
   b8dae:	4622      	mov	r2, r4
}
   b8db0:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8db2:	f7ff bf33 	b.w	b8c1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b8db6:	8942      	ldrh	r2, [r0, #10]
   b8db8:	43c9      	mvns	r1, r1
   b8dba:	4411      	add	r1, r2
   b8dbc:	b209      	sxth	r1, r1
    break;
   b8dbe:	e7e7      	b.n	b8d90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8dc0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8dc4:	4604      	mov	r4, r0
  TRANSACTION_START
   b8dc6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8dc8:	2800      	cmp	r0, #0
   b8dca:	d042      	beq.n	b8e52 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8dcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8dce:	f003 fbeb 	bl	bc5a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8dd2:	4947      	ldr	r1, [pc, #284]	; (b8ef0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8dd4:	2205      	movs	r2, #5
   b8dd6:	4620      	mov	r0, r4
   b8dd8:	f7ff fd27 	bl	b882a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8ddc:	8921      	ldrh	r1, [r4, #8]
   b8dde:	3901      	subs	r1, #1
   b8de0:	4620      	mov	r0, r4
   b8de2:	b2c9      	uxtb	r1, r1
   b8de4:	f7ff fcb2 	bl	b874c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8de8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8dec:	1dde      	adds	r6, r3, #7
   b8dee:	bf48      	it	mi
   b8df0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8df4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8df8:	8923      	ldrh	r3, [r4, #8]
   b8dfa:	10f6      	asrs	r6, r6, #3
   b8dfc:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8e00:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8e04:	2800      	cmp	r0, #0
   b8e06:	d03a      	beq.n	b8e7e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8e08:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8e0c:	f003 fbda 	bl	bc5c4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8e10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e12:	6803      	ldr	r3, [r0, #0]
   b8e14:	2140      	movs	r1, #64	; 0x40
   b8e16:	689b      	ldr	r3, [r3, #8]
   b8e18:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8e1a:	2701      	movs	r7, #1
    while(count--) {
   b8e1c:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8e1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8e20:	d024      	beq.n	b8e6c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b8e22:	2f1f      	cmp	r7, #31
   b8e24:	d90c      	bls.n	b8e40 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b8e26:	f003 fbd4 	bl	bc5d2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8e2a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8e2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e30:	f003 fbc8 	bl	bc5c4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8e34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e36:	6803      	ldr	r3, [r0, #0]
   b8e38:	2140      	movs	r1, #64	; 0x40
   b8e3a:	689b      	ldr	r3, [r3, #8]
   b8e3c:	4798      	blx	r3
        bytesOut = 1;
   b8e3e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8e40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e42:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8e46:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8e48:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8e4a:	689b      	ldr	r3, [r3, #8]
   b8e4c:	4798      	blx	r3
      bytesOut++;
   b8e4e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8e50:	e7e4      	b.n	b8e1c <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8e52:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8e54:	b118      	cbz	r0, b8e5e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b8e56:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8e5a:	f003 fded 	bl	bca38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8e5e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8e62:	2100      	movs	r1, #0
   b8e64:	b280      	uxth	r0, r0
   b8e66:	f004 fa44 	bl	bd2f2 <digitalWrite>
   b8e6a:	e7b2      	b.n	b8dd2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8e6c:	f003 fbb1 	bl	bc5d2 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8e70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e72:	b378      	cbz	r0, b8ed4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8e74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8e76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8e7a:	f003 bb95 	b.w	bc5a8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8e7e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8e82:	2101      	movs	r1, #1
   b8e84:	b280      	uxth	r0, r0
   b8e86:	f004 fa34 	bl	bd2f2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b8e8a:	42ae      	cmp	r6, r5
   b8e8c:	d0f0      	beq.n	b8e70 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8e90:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8e94:	b118      	cbz	r0, b8e9e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b8e96:	4649      	mov	r1, r9
   b8e98:	f003 fe3c 	bl	bcb14 <_ZN8SPIClass8transferEh>
   b8e9c:	e7f5      	b.n	b8e8a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8e9e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8ea0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8ea4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8ea8:	ea09 0108 	and.w	r1, r9, r8
   b8eac:	b280      	uxth	r0, r0
   b8eae:	f004 fa20 	bl	bd2f2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8eb2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8eb6:	2101      	movs	r1, #1
   b8eb8:	b280      	uxth	r0, r0
   b8eba:	f004 fa1a 	bl	bd2f2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8ebe:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8ec2:	2100      	movs	r1, #0
   b8ec4:	b280      	uxth	r0, r0
   b8ec6:	f004 fa14 	bl	bd2f2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8eca:	3f01      	subs	r7, #1
   b8ecc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8ed0:	d1e8      	bne.n	b8ea4 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8ed2:	e7da      	b.n	b8e8a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8ed4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8ed8:	2101      	movs	r1, #1
   b8eda:	b280      	uxth	r0, r0
   b8edc:	f004 fa09 	bl	bd2f2 <digitalWrite>
   b8ee0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8ee2:	b118      	cbz	r0, b8eec <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8ee4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8ee8:	f003 bd8c 	b.w	bca04 <_ZN8SPIClass14endTransactionEv>
}
   b8eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8ef0:	000c1624 	.word	0x000c1624

000b8ef4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b8ef4:	2100      	movs	r1, #0
   b8ef6:	220a      	movs	r2, #10
   b8ef8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b8efc:	4770      	bx	lr

000b8efe <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b8efe:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b8f00:	b510      	push	{r4, lr}
   b8f02:	4604      	mov	r4, r0
    this->pin = pin;
   b8f04:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b8f06:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b8f08:	b288      	uxth	r0, r1
   b8f0a:	f004 fa0b 	bl	bd324 <digitalRead>
   b8f0e:	b108      	cbz	r0, b8f14 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b8f10:	2303      	movs	r3, #3
   b8f12:	71a3      	strb	r3, [r4, #6]
   b8f14:	f000 f9ae 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b8f18:	6020      	str	r0, [r4, #0]
#endif
}
   b8f1a:	bd10      	pop	{r4, pc}

000b8f1c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b8f1c:	b538      	push	{r3, r4, r5, lr}
   b8f1e:	460c      	mov	r4, r1
   b8f20:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b8f22:	4611      	mov	r1, r2
   b8f24:	b2a0      	uxth	r0, r4
   b8f26:	f004 f9d3 	bl	bd2d0 <pinMode>
  
  this->attach(pin);
   b8f2a:	4621      	mov	r1, r4
   b8f2c:	4628      	mov	r0, r5
}
   b8f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b8f32:	f7ff bfe4 	b.w	b8efe <_ZN8Debounce6attachEi>
	...

000b8f38 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b8f38:	b510      	push	{r4, lr}
   b8f3a:	4b06      	ldr	r3, [pc, #24]	; (b8f54 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b8f3c:	6003      	str	r3, [r0, #0]
   b8f3e:	4604      	mov	r4, r0
	if (mutex) {
   b8f40:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b8f42:	b108      	cbz	r0, b8f48 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b8f44:	f000 f956 	bl	b91f4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b8f48:	4620      	mov	r0, r4
   b8f4a:	f7ff fb59 	bl	b8600 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b8f4e:	4620      	mov	r0, r4
   b8f50:	bd10      	pop	{r4, pc}
   b8f52:	bf00      	nop
   b8f54:	000c1634 	.word	0x000c1634

000b8f58 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b8f58:	b510      	push	{r4, lr}
   b8f5a:	4604      	mov	r4, r0
}
   b8f5c:	f7ff ffec 	bl	b8f38 <_ZN16OledWingAdafruitD1Ev>
   b8f60:	4620      	mov	r0, r4
   b8f62:	2170      	movs	r1, #112	; 0x70
   b8f64:	f7fb f89b 	bl	b409e <_ZdlPvj>
   b8f68:	4620      	mov	r0, r4
   b8f6a:	bd10      	pop	{r4, pc}

000b8f6c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b8f6c:	b530      	push	{r4, r5, lr}
   b8f6e:	b085      	sub	sp, #20
   b8f70:	4604      	mov	r4, r0
   b8f72:	460d      	mov	r5, r1
   b8f74:	f004 fa18 	bl	bd3a8 <_Z19__fetch_global_Wirev>
   b8f78:	4a10      	ldr	r2, [pc, #64]	; (b8fbc <_ZN16OledWingAdafruitC1Ei+0x50>)
   b8f7a:	4911      	ldr	r1, [pc, #68]	; (b8fc0 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b8f7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b8f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8f84:	2180      	movs	r1, #128	; 0x80
   b8f86:	4603      	mov	r3, r0
   b8f88:	9200      	str	r2, [sp, #0]
   b8f8a:	4620      	mov	r0, r4
   b8f8c:	2220      	movs	r2, #32
   b8f8e:	f7ff fbaf 	bl	b86f0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b8f92:	4b0c      	ldr	r3, [pc, #48]	; (b8fc4 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b8f94:	6023      	str	r3, [r4, #0]
   b8f96:	2300      	movs	r3, #0
   b8f98:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b8f9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8fa0:	f7ff ffa8 	bl	b8ef4 <_ZN8DebounceC1Ev>
   b8fa4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b8fa8:	f7ff ffa4 	bl	b8ef4 <_ZN8DebounceC1Ev>
   b8fac:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b8fb0:	f7ff ffa0 	bl	b8ef4 <_ZN8DebounceC1Ev>
}
   b8fb4:	4620      	mov	r0, r4
   b8fb6:	b005      	add	sp, #20
   b8fb8:	bd30      	pop	{r4, r5, pc}
   b8fba:	bf00      	nop
   b8fbc:	00061a80 	.word	0x00061a80
   b8fc0:	000186a0 	.word	0x000186a0
   b8fc4:	000c1634 	.word	0x000c1634

000b8fc8 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b8fc8:	b513      	push	{r0, r1, r4, lr}
   b8fca:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b8fcc:	3050      	adds	r0, #80	; 0x50
   b8fce:	f000 f909 	bl	b91e4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b8fd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8fd4:	07d9      	lsls	r1, r3, #31
   b8fd6:	d505      	bpl.n	b8fe4 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b8fd8:	2202      	movs	r2, #2
   b8fda:	2104      	movs	r1, #4
   b8fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8fe0:	f7ff ff9c 	bl	b8f1c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b8fe4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8fe6:	079a      	lsls	r2, r3, #30
   b8fe8:	d505      	bpl.n	b8ff6 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b8fea:	2200      	movs	r2, #0
   b8fec:	2103      	movs	r1, #3
   b8fee:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b8ff2:	f7ff ff93 	bl	b8f1c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b8ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8ff8:	075b      	lsls	r3, r3, #29
   b8ffa:	d505      	bpl.n	b9008 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b8ffc:	2202      	movs	r2, #2
   b8ffe:	4611      	mov	r1, r2
   b9000:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b9004:	f7ff ff8a 	bl	b8f1c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b9008:	2301      	movs	r3, #1
   b900a:	9300      	str	r3, [sp, #0]
   b900c:	223c      	movs	r2, #60	; 0x3c
   b900e:	2102      	movs	r1, #2
   b9010:	4620      	mov	r0, r4
   b9012:	f7ff fc75 	bl	b8900 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b9016:	b002      	add	sp, #8
   b9018:	bd10      	pop	{r4, pc}
	...

000b901c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b901c:	b508      	push	{r3, lr}
   b901e:	4b02      	ldr	r3, [pc, #8]	; (b9028 <hal_ble_stack_init+0xc>)
   b9020:	681b      	ldr	r3, [r3, #0]
   b9022:	689b      	ldr	r3, [r3, #8]
   b9024:	9301      	str	r3, [sp, #4]
   b9026:	bd08      	pop	{r3, pc}
   b9028:	00030278 	.word	0x00030278

000b902c <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b902c:	b508      	push	{r3, lr}
   b902e:	4b02      	ldr	r3, [pc, #8]	; (b9038 <hal_ble_gap_set_tx_power+0xc>)
   b9030:	681b      	ldr	r3, [r3, #0]
   b9032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9034:	9301      	str	r3, [sp, #4]
   b9036:	bd08      	pop	{r3, pc}
   b9038:	00030278 	.word	0x00030278

000b903c <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b903c:	b508      	push	{r3, lr}
   b903e:	4b02      	ldr	r3, [pc, #8]	; (b9048 <hal_ble_gap_set_scan_parameters+0xc>)
   b9040:	681b      	ldr	r3, [r3, #0]
   b9042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9044:	9301      	str	r3, [sp, #4]
   b9046:	bd08      	pop	{r3, pc}
   b9048:	00030278 	.word	0x00030278

000b904c <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b904c:	b508      	push	{r3, lr}
   b904e:	4b02      	ldr	r3, [pc, #8]	; (b9058 <hal_ble_gap_get_scan_parameters+0xc>)
   b9050:	681b      	ldr	r3, [r3, #0]
   b9052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9054:	9301      	str	r3, [sp, #4]
   b9056:	bd08      	pop	{r3, pc}
   b9058:	00030278 	.word	0x00030278

000b905c <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b905c:	b508      	push	{r3, lr}
   b905e:	4b02      	ldr	r3, [pc, #8]	; (b9068 <hal_ble_gap_start_scan+0xc>)
   b9060:	681b      	ldr	r3, [r3, #0]
   b9062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9064:	9301      	str	r3, [sp, #4]
   b9066:	bd08      	pop	{r3, pc}
   b9068:	00030278 	.word	0x00030278

000b906c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b906c:	b508      	push	{r3, lr}
   b906e:	4b03      	ldr	r3, [pc, #12]	; (b907c <hal_ble_gap_stop_scan+0x10>)
   b9070:	681b      	ldr	r3, [r3, #0]
   b9072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b9076:	9301      	str	r3, [sp, #4]
   b9078:	bd08      	pop	{r3, pc}
   b907a:	0000      	.short	0x0000
   b907c:	00030278 	.word	0x00030278

000b9080 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b9080:	b508      	push	{r3, lr}
   b9082:	4b03      	ldr	r3, [pc, #12]	; (b9090 <hal_ble_gap_disconnect+0x10>)
   b9084:	681b      	ldr	r3, [r3, #0]
   b9086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b908a:	9301      	str	r3, [sp, #4]
   b908c:	bd08      	pop	{r3, pc}
   b908e:	0000      	.short	0x0000
   b9090:	00030278 	.word	0x00030278

000b9094 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9094:	b508      	push	{r3, lr}
   b9096:	4b03      	ldr	r3, [pc, #12]	; (b90a4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b9098:	681b      	ldr	r3, [r3, #0]
   b909a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b909e:	9301      	str	r3, [sp, #4]
   b90a0:	bd08      	pop	{r3, pc}
   b90a2:	0000      	.short	0x0000
   b90a4:	00030278 	.word	0x00030278

000b90a8 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b90a8:	b508      	push	{r3, lr}
   b90aa:	4b03      	ldr	r3, [pc, #12]	; (b90b8 <hal_ble_gatt_client_discover_all_services+0x10>)
   b90ac:	681b      	ldr	r3, [r3, #0]
   b90ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b90b2:	9301      	str	r3, [sp, #4]
   b90b4:	bd08      	pop	{r3, pc}
   b90b6:	0000      	.short	0x0000
   b90b8:	00030278 	.word	0x00030278

000b90bc <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b90bc:	b508      	push	{r3, lr}
   b90be:	4b03      	ldr	r3, [pc, #12]	; (b90cc <hal_ble_gatt_client_discover_characteristics+0x10>)
   b90c0:	681b      	ldr	r3, [r3, #0]
   b90c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b90c6:	9301      	str	r3, [sp, #4]
   b90c8:	bd08      	pop	{r3, pc}
   b90ca:	0000      	.short	0x0000
   b90cc:	00030278 	.word	0x00030278

000b90d0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b90d0:	b508      	push	{r3, lr}
   b90d2:	4b03      	ldr	r3, [pc, #12]	; (b90e0 <hal_ble_gatt_client_write_with_response+0x10>)
   b90d4:	681b      	ldr	r3, [r3, #0]
   b90d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b90da:	9301      	str	r3, [sp, #4]
   b90dc:	bd08      	pop	{r3, pc}
   b90de:	0000      	.short	0x0000
   b90e0:	00030278 	.word	0x00030278

000b90e4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b90e4:	b508      	push	{r3, lr}
   b90e6:	4b03      	ldr	r3, [pc, #12]	; (b90f4 <hal_ble_gatt_client_write_without_response+0x10>)
   b90e8:	681b      	ldr	r3, [r3, #0]
   b90ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b90ee:	9301      	str	r3, [sp, #4]
   b90f0:	bd08      	pop	{r3, pc}
   b90f2:	0000      	.short	0x0000
   b90f4:	00030278 	.word	0x00030278

000b90f8 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b90f8:	b508      	push	{r3, lr}
   b90fa:	4b03      	ldr	r3, [pc, #12]	; (b9108 <hal_ble_gatt_client_read+0x10>)
   b90fc:	681b      	ldr	r3, [r3, #0]
   b90fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b9102:	9301      	str	r3, [sp, #4]
   b9104:	bd08      	pop	{r3, pc}
   b9106:	0000      	.short	0x0000
   b9108:	00030278 	.word	0x00030278

000b910c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b910c:	b508      	push	{r3, lr}
   b910e:	4b03      	ldr	r3, [pc, #12]	; (b911c <hal_ble_gap_connect+0x10>)
   b9110:	681b      	ldr	r3, [r3, #0]
   b9112:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b9116:	9301      	str	r3, [sp, #4]
   b9118:	bd08      	pop	{r3, pc}
   b911a:	0000      	.short	0x0000
   b911c:	00030278 	.word	0x00030278

000b9120 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b9120:	b508      	push	{r3, lr}
   b9122:	4b03      	ldr	r3, [pc, #12]	; (b9130 <hal_ble_gap_get_connection_info+0x10>)
   b9124:	681b      	ldr	r3, [r3, #0]
   b9126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b912a:	9301      	str	r3, [sp, #4]
   b912c:	bd08      	pop	{r3, pc}
   b912e:	0000      	.short	0x0000
   b9130:	00030278 	.word	0x00030278

000b9134 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9134:	b508      	push	{r3, lr}
   b9136:	4b03      	ldr	r3, [pc, #12]	; (b9144 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9138:	681b      	ldr	r3, [r3, #0]
   b913a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b913e:	9301      	str	r3, [sp, #4]
   b9140:	bd08      	pop	{r3, pc}
   b9142:	0000      	.short	0x0000
   b9144:	00030278 	.word	0x00030278

000b9148 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b9148:	b508      	push	{r3, lr}
   b914a:	4b03      	ldr	r3, [pc, #12]	; (b9158 <hal_ble_gatt_client_configure_cccd+0x10>)
   b914c:	681b      	ldr	r3, [r3, #0]
   b914e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b9152:	9301      	str	r3, [sp, #4]
   b9154:	bd08      	pop	{r3, pc}
   b9156:	0000      	.short	0x0000
   b9158:	00030278 	.word	0x00030278

000b915c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b915c:	b508      	push	{r3, lr}
   b915e:	4b03      	ldr	r3, [pc, #12]	; (b916c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b9160:	681b      	ldr	r3, [r3, #0]
   b9162:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9166:	9301      	str	r3, [sp, #4]
   b9168:	bd08      	pop	{r3, pc}
   b916a:	0000      	.short	0x0000
   b916c:	00030278 	.word	0x00030278

000b9170 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9170:	b508      	push	{r3, lr}
   b9172:	4b03      	ldr	r3, [pc, #12]	; (b9180 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9174:	681b      	ldr	r3, [r3, #0]
   b9176:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b917a:	9301      	str	r3, [sp, #4]
   b917c:	bd08      	pop	{r3, pc}
   b917e:	0000      	.short	0x0000
   b9180:	00030278 	.word	0x00030278

000b9184 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9184:	b508      	push	{r3, lr}
   b9186:	4b02      	ldr	r3, [pc, #8]	; (b9190 <os_thread_yield+0xc>)
   b9188:	681b      	ldr	r3, [r3, #0]
   b918a:	68db      	ldr	r3, [r3, #12]
   b918c:	9301      	str	r3, [sp, #4]
   b918e:	bd08      	pop	{r3, pc}
   b9190:	00030248 	.word	0x00030248

000b9194 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9194:	b508      	push	{r3, lr}
   b9196:	4b02      	ldr	r3, [pc, #8]	; (b91a0 <os_thread_scheduling+0xc>)
   b9198:	681b      	ldr	r3, [r3, #0]
   b919a:	69db      	ldr	r3, [r3, #28]
   b919c:	9301      	str	r3, [sp, #4]
   b919e:	bd08      	pop	{r3, pc}
   b91a0:	00030248 	.word	0x00030248

000b91a4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b91a4:	b508      	push	{r3, lr}
   b91a6:	4b02      	ldr	r3, [pc, #8]	; (b91b0 <os_timer_create+0xc>)
   b91a8:	681b      	ldr	r3, [r3, #0]
   b91aa:	6a1b      	ldr	r3, [r3, #32]
   b91ac:	9301      	str	r3, [sp, #4]
   b91ae:	bd08      	pop	{r3, pc}
   b91b0:	00030248 	.word	0x00030248

000b91b4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b91b4:	b508      	push	{r3, lr}
   b91b6:	4b02      	ldr	r3, [pc, #8]	; (b91c0 <os_timer_destroy+0xc>)
   b91b8:	681b      	ldr	r3, [r3, #0]
   b91ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b91bc:	9301      	str	r3, [sp, #4]
   b91be:	bd08      	pop	{r3, pc}
   b91c0:	00030248 	.word	0x00030248

000b91c4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b91c4:	b508      	push	{r3, lr}
   b91c6:	4b02      	ldr	r3, [pc, #8]	; (b91d0 <os_timer_get_id+0xc>)
   b91c8:	681b      	ldr	r3, [r3, #0]
   b91ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b91cc:	9301      	str	r3, [sp, #4]
   b91ce:	bd08      	pop	{r3, pc}
   b91d0:	00030248 	.word	0x00030248

000b91d4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b91d4:	b508      	push	{r3, lr}
   b91d6:	4b02      	ldr	r3, [pc, #8]	; (b91e0 <os_timer_change+0xc>)
   b91d8:	681b      	ldr	r3, [r3, #0]
   b91da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b91dc:	9301      	str	r3, [sp, #4]
   b91de:	bd08      	pop	{r3, pc}
   b91e0:	00030248 	.word	0x00030248

000b91e4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b91e4:	b508      	push	{r3, lr}
   b91e6:	4b02      	ldr	r3, [pc, #8]	; (b91f0 <os_mutex_create+0xc>)
   b91e8:	681b      	ldr	r3, [r3, #0]
   b91ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b91ec:	9301      	str	r3, [sp, #4]
   b91ee:	bd08      	pop	{r3, pc}
   b91f0:	00030248 	.word	0x00030248

000b91f4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b91f4:	b508      	push	{r3, lr}
   b91f6:	4b02      	ldr	r3, [pc, #8]	; (b9200 <os_mutex_destroy+0xc>)
   b91f8:	681b      	ldr	r3, [r3, #0]
   b91fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b91fc:	9301      	str	r3, [sp, #4]
   b91fe:	bd08      	pop	{r3, pc}
   b9200:	00030248 	.word	0x00030248

000b9204 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9204:	b508      	push	{r3, lr}
   b9206:	4b02      	ldr	r3, [pc, #8]	; (b9210 <os_mutex_recursive_create+0xc>)
   b9208:	681b      	ldr	r3, [r3, #0]
   b920a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b920c:	9301      	str	r3, [sp, #4]
   b920e:	bd08      	pop	{r3, pc}
   b9210:	00030248 	.word	0x00030248

000b9214 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b9214:	b508      	push	{r3, lr}
   b9216:	4b02      	ldr	r3, [pc, #8]	; (b9220 <os_mutex_recursive_lock+0xc>)
   b9218:	681b      	ldr	r3, [r3, #0]
   b921a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b921c:	9301      	str	r3, [sp, #4]
   b921e:	bd08      	pop	{r3, pc}
   b9220:	00030248 	.word	0x00030248

000b9224 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b9224:	b508      	push	{r3, lr}
   b9226:	4b02      	ldr	r3, [pc, #8]	; (b9230 <os_mutex_recursive_unlock+0xc>)
   b9228:	681b      	ldr	r3, [r3, #0]
   b922a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b922c:	9301      	str	r3, [sp, #4]
   b922e:	bd08      	pop	{r3, pc}
   b9230:	00030248 	.word	0x00030248

000b9234 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9234:	b508      	push	{r3, lr}
   b9236:	4b02      	ldr	r3, [pc, #8]	; (b9240 <os_timer_set_id+0xc>)
   b9238:	681b      	ldr	r3, [r3, #0]
   b923a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b923c:	9301      	str	r3, [sp, #4]
   b923e:	bd08      	pop	{r3, pc}
   b9240:	00030248 	.word	0x00030248

000b9244 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9244:	b508      	push	{r3, lr}
   b9246:	4b02      	ldr	r3, [pc, #8]	; (b9250 <HAL_RNG_GetRandomNumber+0xc>)
   b9248:	681b      	ldr	r3, [r3, #0]
   b924a:	685b      	ldr	r3, [r3, #4]
   b924c:	9301      	str	r3, [sp, #4]
   b924e:	bd08      	pop	{r3, pc}
   b9250:	00030218 	.word	0x00030218

000b9254 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9254:	b508      	push	{r3, lr}
   b9256:	4b02      	ldr	r3, [pc, #8]	; (b9260 <HAL_Delay_Microseconds+0xc>)
   b9258:	681b      	ldr	r3, [r3, #0]
   b925a:	68db      	ldr	r3, [r3, #12]
   b925c:	9301      	str	r3, [sp, #4]
   b925e:	bd08      	pop	{r3, pc}
   b9260:	00030218 	.word	0x00030218

000b9264 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b9264:	b508      	push	{r3, lr}
   b9266:	4b02      	ldr	r3, [pc, #8]	; (b9270 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b9268:	681b      	ldr	r3, [r3, #0]
   b926a:	691b      	ldr	r3, [r3, #16]
   b926c:	9301      	str	r3, [sp, #4]
   b926e:	bd08      	pop	{r3, pc}
   b9270:	00030218 	.word	0x00030218

000b9274 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9274:	b508      	push	{r3, lr}
   b9276:	4b02      	ldr	r3, [pc, #8]	; (b9280 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9278:	681b      	ldr	r3, [r3, #0]
   b927a:	695b      	ldr	r3, [r3, #20]
   b927c:	9301      	str	r3, [sp, #4]
   b927e:	bd08      	pop	{r3, pc}
   b9280:	00030218 	.word	0x00030218

000b9284 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9284:	b508      	push	{r3, lr}
   b9286:	4b02      	ldr	r3, [pc, #8]	; (b9290 <hal_rtc_time_is_valid+0xc>)
   b9288:	681b      	ldr	r3, [r3, #0]
   b928a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b928c:	9301      	str	r3, [sp, #4]
   b928e:	bd08      	pop	{r3, pc}
   b9290:	00030218 	.word	0x00030218

000b9294 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b9294:	b508      	push	{r3, lr}
   b9296:	4b02      	ldr	r3, [pc, #8]	; (b92a0 <hal_rtc_get_time+0xc>)
   b9298:	681b      	ldr	r3, [r3, #0]
   b929a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b929c:	9301      	str	r3, [sp, #4]
   b929e:	bd08      	pop	{r3, pc}
   b92a0:	00030218 	.word	0x00030218

000b92a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b92a4:	b508      	push	{r3, lr}
   b92a6:	4b02      	ldr	r3, [pc, #8]	; (b92b0 <HAL_Validate_Pin_Function+0xc>)
   b92a8:	681b      	ldr	r3, [r3, #0]
   b92aa:	685b      	ldr	r3, [r3, #4]
   b92ac:	9301      	str	r3, [sp, #4]
   b92ae:	bd08      	pop	{r3, pc}
   b92b0:	0003022c 	.word	0x0003022c

000b92b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b92b4:	b508      	push	{r3, lr}
   b92b6:	4b02      	ldr	r3, [pc, #8]	; (b92c0 <HAL_Pin_Mode+0xc>)
   b92b8:	681b      	ldr	r3, [r3, #0]
   b92ba:	689b      	ldr	r3, [r3, #8]
   b92bc:	9301      	str	r3, [sp, #4]
   b92be:	bd08      	pop	{r3, pc}
   b92c0:	0003022c 	.word	0x0003022c

000b92c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b92c4:	b508      	push	{r3, lr}
   b92c6:	4b02      	ldr	r3, [pc, #8]	; (b92d0 <HAL_Get_Pin_Mode+0xc>)
   b92c8:	681b      	ldr	r3, [r3, #0]
   b92ca:	68db      	ldr	r3, [r3, #12]
   b92cc:	9301      	str	r3, [sp, #4]
   b92ce:	bd08      	pop	{r3, pc}
   b92d0:	0003022c 	.word	0x0003022c

000b92d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b92d4:	b508      	push	{r3, lr}
   b92d6:	4b02      	ldr	r3, [pc, #8]	; (b92e0 <HAL_GPIO_Write+0xc>)
   b92d8:	681b      	ldr	r3, [r3, #0]
   b92da:	691b      	ldr	r3, [r3, #16]
   b92dc:	9301      	str	r3, [sp, #4]
   b92de:	bd08      	pop	{r3, pc}
   b92e0:	0003022c 	.word	0x0003022c

000b92e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b92e4:	b508      	push	{r3, lr}
   b92e6:	4b02      	ldr	r3, [pc, #8]	; (b92f0 <HAL_GPIO_Read+0xc>)
   b92e8:	681b      	ldr	r3, [r3, #0]
   b92ea:	695b      	ldr	r3, [r3, #20]
   b92ec:	9301      	str	r3, [sp, #4]
   b92ee:	bd08      	pop	{r3, pc}
   b92f0:	0003022c 	.word	0x0003022c

000b92f4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b92f4:	b508      	push	{r3, lr}
   b92f6:	4b02      	ldr	r3, [pc, #8]	; (b9300 <HAL_Interrupts_Attach+0xc>)
   b92f8:	681b      	ldr	r3, [r3, #0]
   b92fa:	699b      	ldr	r3, [r3, #24]
   b92fc:	9301      	str	r3, [sp, #4]
   b92fe:	bd08      	pop	{r3, pc}
   b9300:	0003022c 	.word	0x0003022c

000b9304 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9304:	b508      	push	{r3, lr}
   b9306:	4b02      	ldr	r3, [pc, #8]	; (b9310 <HAL_Interrupts_Detach+0xc>)
   b9308:	681b      	ldr	r3, [r3, #0]
   b930a:	69db      	ldr	r3, [r3, #28]
   b930c:	9301      	str	r3, [sp, #4]
   b930e:	bd08      	pop	{r3, pc}
   b9310:	0003022c 	.word	0x0003022c

000b9314 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9314:	b508      	push	{r3, lr}
   b9316:	4b02      	ldr	r3, [pc, #8]	; (b9320 <hal_adc_read+0xc>)
   b9318:	681b      	ldr	r3, [r3, #0]
   b931a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b931c:	9301      	str	r3, [sp, #4]
   b931e:	bd08      	pop	{r3, pc}
   b9320:	0003022c 	.word	0x0003022c

000b9324 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9324:	b508      	push	{r3, lr}
   b9326:	4b02      	ldr	r3, [pc, #8]	; (b9330 <hal_i2c_set_speed+0xc>)
   b9328:	681b      	ldr	r3, [r3, #0]
   b932a:	681b      	ldr	r3, [r3, #0]
   b932c:	9301      	str	r3, [sp, #4]
   b932e:	bd08      	pop	{r3, pc}
   b9330:	00030228 	.word	0x00030228

000b9334 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9334:	b508      	push	{r3, lr}
   b9336:	4b02      	ldr	r3, [pc, #8]	; (b9340 <hal_i2c_begin+0xc>)
   b9338:	681b      	ldr	r3, [r3, #0]
   b933a:	68db      	ldr	r3, [r3, #12]
   b933c:	9301      	str	r3, [sp, #4]
   b933e:	bd08      	pop	{r3, pc}
   b9340:	00030228 	.word	0x00030228

000b9344 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9344:	b508      	push	{r3, lr}
   b9346:	4b02      	ldr	r3, [pc, #8]	; (b9350 <hal_i2c_begin_transmission+0xc>)
   b9348:	681b      	ldr	r3, [r3, #0]
   b934a:	699b      	ldr	r3, [r3, #24]
   b934c:	9301      	str	r3, [sp, #4]
   b934e:	bd08      	pop	{r3, pc}
   b9350:	00030228 	.word	0x00030228

000b9354 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9354:	b508      	push	{r3, lr}
   b9356:	4b02      	ldr	r3, [pc, #8]	; (b9360 <hal_i2c_end_transmission+0xc>)
   b9358:	681b      	ldr	r3, [r3, #0]
   b935a:	69db      	ldr	r3, [r3, #28]
   b935c:	9301      	str	r3, [sp, #4]
   b935e:	bd08      	pop	{r3, pc}
   b9360:	00030228 	.word	0x00030228

000b9364 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9364:	b508      	push	{r3, lr}
   b9366:	4b02      	ldr	r3, [pc, #8]	; (b9370 <hal_i2c_write+0xc>)
   b9368:	681b      	ldr	r3, [r3, #0]
   b936a:	6a1b      	ldr	r3, [r3, #32]
   b936c:	9301      	str	r3, [sp, #4]
   b936e:	bd08      	pop	{r3, pc}
   b9370:	00030228 	.word	0x00030228

000b9374 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9374:	b508      	push	{r3, lr}
   b9376:	4b02      	ldr	r3, [pc, #8]	; (b9380 <hal_i2c_available+0xc>)
   b9378:	681b      	ldr	r3, [r3, #0]
   b937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b937c:	9301      	str	r3, [sp, #4]
   b937e:	bd08      	pop	{r3, pc}
   b9380:	00030228 	.word	0x00030228

000b9384 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9384:	b508      	push	{r3, lr}
   b9386:	4b02      	ldr	r3, [pc, #8]	; (b9390 <hal_i2c_read+0xc>)
   b9388:	681b      	ldr	r3, [r3, #0]
   b938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b938c:	9301      	str	r3, [sp, #4]
   b938e:	bd08      	pop	{r3, pc}
   b9390:	00030228 	.word	0x00030228

000b9394 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9394:	b508      	push	{r3, lr}
   b9396:	4b02      	ldr	r3, [pc, #8]	; (b93a0 <hal_i2c_peek+0xc>)
   b9398:	681b      	ldr	r3, [r3, #0]
   b939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b939c:	9301      	str	r3, [sp, #4]
   b939e:	bd08      	pop	{r3, pc}
   b93a0:	00030228 	.word	0x00030228

000b93a4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b93a4:	b508      	push	{r3, lr}
   b93a6:	4b02      	ldr	r3, [pc, #8]	; (b93b0 <hal_i2c_flush+0xc>)
   b93a8:	681b      	ldr	r3, [r3, #0]
   b93aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b93ac:	9301      	str	r3, [sp, #4]
   b93ae:	bd08      	pop	{r3, pc}
   b93b0:	00030228 	.word	0x00030228

000b93b4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b93b4:	b508      	push	{r3, lr}
   b93b6:	4b02      	ldr	r3, [pc, #8]	; (b93c0 <hal_i2c_is_enabled+0xc>)
   b93b8:	681b      	ldr	r3, [r3, #0]
   b93ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b93bc:	9301      	str	r3, [sp, #4]
   b93be:	bd08      	pop	{r3, pc}
   b93c0:	00030228 	.word	0x00030228

000b93c4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b93c4:	b508      	push	{r3, lr}
   b93c6:	4b02      	ldr	r3, [pc, #8]	; (b93d0 <hal_i2c_init+0xc>)
   b93c8:	681b      	ldr	r3, [r3, #0]
   b93ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b93cc:	9301      	str	r3, [sp, #4]
   b93ce:	bd08      	pop	{r3, pc}
   b93d0:	00030228 	.word	0x00030228

000b93d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b93d4:	b508      	push	{r3, lr}
   b93d6:	4b02      	ldr	r3, [pc, #8]	; (b93e0 <inet_inet_ntop+0xc>)
   b93d8:	681b      	ldr	r3, [r3, #0]
   b93da:	695b      	ldr	r3, [r3, #20]
   b93dc:	9301      	str	r3, [sp, #4]
   b93de:	bd08      	pop	{r3, pc}
   b93e0:	00030264 	.word	0x00030264

000b93e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b93e4:	b508      	push	{r3, lr}
   b93e6:	4b02      	ldr	r3, [pc, #8]	; (b93f0 <netdb_freeaddrinfo+0xc>)
   b93e8:	681b      	ldr	r3, [r3, #0]
   b93ea:	689b      	ldr	r3, [r3, #8]
   b93ec:	9301      	str	r3, [sp, #4]
   b93ee:	bd08      	pop	{r3, pc}
   b93f0:	00030268 	.word	0x00030268

000b93f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b93f4:	b508      	push	{r3, lr}
   b93f6:	4b02      	ldr	r3, [pc, #8]	; (b9400 <netdb_getaddrinfo+0xc>)
   b93f8:	681b      	ldr	r3, [r3, #0]
   b93fa:	68db      	ldr	r3, [r3, #12]
   b93fc:	9301      	str	r3, [sp, #4]
   b93fe:	bd08      	pop	{r3, pc}
   b9400:	00030268 	.word	0x00030268

000b9404 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9404:	b508      	push	{r3, lr}
   b9406:	4b02      	ldr	r3, [pc, #8]	; (b9410 <hal_spi_begin+0xc>)
   b9408:	681b      	ldr	r3, [r3, #0]
   b940a:	681b      	ldr	r3, [r3, #0]
   b940c:	9301      	str	r3, [sp, #4]
   b940e:	bd08      	pop	{r3, pc}
   b9410:	00030230 	.word	0x00030230

000b9414 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9414:	b508      	push	{r3, lr}
   b9416:	4b02      	ldr	r3, [pc, #8]	; (b9420 <hal_spi_transfer+0xc>)
   b9418:	681b      	ldr	r3, [r3, #0]
   b941a:	695b      	ldr	r3, [r3, #20]
   b941c:	9301      	str	r3, [sp, #4]
   b941e:	bd08      	pop	{r3, pc}
   b9420:	00030230 	.word	0x00030230

000b9424 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9424:	b508      	push	{r3, lr}
   b9426:	4b02      	ldr	r3, [pc, #8]	; (b9430 <hal_spi_init+0xc>)
   b9428:	681b      	ldr	r3, [r3, #0]
   b942a:	69db      	ldr	r3, [r3, #28]
   b942c:	9301      	str	r3, [sp, #4]
   b942e:	bd08      	pop	{r3, pc}
   b9430:	00030230 	.word	0x00030230

000b9434 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9434:	b508      	push	{r3, lr}
   b9436:	4b02      	ldr	r3, [pc, #8]	; (b9440 <hal_spi_is_enabled+0xc>)
   b9438:	681b      	ldr	r3, [r3, #0]
   b943a:	6a1b      	ldr	r3, [r3, #32]
   b943c:	9301      	str	r3, [sp, #4]
   b943e:	bd08      	pop	{r3, pc}
   b9440:	00030230 	.word	0x00030230

000b9444 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9444:	b508      	push	{r3, lr}
   b9446:	4b02      	ldr	r3, [pc, #8]	; (b9450 <hal_spi_info+0xc>)
   b9448:	681b      	ldr	r3, [r3, #0]
   b944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b944c:	9301      	str	r3, [sp, #4]
   b944e:	bd08      	pop	{r3, pc}
   b9450:	00030230 	.word	0x00030230

000b9454 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b9454:	b508      	push	{r3, lr}
   b9456:	4b02      	ldr	r3, [pc, #8]	; (b9460 <hal_spi_transfer_dma+0xc>)
   b9458:	681b      	ldr	r3, [r3, #0]
   b945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b945c:	9301      	str	r3, [sp, #4]
   b945e:	bd08      	pop	{r3, pc}
   b9460:	00030230 	.word	0x00030230

000b9464 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b9464:	b508      	push	{r3, lr}
   b9466:	4b02      	ldr	r3, [pc, #8]	; (b9470 <hal_spi_transfer_dma_status+0xc>)
   b9468:	681b      	ldr	r3, [r3, #0]
   b946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b946c:	9301      	str	r3, [sp, #4]
   b946e:	bd08      	pop	{r3, pc}
   b9470:	00030230 	.word	0x00030230

000b9474 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9474:	b508      	push	{r3, lr}
   b9476:	4b02      	ldr	r3, [pc, #8]	; (b9480 <hal_spi_set_settings+0xc>)
   b9478:	681b      	ldr	r3, [r3, #0]
   b947a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b947c:	9301      	str	r3, [sp, #4]
   b947e:	bd08      	pop	{r3, pc}
   b9480:	00030230 	.word	0x00030230

000b9484 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9484:	b508      	push	{r3, lr}
   b9486:	4b02      	ldr	r3, [pc, #8]	; (b9490 <hal_spi_acquire+0xc>)
   b9488:	681b      	ldr	r3, [r3, #0]
   b948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b948c:	9301      	str	r3, [sp, #4]
   b948e:	bd08      	pop	{r3, pc}
   b9490:	00030230 	.word	0x00030230

000b9494 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9494:	b508      	push	{r3, lr}
   b9496:	4b02      	ldr	r3, [pc, #8]	; (b94a0 <hal_spi_release+0xc>)
   b9498:	681b      	ldr	r3, [r3, #0]
   b949a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b949c:	9301      	str	r3, [sp, #4]
   b949e:	bd08      	pop	{r3, pc}
   b94a0:	00030230 	.word	0x00030230

000b94a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b94a4:	b508      	push	{r3, lr}
   b94a6:	4b02      	ldr	r3, [pc, #8]	; (b94b0 <hal_usart_write+0xc>)
   b94a8:	681b      	ldr	r3, [r3, #0]
   b94aa:	68db      	ldr	r3, [r3, #12]
   b94ac:	9301      	str	r3, [sp, #4]
   b94ae:	bd08      	pop	{r3, pc}
   b94b0:	0003023c 	.word	0x0003023c

000b94b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b94b4:	b508      	push	{r3, lr}
   b94b6:	4b02      	ldr	r3, [pc, #8]	; (b94c0 <hal_usart_available+0xc>)
   b94b8:	681b      	ldr	r3, [r3, #0]
   b94ba:	691b      	ldr	r3, [r3, #16]
   b94bc:	9301      	str	r3, [sp, #4]
   b94be:	bd08      	pop	{r3, pc}
   b94c0:	0003023c 	.word	0x0003023c

000b94c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b94c4:	b508      	push	{r3, lr}
   b94c6:	4b02      	ldr	r3, [pc, #8]	; (b94d0 <hal_usart_read+0xc>)
   b94c8:	681b      	ldr	r3, [r3, #0]
   b94ca:	695b      	ldr	r3, [r3, #20]
   b94cc:	9301      	str	r3, [sp, #4]
   b94ce:	bd08      	pop	{r3, pc}
   b94d0:	0003023c 	.word	0x0003023c

000b94d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b94d4:	b508      	push	{r3, lr}
   b94d6:	4b02      	ldr	r3, [pc, #8]	; (b94e0 <hal_usart_peek+0xc>)
   b94d8:	681b      	ldr	r3, [r3, #0]
   b94da:	699b      	ldr	r3, [r3, #24]
   b94dc:	9301      	str	r3, [sp, #4]
   b94de:	bd08      	pop	{r3, pc}
   b94e0:	0003023c 	.word	0x0003023c

000b94e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b94e4:	b508      	push	{r3, lr}
   b94e6:	4b02      	ldr	r3, [pc, #8]	; (b94f0 <hal_usart_flush+0xc>)
   b94e8:	681b      	ldr	r3, [r3, #0]
   b94ea:	69db      	ldr	r3, [r3, #28]
   b94ec:	9301      	str	r3, [sp, #4]
   b94ee:	bd08      	pop	{r3, pc}
   b94f0:	0003023c 	.word	0x0003023c

000b94f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b94f4:	b508      	push	{r3, lr}
   b94f6:	4b02      	ldr	r3, [pc, #8]	; (b9500 <hal_usart_is_enabled+0xc>)
   b94f8:	681b      	ldr	r3, [r3, #0]
   b94fa:	6a1b      	ldr	r3, [r3, #32]
   b94fc:	9301      	str	r3, [sp, #4]
   b94fe:	bd08      	pop	{r3, pc}
   b9500:	0003023c 	.word	0x0003023c

000b9504 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9504:	b508      	push	{r3, lr}
   b9506:	4b02      	ldr	r3, [pc, #8]	; (b9510 <hal_usart_available_data_for_write+0xc>)
   b9508:	681b      	ldr	r3, [r3, #0]
   b950a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b950c:	9301      	str	r3, [sp, #4]
   b950e:	bd08      	pop	{r3, pc}
   b9510:	0003023c 	.word	0x0003023c

000b9514 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9514:	b508      	push	{r3, lr}
   b9516:	4b02      	ldr	r3, [pc, #8]	; (b9520 <hal_usart_begin_config+0xc>)
   b9518:	681b      	ldr	r3, [r3, #0]
   b951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b951c:	9301      	str	r3, [sp, #4]
   b951e:	bd08      	pop	{r3, pc}
   b9520:	0003023c 	.word	0x0003023c

000b9524 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9524:	b508      	push	{r3, lr}
   b9526:	4b02      	ldr	r3, [pc, #8]	; (b9530 <hal_usart_init_ex+0xc>)
   b9528:	681b      	ldr	r3, [r3, #0]
   b952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b952c:	9301      	str	r3, [sp, #4]
   b952e:	bd08      	pop	{r3, pc}
   b9530:	0003023c 	.word	0x0003023c

000b9534 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9534:	b508      	push	{r3, lr}
   b9536:	4b02      	ldr	r3, [pc, #8]	; (b9540 <HAL_USB_USART_Init+0xc>)
   b9538:	681b      	ldr	r3, [r3, #0]
   b953a:	681b      	ldr	r3, [r3, #0]
   b953c:	9301      	str	r3, [sp, #4]
   b953e:	bd08      	pop	{r3, pc}
   b9540:	0003024c 	.word	0x0003024c

000b9544 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9544:	b508      	push	{r3, lr}
   b9546:	4b02      	ldr	r3, [pc, #8]	; (b9550 <HAL_USB_USART_Begin+0xc>)
   b9548:	681b      	ldr	r3, [r3, #0]
   b954a:	685b      	ldr	r3, [r3, #4]
   b954c:	9301      	str	r3, [sp, #4]
   b954e:	bd08      	pop	{r3, pc}
   b9550:	0003024c 	.word	0x0003024c

000b9554 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9554:	b508      	push	{r3, lr}
   b9556:	4b02      	ldr	r3, [pc, #8]	; (b9560 <HAL_USB_USART_Available_Data+0xc>)
   b9558:	681b      	ldr	r3, [r3, #0]
   b955a:	691b      	ldr	r3, [r3, #16]
   b955c:	9301      	str	r3, [sp, #4]
   b955e:	bd08      	pop	{r3, pc}
   b9560:	0003024c 	.word	0x0003024c

000b9564 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9564:	b508      	push	{r3, lr}
   b9566:	4b02      	ldr	r3, [pc, #8]	; (b9570 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9568:	681b      	ldr	r3, [r3, #0]
   b956a:	695b      	ldr	r3, [r3, #20]
   b956c:	9301      	str	r3, [sp, #4]
   b956e:	bd08      	pop	{r3, pc}
   b9570:	0003024c 	.word	0x0003024c

000b9574 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9574:	b508      	push	{r3, lr}
   b9576:	4b02      	ldr	r3, [pc, #8]	; (b9580 <HAL_USB_USART_Receive_Data+0xc>)
   b9578:	681b      	ldr	r3, [r3, #0]
   b957a:	699b      	ldr	r3, [r3, #24]
   b957c:	9301      	str	r3, [sp, #4]
   b957e:	bd08      	pop	{r3, pc}
   b9580:	0003024c 	.word	0x0003024c

000b9584 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9584:	b508      	push	{r3, lr}
   b9586:	4b02      	ldr	r3, [pc, #8]	; (b9590 <HAL_USB_USART_Send_Data+0xc>)
   b9588:	681b      	ldr	r3, [r3, #0]
   b958a:	69db      	ldr	r3, [r3, #28]
   b958c:	9301      	str	r3, [sp, #4]
   b958e:	bd08      	pop	{r3, pc}
   b9590:	0003024c 	.word	0x0003024c

000b9594 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9594:	b508      	push	{r3, lr}
   b9596:	4b02      	ldr	r3, [pc, #8]	; (b95a0 <HAL_USB_USART_Flush_Data+0xc>)
   b9598:	681b      	ldr	r3, [r3, #0]
   b959a:	6a1b      	ldr	r3, [r3, #32]
   b959c:	9301      	str	r3, [sp, #4]
   b959e:	bd08      	pop	{r3, pc}
   b95a0:	0003024c 	.word	0x0003024c

000b95a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b95a4:	b508      	push	{r3, lr}
   b95a6:	4b02      	ldr	r3, [pc, #8]	; (b95b0 <panic_+0xc>)
   b95a8:	681b      	ldr	r3, [r3, #0]
   b95aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b95ac:	9301      	str	r3, [sp, #4]
   b95ae:	bd08      	pop	{r3, pc}
   b95b0:	00030260 	.word	0x00030260

000b95b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b95b4:	b508      	push	{r3, lr}
   b95b6:	4b02      	ldr	r3, [pc, #8]	; (b95c0 <log_message+0xc>)
   b95b8:	681b      	ldr	r3, [r3, #0]
   b95ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b95bc:	9301      	str	r3, [sp, #4]
   b95be:	bd08      	pop	{r3, pc}
   b95c0:	00030260 	.word	0x00030260

000b95c4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b95c4:	b508      	push	{r3, lr}
   b95c6:	4b02      	ldr	r3, [pc, #8]	; (b95d0 <system_mode+0xc>)
   b95c8:	681b      	ldr	r3, [r3, #0]
   b95ca:	681b      	ldr	r3, [r3, #0]
   b95cc:	9301      	str	r3, [sp, #4]
   b95ce:	bd08      	pop	{r3, pc}
   b95d0:	00030220 	.word	0x00030220

000b95d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b95d4:	b508      	push	{r3, lr}
   b95d6:	4b02      	ldr	r3, [pc, #8]	; (b95e0 <set_system_mode+0xc>)
   b95d8:	681b      	ldr	r3, [r3, #0]
   b95da:	685b      	ldr	r3, [r3, #4]
   b95dc:	9301      	str	r3, [sp, #4]
   b95de:	bd08      	pop	{r3, pc}
   b95e0:	00030220 	.word	0x00030220

000b95e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b95e4:	b508      	push	{r3, lr}
   b95e6:	4b02      	ldr	r3, [pc, #8]	; (b95f0 <system_delay_ms+0xc>)
   b95e8:	681b      	ldr	r3, [r3, #0]
   b95ea:	695b      	ldr	r3, [r3, #20]
   b95ec:	9301      	str	r3, [sp, #4]
   b95ee:	bd08      	pop	{r3, pc}
   b95f0:	00030220 	.word	0x00030220

000b95f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b95f4:	b508      	push	{r3, lr}
   b95f6:	4b02      	ldr	r3, [pc, #8]	; (b9600 <application_thread_current+0xc>)
   b95f8:	681b      	ldr	r3, [r3, #0]
   b95fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b95fc:	9301      	str	r3, [sp, #4]
   b95fe:	bd08      	pop	{r3, pc}
   b9600:	00030220 	.word	0x00030220

000b9604 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9604:	b508      	push	{r3, lr}
   b9606:	4b02      	ldr	r3, [pc, #8]	; (b9610 <application_thread_invoke+0xc>)
   b9608:	681b      	ldr	r3, [r3, #0]
   b960a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b960c:	9301      	str	r3, [sp, #4]
   b960e:	bd08      	pop	{r3, pc}
   b9610:	00030220 	.word	0x00030220

000b9614 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9614:	b508      	push	{r3, lr}
   b9616:	4b02      	ldr	r3, [pc, #8]	; (b9620 <system_thread_get_state+0xc>)
   b9618:	681b      	ldr	r3, [r3, #0]
   b961a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b961c:	9301      	str	r3, [sp, #4]
   b961e:	bd08      	pop	{r3, pc}
   b9620:	00030220 	.word	0x00030220

000b9624 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9624:	b508      	push	{r3, lr}
   b9626:	4b03      	ldr	r3, [pc, #12]	; (b9634 <system_ctrl_set_app_request_handler+0x10>)
   b9628:	681b      	ldr	r3, [r3, #0]
   b962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b962e:	9301      	str	r3, [sp, #4]
   b9630:	bd08      	pop	{r3, pc}
   b9632:	0000      	.short	0x0000
   b9634:	00030220 	.word	0x00030220

000b9638 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9638:	b508      	push	{r3, lr}
   b963a:	4b03      	ldr	r3, [pc, #12]	; (b9648 <system_ctrl_set_result+0x10>)
   b963c:	681b      	ldr	r3, [r3, #0]
   b963e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9642:	9301      	str	r3, [sp, #4]
   b9644:	bd08      	pop	{r3, pc}
   b9646:	0000      	.short	0x0000
   b9648:	00030220 	.word	0x00030220

000b964c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b964c:	b508      	push	{r3, lr}
   b964e:	4b02      	ldr	r3, [pc, #8]	; (b9658 <spark_process+0xc>)
   b9650:	681b      	ldr	r3, [r3, #0]
   b9652:	689b      	ldr	r3, [r3, #8]
   b9654:	9301      	str	r3, [sp, #4]
   b9656:	bd08      	pop	{r3, pc}
   b9658:	00030244 	.word	0x00030244

000b965c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b965c:	b508      	push	{r3, lr}
   b965e:	4b02      	ldr	r3, [pc, #8]	; (b9668 <spark_cloud_flag_connected+0xc>)
   b9660:	681b      	ldr	r3, [r3, #0]
   b9662:	695b      	ldr	r3, [r3, #20]
   b9664:	9301      	str	r3, [sp, #4]
   b9666:	bd08      	pop	{r3, pc}
   b9668:	00030244 	.word	0x00030244

000b966c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b966c:	b508      	push	{r3, lr}
   b966e:	4b02      	ldr	r3, [pc, #8]	; (b9678 <spark_send_event+0xc>)
   b9670:	681b      	ldr	r3, [r3, #0]
   b9672:	6a1b      	ldr	r3, [r3, #32]
   b9674:	9301      	str	r3, [sp, #4]
   b9676:	bd08      	pop	{r3, pc}
   b9678:	00030244 	.word	0x00030244

000b967c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b967c:	b508      	push	{r3, lr}
   b967e:	4b02      	ldr	r3, [pc, #8]	; (b9688 <spark_subscribe+0xc>)
   b9680:	681b      	ldr	r3, [r3, #0]
   b9682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9684:	9301      	str	r3, [sp, #4]
   b9686:	bd08      	pop	{r3, pc}
   b9688:	00030244 	.word	0x00030244

000b968c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b968c:	b508      	push	{r3, lr}
   b968e:	4b02      	ldr	r3, [pc, #8]	; (b9698 <spark_sync_time_pending+0xc>)
   b9690:	681b      	ldr	r3, [r3, #0]
   b9692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9694:	9301      	str	r3, [sp, #4]
   b9696:	bd08      	pop	{r3, pc}
   b9698:	00030244 	.word	0x00030244

000b969c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b969c:	b508      	push	{r3, lr}
   b969e:	4b02      	ldr	r3, [pc, #8]	; (b96a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b96a0:	681b      	ldr	r3, [r3, #0]
   b96a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b96a4:	9301      	str	r3, [sp, #4]
   b96a6:	bd08      	pop	{r3, pc}
   b96a8:	00030244 	.word	0x00030244

000b96ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b96ac:	b508      	push	{r3, lr}
   b96ae:	4b02      	ldr	r3, [pc, #8]	; (b96b8 <network_connect+0xc>)
   b96b0:	681b      	ldr	r3, [r3, #0]
   b96b2:	685b      	ldr	r3, [r3, #4]
   b96b4:	9301      	str	r3, [sp, #4]
   b96b6:	bd08      	pop	{r3, pc}
   b96b8:	00030240 	.word	0x00030240

000b96bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b96bc:	b508      	push	{r3, lr}
   b96be:	4b02      	ldr	r3, [pc, #8]	; (b96c8 <network_connecting+0xc>)
   b96c0:	681b      	ldr	r3, [r3, #0]
   b96c2:	689b      	ldr	r3, [r3, #8]
   b96c4:	9301      	str	r3, [sp, #4]
   b96c6:	bd08      	pop	{r3, pc}
   b96c8:	00030240 	.word	0x00030240

000b96cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b96cc:	b508      	push	{r3, lr}
   b96ce:	4b02      	ldr	r3, [pc, #8]	; (b96d8 <network_disconnect+0xc>)
   b96d0:	681b      	ldr	r3, [r3, #0]
   b96d2:	68db      	ldr	r3, [r3, #12]
   b96d4:	9301      	str	r3, [sp, #4]
   b96d6:	bd08      	pop	{r3, pc}
   b96d8:	00030240 	.word	0x00030240

000b96dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b96dc:	b508      	push	{r3, lr}
   b96de:	4b02      	ldr	r3, [pc, #8]	; (b96e8 <network_ready+0xc>)
   b96e0:	681b      	ldr	r3, [r3, #0]
   b96e2:	691b      	ldr	r3, [r3, #16]
   b96e4:	9301      	str	r3, [sp, #4]
   b96e6:	bd08      	pop	{r3, pc}
   b96e8:	00030240 	.word	0x00030240

000b96ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b96ec:	b508      	push	{r3, lr}
   b96ee:	4b02      	ldr	r3, [pc, #8]	; (b96f8 <network_on+0xc>)
   b96f0:	681b      	ldr	r3, [r3, #0]
   b96f2:	695b      	ldr	r3, [r3, #20]
   b96f4:	9301      	str	r3, [sp, #4]
   b96f6:	bd08      	pop	{r3, pc}
   b96f8:	00030240 	.word	0x00030240

000b96fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b96fc:	b508      	push	{r3, lr}
   b96fe:	4b02      	ldr	r3, [pc, #8]	; (b9708 <network_off+0xc>)
   b9700:	681b      	ldr	r3, [r3, #0]
   b9702:	699b      	ldr	r3, [r3, #24]
   b9704:	9301      	str	r3, [sp, #4]
   b9706:	bd08      	pop	{r3, pc}
   b9708:	00030240 	.word	0x00030240

000b970c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b970c:	b508      	push	{r3, lr}
   b970e:	4b02      	ldr	r3, [pc, #8]	; (b9718 <network_listen+0xc>)
   b9710:	681b      	ldr	r3, [r3, #0]
   b9712:	69db      	ldr	r3, [r3, #28]
   b9714:	9301      	str	r3, [sp, #4]
   b9716:	bd08      	pop	{r3, pc}
   b9718:	00030240 	.word	0x00030240

000b971c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b971c:	b508      	push	{r3, lr}
   b971e:	4b02      	ldr	r3, [pc, #8]	; (b9728 <network_listening+0xc>)
   b9720:	681b      	ldr	r3, [r3, #0]
   b9722:	6a1b      	ldr	r3, [r3, #32]
   b9724:	9301      	str	r3, [sp, #4]
   b9726:	bd08      	pop	{r3, pc}
   b9728:	00030240 	.word	0x00030240

000b972c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b972c:	b508      	push	{r3, lr}
   b972e:	4b02      	ldr	r3, [pc, #8]	; (b9738 <network_set_listen_timeout+0xc>)
   b9730:	681b      	ldr	r3, [r3, #0]
   b9732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9734:	9301      	str	r3, [sp, #4]
   b9736:	bd08      	pop	{r3, pc}
   b9738:	00030240 	.word	0x00030240

000b973c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b973c:	b508      	push	{r3, lr}
   b973e:	4b02      	ldr	r3, [pc, #8]	; (b9748 <network_get_listen_timeout+0xc>)
   b9740:	681b      	ldr	r3, [r3, #0]
   b9742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9744:	9301      	str	r3, [sp, #4]
   b9746:	bd08      	pop	{r3, pc}
   b9748:	00030240 	.word	0x00030240

000b974c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b974c:	b508      	push	{r3, lr}
   b974e:	4b02      	ldr	r3, [pc, #8]	; (b9758 <network_is_on+0xc>)
   b9750:	681b      	ldr	r3, [r3, #0]
   b9752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9754:	9301      	str	r3, [sp, #4]
   b9756:	bd08      	pop	{r3, pc}
   b9758:	00030240 	.word	0x00030240

000b975c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b975c:	b508      	push	{r3, lr}
   b975e:	4b02      	ldr	r3, [pc, #8]	; (b9768 <network_is_off+0xc>)
   b9760:	681b      	ldr	r3, [r3, #0]
   b9762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9764:	9301      	str	r3, [sp, #4]
   b9766:	bd08      	pop	{r3, pc}
   b9768:	00030240 	.word	0x00030240

000b976c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b976c:	b508      	push	{r3, lr}
   b976e:	4b02      	ldr	r3, [pc, #8]	; (b9778 <malloc+0xc>)
   b9770:	681b      	ldr	r3, [r3, #0]
   b9772:	681b      	ldr	r3, [r3, #0]
   b9774:	9301      	str	r3, [sp, #4]
   b9776:	bd08      	pop	{r3, pc}
   b9778:	0003021c 	.word	0x0003021c

000b977c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b977c:	b508      	push	{r3, lr}
   b977e:	4b02      	ldr	r3, [pc, #8]	; (b9788 <free+0xc>)
   b9780:	681b      	ldr	r3, [r3, #0]
   b9782:	685b      	ldr	r3, [r3, #4]
   b9784:	9301      	str	r3, [sp, #4]
   b9786:	bd08      	pop	{r3, pc}
   b9788:	0003021c 	.word	0x0003021c

000b978c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b978c:	b508      	push	{r3, lr}
   b978e:	4b02      	ldr	r3, [pc, #8]	; (b9798 <realloc+0xc>)
   b9790:	681b      	ldr	r3, [r3, #0]
   b9792:	689b      	ldr	r3, [r3, #8]
   b9794:	9301      	str	r3, [sp, #4]
   b9796:	bd08      	pop	{r3, pc}
   b9798:	0003021c 	.word	0x0003021c

000b979c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b979c:	b508      	push	{r3, lr}
   b979e:	4b02      	ldr	r3, [pc, #8]	; (b97a8 <sprintf+0xc>)
   b97a0:	681b      	ldr	r3, [r3, #0]
   b97a2:	68db      	ldr	r3, [r3, #12]
   b97a4:	9301      	str	r3, [sp, #4]
   b97a6:	bd08      	pop	{r3, pc}
   b97a8:	0003021c 	.word	0x0003021c

000b97ac <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b97ac:	b508      	push	{r3, lr}
   b97ae:	4b02      	ldr	r3, [pc, #8]	; (b97b8 <sscanf+0xc>)
   b97b0:	681b      	ldr	r3, [r3, #0]
   b97b2:	695b      	ldr	r3, [r3, #20]
   b97b4:	9301      	str	r3, [sp, #4]
   b97b6:	bd08      	pop	{r3, pc}
   b97b8:	0003021c 	.word	0x0003021c

000b97bc <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b97bc:	b508      	push	{r3, lr}
   b97be:	4b02      	ldr	r3, [pc, #8]	; (b97c8 <snprintf+0xc>)
   b97c0:	681b      	ldr	r3, [r3, #0]
   b97c2:	69db      	ldr	r3, [r3, #28]
   b97c4:	9301      	str	r3, [sp, #4]
   b97c6:	bd08      	pop	{r3, pc}
   b97c8:	0003021c 	.word	0x0003021c

000b97cc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b97cc:	b508      	push	{r3, lr}
   b97ce:	4b02      	ldr	r3, [pc, #8]	; (b97d8 <vsnprintf+0xc>)
   b97d0:	681b      	ldr	r3, [r3, #0]
   b97d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b97d4:	9301      	str	r3, [sp, #4]
   b97d6:	bd08      	pop	{r3, pc}
   b97d8:	0003021c 	.word	0x0003021c

000b97dc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b97dc:	b508      	push	{r3, lr}
   b97de:	4b02      	ldr	r3, [pc, #8]	; (b97e8 <abort+0xc>)
   b97e0:	681b      	ldr	r3, [r3, #0]
   b97e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b97e4:	9301      	str	r3, [sp, #4]
   b97e6:	bd08      	pop	{r3, pc}
   b97e8:	0003021c 	.word	0x0003021c

000b97ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b97ec:	b508      	push	{r3, lr}
   b97ee:	4b02      	ldr	r3, [pc, #8]	; (b97f8 <_malloc_r+0xc>)
   b97f0:	681b      	ldr	r3, [r3, #0]
   b97f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b97f4:	9301      	str	r3, [sp, #4]
   b97f6:	bd08      	pop	{r3, pc}
   b97f8:	0003021c 	.word	0x0003021c

000b97fc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b97fc:	b508      	push	{r3, lr}
   b97fe:	4b02      	ldr	r3, [pc, #8]	; (b9808 <__errno+0xc>)
   b9800:	681b      	ldr	r3, [r3, #0]
   b9802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9804:	9301      	str	r3, [sp, #4]
   b9806:	bd08      	pop	{r3, pc}
   b9808:	0003021c 	.word	0x0003021c

000b980c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b980c:	b508      	push	{r3, lr}
   b980e:	4b02      	ldr	r3, [pc, #8]	; (b9818 <__assert_func+0xc>)
   b9810:	681b      	ldr	r3, [r3, #0]
   b9812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9814:	9301      	str	r3, [sp, #4]
   b9816:	bd08      	pop	{r3, pc}
   b9818:	0003021c 	.word	0x0003021c

000b981c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b981c:	b508      	push	{r3, lr}
   b981e:	4b02      	ldr	r3, [pc, #8]	; (b9828 <newlib_impure_ptr_callback+0xc>)
   b9820:	681b      	ldr	r3, [r3, #0]
   b9822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9824:	9301      	str	r3, [sp, #4]
   b9826:	bd08      	pop	{r3, pc}
   b9828:	0003021c 	.word	0x0003021c

000b982c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b982c:	b508      	push	{r3, lr}
   b982e:	4b02      	ldr	r3, [pc, #8]	; (b9838 <localtime_r+0xc>)
   b9830:	681b      	ldr	r3, [r3, #0]
   b9832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9834:	9301      	str	r3, [sp, #4]
   b9836:	bd08      	pop	{r3, pc}
   b9838:	0003021c 	.word	0x0003021c

000b983c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b983c:	2100      	movs	r1, #0
   b983e:	f7ff bed1 	b.w	b95e4 <system_delay_ms>

000b9842 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9842:	b510      	push	{r4, lr}
      if (_M_empty())
   b9844:	6883      	ldr	r3, [r0, #8]
   b9846:	4604      	mov	r4, r0
   b9848:	b90b      	cbnz	r3, b984e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b984a:	f003 fe35 	bl	bd4b8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b984e:	68c3      	ldr	r3, [r0, #12]
   b9850:	4798      	blx	r3
      if (_M_manager)
   b9852:	68a3      	ldr	r3, [r4, #8]
   b9854:	b11b      	cbz	r3, b985e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9856:	2203      	movs	r2, #3
   b9858:	4621      	mov	r1, r4
   b985a:	4620      	mov	r0, r4
   b985c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b985e:	4620      	mov	r0, r4
   b9860:	2110      	movs	r1, #16
}
   b9862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9866:	f7fa bc1a 	b.w	b409e <_ZdlPvj>

000b986a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b986a:	4770      	bx	lr

000b986c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b986c:	4770      	bx	lr

000b986e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b986e:	4770      	bx	lr

000b9870 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9870:	4770      	bx	lr
	...

000b9874 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9874:	4b06      	ldr	r3, [pc, #24]	; (b9890 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9876:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9878:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b987a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b987e:	d005      	beq.n	b988c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9880:	4608      	mov	r0, r1
   b9882:	f003 fe1d 	bl	bd4c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9886:	2800      	cmp	r0, #0
   b9888:	bf08      	it	eq
   b988a:	2400      	moveq	r4, #0
      }
   b988c:	4620      	mov	r0, r4
   b988e:	bd10      	pop	{r4, pc}
   b9890:	000c18f4 	.word	0x000c18f4

000b9894 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9894:	4b06      	ldr	r3, [pc, #24]	; (b98b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9896:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9898:	b510      	push	{r4, lr}
   b989a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b989e:	d005      	beq.n	b98ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98a0:	4608      	mov	r0, r1
   b98a2:	f003 fe0d 	bl	bd4c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98a6:	2800      	cmp	r0, #0
   b98a8:	bf08      	it	eq
   b98aa:	2400      	moveq	r4, #0
      }
   b98ac:	4620      	mov	r0, r4
   b98ae:	bd10      	pop	{r4, pc}
   b98b0:	000c18f4 	.word	0x000c18f4

000b98b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b98b4:	4b06      	ldr	r3, [pc, #24]	; (b98d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b98b6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b98b8:	b510      	push	{r4, lr}
   b98ba:	f100 040c 	add.w	r4, r0, #12
	    ||
   b98be:	d005      	beq.n	b98cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98c0:	4608      	mov	r0, r1
   b98c2:	f003 fdfd 	bl	bd4c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98c6:	2800      	cmp	r0, #0
   b98c8:	bf08      	it	eq
   b98ca:	2400      	moveq	r4, #0
      }
   b98cc:	4620      	mov	r0, r4
   b98ce:	bd10      	pop	{r4, pc}
   b98d0:	000c18f4 	.word	0x000c18f4

000b98d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b98d4:	b510      	push	{r4, lr}
   b98d6:	2168      	movs	r1, #104	; 0x68
   b98d8:	4604      	mov	r4, r0
   b98da:	f7fa fbe0 	bl	b409e <_ZdlPvj>
   b98de:	4620      	mov	r0, r4
   b98e0:	bd10      	pop	{r4, pc}

000b98e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b98e2:	b510      	push	{r4, lr}
   b98e4:	2128      	movs	r1, #40	; 0x28
   b98e6:	4604      	mov	r4, r0
   b98e8:	f7fa fbd9 	bl	b409e <_ZdlPvj>
   b98ec:	4620      	mov	r0, r4
   b98ee:	bd10      	pop	{r4, pc}

000b98f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b98f0:	b510      	push	{r4, lr}
   b98f2:	2130      	movs	r1, #48	; 0x30
   b98f4:	4604      	mov	r4, r0
   b98f6:	f7fa fbd2 	bl	b409e <_ZdlPvj>
   b98fa:	4620      	mov	r0, r4
   b98fc:	bd10      	pop	{r4, pc}

000b98fe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b98fe:	2168      	movs	r1, #104	; 0x68
   b9900:	f7fa bbcd 	b.w	b409e <_ZdlPvj>

000b9904 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9904:	2128      	movs	r1, #40	; 0x28
   b9906:	f7fa bbca 	b.w	b409e <_ZdlPvj>

000b990a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b990a:	2130      	movs	r1, #48	; 0x30
   b990c:	f7fa bbc7 	b.w	b409e <_ZdlPvj>

000b9910 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b9910:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9912:	2500      	movs	r5, #0
   b9914:	1cec      	adds	r4, r5, #3
   b9916:	428c      	cmp	r4, r1
   b9918:	d80d      	bhi.n	b9936 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b991a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b991c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b991e:	5d87      	ldrb	r7, [r0, r6]
   b9920:	4297      	cmp	r7, r2
   b9922:	d105      	bne.n	b9930 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9924:	4426      	add	r6, r4
   b9926:	42b1      	cmp	r1, r6
   b9928:	d305      	bcc.n	b9936 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b992a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b992c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9930:	3401      	adds	r4, #1
   b9932:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9934:	e7ee      	b.n	b9914 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b9936:	2000      	movs	r0, #0
   b9938:	e7f9      	b.n	b992e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b993c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b993c:	4a02      	ldr	r2, [pc, #8]	; (b9948 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b993e:	4903      	ldr	r1, [pc, #12]	; (b994c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9940:	200a      	movs	r0, #10
   b9942:	f7ff be2f 	b.w	b95a4 <panic_>
   b9946:	bf00      	nop
   b9948:	000b9255 	.word	0x000b9255
   b994c:	000c1684 	.word	0x000c1684

000b9950 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9950:	b430      	push	{r4, r5}
   b9952:	460d      	mov	r5, r1
   b9954:	4611      	mov	r1, r2
   b9956:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b9958:	6803      	ldr	r3, [r0, #0]
   b995a:	6809      	ldr	r1, [r1, #0]
   b995c:	6828      	ldr	r0, [r5, #0]
   b995e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9962:	46a4      	mov	ip, r4
      }
   b9964:	bc30      	pop	{r4, r5}
   b9966:	4760      	bx	ip

000b9968 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9968:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b996a:	b538      	push	{r3, r4, r5, lr}
   b996c:	4604      	mov	r4, r0
	switch (__op)
   b996e:	d102      	bne.n	b9976 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9970:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9972:	6023      	str	r3, [r4, #0]
	}
   b9974:	e003      	b.n	b997e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b9976:	2a02      	cmp	r2, #2
   b9978:	d003      	beq.n	b9982 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b997a:	2a03      	cmp	r2, #3
   b997c:	d00d      	beq.n	b999a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b997e:	2000      	movs	r0, #0
   b9980:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9982:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9984:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9986:	f7fa fb86 	bl	b4096 <_Znwj>
   b998a:	4603      	mov	r3, r0
   b998c:	2800      	cmp	r0, #0
   b998e:	d0f0      	beq.n	b9972 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9990:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9994:	e883 0003 	stmia.w	r3, {r0, r1}
   b9998:	e7eb      	b.n	b9972 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b999a:	6800      	ldr	r0, [r0, #0]
   b999c:	2800      	cmp	r0, #0
   b999e:	d0ee      	beq.n	b997e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b99a0:	2108      	movs	r1, #8
   b99a2:	f7fa fb7c 	bl	b409e <_ZdlPvj>
   b99a6:	e7ea      	b.n	b997e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b99a8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b99a8:	b510      	push	{r4, lr}
	if (_M_manager)
   b99aa:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b99ac:	4604      	mov	r4, r0
	if (_M_manager)
   b99ae:	b12b      	cbz	r3, b99bc <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b99b0:	2203      	movs	r2, #3
   b99b2:	4601      	mov	r1, r0
   b99b4:	4798      	blx	r3
	    _M_manager = nullptr;
   b99b6:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b99b8:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b99bc:	bd10      	pop	{r4, pc}

000b99be <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b99be:	b510      	push	{r4, lr}
	if (_M_manager)
   b99c0:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b99c2:	4604      	mov	r4, r0
	if (_M_manager)
   b99c4:	b12b      	cbz	r3, b99d2 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b99c6:	2203      	movs	r2, #3
   b99c8:	4601      	mov	r1, r0
   b99ca:	4798      	blx	r3
	    _M_manager = nullptr;
   b99cc:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b99ce:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b99d2:	bd10      	pop	{r4, pc}

000b99d4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b99d4:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b99d6:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b99d8:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b99da:	2220      	movs	r2, #32
   b99dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b99e0:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b99e2:	4a08      	ldr	r2, [pc, #32]	; (b9a04 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b99e4:	9200      	str	r2, [sp, #0]
   b99e6:	4908      	ldr	r1, [pc, #32]	; (b9a08 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b99e8:	aa02      	add	r2, sp, #8
   b99ea:	2001      	movs	r0, #1
   b99ec:	f7ff fde2 	bl	b95b4 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b99f0:	6820      	ldr	r0, [r4, #0]
   b99f2:	4906      	ldr	r1, [pc, #24]	; (b9a0c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b99f4:	8800      	ldrh	r0, [r0, #0]
   b99f6:	2300      	movs	r3, #0
   b99f8:	4622      	mov	r2, r4
    }
   b99fa:	b00a      	add	sp, #40	; 0x28
   b99fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9a00:	f7ff bb52 	b.w	b90a8 <hal_ble_gatt_client_discover_all_services>
   b9a04:	000c16a6 	.word	0x000c16a6
   b9a08:	000c169b 	.word	0x000c169b
   b9a0c:	000bb585 	.word	0x000bb585

000b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b9a10:	b510      	push	{r4, lr}
   b9a12:	3801      	subs	r0, #1
   b9a14:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b9a18:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b9a1c:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b9a1e:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9a22:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9a24:	bf88      	it	hi
   b9a26:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b9a2a:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b9a2e:	7803      	ldrb	r3, [r0, #0]
   b9a30:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b9a34:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9a38:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9a3a:	bf88      	it	hi
   b9a3c:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b9a40:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b9a42:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b9a46:	d1e7      	bne.n	b9a18 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b9a48:	bd10      	pop	{r4, pc}

000b9a4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9a4a:	b510      	push	{r4, lr}
   b9a4c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b9a4e:	3058      	adds	r0, #88	; 0x58
   b9a50:	f7fa fc72 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b9a54:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b9a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9a5c:	f003 b8a0 	b.w	bcba0 <_ZN6StringD1Ev>

000b9a60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b9a60:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b9a62:	6803      	ldr	r3, [r0, #0]
   b9a64:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b9a66:	4605      	mov	r5, r0
   b9a68:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b9a6a:	d008      	beq.n	b9a7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b9a6c:	b111      	cbz	r1, b9a74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b9a6e:	684b      	ldr	r3, [r1, #4]
   b9a70:	3301      	adds	r3, #1
   b9a72:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b9a74:	6828      	ldr	r0, [r5, #0]
   b9a76:	b108      	cbz	r0, b9a7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b9a78:	f7fa fc9c 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9a7c:	602c      	str	r4, [r5, #0]
      }
   b9a7e:	bd38      	pop	{r3, r4, r5, pc}

000b9a80 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9a80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9a84:	b2da      	uxtb	r2, r3
   b9a86:	2a09      	cmp	r2, #9
   b9a88:	d801      	bhi.n	b9a8e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b9a8a:	4618      	mov	r0, r3
   b9a8c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b9a8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9a92:	2b05      	cmp	r3, #5
   b9a94:	d801      	bhi.n	b9a9a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9a96:	3857      	subs	r0, #87	; 0x57
   b9a98:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b9a9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9a9e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9aa0:	bf94      	ite	ls
   b9aa2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9aa4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b9aa8:	4770      	bx	lr
	...

000b9aac <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9aac:	b510      	push	{r4, lr}
            locked_(false) {
   b9aae:	2300      	movs	r3, #0
   b9ab0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9ab2:	4b04      	ldr	r3, [pc, #16]	; (b9ac4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9ab4:	4604      	mov	r4, r0
   b9ab6:	6818      	ldr	r0, [r3, #0]
   b9ab8:	f7ff fbac 	bl	b9214 <os_mutex_recursive_lock>
        locked_ = true;
   b9abc:	2301      	movs	r3, #1
   b9abe:	7023      	strb	r3, [r4, #0]
    }
   b9ac0:	4620      	mov	r0, r4
   b9ac2:	bd10      	pop	{r4, pc}
   b9ac4:	2003e658 	.word	0x2003e658

000b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9ac8:	b510      	push	{r4, lr}
        if (locked_) {
   b9aca:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b9acc:	4604      	mov	r4, r0
        if (locked_) {
   b9ace:	b11b      	cbz	r3, b9ad8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9ad0:	4b02      	ldr	r3, [pc, #8]	; (b9adc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9ad2:	6818      	ldr	r0, [r3, #0]
   b9ad4:	f7ff fba6 	bl	b9224 <os_mutex_recursive_unlock>
    }
   b9ad8:	4620      	mov	r0, r4
   b9ada:	bd10      	pop	{r4, pc}
   b9adc:	2003e658 	.word	0x2003e658

000b9ae0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9ae0:	b082      	sub	sp, #8
   b9ae2:	4603      	mov	r3, r0
    address_ = addr;
   b9ae4:	6808      	ldr	r0, [r1, #0]
   b9ae6:	6849      	ldr	r1, [r1, #4]
   b9ae8:	466a      	mov	r2, sp
   b9aea:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b9aec:	466a      	mov	r2, sp
   b9aee:	ca03      	ldmia	r2!, {r0, r1}
   b9af0:	6018      	str	r0, [r3, #0]
}
   b9af2:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9af4:	6059      	str	r1, [r3, #4]
}
   b9af6:	b002      	add	sp, #8
   b9af8:	4770      	bx	lr

000b9afa <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b9afa:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b9afc:	7982      	ldrb	r2, [r0, #6]
   b9afe:	798b      	ldrb	r3, [r1, #6]
   b9b00:	429a      	cmp	r2, r3
   b9b02:	d106      	bne.n	b9b12 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9b04:	2206      	movs	r2, #6
   b9b06:	f004 fb70 	bl	be1ea <memcmp>
   b9b0a:	fab0 f080 	clz	r0, r0
   b9b0e:	0940      	lsrs	r0, r0, #5
}
   b9b10:	bd08      	pop	{r3, pc}
    return false;
   b9b12:	2000      	movs	r0, #0
   b9b14:	e7fc      	b.n	b9b10 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b9b16 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b9b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9b1a:	6003      	str	r3, [r0, #0]
   b9b1c:	8083      	strh	r3, [r0, #4]
}
   b9b1e:	2000      	movs	r0, #0
   b9b20:	4770      	bx	lr

000b9b22 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b9b22:	b508      	push	{r3, lr}
   b9b24:	4602      	mov	r2, r0
        : address_{} {
   b9b26:	2100      	movs	r1, #0
   b9b28:	6001      	str	r1, [r0, #0]
   b9b2a:	6041      	str	r1, [r0, #4]
    clear();
   b9b2c:	f7ff fff3 	bl	b9b16 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9b30:	7191      	strb	r1, [r2, #6]
}
   b9b32:	4610      	mov	r0, r2
   b9b34:	bd08      	pop	{r3, pc}
	...

000b9b38 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b9b38:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b9b3a:	2301      	movs	r3, #1
   b9b3c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9b3e:	4b05      	ldr	r3, [pc, #20]	; (b9b54 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b9b40:	4602      	mov	r2, r0
   b9b42:	f103 0110 	add.w	r1, r3, #16
   b9b46:	f853 4b04 	ldr.w	r4, [r3], #4
   b9b4a:	f842 4b04 	str.w	r4, [r2], #4
   b9b4e:	428b      	cmp	r3, r1
   b9b50:	d1f9      	bne.n	b9b46 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b9b52:	bd10      	pop	{r4, pc}
   b9b54:	000c1902 	.word	0x000c1902

000b9b58 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9b58:	7c0b      	ldrb	r3, [r1, #16]
   b9b5a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b9b5e:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9b60:	d10d      	bne.n	b9b7e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b9b62:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9b64:	4b0c      	ldr	r3, [pc, #48]	; (b9b98 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b9b66:	4602      	mov	r2, r0
   b9b68:	f103 0410 	add.w	r4, r3, #16
   b9b6c:	f853 5b04 	ldr.w	r5, [r3], #4
   b9b70:	f842 5b04 	str.w	r5, [r2], #4
   b9b74:	42a3      	cmp	r3, r4
   b9b76:	d1f9      	bne.n	b9b6c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b9b78:	880b      	ldrh	r3, [r1, #0]
   b9b7a:	8183      	strh	r3, [r0, #12]
}
   b9b7c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b9b7e:	2301      	movs	r3, #1
   b9b80:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9b82:	f101 0210 	add.w	r2, r1, #16
   b9b86:	4603      	mov	r3, r0
   b9b88:	f851 4b04 	ldr.w	r4, [r1], #4
   b9b8c:	f843 4b04 	str.w	r4, [r3], #4
   b9b90:	4291      	cmp	r1, r2
   b9b92:	d1f9      	bne.n	b9b88 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b9b94:	e7f2      	b.n	b9b7c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b9b96:	bf00      	nop
   b9b98:	000c1902 	.word	0x000c1902

000b9b9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9b9c:	b510      	push	{r4, lr}
    if (uuid128) {
   b9b9e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9ba0:	4604      	mov	r4, r0
    if (uuid128) {
   b9ba2:	b1b1      	cbz	r1, b9bd2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9ba4:	2a01      	cmp	r2, #1
   b9ba6:	f101 0210 	add.w	r2, r1, #16
   b9baa:	d10a      	bne.n	b9bc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9bac:	4601      	mov	r1, r0
   b9bae:	f853 0b04 	ldr.w	r0, [r3], #4
   b9bb2:	f841 0b04 	str.w	r0, [r1], #4
   b9bb6:	4293      	cmp	r3, r2
   b9bb8:	d1f9      	bne.n	b9bae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b9bba:	2301      	movs	r3, #1
   b9bbc:	6123      	str	r3, [r4, #16]
}
   b9bbe:	4620      	mov	r0, r4
   b9bc0:	bd10      	pop	{r4, pc}
   b9bc2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9bc4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9bc8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9bcc:	429a      	cmp	r2, r3
   b9bce:	d1f9      	bne.n	b9bc4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9bd0:	e7f3      	b.n	b9bba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9bd2:	2210      	movs	r2, #16
   b9bd4:	f004 fb41 	bl	be25a <memset>
   b9bd8:	e7f1      	b.n	b9bbe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b9bda <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b9bda:	b538      	push	{r3, r4, r5, lr}
   b9bdc:	4604      	mov	r4, r0
   b9bde:	460d      	mov	r5, r1
        : BleUuid() {
   b9be0:	f7ff ffaa 	bl	b9b38 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b9be4:	2300      	movs	r3, #0
   b9be6:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9be8:	81a5      	strh	r5, [r4, #12]
}
   b9bea:	4620      	mov	r0, r4
   b9bec:	bd38      	pop	{r3, r4, r5, pc}

000b9bee <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9bee:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9bf0:	6902      	ldr	r2, [r0, #16]
   b9bf2:	690b      	ldr	r3, [r1, #16]
   b9bf4:	429a      	cmp	r2, r3
   b9bf6:	d106      	bne.n	b9c06 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9bf8:	2210      	movs	r2, #16
   b9bfa:	f004 faf6 	bl	be1ea <memcmp>
   b9bfe:	fab0 f080 	clz	r0, r0
   b9c02:	0940      	lsrs	r0, r0, #5
}
   b9c04:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9c06:	2000      	movs	r0, #0
   b9c08:	e7fc      	b.n	b9c04 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b9c0c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b9c0c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b9c0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b9c12:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9c14:	4b34      	ldr	r3, [pc, #208]	; (b9ce8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b9c16:	460c      	mov	r4, r1
   b9c18:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9c1a:	4602      	mov	r2, r0
   b9c1c:	f103 0110 	add.w	r1, r3, #16
   b9c20:	f853 0b04 	ldr.w	r0, [r3], #4
   b9c24:	f842 0b04 	str.w	r0, [r2], #4
   b9c28:	428b      	cmp	r3, r1
   b9c2a:	d1f9      	bne.n	b9c20 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b9c2c:	b344      	cbz	r4, b9c80 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b9c2e:	2124      	movs	r1, #36	; 0x24
   b9c30:	4620      	mov	r0, r4
   b9c32:	f004 fbf5 	bl	be420 <strnlen>
   b9c36:	2804      	cmp	r0, #4
   b9c38:	f04f 0500 	mov.w	r5, #0
   b9c3c:	d123      	bne.n	b9c86 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b9c3e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b9c42:	af01      	add	r7, sp, #4
   b9c44:	1ca5      	adds	r5, r4, #2
   b9c46:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b9c48:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b9c4c:	f7ff ff18 	bl	b9a80 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9c50:	f1b0 0800 	subs.w	r8, r0, #0
   b9c54:	db12      	blt.n	b9c7c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b9c56:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b9c5a:	f7ff ff11 	bl	b9a80 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b9c5e:	2800      	cmp	r0, #0
   b9c60:	db0c      	blt.n	b9c7c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9c62:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9c64:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9c68:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9c6a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9c6e:	d1eb      	bne.n	b9c48 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9c70:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9c74:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9c7a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9c7c:	2300      	movs	r3, #0
   b9c7e:	6133      	str	r3, [r6, #16]
}
   b9c80:	b002      	add	sp, #8
   b9c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9c86:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9c8a:	2124      	movs	r1, #36	; 0x24
   b9c8c:	4620      	mov	r0, r4
   b9c8e:	f004 fbc7 	bl	be420 <strnlen>
   b9c92:	42a8      	cmp	r0, r5
   b9c94:	d807      	bhi.n	b9ca6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9c96:	4642      	mov	r2, r8
   b9c98:	2100      	movs	r1, #0
   b9c9a:	4630      	mov	r0, r6
}
   b9c9c:	b002      	add	sp, #8
   b9c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9ca2:	f004 bada 	b.w	be25a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9ca6:	f1b8 0f00 	cmp.w	r8, #0
   b9caa:	d0e9      	beq.n	b9c80 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9cac:	5d60      	ldrb	r0, [r4, r5]
   b9cae:	f7ff fee7 	bl	b9a80 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9cb2:	0603      	lsls	r3, r0, #24
   b9cb4:	d415      	bmi.n	b9ce2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9cb6:	0100      	lsls	r0, r0, #4
   b9cb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9cbc:	b2c7      	uxtb	r7, r0
   b9cbe:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9cc2:	2124      	movs	r1, #36	; 0x24
   b9cc4:	4620      	mov	r0, r4
   b9cc6:	f004 fbab 	bl	be420 <strnlen>
   b9cca:	3501      	adds	r5, #1
   b9ccc:	42a8      	cmp	r0, r5
   b9cce:	d908      	bls.n	b9ce2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9cd0:	5d60      	ldrb	r0, [r4, r5]
   b9cd2:	f7ff fed5 	bl	b9a80 <_ZN8particle11hexToNibbleEc>
   b9cd6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9cd8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b9cda:	bfa4      	itt	ge
   b9cdc:	4338      	orrge	r0, r7
   b9cde:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9ce2:	3501      	adds	r5, #1
   b9ce4:	e7d1      	b.n	b9c8a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9ce6:	bf00      	nop
   b9ce8:	000c1902 	.word	0x000c1902

000b9cec <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9cec:	b513      	push	{r0, r1, r4, lr}
   b9cee:	4604      	mov	r4, r0
   b9cf0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9cf2:	f7ff ff21 	bl	b9b38 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9cf6:	4620      	mov	r0, r4
   b9cf8:	9901      	ldr	r1, [sp, #4]
   b9cfa:	f7ff ff87 	bl	b9c0c <_ZN8particle7BleUuid9constructEPKc>
}
   b9cfe:	4620      	mov	r0, r4
   b9d00:	b002      	add	sp, #8
   b9d02:	bd10      	pop	{r4, pc}

000b9d04 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b9d04:	b510      	push	{r4, lr}
   b9d06:	f100 030f 	add.w	r3, r0, #15
   b9d0a:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b9d0c:	781c      	ldrb	r4, [r3, #0]
   b9d0e:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9d12:	4283      	cmp	r3, r0
   b9d14:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b9d18:	d1f8      	bne.n	b9d0c <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b9d1a:	bd10      	pop	{r4, pc}

000b9d1c <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b9d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d20:	461f      	mov	r7, r3
   b9d22:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b9d24:	460d      	mov	r5, r1
   b9d26:	2900      	cmp	r1, #0
   b9d28:	d05b      	beq.n	b9de2 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b9d2a:	b1da      	cbz	r2, b9d64 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b9d2c:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b9d30:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b9d32:	f1b8 0f00 	cmp.w	r8, #0
   b9d36:	d119      	bne.n	b9d6c <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9d38:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b9d3a:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9d3e:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9d40:	aa05      	add	r2, sp, #20
   b9d42:	2102      	movs	r1, #2
   b9d44:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9d46:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9d4a:	f7ff fe61 	bl	b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b9d4e:	2c04      	cmp	r4, #4
   b9d50:	bf28      	it	cs
   b9d52:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b9d54:	4622      	mov	r2, r4
   b9d56:	a905      	add	r1, sp, #20
   b9d58:	4628      	mov	r0, r5
   b9d5a:	f004 fa56 	bl	be20a <memcpy>
        buf[len++] = '\0';
   b9d5e:	f805 8004 	strb.w	r8, [r5, r4]
   b9d62:	1c62      	adds	r2, r4, #1
}
   b9d64:	4610      	mov	r0, r2
   b9d66:	b00e      	add	sp, #56	; 0x38
   b9d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b9d6c:	a901      	add	r1, sp, #4
   b9d6e:	f7ff ffc9 	bl	b9d04 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9d72:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9d74:	b17f      	cbz	r7, b9d96 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9d76:	2110      	movs	r1, #16
   b9d78:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9d7a:	f7ff fe49 	bl	b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b9d7e:	2c24      	cmp	r4, #36	; 0x24
   b9d80:	bf28      	it	cs
   b9d82:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9d84:	4622      	mov	r2, r4
   b9d86:	a905      	add	r1, sp, #20
   b9d88:	4628      	mov	r0, r5
   b9d8a:	f004 fa3e 	bl	be20a <memcpy>
    buf[len++] = '\0';
   b9d8e:	2300      	movs	r3, #0
   b9d90:	552b      	strb	r3, [r5, r4]
   b9d92:	1c62      	adds	r2, r4, #1
    return len;
   b9d94:	e7e6      	b.n	b9d64 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b9d96:	2104      	movs	r1, #4
   b9d98:	eb0d 0001 	add.w	r0, sp, r1
   b9d9c:	f7ff fe38 	bl	b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9da0:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9da2:	f10d 021d 	add.w	r2, sp, #29
   b9da6:	2102      	movs	r1, #2
   b9da8:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b9daa:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9dae:	f7ff fe2f 	bl	b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9db2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b9db6:	2102      	movs	r1, #2
   b9db8:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b9dbc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9dc0:	f7ff fe26 	bl	b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9dc4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b9dc8:	2102      	movs	r1, #2
   b9dca:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b9dcc:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9dd0:	f7ff fe1e 	bl	b9a10 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b9dd4:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9dd8:	aa0b      	add	r2, sp, #44	; 0x2c
   b9dda:	2106      	movs	r1, #6
   b9ddc:	f10d 000e 	add.w	r0, sp, #14
   b9de0:	e7cb      	b.n	b9d7a <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b9de2:	460a      	mov	r2, r1
   b9de4:	e7be      	b.n	b9d64 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b9de6 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b9de6:	b510      	push	{r4, lr}
   b9de8:	b08a      	sub	sp, #40	; 0x28
   b9dea:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b9dec:	2300      	movs	r3, #0
   b9dee:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b9df0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b9df2:	4669      	mov	r1, sp
   b9df4:	f7ff ff92 	bl	b9d1c <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b9df8:	4669      	mov	r1, sp
   b9dfa:	4620      	mov	r0, r4
   b9dfc:	f002 ff1b 	bl	bcc36 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9e00:	4620      	mov	r0, r4
   b9e02:	b00a      	add	sp, #40	; 0x28
   b9e04:	bd10      	pop	{r4, pc}

000b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b9e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9e08:	4605      	mov	r5, r0
   b9e0a:	4616      	mov	r6, r2
   b9e0c:	461f      	mov	r7, r3
   b9e0e:	460a      	mov	r2, r1
   b9e10:	ab01      	add	r3, sp, #4
   b9e12:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9e16:	f7ff fd7b 	bl	b9910 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b9e1a:	f030 0402 	bics.w	r4, r0, #2
   b9e1e:	d00c      	beq.n	b9e3a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b9e20:	1e84      	subs	r4, r0, #2
   b9e22:	42bc      	cmp	r4, r7
   b9e24:	bf28      	it	cs
   b9e26:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b9e28:	b13e      	cbz	r6, b9e3a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b9e2a:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b9e2c:	682b      	ldr	r3, [r5, #0]
   b9e2e:	3102      	adds	r1, #2
   b9e30:	4622      	mov	r2, r4
   b9e32:	4419      	add	r1, r3
   b9e34:	4630      	mov	r0, r6
   b9e36:	f004 f9e8 	bl	be20a <memcpy>
}
   b9e3a:	4620      	mov	r0, r4
   b9e3c:	b003      	add	sp, #12
   b9e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9e40 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9e42:	4613      	mov	r3, r2
   b9e44:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e46:	9201      	str	r2, [sp, #4]
   b9e48:	460a      	mov	r2, r1
   b9e4a:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9e4c:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e4e:	f7ff ffda 	bl	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b9e52:	b940      	cbnz	r0, b9e66 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e54:	9b01      	ldr	r3, [sp, #4]
   b9e56:	4622      	mov	r2, r4
   b9e58:	2109      	movs	r1, #9
   b9e5a:	4628      	mov	r0, r5
}
   b9e5c:	b003      	add	sp, #12
   b9e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e62:	f7ff bfd0 	b.w	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b9e66:	b003      	add	sp, #12
   b9e68:	bd30      	pop	{r4, r5, pc}
	...

000b9e6c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b9e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e6e:	460c      	mov	r4, r1
   b9e70:	b089      	sub	sp, #36	; 0x24
    String name;
   b9e72:	490c      	ldr	r1, [pc, #48]	; (b9ea4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b9e74:	4605      	mov	r5, r0
    String name;
   b9e76:	f002 fede 	bl	bcc36 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b9e7a:	221f      	movs	r2, #31
   b9e7c:	4669      	mov	r1, sp
   b9e7e:	4620      	mov	r0, r4
   b9e80:	f7ff ffde 	bl	b9e40 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b9e84:	4606      	mov	r6, r0
   b9e86:	b150      	cbz	r0, b9e9e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b9e88:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b9e8a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b9e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9e90:	4628      	mov	r0, r5
   b9e92:	f002 ff4f 	bl	bcd34 <_ZN6String6concatEc>
   b9e96:	b110      	cbz	r0, b9e9e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b9e98:	3701      	adds	r7, #1
   b9e9a:	42be      	cmp	r6, r7
   b9e9c:	d1f6      	bne.n	b9e8c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b9e9e:	4628      	mov	r0, r5
   b9ea0:	b009      	add	sp, #36	; 0x24
   b9ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9ea4:	000c0907 	.word	0x000c0907

000b9ea8 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b9ea8:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b9eaa:	460a      	mov	r2, r1
   b9eac:	21ff      	movs	r1, #255	; 0xff
   b9eae:	f7ff bfaa 	b.w	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b9eb2 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b9eb2:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b9eb4:	2302      	movs	r3, #2
   b9eb6:	aa01      	add	r2, sp, #4
   b9eb8:	2119      	movs	r1, #25
   b9eba:	f7ff ffa4 	bl	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b9ebe:	b108      	cbz	r0, b9ec4 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b9ec0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b9ec4:	b003      	add	sp, #12
   b9ec6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9ecc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9ecc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9ed2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9ed4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b9ed6:	8043      	strh	r3, [r0, #2]
   b9ed8:	220e      	movs	r2, #14
   b9eda:	4629      	mov	r1, r5
   b9edc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9ede:	7105      	strb	r5, [r0, #4]
   b9ee0:	3006      	adds	r0, #6
   b9ee2:	f004 f9ba 	bl	be25a <memset>
   b9ee6:	f104 0014 	add.w	r0, r4, #20
   b9eea:	f7ff fe25 	bl	b9b38 <_ZN8particle7BleUuidC1Ev>
   b9eee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9ef2:	f7ff fe21 	bl	b9b38 <_ZN8particle7BleUuidC1Ev>
   b9ef6:	4904      	ldr	r1, [pc, #16]	; (b9f08 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b9ef8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9efc:	f002 fe9b 	bl	bcc36 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9f00:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9f02:	4620      	mov	r0, r4
   b9f04:	bd38      	pop	{r3, r4, r5, pc}
   b9f06:	bf00      	nop
   b9f08:	000c0907 	.word	0x000c0907

000b9f0c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b9f0c:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9f0e:	680d      	ldr	r5, [r1, #0]
   b9f10:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9f12:	4601      	mov	r1, r0
   b9f14:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b9f18:	f7ff fe69 	bl	b9bee <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9f1c:	b140      	cbz	r0, b9f30 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b9f1e:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9f20:	8aa2      	ldrh	r2, [r4, #20]
   b9f22:	429a      	cmp	r2, r3
   b9f24:	d805      	bhi.n	b9f32 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9f26:	8ae0      	ldrh	r0, [r4, #22]
   b9f28:	4298      	cmp	r0, r3
   b9f2a:	bf34      	ite	cc
   b9f2c:	2000      	movcc	r0, #0
   b9f2e:	2001      	movcs	r0, #1
    }
   b9f30:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b9f32:	2000      	movs	r0, #0
   b9f34:	e7fc      	b.n	b9f30 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b9f36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b9f36:	b510      	push	{r4, lr}
    return data_ + size_;
   b9f38:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9f3c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b9f40:	4293      	cmp	r3, r2
   b9f42:	4618      	mov	r0, r3
   b9f44:	d006      	beq.n	b9f54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b9f46:	6804      	ldr	r4, [r0, #0]
   b9f48:	8824      	ldrh	r4, [r4, #0]
   b9f4a:	428c      	cmp	r4, r1
   b9f4c:	f103 0308 	add.w	r3, r3, #8
   b9f50:	d1f6      	bne.n	b9f40 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b9f52:	bd10      	pop	{r4, pc}
        return nullptr;
   b9f54:	2000      	movs	r0, #0
   b9f56:	e7fc      	b.n	b9f52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b9f58 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9f58:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b9f5a:	b570      	push	{r4, r5, r6, lr}
   b9f5c:	6003      	str	r3, [r0, #0]
   b9f5e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9f60:	2068      	movs	r0, #104	; 0x68
   b9f62:	f7fa f898 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9f66:	1e04      	subs	r4, r0, #0
   b9f68:	f104 060c 	add.w	r6, r4, #12
   b9f6c:	d007      	beq.n	b9f7e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b9f6e:	2301      	movs	r3, #1
   b9f70:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9f74:	4b04      	ldr	r3, [pc, #16]	; (b9f88 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b9f76:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9f78:	4630      	mov	r0, r6
   b9f7a:	f7ff ffa7 	bl	b9ecc <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b9f7e:	e9c5 6400 	strd	r6, r4, [r5]
}
   b9f82:	4628      	mov	r0, r5
   b9f84:	bd70      	pop	{r4, r5, r6, pc}
   b9f86:	bf00      	nop
   b9f88:	000c18a8 	.word	0x000c18a8

000b9f8c <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b9f8c:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b9f8e:	680c      	ldr	r4, [r1, #0]
   b9f90:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b9f92:	4606      	mov	r6, r0
    return impl()->charUUID();
   b9f94:	4605      	mov	r5, r0
   b9f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9f9a:	6823      	ldr	r3, [r4, #0]
   b9f9c:	602b      	str	r3, [r5, #0]
}
   b9f9e:	4630      	mov	r0, r6
   b9fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9fa4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9fa6:	4606      	mov	r6, r0
   b9fa8:	b085      	sub	sp, #20
   b9faa:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9fac:	460d      	mov	r5, r1
   b9fae:	2900      	cmp	r1, #0
   b9fb0:	d050      	beq.n	ba054 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9fb2:	2a00      	cmp	r2, #0
   b9fb4:	d04e      	beq.n	ba054 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b9fb6:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b9fb8:	7823      	ldrb	r3, [r4, #0]
   b9fba:	2af4      	cmp	r2, #244	; 0xf4
   b9fbc:	bf28      	it	cs
   b9fbe:	22f4      	movcs	r2, #244	; 0xf4
   b9fc0:	b343      	cbz	r3, ba014 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9fc2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9fc4:	0798      	lsls	r0, r3, #30
   b9fc6:	d509      	bpl.n	b9fdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9fc8:	89a0      	ldrh	r0, [r4, #12]
   b9fca:	9203      	str	r2, [sp, #12]
   b9fcc:	2300      	movs	r3, #0
   b9fce:	f7ff f861 	bl	b9094 <hal_ble_gatt_server_set_characteristic_value>
   b9fd2:	2800      	cmp	r0, #0
   b9fd4:	9a03      	ldr	r2, [sp, #12]
   b9fd6:	da03      	bge.n	b9fe0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b9fd8:	b005      	add	sp, #20
   b9fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9fdc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9fe0:	6834      	ldr	r4, [r6, #0]
   b9fe2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9fe4:	06d9      	lsls	r1, r3, #27
   b9fe6:	d509      	bpl.n	b9ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9fe8:	2f01      	cmp	r7, #1
   b9fea:	d007      	beq.n	b9ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9fec:	89a0      	ldrh	r0, [r4, #12]
   b9fee:	2300      	movs	r3, #0
   b9ff0:	4629      	mov	r1, r5
}
   b9ff2:	b005      	add	sp, #20
   b9ff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9ff8:	f7ff b8b0 	b.w	b915c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9ffc:	069b      	lsls	r3, r3, #26
   b9ffe:	d5eb      	bpl.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba000:	2f02      	cmp	r7, #2
   ba002:	d0e9      	beq.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba004:	89a0      	ldrh	r0, [r4, #12]
   ba006:	2300      	movs	r3, #0
   ba008:	4629      	mov	r1, r5
}
   ba00a:	b005      	add	sp, #20
   ba00c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba010:	f7ff b8ae 	b.w	b9170 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba014:	8860      	ldrh	r0, [r4, #2]
   ba016:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba01a:	4288      	cmp	r0, r1
   ba01c:	d01c      	beq.n	ba058 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba01e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba020:	074e      	lsls	r6, r1, #29
   ba022:	d501      	bpl.n	ba028 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba024:	2f01      	cmp	r7, #1
   ba026:	d104      	bne.n	ba032 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba028:	070b      	lsls	r3, r1, #28
   ba02a:	d409      	bmi.n	ba040 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba02c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba030:	e7d2      	b.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba032:	89a1      	ldrh	r1, [r4, #12]
   ba034:	9300      	str	r3, [sp, #0]
   ba036:	4613      	mov	r3, r2
   ba038:	462a      	mov	r2, r5
   ba03a:	f7ff f853 	bl	b90e4 <hal_ble_gatt_client_write_without_response>
   ba03e:	e7cb      	b.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba040:	2f02      	cmp	r7, #2
   ba042:	d0f3      	beq.n	ba02c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba044:	2300      	movs	r3, #0
   ba046:	89a1      	ldrh	r1, [r4, #12]
   ba048:	9300      	str	r3, [sp, #0]
   ba04a:	4613      	mov	r3, r2
   ba04c:	462a      	mov	r2, r5
   ba04e:	f7ff f83f 	bl	b90d0 <hal_ble_gatt_client_write_with_response>
   ba052:	e7c1      	b.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba054:	4802      	ldr	r0, [pc, #8]	; (ba060 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba056:	e7bf      	b.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba058:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba05c:	e7bc      	b.n	b9fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba05e:	bf00      	nop
   ba060:	fffffef2 	.word	0xfffffef2

000ba064 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   ba064:	b510      	push	{r4, lr}
   ba066:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba068:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   ba06a:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba06c:	bb52      	cbnz	r2, ba0c4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   ba06e:	885c      	ldrh	r4, [r3, #2]
   ba070:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba074:	4284      	cmp	r4, r0
   ba076:	d025      	beq.n	ba0c4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba078:	8a18      	ldrh	r0, [r3, #16]
   ba07a:	b330      	cbz	r0, ba0ca <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   ba07c:	e9cd 2203 	strd	r2, r2, [sp, #12]
   ba080:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   ba082:	4a13      	ldr	r2, [pc, #76]	; (ba0d0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   ba084:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   ba086:	4a13      	ldr	r2, [pc, #76]	; (ba0d4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   ba088:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   ba08c:	885a      	ldrh	r2, [r3, #2]
   ba08e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   ba092:	8a1a      	ldrh	r2, [r3, #16]
   ba094:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   ba098:	899a      	ldrh	r2, [r3, #12]
   ba09a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   ba09e:	b159      	cbz	r1, ba0b8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   ba0a0:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   ba0a2:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   ba0a4:	bf44      	itt	mi
   ba0a6:	2202      	movmi	r2, #2
   ba0a8:	9205      	strmi	r2, [sp, #20]
   ba0aa:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   ba0ac:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   ba0ae:	bf42      	ittt	mi
   ba0b0:	9b05      	ldrmi	r3, [sp, #20]
   ba0b2:	f043 0301 	orrmi.w	r3, r3, #1
   ba0b6:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   ba0b8:	2100      	movs	r1, #0
   ba0ba:	4668      	mov	r0, sp
   ba0bc:	f7ff f844 	bl	b9148 <hal_ble_gatt_client_configure_cccd>
}
   ba0c0:	b006      	add	sp, #24
   ba0c2:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba0c4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba0c8:	e7fa      	b.n	ba0c0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba0ca:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba0ce:	e7f7      	b.n	ba0c0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   ba0d0:	00180003 	.word	0x00180003
   ba0d4:	000ba2a9 	.word	0x000ba2a9

000ba0d8 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   ba0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba0da:	2600      	movs	r6, #0
   ba0dc:	6006      	str	r6, [r0, #0]
   ba0de:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba0e0:	2028      	movs	r0, #40	; 0x28
   ba0e2:	f7f9 ffd8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba0e6:	1e04      	subs	r4, r0, #0
   ba0e8:	f104 070c 	add.w	r7, r4, #12
   ba0ec:	d00a      	beq.n	ba104 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba0ee:	2301      	movs	r3, #1
   ba0f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba0f4:	4b05      	ldr	r3, [pc, #20]	; (ba10c <_ZN8particle10BleServiceC1Ev+0x34>)
   ba0f6:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   ba0f8:	4638      	mov	r0, r7
   ba0fa:	f7ff fd1d 	bl	b9b38 <_ZN8particle7BleUuidC1Ev>
   ba0fe:	6226      	str	r6, [r4, #32]
   ba100:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   ba104:	e9c5 7400 	strd	r7, r4, [r5]
}
   ba108:	4628      	mov	r0, r5
   ba10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba10c:	000c18c4 	.word	0x000c18c4

000ba110 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba110:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba112:	2500      	movs	r5, #0
   ba114:	6005      	str	r5, [r0, #0]
   ba116:	4606      	mov	r6, r0
   ba118:	2030      	movs	r0, #48	; 0x30
   ba11a:	f7f9 ffbc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba11e:	4604      	mov	r4, r0
   ba120:	b188      	cbz	r0, ba146 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba122:	2301      	movs	r3, #1
   ba124:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba128:	4b09      	ldr	r3, [pc, #36]	; (ba150 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba12a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba130:	8183      	strh	r3, [r0, #12]
   ba132:	300e      	adds	r0, #14
   ba134:	f7ff fcf5 	bl	b9b22 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba138:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba13c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba140:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba144:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba146:	6074      	str	r4, [r6, #4]
   ba148:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba14a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba14c:	4630      	mov	r0, r6
   ba14e:	bd70      	pop	{r4, r5, r6, pc}
   ba150:	000c18e0 	.word	0x000c18e0

000ba154 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   ba154:	b513      	push	{r0, r1, r4, lr}
   ba156:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba158:	a801      	add	r0, sp, #4
   ba15a:	f7ff fca7 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba15e:	6823      	ldr	r3, [r4, #0]
   ba160:	881c      	ldrh	r4, [r3, #0]
   ba162:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba166:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   ba168:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba16a:	bf18      	it	ne
   ba16c:	2401      	movne	r4, #1
    WiringBleLock lk;
   ba16e:	f7ff fcab 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba172:	4620      	mov	r0, r4
   ba174:	b002      	add	sp, #8
   ba176:	bd10      	pop	{r4, pc}

000ba178 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   ba178:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba17a:	4605      	mov	r5, r0
   ba17c:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba17e:	a801      	add	r0, sp, #4
   ba180:	f7ff fc94 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba184:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba186:	6823      	ldr	r3, [r4, #0]
   ba188:	f8c2 3002 	str.w	r3, [r2, #2]
   ba18c:	6863      	ldr	r3, [r4, #4]
   ba18e:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   ba192:	a801      	add	r0, sp, #4
   ba194:	f7ff fc98 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   ba198:	b003      	add	sp, #12
   ba19a:	bd30      	pop	{r4, r5, pc}

000ba19c <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba19e:	460d      	mov	r5, r1
   ba1a0:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba1a2:	a801      	add	r0, sp, #4
   ba1a4:	f7ff fc82 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
   ba1a8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba1aa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba1ae:	6023      	str	r3, [r4, #0]
   ba1b0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba1b4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba1b6:	a801      	add	r0, sp, #4
   ba1b8:	f7ff fc86 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba1bc:	4620      	mov	r0, r4
   ba1be:	b003      	add	sp, #12
   ba1c0:	bd30      	pop	{r4, r5, pc}

000ba1c2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba1c2:	b530      	push	{r4, r5, lr}
   ba1c4:	4605      	mov	r5, r0
   ba1c6:	b087      	sub	sp, #28
   ba1c8:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba1ca:	a801      	add	r0, sp, #4
   ba1cc:	f7ff fc6e 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba1d0:	682a      	ldr	r2, [r5, #0]
   ba1d2:	6823      	ldr	r3, [r4, #0]
   ba1d4:	8812      	ldrh	r2, [r2, #0]
   ba1d6:	881b      	ldrh	r3, [r3, #0]
   ba1d8:	429a      	cmp	r2, r3
   ba1da:	d10d      	bne.n	ba1f8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba1dc:	4629      	mov	r1, r5
   ba1de:	a802      	add	r0, sp, #8
   ba1e0:	f7ff ffdc 	bl	ba19c <_ZNK8particle13BlePeerDevice7addressEv>
   ba1e4:	4621      	mov	r1, r4
   ba1e6:	a804      	add	r0, sp, #16
   ba1e8:	f7ff ffd8 	bl	ba19c <_ZNK8particle13BlePeerDevice7addressEv>
   ba1ec:	a904      	add	r1, sp, #16
   ba1ee:	a802      	add	r0, sp, #8
   ba1f0:	f7ff fc83 	bl	b9afa <_ZNK8particle10BleAddresseqERKS0_>
   ba1f4:	4604      	mov	r4, r0
   ba1f6:	b900      	cbnz	r0, ba1fa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba1f8:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba1fa:	a801      	add	r0, sp, #4
   ba1fc:	f7ff fc64 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba200:	4620      	mov	r0, r4
   ba202:	b007      	add	sp, #28
   ba204:	bd30      	pop	{r4, r5, pc}
	...

000ba208 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba208:	b510      	push	{r4, lr}
   ba20a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba20c:	2064      	movs	r0, #100	; 0x64
   ba20e:	f7f9 ff42 	bl	b4096 <_Znwj>
   ba212:	b168      	cbz	r0, ba230 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba214:	2300      	movs	r3, #0
   ba216:	e9c0 3300 	strd	r3, r3, [r0]
   ba21a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba21e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba222:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba226:	6203      	str	r3, [r0, #32]
   ba228:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba22a:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba22c:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba22e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba230:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba232:	b920      	cbnz	r0, ba23e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba234:	4a0a      	ldr	r2, [pc, #40]	; (ba260 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba236:	490b      	ldr	r1, [pc, #44]	; (ba264 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba238:	200a      	movs	r0, #10
   ba23a:	f7ff f9b3 	bl	b95a4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba23e:	2000      	movs	r0, #0
   ba240:	f7fe feec 	bl	b901c <hal_ble_stack_init>
   ba244:	b120      	cbz	r0, ba250 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba246:	4a06      	ldr	r2, [pc, #24]	; (ba260 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba248:	4907      	ldr	r1, [pc, #28]	; (ba268 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba24a:	200a      	movs	r0, #10
   ba24c:	f7ff f9aa 	bl	b95a4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba250:	6821      	ldr	r1, [r4, #0]
   ba252:	4806      	ldr	r0, [pc, #24]	; (ba26c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   ba254:	2200      	movs	r2, #0
   ba256:	f7fe ff6d 	bl	b9134 <hal_ble_set_callback_on_periph_link_events>
}
   ba25a:	4620      	mov	r0, r4
   ba25c:	bd10      	pop	{r4, pc}
   ba25e:	bf00      	nop
   ba260:	000b9255 	.word	0x000b9255
   ba264:	000c1684 	.word	0x000c1684
   ba268:	000c16c2 	.word	0x000c16c2
   ba26c:	000bacb5 	.word	0x000bacb5

000ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   ba270:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   ba272:	4c0a      	ldr	r4, [pc, #40]	; (ba29c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   ba274:	7823      	ldrb	r3, [r4, #0]
   ba276:	f3bf 8f5b 	dmb	ish
   ba27a:	07db      	lsls	r3, r3, #31
   ba27c:	d40c      	bmi.n	ba298 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba27e:	4620      	mov	r0, r4
   ba280:	f7f9 ff1c 	bl	b40bc <__cxa_guard_acquire>
   ba284:	b140      	cbz	r0, ba298 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba286:	4806      	ldr	r0, [pc, #24]	; (ba2a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba288:	f7ff ffbe 	bl	ba208 <_ZN8particle14BleLocalDeviceC1Ev>
   ba28c:	4620      	mov	r0, r4
   ba28e:	f7f9 ff1a 	bl	b40c6 <__cxa_guard_release>
   ba292:	4804      	ldr	r0, [pc, #16]	; (ba2a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   ba294:	f003 ff9c 	bl	be1d0 <atexit>
    return instance;
}
   ba298:	4801      	ldr	r0, [pc, #4]	; (ba2a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba29a:	bd10      	pop	{r4, pc}
   ba29c:	2003e654 	.word	0x2003e654
   ba2a0:	2003e65c 	.word	0x2003e65c
   ba2a4:	000ba5b9 	.word	0x000ba5b9

000ba2a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba2a8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   ba2aa:	6803      	ldr	r3, [r0, #0]
   ba2ac:	3b09      	subs	r3, #9
   ba2ae:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba2b0:	b08d      	sub	sp, #52	; 0x34
   ba2b2:	4604      	mov	r4, r0
   ba2b4:	460d      	mov	r5, r1
    switch (event->type) {
   ba2b6:	d811      	bhi.n	ba2dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   ba2b8:	f7ff ffda 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba2bc:	88a1      	ldrh	r1, [r4, #4]
   ba2be:	6800      	ldr	r0, [r0, #0]
   ba2c0:	f7ff fe39 	bl	b9f36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   ba2c4:	4603      	mov	r3, r0
   ba2c6:	b958      	cbnz	r0, ba2e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   ba2c8:	2220      	movs	r2, #32
   ba2ca:	e9cd 2004 	strd	r2, r0, [sp, #16]
   ba2ce:	4a0b      	ldr	r2, [pc, #44]	; (ba2fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   ba2d0:	9200      	str	r2, [sp, #0]
   ba2d2:	490b      	ldr	r1, [pc, #44]	; (ba300 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   ba2d4:	aa04      	add	r2, sp, #16
   ba2d6:	2032      	movs	r0, #50	; 0x32
   ba2d8:	f7ff f96c 	bl	b95b4 <log_message>
}
   ba2dc:	b00d      	add	sp, #52	; 0x34
   ba2de:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   ba2e0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   ba2e2:	2a00      	cmp	r2, #0
   ba2e4:	d0fa      	beq.n	ba2dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   ba2e6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba2ea:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   ba2ee:	e9cd 1203 	strd	r1, r2, [sp, #12]
   ba2f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   ba2f4:	aa04      	add	r2, sp, #16
   ba2f6:	a903      	add	r1, sp, #12
   ba2f8:	47a0      	blx	r4
}
   ba2fa:	e7ef      	b.n	ba2dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   ba2fc:	000c1704 	.word	0x000c1704
   ba300:	000c169b 	.word	0x000c169b

000ba304 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   ba304:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   ba306:	2000      	movs	r0, #0
   ba308:	f7fe fe88 	bl	b901c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   ba30c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba310:	bd08      	pop	{r3, pc}

000ba312 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   ba312:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   ba314:	2100      	movs	r1, #0
   ba316:	f7fe be89 	b.w	b902c <hal_ble_gap_set_tx_power>
	...

000ba31c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   ba31c:	b570      	push	{r4, r5, r6, lr}
   ba31e:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   ba320:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   ba322:	460e      	mov	r6, r1
   ba324:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   ba326:	f7ff fb3f 	bl	b99a8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   ba32a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba32e:	f7ff fb46 	bl	b99be <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   ba332:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   ba336:	2200      	movs	r2, #0
   ba338:	4621      	mov	r1, r4
   ba33a:	4803      	ldr	r0, [pc, #12]	; (ba348 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   ba33c:	f7fe fe8e 	bl	b905c <hal_ble_gap_start_scan>
   ba340:	2800      	cmp	r0, #0
        return foundCount_;
   ba342:	bfa8      	it	ge
   ba344:	6960      	ldrge	r0, [r4, #20]
    }
   ba346:	bd70      	pop	{r4, r5, r6, pc}
   ba348:	000bbcc1 	.word	0x000bbcc1

000ba34c <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   ba34c:	b510      	push	{r4, lr}
   ba34e:	4604      	mov	r4, r0
    ::free(ptr);
   ba350:	6940      	ldr	r0, [r0, #20]
   ba352:	f7ff fa13 	bl	b977c <free>
   ba356:	68a0      	ldr	r0, [r4, #8]
   ba358:	f7ff fa10 	bl	b977c <free>
   ba35c:	4620      	mov	r0, r4
   ba35e:	bd10      	pop	{r4, pc}

000ba360 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   ba360:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   ba362:	f647 717f 	movw	r1, #32639	; 0x7f7f
   ba366:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   ba36a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba36e:	e9c0 2204 	strd	r2, r2, [r0, #16]
   ba372:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   ba376:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   ba37a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   ba37e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   ba382:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   ba386:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   ba38a:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   ba38e:	6202      	str	r2, [r0, #32]
   ba390:	6302      	str	r2, [r0, #48]	; 0x30
   ba392:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   ba396:	4770      	bx	lr

000ba398 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba398:	b530      	push	{r4, r5, lr}
   ba39a:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   ba39c:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba39e:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba3a0:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba3a2:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba3a6:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   ba3a8:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba3aa:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   ba3ac:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   ba3b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   ba3b4:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba3b6:	f7fe fe49 	bl	b904c <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba3ba:	4621      	mov	r1, r4
   ba3bc:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   ba3be:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba3c2:	f7fe fe3b 	bl	b903c <hal_ble_gap_set_scan_parameters>
}
   ba3c6:	b005      	add	sp, #20
   ba3c8:	bd30      	pop	{r4, r5, pc}

000ba3ca <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   ba3ca:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   ba3cc:	69d8      	ldr	r0, [r3, #28]
}
   ba3ce:	2800      	cmp	r0, #0
   ba3d0:	bfd4      	ite	le
   ba3d2:	2000      	movle	r0, #0
   ba3d4:	2001      	movgt	r0, #1
   ba3d6:	4770      	bx	lr

000ba3d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba3da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba3e0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ba3e4:	42ae      	cmp	r6, r5
   ba3e6:	d004      	beq.n	ba3f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ba3e8:	4628      	mov	r0, r5
   ba3ea:	f002 fbd9 	bl	bcba0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ba3ee:	3510      	adds	r5, #16
   ba3f0:	e7f8      	b.n	ba3e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba3f2:	6820      	ldr	r0, [r4, #0]
   ba3f4:	f7ff f9c2 	bl	b977c <free>
}
   ba3f8:	4620      	mov	r0, r4
   ba3fa:	bd70      	pop	{r4, r5, r6, pc}

000ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3fc:	b510      	push	{r4, lr}
   ba3fe:	4604      	mov	r4, r0
    ::free(ptr);
   ba400:	6800      	ldr	r0, [r0, #0]
   ba402:	f7ff f9bb 	bl	b977c <free>
}
   ba406:	4620      	mov	r0, r4
   ba408:	bd10      	pop	{r4, pc}

000ba40a <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   ba40a:	b570      	push	{r4, r5, r6, lr}
   ba40c:	4604      	mov	r4, r0
    ::free(ptr);
   ba40e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   ba410:	f7ff f9b4 	bl	b977c <free>
   ba414:	6d20      	ldr	r0, [r4, #80]	; 0x50
   ba416:	f7ff f9b1 	bl	b977c <free>
    }
    ~BleScanFilter() = default;
   ba41a:	f104 0538 	add.w	r5, r4, #56	; 0x38
   ba41e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba422:	f7ff ffeb 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   ba426:	4628      	mov	r0, r5
   ba428:	f7ff ffd6 	bl	ba3d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   ba42c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba430:	f7f9 ff82 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba434:	f104 0018 	add.w	r0, r4, #24
   ba438:	f7f9 ff7e 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba43c:	e9d4 5300 	ldrd	r5, r3, [r4]
   ba440:	2624      	movs	r6, #36	; 0x24
   ba442:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba446:	42ae      	cmp	r6, r5
   ba448:	d004      	beq.n	ba454 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   ba44a:	4628      	mov	r0, r5
   ba44c:	f7ff ff7e 	bl	ba34c <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   ba450:	3524      	adds	r5, #36	; 0x24
   ba452:	e7f8      	b.n	ba446 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   ba454:	6820      	ldr	r0, [r4, #0]
   ba456:	f7ff f991 	bl	b977c <free>
   ba45a:	4620      	mov	r0, r4
   ba45c:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba460 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   ba460:	b530      	push	{r4, r5, lr}
   ba462:	4615      	mov	r5, r2
   ba464:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   ba466:	460c      	mov	r4, r1
   ba468:	b179      	cbz	r1, ba48a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   ba46a:	b172      	cbz	r2, ba48a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   ba46c:	a801      	add	r0, sp, #4
   ba46e:	f7ff ff77 	bl	ba360 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   ba472:	4621      	mov	r1, r4
   ba474:	462a      	mov	r2, r5
   ba476:	a801      	add	r0, sp, #4
   ba478:	f7ff ff50 	bl	ba31c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   ba47c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   ba47e:	a801      	add	r0, sp, #4
   ba480:	f7ff ffc3 	bl	ba40a <_ZN8particle16BleScanDelegatorD1Ev>
}
   ba484:	4620      	mov	r0, r4
   ba486:	b01f      	add	sp, #124	; 0x7c
   ba488:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba48a:	4c01      	ldr	r4, [pc, #4]	; (ba490 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   ba48c:	e7fa      	b.n	ba484 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   ba48e:	bf00      	nop
   ba490:	fffffef2 	.word	0xfffffef2

000ba494 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba494:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   ba496:	1e14      	subs	r4, r2, #0
   ba498:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba49a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   ba49c:	db02      	blt.n	ba4a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   ba49e:	1862      	adds	r2, r4, r1
   ba4a0:	429a      	cmp	r2, r3
   ba4a2:	dd00      	ble.n	ba4a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   ba4a4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   ba4a6:	682a      	ldr	r2, [r5, #0]
   ba4a8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   ba4aa:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   ba4ac:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba4ae:	1a52      	subs	r2, r2, r1
   ba4b0:	f003 feb9 	bl	be226 <memmove>
    size_ -= n;
   ba4b4:	686a      	ldr	r2, [r5, #4]
   ba4b6:	1b12      	subs	r2, r2, r4
   ba4b8:	606a      	str	r2, [r5, #4]
}
   ba4ba:	bd38      	pop	{r3, r4, r5, pc}

000ba4bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   ba4bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba4be:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   ba4c0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba4c2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4c4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   ba4c6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4c8:	f7f9 fde5 	bl	b4096 <_Znwj>
   ba4cc:	b118      	cbz	r0, ba4d6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   ba4ce:	682b      	ldr	r3, [r5, #0]
   ba4d0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba4d2:	686b      	ldr	r3, [r5, #4]
   ba4d4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   ba4d6:	4b03      	ldr	r3, [pc, #12]	; (ba4e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   ba4d8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba4da:	4b03      	ldr	r3, [pc, #12]	; (ba4e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4dc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba4de:	60a3      	str	r3, [r4, #8]
      }
   ba4e0:	4620      	mov	r0, r4
   ba4e2:	bd38      	pop	{r3, r4, r5, pc}
   ba4e4:	000b9951 	.word	0x000b9951
   ba4e8:	000b9969 	.word	0x000b9969

000ba4ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   ba4ec:	680b      	ldr	r3, [r1, #0]
   ba4ee:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   ba4f0:	b113      	cbz	r3, ba4f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   ba4f2:	685a      	ldr	r2, [r3, #4]
   ba4f4:	3201      	adds	r2, #1
   ba4f6:	605a      	str	r2, [r3, #4]
      }
   ba4f8:	4770      	bx	lr

000ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   ba4fa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba4fc:	f851 3b04 	ldr.w	r3, [r1], #4
   ba500:	4604      	mov	r4, r0
   ba502:	f840 3b04 	str.w	r3, [r0], #4
   ba506:	f7ff fff1 	bl	ba4ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   ba50a:	6823      	ldr	r3, [r4, #0]
   ba50c:	b90b      	cbnz	r3, ba512 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   ba50e:	f7ff fa15 	bl	b993c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   ba512:	4620      	mov	r0, r4
   ba514:	bd10      	pop	{r4, pc}

000ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba516:	b510      	push	{r4, lr}
   ba518:	f851 3b04 	ldr.w	r3, [r1], #4
   ba51c:	4604      	mov	r4, r0
   ba51e:	f840 3b04 	str.w	r3, [r0], #4
   ba522:	f7ff ffe3 	bl	ba4ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba526:	4620      	mov	r0, r4
   ba528:	bd10      	pop	{r4, pc}

000ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba52a:	b510      	push	{r4, lr}
   ba52c:	f851 3b04 	ldr.w	r3, [r1], #4
   ba530:	4604      	mov	r4, r0
   ba532:	f840 3b04 	str.w	r3, [r0], #4
   ba536:	f7ff ffd9 	bl	ba4ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba53a:	4620      	mov	r0, r4
   ba53c:	bd10      	pop	{r4, pc}

000ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   ba53e:	b510      	push	{r4, lr}
   ba540:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   ba542:	6800      	ldr	r0, [r0, #0]
   ba544:	b108      	cbz	r0, ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   ba546:	f7f9 ff35 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   ba54a:	4620      	mov	r0, r4
   ba54c:	bd10      	pop	{r4, pc}

000ba54e <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   ba54e:	b510      	push	{r4, lr}
   ba550:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba552:	3004      	adds	r0, #4
   ba554:	f7ff fff3 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba558:	4620      	mov	r0, r4
   ba55a:	bd10      	pop	{r4, pc}

000ba55c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba55c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba55e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba562:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba564:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba568:	42ae      	cmp	r6, r5
   ba56a:	d004      	beq.n	ba576 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   ba56c:	1d28      	adds	r0, r5, #4
   ba56e:	f7ff ffe6 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba572:	3508      	adds	r5, #8
   ba574:	e7f8      	b.n	ba568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba576:	6820      	ldr	r0, [r4, #0]
   ba578:	f7ff f900 	bl	b977c <free>
}
   ba57c:	4620      	mov	r0, r4
   ba57e:	bd70      	pop	{r4, r5, r6, pc}

000ba580 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba580:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba582:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba586:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba588:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba58c:	42ae      	cmp	r6, r5
   ba58e:	d004      	beq.n	ba59a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   ba590:	1d28      	adds	r0, r5, #4
   ba592:	f7ff ffd4 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba596:	3508      	adds	r5, #8
   ba598:	e7f8      	b.n	ba58c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba59a:	6820      	ldr	r0, [r4, #0]
   ba59c:	f7ff f8ee 	bl	b977c <free>
}
   ba5a0:	4620      	mov	r0, r4
   ba5a2:	bd70      	pop	{r4, r5, r6, pc}

000ba5a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba5a4:	b510      	push	{r4, lr}
   ba5a6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   ba5a8:	3024      	adds	r0, #36	; 0x24
   ba5aa:	f7ff ffe9 	bl	ba580 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba5ae:	f104 0018 	add.w	r0, r4, #24
   ba5b2:	f7ff ffd3 	bl	ba55c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   ba5b6:	bd10      	pop	{r4, pc}

000ba5b8 <__tcf_0>:
    static BleLocalDevice instance;
   ba5b8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   ba5ba:	4b17      	ldr	r3, [pc, #92]	; (ba618 <__tcf_0+0x60>)
   ba5bc:	681c      	ldr	r4, [r3, #0]
   ba5be:	b354      	cbz	r4, ba616 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   ba5c0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba5c4:	f7f9 feb8 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba5c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba5cc:	f7f9 feb4 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba5d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba5d4:	f7f9 feb0 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba5d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba5dc:	f7f9 feac 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba5e0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   ba5e4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba5e8:	42ae      	cmp	r6, r5
   ba5ea:	d004      	beq.n	ba5f6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   ba5ec:	1d28      	adds	r0, r5, #4
   ba5ee:	f7ff ffa6 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5f2:	3508      	adds	r5, #8
   ba5f4:	e7f8      	b.n	ba5e8 <__tcf_0+0x30>
    ::free(ptr);
   ba5f6:	69a0      	ldr	r0, [r4, #24]
   ba5f8:	f7ff f8c0 	bl	b977c <free>
    ~BleLocalDeviceImpl() = default;
   ba5fc:	f104 000c 	add.w	r0, r4, #12
   ba600:	f7ff ffbe 	bl	ba580 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba604:	4620      	mov	r0, r4
   ba606:	f7ff ffa9 	bl	ba55c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   ba60a:	4620      	mov	r0, r4
   ba60c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   ba60e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba612:	f7f9 bd44 	b.w	b409e <_ZdlPvj>
   ba616:	bd70      	pop	{r4, r5, r6, pc}
   ba618:	2003e65c 	.word	0x2003e65c

000ba61c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   ba61c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba61e:	b510      	push	{r4, lr}
      if (_M_empty())
   ba620:	b90a      	cbnz	r2, ba626 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   ba622:	f002 ff49 	bl	bd4b8 <_ZSt25__throw_bad_function_callv>
    }
   ba626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba62a:	68c3      	ldr	r3, [r0, #12]
   ba62c:	4718      	bx	r3

000ba62e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   ba632:	2300      	movs	r3, #0
   ba634:	e9c0 3300 	strd	r3, r3, [r0]
   ba638:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba63a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   ba63e:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba640:	4605      	mov	r5, r0
   ba642:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba644:	dd4a      	ble.n	ba6dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   ba646:	ea4f 1008 	mov.w	r0, r8, lsl #4
   ba64a:	f7ff f88f 	bl	b976c <malloc>
            if (!d) {
   ba64e:	4606      	mov	r6, r0
   ba650:	2800      	cmp	r0, #0
   ba652:	d043      	beq.n	ba6dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   ba654:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   ba658:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   ba65a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   ba65e:	d916      	bls.n	ba68e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   ba660:	4550      	cmp	r0, sl
   ba662:	d215      	bcs.n	ba690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   ba664:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   ba668:	f1a4 0910 	sub.w	r9, r4, #16
   ba66c:	ebaa 0404 	sub.w	r4, sl, r4
   ba670:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   ba672:	45d1      	cmp	r9, sl
   ba674:	d01d      	beq.n	ba6b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   ba676:	b11c      	cbz	r4, ba680 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   ba678:	4651      	mov	r1, sl
   ba67a:	4620      	mov	r0, r4
   ba67c:	f002 fb0c 	bl	bcc98 <_ZN6StringC1EOS_>
                end->~T();
   ba680:	4650      	mov	r0, sl
   ba682:	f002 fa8d 	bl	bcba0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba686:	f1aa 0a10 	sub.w	sl, sl, #16
   ba68a:	3c10      	subs	r4, #16
   ba68c:	e7f1      	b.n	ba672 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   ba68e:	d010      	beq.n	ba6b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   ba690:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   ba692:	45a2      	cmp	sl, r4
   ba694:	d00d      	beq.n	ba6b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   ba696:	f1b9 0f00 	cmp.w	r9, #0
   ba69a:	d003      	beq.n	ba6a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   ba69c:	4621      	mov	r1, r4
   ba69e:	4648      	mov	r0, r9
   ba6a0:	f002 fafa 	bl	bcc98 <_ZN6StringC1EOS_>
                p->~T();
   ba6a4:	4620      	mov	r0, r4
   ba6a6:	f002 fa7b 	bl	bcba0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba6aa:	3410      	adds	r4, #16
   ba6ac:	f109 0910 	add.w	r9, r9, #16
   ba6b0:	e7ef      	b.n	ba692 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   ba6b2:	6828      	ldr	r0, [r5, #0]
   ba6b4:	f7ff f862 	bl	b977c <free>
        capacity_ = n;
   ba6b8:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   ba6bc:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba6be:	e9d7 4300 	ldrd	r4, r3, [r7]
   ba6c2:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   ba6c6:	45a0      	cmp	r8, r4
   ba6c8:	d006      	beq.n	ba6d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   ba6ca:	4621      	mov	r1, r4
   ba6cc:	4630      	mov	r0, r6
   ba6ce:	f002 fafd 	bl	bcccc <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   ba6d2:	3410      	adds	r4, #16
   ba6d4:	3610      	adds	r6, #16
   ba6d6:	e7f6      	b.n	ba6c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   ba6d8:	687b      	ldr	r3, [r7, #4]
   ba6da:	606b      	str	r3, [r5, #4]
}
   ba6dc:	4628      	mov	r0, r5
   ba6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ba6e2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   ba6e2:	b530      	push	{r4, r5, lr}
   ba6e4:	b08d      	sub	sp, #52	; 0x34
   ba6e6:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   ba6e8:	f100 0138 	add.w	r1, r0, #56	; 0x38
   ba6ec:	a801      	add	r0, sp, #4
   ba6ee:	f7ff ff9e 	bl	ba62e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   ba6f2:	9b02      	ldr	r3, [sp, #8]
   ba6f4:	2b00      	cmp	r3, #0
   ba6f6:	dd2f      	ble.n	ba758 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   ba6f8:	f104 0114 	add.w	r1, r4, #20
   ba6fc:	a804      	add	r0, sp, #16
   ba6fe:	f7ff fbb5 	bl	b9e6c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   ba702:	f104 0108 	add.w	r1, r4, #8
   ba706:	a808      	add	r0, sp, #32
   ba708:	f7ff fbb0 	bl	b9e6c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   ba70c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba70e:	9b06      	ldr	r3, [sp, #24]
   ba710:	4313      	orrs	r3, r2
   ba712:	d01f      	beq.n	ba754 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   ba714:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   ba718:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   ba71c:	42ac      	cmp	r4, r5
   ba71e:	d019      	beq.n	ba754 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   ba720:	a904      	add	r1, sp, #16
   ba722:	4620      	mov	r0, r4
   ba724:	f002 fb28 	bl	bcd78 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba728:	b160      	cbz	r0, ba744 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   ba72a:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   ba72c:	a808      	add	r0, sp, #32
   ba72e:	f002 fa37 	bl	bcba0 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   ba732:	a804      	add	r0, sp, #16
   ba734:	f002 fa34 	bl	bcba0 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   ba738:	a801      	add	r0, sp, #4
   ba73a:	f7ff fe4d 	bl	ba3d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   ba73e:	4620      	mov	r0, r4
   ba740:	b00d      	add	sp, #52	; 0x34
   ba742:	bd30      	pop	{r4, r5, pc}
   ba744:	4620      	mov	r0, r4
   ba746:	a908      	add	r1, sp, #32
   ba748:	f002 fb16 	bl	bcd78 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba74c:	3410      	adds	r4, #16
   ba74e:	2800      	cmp	r0, #0
   ba750:	d0e4      	beq.n	ba71c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   ba752:	e7ea      	b.n	ba72a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   ba754:	2400      	movs	r4, #0
   ba756:	e7e9      	b.n	ba72c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   ba758:	2401      	movs	r4, #1
   ba75a:	e7ed      	b.n	ba738 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000ba75c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   ba75e:	2300      	movs	r3, #0
   ba760:	e9c0 3300 	strd	r3, r3, [r0]
   ba764:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba766:	684f      	ldr	r7, [r1, #4]
   ba768:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba76a:	4605      	mov	r5, r0
   ba76c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba76e:	dd3e      	ble.n	ba7ee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   ba770:	00f8      	lsls	r0, r7, #3
   ba772:	f7fe fffb 	bl	b976c <malloc>
            if (!d) {
   ba776:	4604      	mov	r4, r0
   ba778:	b3c8      	cbz	r0, ba7ee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   ba77a:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   ba77e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   ba780:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   ba784:	d910      	bls.n	ba7a8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba786:	429c      	cmp	r4, r3
   ba788:	d20f      	bcs.n	ba7aa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   ba78a:	3b08      	subs	r3, #8
            dest += end - p - 1;
   ba78c:	1a1a      	subs	r2, r3, r0
   ba78e:	f1a0 0c08 	sub.w	ip, r0, #8
   ba792:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   ba794:	459c      	cmp	ip, r3
   ba796:	d018      	beq.n	ba7ca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   ba798:	b11a      	cbz	r2, ba7a2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   ba79a:	6819      	ldr	r1, [r3, #0]
   ba79c:	6011      	str	r1, [r2, #0]
   ba79e:	6859      	ldr	r1, [r3, #4]
   ba7a0:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   ba7a2:	3b08      	subs	r3, #8
   ba7a4:	3a08      	subs	r2, #8
   ba7a6:	e7f5      	b.n	ba794 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   ba7a8:	d00f      	beq.n	ba7ca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   ba7aa:	4601      	mov	r1, r0
   ba7ac:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   ba7ae:	428b      	cmp	r3, r1
   ba7b0:	d00b      	beq.n	ba7ca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   ba7b2:	b13a      	cbz	r2, ba7c4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   ba7b4:	f8d1 c000 	ldr.w	ip, [r1]
   ba7b8:	f8c2 c000 	str.w	ip, [r2]
   ba7bc:	f8d1 c004 	ldr.w	ip, [r1, #4]
   ba7c0:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   ba7c4:	3108      	adds	r1, #8
   ba7c6:	3208      	adds	r2, #8
   ba7c8:	e7f1      	b.n	ba7ae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   ba7ca:	f7fe ffd7 	bl	b977c <free>
        data_ = d;
   ba7ce:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba7d0:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba7d2:	e9d6 3100 	ldrd	r3, r1, [r6]
   ba7d6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   ba7da:	4298      	cmp	r0, r3
   ba7dc:	d006      	beq.n	ba7ec <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   ba7de:	681a      	ldr	r2, [r3, #0]
   ba7e0:	6022      	str	r2, [r4, #0]
   ba7e2:	685a      	ldr	r2, [r3, #4]
   ba7e4:	6062      	str	r2, [r4, #4]
   ba7e6:	3308      	adds	r3, #8
   ba7e8:	3408      	adds	r4, #8
   ba7ea:	e7f6      	b.n	ba7da <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   ba7ec:	6069      	str	r1, [r5, #4]
}
   ba7ee:	4628      	mov	r0, r5
   ba7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba7f2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba7f2:	b570      	push	{r4, r5, r6, lr}
   ba7f4:	4604      	mov	r4, r0
        capacity_(0) {
   ba7f6:	2000      	movs	r0, #0
   ba7f8:	e9c4 0000 	strd	r0, r0, [r4]
   ba7fc:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba7fe:	684e      	ldr	r6, [r1, #4]
   ba800:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba802:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba804:	dd12      	ble.n	ba82c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   ba806:	0071      	lsls	r1, r6, #1
   ba808:	f7fe ffc0 	bl	b978c <realloc>
            if (!d) {
   ba80c:	b170      	cbz	r0, ba82c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   ba80e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba810:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba812:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba816:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   ba81a:	429a      	cmp	r2, r3
   ba81c:	d004      	beq.n	ba828 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   ba81e:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba822:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   ba826:	e7f8      	b.n	ba81a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   ba828:	686b      	ldr	r3, [r5, #4]
   ba82a:	6063      	str	r3, [r4, #4]
}
   ba82c:	4620      	mov	r0, r4
   ba82e:	bd70      	pop	{r4, r5, r6, pc}

000ba830 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   ba830:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba832:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba834:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba836:	b923      	cbnz	r3, ba842 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   ba838:	6803      	ldr	r3, [r0, #0]
   ba83a:	6818      	ldr	r0, [r3, #0]
   ba83c:	b108      	cbz	r0, ba842 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   ba83e:	f7fe ff9d 	bl	b977c <free>
            func_();
        }
    }
   ba842:	4620      	mov	r0, r4
   ba844:	bd10      	pop	{r4, pc}

000ba846 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   ba846:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba848:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba84a:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba84c:	b923      	cbnz	r3, ba858 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   ba84e:	6803      	ldr	r3, [r0, #0]
   ba850:	6818      	ldr	r0, [r3, #0]
   ba852:	b108      	cbz	r0, ba858 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   ba854:	f7fe ff92 	bl	b977c <free>
    }
   ba858:	4620      	mov	r0, r4
   ba85a:	bd10      	pop	{r4, pc}

000ba85c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   ba85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   ba860:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   ba864:	b08f      	sub	sp, #60	; 0x3c
   ba866:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   ba868:	f1b8 0f00 	cmp.w	r8, #0
   ba86c:	d072      	beq.n	ba954 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   ba86e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   ba870:	2d00      	cmp	r5, #0
   ba872:	d06f      	beq.n	ba954 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   ba874:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba878:	231f      	movs	r3, #31
   ba87a:	2200      	movs	r2, #0
   ba87c:	21ff      	movs	r1, #255	; 0xff
   ba87e:	4648      	mov	r0, r9
   ba880:	f7ff fac1 	bl	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   ba884:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba886:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba888:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba88a:	2200      	movs	r2, #0
   ba88c:	4619      	mov	r1, r3
   ba88e:	4638      	mov	r0, r7
   ba890:	f7ff fab9 	bl	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba894:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba896:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba898:	d006      	beq.n	ba8a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   ba89a:	42ae      	cmp	r6, r5
   ba89c:	d030      	beq.n	ba900 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   ba89e:	2400      	movs	r4, #0
    }
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	b00f      	add	sp, #60	; 0x3c
   ba8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   ba8a8:	4620      	mov	r0, r4
   ba8aa:	f7fe ff5f 	bl	b976c <malloc>
            dismissed_(false) {
   ba8ae:	ab03      	add	r3, sp, #12
   ba8b0:	9304      	str	r3, [sp, #16]
   ba8b2:	2300      	movs	r3, #0
   ba8b4:	4604      	mov	r4, r0
   ba8b6:	9003      	str	r0, [sp, #12]
   ba8b8:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   ba8bc:	b970      	cbnz	r0, ba8dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   ba8be:	2320      	movs	r3, #32
   ba8c0:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba8c4:	4b24      	ldr	r3, [pc, #144]	; (ba958 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba8c6:	9300      	str	r3, [sp, #0]
   ba8c8:	4924      	ldr	r1, [pc, #144]	; (ba95c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba8ca:	4603      	mov	r3, r0
   ba8cc:	aa06      	add	r2, sp, #24
   ba8ce:	2032      	movs	r0, #50	; 0x32
   ba8d0:	f7fe fe70 	bl	b95b4 <log_message>
                    return false;
   ba8d4:	a804      	add	r0, sp, #16
   ba8d6:	f7ff ffab 	bl	ba830 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   ba8da:	e7e1      	b.n	ba8a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   ba8dc:	4602      	mov	r2, r0
   ba8de:	21ff      	movs	r1, #255	; 0xff
   ba8e0:	462b      	mov	r3, r5
   ba8e2:	4648      	mov	r0, r9
   ba8e4:	f7ff fa8f 	bl	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   ba8e8:	9803      	ldr	r0, [sp, #12]
   ba8ea:	462a      	mov	r2, r5
   ba8ec:	4641      	mov	r1, r8
   ba8ee:	f003 fc7c 	bl	be1ea <memcmp>
   ba8f2:	b118      	cbz	r0, ba8fc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   ba8f4:	a804      	add	r0, sp, #16
   ba8f6:	f7ff ff9b 	bl	ba830 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   ba8fa:	e7ce      	b.n	ba89a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   ba8fc:	2401      	movs	r4, #1
   ba8fe:	e7e9      	b.n	ba8d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   ba900:	4628      	mov	r0, r5
   ba902:	f7fe ff33 	bl	b976c <malloc>
   ba906:	2400      	movs	r4, #0
   ba908:	ab03      	add	r3, sp, #12
   ba90a:	4606      	mov	r6, r0
   ba90c:	9003      	str	r0, [sp, #12]
   ba90e:	9304      	str	r3, [sp, #16]
   ba910:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   ba914:	b978      	cbnz	r0, ba936 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   ba916:	2320      	movs	r3, #32
   ba918:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba91c:	4b0e      	ldr	r3, [pc, #56]	; (ba958 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba91e:	9300      	str	r3, [sp, #0]
   ba920:	490e      	ldr	r1, [pc, #56]	; (ba95c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba922:	4603      	mov	r3, r0
   ba924:	aa06      	add	r2, sp, #24
   ba926:	2032      	movs	r0, #50	; 0x32
   ba928:	f7fe fe44 	bl	b95b4 <log_message>
                    return false;
   ba92c:	4634      	mov	r4, r6
   ba92e:	a804      	add	r0, sp, #16
   ba930:	f7ff ff89 	bl	ba846 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   ba934:	e7b4      	b.n	ba8a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   ba936:	4602      	mov	r2, r0
   ba938:	21ff      	movs	r1, #255	; 0xff
   ba93a:	462b      	mov	r3, r5
   ba93c:	4638      	mov	r0, r7
   ba93e:	f7ff fa62 	bl	b9e06 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   ba942:	9803      	ldr	r0, [sp, #12]
   ba944:	462a      	mov	r2, r5
   ba946:	4641      	mov	r1, r8
   ba948:	f003 fc4f 	bl	be1ea <memcmp>
   ba94c:	2800      	cmp	r0, #0
   ba94e:	d1ee      	bne.n	ba92e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   ba950:	2401      	movs	r4, #1
   ba952:	e7ec      	b.n	ba92e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   ba954:	2401      	movs	r4, #1
   ba956:	e7a3      	b.n	ba8a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   ba958:	000c171c 	.word	0x000c171c
   ba95c:	000c169b 	.word	0x000c169b

000ba960 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   ba960:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba962:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba964:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba966:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba968:	dd03      	ble.n	ba972 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   ba96a:	f7fe ff0f 	bl	b978c <realloc>
            if (!d) {
   ba96e:	b918      	cbnz	r0, ba978 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   ba970:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba972:	f7fe ff03 	bl	b977c <free>
        T* d = nullptr;
   ba976:	2000      	movs	r0, #0
        data_ = d;
   ba978:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba97a:	60a5      	str	r5, [r4, #8]
        return true;
   ba97c:	2001      	movs	r0, #1
   ba97e:	e7f7      	b.n	ba970 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000ba980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba980:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba982:	6883      	ldr	r3, [r0, #8]
   ba984:	428b      	cmp	r3, r1
   ba986:	da02      	bge.n	ba98e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   ba988:	f7ff ffea 	bl	ba960 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   ba98c:	bd08      	pop	{r3, pc}
    return true;
   ba98e:	2001      	movs	r0, #1
   ba990:	e7fc      	b.n	ba98c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000ba992 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba992:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba994:	2300      	movs	r3, #0
   ba996:	e9c0 3300 	strd	r3, r3, [r0]
   ba99a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba99c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba99e:	6849      	ldr	r1, [r1, #4]
   ba9a0:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba9a2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba9a4:	dd10      	ble.n	ba9c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   ba9a6:	f7ff ffdb 	bl	ba960 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba9aa:	b168      	cbz	r0, ba9c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba9ac:	e9d5 3100 	ldrd	r3, r1, [r5]
   ba9b0:	6822      	ldr	r2, [r4, #0]
   ba9b2:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   ba9b4:	4299      	cmp	r1, r3
   ba9b6:	d005      	beq.n	ba9c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   ba9b8:	b10a      	cbz	r2, ba9be <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   ba9ba:	7818      	ldrb	r0, [r3, #0]
   ba9bc:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   ba9be:	3301      	adds	r3, #1
   ba9c0:	3201      	adds	r2, #1
   ba9c2:	e7f7      	b.n	ba9b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   ba9c4:	686b      	ldr	r3, [r5, #4]
   ba9c6:	6063      	str	r3, [r4, #4]
}
   ba9c8:	4620      	mov	r0, r4
   ba9ca:	bd38      	pop	{r3, r4, r5, pc}

000ba9cc <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   ba9cc:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   ba9ce:	680b      	ldr	r3, [r1, #0]
   ba9d0:	6003      	str	r3, [r0, #0]
   ba9d2:	684b      	ldr	r3, [r1, #4]
   ba9d4:	6043      	str	r3, [r0, #4]
   ba9d6:	4604      	mov	r4, r0
   ba9d8:	460d      	mov	r5, r1
class BleAdvertisingData {
   ba9da:	3008      	adds	r0, #8
   ba9dc:	3108      	adds	r1, #8
   ba9de:	f7ff ffd8 	bl	ba992 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba9e2:	f105 0114 	add.w	r1, r5, #20
   ba9e6:	f104 0014 	add.w	r0, r4, #20
   ba9ea:	f7ff ffd2 	bl	ba992 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba9ee:	f895 3020 	ldrb.w	r3, [r5, #32]
   ba9f2:	f884 3020 	strb.w	r3, [r4, #32]
   ba9f6:	4620      	mov	r0, r4
   ba9f8:	bd38      	pop	{r3, r4, r5, pc}

000ba9fa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   ba9fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba9fc:	4604      	mov	r4, r0
   ba9fe:	a801      	add	r0, sp, #4
   baa00:	f7ff ffc7 	bl	ba992 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   baa04:	9b01      	ldr	r3, [sp, #4]
   baa06:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa08:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   baa0a:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa0c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   baa0e:	6062      	str	r2, [r4, #4]
   baa10:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   baa12:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa14:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   baa16:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   baa18:	9001      	str	r0, [sp, #4]
   baa1a:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   baa1c:	f7fe feae 	bl	b977c <free>
   baa20:	b004      	add	sp, #16
   baa22:	bd10      	pop	{r4, pc}

000baa24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa28:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa2a:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baa2c:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa2e:	4419      	add	r1, r3
   baa30:	6883      	ldr	r3, [r0, #8]
   baa32:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baa34:	4604      	mov	r4, r0
   baa36:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa38:	dc12      	bgt.n	baa60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   baa3a:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   baa3c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baa3e:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   baa40:	1bd2      	subs	r2, r2, r7
   baa42:	4631      	mov	r1, r6
   baa44:	1970      	adds	r0, r6, r5
   baa46:	f003 fbee 	bl	be226 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   baa4a:	462a      	mov	r2, r5
   baa4c:	4641      	mov	r1, r8
   baa4e:	4630      	mov	r0, r6
   baa50:	f003 fbdb 	bl	be20a <memcpy>
    size_ += n;
   baa54:	6863      	ldr	r3, [r4, #4]
   baa56:	442b      	add	r3, r5
   baa58:	6063      	str	r3, [r4, #4]
    return true;
   baa5a:	2001      	movs	r0, #1
}
   baa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa60:	f7ff ff7e 	bl	ba960 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   baa64:	2800      	cmp	r0, #0
   baa66:	d1e8      	bne.n	baa3a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   baa68:	e7f8      	b.n	baa5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000baa6a <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   baa6a:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   baa6c:	460a      	mov	r2, r1
   baa6e:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   baa70:	b510      	push	{r4, lr}
   baa72:	4604      	mov	r4, r0
    size_ = 0;
   baa74:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   baa76:	b102      	cbz	r2, baa7a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   baa78:	b90b      	cbnz	r3, baa7e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   baa7a:	2000      	movs	r0, #0
}
   baa7c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   baa7e:	2bff      	cmp	r3, #255	; 0xff
   baa80:	bf28      	it	cs
   baa82:	23ff      	movcs	r3, #255	; 0xff
   baa84:	f7ff ffce 	bl	baa24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   baa88:	2800      	cmp	r0, #0
   baa8a:	d0f7      	beq.n	baa7c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   baa8c:	6860      	ldr	r0, [r4, #4]
   baa8e:	e7f5      	b.n	baa7c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000baa90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   baa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa92:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baa94:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   baa98:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   baa9a:	4604      	mov	r4, r0
   baa9c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baa9e:	da0b      	bge.n	baab8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   baaa0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   baaa2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baaa4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   baaa6:	1b52      	subs	r2, r2, r5
   baaa8:	1c48      	adds	r0, r1, #1
   baaaa:	f003 fbbc 	bl	be226 <memmove>
    new(p) T(std::move(value));
   baaae:	557e      	strb	r6, [r7, r5]
    ++size_;
   baab0:	6863      	ldr	r3, [r4, #4]
   baab2:	3301      	adds	r3, #1
   baab4:	6063      	str	r3, [r4, #4]
}
   baab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baab8:	3101      	adds	r1, #1
   baaba:	f7ff ff51 	bl	ba960 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   baabe:	2800      	cmp	r0, #0
   baac0:	d1ee      	bne.n	baaa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   baac2:	e7f8      	b.n	baab6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000baac4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   baac4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   baac6:	6841      	ldr	r1, [r0, #4]
   baac8:	f7ff bfe2 	b.w	baa90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000baacc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   baacc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   baad0:	4604      	mov	r4, r0
   baad2:	461d      	mov	r5, r3
   baad4:	460f      	mov	r7, r1
   baad6:	ab01      	add	r3, sp, #4
   baad8:	4690      	mov	r8, r2
   baada:	460a      	mov	r2, r1
   baadc:	e9d0 0100 	ldrd	r0, r1, [r0]
   baae0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   baae4:	f7fe ff14 	bl	b9910 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   baae8:	1cae      	adds	r6, r5, #2
   baaea:	6863      	ldr	r3, [r4, #4]
   baaec:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   baaee:	f1b9 0f00 	cmp.w	r9, #0
   baaf2:	d126      	bne.n	bab42 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   baaf4:	b328      	cbz	r0, bab42 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   baaf6:	4433      	add	r3, r6
   baaf8:	1a1b      	subs	r3, r3, r0
   baafa:	2bff      	cmp	r3, #255	; 0xff
   baafc:	d809      	bhi.n	bab12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   baafe:	9901      	ldr	r1, [sp, #4]
   bab00:	4620      	mov	r0, r4
   bab02:	f7ff fcc7 	bl	ba494 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bab06:	6861      	ldr	r1, [r4, #4]
   bab08:	4620      	mov	r0, r4
   bab0a:	4431      	add	r1, r6
   bab0c:	f7ff ff38 	bl	ba980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bab10:	b918      	cbnz	r0, bab1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bab12:	6860      	ldr	r0, [r4, #4]
}
   bab14:	b003      	add	sp, #12
   bab16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bab1a:	1c6a      	adds	r2, r5, #1
   bab1c:	9901      	ldr	r1, [sp, #4]
   bab1e:	b2d2      	uxtb	r2, r2
   bab20:	4620      	mov	r0, r4
   bab22:	f7ff ffb5 	bl	baa90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bab26:	9901      	ldr	r1, [sp, #4]
   bab28:	463a      	mov	r2, r7
   bab2a:	3101      	adds	r1, #1
   bab2c:	4620      	mov	r0, r4
   bab2e:	f7ff ffaf 	bl	baa90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bab32:	9901      	ldr	r1, [sp, #4]
   bab34:	462b      	mov	r3, r5
   bab36:	4642      	mov	r2, r8
   bab38:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bab3a:	4620      	mov	r0, r4
   bab3c:	f7ff ff72 	bl	baa24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bab40:	e7e7      	b.n	bab12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bab42:	18f1      	adds	r1, r6, r3
   bab44:	29ff      	cmp	r1, #255	; 0xff
   bab46:	d8e4      	bhi.n	bab12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bab48:	4620      	mov	r0, r4
   bab4a:	f7ff ff19 	bl	ba980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bab4e:	2800      	cmp	r0, #0
   bab50:	d0df      	beq.n	bab12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bab52:	1c69      	adds	r1, r5, #1
   bab54:	b2c9      	uxtb	r1, r1
   bab56:	4620      	mov	r0, r4
   bab58:	f7ff ffb4 	bl	baac4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bab5c:	4639      	mov	r1, r7
   bab5e:	4620      	mov	r0, r4
   bab60:	f7ff ffb0 	bl	baac4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bab64:	6861      	ldr	r1, [r4, #4]
   bab66:	462b      	mov	r3, r5
   bab68:	4642      	mov	r2, r8
   bab6a:	e7e6      	b.n	bab3a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bab6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bab6c:	b430      	push	{r4, r5}
   bab6e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bab72:	b11a      	cbz	r2, bab7c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bab74:	9502      	str	r5, [sp, #8]
}
   bab76:	bc30      	pop	{r4, r5}
   bab78:	f7ff bfa8 	b.w	baacc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bab7c:	6840      	ldr	r0, [r0, #4]
}
   bab7e:	bc30      	pop	{r4, r5}
   bab80:	4770      	bx	lr

000bab82 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bab82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bab84:	2300      	movs	r3, #0
   bab86:	e9c0 3300 	strd	r3, r3, [r0]
   bab8a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bab8c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bab8e:	9300      	str	r3, [sp, #0]
   bab90:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bab92:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bab96:	4619      	mov	r1, r3
   bab98:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bab9c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bab9e:	f7ff ffe5 	bl	bab6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   baba2:	4620      	mov	r0, r4
   baba4:	b004      	add	sp, #16
   baba6:	bd10      	pop	{r4, pc}

000baba8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   baba8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   babaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   babac:	4604      	mov	r4, r0
   babae:	460d      	mov	r5, r1
   babb0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   babb2:	d914      	bls.n	babde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   babb4:	4290      	cmp	r0, r2
   babb6:	d213      	bcs.n	babe0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   babb8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   babbc:	1a75      	subs	r5, r6, r1
   babbe:	f1a1 0708 	sub.w	r7, r1, #8
   babc2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   babc4:	42b7      	cmp	r7, r6
   babc6:	d018      	beq.n	babfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   babc8:	b11c      	cbz	r4, babd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   babca:	4631      	mov	r1, r6
   babcc:	4620      	mov	r0, r4
   babce:	f7ff fcac 	bl	ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   babd2:	1d30      	adds	r0, r6, #4
   babd4:	f7ff fcb3 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   babd8:	3e08      	subs	r6, #8
   babda:	3c08      	subs	r4, #8
   babdc:	e7f2      	b.n	babc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   babde:	d00c      	beq.n	babfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   babe0:	42b5      	cmp	r5, r6
   babe2:	d00a      	beq.n	babfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   babe4:	b11c      	cbz	r4, babee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   babe6:	4629      	mov	r1, r5
   babe8:	4620      	mov	r0, r4
   babea:	f7ff fc9e 	bl	ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   babee:	1d28      	adds	r0, r5, #4
   babf0:	f7ff fca5 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   babf4:	3508      	adds	r5, #8
   babf6:	3408      	adds	r4, #8
   babf8:	e7f2      	b.n	babe0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   babfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000babfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   babfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   babfe:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bac00:	6846      	ldr	r6, [r0, #4]
   bac02:	4668      	mov	r0, sp
   bac04:	f7ff fc91 	bl	ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bac08:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bac0c:	429f      	cmp	r7, r3
   bac0e:	db12      	blt.n	bac36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bac10:	3701      	adds	r7, #1
        if (n > 0) {
   bac12:	2f00      	cmp	r7, #0
   bac14:	dd29      	ble.n	bac6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bac16:	00f8      	lsls	r0, r7, #3
   bac18:	f7fe fda8 	bl	b976c <malloc>
            if (!d) {
   bac1c:	4605      	mov	r5, r0
   bac1e:	b1f0      	cbz	r0, bac5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bac20:	e9d4 1200 	ldrd	r1, r2, [r4]
   bac24:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bac28:	f7ff ffbe 	bl	baba8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bac2c:	6820      	ldr	r0, [r4, #0]
   bac2e:	f7fe fda5 	bl	b977c <free>
        data_ = d;
   bac32:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bac34:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bac36:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bac38:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bac3a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bac3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bac42:	4631      	mov	r1, r6
   bac44:	f106 0008 	add.w	r0, r6, #8
   bac48:	f7ff ffae 	bl	baba8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bac4c:	b11e      	cbz	r6, bac56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bac4e:	4669      	mov	r1, sp
   bac50:	4630      	mov	r0, r6
   bac52:	f7ff fc6a 	bl	ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bac56:	6863      	ldr	r3, [r4, #4]
   bac58:	3301      	adds	r3, #1
   bac5a:	6063      	str	r3, [r4, #4]
    return true;
   bac5c:	2501      	movs	r5, #1
   bac5e:	a801      	add	r0, sp, #4
   bac60:	f7ff fc6d 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bac64:	4628      	mov	r0, r5
   bac66:	b003      	add	sp, #12
   bac68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bac6a:	2500      	movs	r5, #0
   bac6c:	e7de      	b.n	bac2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bac6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bac6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bac70:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bac74:	4605      	mov	r5, r0
   bac76:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bac78:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bac7c:	42a6      	cmp	r6, r4
   bac7e:	d005      	beq.n	bac8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bac80:	4639      	mov	r1, r7
   bac82:	4620      	mov	r0, r4
   bac84:	f7ff fa9d 	bl	ba1c2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bac88:	b108      	cbz	r0, bac8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bac8a:	b914      	cbnz	r4, bac92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bac8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bac8e:	3408      	adds	r4, #8
   bac90:	e7f4      	b.n	bac7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bac92:	1d20      	adds	r0, r4, #4
   bac94:	f7ff fc53 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bac98:	e9d5 3200 	ldrd	r3, r2, [r5]
   bac9c:	f104 0108 	add.w	r1, r4, #8
   baca0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   baca4:	4620      	mov	r0, r4
   baca6:	f7ff ff7f 	bl	baba8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bacaa:	686b      	ldr	r3, [r5, #4]
   bacac:	3b01      	subs	r3, #1
   bacae:	606b      	str	r3, [r5, #4]
    return true;
   bacb0:	e7ec      	b.n	bac8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bacb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bacb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bacb8:	4605      	mov	r5, r0
   bacba:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bacbc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bacbe:	460c      	mov	r4, r1
        WiringBleLock lk;
   bacc0:	f7fe fef4 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bacc4:	682e      	ldr	r6, [r5, #0]
   bacc6:	1ef3      	subs	r3, r6, #3
   bacc8:	2b0d      	cmp	r3, #13
   bacca:	d83c      	bhi.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   baccc:	e8df f013 	tbh	[pc, r3, lsl #1]
   bacd0:	0053000e 	.word	0x0053000e
   bacd4:	00d1003b 	.word	0x00d1003b
   bacd8:	003b003b 	.word	0x003b003b
   bacdc:	003b003b 	.word	0x003b003b
   bace0:	009b003b 	.word	0x009b003b
   bace4:	009b009b 	.word	0x009b009b
   bace8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bacec:	a804      	add	r0, sp, #16
   bacee:	f7ff fa0f 	bl	ba110 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bacf2:	9b04      	ldr	r3, [sp, #16]
   bacf4:	89aa      	ldrh	r2, [r5, #12]
   bacf6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bacf8:	6869      	ldr	r1, [r5, #4]
   bacfa:	9804      	ldr	r0, [sp, #16]
   bacfc:	3108      	adds	r1, #8
   bacfe:	3002      	adds	r0, #2
   bad00:	f7fe feee 	bl	b9ae0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bad04:	a904      	add	r1, sp, #16
   bad06:	a806      	add	r0, sp, #24
   bad08:	f7ff fc0f 	bl	ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bad0c:	a906      	add	r1, sp, #24
   bad0e:	f104 0018 	add.w	r0, r4, #24
   bad12:	f7ff ff73 	bl	babfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bad16:	4605      	mov	r5, r0
   bad18:	a807      	add	r0, sp, #28
   bad1a:	f7ff fc10 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad1e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bad20:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bad22:	b9b5      	cbnz	r5, bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bad24:	4b5d      	ldr	r3, [pc, #372]	; (bae9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bad26:	495e      	ldr	r1, [pc, #376]	; (baea0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bad28:	9300      	str	r3, [sp, #0]
   bad2a:	2032      	movs	r0, #50	; 0x32
   bad2c:	462b      	mov	r3, r5
   bad2e:	aa06      	add	r2, sp, #24
   bad30:	9507      	str	r5, [sp, #28]
   bad32:	f7fe fc3f 	bl	b95b4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bad36:	9b04      	ldr	r3, [sp, #16]
   bad38:	4629      	mov	r1, r5
   bad3a:	8818      	ldrh	r0, [r3, #0]
   bad3c:	f7fe f9a0 	bl	b9080 <hal_ble_gap_disconnect>
   bad40:	a805      	add	r0, sp, #20
   bad42:	f7ff fbfc 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bad46:	a803      	add	r0, sp, #12
   bad48:	f7fe febe 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bad4c:	b00e      	add	sp, #56	; 0x38
   bad4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bad52:	4a54      	ldr	r2, [pc, #336]	; (baea4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bad54:	9200      	str	r2, [sp, #0]
   bad56:	2300      	movs	r3, #0
   bad58:	4951      	ldr	r1, [pc, #324]	; (baea0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bad5a:	9307      	str	r3, [sp, #28]
   bad5c:	aa06      	add	r2, sp, #24
   bad5e:	2001      	movs	r0, #1
   bad60:	f7fe fc28 	bl	b95b4 <log_message>
                if (impl->connectedCallback_) {
   bad64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bad66:	2b00      	cmp	r3, #0
   bad68:	d0ea      	beq.n	bad40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bad6a:	a904      	add	r1, sp, #16
   bad6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bad70:	f7ff fc54 	bl	ba61c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bad74:	e7e4      	b.n	bad40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bad76:	89a9      	ldrh	r1, [r5, #12]
   bad78:	4620      	mov	r0, r4
   bad7a:	f7ff f8dc 	bl	b9f36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bad7e:	4606      	mov	r6, r0
   bad80:	2800      	cmp	r0, #0
   bad82:	d0e0      	beq.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bad84:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bad86:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bad8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bad8e:	8029      	strh	r1, [r5, #0]
   bad90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bad94:	429a      	cmp	r2, r3
   bad96:	d003      	beq.n	bada0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bad98:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bad9c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bad9e:	e7f9      	b.n	bad94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bada0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bada4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bada8:	45b8      	cmp	r8, r7
   badaa:	d004      	beq.n	badb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   badac:	1d38      	adds	r0, r7, #4
   badae:	f7ff fbc6 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   badb2:	3708      	adds	r7, #8
   badb4:	e7f8      	b.n	bada8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   badb6:	2300      	movs	r3, #0
   badb8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   badba:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   badbe:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   badc2:	45b8      	cmp	r8, r7
   badc4:	d004      	beq.n	badd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   badc6:	1d38      	adds	r0, r7, #4
   badc8:	f7ff fbb9 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   badcc:	3708      	adds	r7, #8
   badce:	e7f8      	b.n	badc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   badd0:	2300      	movs	r3, #0
   badd2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   badd4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   badd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   badd8:	b123      	cbz	r3, bade4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   badda:	4631      	mov	r1, r6
   baddc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bade0:	f7ff fc1c 	bl	ba61c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bade4:	2300      	movs	r3, #0
   bade6:	2220      	movs	r2, #32
   bade8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   badec:	4a2e      	ldr	r2, [pc, #184]	; (baea8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   badee:	9200      	str	r2, [sp, #0]
   badf0:	492b      	ldr	r1, [pc, #172]	; (baea0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   badf2:	aa06      	add	r2, sp, #24
   badf4:	2001      	movs	r0, #1
   badf6:	f7fe fbdd 	bl	b95b4 <log_message>
                    impl->peers_.removeOne(*peer);
   badfa:	4631      	mov	r1, r6
   badfc:	f104 0018 	add.w	r0, r4, #24
   bae00:	f7ff ff35 	bl	bac6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bae04:	e79f      	b.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bae06:	89a9      	ldrh	r1, [r5, #12]
   bae08:	4620      	mov	r0, r4
   bae0a:	f7ff f894 	bl	b9f36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bae0e:	2800      	cmp	r0, #0
   bae10:	d099      	beq.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bae12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bae14:	2b00      	cmp	r3, #0
   bae16:	d096      	beq.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bae18:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bae1a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bae1c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bae20:	d001      	beq.n	bae26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bae22:	2e10      	cmp	r6, #16
   bae24:	d117      	bne.n	bae56 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bae26:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bae28:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bae2a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bae2c:	2506      	movs	r5, #6
                        };
   bae2e:	f88d 3015 	strb.w	r3, [sp, #21]
   bae32:	9104      	str	r1, [sp, #16]
   bae34:	f88d 2014 	strb.w	r2, [sp, #20]
   bae38:	9006      	str	r0, [sp, #24]
   bae3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bae3e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bae40:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bae44:	9508      	str	r5, [sp, #32]
   bae46:	e883 0003 	stmia.w	r3, {r0, r1}
   bae4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae4c:	a906      	add	r1, sp, #24
   bae4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bae52:	4798      	blx	r3
   bae54:	e777      	b.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bae56:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bae58:	bf01      	itttt	eq
   bae5a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bae5c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bae5e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bae62:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bae64:	bf0f      	iteee	eq
   bae66:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bae6a:	461a      	movne	r2, r3
   bae6c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bae6e:	461d      	movne	r5, r3
   bae70:	e7dd      	b.n	bae2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bae72:	89a9      	ldrh	r1, [r5, #12]
   bae74:	4620      	mov	r0, r4
   bae76:	f7ff f85e 	bl	b9f36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bae7a:	4601      	mov	r1, r0
   bae7c:	2800      	cmp	r0, #0
   bae7e:	f43f af62 	beq.w	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bae82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bae84:	2b00      	cmp	r3, #0
   bae86:	f43f af5e 	beq.w	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bae8a:	686b      	ldr	r3, [r5, #4]
   bae8c:	9306      	str	r3, [sp, #24]
   bae8e:	aa06      	add	r2, sp, #24
   bae90:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bae92:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bae96:	4798      	blx	r3
   bae98:	e755      	b.n	bad46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bae9a:	bf00      	nop
   bae9c:	000c1737 	.word	0x000c1737
   baea0:	000c169b 	.word	0x000c169b
   baea4:	000c175d 	.word	0x000c175d
   baea8:	000c177a 	.word	0x000c177a

000baeac <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   baeac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baeb0:	4607      	mov	r7, r0
   baeb2:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   baeb4:	4668      	mov	r0, sp
   baeb6:	f7fe fdf9 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   baeba:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   baebc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   baec0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   baec4:	42ac      	cmp	r4, r5
   baec6:	d035      	beq.n	baf34 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   baec8:	2224      	movs	r2, #36	; 0x24
   baeca:	2100      	movs	r1, #0
   baecc:	a801      	add	r0, sp, #4
   baece:	f003 f9c4 	bl	be25a <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   baed2:	6823      	ldr	r3, [r4, #0]
   baed4:	2200      	movs	r2, #0
   baed6:	8818      	ldrh	r0, [r3, #0]
   baed8:	a901      	add	r1, sp, #4
   baeda:	f7fe f921 	bl	b9120 <hal_ble_gap_get_connection_info>
   baede:	4606      	mov	r6, r0
   baee0:	b108      	cbz	r0, baee6 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   baee2:	3408      	adds	r4, #8
   baee4:	e7ee      	b.n	baec4 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   baee6:	f89d 8008 	ldrb.w	r8, [sp, #8]
   baeea:	f1b8 0f01 	cmp.w	r8, #1
   baeee:	d1f8      	bne.n	baee2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   baef0:	f8df 9048 	ldr.w	r9, [pc, #72]	; baf3c <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   baef4:	f8d9 0000 	ldr.w	r0, [r9]
   baef8:	f7fe f994 	bl	b9224 <os_mutex_recursive_unlock>
        locked_ = false;
   baefc:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   baf00:	6823      	ldr	r3, [r4, #0]
   baf02:	4631      	mov	r1, r6
   baf04:	8818      	ldrh	r0, [r3, #0]
   baf06:	f7fe f8bb 	bl	b9080 <hal_ble_gap_disconnect>
   baf0a:	1e05      	subs	r5, r0, #0
   baf0c:	db0b      	blt.n	baf26 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   baf0e:	f8d9 0000 	ldr.w	r0, [r9]
   baf12:	f7fe f97f 	bl	b9214 <os_mutex_recursive_lock>
        return peers_;
   baf16:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   baf18:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   baf1c:	4621      	mov	r1, r4
   baf1e:	3018      	adds	r0, #24
   baf20:	f7ff fea5 	bl	bac6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   baf24:	4635      	mov	r5, r6
    WiringBleLock lk;
   baf26:	4668      	mov	r0, sp
   baf28:	f7fe fdce 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   baf2c:	4628      	mov	r0, r5
   baf2e:	b00b      	add	sp, #44	; 0x2c
   baf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   baf34:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   baf38:	e7f5      	b.n	baf26 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   baf3a:	bf00      	nop
   baf3c:	2003e658 	.word	0x2003e658

000baf40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   baf40:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   baf42:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   baf44:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   baf46:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   baf48:	dd05      	ble.n	baf56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   baf4a:	2114      	movs	r1, #20
   baf4c:	4369      	muls	r1, r5
   baf4e:	f7fe fc1d 	bl	b978c <realloc>
            if (!d) {
   baf52:	b918      	cbnz	r0, baf5c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   baf54:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   baf56:	f7fe fc11 	bl	b977c <free>
        T* d = nullptr;
   baf5a:	2000      	movs	r0, #0
        data_ = d;
   baf5c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   baf5e:	60a5      	str	r5, [r4, #8]
        return true;
   baf60:	2001      	movs	r0, #1
   baf62:	e7f7      	b.n	baf54 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000baf64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   baf68:	2400      	movs	r4, #0
   baf6a:	e9c0 4400 	strd	r4, r4, [r0]
   baf6e:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf70:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf72:	6849      	ldr	r1, [r1, #4]
   baf74:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf76:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf78:	dd1a      	ble.n	bafb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   baf7a:	f7ff ffe1 	bl	baf40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   baf7e:	b1b8      	cbz	r0, bafb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baf80:	e9d8 9300 	ldrd	r9, r3, [r8]
   baf84:	f04f 0c14 	mov.w	ip, #20
   baf88:	f8d7 e000 	ldr.w	lr, [r7]
   baf8c:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   baf90:	eb09 0504 	add.w	r5, r9, r4
   baf94:	45ac      	cmp	ip, r5
   baf96:	d008      	beq.n	bafaa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   baf98:	eb1e 0604 	adds.w	r6, lr, r4
   baf9c:	bf1f      	itttt	ne
   baf9e:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bafa0:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bafa2:	682b      	ldrne	r3, [r5, #0]
   bafa4:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bafa6:	3414      	adds	r4, #20
   bafa8:	e7f2      	b.n	baf90 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bafaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bafae:	607b      	str	r3, [r7, #4]
}
   bafb0:	4638      	mov	r0, r7
   bafb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bafb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bafba:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bafbe:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bafc0:	6883      	ldr	r3, [r0, #8]
   bafc2:	19e9      	adds	r1, r5, r7
   bafc4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bafc6:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bafc8:	dc17      	bgt.n	baffa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bafca:	2314      	movs	r3, #20
   bafcc:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bafce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bafd0:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bafd2:	fb03 f907 	mul.w	r9, r3, r7
   bafd6:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bafd8:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bafda:	1b52      	subs	r2, r2, r5
   bafdc:	4631      	mov	r1, r6
   bafde:	eb06 0009 	add.w	r0, r6, r9
   bafe2:	f003 f920 	bl	be226 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bafe6:	464a      	mov	r2, r9
   bafe8:	4641      	mov	r1, r8
   bafea:	4630      	mov	r0, r6
   bafec:	f003 f90d 	bl	be20a <memcpy>
    size_ += n;
   baff0:	6863      	ldr	r3, [r4, #4]
   baff2:	443b      	add	r3, r7
   baff4:	6063      	str	r3, [r4, #4]
}
   baff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baffa:	f7ff ffa1 	bl	baf40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   baffe:	2800      	cmp	r0, #0
   bb000:	d1e3      	bne.n	bafca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bb002:	e7f8      	b.n	baff6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bb004 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb004:	b082      	sub	sp, #8
   bb006:	b570      	push	{r4, r5, r6, lr}
   bb008:	460c      	mov	r4, r1
   bb00a:	a904      	add	r1, sp, #16
   bb00c:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb010:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb014:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb016:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb018:	da17      	bge.n	bb04a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bb01a:	2314      	movs	r3, #20
   bb01c:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bb020:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bb022:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bb024:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb026:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb028:	1a52      	subs	r2, r2, r1
   bb02a:	18e0      	adds	r0, r4, r3
   bb02c:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bb02e:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb030:	f003 f8f9 	bl	be226 <memmove>
    new(p) T(std::move(value));
   bb034:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bb036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb038:	6833      	ldr	r3, [r6, #0]
   bb03a:	6023      	str	r3, [r4, #0]
    ++size_;
   bb03c:	686b      	ldr	r3, [r5, #4]
   bb03e:	3301      	adds	r3, #1
   bb040:	606b      	str	r3, [r5, #4]
}
   bb042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb046:	b002      	add	sp, #8
   bb048:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb04a:	3101      	adds	r1, #1
   bb04c:	f7ff ff78 	bl	baf40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb050:	2800      	cmp	r0, #0
   bb052:	d1e2      	bne.n	bb01a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bb054:	e7f5      	b.n	bb042 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bb056 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bb05a:	2400      	movs	r4, #0
   bb05c:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb05e:	1e93      	subs	r3, r2, #2
   bb060:	e9c0 4400 	strd	r4, r4, [r0]
   bb064:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb066:	4605      	mov	r5, r0
   bb068:	460f      	mov	r7, r1
   bb06a:	4690      	mov	r8, r2
   bb06c:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb06e:	9305      	str	r3, [sp, #20]
    return size_;
   bb070:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb072:	428c      	cmp	r4, r1
   bb074:	da72      	bge.n	bb15c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bb076:	6838      	ldr	r0, [r7, #0]
   bb078:	ab07      	add	r3, sp, #28
   bb07a:	4642      	mov	r2, r8
   bb07c:	1b09      	subs	r1, r1, r4
   bb07e:	4420      	add	r0, r4
   bb080:	f7fe fc46 	bl	b9910 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bb084:	4606      	mov	r6, r0
   bb086:	2800      	cmp	r0, #0
   bb088:	d068      	beq.n	bb15c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb08a:	9b05      	ldr	r3, [sp, #20]
   bb08c:	2b01      	cmp	r3, #1
   bb08e:	d82f      	bhi.n	bb0f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb090:	f1a0 0b02 	sub.w	fp, r0, #2
   bb094:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bb098:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bb09c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb0a0:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb0a2:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb0a4:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb0a6:	d055      	beq.n	bb154 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bb0a8:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb0aa:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bb0ae:	4413      	add	r3, r2
   bb0b0:	a808      	add	r0, sp, #32
   bb0b2:	78d9      	ldrb	r1, [r3, #3]
   bb0b4:	789b      	ldrb	r3, [r3, #2]
   bb0b6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bb0ba:	f7fe fd8e 	bl	b9bda <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bb0be:	f10d 0e20 	add.w	lr, sp, #32
   bb0c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb0c6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb0ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb0ce:	f8de 3000 	ldr.w	r3, [lr]
   bb0d2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb0d6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb0da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb0de:	ab0d      	add	r3, sp, #52	; 0x34
   bb0e0:	cb0c      	ldmia	r3, {r2, r3}
   bb0e2:	6869      	ldr	r1, [r5, #4]
   bb0e4:	4628      	mov	r0, r5
   bb0e6:	f7ff ff8d 	bl	bb004 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb0ea:	f109 0901 	add.w	r9, r9, #1
   bb0ee:	e7d7      	b.n	bb0a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bb0f0:	f1a8 0306 	sub.w	r3, r8, #6
   bb0f4:	2b01      	cmp	r3, #1
   bb0f6:	d82d      	bhi.n	bb154 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb0f8:	f1a0 0b02 	sub.w	fp, r0, #2
   bb0fc:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bb100:	f04f 0900 	mov.w	r9, #0
   bb104:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bb108:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb10a:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb10c:	d022      	beq.n	bb154 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb10e:	3302      	adds	r3, #2
    return data_[i];
   bb110:	6839      	ldr	r1, [r7, #0]
   bb112:	4423      	add	r3, r4
   bb114:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bb118:	2201      	movs	r2, #1
   bb11a:	4419      	add	r1, r3
   bb11c:	a808      	add	r0, sp, #32
   bb11e:	f7fe fd3d 	bl	b9b9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bb122:	f10d 0e20 	add.w	lr, sp, #32
   bb126:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb12a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb12e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb132:	f8de 3000 	ldr.w	r3, [lr]
   bb136:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb13a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb13e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bb146:	6869      	ldr	r1, [r5, #4]
   bb148:	4628      	mov	r0, r5
   bb14a:	f7ff ff5b 	bl	bb004 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb14e:	f109 0901 	add.w	r9, r9, #1
   bb152:	e7d9      	b.n	bb108 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb154:	9b07      	ldr	r3, [sp, #28]
   bb156:	441c      	add	r4, r3
   bb158:	4434      	add	r4, r6
   bb15a:	e789      	b.n	bb070 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bb15c:	4628      	mov	r0, r5
   bb15e:	b013      	add	sp, #76	; 0x4c
   bb160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb164 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb164:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bb166:	2300      	movs	r3, #0
   bb168:	b085      	sub	sp, #20
   bb16a:	e9c0 3300 	strd	r3, r3, [r0]
   bb16e:	6083      	str	r3, [r0, #8]
   bb170:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb172:	2202      	movs	r2, #2
   bb174:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb176:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb178:	f7ff ff6d 	bl	bb056 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb17c:	a901      	add	r1, sp, #4
   bb17e:	4620      	mov	r0, r4
   bb180:	f7ff ff19 	bl	bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb184:	a801      	add	r0, sp, #4
   bb186:	f7ff f939 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb18a:	2202      	movs	r2, #2
   bb18c:	4629      	mov	r1, r5
   bb18e:	a801      	add	r0, sp, #4
   bb190:	f7ff ff61 	bl	bb056 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb194:	a901      	add	r1, sp, #4
   bb196:	4620      	mov	r0, r4
   bb198:	f7ff ff0d 	bl	bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb19c:	a801      	add	r0, sp, #4
   bb19e:	f7ff f92d 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb1a2:	2203      	movs	r2, #3
   bb1a4:	4629      	mov	r1, r5
   bb1a6:	a801      	add	r0, sp, #4
   bb1a8:	f7ff ff55 	bl	bb056 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1ac:	a901      	add	r1, sp, #4
   bb1ae:	4620      	mov	r0, r4
   bb1b0:	f7ff ff01 	bl	bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1b4:	a801      	add	r0, sp, #4
   bb1b6:	f7ff f921 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb1ba:	2206      	movs	r2, #6
   bb1bc:	4629      	mov	r1, r5
   bb1be:	a801      	add	r0, sp, #4
   bb1c0:	f7ff ff49 	bl	bb056 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1c4:	a901      	add	r1, sp, #4
   bb1c6:	4620      	mov	r0, r4
   bb1c8:	f7ff fef5 	bl	bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1cc:	a801      	add	r0, sp, #4
   bb1ce:	f7ff f915 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb1d2:	2207      	movs	r2, #7
   bb1d4:	4629      	mov	r1, r5
   bb1d6:	a801      	add	r0, sp, #4
   bb1d8:	f7ff ff3d 	bl	bb056 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1dc:	a901      	add	r1, sp, #4
   bb1de:	4620      	mov	r0, r4
   bb1e0:	f7ff fee9 	bl	bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1e4:	a801      	add	r0, sp, #4
   bb1e6:	f7ff f909 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb1ea:	4620      	mov	r0, r4
   bb1ec:	b005      	add	sp, #20
   bb1ee:	bd30      	pop	{r4, r5, pc}

000bb1f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb1f4:	b085      	sub	sp, #20
   bb1f6:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb1f8:	4601      	mov	r1, r0
   bb1fa:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb1fc:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb1fe:	f7ff ffb1 	bl	bb164 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bb202:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bb204:	9b02      	ldr	r3, [sp, #8]
   bb206:	f04f 0e14 	mov.w	lr, #20
   bb20a:	fb0e 6c03 	mla	ip, lr, r3, r6
   bb20e:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bb210:	45b4      	cmp	ip, r6
   bb212:	d00d      	beq.n	bb230 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bb214:	45b9      	cmp	r9, r7
   bb216:	f106 0614 	add.w	r6, r6, #20
   bb21a:	d009      	beq.n	bb230 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bb21c:	f1a6 0514 	sub.w	r5, r6, #20
   bb220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb222:	fb0e 8407 	mla	r4, lr, r7, r8
   bb226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb228:	682b      	ldr	r3, [r5, #0]
   bb22a:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bb22c:	3701      	adds	r7, #1
   bb22e:	e7ef      	b.n	bb210 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb230:	a801      	add	r0, sp, #4
   bb232:	f7ff f8e3 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb236:	4638      	mov	r0, r7
   bb238:	b005      	add	sp, #20
   bb23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb23e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bb23e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb242:	b08b      	sub	sp, #44	; 0x2c
   bb244:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb246:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bb24a:	a801      	add	r0, sp, #4
   bb24c:	f7ff fe8a 	bl	baf64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bb250:	9b02      	ldr	r3, [sp, #8]
   bb252:	2b00      	cmp	r3, #0
   bb254:	dd4a      	ble.n	bb2ec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb256:	f104 0114 	add.w	r1, r4, #20
   bb25a:	a804      	add	r0, sp, #16
   bb25c:	f7ff ff82 	bl	bb164 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb260:	f104 0108 	add.w	r1, r4, #8
   bb264:	a807      	add	r0, sp, #28
   bb266:	f7ff ff7d 	bl	bb164 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bb26a:	9d05      	ldr	r5, [sp, #20]
   bb26c:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bb26e:	2d00      	cmp	r5, #0
   bb270:	dc01      	bgt.n	bb276 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bb272:	2e00      	cmp	r6, #0
   bb274:	dd38      	ble.n	bb2e8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bb276:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bb278:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bb27a:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bb27e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bb282:	2314      	movs	r3, #20
   bb284:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bb288:	fb03 8505 	mla	r5, r3, r5, r8
   bb28c:	fb03 9606 	mla	r6, r3, r6, r9
   bb290:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bb292:	45ba      	cmp	sl, r7
   bb294:	d028      	beq.n	bb2e8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bb296:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bb298:	45ab      	cmp	fp, r5
   bb29a:	d015      	beq.n	bb2c8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bb29c:	4659      	mov	r1, fp
   bb29e:	4650      	mov	r0, sl
   bb2a0:	f7fe fca5 	bl	b9bee <_ZNK8particle7BleUuideqERKS0_>
   bb2a4:	f10b 0b14 	add.w	fp, fp, #20
   bb2a8:	4604      	mov	r4, r0
   bb2aa:	2800      	cmp	r0, #0
   bb2ac:	d0f4      	beq.n	bb298 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb2ae:	a807      	add	r0, sp, #28
   bb2b0:	f7ff f8a4 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb2b4:	a804      	add	r0, sp, #16
   bb2b6:	f7ff f8a1 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb2ba:	a801      	add	r0, sp, #4
   bb2bc:	f7ff f89e 	bl	ba3fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bb2c0:	4620      	mov	r0, r4
   bb2c2:	b00b      	add	sp, #44	; 0x2c
   bb2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb2c8:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bb2ca:	45b3      	cmp	fp, r6
   bb2cc:	d009      	beq.n	bb2e2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bb2ce:	4659      	mov	r1, fp
   bb2d0:	4650      	mov	r0, sl
   bb2d2:	f7fe fc8c 	bl	b9bee <_ZNK8particle7BleUuideqERKS0_>
   bb2d6:	f10b 0b14 	add.w	fp, fp, #20
   bb2da:	4604      	mov	r4, r0
   bb2dc:	2800      	cmp	r0, #0
   bb2de:	d0f4      	beq.n	bb2ca <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bb2e0:	e7e5      	b.n	bb2ae <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bb2e2:	f10a 0a14 	add.w	sl, sl, #20
   bb2e6:	e7d4      	b.n	bb292 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bb2e8:	2400      	movs	r4, #0
   bb2ea:	e7e0      	b.n	bb2ae <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bb2ec:	2401      	movs	r4, #1
   bb2ee:	e7e4      	b.n	bb2ba <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bb2f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bb2f0:	b513      	push	{r0, r1, r4, lr}
   bb2f2:	460b      	mov	r3, r1
   bb2f4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb2f6:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb2fa:	466c      	mov	r4, sp
   bb2fc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bb300:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb304:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bb308:	e894 0003 	ldmia.w	r4, {r0, r1}
   bb30c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bb310:	b002      	add	sp, #8
   bb312:	bd10      	pop	{r4, pc}

000bb314 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bb314:	b538      	push	{r3, r4, r5, lr}
   bb316:	4605      	mov	r5, r0
   bb318:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb31a:	f7ff ffe9 	bl	bb2f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb31e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb320:	68a2      	ldr	r2, [r4, #8]
   bb322:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb324:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb326:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb328:	68e2      	ldr	r2, [r4, #12]
   bb32a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb32c:	60e3      	str	r3, [r4, #12]
      }
   bb32e:	bd38      	pop	{r3, r4, r5, pc}

000bb330 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bb330:	b530      	push	{r4, r5, lr}
   bb332:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bb334:	2300      	movs	r3, #0
   bb336:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bb338:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bb33a:	4605      	mov	r5, r0
   bb33c:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bb33e:	b133      	cbz	r3, bb34e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb340:	2202      	movs	r2, #2
   bb342:	4668      	mov	r0, sp
   bb344:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb346:	68e3      	ldr	r3, [r4, #12]
   bb348:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bb34a:	68a3      	ldr	r3, [r4, #8]
   bb34c:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bb34e:	4629      	mov	r1, r5
   bb350:	4668      	mov	r0, sp
   bb352:	f7ff ffdf 	bl	bb314 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb356:	4668      	mov	r0, sp
   bb358:	f7f8 ffee 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
      }
   bb35c:	b005      	add	sp, #20
   bb35e:	bd30      	pop	{r4, r5, pc}

000bb360 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb360:	b538      	push	{r3, r4, r5, lr}
   bb362:	460d      	mov	r5, r1
      { return _M_ptr; }
   bb364:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bb366:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb368:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bb36a:	b123      	cbz	r3, bb376 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bb36c:	6828      	ldr	r0, [r5, #0]
   bb36e:	314c      	adds	r1, #76	; 0x4c
   bb370:	304c      	adds	r0, #76	; 0x4c
   bb372:	f7ff ffdd 	bl	bb330 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb376:	4620      	mov	r0, r4
   bb378:	682b      	ldr	r3, [r5, #0]
   bb37a:	f840 3b04 	str.w	r3, [r0], #4
   bb37e:	6869      	ldr	r1, [r5, #4]
   bb380:	f7fe fb6e 	bl	b9a60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bb384:	4620      	mov	r0, r4
   bb386:	bd38      	pop	{r3, r4, r5, pc}

000bb388 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb38c:	4604      	mov	r4, r0
   bb38e:	b087      	sub	sp, #28
    WiringBleLock lk;
   bb390:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb392:	460e      	mov	r6, r1
   bb394:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb396:	f7fe fb89 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bb39a:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb39c:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb3a0:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bb3a4:	4544      	cmp	r4, r8
   bb3a6:	46a1      	mov	r9, r4
   bb3a8:	d016      	beq.n	bb3d8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bb3aa:	4621      	mov	r1, r4
   bb3ac:	a801      	add	r0, sp, #4
   bb3ae:	f7fe fded 	bl	b9f8c <_ZNK8particle17BleCharacteristic4UUIDEv>
   bb3b2:	4639      	mov	r1, r7
   bb3b4:	a801      	add	r0, sp, #4
   bb3b6:	f7fe fc1a 	bl	b9bee <_ZNK8particle7BleUuideqERKS0_>
   bb3ba:	3408      	adds	r4, #8
   bb3bc:	4605      	mov	r5, r0
   bb3be:	2800      	cmp	r0, #0
   bb3c0:	d0f0      	beq.n	bb3a4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bb3c2:	4649      	mov	r1, r9
   bb3c4:	4630      	mov	r0, r6
   bb3c6:	f7ff ffcb 	bl	bb360 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bb3ca:	4668      	mov	r0, sp
   bb3cc:	f7fe fb7c 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb3d0:	4628      	mov	r0, r5
   bb3d2:	b007      	add	sp, #28
   bb3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bb3d8:	2500      	movs	r5, #0
   bb3da:	e7f6      	b.n	bb3ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bb3dc <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb3dc:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb3de:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb3e0:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb3e2:	344c      	adds	r4, #76	; 0x4c
   bb3e4:	b1b9      	cbz	r1, bb416 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bb3e6:	e9cd 1200 	strd	r1, r2, [sp]
   bb3ea:	a802      	add	r0, sp, #8
   bb3ec:	4669      	mov	r1, sp
   bb3ee:	f7ff f865 	bl	ba4bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb3f2:	2300      	movs	r3, #0
	__x.swap(*this);
   bb3f4:	a906      	add	r1, sp, #24
   bb3f6:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bb3f8:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bb3fa:	f7ff ff8b 	bl	bb314 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bb3fe:	4621      	mov	r1, r4
   bb400:	a806      	add	r0, sp, #24
   bb402:	f7ff ff87 	bl	bb314 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb406:	a806      	add	r0, sp, #24
   bb408:	f7f8 ff96 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bb40c:	a802      	add	r0, sp, #8
   bb40e:	f7f8 ff93 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
}
   bb412:	b00a      	add	sp, #40	; 0x28
   bb414:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb416:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bb418:	e7eb      	b.n	bb3f2 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bb41a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb41a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb41e:	4604      	mov	r4, r0
   bb420:	460d      	mov	r5, r1
   bb422:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb424:	d914      	bls.n	bb450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb426:	4290      	cmp	r0, r2
   bb428:	d213      	bcs.n	bb452 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb42a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb42e:	1a75      	subs	r5, r6, r1
   bb430:	f1a1 0708 	sub.w	r7, r1, #8
   bb434:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb436:	42b7      	cmp	r7, r6
   bb438:	d018      	beq.n	bb46c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb43a:	b11c      	cbz	r4, bb444 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb43c:	4631      	mov	r1, r6
   bb43e:	4620      	mov	r0, r4
   bb440:	f7ff f869 	bl	ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bb444:	1d30      	adds	r0, r6, #4
   bb446:	f7ff f87a 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb44a:	3e08      	subs	r6, #8
   bb44c:	3c08      	subs	r4, #8
   bb44e:	e7f2      	b.n	bb436 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb450:	d00c      	beq.n	bb46c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb452:	42b5      	cmp	r5, r6
   bb454:	d00a      	beq.n	bb46c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb456:	b11c      	cbz	r4, bb460 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb458:	4629      	mov	r1, r5
   bb45a:	4620      	mov	r0, r4
   bb45c:	f7ff f85b 	bl	ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb460:	1d28      	adds	r0, r5, #4
   bb462:	f7ff f86c 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb466:	3508      	adds	r5, #8
   bb468:	3408      	adds	r4, #8
   bb46a:	e7f2      	b.n	bb452 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb46e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb46e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb470:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb472:	4605      	mov	r5, r0
        if (n > 0) {
   bb474:	dd11      	ble.n	bb49a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb476:	00f0      	lsls	r0, r6, #3
   bb478:	f7fe f978 	bl	b976c <malloc>
            if (!d) {
   bb47c:	4604      	mov	r4, r0
   bb47e:	b158      	cbz	r0, bb498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb480:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb484:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb488:	f7ff ffc7 	bl	bb41a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb48c:	6828      	ldr	r0, [r5, #0]
   bb48e:	f7fe f975 	bl	b977c <free>
        data_ = d;
   bb492:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb494:	60ae      	str	r6, [r5, #8]
        return true;
   bb496:	2001      	movs	r0, #1
    }
   bb498:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb49a:	2400      	movs	r4, #0
   bb49c:	e7f6      	b.n	bb48c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb49e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb4a2:	2300      	movs	r3, #0
   bb4a4:	e9c0 3300 	strd	r3, r3, [r0]
   bb4a8:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4aa:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb4ac:	6849      	ldr	r1, [r1, #4]
   bb4ae:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4b0:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb4b2:	dd13      	ble.n	bb4dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb4b4:	f7ff ffdb 	bl	bb46e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb4b8:	b180      	cbz	r0, bb4dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb4ba:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb4be:	6827      	ldr	r7, [r4, #0]
   bb4c0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb4c4:	45b0      	cmp	r8, r6
   bb4c6:	d007      	beq.n	bb4d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb4c8:	b11f      	cbz	r7, bb4d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb4ca:	4631      	mov	r1, r6
   bb4cc:	4638      	mov	r0, r7
   bb4ce:	f7ff f822 	bl	ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bb4d2:	3608      	adds	r6, #8
   bb4d4:	3708      	adds	r7, #8
   bb4d6:	e7f5      	b.n	bb4c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb4d8:	686b      	ldr	r3, [r5, #4]
   bb4da:	6063      	str	r3, [r4, #4]
}
   bb4dc:	4620      	mov	r0, r4
   bb4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb4e2 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bb4e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb4e4:	460d      	mov	r5, r1
   bb4e6:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb4e8:	a801      	add	r0, sp, #4
   bb4ea:	f7fe fadf 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bb4ee:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bb4f0:	4620      	mov	r0, r4
   bb4f2:	310c      	adds	r1, #12
   bb4f4:	f7ff ffd3 	bl	bb49e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb4f8:	a801      	add	r0, sp, #4
   bb4fa:	f7fe fae5 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb4fe:	4620      	mov	r0, r4
   bb500:	b003      	add	sp, #12
   bb502:	bd30      	pop	{r4, r5, pc}

000bb504 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb504:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bb506:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb508:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb50a:	4605      	mov	r5, r0
   bb50c:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bb50e:	b933      	cbnz	r3, bb51e <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bb510:	4608      	mov	r0, r1
   bb512:	f7fe fa5f 	bl	b99d4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bb516:	b910      	cbnz	r0, bb51e <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bb518:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bb51a:	2201      	movs	r2, #1
   bb51c:	729a      	strb	r2, [r3, #10]
    return services();
   bb51e:	4628      	mov	r0, r5
   bb520:	4621      	mov	r1, r4
   bb522:	f7ff ffde 	bl	bb4e2 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bb526:	4628      	mov	r0, r5
   bb528:	bd38      	pop	{r3, r4, r5, pc}

000bb52a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb52c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb52e:	6845      	ldr	r5, [r0, #4]
   bb530:	4668      	mov	r0, sp
   bb532:	f7fe fff0 	bl	ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb536:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb53a:	4299      	cmp	r1, r3
   bb53c:	da10      	bge.n	bb560 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb53e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb540:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb542:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb546:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb54a:	4629      	mov	r1, r5
   bb54c:	f105 0008 	add.w	r0, r5, #8
   bb550:	f7ff ff63 	bl	bb41a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb554:	b98d      	cbnz	r5, bb57a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb556:	6863      	ldr	r3, [r4, #4]
   bb558:	3301      	adds	r3, #1
   bb55a:	6063      	str	r3, [r4, #4]
    return true;
   bb55c:	2601      	movs	r6, #1
   bb55e:	e006      	b.n	bb56e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb560:	3101      	adds	r1, #1
   bb562:	4620      	mov	r0, r4
   bb564:	f7ff ff83 	bl	bb46e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb568:	4606      	mov	r6, r0
   bb56a:	2800      	cmp	r0, #0
   bb56c:	d1e7      	bne.n	bb53e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bb56e:	a801      	add	r0, sp, #4
   bb570:	f7fe ffe5 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb574:	4630      	mov	r0, r6
   bb576:	b002      	add	sp, #8
   bb578:	bd70      	pop	{r4, r5, r6, pc}
   bb57a:	4669      	mov	r1, sp
   bb57c:	4628      	mov	r0, r5
   bb57e:	f7fe ffca 	bl	ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb582:	e7e8      	b.n	bb556 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb584 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bb588:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bb644 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bb58c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bb648 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb590:	b093      	sub	sp, #76	; 0x4c
   bb592:	4605      	mov	r5, r0
   bb594:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bb596:	2700      	movs	r7, #0
   bb598:	682b      	ldr	r3, [r5, #0]
   bb59a:	42bb      	cmp	r3, r7
   bb59c:	d94e      	bls.n	bb63c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bb59e:	a803      	add	r0, sp, #12
   bb5a0:	f7fe fd9a 	bl	ba0d8 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb5a4:	261c      	movs	r6, #28
   bb5a6:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bb5a8:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bb5aa:	437e      	muls	r6, r7
   bb5ac:	4432      	add	r2, r6
   bb5ae:	f10d 0c14 	add.w	ip, sp, #20
   bb5b2:	1d13      	adds	r3, r2, #4
   bb5b4:	46e3      	mov	fp, ip
   bb5b6:	3214      	adds	r2, #20
   bb5b8:	6818      	ldr	r0, [r3, #0]
   bb5ba:	6859      	ldr	r1, [r3, #4]
   bb5bc:	46e6      	mov	lr, ip
   bb5be:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bb5c2:	3308      	adds	r3, #8
   bb5c4:	4293      	cmp	r3, r2
   bb5c6:	46f4      	mov	ip, lr
   bb5c8:	d1f6      	bne.n	bb5b8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bb5ca:	6818      	ldr	r0, [r3, #0]
   bb5cc:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bb5d0:	4659      	mov	r1, fp
   bb5d2:	a80a      	add	r0, sp, #40	; 0x28
   bb5d4:	f7fe fac0 	bl	b9b58 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb5d8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bb5dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb5e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb5e2:	f8dc 3000 	ldr.w	r3, [ip]
   bb5e6:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bb5e8:	686b      	ldr	r3, [r5, #4]
   bb5ea:	9a03      	ldr	r2, [sp, #12]
   bb5ec:	4433      	add	r3, r6
   bb5ee:	a903      	add	r1, sp, #12
   bb5f0:	8b1b      	ldrh	r3, [r3, #24]
   bb5f2:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bb5f4:	686b      	ldr	r3, [r5, #4]
   bb5f6:	4433      	add	r3, r6
   bb5f8:	8b5b      	ldrh	r3, [r3, #26]
   bb5fa:	82d3      	strh	r3, [r2, #22]
        return services_;
   bb5fc:	f8d8 0000 	ldr.w	r0, [r8]
   bb600:	f100 040c 	add.w	r4, r0, #12
   bb604:	a80a      	add	r0, sp, #40	; 0x28
   bb606:	f7fe ff86 	bl	ba516 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bb60a:	4620      	mov	r0, r4
   bb60c:	a90a      	add	r1, sp, #40	; 0x28
   bb60e:	f7ff ff8c 	bl	bb52a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bb612:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb614:	a80b      	add	r0, sp, #44	; 0x2c
   bb616:	f7fe ff92 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb61a:	b954      	cbnz	r4, bb632 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bb61c:	2320      	movs	r3, #32
   bb61e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bb622:	f8cd 9000 	str.w	r9, [sp]
   bb626:	4623      	mov	r3, r4
   bb628:	aa0a      	add	r2, sp, #40	; 0x28
   bb62a:	4651      	mov	r1, sl
   bb62c:	2032      	movs	r0, #50	; 0x32
   bb62e:	f7fd ffc1 	bl	b95b4 <log_message>
   bb632:	a804      	add	r0, sp, #16
   bb634:	f7fe ff83 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb638:	3701      	adds	r7, #1
   bb63a:	e7ad      	b.n	bb598 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bb63c:	b013      	add	sp, #76	; 0x4c
   bb63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb642:	bf00      	nop
   bb644:	000c1799 	.word	0x000c1799
   bb648:	000c169b 	.word	0x000c169b

000bb64c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb64c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb650:	4604      	mov	r4, r0
   bb652:	460d      	mov	r5, r1
   bb654:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb656:	d914      	bls.n	bb682 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb658:	4290      	cmp	r0, r2
   bb65a:	d213      	bcs.n	bb684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb65c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb660:	1a75      	subs	r5, r6, r1
   bb662:	f1a1 0708 	sub.w	r7, r1, #8
   bb666:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb668:	42b7      	cmp	r7, r6
   bb66a:	d018      	beq.n	bb69e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb66c:	b11c      	cbz	r4, bb676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb66e:	4631      	mov	r1, r6
   bb670:	4620      	mov	r0, r4
   bb672:	f7fe ff42 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb676:	1d30      	adds	r0, r6, #4
   bb678:	f7fe ff61 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb67c:	3e08      	subs	r6, #8
   bb67e:	3c08      	subs	r4, #8
   bb680:	e7f2      	b.n	bb668 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb682:	d00c      	beq.n	bb69e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb684:	42b5      	cmp	r5, r6
   bb686:	d00a      	beq.n	bb69e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb688:	b11c      	cbz	r4, bb692 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb68a:	4629      	mov	r1, r5
   bb68c:	4620      	mov	r0, r4
   bb68e:	f7fe ff34 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb692:	1d28      	adds	r0, r5, #4
   bb694:	f7fe ff53 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb698:	3508      	adds	r5, #8
   bb69a:	3408      	adds	r4, #8
   bb69c:	e7f2      	b.n	bb684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb6a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb6a0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb6a2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb6a4:	4605      	mov	r5, r0
        if (n > 0) {
   bb6a6:	dd11      	ble.n	bb6cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb6a8:	00f0      	lsls	r0, r6, #3
   bb6aa:	f7fe f85f 	bl	b976c <malloc>
            if (!d) {
   bb6ae:	4604      	mov	r4, r0
   bb6b0:	b158      	cbz	r0, bb6ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb6b2:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb6b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb6ba:	f7ff ffc7 	bl	bb64c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb6be:	6828      	ldr	r0, [r5, #0]
   bb6c0:	f7fe f85c 	bl	b977c <free>
        data_ = d;
   bb6c4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb6c6:	60ae      	str	r6, [r5, #8]
        return true;
   bb6c8:	2001      	movs	r0, #1
    }
   bb6ca:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb6cc:	2400      	movs	r4, #0
   bb6ce:	e7f6      	b.n	bb6be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb6d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb6d4:	2300      	movs	r3, #0
   bb6d6:	e9c0 3300 	strd	r3, r3, [r0]
   bb6da:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb6dc:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb6de:	6849      	ldr	r1, [r1, #4]
   bb6e0:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb6e2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb6e4:	dd13      	ble.n	bb70e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb6e6:	f7ff ffdb 	bl	bb6a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb6ea:	b180      	cbz	r0, bb70e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb6ec:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb6f0:	6827      	ldr	r7, [r4, #0]
   bb6f2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb6f6:	45b0      	cmp	r8, r6
   bb6f8:	d007      	beq.n	bb70a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb6fa:	b11f      	cbz	r7, bb704 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb6fc:	4631      	mov	r1, r6
   bb6fe:	4638      	mov	r0, r7
   bb700:	f7fe fefb 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bb704:	3608      	adds	r6, #8
   bb706:	3708      	adds	r7, #8
   bb708:	e7f5      	b.n	bb6f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb70a:	686b      	ldr	r3, [r5, #4]
   bb70c:	6063      	str	r3, [r4, #4]
}
   bb70e:	4620      	mov	r0, r4
   bb710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb714 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bb714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb716:	460d      	mov	r5, r1
   bb718:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb71a:	a801      	add	r0, sp, #4
   bb71c:	f7fe f9c6 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bb720:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bb722:	4620      	mov	r0, r4
   bb724:	3118      	adds	r1, #24
   bb726:	f7ff ffd3 	bl	bb6d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb72a:	a801      	add	r0, sp, #4
   bb72c:	f7fe f9cc 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb730:	4620      	mov	r0, r4
   bb732:	b003      	add	sp, #12
   bb734:	bd30      	pop	{r4, r5, pc}

000bb736 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb736:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb738:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb73a:	6845      	ldr	r5, [r0, #4]
   bb73c:	4668      	mov	r0, sp
   bb73e:	f7fe fedc 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb742:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb746:	4299      	cmp	r1, r3
   bb748:	da10      	bge.n	bb76c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb74a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb74c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb74e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb752:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb756:	4629      	mov	r1, r5
   bb758:	f105 0008 	add.w	r0, r5, #8
   bb75c:	f7ff ff76 	bl	bb64c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb760:	b98d      	cbnz	r5, bb786 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb762:	6863      	ldr	r3, [r4, #4]
   bb764:	3301      	adds	r3, #1
   bb766:	6063      	str	r3, [r4, #4]
    return true;
   bb768:	2601      	movs	r6, #1
   bb76a:	e006      	b.n	bb77a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb76c:	3101      	adds	r1, #1
   bb76e:	4620      	mov	r0, r4
   bb770:	f7ff ff96 	bl	bb6a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb774:	4606      	mov	r6, r0
   bb776:	2800      	cmp	r0, #0
   bb778:	d1e7      	bne.n	bb74a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb77a:	a801      	add	r0, sp, #4
   bb77c:	f7fe fedf 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb780:	4630      	mov	r0, r6
   bb782:	b002      	add	sp, #8
   bb784:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb786:	4669      	mov	r1, sp
   bb788:	4628      	mov	r0, r5
   bb78a:	f7fe feb6 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb78e:	e7e8      	b.n	bb762 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb790 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb790:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb792:	b085      	sub	sp, #20
   bb794:	4605      	mov	r5, r0
    WiringBleLock lk;
   bb796:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb798:	460c      	mov	r4, r1
   bb79a:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb79c:	f7fe f986 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bb7a0:	2300      	movs	r3, #0
   bb7a2:	e9c5 3300 	strd	r3, r3, [r5]
   bb7a6:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bb7a8:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb7aa:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bb7ae:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bb7b2:	42b4      	cmp	r4, r6
   bb7b4:	d011      	beq.n	bb7da <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bb7b6:	6838      	ldr	r0, [r7, #0]
   bb7b8:	4621      	mov	r1, r4
   bb7ba:	f7fe fba7 	bl	b9f0c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bb7be:	b150      	cbz	r0, bb7d6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bb7c0:	4621      	mov	r1, r4
   bb7c2:	a802      	add	r0, sp, #8
   bb7c4:	f7fe fe99 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb7c8:	a902      	add	r1, sp, #8
   bb7ca:	4628      	mov	r0, r5
   bb7cc:	f7ff ffb3 	bl	bb736 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bb7d0:	a803      	add	r0, sp, #12
   bb7d2:	f7fe feb4 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bb7d6:	3408      	adds	r4, #8
   bb7d8:	e7eb      	b.n	bb7b2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bb7da:	a801      	add	r0, sp, #4
   bb7dc:	f7fe f974 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb7e0:	4628      	mov	r0, r5
   bb7e2:	b005      	add	sp, #20
   bb7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb7e8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bb7ec:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb7ee:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb7f0:	b091      	sub	sp, #68	; 0x44
   bb7f2:	4606      	mov	r6, r0
   bb7f4:	460f      	mov	r7, r1
   bb7f6:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bb7f8:	b933      	cbnz	r3, bb808 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bb7fa:	e9c0 3300 	strd	r3, r3, [r0]
   bb7fe:	6083      	str	r3, [r0, #8]
}
   bb800:	4630      	mov	r0, r6
   bb802:	b011      	add	sp, #68	; 0x44
   bb804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bb808:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bb80a:	7e0d      	ldrb	r5, [r1, #24]
   bb80c:	2d00      	cmp	r5, #0
   bb80e:	d158      	bne.n	bb8c2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bb810:	2320      	movs	r3, #32
   bb812:	462a      	mov	r2, r5
   bb814:	a803      	add	r0, sp, #12
   bb816:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bb81a:	f7fe fae4 	bl	b9de6 <_ZNK8particle7BleUuid8toStringEb>
   bb81e:	9b03      	ldr	r3, [sp, #12]
   bb820:	9301      	str	r3, [sp, #4]
   bb822:	4b2b      	ldr	r3, [pc, #172]	; (bb8d0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bb824:	492b      	ldr	r1, [pc, #172]	; (bb8d4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bb826:	9300      	str	r3, [sp, #0]
   bb828:	aa08      	add	r2, sp, #32
   bb82a:	462b      	mov	r3, r5
   bb82c:	2001      	movs	r0, #1
   bb82e:	f7fd fec1 	bl	b95b4 <log_message>
   bb832:	a803      	add	r0, sp, #12
   bb834:	f001 f9b4 	bl	bcba0 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bb838:	231c      	movs	r3, #28
   bb83a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bb83e:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bb842:	8a9a      	ldrh	r2, [r3, #20]
   bb844:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bb848:	8adb      	ldrh	r3, [r3, #22]
   bb84a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bb84e:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bb850:	4a21      	ldr	r2, [pc, #132]	; (bb8d8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bb852:	8818      	ldrh	r0, [r3, #0]
   bb854:	9500      	str	r5, [sp, #0]
   bb856:	a908      	add	r1, sp, #32
   bb858:	f7fd fc30 	bl	b90bc <hal_ble_gatt_client_discover_characteristics>
   bb85c:	2800      	cmp	r0, #0
   bb85e:	db30      	blt.n	bb8c2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bb860:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb862:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb866:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bb86a:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb86c:	f1a4 0308 	sub.w	r3, r4, #8
   bb870:	4599      	cmp	r9, r3
   bb872:	d022      	beq.n	bb8ba <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bb874:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb878:	89db      	ldrh	r3, [r3, #14]
   bb87a:	2b00      	cmp	r3, #0
   bb87c:	d0f5      	beq.n	bb86a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bb87e:	2210      	movs	r2, #16
   bb880:	2100      	movs	r1, #0
   bb882:	eb0d 0002 	add.w	r0, sp, r2
   bb886:	9503      	str	r5, [sp, #12]
   bb888:	f002 fce7 	bl	be25a <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bb88c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb890:	89d9      	ldrh	r1, [r3, #14]
   bb892:	683b      	ldr	r3, [r7, #0]
   bb894:	aa03      	add	r2, sp, #12
   bb896:	8818      	ldrh	r0, [r3, #0]
   bb898:	9500      	str	r5, [sp, #0]
   bb89a:	2313      	movs	r3, #19
   bb89c:	f7fd fc2c 	bl	b90f8 <hal_ble_gatt_client_read>
                if (len > 0) {
   bb8a0:	2800      	cmp	r0, #0
   bb8a2:	d0e2      	beq.n	bb86a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bb8a4:	ab10      	add	r3, sp, #64	; 0x40
   bb8a6:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bb8a8:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bb8aa:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bb8ae:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bb8b2:	303c      	adds	r0, #60	; 0x3c
   bb8b4:	f001 fa15 	bl	bcce2 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb8b8:	e7d7      	b.n	bb86a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bb8ba:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bb8be:	2201      	movs	r2, #1
   bb8c0:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bb8c2:	4642      	mov	r2, r8
   bb8c4:	4639      	mov	r1, r7
   bb8c6:	4630      	mov	r0, r6
   bb8c8:	f7ff ff62 	bl	bb790 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bb8cc:	e798      	b.n	bb800 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bb8ce:	bf00      	nop
   bb8d0:	000c17be 	.word	0x000c17be
   bb8d4:	000c169b 	.word	0x000c169b
   bb8d8:	000bba81 	.word	0x000bba81

000bb8dc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bb8de:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb8e0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb8e2:	b085      	sub	sp, #20
   bb8e4:	4606      	mov	r6, r0
   bb8e6:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bb8e8:	b92b      	cbnz	r3, bb8f6 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bb8ea:	a801      	add	r0, sp, #4
   bb8ec:	f7ff fe0a 	bl	bb504 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bb8f0:	a801      	add	r0, sp, #4
   bb8f2:	f7fe fe33 	bl	ba55c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bb8f6:	682b      	ldr	r3, [r5, #0]
   bb8f8:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bb8fc:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bb900:	42bc      	cmp	r4, r7
   bb902:	d009      	beq.n	bb918 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bb904:	4622      	mov	r2, r4
   bb906:	4629      	mov	r1, r5
   bb908:	a801      	add	r0, sp, #4
   bb90a:	f7ff ff6d 	bl	bb7e8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bb90e:	a801      	add	r0, sp, #4
   bb910:	f7fe fe36 	bl	ba580 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bb914:	3408      	adds	r4, #8
   bb916:	e7f3      	b.n	bb900 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bb918:	4630      	mov	r0, r6
   bb91a:	4629      	mov	r1, r5
   bb91c:	f7ff fefa 	bl	bb714 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bb920:	4630      	mov	r0, r6
   bb922:	b005      	add	sp, #20
   bb924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb928 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb92c:	4605      	mov	r5, r0
   bb92e:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bb930:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bb932:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb934:	460f      	mov	r7, r1
    return address_;
   bb936:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb938:	4698      	mov	r8, r3
    return address_;
   bb93a:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bb93c:	4b41      	ldr	r3, [pc, #260]	; (bba44 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bb93e:	9304      	str	r3, [sp, #16]
    return address_;
   bb940:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bb942:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bb944:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bb948:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bb94c:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bb950:	f7fe fc8e 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb954:	4b3c      	ldr	r3, [pc, #240]	; (bba48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bb956:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb958:	f7fe fc8a 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb95c:	6829      	ldr	r1, [r5, #0]
   bb95e:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb960:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb962:	464a      	mov	r2, r9
   bb964:	a804      	add	r0, sp, #16
   bb966:	f7fd fbd1 	bl	b910c <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bb96a:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bb96c:	4604      	mov	r4, r0
   bb96e:	b138      	cbz	r0, bb980 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bb970:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb972:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb976:	801a      	strh	r2, [r3, #0]
}
   bb978:	4620      	mov	r0, r4
   bb97a:	b013      	add	sp, #76	; 0x4c
   bb97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bb980:	4639      	mov	r1, r7
   bb982:	4628      	mov	r0, r5
   bb984:	f7fe fbf8 	bl	ba178 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bb988:	a803      	add	r0, sp, #12
   bb98a:	f7fe f88f 	bl	b9aac <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb98e:	f7fe fc6f 	bl	ba270 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bb992:	6807      	ldr	r7, [r0, #0]
   bb994:	4629      	mov	r1, r5
   bb996:	3718      	adds	r7, #24
   bb998:	4630      	mov	r0, r6
   bb99a:	f7fe fdc6 	bl	ba52a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb99e:	4631      	mov	r1, r6
   bb9a0:	4638      	mov	r0, r7
   bb9a2:	f7ff f92b 	bl	babfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb9a6:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bb9a8:	a80b      	add	r0, sp, #44	; 0x2c
   bb9aa:	f7fe fdc8 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb9ae:	f04f 0920 	mov.w	r9, #32
   bb9b2:	bb1f      	cbnz	r7, bb9fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bb9b4:	4632      	mov	r2, r6
   bb9b6:	4b25      	ldr	r3, [pc, #148]	; (bba4c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bb9b8:	4e25      	ldr	r6, [pc, #148]	; (bba50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bb9ba:	4926      	ldr	r1, [pc, #152]	; (bba54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb9bc:	9300      	str	r3, [sp, #0]
   bb9be:	2032      	movs	r0, #50	; 0x32
   bb9c0:	4623      	mov	r3, r4
   bb9c2:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb9c6:	f7fd fdf5 	bl	b95b4 <log_message>
   bb9ca:	6830      	ldr	r0, [r6, #0]
   bb9cc:	f7fd fc2a 	bl	b9224 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb9d0:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bb9d2:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb9d6:	4621      	mov	r1, r4
   bb9d8:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb9da:	4c1f      	ldr	r4, [pc, #124]	; (bba58 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb9dc:	f7fd fb50 	bl	b9080 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb9e0:	6830      	ldr	r0, [r6, #0]
   bb9e2:	f7fd fc17 	bl	b9214 <os_mutex_recursive_lock>
        locked_ = true;
   bb9e6:	2301      	movs	r3, #1
   bb9e8:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bb9ec:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb9ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb9f2:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb9f4:	a803      	add	r0, sp, #12
   bb9f6:	f7fe f867 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
   bb9fa:	e7bd      	b.n	bb978 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bb9fc:	a803      	add	r0, sp, #12
   bb9fe:	f7fe f863 	bl	b9ac8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bba02:	4b16      	ldr	r3, [pc, #88]	; (bba5c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bba04:	9300      	str	r3, [sp, #0]
   bba06:	4913      	ldr	r1, [pc, #76]	; (bba54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bba08:	4623      	mov	r3, r4
   bba0a:	4632      	mov	r2, r6
   bba0c:	2001      	movs	r0, #1
   bba0e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bba12:	f7fd fdcf 	bl	b95b4 <log_message>
    if (automatic) {
   bba16:	f1b8 0f00 	cmp.w	r8, #0
   bba1a:	d0ad      	beq.n	bb978 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bba1c:	4629      	mov	r1, r5
   bba1e:	4630      	mov	r0, r6
   bba20:	f7ff ff5c 	bl	bb8dc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bba24:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bba28:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bba2c:	42bd      	cmp	r5, r7
   bba2e:	d005      	beq.n	bba3c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bba30:	4628      	mov	r0, r5
   bba32:	2101      	movs	r1, #1
   bba34:	f7fe fb16 	bl	ba064 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bba38:	3508      	adds	r5, #8
   bba3a:	e7f7      	b.n	bba2c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bba3c:	4630      	mov	r0, r6
   bba3e:	f7fe fd9f 	bl	ba580 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bba42:	e799      	b.n	bb978 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bba44:	00180003 	.word	0x00180003
   bba48:	000bacb5 	.word	0x000bacb5
   bba4c:	000c17f0 	.word	0x000c17f0
   bba50:	2003e658 	.word	0x2003e658
   bba54:	000c169b 	.word	0x000c169b
   bba58:	fffffefc 	.word	0xfffffefc
   bba5c:	000c180c 	.word	0x000c180c

000bba60 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bba60:	b513      	push	{r0, r1, r4, lr}
   bba62:	4604      	mov	r4, r0
   bba64:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bba68:	f7fe fb52 	bl	ba110 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bba6c:	9b00      	ldr	r3, [sp, #0]
   bba6e:	9901      	ldr	r1, [sp, #4]
   bba70:	2200      	movs	r2, #0
   bba72:	4620      	mov	r0, r4
   bba74:	f7ff ff58 	bl	bb928 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bba78:	4620      	mov	r0, r4
   bba7a:	b002      	add	sp, #8
   bba7c:	bd10      	pop	{r4, pc}
	...

000bba80 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bba84:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bba86:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bba88:	2600      	movs	r6, #0
   bba8a:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bba8e:	4b66      	ldr	r3, [pc, #408]	; (bbc28 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bba90:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bba92:	4605      	mov	r5, r0
   bba94:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bba96:	4633      	mov	r3, r6
   bba98:	4964      	ldr	r1, [pc, #400]	; (bbc2c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bba9a:	f8df 9194 	ldr.w	r9, [pc, #404]	; bbc30 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bba9e:	f8df 818c 	ldr.w	r8, [pc, #396]	; bbc2c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbaa2:	f8df a190 	ldr.w	sl, [pc, #400]	; bbc34 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bbaa6:	aa0c      	add	r2, sp, #48	; 0x30
   bbaa8:	2001      	movs	r0, #1
   bbaaa:	f7fd fd83 	bl	b95b4 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bbaae:	682b      	ldr	r3, [r5, #0]
   bbab0:	42b3      	cmp	r3, r6
   bbab2:	f240 80b5 	bls.w	bbc20 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bbab6:	a803      	add	r0, sp, #12
   bbab8:	f7fe fa4e 	bl	b9f58 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bbabc:	a805      	add	r0, sp, #20
   bbabe:	f7fe fb0b 	bl	ba0d8 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbac2:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bbac6:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bbac8:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bbaca:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bbace:	445b      	add	r3, fp
        this->size = halHandles.size;
   bbad0:	8bd9      	ldrh	r1, [r3, #30]
   bbad2:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bbad4:	8c19      	ldrh	r1, [r3, #32]
   bbad6:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bbad8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bbada:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bbadc:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bbade:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bbae0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bbae2:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bbae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bbae6:	8253      	strh	r3, [r2, #18]
   bbae8:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bbaec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bbaf0:	429a      	cmp	r2, r3
   bbaf2:	d07d      	beq.n	bbbf0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bbaf4:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bbaf6:	8ac4      	ldrh	r4, [r0, #22]
   bbaf8:	428c      	cmp	r4, r1
   bbafa:	d377      	bcc.n	bbbec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bbafc:	8a84      	ldrh	r4, [r0, #20]
   bbafe:	428c      	cmp	r4, r1
   bbb00:	d874      	bhi.n	bbbec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbb02:	6859      	ldr	r1, [r3, #4]
   bbb04:	9005      	str	r0, [sp, #20]
   bbb06:	a806      	add	r0, sp, #24
   bbb08:	f7fd ffaa 	bl	b9a60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bbb0c:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bbb10:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bbb14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbb18:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bbb1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbb1e:	f8dc 3000 	ldr.w	r3, [ip]
   bbb22:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bbb24:	892b      	ldrh	r3, [r5, #8]
   bbb26:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bbb2a:	686b      	ldr	r3, [r5, #4]
   bbb2c:	9c03      	ldr	r4, [sp, #12]
   bbb2e:	445b      	add	r3, fp
   bbb30:	7e5b      	ldrb	r3, [r3, #25]
   bbb32:	f013 0f02 	tst.w	r3, #2
   bbb36:	d16e      	bne.n	bbc16 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bbb38:	686b      	ldr	r3, [r5, #4]
   bbb3a:	445b      	add	r3, fp
   bbb3c:	7e5b      	ldrb	r3, [r3, #25]
   bbb3e:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bbb40:	bf42      	ittt	mi
   bbb42:	7923      	ldrbmi	r3, [r4, #4]
   bbb44:	f043 0304 	orrmi.w	r3, r3, #4
   bbb48:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bbb4a:	686b      	ldr	r3, [r5, #4]
   bbb4c:	445b      	add	r3, fp
   bbb4e:	7e5b      	ldrb	r3, [r3, #25]
   bbb50:	0719      	lsls	r1, r3, #28
   bbb52:	bf42      	ittt	mi
   bbb54:	7923      	ldrbmi	r3, [r4, #4]
   bbb56:	f043 0308 	orrmi.w	r3, r3, #8
   bbb5a:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bbb5c:	686b      	ldr	r3, [r5, #4]
   bbb5e:	445b      	add	r3, fp
   bbb60:	7e5b      	ldrb	r3, [r3, #25]
   bbb62:	06da      	lsls	r2, r3, #27
   bbb64:	bf42      	ittt	mi
   bbb66:	7923      	ldrbmi	r3, [r4, #4]
   bbb68:	f043 0310 	orrmi.w	r3, r3, #16
   bbb6c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bbb6e:	686b      	ldr	r3, [r5, #4]
   bbb70:	445b      	add	r3, fp
   bbb72:	aa07      	add	r2, sp, #28
   bbb74:	7e5b      	ldrb	r3, [r3, #25]
   bbb76:	069b      	lsls	r3, r3, #26
   bbb78:	bf42      	ittt	mi
   bbb7a:	7923      	ldrbmi	r3, [r4, #4]
   bbb7c:	f043 0320 	orrmi.w	r3, r3, #32
   bbb80:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bbb82:	686b      	ldr	r3, [r5, #4]
   bbb84:	449b      	add	fp, r3
   bbb86:	f10b 0304 	add.w	r3, fp, #4
   bbb8a:	4696      	mov	lr, r2
   bbb8c:	f10b 0b14 	add.w	fp, fp, #20
   bbb90:	6818      	ldr	r0, [r3, #0]
   bbb92:	6859      	ldr	r1, [r3, #4]
   bbb94:	4694      	mov	ip, r2
   bbb96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bbb9a:	3308      	adds	r3, #8
   bbb9c:	455b      	cmp	r3, fp
   bbb9e:	4662      	mov	r2, ip
   bbba0:	d1f6      	bne.n	bbb90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bbba2:	6818      	ldr	r0, [r3, #0]
   bbba4:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bbba8:	4671      	mov	r1, lr
   bbbaa:	a80c      	add	r0, sp, #48	; 0x30
   bbbac:	f7fd ffd4 	bl	b9b58 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bbbb0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bbbb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbbb8:	3414      	adds	r4, #20
   bbbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbbbc:	f8dc 3000 	ldr.w	r3, [ip]
   bbbc0:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bbbc2:	a903      	add	r1, sp, #12
   bbbc4:	a80c      	add	r0, sp, #48	; 0x30
   bbbc6:	f7fe fc98 	bl	ba4fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbbca:	a90c      	add	r1, sp, #48	; 0x30
   bbbcc:	f107 0018 	add.w	r0, r7, #24
   bbbd0:	f7ff fdb1 	bl	bb736 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bbbd4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bbbd6:	a80d      	add	r0, sp, #52	; 0x34
   bbbd8:	f7fe fcb1 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbbdc:	b99c      	cbnz	r4, bbc06 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbbde:	2320      	movs	r3, #32
   bbbe0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bbbe4:	f8cd a000 	str.w	sl, [sp]
   bbbe8:	4623      	mov	r3, r4
   bbbea:	e007      	b.n	bbbfc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bbbec:	3308      	adds	r3, #8
   bbbee:	e77f      	b.n	bbaf0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bbbf0:	2420      	movs	r4, #32
   bbbf2:	2300      	movs	r3, #0
   bbbf4:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bbbf8:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbbfc:	aa0c      	add	r2, sp, #48	; 0x30
   bbbfe:	4641      	mov	r1, r8
   bbc00:	2032      	movs	r0, #50	; 0x32
   bbc02:	f7fd fcd7 	bl	b95b4 <log_message>
   bbc06:	a806      	add	r0, sp, #24
   bbc08:	f7fe fc99 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbc0c:	a804      	add	r0, sp, #16
   bbc0e:	f7fe fc96 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bbc12:	3601      	adds	r6, #1
   bbc14:	e74b      	b.n	bbaae <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bbc16:	7923      	ldrb	r3, [r4, #4]
   bbc18:	f043 0302 	orr.w	r3, r3, #2
   bbc1c:	7123      	strb	r3, [r4, #4]
   bbc1e:	e78b      	b.n	bbb38 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bbc20:	b015      	add	sp, #84	; 0x54
   bbc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbc26:	bf00      	nop
   bbc28:	000c1829 	.word	0x000c1829
   bbc2c:	000c169b 	.word	0x000c169b
   bbc30:	000c1844 	.word	0x000c1844
   bbc34:	000c1873 	.word	0x000c1873

000bbc38 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbc38:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc3c:	4604      	mov	r4, r0
   bbc3e:	460d      	mov	r5, r1
   bbc40:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbc42:	d914      	bls.n	bbc6e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbc44:	4290      	cmp	r0, r2
   bbc46:	d213      	bcs.n	bbc70 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbc48:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bbc4c:	1a75      	subs	r5, r6, r1
   bbc4e:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bbc52:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbc54:	42b7      	cmp	r7, r6
   bbc56:	d018      	beq.n	bbc8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbc58:	b11c      	cbz	r4, bbc62 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbc5a:	4631      	mov	r1, r6
   bbc5c:	4620      	mov	r0, r4
   bbc5e:	f7fe feb5 	bl	ba9cc <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bbc62:	4630      	mov	r0, r6
   bbc64:	f7fe fb72 	bl	ba34c <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bbc68:	3e24      	subs	r6, #36	; 0x24
   bbc6a:	3c24      	subs	r4, #36	; 0x24
   bbc6c:	e7f2      	b.n	bbc54 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbc6e:	d00c      	beq.n	bbc8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbc70:	42b5      	cmp	r5, r6
   bbc72:	d00a      	beq.n	bbc8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbc74:	b11c      	cbz	r4, bbc7e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbc76:	4629      	mov	r1, r5
   bbc78:	4620      	mov	r0, r4
   bbc7a:	f7fe fea7 	bl	ba9cc <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bbc7e:	4628      	mov	r0, r5
   bbc80:	f7fe fb64 	bl	ba34c <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bbc84:	3524      	adds	r5, #36	; 0x24
   bbc86:	3424      	adds	r4, #36	; 0x24
   bbc88:	e7f2      	b.n	bbc70 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbc8c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bbc8e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbc90:	4605      	mov	r5, r0
        if (n > 0) {
   bbc92:	dd13      	ble.n	bbcbc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bbc94:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bbc96:	fb07 f006 	mul.w	r0, r7, r6
   bbc9a:	f7fd fd67 	bl	b976c <malloc>
            if (!d) {
   bbc9e:	4604      	mov	r4, r0
   bbca0:	b158      	cbz	r0, bbcba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bbca2:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbca6:	fb07 1202 	mla	r2, r7, r2, r1
   bbcaa:	f7ff ffc5 	bl	bbc38 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbcae:	6828      	ldr	r0, [r5, #0]
   bbcb0:	f7fd fd64 	bl	b977c <free>
        data_ = d;
   bbcb4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbcb6:	60ae      	str	r6, [r5, #8]
        return true;
   bbcb8:	2001      	movs	r0, #1
    }
   bbcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bbcbc:	2400      	movs	r4, #0
   bbcbe:	e7f6      	b.n	bbcae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bbcc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bbcc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbcc4:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bbcc6:	ad01      	add	r5, sp, #4
   bbcc8:	4606      	mov	r6, r0
   bbcca:	4628      	mov	r0, r5
   bbccc:	460c      	mov	r4, r1
   bbcce:	f7fd ff28 	bl	b9b22 <_ZN8particle10BleAddressC1Ev>
   bbcd2:	a803      	add	r0, sp, #12
   bbcd4:	f7fe ff55 	bl	bab82 <_ZN8particle18BleAdvertisingDataC1Ev>
   bbcd8:	a806      	add	r0, sp, #24
   bbcda:	f7fe ff52 	bl	bab82 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bbcde:	6930      	ldr	r0, [r6, #16]
   bbce0:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bbce2:	89f2      	ldrh	r2, [r6, #14]
   bbce4:	ab13      	add	r3, sp, #76	; 0x4c
   bbce6:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bbce8:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bbcec:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bbcee:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bbcf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bbcf4:	a806      	add	r0, sp, #24
   bbcf6:	f7fe feb8 	bl	baa6a <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bbcfa:	89b2      	ldrh	r2, [r6, #12]
   bbcfc:	6871      	ldr	r1, [r6, #4]
   bbcfe:	a803      	add	r0, sp, #12
   bbd00:	f7fe feb3 	bl	baa6a <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bbd04:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbd08:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bbd0a:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbd0c:	d003      	beq.n	bbd16 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bbd0e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbd12:	429a      	cmp	r2, r3
   bbd14:	db5c      	blt.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bbd16:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bbd1a:	2b7f      	cmp	r3, #127	; 0x7f
   bbd1c:	d003      	beq.n	bbd26 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bbd1e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbd22:	429a      	cmp	r2, r3
   bbd24:	dc54      	bgt.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bbd26:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bbd2a:	4638      	mov	r0, r7
   bbd2c:	f7fe fd16 	bl	ba75c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bbd30:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bbd32:	2b00      	cmp	r3, #0
   bbd34:	dd52      	ble.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bbd36:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bbd38:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bbd3c:	45b1      	cmp	r9, r6
   bbd3e:	d050      	beq.n	bbde2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bbd40:	4630      	mov	r0, r6
   bbd42:	4629      	mov	r1, r5
   bbd44:	f7fd fed9 	bl	b9afa <_ZNK8particle10BleAddresseqERKS0_>
   bbd48:	3608      	adds	r6, #8
   bbd4a:	4680      	mov	r8, r0
   bbd4c:	2800      	cmp	r0, #0
   bbd4e:	d0f5      	beq.n	bbd3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bbd50:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbd52:	f7fd fd13 	bl	b977c <free>
        if (!delegator->filterByRssi(result) ||
   bbd56:	f1b8 0f00 	cmp.w	r8, #0
   bbd5a:	d039      	beq.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bbd5c:	4629      	mov	r1, r5
   bbd5e:	4620      	mov	r0, r4
   bbd60:	f7fe fcbf 	bl	ba6e2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bbd64:	b3a0      	cbz	r0, bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bbd66:	4629      	mov	r1, r5
   bbd68:	4620      	mov	r0, r4
   bbd6a:	f7ff fa68 	bl	bb23e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bbd6e:	4606      	mov	r6, r0
   bbd70:	b370      	cbz	r0, bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bbd72:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bbd76:	4638      	mov	r0, r7
   bbd78:	f7fe fd3b 	bl	ba7f2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bbd7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbd7e:	2b00      	cmp	r3, #0
   bbd80:	dd12      	ble.n	bbda8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bbd82:	a806      	add	r0, sp, #24
   bbd84:	f7fe f895 	bl	b9eb2 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bbd88:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bbd8a:	a803      	add	r0, sp, #12
   bbd8c:	f7fe f891 	bl	b9eb2 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bbd90:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bbd94:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bbd98:	429a      	cmp	r2, r3
   bbd9a:	d025      	beq.n	bbde8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bbd9c:	f833 1b02 	ldrh.w	r1, [r3], #2
   bbda0:	4588      	cmp	r8, r1
   bbda2:	d001      	beq.n	bbda8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bbda4:	4288      	cmp	r0, r1
   bbda6:	d1f7      	bne.n	bbd98 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bbda8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbdaa:	f7fd fce7 	bl	b977c <free>
              !delegator->filterByServiceUUID(result) ||
   bbdae:	b17e      	cbz	r6, bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bbdb0:	4629      	mov	r1, r5
   bbdb2:	4620      	mov	r0, r4
   bbdb4:	f7fe fd52 	bl	ba85c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bbdb8:	b150      	cbz	r0, bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bbdba:	6a23      	ldr	r3, [r4, #32]
   bbdbc:	b1b3      	cbz	r3, bbdec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bbdbe:	6963      	ldr	r3, [r4, #20]
   bbdc0:	9513      	str	r5, [sp, #76]	; 0x4c
   bbdc2:	3301      	adds	r3, #1
   bbdc4:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbdc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbdc8:	4639      	mov	r1, r7
   bbdca:	f104 0018 	add.w	r0, r4, #24
   bbdce:	4798      	blx	r3
            return;
   bbdd0:	4628      	mov	r0, r5
   bbdd2:	f7fe fabb 	bl	ba34c <_ZN8particle13BleScanResultD1Ev>
    }
   bbdd6:	b01d      	add	sp, #116	; 0x74
   bbdd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bbddc:	f04f 0801 	mov.w	r8, #1
   bbde0:	e7b6      	b.n	bbd50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbde2:	f04f 0800 	mov.w	r8, #0
   bbde6:	e7b3      	b.n	bbd50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbde8:	2600      	movs	r6, #0
   bbdea:	e7dd      	b.n	bbda8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bbdec:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bbdf0:	f1b8 0f00 	cmp.w	r8, #0
   bbdf4:	d007      	beq.n	bbe06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bbdf6:	6963      	ldr	r3, [r4, #20]
   bbdf8:	3301      	adds	r3, #1
   bbdfa:	6163      	str	r3, [r4, #20]
   bbdfc:	4629      	mov	r1, r5
   bbdfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bbe00:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bbe04:	e7e3      	b.n	bbdce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bbe06:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bbe0a:	f1bc 0f00 	cmp.w	ip, #0
   bbe0e:	d025      	beq.n	bbe5c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bbe10:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbe12:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bbe14:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbe16:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bbe18:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbe1a:	d8d9      	bhi.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbe1c:	2224      	movs	r2, #36	; 0x24
   bbe1e:	4353      	muls	r3, r2
    address_ = addr.address_;
   bbe20:	462a      	mov	r2, r5
   bbe22:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbe24:	3b24      	subs	r3, #36	; 0x24
   bbe26:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bbe2a:	f84c 0003 	str.w	r0, [ip, r3]
   bbe2e:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bbe30:	f106 0008 	add.w	r0, r6, #8
   bbe34:	a903      	add	r1, sp, #12
   bbe36:	f7fe fde0 	bl	ba9fa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bbe3a:	a906      	add	r1, sp, #24
   bbe3c:	f106 0014 	add.w	r0, r6, #20
   bbe40:	f7fe fddb 	bl	ba9fa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bbe44:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bbe48:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bbe4c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bbe50:	429a      	cmp	r2, r3
   bbe52:	d3bd      	bcc.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bbe54:	4640      	mov	r0, r8
   bbe56:	f7fd f909 	bl	b906c <hal_ble_gap_stop_scan>
   bbe5a:	e7b9      	b.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bbe5c:	e895 0003 	ldmia.w	r5, {r0, r1}
   bbe60:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bbe64:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bbe68:	a903      	add	r1, sp, #12
   bbe6a:	a80c      	add	r0, sp, #48	; 0x30
   bbe6c:	f7fe fd91 	bl	ba992 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bbe70:	a906      	add	r1, sp, #24
   bbe72:	a80f      	add	r0, sp, #60	; 0x3c
   bbe74:	f7fe fd8d 	bl	ba992 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bbe78:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bbe7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bbe80:	4641      	mov	r1, r8
   bbe82:	4638      	mov	r0, r7
   bbe84:	6866      	ldr	r6, [r4, #4]
   bbe86:	f7fe fda1 	bl	ba9cc <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbe8a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbe8e:	4299      	cmp	r1, r3
   bbe90:	da10      	bge.n	bbeb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bbe92:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbe94:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bbe96:	2224      	movs	r2, #36	; 0x24
   bbe98:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bbe9c:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bbea0:	fb02 3201 	mla	r2, r2, r1, r3
   bbea4:	4631      	mov	r1, r6
   bbea6:	f7ff fec7 	bl	bbc38 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbeaa:	b986      	cbnz	r6, bbece <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bbeac:	6863      	ldr	r3, [r4, #4]
   bbeae:	3301      	adds	r3, #1
   bbeb0:	6063      	str	r3, [r4, #4]
    return true;
   bbeb2:	e005      	b.n	bbec0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbeb4:	3101      	adds	r1, #1
   bbeb6:	4620      	mov	r0, r4
   bbeb8:	f7ff fee8 	bl	bbc8c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbebc:	2800      	cmp	r0, #0
   bbebe:	d1e8      	bne.n	bbe92 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bbec0:	4638      	mov	r0, r7
   bbec2:	f7fe fa43 	bl	ba34c <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bbec6:	4640      	mov	r0, r8
   bbec8:	f7fe fa40 	bl	ba34c <_ZN8particle13BleScanResultD1Ev>
   bbecc:	e780      	b.n	bbdd0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bbece:	4639      	mov	r1, r7
   bbed0:	4630      	mov	r0, r6
   bbed2:	f7fe fd7b 	bl	ba9cc <_ZN8particle13BleScanResultC1EOS0_>
   bbed6:	e7e9      	b.n	bbeac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bbed8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bbed8:	4802      	ldr	r0, [pc, #8]	; (bbee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bbeda:	2300      	movs	r3, #0
   bbedc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bbede:	f7fd b991 	b.w	b9204 <os_mutex_recursive_create>
   bbee2:	bf00      	nop
   bbee4:	2003e658 	.word	0x2003e658

000bbee8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bbee8:	2200      	movs	r2, #0
   bbeea:	6840      	ldr	r0, [r0, #4]
   bbeec:	4611      	mov	r1, r2
   bbeee:	f7fd bbf5 	b.w	b96dc <network_ready>

000bbef2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bbef2:	2200      	movs	r2, #0
   bbef4:	6840      	ldr	r0, [r0, #4]
   bbef6:	4611      	mov	r1, r2
   bbef8:	f7fd bc10 	b.w	b971c <network_listening>

000bbefc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbefc:	2200      	movs	r2, #0
   bbefe:	6840      	ldr	r0, [r0, #4]
   bbf00:	4611      	mov	r1, r2
   bbf02:	f7fd bc1b 	b.w	b973c <network_get_listen_timeout>

000bbf06 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbf06:	6840      	ldr	r0, [r0, #4]
   bbf08:	2200      	movs	r2, #0
   bbf0a:	f7fd bc0f 	b.w	b972c <network_set_listen_timeout>

000bbf0e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbf0e:	6840      	ldr	r0, [r0, #4]
   bbf10:	2200      	movs	r2, #0
   bbf12:	f081 0101 	eor.w	r1, r1, #1
   bbf16:	f7fd bbf9 	b.w	b970c <network_listen>

000bbf1a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbf1a:	2300      	movs	r3, #0
   bbf1c:	6840      	ldr	r0, [r0, #4]
   bbf1e:	461a      	mov	r2, r3
   bbf20:	4619      	mov	r1, r3
   bbf22:	f7fd bbeb 	b.w	b96fc <network_off>

000bbf26 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbf26:	2300      	movs	r3, #0
   bbf28:	6840      	ldr	r0, [r0, #4]
   bbf2a:	461a      	mov	r2, r3
   bbf2c:	4619      	mov	r1, r3
   bbf2e:	f7fd bbdd 	b.w	b96ec <network_on>

000bbf32 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbf32:	2200      	movs	r2, #0
   bbf34:	6840      	ldr	r0, [r0, #4]
   bbf36:	4611      	mov	r1, r2
   bbf38:	f7fd bbc0 	b.w	b96bc <network_connecting>

000bbf3c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbf3c:	6840      	ldr	r0, [r0, #4]
   bbf3e:	2200      	movs	r2, #0
   bbf40:	2102      	movs	r1, #2
   bbf42:	f7fd bbc3 	b.w	b96cc <network_disconnect>

000bbf46 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbf46:	2300      	movs	r3, #0
   bbf48:	6840      	ldr	r0, [r0, #4]
   bbf4a:	461a      	mov	r2, r3
   bbf4c:	f7fd bbae 	b.w	b96ac <network_connect>

000bbf50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bbf50:	4b08      	ldr	r3, [pc, #32]	; (bbf74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bbf52:	b510      	push	{r4, lr}
   bbf54:	2428      	movs	r4, #40	; 0x28
   bbf56:	4622      	mov	r2, r4
   bbf58:	4618      	mov	r0, r3
   bbf5a:	2100      	movs	r1, #0
   bbf5c:	f002 f97d 	bl	be25a <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bbf60:	4b05      	ldr	r3, [pc, #20]	; (bbf78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bbf62:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bbf64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf68:	6042      	str	r2, [r0, #4]
   bbf6a:	2204      	movs	r2, #4
   bbf6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bbf6e:	4a03      	ldr	r2, [pc, #12]	; (bbf7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bbf70:	601a      	str	r2, [r3, #0]
   bbf72:	bd10      	pop	{r4, pc}
   bbf74:	2003e668 	.word	0x2003e668
   bbf78:	2003e660 	.word	0x2003e660
   bbf7c:	000c191c 	.word	0x000c191c

000bbf80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbf80:	4770      	bx	lr

000bbf82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbf82:	2000      	movs	r0, #0
   bbf84:	4770      	bx	lr

000bbf86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbf86:	b510      	push	{r4, lr}
   bbf88:	2110      	movs	r1, #16
   bbf8a:	4604      	mov	r4, r0
   bbf8c:	f7f8 f887 	bl	b409e <_ZdlPvj>
   bbf90:	4620      	mov	r0, r4
   bbf92:	bd10      	pop	{r4, pc}

000bbf94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbf94:	b508      	push	{r3, lr}
      { delete this; }
   bbf96:	f7ff fff6 	bl	bbf86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbf9a:	bd08      	pop	{r3, pc}

000bbf9c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbf9c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbf9e:	2200      	movs	r2, #0
   bbfa0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbfa4:	6002      	str	r2, [r0, #0]
   bbfa6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbfa8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbfaa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbfac:	680c      	ldr	r4, [r1, #0]
   bbfae:	8085      	strh	r5, [r0, #4]
   bbfb0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbfb2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbfb4:	bd30      	pop	{r4, r5, pc}

000bbfb6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbfb6:	b510      	push	{r4, lr}
   bbfb8:	4604      	mov	r4, r0
    free((void*)msg_);
   bbfba:	6800      	ldr	r0, [r0, #0]
   bbfbc:	f7fd fbde 	bl	b977c <free>
}
   bbfc0:	4620      	mov	r0, r4
   bbfc2:	bd10      	pop	{r4, pc}

000bbfc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbfc4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbfc6:	68c4      	ldr	r4, [r0, #12]
   bbfc8:	b1f4      	cbz	r4, bc008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bbfca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbfcc:	2b02      	cmp	r3, #2
   bbfce:	d103      	bne.n	bbfd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbfd0:	f104 000c 	add.w	r0, r4, #12
   bbfd4:	f7ff ffef 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbfd8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbfda:	b135      	cbz	r5, bbfea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbfdc:	4628      	mov	r0, r5
   bbfde:	f7f8 f9ab 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bbfe2:	2110      	movs	r1, #16
   bbfe4:	4628      	mov	r0, r5
   bbfe6:	f7f8 f85a 	bl	b409e <_ZdlPvj>
   bbfea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbfec:	b135      	cbz	r5, bbffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbfee:	4628      	mov	r0, r5
   bbff0:	f7f8 f9a2 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bbff4:	2110      	movs	r1, #16
   bbff6:	4628      	mov	r0, r5
   bbff8:	f7f8 f851 	bl	b409e <_ZdlPvj>
   bbffc:	4620      	mov	r0, r4
   bbffe:	2114      	movs	r1, #20
   bc000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc004:	f7f8 b84b 	b.w	b409e <_ZdlPvj>
   bc008:	bd38      	pop	{r3, r4, r5, pc}

000bc00a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc00a:	680b      	ldr	r3, [r1, #0]
   bc00c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc00e:	684b      	ldr	r3, [r1, #4]
   bc010:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc012:	b113      	cbz	r3, bc01a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc014:	685a      	ldr	r2, [r3, #4]
   bc016:	3201      	adds	r2, #1
   bc018:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc01a:	4770      	bx	lr

000bc01c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc01e:	4604      	mov	r4, r0
   bc020:	4668      	mov	r0, sp
   bc022:	460d      	mov	r5, r1
   bc024:	f7ff fff1 	bl	bc00a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc028:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc02a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc02c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc02e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc030:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc032:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc034:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bc036:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc038:	f7fe fa81 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc03c:	b135      	cbz	r5, bc04c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc03e:	1d28      	adds	r0, r5, #4
   bc040:	f7fe fa7d 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc044:	2108      	movs	r1, #8
   bc046:	4628      	mov	r0, r5
   bc048:	f7f8 f829 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc04c:	4620      	mov	r0, r4
   bc04e:	b003      	add	sp, #12
   bc050:	bd30      	pop	{r4, r5, pc}

000bc052 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc052:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc054:	b510      	push	{r4, lr}
      if (_M_empty())
   bc056:	b90a      	cbnz	r2, bc05c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc058:	f001 fa2e 	bl	bd4b8 <_ZSt25__throw_bad_function_callv>
    }
   bc05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc060:	68c3      	ldr	r3, [r0, #12]
   bc062:	4718      	bx	r3

000bc064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc064:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc066:	6800      	ldr	r0, [r0, #0]
   bc068:	f100 0110 	add.w	r1, r0, #16
   bc06c:	f7ff fff1 	bl	bc052 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc070:	bd08      	pop	{r3, pc}

000bc072 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc072:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc074:	b510      	push	{r4, lr}
      if (_M_empty())
   bc076:	b90a      	cbnz	r2, bc07c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc078:	f001 fa1e 	bl	bd4b8 <_ZSt25__throw_bad_function_callv>
    }
   bc07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc080:	68c3      	ldr	r3, [r0, #12]
   bc082:	4718      	bx	r3

000bc084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc084:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc086:	6800      	ldr	r0, [r0, #0]
   bc088:	f100 0110 	add.w	r1, r0, #16
   bc08c:	f7ff fff1 	bl	bc072 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc090:	bd08      	pop	{r3, pc}
	...

000bc094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc094:	b538      	push	{r3, r4, r5, lr}
   bc096:	2300      	movs	r3, #0
   bc098:	4604      	mov	r4, r0
   bc09a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc09c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc09e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc0a0:	f7f7 fff9 	bl	b4096 <_Znwj>
   bc0a4:	b128      	cbz	r0, bc0b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc0a6:	2301      	movs	r3, #1
   bc0a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc0ac:	4b02      	ldr	r3, [pc, #8]	; (bc0b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc0ae:	6003      	str	r3, [r0, #0]
   bc0b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc0b2:	6020      	str	r0, [r4, #0]
	}
   bc0b4:	4620      	mov	r0, r4
   bc0b6:	bd38      	pop	{r3, r4, r5, pc}
   bc0b8:	000c1958 	.word	0x000c1958

000bc0bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc0bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc0be:	2300      	movs	r3, #0
   bc0c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc0c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc0c4:	4604      	mov	r4, r0
   bc0c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc0c8:	b12b      	cbz	r3, bc0d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc0ca:	2202      	movs	r2, #2
   bc0cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc0ce:	68eb      	ldr	r3, [r5, #12]
   bc0d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc0d2:	68ab      	ldr	r3, [r5, #8]
   bc0d4:	60a3      	str	r3, [r4, #8]
    }
   bc0d6:	4620      	mov	r0, r4
   bc0d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc0dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc0de:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc0e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc0e2:	4668      	mov	r0, sp
   bc0e4:	f7ff ff5a 	bl	bbf9c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc0e8:	f04f 0302 	mov.w	r3, #2
   bc0ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc0f0:	2a00      	cmp	r2, #0
   bc0f2:	d103      	bne.n	bc0fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc0f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc0f8:	2900      	cmp	r1, #0
   bc0fa:	d1f7      	bne.n	bc0ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc0fc:	d125      	bne.n	bc14a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc0fe:	f104 050c 	add.w	r5, r4, #12
   bc102:	4669      	mov	r1, sp
   bc104:	4628      	mov	r0, r5
   bc106:	f7ff ff49 	bl	bbf9c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc10a:	f3bf 8f5b 	dmb	ish
   bc10e:	2301      	movs	r3, #1
   bc110:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc112:	2000      	movs	r0, #0
   bc114:	f104 0308 	add.w	r3, r4, #8
   bc118:	f3bf 8f5b 	dmb	ish
   bc11c:	e853 6f00 	ldrex	r6, [r3]
   bc120:	e843 0200 	strex	r2, r0, [r3]
   bc124:	2a00      	cmp	r2, #0
   bc126:	d1f9      	bne.n	bc11c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc128:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc12c:	b16e      	cbz	r6, bc14a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc12e:	f7fd fa61 	bl	b95f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc132:	b178      	cbz	r0, bc154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc134:	4629      	mov	r1, r5
   bc136:	4630      	mov	r0, r6
   bc138:	f7ff ff8b 	bl	bc052 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc13c:	4630      	mov	r0, r6
   bc13e:	f7f8 f8fb 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc142:	2110      	movs	r1, #16
   bc144:	4630      	mov	r0, r6
   bc146:	f7f7 ffaa 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc14a:	4668      	mov	r0, sp
   bc14c:	f7ff ff33 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
    }
   bc150:	b009      	add	sp, #36	; 0x24
   bc152:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc154:	4631      	mov	r1, r6
   bc156:	a802      	add	r0, sp, #8
   bc158:	f7ff ffb0 	bl	bc0bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc15c:	68e0      	ldr	r0, [r4, #12]
   bc15e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc162:	b108      	cbz	r0, bc168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc164:	f002 f910 	bl	be388 <strdup>
        type_(type) {
   bc168:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc16a:	2010      	movs	r0, #16
   bc16c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc170:	f7f7 ff91 	bl	b4096 <_Znwj>
   bc174:	4605      	mov	r5, r0
   bc176:	b1e8      	cbz	r0, bc1b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc178:	2700      	movs	r7, #0
   bc17a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc17c:	2018      	movs	r0, #24
   bc17e:	f7f7 ff8a 	bl	b4096 <_Znwj>
   bc182:	4604      	mov	r4, r0
   bc184:	b188      	cbz	r0, bc1aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc186:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc188:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc18a:	a802      	add	r0, sp, #8
   bc18c:	f7ff f8b0 	bl	bb2f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc190:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc192:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc194:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc196:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc198:	9204      	str	r2, [sp, #16]
   bc19a:	a906      	add	r1, sp, #24
   bc19c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc19e:	60e3      	str	r3, [r4, #12]
   bc1a0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc1a4:	9205      	str	r2, [sp, #20]
   bc1a6:	f7ff fef9 	bl	bbf9c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc1aa:	4b08      	ldr	r3, [pc, #32]	; (bc1cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc1ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc1ae:	4b08      	ldr	r3, [pc, #32]	; (bc1d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc1b0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc1b2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc1b4:	a806      	add	r0, sp, #24
   bc1b6:	f7ff fefe 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc1ba:	a802      	add	r0, sp, #8
   bc1bc:	f7f8 f8bc 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc1c0:	2200      	movs	r2, #0
   bc1c2:	4629      	mov	r1, r5
   bc1c4:	4803      	ldr	r0, [pc, #12]	; (bc1d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc1c6:	f7fd fa1d 	bl	b9604 <application_thread_invoke>
   bc1ca:	e7b7      	b.n	bc13c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc1cc:	000bc065 	.word	0x000bc065
   bc1d0:	000bc2e9 	.word	0x000bc2e9
   bc1d4:	000b9843 	.word	0x000b9843

000bc1d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc1dc:	b08b      	sub	sp, #44	; 0x2c
   bc1de:	4605      	mov	r5, r0
   bc1e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc1e4:	460f      	mov	r7, r1
   bc1e6:	4690      	mov	r8, r2
   bc1e8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc1ea:	f7fd fa37 	bl	b965c <spark_cloud_flag_connected>
   bc1ee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc1f0:	4683      	mov	fp, r0
   bc1f2:	bb38      	cbnz	r0, bc244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc1f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc1f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc1fa:	a905      	add	r1, sp, #20
   bc1fc:	4630      	mov	r0, r6
   bc1fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc202:	f7ff fecb 	bl	bbf9c <_ZN8particle5ErrorC1EOS0_>
   bc206:	2014      	movs	r0, #20
   bc208:	f7f7 ff45 	bl	b4096 <_Znwj>
   bc20c:	4604      	mov	r4, r0
   bc20e:	b148      	cbz	r0, bc224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc210:	2302      	movs	r3, #2
   bc212:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc214:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc216:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc21a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc21c:	4631      	mov	r1, r6
   bc21e:	300c      	adds	r0, #12
   bc220:	f7ff febc 	bl	bbf9c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc224:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc226:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc228:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc22c:	f7ff ff32 	bl	bc094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc230:	4630      	mov	r0, r6
   bc232:	f7ff fec0 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc236:	a805      	add	r0, sp, #20
   bc238:	f7ff febd 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc23c:	4628      	mov	r0, r5
   bc23e:	b00b      	add	sp, #44	; 0x2c
   bc240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc244:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc246:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc248:	2014      	movs	r0, #20
   bc24a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc24e:	9307      	str	r3, [sp, #28]
   bc250:	f7f7 ff21 	bl	b4096 <_Znwj>
   bc254:	4601      	mov	r1, r0
   bc256:	b118      	cbz	r0, bc260 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc258:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc25c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc25e:	7044      	strb	r4, [r0, #1]
   bc260:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc262:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc264:	f7ff ff16 	bl	bc094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc268:	4b1e      	ldr	r3, [pc, #120]	; (bc2e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc26a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc26c:	2008      	movs	r0, #8
   bc26e:	f7f7 ff12 	bl	b4096 <_Znwj>
   bc272:	4604      	mov	r4, r0
   bc274:	b110      	cbz	r0, bc27c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc276:	a903      	add	r1, sp, #12
   bc278:	f7ff fec7 	bl	bc00a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc27c:	9600      	str	r6, [sp, #0]
   bc27e:	fa5f f38a 	uxtb.w	r3, sl
   bc282:	464a      	mov	r2, r9
   bc284:	4641      	mov	r1, r8
   bc286:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc288:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc28a:	f7fd f9ef 	bl	b966c <spark_send_event>
   bc28e:	b9b8      	cbnz	r0, bc2c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc290:	9b03      	ldr	r3, [sp, #12]
   bc292:	785b      	ldrb	r3, [r3, #1]
   bc294:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc298:	b993      	cbnz	r3, bc2c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc29a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc29e:	a905      	add	r1, sp, #20
   bc2a0:	a803      	add	r0, sp, #12
   bc2a2:	9205      	str	r2, [sp, #20]
   bc2a4:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc2a8:	f7ff ff18 	bl	bc0dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc2ac:	a805      	add	r0, sp, #20
   bc2ae:	f7ff fe82 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc2b2:	a805      	add	r0, sp, #20
   bc2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc2b6:	f7ff feb1 	bl	bc01c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc2ba:	a806      	add	r0, sp, #24
   bc2bc:	f7fe f93f 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc2c0:	a903      	add	r1, sp, #12
   bc2c2:	a805      	add	r0, sp, #20
   bc2c4:	f7ff fea1 	bl	bc00a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc2c8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc2ca:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc2cc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc2ce:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc2d0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc2d2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc2d4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc2d6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc2d8:	f7fe f931 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc2dc:	a804      	add	r0, sp, #16
   bc2de:	f7fe f92e 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc2e2:	e7ab      	b.n	bc23c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc2e4:	000bc365 	.word	0x000bc365

000bc2e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc2e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc2ec:	4605      	mov	r5, r0
	switch (__op)
   bc2ee:	d103      	bne.n	bc2f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc2f0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc2f2:	6003      	str	r3, [r0, #0]
      }
   bc2f4:	2000      	movs	r0, #0
   bc2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc2f8:	2a02      	cmp	r2, #2
   bc2fa:	d010      	beq.n	bc31e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc2fc:	2a03      	cmp	r2, #3
   bc2fe:	d1f9      	bne.n	bc2f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc300:	6804      	ldr	r4, [r0, #0]
   bc302:	2c00      	cmp	r4, #0
   bc304:	d0f6      	beq.n	bc2f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc306:	f104 0010 	add.w	r0, r4, #16
   bc30a:	f7ff fe54 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc30e:	4620      	mov	r0, r4
   bc310:	f7f8 f812 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc314:	2118      	movs	r1, #24
   bc316:	4620      	mov	r0, r4
   bc318:	f7f7 fec1 	bl	b409e <_ZdlPvj>
   bc31c:	e7ea      	b.n	bc2f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc31e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc320:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc322:	f7f7 feb8 	bl	b4096 <_Znwj>
   bc326:	4604      	mov	r4, r0
   bc328:	b150      	cbz	r0, bc340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc32a:	4631      	mov	r1, r6
   bc32c:	f7ff fec6 	bl	bc0bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc330:	6930      	ldr	r0, [r6, #16]
   bc332:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc336:	b108      	cbz	r0, bc33c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc338:	f002 f826 	bl	be388 <strdup>
        type_(type) {
   bc33c:	6120      	str	r0, [r4, #16]
   bc33e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc340:	602c      	str	r4, [r5, #0]
	}
   bc342:	e7d7      	b.n	bc2f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc344 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc344:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc346:	2300      	movs	r3, #0
   bc348:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc34a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc34c:	4604      	mov	r4, r0
   bc34e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc350:	b12b      	cbz	r3, bc35e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc352:	2202      	movs	r2, #2
   bc354:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc356:	68eb      	ldr	r3, [r5, #12]
   bc358:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc35a:	68ab      	ldr	r3, [r5, #8]
   bc35c:	60a3      	str	r3, [r4, #8]
    }
   bc35e:	4620      	mov	r0, r4
   bc360:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc364:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc366:	b089      	sub	sp, #36	; 0x24
   bc368:	4604      	mov	r4, r0
   bc36a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc36c:	a801      	add	r0, sp, #4
   bc36e:	4611      	mov	r1, r2
   bc370:	f7ff fe54 	bl	bc01c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc374:	b1a4      	cbz	r4, bc3a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc376:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc378:	b11d      	cbz	r5, bc382 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc37a:	4628      	mov	r0, r5
   bc37c:	f002 f804 	bl	be388 <strdup>
   bc380:	4605      	mov	r5, r0
   bc382:	a801      	add	r0, sp, #4
   bc384:	a903      	add	r1, sp, #12
        type_(type) {
   bc386:	9503      	str	r5, [sp, #12]
   bc388:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc38c:	f7ff fea6 	bl	bc0dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc390:	a803      	add	r0, sp, #12
   bc392:	f7ff fe10 	bl	bbfb6 <_ZN8particle5ErrorD1Ev>
   bc396:	a802      	add	r0, sp, #8
   bc398:	f7fe f8d1 	bl	ba53e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc39c:	b009      	add	sp, #36	; 0x24
   bc39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc3a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc3a2:	2301      	movs	r3, #1
   bc3a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc3a8:	2a00      	cmp	r2, #0
   bc3aa:	d103      	bne.n	bc3b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc3ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc3b0:	2900      	cmp	r1, #0
   bc3b2:	d1f7      	bne.n	bc3a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc3b4:	d1ef      	bne.n	bc396 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc3b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc3b8:	f3bf 8f5b 	dmb	ish
   bc3bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc3be:	1d2b      	adds	r3, r5, #4
   bc3c0:	f3bf 8f5b 	dmb	ish
   bc3c4:	e853 6f00 	ldrex	r6, [r3]
   bc3c8:	e843 4200 	strex	r2, r4, [r3]
   bc3cc:	2a00      	cmp	r2, #0
   bc3ce:	d1f9      	bne.n	bc3c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc3d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc3d4:	2e00      	cmp	r6, #0
   bc3d6:	d0de      	beq.n	bc396 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc3d8:	4620      	mov	r0, r4
   bc3da:	f7fd f90b 	bl	b95f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc3de:	4607      	mov	r7, r0
   bc3e0:	b160      	cbz	r0, bc3fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc3e2:	f105 010c 	add.w	r1, r5, #12
   bc3e6:	4630      	mov	r0, r6
   bc3e8:	f7ff fe43 	bl	bc072 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc3ec:	4630      	mov	r0, r6
   bc3ee:	f7f7 ffa3 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc3f2:	2110      	movs	r1, #16
   bc3f4:	4630      	mov	r0, r6
   bc3f6:	f7f7 fe52 	bl	b409e <_ZdlPvj>
   bc3fa:	e7cc      	b.n	bc396 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc3fc:	4631      	mov	r1, r6
   bc3fe:	a803      	add	r0, sp, #12
   bc400:	f7ff ffa0 	bl	bc344 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc404:	7b2b      	ldrb	r3, [r5, #12]
   bc406:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc40a:	2010      	movs	r0, #16
   bc40c:	f7f7 fe43 	bl	b4096 <_Znwj>
   bc410:	4605      	mov	r5, r0
   bc412:	b1d0      	cbz	r0, bc44a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc414:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc416:	2014      	movs	r0, #20
   bc418:	f7f7 fe3d 	bl	b4096 <_Znwj>
   bc41c:	4604      	mov	r4, r0
   bc41e:	b178      	cbz	r0, bc440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc420:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc422:	4601      	mov	r1, r0
   bc424:	a803      	add	r0, sp, #12
   bc426:	f7fe ff63 	bl	bb2f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc42a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc42c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc42e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc430:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc432:	9205      	str	r2, [sp, #20]
   bc434:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc436:	60e3      	str	r3, [r4, #12]
   bc438:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc43c:	9206      	str	r2, [sp, #24]
   bc43e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc440:	4b06      	ldr	r3, [pc, #24]	; (bc45c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc442:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc444:	4b06      	ldr	r3, [pc, #24]	; (bc460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc446:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc448:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc44a:	a803      	add	r0, sp, #12
   bc44c:	f7f7 ff74 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc450:	2200      	movs	r2, #0
   bc452:	4629      	mov	r1, r5
   bc454:	4803      	ldr	r0, [pc, #12]	; (bc464 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc456:	f7fd f8d5 	bl	b9604 <application_thread_invoke>
   bc45a:	e7c7      	b.n	bc3ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc45c:	000bc085 	.word	0x000bc085
   bc460:	000bc469 	.word	0x000bc469
   bc464:	000b9843 	.word	0x000b9843

000bc468 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc468:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc46a:	b570      	push	{r4, r5, r6, lr}
   bc46c:	4604      	mov	r4, r0
	switch (__op)
   bc46e:	d103      	bne.n	bc478 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc470:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc472:	6003      	str	r3, [r0, #0]
      }
   bc474:	2000      	movs	r0, #0
   bc476:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc478:	2a02      	cmp	r2, #2
   bc47a:	d00c      	beq.n	bc496 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc47c:	2a03      	cmp	r2, #3
   bc47e:	d1f9      	bne.n	bc474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc480:	6804      	ldr	r4, [r0, #0]
   bc482:	2c00      	cmp	r4, #0
   bc484:	d0f6      	beq.n	bc474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc486:	4620      	mov	r0, r4
   bc488:	f7f7 ff56 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc48c:	2114      	movs	r1, #20
   bc48e:	4620      	mov	r0, r4
   bc490:	f7f7 fe05 	bl	b409e <_ZdlPvj>
   bc494:	e7ee      	b.n	bc474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc496:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc498:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc49a:	f7f7 fdfc 	bl	b4096 <_Znwj>
   bc49e:	4605      	mov	r5, r0
   bc4a0:	b120      	cbz	r0, bc4ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc4a2:	4631      	mov	r1, r6
   bc4a4:	f7ff ff4e 	bl	bc344 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc4a8:	7c33      	ldrb	r3, [r6, #16]
   bc4aa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc4ac:	6025      	str	r5, [r4, #0]
	}
   bc4ae:	e7e1      	b.n	bc474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc4b0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bc4b0:	2200      	movs	r2, #0
   bc4b2:	6840      	ldr	r0, [r0, #4]
   bc4b4:	4611      	mov	r1, r2
   bc4b6:	f7fd b931 	b.w	b971c <network_listening>

000bc4ba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc4ba:	2200      	movs	r2, #0
   bc4bc:	6840      	ldr	r0, [r0, #4]
   bc4be:	4611      	mov	r1, r2
   bc4c0:	f7fd b93c 	b.w	b973c <network_get_listen_timeout>

000bc4c4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc4c4:	6840      	ldr	r0, [r0, #4]
   bc4c6:	2200      	movs	r2, #0
   bc4c8:	f7fd b930 	b.w	b972c <network_set_listen_timeout>

000bc4cc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc4cc:	6840      	ldr	r0, [r0, #4]
   bc4ce:	2200      	movs	r2, #0
   bc4d0:	f081 0101 	eor.w	r1, r1, #1
   bc4d4:	f7fd b91a 	b.w	b970c <network_listen>

000bc4d8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc4d8:	2300      	movs	r3, #0
   bc4da:	6840      	ldr	r0, [r0, #4]
   bc4dc:	461a      	mov	r2, r3
   bc4de:	4619      	mov	r1, r3
   bc4e0:	f7fd b90c 	b.w	b96fc <network_off>

000bc4e4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc4e4:	2300      	movs	r3, #0
   bc4e6:	6840      	ldr	r0, [r0, #4]
   bc4e8:	461a      	mov	r2, r3
   bc4ea:	4619      	mov	r1, r3
   bc4ec:	f7fd b8fe 	b.w	b96ec <network_on>

000bc4f0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bc4f0:	2200      	movs	r2, #0
   bc4f2:	6840      	ldr	r0, [r0, #4]
   bc4f4:	4611      	mov	r1, r2
   bc4f6:	f7fd b8f1 	b.w	b96dc <network_ready>

000bc4fa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc4fa:	2200      	movs	r2, #0
   bc4fc:	6840      	ldr	r0, [r0, #4]
   bc4fe:	4611      	mov	r1, r2
   bc500:	f7fd b8dc 	b.w	b96bc <network_connecting>

000bc504 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc504:	6840      	ldr	r0, [r0, #4]
   bc506:	2200      	movs	r2, #0
   bc508:	2102      	movs	r1, #2
   bc50a:	f7fd b8df 	b.w	b96cc <network_disconnect>

000bc50e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc50e:	2300      	movs	r3, #0
   bc510:	6840      	ldr	r0, [r0, #4]
   bc512:	461a      	mov	r2, r3
   bc514:	f7fd b8ca 	b.w	b96ac <network_connect>

000bc518 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bc518:	4b02      	ldr	r3, [pc, #8]	; (bc524 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bc51a:	2203      	movs	r2, #3
   bc51c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bc51e:	4a02      	ldr	r2, [pc, #8]	; (bc528 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bc520:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bc522:	4770      	bx	lr
   bc524:	2003e690 	.word	0x2003e690
   bc528:	000c1974 	.word	0x000c1974

000bc52c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc52c:	4770      	bx	lr

000bc52e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc530:	4606      	mov	r6, r0
   bc532:	4615      	mov	r5, r2
   bc534:	460c      	mov	r4, r1
   bc536:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc538:	42bc      	cmp	r4, r7
   bc53a:	d006      	beq.n	bc54a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc53c:	6833      	ldr	r3, [r6, #0]
   bc53e:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc542:	689b      	ldr	r3, [r3, #8]
   bc544:	4630      	mov	r0, r6
   bc546:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc548:	e7f6      	b.n	bc538 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc54a:	4628      	mov	r0, r5
   bc54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc54e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc54e:	7c00      	ldrb	r0, [r0, #16]
   bc550:	2200      	movs	r2, #0
   bc552:	f7fc bf07 	b.w	b9364 <hal_i2c_write>

000bc556 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc556:	7c00      	ldrb	r0, [r0, #16]
   bc558:	2100      	movs	r1, #0
   bc55a:	f7fc bf0b 	b.w	b9374 <hal_i2c_available>

000bc55e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc55e:	7c00      	ldrb	r0, [r0, #16]
   bc560:	2100      	movs	r1, #0
   bc562:	f7fc bf0f 	b.w	b9384 <hal_i2c_read>

000bc566 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc566:	7c00      	ldrb	r0, [r0, #16]
   bc568:	2100      	movs	r1, #0
   bc56a:	f7fc bf13 	b.w	b9394 <hal_i2c_peek>

000bc56e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc56e:	7c00      	ldrb	r0, [r0, #16]
   bc570:	2100      	movs	r1, #0
   bc572:	f7fc bf17 	b.w	b93a4 <hal_i2c_flush>

000bc576 <_ZN7TwoWireD0Ev>:
   bc576:	b510      	push	{r4, lr}
   bc578:	2114      	movs	r1, #20
   bc57a:	4604      	mov	r4, r0
   bc57c:	f7f7 fd8f 	bl	b409e <_ZdlPvj>
   bc580:	4620      	mov	r0, r4
   bc582:	bd10      	pop	{r4, pc}

000bc584 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc584:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc58a:	4604      	mov	r4, r0
   bc58c:	4608      	mov	r0, r1
   bc58e:	2100      	movs	r1, #0
   bc590:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc594:	4b03      	ldr	r3, [pc, #12]	; (bc5a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc596:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc598:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc59a:	4611      	mov	r1, r2
   bc59c:	f7fc ff12 	bl	b93c4 <hal_i2c_init>
}
   bc5a0:	4620      	mov	r0, r4
   bc5a2:	bd10      	pop	{r4, pc}
   bc5a4:	000c19b0 	.word	0x000c19b0

000bc5a8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bc5a8:	7c00      	ldrb	r0, [r0, #16]
   bc5aa:	2200      	movs	r2, #0
   bc5ac:	f7fc beba 	b.w	b9324 <hal_i2c_set_speed>

000bc5b0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc5b0:	2300      	movs	r3, #0
   bc5b2:	7c00      	ldrb	r0, [r0, #16]
   bc5b4:	461a      	mov	r2, r3
   bc5b6:	4619      	mov	r1, r3
   bc5b8:	f7fc bebc 	b.w	b9334 <hal_i2c_begin>

000bc5bc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc5bc:	7c00      	ldrb	r0, [r0, #16]
   bc5be:	2200      	movs	r2, #0
   bc5c0:	f7fc bec0 	b.w	b9344 <hal_i2c_begin_transmission>

000bc5c4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc5c4:	b2c9      	uxtb	r1, r1
   bc5c6:	f7ff bff9 	b.w	bc5bc <_ZN7TwoWire17beginTransmissionEh>

000bc5ca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc5ca:	7c00      	ldrb	r0, [r0, #16]
   bc5cc:	2200      	movs	r2, #0
   bc5ce:	f7fc bec1 	b.w	b9354 <hal_i2c_end_transmission>

000bc5d2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bc5d2:	2101      	movs	r1, #1
   bc5d4:	f7ff bff9 	b.w	bc5ca <_ZN7TwoWire15endTransmissionEh>

000bc5d8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc5d8:	4700      	bx	r0
	...

000bc5dc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc5dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc5e0:	2400      	movs	r4, #0
{
   bc5e2:	461d      	mov	r5, r3
   bc5e4:	460f      	mov	r7, r1
   bc5e6:	4690      	mov	r8, r2
   bc5e8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc5ea:	f7fc fe8b 	bl	b9304 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc5ee:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc5f0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc5f4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc5f8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc5fc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc600:	bfa2      	ittt	ge
   bc602:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc606:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc60a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc60c:	4907      	ldr	r1, [pc, #28]	; (bc62c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc60e:	9400      	str	r4, [sp, #0]
   bc610:	4643      	mov	r3, r8
   bc612:	463a      	mov	r2, r7
   bc614:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc616:	bfa8      	it	ge
   bc618:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc61c:	f7fc fe6a 	bl	b92f4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc620:	fab0 f080 	clz	r0, r0
   bc624:	0940      	lsrs	r0, r0, #5
   bc626:	b004      	add	sp, #16
   bc628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc62c:	000bc5d9 	.word	0x000bc5d9

000bc630 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc630:	4770      	bx	lr

000bc632 <_ZN9IPAddressD0Ev>:
   bc632:	b510      	push	{r4, lr}
   bc634:	2118      	movs	r1, #24
   bc636:	4604      	mov	r4, r0
   bc638:	f7f7 fd31 	bl	b409e <_ZdlPvj>
   bc63c:	4620      	mov	r0, r4
   bc63e:	bd10      	pop	{r4, pc}

000bc640 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc640:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc642:	7d03      	ldrb	r3, [r0, #20]
   bc644:	2b06      	cmp	r3, #6
{
   bc646:	b08d      	sub	sp, #52	; 0x34
   bc648:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc64a:	f100 0704 	add.w	r7, r0, #4
   bc64e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc652:	d012      	beq.n	bc67a <_ZNK9IPAddress7printToER5Print+0x3a>
   bc654:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc658:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc65c:	220a      	movs	r2, #10
   bc65e:	4630      	mov	r0, r6
   bc660:	f000 f94b 	bl	bc8fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc664:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc666:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc668:	d019      	beq.n	bc69e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc66a:	2c00      	cmp	r4, #0
   bc66c:	d0f4      	beq.n	bc658 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc66e:	212e      	movs	r1, #46	; 0x2e
   bc670:	4630      	mov	r0, r6
   bc672:	f000 f929 	bl	bc8c8 <_ZN5Print5printEc>
   bc676:	4404      	add	r4, r0
   bc678:	e7ee      	b.n	bc658 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc67a:	232f      	movs	r3, #47	; 0x2f
   bc67c:	466a      	mov	r2, sp
   bc67e:	4639      	mov	r1, r7
   bc680:	200a      	movs	r0, #10
		buf[0] = 0;
   bc682:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc686:	f7fc fea5 	bl	b93d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc68a:	4668      	mov	r0, sp
   bc68c:	f001 fe99 	bl	be3c2 <strlen>
   bc690:	6833      	ldr	r3, [r6, #0]
   bc692:	4602      	mov	r2, r0
   bc694:	68db      	ldr	r3, [r3, #12]
   bc696:	4669      	mov	r1, sp
   bc698:	4630      	mov	r0, r6
   bc69a:	4798      	blx	r3
   bc69c:	4604      	mov	r4, r0
    }
    return n;
}
   bc69e:	4620      	mov	r0, r4
   bc6a0:	b00d      	add	sp, #52	; 0x34
   bc6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc6a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc6a4:	b510      	push	{r4, lr}
   bc6a6:	4b05      	ldr	r3, [pc, #20]	; (bc6bc <_ZN9IPAddressC1Ev+0x18>)
   bc6a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc6aa:	2211      	movs	r2, #17
   bc6ac:	f840 3b04 	str.w	r3, [r0], #4
   bc6b0:	2100      	movs	r1, #0
   bc6b2:	f001 fdd2 	bl	be25a <memset>
}
   bc6b6:	4620      	mov	r0, r4
   bc6b8:	bd10      	pop	{r4, pc}
   bc6ba:	bf00      	nop
   bc6bc:	000c19d8 	.word	0x000c19d8

000bc6c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc6c0:	4603      	mov	r3, r0
   bc6c2:	4a07      	ldr	r2, [pc, #28]	; (bc6e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc6c4:	b510      	push	{r4, lr}
   bc6c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc6ca:	f101 0210 	add.w	r2, r1, #16
   bc6ce:	f851 4b04 	ldr.w	r4, [r1], #4
   bc6d2:	f843 4b04 	str.w	r4, [r3], #4
   bc6d6:	4291      	cmp	r1, r2
   bc6d8:	d1f9      	bne.n	bc6ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc6da:	780a      	ldrb	r2, [r1, #0]
   bc6dc:	701a      	strb	r2, [r3, #0]
}
   bc6de:	bd10      	pop	{r4, pc}
   bc6e0:	000c19d8 	.word	0x000c19d8

000bc6e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc6e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc6e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc6ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc6ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc6f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc6f6:	2304      	movs	r3, #4
   bc6f8:	6041      	str	r1, [r0, #4]
   bc6fa:	7503      	strb	r3, [r0, #20]
}
   bc6fc:	bd10      	pop	{r4, pc}
	...

000bc700 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc700:	b507      	push	{r0, r1, r2, lr}
   bc702:	4b06      	ldr	r3, [pc, #24]	; (bc71c <_ZN9IPAddressC1EPKh+0x1c>)
   bc704:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc706:	78cb      	ldrb	r3, [r1, #3]
   bc708:	9300      	str	r3, [sp, #0]
   bc70a:	788b      	ldrb	r3, [r1, #2]
   bc70c:	784a      	ldrb	r2, [r1, #1]
   bc70e:	7809      	ldrb	r1, [r1, #0]
   bc710:	f7ff ffe8 	bl	bc6e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc714:	b003      	add	sp, #12
   bc716:	f85d fb04 	ldr.w	pc, [sp], #4
   bc71a:	bf00      	nop
   bc71c:	000c19d8 	.word	0x000c19d8

000bc720 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bc720:	4b01      	ldr	r3, [pc, #4]	; (bc728 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bc722:	4a02      	ldr	r2, [pc, #8]	; (bc72c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bc724:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bc726:	4770      	bx	lr
   bc728:	2003e698 	.word	0x2003e698
   bc72c:	000c19e4 	.word	0x000c19e4

000bc730 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc730:	2300      	movs	r3, #0
   bc732:	6840      	ldr	r0, [r0, #4]
   bc734:	461a      	mov	r2, r3
   bc736:	f7fc bfb9 	b.w	b96ac <network_connect>

000bc73a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc73a:	6840      	ldr	r0, [r0, #4]
   bc73c:	2200      	movs	r2, #0
   bc73e:	2102      	movs	r1, #2
   bc740:	f7fc bfc4 	b.w	b96cc <network_disconnect>

000bc744 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc744:	2200      	movs	r2, #0
   bc746:	6840      	ldr	r0, [r0, #4]
   bc748:	4611      	mov	r1, r2
   bc74a:	f7fc bfb7 	b.w	b96bc <network_connecting>

000bc74e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc74e:	2200      	movs	r2, #0
   bc750:	6840      	ldr	r0, [r0, #4]
   bc752:	4611      	mov	r1, r2
   bc754:	f7fc bfc2 	b.w	b96dc <network_ready>

000bc758 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc758:	2300      	movs	r3, #0
   bc75a:	6840      	ldr	r0, [r0, #4]
   bc75c:	461a      	mov	r2, r3
   bc75e:	4619      	mov	r1, r3
   bc760:	f7fc bfc4 	b.w	b96ec <network_on>

000bc764 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc764:	2300      	movs	r3, #0
   bc766:	6840      	ldr	r0, [r0, #4]
   bc768:	461a      	mov	r2, r3
   bc76a:	4619      	mov	r1, r3
   bc76c:	f7fc bfc6 	b.w	b96fc <network_off>

000bc770 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc770:	6840      	ldr	r0, [r0, #4]
   bc772:	2100      	movs	r1, #0
   bc774:	f7fc bfea 	b.w	b974c <network_is_on>

000bc778 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc778:	6840      	ldr	r0, [r0, #4]
   bc77a:	2100      	movs	r1, #0
   bc77c:	f7fc bfee 	b.w	b975c <network_is_off>

000bc780 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc780:	6840      	ldr	r0, [r0, #4]
   bc782:	2200      	movs	r2, #0
   bc784:	f081 0101 	eor.w	r1, r1, #1
   bc788:	f7fc bfc0 	b.w	b970c <network_listen>

000bc78c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc78c:	6840      	ldr	r0, [r0, #4]
   bc78e:	2200      	movs	r2, #0
   bc790:	f7fc bfcc 	b.w	b972c <network_set_listen_timeout>

000bc794 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc794:	2200      	movs	r2, #0
   bc796:	6840      	ldr	r0, [r0, #4]
   bc798:	4611      	mov	r1, r2
   bc79a:	f7fc bfcf 	b.w	b973c <network_get_listen_timeout>

000bc79e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc79e:	2200      	movs	r2, #0
   bc7a0:	6840      	ldr	r0, [r0, #4]
   bc7a2:	4611      	mov	r1, r2
   bc7a4:	f7fc bfba 	b.w	b971c <network_listening>

000bc7a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc7ac:	b095      	sub	sp, #84	; 0x54
   bc7ae:	4614      	mov	r4, r2
   bc7b0:	460d      	mov	r5, r1
   bc7b2:	4607      	mov	r7, r0
    IPAddress addr;
   bc7b4:	f7ff ff76 	bl	bc6a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc7b8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc7ba:	221c      	movs	r2, #28
   bc7bc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc7be:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bc7c0:	f001 fd4b 	bl	be25a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bc7c4:	2340      	movs	r3, #64	; 0x40
   bc7c6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bc7c8:	4620      	mov	r0, r4
   bc7ca:	466b      	mov	r3, sp
   bc7cc:	aa0c      	add	r2, sp, #48	; 0x30
   bc7ce:	2100      	movs	r1, #0
   bc7d0:	f7fc fe10 	bl	b93f4 <netdb_getaddrinfo>
    if (!r) {
   bc7d4:	4604      	mov	r4, r0
   bc7d6:	2800      	cmp	r0, #0
   bc7d8:	d14b      	bne.n	bc872 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc7da:	4602      	mov	r2, r0
   bc7dc:	2101      	movs	r1, #1
   bc7de:	6868      	ldr	r0, [r5, #4]
   bc7e0:	f7fc ff7c 	bl	b96dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc7e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc7e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc7e8:	4622      	mov	r2, r4
   bc7ea:	6868      	ldr	r0, [r5, #4]
   bc7ec:	f7fc ff76 	bl	b96dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc7f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc7f2:	4681      	mov	r9, r0
        bool ok = false;
   bc7f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc7f6:	2e00      	cmp	r6, #0
   bc7f8:	d03b      	beq.n	bc872 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bc7fa:	2900      	cmp	r1, #0
   bc7fc:	d139      	bne.n	bc872 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bc7fe:	6873      	ldr	r3, [r6, #4]
   bc800:	2b02      	cmp	r3, #2
   bc802:	d003      	beq.n	bc80c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bc804:	2b0a      	cmp	r3, #10
   bc806:	d011      	beq.n	bc82c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc808:	69f6      	ldr	r6, [r6, #28]
   bc80a:	e7f4      	b.n	bc7f6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bc80c:	f1b8 0f00 	cmp.w	r8, #0
   bc810:	d0fa      	beq.n	bc808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bc812:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bc814:	a806      	add	r0, sp, #24
   bc816:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bc818:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bc81a:	f7ff ff71 	bl	bc700 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc81e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc820:	1d3c      	adds	r4, r7, #4
   bc822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc824:	682b      	ldr	r3, [r5, #0]
   bc826:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc828:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bc82a:	e7ed      	b.n	bc808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bc82c:	f1b9 0f00 	cmp.w	r9, #0
   bc830:	d0ea      	beq.n	bc808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bc832:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bc834:	2210      	movs	r2, #16
   bc836:	a801      	add	r0, sp, #4
   bc838:	f001 fd0f 	bl	be25a <memset>
                    a.v = 6;
   bc83c:	2306      	movs	r3, #6
   bc83e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc842:	ad01      	add	r5, sp, #4
   bc844:	f104 0308 	add.w	r3, r4, #8
   bc848:	3418      	adds	r4, #24
   bc84a:	6818      	ldr	r0, [r3, #0]
   bc84c:	6859      	ldr	r1, [r3, #4]
   bc84e:	462a      	mov	r2, r5
   bc850:	c203      	stmia	r2!, {r0, r1}
   bc852:	3308      	adds	r3, #8
   bc854:	42a3      	cmp	r3, r4
   bc856:	4615      	mov	r5, r2
   bc858:	d1f7      	bne.n	bc84a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bc85a:	a901      	add	r1, sp, #4
   bc85c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bc85e:	ad07      	add	r5, sp, #28
   bc860:	f7ff ff2e 	bl	bc6c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc866:	1d3c      	adds	r4, r7, #4
   bc868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc86a:	682b      	ldr	r3, [r5, #0]
   bc86c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc86e:	4649      	mov	r1, r9
   bc870:	e7ca      	b.n	bc808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bc872:	9800      	ldr	r0, [sp, #0]
   bc874:	f7fc fdb6 	bl	b93e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bc878:	4638      	mov	r0, r7
   bc87a:	b015      	add	sp, #84	; 0x54
   bc87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bc880 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bc880:	4b02      	ldr	r3, [pc, #8]	; (bc88c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bc882:	4a03      	ldr	r2, [pc, #12]	; (bc890 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bc884:	601a      	str	r2, [r3, #0]
   bc886:	2200      	movs	r2, #0
   bc888:	605a      	str	r2, [r3, #4]

} // spark
   bc88a:	4770      	bx	lr
   bc88c:	2003e69c 	.word	0x2003e69c
   bc890:	000c19f0 	.word	0x000c19f0

000bc894 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bc894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc896:	4606      	mov	r6, r0
   bc898:	460d      	mov	r5, r1
  size_t n = 0;
   bc89a:	188f      	adds	r7, r1, r2
   bc89c:	2400      	movs	r4, #0
  while (size--) {
   bc89e:	42bd      	cmp	r5, r7
   bc8a0:	d00c      	beq.n	bc8bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bc8a2:	6833      	ldr	r3, [r6, #0]
   bc8a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   bc8a8:	689b      	ldr	r3, [r3, #8]
   bc8aa:	4630      	mov	r0, r6
   bc8ac:	4798      	blx	r3
     if (chunk>=0)
   bc8ae:	1e03      	subs	r3, r0, #0
   bc8b0:	db01      	blt.n	bc8b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bc8b2:	441c      	add	r4, r3
  while (size--) {
   bc8b4:	e7f3      	b.n	bc89e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bc8b6:	2c00      	cmp	r4, #0
   bc8b8:	bf08      	it	eq
   bc8ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bc8bc:	4620      	mov	r0, r4
   bc8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc8c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bc8c0:	b508      	push	{r3, lr}
  return write(str);
   bc8c2:	f7fa fe31 	bl	b7528 <_ZN5Print5writeEPKc>
}
   bc8c6:	bd08      	pop	{r3, pc}

000bc8c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bc8c8:	6803      	ldr	r3, [r0, #0]
   bc8ca:	689b      	ldr	r3, [r3, #8]
   bc8cc:	4718      	bx	r3

000bc8ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bc8ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bc8d0:	210d      	movs	r1, #13
{
   bc8d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   bc8d4:	f7ff fff8 	bl	bc8c8 <_ZN5Print5printEc>
  n += print('\n');
   bc8d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   bc8da:	4604      	mov	r4, r0
  n += print('\n');
   bc8dc:	4628      	mov	r0, r5
   bc8de:	f7ff fff3 	bl	bc8c8 <_ZN5Print5printEc>
  return n;
}
   bc8e2:	4420      	add	r0, r4
   bc8e4:	bd38      	pop	{r3, r4, r5, pc}

000bc8e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bc8e6:	b538      	push	{r3, r4, r5, lr}
   bc8e8:	4605      	mov	r5, r0
  return write(str);
   bc8ea:	f7fa fe1d 	bl	b7528 <_ZN5Print5writeEPKc>
   bc8ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bc8f0:	4628      	mov	r0, r5
   bc8f2:	f7ff ffec 	bl	bc8ce <_ZN5Print7printlnEv>
  return n;
}
   bc8f6:	4420      	add	r0, r4
   bc8f8:	bd38      	pop	{r3, r4, r5, pc}

000bc8fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bc8fa:	b530      	push	{r4, r5, lr}
   bc8fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bc8fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bc900:	2a01      	cmp	r2, #1
  *str = '\0';
   bc902:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bc906:	bf98      	it	ls
   bc908:	220a      	movls	r2, #10
   bc90a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bc90c:	460d      	mov	r5, r1
   bc90e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bc912:	fb01 5312 	mls	r3, r1, r2, r5
   bc916:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc91a:	2b09      	cmp	r3, #9
   bc91c:	bf94      	ite	ls
   bc91e:	3330      	addls	r3, #48	; 0x30
   bc920:	3337      	addhi	r3, #55	; 0x37
   bc922:	b2db      	uxtb	r3, r3
  } while(n);
   bc924:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc926:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bc92a:	d9ef      	bls.n	bc90c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bc92c:	4621      	mov	r1, r4
   bc92e:	f7fa fdfb 	bl	b7528 <_ZN5Print5writeEPKc>
}
   bc932:	b00b      	add	sp, #44	; 0x2c
   bc934:	bd30      	pop	{r4, r5, pc}

000bc936 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bc936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc93a:	b086      	sub	sp, #24
   bc93c:	af00      	add	r7, sp, #0
   bc93e:	4605      	mov	r5, r0
   bc940:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bc942:	1d38      	adds	r0, r7, #4
   bc944:	2114      	movs	r1, #20
{
   bc946:	4614      	mov	r4, r2
    va_copy(args2, args);
   bc948:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bc94a:	f7fc ff3f 	bl	b97cc <vsnprintf>

    if (n<bufsize)
   bc94e:	2813      	cmp	r0, #19
   bc950:	d80e      	bhi.n	bc970 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bc952:	1d39      	adds	r1, r7, #4
   bc954:	4628      	mov	r0, r5
   bc956:	f7fa fde7 	bl	b7528 <_ZN5Print5writeEPKc>
   bc95a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bc95c:	b11e      	cbz	r6, bc966 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bc95e:	4628      	mov	r0, r5
   bc960:	f7ff ffb5 	bl	bc8ce <_ZN5Print7printlnEv>
   bc964:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bc966:	4620      	mov	r0, r4
   bc968:	3718      	adds	r7, #24
   bc96a:	46bd      	mov	sp, r7
   bc96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bc970:	f100 0308 	add.w	r3, r0, #8
   bc974:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bc978:	46e8      	mov	r8, sp
        char bigger[n+1];
   bc97a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bc97e:	4622      	mov	r2, r4
   bc980:	1c41      	adds	r1, r0, #1
   bc982:	683b      	ldr	r3, [r7, #0]
   bc984:	4668      	mov	r0, sp
   bc986:	f7fc ff21 	bl	b97cc <vsnprintf>
  return write(str);
   bc98a:	4669      	mov	r1, sp
   bc98c:	4628      	mov	r0, r5
   bc98e:	f7fa fdcb 	bl	b7528 <_ZN5Print5writeEPKc>
   bc992:	4604      	mov	r4, r0
   bc994:	46c5      	mov	sp, r8
   bc996:	e7e1      	b.n	bc95c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bc998 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bc998:	b510      	push	{r4, lr}
  if (0 == max) {
   bc99a:	4604      	mov	r4, r0
   bc99c:	b128      	cbz	r0, bc9aa <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bc99e:	f001 fc93 	bl	be2c8 <rand>
   bc9a2:	fb90 f3f4 	sdiv	r3, r0, r4
   bc9a6:	fb03 0414 	mls	r4, r3, r4, r0
}
   bc9aa:	4620      	mov	r0, r4
   bc9ac:	bd10      	pop	{r4, pc}
	...

000bc9b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bc9b0:	4b01      	ldr	r3, [pc, #4]	; (bc9b8 <_GLOBAL__sub_I_RGB+0x8>)
   bc9b2:	2200      	movs	r2, #0
   bc9b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bc9b6:	4770      	bx	lr
   bc9b8:	2003e6a4 	.word	0x2003e6a4

000bc9bc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bc9bc:	2100      	movs	r1, #0
   bc9be:	f7fc bd69 	b.w	b9494 <hal_spi_release>

000bc9c2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bc9c2:	2100      	movs	r1, #0
   bc9c4:	f7fc bd5e 	b.w	b9484 <hal_spi_acquire>

000bc9c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bc9c8:	b510      	push	{r4, lr}
   bc9ca:	4604      	mov	r4, r0
   bc9cc:	4608      	mov	r0, r1
{
    _spi = spi;
   bc9ce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bc9d0:	f7fc fd28 	bl	b9424 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bc9d4:	2300      	movs	r3, #0
   bc9d6:	6063      	str	r3, [r4, #4]
}
   bc9d8:	4620      	mov	r0, r4
   bc9da:	bd10      	pop	{r4, pc}

000bc9dc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bc9dc:	b513      	push	{r0, r1, r4, lr}
   bc9de:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bc9e0:	7800      	ldrb	r0, [r0, #0]
   bc9e2:	f7ff ffee 	bl	bc9c2 <_ZN8SPIClass4lockEv.isra.0>
   bc9e6:	b958      	cbnz	r0, bca00 <_ZN8SPIClass5beginEv+0x24>
   bc9e8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bc9ea:	9001      	str	r0, [sp, #4]
   bc9ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bc9f0:	f7fc fd08 	bl	b9404 <hal_spi_begin>
        unlock();
   bc9f4:	9801      	ldr	r0, [sp, #4]
    }
}
   bc9f6:	b002      	add	sp, #8
   bc9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc9fc:	f7ff bfde 	b.w	bc9bc <_ZN8SPIClass6unlockEv.isra.0>
   bca00:	b002      	add	sp, #8
   bca02:	bd10      	pop	{r4, pc}

000bca04 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bca04:	7800      	ldrb	r0, [r0, #0]
   bca06:	f7ff bfd9 	b.w	bc9bc <_ZN8SPIClass6unlockEv.isra.0>
	...

000bca0c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bca0c:	0840      	lsrs	r0, r0, #1
{
   bca0e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bca10:	6018      	str	r0, [r3, #0]
   bca12:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bca14:	6818      	ldr	r0, [r3, #0]
   bca16:	4288      	cmp	r0, r1
   bca18:	b2e5      	uxtb	r5, r4
   bca1a:	d906      	bls.n	bca2a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bca1c:	3401      	adds	r4, #1
   bca1e:	2c08      	cmp	r4, #8
   bca20:	d002      	beq.n	bca28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bca22:	0840      	lsrs	r0, r0, #1
   bca24:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bca26:	e7f5      	b.n	bca14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bca28:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bca2a:	4b02      	ldr	r3, [pc, #8]	; (bca34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bca2c:	5d5b      	ldrb	r3, [r3, r5]
   bca2e:	7013      	strb	r3, [r2, #0]
}
   bca30:	bd30      	pop	{r4, r5, pc}
   bca32:	bf00      	nop
   bca34:	000c1a24 	.word	0x000c1a24

000bca38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bca38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bca3c:	4606      	mov	r6, r0
   bca3e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bca40:	7800      	ldrb	r0, [r0, #0]
{
   bca42:	460c      	mov	r4, r1
    CHECK(lock());
   bca44:	f7ff ffbd 	bl	bc9c2 <_ZN8SPIClass4lockEv.isra.0>
   bca48:	2800      	cmp	r0, #0
   bca4a:	db1b      	blt.n	bca84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bca4c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bca4e:	2214      	movs	r2, #20
   bca50:	2100      	movs	r1, #0
   bca52:	a809      	add	r0, sp, #36	; 0x24
   bca54:	f001 fc01 	bl	be25a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bca58:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bca5a:	2200      	movs	r2, #0
   bca5c:	a909      	add	r1, sp, #36	; 0x24
   bca5e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bca60:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bca64:	f7fc fcee 	bl	b9444 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bca68:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bca6c:	b113      	cbz	r3, bca74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bca6e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bca72:	b155      	cbz	r5, bca8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bca74:	2700      	movs	r7, #0
   bca76:	46b9      	mov	r9, r7
   bca78:	46b8      	mov	r8, r7
   bca7a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bca7c:	7923      	ldrb	r3, [r4, #4]
   bca7e:	b15d      	cbz	r5, bca98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bca80:	b1c3      	cbz	r3, bcab4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bca82:	2000      	movs	r0, #0
}
   bca84:	b00f      	add	sp, #60	; 0x3c
   bca86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bca8a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bca8e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bca92:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bca96:	e7f1      	b.n	bca7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bca98:	2b00      	cmp	r3, #0
   bca9a:	d135      	bne.n	bcb08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bca9c:	68a3      	ldr	r3, [r4, #8]
   bca9e:	4543      	cmp	r3, r8
   bcaa0:	d108      	bne.n	bcab4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bcaa2:	f88d 9020 	strb.w	r9, [sp, #32]
   bcaa6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcaaa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcaae:	89a3      	ldrh	r3, [r4, #12]
   bcab0:	429a      	cmp	r2, r3
   bcab2:	d0e6      	beq.n	bca82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bcab4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcab6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bcab8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcabc:	980a      	ldr	r0, [sp, #40]	; 0x28
   bcabe:	ab04      	add	r3, sp, #16
   bcac0:	f10d 020f 	add.w	r2, sp, #15
   bcac4:	f7ff ffa2 	bl	bca0c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bcac8:	7921      	ldrb	r1, [r4, #4]
   bcaca:	b985      	cbnz	r5, bcaee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bcacc:	b989      	cbnz	r1, bcaf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bcace:	68a3      	ldr	r3, [r4, #8]
   bcad0:	4543      	cmp	r3, r8
   bcad2:	d30e      	bcc.n	bcaf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bcad4:	f88d 9020 	strb.w	r9, [sp, #32]
   bcad8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcadc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcae0:	89a3      	ldrh	r3, [r4, #12]
   bcae2:	429a      	cmp	r2, r3
   bcae4:	d105      	bne.n	bcaf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bcae6:	9b04      	ldr	r3, [sp, #16]
   bcae8:	4543      	cmp	r3, r8
   bcaea:	d102      	bne.n	bcaf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bcaec:	e7c9      	b.n	bca82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bcaee:	2900      	cmp	r1, #0
   bcaf0:	d1f9      	bne.n	bcae6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bcaf2:	2300      	movs	r3, #0
   bcaf4:	9301      	str	r3, [sp, #4]
   bcaf6:	7b63      	ldrb	r3, [r4, #13]
   bcaf8:	9300      	str	r3, [sp, #0]
   bcafa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bcafe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bcb00:	7830      	ldrb	r0, [r6, #0]
   bcb02:	f7fc fcb7 	bl	b9474 <hal_spi_set_settings>
   bcb06:	e7bc      	b.n	bca82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bcb08:	e9cd 5500 	strd	r5, r5, [sp]
   bcb0c:	462b      	mov	r3, r5
   bcb0e:	462a      	mov	r2, r5
   bcb10:	2101      	movs	r1, #1
   bcb12:	e7f5      	b.n	bcb00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bcb14 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bcb14:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bcb16:	7800      	ldrb	r0, [r0, #0]
   bcb18:	f7fc fc7c 	bl	b9414 <hal_spi_transfer>
}
   bcb1c:	b2c0      	uxtb	r0, r0
   bcb1e:	bd08      	pop	{r3, pc}

000bcb20 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bcb20:	b530      	push	{r4, r5, lr}
   bcb22:	b087      	sub	sp, #28
   bcb24:	4604      	mov	r4, r0
   bcb26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bcb28:	9500      	str	r5, [sp, #0]
   bcb2a:	7800      	ldrb	r0, [r0, #0]
   bcb2c:	f7fc fc92 	bl	b9454 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bcb30:	b93d      	cbnz	r5, bcb42 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bcb32:	7820      	ldrb	r0, [r4, #0]
   bcb34:	a902      	add	r1, sp, #8
   bcb36:	f7fc fc95 	bl	b9464 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bcb3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bcb3e:	07db      	lsls	r3, r3, #31
   bcb40:	d4f7      	bmi.n	bcb32 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bcb42:	b007      	add	sp, #28
   bcb44:	bd30      	pop	{r4, r5, pc}

000bcb46 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bcb46:	b510      	push	{r4, lr}
   bcb48:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bcb4a:	f7fc fb93 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bcb4e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bcb50:	6823      	ldr	r3, [r4, #0]
   bcb52:	4620      	mov	r0, r4
   bcb54:	695b      	ldr	r3, [r3, #20]
   bcb56:	4798      	blx	r3
    if (c >= 0) return c;
   bcb58:	2800      	cmp	r0, #0
   bcb5a:	da08      	bge.n	bcb6e <_ZN6Stream9timedReadEv+0x28>
   bcb5c:	f7fc fb8a 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bcb60:	68e3      	ldr	r3, [r4, #12]
   bcb62:	1ac0      	subs	r0, r0, r3
   bcb64:	68a3      	ldr	r3, [r4, #8]
   bcb66:	4298      	cmp	r0, r3
   bcb68:	d3f2      	bcc.n	bcb50 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bcb6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcb6e:	bd10      	pop	{r4, pc}

000bcb70 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bcb70:	b570      	push	{r4, r5, r6, lr}
   bcb72:	460d      	mov	r5, r1
  String ret;
   bcb74:	4909      	ldr	r1, [pc, #36]	; (bcb9c <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bcb76:	4604      	mov	r4, r0
   bcb78:	4616      	mov	r6, r2
  String ret;
   bcb7a:	f000 f85c 	bl	bcc36 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bcb7e:	4628      	mov	r0, r5
   bcb80:	f7ff ffe1 	bl	bcb46 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bcb84:	2800      	cmp	r0, #0
   bcb86:	db06      	blt.n	bcb96 <_ZN6Stream15readStringUntilEc+0x26>
   bcb88:	4286      	cmp	r6, r0
   bcb8a:	d004      	beq.n	bcb96 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bcb8c:	b2c1      	uxtb	r1, r0
   bcb8e:	4620      	mov	r0, r4
   bcb90:	f000 f8d0 	bl	bcd34 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bcb94:	e7f3      	b.n	bcb7e <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bcb96:	4620      	mov	r0, r4
   bcb98:	bd70      	pop	{r4, r5, r6, pc}
   bcb9a:	bf00      	nop
   bcb9c:	000c0907 	.word	0x000c0907

000bcba0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bcba0:	b510      	push	{r4, lr}
   bcba2:	4604      	mov	r4, r0
{
	free(buffer);
   bcba4:	6800      	ldr	r0, [r0, #0]
   bcba6:	f7fc fde9 	bl	b977c <free>
}
   bcbaa:	4620      	mov	r0, r4
   bcbac:	bd10      	pop	{r4, pc}

000bcbae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bcbae:	b510      	push	{r4, lr}
   bcbb0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bcbb2:	6800      	ldr	r0, [r0, #0]
   bcbb4:	b108      	cbz	r0, bcbba <_ZN6String10invalidateEv+0xc>
   bcbb6:	f7fc fde1 	bl	b977c <free>
	buffer = NULL;
   bcbba:	2300      	movs	r3, #0
	capacity = len = 0;
   bcbbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bcbc0:	6023      	str	r3, [r4, #0]
}
   bcbc2:	bd10      	pop	{r4, pc}

000bcbc4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bcbc4:	b538      	push	{r3, r4, r5, lr}
   bcbc6:	4604      	mov	r4, r0
   bcbc8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bcbca:	6800      	ldr	r0, [r0, #0]
   bcbcc:	3101      	adds	r1, #1
   bcbce:	f7fc fddd 	bl	b978c <realloc>
	if (newbuffer) {
   bcbd2:	b110      	cbz	r0, bcbda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bcbd4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bcbd8:	2001      	movs	r0, #1
	}
	return 0;
}
   bcbda:	bd38      	pop	{r3, r4, r5, pc}

000bcbdc <_ZN6String7reserveEj>:
{
   bcbdc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bcbde:	6803      	ldr	r3, [r0, #0]
{
   bcbe0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bcbe2:	b123      	cbz	r3, bcbee <_ZN6String7reserveEj+0x12>
   bcbe4:	6843      	ldr	r3, [r0, #4]
   bcbe6:	428b      	cmp	r3, r1
   bcbe8:	d301      	bcc.n	bcbee <_ZN6String7reserveEj+0x12>
   bcbea:	2001      	movs	r0, #1
}
   bcbec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bcbee:	4620      	mov	r0, r4
   bcbf0:	f7ff ffe8 	bl	bcbc4 <_ZN6String12changeBufferEj>
   bcbf4:	2800      	cmp	r0, #0
   bcbf6:	d0f9      	beq.n	bcbec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bcbf8:	68a3      	ldr	r3, [r4, #8]
   bcbfa:	2b00      	cmp	r3, #0
   bcbfc:	d1f5      	bne.n	bcbea <_ZN6String7reserveEj+0xe>
   bcbfe:	6822      	ldr	r2, [r4, #0]
   bcc00:	7013      	strb	r3, [r2, #0]
   bcc02:	e7f2      	b.n	bcbea <_ZN6String7reserveEj+0xe>

000bcc04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bcc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcc06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bcc08:	4611      	mov	r1, r2
   bcc0a:	9201      	str	r2, [sp, #4]
{
   bcc0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bcc0e:	f7ff ffe5 	bl	bcbdc <_ZN6String7reserveEj>
   bcc12:	9a01      	ldr	r2, [sp, #4]
   bcc14:	b928      	cbnz	r0, bcc22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bcc16:	4620      	mov	r0, r4
   bcc18:	f7ff ffc9 	bl	bcbae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bcc1c:	4620      	mov	r0, r4
   bcc1e:	b003      	add	sp, #12
   bcc20:	bd30      	pop	{r4, r5, pc}
	len = length;
   bcc22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bcc24:	4629      	mov	r1, r5
   bcc26:	6820      	ldr	r0, [r4, #0]
   bcc28:	f001 faef 	bl	be20a <memcpy>
	buffer[len] = 0;
   bcc2c:	6822      	ldr	r2, [r4, #0]
   bcc2e:	68a3      	ldr	r3, [r4, #8]
   bcc30:	2100      	movs	r1, #0
   bcc32:	54d1      	strb	r1, [r2, r3]
	return *this;
   bcc34:	e7f2      	b.n	bcc1c <_ZN6String4copyEPKcj+0x18>

000bcc36 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bcc36:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bcc38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bcc3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bcc3e:	4604      	mov	r4, r0
	len = 0;
   bcc40:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcc42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bcc44:	b141      	cbz	r1, bcc58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bcc46:	4608      	mov	r0, r1
   bcc48:	9101      	str	r1, [sp, #4]
   bcc4a:	f001 fbba 	bl	be3c2 <strlen>
   bcc4e:	9901      	ldr	r1, [sp, #4]
   bcc50:	4602      	mov	r2, r0
   bcc52:	4620      	mov	r0, r4
   bcc54:	f7ff ffd6 	bl	bcc04 <_ZN6String4copyEPKcj>
}
   bcc58:	4620      	mov	r0, r4
   bcc5a:	b002      	add	sp, #8
   bcc5c:	bd10      	pop	{r4, pc}

000bcc5e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bcc5e:	b538      	push	{r3, r4, r5, lr}
   bcc60:	4605      	mov	r5, r0
	if (buffer) {
   bcc62:	6800      	ldr	r0, [r0, #0]
{
   bcc64:	460c      	mov	r4, r1
	if (buffer) {
   bcc66:	b168      	cbz	r0, bcc84 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bcc68:	686a      	ldr	r2, [r5, #4]
   bcc6a:	688b      	ldr	r3, [r1, #8]
   bcc6c:	429a      	cmp	r2, r3
   bcc6e:	d307      	bcc.n	bcc80 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bcc70:	6809      	ldr	r1, [r1, #0]
   bcc72:	f001 fb80 	bl	be376 <strcpy>
			len = rhs.len;
   bcc76:	68a3      	ldr	r3, [r4, #8]
   bcc78:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bcc7a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bcc7c:	60a3      	str	r3, [r4, #8]
}
   bcc7e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bcc80:	f7fc fd7c 	bl	b977c <free>
	buffer = rhs.buffer;
   bcc84:	6823      	ldr	r3, [r4, #0]
   bcc86:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bcc88:	6863      	ldr	r3, [r4, #4]
   bcc8a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bcc8c:	68a3      	ldr	r3, [r4, #8]
   bcc8e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bcc90:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bcc92:	e9c4 3300 	strd	r3, r3, [r4]
   bcc96:	e7f1      	b.n	bcc7c <_ZN6String4moveERS_+0x1e>

000bcc98 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bcc98:	b510      	push	{r4, lr}
	buffer = NULL;
   bcc9a:	2300      	movs	r3, #0
	capacity = 0;
   bcc9c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bcca0:	4604      	mov	r4, r0
	len = 0;
   bcca2:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcca4:	7303      	strb	r3, [r0, #12]
	move(rval);
   bcca6:	f7ff ffda 	bl	bcc5e <_ZN6String4moveERS_>
}
   bccaa:	4620      	mov	r0, r4
   bccac:	bd10      	pop	{r4, pc}

000bccae <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bccae:	4288      	cmp	r0, r1
{
   bccb0:	b510      	push	{r4, lr}
   bccb2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bccb4:	d005      	beq.n	bccc2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bccb6:	680b      	ldr	r3, [r1, #0]
   bccb8:	b12b      	cbz	r3, bccc6 <_ZN6StringaSERKS_+0x18>
   bccba:	688a      	ldr	r2, [r1, #8]
   bccbc:	4619      	mov	r1, r3
   bccbe:	f7ff ffa1 	bl	bcc04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bccc2:	4620      	mov	r0, r4
   bccc4:	bd10      	pop	{r4, pc}
	else invalidate();
   bccc6:	f7ff ff72 	bl	bcbae <_ZN6String10invalidateEv>
   bccca:	e7fa      	b.n	bccc2 <_ZN6StringaSERKS_+0x14>

000bcccc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bcccc:	b510      	push	{r4, lr}
	buffer = NULL;
   bccce:	2300      	movs	r3, #0
String::String(const String &value)
   bccd0:	4604      	mov	r4, r0
	capacity = 0;
   bccd2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bccd6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bccd8:	7303      	strb	r3, [r0, #12]
	*this = value;
   bccda:	f7ff ffe8 	bl	bccae <_ZN6StringaSERKS_>
}
   bccde:	4620      	mov	r0, r4
   bcce0:	bd10      	pop	{r4, pc}

000bcce2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bcce2:	b513      	push	{r0, r1, r4, lr}
   bcce4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bcce6:	b159      	cbz	r1, bcd00 <_ZN6StringaSEPKc+0x1e>
   bcce8:	4608      	mov	r0, r1
   bccea:	9101      	str	r1, [sp, #4]
   bccec:	f001 fb69 	bl	be3c2 <strlen>
   bccf0:	9901      	ldr	r1, [sp, #4]
   bccf2:	4602      	mov	r2, r0
   bccf4:	4620      	mov	r0, r4
   bccf6:	f7ff ff85 	bl	bcc04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bccfa:	4620      	mov	r0, r4
   bccfc:	b002      	add	sp, #8
   bccfe:	bd10      	pop	{r4, pc}
	else invalidate();
   bcd00:	f7ff ff55 	bl	bcbae <_ZN6String10invalidateEv>
   bcd04:	e7f9      	b.n	bccfa <_ZN6StringaSEPKc+0x18>

000bcd06 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bcd06:	b570      	push	{r4, r5, r6, lr}
   bcd08:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bcd0a:	460e      	mov	r6, r1
   bcd0c:	b909      	cbnz	r1, bcd12 <_ZN6String6concatEPKcj+0xc>
   bcd0e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bcd10:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bcd12:	b16a      	cbz	r2, bcd30 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bcd14:	6884      	ldr	r4, [r0, #8]
   bcd16:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bcd18:	4621      	mov	r1, r4
   bcd1a:	f7ff ff5f 	bl	bcbdc <_ZN6String7reserveEj>
   bcd1e:	2800      	cmp	r0, #0
   bcd20:	d0f5      	beq.n	bcd0e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bcd22:	6828      	ldr	r0, [r5, #0]
   bcd24:	68ab      	ldr	r3, [r5, #8]
   bcd26:	4631      	mov	r1, r6
   bcd28:	4418      	add	r0, r3
   bcd2a:	f001 fb24 	bl	be376 <strcpy>
	len = newlen;
   bcd2e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bcd30:	2001      	movs	r0, #1
   bcd32:	e7ed      	b.n	bcd10 <_ZN6String6concatEPKcj+0xa>

000bcd34 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bcd34:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bcd36:	2300      	movs	r3, #0
	buf[0] = c;
   bcd38:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bcd3c:	2201      	movs	r2, #1
   bcd3e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bcd40:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bcd44:	f7ff ffdf 	bl	bcd06 <_ZN6String6concatEPKcj>
}
   bcd48:	b003      	add	sp, #12
   bcd4a:	f85d fb04 	ldr.w	pc, [sp], #4

000bcd4e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bcd4e:	6802      	ldr	r2, [r0, #0]
{
   bcd50:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bcd52:	6809      	ldr	r1, [r1, #0]
   bcd54:	b162      	cbz	r2, bcd70 <_ZNK6String9compareToERKS_+0x22>
   bcd56:	b941      	cbnz	r1, bcd6a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bcd58:	6880      	ldr	r0, [r0, #8]
   bcd5a:	b160      	cbz	r0, bcd76 <_ZNK6String9compareToERKS_+0x28>
   bcd5c:	7810      	ldrb	r0, [r2, #0]
   bcd5e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bcd60:	6898      	ldr	r0, [r3, #8]
   bcd62:	b140      	cbz	r0, bcd76 <_ZNK6String9compareToERKS_+0x28>
   bcd64:	7809      	ldrb	r1, [r1, #0]
   bcd66:	4248      	negs	r0, r1
   bcd68:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bcd6a:	4610      	mov	r0, r2
   bcd6c:	f001 baf9 	b.w	be362 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bcd70:	2900      	cmp	r1, #0
   bcd72:	d1f5      	bne.n	bcd60 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bcd74:	4608      	mov	r0, r1
}
   bcd76:	4770      	bx	lr

000bcd78 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bcd78:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bcd7a:	6882      	ldr	r2, [r0, #8]
   bcd7c:	688b      	ldr	r3, [r1, #8]
   bcd7e:	429a      	cmp	r2, r3
   bcd80:	d105      	bne.n	bcd8e <_ZNK6String6equalsERKS_+0x16>
   bcd82:	f7ff ffe4 	bl	bcd4e <_ZNK6String9compareToERKS_>
   bcd86:	fab0 f080 	clz	r0, r0
   bcd8a:	0940      	lsrs	r0, r0, #5
}
   bcd8c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bcd8e:	2000      	movs	r0, #0
   bcd90:	e7fc      	b.n	bcd8c <_ZNK6String6equalsERKS_+0x14>

000bcd92 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bcd92:	6883      	ldr	r3, [r0, #8]
   bcd94:	428b      	cmp	r3, r1
   bcd96:	d903      	bls.n	bcda0 <_ZNK6StringixEj+0xe>
   bcd98:	6800      	ldr	r0, [r0, #0]
   bcd9a:	b110      	cbz	r0, bcda2 <_ZNK6StringixEj+0x10>
	return buffer[index];
   bcd9c:	5c40      	ldrb	r0, [r0, r1]
   bcd9e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bcda0:	2000      	movs	r0, #0
}
   bcda2:	4770      	bx	lr

000bcda4 <_ZNK6String6charAtEj>:
	return operator[](loc);
   bcda4:	f7ff bff5 	b.w	bcd92 <_ZNK6StringixEj>

000bcda8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bcda8:	4b05      	ldr	r3, [pc, #20]	; (bcdc0 <_GLOBAL__sub_I_System+0x18>)
   bcdaa:	2202      	movs	r2, #2
   bcdac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bcdae:	4b05      	ldr	r3, [pc, #20]	; (bcdc4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bcdb0:	4a05      	ldr	r2, [pc, #20]	; (bcdc8 <_GLOBAL__sub_I_System+0x20>)
   bcdb2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bcdb4:	2000      	movs	r0, #0
   bcdb6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bcdba:	f7fc bc0b 	b.w	b95d4 <set_system_mode>
   bcdbe:	bf00      	nop
   bcdc0:	2003e6c0 	.word	0x2003e6c0
   bcdc4:	2003e6b4 	.word	0x2003e6b4
   bcdc8:	ffff0000 	.word	0xffff0000

000bcdcc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bcdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bcdd0:	4a15      	ldr	r2, [pc, #84]	; (bce28 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bcdd2:	f8df 8060 	ldr.w	r8, [pc, #96]	; bce34 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bcdd6:	e9d2 6300 	ldrd	r6, r3, [r2]
   bcdda:	1980      	adds	r0, r0, r6
   bcddc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bcde0:	4b12      	ldr	r3, [pc, #72]	; (bce2c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bcde2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bcde6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bcdea:	1986      	adds	r6, r0, r6
   bcdec:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bcdf0:	42bb      	cmp	r3, r7
   bcdf2:	bf08      	it	eq
   bcdf4:	42b2      	cmpeq	r2, r6
{
   bcdf6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bcdf8:	d013      	beq.n	bce22 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bcdfa:	a903      	add	r1, sp, #12
   bcdfc:	4668      	mov	r0, sp
   bcdfe:	e9cd 6700 	strd	r6, r7, [sp]
   bce02:	f7fc fd13 	bl	b982c <localtime_r>
	calendar_time.tm_year += 1900;
   bce06:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce08:	4d09      	ldr	r5, [pc, #36]	; (bce30 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bce0a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce0e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bce10:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bce14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bce16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bce18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bce1a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce1e:	6823      	ldr	r3, [r4, #0]
   bce20:	602b      	str	r3, [r5, #0]
    }
}
   bce22:	b00c      	add	sp, #48	; 0x30
   bce24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bce28:	2003e6f8 	.word	0x2003e6f8
   bce2c:	2003e6f0 	.word	0x2003e6f0
   bce30:	2003e6c8 	.word	0x2003e6c8
   bce34:	2003e700 	.word	0x2003e700

000bce38 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bce38:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bce3a:	2000      	movs	r0, #0
   bce3c:	f7fc fc26 	bl	b968c <spark_sync_time_pending>
   bce40:	b128      	cbz	r0, bce4e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bce42:	f7fc fc0b 	bl	b965c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bce46:	f080 0001 	eor.w	r0, r0, #1
   bce4a:	b2c0      	uxtb	r0, r0
    }
   bce4c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bce4e:	2001      	movs	r0, #1
   bce50:	e7fc      	b.n	bce4c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bce54 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bce54:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bce56:	f7ff ffb9 	bl	bcdcc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bce5a:	4b02      	ldr	r3, [pc, #8]	; (bce64 <_ZN9TimeClass5monthEx+0x10>)
   bce5c:	6918      	ldr	r0, [r3, #16]
}
   bce5e:	3001      	adds	r0, #1
   bce60:	bd08      	pop	{r3, pc}
   bce62:	bf00      	nop
   bce64:	2003e6c8 	.word	0x2003e6c8

000bce68 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bce68:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bce6a:	2000      	movs	r0, #0
   bce6c:	f7fc fa0a 	bl	b9284 <hal_rtc_time_is_valid>
    if (rtcstate)
   bce70:	4604      	mov	r4, r0
   bce72:	b9a0      	cbnz	r0, bce9e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bce74:	f7fc fba6 	bl	b95c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bce78:	2801      	cmp	r0, #1
   bce7a:	d110      	bne.n	bce9e <_ZN9TimeClass7isValidEv+0x36>
   bce7c:	4620      	mov	r0, r4
   bce7e:	f7fc fbc9 	bl	b9614 <system_thread_get_state>
   bce82:	b960      	cbnz	r0, bce9e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bce84:	f7ff ffd8 	bl	bce38 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bce88:	b910      	cbnz	r0, bce90 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bce8a:	f7fc fbdf 	bl	b964c <spark_process>
        while (_while() && !_condition()) {
   bce8e:	e7f9      	b.n	bce84 <_ZN9TimeClass7isValidEv+0x1c>
   bce90:	f7ff ffd2 	bl	bce38 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bce94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bce98:	2000      	movs	r0, #0
   bce9a:	f7fc b9f3 	b.w	b9284 <hal_rtc_time_is_valid>
}
   bce9e:	4620      	mov	r0, r4
   bcea0:	bd10      	pop	{r4, pc}

000bcea2 <_ZN9TimeClass3nowEv>:
{
   bcea2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bcea4:	f7ff ffe0 	bl	bce68 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bcea8:	2210      	movs	r2, #16
   bceaa:	2100      	movs	r1, #0
   bceac:	4668      	mov	r0, sp
   bceae:	f001 f9d4 	bl	be25a <memset>
    hal_rtc_get_time(&tv, nullptr);
   bceb2:	2100      	movs	r1, #0
   bceb4:	4668      	mov	r0, sp
   bceb6:	f7fc f9ed 	bl	b9294 <hal_rtc_get_time>
}
   bceba:	9800      	ldr	r0, [sp, #0]
   bcebc:	b005      	add	sp, #20
   bcebe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bcec4 <_ZN9TimeClass4hourEv>:
{
   bcec4:	b508      	push	{r3, lr}
	return hour(now());
   bcec6:	f7ff ffec 	bl	bcea2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bceca:	17c1      	asrs	r1, r0, #31
   bcecc:	f7ff ff7e 	bl	bcdcc <_ZL22Refresh_UnixTime_Cachex>
}
   bced0:	4b01      	ldr	r3, [pc, #4]	; (bced8 <_ZN9TimeClass4hourEv+0x14>)
   bced2:	6898      	ldr	r0, [r3, #8]
   bced4:	bd08      	pop	{r3, pc}
   bced6:	bf00      	nop
   bced8:	2003e6c8 	.word	0x2003e6c8

000bcedc <_ZN9TimeClass6minuteEv>:
{
   bcedc:	b508      	push	{r3, lr}
	return minute(now());
   bcede:	f7ff ffe0 	bl	bcea2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcee2:	17c1      	asrs	r1, r0, #31
   bcee4:	f7ff ff72 	bl	bcdcc <_ZL22Refresh_UnixTime_Cachex>
}
   bcee8:	4b01      	ldr	r3, [pc, #4]	; (bcef0 <_ZN9TimeClass6minuteEv+0x14>)
   bceea:	6858      	ldr	r0, [r3, #4]
   bceec:	bd08      	pop	{r3, pc}
   bceee:	bf00      	nop
   bcef0:	2003e6c8 	.word	0x2003e6c8

000bcef4 <_ZN9TimeClass6secondEv>:
{
   bcef4:	b508      	push	{r3, lr}
	return second(now());
   bcef6:	f7ff ffd4 	bl	bcea2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcefa:	17c1      	asrs	r1, r0, #31
   bcefc:	f7ff ff66 	bl	bcdcc <_ZL22Refresh_UnixTime_Cachex>
}
   bcf00:	4b01      	ldr	r3, [pc, #4]	; (bcf08 <_ZN9TimeClass6secondEv+0x14>)
   bcf02:	6818      	ldr	r0, [r3, #0]
   bcf04:	bd08      	pop	{r3, pc}
   bcf06:	bf00      	nop
   bcf08:	2003e6c8 	.word	0x2003e6c8

000bcf0c <_ZN9TimeClass3dayEv>:
{
   bcf0c:	b508      	push	{r3, lr}
	return day(now());
   bcf0e:	f7ff ffc8 	bl	bcea2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcf12:	17c1      	asrs	r1, r0, #31
   bcf14:	f7ff ff5a 	bl	bcdcc <_ZL22Refresh_UnixTime_Cachex>
}
   bcf18:	4b01      	ldr	r3, [pc, #4]	; (bcf20 <_ZN9TimeClass3dayEv+0x14>)
   bcf1a:	68d8      	ldr	r0, [r3, #12]
   bcf1c:	bd08      	pop	{r3, pc}
   bcf1e:	bf00      	nop
   bcf20:	2003e6c8 	.word	0x2003e6c8

000bcf24 <_ZN9TimeClass5monthEv>:
{
   bcf24:	b508      	push	{r3, lr}
	return month(now());
   bcf26:	f7ff ffbc 	bl	bcea2 <_ZN9TimeClass3nowEv>
}
   bcf2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bcf2e:	17c1      	asrs	r1, r0, #31
   bcf30:	f7ff bf90 	b.w	bce54 <_ZN9TimeClass5monthEx>

000bcf34 <_ZN9TimeClass4yearEv>:
{
   bcf34:	b508      	push	{r3, lr}
	return year(now());
   bcf36:	f7ff ffb4 	bl	bcea2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcf3a:	17c1      	asrs	r1, r0, #31
   bcf3c:	f7ff ff46 	bl	bcdcc <_ZL22Refresh_UnixTime_Cachex>
}
   bcf40:	4b01      	ldr	r3, [pc, #4]	; (bcf48 <_ZN9TimeClass4yearEv+0x14>)
   bcf42:	6958      	ldr	r0, [r3, #20]
   bcf44:	bd08      	pop	{r3, pc}
   bcf46:	bf00      	nop
   bcf48:	2003e6c8 	.word	0x2003e6c8

000bcf4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bcf4c:	4b02      	ldr	r3, [pc, #8]	; (bcf58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bcf4e:	681a      	ldr	r2, [r3, #0]
   bcf50:	4b02      	ldr	r3, [pc, #8]	; (bcf5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bcf52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bcf54:	4770      	bx	lr
   bcf56:	bf00      	nop
   bcf58:	2003da8c 	.word	0x2003da8c
   bcf5c:	2003e6c4 	.word	0x2003e6c4

000bcf60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bcf60:	4770      	bx	lr

000bcf62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bcf62:	7441      	strb	r1, [r0, #17]
}
   bcf64:	4770      	bx	lr

000bcf66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bcf66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bcf68:	7c00      	ldrb	r0, [r0, #16]
   bcf6a:	f7fc facb 	bl	b9504 <hal_usart_available_data_for_write>
}
   bcf6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcf72:	bd08      	pop	{r3, pc}

000bcf74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bcf74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bcf76:	7c00      	ldrb	r0, [r0, #16]
   bcf78:	f7fc fa9c 	bl	b94b4 <hal_usart_available>
}
   bcf7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcf80:	bd08      	pop	{r3, pc}

000bcf82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bcf82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bcf84:	7c00      	ldrb	r0, [r0, #16]
   bcf86:	f7fc faa5 	bl	b94d4 <hal_usart_peek>
}
   bcf8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcf8e:	bd08      	pop	{r3, pc}

000bcf90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bcf90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bcf92:	7c00      	ldrb	r0, [r0, #16]
   bcf94:	f7fc fa96 	bl	b94c4 <hal_usart_read>
}
   bcf98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcf9c:	bd08      	pop	{r3, pc}

000bcf9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bcf9e:	7c00      	ldrb	r0, [r0, #16]
   bcfa0:	f7fc baa0 	b.w	b94e4 <hal_usart_flush>

000bcfa4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bcfa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcfa6:	7c45      	ldrb	r5, [r0, #17]
{
   bcfa8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcfaa:	b12d      	cbz	r5, bcfb8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bcfac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bcfae:	b003      	add	sp, #12
   bcfb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bcfb4:	f7fc ba76 	b.w	b94a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcfb8:	7c00      	ldrb	r0, [r0, #16]
   bcfba:	9101      	str	r1, [sp, #4]
   bcfbc:	f7fc faa2 	bl	b9504 <hal_usart_available_data_for_write>
   bcfc0:	2800      	cmp	r0, #0
   bcfc2:	9901      	ldr	r1, [sp, #4]
   bcfc4:	dcf2      	bgt.n	bcfac <_ZN11USARTSerial5writeEh+0x8>
}
   bcfc6:	4628      	mov	r0, r5
   bcfc8:	b003      	add	sp, #12
   bcfca:	bd30      	pop	{r4, r5, pc}

000bcfcc <_ZN11USARTSerialD0Ev>:
   bcfcc:	b510      	push	{r4, lr}
   bcfce:	2114      	movs	r1, #20
   bcfd0:	4604      	mov	r4, r0
   bcfd2:	f7f7 f864 	bl	b409e <_ZdlPvj>
   bcfd6:	4620      	mov	r0, r4
   bcfd8:	bd10      	pop	{r4, pc}
	...

000bcfdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bcfdc:	b510      	push	{r4, lr}
   bcfde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcfe2:	4604      	mov	r4, r0
   bcfe4:	4608      	mov	r0, r1
   bcfe6:	4611      	mov	r1, r2
   bcfe8:	2200      	movs	r2, #0
   bcfea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bcfee:	4b04      	ldr	r3, [pc, #16]	; (bd000 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bcff0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcff2:	2301      	movs	r3, #1
  _serial = serial;
   bcff4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bcff6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bcff8:	f7fc fa94 	bl	b9524 <hal_usart_init_ex>
}
   bcffc:	4620      	mov	r0, r4
   bcffe:	bd10      	pop	{r4, pc}
   bd000:	000c1a50 	.word	0x000c1a50

000bd004 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd004:	7c00      	ldrb	r0, [r0, #16]
   bd006:	2300      	movs	r3, #0
   bd008:	f7fc ba84 	b.w	b9514 <hal_usart_begin_config>

000bd00c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd00c:	2200      	movs	r2, #0
   bd00e:	f7ff bff9 	b.w	bd004 <_ZN11USARTSerial5beginEmm>

000bd012 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd012:	7441      	strb	r1, [r0, #17]
}
   bd014:	4770      	bx	lr

000bd016 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd016:	4770      	bx	lr

000bd018 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd018:	4770      	bx	lr

000bd01a <_ZN9USBSerial4readEv>:
{
   bd01a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd01c:	2100      	movs	r1, #0
   bd01e:	7c00      	ldrb	r0, [r0, #16]
   bd020:	f7fc faa8 	bl	b9574 <HAL_USB_USART_Receive_Data>
}
   bd024:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd028:	bd08      	pop	{r3, pc}

000bd02a <_ZN9USBSerial4peekEv>:
{
   bd02a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd02c:	2101      	movs	r1, #1
   bd02e:	7c00      	ldrb	r0, [r0, #16]
   bd030:	f7fc faa0 	bl	b9574 <HAL_USB_USART_Receive_Data>
}
   bd034:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd038:	bd08      	pop	{r3, pc}

000bd03a <_ZN9USBSerial17availableForWriteEv>:
{
   bd03a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd03c:	7c00      	ldrb	r0, [r0, #16]
   bd03e:	f7fc fa91 	bl	b9564 <HAL_USB_USART_Available_Data_For_Write>
}
   bd042:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd046:	bd08      	pop	{r3, pc}

000bd048 <_ZN9USBSerial9availableEv>:
{
   bd048:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd04a:	7c00      	ldrb	r0, [r0, #16]
   bd04c:	f7fc fa82 	bl	b9554 <HAL_USB_USART_Available_Data>
}
   bd050:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd054:	bd08      	pop	{r3, pc}

000bd056 <_ZN9USBSerial5writeEh>:
{
   bd056:	b513      	push	{r0, r1, r4, lr}
   bd058:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd05a:	7c00      	ldrb	r0, [r0, #16]
{
   bd05c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd05e:	f7fc fa81 	bl	b9564 <HAL_USB_USART_Available_Data_For_Write>
   bd062:	2800      	cmp	r0, #0
   bd064:	9901      	ldr	r1, [sp, #4]
   bd066:	dc01      	bgt.n	bd06c <_ZN9USBSerial5writeEh+0x16>
   bd068:	7c60      	ldrb	r0, [r4, #17]
   bd06a:	b120      	cbz	r0, bd076 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd06c:	7c20      	ldrb	r0, [r4, #16]
   bd06e:	f7fc fa89 	bl	b9584 <HAL_USB_USART_Send_Data>
   bd072:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd076:	b002      	add	sp, #8
   bd078:	bd10      	pop	{r4, pc}

000bd07a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd07a:	7c00      	ldrb	r0, [r0, #16]
   bd07c:	f7fc ba8a 	b.w	b9594 <HAL_USB_USART_Flush_Data>

000bd080 <_ZN9USBSerialD0Ev>:
   bd080:	b510      	push	{r4, lr}
   bd082:	2114      	movs	r1, #20
   bd084:	4604      	mov	r4, r0
   bd086:	f7f7 f80a 	bl	b409e <_ZdlPvj>
   bd08a:	4620      	mov	r0, r4
   bd08c:	bd10      	pop	{r4, pc}
	...

000bd090 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd090:	b510      	push	{r4, lr}
   bd092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd096:	4604      	mov	r4, r0
   bd098:	4608      	mov	r0, r1
   bd09a:	2100      	movs	r1, #0
   bd09c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd0a0:	4b04      	ldr	r3, [pc, #16]	; (bd0b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd0a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd0a4:	2301      	movs	r3, #1
  _serial = serial;
   bd0a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd0a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd0aa:	4611      	mov	r1, r2
   bd0ac:	f7fc fa42 	bl	b9534 <HAL_USB_USART_Init>
}
   bd0b0:	4620      	mov	r0, r4
   bd0b2:	bd10      	pop	{r4, pc}
   bd0b4:	000c1a80 	.word	0x000c1a80

000bd0b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd0b8:	7c00      	ldrb	r0, [r0, #16]
   bd0ba:	2200      	movs	r2, #0
   bd0bc:	f7fc ba42 	b.w	b9544 <HAL_USB_USART_Begin>

000bd0c0 <_Z19acquireSerialBufferv>:
{
   bd0c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd0c2:	2214      	movs	r2, #20
{
   bd0c4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd0c6:	2100      	movs	r1, #0
   bd0c8:	f001 f8c7 	bl	be25a <memset>
}
   bd0cc:	4620      	mov	r0, r4
   bd0ce:	bd10      	pop	{r4, pc}

000bd0d0 <_Z16_fetch_usbserialv>:
{
   bd0d0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd0d2:	4c0f      	ldr	r4, [pc, #60]	; (bd110 <_Z16_fetch_usbserialv+0x40>)
{
   bd0d4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd0d6:	a803      	add	r0, sp, #12
   bd0d8:	f7ff fff2 	bl	bd0c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd0dc:	7821      	ldrb	r1, [r4, #0]
   bd0de:	f3bf 8f5b 	dmb	ish
   bd0e2:	f011 0101 	ands.w	r1, r1, #1
   bd0e6:	d10f      	bne.n	bd108 <_Z16_fetch_usbserialv+0x38>
   bd0e8:	4620      	mov	r0, r4
   bd0ea:	9101      	str	r1, [sp, #4]
   bd0ec:	f7f6 ffe6 	bl	b40bc <__cxa_guard_acquire>
   bd0f0:	9901      	ldr	r1, [sp, #4]
   bd0f2:	b148      	cbz	r0, bd108 <_Z16_fetch_usbserialv+0x38>
   bd0f4:	aa03      	add	r2, sp, #12
   bd0f6:	4807      	ldr	r0, [pc, #28]	; (bd114 <_Z16_fetch_usbserialv+0x44>)
   bd0f8:	f7ff ffca 	bl	bd090 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd0fc:	4620      	mov	r0, r4
   bd0fe:	f7f6 ffe2 	bl	b40c6 <__cxa_guard_release>
   bd102:	4805      	ldr	r0, [pc, #20]	; (bd118 <_Z16_fetch_usbserialv+0x48>)
   bd104:	f001 f864 	bl	be1d0 <atexit>
	return _usbserial;
}
   bd108:	4802      	ldr	r0, [pc, #8]	; (bd114 <_Z16_fetch_usbserialv+0x44>)
   bd10a:	b008      	add	sp, #32
   bd10c:	bd10      	pop	{r4, pc}
   bd10e:	bf00      	nop
   bd110:	2003e708 	.word	0x2003e708
   bd114:	2003e70c 	.word	0x2003e70c
   bd118:	000bd017 	.word	0x000bd017

000bd11c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd11c:	4b01      	ldr	r3, [pc, #4]	; (bd124 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd11e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd120:	4770      	bx	lr
   bd122:	bf00      	nop
   bd124:	2003da90 	.word	0x2003da90

000bd128 <serialEventRun>:
{
   bd128:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd12a:	4b0b      	ldr	r3, [pc, #44]	; (bd158 <serialEventRun+0x30>)
   bd12c:	b143      	cbz	r3, bd140 <serialEventRun+0x18>
   bd12e:	f7ff ffcf 	bl	bd0d0 <_Z16_fetch_usbserialv>
   bd132:	6803      	ldr	r3, [r0, #0]
   bd134:	691b      	ldr	r3, [r3, #16]
   bd136:	4798      	blx	r3
   bd138:	2800      	cmp	r0, #0
   bd13a:	dd01      	ble.n	bd140 <serialEventRun+0x18>
        serialEvent();
   bd13c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd140:	4b06      	ldr	r3, [pc, #24]	; (bd15c <serialEventRun+0x34>)
   bd142:	b143      	cbz	r3, bd156 <serialEventRun+0x2e>
   bd144:	f000 f970 	bl	bd428 <_Z22__fetch_global_Serial1v>
   bd148:	6803      	ldr	r3, [r0, #0]
   bd14a:	691b      	ldr	r3, [r3, #16]
   bd14c:	4798      	blx	r3
   bd14e:	2800      	cmp	r0, #0
   bd150:	dd01      	ble.n	bd156 <serialEventRun+0x2e>
        serialEvent1();
   bd152:	f3af 8000 	nop.w
}
   bd156:	bd08      	pop	{r3, pc}
	...

000bd160 <_post_loop>:
{
   bd160:	b508      	push	{r3, lr}
	serialEventRun();
   bd162:	f7ff ffe1 	bl	bd128 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd166:	f7fc f885 	bl	b9274 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd16a:	4b01      	ldr	r3, [pc, #4]	; (bd170 <_post_loop+0x10>)
   bd16c:	6018      	str	r0, [r3, #0]
}
   bd16e:	bd08      	pop	{r3, pc}
   bd170:	2003e728 	.word	0x2003e728

000bd174 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd174:	4805      	ldr	r0, [pc, #20]	; (bd18c <_Z33system_initialize_user_backup_ramv+0x18>)
   bd176:	4a06      	ldr	r2, [pc, #24]	; (bd190 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bd178:	4906      	ldr	r1, [pc, #24]	; (bd194 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bd17a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd17c:	1a12      	subs	r2, r2, r0
   bd17e:	f001 f844 	bl	be20a <memcpy>
    __backup_sram_signature = signature;
   bd182:	4b05      	ldr	r3, [pc, #20]	; (bd198 <_Z33system_initialize_user_backup_ramv+0x24>)
   bd184:	4a05      	ldr	r2, [pc, #20]	; (bd19c <_Z33system_initialize_user_backup_ramv+0x28>)
   bd186:	601a      	str	r2, [r3, #0]
}
   bd188:	bd08      	pop	{r3, pc}
   bd18a:	bf00      	nop
   bd18c:	2003f400 	.word	0x2003f400
   bd190:	2003f404 	.word	0x2003f404
   bd194:	000c2014 	.word	0x000c2014
   bd198:	2003f400 	.word	0x2003f400
   bd19c:	9a271c1e 	.word	0x9a271c1e

000bd1a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd1a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd1a2:	2300      	movs	r3, #0
   bd1a4:	9300      	str	r3, [sp, #0]
   bd1a6:	461a      	mov	r2, r3
   bd1a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd1ac:	f7fc fa44 	bl	b9638 <system_ctrl_set_result>
}
   bd1b0:	b003      	add	sp, #12
   bd1b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd1b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd1b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd1ba:	8843      	ldrh	r3, [r0, #2]
   bd1bc:	2b0a      	cmp	r3, #10
   bd1be:	d008      	beq.n	bd1d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd1c0:	2b50      	cmp	r3, #80	; 0x50
   bd1c2:	d10b      	bne.n	bd1dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd1c4:	4b09      	ldr	r3, [pc, #36]	; (bd1ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd1c6:	681b      	ldr	r3, [r3, #0]
   bd1c8:	b14b      	cbz	r3, bd1de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd1ca:	b003      	add	sp, #12
   bd1cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd1d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd1d2:	f7ff ffe5 	bl	bd1a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd1d6:	b003      	add	sp, #12
   bd1d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd1dc:	2300      	movs	r3, #0
   bd1de:	9300      	str	r3, [sp, #0]
   bd1e0:	461a      	mov	r2, r3
   bd1e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd1e6:	f7fc fa27 	bl	b9638 <system_ctrl_set_result>
}
   bd1ea:	e7f4      	b.n	bd1d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd1ec:	2003e724 	.word	0x2003e724

000bd1f0 <module_user_init_hook>:
{
   bd1f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd1f2:	4812      	ldr	r0, [pc, #72]	; (bd23c <module_user_init_hook+0x4c>)
   bd1f4:	2100      	movs	r1, #0
   bd1f6:	f7fc fb11 	bl	b981c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd1fa:	4b11      	ldr	r3, [pc, #68]	; (bd240 <module_user_init_hook+0x50>)
   bd1fc:	681a      	ldr	r2, [r3, #0]
   bd1fe:	4b11      	ldr	r3, [pc, #68]	; (bd244 <module_user_init_hook+0x54>)
   bd200:	429a      	cmp	r2, r3
   bd202:	4b11      	ldr	r3, [pc, #68]	; (bd248 <module_user_init_hook+0x58>)
   bd204:	bf0c      	ite	eq
   bd206:	2201      	moveq	r2, #1
   bd208:	2200      	movne	r2, #0
   bd20a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd20c:	d001      	beq.n	bd212 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd20e:	f7ff ffb1 	bl	bd174 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd212:	f7fc f817 	bl	b9244 <HAL_RNG_GetRandomNumber>
   bd216:	4604      	mov	r4, r0
    srand(seed);
   bd218:	f001 f828 	bl	be26c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd21c:	4b0b      	ldr	r3, [pc, #44]	; (bd24c <module_user_init_hook+0x5c>)
   bd21e:	b113      	cbz	r3, bd226 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd220:	4620      	mov	r0, r4
   bd222:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd226:	2100      	movs	r1, #0
   bd228:	4808      	ldr	r0, [pc, #32]	; (bd24c <module_user_init_hook+0x5c>)
   bd22a:	f7fc fa37 	bl	b969c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd232:	4807      	ldr	r0, [pc, #28]	; (bd250 <module_user_init_hook+0x60>)
   bd234:	2100      	movs	r1, #0
   bd236:	f7fc b9f5 	b.w	b9624 <system_ctrl_set_app_request_handler>
   bd23a:	bf00      	nop
   bd23c:	000bd11d 	.word	0x000bd11d
   bd240:	2003f400 	.word	0x2003f400
   bd244:	9a271c1e 	.word	0x9a271c1e
   bd248:	2003e720 	.word	0x2003e720
   bd24c:	00000000 	.word	0x00000000
   bd250:	000bd1b9 	.word	0x000bd1b9

000bd254 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd254:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bd256:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd258:	d902      	bls.n	bd260 <pinAvailable+0xc>
    return false;
   bd25a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bd25c:	b002      	add	sp, #8
   bd25e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bd260:	f1a0 030b 	sub.w	r3, r0, #11
   bd264:	2b02      	cmp	r3, #2
   bd266:	d81a      	bhi.n	bd29e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bd268:	4c17      	ldr	r4, [pc, #92]	; (bd2c8 <pinAvailable+0x74>)
   bd26a:	7821      	ldrb	r1, [r4, #0]
   bd26c:	f3bf 8f5b 	dmb	ish
   bd270:	f011 0101 	ands.w	r1, r1, #1
   bd274:	d10b      	bne.n	bd28e <pinAvailable+0x3a>
   bd276:	4620      	mov	r0, r4
   bd278:	9101      	str	r1, [sp, #4]
   bd27a:	f7f6 ff1f 	bl	b40bc <__cxa_guard_acquire>
   bd27e:	9901      	ldr	r1, [sp, #4]
   bd280:	b128      	cbz	r0, bd28e <pinAvailable+0x3a>
   bd282:	4812      	ldr	r0, [pc, #72]	; (bd2cc <pinAvailable+0x78>)
   bd284:	f7ff fba0 	bl	bc9c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bd288:	4620      	mov	r0, r4
   bd28a:	f7f6 ff1c 	bl	b40c6 <__cxa_guard_release>
   bd28e:	4b0f      	ldr	r3, [pc, #60]	; (bd2cc <pinAvailable+0x78>)
   bd290:	7818      	ldrb	r0, [r3, #0]
   bd292:	f7fc f8cf 	bl	b9434 <hal_spi_is_enabled>
   bd296:	2800      	cmp	r0, #0
   bd298:	d1df      	bne.n	bd25a <pinAvailable+0x6>
  return true; // 'pin' is available
   bd29a:	2001      	movs	r0, #1
   bd29c:	e7de      	b.n	bd25c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bd29e:	2801      	cmp	r0, #1
   bd2a0:	d809      	bhi.n	bd2b6 <pinAvailable+0x62>
   bd2a2:	f000 f881 	bl	bd3a8 <_Z19__fetch_global_Wirev>
   bd2a6:	2100      	movs	r1, #0
   bd2a8:	7c00      	ldrb	r0, [r0, #16]
   bd2aa:	f7fc f883 	bl	b93b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bd2ae:	f080 0001 	eor.w	r0, r0, #1
   bd2b2:	b2c0      	uxtb	r0, r0
   bd2b4:	e7d2      	b.n	bd25c <pinAvailable+0x8>
   bd2b6:	3809      	subs	r0, #9
   bd2b8:	2801      	cmp	r0, #1
   bd2ba:	d8ee      	bhi.n	bd29a <pinAvailable+0x46>
   bd2bc:	f000 f8b4 	bl	bd428 <_Z22__fetch_global_Serial1v>
   bd2c0:	7c00      	ldrb	r0, [r0, #16]
   bd2c2:	f7fc f917 	bl	b94f4 <hal_usart_is_enabled>
   bd2c6:	e7f2      	b.n	bd2ae <pinAvailable+0x5a>
   bd2c8:	2003e648 	.word	0x2003e648
   bd2cc:	2003e64c 	.word	0x2003e64c

000bd2d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd2d0:	2825      	cmp	r0, #37	; 0x25
{
   bd2d2:	b538      	push	{r3, r4, r5, lr}
   bd2d4:	4604      	mov	r4, r0
   bd2d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd2d8:	d80a      	bhi.n	bd2f0 <pinMode+0x20>
   bd2da:	29ff      	cmp	r1, #255	; 0xff
   bd2dc:	d008      	beq.n	bd2f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bd2de:	f7ff ffb9 	bl	bd254 <pinAvailable>
   bd2e2:	b128      	cbz	r0, bd2f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bd2e4:	4629      	mov	r1, r5
   bd2e6:	4620      	mov	r0, r4
}
   bd2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bd2ec:	f7fb bfe2 	b.w	b92b4 <HAL_Pin_Mode>
}
   bd2f0:	bd38      	pop	{r3, r4, r5, pc}

000bd2f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bd2f2:	b538      	push	{r3, r4, r5, lr}
   bd2f4:	4604      	mov	r4, r0
   bd2f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd2f8:	f7fb ffe4 	bl	b92c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bd2fc:	28ff      	cmp	r0, #255	; 0xff
   bd2fe:	d010      	beq.n	bd322 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bd300:	2806      	cmp	r0, #6
   bd302:	d804      	bhi.n	bd30e <digitalWrite+0x1c>
   bd304:	234d      	movs	r3, #77	; 0x4d
   bd306:	fa23 f000 	lsr.w	r0, r3, r0
   bd30a:	07c3      	lsls	r3, r0, #31
   bd30c:	d409      	bmi.n	bd322 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bd30e:	4620      	mov	r0, r4
   bd310:	f7ff ffa0 	bl	bd254 <pinAvailable>
   bd314:	b128      	cbz	r0, bd322 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bd316:	4629      	mov	r1, r5
   bd318:	4620      	mov	r0, r4
}
   bd31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bd31e:	f7fb bfd9 	b.w	b92d4 <HAL_GPIO_Write>
}
   bd322:	bd38      	pop	{r3, r4, r5, pc}

000bd324 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bd324:	b510      	push	{r4, lr}
   bd326:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd328:	f7fb ffcc 	bl	b92c4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bd32c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bd32e:	b2db      	uxtb	r3, r3
   bd330:	2b01      	cmp	r3, #1
   bd332:	d908      	bls.n	bd346 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bd334:	4620      	mov	r0, r4
   bd336:	f7ff ff8d 	bl	bd254 <pinAvailable>
   bd33a:	b120      	cbz	r0, bd346 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bd33c:	4620      	mov	r0, r4
}
   bd33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bd342:	f7fb bfcf 	b.w	b92e4 <HAL_GPIO_Read>
}
   bd346:	2000      	movs	r0, #0
   bd348:	bd10      	pop	{r4, pc}

000bd34a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bd34a:	280d      	cmp	r0, #13
{
   bd34c:	b510      	push	{r4, lr}
   bd34e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bd350:	bf9c      	itt	ls
   bd352:	340e      	addls	r4, #14
   bd354:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bd356:	4620      	mov	r0, r4
   bd358:	f7ff ff7c 	bl	bd254 <pinAvailable>
   bd35c:	b150      	cbz	r0, bd374 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bd35e:	2103      	movs	r1, #3
   bd360:	4620      	mov	r0, r4
   bd362:	f7fb ff9f 	bl	b92a4 <HAL_Validate_Pin_Function>
   bd366:	2803      	cmp	r0, #3
   bd368:	d104      	bne.n	bd374 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bd36a:	4620      	mov	r0, r4
}
   bd36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bd370:	f7fb bfd0 	b.w	b9314 <hal_adc_read>
}
   bd374:	2000      	movs	r0, #0
   bd376:	bd10      	pop	{r4, pc}

000bd378 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd378:	4770      	bx	lr
	...

000bd37c <_Z17acquireWireBufferv>:
{
   bd37c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd37e:	2520      	movs	r5, #32
   bd380:	2314      	movs	r3, #20
{
   bd382:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd384:	6003      	str	r3, [r0, #0]
   bd386:	6085      	str	r5, [r0, #8]
   bd388:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd38a:	4906      	ldr	r1, [pc, #24]	; (bd3a4 <_Z17acquireWireBufferv+0x28>)
   bd38c:	4628      	mov	r0, r5
   bd38e:	f000 f86f 	bl	bd470 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd392:	4904      	ldr	r1, [pc, #16]	; (bd3a4 <_Z17acquireWireBufferv+0x28>)
	};
   bd394:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd396:	4628      	mov	r0, r5
   bd398:	f000 f86a 	bl	bd470 <_ZnajRKSt9nothrow_t>
	};
   bd39c:	60e0      	str	r0, [r4, #12]
}
   bd39e:	4620      	mov	r0, r4
   bd3a0:	bd38      	pop	{r3, r4, r5, pc}
   bd3a2:	bf00      	nop
   bd3a4:	000c1aa8 	.word	0x000c1aa8

000bd3a8 <_Z19__fetch_global_Wirev>:
{
   bd3a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd3aa:	4d0e      	ldr	r5, [pc, #56]	; (bd3e4 <_Z19__fetch_global_Wirev+0x3c>)
   bd3ac:	7829      	ldrb	r1, [r5, #0]
   bd3ae:	f3bf 8f5b 	dmb	ish
   bd3b2:	f011 0401 	ands.w	r4, r1, #1
{
   bd3b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd3b8:	d111      	bne.n	bd3de <_Z19__fetch_global_Wirev+0x36>
   bd3ba:	4628      	mov	r0, r5
   bd3bc:	f7f6 fe7e 	bl	b40bc <__cxa_guard_acquire>
   bd3c0:	b168      	cbz	r0, bd3de <_Z19__fetch_global_Wirev+0x36>
   bd3c2:	a801      	add	r0, sp, #4
   bd3c4:	f7ff ffda 	bl	bd37c <_Z17acquireWireBufferv>
   bd3c8:	aa01      	add	r2, sp, #4
   bd3ca:	4621      	mov	r1, r4
   bd3cc:	4806      	ldr	r0, [pc, #24]	; (bd3e8 <_Z19__fetch_global_Wirev+0x40>)
   bd3ce:	f7ff f8d9 	bl	bc584 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd3d2:	4628      	mov	r0, r5
   bd3d4:	f7f6 fe77 	bl	b40c6 <__cxa_guard_release>
   bd3d8:	4804      	ldr	r0, [pc, #16]	; (bd3ec <_Z19__fetch_global_Wirev+0x44>)
   bd3da:	f000 fef9 	bl	be1d0 <atexit>
	return wire;
}
   bd3de:	4802      	ldr	r0, [pc, #8]	; (bd3e8 <_Z19__fetch_global_Wirev+0x40>)
   bd3e0:	b007      	add	sp, #28
   bd3e2:	bd30      	pop	{r4, r5, pc}
   bd3e4:	2003e72c 	.word	0x2003e72c
   bd3e8:	2003e730 	.word	0x2003e730
   bd3ec:	000bd379 	.word	0x000bd379

000bd3f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd3f0:	4770      	bx	lr
	...

000bd3f4 <_Z20acquireSerial1Bufferv>:
{
   bd3f4:	b538      	push	{r3, r4, r5, lr}
   bd3f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bd3f8:	2514      	movs	r5, #20
   bd3fa:	462a      	mov	r2, r5
   bd3fc:	2100      	movs	r1, #0
   bd3fe:	f000 ff2c 	bl	be25a <memset>
   bd402:	8025      	strh	r5, [r4, #0]
   bd404:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd406:	4907      	ldr	r1, [pc, #28]	; (bd424 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bd408:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd40a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bd40c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd40e:	f000 f82f 	bl	bd470 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd412:	4904      	ldr	r1, [pc, #16]	; (bd424 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bd414:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd416:	4628      	mov	r0, r5
   bd418:	f000 f82a 	bl	bd470 <_ZnajRKSt9nothrow_t>
    };
   bd41c:	60e0      	str	r0, [r4, #12]
}
   bd41e:	4620      	mov	r0, r4
   bd420:	bd38      	pop	{r3, r4, r5, pc}
   bd422:	bf00      	nop
   bd424:	000c1aa8 	.word	0x000c1aa8

000bd428 <_Z22__fetch_global_Serial1v>:
{
   bd428:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd42a:	4d0e      	ldr	r5, [pc, #56]	; (bd464 <_Z22__fetch_global_Serial1v+0x3c>)
   bd42c:	7829      	ldrb	r1, [r5, #0]
   bd42e:	f3bf 8f5b 	dmb	ish
   bd432:	f011 0401 	ands.w	r4, r1, #1
{
   bd436:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd438:	d111      	bne.n	bd45e <_Z22__fetch_global_Serial1v+0x36>
   bd43a:	4628      	mov	r0, r5
   bd43c:	f7f6 fe3e 	bl	b40bc <__cxa_guard_acquire>
   bd440:	b168      	cbz	r0, bd45e <_Z22__fetch_global_Serial1v+0x36>
   bd442:	a801      	add	r0, sp, #4
   bd444:	f7ff ffd6 	bl	bd3f4 <_Z20acquireSerial1Bufferv>
   bd448:	aa01      	add	r2, sp, #4
   bd44a:	4621      	mov	r1, r4
   bd44c:	4806      	ldr	r0, [pc, #24]	; (bd468 <_Z22__fetch_global_Serial1v+0x40>)
   bd44e:	f7ff fdc5 	bl	bcfdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd452:	4628      	mov	r0, r5
   bd454:	f7f6 fe37 	bl	b40c6 <__cxa_guard_release>
   bd458:	4804      	ldr	r0, [pc, #16]	; (bd46c <_Z22__fetch_global_Serial1v+0x44>)
   bd45a:	f000 feb9 	bl	be1d0 <atexit>
    return serial1;
}
   bd45e:	4802      	ldr	r0, [pc, #8]	; (bd468 <_Z22__fetch_global_Serial1v+0x40>)
   bd460:	b007      	add	sp, #28
   bd462:	bd30      	pop	{r4, r5, pc}
   bd464:	2003e744 	.word	0x2003e744
   bd468:	2003e748 	.word	0x2003e748
   bd46c:	000bd3f1 	.word	0x000bd3f1

000bd470 <_ZnajRKSt9nothrow_t>:
   bd470:	f7f6 be13 	b.w	b409a <_Znaj>

000bd474 <_ZSt19__throw_logic_errorPKc>:
   bd474:	b508      	push	{r3, lr}
   bd476:	f7fc f9b1 	bl	b97dc <abort>

000bd47a <_ZSt20__throw_length_errorPKc>:
   bd47a:	b508      	push	{r3, lr}
   bd47c:	f7fc f9ae 	bl	b97dc <abort>

000bd480 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bd480:	b40f      	push	{r0, r1, r2, r3}
   bd482:	b580      	push	{r7, lr}
   bd484:	b084      	sub	sp, #16
   bd486:	af00      	add	r7, sp, #0
   bd488:	f107 0418 	add.w	r4, r7, #24
   bd48c:	f854 2b04 	ldr.w	r2, [r4], #4
   bd490:	607a      	str	r2, [r7, #4]
   bd492:	4610      	mov	r0, r2
   bd494:	f000 ff95 	bl	be3c2 <strlen>
   bd498:	f200 2307 	addw	r3, r0, #519	; 0x207
   bd49c:	f023 0307 	bic.w	r3, r3, #7
   bd4a0:	ebad 0d03 	sub.w	sp, sp, r3
   bd4a4:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bd4a8:	687a      	ldr	r2, [r7, #4]
   bd4aa:	60fc      	str	r4, [r7, #12]
   bd4ac:	4623      	mov	r3, r4
   bd4ae:	4668      	mov	r0, sp
   bd4b0:	f000 f85e 	bl	bd570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bd4b4:	f7fc f992 	bl	b97dc <abort>

000bd4b8 <_ZSt25__throw_bad_function_callv>:
   bd4b8:	b508      	push	{r3, lr}
   bd4ba:	f7fc f98f 	bl	b97dc <abort>
	...

000bd4c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bd4c0:	4901      	ldr	r1, [pc, #4]	; (bd4c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bd4c2:	f000 b98b 	b.w	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd4c6:	bf00      	nop
   bd4c8:	000c1ac4 	.word	0x000c1ac4

000bd4cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bd4cc:	b580      	push	{r7, lr}
   bd4ce:	b09c      	sub	sp, #112	; 0x70
   bd4d0:	4606      	mov	r6, r0
   bd4d2:	af00      	add	r7, sp, #0
   bd4d4:	460c      	mov	r4, r1
   bd4d6:	1ba4      	subs	r4, r4, r6
   bd4d8:	490e      	ldr	r1, [pc, #56]	; (bd514 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bd4da:	2269      	movs	r2, #105	; 0x69
   bd4dc:	1d38      	adds	r0, r7, #4
   bd4de:	f000 fe94 	bl	be20a <memcpy>
   bd4e2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bd4e6:	f023 0307 	bic.w	r3, r3, #7
   bd4ea:	ebad 0d03 	sub.w	sp, sp, r3
   bd4ee:	466d      	mov	r5, sp
   bd4f0:	2268      	movs	r2, #104	; 0x68
   bd4f2:	1d39      	adds	r1, r7, #4
   bd4f4:	4628      	mov	r0, r5
   bd4f6:	f000 fe88 	bl	be20a <memcpy>
   bd4fa:	4622      	mov	r2, r4
   bd4fc:	4631      	mov	r1, r6
   bd4fe:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bd502:	442c      	add	r4, r5
   bd504:	f000 fe81 	bl	be20a <memcpy>
   bd508:	2300      	movs	r3, #0
   bd50a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bd50e:	4628      	mov	r0, r5
   bd510:	f7ff ffb0 	bl	bd474 <_ZSt19__throw_logic_errorPKc>
   bd514:	000c1acc 	.word	0x000c1acc

000bd518 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bd518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd51c:	af00      	add	r7, sp, #0
   bd51e:	b084      	sub	sp, #16
   bd520:	466d      	mov	r5, sp
   bd522:	f105 040c 	add.w	r4, r5, #12
   bd526:	f8df 8044 	ldr.w	r8, [pc, #68]	; bd56c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bd52a:	4623      	mov	r3, r4
   bd52c:	f04f 0c0a 	mov.w	ip, #10
   bd530:	fbb2 f6fc 	udiv	r6, r2, ip
   bd534:	fb0c 2e16 	mls	lr, ip, r6, r2
   bd538:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bd53c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bd540:	4696      	mov	lr, r2
   bd542:	f1be 0f09 	cmp.w	lr, #9
   bd546:	4632      	mov	r2, r6
   bd548:	d8f2      	bhi.n	bd530 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bd54a:	1ae4      	subs	r4, r4, r3
   bd54c:	428c      	cmp	r4, r1
   bd54e:	d809      	bhi.n	bd564 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bd550:	f1c4 030c 	rsb	r3, r4, #12
   bd554:	4622      	mov	r2, r4
   bd556:	18e9      	adds	r1, r5, r3
   bd558:	f000 fe57 	bl	be20a <memcpy>
   bd55c:	4620      	mov	r0, r4
   bd55e:	46bd      	mov	sp, r7
   bd560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd564:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bd568:	e7f8      	b.n	bd55c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bd56a:	bf00      	nop
   bd56c:	000c1b35 	.word	0x000c1b35

000bd570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bd570:	3901      	subs	r1, #1
   bd572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd576:	4607      	mov	r7, r0
   bd578:	4615      	mov	r5, r2
   bd57a:	eb00 0801 	add.w	r8, r0, r1
   bd57e:	4604      	mov	r4, r0
   bd580:	782a      	ldrb	r2, [r5, #0]
   bd582:	b392      	cbz	r2, bd5ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bd584:	4544      	cmp	r4, r8
   bd586:	d22a      	bcs.n	bd5de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd588:	2a25      	cmp	r2, #37	; 0x25
   bd58a:	d107      	bne.n	bd59c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd58c:	786a      	ldrb	r2, [r5, #1]
   bd58e:	2a73      	cmp	r2, #115	; 0x73
   bd590:	d009      	beq.n	bd5a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bd592:	2a7a      	cmp	r2, #122	; 0x7a
   bd594:	d012      	beq.n	bd5bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bd596:	2a25      	cmp	r2, #37	; 0x25
   bd598:	d100      	bne.n	bd59c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd59a:	3501      	adds	r5, #1
   bd59c:	f815 2b01 	ldrb.w	r2, [r5], #1
   bd5a0:	f804 2b01 	strb.w	r2, [r4], #1
   bd5a4:	e7ec      	b.n	bd580 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd5a6:	f853 2b04 	ldr.w	r2, [r3], #4
   bd5aa:	3a01      	subs	r2, #1
   bd5ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bd5b0:	b1c9      	cbz	r1, bd5e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bd5b2:	4544      	cmp	r4, r8
   bd5b4:	d013      	beq.n	bd5de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd5b6:	f804 1b01 	strb.w	r1, [r4], #1
   bd5ba:	e7f7      	b.n	bd5ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bd5bc:	78aa      	ldrb	r2, [r5, #2]
   bd5be:	2a75      	cmp	r2, #117	; 0x75
   bd5c0:	d1ec      	bne.n	bd59c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd5c2:	461e      	mov	r6, r3
   bd5c4:	eba8 0104 	sub.w	r1, r8, r4
   bd5c8:	f856 2b04 	ldr.w	r2, [r6], #4
   bd5cc:	4620      	mov	r0, r4
   bd5ce:	f7ff ffa3 	bl	bd518 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bd5d2:	2800      	cmp	r0, #0
   bd5d4:	dd03      	ble.n	bd5de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd5d6:	4404      	add	r4, r0
   bd5d8:	3503      	adds	r5, #3
   bd5da:	4633      	mov	r3, r6
   bd5dc:	e7d0      	b.n	bd580 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd5de:	4621      	mov	r1, r4
   bd5e0:	4638      	mov	r0, r7
   bd5e2:	f7ff ff73 	bl	bd4cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bd5e6:	3502      	adds	r5, #2
   bd5e8:	e7ca      	b.n	bd580 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd5ea:	7022      	strb	r2, [r4, #0]
   bd5ec:	1be0      	subs	r0, r4, r7
   bd5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd5f2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bd5f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bd5f4:	2400      	movs	r4, #0
   bd5f6:	2310      	movs	r3, #16
   bd5f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bd5fc:	6803      	ldr	r3, [r0, #0]
   bd5fe:	4615      	mov	r5, r2
   bd600:	699e      	ldr	r6, [r3, #24]
   bd602:	6812      	ldr	r2, [r2, #0]
   bd604:	466b      	mov	r3, sp
   bd606:	e9cd 4400 	strd	r4, r4, [sp]
   bd60a:	47b0      	blx	r6
   bd60c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bd610:	f003 0306 	and.w	r3, r3, #6
   bd614:	2b06      	cmp	r3, #6
   bd616:	bf03      	ittte	eq
   bd618:	9b00      	ldreq	r3, [sp, #0]
   bd61a:	602b      	streq	r3, [r5, #0]
   bd61c:	2001      	moveq	r0, #1
   bd61e:	4620      	movne	r0, r4
   bd620:	b004      	add	sp, #16
   bd622:	bd70      	pop	{r4, r5, r6, pc}

000bd624 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bd624:	9800      	ldr	r0, [sp, #0]
   bd626:	4290      	cmp	r0, r2
   bd628:	bf14      	ite	ne
   bd62a:	2001      	movne	r0, #1
   bd62c:	2006      	moveq	r0, #6
   bd62e:	4770      	bx	lr

000bd630 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bd630:	b510      	push	{r4, lr}
   bd632:	4b03      	ldr	r3, [pc, #12]	; (bd640 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bd634:	6003      	str	r3, [r0, #0]
   bd636:	4604      	mov	r4, r0
   bd638:	f000 f8cd 	bl	bd7d6 <_ZNSt9type_infoD1Ev>
   bd63c:	4620      	mov	r0, r4
   bd63e:	bd10      	pop	{r4, pc}
   bd640:	000c1b78 	.word	0x000c1b78

000bd644 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bd644:	b510      	push	{r4, lr}
   bd646:	4604      	mov	r4, r0
   bd648:	f7ff fff2 	bl	bd630 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd64c:	4620      	mov	r0, r4
   bd64e:	2108      	movs	r1, #8
   bd650:	f7f6 fd25 	bl	b409e <_ZdlPvj>
   bd654:	4620      	mov	r0, r4
   bd656:	bd10      	pop	{r4, pc}

000bd658 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bd658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd65c:	461f      	mov	r7, r3
   bd65e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bd662:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bd666:	4598      	cmp	r8, r3
   bd668:	4606      	mov	r6, r0
   bd66a:	4615      	mov	r5, r2
   bd66c:	d107      	bne.n	bd67e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd66e:	9907      	ldr	r1, [sp, #28]
   bd670:	f000 f8b4 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd674:	b118      	cbz	r0, bd67e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd676:	7165      	strb	r5, [r4, #5]
   bd678:	2000      	movs	r0, #0
   bd67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd67e:	4639      	mov	r1, r7
   bd680:	4630      	mov	r0, r6
   bd682:	f000 f8ab 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd686:	2800      	cmp	r0, #0
   bd688:	d0f6      	beq.n	bd678 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bd68a:	2301      	movs	r3, #1
   bd68c:	f8c4 8000 	str.w	r8, [r4]
   bd690:	7125      	strb	r5, [r4, #4]
   bd692:	71a3      	strb	r3, [r4, #6]
   bd694:	e7f0      	b.n	bd678 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bd696 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bd696:	b538      	push	{r3, r4, r5, lr}
   bd698:	4615      	mov	r5, r2
   bd69a:	461c      	mov	r4, r3
   bd69c:	f000 f89e 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd6a0:	b120      	cbz	r0, bd6ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bd6a2:	2308      	movs	r3, #8
   bd6a4:	60e3      	str	r3, [r4, #12]
   bd6a6:	2306      	movs	r3, #6
   bd6a8:	6025      	str	r5, [r4, #0]
   bd6aa:	7123      	strb	r3, [r4, #4]
   bd6ac:	bd38      	pop	{r3, r4, r5, pc}

000bd6ae <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bd6ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd6b0:	4605      	mov	r5, r0
   bd6b2:	460c      	mov	r4, r1
   bd6b4:	9201      	str	r2, [sp, #4]
   bd6b6:	461e      	mov	r6, r3
   bd6b8:	f000 f890 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd6bc:	b950      	cbnz	r0, bd6d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd6be:	2e03      	cmp	r6, #3
   bd6c0:	d808      	bhi.n	bd6d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd6c2:	6823      	ldr	r3, [r4, #0]
   bd6c4:	9a01      	ldr	r2, [sp, #4]
   bd6c6:	695b      	ldr	r3, [r3, #20]
   bd6c8:	4629      	mov	r1, r5
   bd6ca:	4620      	mov	r0, r4
   bd6cc:	b002      	add	sp, #8
   bd6ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd6d2:	4718      	bx	r3
   bd6d4:	b002      	add	sp, #8
   bd6d6:	bd70      	pop	{r4, r5, r6, pc}

000bd6d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bd6d8:	b510      	push	{r4, lr}
   bd6da:	4b03      	ldr	r3, [pc, #12]	; (bd6e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bd6dc:	6003      	str	r3, [r0, #0]
   bd6de:	4604      	mov	r4, r0
   bd6e0:	f7ff ffa6 	bl	bd630 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd6e4:	4620      	mov	r0, r4
   bd6e6:	bd10      	pop	{r4, pc}
   bd6e8:	000c1bd8 	.word	0x000c1bd8

000bd6ec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bd6ec:	b510      	push	{r4, lr}
   bd6ee:	4604      	mov	r4, r0
   bd6f0:	f7ff fff2 	bl	bd6d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bd6f4:	4620      	mov	r0, r4
   bd6f6:	210c      	movs	r1, #12
   bd6f8:	f7f6 fcd1 	bl	b409e <_ZdlPvj>
   bd6fc:	4620      	mov	r0, r4
   bd6fe:	bd10      	pop	{r4, pc}

000bd700 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bd700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bd702:	9f08      	ldr	r7, [sp, #32]
   bd704:	4297      	cmp	r7, r2
   bd706:	4605      	mov	r5, r0
   bd708:	460e      	mov	r6, r1
   bd70a:	4614      	mov	r4, r2
   bd70c:	d00a      	beq.n	bd724 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bd70e:	68a8      	ldr	r0, [r5, #8]
   bd710:	6802      	ldr	r2, [r0, #0]
   bd712:	9708      	str	r7, [sp, #32]
   bd714:	6a15      	ldr	r5, [r2, #32]
   bd716:	4631      	mov	r1, r6
   bd718:	4622      	mov	r2, r4
   bd71a:	46ac      	mov	ip, r5
   bd71c:	b003      	add	sp, #12
   bd71e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd722:	4760      	bx	ip
   bd724:	4619      	mov	r1, r3
   bd726:	9301      	str	r3, [sp, #4]
   bd728:	f000 f858 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd72c:	9b01      	ldr	r3, [sp, #4]
   bd72e:	2800      	cmp	r0, #0
   bd730:	d0ed      	beq.n	bd70e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bd732:	2006      	movs	r0, #6
   bd734:	b003      	add	sp, #12
   bd736:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd738 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bd738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd73c:	460d      	mov	r5, r1
   bd73e:	4619      	mov	r1, r3
   bd740:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bd744:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bd748:	4681      	mov	r9, r0
   bd74a:	4617      	mov	r7, r2
   bd74c:	4698      	mov	r8, r3
   bd74e:	f000 f845 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd752:	b190      	cbz	r0, bd77a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bd754:	2d00      	cmp	r5, #0
   bd756:	6034      	str	r4, [r6, #0]
   bd758:	7137      	strb	r7, [r6, #4]
   bd75a:	db09      	blt.n	bd770 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bd75c:	1961      	adds	r1, r4, r5
   bd75e:	458a      	cmp	sl, r1
   bd760:	bf0c      	ite	eq
   bd762:	2106      	moveq	r1, #6
   bd764:	2101      	movne	r1, #1
   bd766:	71b1      	strb	r1, [r6, #6]
   bd768:	2000      	movs	r0, #0
   bd76a:	b001      	add	sp, #4
   bd76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd770:	3502      	adds	r5, #2
   bd772:	d1f9      	bne.n	bd768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd774:	2301      	movs	r3, #1
   bd776:	71b3      	strb	r3, [r6, #6]
   bd778:	e7f6      	b.n	bd768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd77a:	4554      	cmp	r4, sl
   bd77c:	d106      	bne.n	bd78c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd77e:	4659      	mov	r1, fp
   bd780:	4648      	mov	r0, r9
   bd782:	f000 f82b 	bl	bd7dc <_ZNKSt9type_infoeqERKS_>
   bd786:	b108      	cbz	r0, bd78c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd788:	7177      	strb	r7, [r6, #5]
   bd78a:	e7ed      	b.n	bd768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd78c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bd790:	6803      	ldr	r3, [r0, #0]
   bd792:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bd796:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bd79a:	69dc      	ldr	r4, [r3, #28]
   bd79c:	463a      	mov	r2, r7
   bd79e:	4643      	mov	r3, r8
   bd7a0:	4629      	mov	r1, r5
   bd7a2:	46a4      	mov	ip, r4
   bd7a4:	b001      	add	sp, #4
   bd7a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd7aa:	4760      	bx	ip

000bd7ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bd7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd7b0:	4607      	mov	r7, r0
   bd7b2:	460c      	mov	r4, r1
   bd7b4:	4615      	mov	r5, r2
   bd7b6:	461e      	mov	r6, r3
   bd7b8:	f7ff ff6d 	bl	bd696 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bd7bc:	b948      	cbnz	r0, bd7d2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bd7be:	68b8      	ldr	r0, [r7, #8]
   bd7c0:	6803      	ldr	r3, [r0, #0]
   bd7c2:	699f      	ldr	r7, [r3, #24]
   bd7c4:	462a      	mov	r2, r5
   bd7c6:	4633      	mov	r3, r6
   bd7c8:	4621      	mov	r1, r4
   bd7ca:	46bc      	mov	ip, r7
   bd7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd7d0:	4760      	bx	ip
   bd7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd7d6 <_ZNSt9type_infoD1Ev>:
   bd7d6:	4770      	bx	lr

000bd7d8 <_ZNKSt9type_info14__is_pointer_pEv>:
   bd7d8:	2000      	movs	r0, #0
   bd7da:	4770      	bx	lr

000bd7dc <_ZNKSt9type_infoeqERKS_>:
   bd7dc:	4281      	cmp	r1, r0
   bd7de:	b508      	push	{r3, lr}
   bd7e0:	d00e      	beq.n	bd800 <_ZNKSt9type_infoeqERKS_+0x24>
   bd7e2:	6840      	ldr	r0, [r0, #4]
   bd7e4:	7803      	ldrb	r3, [r0, #0]
   bd7e6:	2b2a      	cmp	r3, #42	; 0x2a
   bd7e8:	d00c      	beq.n	bd804 <_ZNKSt9type_infoeqERKS_+0x28>
   bd7ea:	6849      	ldr	r1, [r1, #4]
   bd7ec:	780b      	ldrb	r3, [r1, #0]
   bd7ee:	2b2a      	cmp	r3, #42	; 0x2a
   bd7f0:	bf08      	it	eq
   bd7f2:	3101      	addeq	r1, #1
   bd7f4:	f000 fdb5 	bl	be362 <strcmp>
   bd7f8:	fab0 f080 	clz	r0, r0
   bd7fc:	0940      	lsrs	r0, r0, #5
   bd7fe:	bd08      	pop	{r3, pc}
   bd800:	2001      	movs	r0, #1
   bd802:	e7fc      	b.n	bd7fe <_ZNKSt9type_infoeqERKS_+0x22>
   bd804:	2000      	movs	r0, #0
   bd806:	e7fa      	b.n	bd7fe <_ZNKSt9type_infoeqERKS_+0x22>

000bd808 <__aeabi_drsub>:
   bd808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd80c:	e002      	b.n	bd814 <__adddf3>
   bd80e:	bf00      	nop

000bd810 <__aeabi_dsub>:
   bd810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd814 <__adddf3>:
   bd814:	b530      	push	{r4, r5, lr}
   bd816:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd81a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd81e:	ea94 0f05 	teq	r4, r5
   bd822:	bf08      	it	eq
   bd824:	ea90 0f02 	teqeq	r0, r2
   bd828:	bf1f      	itttt	ne
   bd82a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd82e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd832:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd836:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd83a:	f000 80e2 	beq.w	bda02 <__adddf3+0x1ee>
   bd83e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd842:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd846:	bfb8      	it	lt
   bd848:	426d      	neglt	r5, r5
   bd84a:	dd0c      	ble.n	bd866 <__adddf3+0x52>
   bd84c:	442c      	add	r4, r5
   bd84e:	ea80 0202 	eor.w	r2, r0, r2
   bd852:	ea81 0303 	eor.w	r3, r1, r3
   bd856:	ea82 0000 	eor.w	r0, r2, r0
   bd85a:	ea83 0101 	eor.w	r1, r3, r1
   bd85e:	ea80 0202 	eor.w	r2, r0, r2
   bd862:	ea81 0303 	eor.w	r3, r1, r3
   bd866:	2d36      	cmp	r5, #54	; 0x36
   bd868:	bf88      	it	hi
   bd86a:	bd30      	pophi	{r4, r5, pc}
   bd86c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd870:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd874:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd878:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd87c:	d002      	beq.n	bd884 <__adddf3+0x70>
   bd87e:	4240      	negs	r0, r0
   bd880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd884:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd888:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd88c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd890:	d002      	beq.n	bd898 <__adddf3+0x84>
   bd892:	4252      	negs	r2, r2
   bd894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd898:	ea94 0f05 	teq	r4, r5
   bd89c:	f000 80a7 	beq.w	bd9ee <__adddf3+0x1da>
   bd8a0:	f1a4 0401 	sub.w	r4, r4, #1
   bd8a4:	f1d5 0e20 	rsbs	lr, r5, #32
   bd8a8:	db0d      	blt.n	bd8c6 <__adddf3+0xb2>
   bd8aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd8ae:	fa22 f205 	lsr.w	r2, r2, r5
   bd8b2:	1880      	adds	r0, r0, r2
   bd8b4:	f141 0100 	adc.w	r1, r1, #0
   bd8b8:	fa03 f20e 	lsl.w	r2, r3, lr
   bd8bc:	1880      	adds	r0, r0, r2
   bd8be:	fa43 f305 	asr.w	r3, r3, r5
   bd8c2:	4159      	adcs	r1, r3
   bd8c4:	e00e      	b.n	bd8e4 <__adddf3+0xd0>
   bd8c6:	f1a5 0520 	sub.w	r5, r5, #32
   bd8ca:	f10e 0e20 	add.w	lr, lr, #32
   bd8ce:	2a01      	cmp	r2, #1
   bd8d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd8d4:	bf28      	it	cs
   bd8d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd8da:	fa43 f305 	asr.w	r3, r3, r5
   bd8de:	18c0      	adds	r0, r0, r3
   bd8e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd8e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd8e8:	d507      	bpl.n	bd8fa <__adddf3+0xe6>
   bd8ea:	f04f 0e00 	mov.w	lr, #0
   bd8ee:	f1dc 0c00 	rsbs	ip, ip, #0
   bd8f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd8f6:	eb6e 0101 	sbc.w	r1, lr, r1
   bd8fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd8fe:	d31b      	bcc.n	bd938 <__adddf3+0x124>
   bd900:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd904:	d30c      	bcc.n	bd920 <__adddf3+0x10c>
   bd906:	0849      	lsrs	r1, r1, #1
   bd908:	ea5f 0030 	movs.w	r0, r0, rrx
   bd90c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd910:	f104 0401 	add.w	r4, r4, #1
   bd914:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd918:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd91c:	f080 809a 	bcs.w	bda54 <__adddf3+0x240>
   bd920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd924:	bf08      	it	eq
   bd926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd92a:	f150 0000 	adcs.w	r0, r0, #0
   bd92e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd932:	ea41 0105 	orr.w	r1, r1, r5
   bd936:	bd30      	pop	{r4, r5, pc}
   bd938:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd93c:	4140      	adcs	r0, r0
   bd93e:	eb41 0101 	adc.w	r1, r1, r1
   bd942:	3c01      	subs	r4, #1
   bd944:	bf28      	it	cs
   bd946:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd94a:	d2e9      	bcs.n	bd920 <__adddf3+0x10c>
   bd94c:	f091 0f00 	teq	r1, #0
   bd950:	bf04      	itt	eq
   bd952:	4601      	moveq	r1, r0
   bd954:	2000      	moveq	r0, #0
   bd956:	fab1 f381 	clz	r3, r1
   bd95a:	bf08      	it	eq
   bd95c:	3320      	addeq	r3, #32
   bd95e:	f1a3 030b 	sub.w	r3, r3, #11
   bd962:	f1b3 0220 	subs.w	r2, r3, #32
   bd966:	da0c      	bge.n	bd982 <__adddf3+0x16e>
   bd968:	320c      	adds	r2, #12
   bd96a:	dd08      	ble.n	bd97e <__adddf3+0x16a>
   bd96c:	f102 0c14 	add.w	ip, r2, #20
   bd970:	f1c2 020c 	rsb	r2, r2, #12
   bd974:	fa01 f00c 	lsl.w	r0, r1, ip
   bd978:	fa21 f102 	lsr.w	r1, r1, r2
   bd97c:	e00c      	b.n	bd998 <__adddf3+0x184>
   bd97e:	f102 0214 	add.w	r2, r2, #20
   bd982:	bfd8      	it	le
   bd984:	f1c2 0c20 	rsble	ip, r2, #32
   bd988:	fa01 f102 	lsl.w	r1, r1, r2
   bd98c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd990:	bfdc      	itt	le
   bd992:	ea41 010c 	orrle.w	r1, r1, ip
   bd996:	4090      	lslle	r0, r2
   bd998:	1ae4      	subs	r4, r4, r3
   bd99a:	bfa2      	ittt	ge
   bd99c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd9a0:	4329      	orrge	r1, r5
   bd9a2:	bd30      	popge	{r4, r5, pc}
   bd9a4:	ea6f 0404 	mvn.w	r4, r4
   bd9a8:	3c1f      	subs	r4, #31
   bd9aa:	da1c      	bge.n	bd9e6 <__adddf3+0x1d2>
   bd9ac:	340c      	adds	r4, #12
   bd9ae:	dc0e      	bgt.n	bd9ce <__adddf3+0x1ba>
   bd9b0:	f104 0414 	add.w	r4, r4, #20
   bd9b4:	f1c4 0220 	rsb	r2, r4, #32
   bd9b8:	fa20 f004 	lsr.w	r0, r0, r4
   bd9bc:	fa01 f302 	lsl.w	r3, r1, r2
   bd9c0:	ea40 0003 	orr.w	r0, r0, r3
   bd9c4:	fa21 f304 	lsr.w	r3, r1, r4
   bd9c8:	ea45 0103 	orr.w	r1, r5, r3
   bd9cc:	bd30      	pop	{r4, r5, pc}
   bd9ce:	f1c4 040c 	rsb	r4, r4, #12
   bd9d2:	f1c4 0220 	rsb	r2, r4, #32
   bd9d6:	fa20 f002 	lsr.w	r0, r0, r2
   bd9da:	fa01 f304 	lsl.w	r3, r1, r4
   bd9de:	ea40 0003 	orr.w	r0, r0, r3
   bd9e2:	4629      	mov	r1, r5
   bd9e4:	bd30      	pop	{r4, r5, pc}
   bd9e6:	fa21 f004 	lsr.w	r0, r1, r4
   bd9ea:	4629      	mov	r1, r5
   bd9ec:	bd30      	pop	{r4, r5, pc}
   bd9ee:	f094 0f00 	teq	r4, #0
   bd9f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd9f6:	bf06      	itte	eq
   bd9f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd9fc:	3401      	addeq	r4, #1
   bd9fe:	3d01      	subne	r5, #1
   bda00:	e74e      	b.n	bd8a0 <__adddf3+0x8c>
   bda02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bda06:	bf18      	it	ne
   bda08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bda0c:	d029      	beq.n	bda62 <__adddf3+0x24e>
   bda0e:	ea94 0f05 	teq	r4, r5
   bda12:	bf08      	it	eq
   bda14:	ea90 0f02 	teqeq	r0, r2
   bda18:	d005      	beq.n	bda26 <__adddf3+0x212>
   bda1a:	ea54 0c00 	orrs.w	ip, r4, r0
   bda1e:	bf04      	itt	eq
   bda20:	4619      	moveq	r1, r3
   bda22:	4610      	moveq	r0, r2
   bda24:	bd30      	pop	{r4, r5, pc}
   bda26:	ea91 0f03 	teq	r1, r3
   bda2a:	bf1e      	ittt	ne
   bda2c:	2100      	movne	r1, #0
   bda2e:	2000      	movne	r0, #0
   bda30:	bd30      	popne	{r4, r5, pc}
   bda32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bda36:	d105      	bne.n	bda44 <__adddf3+0x230>
   bda38:	0040      	lsls	r0, r0, #1
   bda3a:	4149      	adcs	r1, r1
   bda3c:	bf28      	it	cs
   bda3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bda42:	bd30      	pop	{r4, r5, pc}
   bda44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bda48:	bf3c      	itt	cc
   bda4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bda4e:	bd30      	popcc	{r4, r5, pc}
   bda50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bda54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bda58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bda5c:	f04f 0000 	mov.w	r0, #0
   bda60:	bd30      	pop	{r4, r5, pc}
   bda62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bda66:	bf1a      	itte	ne
   bda68:	4619      	movne	r1, r3
   bda6a:	4610      	movne	r0, r2
   bda6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bda70:	bf1c      	itt	ne
   bda72:	460b      	movne	r3, r1
   bda74:	4602      	movne	r2, r0
   bda76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bda7a:	bf06      	itte	eq
   bda7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bda80:	ea91 0f03 	teqeq	r1, r3
   bda84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bda88:	bd30      	pop	{r4, r5, pc}
   bda8a:	bf00      	nop

000bda8c <__aeabi_ui2d>:
   bda8c:	f090 0f00 	teq	r0, #0
   bda90:	bf04      	itt	eq
   bda92:	2100      	moveq	r1, #0
   bda94:	4770      	bxeq	lr
   bda96:	b530      	push	{r4, r5, lr}
   bda98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bda9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdaa0:	f04f 0500 	mov.w	r5, #0
   bdaa4:	f04f 0100 	mov.w	r1, #0
   bdaa8:	e750      	b.n	bd94c <__adddf3+0x138>
   bdaaa:	bf00      	nop

000bdaac <__aeabi_i2d>:
   bdaac:	f090 0f00 	teq	r0, #0
   bdab0:	bf04      	itt	eq
   bdab2:	2100      	moveq	r1, #0
   bdab4:	4770      	bxeq	lr
   bdab6:	b530      	push	{r4, r5, lr}
   bdab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdabc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdac0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bdac4:	bf48      	it	mi
   bdac6:	4240      	negmi	r0, r0
   bdac8:	f04f 0100 	mov.w	r1, #0
   bdacc:	e73e      	b.n	bd94c <__adddf3+0x138>
   bdace:	bf00      	nop

000bdad0 <__aeabi_f2d>:
   bdad0:	0042      	lsls	r2, r0, #1
   bdad2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bdad6:	ea4f 0131 	mov.w	r1, r1, rrx
   bdada:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bdade:	bf1f      	itttt	ne
   bdae0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bdae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bdae8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bdaec:	4770      	bxne	lr
   bdaee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bdaf2:	bf08      	it	eq
   bdaf4:	4770      	bxeq	lr
   bdaf6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bdafa:	bf04      	itt	eq
   bdafc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bdb00:	4770      	bxeq	lr
   bdb02:	b530      	push	{r4, r5, lr}
   bdb04:	f44f 7460 	mov.w	r4, #896	; 0x380
   bdb08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bdb0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bdb10:	e71c      	b.n	bd94c <__adddf3+0x138>
   bdb12:	bf00      	nop

000bdb14 <__aeabi_ul2d>:
   bdb14:	ea50 0201 	orrs.w	r2, r0, r1
   bdb18:	bf08      	it	eq
   bdb1a:	4770      	bxeq	lr
   bdb1c:	b530      	push	{r4, r5, lr}
   bdb1e:	f04f 0500 	mov.w	r5, #0
   bdb22:	e00a      	b.n	bdb3a <__aeabi_l2d+0x16>

000bdb24 <__aeabi_l2d>:
   bdb24:	ea50 0201 	orrs.w	r2, r0, r1
   bdb28:	bf08      	it	eq
   bdb2a:	4770      	bxeq	lr
   bdb2c:	b530      	push	{r4, r5, lr}
   bdb2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bdb32:	d502      	bpl.n	bdb3a <__aeabi_l2d+0x16>
   bdb34:	4240      	negs	r0, r0
   bdb36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdb3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdb3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdb42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bdb46:	f43f aed8 	beq.w	bd8fa <__adddf3+0xe6>
   bdb4a:	f04f 0203 	mov.w	r2, #3
   bdb4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bdb52:	bf18      	it	ne
   bdb54:	3203      	addne	r2, #3
   bdb56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bdb5a:	bf18      	it	ne
   bdb5c:	3203      	addne	r2, #3
   bdb5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bdb62:	f1c2 0320 	rsb	r3, r2, #32
   bdb66:	fa00 fc03 	lsl.w	ip, r0, r3
   bdb6a:	fa20 f002 	lsr.w	r0, r0, r2
   bdb6e:	fa01 fe03 	lsl.w	lr, r1, r3
   bdb72:	ea40 000e 	orr.w	r0, r0, lr
   bdb76:	fa21 f102 	lsr.w	r1, r1, r2
   bdb7a:	4414      	add	r4, r2
   bdb7c:	e6bd      	b.n	bd8fa <__adddf3+0xe6>
   bdb7e:	bf00      	nop

000bdb80 <__aeabi_dmul>:
   bdb80:	b570      	push	{r4, r5, r6, lr}
   bdb82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdb86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bdb8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdb8e:	bf1d      	ittte	ne
   bdb90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdb94:	ea94 0f0c 	teqne	r4, ip
   bdb98:	ea95 0f0c 	teqne	r5, ip
   bdb9c:	f000 f8de 	bleq	bdd5c <__aeabi_dmul+0x1dc>
   bdba0:	442c      	add	r4, r5
   bdba2:	ea81 0603 	eor.w	r6, r1, r3
   bdba6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bdbaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bdbae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bdbb2:	bf18      	it	ne
   bdbb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bdbb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdbbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdbc0:	d038      	beq.n	bdc34 <__aeabi_dmul+0xb4>
   bdbc2:	fba0 ce02 	umull	ip, lr, r0, r2
   bdbc6:	f04f 0500 	mov.w	r5, #0
   bdbca:	fbe1 e502 	umlal	lr, r5, r1, r2
   bdbce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bdbd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   bdbd6:	f04f 0600 	mov.w	r6, #0
   bdbda:	fbe1 5603 	umlal	r5, r6, r1, r3
   bdbde:	f09c 0f00 	teq	ip, #0
   bdbe2:	bf18      	it	ne
   bdbe4:	f04e 0e01 	orrne.w	lr, lr, #1
   bdbe8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bdbec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bdbf0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bdbf4:	d204      	bcs.n	bdc00 <__aeabi_dmul+0x80>
   bdbf6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bdbfa:	416d      	adcs	r5, r5
   bdbfc:	eb46 0606 	adc.w	r6, r6, r6
   bdc00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bdc04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bdc08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bdc0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bdc10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bdc14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdc18:	bf88      	it	hi
   bdc1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bdc1e:	d81e      	bhi.n	bdc5e <__aeabi_dmul+0xde>
   bdc20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bdc24:	bf08      	it	eq
   bdc26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bdc2a:	f150 0000 	adcs.w	r0, r0, #0
   bdc2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdc32:	bd70      	pop	{r4, r5, r6, pc}
   bdc34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bdc38:	ea46 0101 	orr.w	r1, r6, r1
   bdc3c:	ea40 0002 	orr.w	r0, r0, r2
   bdc40:	ea81 0103 	eor.w	r1, r1, r3
   bdc44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bdc48:	bfc2      	ittt	gt
   bdc4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdc4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdc52:	bd70      	popgt	{r4, r5, r6, pc}
   bdc54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdc58:	f04f 0e00 	mov.w	lr, #0
   bdc5c:	3c01      	subs	r4, #1
   bdc5e:	f300 80ab 	bgt.w	bddb8 <__aeabi_dmul+0x238>
   bdc62:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bdc66:	bfde      	ittt	le
   bdc68:	2000      	movle	r0, #0
   bdc6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bdc6e:	bd70      	pople	{r4, r5, r6, pc}
   bdc70:	f1c4 0400 	rsb	r4, r4, #0
   bdc74:	3c20      	subs	r4, #32
   bdc76:	da35      	bge.n	bdce4 <__aeabi_dmul+0x164>
   bdc78:	340c      	adds	r4, #12
   bdc7a:	dc1b      	bgt.n	bdcb4 <__aeabi_dmul+0x134>
   bdc7c:	f104 0414 	add.w	r4, r4, #20
   bdc80:	f1c4 0520 	rsb	r5, r4, #32
   bdc84:	fa00 f305 	lsl.w	r3, r0, r5
   bdc88:	fa20 f004 	lsr.w	r0, r0, r4
   bdc8c:	fa01 f205 	lsl.w	r2, r1, r5
   bdc90:	ea40 0002 	orr.w	r0, r0, r2
   bdc94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bdc98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bdc9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bdca0:	fa21 f604 	lsr.w	r6, r1, r4
   bdca4:	eb42 0106 	adc.w	r1, r2, r6
   bdca8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdcac:	bf08      	it	eq
   bdcae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdcb2:	bd70      	pop	{r4, r5, r6, pc}
   bdcb4:	f1c4 040c 	rsb	r4, r4, #12
   bdcb8:	f1c4 0520 	rsb	r5, r4, #32
   bdcbc:	fa00 f304 	lsl.w	r3, r0, r4
   bdcc0:	fa20 f005 	lsr.w	r0, r0, r5
   bdcc4:	fa01 f204 	lsl.w	r2, r1, r4
   bdcc8:	ea40 0002 	orr.w	r0, r0, r2
   bdccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdcd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bdcd4:	f141 0100 	adc.w	r1, r1, #0
   bdcd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdcdc:	bf08      	it	eq
   bdcde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdce2:	bd70      	pop	{r4, r5, r6, pc}
   bdce4:	f1c4 0520 	rsb	r5, r4, #32
   bdce8:	fa00 f205 	lsl.w	r2, r0, r5
   bdcec:	ea4e 0e02 	orr.w	lr, lr, r2
   bdcf0:	fa20 f304 	lsr.w	r3, r0, r4
   bdcf4:	fa01 f205 	lsl.w	r2, r1, r5
   bdcf8:	ea43 0302 	orr.w	r3, r3, r2
   bdcfc:	fa21 f004 	lsr.w	r0, r1, r4
   bdd00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdd04:	fa21 f204 	lsr.w	r2, r1, r4
   bdd08:	ea20 0002 	bic.w	r0, r0, r2
   bdd0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bdd10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdd14:	bf08      	it	eq
   bdd16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdd1a:	bd70      	pop	{r4, r5, r6, pc}
   bdd1c:	f094 0f00 	teq	r4, #0
   bdd20:	d10f      	bne.n	bdd42 <__aeabi_dmul+0x1c2>
   bdd22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bdd26:	0040      	lsls	r0, r0, #1
   bdd28:	eb41 0101 	adc.w	r1, r1, r1
   bdd2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdd30:	bf08      	it	eq
   bdd32:	3c01      	subeq	r4, #1
   bdd34:	d0f7      	beq.n	bdd26 <__aeabi_dmul+0x1a6>
   bdd36:	ea41 0106 	orr.w	r1, r1, r6
   bdd3a:	f095 0f00 	teq	r5, #0
   bdd3e:	bf18      	it	ne
   bdd40:	4770      	bxne	lr
   bdd42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bdd46:	0052      	lsls	r2, r2, #1
   bdd48:	eb43 0303 	adc.w	r3, r3, r3
   bdd4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bdd50:	bf08      	it	eq
   bdd52:	3d01      	subeq	r5, #1
   bdd54:	d0f7      	beq.n	bdd46 <__aeabi_dmul+0x1c6>
   bdd56:	ea43 0306 	orr.w	r3, r3, r6
   bdd5a:	4770      	bx	lr
   bdd5c:	ea94 0f0c 	teq	r4, ip
   bdd60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdd64:	bf18      	it	ne
   bdd66:	ea95 0f0c 	teqne	r5, ip
   bdd6a:	d00c      	beq.n	bdd86 <__aeabi_dmul+0x206>
   bdd6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdd70:	bf18      	it	ne
   bdd72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdd76:	d1d1      	bne.n	bdd1c <__aeabi_dmul+0x19c>
   bdd78:	ea81 0103 	eor.w	r1, r1, r3
   bdd7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdd80:	f04f 0000 	mov.w	r0, #0
   bdd84:	bd70      	pop	{r4, r5, r6, pc}
   bdd86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdd8a:	bf06      	itte	eq
   bdd8c:	4610      	moveq	r0, r2
   bdd8e:	4619      	moveq	r1, r3
   bdd90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdd94:	d019      	beq.n	bddca <__aeabi_dmul+0x24a>
   bdd96:	ea94 0f0c 	teq	r4, ip
   bdd9a:	d102      	bne.n	bdda2 <__aeabi_dmul+0x222>
   bdd9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bdda0:	d113      	bne.n	bddca <__aeabi_dmul+0x24a>
   bdda2:	ea95 0f0c 	teq	r5, ip
   bdda6:	d105      	bne.n	bddb4 <__aeabi_dmul+0x234>
   bdda8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bddac:	bf1c      	itt	ne
   bddae:	4610      	movne	r0, r2
   bddb0:	4619      	movne	r1, r3
   bddb2:	d10a      	bne.n	bddca <__aeabi_dmul+0x24a>
   bddb4:	ea81 0103 	eor.w	r1, r1, r3
   bddb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bddbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bddc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bddc4:	f04f 0000 	mov.w	r0, #0
   bddc8:	bd70      	pop	{r4, r5, r6, pc}
   bddca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bddce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bddd2:	bd70      	pop	{r4, r5, r6, pc}

000bddd4 <__aeabi_ddiv>:
   bddd4:	b570      	push	{r4, r5, r6, lr}
   bddd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bddda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bddde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdde2:	bf1d      	ittte	ne
   bdde4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdde8:	ea94 0f0c 	teqne	r4, ip
   bddec:	ea95 0f0c 	teqne	r5, ip
   bddf0:	f000 f8a7 	bleq	bdf42 <__aeabi_ddiv+0x16e>
   bddf4:	eba4 0405 	sub.w	r4, r4, r5
   bddf8:	ea81 0e03 	eor.w	lr, r1, r3
   bddfc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bde00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bde04:	f000 8088 	beq.w	bdf18 <__aeabi_ddiv+0x144>
   bde08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bde0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bde10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bde14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bde18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bde1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bde20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bde24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bde28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bde2c:	429d      	cmp	r5, r3
   bde2e:	bf08      	it	eq
   bde30:	4296      	cmpeq	r6, r2
   bde32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bde36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bde3a:	d202      	bcs.n	bde42 <__aeabi_ddiv+0x6e>
   bde3c:	085b      	lsrs	r3, r3, #1
   bde3e:	ea4f 0232 	mov.w	r2, r2, rrx
   bde42:	1ab6      	subs	r6, r6, r2
   bde44:	eb65 0503 	sbc.w	r5, r5, r3
   bde48:	085b      	lsrs	r3, r3, #1
   bde4a:	ea4f 0232 	mov.w	r2, r2, rrx
   bde4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bde52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bde56:	ebb6 0e02 	subs.w	lr, r6, r2
   bde5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bde5e:	bf22      	ittt	cs
   bde60:	1ab6      	subcs	r6, r6, r2
   bde62:	4675      	movcs	r5, lr
   bde64:	ea40 000c 	orrcs.w	r0, r0, ip
   bde68:	085b      	lsrs	r3, r3, #1
   bde6a:	ea4f 0232 	mov.w	r2, r2, rrx
   bde6e:	ebb6 0e02 	subs.w	lr, r6, r2
   bde72:	eb75 0e03 	sbcs.w	lr, r5, r3
   bde76:	bf22      	ittt	cs
   bde78:	1ab6      	subcs	r6, r6, r2
   bde7a:	4675      	movcs	r5, lr
   bde7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bde80:	085b      	lsrs	r3, r3, #1
   bde82:	ea4f 0232 	mov.w	r2, r2, rrx
   bde86:	ebb6 0e02 	subs.w	lr, r6, r2
   bde8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bde8e:	bf22      	ittt	cs
   bde90:	1ab6      	subcs	r6, r6, r2
   bde92:	4675      	movcs	r5, lr
   bde94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bde98:	085b      	lsrs	r3, r3, #1
   bde9a:	ea4f 0232 	mov.w	r2, r2, rrx
   bde9e:	ebb6 0e02 	subs.w	lr, r6, r2
   bdea2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdea6:	bf22      	ittt	cs
   bdea8:	1ab6      	subcs	r6, r6, r2
   bdeaa:	4675      	movcs	r5, lr
   bdeac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bdeb0:	ea55 0e06 	orrs.w	lr, r5, r6
   bdeb4:	d018      	beq.n	bdee8 <__aeabi_ddiv+0x114>
   bdeb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bdeba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bdebe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bdec2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bdec6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bdeca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bdece:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bded2:	d1c0      	bne.n	bde56 <__aeabi_ddiv+0x82>
   bded4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bded8:	d10b      	bne.n	bdef2 <__aeabi_ddiv+0x11e>
   bdeda:	ea41 0100 	orr.w	r1, r1, r0
   bdede:	f04f 0000 	mov.w	r0, #0
   bdee2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bdee6:	e7b6      	b.n	bde56 <__aeabi_ddiv+0x82>
   bdee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdeec:	bf04      	itt	eq
   bdeee:	4301      	orreq	r1, r0
   bdef0:	2000      	moveq	r0, #0
   bdef2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdef6:	bf88      	it	hi
   bdef8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bdefc:	f63f aeaf 	bhi.w	bdc5e <__aeabi_dmul+0xde>
   bdf00:	ebb5 0c03 	subs.w	ip, r5, r3
   bdf04:	bf04      	itt	eq
   bdf06:	ebb6 0c02 	subseq.w	ip, r6, r2
   bdf0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bdf0e:	f150 0000 	adcs.w	r0, r0, #0
   bdf12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdf16:	bd70      	pop	{r4, r5, r6, pc}
   bdf18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bdf1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bdf20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bdf24:	bfc2      	ittt	gt
   bdf26:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdf2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdf2e:	bd70      	popgt	{r4, r5, r6, pc}
   bdf30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdf34:	f04f 0e00 	mov.w	lr, #0
   bdf38:	3c01      	subs	r4, #1
   bdf3a:	e690      	b.n	bdc5e <__aeabi_dmul+0xde>
   bdf3c:	ea45 0e06 	orr.w	lr, r5, r6
   bdf40:	e68d      	b.n	bdc5e <__aeabi_dmul+0xde>
   bdf42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdf46:	ea94 0f0c 	teq	r4, ip
   bdf4a:	bf08      	it	eq
   bdf4c:	ea95 0f0c 	teqeq	r5, ip
   bdf50:	f43f af3b 	beq.w	bddca <__aeabi_dmul+0x24a>
   bdf54:	ea94 0f0c 	teq	r4, ip
   bdf58:	d10a      	bne.n	bdf70 <__aeabi_ddiv+0x19c>
   bdf5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdf5e:	f47f af34 	bne.w	bddca <__aeabi_dmul+0x24a>
   bdf62:	ea95 0f0c 	teq	r5, ip
   bdf66:	f47f af25 	bne.w	bddb4 <__aeabi_dmul+0x234>
   bdf6a:	4610      	mov	r0, r2
   bdf6c:	4619      	mov	r1, r3
   bdf6e:	e72c      	b.n	bddca <__aeabi_dmul+0x24a>
   bdf70:	ea95 0f0c 	teq	r5, ip
   bdf74:	d106      	bne.n	bdf84 <__aeabi_ddiv+0x1b0>
   bdf76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdf7a:	f43f aefd 	beq.w	bdd78 <__aeabi_dmul+0x1f8>
   bdf7e:	4610      	mov	r0, r2
   bdf80:	4619      	mov	r1, r3
   bdf82:	e722      	b.n	bddca <__aeabi_dmul+0x24a>
   bdf84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdf88:	bf18      	it	ne
   bdf8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdf8e:	f47f aec5 	bne.w	bdd1c <__aeabi_dmul+0x19c>
   bdf92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bdf96:	f47f af0d 	bne.w	bddb4 <__aeabi_dmul+0x234>
   bdf9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bdf9e:	f47f aeeb 	bne.w	bdd78 <__aeabi_dmul+0x1f8>
   bdfa2:	e712      	b.n	bddca <__aeabi_dmul+0x24a>

000bdfa4 <__gedf2>:
   bdfa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdfa8:	e006      	b.n	bdfb8 <__cmpdf2+0x4>
   bdfaa:	bf00      	nop

000bdfac <__ledf2>:
   bdfac:	f04f 0c01 	mov.w	ip, #1
   bdfb0:	e002      	b.n	bdfb8 <__cmpdf2+0x4>
   bdfb2:	bf00      	nop

000bdfb4 <__cmpdf2>:
   bdfb4:	f04f 0c01 	mov.w	ip, #1
   bdfb8:	f84d cd04 	str.w	ip, [sp, #-4]!
   bdfbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdfc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdfc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdfc8:	bf18      	it	ne
   bdfca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bdfce:	d01b      	beq.n	be008 <__cmpdf2+0x54>
   bdfd0:	b001      	add	sp, #4
   bdfd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bdfd6:	bf0c      	ite	eq
   bdfd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bdfdc:	ea91 0f03 	teqne	r1, r3
   bdfe0:	bf02      	ittt	eq
   bdfe2:	ea90 0f02 	teqeq	r0, r2
   bdfe6:	2000      	moveq	r0, #0
   bdfe8:	4770      	bxeq	lr
   bdfea:	f110 0f00 	cmn.w	r0, #0
   bdfee:	ea91 0f03 	teq	r1, r3
   bdff2:	bf58      	it	pl
   bdff4:	4299      	cmppl	r1, r3
   bdff6:	bf08      	it	eq
   bdff8:	4290      	cmpeq	r0, r2
   bdffa:	bf2c      	ite	cs
   bdffc:	17d8      	asrcs	r0, r3, #31
   bdffe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be002:	f040 0001 	orr.w	r0, r0, #1
   be006:	4770      	bx	lr
   be008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be010:	d102      	bne.n	be018 <__cmpdf2+0x64>
   be012:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be016:	d107      	bne.n	be028 <__cmpdf2+0x74>
   be018:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be01c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be020:	d1d6      	bne.n	bdfd0 <__cmpdf2+0x1c>
   be022:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be026:	d0d3      	beq.n	bdfd0 <__cmpdf2+0x1c>
   be028:	f85d 0b04 	ldr.w	r0, [sp], #4
   be02c:	4770      	bx	lr
   be02e:	bf00      	nop

000be030 <__aeabi_cdrcmple>:
   be030:	4684      	mov	ip, r0
   be032:	4610      	mov	r0, r2
   be034:	4662      	mov	r2, ip
   be036:	468c      	mov	ip, r1
   be038:	4619      	mov	r1, r3
   be03a:	4663      	mov	r3, ip
   be03c:	e000      	b.n	be040 <__aeabi_cdcmpeq>
   be03e:	bf00      	nop

000be040 <__aeabi_cdcmpeq>:
   be040:	b501      	push	{r0, lr}
   be042:	f7ff ffb7 	bl	bdfb4 <__cmpdf2>
   be046:	2800      	cmp	r0, #0
   be048:	bf48      	it	mi
   be04a:	f110 0f00 	cmnmi.w	r0, #0
   be04e:	bd01      	pop	{r0, pc}

000be050 <__aeabi_dcmpeq>:
   be050:	f84d ed08 	str.w	lr, [sp, #-8]!
   be054:	f7ff fff4 	bl	be040 <__aeabi_cdcmpeq>
   be058:	bf0c      	ite	eq
   be05a:	2001      	moveq	r0, #1
   be05c:	2000      	movne	r0, #0
   be05e:	f85d fb08 	ldr.w	pc, [sp], #8
   be062:	bf00      	nop

000be064 <__aeabi_dcmplt>:
   be064:	f84d ed08 	str.w	lr, [sp, #-8]!
   be068:	f7ff ffea 	bl	be040 <__aeabi_cdcmpeq>
   be06c:	bf34      	ite	cc
   be06e:	2001      	movcc	r0, #1
   be070:	2000      	movcs	r0, #0
   be072:	f85d fb08 	ldr.w	pc, [sp], #8
   be076:	bf00      	nop

000be078 <__aeabi_dcmple>:
   be078:	f84d ed08 	str.w	lr, [sp, #-8]!
   be07c:	f7ff ffe0 	bl	be040 <__aeabi_cdcmpeq>
   be080:	bf94      	ite	ls
   be082:	2001      	movls	r0, #1
   be084:	2000      	movhi	r0, #0
   be086:	f85d fb08 	ldr.w	pc, [sp], #8
   be08a:	bf00      	nop

000be08c <__aeabi_dcmpge>:
   be08c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be090:	f7ff ffce 	bl	be030 <__aeabi_cdrcmple>
   be094:	bf94      	ite	ls
   be096:	2001      	movls	r0, #1
   be098:	2000      	movhi	r0, #0
   be09a:	f85d fb08 	ldr.w	pc, [sp], #8
   be09e:	bf00      	nop

000be0a0 <__aeabi_dcmpgt>:
   be0a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   be0a4:	f7ff ffc4 	bl	be030 <__aeabi_cdrcmple>
   be0a8:	bf34      	ite	cc
   be0aa:	2001      	movcc	r0, #1
   be0ac:	2000      	movcs	r0, #0
   be0ae:	f85d fb08 	ldr.w	pc, [sp], #8
   be0b2:	bf00      	nop

000be0b4 <__aeabi_d2uiz>:
   be0b4:	004a      	lsls	r2, r1, #1
   be0b6:	d211      	bcs.n	be0dc <__aeabi_d2uiz+0x28>
   be0b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be0bc:	d211      	bcs.n	be0e2 <__aeabi_d2uiz+0x2e>
   be0be:	d50d      	bpl.n	be0dc <__aeabi_d2uiz+0x28>
   be0c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be0c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be0c8:	d40e      	bmi.n	be0e8 <__aeabi_d2uiz+0x34>
   be0ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be0ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be0d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be0d6:	fa23 f002 	lsr.w	r0, r3, r2
   be0da:	4770      	bx	lr
   be0dc:	f04f 0000 	mov.w	r0, #0
   be0e0:	4770      	bx	lr
   be0e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be0e6:	d102      	bne.n	be0ee <__aeabi_d2uiz+0x3a>
   be0e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be0ec:	4770      	bx	lr
   be0ee:	f04f 0000 	mov.w	r0, #0
   be0f2:	4770      	bx	lr

000be0f4 <__aeabi_d2f>:
   be0f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be0f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be0fc:	bf24      	itt	cs
   be0fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be102:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be106:	d90d      	bls.n	be124 <__aeabi_d2f+0x30>
   be108:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be10c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be110:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be114:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be118:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be11c:	bf08      	it	eq
   be11e:	f020 0001 	biceq.w	r0, r0, #1
   be122:	4770      	bx	lr
   be124:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be128:	d121      	bne.n	be16e <__aeabi_d2f+0x7a>
   be12a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be12e:	bfbc      	itt	lt
   be130:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be134:	4770      	bxlt	lr
   be136:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be13a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be13e:	f1c2 0218 	rsb	r2, r2, #24
   be142:	f1c2 0c20 	rsb	ip, r2, #32
   be146:	fa10 f30c 	lsls.w	r3, r0, ip
   be14a:	fa20 f002 	lsr.w	r0, r0, r2
   be14e:	bf18      	it	ne
   be150:	f040 0001 	orrne.w	r0, r0, #1
   be154:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be158:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be15c:	fa03 fc0c 	lsl.w	ip, r3, ip
   be160:	ea40 000c 	orr.w	r0, r0, ip
   be164:	fa23 f302 	lsr.w	r3, r3, r2
   be168:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be16c:	e7cc      	b.n	be108 <__aeabi_d2f+0x14>
   be16e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be172:	d107      	bne.n	be184 <__aeabi_d2f+0x90>
   be174:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be178:	bf1e      	ittt	ne
   be17a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be17e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be182:	4770      	bxne	lr
   be184:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be188:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   be18c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   be190:	4770      	bx	lr
   be192:	bf00      	nop

000be194 <__aeabi_d2ulz>:
   be194:	b5d0      	push	{r4, r6, r7, lr}
   be196:	4b0c      	ldr	r3, [pc, #48]	; (be1c8 <__aeabi_d2ulz+0x34>)
   be198:	2200      	movs	r2, #0
   be19a:	4606      	mov	r6, r0
   be19c:	460f      	mov	r7, r1
   be19e:	f7ff fcef 	bl	bdb80 <__aeabi_dmul>
   be1a2:	f7ff ff87 	bl	be0b4 <__aeabi_d2uiz>
   be1a6:	4604      	mov	r4, r0
   be1a8:	f7ff fc70 	bl	bda8c <__aeabi_ui2d>
   be1ac:	4b07      	ldr	r3, [pc, #28]	; (be1cc <__aeabi_d2ulz+0x38>)
   be1ae:	2200      	movs	r2, #0
   be1b0:	f7ff fce6 	bl	bdb80 <__aeabi_dmul>
   be1b4:	4602      	mov	r2, r0
   be1b6:	460b      	mov	r3, r1
   be1b8:	4630      	mov	r0, r6
   be1ba:	4639      	mov	r1, r7
   be1bc:	f7ff fb28 	bl	bd810 <__aeabi_dsub>
   be1c0:	f7ff ff78 	bl	be0b4 <__aeabi_d2uiz>
   be1c4:	4621      	mov	r1, r4
   be1c6:	bdd0      	pop	{r4, r6, r7, pc}
   be1c8:	3df00000 	.word	0x3df00000
   be1cc:	41f00000 	.word	0x41f00000

000be1d0 <atexit>:
   be1d0:	2300      	movs	r3, #0
   be1d2:	4601      	mov	r1, r0
   be1d4:	461a      	mov	r2, r3
   be1d6:	4618      	mov	r0, r3
   be1d8:	f000 bfe8 	b.w	bf1ac <__register_exitproc>

000be1dc <atof>:
   be1dc:	2100      	movs	r1, #0
   be1de:	f000 bf4d 	b.w	bf07c <strtod>

000be1e2 <atoi>:
   be1e2:	220a      	movs	r2, #10
   be1e4:	2100      	movs	r1, #0
   be1e6:	f000 bfd7 	b.w	bf198 <strtol>

000be1ea <memcmp>:
   be1ea:	b510      	push	{r4, lr}
   be1ec:	3901      	subs	r1, #1
   be1ee:	4402      	add	r2, r0
   be1f0:	4290      	cmp	r0, r2
   be1f2:	d101      	bne.n	be1f8 <memcmp+0xe>
   be1f4:	2000      	movs	r0, #0
   be1f6:	e005      	b.n	be204 <memcmp+0x1a>
   be1f8:	7803      	ldrb	r3, [r0, #0]
   be1fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be1fe:	42a3      	cmp	r3, r4
   be200:	d001      	beq.n	be206 <memcmp+0x1c>
   be202:	1b18      	subs	r0, r3, r4
   be204:	bd10      	pop	{r4, pc}
   be206:	3001      	adds	r0, #1
   be208:	e7f2      	b.n	be1f0 <memcmp+0x6>

000be20a <memcpy>:
   be20a:	440a      	add	r2, r1
   be20c:	4291      	cmp	r1, r2
   be20e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be212:	d100      	bne.n	be216 <memcpy+0xc>
   be214:	4770      	bx	lr
   be216:	b510      	push	{r4, lr}
   be218:	f811 4b01 	ldrb.w	r4, [r1], #1
   be21c:	f803 4f01 	strb.w	r4, [r3, #1]!
   be220:	4291      	cmp	r1, r2
   be222:	d1f9      	bne.n	be218 <memcpy+0xe>
   be224:	bd10      	pop	{r4, pc}

000be226 <memmove>:
   be226:	4288      	cmp	r0, r1
   be228:	b510      	push	{r4, lr}
   be22a:	eb01 0402 	add.w	r4, r1, r2
   be22e:	d902      	bls.n	be236 <memmove+0x10>
   be230:	4284      	cmp	r4, r0
   be232:	4623      	mov	r3, r4
   be234:	d807      	bhi.n	be246 <memmove+0x20>
   be236:	1e43      	subs	r3, r0, #1
   be238:	42a1      	cmp	r1, r4
   be23a:	d008      	beq.n	be24e <memmove+0x28>
   be23c:	f811 2b01 	ldrb.w	r2, [r1], #1
   be240:	f803 2f01 	strb.w	r2, [r3, #1]!
   be244:	e7f8      	b.n	be238 <memmove+0x12>
   be246:	4402      	add	r2, r0
   be248:	4601      	mov	r1, r0
   be24a:	428a      	cmp	r2, r1
   be24c:	d100      	bne.n	be250 <memmove+0x2a>
   be24e:	bd10      	pop	{r4, pc}
   be250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   be254:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be258:	e7f7      	b.n	be24a <memmove+0x24>

000be25a <memset>:
   be25a:	4402      	add	r2, r0
   be25c:	4603      	mov	r3, r0
   be25e:	4293      	cmp	r3, r2
   be260:	d100      	bne.n	be264 <memset+0xa>
   be262:	4770      	bx	lr
   be264:	f803 1b01 	strb.w	r1, [r3], #1
   be268:	e7f9      	b.n	be25e <memset+0x4>
	...

000be26c <srand>:
   be26c:	b538      	push	{r3, r4, r5, lr}
   be26e:	4b10      	ldr	r3, [pc, #64]	; (be2b0 <srand+0x44>)
   be270:	681d      	ldr	r5, [r3, #0]
   be272:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be274:	4604      	mov	r4, r0
   be276:	b9b3      	cbnz	r3, be2a6 <srand+0x3a>
   be278:	2018      	movs	r0, #24
   be27a:	f7fb fa77 	bl	b976c <malloc>
   be27e:	4602      	mov	r2, r0
   be280:	63a8      	str	r0, [r5, #56]	; 0x38
   be282:	b920      	cbnz	r0, be28e <srand+0x22>
   be284:	4b0b      	ldr	r3, [pc, #44]	; (be2b4 <srand+0x48>)
   be286:	480c      	ldr	r0, [pc, #48]	; (be2b8 <srand+0x4c>)
   be288:	2142      	movs	r1, #66	; 0x42
   be28a:	f7fb fabf 	bl	b980c <__assert_func>
   be28e:	490b      	ldr	r1, [pc, #44]	; (be2bc <srand+0x50>)
   be290:	4b0b      	ldr	r3, [pc, #44]	; (be2c0 <srand+0x54>)
   be292:	e9c0 1300 	strd	r1, r3, [r0]
   be296:	4b0b      	ldr	r3, [pc, #44]	; (be2c4 <srand+0x58>)
   be298:	6083      	str	r3, [r0, #8]
   be29a:	230b      	movs	r3, #11
   be29c:	8183      	strh	r3, [r0, #12]
   be29e:	2100      	movs	r1, #0
   be2a0:	2001      	movs	r0, #1
   be2a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   be2a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be2a8:	2200      	movs	r2, #0
   be2aa:	611c      	str	r4, [r3, #16]
   be2ac:	615a      	str	r2, [r3, #20]
   be2ae:	bd38      	pop	{r3, r4, r5, pc}
   be2b0:	2003da90 	.word	0x2003da90
   be2b4:	000c1c11 	.word	0x000c1c11
   be2b8:	000c1c28 	.word	0x000c1c28
   be2bc:	abcd330e 	.word	0xabcd330e
   be2c0:	e66d1234 	.word	0xe66d1234
   be2c4:	0005deec 	.word	0x0005deec

000be2c8 <rand>:
   be2c8:	4b16      	ldr	r3, [pc, #88]	; (be324 <rand+0x5c>)
   be2ca:	b510      	push	{r4, lr}
   be2cc:	681c      	ldr	r4, [r3, #0]
   be2ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   be2d0:	b9b3      	cbnz	r3, be300 <rand+0x38>
   be2d2:	2018      	movs	r0, #24
   be2d4:	f7fb fa4a 	bl	b976c <malloc>
   be2d8:	63a0      	str	r0, [r4, #56]	; 0x38
   be2da:	b928      	cbnz	r0, be2e8 <rand+0x20>
   be2dc:	4602      	mov	r2, r0
   be2de:	4b12      	ldr	r3, [pc, #72]	; (be328 <rand+0x60>)
   be2e0:	4812      	ldr	r0, [pc, #72]	; (be32c <rand+0x64>)
   be2e2:	214e      	movs	r1, #78	; 0x4e
   be2e4:	f7fb fa92 	bl	b980c <__assert_func>
   be2e8:	4a11      	ldr	r2, [pc, #68]	; (be330 <rand+0x68>)
   be2ea:	4b12      	ldr	r3, [pc, #72]	; (be334 <rand+0x6c>)
   be2ec:	e9c0 2300 	strd	r2, r3, [r0]
   be2f0:	4b11      	ldr	r3, [pc, #68]	; (be338 <rand+0x70>)
   be2f2:	6083      	str	r3, [r0, #8]
   be2f4:	230b      	movs	r3, #11
   be2f6:	8183      	strh	r3, [r0, #12]
   be2f8:	2201      	movs	r2, #1
   be2fa:	2300      	movs	r3, #0
   be2fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   be300:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   be302:	4a0e      	ldr	r2, [pc, #56]	; (be33c <rand+0x74>)
   be304:	6920      	ldr	r0, [r4, #16]
   be306:	6963      	ldr	r3, [r4, #20]
   be308:	490d      	ldr	r1, [pc, #52]	; (be340 <rand+0x78>)
   be30a:	4342      	muls	r2, r0
   be30c:	fb01 2203 	mla	r2, r1, r3, r2
   be310:	fba0 0101 	umull	r0, r1, r0, r1
   be314:	1c43      	adds	r3, r0, #1
   be316:	eb42 0001 	adc.w	r0, r2, r1
   be31a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   be31e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   be322:	bd10      	pop	{r4, pc}
   be324:	2003da90 	.word	0x2003da90
   be328:	000c1c11 	.word	0x000c1c11
   be32c:	000c1c28 	.word	0x000c1c28
   be330:	abcd330e 	.word	0xabcd330e
   be334:	e66d1234 	.word	0xe66d1234
   be338:	0005deec 	.word	0x0005deec
   be33c:	5851f42d 	.word	0x5851f42d
   be340:	4c957f2d 	.word	0x4c957f2d

000be344 <strcat>:
   be344:	b510      	push	{r4, lr}
   be346:	4602      	mov	r2, r0
   be348:	7814      	ldrb	r4, [r2, #0]
   be34a:	4613      	mov	r3, r2
   be34c:	3201      	adds	r2, #1
   be34e:	2c00      	cmp	r4, #0
   be350:	d1fa      	bne.n	be348 <strcat+0x4>
   be352:	3b01      	subs	r3, #1
   be354:	f811 2b01 	ldrb.w	r2, [r1], #1
   be358:	f803 2f01 	strb.w	r2, [r3, #1]!
   be35c:	2a00      	cmp	r2, #0
   be35e:	d1f9      	bne.n	be354 <strcat+0x10>
   be360:	bd10      	pop	{r4, pc}

000be362 <strcmp>:
   be362:	f810 2b01 	ldrb.w	r2, [r0], #1
   be366:	f811 3b01 	ldrb.w	r3, [r1], #1
   be36a:	2a01      	cmp	r2, #1
   be36c:	bf28      	it	cs
   be36e:	429a      	cmpcs	r2, r3
   be370:	d0f7      	beq.n	be362 <strcmp>
   be372:	1ad0      	subs	r0, r2, r3
   be374:	4770      	bx	lr

000be376 <strcpy>:
   be376:	4603      	mov	r3, r0
   be378:	f811 2b01 	ldrb.w	r2, [r1], #1
   be37c:	f803 2b01 	strb.w	r2, [r3], #1
   be380:	2a00      	cmp	r2, #0
   be382:	d1f9      	bne.n	be378 <strcpy+0x2>
   be384:	4770      	bx	lr
	...

000be388 <strdup>:
   be388:	4b02      	ldr	r3, [pc, #8]	; (be394 <strdup+0xc>)
   be38a:	4601      	mov	r1, r0
   be38c:	6818      	ldr	r0, [r3, #0]
   be38e:	f000 b803 	b.w	be398 <_strdup_r>
   be392:	bf00      	nop
   be394:	2003da90 	.word	0x2003da90

000be398 <_strdup_r>:
   be398:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be39a:	4604      	mov	r4, r0
   be39c:	4608      	mov	r0, r1
   be39e:	460d      	mov	r5, r1
   be3a0:	f000 f80f 	bl	be3c2 <strlen>
   be3a4:	1c42      	adds	r2, r0, #1
   be3a6:	4611      	mov	r1, r2
   be3a8:	4620      	mov	r0, r4
   be3aa:	9201      	str	r2, [sp, #4]
   be3ac:	f7fb fa1e 	bl	b97ec <_malloc_r>
   be3b0:	4604      	mov	r4, r0
   be3b2:	b118      	cbz	r0, be3bc <_strdup_r+0x24>
   be3b4:	9a01      	ldr	r2, [sp, #4]
   be3b6:	4629      	mov	r1, r5
   be3b8:	f7ff ff27 	bl	be20a <memcpy>
   be3bc:	4620      	mov	r0, r4
   be3be:	b003      	add	sp, #12
   be3c0:	bd30      	pop	{r4, r5, pc}

000be3c2 <strlen>:
   be3c2:	4603      	mov	r3, r0
   be3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   be3c8:	2a00      	cmp	r2, #0
   be3ca:	d1fb      	bne.n	be3c4 <strlen+0x2>
   be3cc:	1a18      	subs	r0, r3, r0
   be3ce:	3801      	subs	r0, #1
   be3d0:	4770      	bx	lr

000be3d2 <strncmp>:
   be3d2:	b510      	push	{r4, lr}
   be3d4:	b17a      	cbz	r2, be3f6 <strncmp+0x24>
   be3d6:	4603      	mov	r3, r0
   be3d8:	3901      	subs	r1, #1
   be3da:	1884      	adds	r4, r0, r2
   be3dc:	f813 0b01 	ldrb.w	r0, [r3], #1
   be3e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   be3e4:	4290      	cmp	r0, r2
   be3e6:	d101      	bne.n	be3ec <strncmp+0x1a>
   be3e8:	42a3      	cmp	r3, r4
   be3ea:	d101      	bne.n	be3f0 <strncmp+0x1e>
   be3ec:	1a80      	subs	r0, r0, r2
   be3ee:	bd10      	pop	{r4, pc}
   be3f0:	2800      	cmp	r0, #0
   be3f2:	d1f3      	bne.n	be3dc <strncmp+0xa>
   be3f4:	e7fa      	b.n	be3ec <strncmp+0x1a>
   be3f6:	4610      	mov	r0, r2
   be3f8:	e7f9      	b.n	be3ee <strncmp+0x1c>

000be3fa <strncpy>:
   be3fa:	b510      	push	{r4, lr}
   be3fc:	3901      	subs	r1, #1
   be3fe:	4603      	mov	r3, r0
   be400:	b132      	cbz	r2, be410 <strncpy+0x16>
   be402:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be406:	f803 4b01 	strb.w	r4, [r3], #1
   be40a:	3a01      	subs	r2, #1
   be40c:	2c00      	cmp	r4, #0
   be40e:	d1f7      	bne.n	be400 <strncpy+0x6>
   be410:	441a      	add	r2, r3
   be412:	2100      	movs	r1, #0
   be414:	4293      	cmp	r3, r2
   be416:	d100      	bne.n	be41a <strncpy+0x20>
   be418:	bd10      	pop	{r4, pc}
   be41a:	f803 1b01 	strb.w	r1, [r3], #1
   be41e:	e7f9      	b.n	be414 <strncpy+0x1a>

000be420 <strnlen>:
   be420:	b510      	push	{r4, lr}
   be422:	4602      	mov	r2, r0
   be424:	4401      	add	r1, r0
   be426:	428a      	cmp	r2, r1
   be428:	4613      	mov	r3, r2
   be42a:	d003      	beq.n	be434 <strnlen+0x14>
   be42c:	781c      	ldrb	r4, [r3, #0]
   be42e:	3201      	adds	r2, #1
   be430:	2c00      	cmp	r4, #0
   be432:	d1f8      	bne.n	be426 <strnlen+0x6>
   be434:	1a18      	subs	r0, r3, r0
   be436:	bd10      	pop	{r4, pc}

000be438 <sulp>:
   be438:	b570      	push	{r4, r5, r6, lr}
   be43a:	4604      	mov	r4, r0
   be43c:	460d      	mov	r5, r1
   be43e:	ec45 4b10 	vmov	d0, r4, r5
   be442:	4616      	mov	r6, r2
   be444:	f001 fe0c 	bl	c0060 <__ulp>
   be448:	ec51 0b10 	vmov	r0, r1, d0
   be44c:	b17e      	cbz	r6, be46e <sulp+0x36>
   be44e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   be452:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be456:	2b00      	cmp	r3, #0
   be458:	dd09      	ble.n	be46e <sulp+0x36>
   be45a:	051b      	lsls	r3, r3, #20
   be45c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   be460:	2400      	movs	r4, #0
   be462:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   be466:	4622      	mov	r2, r4
   be468:	462b      	mov	r3, r5
   be46a:	f7ff fb89 	bl	bdb80 <__aeabi_dmul>
   be46e:	bd70      	pop	{r4, r5, r6, pc}

000be470 <_strtod_l>:
   be470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be474:	ed2d 8b02 	vpush	{d8}
   be478:	b09d      	sub	sp, #116	; 0x74
   be47a:	461f      	mov	r7, r3
   be47c:	2300      	movs	r3, #0
   be47e:	9318      	str	r3, [sp, #96]	; 0x60
   be480:	4ba2      	ldr	r3, [pc, #648]	; (be70c <_strtod_l+0x29c>)
   be482:	9213      	str	r2, [sp, #76]	; 0x4c
   be484:	681b      	ldr	r3, [r3, #0]
   be486:	9305      	str	r3, [sp, #20]
   be488:	4604      	mov	r4, r0
   be48a:	4618      	mov	r0, r3
   be48c:	4688      	mov	r8, r1
   be48e:	f7ff ff98 	bl	be3c2 <strlen>
   be492:	f04f 0a00 	mov.w	sl, #0
   be496:	4605      	mov	r5, r0
   be498:	f04f 0b00 	mov.w	fp, #0
   be49c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be4a2:	781a      	ldrb	r2, [r3, #0]
   be4a4:	2a2b      	cmp	r2, #43	; 0x2b
   be4a6:	d04e      	beq.n	be546 <_strtod_l+0xd6>
   be4a8:	d83b      	bhi.n	be522 <_strtod_l+0xb2>
   be4aa:	2a0d      	cmp	r2, #13
   be4ac:	d834      	bhi.n	be518 <_strtod_l+0xa8>
   be4ae:	2a08      	cmp	r2, #8
   be4b0:	d834      	bhi.n	be51c <_strtod_l+0xac>
   be4b2:	2a00      	cmp	r2, #0
   be4b4:	d03e      	beq.n	be534 <_strtod_l+0xc4>
   be4b6:	2300      	movs	r3, #0
   be4b8:	930a      	str	r3, [sp, #40]	; 0x28
   be4ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   be4bc:	7833      	ldrb	r3, [r6, #0]
   be4be:	2b30      	cmp	r3, #48	; 0x30
   be4c0:	f040 80b0 	bne.w	be624 <_strtod_l+0x1b4>
   be4c4:	7873      	ldrb	r3, [r6, #1]
   be4c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be4ca:	2b58      	cmp	r3, #88	; 0x58
   be4cc:	d168      	bne.n	be5a0 <_strtod_l+0x130>
   be4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be4d0:	9301      	str	r3, [sp, #4]
   be4d2:	ab18      	add	r3, sp, #96	; 0x60
   be4d4:	9702      	str	r7, [sp, #8]
   be4d6:	9300      	str	r3, [sp, #0]
   be4d8:	4a8d      	ldr	r2, [pc, #564]	; (be710 <_strtod_l+0x2a0>)
   be4da:	ab19      	add	r3, sp, #100	; 0x64
   be4dc:	a917      	add	r1, sp, #92	; 0x5c
   be4de:	4620      	mov	r0, r4
   be4e0:	f000 ff2e 	bl	bf340 <__gethex>
   be4e4:	f010 0707 	ands.w	r7, r0, #7
   be4e8:	4605      	mov	r5, r0
   be4ea:	d005      	beq.n	be4f8 <_strtod_l+0x88>
   be4ec:	2f06      	cmp	r7, #6
   be4ee:	d12c      	bne.n	be54a <_strtod_l+0xda>
   be4f0:	3601      	adds	r6, #1
   be4f2:	2300      	movs	r3, #0
   be4f4:	9617      	str	r6, [sp, #92]	; 0x5c
   be4f6:	930a      	str	r3, [sp, #40]	; 0x28
   be4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be4fa:	2b00      	cmp	r3, #0
   be4fc:	f040 8590 	bne.w	bf020 <_strtod_l+0xbb0>
   be500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be502:	b1eb      	cbz	r3, be540 <_strtod_l+0xd0>
   be504:	4652      	mov	r2, sl
   be506:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   be50a:	ec43 2b10 	vmov	d0, r2, r3
   be50e:	b01d      	add	sp, #116	; 0x74
   be510:	ecbd 8b02 	vpop	{d8}
   be514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be518:	2a20      	cmp	r2, #32
   be51a:	d1cc      	bne.n	be4b6 <_strtod_l+0x46>
   be51c:	3301      	adds	r3, #1
   be51e:	9317      	str	r3, [sp, #92]	; 0x5c
   be520:	e7be      	b.n	be4a0 <_strtod_l+0x30>
   be522:	2a2d      	cmp	r2, #45	; 0x2d
   be524:	d1c7      	bne.n	be4b6 <_strtod_l+0x46>
   be526:	2201      	movs	r2, #1
   be528:	920a      	str	r2, [sp, #40]	; 0x28
   be52a:	1c5a      	adds	r2, r3, #1
   be52c:	9217      	str	r2, [sp, #92]	; 0x5c
   be52e:	785b      	ldrb	r3, [r3, #1]
   be530:	2b00      	cmp	r3, #0
   be532:	d1c2      	bne.n	be4ba <_strtod_l+0x4a>
   be534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be536:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be53a:	2b00      	cmp	r3, #0
   be53c:	f040 856e 	bne.w	bf01c <_strtod_l+0xbac>
   be540:	4652      	mov	r2, sl
   be542:	465b      	mov	r3, fp
   be544:	e7e1      	b.n	be50a <_strtod_l+0x9a>
   be546:	2200      	movs	r2, #0
   be548:	e7ee      	b.n	be528 <_strtod_l+0xb8>
   be54a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be54c:	b13a      	cbz	r2, be55e <_strtod_l+0xee>
   be54e:	2135      	movs	r1, #53	; 0x35
   be550:	a81a      	add	r0, sp, #104	; 0x68
   be552:	f001 fe90 	bl	c0276 <__copybits>
   be556:	9918      	ldr	r1, [sp, #96]	; 0x60
   be558:	4620      	mov	r0, r4
   be55a:	f001 fa4f 	bl	bf9fc <_Bfree>
   be55e:	3f01      	subs	r7, #1
   be560:	2f04      	cmp	r7, #4
   be562:	d806      	bhi.n	be572 <_strtod_l+0x102>
   be564:	e8df f007 	tbb	[pc, r7]
   be568:	1714030a 	.word	0x1714030a
   be56c:	0a          	.byte	0x0a
   be56d:	00          	.byte	0x00
   be56e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   be572:	0728      	lsls	r0, r5, #28
   be574:	d5c0      	bpl.n	be4f8 <_strtod_l+0x88>
   be576:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   be57a:	e7bd      	b.n	be4f8 <_strtod_l+0x88>
   be57c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   be580:	9a19      	ldr	r2, [sp, #100]	; 0x64
   be582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   be586:	f202 4233 	addw	r2, r2, #1075	; 0x433
   be58a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   be58e:	e7f0      	b.n	be572 <_strtod_l+0x102>
   be590:	f8df b180 	ldr.w	fp, [pc, #384]	; be714 <_strtod_l+0x2a4>
   be594:	e7ed      	b.n	be572 <_strtod_l+0x102>
   be596:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   be59a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   be59e:	e7e8      	b.n	be572 <_strtod_l+0x102>
   be5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be5a2:	1c5a      	adds	r2, r3, #1
   be5a4:	9217      	str	r2, [sp, #92]	; 0x5c
   be5a6:	785b      	ldrb	r3, [r3, #1]
   be5a8:	2b30      	cmp	r3, #48	; 0x30
   be5aa:	d0f9      	beq.n	be5a0 <_strtod_l+0x130>
   be5ac:	2b00      	cmp	r3, #0
   be5ae:	d0a3      	beq.n	be4f8 <_strtod_l+0x88>
   be5b0:	2301      	movs	r3, #1
   be5b2:	f04f 0900 	mov.w	r9, #0
   be5b6:	9304      	str	r3, [sp, #16]
   be5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be5ba:	9308      	str	r3, [sp, #32]
   be5bc:	f8cd 901c 	str.w	r9, [sp, #28]
   be5c0:	464f      	mov	r7, r9
   be5c2:	220a      	movs	r2, #10
   be5c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   be5c6:	7806      	ldrb	r6, [r0, #0]
   be5c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   be5cc:	b2d9      	uxtb	r1, r3
   be5ce:	2909      	cmp	r1, #9
   be5d0:	d92a      	bls.n	be628 <_strtod_l+0x1b8>
   be5d2:	9905      	ldr	r1, [sp, #20]
   be5d4:	462a      	mov	r2, r5
   be5d6:	f7ff fefc 	bl	be3d2 <strncmp>
   be5da:	b398      	cbz	r0, be644 <_strtod_l+0x1d4>
   be5dc:	2000      	movs	r0, #0
   be5de:	4632      	mov	r2, r6
   be5e0:	463d      	mov	r5, r7
   be5e2:	9005      	str	r0, [sp, #20]
   be5e4:	4603      	mov	r3, r0
   be5e6:	2a65      	cmp	r2, #101	; 0x65
   be5e8:	d001      	beq.n	be5ee <_strtod_l+0x17e>
   be5ea:	2a45      	cmp	r2, #69	; 0x45
   be5ec:	d118      	bne.n	be620 <_strtod_l+0x1b0>
   be5ee:	b91d      	cbnz	r5, be5f8 <_strtod_l+0x188>
   be5f0:	9a04      	ldr	r2, [sp, #16]
   be5f2:	4302      	orrs	r2, r0
   be5f4:	d09e      	beq.n	be534 <_strtod_l+0xc4>
   be5f6:	2500      	movs	r5, #0
   be5f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   be5fc:	f108 0201 	add.w	r2, r8, #1
   be600:	9217      	str	r2, [sp, #92]	; 0x5c
   be602:	f898 2001 	ldrb.w	r2, [r8, #1]
   be606:	2a2b      	cmp	r2, #43	; 0x2b
   be608:	d075      	beq.n	be6f6 <_strtod_l+0x286>
   be60a:	2a2d      	cmp	r2, #45	; 0x2d
   be60c:	d07b      	beq.n	be706 <_strtod_l+0x296>
   be60e:	f04f 0c00 	mov.w	ip, #0
   be612:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   be616:	2909      	cmp	r1, #9
   be618:	f240 8082 	bls.w	be720 <_strtod_l+0x2b0>
   be61c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be620:	2600      	movs	r6, #0
   be622:	e09d      	b.n	be760 <_strtod_l+0x2f0>
   be624:	2300      	movs	r3, #0
   be626:	e7c4      	b.n	be5b2 <_strtod_l+0x142>
   be628:	2f08      	cmp	r7, #8
   be62a:	bfd8      	it	le
   be62c:	9907      	ldrle	r1, [sp, #28]
   be62e:	f100 0001 	add.w	r0, r0, #1
   be632:	bfda      	itte	le
   be634:	fb02 3301 	mlale	r3, r2, r1, r3
   be638:	9307      	strle	r3, [sp, #28]
   be63a:	fb02 3909 	mlagt	r9, r2, r9, r3
   be63e:	3701      	adds	r7, #1
   be640:	9017      	str	r0, [sp, #92]	; 0x5c
   be642:	e7bf      	b.n	be5c4 <_strtod_l+0x154>
   be644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be646:	195a      	adds	r2, r3, r5
   be648:	9217      	str	r2, [sp, #92]	; 0x5c
   be64a:	5d5a      	ldrb	r2, [r3, r5]
   be64c:	2f00      	cmp	r7, #0
   be64e:	d037      	beq.n	be6c0 <_strtod_l+0x250>
   be650:	9005      	str	r0, [sp, #20]
   be652:	463d      	mov	r5, r7
   be654:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   be658:	2b09      	cmp	r3, #9
   be65a:	d912      	bls.n	be682 <_strtod_l+0x212>
   be65c:	2301      	movs	r3, #1
   be65e:	e7c2      	b.n	be5e6 <_strtod_l+0x176>
   be660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be662:	1c5a      	adds	r2, r3, #1
   be664:	9217      	str	r2, [sp, #92]	; 0x5c
   be666:	785a      	ldrb	r2, [r3, #1]
   be668:	3001      	adds	r0, #1
   be66a:	2a30      	cmp	r2, #48	; 0x30
   be66c:	d0f8      	beq.n	be660 <_strtod_l+0x1f0>
   be66e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   be672:	2b08      	cmp	r3, #8
   be674:	f200 84d9 	bhi.w	bf02a <_strtod_l+0xbba>
   be678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be67a:	9005      	str	r0, [sp, #20]
   be67c:	2000      	movs	r0, #0
   be67e:	9308      	str	r3, [sp, #32]
   be680:	4605      	mov	r5, r0
   be682:	3a30      	subs	r2, #48	; 0x30
   be684:	f100 0301 	add.w	r3, r0, #1
   be688:	d014      	beq.n	be6b4 <_strtod_l+0x244>
   be68a:	9905      	ldr	r1, [sp, #20]
   be68c:	4419      	add	r1, r3
   be68e:	9105      	str	r1, [sp, #20]
   be690:	462b      	mov	r3, r5
   be692:	eb00 0e05 	add.w	lr, r0, r5
   be696:	210a      	movs	r1, #10
   be698:	4573      	cmp	r3, lr
   be69a:	d113      	bne.n	be6c4 <_strtod_l+0x254>
   be69c:	182b      	adds	r3, r5, r0
   be69e:	2b08      	cmp	r3, #8
   be6a0:	f105 0501 	add.w	r5, r5, #1
   be6a4:	4405      	add	r5, r0
   be6a6:	dc1c      	bgt.n	be6e2 <_strtod_l+0x272>
   be6a8:	9907      	ldr	r1, [sp, #28]
   be6aa:	230a      	movs	r3, #10
   be6ac:	fb03 2301 	mla	r3, r3, r1, r2
   be6b0:	9307      	str	r3, [sp, #28]
   be6b2:	2300      	movs	r3, #0
   be6b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be6b6:	1c51      	adds	r1, r2, #1
   be6b8:	9117      	str	r1, [sp, #92]	; 0x5c
   be6ba:	7852      	ldrb	r2, [r2, #1]
   be6bc:	4618      	mov	r0, r3
   be6be:	e7c9      	b.n	be654 <_strtod_l+0x1e4>
   be6c0:	4638      	mov	r0, r7
   be6c2:	e7d2      	b.n	be66a <_strtod_l+0x1fa>
   be6c4:	2b08      	cmp	r3, #8
   be6c6:	dc04      	bgt.n	be6d2 <_strtod_l+0x262>
   be6c8:	9e07      	ldr	r6, [sp, #28]
   be6ca:	434e      	muls	r6, r1
   be6cc:	9607      	str	r6, [sp, #28]
   be6ce:	3301      	adds	r3, #1
   be6d0:	e7e2      	b.n	be698 <_strtod_l+0x228>
   be6d2:	f103 0c01 	add.w	ip, r3, #1
   be6d6:	f1bc 0f10 	cmp.w	ip, #16
   be6da:	bfd8      	it	le
   be6dc:	fb01 f909 	mulle.w	r9, r1, r9
   be6e0:	e7f5      	b.n	be6ce <_strtod_l+0x25e>
   be6e2:	2d10      	cmp	r5, #16
   be6e4:	bfdc      	itt	le
   be6e6:	230a      	movle	r3, #10
   be6e8:	fb03 2909 	mlale	r9, r3, r9, r2
   be6ec:	e7e1      	b.n	be6b2 <_strtod_l+0x242>
   be6ee:	2300      	movs	r3, #0
   be6f0:	9305      	str	r3, [sp, #20]
   be6f2:	2301      	movs	r3, #1
   be6f4:	e77c      	b.n	be5f0 <_strtod_l+0x180>
   be6f6:	f04f 0c00 	mov.w	ip, #0
   be6fa:	f108 0202 	add.w	r2, r8, #2
   be6fe:	9217      	str	r2, [sp, #92]	; 0x5c
   be700:	f898 2002 	ldrb.w	r2, [r8, #2]
   be704:	e785      	b.n	be612 <_strtod_l+0x1a2>
   be706:	f04f 0c01 	mov.w	ip, #1
   be70a:	e7f6      	b.n	be6fa <_strtod_l+0x28a>
   be70c:	000c1e54 	.word	0x000c1e54
   be710:	000c1c90 	.word	0x000c1c90
   be714:	7ff00000 	.word	0x7ff00000
   be718:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be71a:	1c51      	adds	r1, r2, #1
   be71c:	9117      	str	r1, [sp, #92]	; 0x5c
   be71e:	7852      	ldrb	r2, [r2, #1]
   be720:	2a30      	cmp	r2, #48	; 0x30
   be722:	d0f9      	beq.n	be718 <_strtod_l+0x2a8>
   be724:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   be728:	2908      	cmp	r1, #8
   be72a:	f63f af79 	bhi.w	be620 <_strtod_l+0x1b0>
   be72e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   be732:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be734:	9206      	str	r2, [sp, #24]
   be736:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be738:	1c51      	adds	r1, r2, #1
   be73a:	9117      	str	r1, [sp, #92]	; 0x5c
   be73c:	7852      	ldrb	r2, [r2, #1]
   be73e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   be742:	2e09      	cmp	r6, #9
   be744:	d937      	bls.n	be7b6 <_strtod_l+0x346>
   be746:	9e06      	ldr	r6, [sp, #24]
   be748:	1b89      	subs	r1, r1, r6
   be74a:	2908      	cmp	r1, #8
   be74c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   be750:	dc02      	bgt.n	be758 <_strtod_l+0x2e8>
   be752:	4576      	cmp	r6, lr
   be754:	bfa8      	it	ge
   be756:	4676      	movge	r6, lr
   be758:	f1bc 0f00 	cmp.w	ip, #0
   be75c:	d000      	beq.n	be760 <_strtod_l+0x2f0>
   be75e:	4276      	negs	r6, r6
   be760:	2d00      	cmp	r5, #0
   be762:	d14d      	bne.n	be800 <_strtod_l+0x390>
   be764:	9904      	ldr	r1, [sp, #16]
   be766:	4301      	orrs	r1, r0
   be768:	f47f aec6 	bne.w	be4f8 <_strtod_l+0x88>
   be76c:	2b00      	cmp	r3, #0
   be76e:	f47f aee1 	bne.w	be534 <_strtod_l+0xc4>
   be772:	2a69      	cmp	r2, #105	; 0x69
   be774:	d027      	beq.n	be7c6 <_strtod_l+0x356>
   be776:	dc24      	bgt.n	be7c2 <_strtod_l+0x352>
   be778:	2a49      	cmp	r2, #73	; 0x49
   be77a:	d024      	beq.n	be7c6 <_strtod_l+0x356>
   be77c:	2a4e      	cmp	r2, #78	; 0x4e
   be77e:	f47f aed9 	bne.w	be534 <_strtod_l+0xc4>
   be782:	499f      	ldr	r1, [pc, #636]	; (bea00 <_strtod_l+0x590>)
   be784:	a817      	add	r0, sp, #92	; 0x5c
   be786:	f001 f833 	bl	bf7f0 <__match>
   be78a:	2800      	cmp	r0, #0
   be78c:	f43f aed2 	beq.w	be534 <_strtod_l+0xc4>
   be790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be792:	781b      	ldrb	r3, [r3, #0]
   be794:	2b28      	cmp	r3, #40	; 0x28
   be796:	d12d      	bne.n	be7f4 <_strtod_l+0x384>
   be798:	499a      	ldr	r1, [pc, #616]	; (bea04 <_strtod_l+0x594>)
   be79a:	aa1a      	add	r2, sp, #104	; 0x68
   be79c:	a817      	add	r0, sp, #92	; 0x5c
   be79e:	f001 f83b 	bl	bf818 <__hexnan>
   be7a2:	2805      	cmp	r0, #5
   be7a4:	d126      	bne.n	be7f4 <_strtod_l+0x384>
   be7a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be7a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   be7ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   be7b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   be7b4:	e6a0      	b.n	be4f8 <_strtod_l+0x88>
   be7b6:	210a      	movs	r1, #10
   be7b8:	fb01 2e0e 	mla	lr, r1, lr, r2
   be7bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   be7c0:	e7b9      	b.n	be736 <_strtod_l+0x2c6>
   be7c2:	2a6e      	cmp	r2, #110	; 0x6e
   be7c4:	e7db      	b.n	be77e <_strtod_l+0x30e>
   be7c6:	4990      	ldr	r1, [pc, #576]	; (bea08 <_strtod_l+0x598>)
   be7c8:	a817      	add	r0, sp, #92	; 0x5c
   be7ca:	f001 f811 	bl	bf7f0 <__match>
   be7ce:	2800      	cmp	r0, #0
   be7d0:	f43f aeb0 	beq.w	be534 <_strtod_l+0xc4>
   be7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be7d6:	498d      	ldr	r1, [pc, #564]	; (bea0c <_strtod_l+0x59c>)
   be7d8:	3b01      	subs	r3, #1
   be7da:	a817      	add	r0, sp, #92	; 0x5c
   be7dc:	9317      	str	r3, [sp, #92]	; 0x5c
   be7de:	f001 f807 	bl	bf7f0 <__match>
   be7e2:	b910      	cbnz	r0, be7ea <_strtod_l+0x37a>
   be7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be7e6:	3301      	adds	r3, #1
   be7e8:	9317      	str	r3, [sp, #92]	; 0x5c
   be7ea:	f8df b230 	ldr.w	fp, [pc, #560]	; bea1c <_strtod_l+0x5ac>
   be7ee:	f04f 0a00 	mov.w	sl, #0
   be7f2:	e681      	b.n	be4f8 <_strtod_l+0x88>
   be7f4:	4886      	ldr	r0, [pc, #536]	; (bea10 <_strtod_l+0x5a0>)
   be7f6:	f001 fd93 	bl	c0320 <nan>
   be7fa:	ec5b ab10 	vmov	sl, fp, d0
   be7fe:	e67b      	b.n	be4f8 <_strtod_l+0x88>
   be800:	9b05      	ldr	r3, [sp, #20]
   be802:	9807      	ldr	r0, [sp, #28]
   be804:	1af3      	subs	r3, r6, r3
   be806:	2f00      	cmp	r7, #0
   be808:	bf08      	it	eq
   be80a:	462f      	moveq	r7, r5
   be80c:	2d10      	cmp	r5, #16
   be80e:	9306      	str	r3, [sp, #24]
   be810:	46a8      	mov	r8, r5
   be812:	bfa8      	it	ge
   be814:	f04f 0810 	movge.w	r8, #16
   be818:	f7ff f938 	bl	bda8c <__aeabi_ui2d>
   be81c:	2d09      	cmp	r5, #9
   be81e:	4682      	mov	sl, r0
   be820:	468b      	mov	fp, r1
   be822:	dd13      	ble.n	be84c <_strtod_l+0x3dc>
   be824:	4b7b      	ldr	r3, [pc, #492]	; (bea14 <_strtod_l+0x5a4>)
   be826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   be82a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   be82e:	f7ff f9a7 	bl	bdb80 <__aeabi_dmul>
   be832:	4682      	mov	sl, r0
   be834:	4648      	mov	r0, r9
   be836:	468b      	mov	fp, r1
   be838:	f7ff f928 	bl	bda8c <__aeabi_ui2d>
   be83c:	4602      	mov	r2, r0
   be83e:	460b      	mov	r3, r1
   be840:	4650      	mov	r0, sl
   be842:	4659      	mov	r1, fp
   be844:	f7fe ffe6 	bl	bd814 <__adddf3>
   be848:	4682      	mov	sl, r0
   be84a:	468b      	mov	fp, r1
   be84c:	2d0f      	cmp	r5, #15
   be84e:	dc38      	bgt.n	be8c2 <_strtod_l+0x452>
   be850:	9b06      	ldr	r3, [sp, #24]
   be852:	2b00      	cmp	r3, #0
   be854:	f43f ae50 	beq.w	be4f8 <_strtod_l+0x88>
   be858:	dd24      	ble.n	be8a4 <_strtod_l+0x434>
   be85a:	2b16      	cmp	r3, #22
   be85c:	dc0b      	bgt.n	be876 <_strtod_l+0x406>
   be85e:	496d      	ldr	r1, [pc, #436]	; (bea14 <_strtod_l+0x5a4>)
   be860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be864:	e9d1 0100 	ldrd	r0, r1, [r1]
   be868:	4652      	mov	r2, sl
   be86a:	465b      	mov	r3, fp
   be86c:	f7ff f988 	bl	bdb80 <__aeabi_dmul>
   be870:	4682      	mov	sl, r0
   be872:	468b      	mov	fp, r1
   be874:	e640      	b.n	be4f8 <_strtod_l+0x88>
   be876:	9a06      	ldr	r2, [sp, #24]
   be878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   be87c:	4293      	cmp	r3, r2
   be87e:	db20      	blt.n	be8c2 <_strtod_l+0x452>
   be880:	4c64      	ldr	r4, [pc, #400]	; (bea14 <_strtod_l+0x5a4>)
   be882:	f1c5 050f 	rsb	r5, r5, #15
   be886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   be88a:	4652      	mov	r2, sl
   be88c:	465b      	mov	r3, fp
   be88e:	e9d1 0100 	ldrd	r0, r1, [r1]
   be892:	f7ff f975 	bl	bdb80 <__aeabi_dmul>
   be896:	9b06      	ldr	r3, [sp, #24]
   be898:	1b5d      	subs	r5, r3, r5
   be89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   be89e:	e9d4 2300 	ldrd	r2, r3, [r4]
   be8a2:	e7e3      	b.n	be86c <_strtod_l+0x3fc>
   be8a4:	9b06      	ldr	r3, [sp, #24]
   be8a6:	3316      	adds	r3, #22
   be8a8:	db0b      	blt.n	be8c2 <_strtod_l+0x452>
   be8aa:	9b05      	ldr	r3, [sp, #20]
   be8ac:	1b9e      	subs	r6, r3, r6
   be8ae:	4b59      	ldr	r3, [pc, #356]	; (bea14 <_strtod_l+0x5a4>)
   be8b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   be8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
   be8b8:	4650      	mov	r0, sl
   be8ba:	4659      	mov	r1, fp
   be8bc:	f7ff fa8a 	bl	bddd4 <__aeabi_ddiv>
   be8c0:	e7d6      	b.n	be870 <_strtod_l+0x400>
   be8c2:	9b06      	ldr	r3, [sp, #24]
   be8c4:	eba5 0808 	sub.w	r8, r5, r8
   be8c8:	4498      	add	r8, r3
   be8ca:	f1b8 0f00 	cmp.w	r8, #0
   be8ce:	dd74      	ble.n	be9ba <_strtod_l+0x54a>
   be8d0:	f018 030f 	ands.w	r3, r8, #15
   be8d4:	d00a      	beq.n	be8ec <_strtod_l+0x47c>
   be8d6:	494f      	ldr	r1, [pc, #316]	; (bea14 <_strtod_l+0x5a4>)
   be8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be8dc:	4652      	mov	r2, sl
   be8de:	465b      	mov	r3, fp
   be8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   be8e4:	f7ff f94c 	bl	bdb80 <__aeabi_dmul>
   be8e8:	4682      	mov	sl, r0
   be8ea:	468b      	mov	fp, r1
   be8ec:	f038 080f 	bics.w	r8, r8, #15
   be8f0:	d04f      	beq.n	be992 <_strtod_l+0x522>
   be8f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   be8f6:	dd22      	ble.n	be93e <_strtod_l+0x4ce>
   be8f8:	2500      	movs	r5, #0
   be8fa:	462e      	mov	r6, r5
   be8fc:	9507      	str	r5, [sp, #28]
   be8fe:	9505      	str	r5, [sp, #20]
   be900:	2322      	movs	r3, #34	; 0x22
   be902:	f8df b118 	ldr.w	fp, [pc, #280]	; bea1c <_strtod_l+0x5ac>
   be906:	6023      	str	r3, [r4, #0]
   be908:	f04f 0a00 	mov.w	sl, #0
   be90c:	9b07      	ldr	r3, [sp, #28]
   be90e:	2b00      	cmp	r3, #0
   be910:	f43f adf2 	beq.w	be4f8 <_strtod_l+0x88>
   be914:	9918      	ldr	r1, [sp, #96]	; 0x60
   be916:	4620      	mov	r0, r4
   be918:	f001 f870 	bl	bf9fc <_Bfree>
   be91c:	9905      	ldr	r1, [sp, #20]
   be91e:	4620      	mov	r0, r4
   be920:	f001 f86c 	bl	bf9fc <_Bfree>
   be924:	4631      	mov	r1, r6
   be926:	4620      	mov	r0, r4
   be928:	f001 f868 	bl	bf9fc <_Bfree>
   be92c:	9907      	ldr	r1, [sp, #28]
   be92e:	4620      	mov	r0, r4
   be930:	f001 f864 	bl	bf9fc <_Bfree>
   be934:	4629      	mov	r1, r5
   be936:	4620      	mov	r0, r4
   be938:	f001 f860 	bl	bf9fc <_Bfree>
   be93c:	e5dc      	b.n	be4f8 <_strtod_l+0x88>
   be93e:	4b36      	ldr	r3, [pc, #216]	; (bea18 <_strtod_l+0x5a8>)
   be940:	9304      	str	r3, [sp, #16]
   be942:	2300      	movs	r3, #0
   be944:	ea4f 1828 	mov.w	r8, r8, asr #4
   be948:	4650      	mov	r0, sl
   be94a:	4659      	mov	r1, fp
   be94c:	4699      	mov	r9, r3
   be94e:	f1b8 0f01 	cmp.w	r8, #1
   be952:	dc21      	bgt.n	be998 <_strtod_l+0x528>
   be954:	b10b      	cbz	r3, be95a <_strtod_l+0x4ea>
   be956:	4682      	mov	sl, r0
   be958:	468b      	mov	fp, r1
   be95a:	4b2f      	ldr	r3, [pc, #188]	; (bea18 <_strtod_l+0x5a8>)
   be95c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   be960:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   be964:	4652      	mov	r2, sl
   be966:	465b      	mov	r3, fp
   be968:	e9d9 0100 	ldrd	r0, r1, [r9]
   be96c:	f7ff f908 	bl	bdb80 <__aeabi_dmul>
   be970:	4b2a      	ldr	r3, [pc, #168]	; (bea1c <_strtod_l+0x5ac>)
   be972:	460a      	mov	r2, r1
   be974:	400b      	ands	r3, r1
   be976:	492a      	ldr	r1, [pc, #168]	; (bea20 <_strtod_l+0x5b0>)
   be978:	428b      	cmp	r3, r1
   be97a:	4682      	mov	sl, r0
   be97c:	d8bc      	bhi.n	be8f8 <_strtod_l+0x488>
   be97e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   be982:	428b      	cmp	r3, r1
   be984:	bf86      	itte	hi
   be986:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bea24 <_strtod_l+0x5b4>
   be98a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   be98e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   be992:	2300      	movs	r3, #0
   be994:	9304      	str	r3, [sp, #16]
   be996:	e084      	b.n	beaa2 <_strtod_l+0x632>
   be998:	f018 0f01 	tst.w	r8, #1
   be99c:	d005      	beq.n	be9aa <_strtod_l+0x53a>
   be99e:	9b04      	ldr	r3, [sp, #16]
   be9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   be9a4:	f7ff f8ec 	bl	bdb80 <__aeabi_dmul>
   be9a8:	2301      	movs	r3, #1
   be9aa:	9a04      	ldr	r2, [sp, #16]
   be9ac:	3208      	adds	r2, #8
   be9ae:	f109 0901 	add.w	r9, r9, #1
   be9b2:	ea4f 0868 	mov.w	r8, r8, asr #1
   be9b6:	9204      	str	r2, [sp, #16]
   be9b8:	e7c9      	b.n	be94e <_strtod_l+0x4de>
   be9ba:	d0ea      	beq.n	be992 <_strtod_l+0x522>
   be9bc:	f1c8 0800 	rsb	r8, r8, #0
   be9c0:	f018 020f 	ands.w	r2, r8, #15
   be9c4:	d00a      	beq.n	be9dc <_strtod_l+0x56c>
   be9c6:	4b13      	ldr	r3, [pc, #76]	; (bea14 <_strtod_l+0x5a4>)
   be9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   be9cc:	4650      	mov	r0, sl
   be9ce:	4659      	mov	r1, fp
   be9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   be9d4:	f7ff f9fe 	bl	bddd4 <__aeabi_ddiv>
   be9d8:	4682      	mov	sl, r0
   be9da:	468b      	mov	fp, r1
   be9dc:	ea5f 1828 	movs.w	r8, r8, asr #4
   be9e0:	d0d7      	beq.n	be992 <_strtod_l+0x522>
   be9e2:	f1b8 0f1f 	cmp.w	r8, #31
   be9e6:	dd1f      	ble.n	bea28 <_strtod_l+0x5b8>
   be9e8:	2500      	movs	r5, #0
   be9ea:	462e      	mov	r6, r5
   be9ec:	9507      	str	r5, [sp, #28]
   be9ee:	9505      	str	r5, [sp, #20]
   be9f0:	2322      	movs	r3, #34	; 0x22
   be9f2:	f04f 0a00 	mov.w	sl, #0
   be9f6:	f04f 0b00 	mov.w	fp, #0
   be9fa:	6023      	str	r3, [r4, #0]
   be9fc:	e786      	b.n	be90c <_strtod_l+0x49c>
   be9fe:	bf00      	nop
   bea00:	000c1c8a 	.word	0x000c1c8a
   bea04:	000c1ca4 	.word	0x000c1ca4
   bea08:	000c1c81 	.word	0x000c1c81
   bea0c:	000c1c84 	.word	0x000c1c84
   bea10:	000c0907 	.word	0x000c0907
   bea14:	000c1ef0 	.word	0x000c1ef0
   bea18:	000c1ec8 	.word	0x000c1ec8
   bea1c:	7ff00000 	.word	0x7ff00000
   bea20:	7ca00000 	.word	0x7ca00000
   bea24:	7fefffff 	.word	0x7fefffff
   bea28:	f018 0310 	ands.w	r3, r8, #16
   bea2c:	bf18      	it	ne
   bea2e:	236a      	movne	r3, #106	; 0x6a
   bea30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bede0 <_strtod_l+0x970>
   bea34:	9304      	str	r3, [sp, #16]
   bea36:	4650      	mov	r0, sl
   bea38:	4659      	mov	r1, fp
   bea3a:	2300      	movs	r3, #0
   bea3c:	f018 0f01 	tst.w	r8, #1
   bea40:	d004      	beq.n	bea4c <_strtod_l+0x5dc>
   bea42:	e9d9 2300 	ldrd	r2, r3, [r9]
   bea46:	f7ff f89b 	bl	bdb80 <__aeabi_dmul>
   bea4a:	2301      	movs	r3, #1
   bea4c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bea50:	f109 0908 	add.w	r9, r9, #8
   bea54:	d1f2      	bne.n	bea3c <_strtod_l+0x5cc>
   bea56:	b10b      	cbz	r3, bea5c <_strtod_l+0x5ec>
   bea58:	4682      	mov	sl, r0
   bea5a:	468b      	mov	fp, r1
   bea5c:	9b04      	ldr	r3, [sp, #16]
   bea5e:	b1c3      	cbz	r3, bea92 <_strtod_l+0x622>
   bea60:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bea64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bea68:	2b00      	cmp	r3, #0
   bea6a:	4659      	mov	r1, fp
   bea6c:	dd11      	ble.n	bea92 <_strtod_l+0x622>
   bea6e:	2b1f      	cmp	r3, #31
   bea70:	f340 8124 	ble.w	becbc <_strtod_l+0x84c>
   bea74:	2b34      	cmp	r3, #52	; 0x34
   bea76:	bfde      	ittt	le
   bea78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bea7c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bea80:	fa03 f202 	lslle.w	r2, r3, r2
   bea84:	f04f 0a00 	mov.w	sl, #0
   bea88:	bfcc      	ite	gt
   bea8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bea8e:	ea02 0b01 	andle.w	fp, r2, r1
   bea92:	2200      	movs	r2, #0
   bea94:	2300      	movs	r3, #0
   bea96:	4650      	mov	r0, sl
   bea98:	4659      	mov	r1, fp
   bea9a:	f7ff fad9 	bl	be050 <__aeabi_dcmpeq>
   bea9e:	2800      	cmp	r0, #0
   beaa0:	d1a2      	bne.n	be9e8 <_strtod_l+0x578>
   beaa2:	9b07      	ldr	r3, [sp, #28]
   beaa4:	9300      	str	r3, [sp, #0]
   beaa6:	9908      	ldr	r1, [sp, #32]
   beaa8:	462b      	mov	r3, r5
   beaaa:	463a      	mov	r2, r7
   beaac:	4620      	mov	r0, r4
   beaae:	f001 f80d 	bl	bfacc <__s2b>
   beab2:	9007      	str	r0, [sp, #28]
   beab4:	2800      	cmp	r0, #0
   beab6:	f43f af1f 	beq.w	be8f8 <_strtod_l+0x488>
   beaba:	9b05      	ldr	r3, [sp, #20]
   beabc:	1b9e      	subs	r6, r3, r6
   beabe:	9b06      	ldr	r3, [sp, #24]
   beac0:	2b00      	cmp	r3, #0
   beac2:	bfb4      	ite	lt
   beac4:	4633      	movlt	r3, r6
   beac6:	2300      	movge	r3, #0
   beac8:	930c      	str	r3, [sp, #48]	; 0x30
   beaca:	9b06      	ldr	r3, [sp, #24]
   beacc:	2500      	movs	r5, #0
   beace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bead2:	9312      	str	r3, [sp, #72]	; 0x48
   bead4:	462e      	mov	r6, r5
   bead6:	9b07      	ldr	r3, [sp, #28]
   bead8:	4620      	mov	r0, r4
   beada:	6859      	ldr	r1, [r3, #4]
   beadc:	f000 ff4e 	bl	bf97c <_Balloc>
   beae0:	9005      	str	r0, [sp, #20]
   beae2:	2800      	cmp	r0, #0
   beae4:	f43f af0c 	beq.w	be900 <_strtod_l+0x490>
   beae8:	9b07      	ldr	r3, [sp, #28]
   beaea:	691a      	ldr	r2, [r3, #16]
   beaec:	3202      	adds	r2, #2
   beaee:	f103 010c 	add.w	r1, r3, #12
   beaf2:	0092      	lsls	r2, r2, #2
   beaf4:	300c      	adds	r0, #12
   beaf6:	f7ff fb88 	bl	be20a <memcpy>
   beafa:	ec4b ab10 	vmov	d0, sl, fp
   beafe:	aa1a      	add	r2, sp, #104	; 0x68
   beb00:	a919      	add	r1, sp, #100	; 0x64
   beb02:	4620      	mov	r0, r4
   beb04:	f001 fb28 	bl	c0158 <__d2b>
   beb08:	ec4b ab18 	vmov	d8, sl, fp
   beb0c:	9018      	str	r0, [sp, #96]	; 0x60
   beb0e:	2800      	cmp	r0, #0
   beb10:	f43f aef6 	beq.w	be900 <_strtod_l+0x490>
   beb14:	2101      	movs	r1, #1
   beb16:	4620      	mov	r0, r4
   beb18:	f001 f872 	bl	bfc00 <__i2b>
   beb1c:	4606      	mov	r6, r0
   beb1e:	2800      	cmp	r0, #0
   beb20:	f43f aeee 	beq.w	be900 <_strtod_l+0x490>
   beb24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   beb26:	9904      	ldr	r1, [sp, #16]
   beb28:	2b00      	cmp	r3, #0
   beb2a:	bfab      	itete	ge
   beb2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   beb2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   beb30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   beb32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   beb36:	bfac      	ite	ge
   beb38:	eb03 0902 	addge.w	r9, r3, r2
   beb3c:	1ad7      	sublt	r7, r2, r3
   beb3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   beb40:	eba3 0801 	sub.w	r8, r3, r1
   beb44:	4490      	add	r8, r2
   beb46:	4ba1      	ldr	r3, [pc, #644]	; (bedcc <_strtod_l+0x95c>)
   beb48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   beb4c:	4598      	cmp	r8, r3
   beb4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   beb52:	f280 80c7 	bge.w	bece4 <_strtod_l+0x874>
   beb56:	eba3 0308 	sub.w	r3, r3, r8
   beb5a:	2b1f      	cmp	r3, #31
   beb5c:	eba2 0203 	sub.w	r2, r2, r3
   beb60:	f04f 0101 	mov.w	r1, #1
   beb64:	f300 80b1 	bgt.w	becca <_strtod_l+0x85a>
   beb68:	fa01 f303 	lsl.w	r3, r1, r3
   beb6c:	930d      	str	r3, [sp, #52]	; 0x34
   beb6e:	2300      	movs	r3, #0
   beb70:	9308      	str	r3, [sp, #32]
   beb72:	eb09 0802 	add.w	r8, r9, r2
   beb76:	9b04      	ldr	r3, [sp, #16]
   beb78:	45c1      	cmp	r9, r8
   beb7a:	4417      	add	r7, r2
   beb7c:	441f      	add	r7, r3
   beb7e:	464b      	mov	r3, r9
   beb80:	bfa8      	it	ge
   beb82:	4643      	movge	r3, r8
   beb84:	42bb      	cmp	r3, r7
   beb86:	bfa8      	it	ge
   beb88:	463b      	movge	r3, r7
   beb8a:	2b00      	cmp	r3, #0
   beb8c:	bfc2      	ittt	gt
   beb8e:	eba8 0803 	subgt.w	r8, r8, r3
   beb92:	1aff      	subgt	r7, r7, r3
   beb94:	eba9 0903 	subgt.w	r9, r9, r3
   beb98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   beb9a:	2b00      	cmp	r3, #0
   beb9c:	dd17      	ble.n	bebce <_strtod_l+0x75e>
   beb9e:	4631      	mov	r1, r6
   beba0:	461a      	mov	r2, r3
   beba2:	4620      	mov	r0, r4
   beba4:	f001 f8ec 	bl	bfd80 <__pow5mult>
   beba8:	4606      	mov	r6, r0
   bebaa:	2800      	cmp	r0, #0
   bebac:	f43f aea8 	beq.w	be900 <_strtod_l+0x490>
   bebb0:	4601      	mov	r1, r0
   bebb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bebb4:	4620      	mov	r0, r4
   bebb6:	f001 f839 	bl	bfc2c <__multiply>
   bebba:	900b      	str	r0, [sp, #44]	; 0x2c
   bebbc:	2800      	cmp	r0, #0
   bebbe:	f43f ae9f 	beq.w	be900 <_strtod_l+0x490>
   bebc2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bebc4:	4620      	mov	r0, r4
   bebc6:	f000 ff19 	bl	bf9fc <_Bfree>
   bebca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bebcc:	9318      	str	r3, [sp, #96]	; 0x60
   bebce:	f1b8 0f00 	cmp.w	r8, #0
   bebd2:	f300 808c 	bgt.w	becee <_strtod_l+0x87e>
   bebd6:	9b06      	ldr	r3, [sp, #24]
   bebd8:	2b00      	cmp	r3, #0
   bebda:	dd08      	ble.n	bebee <_strtod_l+0x77e>
   bebdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bebde:	9905      	ldr	r1, [sp, #20]
   bebe0:	4620      	mov	r0, r4
   bebe2:	f001 f8cd 	bl	bfd80 <__pow5mult>
   bebe6:	9005      	str	r0, [sp, #20]
   bebe8:	2800      	cmp	r0, #0
   bebea:	f43f ae89 	beq.w	be900 <_strtod_l+0x490>
   bebee:	2f00      	cmp	r7, #0
   bebf0:	dd08      	ble.n	bec04 <_strtod_l+0x794>
   bebf2:	9905      	ldr	r1, [sp, #20]
   bebf4:	463a      	mov	r2, r7
   bebf6:	4620      	mov	r0, r4
   bebf8:	f001 f91c 	bl	bfe34 <__lshift>
   bebfc:	9005      	str	r0, [sp, #20]
   bebfe:	2800      	cmp	r0, #0
   bec00:	f43f ae7e 	beq.w	be900 <_strtod_l+0x490>
   bec04:	f1b9 0f00 	cmp.w	r9, #0
   bec08:	dd08      	ble.n	bec1c <_strtod_l+0x7ac>
   bec0a:	4631      	mov	r1, r6
   bec0c:	464a      	mov	r2, r9
   bec0e:	4620      	mov	r0, r4
   bec10:	f001 f910 	bl	bfe34 <__lshift>
   bec14:	4606      	mov	r6, r0
   bec16:	2800      	cmp	r0, #0
   bec18:	f43f ae72 	beq.w	be900 <_strtod_l+0x490>
   bec1c:	9a05      	ldr	r2, [sp, #20]
   bec1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bec20:	4620      	mov	r0, r4
   bec22:	f001 f993 	bl	bff4c <__mdiff>
   bec26:	4605      	mov	r5, r0
   bec28:	2800      	cmp	r0, #0
   bec2a:	f43f ae69 	beq.w	be900 <_strtod_l+0x490>
   bec2e:	68c3      	ldr	r3, [r0, #12]
   bec30:	930b      	str	r3, [sp, #44]	; 0x2c
   bec32:	2300      	movs	r3, #0
   bec34:	60c3      	str	r3, [r0, #12]
   bec36:	4631      	mov	r1, r6
   bec38:	f001 f96c 	bl	bff14 <__mcmp>
   bec3c:	2800      	cmp	r0, #0
   bec3e:	da60      	bge.n	bed02 <_strtod_l+0x892>
   bec40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bec42:	ea53 030a 	orrs.w	r3, r3, sl
   bec46:	f040 8082 	bne.w	bed4e <_strtod_l+0x8de>
   bec4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bec4e:	2b00      	cmp	r3, #0
   bec50:	d17d      	bne.n	bed4e <_strtod_l+0x8de>
   bec52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bec56:	0d1b      	lsrs	r3, r3, #20
   bec58:	051b      	lsls	r3, r3, #20
   bec5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bec5e:	d976      	bls.n	bed4e <_strtod_l+0x8de>
   bec60:	696b      	ldr	r3, [r5, #20]
   bec62:	b913      	cbnz	r3, bec6a <_strtod_l+0x7fa>
   bec64:	692b      	ldr	r3, [r5, #16]
   bec66:	2b01      	cmp	r3, #1
   bec68:	dd71      	ble.n	bed4e <_strtod_l+0x8de>
   bec6a:	4629      	mov	r1, r5
   bec6c:	2201      	movs	r2, #1
   bec6e:	4620      	mov	r0, r4
   bec70:	f001 f8e0 	bl	bfe34 <__lshift>
   bec74:	4631      	mov	r1, r6
   bec76:	4605      	mov	r5, r0
   bec78:	f001 f94c 	bl	bff14 <__mcmp>
   bec7c:	2800      	cmp	r0, #0
   bec7e:	dd66      	ble.n	bed4e <_strtod_l+0x8de>
   bec80:	9904      	ldr	r1, [sp, #16]
   bec82:	4a53      	ldr	r2, [pc, #332]	; (bedd0 <_strtod_l+0x960>)
   bec84:	465b      	mov	r3, fp
   bec86:	2900      	cmp	r1, #0
   bec88:	f000 8081 	beq.w	bed8e <_strtod_l+0x91e>
   bec8c:	ea02 010b 	and.w	r1, r2, fp
   bec90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bec94:	dc7b      	bgt.n	bed8e <_strtod_l+0x91e>
   bec96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bec9a:	f77f aea9 	ble.w	be9f0 <_strtod_l+0x580>
   bec9e:	4b4d      	ldr	r3, [pc, #308]	; (bedd4 <_strtod_l+0x964>)
   beca0:	4650      	mov	r0, sl
   beca2:	4659      	mov	r1, fp
   beca4:	2200      	movs	r2, #0
   beca6:	f7fe ff6b 	bl	bdb80 <__aeabi_dmul>
   becaa:	460b      	mov	r3, r1
   becac:	4303      	orrs	r3, r0
   becae:	bf08      	it	eq
   becb0:	2322      	moveq	r3, #34	; 0x22
   becb2:	4682      	mov	sl, r0
   becb4:	468b      	mov	fp, r1
   becb6:	bf08      	it	eq
   becb8:	6023      	streq	r3, [r4, #0]
   becba:	e62b      	b.n	be914 <_strtod_l+0x4a4>
   becbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   becc0:	fa02 f303 	lsl.w	r3, r2, r3
   becc4:	ea03 0a0a 	and.w	sl, r3, sl
   becc8:	e6e3      	b.n	bea92 <_strtod_l+0x622>
   becca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   becce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   becd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   becd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   becda:	fa01 f308 	lsl.w	r3, r1, r8
   becde:	9308      	str	r3, [sp, #32]
   bece0:	910d      	str	r1, [sp, #52]	; 0x34
   bece2:	e746      	b.n	beb72 <_strtod_l+0x702>
   bece4:	2300      	movs	r3, #0
   bece6:	9308      	str	r3, [sp, #32]
   bece8:	2301      	movs	r3, #1
   becea:	930d      	str	r3, [sp, #52]	; 0x34
   becec:	e741      	b.n	beb72 <_strtod_l+0x702>
   becee:	9918      	ldr	r1, [sp, #96]	; 0x60
   becf0:	4642      	mov	r2, r8
   becf2:	4620      	mov	r0, r4
   becf4:	f001 f89e 	bl	bfe34 <__lshift>
   becf8:	9018      	str	r0, [sp, #96]	; 0x60
   becfa:	2800      	cmp	r0, #0
   becfc:	f47f af6b 	bne.w	bebd6 <_strtod_l+0x766>
   bed00:	e5fe      	b.n	be900 <_strtod_l+0x490>
   bed02:	465f      	mov	r7, fp
   bed04:	d16e      	bne.n	bede4 <_strtod_l+0x974>
   bed06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bed08:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bed0c:	b342      	cbz	r2, bed60 <_strtod_l+0x8f0>
   bed0e:	4a32      	ldr	r2, [pc, #200]	; (bedd8 <_strtod_l+0x968>)
   bed10:	4293      	cmp	r3, r2
   bed12:	d128      	bne.n	bed66 <_strtod_l+0x8f6>
   bed14:	9b04      	ldr	r3, [sp, #16]
   bed16:	4651      	mov	r1, sl
   bed18:	b1eb      	cbz	r3, bed56 <_strtod_l+0x8e6>
   bed1a:	4b2d      	ldr	r3, [pc, #180]	; (bedd0 <_strtod_l+0x960>)
   bed1c:	403b      	ands	r3, r7
   bed1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bed22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bed26:	d819      	bhi.n	bed5c <_strtod_l+0x8ec>
   bed28:	0d1b      	lsrs	r3, r3, #20
   bed2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bed2e:	fa02 f303 	lsl.w	r3, r2, r3
   bed32:	4299      	cmp	r1, r3
   bed34:	d117      	bne.n	bed66 <_strtod_l+0x8f6>
   bed36:	4b29      	ldr	r3, [pc, #164]	; (beddc <_strtod_l+0x96c>)
   bed38:	429f      	cmp	r7, r3
   bed3a:	d102      	bne.n	bed42 <_strtod_l+0x8d2>
   bed3c:	3101      	adds	r1, #1
   bed3e:	f43f addf 	beq.w	be900 <_strtod_l+0x490>
   bed42:	4b23      	ldr	r3, [pc, #140]	; (bedd0 <_strtod_l+0x960>)
   bed44:	403b      	ands	r3, r7
   bed46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bed4a:	f04f 0a00 	mov.w	sl, #0
   bed4e:	9b04      	ldr	r3, [sp, #16]
   bed50:	2b00      	cmp	r3, #0
   bed52:	d1a4      	bne.n	bec9e <_strtod_l+0x82e>
   bed54:	e5de      	b.n	be914 <_strtod_l+0x4a4>
   bed56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bed5a:	e7ea      	b.n	bed32 <_strtod_l+0x8c2>
   bed5c:	4613      	mov	r3, r2
   bed5e:	e7e8      	b.n	bed32 <_strtod_l+0x8c2>
   bed60:	ea53 030a 	orrs.w	r3, r3, sl
   bed64:	d08c      	beq.n	bec80 <_strtod_l+0x810>
   bed66:	9b08      	ldr	r3, [sp, #32]
   bed68:	b1db      	cbz	r3, beda2 <_strtod_l+0x932>
   bed6a:	423b      	tst	r3, r7
   bed6c:	d0ef      	beq.n	bed4e <_strtod_l+0x8de>
   bed6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bed70:	9a04      	ldr	r2, [sp, #16]
   bed72:	4650      	mov	r0, sl
   bed74:	4659      	mov	r1, fp
   bed76:	b1c3      	cbz	r3, bedaa <_strtod_l+0x93a>
   bed78:	f7ff fb5e 	bl	be438 <sulp>
   bed7c:	4602      	mov	r2, r0
   bed7e:	460b      	mov	r3, r1
   bed80:	ec51 0b18 	vmov	r0, r1, d8
   bed84:	f7fe fd46 	bl	bd814 <__adddf3>
   bed88:	4682      	mov	sl, r0
   bed8a:	468b      	mov	fp, r1
   bed8c:	e7df      	b.n	bed4e <_strtod_l+0x8de>
   bed8e:	4013      	ands	r3, r2
   bed90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bed94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bed98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bed9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   beda0:	e7d5      	b.n	bed4e <_strtod_l+0x8de>
   beda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   beda4:	ea13 0f0a 	tst.w	r3, sl
   beda8:	e7e0      	b.n	bed6c <_strtod_l+0x8fc>
   bedaa:	f7ff fb45 	bl	be438 <sulp>
   bedae:	4602      	mov	r2, r0
   bedb0:	460b      	mov	r3, r1
   bedb2:	ec51 0b18 	vmov	r0, r1, d8
   bedb6:	f7fe fd2b 	bl	bd810 <__aeabi_dsub>
   bedba:	2200      	movs	r2, #0
   bedbc:	2300      	movs	r3, #0
   bedbe:	4682      	mov	sl, r0
   bedc0:	468b      	mov	fp, r1
   bedc2:	f7ff f945 	bl	be050 <__aeabi_dcmpeq>
   bedc6:	2800      	cmp	r0, #0
   bedc8:	d0c1      	beq.n	bed4e <_strtod_l+0x8de>
   bedca:	e611      	b.n	be9f0 <_strtod_l+0x580>
   bedcc:	fffffc02 	.word	0xfffffc02
   bedd0:	7ff00000 	.word	0x7ff00000
   bedd4:	39500000 	.word	0x39500000
   bedd8:	000fffff 	.word	0x000fffff
   beddc:	7fefffff 	.word	0x7fefffff
   bede0:	000c1cb8 	.word	0x000c1cb8
   bede4:	4631      	mov	r1, r6
   bede6:	4628      	mov	r0, r5
   bede8:	f001 fa12 	bl	c0210 <__ratio>
   bedec:	ec59 8b10 	vmov	r8, r9, d0
   bedf0:	ee10 0a10 	vmov	r0, s0
   bedf4:	2200      	movs	r2, #0
   bedf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bedfa:	4649      	mov	r1, r9
   bedfc:	f7ff f93c 	bl	be078 <__aeabi_dcmple>
   bee00:	2800      	cmp	r0, #0
   bee02:	d07a      	beq.n	beefa <_strtod_l+0xa8a>
   bee04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bee06:	2b00      	cmp	r3, #0
   bee08:	d04a      	beq.n	beea0 <_strtod_l+0xa30>
   bee0a:	4b95      	ldr	r3, [pc, #596]	; (bf060 <_strtod_l+0xbf0>)
   bee0c:	2200      	movs	r2, #0
   bee0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bee12:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf060 <_strtod_l+0xbf0>
   bee16:	f04f 0800 	mov.w	r8, #0
   bee1a:	4b92      	ldr	r3, [pc, #584]	; (bf064 <_strtod_l+0xbf4>)
   bee1c:	403b      	ands	r3, r7
   bee1e:	930d      	str	r3, [sp, #52]	; 0x34
   bee20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bee22:	4b91      	ldr	r3, [pc, #580]	; (bf068 <_strtod_l+0xbf8>)
   bee24:	429a      	cmp	r2, r3
   bee26:	f040 80b0 	bne.w	bef8a <_strtod_l+0xb1a>
   bee2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bee2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bee32:	ec4b ab10 	vmov	d0, sl, fp
   bee36:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bee3a:	f001 f911 	bl	c0060 <__ulp>
   bee3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bee42:	ec53 2b10 	vmov	r2, r3, d0
   bee46:	f7fe fe9b 	bl	bdb80 <__aeabi_dmul>
   bee4a:	4652      	mov	r2, sl
   bee4c:	465b      	mov	r3, fp
   bee4e:	f7fe fce1 	bl	bd814 <__adddf3>
   bee52:	460b      	mov	r3, r1
   bee54:	4983      	ldr	r1, [pc, #524]	; (bf064 <_strtod_l+0xbf4>)
   bee56:	4a85      	ldr	r2, [pc, #532]	; (bf06c <_strtod_l+0xbfc>)
   bee58:	4019      	ands	r1, r3
   bee5a:	4291      	cmp	r1, r2
   bee5c:	4682      	mov	sl, r0
   bee5e:	d960      	bls.n	bef22 <_strtod_l+0xab2>
   bee60:	ee18 3a90 	vmov	r3, s17
   bee64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bee68:	4293      	cmp	r3, r2
   bee6a:	d104      	bne.n	bee76 <_strtod_l+0xa06>
   bee6c:	ee18 3a10 	vmov	r3, s16
   bee70:	3301      	adds	r3, #1
   bee72:	f43f ad45 	beq.w	be900 <_strtod_l+0x490>
   bee76:	f8df b200 	ldr.w	fp, [pc, #512]	; bf078 <_strtod_l+0xc08>
   bee7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bee7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bee80:	4620      	mov	r0, r4
   bee82:	f000 fdbb 	bl	bf9fc <_Bfree>
   bee86:	9905      	ldr	r1, [sp, #20]
   bee88:	4620      	mov	r0, r4
   bee8a:	f000 fdb7 	bl	bf9fc <_Bfree>
   bee8e:	4631      	mov	r1, r6
   bee90:	4620      	mov	r0, r4
   bee92:	f000 fdb3 	bl	bf9fc <_Bfree>
   bee96:	4629      	mov	r1, r5
   bee98:	4620      	mov	r0, r4
   bee9a:	f000 fdaf 	bl	bf9fc <_Bfree>
   bee9e:	e61a      	b.n	bead6 <_strtod_l+0x666>
   beea0:	f1ba 0f00 	cmp.w	sl, #0
   beea4:	d11b      	bne.n	beede <_strtod_l+0xa6e>
   beea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   beeaa:	b9f3      	cbnz	r3, beeea <_strtod_l+0xa7a>
   beeac:	4b6c      	ldr	r3, [pc, #432]	; (bf060 <_strtod_l+0xbf0>)
   beeae:	2200      	movs	r2, #0
   beeb0:	4640      	mov	r0, r8
   beeb2:	4649      	mov	r1, r9
   beeb4:	f7ff f8d6 	bl	be064 <__aeabi_dcmplt>
   beeb8:	b9d0      	cbnz	r0, beef0 <_strtod_l+0xa80>
   beeba:	4640      	mov	r0, r8
   beebc:	4649      	mov	r1, r9
   beebe:	4b6c      	ldr	r3, [pc, #432]	; (bf070 <_strtod_l+0xc00>)
   beec0:	2200      	movs	r2, #0
   beec2:	f7fe fe5d 	bl	bdb80 <__aeabi_dmul>
   beec6:	4680      	mov	r8, r0
   beec8:	4689      	mov	r9, r1
   beeca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   beece:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   beed2:	9315      	str	r3, [sp, #84]	; 0x54
   beed4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   beed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   beedc:	e79d      	b.n	bee1a <_strtod_l+0x9aa>
   beede:	f1ba 0f01 	cmp.w	sl, #1
   beee2:	d102      	bne.n	beeea <_strtod_l+0xa7a>
   beee4:	2f00      	cmp	r7, #0
   beee6:	f43f ad83 	beq.w	be9f0 <_strtod_l+0x580>
   beeea:	4b62      	ldr	r3, [pc, #392]	; (bf074 <_strtod_l+0xc04>)
   beeec:	2200      	movs	r2, #0
   beeee:	e78e      	b.n	bee0e <_strtod_l+0x99e>
   beef0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf070 <_strtod_l+0xc00>
   beef4:	f04f 0800 	mov.w	r8, #0
   beef8:	e7e7      	b.n	beeca <_strtod_l+0xa5a>
   beefa:	4b5d      	ldr	r3, [pc, #372]	; (bf070 <_strtod_l+0xc00>)
   beefc:	4640      	mov	r0, r8
   beefe:	4649      	mov	r1, r9
   bef00:	2200      	movs	r2, #0
   bef02:	f7fe fe3d 	bl	bdb80 <__aeabi_dmul>
   bef06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bef08:	4680      	mov	r8, r0
   bef0a:	4689      	mov	r9, r1
   bef0c:	b933      	cbnz	r3, bef1c <_strtod_l+0xaac>
   bef0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bef12:	900e      	str	r0, [sp, #56]	; 0x38
   bef14:	930f      	str	r3, [sp, #60]	; 0x3c
   bef16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bef1a:	e7dd      	b.n	beed8 <_strtod_l+0xa68>
   bef1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bef20:	e7f9      	b.n	bef16 <_strtod_l+0xaa6>
   bef22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bef26:	9b04      	ldr	r3, [sp, #16]
   bef28:	2b00      	cmp	r3, #0
   bef2a:	d1a8      	bne.n	bee7e <_strtod_l+0xa0e>
   bef2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bef30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bef32:	0d1b      	lsrs	r3, r3, #20
   bef34:	051b      	lsls	r3, r3, #20
   bef36:	429a      	cmp	r2, r3
   bef38:	d1a1      	bne.n	bee7e <_strtod_l+0xa0e>
   bef3a:	4640      	mov	r0, r8
   bef3c:	4649      	mov	r1, r9
   bef3e:	f001 fa05 	bl	c034c <__aeabi_d2lz>
   bef42:	f7fe fdef 	bl	bdb24 <__aeabi_l2d>
   bef46:	4602      	mov	r2, r0
   bef48:	460b      	mov	r3, r1
   bef4a:	4640      	mov	r0, r8
   bef4c:	4649      	mov	r1, r9
   bef4e:	f7fe fc5f 	bl	bd810 <__aeabi_dsub>
   bef52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bef54:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bef58:	ea43 030a 	orr.w	r3, r3, sl
   bef5c:	4313      	orrs	r3, r2
   bef5e:	4680      	mov	r8, r0
   bef60:	4689      	mov	r9, r1
   bef62:	d055      	beq.n	bf010 <_strtod_l+0xba0>
   bef64:	a336      	add	r3, pc, #216	; (adr r3, bf040 <_strtod_l+0xbd0>)
   bef66:	e9d3 2300 	ldrd	r2, r3, [r3]
   bef6a:	f7ff f87b 	bl	be064 <__aeabi_dcmplt>
   bef6e:	2800      	cmp	r0, #0
   bef70:	f47f acd0 	bne.w	be914 <_strtod_l+0x4a4>
   bef74:	a334      	add	r3, pc, #208	; (adr r3, bf048 <_strtod_l+0xbd8>)
   bef76:	e9d3 2300 	ldrd	r2, r3, [r3]
   bef7a:	4640      	mov	r0, r8
   bef7c:	4649      	mov	r1, r9
   bef7e:	f7ff f88f 	bl	be0a0 <__aeabi_dcmpgt>
   bef82:	2800      	cmp	r0, #0
   bef84:	f43f af7b 	beq.w	bee7e <_strtod_l+0xa0e>
   bef88:	e4c4      	b.n	be914 <_strtod_l+0x4a4>
   bef8a:	9b04      	ldr	r3, [sp, #16]
   bef8c:	b333      	cbz	r3, befdc <_strtod_l+0xb6c>
   bef8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bef90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bef94:	d822      	bhi.n	befdc <_strtod_l+0xb6c>
   bef96:	a32e      	add	r3, pc, #184	; (adr r3, bf050 <_strtod_l+0xbe0>)
   bef98:	e9d3 2300 	ldrd	r2, r3, [r3]
   bef9c:	4640      	mov	r0, r8
   bef9e:	4649      	mov	r1, r9
   befa0:	f7ff f86a 	bl	be078 <__aeabi_dcmple>
   befa4:	b1a0      	cbz	r0, befd0 <_strtod_l+0xb60>
   befa6:	4649      	mov	r1, r9
   befa8:	4640      	mov	r0, r8
   befaa:	f7ff f883 	bl	be0b4 <__aeabi_d2uiz>
   befae:	2801      	cmp	r0, #1
   befb0:	bf38      	it	cc
   befb2:	2001      	movcc	r0, #1
   befb4:	f7fe fd6a 	bl	bda8c <__aeabi_ui2d>
   befb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   befba:	4680      	mov	r8, r0
   befbc:	4689      	mov	r9, r1
   befbe:	bb23      	cbnz	r3, bf00a <_strtod_l+0xb9a>
   befc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   befc4:	9010      	str	r0, [sp, #64]	; 0x40
   befc6:	9311      	str	r3, [sp, #68]	; 0x44
   befc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   befcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   befd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   befd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   befd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   befd8:	1a9b      	subs	r3, r3, r2
   befda:	9309      	str	r3, [sp, #36]	; 0x24
   befdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   befe0:	eeb0 0a48 	vmov.f32	s0, s16
   befe4:	eef0 0a68 	vmov.f32	s1, s17
   befe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   befec:	f001 f838 	bl	c0060 <__ulp>
   beff0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   beff4:	ec53 2b10 	vmov	r2, r3, d0
   beff8:	f7fe fdc2 	bl	bdb80 <__aeabi_dmul>
   beffc:	ec53 2b18 	vmov	r2, r3, d8
   bf000:	f7fe fc08 	bl	bd814 <__adddf3>
   bf004:	4682      	mov	sl, r0
   bf006:	468b      	mov	fp, r1
   bf008:	e78d      	b.n	bef26 <_strtod_l+0xab6>
   bf00a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf00e:	e7db      	b.n	befc8 <_strtod_l+0xb58>
   bf010:	a311      	add	r3, pc, #68	; (adr r3, bf058 <_strtod_l+0xbe8>)
   bf012:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf016:	f7ff f825 	bl	be064 <__aeabi_dcmplt>
   bf01a:	e7b2      	b.n	bef82 <_strtod_l+0xb12>
   bf01c:	2300      	movs	r3, #0
   bf01e:	930a      	str	r3, [sp, #40]	; 0x28
   bf020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf024:	6013      	str	r3, [r2, #0]
   bf026:	f7ff ba6b 	b.w	be500 <_strtod_l+0x90>
   bf02a:	2a65      	cmp	r2, #101	; 0x65
   bf02c:	f43f ab5f 	beq.w	be6ee <_strtod_l+0x27e>
   bf030:	2a45      	cmp	r2, #69	; 0x45
   bf032:	f43f ab5c 	beq.w	be6ee <_strtod_l+0x27e>
   bf036:	2301      	movs	r3, #1
   bf038:	f7ff bb94 	b.w	be764 <_strtod_l+0x2f4>
   bf03c:	f3af 8000 	nop.w
   bf040:	94a03595 	.word	0x94a03595
   bf044:	3fdfffff 	.word	0x3fdfffff
   bf048:	35afe535 	.word	0x35afe535
   bf04c:	3fe00000 	.word	0x3fe00000
   bf050:	ffc00000 	.word	0xffc00000
   bf054:	41dfffff 	.word	0x41dfffff
   bf058:	94a03595 	.word	0x94a03595
   bf05c:	3fcfffff 	.word	0x3fcfffff
   bf060:	3ff00000 	.word	0x3ff00000
   bf064:	7ff00000 	.word	0x7ff00000
   bf068:	7fe00000 	.word	0x7fe00000
   bf06c:	7c9fffff 	.word	0x7c9fffff
   bf070:	3fe00000 	.word	0x3fe00000
   bf074:	bff00000 	.word	0xbff00000
   bf078:	7fefffff 	.word	0x7fefffff

000bf07c <strtod>:
   bf07c:	460a      	mov	r2, r1
   bf07e:	4601      	mov	r1, r0
   bf080:	4802      	ldr	r0, [pc, #8]	; (bf08c <strtod+0x10>)
   bf082:	4b03      	ldr	r3, [pc, #12]	; (bf090 <strtod+0x14>)
   bf084:	6800      	ldr	r0, [r0, #0]
   bf086:	f7ff b9f3 	b.w	be470 <_strtod_l>
   bf08a:	bf00      	nop
   bf08c:	2003da90 	.word	0x2003da90
   bf090:	2003dafc 	.word	0x2003dafc

000bf094 <_strtol_l.constprop.0>:
   bf094:	2b01      	cmp	r3, #1
   bf096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf09a:	d001      	beq.n	bf0a0 <_strtol_l.constprop.0+0xc>
   bf09c:	2b24      	cmp	r3, #36	; 0x24
   bf09e:	d906      	bls.n	bf0ae <_strtol_l.constprop.0+0x1a>
   bf0a0:	f7fa fbac 	bl	b97fc <__errno>
   bf0a4:	2316      	movs	r3, #22
   bf0a6:	6003      	str	r3, [r0, #0]
   bf0a8:	2000      	movs	r0, #0
   bf0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf0ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf194 <_strtol_l.constprop.0+0x100>
   bf0b2:	460d      	mov	r5, r1
   bf0b4:	462e      	mov	r6, r5
   bf0b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf0ba:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf0be:	f017 0708 	ands.w	r7, r7, #8
   bf0c2:	d1f7      	bne.n	bf0b4 <_strtol_l.constprop.0+0x20>
   bf0c4:	2c2d      	cmp	r4, #45	; 0x2d
   bf0c6:	d132      	bne.n	bf12e <_strtol_l.constprop.0+0x9a>
   bf0c8:	782c      	ldrb	r4, [r5, #0]
   bf0ca:	2701      	movs	r7, #1
   bf0cc:	1cb5      	adds	r5, r6, #2
   bf0ce:	2b00      	cmp	r3, #0
   bf0d0:	d05b      	beq.n	bf18a <_strtol_l.constprop.0+0xf6>
   bf0d2:	2b10      	cmp	r3, #16
   bf0d4:	d109      	bne.n	bf0ea <_strtol_l.constprop.0+0x56>
   bf0d6:	2c30      	cmp	r4, #48	; 0x30
   bf0d8:	d107      	bne.n	bf0ea <_strtol_l.constprop.0+0x56>
   bf0da:	782c      	ldrb	r4, [r5, #0]
   bf0dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf0e0:	2c58      	cmp	r4, #88	; 0x58
   bf0e2:	d14d      	bne.n	bf180 <_strtol_l.constprop.0+0xec>
   bf0e4:	786c      	ldrb	r4, [r5, #1]
   bf0e6:	2310      	movs	r3, #16
   bf0e8:	3502      	adds	r5, #2
   bf0ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf0ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf0f2:	f04f 0c00 	mov.w	ip, #0
   bf0f6:	fbb8 f9f3 	udiv	r9, r8, r3
   bf0fa:	4666      	mov	r6, ip
   bf0fc:	fb03 8a19 	mls	sl, r3, r9, r8
   bf100:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf104:	f1be 0f09 	cmp.w	lr, #9
   bf108:	d816      	bhi.n	bf138 <_strtol_l.constprop.0+0xa4>
   bf10a:	4674      	mov	r4, lr
   bf10c:	42a3      	cmp	r3, r4
   bf10e:	dd24      	ble.n	bf15a <_strtol_l.constprop.0+0xc6>
   bf110:	f1bc 0f00 	cmp.w	ip, #0
   bf114:	db1e      	blt.n	bf154 <_strtol_l.constprop.0+0xc0>
   bf116:	45b1      	cmp	r9, r6
   bf118:	d31c      	bcc.n	bf154 <_strtol_l.constprop.0+0xc0>
   bf11a:	d101      	bne.n	bf120 <_strtol_l.constprop.0+0x8c>
   bf11c:	45a2      	cmp	sl, r4
   bf11e:	db19      	blt.n	bf154 <_strtol_l.constprop.0+0xc0>
   bf120:	fb06 4603 	mla	r6, r6, r3, r4
   bf124:	f04f 0c01 	mov.w	ip, #1
   bf128:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf12c:	e7e8      	b.n	bf100 <_strtol_l.constprop.0+0x6c>
   bf12e:	2c2b      	cmp	r4, #43	; 0x2b
   bf130:	bf04      	itt	eq
   bf132:	782c      	ldrbeq	r4, [r5, #0]
   bf134:	1cb5      	addeq	r5, r6, #2
   bf136:	e7ca      	b.n	bf0ce <_strtol_l.constprop.0+0x3a>
   bf138:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf13c:	f1be 0f19 	cmp.w	lr, #25
   bf140:	d801      	bhi.n	bf146 <_strtol_l.constprop.0+0xb2>
   bf142:	3c37      	subs	r4, #55	; 0x37
   bf144:	e7e2      	b.n	bf10c <_strtol_l.constprop.0+0x78>
   bf146:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf14a:	f1be 0f19 	cmp.w	lr, #25
   bf14e:	d804      	bhi.n	bf15a <_strtol_l.constprop.0+0xc6>
   bf150:	3c57      	subs	r4, #87	; 0x57
   bf152:	e7db      	b.n	bf10c <_strtol_l.constprop.0+0x78>
   bf154:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf158:	e7e6      	b.n	bf128 <_strtol_l.constprop.0+0x94>
   bf15a:	f1bc 0f00 	cmp.w	ip, #0
   bf15e:	da05      	bge.n	bf16c <_strtol_l.constprop.0+0xd8>
   bf160:	2322      	movs	r3, #34	; 0x22
   bf162:	6003      	str	r3, [r0, #0]
   bf164:	4646      	mov	r6, r8
   bf166:	b942      	cbnz	r2, bf17a <_strtol_l.constprop.0+0xe6>
   bf168:	4630      	mov	r0, r6
   bf16a:	e79e      	b.n	bf0aa <_strtol_l.constprop.0+0x16>
   bf16c:	b107      	cbz	r7, bf170 <_strtol_l.constprop.0+0xdc>
   bf16e:	4276      	negs	r6, r6
   bf170:	2a00      	cmp	r2, #0
   bf172:	d0f9      	beq.n	bf168 <_strtol_l.constprop.0+0xd4>
   bf174:	f1bc 0f00 	cmp.w	ip, #0
   bf178:	d000      	beq.n	bf17c <_strtol_l.constprop.0+0xe8>
   bf17a:	1e69      	subs	r1, r5, #1
   bf17c:	6011      	str	r1, [r2, #0]
   bf17e:	e7f3      	b.n	bf168 <_strtol_l.constprop.0+0xd4>
   bf180:	2430      	movs	r4, #48	; 0x30
   bf182:	2b00      	cmp	r3, #0
   bf184:	d1b1      	bne.n	bf0ea <_strtol_l.constprop.0+0x56>
   bf186:	2308      	movs	r3, #8
   bf188:	e7af      	b.n	bf0ea <_strtol_l.constprop.0+0x56>
   bf18a:	2c30      	cmp	r4, #48	; 0x30
   bf18c:	d0a5      	beq.n	bf0da <_strtol_l.constprop.0+0x46>
   bf18e:	230a      	movs	r3, #10
   bf190:	e7ab      	b.n	bf0ea <_strtol_l.constprop.0+0x56>
   bf192:	bf00      	nop
   bf194:	000c1ce1 	.word	0x000c1ce1

000bf198 <strtol>:
   bf198:	4613      	mov	r3, r2
   bf19a:	460a      	mov	r2, r1
   bf19c:	4601      	mov	r1, r0
   bf19e:	4802      	ldr	r0, [pc, #8]	; (bf1a8 <strtol+0x10>)
   bf1a0:	6800      	ldr	r0, [r0, #0]
   bf1a2:	f7ff bf77 	b.w	bf094 <_strtol_l.constprop.0>
   bf1a6:	bf00      	nop
   bf1a8:	2003da90 	.word	0x2003da90

000bf1ac <__register_exitproc>:
   bf1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf1b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf26c <__register_exitproc+0xc0>
   bf1b4:	4606      	mov	r6, r0
   bf1b6:	f8d8 0000 	ldr.w	r0, [r8]
   bf1ba:	461f      	mov	r7, r3
   bf1bc:	460d      	mov	r5, r1
   bf1be:	4691      	mov	r9, r2
   bf1c0:	f000 fbc6 	bl	bf950 <__retarget_lock_acquire_recursive>
   bf1c4:	4b25      	ldr	r3, [pc, #148]	; (bf25c <__register_exitproc+0xb0>)
   bf1c6:	681c      	ldr	r4, [r3, #0]
   bf1c8:	b934      	cbnz	r4, bf1d8 <__register_exitproc+0x2c>
   bf1ca:	4c25      	ldr	r4, [pc, #148]	; (bf260 <__register_exitproc+0xb4>)
   bf1cc:	601c      	str	r4, [r3, #0]
   bf1ce:	4b25      	ldr	r3, [pc, #148]	; (bf264 <__register_exitproc+0xb8>)
   bf1d0:	b113      	cbz	r3, bf1d8 <__register_exitproc+0x2c>
   bf1d2:	681b      	ldr	r3, [r3, #0]
   bf1d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf1d8:	6863      	ldr	r3, [r4, #4]
   bf1da:	2b1f      	cmp	r3, #31
   bf1dc:	dd07      	ble.n	bf1ee <__register_exitproc+0x42>
   bf1de:	f8d8 0000 	ldr.w	r0, [r8]
   bf1e2:	f000 fbb7 	bl	bf954 <__retarget_lock_release_recursive>
   bf1e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf1ee:	b34e      	cbz	r6, bf244 <__register_exitproc+0x98>
   bf1f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf1f4:	b988      	cbnz	r0, bf21a <__register_exitproc+0x6e>
   bf1f6:	4b1c      	ldr	r3, [pc, #112]	; (bf268 <__register_exitproc+0xbc>)
   bf1f8:	b923      	cbnz	r3, bf204 <__register_exitproc+0x58>
   bf1fa:	f8d8 0000 	ldr.w	r0, [r8]
   bf1fe:	f000 fba8 	bl	bf952 <__retarget_lock_release>
   bf202:	e7f0      	b.n	bf1e6 <__register_exitproc+0x3a>
   bf204:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf208:	f7fa fab0 	bl	b976c <malloc>
   bf20c:	2800      	cmp	r0, #0
   bf20e:	d0f4      	beq.n	bf1fa <__register_exitproc+0x4e>
   bf210:	2300      	movs	r3, #0
   bf212:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf216:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf21a:	6863      	ldr	r3, [r4, #4]
   bf21c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf220:	2201      	movs	r2, #1
   bf222:	409a      	lsls	r2, r3
   bf224:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf228:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf22c:	4313      	orrs	r3, r2
   bf22e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf232:	2e02      	cmp	r6, #2
   bf234:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf238:	bf02      	ittt	eq
   bf23a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf23e:	4313      	orreq	r3, r2
   bf240:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf244:	6863      	ldr	r3, [r4, #4]
   bf246:	f8d8 0000 	ldr.w	r0, [r8]
   bf24a:	1c5a      	adds	r2, r3, #1
   bf24c:	3302      	adds	r3, #2
   bf24e:	6062      	str	r2, [r4, #4]
   bf250:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf254:	f000 fb7e 	bl	bf954 <__retarget_lock_release_recursive>
   bf258:	2000      	movs	r0, #0
   bf25a:	e7c6      	b.n	bf1ea <__register_exitproc+0x3e>
   bf25c:	2003e7e8 	.word	0x2003e7e8
   bf260:	2003e75c 	.word	0x2003e75c
   bf264:	00000000 	.word	0x00000000
   bf268:	000b976d 	.word	0x000b976d
   bf26c:	2003daf4 	.word	0x2003daf4

000bf270 <rshift>:
   bf270:	6903      	ldr	r3, [r0, #16]
   bf272:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf27a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf27e:	f100 0414 	add.w	r4, r0, #20
   bf282:	dd45      	ble.n	bf310 <rshift+0xa0>
   bf284:	f011 011f 	ands.w	r1, r1, #31
   bf288:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bf28c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bf290:	d10c      	bne.n	bf2ac <rshift+0x3c>
   bf292:	f100 0710 	add.w	r7, r0, #16
   bf296:	4629      	mov	r1, r5
   bf298:	42b1      	cmp	r1, r6
   bf29a:	d334      	bcc.n	bf306 <rshift+0x96>
   bf29c:	1a9b      	subs	r3, r3, r2
   bf29e:	009b      	lsls	r3, r3, #2
   bf2a0:	1eea      	subs	r2, r5, #3
   bf2a2:	4296      	cmp	r6, r2
   bf2a4:	bf38      	it	cc
   bf2a6:	2300      	movcc	r3, #0
   bf2a8:	4423      	add	r3, r4
   bf2aa:	e015      	b.n	bf2d8 <rshift+0x68>
   bf2ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bf2b0:	f1c1 0820 	rsb	r8, r1, #32
   bf2b4:	40cf      	lsrs	r7, r1
   bf2b6:	f105 0e04 	add.w	lr, r5, #4
   bf2ba:	46a1      	mov	r9, r4
   bf2bc:	4576      	cmp	r6, lr
   bf2be:	46f4      	mov	ip, lr
   bf2c0:	d815      	bhi.n	bf2ee <rshift+0x7e>
   bf2c2:	1a9a      	subs	r2, r3, r2
   bf2c4:	0092      	lsls	r2, r2, #2
   bf2c6:	3a04      	subs	r2, #4
   bf2c8:	3501      	adds	r5, #1
   bf2ca:	42ae      	cmp	r6, r5
   bf2cc:	bf38      	it	cc
   bf2ce:	2200      	movcc	r2, #0
   bf2d0:	18a3      	adds	r3, r4, r2
   bf2d2:	50a7      	str	r7, [r4, r2]
   bf2d4:	b107      	cbz	r7, bf2d8 <rshift+0x68>
   bf2d6:	3304      	adds	r3, #4
   bf2d8:	1b1a      	subs	r2, r3, r4
   bf2da:	42a3      	cmp	r3, r4
   bf2dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bf2e0:	bf08      	it	eq
   bf2e2:	2300      	moveq	r3, #0
   bf2e4:	6102      	str	r2, [r0, #16]
   bf2e6:	bf08      	it	eq
   bf2e8:	6143      	streq	r3, [r0, #20]
   bf2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf2ee:	f8dc c000 	ldr.w	ip, [ip]
   bf2f2:	fa0c fc08 	lsl.w	ip, ip, r8
   bf2f6:	ea4c 0707 	orr.w	r7, ip, r7
   bf2fa:	f849 7b04 	str.w	r7, [r9], #4
   bf2fe:	f85e 7b04 	ldr.w	r7, [lr], #4
   bf302:	40cf      	lsrs	r7, r1
   bf304:	e7da      	b.n	bf2bc <rshift+0x4c>
   bf306:	f851 cb04 	ldr.w	ip, [r1], #4
   bf30a:	f847 cf04 	str.w	ip, [r7, #4]!
   bf30e:	e7c3      	b.n	bf298 <rshift+0x28>
   bf310:	4623      	mov	r3, r4
   bf312:	e7e1      	b.n	bf2d8 <rshift+0x68>

000bf314 <__hexdig_fun>:
   bf314:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf318:	2b09      	cmp	r3, #9
   bf31a:	d802      	bhi.n	bf322 <__hexdig_fun+0xe>
   bf31c:	3820      	subs	r0, #32
   bf31e:	b2c0      	uxtb	r0, r0
   bf320:	4770      	bx	lr
   bf322:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bf326:	2b05      	cmp	r3, #5
   bf328:	d801      	bhi.n	bf32e <__hexdig_fun+0x1a>
   bf32a:	3847      	subs	r0, #71	; 0x47
   bf32c:	e7f7      	b.n	bf31e <__hexdig_fun+0xa>
   bf32e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bf332:	2b05      	cmp	r3, #5
   bf334:	d801      	bhi.n	bf33a <__hexdig_fun+0x26>
   bf336:	3827      	subs	r0, #39	; 0x27
   bf338:	e7f1      	b.n	bf31e <__hexdig_fun+0xa>
   bf33a:	2000      	movs	r0, #0
   bf33c:	4770      	bx	lr
	...

000bf340 <__gethex>:
   bf340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf344:	ed2d 8b02 	vpush	{d8}
   bf348:	b089      	sub	sp, #36	; 0x24
   bf34a:	ee08 0a10 	vmov	s16, r0
   bf34e:	9304      	str	r3, [sp, #16]
   bf350:	4bb4      	ldr	r3, [pc, #720]	; (bf624 <__gethex+0x2e4>)
   bf352:	681b      	ldr	r3, [r3, #0]
   bf354:	9301      	str	r3, [sp, #4]
   bf356:	4618      	mov	r0, r3
   bf358:	468b      	mov	fp, r1
   bf35a:	4690      	mov	r8, r2
   bf35c:	f7ff f831 	bl	be3c2 <strlen>
   bf360:	9b01      	ldr	r3, [sp, #4]
   bf362:	f8db 2000 	ldr.w	r2, [fp]
   bf366:	4403      	add	r3, r0
   bf368:	4682      	mov	sl, r0
   bf36a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bf36e:	9305      	str	r3, [sp, #20]
   bf370:	1c93      	adds	r3, r2, #2
   bf372:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bf376:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bf37a:	32fe      	adds	r2, #254	; 0xfe
   bf37c:	18d1      	adds	r1, r2, r3
   bf37e:	461f      	mov	r7, r3
   bf380:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf384:	9100      	str	r1, [sp, #0]
   bf386:	2830      	cmp	r0, #48	; 0x30
   bf388:	d0f8      	beq.n	bf37c <__gethex+0x3c>
   bf38a:	f7ff ffc3 	bl	bf314 <__hexdig_fun>
   bf38e:	4604      	mov	r4, r0
   bf390:	2800      	cmp	r0, #0
   bf392:	d13a      	bne.n	bf40a <__gethex+0xca>
   bf394:	9901      	ldr	r1, [sp, #4]
   bf396:	4652      	mov	r2, sl
   bf398:	4638      	mov	r0, r7
   bf39a:	f7ff f81a 	bl	be3d2 <strncmp>
   bf39e:	4605      	mov	r5, r0
   bf3a0:	2800      	cmp	r0, #0
   bf3a2:	d168      	bne.n	bf476 <__gethex+0x136>
   bf3a4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bf3a8:	eb07 060a 	add.w	r6, r7, sl
   bf3ac:	f7ff ffb2 	bl	bf314 <__hexdig_fun>
   bf3b0:	2800      	cmp	r0, #0
   bf3b2:	d062      	beq.n	bf47a <__gethex+0x13a>
   bf3b4:	4633      	mov	r3, r6
   bf3b6:	7818      	ldrb	r0, [r3, #0]
   bf3b8:	2830      	cmp	r0, #48	; 0x30
   bf3ba:	461f      	mov	r7, r3
   bf3bc:	f103 0301 	add.w	r3, r3, #1
   bf3c0:	d0f9      	beq.n	bf3b6 <__gethex+0x76>
   bf3c2:	f7ff ffa7 	bl	bf314 <__hexdig_fun>
   bf3c6:	2301      	movs	r3, #1
   bf3c8:	fab0 f480 	clz	r4, r0
   bf3cc:	0964      	lsrs	r4, r4, #5
   bf3ce:	4635      	mov	r5, r6
   bf3d0:	9300      	str	r3, [sp, #0]
   bf3d2:	463a      	mov	r2, r7
   bf3d4:	4616      	mov	r6, r2
   bf3d6:	3201      	adds	r2, #1
   bf3d8:	7830      	ldrb	r0, [r6, #0]
   bf3da:	f7ff ff9b 	bl	bf314 <__hexdig_fun>
   bf3de:	2800      	cmp	r0, #0
   bf3e0:	d1f8      	bne.n	bf3d4 <__gethex+0x94>
   bf3e2:	9901      	ldr	r1, [sp, #4]
   bf3e4:	4652      	mov	r2, sl
   bf3e6:	4630      	mov	r0, r6
   bf3e8:	f7fe fff3 	bl	be3d2 <strncmp>
   bf3ec:	b980      	cbnz	r0, bf410 <__gethex+0xd0>
   bf3ee:	b94d      	cbnz	r5, bf404 <__gethex+0xc4>
   bf3f0:	eb06 050a 	add.w	r5, r6, sl
   bf3f4:	462a      	mov	r2, r5
   bf3f6:	4616      	mov	r6, r2
   bf3f8:	3201      	adds	r2, #1
   bf3fa:	7830      	ldrb	r0, [r6, #0]
   bf3fc:	f7ff ff8a 	bl	bf314 <__hexdig_fun>
   bf400:	2800      	cmp	r0, #0
   bf402:	d1f8      	bne.n	bf3f6 <__gethex+0xb6>
   bf404:	1bad      	subs	r5, r5, r6
   bf406:	00ad      	lsls	r5, r5, #2
   bf408:	e004      	b.n	bf414 <__gethex+0xd4>
   bf40a:	2400      	movs	r4, #0
   bf40c:	4625      	mov	r5, r4
   bf40e:	e7e0      	b.n	bf3d2 <__gethex+0x92>
   bf410:	2d00      	cmp	r5, #0
   bf412:	d1f7      	bne.n	bf404 <__gethex+0xc4>
   bf414:	7833      	ldrb	r3, [r6, #0]
   bf416:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf41a:	2b50      	cmp	r3, #80	; 0x50
   bf41c:	d13b      	bne.n	bf496 <__gethex+0x156>
   bf41e:	7873      	ldrb	r3, [r6, #1]
   bf420:	2b2b      	cmp	r3, #43	; 0x2b
   bf422:	d02c      	beq.n	bf47e <__gethex+0x13e>
   bf424:	2b2d      	cmp	r3, #45	; 0x2d
   bf426:	d02e      	beq.n	bf486 <__gethex+0x146>
   bf428:	1c71      	adds	r1, r6, #1
   bf42a:	f04f 0900 	mov.w	r9, #0
   bf42e:	7808      	ldrb	r0, [r1, #0]
   bf430:	f7ff ff70 	bl	bf314 <__hexdig_fun>
   bf434:	1e43      	subs	r3, r0, #1
   bf436:	b2db      	uxtb	r3, r3
   bf438:	2b18      	cmp	r3, #24
   bf43a:	d82c      	bhi.n	bf496 <__gethex+0x156>
   bf43c:	f1a0 0210 	sub.w	r2, r0, #16
   bf440:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bf444:	f7ff ff66 	bl	bf314 <__hexdig_fun>
   bf448:	1e43      	subs	r3, r0, #1
   bf44a:	b2db      	uxtb	r3, r3
   bf44c:	2b18      	cmp	r3, #24
   bf44e:	d91d      	bls.n	bf48c <__gethex+0x14c>
   bf450:	f1b9 0f00 	cmp.w	r9, #0
   bf454:	d000      	beq.n	bf458 <__gethex+0x118>
   bf456:	4252      	negs	r2, r2
   bf458:	4415      	add	r5, r2
   bf45a:	f8cb 1000 	str.w	r1, [fp]
   bf45e:	b1e4      	cbz	r4, bf49a <__gethex+0x15a>
   bf460:	9b00      	ldr	r3, [sp, #0]
   bf462:	2b00      	cmp	r3, #0
   bf464:	bf14      	ite	ne
   bf466:	2700      	movne	r7, #0
   bf468:	2706      	moveq	r7, #6
   bf46a:	4638      	mov	r0, r7
   bf46c:	b009      	add	sp, #36	; 0x24
   bf46e:	ecbd 8b02 	vpop	{d8}
   bf472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf476:	463e      	mov	r6, r7
   bf478:	4625      	mov	r5, r4
   bf47a:	2401      	movs	r4, #1
   bf47c:	e7ca      	b.n	bf414 <__gethex+0xd4>
   bf47e:	f04f 0900 	mov.w	r9, #0
   bf482:	1cb1      	adds	r1, r6, #2
   bf484:	e7d3      	b.n	bf42e <__gethex+0xee>
   bf486:	f04f 0901 	mov.w	r9, #1
   bf48a:	e7fa      	b.n	bf482 <__gethex+0x142>
   bf48c:	230a      	movs	r3, #10
   bf48e:	fb03 0202 	mla	r2, r3, r2, r0
   bf492:	3a10      	subs	r2, #16
   bf494:	e7d4      	b.n	bf440 <__gethex+0x100>
   bf496:	4631      	mov	r1, r6
   bf498:	e7df      	b.n	bf45a <__gethex+0x11a>
   bf49a:	1bf3      	subs	r3, r6, r7
   bf49c:	3b01      	subs	r3, #1
   bf49e:	4621      	mov	r1, r4
   bf4a0:	2b07      	cmp	r3, #7
   bf4a2:	dc0b      	bgt.n	bf4bc <__gethex+0x17c>
   bf4a4:	ee18 0a10 	vmov	r0, s16
   bf4a8:	f000 fa68 	bl	bf97c <_Balloc>
   bf4ac:	4604      	mov	r4, r0
   bf4ae:	b940      	cbnz	r0, bf4c2 <__gethex+0x182>
   bf4b0:	4b5d      	ldr	r3, [pc, #372]	; (bf628 <__gethex+0x2e8>)
   bf4b2:	4602      	mov	r2, r0
   bf4b4:	21de      	movs	r1, #222	; 0xde
   bf4b6:	485d      	ldr	r0, [pc, #372]	; (bf62c <__gethex+0x2ec>)
   bf4b8:	f7fa f9a8 	bl	b980c <__assert_func>
   bf4bc:	3101      	adds	r1, #1
   bf4be:	105b      	asrs	r3, r3, #1
   bf4c0:	e7ee      	b.n	bf4a0 <__gethex+0x160>
   bf4c2:	f100 0914 	add.w	r9, r0, #20
   bf4c6:	f04f 0b00 	mov.w	fp, #0
   bf4ca:	f1ca 0301 	rsb	r3, sl, #1
   bf4ce:	f8cd 9008 	str.w	r9, [sp, #8]
   bf4d2:	f8cd b000 	str.w	fp, [sp]
   bf4d6:	9306      	str	r3, [sp, #24]
   bf4d8:	42b7      	cmp	r7, r6
   bf4da:	d340      	bcc.n	bf55e <__gethex+0x21e>
   bf4dc:	9802      	ldr	r0, [sp, #8]
   bf4de:	9b00      	ldr	r3, [sp, #0]
   bf4e0:	f840 3b04 	str.w	r3, [r0], #4
   bf4e4:	eba0 0009 	sub.w	r0, r0, r9
   bf4e8:	1080      	asrs	r0, r0, #2
   bf4ea:	0146      	lsls	r6, r0, #5
   bf4ec:	6120      	str	r0, [r4, #16]
   bf4ee:	4618      	mov	r0, r3
   bf4f0:	f000 fb36 	bl	bfb60 <__hi0bits>
   bf4f4:	1a30      	subs	r0, r6, r0
   bf4f6:	f8d8 6000 	ldr.w	r6, [r8]
   bf4fa:	42b0      	cmp	r0, r6
   bf4fc:	dd63      	ble.n	bf5c6 <__gethex+0x286>
   bf4fe:	1b87      	subs	r7, r0, r6
   bf500:	4639      	mov	r1, r7
   bf502:	4620      	mov	r0, r4
   bf504:	f000 feda 	bl	c02bc <__any_on>
   bf508:	4682      	mov	sl, r0
   bf50a:	b1a8      	cbz	r0, bf538 <__gethex+0x1f8>
   bf50c:	1e7b      	subs	r3, r7, #1
   bf50e:	1159      	asrs	r1, r3, #5
   bf510:	f003 021f 	and.w	r2, r3, #31
   bf514:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bf518:	f04f 0a01 	mov.w	sl, #1
   bf51c:	fa0a f202 	lsl.w	r2, sl, r2
   bf520:	420a      	tst	r2, r1
   bf522:	d009      	beq.n	bf538 <__gethex+0x1f8>
   bf524:	4553      	cmp	r3, sl
   bf526:	dd05      	ble.n	bf534 <__gethex+0x1f4>
   bf528:	1eb9      	subs	r1, r7, #2
   bf52a:	4620      	mov	r0, r4
   bf52c:	f000 fec6 	bl	c02bc <__any_on>
   bf530:	2800      	cmp	r0, #0
   bf532:	d145      	bne.n	bf5c0 <__gethex+0x280>
   bf534:	f04f 0a02 	mov.w	sl, #2
   bf538:	4639      	mov	r1, r7
   bf53a:	4620      	mov	r0, r4
   bf53c:	f7ff fe98 	bl	bf270 <rshift>
   bf540:	443d      	add	r5, r7
   bf542:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf546:	42ab      	cmp	r3, r5
   bf548:	da4c      	bge.n	bf5e4 <__gethex+0x2a4>
   bf54a:	ee18 0a10 	vmov	r0, s16
   bf54e:	4621      	mov	r1, r4
   bf550:	f000 fa54 	bl	bf9fc <_Bfree>
   bf554:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf556:	2300      	movs	r3, #0
   bf558:	6013      	str	r3, [r2, #0]
   bf55a:	27a3      	movs	r7, #163	; 0xa3
   bf55c:	e785      	b.n	bf46a <__gethex+0x12a>
   bf55e:	1e73      	subs	r3, r6, #1
   bf560:	9a05      	ldr	r2, [sp, #20]
   bf562:	9303      	str	r3, [sp, #12]
   bf564:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bf568:	4293      	cmp	r3, r2
   bf56a:	d019      	beq.n	bf5a0 <__gethex+0x260>
   bf56c:	f1bb 0f20 	cmp.w	fp, #32
   bf570:	d107      	bne.n	bf582 <__gethex+0x242>
   bf572:	9b02      	ldr	r3, [sp, #8]
   bf574:	9a00      	ldr	r2, [sp, #0]
   bf576:	f843 2b04 	str.w	r2, [r3], #4
   bf57a:	9302      	str	r3, [sp, #8]
   bf57c:	2300      	movs	r3, #0
   bf57e:	9300      	str	r3, [sp, #0]
   bf580:	469b      	mov	fp, r3
   bf582:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bf586:	f7ff fec5 	bl	bf314 <__hexdig_fun>
   bf58a:	9b00      	ldr	r3, [sp, #0]
   bf58c:	f000 000f 	and.w	r0, r0, #15
   bf590:	fa00 f00b 	lsl.w	r0, r0, fp
   bf594:	4303      	orrs	r3, r0
   bf596:	9300      	str	r3, [sp, #0]
   bf598:	f10b 0b04 	add.w	fp, fp, #4
   bf59c:	9b03      	ldr	r3, [sp, #12]
   bf59e:	e00d      	b.n	bf5bc <__gethex+0x27c>
   bf5a0:	9b03      	ldr	r3, [sp, #12]
   bf5a2:	9a06      	ldr	r2, [sp, #24]
   bf5a4:	4413      	add	r3, r2
   bf5a6:	42bb      	cmp	r3, r7
   bf5a8:	d3e0      	bcc.n	bf56c <__gethex+0x22c>
   bf5aa:	4618      	mov	r0, r3
   bf5ac:	9901      	ldr	r1, [sp, #4]
   bf5ae:	9307      	str	r3, [sp, #28]
   bf5b0:	4652      	mov	r2, sl
   bf5b2:	f7fe ff0e 	bl	be3d2 <strncmp>
   bf5b6:	9b07      	ldr	r3, [sp, #28]
   bf5b8:	2800      	cmp	r0, #0
   bf5ba:	d1d7      	bne.n	bf56c <__gethex+0x22c>
   bf5bc:	461e      	mov	r6, r3
   bf5be:	e78b      	b.n	bf4d8 <__gethex+0x198>
   bf5c0:	f04f 0a03 	mov.w	sl, #3
   bf5c4:	e7b8      	b.n	bf538 <__gethex+0x1f8>
   bf5c6:	da0a      	bge.n	bf5de <__gethex+0x29e>
   bf5c8:	1a37      	subs	r7, r6, r0
   bf5ca:	4621      	mov	r1, r4
   bf5cc:	ee18 0a10 	vmov	r0, s16
   bf5d0:	463a      	mov	r2, r7
   bf5d2:	f000 fc2f 	bl	bfe34 <__lshift>
   bf5d6:	1bed      	subs	r5, r5, r7
   bf5d8:	4604      	mov	r4, r0
   bf5da:	f100 0914 	add.w	r9, r0, #20
   bf5de:	f04f 0a00 	mov.w	sl, #0
   bf5e2:	e7ae      	b.n	bf542 <__gethex+0x202>
   bf5e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bf5e8:	42a8      	cmp	r0, r5
   bf5ea:	dd72      	ble.n	bf6d2 <__gethex+0x392>
   bf5ec:	1b45      	subs	r5, r0, r5
   bf5ee:	42ae      	cmp	r6, r5
   bf5f0:	dc36      	bgt.n	bf660 <__gethex+0x320>
   bf5f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf5f6:	2b02      	cmp	r3, #2
   bf5f8:	d02a      	beq.n	bf650 <__gethex+0x310>
   bf5fa:	2b03      	cmp	r3, #3
   bf5fc:	d02c      	beq.n	bf658 <__gethex+0x318>
   bf5fe:	2b01      	cmp	r3, #1
   bf600:	d11c      	bne.n	bf63c <__gethex+0x2fc>
   bf602:	42ae      	cmp	r6, r5
   bf604:	d11a      	bne.n	bf63c <__gethex+0x2fc>
   bf606:	2e01      	cmp	r6, #1
   bf608:	d112      	bne.n	bf630 <__gethex+0x2f0>
   bf60a:	9a04      	ldr	r2, [sp, #16]
   bf60c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bf610:	6013      	str	r3, [r2, #0]
   bf612:	2301      	movs	r3, #1
   bf614:	6123      	str	r3, [r4, #16]
   bf616:	f8c9 3000 	str.w	r3, [r9]
   bf61a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf61c:	2762      	movs	r7, #98	; 0x62
   bf61e:	601c      	str	r4, [r3, #0]
   bf620:	e723      	b.n	bf46a <__gethex+0x12a>
   bf622:	bf00      	nop
   bf624:	000c1e54 	.word	0x000c1e54
   bf628:	000c1de1 	.word	0x000c1de1
   bf62c:	000c1df2 	.word	0x000c1df2
   bf630:	1e71      	subs	r1, r6, #1
   bf632:	4620      	mov	r0, r4
   bf634:	f000 fe42 	bl	c02bc <__any_on>
   bf638:	2800      	cmp	r0, #0
   bf63a:	d1e6      	bne.n	bf60a <__gethex+0x2ca>
   bf63c:	ee18 0a10 	vmov	r0, s16
   bf640:	4621      	mov	r1, r4
   bf642:	f000 f9db 	bl	bf9fc <_Bfree>
   bf646:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf648:	2300      	movs	r3, #0
   bf64a:	6013      	str	r3, [r2, #0]
   bf64c:	2750      	movs	r7, #80	; 0x50
   bf64e:	e70c      	b.n	bf46a <__gethex+0x12a>
   bf650:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf652:	2b00      	cmp	r3, #0
   bf654:	d1f2      	bne.n	bf63c <__gethex+0x2fc>
   bf656:	e7d8      	b.n	bf60a <__gethex+0x2ca>
   bf658:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf65a:	2b00      	cmp	r3, #0
   bf65c:	d1d5      	bne.n	bf60a <__gethex+0x2ca>
   bf65e:	e7ed      	b.n	bf63c <__gethex+0x2fc>
   bf660:	1e6f      	subs	r7, r5, #1
   bf662:	f1ba 0f00 	cmp.w	sl, #0
   bf666:	d131      	bne.n	bf6cc <__gethex+0x38c>
   bf668:	b127      	cbz	r7, bf674 <__gethex+0x334>
   bf66a:	4639      	mov	r1, r7
   bf66c:	4620      	mov	r0, r4
   bf66e:	f000 fe25 	bl	c02bc <__any_on>
   bf672:	4682      	mov	sl, r0
   bf674:	117b      	asrs	r3, r7, #5
   bf676:	2101      	movs	r1, #1
   bf678:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bf67c:	f007 071f 	and.w	r7, r7, #31
   bf680:	fa01 f707 	lsl.w	r7, r1, r7
   bf684:	421f      	tst	r7, r3
   bf686:	4629      	mov	r1, r5
   bf688:	4620      	mov	r0, r4
   bf68a:	bf18      	it	ne
   bf68c:	f04a 0a02 	orrne.w	sl, sl, #2
   bf690:	1b76      	subs	r6, r6, r5
   bf692:	f7ff fded 	bl	bf270 <rshift>
   bf696:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bf69a:	2702      	movs	r7, #2
   bf69c:	f1ba 0f00 	cmp.w	sl, #0
   bf6a0:	d048      	beq.n	bf734 <__gethex+0x3f4>
   bf6a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf6a6:	2b02      	cmp	r3, #2
   bf6a8:	d015      	beq.n	bf6d6 <__gethex+0x396>
   bf6aa:	2b03      	cmp	r3, #3
   bf6ac:	d017      	beq.n	bf6de <__gethex+0x39e>
   bf6ae:	2b01      	cmp	r3, #1
   bf6b0:	d109      	bne.n	bf6c6 <__gethex+0x386>
   bf6b2:	f01a 0f02 	tst.w	sl, #2
   bf6b6:	d006      	beq.n	bf6c6 <__gethex+0x386>
   bf6b8:	f8d9 0000 	ldr.w	r0, [r9]
   bf6bc:	ea4a 0a00 	orr.w	sl, sl, r0
   bf6c0:	f01a 0f01 	tst.w	sl, #1
   bf6c4:	d10e      	bne.n	bf6e4 <__gethex+0x3a4>
   bf6c6:	f047 0710 	orr.w	r7, r7, #16
   bf6ca:	e033      	b.n	bf734 <__gethex+0x3f4>
   bf6cc:	f04f 0a01 	mov.w	sl, #1
   bf6d0:	e7d0      	b.n	bf674 <__gethex+0x334>
   bf6d2:	2701      	movs	r7, #1
   bf6d4:	e7e2      	b.n	bf69c <__gethex+0x35c>
   bf6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf6d8:	f1c3 0301 	rsb	r3, r3, #1
   bf6dc:	9315      	str	r3, [sp, #84]	; 0x54
   bf6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf6e0:	2b00      	cmp	r3, #0
   bf6e2:	d0f0      	beq.n	bf6c6 <__gethex+0x386>
   bf6e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bf6e8:	f104 0314 	add.w	r3, r4, #20
   bf6ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bf6f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bf6f4:	f04f 0c00 	mov.w	ip, #0
   bf6f8:	4618      	mov	r0, r3
   bf6fa:	f853 2b04 	ldr.w	r2, [r3], #4
   bf6fe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bf702:	d01c      	beq.n	bf73e <__gethex+0x3fe>
   bf704:	3201      	adds	r2, #1
   bf706:	6002      	str	r2, [r0, #0]
   bf708:	2f02      	cmp	r7, #2
   bf70a:	f104 0314 	add.w	r3, r4, #20
   bf70e:	d13f      	bne.n	bf790 <__gethex+0x450>
   bf710:	f8d8 2000 	ldr.w	r2, [r8]
   bf714:	3a01      	subs	r2, #1
   bf716:	42b2      	cmp	r2, r6
   bf718:	d10a      	bne.n	bf730 <__gethex+0x3f0>
   bf71a:	1171      	asrs	r1, r6, #5
   bf71c:	2201      	movs	r2, #1
   bf71e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bf722:	f006 061f 	and.w	r6, r6, #31
   bf726:	fa02 f606 	lsl.w	r6, r2, r6
   bf72a:	421e      	tst	r6, r3
   bf72c:	bf18      	it	ne
   bf72e:	4617      	movne	r7, r2
   bf730:	f047 0720 	orr.w	r7, r7, #32
   bf734:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf736:	601c      	str	r4, [r3, #0]
   bf738:	9b04      	ldr	r3, [sp, #16]
   bf73a:	601d      	str	r5, [r3, #0]
   bf73c:	e695      	b.n	bf46a <__gethex+0x12a>
   bf73e:	4299      	cmp	r1, r3
   bf740:	f843 cc04 	str.w	ip, [r3, #-4]
   bf744:	d8d8      	bhi.n	bf6f8 <__gethex+0x3b8>
   bf746:	68a3      	ldr	r3, [r4, #8]
   bf748:	459b      	cmp	fp, r3
   bf74a:	db19      	blt.n	bf780 <__gethex+0x440>
   bf74c:	6861      	ldr	r1, [r4, #4]
   bf74e:	ee18 0a10 	vmov	r0, s16
   bf752:	3101      	adds	r1, #1
   bf754:	f000 f912 	bl	bf97c <_Balloc>
   bf758:	4681      	mov	r9, r0
   bf75a:	b918      	cbnz	r0, bf764 <__gethex+0x424>
   bf75c:	4b1a      	ldr	r3, [pc, #104]	; (bf7c8 <__gethex+0x488>)
   bf75e:	4602      	mov	r2, r0
   bf760:	2184      	movs	r1, #132	; 0x84
   bf762:	e6a8      	b.n	bf4b6 <__gethex+0x176>
   bf764:	6922      	ldr	r2, [r4, #16]
   bf766:	3202      	adds	r2, #2
   bf768:	f104 010c 	add.w	r1, r4, #12
   bf76c:	0092      	lsls	r2, r2, #2
   bf76e:	300c      	adds	r0, #12
   bf770:	f7fe fd4b 	bl	be20a <memcpy>
   bf774:	4621      	mov	r1, r4
   bf776:	ee18 0a10 	vmov	r0, s16
   bf77a:	f000 f93f 	bl	bf9fc <_Bfree>
   bf77e:	464c      	mov	r4, r9
   bf780:	6923      	ldr	r3, [r4, #16]
   bf782:	1c5a      	adds	r2, r3, #1
   bf784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bf788:	6122      	str	r2, [r4, #16]
   bf78a:	2201      	movs	r2, #1
   bf78c:	615a      	str	r2, [r3, #20]
   bf78e:	e7bb      	b.n	bf708 <__gethex+0x3c8>
   bf790:	6922      	ldr	r2, [r4, #16]
   bf792:	455a      	cmp	r2, fp
   bf794:	dd0b      	ble.n	bf7ae <__gethex+0x46e>
   bf796:	2101      	movs	r1, #1
   bf798:	4620      	mov	r0, r4
   bf79a:	f7ff fd69 	bl	bf270 <rshift>
   bf79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf7a2:	3501      	adds	r5, #1
   bf7a4:	42ab      	cmp	r3, r5
   bf7a6:	f6ff aed0 	blt.w	bf54a <__gethex+0x20a>
   bf7aa:	2701      	movs	r7, #1
   bf7ac:	e7c0      	b.n	bf730 <__gethex+0x3f0>
   bf7ae:	f016 061f 	ands.w	r6, r6, #31
   bf7b2:	d0fa      	beq.n	bf7aa <__gethex+0x46a>
   bf7b4:	4453      	add	r3, sl
   bf7b6:	f1c6 0620 	rsb	r6, r6, #32
   bf7ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bf7be:	f000 f9cf 	bl	bfb60 <__hi0bits>
   bf7c2:	42b0      	cmp	r0, r6
   bf7c4:	dbe7      	blt.n	bf796 <__gethex+0x456>
   bf7c6:	e7f0      	b.n	bf7aa <__gethex+0x46a>
   bf7c8:	000c1de1 	.word	0x000c1de1

000bf7cc <L_shift>:
   bf7cc:	f1c2 0208 	rsb	r2, r2, #8
   bf7d0:	0092      	lsls	r2, r2, #2
   bf7d2:	b570      	push	{r4, r5, r6, lr}
   bf7d4:	f1c2 0620 	rsb	r6, r2, #32
   bf7d8:	6843      	ldr	r3, [r0, #4]
   bf7da:	6804      	ldr	r4, [r0, #0]
   bf7dc:	fa03 f506 	lsl.w	r5, r3, r6
   bf7e0:	432c      	orrs	r4, r5
   bf7e2:	40d3      	lsrs	r3, r2
   bf7e4:	6004      	str	r4, [r0, #0]
   bf7e6:	f840 3f04 	str.w	r3, [r0, #4]!
   bf7ea:	4288      	cmp	r0, r1
   bf7ec:	d3f4      	bcc.n	bf7d8 <L_shift+0xc>
   bf7ee:	bd70      	pop	{r4, r5, r6, pc}

000bf7f0 <__match>:
   bf7f0:	b530      	push	{r4, r5, lr}
   bf7f2:	6803      	ldr	r3, [r0, #0]
   bf7f4:	3301      	adds	r3, #1
   bf7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf7fa:	b914      	cbnz	r4, bf802 <__match+0x12>
   bf7fc:	6003      	str	r3, [r0, #0]
   bf7fe:	2001      	movs	r0, #1
   bf800:	bd30      	pop	{r4, r5, pc}
   bf802:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf806:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bf80a:	2d19      	cmp	r5, #25
   bf80c:	bf98      	it	ls
   bf80e:	3220      	addls	r2, #32
   bf810:	42a2      	cmp	r2, r4
   bf812:	d0f0      	beq.n	bf7f6 <__match+0x6>
   bf814:	2000      	movs	r0, #0
   bf816:	e7f3      	b.n	bf800 <__match+0x10>

000bf818 <__hexnan>:
   bf818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf81c:	680b      	ldr	r3, [r1, #0]
   bf81e:	115e      	asrs	r6, r3, #5
   bf820:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bf824:	f013 031f 	ands.w	r3, r3, #31
   bf828:	b087      	sub	sp, #28
   bf82a:	bf18      	it	ne
   bf82c:	3604      	addne	r6, #4
   bf82e:	2500      	movs	r5, #0
   bf830:	1f37      	subs	r7, r6, #4
   bf832:	4690      	mov	r8, r2
   bf834:	6802      	ldr	r2, [r0, #0]
   bf836:	9301      	str	r3, [sp, #4]
   bf838:	4682      	mov	sl, r0
   bf83a:	f846 5c04 	str.w	r5, [r6, #-4]
   bf83e:	46b9      	mov	r9, r7
   bf840:	463c      	mov	r4, r7
   bf842:	9502      	str	r5, [sp, #8]
   bf844:	46ab      	mov	fp, r5
   bf846:	7851      	ldrb	r1, [r2, #1]
   bf848:	1c53      	adds	r3, r2, #1
   bf84a:	9303      	str	r3, [sp, #12]
   bf84c:	b341      	cbz	r1, bf8a0 <__hexnan+0x88>
   bf84e:	4608      	mov	r0, r1
   bf850:	9205      	str	r2, [sp, #20]
   bf852:	9104      	str	r1, [sp, #16]
   bf854:	f7ff fd5e 	bl	bf314 <__hexdig_fun>
   bf858:	2800      	cmp	r0, #0
   bf85a:	d14f      	bne.n	bf8fc <__hexnan+0xe4>
   bf85c:	9904      	ldr	r1, [sp, #16]
   bf85e:	9a05      	ldr	r2, [sp, #20]
   bf860:	2920      	cmp	r1, #32
   bf862:	d818      	bhi.n	bf896 <__hexnan+0x7e>
   bf864:	9b02      	ldr	r3, [sp, #8]
   bf866:	459b      	cmp	fp, r3
   bf868:	dd13      	ble.n	bf892 <__hexnan+0x7a>
   bf86a:	454c      	cmp	r4, r9
   bf86c:	d206      	bcs.n	bf87c <__hexnan+0x64>
   bf86e:	2d07      	cmp	r5, #7
   bf870:	dc04      	bgt.n	bf87c <__hexnan+0x64>
   bf872:	462a      	mov	r2, r5
   bf874:	4649      	mov	r1, r9
   bf876:	4620      	mov	r0, r4
   bf878:	f7ff ffa8 	bl	bf7cc <L_shift>
   bf87c:	4544      	cmp	r4, r8
   bf87e:	d950      	bls.n	bf922 <__hexnan+0x10a>
   bf880:	2300      	movs	r3, #0
   bf882:	f1a4 0904 	sub.w	r9, r4, #4
   bf886:	f844 3c04 	str.w	r3, [r4, #-4]
   bf88a:	f8cd b008 	str.w	fp, [sp, #8]
   bf88e:	464c      	mov	r4, r9
   bf890:	461d      	mov	r5, r3
   bf892:	9a03      	ldr	r2, [sp, #12]
   bf894:	e7d7      	b.n	bf846 <__hexnan+0x2e>
   bf896:	2929      	cmp	r1, #41	; 0x29
   bf898:	d156      	bne.n	bf948 <__hexnan+0x130>
   bf89a:	3202      	adds	r2, #2
   bf89c:	f8ca 2000 	str.w	r2, [sl]
   bf8a0:	f1bb 0f00 	cmp.w	fp, #0
   bf8a4:	d050      	beq.n	bf948 <__hexnan+0x130>
   bf8a6:	454c      	cmp	r4, r9
   bf8a8:	d206      	bcs.n	bf8b8 <__hexnan+0xa0>
   bf8aa:	2d07      	cmp	r5, #7
   bf8ac:	dc04      	bgt.n	bf8b8 <__hexnan+0xa0>
   bf8ae:	462a      	mov	r2, r5
   bf8b0:	4649      	mov	r1, r9
   bf8b2:	4620      	mov	r0, r4
   bf8b4:	f7ff ff8a 	bl	bf7cc <L_shift>
   bf8b8:	4544      	cmp	r4, r8
   bf8ba:	d934      	bls.n	bf926 <__hexnan+0x10e>
   bf8bc:	f1a8 0204 	sub.w	r2, r8, #4
   bf8c0:	4623      	mov	r3, r4
   bf8c2:	f853 1b04 	ldr.w	r1, [r3], #4
   bf8c6:	f842 1f04 	str.w	r1, [r2, #4]!
   bf8ca:	429f      	cmp	r7, r3
   bf8cc:	d2f9      	bcs.n	bf8c2 <__hexnan+0xaa>
   bf8ce:	1b3b      	subs	r3, r7, r4
   bf8d0:	f023 0303 	bic.w	r3, r3, #3
   bf8d4:	3304      	adds	r3, #4
   bf8d6:	3401      	adds	r4, #1
   bf8d8:	3e03      	subs	r6, #3
   bf8da:	42b4      	cmp	r4, r6
   bf8dc:	bf88      	it	hi
   bf8de:	2304      	movhi	r3, #4
   bf8e0:	4443      	add	r3, r8
   bf8e2:	2200      	movs	r2, #0
   bf8e4:	f843 2b04 	str.w	r2, [r3], #4
   bf8e8:	429f      	cmp	r7, r3
   bf8ea:	d2fb      	bcs.n	bf8e4 <__hexnan+0xcc>
   bf8ec:	683b      	ldr	r3, [r7, #0]
   bf8ee:	b91b      	cbnz	r3, bf8f8 <__hexnan+0xe0>
   bf8f0:	4547      	cmp	r7, r8
   bf8f2:	d127      	bne.n	bf944 <__hexnan+0x12c>
   bf8f4:	2301      	movs	r3, #1
   bf8f6:	603b      	str	r3, [r7, #0]
   bf8f8:	2005      	movs	r0, #5
   bf8fa:	e026      	b.n	bf94a <__hexnan+0x132>
   bf8fc:	3501      	adds	r5, #1
   bf8fe:	2d08      	cmp	r5, #8
   bf900:	f10b 0b01 	add.w	fp, fp, #1
   bf904:	dd06      	ble.n	bf914 <__hexnan+0xfc>
   bf906:	4544      	cmp	r4, r8
   bf908:	d9c3      	bls.n	bf892 <__hexnan+0x7a>
   bf90a:	2300      	movs	r3, #0
   bf90c:	f844 3c04 	str.w	r3, [r4, #-4]
   bf910:	2501      	movs	r5, #1
   bf912:	3c04      	subs	r4, #4
   bf914:	6822      	ldr	r2, [r4, #0]
   bf916:	f000 000f 	and.w	r0, r0, #15
   bf91a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bf91e:	6022      	str	r2, [r4, #0]
   bf920:	e7b7      	b.n	bf892 <__hexnan+0x7a>
   bf922:	2508      	movs	r5, #8
   bf924:	e7b5      	b.n	bf892 <__hexnan+0x7a>
   bf926:	9b01      	ldr	r3, [sp, #4]
   bf928:	2b00      	cmp	r3, #0
   bf92a:	d0df      	beq.n	bf8ec <__hexnan+0xd4>
   bf92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf930:	f1c3 0320 	rsb	r3, r3, #32
   bf934:	fa22 f303 	lsr.w	r3, r2, r3
   bf938:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bf93c:	401a      	ands	r2, r3
   bf93e:	f846 2c04 	str.w	r2, [r6, #-4]
   bf942:	e7d3      	b.n	bf8ec <__hexnan+0xd4>
   bf944:	3f04      	subs	r7, #4
   bf946:	e7d1      	b.n	bf8ec <__hexnan+0xd4>
   bf948:	2004      	movs	r0, #4
   bf94a:	b007      	add	sp, #28
   bf94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf950 <__retarget_lock_acquire_recursive>:
   bf950:	4770      	bx	lr

000bf952 <__retarget_lock_release>:
   bf952:	4770      	bx	lr

000bf954 <__retarget_lock_release_recursive>:
   bf954:	4770      	bx	lr

000bf956 <__ascii_mbtowc>:
   bf956:	b082      	sub	sp, #8
   bf958:	b901      	cbnz	r1, bf95c <__ascii_mbtowc+0x6>
   bf95a:	a901      	add	r1, sp, #4
   bf95c:	b142      	cbz	r2, bf970 <__ascii_mbtowc+0x1a>
   bf95e:	b14b      	cbz	r3, bf974 <__ascii_mbtowc+0x1e>
   bf960:	7813      	ldrb	r3, [r2, #0]
   bf962:	600b      	str	r3, [r1, #0]
   bf964:	7812      	ldrb	r2, [r2, #0]
   bf966:	1e10      	subs	r0, r2, #0
   bf968:	bf18      	it	ne
   bf96a:	2001      	movne	r0, #1
   bf96c:	b002      	add	sp, #8
   bf96e:	4770      	bx	lr
   bf970:	4610      	mov	r0, r2
   bf972:	e7fb      	b.n	bf96c <__ascii_mbtowc+0x16>
   bf974:	f06f 0001 	mvn.w	r0, #1
   bf978:	e7f8      	b.n	bf96c <__ascii_mbtowc+0x16>
	...

000bf97c <_Balloc>:
   bf97c:	b570      	push	{r4, r5, r6, lr}
   bf97e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf980:	4604      	mov	r4, r0
   bf982:	460d      	mov	r5, r1
   bf984:	b976      	cbnz	r6, bf9a4 <_Balloc+0x28>
   bf986:	2010      	movs	r0, #16
   bf988:	f7f9 fef0 	bl	b976c <malloc>
   bf98c:	4602      	mov	r2, r0
   bf98e:	6260      	str	r0, [r4, #36]	; 0x24
   bf990:	b920      	cbnz	r0, bf99c <_Balloc+0x20>
   bf992:	4b18      	ldr	r3, [pc, #96]	; (bf9f4 <_Balloc+0x78>)
   bf994:	4818      	ldr	r0, [pc, #96]	; (bf9f8 <_Balloc+0x7c>)
   bf996:	2166      	movs	r1, #102	; 0x66
   bf998:	f7f9 ff38 	bl	b980c <__assert_func>
   bf99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf9a0:	6006      	str	r6, [r0, #0]
   bf9a2:	60c6      	str	r6, [r0, #12]
   bf9a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bf9a6:	68f3      	ldr	r3, [r6, #12]
   bf9a8:	b183      	cbz	r3, bf9cc <_Balloc+0x50>
   bf9aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf9ac:	68db      	ldr	r3, [r3, #12]
   bf9ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bf9b2:	b9b8      	cbnz	r0, bf9e4 <_Balloc+0x68>
   bf9b4:	2101      	movs	r1, #1
   bf9b6:	fa01 f605 	lsl.w	r6, r1, r5
   bf9ba:	1d72      	adds	r2, r6, #5
   bf9bc:	0092      	lsls	r2, r2, #2
   bf9be:	4620      	mov	r0, r4
   bf9c0:	f000 fc9d 	bl	c02fe <_calloc_r>
   bf9c4:	b160      	cbz	r0, bf9e0 <_Balloc+0x64>
   bf9c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bf9ca:	e00e      	b.n	bf9ea <_Balloc+0x6e>
   bf9cc:	2221      	movs	r2, #33	; 0x21
   bf9ce:	2104      	movs	r1, #4
   bf9d0:	4620      	mov	r0, r4
   bf9d2:	f000 fc94 	bl	c02fe <_calloc_r>
   bf9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf9d8:	60f0      	str	r0, [r6, #12]
   bf9da:	68db      	ldr	r3, [r3, #12]
   bf9dc:	2b00      	cmp	r3, #0
   bf9de:	d1e4      	bne.n	bf9aa <_Balloc+0x2e>
   bf9e0:	2000      	movs	r0, #0
   bf9e2:	bd70      	pop	{r4, r5, r6, pc}
   bf9e4:	6802      	ldr	r2, [r0, #0]
   bf9e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bf9ea:	2300      	movs	r3, #0
   bf9ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bf9f0:	e7f7      	b.n	bf9e2 <_Balloc+0x66>
   bf9f2:	bf00      	nop
   bf9f4:	000c1c11 	.word	0x000c1c11
   bf9f8:	000c1e68 	.word	0x000c1e68

000bf9fc <_Bfree>:
   bf9fc:	b570      	push	{r4, r5, r6, lr}
   bf9fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bfa00:	4605      	mov	r5, r0
   bfa02:	460c      	mov	r4, r1
   bfa04:	b976      	cbnz	r6, bfa24 <_Bfree+0x28>
   bfa06:	2010      	movs	r0, #16
   bfa08:	f7f9 feb0 	bl	b976c <malloc>
   bfa0c:	4602      	mov	r2, r0
   bfa0e:	6268      	str	r0, [r5, #36]	; 0x24
   bfa10:	b920      	cbnz	r0, bfa1c <_Bfree+0x20>
   bfa12:	4b09      	ldr	r3, [pc, #36]	; (bfa38 <_Bfree+0x3c>)
   bfa14:	4809      	ldr	r0, [pc, #36]	; (bfa3c <_Bfree+0x40>)
   bfa16:	218a      	movs	r1, #138	; 0x8a
   bfa18:	f7f9 fef8 	bl	b980c <__assert_func>
   bfa1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bfa20:	6006      	str	r6, [r0, #0]
   bfa22:	60c6      	str	r6, [r0, #12]
   bfa24:	b13c      	cbz	r4, bfa36 <_Bfree+0x3a>
   bfa26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bfa28:	6862      	ldr	r2, [r4, #4]
   bfa2a:	68db      	ldr	r3, [r3, #12]
   bfa2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bfa30:	6021      	str	r1, [r4, #0]
   bfa32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bfa36:	bd70      	pop	{r4, r5, r6, pc}
   bfa38:	000c1c11 	.word	0x000c1c11
   bfa3c:	000c1e68 	.word	0x000c1e68

000bfa40 <__multadd>:
   bfa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfa44:	690d      	ldr	r5, [r1, #16]
   bfa46:	4607      	mov	r7, r0
   bfa48:	460c      	mov	r4, r1
   bfa4a:	461e      	mov	r6, r3
   bfa4c:	f101 0c14 	add.w	ip, r1, #20
   bfa50:	2000      	movs	r0, #0
   bfa52:	f8dc 3000 	ldr.w	r3, [ip]
   bfa56:	b299      	uxth	r1, r3
   bfa58:	fb02 6101 	mla	r1, r2, r1, r6
   bfa5c:	0c1e      	lsrs	r6, r3, #16
   bfa5e:	0c0b      	lsrs	r3, r1, #16
   bfa60:	fb02 3306 	mla	r3, r2, r6, r3
   bfa64:	b289      	uxth	r1, r1
   bfa66:	3001      	adds	r0, #1
   bfa68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bfa6c:	4285      	cmp	r5, r0
   bfa6e:	f84c 1b04 	str.w	r1, [ip], #4
   bfa72:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bfa76:	dcec      	bgt.n	bfa52 <__multadd+0x12>
   bfa78:	b30e      	cbz	r6, bfabe <__multadd+0x7e>
   bfa7a:	68a3      	ldr	r3, [r4, #8]
   bfa7c:	42ab      	cmp	r3, r5
   bfa7e:	dc19      	bgt.n	bfab4 <__multadd+0x74>
   bfa80:	6861      	ldr	r1, [r4, #4]
   bfa82:	4638      	mov	r0, r7
   bfa84:	3101      	adds	r1, #1
   bfa86:	f7ff ff79 	bl	bf97c <_Balloc>
   bfa8a:	4680      	mov	r8, r0
   bfa8c:	b928      	cbnz	r0, bfa9a <__multadd+0x5a>
   bfa8e:	4602      	mov	r2, r0
   bfa90:	4b0c      	ldr	r3, [pc, #48]	; (bfac4 <__multadd+0x84>)
   bfa92:	480d      	ldr	r0, [pc, #52]	; (bfac8 <__multadd+0x88>)
   bfa94:	21b5      	movs	r1, #181	; 0xb5
   bfa96:	f7f9 feb9 	bl	b980c <__assert_func>
   bfa9a:	6922      	ldr	r2, [r4, #16]
   bfa9c:	3202      	adds	r2, #2
   bfa9e:	f104 010c 	add.w	r1, r4, #12
   bfaa2:	0092      	lsls	r2, r2, #2
   bfaa4:	300c      	adds	r0, #12
   bfaa6:	f7fe fbb0 	bl	be20a <memcpy>
   bfaaa:	4621      	mov	r1, r4
   bfaac:	4638      	mov	r0, r7
   bfaae:	f7ff ffa5 	bl	bf9fc <_Bfree>
   bfab2:	4644      	mov	r4, r8
   bfab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bfab8:	3501      	adds	r5, #1
   bfaba:	615e      	str	r6, [r3, #20]
   bfabc:	6125      	str	r5, [r4, #16]
   bfabe:	4620      	mov	r0, r4
   bfac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfac4:	000c1de1 	.word	0x000c1de1
   bfac8:	000c1e68 	.word	0x000c1e68

000bfacc <__s2b>:
   bfacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfad0:	460c      	mov	r4, r1
   bfad2:	4615      	mov	r5, r2
   bfad4:	461f      	mov	r7, r3
   bfad6:	2209      	movs	r2, #9
   bfad8:	3308      	adds	r3, #8
   bfada:	4606      	mov	r6, r0
   bfadc:	fb93 f3f2 	sdiv	r3, r3, r2
   bfae0:	2100      	movs	r1, #0
   bfae2:	2201      	movs	r2, #1
   bfae4:	429a      	cmp	r2, r3
   bfae6:	db09      	blt.n	bfafc <__s2b+0x30>
   bfae8:	4630      	mov	r0, r6
   bfaea:	f7ff ff47 	bl	bf97c <_Balloc>
   bfaee:	b940      	cbnz	r0, bfb02 <__s2b+0x36>
   bfaf0:	4602      	mov	r2, r0
   bfaf2:	4b19      	ldr	r3, [pc, #100]	; (bfb58 <__s2b+0x8c>)
   bfaf4:	4819      	ldr	r0, [pc, #100]	; (bfb5c <__s2b+0x90>)
   bfaf6:	21ce      	movs	r1, #206	; 0xce
   bfaf8:	f7f9 fe88 	bl	b980c <__assert_func>
   bfafc:	0052      	lsls	r2, r2, #1
   bfafe:	3101      	adds	r1, #1
   bfb00:	e7f0      	b.n	bfae4 <__s2b+0x18>
   bfb02:	9b08      	ldr	r3, [sp, #32]
   bfb04:	6143      	str	r3, [r0, #20]
   bfb06:	2d09      	cmp	r5, #9
   bfb08:	f04f 0301 	mov.w	r3, #1
   bfb0c:	6103      	str	r3, [r0, #16]
   bfb0e:	dd16      	ble.n	bfb3e <__s2b+0x72>
   bfb10:	f104 0909 	add.w	r9, r4, #9
   bfb14:	46c8      	mov	r8, r9
   bfb16:	442c      	add	r4, r5
   bfb18:	f818 3b01 	ldrb.w	r3, [r8], #1
   bfb1c:	4601      	mov	r1, r0
   bfb1e:	3b30      	subs	r3, #48	; 0x30
   bfb20:	220a      	movs	r2, #10
   bfb22:	4630      	mov	r0, r6
   bfb24:	f7ff ff8c 	bl	bfa40 <__multadd>
   bfb28:	45a0      	cmp	r8, r4
   bfb2a:	d1f5      	bne.n	bfb18 <__s2b+0x4c>
   bfb2c:	f1a5 0408 	sub.w	r4, r5, #8
   bfb30:	444c      	add	r4, r9
   bfb32:	1b2d      	subs	r5, r5, r4
   bfb34:	1963      	adds	r3, r4, r5
   bfb36:	42bb      	cmp	r3, r7
   bfb38:	db04      	blt.n	bfb44 <__s2b+0x78>
   bfb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfb3e:	340a      	adds	r4, #10
   bfb40:	2509      	movs	r5, #9
   bfb42:	e7f6      	b.n	bfb32 <__s2b+0x66>
   bfb44:	f814 3b01 	ldrb.w	r3, [r4], #1
   bfb48:	4601      	mov	r1, r0
   bfb4a:	3b30      	subs	r3, #48	; 0x30
   bfb4c:	220a      	movs	r2, #10
   bfb4e:	4630      	mov	r0, r6
   bfb50:	f7ff ff76 	bl	bfa40 <__multadd>
   bfb54:	e7ee      	b.n	bfb34 <__s2b+0x68>
   bfb56:	bf00      	nop
   bfb58:	000c1de1 	.word	0x000c1de1
   bfb5c:	000c1e68 	.word	0x000c1e68

000bfb60 <__hi0bits>:
   bfb60:	0c03      	lsrs	r3, r0, #16
   bfb62:	041b      	lsls	r3, r3, #16
   bfb64:	b9d3      	cbnz	r3, bfb9c <__hi0bits+0x3c>
   bfb66:	0400      	lsls	r0, r0, #16
   bfb68:	2310      	movs	r3, #16
   bfb6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bfb6e:	bf04      	itt	eq
   bfb70:	0200      	lsleq	r0, r0, #8
   bfb72:	3308      	addeq	r3, #8
   bfb74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bfb78:	bf04      	itt	eq
   bfb7a:	0100      	lsleq	r0, r0, #4
   bfb7c:	3304      	addeq	r3, #4
   bfb7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bfb82:	bf04      	itt	eq
   bfb84:	0080      	lsleq	r0, r0, #2
   bfb86:	3302      	addeq	r3, #2
   bfb88:	2800      	cmp	r0, #0
   bfb8a:	db05      	blt.n	bfb98 <__hi0bits+0x38>
   bfb8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bfb90:	f103 0301 	add.w	r3, r3, #1
   bfb94:	bf08      	it	eq
   bfb96:	2320      	moveq	r3, #32
   bfb98:	4618      	mov	r0, r3
   bfb9a:	4770      	bx	lr
   bfb9c:	2300      	movs	r3, #0
   bfb9e:	e7e4      	b.n	bfb6a <__hi0bits+0xa>

000bfba0 <__lo0bits>:
   bfba0:	6803      	ldr	r3, [r0, #0]
   bfba2:	f013 0207 	ands.w	r2, r3, #7
   bfba6:	4601      	mov	r1, r0
   bfba8:	d00b      	beq.n	bfbc2 <__lo0bits+0x22>
   bfbaa:	07da      	lsls	r2, r3, #31
   bfbac:	d423      	bmi.n	bfbf6 <__lo0bits+0x56>
   bfbae:	0798      	lsls	r0, r3, #30
   bfbb0:	bf49      	itett	mi
   bfbb2:	085b      	lsrmi	r3, r3, #1
   bfbb4:	089b      	lsrpl	r3, r3, #2
   bfbb6:	2001      	movmi	r0, #1
   bfbb8:	600b      	strmi	r3, [r1, #0]
   bfbba:	bf5c      	itt	pl
   bfbbc:	600b      	strpl	r3, [r1, #0]
   bfbbe:	2002      	movpl	r0, #2
   bfbc0:	4770      	bx	lr
   bfbc2:	b298      	uxth	r0, r3
   bfbc4:	b9a8      	cbnz	r0, bfbf2 <__lo0bits+0x52>
   bfbc6:	0c1b      	lsrs	r3, r3, #16
   bfbc8:	2010      	movs	r0, #16
   bfbca:	b2da      	uxtb	r2, r3
   bfbcc:	b90a      	cbnz	r2, bfbd2 <__lo0bits+0x32>
   bfbce:	3008      	adds	r0, #8
   bfbd0:	0a1b      	lsrs	r3, r3, #8
   bfbd2:	071a      	lsls	r2, r3, #28
   bfbd4:	bf04      	itt	eq
   bfbd6:	091b      	lsreq	r3, r3, #4
   bfbd8:	3004      	addeq	r0, #4
   bfbda:	079a      	lsls	r2, r3, #30
   bfbdc:	bf04      	itt	eq
   bfbde:	089b      	lsreq	r3, r3, #2
   bfbe0:	3002      	addeq	r0, #2
   bfbe2:	07da      	lsls	r2, r3, #31
   bfbe4:	d403      	bmi.n	bfbee <__lo0bits+0x4e>
   bfbe6:	085b      	lsrs	r3, r3, #1
   bfbe8:	f100 0001 	add.w	r0, r0, #1
   bfbec:	d005      	beq.n	bfbfa <__lo0bits+0x5a>
   bfbee:	600b      	str	r3, [r1, #0]
   bfbf0:	4770      	bx	lr
   bfbf2:	4610      	mov	r0, r2
   bfbf4:	e7e9      	b.n	bfbca <__lo0bits+0x2a>
   bfbf6:	2000      	movs	r0, #0
   bfbf8:	4770      	bx	lr
   bfbfa:	2020      	movs	r0, #32
   bfbfc:	4770      	bx	lr
	...

000bfc00 <__i2b>:
   bfc00:	b510      	push	{r4, lr}
   bfc02:	460c      	mov	r4, r1
   bfc04:	2101      	movs	r1, #1
   bfc06:	f7ff feb9 	bl	bf97c <_Balloc>
   bfc0a:	4602      	mov	r2, r0
   bfc0c:	b928      	cbnz	r0, bfc1a <__i2b+0x1a>
   bfc0e:	4b05      	ldr	r3, [pc, #20]	; (bfc24 <__i2b+0x24>)
   bfc10:	4805      	ldr	r0, [pc, #20]	; (bfc28 <__i2b+0x28>)
   bfc12:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bfc16:	f7f9 fdf9 	bl	b980c <__assert_func>
   bfc1a:	2301      	movs	r3, #1
   bfc1c:	6144      	str	r4, [r0, #20]
   bfc1e:	6103      	str	r3, [r0, #16]
   bfc20:	bd10      	pop	{r4, pc}
   bfc22:	bf00      	nop
   bfc24:	000c1de1 	.word	0x000c1de1
   bfc28:	000c1e68 	.word	0x000c1e68

000bfc2c <__multiply>:
   bfc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc30:	4691      	mov	r9, r2
   bfc32:	690a      	ldr	r2, [r1, #16]
   bfc34:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bfc38:	429a      	cmp	r2, r3
   bfc3a:	bfb8      	it	lt
   bfc3c:	460b      	movlt	r3, r1
   bfc3e:	460c      	mov	r4, r1
   bfc40:	bfbc      	itt	lt
   bfc42:	464c      	movlt	r4, r9
   bfc44:	4699      	movlt	r9, r3
   bfc46:	6927      	ldr	r7, [r4, #16]
   bfc48:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bfc4c:	68a3      	ldr	r3, [r4, #8]
   bfc4e:	6861      	ldr	r1, [r4, #4]
   bfc50:	eb07 060a 	add.w	r6, r7, sl
   bfc54:	42b3      	cmp	r3, r6
   bfc56:	b085      	sub	sp, #20
   bfc58:	bfb8      	it	lt
   bfc5a:	3101      	addlt	r1, #1
   bfc5c:	f7ff fe8e 	bl	bf97c <_Balloc>
   bfc60:	b930      	cbnz	r0, bfc70 <__multiply+0x44>
   bfc62:	4602      	mov	r2, r0
   bfc64:	4b44      	ldr	r3, [pc, #272]	; (bfd78 <__multiply+0x14c>)
   bfc66:	4845      	ldr	r0, [pc, #276]	; (bfd7c <__multiply+0x150>)
   bfc68:	f240 115d 	movw	r1, #349	; 0x15d
   bfc6c:	f7f9 fdce 	bl	b980c <__assert_func>
   bfc70:	f100 0514 	add.w	r5, r0, #20
   bfc74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bfc78:	462b      	mov	r3, r5
   bfc7a:	2200      	movs	r2, #0
   bfc7c:	4543      	cmp	r3, r8
   bfc7e:	d321      	bcc.n	bfcc4 <__multiply+0x98>
   bfc80:	f104 0314 	add.w	r3, r4, #20
   bfc84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bfc88:	f109 0314 	add.w	r3, r9, #20
   bfc8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bfc90:	9202      	str	r2, [sp, #8]
   bfc92:	1b3a      	subs	r2, r7, r4
   bfc94:	3a15      	subs	r2, #21
   bfc96:	f022 0203 	bic.w	r2, r2, #3
   bfc9a:	3204      	adds	r2, #4
   bfc9c:	f104 0115 	add.w	r1, r4, #21
   bfca0:	428f      	cmp	r7, r1
   bfca2:	bf38      	it	cc
   bfca4:	2204      	movcc	r2, #4
   bfca6:	9201      	str	r2, [sp, #4]
   bfca8:	9a02      	ldr	r2, [sp, #8]
   bfcaa:	9303      	str	r3, [sp, #12]
   bfcac:	429a      	cmp	r2, r3
   bfcae:	d80c      	bhi.n	bfcca <__multiply+0x9e>
   bfcb0:	2e00      	cmp	r6, #0
   bfcb2:	dd03      	ble.n	bfcbc <__multiply+0x90>
   bfcb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bfcb8:	2b00      	cmp	r3, #0
   bfcba:	d05a      	beq.n	bfd72 <__multiply+0x146>
   bfcbc:	6106      	str	r6, [r0, #16]
   bfcbe:	b005      	add	sp, #20
   bfcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfcc4:	f843 2b04 	str.w	r2, [r3], #4
   bfcc8:	e7d8      	b.n	bfc7c <__multiply+0x50>
   bfcca:	f8b3 a000 	ldrh.w	sl, [r3]
   bfcce:	f1ba 0f00 	cmp.w	sl, #0
   bfcd2:	d024      	beq.n	bfd1e <__multiply+0xf2>
   bfcd4:	f104 0e14 	add.w	lr, r4, #20
   bfcd8:	46a9      	mov	r9, r5
   bfcda:	f04f 0c00 	mov.w	ip, #0
   bfcde:	f85e 2b04 	ldr.w	r2, [lr], #4
   bfce2:	f8d9 1000 	ldr.w	r1, [r9]
   bfce6:	fa1f fb82 	uxth.w	fp, r2
   bfcea:	b289      	uxth	r1, r1
   bfcec:	fb0a 110b 	mla	r1, sl, fp, r1
   bfcf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bfcf4:	f8d9 2000 	ldr.w	r2, [r9]
   bfcf8:	4461      	add	r1, ip
   bfcfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfcfe:	fb0a c20b 	mla	r2, sl, fp, ip
   bfd02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bfd06:	b289      	uxth	r1, r1
   bfd08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bfd0c:	4577      	cmp	r7, lr
   bfd0e:	f849 1b04 	str.w	r1, [r9], #4
   bfd12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfd16:	d8e2      	bhi.n	bfcde <__multiply+0xb2>
   bfd18:	9a01      	ldr	r2, [sp, #4]
   bfd1a:	f845 c002 	str.w	ip, [r5, r2]
   bfd1e:	9a03      	ldr	r2, [sp, #12]
   bfd20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bfd24:	3304      	adds	r3, #4
   bfd26:	f1b9 0f00 	cmp.w	r9, #0
   bfd2a:	d020      	beq.n	bfd6e <__multiply+0x142>
   bfd2c:	6829      	ldr	r1, [r5, #0]
   bfd2e:	f104 0c14 	add.w	ip, r4, #20
   bfd32:	46ae      	mov	lr, r5
   bfd34:	f04f 0a00 	mov.w	sl, #0
   bfd38:	f8bc b000 	ldrh.w	fp, [ip]
   bfd3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bfd40:	fb09 220b 	mla	r2, r9, fp, r2
   bfd44:	4492      	add	sl, r2
   bfd46:	b289      	uxth	r1, r1
   bfd48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bfd4c:	f84e 1b04 	str.w	r1, [lr], #4
   bfd50:	f85c 2b04 	ldr.w	r2, [ip], #4
   bfd54:	f8be 1000 	ldrh.w	r1, [lr]
   bfd58:	0c12      	lsrs	r2, r2, #16
   bfd5a:	fb09 1102 	mla	r1, r9, r2, r1
   bfd5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bfd62:	4567      	cmp	r7, ip
   bfd64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bfd68:	d8e6      	bhi.n	bfd38 <__multiply+0x10c>
   bfd6a:	9a01      	ldr	r2, [sp, #4]
   bfd6c:	50a9      	str	r1, [r5, r2]
   bfd6e:	3504      	adds	r5, #4
   bfd70:	e79a      	b.n	bfca8 <__multiply+0x7c>
   bfd72:	3e01      	subs	r6, #1
   bfd74:	e79c      	b.n	bfcb0 <__multiply+0x84>
   bfd76:	bf00      	nop
   bfd78:	000c1de1 	.word	0x000c1de1
   bfd7c:	000c1e68 	.word	0x000c1e68

000bfd80 <__pow5mult>:
   bfd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfd84:	4615      	mov	r5, r2
   bfd86:	f012 0203 	ands.w	r2, r2, #3
   bfd8a:	4606      	mov	r6, r0
   bfd8c:	460f      	mov	r7, r1
   bfd8e:	d007      	beq.n	bfda0 <__pow5mult+0x20>
   bfd90:	4c25      	ldr	r4, [pc, #148]	; (bfe28 <__pow5mult+0xa8>)
   bfd92:	3a01      	subs	r2, #1
   bfd94:	2300      	movs	r3, #0
   bfd96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bfd9a:	f7ff fe51 	bl	bfa40 <__multadd>
   bfd9e:	4607      	mov	r7, r0
   bfda0:	10ad      	asrs	r5, r5, #2
   bfda2:	d03d      	beq.n	bfe20 <__pow5mult+0xa0>
   bfda4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bfda6:	b97c      	cbnz	r4, bfdc8 <__pow5mult+0x48>
   bfda8:	2010      	movs	r0, #16
   bfdaa:	f7f9 fcdf 	bl	b976c <malloc>
   bfdae:	4602      	mov	r2, r0
   bfdb0:	6270      	str	r0, [r6, #36]	; 0x24
   bfdb2:	b928      	cbnz	r0, bfdc0 <__pow5mult+0x40>
   bfdb4:	4b1d      	ldr	r3, [pc, #116]	; (bfe2c <__pow5mult+0xac>)
   bfdb6:	481e      	ldr	r0, [pc, #120]	; (bfe30 <__pow5mult+0xb0>)
   bfdb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bfdbc:	f7f9 fd26 	bl	b980c <__assert_func>
   bfdc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfdc4:	6004      	str	r4, [r0, #0]
   bfdc6:	60c4      	str	r4, [r0, #12]
   bfdc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bfdcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bfdd0:	b94c      	cbnz	r4, bfde6 <__pow5mult+0x66>
   bfdd2:	f240 2171 	movw	r1, #625	; 0x271
   bfdd6:	4630      	mov	r0, r6
   bfdd8:	f7ff ff12 	bl	bfc00 <__i2b>
   bfddc:	2300      	movs	r3, #0
   bfdde:	f8c8 0008 	str.w	r0, [r8, #8]
   bfde2:	4604      	mov	r4, r0
   bfde4:	6003      	str	r3, [r0, #0]
   bfde6:	f04f 0900 	mov.w	r9, #0
   bfdea:	07eb      	lsls	r3, r5, #31
   bfdec:	d50a      	bpl.n	bfe04 <__pow5mult+0x84>
   bfdee:	4639      	mov	r1, r7
   bfdf0:	4622      	mov	r2, r4
   bfdf2:	4630      	mov	r0, r6
   bfdf4:	f7ff ff1a 	bl	bfc2c <__multiply>
   bfdf8:	4639      	mov	r1, r7
   bfdfa:	4680      	mov	r8, r0
   bfdfc:	4630      	mov	r0, r6
   bfdfe:	f7ff fdfd 	bl	bf9fc <_Bfree>
   bfe02:	4647      	mov	r7, r8
   bfe04:	106d      	asrs	r5, r5, #1
   bfe06:	d00b      	beq.n	bfe20 <__pow5mult+0xa0>
   bfe08:	6820      	ldr	r0, [r4, #0]
   bfe0a:	b938      	cbnz	r0, bfe1c <__pow5mult+0x9c>
   bfe0c:	4622      	mov	r2, r4
   bfe0e:	4621      	mov	r1, r4
   bfe10:	4630      	mov	r0, r6
   bfe12:	f7ff ff0b 	bl	bfc2c <__multiply>
   bfe16:	6020      	str	r0, [r4, #0]
   bfe18:	f8c0 9000 	str.w	r9, [r0]
   bfe1c:	4604      	mov	r4, r0
   bfe1e:	e7e4      	b.n	bfdea <__pow5mult+0x6a>
   bfe20:	4638      	mov	r0, r7
   bfe22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfe26:	bf00      	nop
   bfe28:	000c1fb8 	.word	0x000c1fb8
   bfe2c:	000c1c11 	.word	0x000c1c11
   bfe30:	000c1e68 	.word	0x000c1e68

000bfe34 <__lshift>:
   bfe34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfe38:	460c      	mov	r4, r1
   bfe3a:	6849      	ldr	r1, [r1, #4]
   bfe3c:	6923      	ldr	r3, [r4, #16]
   bfe3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bfe42:	68a3      	ldr	r3, [r4, #8]
   bfe44:	4607      	mov	r7, r0
   bfe46:	4691      	mov	r9, r2
   bfe48:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bfe4c:	f108 0601 	add.w	r6, r8, #1
   bfe50:	42b3      	cmp	r3, r6
   bfe52:	db0b      	blt.n	bfe6c <__lshift+0x38>
   bfe54:	4638      	mov	r0, r7
   bfe56:	f7ff fd91 	bl	bf97c <_Balloc>
   bfe5a:	4605      	mov	r5, r0
   bfe5c:	b948      	cbnz	r0, bfe72 <__lshift+0x3e>
   bfe5e:	4602      	mov	r2, r0
   bfe60:	4b2a      	ldr	r3, [pc, #168]	; (bff0c <__lshift+0xd8>)
   bfe62:	482b      	ldr	r0, [pc, #172]	; (bff10 <__lshift+0xdc>)
   bfe64:	f240 11d9 	movw	r1, #473	; 0x1d9
   bfe68:	f7f9 fcd0 	bl	b980c <__assert_func>
   bfe6c:	3101      	adds	r1, #1
   bfe6e:	005b      	lsls	r3, r3, #1
   bfe70:	e7ee      	b.n	bfe50 <__lshift+0x1c>
   bfe72:	2300      	movs	r3, #0
   bfe74:	f100 0114 	add.w	r1, r0, #20
   bfe78:	f100 0210 	add.w	r2, r0, #16
   bfe7c:	4618      	mov	r0, r3
   bfe7e:	4553      	cmp	r3, sl
   bfe80:	db37      	blt.n	bfef2 <__lshift+0xbe>
   bfe82:	6920      	ldr	r0, [r4, #16]
   bfe84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bfe88:	f104 0314 	add.w	r3, r4, #20
   bfe8c:	f019 091f 	ands.w	r9, r9, #31
   bfe90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bfe94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bfe98:	d02f      	beq.n	bfefa <__lshift+0xc6>
   bfe9a:	f1c9 0e20 	rsb	lr, r9, #32
   bfe9e:	468a      	mov	sl, r1
   bfea0:	f04f 0c00 	mov.w	ip, #0
   bfea4:	681a      	ldr	r2, [r3, #0]
   bfea6:	fa02 f209 	lsl.w	r2, r2, r9
   bfeaa:	ea42 020c 	orr.w	r2, r2, ip
   bfeae:	f84a 2b04 	str.w	r2, [sl], #4
   bfeb2:	f853 2b04 	ldr.w	r2, [r3], #4
   bfeb6:	4298      	cmp	r0, r3
   bfeb8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bfebc:	d8f2      	bhi.n	bfea4 <__lshift+0x70>
   bfebe:	1b03      	subs	r3, r0, r4
   bfec0:	3b15      	subs	r3, #21
   bfec2:	f023 0303 	bic.w	r3, r3, #3
   bfec6:	3304      	adds	r3, #4
   bfec8:	f104 0215 	add.w	r2, r4, #21
   bfecc:	4290      	cmp	r0, r2
   bfece:	bf38      	it	cc
   bfed0:	2304      	movcc	r3, #4
   bfed2:	f841 c003 	str.w	ip, [r1, r3]
   bfed6:	f1bc 0f00 	cmp.w	ip, #0
   bfeda:	d001      	beq.n	bfee0 <__lshift+0xac>
   bfedc:	f108 0602 	add.w	r6, r8, #2
   bfee0:	3e01      	subs	r6, #1
   bfee2:	4638      	mov	r0, r7
   bfee4:	612e      	str	r6, [r5, #16]
   bfee6:	4621      	mov	r1, r4
   bfee8:	f7ff fd88 	bl	bf9fc <_Bfree>
   bfeec:	4628      	mov	r0, r5
   bfeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfef2:	f842 0f04 	str.w	r0, [r2, #4]!
   bfef6:	3301      	adds	r3, #1
   bfef8:	e7c1      	b.n	bfe7e <__lshift+0x4a>
   bfefa:	3904      	subs	r1, #4
   bfefc:	f853 2b04 	ldr.w	r2, [r3], #4
   bff00:	f841 2f04 	str.w	r2, [r1, #4]!
   bff04:	4298      	cmp	r0, r3
   bff06:	d8f9      	bhi.n	bfefc <__lshift+0xc8>
   bff08:	e7ea      	b.n	bfee0 <__lshift+0xac>
   bff0a:	bf00      	nop
   bff0c:	000c1de1 	.word	0x000c1de1
   bff10:	000c1e68 	.word	0x000c1e68

000bff14 <__mcmp>:
   bff14:	b530      	push	{r4, r5, lr}
   bff16:	6902      	ldr	r2, [r0, #16]
   bff18:	690c      	ldr	r4, [r1, #16]
   bff1a:	1b12      	subs	r2, r2, r4
   bff1c:	d10e      	bne.n	bff3c <__mcmp+0x28>
   bff1e:	f100 0314 	add.w	r3, r0, #20
   bff22:	3114      	adds	r1, #20
   bff24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bff28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bff2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bff30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bff34:	42a5      	cmp	r5, r4
   bff36:	d003      	beq.n	bff40 <__mcmp+0x2c>
   bff38:	d305      	bcc.n	bff46 <__mcmp+0x32>
   bff3a:	2201      	movs	r2, #1
   bff3c:	4610      	mov	r0, r2
   bff3e:	bd30      	pop	{r4, r5, pc}
   bff40:	4283      	cmp	r3, r0
   bff42:	d3f3      	bcc.n	bff2c <__mcmp+0x18>
   bff44:	e7fa      	b.n	bff3c <__mcmp+0x28>
   bff46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bff4a:	e7f7      	b.n	bff3c <__mcmp+0x28>

000bff4c <__mdiff>:
   bff4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bff50:	460c      	mov	r4, r1
   bff52:	4606      	mov	r6, r0
   bff54:	4611      	mov	r1, r2
   bff56:	4620      	mov	r0, r4
   bff58:	4690      	mov	r8, r2
   bff5a:	f7ff ffdb 	bl	bff14 <__mcmp>
   bff5e:	1e05      	subs	r5, r0, #0
   bff60:	d110      	bne.n	bff84 <__mdiff+0x38>
   bff62:	4629      	mov	r1, r5
   bff64:	4630      	mov	r0, r6
   bff66:	f7ff fd09 	bl	bf97c <_Balloc>
   bff6a:	b930      	cbnz	r0, bff7a <__mdiff+0x2e>
   bff6c:	4b3a      	ldr	r3, [pc, #232]	; (c0058 <__mdiff+0x10c>)
   bff6e:	4602      	mov	r2, r0
   bff70:	f240 2132 	movw	r1, #562	; 0x232
   bff74:	4839      	ldr	r0, [pc, #228]	; (c005c <__mdiff+0x110>)
   bff76:	f7f9 fc49 	bl	b980c <__assert_func>
   bff7a:	2301      	movs	r3, #1
   bff7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bff80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bff84:	bfa4      	itt	ge
   bff86:	4643      	movge	r3, r8
   bff88:	46a0      	movge	r8, r4
   bff8a:	4630      	mov	r0, r6
   bff8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bff90:	bfa6      	itte	ge
   bff92:	461c      	movge	r4, r3
   bff94:	2500      	movge	r5, #0
   bff96:	2501      	movlt	r5, #1
   bff98:	f7ff fcf0 	bl	bf97c <_Balloc>
   bff9c:	b920      	cbnz	r0, bffa8 <__mdiff+0x5c>
   bff9e:	4b2e      	ldr	r3, [pc, #184]	; (c0058 <__mdiff+0x10c>)
   bffa0:	4602      	mov	r2, r0
   bffa2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bffa6:	e7e5      	b.n	bff74 <__mdiff+0x28>
   bffa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bffac:	6926      	ldr	r6, [r4, #16]
   bffae:	60c5      	str	r5, [r0, #12]
   bffb0:	f104 0914 	add.w	r9, r4, #20
   bffb4:	f108 0514 	add.w	r5, r8, #20
   bffb8:	f100 0e14 	add.w	lr, r0, #20
   bffbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bffc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bffc4:	f108 0210 	add.w	r2, r8, #16
   bffc8:	46f2      	mov	sl, lr
   bffca:	2100      	movs	r1, #0
   bffcc:	f859 3b04 	ldr.w	r3, [r9], #4
   bffd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bffd4:	fa1f f883 	uxth.w	r8, r3
   bffd8:	fa11 f18b 	uxtah	r1, r1, fp
   bffdc:	0c1b      	lsrs	r3, r3, #16
   bffde:	eba1 0808 	sub.w	r8, r1, r8
   bffe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bffe6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bffea:	fa1f f888 	uxth.w	r8, r8
   bffee:	1419      	asrs	r1, r3, #16
   bfff0:	454e      	cmp	r6, r9
   bfff2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bfff6:	f84a 3b04 	str.w	r3, [sl], #4
   bfffa:	d8e7      	bhi.n	bffcc <__mdiff+0x80>
   bfffc:	1b33      	subs	r3, r6, r4
   bfffe:	3b15      	subs	r3, #21
   c0000:	f023 0303 	bic.w	r3, r3, #3
   c0004:	3304      	adds	r3, #4
   c0006:	3415      	adds	r4, #21
   c0008:	42a6      	cmp	r6, r4
   c000a:	bf38      	it	cc
   c000c:	2304      	movcc	r3, #4
   c000e:	441d      	add	r5, r3
   c0010:	4473      	add	r3, lr
   c0012:	469e      	mov	lr, r3
   c0014:	462e      	mov	r6, r5
   c0016:	4566      	cmp	r6, ip
   c0018:	d30e      	bcc.n	c0038 <__mdiff+0xec>
   c001a:	f10c 0203 	add.w	r2, ip, #3
   c001e:	1b52      	subs	r2, r2, r5
   c0020:	f022 0203 	bic.w	r2, r2, #3
   c0024:	3d03      	subs	r5, #3
   c0026:	45ac      	cmp	ip, r5
   c0028:	bf38      	it	cc
   c002a:	2200      	movcc	r2, #0
   c002c:	441a      	add	r2, r3
   c002e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c0032:	b17b      	cbz	r3, c0054 <__mdiff+0x108>
   c0034:	6107      	str	r7, [r0, #16]
   c0036:	e7a3      	b.n	bff80 <__mdiff+0x34>
   c0038:	f856 8b04 	ldr.w	r8, [r6], #4
   c003c:	fa11 f288 	uxtah	r2, r1, r8
   c0040:	1414      	asrs	r4, r2, #16
   c0042:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c0046:	b292      	uxth	r2, r2
   c0048:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c004c:	f84e 2b04 	str.w	r2, [lr], #4
   c0050:	1421      	asrs	r1, r4, #16
   c0052:	e7e0      	b.n	c0016 <__mdiff+0xca>
   c0054:	3f01      	subs	r7, #1
   c0056:	e7ea      	b.n	c002e <__mdiff+0xe2>
   c0058:	000c1de1 	.word	0x000c1de1
   c005c:	000c1e68 	.word	0x000c1e68

000c0060 <__ulp>:
   c0060:	b082      	sub	sp, #8
   c0062:	ed8d 0b00 	vstr	d0, [sp]
   c0066:	9b01      	ldr	r3, [sp, #4]
   c0068:	4912      	ldr	r1, [pc, #72]	; (c00b4 <__ulp+0x54>)
   c006a:	4019      	ands	r1, r3
   c006c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c0070:	2900      	cmp	r1, #0
   c0072:	dd05      	ble.n	c0080 <__ulp+0x20>
   c0074:	2200      	movs	r2, #0
   c0076:	460b      	mov	r3, r1
   c0078:	ec43 2b10 	vmov	d0, r2, r3
   c007c:	b002      	add	sp, #8
   c007e:	4770      	bx	lr
   c0080:	4249      	negs	r1, r1
   c0082:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c0086:	ea4f 5021 	mov.w	r0, r1, asr #20
   c008a:	f04f 0200 	mov.w	r2, #0
   c008e:	f04f 0300 	mov.w	r3, #0
   c0092:	da04      	bge.n	c009e <__ulp+0x3e>
   c0094:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c0098:	fa41 f300 	asr.w	r3, r1, r0
   c009c:	e7ec      	b.n	c0078 <__ulp+0x18>
   c009e:	f1a0 0114 	sub.w	r1, r0, #20
   c00a2:	291e      	cmp	r1, #30
   c00a4:	bfda      	itte	le
   c00a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c00aa:	fa20 f101 	lsrle.w	r1, r0, r1
   c00ae:	2101      	movgt	r1, #1
   c00b0:	460a      	mov	r2, r1
   c00b2:	e7e1      	b.n	c0078 <__ulp+0x18>
   c00b4:	7ff00000 	.word	0x7ff00000

000c00b8 <__b2d>:
   c00b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c00ba:	6905      	ldr	r5, [r0, #16]
   c00bc:	f100 0714 	add.w	r7, r0, #20
   c00c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c00c4:	1f2e      	subs	r6, r5, #4
   c00c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c00ca:	4620      	mov	r0, r4
   c00cc:	f7ff fd48 	bl	bfb60 <__hi0bits>
   c00d0:	f1c0 0320 	rsb	r3, r0, #32
   c00d4:	280a      	cmp	r0, #10
   c00d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; c0154 <__b2d+0x9c>
   c00da:	600b      	str	r3, [r1, #0]
   c00dc:	dc14      	bgt.n	c0108 <__b2d+0x50>
   c00de:	f1c0 0e0b 	rsb	lr, r0, #11
   c00e2:	fa24 f10e 	lsr.w	r1, r4, lr
   c00e6:	42b7      	cmp	r7, r6
   c00e8:	ea41 030c 	orr.w	r3, r1, ip
   c00ec:	bf34      	ite	cc
   c00ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c00f2:	2100      	movcs	r1, #0
   c00f4:	3015      	adds	r0, #21
   c00f6:	fa04 f000 	lsl.w	r0, r4, r0
   c00fa:	fa21 f10e 	lsr.w	r1, r1, lr
   c00fe:	ea40 0201 	orr.w	r2, r0, r1
   c0102:	ec43 2b10 	vmov	d0, r2, r3
   c0106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0108:	42b7      	cmp	r7, r6
   c010a:	bf3a      	itte	cc
   c010c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0110:	f1a5 0608 	subcc.w	r6, r5, #8
   c0114:	2100      	movcs	r1, #0
   c0116:	380b      	subs	r0, #11
   c0118:	d017      	beq.n	c014a <__b2d+0x92>
   c011a:	f1c0 0c20 	rsb	ip, r0, #32
   c011e:	fa04 f500 	lsl.w	r5, r4, r0
   c0122:	42be      	cmp	r6, r7
   c0124:	fa21 f40c 	lsr.w	r4, r1, ip
   c0128:	ea45 0504 	orr.w	r5, r5, r4
   c012c:	bf8c      	ite	hi
   c012e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c0132:	2400      	movls	r4, #0
   c0134:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c0138:	fa01 f000 	lsl.w	r0, r1, r0
   c013c:	fa24 f40c 	lsr.w	r4, r4, ip
   c0140:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c0144:	ea40 0204 	orr.w	r2, r0, r4
   c0148:	e7db      	b.n	c0102 <__b2d+0x4a>
   c014a:	ea44 030c 	orr.w	r3, r4, ip
   c014e:	460a      	mov	r2, r1
   c0150:	e7d7      	b.n	c0102 <__b2d+0x4a>
   c0152:	bf00      	nop
   c0154:	3ff00000 	.word	0x3ff00000

000c0158 <__d2b>:
   c0158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c015c:	4689      	mov	r9, r1
   c015e:	2101      	movs	r1, #1
   c0160:	ec57 6b10 	vmov	r6, r7, d0
   c0164:	4690      	mov	r8, r2
   c0166:	f7ff fc09 	bl	bf97c <_Balloc>
   c016a:	4604      	mov	r4, r0
   c016c:	b930      	cbnz	r0, c017c <__d2b+0x24>
   c016e:	4602      	mov	r2, r0
   c0170:	4b25      	ldr	r3, [pc, #148]	; (c0208 <__d2b+0xb0>)
   c0172:	4826      	ldr	r0, [pc, #152]	; (c020c <__d2b+0xb4>)
   c0174:	f240 310a 	movw	r1, #778	; 0x30a
   c0178:	f7f9 fb48 	bl	b980c <__assert_func>
   c017c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0180:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c0184:	bb35      	cbnz	r5, c01d4 <__d2b+0x7c>
   c0186:	2e00      	cmp	r6, #0
   c0188:	9301      	str	r3, [sp, #4]
   c018a:	d028      	beq.n	c01de <__d2b+0x86>
   c018c:	4668      	mov	r0, sp
   c018e:	9600      	str	r6, [sp, #0]
   c0190:	f7ff fd06 	bl	bfba0 <__lo0bits>
   c0194:	9900      	ldr	r1, [sp, #0]
   c0196:	b300      	cbz	r0, c01da <__d2b+0x82>
   c0198:	9a01      	ldr	r2, [sp, #4]
   c019a:	f1c0 0320 	rsb	r3, r0, #32
   c019e:	fa02 f303 	lsl.w	r3, r2, r3
   c01a2:	430b      	orrs	r3, r1
   c01a4:	40c2      	lsrs	r2, r0
   c01a6:	6163      	str	r3, [r4, #20]
   c01a8:	9201      	str	r2, [sp, #4]
   c01aa:	9b01      	ldr	r3, [sp, #4]
   c01ac:	61a3      	str	r3, [r4, #24]
   c01ae:	2b00      	cmp	r3, #0
   c01b0:	bf14      	ite	ne
   c01b2:	2202      	movne	r2, #2
   c01b4:	2201      	moveq	r2, #1
   c01b6:	6122      	str	r2, [r4, #16]
   c01b8:	b1d5      	cbz	r5, c01f0 <__d2b+0x98>
   c01ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c01be:	4405      	add	r5, r0
   c01c0:	f8c9 5000 	str.w	r5, [r9]
   c01c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c01c8:	f8c8 0000 	str.w	r0, [r8]
   c01cc:	4620      	mov	r0, r4
   c01ce:	b003      	add	sp, #12
   c01d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c01d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c01d8:	e7d5      	b.n	c0186 <__d2b+0x2e>
   c01da:	6161      	str	r1, [r4, #20]
   c01dc:	e7e5      	b.n	c01aa <__d2b+0x52>
   c01de:	a801      	add	r0, sp, #4
   c01e0:	f7ff fcde 	bl	bfba0 <__lo0bits>
   c01e4:	9b01      	ldr	r3, [sp, #4]
   c01e6:	6163      	str	r3, [r4, #20]
   c01e8:	2201      	movs	r2, #1
   c01ea:	6122      	str	r2, [r4, #16]
   c01ec:	3020      	adds	r0, #32
   c01ee:	e7e3      	b.n	c01b8 <__d2b+0x60>
   c01f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c01f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c01f8:	f8c9 0000 	str.w	r0, [r9]
   c01fc:	6918      	ldr	r0, [r3, #16]
   c01fe:	f7ff fcaf 	bl	bfb60 <__hi0bits>
   c0202:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c0206:	e7df      	b.n	c01c8 <__d2b+0x70>
   c0208:	000c1de1 	.word	0x000c1de1
   c020c:	000c1e68 	.word	0x000c1e68

000c0210 <__ratio>:
   c0210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0214:	4688      	mov	r8, r1
   c0216:	4669      	mov	r1, sp
   c0218:	4681      	mov	r9, r0
   c021a:	f7ff ff4d 	bl	c00b8 <__b2d>
   c021e:	a901      	add	r1, sp, #4
   c0220:	4640      	mov	r0, r8
   c0222:	ec55 4b10 	vmov	r4, r5, d0
   c0226:	f7ff ff47 	bl	c00b8 <__b2d>
   c022a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c022e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c0232:	eba3 0c02 	sub.w	ip, r3, r2
   c0236:	e9dd 3200 	ldrd	r3, r2, [sp]
   c023a:	1a9b      	subs	r3, r3, r2
   c023c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c0240:	ec51 0b10 	vmov	r0, r1, d0
   c0244:	2b00      	cmp	r3, #0
   c0246:	bfd6      	itet	le
   c0248:	460a      	movle	r2, r1
   c024a:	462a      	movgt	r2, r5
   c024c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0250:	468b      	mov	fp, r1
   c0252:	462f      	mov	r7, r5
   c0254:	bfd4      	ite	le
   c0256:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c025a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c025e:	4620      	mov	r0, r4
   c0260:	ee10 2a10 	vmov	r2, s0
   c0264:	465b      	mov	r3, fp
   c0266:	4639      	mov	r1, r7
   c0268:	f7fd fdb4 	bl	bddd4 <__aeabi_ddiv>
   c026c:	ec41 0b10 	vmov	d0, r0, r1
   c0270:	b003      	add	sp, #12
   c0272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0276 <__copybits>:
   c0276:	3901      	subs	r1, #1
   c0278:	b570      	push	{r4, r5, r6, lr}
   c027a:	1149      	asrs	r1, r1, #5
   c027c:	6914      	ldr	r4, [r2, #16]
   c027e:	3101      	adds	r1, #1
   c0280:	f102 0314 	add.w	r3, r2, #20
   c0284:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0288:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c028c:	1f05      	subs	r5, r0, #4
   c028e:	42a3      	cmp	r3, r4
   c0290:	d30c      	bcc.n	c02ac <__copybits+0x36>
   c0292:	1aa3      	subs	r3, r4, r2
   c0294:	3b11      	subs	r3, #17
   c0296:	f023 0303 	bic.w	r3, r3, #3
   c029a:	3211      	adds	r2, #17
   c029c:	42a2      	cmp	r2, r4
   c029e:	bf88      	it	hi
   c02a0:	2300      	movhi	r3, #0
   c02a2:	4418      	add	r0, r3
   c02a4:	2300      	movs	r3, #0
   c02a6:	4288      	cmp	r0, r1
   c02a8:	d305      	bcc.n	c02b6 <__copybits+0x40>
   c02aa:	bd70      	pop	{r4, r5, r6, pc}
   c02ac:	f853 6b04 	ldr.w	r6, [r3], #4
   c02b0:	f845 6f04 	str.w	r6, [r5, #4]!
   c02b4:	e7eb      	b.n	c028e <__copybits+0x18>
   c02b6:	f840 3b04 	str.w	r3, [r0], #4
   c02ba:	e7f4      	b.n	c02a6 <__copybits+0x30>

000c02bc <__any_on>:
   c02bc:	f100 0214 	add.w	r2, r0, #20
   c02c0:	6900      	ldr	r0, [r0, #16]
   c02c2:	114b      	asrs	r3, r1, #5
   c02c4:	4298      	cmp	r0, r3
   c02c6:	b510      	push	{r4, lr}
   c02c8:	db11      	blt.n	c02ee <__any_on+0x32>
   c02ca:	dd0a      	ble.n	c02e2 <__any_on+0x26>
   c02cc:	f011 011f 	ands.w	r1, r1, #31
   c02d0:	d007      	beq.n	c02e2 <__any_on+0x26>
   c02d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c02d6:	fa24 f001 	lsr.w	r0, r4, r1
   c02da:	fa00 f101 	lsl.w	r1, r0, r1
   c02de:	428c      	cmp	r4, r1
   c02e0:	d10b      	bne.n	c02fa <__any_on+0x3e>
   c02e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c02e6:	4293      	cmp	r3, r2
   c02e8:	d803      	bhi.n	c02f2 <__any_on+0x36>
   c02ea:	2000      	movs	r0, #0
   c02ec:	bd10      	pop	{r4, pc}
   c02ee:	4603      	mov	r3, r0
   c02f0:	e7f7      	b.n	c02e2 <__any_on+0x26>
   c02f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c02f6:	2900      	cmp	r1, #0
   c02f8:	d0f5      	beq.n	c02e6 <__any_on+0x2a>
   c02fa:	2001      	movs	r0, #1
   c02fc:	e7f6      	b.n	c02ec <__any_on+0x30>

000c02fe <_calloc_r>:
   c02fe:	b513      	push	{r0, r1, r4, lr}
   c0300:	434a      	muls	r2, r1
   c0302:	4611      	mov	r1, r2
   c0304:	9201      	str	r2, [sp, #4]
   c0306:	f7f9 fa71 	bl	b97ec <_malloc_r>
   c030a:	4604      	mov	r4, r0
   c030c:	b118      	cbz	r0, c0316 <_calloc_r+0x18>
   c030e:	9a01      	ldr	r2, [sp, #4]
   c0310:	2100      	movs	r1, #0
   c0312:	f7fd ffa2 	bl	be25a <memset>
   c0316:	4620      	mov	r0, r4
   c0318:	b002      	add	sp, #8
   c031a:	bd10      	pop	{r4, pc}
   c031c:	0000      	movs	r0, r0
	...

000c0320 <nan>:
   c0320:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0328 <nan+0x8>
   c0324:	4770      	bx	lr
   c0326:	bf00      	nop
   c0328:	00000000 	.word	0x00000000
   c032c:	7ff80000 	.word	0x7ff80000

000c0330 <__ascii_wctomb>:
   c0330:	b149      	cbz	r1, c0346 <__ascii_wctomb+0x16>
   c0332:	2aff      	cmp	r2, #255	; 0xff
   c0334:	bf85      	ittet	hi
   c0336:	238a      	movhi	r3, #138	; 0x8a
   c0338:	6003      	strhi	r3, [r0, #0]
   c033a:	700a      	strbls	r2, [r1, #0]
   c033c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0340:	bf98      	it	ls
   c0342:	2001      	movls	r0, #1
   c0344:	4770      	bx	lr
   c0346:	4608      	mov	r0, r1
   c0348:	4770      	bx	lr
	...

000c034c <__aeabi_d2lz>:
   c034c:	b538      	push	{r3, r4, r5, lr}
   c034e:	2200      	movs	r2, #0
   c0350:	2300      	movs	r3, #0
   c0352:	4604      	mov	r4, r0
   c0354:	460d      	mov	r5, r1
   c0356:	f7fd fe85 	bl	be064 <__aeabi_dcmplt>
   c035a:	b928      	cbnz	r0, c0368 <__aeabi_d2lz+0x1c>
   c035c:	4620      	mov	r0, r4
   c035e:	4629      	mov	r1, r5
   c0360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0364:	f7fd bf16 	b.w	be194 <__aeabi_d2ulz>
   c0368:	4620      	mov	r0, r4
   c036a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c036e:	f7fd ff11 	bl	be194 <__aeabi_d2ulz>
   c0372:	4240      	negs	r0, r0
   c0374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0378:	bd38      	pop	{r3, r4, r5, pc}
   c037a:	bf00      	nop

000c037c <dynalib_user>:
   c037c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c038c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c039c:	7620 7269 7574 6c61 4500 746e 7265 7420      virtual.Enter t
   c03ac:	6972 6767 7265 4a00 796f 7473 6369 206b     rigger.Joystick 
   c03bc:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c03cc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c03dc:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c03ec:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c03fc:	2520 2073 4f4d 4544 7525 003e 6966 656c      %s MODE%u>.file
   c040c:	616e 656d 4600 6c69 2065 2527 2773 6120     name.File '%s' a
   c041c:	726c 6165 7964 6520 6978 7473 2c73 6420     lready exists, d
   c042c:	6c65 7465 6e69 2067 6e61 2064 766f 7265     eleting and over
   c043c:	7277 7469 6e69 0067 7453 7261 6974 676e     writing.Starting
   c044c:	6f20 6666 6f6c 6461 6f20 2066 6966 656c      offload of file
   c045c:	203a 7325 6600 6c69 6365 6d6f 0070 6552     : %s.filecomp.Re
   c046c:	6361 6568 2064 6e65 2064 666f 6620 6c69     ached end of fil
   c047c:	3a65 2520 0073 6966 656c 6f64 656e 5200     e: %s.filedone.R
   c048c:	6365 6965 6576 2064 6f64 656e 6320 6d6f     eceived done com
   c049c:	616d 646e 2500 2573 3230 0078 6f42 3174     mand.%s%02x.Bot1
   c04ac:	6164 0074 6548 6c6c 206f 6f57 6c72 2164     dat.Hello World!
   c04bc:	2121 2121 2121 4300 4243 6425 746d 2572     !!!!!!.CCB%dmtr%
   c04cc:	3330 2564 3330 0064 4343 2542 6864 6177     03d%03d.CCB%dhwa
   c04dc:	7600 6365 6f74 3a72 5f3a 5f4d 6172 676e     .vector::_M_rang
   c04ec:	5f65 6863 6365 3a6b 5f20 6e5f 2820 6877     e_check: __n (wh
   c04fc:	6369 2068 7369 2520 757a 2029 3d3e 7420     ich is %zu) >= t
   c050c:	6968 2d73 733e 7a69 2865 2029 7728 6968     his->size() (whi
   c051c:	6863 6920 2073 7a25 2975 5200 6769 7468     ch is %zu).Right
   c052c:	7420 6972 6767 7265 4d00 646f 6669 6569      trigger.Modifie
   c053c:	2064 6e61 4f20 2f6e 664f 2066 6f43 746e     d an On/Off Cont
   c054c:	6f72 006c 6f42 3a74 2520 2c64 4d20 646f     rol.Bot: %d, Mod
   c055c:	6669 6569 2064 5500 2070 7274 6769 6567     ified .Up trigge
   c056c:	0072 6f44 6e77 7420 6972 6767 7265 7600     r.Down trigger.v
   c057c:	6365 6f74 3a72 5f3a 5f4d 6572 6c61 6f6c     ector::_M_reallo
   c058c:	5f63 6e69 6573 7472 4300 6568 6b63 7573     c_insert.Checksu
   c059c:	3a6d 2520 3230 2c78 2520 3330 0064 7453     m: %02x, %03d.St
   c05ac:	6972 676e 4c20 6e65 203a 6425 202c 6843     ring Len: %d, Ch
   c05bc:	6365 736b 6d75 203a 6425 5b00 4157 4e52     ecksum: %d.[WARN
   c05cc:	205d 654d 7373 6761 2065 6843 6365 736b     ] Message Checks
   c05dc:	6d75 4420 656f 2073 6f4e 2074 614d 6374     um Does Not Matc
   c05ec:	2168 203a 7325 5700 7261 696e 676e 202c     h!: %s.Warning, 
   c05fc:	6863 6365 736b 6d75 6420 656f 2073 6f6e     checksum does no
   c060c:	2074 616d 6374 0068 4343 3225 6e73 6b61     t match.CC%2snak
   c061c:	3325 0073 6361 006b 7573 0070 7525 2520     %3s.ack.sup.%u %
   c062c:	2075 7325 2520 0073 7453 7461 7375 5520     u %s %s.Status U
   c063c:	6470 7461 2165 2300 2323 2323 2323 2323     pdate!.#########
   c064c:	2323 2323 2323 2323 2323 2323 2323 2323     ################
   c065c:	0023 2323 2020 2020 5320 4154 5554 2053     #.##     STATUS 
   c066c:	5055 4144 4554 2020 2020 2323 2300 2023     UPDATE    ##.## 
   c067c:	2020 2020 2020 6f42 2074 3a23 2520 6431           Bot #: %1d
   c068c:	2020 2020 2020 2323 2300 2023 2020 2020           ##.##     
   c069c:	4220 7461 2074 3a25 2520 3330 2064 2020      Batt %: %03d   
   c06ac:	2020 2323 2300 2023 2020 4c20 4554 2020       ##.##    LTE  
   c06bc:	4c42 2045 5820 6542 2065 2020 2320 0023     BLE  XBee    ##.
   c06cc:	2323 2020 2020 2520 2064 2020 2520 2064     ##     %d    %d 
   c06dc:	2020 2020 6425 2020 2020 2320 0023 2323         %d     ##.##
   c06ec:	2020 614c 6974 7574 6564 4c20 6e6f 6967       Latitude Longi
   c06fc:	7574 6564 2020 2323 2300 2023 2e25 6636     tude  ##.## %.6f
   c070c:	2520 362e 2066 2323 7300 736e 2500 2073      %.6f ##.sns.%s 
   c071c:	7325 2520 2064 6425 2520 2064 6425 2520     %s %d %d %d %d %
   c072c:	0064 6f42 2074 3a23 2520 2064 6554 706d     d.Bot #: %d Temp
   c073c:	203a 6625 6e00 6b61 6800 6477 4600 756f     : %f.nak.hwd.Fou
   c074c:	646e 6120 6e20 7765 7720 7461 7265 6220     nd a new water b
   c075c:	746f 4920 0044 7470 0073 505b 5455 5d53     ot ID.pts.[PUTS]
   c076c:	5220 6365 6965 6576 2064 7453 6972 676e      Received String
   c077c:	4320 6d6f 616d 646e 203a 7325 5b00 4e49      Command: %s.[IN
   c078c:	4f46 205d 6552 6563 7669 6465 4c20 4554     FO] Received LTE
   c079c:	4d20 7365 6173 6567 203a 7325 4e00 7765      Message: %s.New
   c07ac:	4220 2054 6f43 6d6d 6e61 3a64 0020 495b      BT Command: .[I
   c07bc:	464e 5d4f 5220 6365 6965 6576 2064 4c42     NFO] Received BL
   c07cc:	2045 654d 7373 6761 3a65 2520 0073 495b     E Message: %s.[I
   c07dc:	464e 5d4f 5220 6365 6965 6576 2064 6152     NFO] Received Ra
   c07ec:	7073 6562 7272 2079 6950 4d20 7365 6173     spberry Pi Messa
   c07fc:	6567 203a 7325 4e00 7765 5820 6542 2065     ge: %s.New XBee 
   c080c:	6f43 6d6d 6e61 3a64 5b00 4e49 4f46 205d     Command:.[INFO] 
   c081c:	6552 6563 7669 6465 5820 6542 2065 654d     Received XBee Me
   c082c:	7373 6761 3a65 2520 0073 6f46 6e75 2064     ssage: %s.Found 
   c083c:	6f42 2074 3a23 2520 2064 6425 2520 2064     Bot #: %d %d %d 
   c084c:	6425 2520 2064 6425 2520 2064 6425 202c     %d %d %d %d %d, 
   c085c:	6573 7672 6369 7365 203a 6425 4600 756f     services: %d.Fou
   c086c:	646e 6e20 7765 6220 746f 203a 6425 4300     nd new bot: %d.C
   c087c:	6e6f 656e 7463 6465 7420 206f 6f42 2074     onnected to Bot 
   c088c:	6425 2f00 4500 7272 726f 202c 6f63 6c75     %d./.Error, coul
   c089c:	2064 6f6e 2074 706f 6e65 7220 6f6f 2074     d not open root 
   c08ac:	6964 6572 7463 726f 2079 6e6f 5320 2044     directory on SD 
   c08bc:	6143 6472 202e 7349 6920 2074 6e69 6573     Card. Is it inse
   c08cc:	7472 6465 003f 4343 2542 6464 706d 5200     rted?.CCB%ddmp.R
   c08dc:	7165 6575 7473 6465 5320 2044 6143 6472     equested SD Card
   c08ec:	4420 7461 2061 7266 6d6f 4220 746f 2520      Data from Bot %
   c08fc:	2064 764f 7265 4220 454c 000a 7543 7272     d Over BLE..Curr
   c090c:	6e65 6c74 2079 6f63 6e6e 6365 6574 2064     ently connected 
   c091c:	6f74 4220 746f 2520 2c66 6e20 6565 2064     to Bot %f, need 
   c092c:	6f74 6320 6e6f 656e 7463 7420 206f 6f42     to connect to Bo
   c093c:	2074 6425 5300 6375 6563 7373 7566 6c6c     t %d.Successfull
   c094c:	2079 6f63 6e6e 6365 6574 2064 6f74 4220     y connected to B
   c095c:	746f 2520 0064 7453 7261 6974 676e 6620     ot %d.Starting f
   c096c:	6c69 2065 7274 6e61 6673 7265 6620 6f72     ile transfer fro
   c097c:	206d 6f42 2074 6425 4600 6e69 7369 6568     m Bot %d.Finishe
   c098c:	2064 7274 6e61 6673 7265 6972 676e 6620     d transferring f
   c099c:	6c69 2065 7266 6d6f 4220 746f 2520 0064     ile from Bot %d.
   c09ac:	6552 6f63 6472 4200 7461 6574 7972 4f00     Record.Battery.O
   c09bc:	6666 6f6c 6461 5300 6e65 7274 0079 3025     ffload.Sentry.%0
   c09cc:	6432 3025 6432 3025 6434 3025 6432 3025     2d%02d%04d%02d%0
   c09dc:	6432 3025 6432 5700 7461 7265 6f42 0074     2d%02d.WaterBot.
   c09ec:	4c5f 474f 742e 7478 4500 7272 726f 203a     _LOG.txt.Error: 
   c09fc:	6f63 6c75 2064 6f6e 2074 6f63 6e6e 6365     could not connec
   c0a0c:	2074 6f74 5320 2044 6163 6472 0021 5320     t to SD card!. S
   c0a1c:	6174 7472 6e69 2067 6200 3234 3630 3139     tarting .b420691
   c0a2c:	2d30 6364 6234 352d 3437 2d33 3863 3162     0-dc4b-5743-c8b1
   c0a3c:	392d 6432 6530 3537 3831 6232 0030 3462     -92d0e75182b0.b4
   c0a4c:	3032 3936 3231 642d 3463 2d62 3735 3334     206912-dc4b-5743
   c0a5c:	632d 6238 2d31 3239 3064 3765 3135 3238     -c8b1-92d0e75182
   c0a6c:	3062 6200 3234 3630 3139 2d33 6364 6234     b0.b4206913-dc4b
   c0a7c:	352d 3437 2d33 3863 3162 392d 6432 6530     -5743-c8b1-92d0e
   c0a8c:	3537 3831 6232 0030 3462 3032 3936 3431     75182b0.b4206914
   c0a9c:	642d 3463 2d62 3735 3334 632d 6238 2d31     -dc4b-5743-c8b1-
   c0aac:	3239 3064 3765 3135 3238 3062 4f00 006e     92d0e75182b0.On.
   c0abc:	664f 0066 7250 6e69 6574 2064 6948 6867     Off.Printed High
   c0acc:	696c 6867 6574 2064 654d 756e 6920 6574     lighted Menu ite
   c0adc:	206d 6977 6874 6e20 6d61 3a65 2520 0073     m with name: %s.
   c0aec:	654d 756e 6920 6574 206d 0030 654d 756e     Menu item 0.Menu
   c0afc:	6920 6574 206d 6425 4300 4143 7342 6370      item %d.CCABspc
   c0b0c:	2542 6431 4300 4143 7342 6370 424e 4500     B%1d.CCABspcNB.E
   c0b1c:	7272 726f 202c 4453 4320 7261 2064 6f4e     rror, SD Card No
   c0b2c:	2074 6f77 6b72 6e69 0067 4343 2542 6364     t working.CCB%dc
   c0b3c:	666e 3125 0064 4343 3142 6572 0071 6554     nf%1d.CCB1req.Te
   c0b4c:	706d 203a 3025 362e 0066 0000               mp: %0.6f...

000c0b58 <_ZTVN8particle11SPISettingsE>:
	...
   c0b60:	42c9 000b 40cd 000b 40f7 000b               .B...@...@..

000c0b6c <_ZTV5Timer>:
	...
   c0b74:	434d 000b 43a1 000b 415d 000b               MC...C..]A..

000c0b80 <_ZTV4File>:
	...
   c0b88:	40f5 000b 4105 000b 4145 000b 413f 000b     .@...A..EA..?A..
   c0b98:	40cf 000b 411f 000b 4119 000b 4113 000b     .@...A...A...A..

000c0ba8 <_ZL4font>:
   c0ba8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c0bb8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c0bc8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c0bd8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c0be8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c0bf8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c0c08:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c0c18:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c0c28:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c0c38:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c0c48:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c0c58:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c0c68:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c0c78:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c0c88:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c0c98:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c0ca8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c0cb8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c0cc8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c0cd8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c0ce8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c0cf8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c0d08:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c0d18:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c0d28:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c0d38:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c0d48:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c0d58:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c0d68:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c0d78:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c0d88:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c0d98:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c0da8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c0db8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c0dc8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c0dd8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c0de8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c0df8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c0e08:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c0e18:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c0e28:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c0e38:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c0e48:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c0e58:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c0e68:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c0e78:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c0e88:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c0e98:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c0ea8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c0eb8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c0ec8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c0ed8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c0ee8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c0ef8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c0f08:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c0f18:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c0f28:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c0f38:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c0f48:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c0f58:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c0f68:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c0f78:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c0f88:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c0f98:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c0fa8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c0fb8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c0fc8:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c0fd8:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c0fe8:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c0ff8:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c1008:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c1018:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c1028:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c1038:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c1048:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c1058:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c1068:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c1078:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c1088:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c1098:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c10a8 <_ZTV12Adafruit_GFX>:
	...
   c10b8:	84f1 000b c895 000b 40a5 000b 7ef7 000b     .........@...~..
   c10c8:	7ef9 000b 7f2b 000b 7f07 000b 7f19 000b     .~..+...........
   c10d8:	7e39 000b 7ef7 000b 8123 000b 8121 000b     9~...~..#...!...
   c10e8:	7f43 000b 7f81 000b 7fbb 000b 8001 000b     C...............
   c10f8:	801d 000b 80a1 000b                         ........

000c1100 <_ZL12splash1_data>:
   c1100:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   c1110:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   c1120:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   c1130:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   c1140:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   c1150:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   c1168:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   c1178:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   c1188:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   c1198:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   c11a8:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   c11b8:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   c11c8:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   c11d8:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   c11e8:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   c11f8:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   c1208:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   c1218:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   c1228:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   c1238:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   c1248:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   c1258:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   c1268:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   c1278:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   c1290:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   c12a8:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   c12b8:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   c12c8:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   c12d8:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   c12e8:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   c12f8:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   c1308:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   c1318:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   c1328:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   c1338:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   c1348:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   c1358:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   c1368:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   c1378:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   c1388:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   c1398:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   c13a8:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   c13b8:	fdff 5b6b 6adb c0fd                         ..k[.j..

000c13c0 <_ZL12splash2_data>:
   c13c0:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c13d0:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c13e0:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c13fc:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c140c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c141c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c142c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c143c:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c144c:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c145c:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c146c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c147c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c148c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c149c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c14ac:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c14bc:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c14cc:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c14dc:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c14ec:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c14fc:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c150c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c151c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c152c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c153c:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1554:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c1564:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c1574:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1584:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c1594:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c15a0 <_ZTV16Adafruit_SSD1306>:
	...
   c15a8:	8601 000b 8619 000b 84f1 000b c895 000b     ................
   c15b8:	862d 000b 7ef7 000b 7ef9 000b 7f2b 000b     -....~...~..+...
   c15c8:	7f07 000b 7f19 000b 7e39 000b 7ef7 000b     ........9~...~..
   c15d8:	8123 000b 87cb 000b 8d73 000b 8d25 000b     #.......s...%...
   c15e8:	7fbb 000b 8001 000b 801d 000b 80a1 000b     ................

000c15f8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   c15f8:	8000 e0c0 f8f0 fefc                         ........

000c1600 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   c1600:	0100 0703 1f0f 7f3f                         ......?.

000c1608 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   c1608:	d5ae a880                                   ....

000c160c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   c160c:	00d3 8d40                                   ..@.

000c1610 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   c1610:	0020 c8a1                                    ...

000c1614 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   c1614:	40db a6a4 af2e                              .@....

000c161a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   c161a:	02da 8f81                                   ....

000c161e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   c161e:	12da                                         ...

000c1621 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   c1621:	02da                                         ...

000c1624 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   c1624:	0022 21ff 0000 0000                         "..!....

000c162c <_ZTV16OledWingAdafruit>:
	...
   c1634:	8f39 000b 8f59 000b 84f1 000b c895 000b     9...Y...........
   c1644:	862d 000b 7ef7 000b 7ef9 000b 7f2b 000b     -....~...~..+...
   c1654:	7f07 000b 7f19 000b 7e39 000b 7ef7 000b     ........9~...~..
   c1664:	8123 000b 87cb 000b 8d73 000b 8d25 000b     #.......s...%...
   c1674:	7fbb 000b 8001 000b 801d 000b 80a1 000b     ................
   c1684:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   c1694:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   c16a4:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   c16b4:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   c16c4:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   c16d4:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   c16e4:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   c16f4:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   c1704:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   c1714:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   c1724:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   c1734:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   c1744:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   c1754:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   c1764:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   c1774:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   c1784:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   c1794:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   c17a4:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   c17b4:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   c17c4:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   c17d4:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   c17e4:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   c17f4:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   c1804:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   c1814:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   c1824:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   c1834:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   c1844:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   c1854:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   c1864:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   c1874:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   c1884:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   c1894:	7463 7265 7369 6974 2e63 0000               cteristic...

000c18a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c18a8:	9871 000b 98d5 000b 9a4b 000b 98ff 000b     q.......K.......
   c18b8:	9875 000b                                   u...

000c18bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c18c4:	986d 000b 98e3 000b 986f 000b 9905 000b     m.......o.......
   c18d4:	9895 000b                                   ....

000c18d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c18e0:	986b 000b 98f1 000b a5a5 000b 990b 000b     k...............
   c18f0:	98b5 000b                                   ....

000c18f4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1900:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1910:	0000 0000                                   ....

000c1914 <_ZTVN5spark13CellularClassE>:
	...
   c191c:	bf47 000b bf3d 000b bf33 000b bee9 000b     G...=...3.......
   c192c:	bf27 000b bf1b 000b c771 000b c779 000b     '.......q...y...
   c193c:	bf0f 000b bf07 000b befd 000b bef3 000b     ................
   c194c:	c7a9 000b                                   ....

000c1950 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1958:	bf81 000b bf87 000b bfc5 000b bf95 000b     ................
   c1968:	bf83 000b                                   ....

000c196c <_ZTVN5spark13EthernetClassE>:
	...
   c1974:	c50f 000b c505 000b c4fb 000b c4f1 000b     ................
   c1984:	c4e5 000b c4d9 000b c771 000b c779 000b     ........q...y...
   c1994:	c4cd 000b c4c5 000b c4bb 000b c4b1 000b     ................
   c19a4:	c7a9 000b                                   ....

000c19a8 <_ZTV7TwoWire>:
	...
   c19b0:	c52d 000b c577 000b c54f 000b c52f 000b     -...w...O.../...
   c19c0:	c557 000b c55f 000b c567 000b c56f 000b     W..._...g...o...

000c19d0 <_ZTV9IPAddress>:
	...
   c19d8:	c641 000b c631 000b c633 000b 7061 0070     A...1...3...app.

000c19e8 <_ZTVN5spark12NetworkClassE>:
	...
   c19f0:	c731 000b c73b 000b c745 000b c74f 000b     1...;...E...O...
   c1a00:	c759 000b c765 000b c771 000b c779 000b     Y...e...q...y...
   c1a10:	c781 000b c78d 000b c795 000b c79f 000b     ................
   c1a20:	c7a9 000b                                   ....

000c1a24 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1a24:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c1a34:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c1a44:	6d69 0065                                   ime.

000c1a48 <_ZTV11USARTSerial>:
	...
   c1a50:	cf61 000b cfcd 000b cfa5 000b c895 000b     a...............
   c1a60:	cf75 000b cf91 000b cf83 000b cf9f 000b     u...............
   c1a70:	cf63 000b cf67 000b                         c...g...

000c1a78 <_ZTV9USBSerial>:
	...
   c1a80:	d019 000b d081 000b d057 000b c895 000b     ........W.......
   c1a90:	d049 000b d01b 000b d02b 000b d07b 000b     I.......+...{...
   c1aa0:	d03b 000b d013 000b                         ;.......

000c1aa8 <_ZSt7nothrow>:
	...

000c1aa9 <_ZTSSt19_Sp_make_shared_tag>:
   c1aa9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c1ab9:	6572 5f64 6174 0067 0000                     red_tag....

000c1ac4 <_ZTISt19_Sp_make_shared_tag>:
   c1ac4:	1b78 000c 1aa9 000c 6f6e 2074 6e65 756f     x.......not enou
   c1ad4:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c1ae4:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c1af4:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c1b04:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c1b14:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c1b24:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c1b34:	3000 3231 3433 3635 3837 0039               .0123456789.

000c1b40 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c1b40:	1bd8 000c 1b4c 000c 1bfc 000c               ....L.......

000c1b4c <_ZTSN10__cxxabiv117__class_type_infoE>:
   c1b4c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c1b5c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1b6c:	0045 0000                                   E...

000c1b70 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c1b70:	0000 0000 1b40 000c d631 000b d645 000b     ....@...1...E...
   c1b80:	d7d9 000b d7d9 000b d6af 000b d5f3 000b     ................
   c1b90:	d697 000b d659 000b d625 000b               ....Y...%...

000c1b9c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1b9c:	1bd8 000c 1ba8 000c 1b40 000c               ........@...

000c1ba8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c1ba8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c1bb8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c1bc8:	666e 456f 0000 0000                         nfoE....

000c1bd0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c1bd0:	0000 0000 1b9c 000c d6d9 000b d6ed 000b     ................
   c1be0:	d7d9 000b d7d9 000b d6af 000b d5f3 000b     ................
   c1bf0:	d7ad 000b d739 000b d701 000b               ....9.......

000c1bfc <_ZTISt9type_info>:
   c1bfc:	1b78 000c 1c04 000c                         x.......

000c1c04 <_ZTSSt9type_info>:
   c1c04:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c1c14:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c1c24:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c1c34:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1c44:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1c54:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1c64:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1c74:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c1c84:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c1c90 <fpi.1>:
   c1c90:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1ca0:	0000 0000                                   ....

000c1ca4 <fpinan.0>:
   c1ca4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c1cb4:	0000 0000                                   ....

000c1cb8 <tinytens>:
   c1cb8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c1cc8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c1cd8:	6f43 64ac 0628 1168                         Co.d(.h.

000c1ce0 <_ctype_>:
   c1ce0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c1cf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c1d00:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1d10:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1d20:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1d30:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1d40:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1d50:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c1d60:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c1de0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c1df0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c1e00:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c1e10:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c1e20:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c1e30:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c1e40:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c1e50:	632e 0000                                   .c..

000c1e54 <_C_numeric_locale>:
   c1e54:	189d 000c 0907 000c daf8 2003 0043 4f50     ........... C.PO
   c1e64:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c1e74:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1e84:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1e94:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1ea4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1eb4:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c1ec4:	0000 0000                                   ....

000c1ec8 <__mprec_bigtens>:
   c1ec8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c1ed8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c1ee8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c1ef0 <__mprec_tens>:
   c1ef0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c1f00:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c1f10:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c1f20:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c1f30:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c1f40:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c1f50:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c1f60:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c1f70:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c1f80:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c1f90:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c1fa0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c1fb0:	9db4 79d9 7843 44ea                         ...yCx.D

000c1fb8 <p05.0>:
   c1fb8:	0005 0000 0019 0000 007d 0000               ........}...

000c1fc4 <link_const_variable_data_end>:
   c1fc4:	000b5e99 	.word	0x000b5e99
   c1fc8:	000bbed9 	.word	0x000bbed9
   c1fcc:	000bbf51 	.word	0x000bbf51
   c1fd0:	000bc519 	.word	0x000bc519
   c1fd4:	000bc721 	.word	0x000bc721
   c1fd8:	000bc881 	.word	0x000bc881
   c1fdc:	000bc9b1 	.word	0x000bc9b1
   c1fe0:	000bcda9 	.word	0x000bcda9
   c1fe4:	000bcf4d 	.word	0x000bcf4d

000c1fe8 <link_constructors_end>:
	...
