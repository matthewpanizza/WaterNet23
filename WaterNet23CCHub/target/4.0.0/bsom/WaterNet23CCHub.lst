
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000dde0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1e00  000c1e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1e24  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da88  000c1e28  0002da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b88  2003dc68  2003dc68  0003dc68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c2008  000c2008  00032008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2030  000c2030  00032030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001c32c1  00000000  00000000  00032034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001dfdc  00000000  00000000  001f52f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00058039  00000000  00000000  002132d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b20  00000000  00000000  0026b30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e028  00000000  00000000  0026ee2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ca90  00000000  00000000  0027ce52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0006c264  00000000  00000000  002c98e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b981  00000000  00000000  00335b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bcbc  00000000  00000000  004814c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a f804 	bl	be03e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a f826 	bl	be08e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da88 	.word	0x2003da88
   b404c:	000c1e28 	.word	0x000c1e28
   b4050:	2003dc68 	.word	0x2003dc68
   b4054:	2003dc68 	.word	0x2003dc68
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f008 fff7 	bl	bd054 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1ddc 	.word	0x000c1ddc
   b4080:	000c1e00 	.word	0x000c1e00

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bd1a 	b.w	b5abc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 f9cb 	bl	b6424 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f008 bf97 	b.w	bcfc4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 ba9b 	b.w	b95d0 <malloc>

000b409a <_Znaj>:
   b409a:	f005 ba99 	b.w	b95d0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 ba9f 	b.w	b95e0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 f9ac 	bl	b9408 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b90d9 	.word	0x000b90d9
   b40b8:	000c01c8 	.word	0x000c01c8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b01      	ldr	r3, [pc, #4]	; (b40f0 <_Z12actionTimer5v+0x8>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40ee:	4770      	bx	lr
   b40f0:	2003dedc 	.word	0x2003dedc

000b40f4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f4:	4770      	bx	lr

000b40f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40f6:	b510      	push	{r4, lr}
  }
   b40f8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40fa:	4604      	mov	r4, r0
  }
   b40fc:	f7ff ffcf 	bl	b409e <_ZdlPvj>
   b4100:	4620      	mov	r0, r4
   b4102:	bd10      	pop	{r4, pc}

000b4104 <_ZN4FileD0Ev>:
   b4104:	b510      	push	{r4, lr}
   b4106:	2134      	movs	r1, #52	; 0x34
   b4108:	4604      	mov	r4, r0
   b410a:	f7ff ffc8 	bl	b409e <_ZdlPvj>
   b410e:	4620      	mov	r0, r4
   b4110:	bd10      	pop	{r4, pc}

000b4112 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b4112:	3010      	adds	r0, #16
   b4114:	f002 bc64 	b.w	b69e0 <_ZN7FatFile4syncEv>

000b4118 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4118:	3010      	adds	r0, #16
   b411a:	f002 bb82 	b.w	b6822 <_ZN7FatFile4peekEv>

000b411e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b411e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4120:	2201      	movs	r2, #1
   b4122:	f10d 0107 	add.w	r1, sp, #7
   b4126:	3010      	adds	r0, #16
   b4128:	f002 facd 	bl	b66c6 <_ZN7FatFile4readEPvj>
   b412c:	2801      	cmp	r0, #1
   b412e:	bf0c      	ite	eq
   b4130:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4134:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4138:	b003      	add	sp, #12
   b413a:	f85d fb04 	ldr.w	pc, [sp], #4

000b413e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b413e:	3010      	adds	r0, #16
   b4140:	f002 bce8 	b.w	b6b14 <_ZN7FatFile5writeEPKvj>

000b4144 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4144:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4146:	2201      	movs	r2, #1
   b4148:	f88d 1007 	strb.w	r1, [sp, #7]
   b414c:	3010      	adds	r0, #16
   b414e:	f10d 0107 	add.w	r1, sp, #7
   b4152:	f002 fcdf 	bl	b6b14 <_ZN7FatFile5writeEPKvj>
  }
   b4156:	b003      	add	sp, #12
   b4158:	f85d fb04 	ldr.w	pc, [sp], #4

000b415c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b415c:	6943      	ldr	r3, [r0, #20]
   b415e:	b113      	cbz	r3, b4166 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4160:	6983      	ldr	r3, [r0, #24]
   b4162:	300c      	adds	r0, #12
   b4164:	4718      	bx	r3
            callback();
        }
    }
   b4166:	4770      	bx	lr

000b4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b416a:	2100      	movs	r1, #0
   b416c:	4604      	mov	r4, r0
   b416e:	4608      	mov	r0, r1
   b4170:	f004 ff52 	bl	b9018 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4176:	4620      	mov	r0, r4
   b4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b417c:	f004 ff64 	bl	b9048 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4182:	b10c      	cbz	r4, b4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4184:	2301      	movs	r3, #1
   b4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4188:	2100      	movs	r1, #0
   b418a:	2001      	movs	r0, #1
   b418c:	f004 ff44 	bl	b9018 <os_thread_scheduling>
            }
        }
        if (t) {
   b4190:	b12c      	cbz	r4, b419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4192:	6823      	ldr	r3, [r4, #0]
   b4194:	4620      	mov	r0, r4
   b4196:	689b      	ldr	r3, [r3, #8]
   b4198:	4798      	blx	r3
            t->running = false;
   b419a:	2300      	movs	r3, #0
   b419c:	7123      	strb	r3, [r4, #4]
        }
    }
   b419e:	b002      	add	sp, #8
   b41a0:	bd10      	pop	{r4, pc}
	...

000b41a4 <_Z10entHandlerv>:
    MenuItems.push_back(sentryToggle);

    SelectedItem = &MenuItems.at(menuItem);
}

void entHandler(){
   b41a4:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41a6:	4c0e      	ldr	r4, [pc, #56]	; (b41e0 <_Z10entHandlerv+0x3c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a8:	f004 ffa6 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
   b41ac:	6823      	ldr	r3, [r4, #0]
   b41ae:	1ac0      	subs	r0, r0, r3
   b41b0:	2863      	cmp	r0, #99	; 0x63
   b41b2:	d913      	bls.n	b41dc <_Z10entHandlerv+0x38>
    Serial.println("Enter trigger");
   b41b4:	f008 febe 	bl	bcf34 <_Z16_fetch_usbserialv>
   b41b8:	490a      	ldr	r1, [pc, #40]	; (b41e4 <_Z10entHandlerv+0x40>)
   b41ba:	f008 fac6 	bl	bc74a <_ZN5Print7printlnEPKc>
   b41be:	f004 ff9b 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
    
    redrawMenu = true;  
   b41c2:	4b09      	ldr	r3, [pc, #36]	; (b41e8 <_Z10entHandlerv+0x44>)
    selectingBots = !selectingBots;
   b41c4:	4909      	ldr	r1, [pc, #36]	; (b41ec <_Z10entHandlerv+0x48>)
    debounceTime = millis();
   b41c6:	6020      	str	r0, [r4, #0]
    redrawMenu = true;  
   b41c8:	2201      	movs	r2, #1
   b41ca:	701a      	strb	r2, [r3, #0]
    selectingBots = !selectingBots;
   b41cc:	780b      	ldrb	r3, [r1, #0]
   b41ce:	4053      	eors	r3, r2
   b41d0:	700b      	strb	r3, [r1, #0]
    if(modifiedValue) updateControl = true;
   b41d2:	4b07      	ldr	r3, [pc, #28]	; (b41f0 <_Z10entHandlerv+0x4c>)
   b41d4:	781b      	ldrb	r3, [r3, #0]
   b41d6:	b10b      	cbz	r3, b41dc <_Z10entHandlerv+0x38>
   b41d8:	4b06      	ldr	r3, [pc, #24]	; (b41f4 <_Z10entHandlerv+0x50>)
   b41da:	701a      	strb	r2, [r3, #0]
}
   b41dc:	bd10      	pop	{r4, pc}
   b41de:	bf00      	nop
   b41e0:	2003dd50 	.word	0x2003dd50
   b41e4:	000c01dd 	.word	0x000c01dd
   b41e8:	2003da88 	.word	0x2003da88
   b41ec:	2003da89 	.word	0x2003da89
   b41f0:	2003ddf7 	.word	0x2003ddf7
   b41f4:	2003e636 	.word	0x2003e636

000b41f8 <_Z8jHandlerv>:
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
    redrawMenu = true;  
}

void jHandler(){
   b41f8:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41fa:	4c09      	ldr	r4, [pc, #36]	; (b4220 <_Z8jHandlerv+0x28>)
   b41fc:	f004 ff7c 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
   b4200:	6823      	ldr	r3, [r4, #0]
   b4202:	1ac0      	subs	r0, r0, r3
   b4204:	2863      	cmp	r0, #99	; 0x63
   b4206:	d909      	bls.n	b421c <_Z8jHandlerv+0x24>
   b4208:	f004 ff76 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b420c:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b420e:	f008 fe91 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b4216:	4903      	ldr	r1, [pc, #12]	; (b4224 <_Z8jHandlerv+0x2c>)
   b4218:	f008 ba97 	b.w	bc74a <_ZN5Print7printlnEPKc>
   b421c:	bd10      	pop	{r4, pc}
   b421e:	bf00      	nop
   b4220:	2003dd50 	.word	0x2003dd50
   b4224:	000c01eb 	.word	0x000c01eb

000b4228 <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b4228:	4b0b      	ldr	r3, [pc, #44]	; (b4258 <_Z13actionTimer60v+0x30>)
   b422a:	e9d3 3000 	ldrd	r3, r0, [r3]
    bool reqLTEStatus = false;
   b422e:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4230:	4283      	cmp	r3, r0
   b4232:	d005      	beq.n	b4240 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4234:	6b19      	ldr	r1, [r3, #48]	; 0x30
            reqLTEStatus = true;
   b4236:	2925      	cmp	r1, #37	; 0x25
   b4238:	bf28      	it	cs
   b423a:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b423c:	3334      	adds	r3, #52	; 0x34
      {
	++_M_current;
	return *this;
   b423e:	e7f7      	b.n	b4230 <_Z13actionTimer60v+0x8>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b4240:	b142      	cbz	r2, b4254 <_Z13actionTimer60v+0x2c>
   b4242:	4a06      	ldr	r2, [pc, #24]	; (b425c <_Z13actionTimer60v+0x34>)
   b4244:	7813      	ldrb	r3, [r2, #0]
   b4246:	2b18      	cmp	r3, #24
   b4248:	d804      	bhi.n	b4254 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b424a:	3301      	adds	r3, #1
   b424c:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b424e:	4b04      	ldr	r3, [pc, #16]	; (b4260 <_Z13actionTimer60v+0x38>)
   b4250:	2201      	movs	r2, #1
   b4252:	701a      	strb	r2, [r3, #0]
}
   b4254:	4770      	bx	lr
   b4256:	bf00      	nop
   b4258:	2003dcb4 	.word	0x2003dcb4
   b425c:	2003dc88 	.word	0x2003dc88
   b4260:	2003e635 	.word	0x2003e635

000b4264 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4264:	2a01      	cmp	r2, #1
   b4266:	d102      	bne.n	b426e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4268:	6001      	str	r1, [r0, #0]
      }
   b426a:	2000      	movs	r0, #0
   b426c:	4770      	bx	lr
	  switch (__op)
   b426e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4270:	bf04      	itt	eq
   b4272:	680b      	ldreq	r3, [r1, #0]
   b4274:	6003      	streq	r3, [r0, #0]
	      break;
   b4276:	e7f8      	b.n	b426a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4278 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4278:	6803      	ldr	r3, [r0, #0]
   b427a:	4718      	bx	r3

000b427c <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b427c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b427e:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4280:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4282:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4284:	b130      	cbz	r0, b4294 <_ZN5Timer5startEj.isra.0+0x18>
   b4286:	2300      	movs	r3, #0
   b4288:	e9cd 3300 	strd	r3, r3, [sp]
   b428c:	461a      	mov	r2, r3
   b428e:	2102      	movs	r1, #2
   b4290:	f004 fee2 	bl	b9058 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4294:	68a0      	ldr	r0, [r4, #8]
   b4296:	b130      	cbz	r0, b42a6 <_ZN5Timer5startEj.isra.0+0x2a>
   b4298:	2300      	movs	r3, #0
   b429a:	e9cd 5300 	strd	r5, r3, [sp]
   b429e:	461a      	mov	r2, r3
   b42a0:	4619      	mov	r1, r3
   b42a2:	f004 fed9 	bl	b9058 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42a6:	b003      	add	sp, #12
   b42a8:	bd30      	pop	{r4, r5, pc}

000b42aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42aa:	b40e      	push	{r1, r2, r3}
   b42ac:	b503      	push	{r0, r1, lr}
   b42ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42b8:	f008 fa6f 	bl	bc79a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42bc:	b002      	add	sp, #8
   b42be:	f85d eb04 	ldr.w	lr, [sp], #4
   b42c2:	b003      	add	sp, #12
   b42c4:	4770      	bx	lr
	...

000b42c8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42ca:	4604      	mov	r4, r0
   b42cc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42ce:	7922      	ldrb	r2, [r4, #4]
   b42d0:	68a3      	ldr	r3, [r4, #8]
   b42d2:	b132      	cbz	r2, b42e2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42d4:	b9a3      	cbnz	r3, b4300 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42d6:	490b      	ldr	r1, [pc, #44]	; (b4304 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42d8:	b002      	add	sp, #8
   b42da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42de:	f008 ba21 	b.w	bc724 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42e2:	4a09      	ldr	r2, [pc, #36]	; (b4308 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b42e4:	7b26      	ldrb	r6, [r4, #12]
   b42e6:	4d09      	ldr	r5, [pc, #36]	; (b430c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b42e8:	4909      	ldr	r1, [pc, #36]	; (b4310 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b42ea:	7b64      	ldrb	r4, [r4, #13]
   b42ec:	2e01      	cmp	r6, #1
   b42ee:	bf18      	it	ne
   b42f0:	4629      	movne	r1, r5
   b42f2:	e9cd 1400 	strd	r1, r4, [sp]
   b42f6:	4907      	ldr	r1, [pc, #28]	; (b4314 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b42f8:	f7ff ffd7 	bl	b42aa <_ZN5Print6printfEPKcz>
  }
   b42fc:	b002      	add	sp, #8
   b42fe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4300:	4a05      	ldr	r2, [pc, #20]	; (b4318 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4302:	e7ef      	b.n	b42e4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4304:	000c020d 	.word	0x000c020d
   b4308:	000c071b 	.word	0x000c071b
   b430c:	000c0209 	.word	0x000c0209
   b4310:	000c0205 	.word	0x000c0205
   b4314:	000c0223 	.word	0x000c0223
   b4318:	000c01fc 	.word	0x000c01fc

000b431c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b431c:	b40e      	push	{r1, r2, r3}
   b431e:	b503      	push	{r0, r1, lr}
   b4320:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4322:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4324:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4328:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b432a:	f008 fa36 	bl	bc79a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b432e:	b002      	add	sp, #8
   b4330:	f85d eb04 	ldr.w	lr, [sp], #4
   b4334:	b003      	add	sp, #12
   b4336:	4770      	bx	lr

000b4338 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4338:	b510      	push	{r4, lr}
      if (_M_manager)
   b433a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b433c:	4604      	mov	r4, r0
      if (_M_manager)
   b433e:	b113      	cbz	r3, b4346 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4340:	2203      	movs	r2, #3
   b4342:	4601      	mov	r1, r0
   b4344:	4798      	blx	r3
    }
   b4346:	4620      	mov	r0, r4
   b4348:	bd10      	pop	{r4, pc}
	...

000b434c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b434c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b434e:	4b13      	ldr	r3, [pc, #76]	; (b439c <_ZN5TimerD1Ev+0x50>)
   b4350:	6003      	str	r3, [r0, #0]
   b4352:	4604      	mov	r4, r0
        if (handle) {
   b4354:	6880      	ldr	r0, [r0, #8]
   b4356:	b1c8      	cbz	r0, b438c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4358:	2500      	movs	r5, #0
   b435a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b435e:	e9cd 3500 	strd	r3, r5, [sp]
   b4362:	2102      	movs	r1, #2
   b4364:	462b      	mov	r3, r5
   b4366:	462a      	mov	r2, r5
   b4368:	f004 fe76 	bl	b9058 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b436c:	68a0      	ldr	r0, [r4, #8]
   b436e:	4629      	mov	r1, r5
   b4370:	f004 fea2 	bl	b90b8 <os_timer_set_id>
            while (running) {
   b4374:	7923      	ldrb	r3, [r4, #4]
   b4376:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b437a:	b113      	cbz	r3, b4382 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b437c:	f004 fe44 	bl	b9008 <os_thread_yield>
            while (running) {
   b4380:	e7f8      	b.n	b4374 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4382:	68a0      	ldr	r0, [r4, #8]
   b4384:	4629      	mov	r1, r5
   b4386:	f004 fe57 	bl	b9038 <os_timer_destroy>
            handle = nullptr;
   b438a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b438c:	f104 000c 	add.w	r0, r4, #12
   b4390:	f7ff ffd2 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    }
   b4394:	4620      	mov	r0, r4
   b4396:	b003      	add	sp, #12
   b4398:	bd30      	pop	{r4, r5, pc}
   b439a:	bf00      	nop
   b439c:	000c0988 	.word	0x000c0988

000b43a0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43a0:	b510      	push	{r4, lr}
   b43a2:	4604      	mov	r4, r0
    }
   b43a4:	f7ff ffd2 	bl	b434c <_ZN5TimerD1Ev>
   b43a8:	4620      	mov	r0, r4
   b43aa:	211c      	movs	r1, #28
   b43ac:	f7ff fe77 	bl	b409e <_ZdlPvj>
   b43b0:	4620      	mov	r0, r4
   b43b2:	bd10      	pop	{r4, pc}

000b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b43b4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b43b6:	6843      	ldr	r3, [r0, #4]
   b43b8:	3b01      	subs	r3, #1
    {
   b43ba:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b43bc:	6043      	str	r3, [r0, #4]
   b43be:	b963      	cbnz	r3, b43da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b43c0:	6803      	ldr	r3, [r0, #0]
   b43c2:	689b      	ldr	r3, [r3, #8]
   b43c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43c6:	68a3      	ldr	r3, [r4, #8]
   b43c8:	3b01      	subs	r3, #1
   b43ca:	60a3      	str	r3, [r4, #8]
   b43cc:	b92b      	cbnz	r3, b43da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b43ce:	6823      	ldr	r3, [r4, #0]
   b43d0:	4620      	mov	r0, r4
   b43d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   b43d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b43d8:	4718      	bx	r3
    }
   b43da:	bd10      	pop	{r4, pc}

000b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43de:	468c      	mov	ip, r1
   b43e0:	2500      	movs	r5, #0
   b43e2:	4914      	ldr	r1, [pc, #80]	; (b4434 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b43e4:	7105      	strb	r5, [r0, #4]
   b43e6:	4604      	mov	r4, r0
   b43e8:	6085      	str	r5, [r0, #8]
   b43ea:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43ec:	e892 0003 	ldmia.w	r2, {r0, r1}
   b43f0:	b085      	sub	sp, #20
   b43f2:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b43f4:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43f8:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b43fc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4400:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4404:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4408:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b440c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b440e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4410:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4412:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4414:	6095      	str	r5, [r2, #8]
   b4416:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4418:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b441a:	e9cd 3500 	strd	r3, r5, [sp]
   b441e:	4a06      	ldr	r2, [pc, #24]	; (b4438 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4420:	4623      	mov	r3, r4
   b4422:	4661      	mov	r1, ip
   b4424:	f104 0008 	add.w	r0, r4, #8
   b4428:	f004 fdfe 	bl	b9028 <os_timer_create>
    }
   b442c:	4620      	mov	r0, r4
   b442e:	b005      	add	sp, #20
   b4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4432:	bf00      	nop
   b4434:	000c0988 	.word	0x000c0988
   b4438:	000b4169 	.word	0x000b4169

000b443c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b443c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b443e:	460a      	mov	r2, r1
   b4440:	4901      	ldr	r1, [pc, #4]	; (b4448 <_ZN7FatFile4openEPKci+0xc>)
   b4442:	6809      	ldr	r1, [r1, #0]
   b4444:	f002 bb09 	b.w	b6a5a <_ZN7FatFile4openEPS_PKci>
   b4448:	2003e63c 	.word	0x2003e63c

000b444c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b444c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b444e:	b095      	sub	sp, #84	; 0x54
   b4450:	4604      	mov	r4, r0
   b4452:	af00      	add	r7, sp, #0
   b4454:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4456:	221e      	movs	r2, #30
   b4458:	2100      	movs	r1, #0
   b445a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b445e:	f009 fe16 	bl	be08e <memset>
    memcpy(fileCommand,data,8);
   b4462:	6820      	ldr	r0, [r4, #0]
   b4464:	6861      	ldr	r1, [r4, #4]
   b4466:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b446a:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b446c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b4470:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b4472:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b4474:	d168      	bne.n	b4548 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b4476:	493e      	ldr	r1, [pc, #248]	; (b4570 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b4478:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b447c:	f009 fe8b 	bl	be196 <strcmp>
   b4480:	2800      	cmp	r0, #0
   b4482:	d13e      	bne.n	b4502 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b4484:	483b      	ldr	r0, [pc, #236]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4486:	7c03      	ldrb	r3, [r0, #16]
   b4488:	b113      	cbz	r3, b4490 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b448a:	3010      	adds	r0, #16
   b448c:	f002 fade 	bl	b6a4c <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b4490:	4623      	mov	r3, r4
   b4492:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4496:	f104 0520 	add.w	r5, r4, #32
   b449a:	6818      	ldr	r0, [r3, #0]
   b449c:	6859      	ldr	r1, [r3, #4]
   b449e:	4614      	mov	r4, r2
   b44a0:	c403      	stmia	r4!, {r0, r1}
   b44a2:	3308      	adds	r3, #8
   b44a4:	42ab      	cmp	r3, r5
   b44a6:	4622      	mov	r2, r4
   b44a8:	d1f7      	bne.n	b449a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b44aa:	6818      	ldr	r0, [r3, #0]
   b44ac:	6020      	str	r0, [r4, #0]
   b44ae:	889b      	ldrh	r3, [r3, #4]
   b44b0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b44b2:	221e      	movs	r2, #30
   b44b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b44b8:	482f      	ldr	r0, [pc, #188]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44ba:	f009 feb8 	bl	be22e <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44be:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b44c0:	4a2d      	ldr	r2, [pc, #180]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44c2:	492e      	ldr	r1, [pc, #184]	; (b457c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44c4:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b44c6:	1d38      	adds	r0, r7, #4
   b44c8:	f002 fac7 	bl	b6a5a <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b44cc:	b148      	cbz	r0, b44e2 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b44ce:	f008 fd31 	bl	bcf34 <_Z16_fetch_usbserialv>
   b44d2:	492b      	ldr	r1, [pc, #172]	; (b4580 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b44d4:	4a28      	ldr	r2, [pc, #160]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44d6:	f7ff ff21 	bl	b431c <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b44da:	4927      	ldr	r1, [pc, #156]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44dc:	4827      	ldr	r0, [pc, #156]	; (b457c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b44de:	f002 fb08 	bl	b6af2 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b44e2:	f008 fd27 	bl	bcf34 <_Z16_fetch_usbserialv>
   b44e6:	4a24      	ldr	r2, [pc, #144]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44e8:	4926      	ldr	r1, [pc, #152]	; (b4584 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b44ea:	f7ff ff17 	bl	b431c <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b44ee:	4922      	ldr	r1, [pc, #136]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44f0:	4825      	ldr	r0, [pc, #148]	; (b4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b44f2:	f244 2202 	movw	r2, #16898	; 0x4202
   b44f6:	f7ff ffa1 	bl	b443c <_ZN7FatFile4openEPKci>
}
   b44fa:	3754      	adds	r7, #84	; 0x54
   b44fc:	46b5      	mov	sp, r6
   b44fe:	46bd      	mov	sp, r7
   b4500:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4502:	4922      	ldr	r1, [pc, #136]	; (b458c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4504:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4508:	f009 fe45 	bl	be196 <strcmp>
   b450c:	b968      	cbnz	r0, b452a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b450e:	f008 fd11 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4512:	4a19      	ldr	r2, [pc, #100]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4514:	491e      	ldr	r1, [pc, #120]	; (b4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4516:	f7ff ff01 	bl	b431c <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b451a:	4b16      	ldr	r3, [pc, #88]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b451c:	7c1b      	ldrb	r3, [r3, #16]
   b451e:	2b00      	cmp	r3, #0
   b4520:	d0eb      	beq.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4522:	4819      	ldr	r0, [pc, #100]	; (b4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4524:	f002 fa92 	bl	b6a4c <_ZN7FatFile5closeEv>
   b4528:	e7e7      	b.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b452a:	491a      	ldr	r1, [pc, #104]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b452c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4530:	f009 fe31 	bl	be196 <strcmp>
   b4534:	b940      	cbnz	r0, b4548 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4536:	f008 fcfd 	bl	bcf34 <_Z16_fetch_usbserialv>
   b453a:	4917      	ldr	r1, [pc, #92]	; (b4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b453c:	f008 f905 	bl	bc74a <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4540:	4b16      	ldr	r3, [pc, #88]	; (b459c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4542:	2201      	movs	r2, #1
   b4544:	701a      	strb	r2, [r3, #0]
   b4546:	e7e8      	b.n	b451a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4548:	1deb      	adds	r3, r5, #7
   b454a:	f023 0307 	bic.w	r3, r3, #7
   b454e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4552:	462a      	mov	r2, r5
   b4554:	4621      	mov	r1, r4
   b4556:	4668      	mov	r0, sp
   b4558:	f009 fd71 	bl	be03e <memcpy>
    myFile.print(dataStr);
   b455c:	4669      	mov	r1, sp
   b455e:	4805      	ldr	r0, [pc, #20]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b4560:	f008 f8e0 	bl	bc724 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b4564:	f008 fce6 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4568:	4669      	mov	r1, sp
   b456a:	f008 f8ee 	bl	bc74a <_ZN5Print7printlnEPKc>
   b456e:	e7c4      	b.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4570:	000c0240 	.word	0x000c0240
   b4574:	2003ddf8 	.word	0x2003ddf8
   b4578:	2003de2c 	.word	0x2003de2c
   b457c:	2003e5ec 	.word	0x2003e5ec
   b4580:	000c0249 	.word	0x000c0249
   b4584:	000c027c 	.word	0x000c027c
   b4588:	2003de08 	.word	0x2003de08
   b458c:	000c0299 	.word	0x000c0299
   b4590:	000c02a2 	.word	0x000c02a2
   b4594:	000c02ba 	.word	0x000c02ba
   b4598:	000c02c3 	.word	0x000c02c3
   b459c:	2003de4a 	.word	0x2003de4a

000b45a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45a0:	b530      	push	{r4, r5, lr}
   b45a2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b45a4:	4b1b      	ldr	r3, [pc, #108]	; (b4614 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b45a6:	9300      	str	r3, [sp, #0]
   b45a8:	7913      	ldrb	r3, [r2, #4]
   b45aa:	f88d 3004 	strb.w	r3, [sp, #4]
   b45ae:	6893      	ldr	r3, [r2, #8]
   b45b0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45b2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b45b6:	8993      	ldrh	r3, [r2, #12]
   b45b8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45bc:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45be:	460a      	mov	r2, r1
   b45c0:	466b      	mov	r3, sp
   b45c2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b45c6:	4628      	mov	r0, r5
   b45c8:	f003 f966 	bl	b7898 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b45cc:	b910      	cbnz	r0, b45d4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b45ce:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b45d0:	b005      	add	sp, #20
   b45d2:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b45d4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b45d6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b45da:	4628      	mov	r0, r5
   b45dc:	f002 fa36 	bl	b6a4c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b45e0:	2101      	movs	r1, #1
   b45e2:	4620      	mov	r0, r4
   b45e4:	f003 f802 	bl	b75ec <_ZN9FatVolume4initEh>
   b45e8:	4601      	mov	r1, r0
   b45ea:	b168      	cbz	r0, b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b45ec:	4621      	mov	r1, r4
   b45ee:	4628      	mov	r0, r5
   b45f0:	f002 f863 	bl	b66ba <_ZN7FatFile8openRootEP9FatVolume>
   b45f4:	2800      	cmp	r0, #0
   b45f6:	d0ea      	beq.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b45f8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b45fc:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4600:	d0e5      	beq.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4602:	4b05      	ldr	r3, [pc, #20]	; (b4618 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4604:	601d      	str	r5, [r3, #0]
    return true;
   b4606:	e7e3      	b.n	b45d0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4608:	4620      	mov	r0, r4
   b460a:	f002 ffef 	bl	b75ec <_ZN9FatVolume4initEh>
   b460e:	2800      	cmp	r0, #0
   b4610:	d1ec      	bne.n	b45ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4612:	e7dc      	b.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4614:	000c0974 	.word	0x000c0974
   b4618:	2003e63c 	.word	0x2003e63c

000b461c <_ZN8WaterBotC1Ev>:
class WaterBot{
   b461c:	2200      	movs	r2, #0
   b461e:	7202      	strb	r2, [r0, #8]
   b4620:	4a05      	ldr	r2, [pc, #20]	; (b4638 <_ZN8WaterBotC1Ev+0x1c>)
   b4622:	60c2      	str	r2, [r0, #12]
   b4624:	6102      	str	r2, [r0, #16]
   b4626:	2200      	movs	r2, #0
   b4628:	6142      	str	r2, [r0, #20]
   b462a:	6182      	str	r2, [r0, #24]
   b462c:	61c2      	str	r2, [r0, #28]
   b462e:	6202      	str	r2, [r0, #32]
   b4630:	6242      	str	r2, [r0, #36]	; 0x24
   b4632:	6282      	str	r2, [r0, #40]	; 0x28
   b4634:	62c2      	str	r2, [r0, #44]	; 0x2c
   b4636:	4770      	bx	lr
   b4638:	c479c000 	.word	0xc479c000

000b463c <_Z9setupXBeev>:
void setupXBee(){
   b463c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b463e:	f008 fe0d 	bl	bd25c <_Z22__fetch_global_Serial1v>
   b4642:	4908      	ldr	r1, [pc, #32]	; (b4664 <_Z9setupXBeev+0x28>)
   b4644:	f7ff fe31 	bl	b42aa <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4648:	2014      	movs	r0, #20
   b464a:	f005 f829 	bl	b96a0 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b464e:	f008 fe05 	bl	bd25c <_Z22__fetch_global_Serial1v>
   b4652:	4905      	ldr	r1, [pc, #20]	; (b4668 <_Z9setupXBeev+0x2c>)
   b4654:	f7ff fe29 	bl	b42aa <_ZN5Print6printfEPKcz>
}
   b4658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b465c:	2014      	movs	r0, #20
   b465e:	f005 b81f 	b.w	b96a0 <delay>
   b4662:	bf00      	nop
   b4664:	000c071a 	.word	0x000c071a
   b4668:	000c092d 	.word	0x000c092d

000b466c <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b466c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4670:	b084      	sub	sp, #16
   b4672:	af02      	add	r7, sp, #8
   b4674:	4680      	mov	r8, r0
   b4676:	4691      	mov	r9, r2
   b4678:	461e      	mov	r6, r3
   b467a:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b467c:	f009 fdbb 	bl	be1f6 <strlen>
   b4680:	3009      	adds	r0, #9
   b4682:	f020 0107 	bic.w	r1, r0, #7
   b4686:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b468a:	4640      	mov	r0, r8
   b468c:	f009 fdb3 	bl	be1f6 <strlen>
    char outStr[strlen(dataOut)+2];
   b4690:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4692:	4929      	ldr	r1, [pc, #164]	; (b4738 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4694:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4698:	4603      	mov	r3, r0
   b469a:	4642      	mov	r2, r8
   b469c:	4620      	mov	r0, r4
   b469e:	f004 ffaf 	bl	b9600 <sprintf>
    if(VERBOSE) Serial.println(outStr);
   b46a2:	f008 fc47 	bl	bcf34 <_Z16_fetch_usbserialv>
   b46a6:	4621      	mov	r1, r4
   b46a8:	f008 f84f 	bl	bc74a <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b46ac:	f1ba 0f00 	cmp.w	sl, #0
   b46b0:	d101      	bne.n	b46b6 <_Z8sendDataPKchbbb+0x4a>
   b46b2:	2d04      	cmp	r5, #4
   b46b4:	d10d      	bne.n	b46d2 <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b46b6:	4b21      	ldr	r3, [pc, #132]	; (b473c <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b46b8:	4921      	ldr	r1, [pc, #132]	; (b4740 <_Z8sendDataPKchbbb+0xd4>)
   b46ba:	781b      	ldrb	r3, [r3, #0]
   b46bc:	f88d 3000 	strb.w	r3, [sp]
   b46c0:	4638      	mov	r0, r7
   b46c2:	233c      	movs	r3, #60	; 0x3c
   b46c4:	4622      	mov	r2, r4
   b46c6:	f007 fcb9 	bl	bc03c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b46ca:	6878      	ldr	r0, [r7, #4]
   b46cc:	b108      	cbz	r0, b46d2 <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b46ce:	f7ff fe71 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b46d2:	f1b9 0f00 	cmp.w	r9, #0
   b46d6:	d101      	bne.n	b46dc <_Z8sendDataPKchbbb+0x70>
   b46d8:	2d01      	cmp	r5, #1
   b46da:	d121      	bne.n	b4720 <_Z8sendDataPKchbbb+0xb4>
   b46dc:	f005 fcfa 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b46e0:	f005 fda5 	bl	ba22e <_ZNK8particle14BleLocalDevice9connectedEv>
   b46e4:	b1e0      	cbz	r0, b4720 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b46e6:	4620      	mov	r0, r4
   b46e8:	f009 fd85 	bl	be1f6 <strlen>
   b46ec:	3007      	adds	r0, #7
   b46ee:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b46f2:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b46f4:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b46f8:	4620      	mov	r0, r4
   b46fa:	f009 fd7c 	bl	be1f6 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b46fe:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4702:	4602      	mov	r2, r0
   b4704:	4621      	mov	r1, r4
   b4706:	4648      	mov	r0, r9
   b4708:	f009 fc99 	bl	be03e <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b470c:	4620      	mov	r0, r4
   b470e:	f009 fd72 	bl	be1f6 <strlen>
   b4712:	2300      	movs	r3, #0
   b4714:	4602      	mov	r2, r0
   b4716:	4649      	mov	r1, r9
   b4718:	480a      	ldr	r0, [pc, #40]	; (b4744 <_Z8sendDataPKchbbb+0xd8>)
   b471a:	f005 fb75 	bl	b9e08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b471e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4720:	b90e      	cbnz	r6, b4726 <_Z8sendDataPKchbbb+0xba>
   b4722:	2d02      	cmp	r5, #2
   b4724:	d104      	bne.n	b4730 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4726:	f008 fd99 	bl	bd25c <_Z22__fetch_global_Serial1v>
   b472a:	4621      	mov	r1, r4
   b472c:	f008 f80d 	bl	bc74a <_ZN5Print7printlnEPKc>
}
   b4730:	3708      	adds	r7, #8
   b4732:	46bd      	mov	sp, r7
   b4734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4738:	000c02d9 	.word	0x000c02d9
   b473c:	2003dcfc 	.word	0x2003dcfc
   b4740:	000c02e0 	.word	0x000c02e0
   b4744:	2003decc 	.word	0x2003decc

000b4748 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b474c:	4d0e      	ldr	r5, [pc, #56]	; (b4788 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b474e:	4f0f      	ldr	r7, [pc, #60]	; (b478c <_Z14XBeeLTEPairSetv+0x44>)
   b4750:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4754:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4756:	45a0      	cmp	r8, r4
   b4758:	d013      	beq.n	b4782 <_Z14XBeeLTEPairSetv+0x3a>
   b475a:	7923      	ldrb	r3, [r4, #4]
   b475c:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b475e:	f814 2b34 	ldrb.w	r2, [r4], #52
    for(WaterBot p: PairBots){
   b4762:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4764:	4639      	mov	r1, r7
   b4766:	a805      	add	r0, sp, #20
   b4768:	f004 ff4a 	bl	b9600 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b476c:	9b03      	ldr	r3, [sp, #12]
   b476e:	9600      	str	r6, [sp, #0]
   b4770:	2201      	movs	r2, #1
   b4772:	2100      	movs	r1, #0
   b4774:	a805      	add	r0, sp, #20
   b4776:	f7ff ff79 	bl	b466c <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b477a:	686b      	ldr	r3, [r5, #4]
   b477c:	3b34      	subs	r3, #52	; 0x34
   b477e:	606b      	str	r3, [r5, #4]
	return *this;
   b4780:	e7e9      	b.n	b4756 <_Z14XBeeLTEPairSetv+0xe>
}
   b4782:	b008      	add	sp, #32
   b4784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4788:	2003dc98 	.word	0x2003dc98
   b478c:	000c02e8 	.word	0x000c02e8

000b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b4790:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4792:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4796:	4806      	ldr	r0, [pc, #24]	; (b47b0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b4798:	1b12      	subs	r2, r2, r4
   b479a:	1092      	asrs	r2, r2, #2
   b479c:	4342      	muls	r2, r0
	if (__n >= this->size())
   b479e:	4291      	cmp	r1, r2
   b47a0:	d302      	bcc.n	b47a8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b47a2:	4804      	ldr	r0, [pc, #16]	; (b47b4 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b47a4:	f008 fd86 	bl	bd2b4 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b47a8:	2034      	movs	r0, #52	; 0x34
   b47aa:	fb00 4001 	mla	r0, r0, r1, r4
   b47ae:	bd10      	pop	{r4, pc}
   b47b0:	c4ec4ec5 	.word	0xc4ec4ec5
   b47b4:	000c02f1 	.word	0x000c02f1

000b47b8 <_Z8lHandlerv>:
void lHandler(){
   b47b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b47bc:	4c3d      	ldr	r4, [pc, #244]	; (b48b4 <_Z8lHandlerv+0xfc>)
void lHandler(){
   b47be:	b087      	sub	sp, #28
   b47c0:	f004 fc9a 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b47c4:	6823      	ldr	r3, [r4, #0]
   b47c6:	1ac0      	subs	r0, r0, r3
   b47c8:	2863      	cmp	r0, #99	; 0x63
   b47ca:	d970      	bls.n	b48ae <_Z8lHandlerv+0xf6>
    Serial.println("Right trigger");
   b47cc:	f008 fbb2 	bl	bcf34 <_Z16_fetch_usbserialv>
   b47d0:	4939      	ldr	r1, [pc, #228]	; (b48b8 <_Z8lHandlerv+0x100>)
   b47d2:	f007 ffba 	bl	bc74a <_ZN5Print7printlnEPKc>
   b47d6:	f004 fc8f 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    redrawMenu = true;
   b47da:	4b38      	ldr	r3, [pc, #224]	; (b48bc <_Z8lHandlerv+0x104>)
    debounceTime = millis();
   b47dc:	6020      	str	r0, [r4, #0]
    redrawMenu = true;
   b47de:	2201      	movs	r2, #1
   b47e0:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b47e2:	4b37      	ldr	r3, [pc, #220]	; (b48c0 <_Z8lHandlerv+0x108>)
   b47e4:	4a37      	ldr	r2, [pc, #220]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b47e6:	781c      	ldrb	r4, [r3, #0]
   b47e8:	b18c      	cbz	r4, b480e <_Z8lHandlerv+0x56>
      : _M_current(__i) { }
   b47ea:	6813      	ldr	r3, [r2, #0]
        if(botSelect != WaterBots.front().botNum){
   b47ec:	4836      	ldr	r0, [pc, #216]	; (b48c8 <_Z8lHandlerv+0x110>)
   b47ee:	7819      	ldrb	r1, [r3, #0]
   b47f0:	7804      	ldrb	r4, [r0, #0]
   b47f2:	428c      	cmp	r4, r1
   b47f4:	d05b      	beq.n	b48ae <_Z8lHandlerv+0xf6>
   b47f6:	6854      	ldr	r4, [r2, #4]
            for(WaterBot ws: WaterBots){
   b47f8:	429c      	cmp	r4, r3
   b47fa:	d058      	beq.n	b48ae <_Z8lHandlerv+0xf6>
   b47fc:	781a      	ldrb	r2, [r3, #0]
                if(ws.botNum == botSelect) botSelect = newBotNum;
   b47fe:	7805      	ldrb	r5, [r0, #0]
   b4800:	4295      	cmp	r5, r2
   b4802:	bf04      	itt	eq
   b4804:	460a      	moveq	r2, r1
   b4806:	7001      	strbeq	r1, [r0, #0]
   b4808:	3334      	adds	r3, #52	; 0x34
	return *this;
   b480a:	4611      	mov	r1, r2
   b480c:	e7f4      	b.n	b47f8 <_Z8lHandlerv+0x40>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b480e:	e9d2 7800 	ldrd	r7, r8, [r2]
            if(ws.botNum == botSelect){
   b4812:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b48c8 <_Z8lHandlerv+0x110>
                MenuItem curItem = *SelectedItem;
   b4816:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b48d4 <_Z8lHandlerv+0x11c>
                modifiedValue = true;
   b481a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b48d8 <_Z8lHandlerv+0x120>
        for(WaterBot ws: WaterBots){
   b481e:	45b8      	cmp	r8, r7
   b4820:	d045      	beq.n	b48ae <_Z8lHandlerv+0xf6>
            if(ws.botNum == botSelect){
   b4822:	783a      	ldrb	r2, [r7, #0]
   b4824:	f899 3000 	ldrb.w	r3, [r9]
   b4828:	429a      	cmp	r2, r3
   b482a:	d12e      	bne.n	b488a <_Z8lHandlerv+0xd2>
                MenuItem curItem = *SelectedItem;
   b482c:	f8da 6000 	ldr.w	r6, [sl]
   b4830:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4832:	466d      	mov	r5, sp
   b4834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4836:	e896 0003 	ldmia.w	r6, {r0, r1}
   b483a:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b483e:	f008 fb79 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4842:	f10d 010d 	add.w	r1, sp, #13
   b4846:	f007 ff80 	bl	bc74a <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b484a:	f89d 500a 	ldrb.w	r5, [sp, #10]
   b484e:	bb75      	cbnz	r5, b48ae <_Z8lHandlerv+0xf6>
                if(curItem.onOffSetting){
   b4850:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4854:	b1e3      	cbz	r3, b4890 <_Z8lHandlerv+0xd8>
                    Serial.println("Modified an On/Off Control");
   b4856:	f008 fb6d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b485a:	491c      	ldr	r1, [pc, #112]	; (b48cc <_Z8lHandlerv+0x114>)
   b485c:	f007 ff75 	bl	bc74a <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = false;//!(WaterBots.at(index).*(curItem.MethodPointerBool));
   b4860:	4621      	mov	r1, r4
   b4862:	4818      	ldr	r0, [pc, #96]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b4864:	f7ff ff94 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4868:	9b01      	ldr	r3, [sp, #4]
   b486a:	54c5      	strb	r5, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b486c:	f008 fb62 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4870:	4621      	mov	r1, r4
   b4872:	4605      	mov	r5, r0
   b4874:	4813      	ldr	r0, [pc, #76]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b4876:	f7ff ff8b 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b487a:	4915      	ldr	r1, [pc, #84]	; (b48d0 <_Z8lHandlerv+0x118>)
   b487c:	7802      	ldrb	r2, [r0, #0]
   b487e:	4628      	mov	r0, r5
   b4880:	f7ff fd4c 	bl	b431c <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4884:	2301      	movs	r3, #1
   b4886:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b488a:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b488c:	3734      	adds	r7, #52	; 0x34
	return *this;
   b488e:	e7c6      	b.n	b481e <_Z8lHandlerv+0x66>
                    if(WaterBots.at(index).*(curItem.MethodPointer) > curItem.minVal) WaterBots.at(index).*(curItem.MethodPointer) -= curItem.stepSize;
   b4890:	4621      	mov	r1, r4
   b4892:	480c      	ldr	r0, [pc, #48]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b4894:	f7ff ff7c 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4898:	9a00      	ldr	r2, [sp, #0]
   b489a:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b489e:	5c83      	ldrb	r3, [r0, r2]
   b48a0:	4299      	cmp	r1, r3
   b48a2:	bf3e      	ittt	cc
   b48a4:	f89d 1008 	ldrbcc.w	r1, [sp, #8]
   b48a8:	1a5b      	subcc	r3, r3, r1
   b48aa:	5483      	strbcc	r3, [r0, r2]
   b48ac:	e7ea      	b.n	b4884 <_Z8lHandlerv+0xcc>
}
   b48ae:	b007      	add	sp, #28
   b48b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b48b4:	2003dd50 	.word	0x2003dd50
   b48b8:	000c033b 	.word	0x000c033b
   b48bc:	2003da88 	.word	0x2003da88
   b48c0:	2003da89 	.word	0x2003da89
   b48c4:	2003dcb4 	.word	0x2003dcb4
   b48c8:	2003dd4d 	.word	0x2003dd4d
   b48cc:	000c0349 	.word	0x000c0349
   b48d0:	000c0364 	.word	0x000c0364
   b48d4:	2003dca4 	.word	0x2003dca4
   b48d8:	2003ddf7 	.word	0x2003ddf7

000b48dc <_Z8rHandlerv>:
void rHandler(){
   b48dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b48e0:	4c3f      	ldr	r4, [pc, #252]	; (b49e0 <_Z8rHandlerv+0x104>)
void rHandler(){
   b48e2:	b087      	sub	sp, #28
   b48e4:	f004 fc08 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b48e8:	6823      	ldr	r3, [r4, #0]
   b48ea:	1ac0      	subs	r0, r0, r3
   b48ec:	2863      	cmp	r0, #99	; 0x63
   b48ee:	d91d      	bls.n	b492c <_Z8rHandlerv+0x50>
   b48f0:	f004 fc02 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b48f4:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b48f6:	f008 fb1d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b48fa:	493a      	ldr	r1, [pc, #232]	; (b49e4 <_Z8rHandlerv+0x108>)
   b48fc:	f007 ff25 	bl	bc74a <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4900:	4b39      	ldr	r3, [pc, #228]	; (b49e8 <_Z8rHandlerv+0x10c>)
   b4902:	2201      	movs	r2, #1
   b4904:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b4906:	4b39      	ldr	r3, [pc, #228]	; (b49ec <_Z8rHandlerv+0x110>)
   b4908:	781c      	ldrb	r4, [r3, #0]
   b490a:	4b39      	ldr	r3, [pc, #228]	; (b49f0 <_Z8rHandlerv+0x114>)
   b490c:	b1ac      	cbz	r4, b493a <_Z8rHandlerv+0x5e>
      : _M_current(__i) { }
   b490e:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b4910:	4d38      	ldr	r5, [pc, #224]	; (b49f4 <_Z8rHandlerv+0x118>)
   b4912:	f814 2c34 	ldrb.w	r2, [r4, #-52]
   b4916:	7828      	ldrb	r0, [r5, #0]
   b4918:	4282      	cmp	r2, r0
   b491a:	d007      	beq.n	b492c <_Z8rHandlerv+0x50>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b491c:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b491e:	2200      	movs	r2, #0
            for(WaterBot ws: WaterBots){
   b4920:	429c      	cmp	r4, r3
   b4922:	d003      	beq.n	b492c <_Z8rHandlerv+0x50>
   b4924:	f813 1b34 	ldrb.w	r1, [r3], #52
                if(findCurrent){
   b4928:	b11a      	cbz	r2, b4932 <_Z8rHandlerv+0x56>
                    botSelect = ws.botNum;
   b492a:	7029      	strb	r1, [r5, #0]
}
   b492c:	b007      	add	sp, #28
   b492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b4932:	1a41      	subs	r1, r0, r1
   b4934:	424a      	negs	r2, r1
   b4936:	414a      	adcs	r2, r1
	return *this;
   b4938:	e7f2      	b.n	b4920 <_Z8rHandlerv+0x44>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b493a:	e9d3 7800 	ldrd	r7, r8, [r3]
            if(ws.botNum == botSelect){
   b493e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b49f4 <_Z8rHandlerv+0x118>
                MenuItem curItem = *SelectedItem;
   b4942:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b4a00 <_Z8rHandlerv+0x124>
                modifiedValue = true;
   b4946:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4a04 <_Z8rHandlerv+0x128>
        for(WaterBot ws: WaterBots){
   b494a:	45b8      	cmp	r8, r7
   b494c:	d0ee      	beq.n	b492c <_Z8rHandlerv+0x50>
            if(ws.botNum == botSelect){
   b494e:	783a      	ldrb	r2, [r7, #0]
   b4950:	f899 3000 	ldrb.w	r3, [r9]
   b4954:	429a      	cmp	r2, r3
   b4956:	d130      	bne.n	b49ba <_Z8rHandlerv+0xde>
                MenuItem curItem = *SelectedItem;
   b4958:	f8da 6000 	ldr.w	r6, [sl]
   b495c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b495e:	466d      	mov	r5, sp
   b4960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4962:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4966:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b496a:	f008 fae3 	bl	bcf34 <_Z16_fetch_usbserialv>
   b496e:	f10d 010d 	add.w	r1, sp, #13
   b4972:	f007 feea 	bl	bc74a <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b4976:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b497a:	2b00      	cmp	r3, #0
   b497c:	d1d6      	bne.n	b492c <_Z8rHandlerv+0x50>
                if(curItem.onOffSetting){
   b497e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4982:	b1eb      	cbz	r3, b49c0 <_Z8rHandlerv+0xe4>
                    Serial.println("Modified an On/Off Control");
   b4984:	f008 fad6 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4988:	491b      	ldr	r1, [pc, #108]	; (b49f8 <_Z8rHandlerv+0x11c>)
   b498a:	f007 fede 	bl	bc74a <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = true;
   b498e:	4621      	mov	r1, r4
   b4990:	4817      	ldr	r0, [pc, #92]	; (b49f0 <_Z8rHandlerv+0x114>)
   b4992:	f7ff fefd 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4996:	9b01      	ldr	r3, [sp, #4]
   b4998:	2201      	movs	r2, #1
   b499a:	54c2      	strb	r2, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b499c:	f008 faca 	bl	bcf34 <_Z16_fetch_usbserialv>
   b49a0:	4621      	mov	r1, r4
   b49a2:	4605      	mov	r5, r0
   b49a4:	4812      	ldr	r0, [pc, #72]	; (b49f0 <_Z8rHandlerv+0x114>)
   b49a6:	f7ff fef3 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b49aa:	4914      	ldr	r1, [pc, #80]	; (b49fc <_Z8rHandlerv+0x120>)
   b49ac:	7802      	ldrb	r2, [r0, #0]
   b49ae:	4628      	mov	r0, r5
   b49b0:	f7ff fcb4 	bl	b431c <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b49b4:	2301      	movs	r3, #1
   b49b6:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b49ba:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b49bc:	3734      	adds	r7, #52	; 0x34
	return *this;
   b49be:	e7c4      	b.n	b494a <_Z8rHandlerv+0x6e>
                    if(WaterBots.at(index).*(curItem.MethodPointer) < curItem.maxVal) WaterBots.at(index).*(curItem.MethodPointer) += curItem.stepSize;
   b49c0:	4621      	mov	r1, r4
   b49c2:	480b      	ldr	r0, [pc, #44]	; (b49f0 <_Z8rHandlerv+0x114>)
   b49c4:	f7ff fee4 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b49c8:	9a00      	ldr	r2, [sp, #0]
   b49ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b49ce:	5c83      	ldrb	r3, [r0, r2]
   b49d0:	4299      	cmp	r1, r3
   b49d2:	bf82      	ittt	hi
   b49d4:	f89d 1008 	ldrbhi.w	r1, [sp, #8]
   b49d8:	185b      	addhi	r3, r3, r1
   b49da:	5483      	strbhi	r3, [r0, r2]
   b49dc:	e7ea      	b.n	b49b4 <_Z8rHandlerv+0xd8>
   b49de:	bf00      	nop
   b49e0:	2003dd50 	.word	0x2003dd50
   b49e4:	000c033b 	.word	0x000c033b
   b49e8:	2003da88 	.word	0x2003da88
   b49ec:	2003da89 	.word	0x2003da89
   b49f0:	2003dcb4 	.word	0x2003dcb4
   b49f4:	2003dd4d 	.word	0x2003dd4d
   b49f8:	000c0349 	.word	0x000c0349
   b49fc:	000c0364 	.word	0x000c0364
   b4a00:	2003dca4 	.word	0x2003dca4
   b4a04:	2003ddf7 	.word	0x2003ddf7

000b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4a08:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a0a:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4a0e:	4806      	ldr	r0, [pc, #24]	; (b4a28 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4a10:	1b12      	subs	r2, r2, r4
   b4a12:	10d2      	asrs	r2, r2, #3
   b4a14:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4a16:	4291      	cmp	r1, r2
   b4a18:	d302      	bcc.n	b4a20 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4a1a:	4804      	ldr	r0, [pc, #16]	; (b4a2c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4a1c:	f008 fc4a 	bl	bd2b4 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4a20:	2018      	movs	r0, #24
   b4a22:	fb00 4001 	mla	r0, r0, r1, r4
   b4a26:	bd10      	pop	{r4, pc}
   b4a28:	aaaaaaab 	.word	0xaaaaaaab
   b4a2c:	000c02f1 	.word	0x000c02f1

000b4a30 <_Z8uHandlerv>:
void uHandler(){
   b4a30:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a32:	4c0f      	ldr	r4, [pc, #60]	; (b4a70 <_Z8uHandlerv+0x40>)
   b4a34:	f004 fb60 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
   b4a38:	6823      	ldr	r3, [r4, #0]
   b4a3a:	1ac0      	subs	r0, r0, r3
   b4a3c:	2863      	cmp	r0, #99	; 0x63
   b4a3e:	d915      	bls.n	b4a6c <_Z8uHandlerv+0x3c>
   b4a40:	f004 fb5a 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4a44:	4a0b      	ldr	r2, [pc, #44]	; (b4a74 <_Z8uHandlerv+0x44>)
    debounceTime = millis();
   b4a46:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4a48:	7813      	ldrb	r3, [r2, #0]
   b4a4a:	b10b      	cbz	r3, b4a50 <_Z8uHandlerv+0x20>
   b4a4c:	3b01      	subs	r3, #1
   b4a4e:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4a50:	7811      	ldrb	r1, [r2, #0]
   b4a52:	4809      	ldr	r0, [pc, #36]	; (b4a78 <_Z8uHandlerv+0x48>)
   b4a54:	f7ff ffd8 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4a58:	4b08      	ldr	r3, [pc, #32]	; (b4a7c <_Z8uHandlerv+0x4c>)
   b4a5a:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4a5c:	f008 fa6a 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4a60:	4907      	ldr	r1, [pc, #28]	; (b4a80 <_Z8uHandlerv+0x50>)
   b4a62:	f007 fe72 	bl	bc74a <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4a66:	4b07      	ldr	r3, [pc, #28]	; (b4a84 <_Z8uHandlerv+0x54>)
   b4a68:	2201      	movs	r2, #1
   b4a6a:	701a      	strb	r2, [r3, #0]
}
   b4a6c:	bd10      	pop	{r4, pc}
   b4a6e:	bf00      	nop
   b4a70:	2003dd50 	.word	0x2003dd50
   b4a74:	2003ddf5 	.word	0x2003ddf5
   b4a78:	2003dc8c 	.word	0x2003dc8c
   b4a7c:	2003dca4 	.word	0x2003dca4
   b4a80:	000c0377 	.word	0x000c0377
   b4a84:	2003da88 	.word	0x2003da88

000b4a88 <_Z8dHandlerv>:
void dHandler(){
   b4a88:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a8a:	4c0f      	ldr	r4, [pc, #60]	; (b4ac8 <_Z8dHandlerv+0x40>)
   b4a8c:	f004 fb34 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
   b4a90:	6823      	ldr	r3, [r4, #0]
   b4a92:	1ac0      	subs	r0, r0, r3
   b4a94:	2863      	cmp	r0, #99	; 0x63
   b4a96:	d916      	bls.n	b4ac6 <_Z8dHandlerv+0x3e>
   b4a98:	f004 fb2e 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4a9c:	4a0b      	ldr	r2, [pc, #44]	; (b4acc <_Z8dHandlerv+0x44>)
    debounceTime = millis();
   b4a9e:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4aa0:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4aa2:	480b      	ldr	r0, [pc, #44]	; (b4ad0 <_Z8dHandlerv+0x48>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4aa4:	2b02      	cmp	r3, #2
   b4aa6:	bf9c      	itt	ls
   b4aa8:	3301      	addls	r3, #1
   b4aaa:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4aac:	7811      	ldrb	r1, [r2, #0]
   b4aae:	f7ff ffab 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4ab2:	4b08      	ldr	r3, [pc, #32]	; (b4ad4 <_Z8dHandlerv+0x4c>)
   b4ab4:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b4ab6:	f008 fa3d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4aba:	4907      	ldr	r1, [pc, #28]	; (b4ad8 <_Z8dHandlerv+0x50>)
   b4abc:	f007 fe45 	bl	bc74a <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4ac0:	4b06      	ldr	r3, [pc, #24]	; (b4adc <_Z8dHandlerv+0x54>)
   b4ac2:	2201      	movs	r2, #1
   b4ac4:	701a      	strb	r2, [r3, #0]
}
   b4ac6:	bd10      	pop	{r4, pc}
   b4ac8:	2003dd50 	.word	0x2003dd50
   b4acc:	2003ddf5 	.word	0x2003ddf5
   b4ad0:	2003dc8c 	.word	0x2003dc8c
   b4ad4:	2003dca4 	.word	0x2003dca4
   b4ad8:	000c0382 	.word	0x000c0382
   b4adc:	2003da88 	.word	0x2003da88

000b4ae0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ae4:	6843      	ldr	r3, [r0, #4]
   b4ae6:	f8d0 a000 	ldr.w	sl, [r0]
   b4aea:	9301      	str	r3, [sp, #4]
   b4aec:	eba3 040a 	sub.w	r4, r3, sl
   b4af0:	4b41      	ldr	r3, [pc, #260]	; (b4bf8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b4af2:	10a4      	asrs	r4, r4, #2
   b4af4:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4af6:	4b41      	ldr	r3, [pc, #260]	; (b4bfc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b4af8:	429c      	cmp	r4, r3
   b4afa:	4681      	mov	r9, r0
   b4afc:	468b      	mov	fp, r1
   b4afe:	4616      	mov	r6, r2
   b4b00:	d102      	bne.n	b4b08 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b4b02:	483f      	ldr	r0, [pc, #252]	; (b4c00 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>)
   b4b04:	f008 fbd3 	bl	bd2ae <_ZSt20__throw_length_errorPKc>
   b4b08:	2c01      	cmp	r4, #1
   b4b0a:	4622      	mov	r2, r4
   b4b0c:	bf38      	it	cc
   b4b0e:	2201      	movcc	r2, #1
   b4b10:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4b12:	eba1 070a 	sub.w	r7, r1, sl

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4b16:	d229      	bcs.n	b4b6c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b18:	b354      	cbz	r4, b4b70 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b4b1a:	429c      	cmp	r4, r3
   b4b1c:	bf28      	it	cs
   b4b1e:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b20:	2034      	movs	r0, #52	; 0x34
   b4b22:	4360      	muls	r0, r4
   b4b24:	f7ff fab7 	bl	b4096 <_Znwj>
   b4b28:	4680      	mov	r8, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4b2a:	eb18 0507 	adds.w	r5, r8, r7
   b4b2e:	d007      	beq.n	b4b40 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
   b4b30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b3c:	6833      	ldr	r3, [r6, #0]
   b4b3e:	602b      	str	r3, [r5, #0]
   b4b40:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b42:	46d6      	mov	lr, sl
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b4b44:	45f3      	cmp	fp, lr
   b4b46:	d015      	beq.n	b4b74 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b4b48:	f1bc 0f00 	cmp.w	ip, #0
   b4b4c:	d009      	beq.n	b4b62 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b4b4e:	4676      	mov	r6, lr
   b4b50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b52:	4665      	mov	r5, ip
   b4b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b5e:	6833      	ldr	r3, [r6, #0]
   b4b60:	602b      	str	r3, [r5, #0]
   b4b62:	f10e 0e34 	add.w	lr, lr, #52	; 0x34
   b4b66:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4b6a:	e7eb      	b.n	b4b44 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4b6c:	461c      	mov	r4, r3
   b4b6e:	e7d7      	b.n	b4b20 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b70:	46a0      	mov	r8, r4
   b4b72:	e7da      	b.n	b4b2a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b4b74:	f8df e08c 	ldr.w	lr, [pc, #140]	; b4c04 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>
   b4b78:	08bf      	lsrs	r7, r7, #2
   b4b7a:	fb0e f707 	mul.w	r7, lr, r7
   b4b7e:	2334      	movs	r3, #52	; 0x34
   b4b80:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b4b84:	435f      	muls	r7, r3
   b4b86:	eb0a 0b07 	add.w	fp, sl, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b4b8a:	441f      	add	r7, r3
   b4b8c:	eb08 0307 	add.w	r3, r8, r7
   b4b90:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b4b92:	469c      	mov	ip, r3
   b4b94:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b4b96:	9b01      	ldr	r3, [sp, #4]
   b4b98:	429f      	cmp	r7, r3
   b4b9a:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4b9e:	d00c      	beq.n	b4bba <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   b4ba0:	463e      	mov	r6, r7
   b4ba2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4ba4:	f1ac 0534 	sub.w	r5, ip, #52	; 0x34
   b4ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4baa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4bae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4bb2:	6833      	ldr	r3, [r6, #0]
   b4bb4:	602b      	str	r3, [r5, #0]
   b4bb6:	3734      	adds	r7, #52	; 0x34
   b4bb8:	e7ed      	b.n	b4b96 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
   b4bba:	eba7 070b 	sub.w	r7, r7, fp
   b4bbe:	08bf      	lsrs	r7, r7, #2
   b4bc0:	fb0e fe07 	mul.w	lr, lr, r7
   b4bc4:	9b00      	ldr	r3, [sp, #0]
   b4bc6:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b4bca:	2734      	movs	r7, #52	; 0x34
   b4bcc:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b4bd0:	f1ba 0f00 	cmp.w	sl, #0
   b4bd4:	d006      	beq.n	b4be4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x104>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4bd6:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b4bda:	4650      	mov	r0, sl
   b4bdc:	eba1 010a 	sub.w	r1, r1, sl
   b4be0:	f7ff fa5d 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4be4:	2034      	movs	r0, #52	; 0x34
   b4be6:	fb00 8404 	mla	r4, r0, r4, r8
      this->_M_impl._M_finish = __new_finish;
   b4bea:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4bee:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   b4bf2:	b003      	add	sp, #12
   b4bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4bf8:	c4ec4ec5 	.word	0xc4ec4ec5
   b4bfc:	02762762 	.word	0x02762762
   b4c00:	000c038f 	.word	0x000c038f
   b4c04:	04ec4ec5 	.word	0x04ec4ec5

000b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b4c08:	b570      	push	{r4, r5, r6, lr}
   b4c0a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4c0c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b4c10:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b4c12:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4c14:	d00e      	beq.n	b4c34 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4c16:	b149      	cbz	r1, b4c2c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x24>
   b4c18:	4615      	mov	r5, r2
   b4c1a:	460c      	mov	r4, r1
   b4c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c28:	682b      	ldr	r3, [r5, #0]
   b4c2a:	6023      	str	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
   b4c2c:	6873      	ldr	r3, [r6, #4]
   b4c2e:	3334      	adds	r3, #52	; 0x34
   b4c30:	6073      	str	r3, [r6, #4]
      }
   b4c32:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b4c34:	f7ff ff54 	bl	b4ae0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b4c38:	e7fb      	b.n	b4c32 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2a>
	...

000b4c3c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c40:	b0a5      	sub	sp, #148	; 0x94
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4c42:	7883      	ldrb	r3, [r0, #2]
   b4c44:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4c46:	af06      	add	r7, sp, #24
   b4c48:	4683      	mov	fp, r0
   b4c4a:	460e      	mov	r6, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4c4c:	d125      	bne.n	b4c9a <_Z14processCommandPKchb+0x5e>
   b4c4e:	78c3      	ldrb	r3, [r0, #3]
   b4c50:	2b42      	cmp	r3, #66	; 0x42
   b4c52:	f040 81b7 	bne.w	b4fc4 <_Z14processCommandPKchb+0x388>
        rxIDBuf[0] = command[1];
   b4c56:	f89b 3001 	ldrb.w	r3, [fp, #1]
      : _M_current(__i) { }
   b4c5a:	f8df a38c 	ldr.w	sl, [pc, #908]	; b4fe8 <_Z14processCommandPKchb+0x3ac>
   b4c5e:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4c60:	f107 0018 	add.w	r0, r7, #24
   b4c64:	f009 f9d7 	bl	be016 <atoi>
   b4c68:	e9da 8300 	ldrd	r8, r3, [sl]
        }
   b4c6c:	46e9      	mov	r9, sp
        uint8_t rxBotID = atoi(rxIDBuf);
   b4c6e:	b2c5      	uxtb	r5, r0
        int index = 0;
   b4c70:	2100      	movs	r1, #0
        bool newBot = true;
   b4c72:	2201      	movs	r2, #1
        for(WaterBot w: WaterBots){
   b4c74:	4598      	cmp	r8, r3
   b4c76:	d016      	beq.n	b4ca6 <_Z14processCommandPKchb+0x6a>
            if(rxBotID == w.botNum){
   b4c78:	f898 0000 	ldrb.w	r0, [r8]
   b4c7c:	42a8      	cmp	r0, r5
   b4c7e:	d108      	bne.n	b4c92 <_Z14processCommandPKchb+0x56>
                TargetWB = &WaterBots.at(index);
   b4c80:	4650      	mov	r0, sl
   b4c82:	60bb      	str	r3, [r7, #8]
   b4c84:	6179      	str	r1, [r7, #20]
   b4c86:	f7ff fd83 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b4c8a:	68bb      	ldr	r3, [r7, #8]
   b4c8c:	6979      	ldr	r1, [r7, #20]
                TargetWB = &WaterBots.at(index);
   b4c8e:	4604      	mov	r4, r0
                newBot = false;
   b4c90:	2200      	movs	r2, #0
            index++;
   b4c92:	3101      	adds	r1, #1
	++_M_current;
   b4c94:	f108 0834 	add.w	r8, r8, #52	; 0x34
	return *this;
   b4c98:	e7ec      	b.n	b4c74 <_Z14processCommandPKchb+0x38>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4c9a:	2b43      	cmp	r3, #67	; 0x43
   b4c9c:	f040 8192 	bne.w	b4fc4 <_Z14processCommandPKchb+0x388>
   b4ca0:	78c3      	ldrb	r3, [r0, #3]
   b4ca2:	2b43      	cmp	r3, #67	; 0x43
   b4ca4:	e7d5      	b.n	b4c52 <_Z14processCommandPKchb+0x16>
        if(newBot){
   b4ca6:	b16a      	cbz	r2, b4cc4 <_Z14processCommandPKchb+0x88>
            WaterBot newWaterbot;
   b4ca8:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b4cac:	f7ff fcb6 	bl	b461c <_ZN8WaterBotC1Ev>
            WaterBots.push_back(newWaterbot);
   b4cb0:	48cd      	ldr	r0, [pc, #820]	; (b4fe8 <_Z14processCommandPKchb+0x3ac>)
            newWaterbot.botNum = rxBotID;
   b4cb2:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
            WaterBots.push_back(newWaterbot);
   b4cb6:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b4cba:	f7ff ffa5 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b4cbe:	f8da 4004 	ldr.w	r4, [sl, #4]
   b4cc2:	3c34      	subs	r4, #52	; 0x34
        char dataStr[strlen(command)-8];
   b4cc4:	4658      	mov	r0, fp
   b4cc6:	f009 fa96 	bl	be1f6 <strlen>
   b4cca:	3801      	subs	r0, #1
   b4ccc:	f020 0007 	bic.w	r0, r0, #7
   b4cd0:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4cd4:	4658      	mov	r0, fp
   b4cd6:	f009 fa8e 	bl	be1f6 <strlen>
        char dataStr[strlen(command)-8];
   b4cda:	f10d 0818 	add.w	r8, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4cde:	4440      	add	r0, r8
   b4ce0:	2100      	movs	r1, #0
   b4ce2:	f800 1c09 	strb.w	r1, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b4ce6:	4658      	mov	r0, fp
        cmdStr[3] = '\0';
   b4ce8:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b4cec:	f009 fa83 	bl	be1f6 <strlen>
   b4cf0:	4458      	add	r0, fp
   b4cf2:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4cf6:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b4cf8:	4658      	mov	r0, fp
   b4cfa:	f009 fa7c 	bl	be1f6 <strlen>
   b4cfe:	4458      	add	r0, fp
        checkStr[2] = '\0';
   b4d00:	2100      	movs	r1, #0
        checkStr[1] = command[strlen(command)-1];
   b4d02:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4d06:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4d08:	2210      	movs	r2, #16
   b4d0a:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b4d0e:	77b9      	strb	r1, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4d10:	f00a f95e 	bl	befd0 <strtol>
   b4d14:	6178      	str	r0, [r7, #20]
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4d16:	f008 f90d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4d1a:	697b      	ldr	r3, [r7, #20]
   b4d1c:	49b3      	ldr	r1, [pc, #716]	; (b4fec <_Z14processCommandPKchb+0x3b0>)
   b4d1e:	b2db      	uxtb	r3, r3
   b4d20:	461a      	mov	r2, r3
   b4d22:	617b      	str	r3, [r7, #20]
   b4d24:	f7ff fafa 	bl	b431c <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4d28:	697b      	ldr	r3, [r7, #20]
   b4d2a:	2104      	movs	r1, #4
   b4d2c:	4658      	mov	r0, fp
   b4d2e:	60bb      	str	r3, [r7, #8]
   b4d30:	6179      	str	r1, [r7, #20]
   b4d32:	f009 fa60 	bl	be1f6 <strlen>
   b4d36:	6979      	ldr	r1, [r7, #20]
   b4d38:	68bb      	ldr	r3, [r7, #8]
   b4d3a:	3802      	subs	r0, #2
   b4d3c:	4281      	cmp	r1, r0
   b4d3e:	d214      	bcs.n	b4d6a <_Z14processCommandPKchb+0x12e>
            if(i < 7) cmdStr[i-4] = command[i];
   b4d40:	2906      	cmp	r1, #6
   b4d42:	bf9b      	ittet	ls
   b4d44:	f107 0278 	addls.w	r2, r7, #120	; 0x78
   b4d48:	1852      	addls	r2, r2, r1
            else dataStr[i-7] = command[i];
   b4d4a:	eb08 0201 	addhi.w	r2, r8, r1
            if(i < 7) cmdStr[i-4] = command[i];
   b4d4e:	f81b 0001 	ldrbls.w	r0, [fp, r1]
            else dataStr[i-7] = command[i];
   b4d52:	bf8c      	ite	hi
   b4d54:	f81b 0001 	ldrbhi.w	r0, [fp, r1]
            if(i < 7) cmdStr[i-4] = command[i];
   b4d58:	f802 0c5c 	strbls.w	r0, [r2, #-92]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4d5c:	f101 0101 	add.w	r1, r1, #1
            else dataStr[i-7] = command[i];
   b4d60:	bf88      	it	hi
   b4d62:	f802 0c07 	strbhi.w	r0, [r2, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4d66:	b2c9      	uxtb	r1, r1
   b4d68:	e7e0      	b.n	b4d2c <_Z14processCommandPKchb+0xf0>
        if(checksum != strlen(command)-2){
   b4d6a:	4298      	cmp	r0, r3
   b4d6c:	d044      	beq.n	b4df8 <_Z14processCommandPKchb+0x1bc>
   b4d6e:	617b      	str	r3, [r7, #20]
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4d70:	f008 f8e0 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4d74:	4604      	mov	r4, r0
   b4d76:	4658      	mov	r0, fp
   b4d78:	f009 fa3d 	bl	be1f6 <strlen>
   b4d7c:	1e82      	subs	r2, r0, #2
   b4d7e:	4620      	mov	r0, r4
    return m_attr;
   b4d80:	4c9b      	ldr	r4, [pc, #620]	; (b4ff0 <_Z14processCommandPKchb+0x3b4>)
   b4d82:	697b      	ldr	r3, [r7, #20]
   b4d84:	499b      	ldr	r1, [pc, #620]	; (b4ff4 <_Z14processCommandPKchb+0x3b8>)
   b4d86:	f7ff fac9 	bl	b431c <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4d8a:	7c23      	ldrb	r3, [r4, #16]
   b4d8c:	bb73      	cbnz	r3, b4dec <_Z14processCommandPKchb+0x1b0>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4d8e:	499a      	ldr	r1, [pc, #616]	; (b4ff8 <_Z14processCommandPKchb+0x3bc>)
   b4d90:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d94:	f104 0010 	add.w	r0, r4, #16
   b4d98:	f7ff fb50 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4d9c:	4997      	ldr	r1, [pc, #604]	; (b4ffc <_Z14processCommandPKchb+0x3c0>)
   b4d9e:	465a      	mov	r2, fp
   b4da0:	4620      	mov	r0, r4
   b4da2:	f7ff fabb 	bl	b431c <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4da6:	f104 0010 	add.w	r0, r4, #16
   b4daa:	f001 fe4f 	bl	b6a4c <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4dae:	f008 f8c1 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4db2:	4993      	ldr	r1, [pc, #588]	; (b5000 <_Z14processCommandPKchb+0x3c4>)
   b4db4:	f007 fcc9 	bl	bc74a <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4db8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b4dbc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4dc0:	2a09      	cmp	r2, #9
   b4dc2:	d902      	bls.n	b4dca <_Z14processCommandPKchb+0x18e>
   b4dc4:	2b43      	cmp	r3, #67	; 0x43
   b4dc6:	f040 80fc 	bne.w	b4fc2 <_Z14processCommandPKchb+0x386>
                rxBotNum[0] = command[0];
   b4dca:	f89b 2000 	ldrb.w	r2, [fp]
   b4dce:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
                rxBotNum[1] = command[1];
   b4dd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4dd6:	498b      	ldr	r1, [pc, #556]	; (b5004 <_Z14processCommandPKchb+0x3c8>)
   b4dd8:	488b      	ldr	r0, [pc, #556]	; (b5008 <_Z14processCommandPKchb+0x3cc>)
   b4dda:	f107 0320 	add.w	r3, r7, #32
   b4dde:	f107 0244 	add.w	r2, r7, #68	; 0x44
   b4de2:	f004 fc0d 	bl	b9600 <sprintf>
                errModeReply = mode;
   b4de6:	4b89      	ldr	r3, [pc, #548]	; (b500c <_Z14processCommandPKchb+0x3d0>)
            errCmdMode = mode;
   b4de8:	701e      	strb	r6, [r3, #0]
   b4dea:	e0ea      	b.n	b4fc2 <_Z14processCommandPKchb+0x386>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4dec:	4983      	ldr	r1, [pc, #524]	; (b4ffc <_Z14processCommandPKchb+0x3c0>)
   b4dee:	465a      	mov	r2, fp
   b4df0:	4620      	mov	r0, r4
   b4df2:	f7ff fa93 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b4df6:	e7da      	b.n	b4dae <_Z14processCommandPKchb+0x172>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4df8:	4985      	ldr	r1, [pc, #532]	; (b5010 <_Z14processCommandPKchb+0x3d4>)
   b4dfa:	f107 0020 	add.w	r0, r7, #32
   b4dfe:	f009 f9ca 	bl	be196 <strcmp>
   b4e02:	2800      	cmp	r0, #0
   b4e04:	f000 80dd 	beq.w	b4fc2 <_Z14processCommandPKchb+0x386>
        else if(!strcmp(cmdStr,"sup")){
   b4e08:	4982      	ldr	r1, [pc, #520]	; (b5014 <_Z14processCommandPKchb+0x3d8>)
   b4e0a:	f107 0020 	add.w	r0, r7, #32
   b4e0e:	f009 f9c2 	bl	be196 <strcmp>
   b4e12:	2800      	cmp	r0, #0
   b4e14:	d17e      	bne.n	b4f14 <_Z14processCommandPKchb+0x2d8>
      : _M_current(__i) { }
   b4e16:	f8da 3004 	ldr.w	r3, [sl, #4]
   b4e1a:	613b      	str	r3, [r7, #16]
   b4e1c:	f8da 3000 	ldr.w	r3, [sl]
            for(WaterBot w: WaterBots){
   b4e20:	617b      	str	r3, [r7, #20]
   b4e22:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
   b4e26:	4293      	cmp	r3, r2
   b4e28:	d074      	beq.n	b4f14 <_Z14processCommandPKchb+0x2d8>
   b4e2a:	7813      	ldrb	r3, [r2, #0]
                if(rxBotID == w.botNum){
   b4e2c:	429d      	cmp	r5, r3
   b4e2e:	d16e      	bne.n	b4f0e <_Z14processCommandPKchb+0x2d2>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4e30:	f107 0a44 	add.w	sl, r7, #68	; 0x44
   b4e34:	f107 0b38 	add.w	fp, r7, #56	; 0x38
   b4e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
   b4e3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   b4e40:	4975      	ldr	r1, [pc, #468]	; (b5018 <_Z14processCommandPKchb+0x3dc>)
   b4e42:	f8cd a004 	str.w	sl, [sp, #4]
   b4e46:	f8cd b000 	str.w	fp, [sp]
   b4e4a:	4640      	mov	r0, r8
   b4e4c:	f004 fbe0 	bl	b9610 <sscanf>
                    latRX = atof(testLat);
   b4e50:	4658      	mov	r0, fp
   b4e52:	f009 f8dd 	bl	be010 <atof>
                    lonRX = atof(testLon);
   b4e56:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b4e58:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4e5c:	f009 f8d8 	bl	be010 <atof>
                    w.LTEAvail = statflags & 1;
   b4e60:	f897 a034 	ldrb.w	sl, [r7, #52]	; 0x34
                    w.battPercent = battpct;
   b4e64:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
                    lonRX = atof(testLon);
   b4e68:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4e6c:	f008 f862 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4e70:	496a      	ldr	r1, [pc, #424]	; (b501c <_Z14processCommandPKchb+0x3e0>)
   b4e72:	f007 fc6a 	bl	bc74a <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b4e76:	f008 f85d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4e7a:	4969      	ldr	r1, [pc, #420]	; (b5020 <_Z14processCommandPKchb+0x3e4>)
   b4e7c:	f007 fc65 	bl	bc74a <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4e80:	f008 f858 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4e84:	4967      	ldr	r1, [pc, #412]	; (b5024 <_Z14processCommandPKchb+0x3e8>)
   b4e86:	f007 fc60 	bl	bc74a <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b4e8a:	f008 f853 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4e8e:	4966      	ldr	r1, [pc, #408]	; (b5028 <_Z14processCommandPKchb+0x3ec>)
   b4e90:	462a      	mov	r2, r5
   b4e92:	f7ff fa43 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b4e96:	f008 f84d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4e9a:	465a      	mov	r2, fp
   b4e9c:	4963      	ldr	r1, [pc, #396]	; (b502c <_Z14processCommandPKchb+0x3f0>)
   b4e9e:	f7ff fa3d 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b4ea2:	f008 f847 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4ea6:	4962      	ldr	r1, [pc, #392]	; (b5030 <_Z14processCommandPKchb+0x3f4>)
   b4ea8:	f007 fc4f 	bl	bc74a <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4eac:	f008 f842 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4eb0:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b4eb4:	f00a 0201 	and.w	r2, sl, #1
   b4eb8:	495e      	ldr	r1, [pc, #376]	; (b5034 <_Z14processCommandPKchb+0x3f8>)
   b4eba:	9300      	str	r3, [sp, #0]
   b4ebc:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4ec0:	f7ff fa2c 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b4ec4:	f008 f836 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4ec8:	495b      	ldr	r1, [pc, #364]	; (b5038 <_Z14processCommandPKchb+0x3fc>)
   b4eca:	f007 fc3e 	bl	bc74a <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4ece:	f008 f831 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4ed2:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b4ed4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b4ed8:	f009 f826 	bl	bdf28 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4edc:	f008 fd12 	bl	bd904 <__aeabi_f2d>
   b4ee0:	4602      	mov	r2, r0
   b4ee2:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b4ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4ee8:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b4eec:	f009 f81c 	bl	bdf28 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4ef0:	f008 fd08 	bl	bd904 <__aeabi_f2d>
   b4ef4:	e9cd 0100 	strd	r0, r1, [sp]
   b4ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b4efc:	494f      	ldr	r1, [pc, #316]	; (b503c <_Z14processCommandPKchb+0x400>)
   b4efe:	4650      	mov	r0, sl
   b4f00:	f7ff fa0c 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b4f04:	f008 f816 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4f08:	4945      	ldr	r1, [pc, #276]	; (b5020 <_Z14processCommandPKchb+0x3e4>)
   b4f0a:	f007 fc1e 	bl	bc74a <_ZN5Print7printlnEPKc>
      operator++() _GLIBCXX_NOEXCEPT
   b4f0e:	697b      	ldr	r3, [r7, #20]
   b4f10:	3334      	adds	r3, #52	; 0x34
   b4f12:	e785      	b.n	b4e20 <_Z14processCommandPKchb+0x1e4>
        if(!strcmp(cmdStr,"sns")){
   b4f14:	494a      	ldr	r1, [pc, #296]	; (b5040 <_Z14processCommandPKchb+0x404>)
   b4f16:	f107 0020 	add.w	r0, r7, #32
   b4f1a:	f009 f93c 	bl	be196 <strcmp>
   b4f1e:	2800      	cmp	r0, #0
   b4f20:	d154      	bne.n	b4fcc <_Z14processCommandPKchb+0x390>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b4f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
   b4f26:	9304      	str	r3, [sp, #16]
   b4f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
   b4f2c:	9303      	str	r3, [sp, #12]
   b4f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b4f32:	9302      	str	r3, [sp, #8]
   b4f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4f3e:	4941      	ldr	r1, [pc, #260]	; (b5044 <_Z14processCommandPKchb+0x408>)
   b4f40:	9300      	str	r3, [sp, #0]
   b4f42:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b4f46:	f107 0344 	add.w	r3, r7, #68	; 0x44
   b4f4a:	4640      	mov	r0, r8
   b4f4c:	f004 fb60 	bl	b9610 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b4f50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   b4f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b4f58:	eddf 7a3b 	vldr	s15, [pc, #236]	; b5048 <_Z14processCommandPKchb+0x40c>
   b4f5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b4f60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
            TargetWB->DO = ((float)do_in)/1000.0;
   b4f64:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
            TargetWB->pH = ((float)pH_in)/1000.0;
   b4f68:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b4f70:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
            TargetWB->pH = ((float)pH_in)/1000.0;
   b4f74:	edc4 6a07 	vstr	s13, [r4, #28]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b4f78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4f80:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b4f84:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   b4f88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4f90:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
            TargetWB->temp = ((float)temp_in)/1000.0;
   b4f94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
   b4f98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4fa0:	edc4 6a08 	vstr	s13, [r4, #32]
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b4fa4:	f007 ffc6 	bl	bcf34 <_Z16_fetch_usbserialv>
   b4fa8:	7822      	ldrb	r2, [r4, #0]
   b4faa:	617a      	str	r2, [r7, #20]
   b4fac:	4605      	mov	r5, r0
   b4fae:	6a20      	ldr	r0, [r4, #32]
   b4fb0:	f008 fca8 	bl	bd904 <__aeabi_f2d>
   b4fb4:	e9cd 0100 	strd	r0, r1, [sp]
   b4fb8:	697a      	ldr	r2, [r7, #20]
   b4fba:	4924      	ldr	r1, [pc, #144]	; (b504c <_Z14processCommandPKchb+0x410>)
   b4fbc:	4628      	mov	r0, r5
   b4fbe:	f7ff f9ad 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b4fc2:	46cd      	mov	sp, r9
}
   b4fc4:	377c      	adds	r7, #124	; 0x7c
   b4fc6:	46bd      	mov	sp, r7
   b4fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b4fcc:	4920      	ldr	r1, [pc, #128]	; (b5050 <_Z14processCommandPKchb+0x414>)
   b4fce:	f107 0020 	add.w	r0, r7, #32
   b4fd2:	f009 f8e0 	bl	be196 <strcmp>
   b4fd6:	2800      	cmp	r0, #0
   b4fd8:	d140      	bne.n	b505c <_Z14processCommandPKchb+0x420>
            strncpy(errCmdStr,dataStr,3);
   b4fda:	481e      	ldr	r0, [pc, #120]	; (b5054 <_Z14processCommandPKchb+0x418>)
   b4fdc:	2203      	movs	r2, #3
   b4fde:	4641      	mov	r1, r8
   b4fe0:	f009 f925 	bl	be22e <strncpy>
            errCmdMode = mode;
   b4fe4:	4b1c      	ldr	r3, [pc, #112]	; (b5058 <_Z14processCommandPKchb+0x41c>)
   b4fe6:	e6ff      	b.n	b4de8 <_Z14processCommandPKchb+0x1ac>
   b4fe8:	2003dcb4 	.word	0x2003dcb4
   b4fec:	000c03a9 	.word	0x000c03a9
   b4ff0:	2003ddc0 	.word	0x2003ddc0
   b4ff4:	000c03be 	.word	0x000c03be
   b4ff8:	2003dd68 	.word	0x2003dd68
   b4ffc:	000c03db 	.word	0x000c03db
   b5000:	000c0407 	.word	0x000c0407
   b5004:	000c0428 	.word	0x000c0428
   b5008:	2003dd54 	.word	0x2003dd54
   b500c:	2003dd67 	.word	0x2003dd67
   b5010:	000c0434 	.word	0x000c0434
   b5014:	000c0438 	.word	0x000c0438
   b5018:	000c043c 	.word	0x000c043c
   b501c:	000c0448 	.word	0x000c0448
   b5020:	000c0457 	.word	0x000c0457
   b5024:	000c0472 	.word	0x000c0472
   b5028:	000c048d 	.word	0x000c048d
   b502c:	000c04a9 	.word	0x000c04a9
   b5030:	000c04c5 	.word	0x000c04c5
   b5034:	000c04e0 	.word	0x000c04e0
   b5038:	000c04fe 	.word	0x000c04fe
   b503c:	000c0519 	.word	0x000c0519
   b5040:	000c0529 	.word	0x000c0529
   b5044:	000c052d 	.word	0x000c052d
   b5048:	447a0000 	.word	0x447a0000
   b504c:	000c0542 	.word	0x000c0542
   b5050:	000c0555 	.word	0x000c0555
   b5054:	2003dd64 	.word	0x2003dd64
   b5058:	2003dd63 	.word	0x2003dd63
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b505c:	492e      	ldr	r1, [pc, #184]	; (b5118 <_Z14processCommandPKchb+0x4dc>)
   b505e:	f107 0020 	add.w	r0, r7, #32
   b5062:	f009 f898 	bl	be196 <strcmp>
   b5066:	bba8      	cbnz	r0, b50d4 <_Z14processCommandPKchb+0x498>
      : _M_current(__i) { }
   b5068:	4b2c      	ldr	r3, [pc, #176]	; (b511c <_Z14processCommandPKchb+0x4e0>)
   b506a:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b506e:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b5070:	4282      	cmp	r2, r0
   b5072:	d005      	beq.n	b5080 <_Z14processCommandPKchb+0x444>
                if(rxBotID == w.botNum) newBot = false;
   b5074:	f812 1b34 	ldrb.w	r1, [r2], #52
   b5078:	42a9      	cmp	r1, r5
   b507a:	bf08      	it	eq
   b507c:	2300      	moveq	r3, #0
	return *this;
   b507e:	e7f7      	b.n	b5070 <_Z14processCommandPKchb+0x434>
            if(newBot){
   b5080:	b1c3      	cbz	r3, b50b4 <_Z14processCommandPKchb+0x478>
                Serial.println("Found a new water bot ID");
   b5082:	f007 ff57 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5086:	4926      	ldr	r1, [pc, #152]	; (b5120 <_Z14processCommandPKchb+0x4e4>)
   b5088:	f007 fb5f 	bl	bc74a <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b508c:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b5090:	f7ff fac4 	bl	b461c <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b5094:	2e01      	cmp	r6, #1
   b5096:	d111      	bne.n	b50bc <_Z14processCommandPKchb+0x480>
   b5098:	f887 6046 	strb.w	r6, [r7, #70]	; 0x46
                WaterBots.push_back(newWaterbot);
   b509c:	481f      	ldr	r0, [pc, #124]	; (b511c <_Z14processCommandPKchb+0x4e0>)
                newWaterbot.botNum = rxBotID;
   b509e:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b50a2:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b50a6:	f7ff fdaf 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b50aa:	481e      	ldr	r0, [pc, #120]	; (b5124 <_Z14processCommandPKchb+0x4e8>)
   b50ac:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b50b0:	f7ff fdaa 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b50b4:	4b1c      	ldr	r3, [pc, #112]	; (b5128 <_Z14processCommandPKchb+0x4ec>)
   b50b6:	2201      	movs	r2, #1
   b50b8:	701a      	strb	r2, [r3, #0]
   b50ba:	e782      	b.n	b4fc2 <_Z14processCommandPKchb+0x386>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b50bc:	2e02      	cmp	r6, #2
   b50be:	f04f 0301 	mov.w	r3, #1
   b50c2:	d102      	bne.n	b50ca <_Z14processCommandPKchb+0x48e>
   b50c4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   b50c8:	e7e8      	b.n	b509c <_Z14processCommandPKchb+0x460>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b50ca:	2e03      	cmp	r6, #3
   b50cc:	bf08      	it	eq
   b50ce:	f887 3047 	strbeq.w	r3, [r7, #71]	; 0x47
   b50d2:	e7e3      	b.n	b509c <_Z14processCommandPKchb+0x460>
        else if(!strcmp(cmdStr,"pts")){
   b50d4:	4915      	ldr	r1, [pc, #84]	; (b512c <_Z14processCommandPKchb+0x4f0>)
   b50d6:	f107 0020 	add.w	r0, r7, #32
   b50da:	f009 f85c 	bl	be196 <strcmp>
   b50de:	2800      	cmp	r0, #0
   b50e0:	f47f af6f 	bne.w	b4fc2 <_Z14processCommandPKchb+0x386>
   b50e4:	4c12      	ldr	r4, [pc, #72]	; (b5130 <_Z14processCommandPKchb+0x4f4>)
            if(!logFile.isOpen()){
   b50e6:	7c23      	ldrb	r3, [r4, #16]
   b50e8:	b983      	cbnz	r3, b510c <_Z14processCommandPKchb+0x4d0>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b50ea:	4912      	ldr	r1, [pc, #72]	; (b5134 <_Z14processCommandPKchb+0x4f8>)
   b50ec:	f244 2202 	movw	r2, #16898	; 0x4202
   b50f0:	f104 0010 	add.w	r0, r4, #16
   b50f4:	f7ff f9a2 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b50f8:	490f      	ldr	r1, [pc, #60]	; (b5138 <_Z14processCommandPKchb+0x4fc>)
   b50fa:	4642      	mov	r2, r8
   b50fc:	4620      	mov	r0, r4
   b50fe:	f7ff f90d 	bl	b431c <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b5102:	f104 0010 	add.w	r0, r4, #16
   b5106:	f001 fca1 	bl	b6a4c <_ZN7FatFile5closeEv>
   b510a:	e75a      	b.n	b4fc2 <_Z14processCommandPKchb+0x386>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b510c:	490a      	ldr	r1, [pc, #40]	; (b5138 <_Z14processCommandPKchb+0x4fc>)
   b510e:	4642      	mov	r2, r8
   b5110:	4620      	mov	r0, r4
   b5112:	f7ff f903 	bl	b431c <_ZN5Print8printlnfEPKcz>
        if(sendAck){    //Transmit out acknowledgement if needed
   b5116:	e754      	b.n	b4fc2 <_Z14processCommandPKchb+0x386>
   b5118:	000c0559 	.word	0x000c0559
   b511c:	2003dcb4 	.word	0x2003dcb4
   b5120:	000c055d 	.word	0x000c055d
   b5124:	2003dc98 	.word	0x2003dc98
   b5128:	2003dd4c 	.word	0x2003dd4c
   b512c:	000c0576 	.word	0x000c0576
   b5130:	2003ddc0 	.word	0x2003ddc0
   b5134:	2003dd68 	.word	0x2003dd68
   b5138:	000c057a 	.word	0x000c057a

000b513c <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b513c:	b510      	push	{r4, lr}
   b513e:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b5140:	2200      	movs	r2, #0
   b5142:	2104      	movs	r1, #4
   b5144:	4620      	mov	r0, r4
   b5146:	f7ff fd79 	bl	b4c3c <_Z14processCommandPKchb>
    if(logMessages){
   b514a:	4b0b      	ldr	r3, [pc, #44]	; (b5178 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b514c:	781b      	ldrb	r3, [r3, #0]
   b514e:	b193      	cbz	r3, b5176 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b5150:	480a      	ldr	r0, [pc, #40]	; (b517c <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5152:	7c03      	ldrb	r3, [r0, #16]
   b5154:	b92b      	cbnz	r3, b5162 <_Z14dataLTEHandlerPKcS0_+0x26>
   b5156:	490a      	ldr	r1, [pc, #40]	; (b5180 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b5158:	f244 2202 	movw	r2, #16898	; 0x4202
   b515c:	3010      	adds	r0, #16
   b515e:	f7ff f96d 	bl	b443c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b5162:	4622      	mov	r2, r4
   b5164:	4907      	ldr	r1, [pc, #28]	; (b5184 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b5166:	4805      	ldr	r0, [pc, #20]	; (b517c <_Z14dataLTEHandlerPKcS0_+0x40>)
   b5168:	f7ff f8d8 	bl	b431c <_ZN5Print8printlnfEPKcz>
}
   b516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b5170:	4805      	ldr	r0, [pc, #20]	; (b5188 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b5172:	f001 bc6b 	b.w	b6a4c <_ZN7FatFile5closeEv>
}
   b5176:	bd10      	pop	{r4, pc}
   b5178:	2003ddf4 	.word	0x2003ddf4
   b517c:	2003ddc0 	.word	0x2003ddc0
   b5180:	2003dd68 	.word	0x2003dd68
   b5184:	000c059d 	.word	0x000c059d
   b5188:	2003ddd0 	.word	0x2003ddd0

000b518c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b518c:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b518e:	f101 0308 	add.w	r3, r1, #8
   b5192:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5196:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5198:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b519c:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b519e:	460a      	mov	r2, r1
   b51a0:	4601      	mov	r1, r0
   b51a2:	4668      	mov	r0, sp
   b51a4:	f008 ff4b 	bl	be03e <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b51a8:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b51ac:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b51ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b51b2:	b113      	cbz	r3, b51ba <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b51b4:	2300      	movs	r3, #0
   b51b6:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b51ba:	f007 febb 	bl	bcf34 <_Z16_fetch_usbserialv>
   b51be:	4911      	ldr	r1, [pc, #68]	; (b5204 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b51c0:	f007 fab0 	bl	bc724 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b51c4:	f007 feb6 	bl	bcf34 <_Z16_fetch_usbserialv>
   b51c8:	4629      	mov	r1, r5
   b51ca:	f007 fabe 	bl	bc74a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b51ce:	2201      	movs	r2, #1
   b51d0:	4611      	mov	r1, r2
   b51d2:	4628      	mov	r0, r5
   b51d4:	f7ff fd32 	bl	b4c3c <_Z14processCommandPKchb>
    if(logMessages){
   b51d8:	4b0b      	ldr	r3, [pc, #44]	; (b5208 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b51da:	781b      	ldrb	r3, [r3, #0]
   b51dc:	b183      	cbz	r3, b5200 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b51de:	480b      	ldr	r0, [pc, #44]	; (b520c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b51e0:	7c03      	ldrb	r3, [r0, #16]
   b51e2:	b92b      	cbnz	r3, b51f0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b51e4:	490a      	ldr	r1, [pc, #40]	; (b5210 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b51e6:	f244 2202 	movw	r2, #16898	; 0x4202
   b51ea:	3010      	adds	r0, #16
   b51ec:	f7ff f926 	bl	b443c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b51f0:	4908      	ldr	r1, [pc, #32]	; (b5214 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b51f2:	4806      	ldr	r0, [pc, #24]	; (b520c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b51f4:	462a      	mov	r2, r5
   b51f6:	f7ff f891 	bl	b431c <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b51fa:	4807      	ldr	r0, [pc, #28]	; (b5218 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b51fc:	f001 fc26 	bl	b6a4c <_ZN7FatFile5closeEv>
}
   b5200:	46bd      	mov	sp, r7
   b5202:	bdb0      	pop	{r4, r5, r7, pc}
   b5204:	000c05bd 	.word	0x000c05bd
   b5208:	2003ddf4 	.word	0x2003ddf4
   b520c:	2003ddc0 	.word	0x2003ddc0
   b5210:	2003dd68 	.word	0x2003dd68
   b5214:	000c05ce 	.word	0x000c05ce
   b5218:	2003ddd0 	.word	0x2003ddd0

000b521c <_Z10RPiHandlerv>:
void RPiHandler(){
   b521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(logMessages){
   b5220:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b5304 <_Z10RPiHandlerv+0xe8>
   b5224:	4d34      	ldr	r5, [pc, #208]	; (b52f8 <_Z10RPiHandlerv+0xdc>)
void RPiHandler(){
   b5226:	b089      	sub	sp, #36	; 0x24
   b5228:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b522a:	f007 fe83 	bl	bcf34 <_Z16_fetch_usbserialv>
   b522e:	6803      	ldr	r3, [r0, #0]
   b5230:	691b      	ldr	r3, [r3, #16]
   b5232:	4798      	blx	r3
   b5234:	2800      	cmp	r0, #0
   b5236:	d05b      	beq.n	b52f0 <_Z10RPiHandlerv+0xd4>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b5238:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b5308 <_Z10RPiHandlerv+0xec>
        while(Serial.available()){
   b523c:	f007 fe7a 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5240:	6803      	ldr	r3, [r0, #0]
   b5242:	691b      	ldr	r3, [r3, #16]
   b5244:	4798      	blx	r3
   b5246:	2800      	cmp	r0, #0
   b5248:	d0ef      	beq.n	b522a <_Z10RPiHandlerv+0xe>
            String data = Serial.readStringUntil('\n');
   b524a:	f007 fe73 	bl	bcf34 <_Z16_fetch_usbserialv>
   b524e:	220a      	movs	r2, #10
   b5250:	4601      	mov	r1, r0
   b5252:	4638      	mov	r0, r7
   b5254:	f007 fbbe 	bl	bc9d4 <_ZN6Stream15readStringUntilEc>
            char buffer[data.length()];
   b5258:	68bb      	ldr	r3, [r7, #8]
   b525a:	3307      	adds	r3, #7
   b525c:	f023 0307 	bic.w	r3, r3, #7
        }
   b5260:	466e      	mov	r6, sp
            char buffer[data.length()];
   b5262:	ebad 0d03 	sub.w	sp, sp, r3
   b5266:	46ea      	mov	sl, sp
   b5268:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b526a:	68b9      	ldr	r1, [r7, #8]
   b526c:	fa1f fb83 	uxth.w	fp, r3
            for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5270:	458b      	cmp	fp, r1
   b5272:	f103 0401 	add.w	r4, r3, #1
   b5276:	d207      	bcs.n	b5288 <_Z10RPiHandlerv+0x6c>
   b5278:	4659      	mov	r1, fp
   b527a:	4638      	mov	r0, r7
   b527c:	f007 fcc4 	bl	bcc08 <_ZNK6String6charAtEj>
   b5280:	4623      	mov	r3, r4
   b5282:	f80a 000b 	strb.w	r0, [sl, fp]
   b5286:	e7f0      	b.n	b526a <_Z10RPiHandlerv+0x4e>
            if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5288:	2901      	cmp	r1, #1
   b528a:	d90a      	bls.n	b52a2 <_Z10RPiHandlerv+0x86>
   b528c:	3901      	subs	r1, #1
   b528e:	4638      	mov	r0, r7
   b5290:	f007 fcba 	bl	bcc08 <_ZNK6String6charAtEj>
   b5294:	280d      	cmp	r0, #13
   b5296:	bf01      	itttt	eq
   b5298:	68bb      	ldreq	r3, [r7, #8]
   b529a:	4453      	addeq	r3, sl
   b529c:	2200      	moveq	r2, #0
   b529e:	f803 2c01 	strbeq.w	r2, [r3, #-1]
            processCommand(buffer,2,true);
   b52a2:	2201      	movs	r2, #1
   b52a4:	2102      	movs	r1, #2
   b52a6:	4650      	mov	r0, sl
   b52a8:	f7ff fcc8 	bl	b4c3c <_Z14processCommandPKchb>
            if(logMessages){
   b52ac:	f899 3000 	ldrb.w	r3, [r9]
   b52b0:	b1cb      	cbz	r3, b52e6 <_Z10RPiHandlerv+0xca>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b52b2:	7c2b      	ldrb	r3, [r5, #16]
   b52b4:	b92b      	cbnz	r3, b52c2 <_Z10RPiHandlerv+0xa6>
   b52b6:	4911      	ldr	r1, [pc, #68]	; (b52fc <_Z10RPiHandlerv+0xe0>)
   b52b8:	4811      	ldr	r0, [pc, #68]	; (b5300 <_Z10RPiHandlerv+0xe4>)
   b52ba:	f244 2202 	movw	r2, #16898	; 0x4202
   b52be:	f7ff f8bd 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b52c2:	4639      	mov	r1, r7
   b52c4:	f107 0010 	add.w	r0, r7, #16
   b52c8:	f007 fc32 	bl	bcb30 <_ZN6StringC1ERKS_>
   b52cc:	f107 0210 	add.w	r2, r7, #16
   b52d0:	4641      	mov	r1, r8
   b52d2:	4628      	mov	r0, r5
   b52d4:	f7ff f822 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b52d8:	f107 0010 	add.w	r0, r7, #16
   b52dc:	f007 fb92 	bl	bca04 <_ZN6StringD1Ev>
                logFile.close();
   b52e0:	4807      	ldr	r0, [pc, #28]	; (b5300 <_Z10RPiHandlerv+0xe4>)
   b52e2:	f001 fbb3 	bl	b6a4c <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b52e6:	4638      	mov	r0, r7
   b52e8:	f007 fb8c 	bl	bca04 <_ZN6StringD1Ev>
   b52ec:	46b5      	mov	sp, r6
        while(Serial.available()){
   b52ee:	e7a5      	b.n	b523c <_Z10RPiHandlerv+0x20>
}
   b52f0:	3724      	adds	r7, #36	; 0x24
   b52f2:	46bd      	mov	sp, r7
   b52f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52f8:	2003ddc0 	.word	0x2003ddc0
   b52fc:	2003dd68 	.word	0x2003dd68
   b5300:	2003ddd0 	.word	0x2003ddd0
   b5304:	2003ddf4 	.word	0x2003ddf4
   b5308:	000c05ee 	.word	0x000c05ee

000b530c <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5310:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5400 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b5314:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5404 <_Z11XBeeHandlerv+0xf8>
   b5318:	4d35      	ldr	r5, [pc, #212]	; (b53f0 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b531a:	b089      	sub	sp, #36	; 0x24
   b531c:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b531e:	f007 ff9d 	bl	bd25c <_Z22__fetch_global_Serial1v>
   b5322:	6803      	ldr	r3, [r0, #0]
   b5324:	691b      	ldr	r3, [r3, #16]
   b5326:	4798      	blx	r3
   b5328:	2800      	cmp	r0, #0
   b532a:	d05c      	beq.n	b53e6 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b532c:	f007 ff96 	bl	bd25c <_Z22__fetch_global_Serial1v>
   b5330:	220a      	movs	r2, #10
   b5332:	4601      	mov	r1, r0
   b5334:	4638      	mov	r0, r7
   b5336:	f007 fb4d 	bl	bc9d4 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b533a:	68bb      	ldr	r3, [r7, #8]
   b533c:	3307      	adds	r3, #7
   b533e:	f023 0307 	bic.w	r3, r3, #7
    }
   b5342:	466e      	mov	r6, sp
        char buffer[data.length()];
   b5344:	ebad 0d03 	sub.w	sp, sp, r3
   b5348:	46ea      	mov	sl, sp
   b534a:	2300      	movs	r3, #0
   b534c:	68b9      	ldr	r1, [r7, #8]
   b534e:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5352:	458b      	cmp	fp, r1
   b5354:	f103 0401 	add.w	r4, r3, #1
   b5358:	d207      	bcs.n	b536a <_Z11XBeeHandlerv+0x5e>
   b535a:	4659      	mov	r1, fp
   b535c:	4638      	mov	r0, r7
   b535e:	f007 fc53 	bl	bcc08 <_ZNK6String6charAtEj>
   b5362:	4623      	mov	r3, r4
   b5364:	f80a 000b 	strb.w	r0, [sl, fp]
   b5368:	e7f0      	b.n	b534c <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b536a:	2901      	cmp	r1, #1
   b536c:	d90a      	bls.n	b5384 <_Z11XBeeHandlerv+0x78>
   b536e:	3901      	subs	r1, #1
   b5370:	4638      	mov	r0, r7
   b5372:	f007 fc49 	bl	bcc08 <_ZNK6String6charAtEj>
   b5376:	280d      	cmp	r0, #13
   b5378:	bf01      	itttt	eq
   b537a:	68bb      	ldreq	r3, [r7, #8]
   b537c:	4453      	addeq	r3, sl
   b537e:	2200      	moveq	r2, #0
   b5380:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,3,true);
   b5384:	2201      	movs	r2, #1
   b5386:	2103      	movs	r1, #3
   b5388:	4650      	mov	r0, sl
   b538a:	f7ff fc57 	bl	b4c3c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b538e:	f007 fdd1 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5392:	4641      	mov	r1, r8
   b5394:	f007 f9d9 	bl	bc74a <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5398:	f007 fdcc 	bl	bcf34 <_Z16_fetch_usbserialv>
   b539c:	6839      	ldr	r1, [r7, #0]
   b539e:	f007 f9d4 	bl	bc74a <_ZN5Print7printlnEPKc>
        if(logMessages){
   b53a2:	f899 3000 	ldrb.w	r3, [r9]
   b53a6:	b1cb      	cbz	r3, b53dc <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b53a8:	7c2b      	ldrb	r3, [r5, #16]
   b53aa:	b92b      	cbnz	r3, b53b8 <_Z11XBeeHandlerv+0xac>
   b53ac:	4911      	ldr	r1, [pc, #68]	; (b53f4 <_Z11XBeeHandlerv+0xe8>)
   b53ae:	4812      	ldr	r0, [pc, #72]	; (b53f8 <_Z11XBeeHandlerv+0xec>)
   b53b0:	f244 2202 	movw	r2, #16898	; 0x4202
   b53b4:	f7ff f842 	bl	b443c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b53b8:	4639      	mov	r1, r7
   b53ba:	f107 0010 	add.w	r0, r7, #16
   b53be:	f007 fbb7 	bl	bcb30 <_ZN6StringC1ERKS_>
   b53c2:	490e      	ldr	r1, [pc, #56]	; (b53fc <_Z11XBeeHandlerv+0xf0>)
   b53c4:	f107 0210 	add.w	r2, r7, #16
   b53c8:	4628      	mov	r0, r5
   b53ca:	f7fe ffa7 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b53ce:	f107 0010 	add.w	r0, r7, #16
   b53d2:	f007 fb17 	bl	bca04 <_ZN6StringD1Ev>
            logFile.close();
   b53d6:	4808      	ldr	r0, [pc, #32]	; (b53f8 <_Z11XBeeHandlerv+0xec>)
   b53d8:	f001 fb38 	bl	b6a4c <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b53dc:	4638      	mov	r0, r7
   b53de:	f007 fb11 	bl	bca04 <_ZN6StringD1Ev>
   b53e2:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b53e4:	e79b      	b.n	b531e <_Z11XBeeHandlerv+0x12>
}
   b53e6:	3724      	adds	r7, #36	; 0x24
   b53e8:	46bd      	mov	sp, r7
   b53ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b53ee:	bf00      	nop
   b53f0:	2003ddc0 	.word	0x2003ddc0
   b53f4:	2003dd68 	.word	0x2003dd68
   b53f8:	2003ddd0 	.word	0x2003ddd0
   b53fc:	000c0629 	.word	0x000c0629
   b5400:	000c0617 	.word	0x000c0617
   b5404:	2003ddf4 	.word	0x2003ddf4

000b5408 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b540c:	4d1e      	ldr	r5, [pc, #120]	; (b5488 <_Z11WaterBotSimh+0x80>)
        WaterBots.push_back(simBot);
   b540e:	f8df a078 	ldr.w	sl, [pc, #120]	; b5488 <_Z11WaterBotSimh+0x80>
   b5412:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5416:	1a9b      	subs	r3, r3, r2
   b5418:	4a1c      	ldr	r2, [pc, #112]	; (b548c <_Z11WaterBotSimh+0x84>)
   b541a:	109b      	asrs	r3, r3, #2
   b541c:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b541e:	b2dc      	uxtb	r4, r3
   b5420:	4403      	add	r3, r0
   b5422:	2b0a      	cmp	r3, #10
   b5424:	bf84      	itt	hi
   b5426:	f1c4 000a 	rsbhi	r0, r4, #10
   b542a:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b542c:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b542e:	b08e      	sub	sp, #56	; 0x38
    uint8_t botloop = count+WaterBots.size();
   b5430:	b2c4      	uxtb	r4, r0
   b5432:	2700      	movs	r7, #0
        simBot.XBeeAvail = true;
   b5434:	f04f 0901 	mov.w	r9, #1
   b5438:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b543c:	4544      	cmp	r4, r8
   b543e:	d91f      	bls.n	b5480 <_Z11WaterBotSimh+0x78>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5440:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b5444:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b5446:	4299      	cmp	r1, r3
   b5448:	d005      	beq.n	b5456 <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b544a:	f813 2b34 	ldrb.w	r2, [r3], #52
   b544e:	4542      	cmp	r2, r8
   b5450:	bf08      	it	eq
   b5452:	2601      	moveq	r6, #1
	return *this;
   b5454:	e7f7      	b.n	b5446 <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b5456:	b98e      	cbnz	r6, b547c <_Z11WaterBotSimh+0x74>
        WaterBot simBot;
   b5458:	a801      	add	r0, sp, #4
   b545a:	f7ff f8df 	bl	b461c <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b545e:	2064      	movs	r0, #100	; 0x64
        simBot.botNum = temp;
   b5460:	f88d 8004 	strb.w	r8, [sp, #4]
        simBot.BLEAvail = false;
   b5464:	f8ad 6006 	strh.w	r6, [sp, #6]
        simBot.XBeeAvail = true;
   b5468:	f88d 9008 	strb.w	r9, [sp, #8]
        simBot.battPercent = random(100);
   b546c:	f007 f9c6 	bl	bc7fc <_Z6randomi>
        WaterBots.push_back(simBot);
   b5470:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b5472:	f88d 0005 	strb.w	r0, [sp, #5]
        WaterBots.push_back(simBot);
   b5476:	4650      	mov	r0, sl
   b5478:	f7ff fbc6 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b547c:	3701      	adds	r7, #1
   b547e:	e7db      	b.n	b5438 <_Z11WaterBotSimh+0x30>
}
   b5480:	b00e      	add	sp, #56	; 0x38
   b5482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5486:	bf00      	nop
   b5488:	2003dcb4 	.word	0x2003dcb4
   b548c:	c4ec4ec5 	.word	0xc4ec4ec5

000b5490 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5494:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5498:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b549a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b549e:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b54a2:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b54a6:	4607      	mov	r7, r0
   b54a8:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b54aa:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b54ae:	d102      	bne.n	b54b6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b54b0:	4820      	ldr	r0, [pc, #128]	; (b5534 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b54b2:	f007 fefc 	bl	bd2ae <_ZSt20__throw_length_errorPKc>
   b54b6:	2c01      	cmp	r4, #1
   b54b8:	4622      	mov	r2, r4
   b54ba:	bf38      	it	cc
   b54bc:	2201      	movcc	r2, #1
   b54be:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b54c0:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b54c4:	d231      	bcs.n	b552a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b54c6:	b394      	cbz	r4, b552e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b54c8:	429c      	cmp	r4, r3
   b54ca:	bf28      	it	cs
   b54cc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b54ce:	00e0      	lsls	r0, r4, #3
   b54d0:	f7fe fde1 	bl	b4096 <_Znwj>
   b54d4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b54d6:	1973      	adds	r3, r6, r5
   b54d8:	bf1c      	itt	ne
   b54da:	e9db 0100 	ldrdne	r0, r1, [fp]
   b54de:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b54e2:	2d00      	cmp	r5, #0
   b54e4:	dd04      	ble.n	b54f0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b54e6:	462a      	mov	r2, r5
   b54e8:	4641      	mov	r1, r8
   b54ea:	4630      	mov	r0, r6
   b54ec:	f008 fdb5 	bl	be05a <memmove>
      ptrdiff_t __count = __last - __first;
   b54f0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b54f4:	3508      	adds	r5, #8
      if (__count > 0)
   b54f6:	f1b9 0f00 	cmp.w	r9, #0
   b54fa:	4435      	add	r5, r6
   b54fc:	dd04      	ble.n	b5508 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b54fe:	464a      	mov	r2, r9
   b5500:	4651      	mov	r1, sl
   b5502:	4628      	mov	r0, r5
   b5504:	f008 fd9b 	bl	be03e <memcpy>
      return __result + __count;
   b5508:	444d      	add	r5, r9
	if (__p)
   b550a:	f1b8 0f00 	cmp.w	r8, #0
   b550e:	d005      	beq.n	b551c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5510:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5512:	4640      	mov	r0, r8
   b5514:	eba1 0108 	sub.w	r1, r1, r8
   b5518:	f7fe fdc1 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b551c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5520:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5524:	60bc      	str	r4, [r7, #8]
    }
   b5526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b552a:	461c      	mov	r4, r3
   b552c:	e7cf      	b.n	b54ce <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b552e:	4626      	mov	r6, r4
   b5530:	e7d1      	b.n	b54d6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5532:	bf00      	nop
   b5534:	000c038f 	.word	0x000c038f

000b5538 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b553c:	b0b3      	sub	sp, #204	; 0xcc
   b553e:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5540:	f004 fdc8 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5544:	4984      	ldr	r1, [pc, #528]	; (b5758 <_Z7BLEScani+0x220>)
   b5546:	2214      	movs	r2, #20
   b5548:	f004 febc 	bl	ba2c4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b554c:	4680      	mov	r8, r0
   b554e:	2800      	cmp	r0, #0
   b5550:	f000 80ff 	beq.w	b5752 <_Z7BLEScani+0x21a>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5554:	f8df b200 	ldr.w	fp, [pc, #512]	; b5758 <_Z7BLEScani+0x220>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5558:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b555a:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b555e:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b5562:	f109 0708 	add.w	r7, r9, #8
   b5566:	a80b      	add	r0, sp, #44	; 0x2c
   b5568:	445f      	add	r7, fp
   b556a:	f004 fa17 	bl	b999c <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b556e:	2201      	movs	r2, #1
   b5570:	a90b      	add	r1, sp, #44	; 0x2c
   b5572:	4638      	mov	r0, r7
   b5574:	f005 fd6e 	bl	bb054 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5578:	4682      	mov	sl, r0
   b557a:	2800      	cmp	r0, #0
   b557c:	d056      	beq.n	b562c <_Z7BLEScani+0xf4>
   b557e:	4977      	ldr	r1, [pc, #476]	; (b575c <_Z7BLEScani+0x224>)
   b5580:	a80b      	add	r0, sp, #44	; 0x2c
   b5582:	f004 fa66 	bl	b9a52 <_ZNK8particle7BleUuideqERKS0_>
   b5586:	4605      	mov	r5, r0
   b5588:	2800      	cmp	r0, #0
   b558a:	d04f      	beq.n	b562c <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b558c:	2208      	movs	r2, #8
   b558e:	a909      	add	r1, sp, #36	; 0x24
   b5590:	4638      	mov	r0, r7
   b5592:	f004 fbbb 	bl	b9d0c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5596:	1cb2      	adds	r2, r6, #2
   b5598:	d153      	bne.n	b5642 <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b559a:	f007 fccb 	bl	bcf34 <_Z16_fetch_usbserialv>
   b559e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b55a2:	9305      	str	r3, [sp, #20]
   b55a4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b55a8:	9304      	str	r3, [sp, #16]
   b55aa:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b55ae:	9303      	str	r3, [sp, #12]
   b55b0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b55b4:	9302      	str	r3, [sp, #8]
   b55b6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
      : _M_current(__i) { }
   b55ba:	4f69      	ldr	r7, [pc, #420]	; (b5760 <_Z7BLEScani+0x228>)
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b55c2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b55c6:	4967      	ldr	r1, [pc, #412]	; (b5764 <_Z7BLEScani+0x22c>)
   b55c8:	9300      	str	r3, [sp, #0]
   b55ca:	f8cd a018 	str.w	sl, [sp, #24]
   b55ce:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b55d2:	f7fe fea3 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b55d6:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b55d8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   b55dc:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b55de:	4293      	cmp	r3, r2
   b55e0:	d005      	beq.n	b55ee <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b55e2:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b55e6:	4288      	cmp	r0, r1
   b55e8:	bf08      	it	eq
   b55ea:	2500      	moveq	r5, #0
	return *this;
   b55ec:	e7f7      	b.n	b55de <_Z7BLEScani+0xa6>
                    if(newBot){
   b55ee:	b1ed      	cbz	r5, b562c <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b55f0:	2224      	movs	r2, #36	; 0x24
   b55f2:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b55f6:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
                        NewBot.rssi = scanResults[ii].rssi();
   b55fa:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b55fe:	9226      	str	r2, [sp, #152]	; 0x98
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5600:	68ba      	ldr	r2, [r7, #8]
   b5602:	4293      	cmp	r3, r2
   b5604:	d017      	beq.n	b5636 <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5606:	b11b      	cbz	r3, b5610 <_Z7BLEScani+0xd8>
   b5608:	e9dd 0125 	ldrd	r0, r1, [sp, #148]	; 0x94
   b560c:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5610:	687b      	ldr	r3, [r7, #4]
   b5612:	3308      	adds	r3, #8
   b5614:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b5616:	f007 fc8d 	bl	bcf34 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b561a:	e9d7 2300 	ldrd	r2, r3, [r7]
   b561e:	1a9b      	subs	r3, r3, r2
   b5620:	4951      	ldr	r1, [pc, #324]	; (b5768 <_Z7BLEScani+0x230>)
   b5622:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b5626:	10db      	asrs	r3, r3, #3
   b5628:	f7fe fe78 	bl	b431c <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b562c:	3401      	adds	r4, #1
   b562e:	b2e4      	uxtb	r4, r4
   b5630:	4544      	cmp	r4, r8
   b5632:	d392      	bcc.n	b555a <_Z7BLEScani+0x22>
   b5634:	e08d      	b.n	b5752 <_Z7BLEScani+0x21a>
	  _M_realloc_insert(end(), __x);
   b5636:	484a      	ldr	r0, [pc, #296]	; (b5760 <_Z7BLEScani+0x228>)
   b5638:	aa25      	add	r2, sp, #148	; 0x94
   b563a:	4619      	mov	r1, r3
   b563c:	f7ff ff28 	bl	b5490 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5640:	e7e9      	b.n	b5616 <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5642:	1c73      	adds	r3, r6, #1
   b5644:	d003      	beq.n	b564e <_Z7BLEScani+0x116>
   b5646:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b564a:	42b3      	cmp	r3, r6
   b564c:	d1ee      	bne.n	b562c <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b564e:	f004 fd41 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5652:	f10d 0894 	add.w	r8, sp, #148	; 0x94
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5656:	4d45      	ldr	r5, [pc, #276]	; (b576c <_Z7BLEScani+0x234>)
   b5658:	4601      	mov	r1, r0
   b565a:	2301      	movs	r3, #1
   b565c:	eb0b 0209 	add.w	r2, fp, r9
   b5660:	4640      	mov	r0, r8
   b5662:	f006 f92f 	bl	bb8c4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5666:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b5668:	9c26      	ldr	r4, [sp, #152]	; 0x98
   b566a:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b566c:	686b      	ldr	r3, [r5, #4]
   b566e:	429c      	cmp	r4, r3
   b5670:	d008      	beq.n	b5684 <_Z7BLEScani+0x14c>
	    if (__tmp != 0)
   b5672:	b114      	cbz	r4, b567a <_Z7BLEScani+0x142>
    { ++_M_use_count; }
   b5674:	6863      	ldr	r3, [r4, #4]
   b5676:	3301      	adds	r3, #1
   b5678:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b567a:	6868      	ldr	r0, [r5, #4]
   b567c:	b108      	cbz	r0, b5682 <_Z7BLEScani+0x14a>
	      _M_pi->_M_release();
   b567e:	f7fe fe99 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5682:	606c      	str	r4, [r5, #4]
   b5684:	4640      	mov	r0, r8
   b5686:	f004 fe94 	bl	ba3b2 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b568a:	4838      	ldr	r0, [pc, #224]	; (b576c <_Z7BLEScani+0x234>)
   b568c:	f004 fc94 	bl	b9fb8 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5690:	4606      	mov	r6, r0
   b5692:	2800      	cmp	r0, #0
   b5694:	d05d      	beq.n	b5752 <_Z7BLEScani+0x21a>
                        meshPair = false;
   b5696:	4b36      	ldr	r3, [pc, #216]	; (b5770 <_Z7BLEScani+0x238>)
      : _M_current(__i) { }
   b5698:	f8df 9100 	ldr.w	r9, [pc, #256]	; b579c <_Z7BLEScani+0x264>
   b569c:	2200      	movs	r2, #0
   b569e:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b56a0:	4b34      	ldr	r3, [pc, #208]	; (b5774 <_Z7BLEScani+0x23c>)
   b56a2:	f04f 0a01 	mov.w	sl, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b56a6:	221f      	movs	r2, #31
   b56a8:	a910      	add	r1, sp, #64	; 0x40
   b56aa:	4638      	mov	r0, r7
                        startConnect = true;
   b56ac:	f883 a000 	strb.w	sl, [r3]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b56b0:	f004 fb2c 	bl	b9d0c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b56b4:	4a30      	ldr	r2, [pc, #192]	; (b5778 <_Z7BLEScani+0x240>)
   b56b6:	4931      	ldr	r1, [pc, #196]	; (b577c <_Z7BLEScani+0x244>)
   b56b8:	482c      	ldr	r0, [pc, #176]	; (b576c <_Z7BLEScani+0x234>)
   b56ba:	f005 fd97 	bl	bb1ec <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b56be:	4a30      	ldr	r2, [pc, #192]	; (b5780 <_Z7BLEScani+0x248>)
   b56c0:	4930      	ldr	r1, [pc, #192]	; (b5784 <_Z7BLEScani+0x24c>)
   b56c2:	482a      	ldr	r0, [pc, #168]	; (b576c <_Z7BLEScani+0x234>)
   b56c4:	f005 fd92 	bl	bb1ec <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b56c8:	4a2f      	ldr	r2, [pc, #188]	; (b5788 <_Z7BLEScani+0x250>)
   b56ca:	4930      	ldr	r1, [pc, #192]	; (b578c <_Z7BLEScani+0x254>)
   b56cc:	4827      	ldr	r0, [pc, #156]	; (b576c <_Z7BLEScani+0x234>)
   b56ce:	f005 fd8d 	bl	bb1ec <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b56d2:	f007 fc2f 	bl	bcf34 <_Z16_fetch_usbserialv>
   b56d6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b56da:	492d      	ldr	r1, [pc, #180]	; (b5790 <_Z7BLEScani+0x258>)
   b56dc:	f7fe fe1e 	bl	b431c <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b56e0:	a818      	add	r0, sp, #96	; 0x60
   b56e2:	f7fe ff9b 	bl	b461c <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b56e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
                        PairBots.push_back(newWaterbot);
   b56ea:	482a      	ldr	r0, [pc, #168]	; (b5794 <_Z7BLEScani+0x25c>)
                        newWaterbot.BLEAvail = true;
   b56ec:	f88d a062 	strb.w	sl, [sp, #98]	; 0x62
                        PairBots.push_back(newWaterbot);
   b56f0:	a918      	add	r1, sp, #96	; 0x60
                        newWaterbot.botNum = bufName[0];
   b56f2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                        PairBots.push_back(newWaterbot);
   b56f6:	f7ff fa87 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b56fa:	e9d9 7c00 	ldrd	r7, ip, [r9]
                                BLEBot = &w;
   b56fe:	f8df e0a0 	ldr.w	lr, [pc, #160]	; b57a0 <_Z7BLEScani+0x268>
                        for(WaterBot w: WaterBots){
   b5702:	45bc      	cmp	ip, r7
   b5704:	d016      	beq.n	b5734 <_Z7BLEScani+0x1fc>
   b5706:	463d      	mov	r5, r7
   b5708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b570a:	4644      	mov	r4, r8
   b570c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b570e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5716:	682b      	ldr	r3, [r5, #0]
   b5718:	6023      	str	r3, [r4, #0]
                            if(bufName[0] == w.botNum){
   b571a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b571e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   b5722:	429a      	cmp	r2, r3
                                w.BLEAvail = true;
   b5724:	bf02      	ittt	eq
   b5726:	f88d a096 	strbeq.w	sl, [sp, #150]	; 0x96
                                BLEBot = &w;
   b572a:	f8ce 8000 	streq.w	r8, [lr]
                                newBot = false;
   b572e:	2600      	moveq	r6, #0
      operator++() _GLIBCXX_NOEXCEPT
   b5730:	3734      	adds	r7, #52	; 0x34
	return *this;
   b5732:	e7e6      	b.n	b5702 <_Z7BLEScani+0x1ca>
                        if(newBot){
   b5734:	b16e      	cbz	r6, b5752 <_Z7BLEScani+0x21a>
                            Serial.println("Found a new water bot ID");
   b5736:	f007 fbfd 	bl	bcf34 <_Z16_fetch_usbserialv>
   b573a:	4917      	ldr	r1, [pc, #92]	; (b5798 <_Z7BLEScani+0x260>)
   b573c:	f007 f805 	bl	bc74a <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b5740:	4816      	ldr	r0, [pc, #88]	; (b579c <_Z7BLEScani+0x264>)
   b5742:	a918      	add	r1, sp, #96	; 0x60
   b5744:	f7ff fa60 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5748:	f8d9 3004 	ldr.w	r3, [r9, #4]
                            BLEBot = &WaterBots.back();
   b574c:	4a14      	ldr	r2, [pc, #80]	; (b57a0 <_Z7BLEScani+0x268>)
   b574e:	3b34      	subs	r3, #52	; 0x34
   b5750:	6013      	str	r3, [r2, #0]
}
   b5752:	b033      	add	sp, #204	; 0xcc
   b5754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5758:	2003dee0 	.word	0x2003dee0
   b575c:	2003dcc0 	.word	0x2003dcc0
   b5760:	2003dc78 	.word	0x2003dc78
   b5764:	000c064a 	.word	0x000c064a
   b5768:	000c067d 	.word	0x000c067d
   b576c:	2003debc 	.word	0x2003debc
   b5770:	2003ddf6 	.word	0x2003ddf6
   b5774:	2003e634 	.word	0x2003e634
   b5778:	2003dce8 	.word	0x2003dce8
   b577c:	2003ded4 	.word	0x2003ded4
   b5780:	2003dcd4 	.word	0x2003dcd4
   b5784:	2003decc 	.word	0x2003decc
   b5788:	2003dd00 	.word	0x2003dd00
   b578c:	2003dec4 	.word	0x2003dec4
   b5790:	000c068f 	.word	0x000c068f
   b5794:	2003dc98 	.word	0x2003dc98
   b5798:	000c055d 	.word	0x000c055d
   b579c:	2003dcb4 	.word	0x2003dcb4
   b57a0:	2003dc74 	.word	0x2003dc74

000b57a4 <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b57a4:	b530      	push	{r4, r5, lr}
    if (!logDir.open("/")) {
   b57a6:	4938      	ldr	r1, [pc, #224]	; (b5888 <_Z13DataOffloaderh+0xe4>)
void DataOffloader(uint8_t bot_id){
   b57a8:	b087      	sub	sp, #28
   b57aa:	4605      	mov	r5, r0
    if (!logDir.open("/")) {
   b57ac:	2200      	movs	r2, #0
   b57ae:	4837      	ldr	r0, [pc, #220]	; (b588c <_Z13DataOffloaderh+0xe8>)
   b57b0:	f7fe fe44 	bl	b443c <_ZN7FatFile4openEPKci>
   b57b4:	b950      	cbnz	r0, b57cc <_Z13DataOffloaderh+0x28>
        offloadingDone = true;
   b57b6:	4b36      	ldr	r3, [pc, #216]	; (b5890 <_Z13DataOffloaderh+0xec>)
   b57b8:	2201      	movs	r2, #1
   b57ba:	701a      	strb	r2, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b57bc:	f007 fbba 	bl	bcf34 <_Z16_fetch_usbserialv>
   b57c0:	4934      	ldr	r1, [pc, #208]	; (b5894 <_Z13DataOffloaderh+0xf0>)
}
   b57c2:	b007      	add	sp, #28
   b57c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b57c8:	f006 bfbf 	b.w	bc74a <_ZN5Print7printlnEPKc>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b57cc:	4a32      	ldr	r2, [pc, #200]	; (b5898 <_Z13DataOffloaderh+0xf4>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b57ce:	4c33      	ldr	r4, [pc, #204]	; (b589c <_Z13DataOffloaderh+0xf8>)
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b57d0:	462b      	mov	r3, r5
   b57d2:	210a      	movs	r1, #10
   b57d4:	a803      	add	r0, sp, #12
   b57d6:	f003 ff23 	bl	b9620 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b57da:	2300      	movs	r3, #0
   b57dc:	4619      	mov	r1, r3
   b57de:	9300      	str	r3, [sp, #0]
   b57e0:	2201      	movs	r2, #1
   b57e2:	a803      	add	r0, sp, #12
   b57e4:	f7fe ff42 	bl	b466c <_Z8sendDataPKchbbb>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b57e8:	f007 fba4 	bl	bcf34 <_Z16_fetch_usbserialv>
   b57ec:	6823      	ldr	r3, [r4, #0]
   b57ee:	492c      	ldr	r1, [pc, #176]	; (b58a0 <_Z13DataOffloaderh+0xfc>)
   b57f0:	781a      	ldrb	r2, [r3, #0]
   b57f2:	f7fe fd93 	bl	b431c <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b57f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b57fa:	f003 ff51 	bl	b96a0 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b57fe:	6823      	ldr	r3, [r4, #0]
   b5800:	781b      	ldrb	r3, [r3, #0]
   b5802:	42ab      	cmp	r3, r5
   b5804:	d01e      	beq.n	b5844 <_Z13DataOffloaderh+0xa0>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5806:	f007 fb95 	bl	bcf34 <_Z16_fetch_usbserialv>
   b580a:	6822      	ldr	r2, [r4, #0]
   b580c:	4925      	ldr	r1, [pc, #148]	; (b58a4 <_Z13DataOffloaderh+0x100>)
   b580e:	7812      	ldrb	r2, [r2, #0]
   b5810:	462b      	mov	r3, r5
   b5812:	f7fe fd83 	bl	b431c <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b5816:	f004 fc5d 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b581a:	f005 fa79 	bl	bad10 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b581e:	f004 fc59 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5822:	f004 fd04 	bl	ba22e <_ZNK8particle14BleLocalDevice9connectedEv>
   b5826:	b930      	cbnz	r0, b5836 <_Z13DataOffloaderh+0x92>
                BLEScan(OffloadingBot);
   b5828:	4628      	mov	r0, r5
   b582a:	f7ff fe85 	bl	b5538 <_Z7BLEScani>
                delay(50);
   b582e:	2032      	movs	r0, #50	; 0x32
   b5830:	f003 ff36 	bl	b96a0 <delay>
            while(!BLE.connected()){
   b5834:	e7f3      	b.n	b581e <_Z13DataOffloaderh+0x7a>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b5836:	f007 fb7d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b583a:	6823      	ldr	r3, [r4, #0]
   b583c:	491a      	ldr	r1, [pc, #104]	; (b58a8 <_Z13DataOffloaderh+0x104>)
   b583e:	781a      	ldrb	r2, [r3, #0]
   b5840:	f7fe fd6c 	bl	b431c <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b5844:	f007 fb76 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5848:	6823      	ldr	r3, [r4, #0]
   b584a:	4918      	ldr	r1, [pc, #96]	; (b58ac <_Z13DataOffloaderh+0x108>)
   b584c:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b584e:	4d10      	ldr	r5, [pc, #64]	; (b5890 <_Z13DataOffloaderh+0xec>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b5850:	f7fe fd64 	bl	b431c <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b5854:	2300      	movs	r3, #0
   b5856:	702b      	strb	r3, [r5, #0]
        while(!offloadingDone) delay(100);
   b5858:	2064      	movs	r0, #100	; 0x64
   b585a:	f003 ff21 	bl	b96a0 <delay>
   b585e:	782b      	ldrb	r3, [r5, #0]
   b5860:	2b00      	cmp	r3, #0
   b5862:	d0f9      	beq.n	b5858 <_Z13DataOffloaderh+0xb4>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b5864:	f007 fb66 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5868:	6823      	ldr	r3, [r4, #0]
   b586a:	4911      	ldr	r1, [pc, #68]	; (b58b0 <_Z13DataOffloaderh+0x10c>)
   b586c:	781a      	ldrb	r2, [r3, #0]
   b586e:	f7fe fd55 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b5872:	4810      	ldr	r0, [pc, #64]	; (b58b4 <_Z13DataOffloaderh+0x110>)
    if(logDir.isOpen()) logDir.close();
   b5874:	7c03      	ldrb	r3, [r0, #16]
   b5876:	b113      	cbz	r3, b587e <_Z13DataOffloaderh+0xda>
   b5878:	3010      	adds	r0, #16
   b587a:	f001 f8e7 	bl	b6a4c <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b587e:	4b0e      	ldr	r3, [pc, #56]	; (b58b8 <_Z13DataOffloaderh+0x114>)
   b5880:	2200      	movs	r2, #0
   b5882:	701a      	strb	r2, [r3, #0]
}
   b5884:	b007      	add	sp, #28
   b5886:	bd30      	pop	{r4, r5, pc}
   b5888:	000c06a3 	.word	0x000c06a3
   b588c:	2003dd9c 	.word	0x2003dd9c
   b5890:	2003de4a 	.word	0x2003de4a
   b5894:	000c06a5 	.word	0x000c06a5
   b5898:	000c06e6 	.word	0x000c06e6
   b589c:	2003dc74 	.word	0x2003dc74
   b58a0:	000c06ef 	.word	0x000c06ef
   b58a4:	000c071c 	.word	0x000c071c
   b58a8:	000c0755 	.word	0x000c0755
   b58ac:	000c0776 	.word	0x000c0776
   b58b0:	000c0799 	.word	0x000c0799
   b58b4:	2003dd8c 	.word	0x2003dd8c
   b58b8:	2003de4b 	.word	0x2003de4b

000b58bc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b58bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b58c0:	6843      	ldr	r3, [r0, #4]
   b58c2:	f8d0 8000 	ldr.w	r8, [r0]
   b58c6:	9301      	str	r3, [sp, #4]
   b58c8:	eba3 0408 	sub.w	r4, r3, r8
   b58cc:	4b40      	ldr	r3, [pc, #256]	; (b59d0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>)
   b58ce:	10e4      	asrs	r4, r4, #3
   b58d0:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b58d2:	4b40      	ldr	r3, [pc, #256]	; (b59d4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b58d4:	429c      	cmp	r4, r3
   b58d6:	4607      	mov	r7, r0
   b58d8:	4689      	mov	r9, r1
   b58da:	4692      	mov	sl, r2
   b58dc:	d102      	bne.n	b58e4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b58de:	483e      	ldr	r0, [pc, #248]	; (b59d8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b58e0:	f007 fce5 	bl	bd2ae <_ZSt20__throw_length_errorPKc>
   b58e4:	2c01      	cmp	r4, #1
   b58e6:	4622      	mov	r2, r4
   b58e8:	bf38      	it	cc
   b58ea:	2201      	movcc	r2, #1
   b58ec:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b58ee:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b58f2:	d229      	bcs.n	b5948 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b58f4:	b354      	cbz	r4, b594c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b58f6:	429c      	cmp	r4, r3
   b58f8:	bf28      	it	cs
   b58fa:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b58fc:	2018      	movs	r0, #24
   b58fe:	4360      	muls	r0, r4
   b5900:	f7fe fbc9 	bl	b4096 <_Znwj>
   b5904:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5906:	eb16 0c05 	adds.w	ip, r6, r5
   b590a:	bf1f      	itttt	ne
   b590c:	e8ba 000f 	ldmiane.w	sl!, {r0, r1, r2, r3}
   b5910:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b5914:	e9da 0100 	ldrdne	r0, r1, [sl]
   b5918:	e9cc 0100 	strdne	r0, r1, [ip]
   b591c:	46b2      	mov	sl, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b591e:	46c3      	mov	fp, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b5920:	45d9      	cmp	r9, fp
   b5922:	d015      	beq.n	b5950 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b5924:	f1ba 0f00 	cmp.w	sl, #0
   b5928:	d009      	beq.n	b593e <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b592a:	46de      	mov	lr, fp
   b592c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5930:	46d4      	mov	ip, sl
   b5932:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5936:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b593a:	e88c 0003 	stmia.w	ip, {r0, r1}
   b593e:	f10b 0b18 	add.w	fp, fp, #24
   b5942:	f10a 0a18 	add.w	sl, sl, #24
   b5946:	e7eb      	b.n	b5920 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5948:	461c      	mov	r4, r3
   b594a:	e7d7      	b.n	b58fc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b594c:	4626      	mov	r6, r4
   b594e:	e7da      	b.n	b5906 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b5950:	f8df a088 	ldr.w	sl, [pc, #136]	; b59dc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
   b5954:	08ed      	lsrs	r5, r5, #3
   b5956:	fb0a f505 	mul.w	r5, sl, r5
   b595a:	2318      	movs	r3, #24
   b595c:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
   b5960:	435d      	muls	r5, r3
   b5962:	eb08 0b05 	add.w	fp, r8, r5
	      ++__new_finish;
   b5966:	441d      	add	r5, r3
   b5968:	1973      	adds	r3, r6, r5
   b596a:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b596c:	4699      	mov	r9, r3
   b596e:	465d      	mov	r5, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b5970:	9b01      	ldr	r3, [sp, #4]
   b5972:	429d      	cmp	r5, r3
   b5974:	f109 0918 	add.w	r9, r9, #24
   b5978:	d00c      	beq.n	b5994 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
   b597a:	46ae      	mov	lr, r5
   b597c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5980:	f1a9 0c18 	sub.w	ip, r9, #24
   b5984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5988:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b598c:	3518      	adds	r5, #24
   b598e:	e88c 0003 	stmia.w	ip, {r0, r1}
   b5992:	e7ed      	b.n	b5970 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
   b5994:	eba5 050b 	sub.w	r5, r5, fp
   b5998:	08ed      	lsrs	r5, r5, #3
   b599a:	fb0a fa05 	mul.w	sl, sl, r5
   b599e:	9b00      	ldr	r3, [sp, #0]
   b59a0:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
   b59a4:	2518      	movs	r5, #24
   b59a6:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
   b59aa:	f1b8 0f00 	cmp.w	r8, #0
   b59ae:	d005      	beq.n	b59bc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>
		    this->_M_impl._M_end_of_storage - __old_start);
   b59b0:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b59b2:	4640      	mov	r0, r8
   b59b4:	eba1 0108 	sub.w	r1, r1, r8
   b59b8:	f7fe fb71 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b59bc:	2018      	movs	r0, #24
   b59be:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b59c2:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b59c6:	60bc      	str	r4, [r7, #8]
    }
   b59c8:	b003      	add	sp, #12
   b59ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b59ce:	bf00      	nop
   b59d0:	aaaaaaab 	.word	0xaaaaaaab
   b59d4:	05555555 	.word	0x05555555
   b59d8:	000c038f 	.word	0x000c038f
   b59dc:	0aaaaaab 	.word	0x0aaaaaab

000b59e0 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b59e0:	b570      	push	{r4, r5, r6, lr}
   b59e2:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b59e4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b59e8:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b59ea:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b59ec:	d00c      	beq.n	b5a08 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b59ee:	b139      	cbz	r1, b5a00 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x20>
   b59f0:	4615      	mov	r5, r2
   b59f2:	460c      	mov	r4, r1
   b59f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b59fc:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5a00:	6873      	ldr	r3, [r6, #4]
   b5a02:	3318      	adds	r3, #24
   b5a04:	6073      	str	r3, [r6, #4]
      }
   b5a06:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b5a08:	f7ff ff58 	bl	b58bc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b5a0c:	e7fb      	b.n	b5a06 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x26>
	...

000b5a10 <_Z10createMenuv>:
void createMenu(){
   b5a10:	b530      	push	{r4, r5, lr}
   b5a12:	b099      	sub	sp, #100	; 0x64
            strcpy(itemName,itemString);
   b5a14:	4922      	ldr	r1, [pc, #136]	; (b5aa0 <_Z10createMenuv+0x90>)
   b5a16:	f10d 000d 	add.w	r0, sp, #13
   b5a1a:	f008 fbc6 	bl	be1aa <strcpy>
            maxVal = maxV;
   b5a1e:	2401      	movs	r4, #1
            stepSize = inStep;
   b5a20:	f240 1501 	movw	r5, #257	; 0x101
   b5a24:	2307      	movs	r3, #7
            strcpy(itemName,itemString);
   b5a26:	491f      	ldr	r1, [pc, #124]	; (b5aa4 <_Z10createMenuv+0x94>)
            maxVal = maxV;
   b5a28:	f88d 400c 	strb.w	r4, [sp, #12]
            strcpy(itemName,itemString);
   b5a2c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
            stepSize = inStep;
   b5a30:	e9cd 3501 	strd	r3, r5, [sp, #4]
            strcpy(itemName,itemString);
   b5a34:	f008 fbb9 	bl	be1aa <strcpy>
            stepSize = inStep;
   b5a38:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5a3c:	9308      	str	r3, [sp, #32]
            strcpy(itemName,itemString);
   b5a3e:	491a      	ldr	r1, [pc, #104]	; (b5aa8 <_Z10createMenuv+0x98>)
    battStat.MethodPointer = &WaterBot::battPercent;
   b5a40:	9406      	str	r4, [sp, #24]
            maxVal = maxV;
   b5a42:	2364      	movs	r3, #100	; 0x64
            strcpy(itemName,itemString);
   b5a44:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
            maxVal = maxV;
   b5a48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            strcpy(itemName,itemString);
   b5a4c:	f008 fbad 	bl	be1aa <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b5a50:	2308      	movs	r3, #8
            strcpy(itemName,itemString);
   b5a52:	4916      	ldr	r1, [pc, #88]	; (b5aac <_Z10createMenuv+0x9c>)
            maxVal = maxV;
   b5a54:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
            strcpy(itemName,itemString);
   b5a58:	f10d 0055 	add.w	r0, sp, #85	; 0x55
            stepSize = inStep;
   b5a5c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
   b5a60:	9514      	str	r5, [sp, #80]	; 0x50
            maxVal = maxV;
   b5a62:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
            strcpy(itemName,itemString);
   b5a66:	f008 fba0 	bl	be1aa <strcpy>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b5a6a:	2305      	movs	r3, #5
    MenuItems.push_back(dataRecord);
   b5a6c:	4669      	mov	r1, sp
   b5a6e:	4810      	ldr	r0, [pc, #64]	; (b5ab0 <_Z10createMenuv+0xa0>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b5a70:	9312      	str	r3, [sp, #72]	; 0x48
    MenuItems.push_back(dataRecord);
   b5a72:	f7ff ffb5 	bl	b59e0 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b5a76:	a906      	add	r1, sp, #24
   b5a78:	480d      	ldr	r0, [pc, #52]	; (b5ab0 <_Z10createMenuv+0xa0>)
   b5a7a:	f7ff ffb1 	bl	b59e0 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b5a7e:	a90c      	add	r1, sp, #48	; 0x30
   b5a80:	480b      	ldr	r0, [pc, #44]	; (b5ab0 <_Z10createMenuv+0xa0>)
   b5a82:	f7ff ffad 	bl	b59e0 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b5a86:	a912      	add	r1, sp, #72	; 0x48
   b5a88:	4809      	ldr	r0, [pc, #36]	; (b5ab0 <_Z10createMenuv+0xa0>)
   b5a8a:	f7ff ffa9 	bl	b59e0 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b5a8e:	4b09      	ldr	r3, [pc, #36]	; (b5ab4 <_Z10createMenuv+0xa4>)
   b5a90:	4807      	ldr	r0, [pc, #28]	; (b5ab0 <_Z10createMenuv+0xa0>)
   b5a92:	7819      	ldrb	r1, [r3, #0]
   b5a94:	f7fe ffb8 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5a98:	4b07      	ldr	r3, [pc, #28]	; (b5ab8 <_Z10createMenuv+0xa8>)
   b5a9a:	6018      	str	r0, [r3, #0]
}
   b5a9c:	b019      	add	sp, #100	; 0x64
   b5a9e:	bd30      	pop	{r4, r5, pc}
   b5aa0:	000c07c0 	.word	0x000c07c0
   b5aa4:	000c07c7 	.word	0x000c07c7
   b5aa8:	000c07cf 	.word	0x000c07cf
   b5aac:	000c07d7 	.word	0x000c07d7
   b5ab0:	2003dc8c 	.word	0x2003dc8c
   b5ab4:	2003ddf5 	.word	0x2003ddf5
   b5ab8:	2003dca4 	.word	0x2003dca4

000b5abc <setup>:
void setup() {
   b5abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLUP);
   b5ac0:	2102      	movs	r1, #2
void setup() {
   b5ac2:	b090      	sub	sp, #64	; 0x40
    pinMode(E_DPAD,INPUT_PULLUP);
   b5ac4:	201c      	movs	r0, #28
   b5ac6:	f007 fb35 	bl	bd134 <pinMode>
    pinMode(U_DPAD,INPUT_PULLUP);
   b5aca:	2102      	movs	r1, #2
   b5acc:	200e      	movs	r0, #14
   b5ace:	f007 fb31 	bl	bd134 <pinMode>
    pinMode(D_DPAD,INPUT_PULLUP);
   b5ad2:	2102      	movs	r1, #2
   b5ad4:	2007      	movs	r0, #7
   b5ad6:	f007 fb2d 	bl	bd134 <pinMode>
    pinMode(L_DPAD,INPUT_PULLUP);
   b5ada:	2102      	movs	r1, #2
   b5adc:	200f      	movs	r0, #15
   b5ade:	f007 fb29 	bl	bd134 <pinMode>
    pinMode(R_DPAD,INPUT_PULLUP);
   b5ae2:	2102      	movs	r1, #2
   b5ae4:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5ae6:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLUP);
   b5ae8:	f007 fb24 	bl	bd134 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLUP);
   b5aec:	2102      	movs	r1, #2
   b5aee:	201d      	movs	r0, #29
   b5af0:	f007 fb20 	bl	bd134 <pinMode>
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5af4:	496d      	ldr	r1, [pc, #436]	; (b5cac <setup+0x1f0>)
   b5af6:	9400      	str	r4, [sp, #0]
   b5af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5afc:	2202      	movs	r2, #2
   b5afe:	201c      	movs	r0, #28
   b5b00:	f006 fc9e 	bl	bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,FALLING);
   b5b04:	496a      	ldr	r1, [pc, #424]	; (b5cb0 <setup+0x1f4>)
   b5b06:	9400      	str	r4, [sp, #0]
   b5b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b0c:	2202      	movs	r2, #2
   b5b0e:	200e      	movs	r0, #14
   b5b10:	f006 fc96 	bl	bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,FALLING);
   b5b14:	4967      	ldr	r1, [pc, #412]	; (b5cb4 <setup+0x1f8>)
   b5b16:	9400      	str	r4, [sp, #0]
   b5b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b1c:	2202      	movs	r2, #2
   b5b1e:	2007      	movs	r0, #7
   b5b20:	f006 fc8e 	bl	bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,FALLING);
   b5b24:	4964      	ldr	r1, [pc, #400]	; (b5cb8 <setup+0x1fc>)
   b5b26:	9400      	str	r4, [sp, #0]
   b5b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b2c:	2202      	movs	r2, #2
   b5b2e:	200f      	movs	r0, #15
   b5b30:	f006 fc86 	bl	bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,FALLING);
   b5b34:	4961      	ldr	r1, [pc, #388]	; (b5cbc <setup+0x200>)
   b5b36:	9400      	str	r4, [sp, #0]
   b5b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b3c:	2202      	movs	r2, #2
   b5b3e:	2012      	movs	r0, #18
   b5b40:	f006 fc7e 	bl	bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,FALLING);
   b5b44:	2202      	movs	r2, #2
   b5b46:	495e      	ldr	r1, [pc, #376]	; (b5cc0 <setup+0x204>)
   b5b48:	9400      	str	r4, [sp, #0]
   b5b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b4e:	201d      	movs	r0, #29
   b5b50:	f006 fc76 	bl	bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b5b54:	f003 fad0 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b5b58:	4b5a      	ldr	r3, [pc, #360]	; (b5cc4 <setup+0x208>)
    logMessages = true;
   b5b5a:	4f5b      	ldr	r7, [pc, #364]	; (b5cc8 <setup+0x20c>)
    debounceTime = millis();
   b5b5c:	6018      	str	r0, [r3, #0]
    Serial.begin(115200);
   b5b5e:	f007 f9e9 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5b62:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b5b66:	f007 f9d9 	bl	bcf1c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5b6a:	f007 fb77 	bl	bd25c <_Z22__fetch_global_Serial1v>
   b5b6e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5b72:	f007 f97d 	bl	bce70 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b5b76:	f7fe fd61 	bl	b463c <_Z9setupXBeev>
	BLE.on();
   b5b7a:	f004 faab 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b7e:	f004 faf3 	bl	ba168 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b5b82:	f004 faa7 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b86:	2132      	movs	r1, #50	; 0x32
   b5b88:	f004 fb38 	bl	ba1fc <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b5b8c:	f004 faa2 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b90:	2108      	movs	r1, #8
   b5b92:	f004 faf0 	bl	ba176 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b5b96:	4a4d      	ldr	r2, [pc, #308]	; (b5ccc <setup+0x210>)
   b5b98:	494d      	ldr	r1, [pc, #308]	; (b5cd0 <setup+0x214>)
   b5b9a:	4610      	mov	r0, r2
   b5b9c:	f005 fb50 	bl	bb240 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b5ba0:	4a4c      	ldr	r2, [pc, #304]	; (b5cd4 <setup+0x218>)
   b5ba2:	494d      	ldr	r1, [pc, #308]	; (b5cd8 <setup+0x21c>)
   b5ba4:	4610      	mov	r0, r2
   b5ba6:	f005 fb4b 	bl	bb240 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5baa:	4622      	mov	r2, r4
   b5bac:	494b      	ldr	r1, [pc, #300]	; (b5cdc <setup+0x220>)
   b5bae:	484c      	ldr	r0, [pc, #304]	; (b5ce0 <setup+0x224>)
   b5bb0:	e9cd 4400 	strd	r4, r4, [sp]
   b5bb4:	2301      	movs	r3, #1
   b5bb6:	f003 fc93 	bl	b94e0 <spark_subscribe>
    offloadingMode = false;
   b5bba:	4b4a      	ldr	r3, [pc, #296]	; (b5ce4 <setup+0x228>)
   b5bbc:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b5bbe:	4b4a      	ldr	r3, [pc, #296]	; (b5ce8 <setup+0x22c>)
   b5bc0:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b5bc2:	4b4a      	ldr	r3, [pc, #296]	; (b5cec <setup+0x230>)
   b5bc4:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b5bc6:	4b4a      	ldr	r3, [pc, #296]	; (b5cf0 <setup+0x234>)
    logMessages = true;
   b5bc8:	f04f 0901 	mov.w	r9, #1
    statusTimeout = false;
   b5bcc:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b5bce:	f887 9000 	strb.w	r9, [r7]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5bd2:	f007 f8d9 	bl	bcd88 <_ZN9TimeClass5monthEv>
   b5bd6:	9007      	str	r0, [sp, #28]
   b5bd8:	f007 f8ca 	bl	bcd70 <_ZN9TimeClass3dayEv>
   b5bdc:	4605      	mov	r5, r0
   b5bde:	f007 f8db 	bl	bcd98 <_ZN9TimeClass4yearEv>
   b5be2:	4606      	mov	r6, r0
   b5be4:	f007 f8a0 	bl	bcd28 <_ZN9TimeClass4hourEv>
   b5be8:	4680      	mov	r8, r0
   b5bea:	f007 f8a9 	bl	bcd40 <_ZN9TimeClass6minuteEv>
   b5bee:	4682      	mov	sl, r0
   b5bf0:	f007 f8b2 	bl	bcd58 <_ZN9TimeClass6secondEv>
   b5bf4:	9b07      	ldr	r3, [sp, #28]
   b5bf6:	4a3f      	ldr	r2, [pc, #252]	; (b5cf4 <setup+0x238>)
   b5bf8:	9500      	str	r5, [sp, #0]
   b5bfa:	e9cd a003 	strd	sl, r0, [sp, #12]
   b5bfe:	2110      	movs	r1, #16
   b5c00:	e9cd 6801 	strd	r6, r8, [sp, #4]
   b5c04:	a808      	add	r0, sp, #32
   b5c06:	f003 fd0b 	bl	b9620 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b5c0a:	493b      	ldr	r1, [pc, #236]	; (b5cf8 <setup+0x23c>)
   b5c0c:	483b      	ldr	r0, [pc, #236]	; (b5cfc <setup+0x240>)
   b5c0e:	f008 facc 	bl	be1aa <strcpy>
    strcat(filenameMessages,timestamp);
   b5c12:	a908      	add	r1, sp, #32
   b5c14:	4839      	ldr	r0, [pc, #228]	; (b5cfc <setup+0x240>)
   b5c16:	f008 faaf 	bl	be178 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5c1a:	4939      	ldr	r1, [pc, #228]	; (b5d00 <setup+0x244>)
   b5c1c:	4837      	ldr	r0, [pc, #220]	; (b5cfc <setup+0x240>)
   b5c1e:	f008 faab 	bl	be178 <strcat>
    createMenu();
   b5c22:	f7ff fef5 	bl	b5a10 <_Z10createMenuv>
    oled.setup(); 
   b5c26:	4837      	ldr	r0, [pc, #220]	; (b5d04 <setup+0x248>)
   b5c28:	f003 f910 	bl	b8e4c <_ZN16OledWingAdafruit5setupEv>
    oled.clearDisplay();
   b5c2c:	4835      	ldr	r0, [pc, #212]	; (b5d04 <setup+0x248>)
   b5c2e:	f002 fd9b 	bl	b8768 <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.display();
   b5c32:	4834      	ldr	r0, [pc, #208]	; (b5d04 <setup+0x248>)
   b5c34:	f003 f806 	bl	b8c44 <_ZN16Adafruit_SSD13067displayEv>
      dataMode_{dataMode}
   b5c38:	4b33      	ldr	r3, [pc, #204]	; (b5d08 <setup+0x24c>)
   b5c3a:	930c      	str	r3, [sp, #48]	; 0x30
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5c3c:	4833      	ldr	r0, [pc, #204]	; (b5d0c <setup+0x250>)
   b5c3e:	4b34      	ldr	r3, [pc, #208]	; (b5d10 <setup+0x254>)
   b5c40:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   b5c44:	aa0c      	add	r2, sp, #48	; 0x30
   b5c46:	2108      	movs	r1, #8
   b5c48:	930e      	str	r3, [sp, #56]	; 0x38
   b5c4a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
   b5c4e:	f7fe fca7 	bl	b45a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5c52:	4604      	mov	r4, r0
   b5c54:	b928      	cbnz	r0, b5c62 <setup+0x1a6>
        Serial.println("Error: could not connect to SD card!");
   b5c56:	f007 f96d 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5c5a:	492e      	ldr	r1, [pc, #184]	; (b5d14 <setup+0x258>)
   b5c5c:	f006 fd75 	bl	bc74a <_ZN5Print7printlnEPKc>
        logMessages = false;
   b5c60:	703c      	strb	r4, [r7, #0]
    oled.setTextSize(2);
   b5c62:	4c28      	ldr	r4, [pc, #160]	; (b5d04 <setup+0x248>)
   b5c64:	2102      	movs	r1, #2
   b5c66:	4620      	mov	r0, r4
   b5c68:	f002 fc05 	bl	b8476 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5c6c:	2200      	movs	r2, #0
   b5c6e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5c72:	e9c4 2304 	strd	r2, r3, [r4, #16]
    oled.print(" Starting ");
   b5c76:	4928      	ldr	r1, [pc, #160]	; (b5d18 <setup+0x25c>)
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f006 fd53 	bl	bc724 <_ZN5Print5printEPKc>
    oled.display();
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f002 ffe0 	bl	b8c44 <_ZN16Adafruit_SSD13067displayEv>
    delay(3000);
   b5c84:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5c88:	f003 fd0a 	bl	b96a0 <delay>
    at1.start();
   b5c8c:	4823      	ldr	r0, [pc, #140]	; (b5d1c <setup+0x260>)
   b5c8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5c92:	f7fe faf3 	bl	b427c <_ZN5Timer5startEj.isra.0>
    at2.start();
   b5c96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5c9a:	4821      	ldr	r0, [pc, #132]	; (b5d20 <setup+0x264>)
   b5c9c:	f7fe faee 	bl	b427c <_ZN5Timer5startEj.isra.0>
    WaterBotSim(2);
   b5ca0:	2002      	movs	r0, #2
   b5ca2:	f7ff fbb1 	bl	b5408 <_Z11WaterBotSimh>
}
   b5ca6:	b010      	add	sp, #64	; 0x40
   b5ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5cac:	000b41a5 	.word	0x000b41a5
   b5cb0:	000b4a31 	.word	0x000b4a31
   b5cb4:	000b4a89 	.word	0x000b4a89
   b5cb8:	000b47b9 	.word	0x000b47b9
   b5cbc:	000b48dd 	.word	0x000b48dd
   b5cc0:	000b41f9 	.word	0x000b41f9
   b5cc4:	2003dd50 	.word	0x2003dd50
   b5cc8:	2003ddf4 	.word	0x2003ddf4
   b5ccc:	2003ded4 	.word	0x2003ded4
   b5cd0:	000b518d 	.word	0x000b518d
   b5cd4:	2003dec4 	.word	0x2003dec4
   b5cd8:	000b444d 	.word	0x000b444d
   b5cdc:	000b513d 	.word	0x000b513d
   b5ce0:	000c02e0 	.word	0x000c02e0
   b5ce4:	2003de4b 	.word	0x2003de4b
   b5ce8:	2003de4a 	.word	0x2003de4a
   b5cec:	2003dedc 	.word	0x2003dedc
   b5cf0:	2003e635 	.word	0x2003e635
   b5cf4:	000c07de 	.word	0x000c07de
   b5cf8:	000c07f7 	.word	0x000c07f7
   b5cfc:	2003dd68 	.word	0x2003dd68
   b5d00:	000c0800 	.word	0x000c0800
   b5d04:	2003de4c 	.word	0x2003de4c
   b5d08:	000c0974 	.word	0x000c0974
   b5d0c:	2003e1b0 	.word	0x2003e1b0
   b5d10:	007a1200 	.word	0x007a1200
   b5d14:	000c0809 	.word	0x000c0809
   b5d18:	000c082e 	.word	0x000c082e
   b5d1c:	2003dd14 	.word	0x2003dd14
   b5d20:	2003dd30 	.word	0x2003dd30

000b5d24 <_GLOBAL__sub_I_SystemMode>:
   b5d24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b5d26:	4b55      	ldr	r3, [pc, #340]	; (b5e7c <_GLOBAL__sub_I_SystemMode+0x158>)
   b5d28:	4c55      	ldr	r4, [pc, #340]	; (b5e80 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b5d2a:	2201      	movs	r2, #1
   b5d2c:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5d2e:	4b55      	ldr	r3, [pc, #340]	; (b5e84 <_GLOBAL__sub_I_SystemMode+0x160>)
   b5d30:	2200      	movs	r2, #0
   b5d32:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b5d36:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5d3a:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5d3c:	2003      	movs	r0, #3
   b5d3e:	f003 fb7b 	bl	b9438 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b5d42:	4951      	ldr	r1, [pc, #324]	; (b5e88 <_GLOBAL__sub_I_SystemMode+0x164>)
   b5d44:	4851      	ldr	r0, [pc, #324]	; (b5e8c <_GLOBAL__sub_I_SystemMode+0x168>)
   b5d46:	f003 ff03 	bl	b9b50 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b5d4a:	4951      	ldr	r1, [pc, #324]	; (b5e90 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b5d4c:	4851      	ldr	r0, [pc, #324]	; (b5e94 <_GLOBAL__sub_I_SystemMode+0x170>)
   b5d4e:	f003 feff 	bl	b9b50 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b5d52:	4951      	ldr	r1, [pc, #324]	; (b5e98 <_GLOBAL__sub_I_SystemMode+0x174>)
   b5d54:	4851      	ldr	r0, [pc, #324]	; (b5e9c <_GLOBAL__sub_I_SystemMode+0x178>)
   b5d56:	f003 fefb 	bl	b9b50 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b5d5a:	4951      	ldr	r1, [pc, #324]	; (b5ea0 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b5d5c:	4851      	ldr	r0, [pc, #324]	; (b5ea4 <_GLOBAL__sub_I_SystemMode+0x180>)
   b5d5e:	f003 fef7 	bl	b9b50 <_ZN8particle7BleUuidC1EPKc>
   b5d62:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b5d64:	267f      	movs	r6, #127	; 0x7f
   b5d66:	4620      	mov	r0, r4
   b5d68:	f003 fe0d 	bl	b9986 <_ZN8particle10BleAddressC1Ev>
   b5d6c:	f104 0008 	add.w	r0, r4, #8
   b5d70:	f004 fe39 	bl	ba9e6 <_ZN8particle18BleAdvertisingDataC1Ev>
   b5d74:	f104 0014 	add.w	r0, r4, #20
   b5d78:	f004 fe35 	bl	ba9e6 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b5d7c:	3d01      	subs	r5, #1
   b5d7e:	f884 6020 	strb.w	r6, [r4, #32]
   b5d82:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5d86:	d1ee      	bne.n	b5d66 <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5d88:	4847      	ldr	r0, [pc, #284]	; (b5ea8 <_GLOBAL__sub_I_SystemMode+0x184>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5d8a:	4c48      	ldr	r4, [pc, #288]	; (b5eac <_GLOBAL__sub_I_SystemMode+0x188>)
   b5d8c:	f004 f816 	bl	b9dbc <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b5d90:	4847      	ldr	r0, [pc, #284]	; (b5eb0 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b5d92:	f004 f813 	bl	b9dbc <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5d96:	4847      	ldr	r0, [pc, #284]	; (b5eb4 <_GLOBAL__sub_I_SystemMode+0x190>)
   b5d98:	f004 f810 	bl	b9dbc <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b5d9c:	4846      	ldr	r0, [pc, #280]	; (b5eb8 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5d9e:	f004 f8e9 	bl	b9f74 <_ZN8particle13BlePeerDeviceC1Ev>
OledWingAdafruit oled;
   b5da2:	4846      	ldr	r0, [pc, #280]	; (b5ebc <_GLOBAL__sub_I_SystemMode+0x198>)
   b5da4:	2107      	movs	r1, #7
   b5da6:	f003 f823 	bl	b8df0 <_ZN16OledWingAdafruitC1Ei>
   b5daa:	7823      	ldrb	r3, [r4, #0]
   b5dac:	f3bf 8f5b 	dmb	ish
   b5db0:	07db      	lsls	r3, r3, #31
   b5db2:	d40a      	bmi.n	b5dca <_GLOBAL__sub_I_SystemMode+0xa6>
   b5db4:	4620      	mov	r0, r4
   b5db6:	f7fe f981 	bl	b40bc <__cxa_guard_acquire>
   b5dba:	b130      	cbz	r0, b5dca <_GLOBAL__sub_I_SystemMode+0xa6>
   b5dbc:	4840      	ldr	r0, [pc, #256]	; (b5ec0 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5dbe:	2101      	movs	r1, #1
   b5dc0:	f006 fd34 	bl	bc82c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	f7fe f97e 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b5dca:	4b3e      	ldr	r3, [pc, #248]	; (b5ec4 <_GLOBAL__sub_I_SystemMode+0x1a0>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5dcc:	4e3e      	ldr	r6, [pc, #248]	; (b5ec8 <_GLOBAL__sub_I_SystemMode+0x1a4>)
	    _M_manager = &_My_handler::_M_manager;
   b5dce:	4d3f      	ldr	r5, [pc, #252]	; (b5ecc <_GLOBAL__sub_I_SystemMode+0x1a8>)
Timer at1(5000,actionTimer5);
   b5dd0:	483f      	ldr	r0, [pc, #252]	; (b5ed0 <_GLOBAL__sub_I_SystemMode+0x1ac>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5dd2:	9603      	str	r6, [sp, #12]
   b5dd4:	2264      	movs	r2, #100	; 0x64
   b5dd6:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5dda:	4a3e      	ldr	r2, [pc, #248]	; (b5ed4 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b5ddc:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5de0:	2201      	movs	r2, #1
   b5de2:	2400      	movs	r4, #0
   b5de4:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5de8:	4a35      	ldr	r2, [pc, #212]	; (b5ec0 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5dea:	605c      	str	r4, [r3, #4]
   b5dec:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5df0:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b5df4:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5df8:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5dfc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5e00:	4b35      	ldr	r3, [pc, #212]	; (b5ed8 <_GLOBAL__sub_I_SystemMode+0x1b4>)
  File() {}
   b5e02:	4a36      	ldr	r2, [pc, #216]	; (b5edc <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5e04:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5e0a:	6099      	str	r1, [r3, #8]
   b5e0c:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5e0e:	611c      	str	r4, [r3, #16]
   b5e10:	4b33      	ldr	r3, [pc, #204]	; (b5ee0 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5e12:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5e16:	601a      	str	r2, [r3, #0]
   b5e18:	611c      	str	r4, [r3, #16]
   b5e1a:	4b32      	ldr	r3, [pc, #200]	; (b5ee4 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5e1c:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5e20:	601a      	str	r2, [r3, #0]
   b5e22:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5e24:	4b30      	ldr	r3, [pc, #192]	; (b5ee8 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5e26:	e9c3 4400 	strd	r4, r4, [r3]
   b5e2a:	609c      	str	r4, [r3, #8]
   b5e2c:	4b2f      	ldr	r3, [pc, #188]	; (b5eec <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5e2e:	e9c3 4400 	strd	r4, r4, [r3]
   b5e32:	609c      	str	r4, [r3, #8]
   b5e34:	4b2e      	ldr	r3, [pc, #184]	; (b5ef0 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5e36:	e9c3 4400 	strd	r4, r4, [r3]
   b5e3a:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5e3c:	4b2d      	ldr	r3, [pc, #180]	; (b5ef4 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5e3e:	9300      	str	r3, [sp, #0]
   b5e40:	466a      	mov	r2, sp
   b5e42:	4623      	mov	r3, r4
   b5e44:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b5e48:	9502      	str	r5, [sp, #8]
   b5e4a:	f7fe fac7 	bl	b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5e4e:	4668      	mov	r0, sp
   b5e50:	f7fe fa72 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5e54:	4b28      	ldr	r3, [pc, #160]	; (b5ef8 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5e56:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b5e58:	466a      	mov	r2, sp
   b5e5a:	4623      	mov	r3, r4
   b5e5c:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5e60:	4826      	ldr	r0, [pc, #152]	; (b5efc <_GLOBAL__sub_I_SystemMode+0x1d8>)
	    _M_manager = &_My_handler::_M_manager;
   b5e62:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b5e66:	f7fe fab9 	bl	b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5e6a:	4668      	mov	r0, sp
   b5e6c:	f7fe fa64 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   b5e70:	4b23      	ldr	r3, [pc, #140]	; (b5f00 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5e72:	e9c3 4400 	strd	r4, r4, [r3]
   b5e76:	609c      	str	r4, [r3, #8]
   b5e78:	b004      	add	sp, #16
   b5e7a:	bd70      	pop	{r4, r5, r6, pc}
   b5e7c:	2003dcfc 	.word	0x2003dcfc
   b5e80:	2003dee0 	.word	0x2003dee0
   b5e84:	2003dca8 	.word	0x2003dca8
   b5e88:	000c0839 	.word	0x000c0839
   b5e8c:	2003dcc0 	.word	0x2003dcc0
   b5e90:	000c085e 	.word	0x000c085e
   b5e94:	2003dcd4 	.word	0x2003dcd4
   b5e98:	000c0883 	.word	0x000c0883
   b5e9c:	2003dce8 	.word	0x2003dce8
   b5ea0:	000c08a8 	.word	0x000c08a8
   b5ea4:	2003dd00 	.word	0x2003dd00
   b5ea8:	2003ded4 	.word	0x2003ded4
   b5eac:	2003dc68 	.word	0x2003dc68
   b5eb0:	2003decc 	.word	0x2003decc
   b5eb4:	2003dec4 	.word	0x2003dec4
   b5eb8:	2003debc 	.word	0x2003debc
   b5ebc:	2003de4c 	.word	0x2003de4c
   b5ec0:	2003dc6c 	.word	0x2003dc6c
   b5ec4:	2003e1b0 	.word	0x2003e1b0
   b5ec8:	000b4279 	.word	0x000b4279
   b5ecc:	000b4265 	.word	0x000b4265
   b5ed0:	2003dd14 	.word	0x2003dd14
   b5ed4:	000c0974 	.word	0x000c0974
   b5ed8:	2003ddf8 	.word	0x2003ddf8
   b5edc:	000c099c 	.word	0x000c099c
   b5ee0:	2003ddc0 	.word	0x2003ddc0
   b5ee4:	2003dd8c 	.word	0x2003dd8c
   b5ee8:	2003dcb4 	.word	0x2003dcb4
   b5eec:	2003dc98 	.word	0x2003dc98
   b5ef0:	2003dc78 	.word	0x2003dc78
   b5ef4:	000b40e9 	.word	0x000b40e9
   b5ef8:	000b4229 	.word	0x000b4229
   b5efc:	2003dd30 	.word	0x2003dd30
   b5f00:	2003dc8c 	.word	0x2003dc8c

000b5f04 <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b5f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b5f08:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b5f0c:	4c5d      	ldr	r4, [pc, #372]	; (b6084 <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b5f0e:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b5f10:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b5f12:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b5f14:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b5f16:	4690      	mov	r8, r2
   b5f18:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b5f1a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b5f1e:	fa0f f983 	sxth.w	r9, r3
   b5f22:	b236      	sxth	r6, r6
   b5f24:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b5f28:	2f00      	cmp	r7, #0
   b5f2a:	d067      	beq.n	b5ffc <_Z13printMenuItemhbbtt8WaterBot+0xf8>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b5f2c:	2701      	movs	r7, #1
   b5f2e:	2358      	movs	r3, #88	; 0x58
   b5f30:	4620      	mov	r0, r4
   b5f32:	e9cd a700 	strd	sl, r7, [sp]
   b5f36:	9203      	str	r2, [sp, #12]
   b5f38:	f001 ff81 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5f3c:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b5f40:	2102      	movs	r1, #2
   b5f42:	4620      	mov	r0, r4
   b5f44:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5f46:	f04f 0900 	mov.w	r9, #0
   b5f4a:	f002 fa94 	bl	b8476 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b5f4e:	4629      	mov	r1, r5
   b5f50:	484d      	ldr	r0, [pc, #308]	; (b6088 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5f52:	f8c4 9014 	str.w	r9, [r4, #20]
   b5f56:	f7fe fd57 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5f5a:	f100 010d 	add.w	r1, r0, #13
   b5f5e:	4620      	mov	r0, r4
   b5f60:	f006 fbe0 	bl	bc724 <_ZN5Print5printEPKc>
        if(selected){
   b5f64:	9a03      	ldr	r2, [sp, #12]
   b5f66:	f1b8 0f00 	cmp.w	r8, #0
   b5f6a:	d030      	beq.n	b5fce <_Z13printMenuItemhbbtt8WaterBot+0xca>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b5f6c:	237f      	movs	r3, #127	; 0x7f
   b5f6e:	e9cd a700 	strd	sl, r7, [sp]
   b5f72:	2158      	movs	r1, #88	; 0x58
   b5f74:	4620      	mov	r0, r4
   b5f76:	f001 ff62 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5f7a:	2359      	movs	r3, #89	; 0x59
   b5f7c:	8223      	strh	r3, [r4, #16]
   b5f7e:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5f80:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b5f84:	4840      	ldr	r0, [pc, #256]	; (b6088 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5f86:	4629      	mov	r1, r5
   b5f88:	f7fe fd3e 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5f8c:	7a43      	ldrb	r3, [r0, #9]
   b5f8e:	b363      	cbz	r3, b5fea <_Z13printMenuItemhbbtt8WaterBot+0xe6>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b5f90:	6843      	ldr	r3, [r0, #4]
   b5f92:	aa0c      	add	r2, sp, #48	; 0x30
   b5f94:	4413      	add	r3, r2
   b5f96:	791b      	ldrb	r3, [r3, #4]
   b5f98:	b1bb      	cbz	r3, b5fca <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b5f9a:	493c      	ldr	r1, [pc, #240]	; (b608c <_Z13printMenuItemhbbtt8WaterBot+0x188>)
                else oled.printf("Off");
   b5f9c:	4839      	ldr	r0, [pc, #228]	; (b6084 <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b5f9e:	f7fe f984 	bl	b42aa <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b5fa2:	f006 ffc7 	bl	bcf34 <_Z16_fetch_usbserialv>
   b5fa6:	4629      	mov	r1, r5
   b5fa8:	4604      	mov	r4, r0
   b5faa:	4837      	ldr	r0, [pc, #220]	; (b6088 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5fac:	f7fe fd2c 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5fb0:	4937      	ldr	r1, [pc, #220]	; (b6090 <_Z13printMenuItemhbbtt8WaterBot+0x18c>)
   b5fb2:	f100 020d 	add.w	r2, r0, #13
   b5fb6:	4620      	mov	r0, r4
   b5fb8:	f7fe f9b0 	bl	b431c <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b5fbc:	4629      	mov	r1, r5
   b5fbe:	4832      	ldr	r0, [pc, #200]	; (b6088 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5fc0:	f7fe fd22 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b5fc4:	b004      	add	sp, #16
   b5fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b5fca:	4932      	ldr	r1, [pc, #200]	; (b6094 <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b5fcc:	e7e6      	b.n	b5f9c <_Z13printMenuItemhbbtt8WaterBot+0x98>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b5fce:	237f      	movs	r3, #127	; 0x7f
   b5fd0:	e9cd a800 	strd	sl, r8, [sp]
   b5fd4:	2158      	movs	r1, #88	; 0x58
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	f001 ff31 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5fdc:	2359      	movs	r3, #89	; 0x59
   b5fde:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5fe0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5fe4:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5fe6:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b5fe8:	e7cc      	b.n	b5f84 <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b5fea:	6803      	ldr	r3, [r0, #0]
   b5fec:	492a      	ldr	r1, [pc, #168]	; (b6098 <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b5fee:	aa0c      	add	r2, sp, #48	; 0x30
   b5ff0:	4413      	add	r3, r2
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	791a      	ldrb	r2, [r3, #4]
   b5ff6:	f7fe f958 	bl	b42aa <_ZN5Print6printfEPKcz>
   b5ffa:	e7d2      	b.n	b5fa2 <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b5ffc:	2358      	movs	r3, #88	; 0x58
   b5ffe:	4620      	mov	r0, r4
   b6000:	e9cd a700 	strd	sl, r7, [sp]
   b6004:	9203      	str	r2, [sp, #12]
   b6006:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b600a:	f001 ff18 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b600e:	2102      	movs	r1, #2
   b6010:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6012:	f8a4 9010 	strh.w	r9, [r4, #16]
   b6016:	8266      	strh	r6, [r4, #18]
   b6018:	f002 fa2d 	bl	b8476 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b601c:	4629      	mov	r1, r5
   b601e:	481a      	ldr	r0, [pc, #104]	; (b6088 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6020:	f8c4 8014 	str.w	r8, [r4, #20]
   b6024:	f7fe fcf0 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6028:	f100 010d 	add.w	r1, r0, #13
   b602c:	4620      	mov	r0, r4
   b602e:	f006 fb79 	bl	bc724 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b6032:	9a03      	ldr	r2, [sp, #12]
   b6034:	237f      	movs	r3, #127	; 0x7f
   b6036:	2158      	movs	r1, #88	; 0x58
   b6038:	4620      	mov	r0, r4
   b603a:	e9cd a700 	strd	sl, r7, [sp]
   b603e:	f001 fefe 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6042:	2359      	movs	r3, #89	; 0x59
   b6044:	8223      	strh	r3, [r4, #16]
        if(MenuItems.at(id).onOffSetting){
   b6046:	4810      	ldr	r0, [pc, #64]	; (b6088 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b6048:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b604a:	f8c4 8014 	str.w	r8, [r4, #20]
   b604e:	4629      	mov	r1, r5
   b6050:	f7fe fcda 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6054:	7a43      	ldrb	r3, [r0, #9]
   b6056:	b15b      	cbz	r3, b6070 <_Z13printMenuItemhbbtt8WaterBot+0x16c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6058:	6843      	ldr	r3, [r0, #4]
   b605a:	aa0c      	add	r2, sp, #48	; 0x30
   b605c:	4413      	add	r3, r2
   b605e:	791b      	ldrb	r3, [r3, #4]
   b6060:	b123      	cbz	r3, b606c <_Z13printMenuItemhbbtt8WaterBot+0x168>
   b6062:	490a      	ldr	r1, [pc, #40]	; (b608c <_Z13printMenuItemhbbtt8WaterBot+0x188>)
            else oled.printf("Off");
   b6064:	4620      	mov	r0, r4
   b6066:	f7fe f920 	bl	b42aa <_ZN5Print6printfEPKcz>
   b606a:	e7a7      	b.n	b5fbc <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b606c:	4909      	ldr	r1, [pc, #36]	; (b6094 <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b606e:	e7f9      	b.n	b6064 <_Z13printMenuItemhbbtt8WaterBot+0x160>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b6070:	6803      	ldr	r3, [r0, #0]
   b6072:	4909      	ldr	r1, [pc, #36]	; (b6098 <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b6074:	aa0c      	add	r2, sp, #48	; 0x30
   b6076:	4413      	add	r3, r2
   b6078:	4620      	mov	r0, r4
   b607a:	791a      	ldrb	r2, [r3, #4]
   b607c:	f7fe f915 	bl	b42aa <_ZN5Print6printfEPKcz>
   b6080:	e79c      	b.n	b5fbc <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6082:	bf00      	nop
   b6084:	2003de4c 	.word	0x2003de4c
   b6088:	2003dc8c 	.word	0x2003dc8c
   b608c:	000c08cd 	.word	0x000c08cd
   b6090:	000c08d4 	.word	0x000c08d4
   b6094:	000c08d0 	.word	0x000c08d0
   b6098:	000c03d8 	.word	0x000c03d8

000b609c <_Z10updateMenuv>:
void updateMenu(){
   b609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b60a0:	4ba5      	ldr	r3, [pc, #660]	; (b6338 <_Z10updateMenuv+0x29c>)
   b60a2:	781b      	ldrb	r3, [r3, #0]
void updateMenu(){
   b60a4:	b08f      	sub	sp, #60	; 0x3c
    if(redrawMenu){
   b60a6:	2b00      	cmp	r3, #0
   b60a8:	f000 8142 	beq.w	b6330 <_Z10updateMenuv+0x294>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b60ac:	2600      	movs	r6, #0
   b60ae:	230f      	movs	r3, #15
   b60b0:	e9cd 3600 	strd	r3, r6, [sp]
   b60b4:	48a1      	ldr	r0, [pc, #644]	; (b633c <_Z10updateMenuv+0x2a0>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60b6:	f8df 9298 	ldr.w	r9, [pc, #664]	; b6350 <_Z10updateMenuv+0x2b4>
   b60ba:	f8df a2a4 	ldr.w	sl, [pc, #676]	; b6360 <_Z10updateMenuv+0x2c4>
            if(WaterBots.at(i).botNum == botSelect){
   b60be:	f8df b2a4 	ldr.w	fp, [pc, #676]	; b6364 <_Z10updateMenuv+0x2c8>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b60c2:	2380      	movs	r3, #128	; 0x80
   b60c4:	4632      	mov	r2, r6
   b60c6:	4631      	mov	r1, r6
   b60c8:	f001 feb9 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
        uint8_t menuSelect = 0;
   b60cc:	4635      	mov	r5, r6
   b60ce:	e9d9 2300 	ldrd	r2, r3, [r9]
   b60d2:	1a9b      	subs	r3, r3, r2
   b60d4:	109b      	asrs	r3, r3, #2
   b60d6:	b2f7      	uxtb	r7, r6
   b60d8:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b60dc:	429f      	cmp	r7, r3
   b60de:	d248      	bcs.n	b6172 <_Z10updateMenuv+0xd6>
            if(WaterBots.at(i).botNum == botSelect){
   b60e0:	4639      	mov	r1, r7
   b60e2:	4648      	mov	r0, r9
   b60e4:	f7fe fb54 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b60e8:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b60ec:	7801      	ldrb	r1, [r0, #0]
   b60ee:	f89b 3000 	ldrb.w	r3, [fp]
   b60f2:	4c92      	ldr	r4, [pc, #584]	; (b633c <_Z10updateMenuv+0x2a0>)
                oled.setCursor(5+18*i,4);
   b60f4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b60f8:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b60fc:	4299      	cmp	r1, r3
   b60fe:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b6102:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6106:	8222      	strh	r2, [r4, #16]
   b6108:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b610a:	f04f 0101 	mov.w	r1, #1
   b610e:	4620      	mov	r0, r4
            if(WaterBots.at(i).botNum == botSelect){
   b6110:	d117      	bne.n	b6142 <_Z10updateMenuv+0xa6>
                oled.setTextSize(1);
   b6112:	f002 f9b0 	bl	b8476 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6116:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6118:	2201      	movs	r2, #1
   b611a:	6163      	str	r3, [r4, #20]
   b611c:	230e      	movs	r3, #14
   b611e:	e9cd 3200 	strd	r3, r2, [sp]
   b6122:	4641      	mov	r1, r8
   b6124:	4620      	mov	r0, r4
   b6126:	f001 fe8a 	bl	b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b612a:	4639      	mov	r1, r7
   b612c:	4648      	mov	r0, r9
   b612e:	f7fe fb2f 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6132:	4983      	ldr	r1, [pc, #524]	; (b6340 <_Z10updateMenuv+0x2a4>)
   b6134:	7802      	ldrb	r2, [r0, #0]
   b6136:	4620      	mov	r0, r4
   b6138:	f7fe f8b7 	bl	b42aa <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b613c:	3601      	adds	r6, #1
   b613e:	463d      	mov	r5, r7
   b6140:	e7c5      	b.n	b60ce <_Z10updateMenuv+0x32>
                oled.setTextSize(1);
   b6142:	f002 f998 	bl	b8476 <_ZN12Adafruit_GFX11setTextSizeEh>
   b6146:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b614a:	2201      	movs	r2, #1
   b614c:	6163      	str	r3, [r4, #20]
   b614e:	230e      	movs	r3, #14
   b6150:	e9cd 3200 	strd	r3, r2, [sp]
   b6154:	4641      	mov	r1, r8
   b6156:	4620      	mov	r0, r4
   b6158:	f001 fee4 	bl	b7f24 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b615c:	4639      	mov	r1, r7
   b615e:	4648      	mov	r0, r9
   b6160:	f7fe fb16 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6164:	4976      	ldr	r1, [pc, #472]	; (b6340 <_Z10updateMenuv+0x2a4>)
   b6166:	7802      	ldrb	r2, [r0, #0]
   b6168:	4620      	mov	r0, r4
   b616a:	f7fe f89e 	bl	b42aa <_ZN5Print6printfEPKcz>
   b616e:	462f      	mov	r7, r5
   b6170:	e7e4      	b.n	b613c <_Z10updateMenuv+0xa0>
        if(menuItem == 0){
   b6172:	4f74      	ldr	r7, [pc, #464]	; (b6344 <_Z10updateMenuv+0x2a8>)
   b6174:	f897 8000 	ldrb.w	r8, [r7]
   b6178:	f1b8 0f00 	cmp.w	r8, #0
   b617c:	d160      	bne.n	b6240 <_Z10updateMenuv+0x1a4>
   b617e:	4f72      	ldr	r7, [pc, #456]	; (b6348 <_Z10updateMenuv+0x2ac>)
            Serial.println("Menu item 0");
   b6180:	f006 fed8 	bl	bcf34 <_Z16_fetch_usbserialv>
   b6184:	4971      	ldr	r1, [pc, #452]	; (b634c <_Z10updateMenuv+0x2b0>)
   b6186:	f006 fae0 	bl	bc74a <_ZN5Print7printlnEPKc>
            if(MenuItems.size()) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b618a:	e9d7 3200 	ldrd	r3, r2, [r7]
   b618e:	429a      	cmp	r2, r3
   b6190:	d019      	beq.n	b61c6 <_Z10updateMenuv+0x12a>
   b6192:	4629      	mov	r1, r5
   b6194:	486e      	ldr	r0, [pc, #440]	; (b6350 <_Z10updateMenuv+0x2b4>)
   b6196:	f7fe fafb 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b619a:	4b6e      	ldr	r3, [pc, #440]	; (b6354 <_Z10updateMenuv+0x2b8>)
   b619c:	4604      	mov	r4, r0
   b619e:	f893 c000 	ldrb.w	ip, [r3]
   b61a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61a4:	ae01      	add	r6, sp, #4
   b61a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b61b0:	6823      	ldr	r3, [r4, #0]
   b61b2:	6033      	str	r3, [r6, #0]
   b61b4:	2310      	movs	r3, #16
   b61b6:	9300      	str	r3, [sp, #0]
   b61b8:	f08c 0201 	eor.w	r2, ip, #1
   b61bc:	4643      	mov	r3, r8
   b61be:	2101      	movs	r1, #1
   b61c0:	4640      	mov	r0, r8
   b61c2:	f7ff fe9f 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
   b61c6:	e9d7 3600 	ldrd	r3, r6, [r7]
   b61ca:	1af6      	subs	r6, r6, r3
   b61cc:	4b62      	ldr	r3, [pc, #392]	; (b6358 <_Z10updateMenuv+0x2bc>)
                Serial.printlnf("Menu item %d", mi);
   b61ce:	f8df a18c 	ldr.w	sl, [pc, #396]	; b635c <_Z10updateMenuv+0x2c0>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b61d2:	f8df 917c 	ldr.w	r9, [pc, #380]	; b6350 <_Z10updateMenuv+0x2b4>
   b61d6:	f8df b17c 	ldr.w	fp, [pc, #380]	; b6354 <_Z10updateMenuv+0x2b8>
   b61da:	10f6      	asrs	r6, r6, #3
   b61dc:	435e      	muls	r6, r3
            uint8_t loopIter = MenuItems.size();
   b61de:	b2f6      	uxtb	r6, r6
            if(loopIter > 2) loopIter = 2;
   b61e0:	2e02      	cmp	r6, #2
   b61e2:	bf28      	it	cs
   b61e4:	2602      	movcs	r6, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b61e6:	2701      	movs	r7, #1
   b61e8:	42be      	cmp	r6, r7
   b61ea:	f2c0 809b 	blt.w	b6324 <_Z10updateMenuv+0x288>
                Serial.printlnf("Menu item %d", mi);
   b61ee:	f006 fea1 	bl	bcf34 <_Z16_fetch_usbserialv>
   b61f2:	463a      	mov	r2, r7
   b61f4:	4651      	mov	r1, sl
   b61f6:	f7fe f891 	bl	b431c <_ZN5Print8printlnfEPKcz>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b61fa:	4629      	mov	r1, r5
   b61fc:	4648      	mov	r0, r9
   b61fe:	f7fe fac7 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6202:	4604      	mov	r4, r0
   b6204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6206:	f10d 0c04 	add.w	ip, sp, #4
   b620a:	f89b e000 	ldrb.w	lr, [fp]
   b620e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b621a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b621e:	fa5f f887 	uxtb.w	r8, r7
   b6222:	6823      	ldr	r3, [r4, #0]
   b6224:	f8cc 3000 	str.w	r3, [ip]
   b6228:	3701      	adds	r7, #1
   b622a:	013b      	lsls	r3, r7, #4
   b622c:	b29b      	uxth	r3, r3
   b622e:	9300      	str	r3, [sp, #0]
   b6230:	2300      	movs	r3, #0
   b6232:	f08e 0201 	eor.w	r2, lr, #1
   b6236:	4619      	mov	r1, r3
   b6238:	4640      	mov	r0, r8
   b623a:	f7ff fe63 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b623e:	e7d3      	b.n	b61e8 <_Z10updateMenuv+0x14c>
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6240:	f1b8 0f03 	cmp.w	r8, #3
   b6244:	f8df 810c 	ldr.w	r8, [pc, #268]	; b6354 <_Z10updateMenuv+0x2b8>
   b6248:	f040 808e 	bne.w	b6368 <_Z10updateMenuv+0x2cc>
            Serial.printlnf("Menu item %d", menuItem);
   b624c:	f006 fe72 	bl	bcf34 <_Z16_fetch_usbserialv>
   b6250:	783a      	ldrb	r2, [r7, #0]
   b6252:	4942      	ldr	r1, [pc, #264]	; (b635c <_Z10updateMenuv+0x2c0>)
   b6254:	f7fe f862 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6258:	4629      	mov	r1, r5
   b625a:	483d      	ldr	r0, [pc, #244]	; (b6350 <_Z10updateMenuv+0x2b4>)
   b625c:	f897 9000 	ldrb.w	r9, [r7]
   b6260:	f7fe fa96 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6264:	4606      	mov	r6, r0
   b6266:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6268:	ac01      	add	r4, sp, #4
   b626a:	f898 c000 	ldrb.w	ip, [r8]
   b626e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6274:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6278:	6833      	ldr	r3, [r6, #0]
   b627a:	6023      	str	r3, [r4, #0]
   b627c:	2330      	movs	r3, #48	; 0x30
   b627e:	f08c 0201 	eor.w	r2, ip, #1
   b6282:	2101      	movs	r1, #1
   b6284:	4648      	mov	r0, r9
   b6286:	9300      	str	r3, [sp, #0]
   b6288:	2300      	movs	r3, #0
   b628a:	f7ff fe3b 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b628e:	f006 fe51 	bl	bcf34 <_Z16_fetch_usbserialv>
   b6292:	783a      	ldrb	r2, [r7, #0]
   b6294:	4931      	ldr	r1, [pc, #196]	; (b635c <_Z10updateMenuv+0x2c0>)
   b6296:	3a01      	subs	r2, #1
   b6298:	f7fe f840 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b629c:	4629      	mov	r1, r5
   b629e:	482c      	ldr	r0, [pc, #176]	; (b6350 <_Z10updateMenuv+0x2b4>)
   b62a0:	f7fe fa76 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62a4:	4606      	mov	r6, r0
   b62a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b62a8:	f10d 0c04 	add.w	ip, sp, #4
   b62ac:	f897 e000 	ldrb.w	lr, [r7]
   b62b0:	f898 9000 	ldrb.w	r9, [r8]
   b62b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b62b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b62ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b62be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b62c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b62c4:	6833      	ldr	r3, [r6, #0]
   b62c6:	6023      	str	r3, [r4, #0]
   b62c8:	2320      	movs	r3, #32
   b62ca:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b62ce:	9300      	str	r3, [sp, #0]
   b62d0:	2300      	movs	r3, #0
   b62d2:	4619      	mov	r1, r3
   b62d4:	fa5f f08e 	uxtb.w	r0, lr
   b62d8:	f089 0201 	eor.w	r2, r9, #1
   b62dc:	f7ff fe12 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-2);
   b62e0:	f006 fe28 	bl	bcf34 <_Z16_fetch_usbserialv>
   b62e4:	783a      	ldrb	r2, [r7, #0]
   b62e6:	491d      	ldr	r1, [pc, #116]	; (b635c <_Z10updateMenuv+0x2c0>)
   b62e8:	3a02      	subs	r2, #2
   b62ea:	f7fe f817 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b62ee:	4818      	ldr	r0, [pc, #96]	; (b6350 <_Z10updateMenuv+0x2b4>)
   b62f0:	4629      	mov	r1, r5
   b62f2:	f7fe fa4d 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62f6:	783f      	ldrb	r7, [r7, #0]
   b62f8:	f898 c000 	ldrb.w	ip, [r8]
   b62fc:	3f02      	subs	r7, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b62fe:	4605      	mov	r5, r0
   b6300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6302:	ae01      	add	r6, sp, #4
   b6304:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6308:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b630a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b630c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b630e:	682b      	ldr	r3, [r5, #0]
   b6310:	6023      	str	r3, [r4, #0]
   b6312:	2310      	movs	r3, #16
   b6314:	9300      	str	r3, [sp, #0]
   b6316:	2300      	movs	r3, #0
   b6318:	f08c 0201 	eor.w	r2, ip, #1
   b631c:	4619      	mov	r1, r3
   b631e:	b2f8      	uxtb	r0, r7
   b6320:	f7ff fdf0 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b6324:	4805      	ldr	r0, [pc, #20]	; (b633c <_Z10updateMenuv+0x2a0>)
   b6326:	f002 fc8d 	bl	b8c44 <_ZN16Adafruit_SSD13067displayEv>
        redrawMenu = false;
   b632a:	4a03      	ldr	r2, [pc, #12]	; (b6338 <_Z10updateMenuv+0x29c>)
   b632c:	2300      	movs	r3, #0
   b632e:	7013      	strb	r3, [r2, #0]
}
   b6330:	b00f      	add	sp, #60	; 0x3c
   b6332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6336:	bf00      	nop
   b6338:	2003da88 	.word	0x2003da88
   b633c:	2003de4c 	.word	0x2003de4c
   b6340:	000c03d8 	.word	0x000c03d8
   b6344:	2003ddf5 	.word	0x2003ddf5
   b6348:	2003dc8c 	.word	0x2003dc8c
   b634c:	000c0900 	.word	0x000c0900
   b6350:	2003dcb4 	.word	0x2003dcb4
   b6354:	2003da89 	.word	0x2003da89
   b6358:	aaaaaaab 	.word	0xaaaaaaab
   b635c:	000c090c 	.word	0x000c090c
   b6360:	c4ec4ec5 	.word	0xc4ec4ec5
   b6364:	2003dd4d 	.word	0x2003dd4d
            Serial.printlnf("Menu item %d", menuItem+1);
   b6368:	f006 fde4 	bl	bcf34 <_Z16_fetch_usbserialv>
   b636c:	783a      	ldrb	r2, [r7, #0]
   b636e:	492b      	ldr	r1, [pc, #172]	; (b641c <_Z10updateMenuv+0x380>)
   b6370:	3201      	adds	r2, #1
   b6372:	f7fd ffd3 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6376:	4629      	mov	r1, r5
   b6378:	4829      	ldr	r0, [pc, #164]	; (b6420 <_Z10updateMenuv+0x384>)
   b637a:	f7fe fa09 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b637e:	4606      	mov	r6, r0
   b6380:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6382:	ac01      	add	r4, sp, #4
   b6384:	f898 e000 	ldrb.w	lr, [r8]
   b6388:	f897 c000 	ldrb.w	ip, [r7]
   b638c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b638e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6392:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6396:	6833      	ldr	r3, [r6, #0]
   b6398:	6023      	str	r3, [r4, #0]
   b639a:	2330      	movs	r3, #48	; 0x30
   b639c:	f10c 0c01 	add.w	ip, ip, #1
   b63a0:	9300      	str	r3, [sp, #0]
   b63a2:	2300      	movs	r3, #0
   b63a4:	f08e 0201 	eor.w	r2, lr, #1
   b63a8:	4619      	mov	r1, r3
   b63aa:	fa5f f08c 	uxtb.w	r0, ip
   b63ae:	f7ff fda9 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem);
   b63b2:	f006 fdbf 	bl	bcf34 <_Z16_fetch_usbserialv>
   b63b6:	783a      	ldrb	r2, [r7, #0]
   b63b8:	4918      	ldr	r1, [pc, #96]	; (b641c <_Z10updateMenuv+0x380>)
   b63ba:	f7fd ffaf 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b63be:	4629      	mov	r1, r5
   b63c0:	4817      	ldr	r0, [pc, #92]	; (b6420 <_Z10updateMenuv+0x384>)
   b63c2:	f897 9000 	ldrb.w	r9, [r7]
   b63c6:	f7fe f9e3 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b63ca:	4606      	mov	r6, r0
   b63cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63ce:	f10d 0c04 	add.w	ip, sp, #4
   b63d2:	f898 e000 	ldrb.w	lr, [r8]
   b63d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b63da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b63e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b63e6:	6833      	ldr	r3, [r6, #0]
   b63e8:	6023      	str	r3, [r4, #0]
   b63ea:	2320      	movs	r3, #32
   b63ec:	f08e 0201 	eor.w	r2, lr, #1
   b63f0:	2101      	movs	r1, #1
   b63f2:	9300      	str	r3, [sp, #0]
   b63f4:	4648      	mov	r0, r9
   b63f6:	2300      	movs	r3, #0
   b63f8:	f7ff fd84 	bl	b5f04 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b63fc:	f006 fd9a 	bl	bcf34 <_Z16_fetch_usbserialv>
   b6400:	783a      	ldrb	r2, [r7, #0]
   b6402:	4906      	ldr	r1, [pc, #24]	; (b641c <_Z10updateMenuv+0x380>)
   b6404:	3a01      	subs	r2, #1
   b6406:	f7fd ff89 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b640a:	4805      	ldr	r0, [pc, #20]	; (b6420 <_Z10updateMenuv+0x384>)
   b640c:	4629      	mov	r1, r5
   b640e:	f7fe f9bf 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6412:	783f      	ldrb	r7, [r7, #0]
   b6414:	f898 c000 	ldrb.w	ip, [r8]
   b6418:	3f01      	subs	r7, #1
   b641a:	e770      	b.n	b62fe <_Z10updateMenuv+0x262>
   b641c:	000c090c 	.word	0x000c090c
   b6420:	2003dcb4 	.word	0x2003dcb4

000b6424 <loop>:
void loop() {
   b6424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(postStatus){
   b6428:	4d56      	ldr	r5, [pc, #344]	; (b6584 <loop+0x160>)
   b642a:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b642c:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b642e:	b1a3      	cbz	r3, b645a <loop+0x36>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b6430:	4b55      	ldr	r3, [pc, #340]	; (b6588 <loop+0x164>)
   b6432:	681b      	ldr	r3, [r3, #0]
   b6434:	2b00      	cmp	r3, #0
   b6436:	d038      	beq.n	b64aa <loop+0x86>
   b6438:	781a      	ldrb	r2, [r3, #0]
   b643a:	4954      	ldr	r1, [pc, #336]	; (b658c <loop+0x168>)
   b643c:	a802      	add	r0, sp, #8
   b643e:	f003 f8df 	bl	b9600 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b6442:	4c53      	ldr	r4, [pc, #332]	; (b6590 <loop+0x16c>)
   b6444:	7823      	ldrb	r3, [r4, #0]
   b6446:	9300      	str	r3, [sp, #0]
   b6448:	2301      	movs	r3, #1
   b644a:	461a      	mov	r2, r3
   b644c:	2100      	movs	r1, #0
   b644e:	a802      	add	r0, sp, #8
   b6450:	f7fe f90c 	bl	b466c <_Z8sendDataPKchbbb>
        postStatus = false;
   b6454:	2300      	movs	r3, #0
   b6456:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b6458:	7023      	strb	r3, [r4, #0]
    updateMenu();
   b645a:	f7ff fe1f 	bl	b609c <_Z10updateMenuv>
    if(!logMessages) Serial.println("Error, SD Card Not working");
   b645e:	4b4d      	ldr	r3, [pc, #308]	; (b6594 <loop+0x170>)
   b6460:	781b      	ldrb	r3, [r3, #0]
   b6462:	b923      	cbnz	r3, b646e <loop+0x4a>
   b6464:	f006 fd66 	bl	bcf34 <_Z16_fetch_usbserialv>
   b6468:	494b      	ldr	r1, [pc, #300]	; (b6598 <loop+0x174>)
   b646a:	f006 f96e 	bl	bc74a <_ZN5Print7printlnEPKc>
    if(updateControl){
   b646e:	4b4b      	ldr	r3, [pc, #300]	; (b659c <loop+0x178>)
   b6470:	781a      	ldrb	r2, [r3, #0]
   b6472:	2a00      	cmp	r2, #0
   b6474:	d035      	beq.n	b64e2 <loop+0xbe>
   b6476:	4f4a      	ldr	r7, [pc, #296]	; (b65a0 <loop+0x17c>)
        ControlledBot = NULL;
   b6478:	4e43      	ldr	r6, [pc, #268]	; (b6588 <loop+0x164>)
        updateControl = false;
   b647a:	2400      	movs	r4, #0
   b647c:	701c      	strb	r4, [r3, #0]
   b647e:	e9d7 5300 	ldrd	r5, r3, [r7]
   b6482:	1b5d      	subs	r5, r3, r5
   b6484:	4b47      	ldr	r3, [pc, #284]	; (b65a4 <loop+0x180>)
        ControlledBot = NULL;
   b6486:	6034      	str	r4, [r6, #0]
   b6488:	10ad      	asrs	r5, r5, #2
   b648a:	435d      	muls	r5, r3
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b648c:	4b46      	ldr	r3, [pc, #280]	; (b65a8 <loop+0x184>)
   b648e:	f893 8000 	ldrb.w	r8, [r3]
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6492:	b2e1      	uxtb	r1, r4
   b6494:	428d      	cmp	r5, r1
   b6496:	d90d      	bls.n	b64b4 <loop+0x90>
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b6498:	4638      	mov	r0, r7
   b649a:	f7fe f979 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b649e:	7803      	ldrb	r3, [r0, #0]
   b64a0:	4543      	cmp	r3, r8
   b64a2:	bf08      	it	eq
   b64a4:	6030      	streq	r0, [r6, #0]
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b64a6:	3401      	adds	r4, #1
   b64a8:	e7f3      	b.n	b6492 <loop+0x6e>
        else sprintf(statusStr,"CCABspcNB");
   b64aa:	4940      	ldr	r1, [pc, #256]	; (b65ac <loop+0x188>)
   b64ac:	a802      	add	r0, sp, #8
   b64ae:	f007 fe7c 	bl	be1aa <strcpy>
   b64b2:	e7c6      	b.n	b6442 <loop+0x1e>
        if(ControlledBot == NULL) return;
   b64b4:	6832      	ldr	r2, [r6, #0]
   b64b6:	2a00      	cmp	r2, #0
   b64b8:	d061      	beq.n	b657e <loop+0x15a>
        if(ControlledBot->offloading) offloadingMode = true;
   b64ba:	7a13      	ldrb	r3, [r2, #8]
   b64bc:	b113      	cbz	r3, b64c4 <loop+0xa0>
   b64be:	4b3c      	ldr	r3, [pc, #240]	; (b65b0 <loop+0x18c>)
   b64c0:	2101      	movs	r1, #1
   b64c2:	7019      	strb	r1, [r3, #0]
        sprintf(statusStr,"CCB%dcnf%1d",ControlledBot->botNum,int(ControlledBot->dataRecording));
   b64c4:	79d3      	ldrb	r3, [r2, #7]
   b64c6:	493b      	ldr	r1, [pc, #236]	; (b65b4 <loop+0x190>)
   b64c8:	7812      	ldrb	r2, [r2, #0]
   b64ca:	a802      	add	r0, sp, #8
   b64cc:	f003 f898 	bl	b9600 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b64d0:	4b2f      	ldr	r3, [pc, #188]	; (b6590 <loop+0x16c>)
   b64d2:	781b      	ldrb	r3, [r3, #0]
   b64d4:	9300      	str	r3, [sp, #0]
   b64d6:	2301      	movs	r3, #1
   b64d8:	461a      	mov	r2, r3
   b64da:	2100      	movs	r1, #0
   b64dc:	a802      	add	r0, sp, #8
   b64de:	f7fe f8c5 	bl	b466c <_Z8sendDataPKchbbb>
    if (BLE.connected()) {
   b64e2:	f003 fdf7 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b64e6:	f003 fea2 	bl	ba22e <_ZNK8particle14BleLocalDevice9connectedEv>
   b64ea:	2800      	cmp	r0, #0
   b64ec:	d037      	beq.n	b655e <loop+0x13a>
        if(!digitalRead(D_DPAD)) sendData("CCB1req",0,true,false,false);//offloadingMode = true;
   b64ee:	2007      	movs	r0, #7
   b64f0:	f006 fe4a 	bl	bd188 <digitalRead>
   b64f4:	4603      	mov	r3, r0
   b64f6:	b928      	cbnz	r0, b6504 <loop+0xe0>
   b64f8:	9000      	str	r0, [sp, #0]
   b64fa:	4601      	mov	r1, r0
   b64fc:	2201      	movs	r2, #1
   b64fe:	482e      	ldr	r0, [pc, #184]	; (b65b8 <loop+0x194>)
   b6500:	f7fe f8b4 	bl	b466c <_Z8sendDataPKchbbb>
      : _M_current(__i) { }
   b6504:	4b26      	ldr	r3, [pc, #152]	; (b65a0 <loop+0x17c>)
        for(WaterBot ws: WaterBots) Serial.printlnf("Temp: %0.6f",ws.temp);
   b6506:	4e2d      	ldr	r6, [pc, #180]	; (b65bc <loop+0x198>)
   b6508:	e9d3 4700 	ldrd	r4, r7, [r3]
   b650c:	42a7      	cmp	r7, r4
   b650e:	d00f      	beq.n	b6530 <loop+0x10c>
   b6510:	f8d4 8020 	ldr.w	r8, [r4, #32]
   b6514:	f006 fd0e 	bl	bcf34 <_Z16_fetch_usbserialv>
   b6518:	4605      	mov	r5, r0
   b651a:	4640      	mov	r0, r8
   b651c:	f007 f9f2 	bl	bd904 <__aeabi_f2d>
   b6520:	4602      	mov	r2, r0
   b6522:	460b      	mov	r3, r1
   b6524:	4628      	mov	r0, r5
   b6526:	4631      	mov	r1, r6
   b6528:	f7fd fef8 	bl	b431c <_ZN5Print8printlnfEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
   b652c:	3434      	adds	r4, #52	; 0x34
	return *this;
   b652e:	e7ed      	b.n	b650c <loop+0xe8>
        delay(250);
   b6530:	20fa      	movs	r0, #250	; 0xfa
   b6532:	f003 f8b5 	bl	b96a0 <delay>
    if(offloadingMode){
   b6536:	4b1e      	ldr	r3, [pc, #120]	; (b65b0 <loop+0x18c>)
   b6538:	781b      	ldrb	r3, [r3, #0]
   b653a:	b13b      	cbz	r3, b654c <loop+0x128>
        DataOffloader(ControlledBot->botNum);
   b653c:	4c12      	ldr	r4, [pc, #72]	; (b6588 <loop+0x164>)
   b653e:	6823      	ldr	r3, [r4, #0]
   b6540:	7818      	ldrb	r0, [r3, #0]
   b6542:	f7ff f92f 	bl	b57a4 <_Z13DataOffloaderh>
        ControlledBot->offloading = false;
   b6546:	6823      	ldr	r3, [r4, #0]
   b6548:	2200      	movs	r2, #0
   b654a:	721a      	strb	r2, [r3, #8]
    XBeeHandler();
   b654c:	f7fe fede 	bl	b530c <_Z11XBeeHandlerv>
    RPiHandler();
   b6550:	f7fe fe64 	bl	b521c <_Z10RPiHandlerv>
}
   b6554:	b00a      	add	sp, #40	; 0x28
   b6556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    XBeeLTEPairSet();
   b655a:	f7fe b8f5 	b.w	b4748 <_Z14XBeeLTEPairSetv>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b655e:	4c18      	ldr	r4, [pc, #96]	; (b65c0 <loop+0x19c>)
   b6560:	f002 fdca 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
   b6564:	6823      	ldr	r3, [r4, #0]
   b6566:	1ac0      	subs	r0, r0, r3
   b6568:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b656c:	d3e3      	bcc.n	b6536 <loop+0x112>
   b656e:	f002 fdc3 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b6572:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b6574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6578:	f7fe ffde 	bl	b5538 <_Z7BLEScani>
   b657c:	e7db      	b.n	b6536 <loop+0x112>
}
   b657e:	b00a      	add	sp, #40	; 0x28
   b6580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6584:	2003dedc 	.word	0x2003dedc
   b6588:	2003dc84 	.word	0x2003dc84
   b658c:	000c0919 	.word	0x000c0919
   b6590:	2003e635 	.word	0x2003e635
   b6594:	2003ddf4 	.word	0x2003ddf4
   b6598:	000c092f 	.word	0x000c092f
   b659c:	2003e636 	.word	0x2003e636
   b65a0:	2003dcb4 	.word	0x2003dcb4
   b65a4:	c4ec4ec5 	.word	0xc4ec4ec5
   b65a8:	2003dd4d 	.word	0x2003dd4d
   b65ac:	000c0925 	.word	0x000c0925
   b65b0:	2003de4b 	.word	0x2003de4b
   b65b4:	000c094a 	.word	0x000c094a
   b65b8:	000c0956 	.word	0x000c0956
   b65bc:	000c095e 	.word	0x000c095e
   b65c0:	2003dd88 	.word	0x2003dd88

000b65c4 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b65c4:	b538      	push	{r3, r4, r5, lr}
   b65c6:	4604      	mov	r4, r0
   b65c8:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b65ca:	2224      	movs	r2, #36	; 0x24
   b65cc:	2100      	movs	r1, #0
   b65ce:	f007 fd5e 	bl	be08e <memset>

  m_vol = vol;
   b65d2:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b65d4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b65d6:	2b10      	cmp	r3, #16
   b65d8:	d003      	beq.n	b65e2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b65da:	2b20      	cmp	r3, #32
   b65dc:	d006      	beq.n	b65ec <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b65de:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b65e0:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b65e2:	2320      	movs	r3, #32
  m_flags = F_READ;
   b65e4:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b65e6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b65e8:	70a0      	strb	r0, [r4, #2]
  return true;
   b65ea:	e7f9      	b.n	b65e0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b65ec:	2340      	movs	r3, #64	; 0x40
   b65ee:	e7f9      	b.n	b65e4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b65f0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b65f0:	b510      	push	{r4, lr}
   b65f2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b65f4:	3024      	adds	r0, #36	; 0x24
   b65f6:	f000 feeb 	bl	b73d0 <_ZN8FatCache4syncEv>
   b65fa:	b128      	cbz	r0, b6608 <_ZN9FatVolume9cacheSyncEv+0x18>
   b65fc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6604:	f000 bee4 	b.w	b73d0 <_ZN8FatCache4syncEv>
  }
   b6608:	bd10      	pop	{r4, pc}

000b660a <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b660a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b660c:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b660e:	f043 0304 	orr.w	r3, r3, #4
   b6612:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6614:	f100 0210 	add.w	r2, r0, #16
   b6618:	6880      	ldr	r0, [r0, #8]
   b661a:	f000 bf8f 	b.w	b753c <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6620 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6624:	7801      	ldrb	r1, [r0, #0]
   b6626:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b662a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b662c:	d003      	beq.n	b6636 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b662e:	2600      	movs	r6, #0
}
   b6630:	4630      	mov	r0, r6
   b6632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6636:	6942      	ldr	r2, [r0, #20]
   b6638:	4b17      	ldr	r3, [pc, #92]	; (b6698 <_ZN7FatFile13addDirClusterEv+0x78>)
   b663a:	429a      	cmp	r2, r3
   b663c:	d2f7      	bcs.n	b662e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b663e:	f7ff ffe4 	bl	b660a <_ZN7FatFile10addClusterEv>
   b6642:	4606      	mov	r6, r0
   b6644:	2800      	cmp	r0, #0
   b6646:	d0f2      	beq.n	b662e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6648:	6921      	ldr	r1, [r4, #16]
   b664a:	68a0      	ldr	r0, [r4, #8]
   b664c:	f000 ff0b 	bl	b7466 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6650:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6652:	68a0      	ldr	r0, [r4, #8]
   b6654:	2205      	movs	r2, #5
   b6656:	4639      	mov	r1, r7
   b6658:	3024      	adds	r0, #36	; 0x24
   b665a:	f000 fee1 	bl	b7420 <_ZN8FatCache4readEmh>
  if (!pc) {
   b665e:	4680      	mov	r8, r0
   b6660:	2800      	cmp	r0, #0
   b6662:	d0e4      	beq.n	b662e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6664:	4629      	mov	r1, r5
   b6666:	f44f 7200 	mov.w	r2, #512	; 0x200
   b666a:	f007 fd10 	bl	be08e <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b666e:	2501      	movs	r5, #1
   b6670:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6672:	791a      	ldrb	r2, [r3, #4]
   b6674:	42aa      	cmp	r2, r5
   b6676:	d909      	bls.n	b668c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6678:	6818      	ldr	r0, [r3, #0]
   b667a:	4642      	mov	r2, r8
   b667c:	19e9      	adds	r1, r5, r7
   b667e:	f001 fa3c 	bl	b7afa <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6682:	2800      	cmp	r0, #0
   b6684:	d0d3      	beq.n	b662e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6686:	3501      	adds	r5, #1
   b6688:	b2ed      	uxtb	r5, r5
   b668a:	e7f1      	b.n	b6670 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b668c:	6963      	ldr	r3, [r4, #20]
   b668e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6692:	6163      	str	r3, [r4, #20]
  return true;
   b6694:	e7cc      	b.n	b6630 <_ZN7FatFile13addDirClusterEv+0x10>
   b6696:	bf00      	nop
   b6698:	001ffe00 	.word	0x001ffe00

000b669c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b669c:	b510      	push	{r4, lr}
   b669e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b66a0:	6880      	ldr	r0, [r0, #8]
   b66a2:	460a      	mov	r2, r1
   b66a4:	3024      	adds	r0, #36	; 0x24
   b66a6:	69a1      	ldr	r1, [r4, #24]
   b66a8:	f000 feba 	bl	b7420 <_ZN8FatCache4readEmh>
  if (!pc) {
   b66ac:	b120      	cbz	r0, b66b8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b66ae:	88a3      	ldrh	r3, [r4, #4]
   b66b0:	f003 030f 	and.w	r3, r3, #15
   b66b4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b66b8:	bd10      	pop	{r4, pc}

000b66ba <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b66ba:	7803      	ldrb	r3, [r0, #0]
   b66bc:	b90b      	cbnz	r3, b66c2 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b66be:	f7ff bf81 	b.w	b65c4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b66c2:	2000      	movs	r0, #0
   b66c4:	4770      	bx	lr

000b66c6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b66c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b66ca:	7803      	ldrb	r3, [r0, #0]
   b66cc:	4604      	mov	r4, r0
   b66ce:	4688      	mov	r8, r1
   b66d0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b66d2:	2b00      	cmp	r3, #0
   b66d4:	d05d      	beq.n	b6792 <_ZN7FatFile4readEPvj+0xcc>
   b66d6:	7882      	ldrb	r2, [r0, #2]
   b66d8:	07d1      	lsls	r1, r2, #31
   b66da:	d55a      	bpl.n	b6792 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b66dc:	071a      	lsls	r2, r3, #28
   b66de:	d52d      	bpl.n	b673c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b66e0:	69c3      	ldr	r3, [r0, #28]
   b66e2:	6942      	ldr	r2, [r0, #20]
   b66e4:	1a9b      	subs	r3, r3, r2
   b66e6:	429d      	cmp	r5, r3
   b66e8:	bf28      	it	cs
   b66ea:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b66ec:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b66ee:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b66f2:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b66f6:	2e00      	cmp	r6, #0
   b66f8:	f000 808f 	beq.w	b681a <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b66fc:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b66fe:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6700:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6702:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6704:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6708:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b670c:	d51f      	bpl.n	b674e <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b670e:	6a00      	ldr	r0, [r0, #32]
   b6710:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6712:	68a0      	ldr	r0, [r4, #8]
   b6714:	f1ba 0f00 	cmp.w	sl, #0
   b6718:	d142      	bne.n	b67a0 <_ZN7FatFile4readEPvj+0xda>
   b671a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b671e:	d33f      	bcc.n	b67a0 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6720:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6722:	4299      	cmp	r1, r3
   b6724:	d03c      	beq.n	b67a0 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6726:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b672a:	d252      	bcs.n	b67d2 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b672c:	6800      	ldr	r0, [r0, #0]
   b672e:	4642      	mov	r2, r8
   b6730:	f001 f95a 	bl	b79e8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6734:	b368      	cbz	r0, b6792 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6736:	f44f 7700 	mov.w	r7, #512	; 0x200
   b673a:	e044      	b.n	b67c6 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b673c:	069b      	lsls	r3, r3, #26
   b673e:	d5d5      	bpl.n	b66ec <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6740:	6883      	ldr	r3, [r0, #8]
   b6742:	891a      	ldrh	r2, [r3, #8]
   b6744:	6943      	ldr	r3, [r0, #20]
   b6746:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b674a:	b29b      	uxth	r3, r3
   b674c:	e7cb      	b.n	b66e6 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b674e:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6752:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6756:	f1ba 0f00 	cmp.w	sl, #0
   b675a:	d108      	bne.n	b676e <_ZN7FatFile4readEPvj+0xa8>
   b675c:	f1b9 0f00 	cmp.w	r9, #0
   b6760:	d105      	bne.n	b676e <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6762:	b95b      	cbnz	r3, b677c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6764:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6766:	bf4c      	ite	mi
   b6768:	6a03      	ldrmi	r3, [r0, #32]
   b676a:	6a23      	ldrpl	r3, [r4, #32]
   b676c:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b676e:	6921      	ldr	r1, [r4, #16]
   b6770:	68a0      	ldr	r0, [r4, #8]
   b6772:	f000 fe78 	bl	b7466 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6776:	eb09 0100 	add.w	r1, r9, r0
   b677a:	e7ca      	b.n	b6712 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b677c:	6921      	ldr	r1, [r4, #16]
   b677e:	465a      	mov	r2, fp
   b6780:	f000 fe77 	bl	b7472 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6784:	2800      	cmp	r0, #0
   b6786:	db04      	blt.n	b6792 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6788:	d1f1      	bne.n	b676e <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b678a:	7823      	ldrb	r3, [r4, #0]
   b678c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6790:	d143      	bne.n	b681a <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6792:	7863      	ldrb	r3, [r4, #1]
   b6794:	f043 0302 	orr.w	r3, r3, #2
   b6798:	7063      	strb	r3, [r4, #1]
  return -1;
   b679a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b679e:	e03d      	b.n	b681c <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b67a0:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b67a4:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b67a6:	f04f 0200 	mov.w	r2, #0
   b67aa:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b67ae:	bf28      	it	cs
   b67b0:	4637      	movcs	r7, r6
   b67b2:	f000 fe35 	bl	b7420 <_ZN8FatCache4readEmh>
      if (!pc) {
   b67b6:	2800      	cmp	r0, #0
   b67b8:	d0eb      	beq.n	b6792 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b67ba:	eb00 010a 	add.w	r1, r0, sl
   b67be:	463a      	mov	r2, r7
   b67c0:	4640      	mov	r0, r8
   b67c2:	f007 fc3c 	bl	be03e <memcpy>
    m_curPosition += n;
   b67c6:	6963      	ldr	r3, [r4, #20]
   b67c8:	443b      	add	r3, r7
    dst += n;
   b67ca:	44b8      	add	r8, r7
    m_curPosition += n;
   b67cc:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b67ce:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b67d0:	e791      	b.n	b66f6 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b67d2:	7822      	ldrb	r2, [r4, #0]
   b67d4:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b67d6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b67da:	d406      	bmi.n	b67ea <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b67dc:	7902      	ldrb	r2, [r0, #4]
   b67de:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b67e2:	b2d2      	uxtb	r2, r2
   b67e4:	4592      	cmp	sl, r2
   b67e6:	bf28      	it	cs
   b67e8:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b67ea:	4299      	cmp	r1, r3
      n = 512*nb;
   b67ec:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b67f0:	d208      	bcs.n	b6804 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b67f2:	68a0      	ldr	r0, [r4, #8]
   b67f4:	4653      	mov	r3, sl
   b67f6:	6800      	ldr	r0, [r0, #0]
   b67f8:	4642      	mov	r2, r8
   b67fa:	f001 f93d 	bl	b7a78 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b67fe:	2800      	cmp	r0, #0
   b6800:	d1e1      	bne.n	b67c6 <_ZN7FatFile4readEPvj+0x100>
   b6802:	e7c6      	b.n	b6792 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6804:	4453      	add	r3, sl
   b6806:	428b      	cmp	r3, r1
   b6808:	d9f3      	bls.n	b67f2 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b680a:	3024      	adds	r0, #36	; 0x24
   b680c:	9101      	str	r1, [sp, #4]
   b680e:	f000 fddf 	bl	b73d0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6812:	9901      	ldr	r1, [sp, #4]
   b6814:	2800      	cmp	r0, #0
   b6816:	d1ec      	bne.n	b67f2 <_ZN7FatFile4readEPvj+0x12c>
   b6818:	e7bb      	b.n	b6792 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b681a:	1ba8      	subs	r0, r5, r6
}
   b681c:	b003      	add	sp, #12
   b681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6822 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6822:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6824:	2201      	movs	r2, #1
   b6826:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b682a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b682e:	4604      	mov	r4, r0
   b6830:	f7ff ff49 	bl	b66c6 <_ZN7FatFile4readEPvj>
   b6834:	2801      	cmp	r0, #1
   b6836:	bf0a      	itet	eq
   b6838:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b683c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6840:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6844:	b002      	add	sp, #8
   b6846:	bd70      	pop	{r4, r5, r6, pc}

000b6848 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6848:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b684a:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b684c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6850:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6852:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6856:	d000      	beq.n	b685a <_ZN7FatFile12readDirCacheEb+0x12>
   b6858:	b999      	cbnz	r1, b6882 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b685a:	2201      	movs	r2, #1
   b685c:	f10d 0107 	add.w	r1, sp, #7
   b6860:	4620      	mov	r0, r4
   b6862:	f7ff ff30 	bl	b66c6 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6866:	b240      	sxtb	r0, r0
   b6868:	2801      	cmp	r0, #1
   b686a:	d002      	beq.n	b6872 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b686c:	2000      	movs	r0, #0
}
   b686e:	b003      	add	sp, #12
   b6870:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6872:	6963      	ldr	r3, [r4, #20]
   b6874:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6876:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6878:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b687a:	3030      	adds	r0, #48	; 0x30
   b687c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6880:	e7f5      	b.n	b686e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6882:	3320      	adds	r3, #32
   b6884:	e7f7      	b.n	b6876 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6886 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b688a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b688c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b688e:	4604      	mov	r4, r0
   b6890:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6892:	b162      	cbz	r2, b68ae <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6894:	6940      	ldr	r0, [r0, #20]
   b6896:	4288      	cmp	r0, r1
   b6898:	d002      	beq.n	b68a0 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b689a:	b919      	cbnz	r1, b68a4 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b689c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b689e:	6165      	str	r5, [r4, #20]
    return true;
   b68a0:	2001      	movs	r0, #1
   b68a2:	e006      	b.n	b68b2 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b68a4:	0716      	lsls	r6, r2, #28
   b68a6:	d506      	bpl.n	b68b6 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b68a8:	69e3      	ldr	r3, [r4, #28]
   b68aa:	428b      	cmp	r3, r1
   b68ac:	d20b      	bcs.n	b68c6 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b68ae:	6127      	str	r7, [r4, #16]
  return false;
   b68b0:	2000      	movs	r0, #0
}
   b68b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b68b6:	0691      	lsls	r1, r2, #26
   b68b8:	d505      	bpl.n	b68c6 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b68ba:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b68bc:	891b      	ldrh	r3, [r3, #8]
   b68be:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b68c2:	d9ec      	bls.n	b689e <_ZN7FatFile7seekSetEm+0x18>
   b68c4:	e7f3      	b.n	b68ae <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b68c6:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b68ca:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b68ce:	1e43      	subs	r3, r0, #1
   b68d0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b68d4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b68d6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b68d8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b68da:	42b3      	cmp	r3, r6
   b68dc:	d800      	bhi.n	b68e0 <_ZN7FatFile7seekSetEm+0x5a>
   b68de:	b998      	cbnz	r0, b6908 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b68e0:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b68e2:	bf4c      	ite	mi
   b68e4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b68e8:	6a23      	ldrpl	r3, [r4, #32]
   b68ea:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b68ec:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b68f0:	2e00      	cmp	r6, #0
   b68f2:	d0d4      	beq.n	b689e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b68f4:	6921      	ldr	r1, [r4, #16]
   b68f6:	68a0      	ldr	r0, [r4, #8]
   b68f8:	4642      	mov	r2, r8
   b68fa:	f000 fdba 	bl	b7472 <_ZN9FatVolume6fatGetEmPm>
   b68fe:	2800      	cmp	r0, #0
   b6900:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6904:	dcf4      	bgt.n	b68f0 <_ZN7FatFile7seekSetEm+0x6a>
   b6906:	e7d2      	b.n	b68ae <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6908:	1af6      	subs	r6, r6, r3
   b690a:	e7ef      	b.n	b68ec <_ZN7FatFile7seekSetEm+0x66>

000b690c <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b690e:	460f      	mov	r7, r1
   b6910:	4604      	mov	r4, r0
   b6912:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6914:	2100      	movs	r1, #0
   b6916:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6918:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b691a:	f007 fbb8 	bl	be08e <memset>
  m_vol = dirFile->m_vol;
   b691e:	68b8      	ldr	r0, [r7, #8]
   b6920:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6922:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6924:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6928:	6a3b      	ldr	r3, [r7, #32]
   b692a:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b692c:	016a      	lsls	r2, r5, #5
   b692e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6932:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6936:	071f      	lsls	r7, r3, #28
   b6938:	d444      	bmi.n	b69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b693a:	f003 0317 	and.w	r3, r3, #23
   b693e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6940:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6944:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6948:	bf04      	itt	eq
   b694a:	f043 0308 	orreq.w	r3, r3, #8
   b694e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6950:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6954:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6956:	f006 0303 	and.w	r3, r6, #3
   b695a:	2b01      	cmp	r3, #1
   b695c:	d02c      	beq.n	b69b8 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b695e:	2b02      	cmp	r3, #2
   b6960:	d028      	beq.n	b69b4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6962:	bb7b      	cbnz	r3, b69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6964:	0571      	lsls	r1, r6, #21
   b6966:	d42d      	bmi.n	b69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6968:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b696a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b696c:	78a1      	ldrb	r1, [r4, #2]
   b696e:	078b      	lsls	r3, r1, #30
   b6970:	d504      	bpl.n	b697c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6972:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6974:	06df      	lsls	r7, r3, #27
   b6976:	d425      	bmi.n	b69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6978:	07dd      	lsls	r5, r3, #31
   b697a:	d423      	bmi.n	b69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b697c:	11b3      	asrs	r3, r6, #6
   b697e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6982:	f006 0508 	and.w	r5, r6, #8
   b6986:	432b      	orrs	r3, r5
   b6988:	430b      	orrs	r3, r1
   b698a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b698c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b698e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6990:	1883      	adds	r3, r0, r2
   b6992:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6996:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b699a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b699e:	0572      	lsls	r2, r6, #21
   b69a0:	d513      	bpl.n	b69ca <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b69a2:	b959      	cbnz	r1, b69bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b69a4:	78a3      	ldrb	r3, [r4, #2]
   b69a6:	f043 0304 	orr.w	r3, r3, #4
   b69aa:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b69ac:	0473      	lsls	r3, r6, #17
   b69ae:	d410      	bmi.n	b69d2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b69b0:	2001      	movs	r0, #1
}
   b69b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b69b4:	2303      	movs	r3, #3
   b69b6:	e7d8      	b.n	b696a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b69b8:	2302      	movs	r3, #2
   b69ba:	e7d6      	b.n	b696a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b69bc:	f000 fdf9 	bl	b75b2 <_ZN9FatVolume9freeChainEm>
   b69c0:	2800      	cmp	r0, #0
   b69c2:	d1ef      	bne.n	b69a4 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b69c4:	2000      	movs	r0, #0
   b69c6:	7020      	strb	r0, [r4, #0]
  return false;
   b69c8:	e7f3      	b.n	b69b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b69ca:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b69cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b69ce:	61e3      	str	r3, [r4, #28]
   b69d0:	e7ec      	b.n	b69ac <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b69d2:	69e1      	ldr	r1, [r4, #28]
   b69d4:	4620      	mov	r0, r4
   b69d6:	f7ff ff56 	bl	b6886 <_ZN7FatFile7seekSetEm>
   b69da:	2800      	cmp	r0, #0
   b69dc:	d1e8      	bne.n	b69b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b69de:	e7f1      	b.n	b69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b69e0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b69e0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b69e2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b69e4:	4604      	mov	r4, r0
  if (!isOpen()) {
   b69e6:	b90b      	cbnz	r3, b69ec <_ZN7FatFile4syncEv+0xc>
    return true;
   b69e8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b69ea:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b69ec:	7883      	ldrb	r3, [r0, #2]
   b69ee:	075a      	lsls	r2, r3, #29
   b69f0:	d523      	bpl.n	b6a3a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b69f2:	2101      	movs	r1, #1
   b69f4:	f7ff fe52 	bl	b669c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b69f8:	4605      	mov	r5, r0
   b69fa:	b928      	cbnz	r0, b6a08 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b69fc:	7863      	ldrb	r3, [r4, #1]
   b69fe:	f043 0301 	orr.w	r3, r3, #1
   b6a02:	7063      	strb	r3, [r4, #1]
  return false;
   b6a04:	2000      	movs	r0, #0
   b6a06:	e7f0      	b.n	b69ea <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6a08:	7803      	ldrb	r3, [r0, #0]
   b6a0a:	2be5      	cmp	r3, #229	; 0xe5
   b6a0c:	d0f6      	beq.n	b69fc <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6a0e:	7823      	ldrb	r3, [r4, #0]
   b6a10:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6a12:	bf44      	itt	mi
   b6a14:	69e3      	ldrmi	r3, [r4, #28]
   b6a16:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6a18:	6a23      	ldr	r3, [r4, #32]
   b6a1a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6a1c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6a1e:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6a20:	4b09      	ldr	r3, [pc, #36]	; (b6a48 <_ZN7FatFile4syncEv+0x68>)
   b6a22:	681b      	ldr	r3, [r3, #0]
   b6a24:	b12b      	cbz	r3, b6a32 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6a26:	f100 0116 	add.w	r1, r0, #22
   b6a2a:	3018      	adds	r0, #24
   b6a2c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6a2e:	8b2b      	ldrh	r3, [r5, #24]
   b6a30:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6a32:	78a3      	ldrb	r3, [r4, #2]
   b6a34:	f023 0304 	bic.w	r3, r3, #4
   b6a38:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6a3a:	68a0      	ldr	r0, [r4, #8]
   b6a3c:	f7ff fdd8 	bl	b65f0 <_ZN9FatVolume9cacheSyncEv>
   b6a40:	2800      	cmp	r0, #0
   b6a42:	d0db      	beq.n	b69fc <_ZN7FatFile4syncEv+0x1c>
   b6a44:	e7d0      	b.n	b69e8 <_ZN7FatFile4syncEv+0x8>
   b6a46:	bf00      	nop
   b6a48:	2003e638 	.word	0x2003e638

000b6a4c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6a4c:	b510      	push	{r4, lr}
   b6a4e:	4604      	mov	r4, r0
  bool rtn = sync();
   b6a50:	f7ff ffc6 	bl	b69e0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6a54:	2300      	movs	r3, #0
   b6a56:	7023      	strb	r3, [r4, #0]
}
   b6a58:	bd10      	pop	{r4, pc}

000b6a5a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a5c:	b093      	sub	sp, #76	; 0x4c
   b6a5e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6a60:	2300      	movs	r3, #0
   b6a62:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6a64:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6a66:	9201      	str	r2, [sp, #4]
   b6a68:	4606      	mov	r6, r0
   b6a6a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6a6c:	b113      	cbz	r3, b6a74 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6a6e:	2000      	movs	r0, #0
}
   b6a70:	b013      	add	sp, #76	; 0x4c
   b6a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6a74:	780b      	ldrb	r3, [r1, #0]
   b6a76:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6a7a:	d0f8      	beq.n	b6a6e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6a7c:	7813      	ldrb	r3, [r2, #0]
   b6a7e:	2b2f      	cmp	r3, #47	; 0x2f
   b6a80:	d112      	bne.n	b6aa8 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6a82:	9a01      	ldr	r2, [sp, #4]
   b6a84:	7813      	ldrb	r3, [r2, #0]
   b6a86:	2b2f      	cmp	r3, #47	; 0x2f
   b6a88:	d102      	bne.n	b6a90 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6a8a:	3201      	adds	r2, #1
   b6a8c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6a8e:	e7f8      	b.n	b6a82 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6a90:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6a92:	b91b      	cbnz	r3, b6a9c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6a94:	4630      	mov	r0, r6
   b6a96:	f7ff fe10 	bl	b66ba <_ZN7FatFile8openRootEP9FatVolume>
   b6a9a:	e7e9      	b.n	b6a70 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6a9c:	a809      	add	r0, sp, #36	; 0x24
   b6a9e:	f7ff fd91 	bl	b65c4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6aa2:	2800      	cmp	r0, #0
   b6aa4:	d0e3      	beq.n	b6a6e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6aa6:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6aa8:	9801      	ldr	r0, [sp, #4]
   b6aaa:	aa01      	add	r2, sp, #4
   b6aac:	a903      	add	r1, sp, #12
   b6aae:	f000 f931 	bl	b6d14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6ab2:	2800      	cmp	r0, #0
   b6ab4:	d0db      	beq.n	b6a6e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6ab6:	9b01      	ldr	r3, [sp, #4]
   b6ab8:	781b      	ldrb	r3, [r3, #0]
   b6aba:	b19b      	cbz	r3, b6ae4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6abc:	2300      	movs	r3, #0
   b6abe:	aa03      	add	r2, sp, #12
   b6ac0:	4621      	mov	r1, r4
   b6ac2:	4630      	mov	r0, r6
   b6ac4:	f000 faba 	bl	b703c <_ZN7FatFile4openEPS_P7fname_ti>
   b6ac8:	2800      	cmp	r0, #0
   b6aca:	d0d0      	beq.n	b6a6e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6acc:	4635      	mov	r5, r6
   b6ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ad0:	ac09      	add	r4, sp, #36	; 0x24
   b6ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ad8:	682b      	ldr	r3, [r5, #0]
   b6ada:	6023      	str	r3, [r4, #0]
    close();
   b6adc:	4630      	mov	r0, r6
   b6ade:	f7ff ffb5 	bl	b6a4c <_ZN7FatFile5closeEv>
  while (1) {
   b6ae2:	e7e0      	b.n	b6aa6 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6ae4:	463b      	mov	r3, r7
   b6ae6:	aa03      	add	r2, sp, #12
   b6ae8:	4621      	mov	r1, r4
   b6aea:	4630      	mov	r0, r6
   b6aec:	f000 faa6 	bl	b703c <_ZN7FatFile4openEPS_P7fname_ti>
   b6af0:	e7be      	b.n	b6a70 <_ZN7FatFile4openEPS_PKci+0x16>

000b6af2 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b6af2:	b500      	push	{lr}
   b6af4:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6af6:	2300      	movs	r3, #0
   b6af8:	460a      	mov	r2, r1
   b6afa:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b6afc:	4601      	mov	r1, r0
   b6afe:	2301      	movs	r3, #1
   b6b00:	a801      	add	r0, sp, #4
   b6b02:	f7ff ffaa 	bl	b6a5a <_ZN7FatFile4openEPS_PKci>
   b6b06:	b110      	cbz	r0, b6b0e <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b6b08:	a801      	add	r0, sp, #4
   b6b0a:	f000 f9e1 	bl	b6ed0 <_ZN7FatFile6removeEv>
}
   b6b0e:	b00b      	add	sp, #44	; 0x2c
   b6b10:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b14 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6b18:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6b1a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6b1c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6b1e:	4604      	mov	r4, r0
   b6b20:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6b22:	d55b      	bpl.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
   b6b24:	7883      	ldrb	r3, [r0, #2]
   b6b26:	079a      	lsls	r2, r3, #30
   b6b28:	d558      	bpl.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6b2a:	071b      	lsls	r3, r3, #28
   b6b2c:	d451      	bmi.n	b6bd2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6b2e:	6963      	ldr	r3, [r4, #20]
   b6b30:	43db      	mvns	r3, r3
   b6b32:	42bb      	cmp	r3, r7
   b6b34:	d352      	bcc.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
   b6b36:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6b38:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6b3c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6b3e:	f1b8 0f00 	cmp.w	r8, #0
   b6b42:	f000 8091 	beq.w	b6c68 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6b46:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6b48:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6b4a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6b4e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6b52:	d10e      	bne.n	b6b72 <_ZN7FatFile5writeEPKvj+0x5e>
   b6b54:	b96d      	cbnz	r5, b6b72 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6b56:	6921      	ldr	r1, [r4, #16]
   b6b58:	2900      	cmp	r1, #0
   b6b5a:	d046      	beq.n	b6bea <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6b5c:	4652      	mov	r2, sl
   b6b5e:	f000 fc88 	bl	b7472 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6b62:	2800      	cmp	r0, #0
   b6b64:	db3a      	blt.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6b66:	d104      	bne.n	b6b72 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6b68:	4620      	mov	r0, r4
   b6b6a:	f7ff fd4e 	bl	b660a <_ZN7FatFile10addClusterEv>
   b6b6e:	2800      	cmp	r0, #0
   b6b70:	d034      	beq.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6b72:	6921      	ldr	r1, [r4, #16]
   b6b74:	68a0      	ldr	r0, [r4, #8]
   b6b76:	f000 fc76 	bl	b7466 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6b7a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6b7c:	68a0      	ldr	r0, [r4, #8]
   b6b7e:	b915      	cbnz	r5, b6b86 <_ZN7FatFile5writeEPKvj+0x72>
   b6b80:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6b84:	d23f      	bcs.n	b6c06 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6b86:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6b8a:	4546      	cmp	r6, r8
   b6b8c:	bf28      	it	cs
   b6b8e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6b90:	2d00      	cmp	r5, #0
   b6b92:	d136      	bne.n	b6c02 <_ZN7FatFile5writeEPKvj+0xee>
   b6b94:	6962      	ldr	r2, [r4, #20]
   b6b96:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6b98:	429a      	cmp	r2, r3
   b6b9a:	bf34      	ite	cc
   b6b9c:	2201      	movcc	r2, #1
   b6b9e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6ba0:	3024      	adds	r0, #36	; 0x24
   b6ba2:	f000 fc3d 	bl	b7420 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6ba6:	b1c8      	cbz	r0, b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6ba8:	4428      	add	r0, r5
   b6baa:	4632      	mov	r2, r6
   b6bac:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6bae:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6bb0:	f007 fa45 	bl	be03e <memcpy>
      if (512 == (n + blockOffset)) {
   b6bb4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6bb8:	d104      	bne.n	b6bc4 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6bba:	68a0      	ldr	r0, [r4, #8]
   b6bbc:	3024      	adds	r0, #36	; 0x24
   b6bbe:	f000 fc07 	bl	b73d0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6bc2:	b158      	cbz	r0, b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6bc4:	6963      	ldr	r3, [r4, #20]
   b6bc6:	4433      	add	r3, r6
   b6bc8:	6163      	str	r3, [r4, #20]
    src += n;
   b6bca:	44b1      	add	r9, r6
    nToWrite -= n;
   b6bcc:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6bd0:	e7b4      	b.n	b6b3c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6bd2:	69c1      	ldr	r1, [r0, #28]
   b6bd4:	f7ff fe57 	bl	b6886 <_ZN7FatFile7seekSetEm>
   b6bd8:	2800      	cmp	r0, #0
   b6bda:	d1a8      	bne.n	b6b2e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6bdc:	7863      	ldrb	r3, [r4, #1]
   b6bde:	f043 0301 	orr.w	r3, r3, #1
   b6be2:	7063      	strb	r3, [r4, #1]
  return -1;
   b6be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6be8:	e050      	b.n	b6c8c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6bea:	6a23      	ldr	r3, [r4, #32]
   b6bec:	b93b      	cbnz	r3, b6bfe <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f7ff fd0b 	bl	b660a <_ZN7FatFile10addClusterEv>
   b6bf4:	2800      	cmp	r0, #0
   b6bf6:	d0f1      	beq.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6bf8:	6923      	ldr	r3, [r4, #16]
   b6bfa:	6223      	str	r3, [r4, #32]
   b6bfc:	e7b9      	b.n	b6b72 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6bfe:	6123      	str	r3, [r4, #16]
   b6c00:	e7b7      	b.n	b6b72 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6c02:	2201      	movs	r2, #1
   b6c04:	e7cc      	b.n	b6ba0 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6c06:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6c0a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6c0c:	d31b      	bcc.n	b6c46 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6c0e:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6c12:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6c16:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6c18:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6c1c:	4573      	cmp	r3, lr
   b6c1e:	bf28      	it	cs
   b6c20:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6c22:	4291      	cmp	r1, r2
      n = 512*nb;
   b6c24:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6c28:	d307      	bcc.n	b6c3a <_ZN7FatFile5writeEPKvj+0x126>
   b6c2a:	441a      	add	r2, r3
   b6c2c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6c2e:	bf82      	ittt	hi
   b6c30:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6c34:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6c38:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6c3a:	68a5      	ldr	r5, [r4, #8]
   b6c3c:	464a      	mov	r2, r9
   b6c3e:	6828      	ldr	r0, [r5, #0]
   b6c40:	f000 ffd1 	bl	b7be6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6c44:	e7bd      	b.n	b6bc2 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6c46:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6c48:	bf02      	ittt	eq
   b6c4a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b6c4e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6c52:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6c54:	68a3      	ldr	r3, [r4, #8]
   b6c56:	464a      	mov	r2, r9
   b6c58:	6818      	ldr	r0, [r3, #0]
   b6c5a:	f000 ff4e 	bl	b7afa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6c5e:	2800      	cmp	r0, #0
   b6c60:	d0bc      	beq.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6c62:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6c66:	e7ad      	b.n	b6bc4 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6c68:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6c6a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6c6c:	42b2      	cmp	r2, r6
   b6c6e:	d204      	bcs.n	b6c7a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6c70:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6c72:	f043 0304 	orr.w	r3, r3, #4
   b6c76:	70a3      	strb	r3, [r4, #2]
   b6c78:	e003      	b.n	b6c82 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6c7a:	4a08      	ldr	r2, [pc, #32]	; (b6c9c <_ZN7FatFile5writeEPKvj+0x188>)
   b6c7c:	6812      	ldr	r2, [r2, #0]
   b6c7e:	2a00      	cmp	r2, #0
   b6c80:	d1f7      	bne.n	b6c72 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6c82:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6c86:	2b00      	cmp	r3, #0
   b6c88:	db02      	blt.n	b6c90 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6c8a:	4638      	mov	r0, r7
}
   b6c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6c90:	4620      	mov	r0, r4
   b6c92:	f7ff fea5 	bl	b69e0 <_ZN7FatFile4syncEv>
   b6c96:	2800      	cmp	r0, #0
   b6c98:	d1f7      	bne.n	b6c8a <_ZN7FatFile5writeEPKvj+0x176>
   b6c9a:	e79f      	b.n	b6bdc <_ZN7FatFile5writeEPKvj+0xc8>
   b6c9c:	2003e638 	.word	0x2003e638

000b6ca0 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6ca0:	2904      	cmp	r1, #4
   b6ca2:	d804      	bhi.n	b6cae <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6ca4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6ca8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6cac:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6cae:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6cb0:	bf9b      	ittet	ls
   b6cb2:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6cb6:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6cba:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6cbc:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6cbe:	bf84      	itt	hi
   b6cc0:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6cc4:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6cc6:	4770      	bx	lr

000b6cc8 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6cc8:	1e41      	subs	r1, r0, #1
   b6cca:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6cce:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6cd0:	0842      	lsrs	r2, r0, #1
   b6cd2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6cd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6cda:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6cde:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6ce0:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6ce2:	d1f5      	bne.n	b6cd0 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6ce4:	4770      	bx	lr

000b6ce6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6ce6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6ce8:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6cea:	4604      	mov	r4, r0
   b6cec:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6cee:	b923      	cbnz	r3, b6cfa <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6cf4:	6889      	ldr	r1, [r1, #8]
   b6cf6:	f7ff bce0 	b.w	b66ba <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6cfa:	2224      	movs	r2, #36	; 0x24
   b6cfc:	2100      	movs	r1, #0
   b6cfe:	f007 f9c6 	bl	be08e <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6d02:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6d04:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6d06:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6d08:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6d0a:	68ab      	ldr	r3, [r5, #8]
   b6d0c:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6d0e:	68eb      	ldr	r3, [r5, #12]
   b6d10:	6223      	str	r3, [r4, #32]
}
   b6d12:	bd38      	pop	{r3, r4, r5, pc}

000b6d14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6d18:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6d1a:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6d1e:	2b20      	cmp	r3, #32
   b6d20:	d0fa      	beq.n	b6d18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6d22:	4d6a      	ldr	r5, [pc, #424]	; (b6ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6d24:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6d26:	2400      	movs	r4, #0
    c = path[len];
   b6d28:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6d2a:	b1c3      	cbz	r3, b6d5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6d2c:	2b2f      	cmp	r3, #47	; 0x2f
   b6d2e:	d016      	beq.n	b6d5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6d30:	2b5c      	cmp	r3, #92	; 0x5c
   b6d32:	d102      	bne.n	b6d3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6d34:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6d3a:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6d3e:	b2c0      	uxtb	r0, r0
   b6d40:	281d      	cmp	r0, #29
   b6d42:	d803      	bhi.n	b6d4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6d44:	fa25 f000 	lsr.w	r0, r5, r0
   b6d48:	07c0      	lsls	r0, r0, #31
   b6d4a:	d4f3      	bmi.n	b6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6d4c:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6d50:	283c      	cmp	r0, #60	; 0x3c
   b6d52:	d0ef      	beq.n	b6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6d54:	3b20      	subs	r3, #32
   b6d56:	2b5e      	cmp	r3, #94	; 0x5e
   b6d58:	d8ec      	bhi.n	b6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6d5a:	3401      	adds	r4, #1
    c = path[len];
   b6d5c:	e7e4      	b.n	b6d28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6d5e:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6d60:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6d62:	4607      	mov	r7, r0
   b6d64:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6d68:	2d20      	cmp	r5, #32
   b6d6a:	d0fa      	beq.n	b6d62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6d6c:	2d2f      	cmp	r5, #47	; 0x2f
   b6d6e:	d0f8      	beq.n	b6d62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6d70:	6017      	str	r7, [r2, #0]
  while (len) {
   b6d72:	b14c      	cbz	r4, b6d88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6d74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6d78:	2a2e      	cmp	r2, #46	; 0x2e
   b6d7a:	d001      	beq.n	b6d80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6d7c:	2a20      	cmp	r2, #32
   b6d7e:	d101      	bne.n	b6d84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6d80:	3c01      	subs	r4, #1
  while (len) {
   b6d82:	e7f6      	b.n	b6d72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6d84:	2cff      	cmp	r4, #255	; 0xff
   b6d86:	dcd5      	bgt.n	b6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6d88:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6d8c:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6d90:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6d92:	f8c1 300d 	str.w	r3, [r1, #13]
   b6d96:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6d98:	f04f 0800 	mov.w	r8, #0
   b6d9c:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6da0:	2b2e      	cmp	r3, #46	; 0x2e
   b6da2:	d001      	beq.n	b6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6da4:	2b20      	cmp	r3, #32
   b6da6:	d102      	bne.n	b6dae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6da8:	f108 0801 	add.w	r8, r8, #1
   b6dac:	e7f6      	b.n	b6d9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6dae:	fab8 f088 	clz	r0, r8
   b6db2:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6db4:	1e65      	subs	r5, r4, #1
   b6db6:	1c6b      	adds	r3, r5, #1
   b6db8:	d002      	beq.n	b6dc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6dba:	5d73      	ldrb	r3, [r6, r5]
   b6dbc:	2b2e      	cmp	r3, #46	; 0x2e
   b6dbe:	d114      	bne.n	b6dea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6dc0:	f04f 0900 	mov.w	r9, #0
   b6dc4:	2707      	movs	r7, #7
   b6dc6:	464a      	mov	r2, r9
   b6dc8:	46ca      	mov	sl, r9
   b6dca:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6dce:	45a0      	cmp	r8, r4
   b6dd0:	da68      	bge.n	b6ea4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6dd2:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6dd6:	2b20      	cmp	r3, #32
   b6dd8:	d003      	beq.n	b6de2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6dda:	2b2e      	cmp	r3, #46	; 0x2e
   b6ddc:	d107      	bne.n	b6dee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6dde:	45a8      	cmp	r8, r5
   b6de0:	d012      	beq.n	b6e08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6de2:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6de4:	f108 0801 	add.w	r8, r8, #1
   b6de8:	e7f1      	b.n	b6dce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6dea:	3d01      	subs	r5, #1
   b6dec:	e7e3      	b.n	b6db6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6dee:	2b22      	cmp	r3, #34	; 0x22
   b6df0:	d008      	beq.n	b6e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6df2:	2b7c      	cmp	r3, #124	; 0x7c
   b6df4:	d006      	beq.n	b6e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6df6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6dfa:	f1bc 0f05 	cmp.w	ip, #5
   b6dfe:	d80a      	bhi.n	b6e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6e00:	2b2d      	cmp	r3, #45	; 0x2d
   b6e02:	d012      	beq.n	b6e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6e04:	45a8      	cmp	r8, r5
   b6e06:	d15b      	bne.n	b6ec0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6e08:	2f0a      	cmp	r7, #10
   b6e0a:	d04a      	beq.n	b6ea2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6e0c:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6e0e:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6e10:	f04f 0e10 	mov.w	lr, #16
   b6e14:	e7e6      	b.n	b6de4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6e16:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6e1a:	f1bc 0f05 	cmp.w	ip, #5
   b6e1e:	d9f1      	bls.n	b6e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6e20:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6e24:	f1bc 0f02 	cmp.w	ip, #2
   b6e28:	d9ec      	bls.n	b6e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6e2a:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6e2e:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6e32:	d8e7      	bhi.n	b6e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6e34:	45a8      	cmp	r8, r5
   b6e36:	d0e7      	beq.n	b6e08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6e38:	42ba      	cmp	r2, r7
   b6e3a:	d830      	bhi.n	b6e9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6e3c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6e40:	f1bc 0f19 	cmp.w	ip, #25
   b6e44:	d81a      	bhi.n	b6e7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6e46:	3b20      	subs	r3, #32
        lc |= bit;
   b6e48:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6e4c:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6e4e:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6e52:	f102 0c01 	add.w	ip, r2, #1
   b6e56:	fa5f fc8c 	uxtb.w	ip, ip
   b6e5a:	440a      	add	r2, r1
      if (i < 7) {
   b6e5c:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6e60:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6e62:	d801      	bhi.n	b6e68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6e64:	f881 c00c 	strb.w	ip, [r1, #12]
   b6e68:	4662      	mov	r2, ip
   b6e6a:	e7bb      	b.n	b6de4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6e6c:	45a8      	cmp	r8, r5
   b6e6e:	dc18      	bgt.n	b6ea2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6e70:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6e72:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6e74:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6e76:	f04f 0e10 	mov.w	lr, #16
   b6e7a:	e7b2      	b.n	b6de2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6e7c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6e80:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6e84:	bf98      	it	ls
   b6e86:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6e8a:	e7e2      	b.n	b6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6e8c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6e8e:	2001      	movs	r0, #1
   b6e90:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6e92:	4419      	add	r1, r3
   b6e94:	237e      	movs	r3, #126	; 0x7e
   b6e96:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6e98:	2331      	movs	r3, #49	; 0x31
   b6e9a:	738b      	strb	r3, [r1, #14]
   b6e9c:	e74b      	b.n	b6d36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6e9e:	2f0a      	cmp	r7, #10
   b6ea0:	d1e4      	bne.n	b6e6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6ea2:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6ea4:	7b4b      	ldrb	r3, [r1, #13]
   b6ea6:	2b20      	cmp	r3, #32
   b6ea8:	f43f af44 	beq.w	b6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6eac:	2800      	cmp	r0, #0
   b6eae:	d0ed      	beq.n	b6e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6eb0:	ea1a 0f09 	tst.w	sl, r9
   b6eb4:	bf18      	it	ne
   b6eb6:	f04f 0902 	movne.w	r9, #2
   b6eba:	f881 9000 	strb.w	r9, [r1]
   b6ebe:	e73a      	b.n	b6d36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6ec0:	42ba      	cmp	r2, r7
   b6ec2:	d8ec      	bhi.n	b6e9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6ec4:	2000      	movs	r0, #0
      c = '_';
   b6ec6:	235f      	movs	r3, #95	; 0x5f
   b6ec8:	e7c3      	b.n	b6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6eca:	bf00      	nop
   b6ecc:	31000101 	.word	0x31000101

000b6ed0 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b6ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ed4:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6ed6:	2300      	movs	r3, #0
   b6ed8:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6eda:	7803      	ldrb	r3, [r0, #0]
   b6edc:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b6ede:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ee0:	d50a      	bpl.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
   b6ee2:	7883      	ldrb	r3, [r0, #2]
   b6ee4:	079a      	lsls	r2, r3, #30
   b6ee6:	d507      	bpl.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6ee8:	6a01      	ldr	r1, [r0, #32]
   b6eea:	b939      	cbnz	r1, b6efc <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6eec:	2101      	movs	r1, #1
   b6eee:	4620      	mov	r0, r4
   b6ef0:	f7ff fbd4 	bl	b669c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6ef4:	4605      	mov	r5, r0
   b6ef6:	b938      	cbnz	r0, b6f08 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b6ef8:	2000      	movs	r0, #0
   b6efa:	e048      	b.n	b6f8e <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6efc:	6880      	ldr	r0, [r0, #8]
   b6efe:	f000 fb58 	bl	b75b2 <_ZN9FatVolume9freeChainEm>
   b6f02:	2800      	cmp	r0, #0
   b6f04:	d1f2      	bne.n	b6eec <_ZN7FatFile6removeEv+0x1c>
   b6f06:	e7f7      	b.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b6f08:	f7ff fede 	bl	b6cc8 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b6f0c:	27e5      	movs	r7, #229	; 0xe5
   b6f0e:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b6f10:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b6f12:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b6f14:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b6f16:	68a0      	ldr	r0, [r4, #8]
   b6f18:	f7ff fb6a 	bl	b65f0 <_ZN9FatVolume9cacheSyncEv>
   b6f1c:	2800      	cmp	r0, #0
   b6f1e:	d0eb      	beq.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b6f20:	78e3      	ldrb	r3, [r4, #3]
   b6f22:	2b00      	cmp	r3, #0
   b6f24:	d033      	beq.n	b6f8e <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b6f26:	4621      	mov	r1, r4
   b6f28:	a801      	add	r0, sp, #4
   b6f2a:	f7ff fedc 	bl	b6ce6 <_ZN7FatFile11openClusterEPS_>
   b6f2e:	2800      	cmp	r0, #0
   b6f30:	d0e2      	beq.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
   b6f32:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b6f34:	78e3      	ldrb	r3, [r4, #3]
   b6f36:	fa5f f885 	uxtb.w	r8, r5
   b6f3a:	4543      	cmp	r3, r8
   b6f3c:	d3dc      	bcc.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6f3e:	88a1      	ldrh	r1, [r4, #4]
   b6f40:	1b49      	subs	r1, r1, r5
   b6f42:	0149      	lsls	r1, r1, #5
   b6f44:	a801      	add	r0, sp, #4
   b6f46:	f7ff fc9e 	bl	b6886 <_ZN7FatFile7seekSetEm>
   b6f4a:	2800      	cmp	r0, #0
   b6f4c:	d0d4      	beq.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6f4e:	2100      	movs	r1, #0
   b6f50:	a801      	add	r0, sp, #4
   b6f52:	f7ff fc79 	bl	b6848 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6f56:	2800      	cmp	r0, #0
   b6f58:	d0ce      	beq.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6f5a:	7ac3      	ldrb	r3, [r0, #11]
   b6f5c:	2b0f      	cmp	r3, #15
   b6f5e:	d1cb      	bne.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6f60:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6f62:	f002 031f 	and.w	r3, r2, #31
   b6f66:	4543      	cmp	r3, r8
   b6f68:	d1c6      	bne.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6f6a:	7b43      	ldrb	r3, [r0, #13]
   b6f6c:	42b3      	cmp	r3, r6
   b6f6e:	d1c3      	bne.n	b6ef8 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b6f70:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b6f72:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6f74:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b6f78:	f043 0301 	orr.w	r3, r3, #1
   b6f7c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b6f80:	0653      	lsls	r3, r2, #25
   b6f82:	f105 0501 	add.w	r5, r5, #1
   b6f86:	d5d5      	bpl.n	b6f34 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b6f88:	68a0      	ldr	r0, [r4, #8]
   b6f8a:	f7ff fb31 	bl	b65f0 <_ZN9FatVolume9cacheSyncEv>
}
   b6f8e:	b00a      	add	sp, #40	; 0x28
   b6f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6f94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6f98:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6f9c:	4606      	mov	r6, r0
   b6f9e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6fa0:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6fa2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6fa4:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6fa8:	6861      	ldr	r1, [r4, #4]
   b6faa:	68a2      	ldr	r2, [r4, #8]
   b6fac:	186b      	adds	r3, r5, r1
   b6fae:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6fb0:	4411      	add	r1, r2
   b6fb2:	4291      	cmp	r1, r2
   b6fb4:	d006      	beq.n	b6fc4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6fb6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6fba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6fbe:	4043      	eors	r3, r0
   b6fc0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6fc2:	e7f6      	b.n	b6fb2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6fc4:	f1b9 0f03 	cmp.w	r9, #3
   b6fc8:	bf28      	it	cs
   b6fca:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fce:	f109 0204 	add.w	r2, r9, #4
   b6fd2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6fd4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fd8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fda:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fdc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fde:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fe0:	bf94      	ite	ls
   b6fe2:	3130      	addls	r1, #48	; 0x30
   b6fe4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fe6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fe8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6fea:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fee:	d1f1      	bne.n	b6fd4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6ff0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6ff4:	2100      	movs	r1, #0
   b6ff6:	735f      	strb	r7, [r3, #13]
   b6ff8:	4630      	mov	r0, r6
   b6ffa:	f7ff fc44 	bl	b6886 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6ffe:	2101      	movs	r1, #1
   b7000:	4630      	mov	r0, r6
   b7002:	f7ff fc21 	bl	b6848 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7006:	4601      	mov	r1, r0
   b7008:	b928      	cbnz	r0, b7016 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b700a:	7870      	ldrb	r0, [r6, #1]
   b700c:	fab0 f080 	clz	r0, r0
   b7010:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b7016:	7803      	ldrb	r3, [r0, #0]
   b7018:	b16b      	cbz	r3, b7036 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b701a:	7ac3      	ldrb	r3, [r0, #11]
   b701c:	071b      	lsls	r3, r3, #28
   b701e:	d4ee      	bmi.n	b6ffe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7020:	220b      	movs	r2, #11
   b7022:	4640      	mov	r0, r8
   b7024:	f006 fffb 	bl	be01e <memcmp>
   b7028:	2800      	cmp	r0, #0
   b702a:	d1e8      	bne.n	b6ffe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b702c:	3501      	adds	r5, #1
   b702e:	b2ad      	uxth	r5, r5
   b7030:	2d64      	cmp	r5, #100	; 0x64
   b7032:	d1b9      	bne.n	b6fa8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7034:	e7ed      	b.n	b7012 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7036:	2001      	movs	r0, #1
   b7038:	e7eb      	b.n	b7012 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b703c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7040:	ed2d 8b02 	vpush	{d8}
   b7044:	b08b      	sub	sp, #44	; 0x2c
   b7046:	460d      	mov	r5, r1
   b7048:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b704a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b704c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b704e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7052:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7054:	d105      	bne.n	b7062 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7056:	2000      	movs	r0, #0
}
   b7058:	b00b      	add	sp, #44	; 0x2c
   b705a:	ecbd 8b02 	vpop	{d8}
   b705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7062:	9b07      	ldr	r3, [sp, #28]
   b7064:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7066:	2b00      	cmp	r3, #0
   b7068:	d1f5      	bne.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b706a:	6853      	ldr	r3, [r2, #4]
   b706c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b706e:	7813      	ldrb	r3, [r2, #0]
   b7070:	079c      	lsls	r4, r3, #30
   b7072:	bf1f      	itttt	ne
   b7074:	9b05      	ldrne	r3, [sp, #20]
   b7076:	330c      	addne	r3, #12
   b7078:	220d      	movne	r2, #13
   b707a:	fbb3 f3f2 	udivne	r3, r3, r2
   b707e:	bf1a      	itte	ne
   b7080:	3301      	addne	r3, #1
   b7082:	b2db      	uxtbne	r3, r3
   b7084:	2301      	moveq	r3, #1
    seekSet(0);
   b7086:	2100      	movs	r1, #0
   b7088:	4628      	mov	r0, r5
   b708a:	9303      	str	r3, [sp, #12]
   b708c:	f7ff fbfb 	bl	b6886 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7090:	f107 030d 	add.w	r3, r7, #13
  }
   b7094:	f04f 0b00 	mov.w	fp, #0
   b7098:	ee08 3a10 	vmov	s16, r3
   b709c:	46da      	mov	sl, fp
   b709e:	465c      	mov	r4, fp
   b70a0:	465e      	mov	r6, fp
   b70a2:	f8cd b010 	str.w	fp, [sp, #16]
   b70a6:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b70a8:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b70aa:	2101      	movs	r1, #1
   b70ac:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b70ae:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b70b2:	f7ff fbc9 	bl	b6848 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b70b6:	4603      	mov	r3, r0
   b70b8:	2800      	cmp	r0, #0
   b70ba:	d171      	bne.n	b71a0 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b70bc:	786b      	ldrb	r3, [r5, #1]
   b70be:	2b00      	cmp	r3, #0
   b70c0:	d1c9      	bne.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b70c2:	9b06      	ldr	r3, [sp, #24]
   b70c4:	059a      	lsls	r2, r3, #22
   b70c6:	d5c6      	bpl.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b70c8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b70cc:	3b01      	subs	r3, #1
   b70ce:	2b01      	cmp	r3, #1
   b70d0:	d8c1      	bhi.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b70d2:	9b04      	ldr	r3, [sp, #16]
   b70d4:	2c00      	cmp	r4, #0
   b70d6:	bf08      	it	eq
   b70d8:	4643      	moveq	r3, r8
   b70da:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b70dc:	9b03      	ldr	r3, [sp, #12]
   b70de:	429c      	cmp	r4, r3
   b70e0:	f0c0 80f1 	bcc.w	b72c6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b70e4:	f1b9 0f00 	cmp.w	r9, #0
   b70e8:	f040 810a 	bne.w	b7300 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b70ec:	9b04      	ldr	r3, [sp, #16]
   b70ee:	4628      	mov	r0, r5
   b70f0:	0159      	lsls	r1, r3, #5
   b70f2:	f7ff fbc8 	bl	b6886 <_ZN7FatFile7seekSetEm>
   b70f6:	2800      	cmp	r0, #0
   b70f8:	d0ad      	beq.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b70fa:	9b03      	ldr	r3, [sp, #12]
   b70fc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7100:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7104:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7106:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b710a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b710e:	2e00      	cmp	r6, #0
   b7110:	f000 810d 	beq.w	b732e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7114:	2100      	movs	r1, #0
   b7116:	4628      	mov	r0, r5
   b7118:	f7ff fb96 	bl	b6848 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b711c:	4604      	mov	r4, r0
   b711e:	2800      	cmp	r0, #0
   b7120:	d099      	beq.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7122:	68aa      	ldr	r2, [r5, #8]
   b7124:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b7128:	454e      	cmp	r6, r9
   b712a:	f043 0301 	orr.w	r3, r3, #1
   b712e:	bf0c      	ite	eq
   b7130:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7134:	46b3      	movne	fp, r6
   b7136:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b713a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b713e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b7142:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7146:	f107 000d 	add.w	r0, r7, #13
   b714a:	f7ff fdbd 	bl	b6cc8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b714e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7152:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7154:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7158:	f00b 031f 	and.w	r3, fp, #31
   b715c:	220d      	movs	r2, #13
   b715e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7160:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7164:	4353      	muls	r3, r2
   b7166:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7168:	9905      	ldr	r1, [sp, #20]
   b716a:	4299      	cmp	r1, r3
   b716c:	f240 80d0 	bls.w	b7310 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7170:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7174:	2a04      	cmp	r2, #4
   b7176:	fa5f fe82 	uxtb.w	lr, r2
   b717a:	f102 0001 	add.w	r0, r2, #1
   b717e:	f200 80cd 	bhi.w	b731c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7182:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7186:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b718a:	280d      	cmp	r0, #13
   b718c:	f103 0301 	add.w	r3, r3, #1
   b7190:	4602      	mov	r2, r0
   b7192:	d1e9      	bne.n	b7168 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7194:	3e01      	subs	r6, #1
   b7196:	b2f6      	uxtb	r6, r6
   b7198:	e7b9      	b.n	b710e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b719a:	f04f 0901 	mov.w	r9, #1
   b719e:	e783      	b.n	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b71a0:	7802      	ldrb	r2, [r0, #0]
   b71a2:	2ae5      	cmp	r2, #229	; 0xe5
   b71a4:	d000      	beq.n	b71a8 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b71a6:	b97a      	cbnz	r2, b71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b71a8:	9904      	ldr	r1, [sp, #16]
   b71aa:	2c00      	cmp	r4, #0
   b71ac:	bf08      	it	eq
   b71ae:	4641      	moveq	r1, r8
   b71b0:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b71b2:	9903      	ldr	r1, [sp, #12]
   b71b4:	428c      	cmp	r4, r1
        freeFound++;
   b71b6:	bf3c      	itt	cc
   b71b8:	3401      	addcc	r4, #1
   b71ba:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b71bc:	2a00      	cmp	r2, #0
   b71be:	d080      	beq.n	b70c2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b71c0:	2ae5      	cmp	r2, #229	; 0xe5
   b71c2:	d105      	bne.n	b71d0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b71c4:	2600      	movs	r6, #0
   b71c6:	e76f      	b.n	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b71c8:	9903      	ldr	r1, [sp, #12]
   b71ca:	428c      	cmp	r4, r1
   b71cc:	bf38      	it	cc
   b71ce:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b71d0:	2a2e      	cmp	r2, #46	; 0x2e
   b71d2:	d0f7      	beq.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b71d4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b71d6:	290f      	cmp	r1, #15
   b71d8:	d14a      	bne.n	b7270 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b71da:	bb16      	cbnz	r6, b7222 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b71dc:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b71e0:	f43f af62 	beq.w	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b71e4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b71e8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b71ec:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b71ee:	220d      	movs	r2, #13
   b71f0:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b71f4:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b71f8:	9a05      	ldr	r2, [sp, #20]
   b71fa:	4542      	cmp	r2, r8
   b71fc:	d9e2      	bls.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b71fe:	eba2 0208 	sub.w	r2, r2, r8
   b7202:	9208      	str	r2, [sp, #32]
   b7204:	2200      	movs	r2, #0
   b7206:	eb02 0108 	add.w	r1, r2, r8
   b720a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b720c:	4618      	mov	r0, r3
   b720e:	b2d1      	uxtb	r1, r2
   b7210:	f7ff fd46 	bl	b6ca0 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7214:	9908      	ldr	r1, [sp, #32]
   b7216:	428a      	cmp	r2, r1
   b7218:	d10d      	bne.n	b7236 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b721a:	2800      	cmp	r0, #0
   b721c:	bf18      	it	ne
   b721e:	2600      	movne	r6, #0
   b7220:	e742      	b.n	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7222:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b7226:	fa5f fa8a 	uxtb.w	sl, sl
   b722a:	4552      	cmp	r2, sl
   b722c:	d1ca      	bne.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b722e:	7b5a      	ldrb	r2, [r3, #13]
   b7230:	455a      	cmp	r2, fp
   b7232:	d0dc      	beq.n	b71ee <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7234:	e7c6      	b.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7236:	28ff      	cmp	r0, #255	; 0xff
   b7238:	d8c4      	bhi.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b723a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b723e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7242:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7244:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7246:	bf9c      	itt	ls
   b7248:	f10e 0020 	addls.w	r0, lr, #32
   b724c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7250:	4608      	mov	r0, r1
   b7252:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7254:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7256:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b725a:	f1bc 0f19 	cmp.w	ip, #25
   b725e:	bf9c      	itt	ls
   b7260:	3120      	addls	r1, #32
   b7262:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7264:	4571      	cmp	r1, lr
   b7266:	d1ad      	bne.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7268:	3201      	adds	r2, #1
   b726a:	2a0d      	cmp	r2, #13
   b726c:	d1cb      	bne.n	b7206 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b726e:	e71b      	b.n	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7270:	0708      	lsls	r0, r1, #28
   b7272:	d4a7      	bmi.n	b71c4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7274:	b15e      	cbz	r6, b728e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7276:	f1ba 0f01 	cmp.w	sl, #1
   b727a:	f47f aeec 	bne.w	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b727e:	4618      	mov	r0, r3
   b7280:	f7ff fd22 	bl	b6cc8 <_ZN7FatFile11lfnChecksumEPh>
   b7284:	4558      	cmp	r0, fp
   b7286:	f47f aee6 	bne.w	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b728a:	46b1      	mov	r9, r6
   b728c:	e00e      	b.n	b72ac <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b728e:	ee18 1a10 	vmov	r1, s16
   b7292:	220b      	movs	r2, #11
   b7294:	4618      	mov	r0, r3
   b7296:	f006 fec2 	bl	be01e <memcmp>
   b729a:	2800      	cmp	r0, #0
   b729c:	f47f af04 	bne.w	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b72a0:	f897 9000 	ldrb.w	r9, [r7]
   b72a4:	f019 0901 	ands.w	r9, r9, #1
   b72a8:	f47f af77 	bne.w	b719a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b72ac:	9b06      	ldr	r3, [sp, #24]
   b72ae:	0519      	lsls	r1, r3, #20
   b72b0:	f53f aed1 	bmi.w	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b72b4:	9b06      	ldr	r3, [sp, #24]
   b72b6:	9807      	ldr	r0, [sp, #28]
   b72b8:	f8cd 9000 	str.w	r9, [sp]
   b72bc:	4642      	mov	r2, r8
   b72be:	4629      	mov	r1, r5
   b72c0:	f7ff fb24 	bl	b690c <_ZN7FatFile15openCachedEntryEPS_tih>
   b72c4:	e6c8      	b.n	b7058 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b72c6:	2100      	movs	r1, #0
   b72c8:	4628      	mov	r0, r5
   b72ca:	f7ff fabd 	bl	b6848 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b72ce:	b9a0      	cbnz	r0, b72fa <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b72d0:	786b      	ldrb	r3, [r5, #1]
   b72d2:	2b00      	cmp	r3, #0
   b72d4:	f47f aebf 	bne.w	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b72d8:	4628      	mov	r0, r5
   b72da:	f7ff f9a1 	bl	b6620 <_ZN7FatFile13addDirClusterEv>
   b72de:	2800      	cmp	r0, #0
   b72e0:	f43f aeb9 	beq.w	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b72e4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b72e6:	791b      	ldrb	r3, [r3, #4]
   b72e8:	2b01      	cmp	r3, #1
   b72ea:	f63f aefb 	bhi.w	b70e4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b72ee:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b72f0:	3410      	adds	r4, #16
   b72f2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b72f4:	42a3      	cmp	r3, r4
   b72f6:	d8ef      	bhi.n	b72d8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b72f8:	e6f4      	b.n	b70e4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b72fa:	3401      	adds	r4, #1
   b72fc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b72fe:	e6ed      	b.n	b70dc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7300:	4639      	mov	r1, r7
   b7302:	4628      	mov	r0, r5
   b7304:	f7ff fe46 	bl	b6f94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7308:	2800      	cmp	r0, #0
   b730a:	f47f aeef 	bne.w	b70ec <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b730e:	e6a2      	b.n	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7310:	bf14      	ite	ne
   b7312:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7316:	2100      	moveq	r1, #0
   b7318:	b289      	uxth	r1, r1
   b731a:	e72b      	b.n	b7174 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b731c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7320:	bf94      	ite	ls
   b7322:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7326:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b732a:	8091      	strh	r1, [r2, #4]
   b732c:	e72d      	b.n	b718a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b732e:	4631      	mov	r1, r6
   b7330:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7332:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7336:	f7ff fa87 	bl	b6848 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b733a:	4604      	mov	r4, r0
   b733c:	2800      	cmp	r0, #0
   b733e:	f43f ae8a 	beq.w	b7056 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7342:	2220      	movs	r2, #32
   b7344:	4631      	mov	r1, r6
   b7346:	f006 fea2 	bl	be08e <memset>
  memcpy(dir->name, fname->sfn, 11);
   b734a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b734e:	6023      	str	r3, [r4, #0]
   b7350:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7354:	6063      	str	r3, [r4, #4]
   b7356:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b735a:	8123      	strh	r3, [r4, #8]
   b735c:	7dfb      	ldrb	r3, [r7, #23]
   b735e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7360:	783b      	ldrb	r3, [r7, #0]
   b7362:	f003 0318 	and.w	r3, r3, #24
   b7366:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7368:	4b0f      	ldr	r3, [pc, #60]	; (b73a8 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b736a:	681b      	ldr	r3, [r3, #0]
   b736c:	b19b      	cbz	r3, b7396 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b736e:	f104 010e 	add.w	r1, r4, #14
   b7372:	f104 0010 	add.w	r0, r4, #16
   b7376:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7378:	8a23      	ldrh	r3, [r4, #16]
   b737a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b737c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b737e:	89e3      	ldrh	r3, [r4, #14]
   b7380:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7382:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7384:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7388:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b738c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7390:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7394:	e78e      	b.n	b72b4 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7396:	2321      	movs	r3, #33	; 0x21
   b7398:	7423      	strb	r3, [r4, #16]
   b739a:	2328      	movs	r3, #40	; 0x28
   b739c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b739e:	2308      	movs	r3, #8
   b73a0:	73a6      	strb	r6, [r4, #14]
   b73a2:	73e3      	strb	r3, [r4, #15]
   b73a4:	e7e8      	b.n	b7378 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b73a6:	bf00      	nop
   b73a8:	2003e638 	.word	0x2003e638

000b73ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b73ac:	b513      	push	{r0, r1, r4, lr}
   b73ae:	4604      	mov	r4, r0
    }
   b73b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b73b2:	b159      	cbz	r1, b73cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b73b4:	9101      	str	r1, [sp, #4]
   b73b6:	f006 ff1e 	bl	be1f6 <strlen>
   b73ba:	6823      	ldr	r3, [r4, #0]
   b73bc:	9901      	ldr	r1, [sp, #4]
   b73be:	68db      	ldr	r3, [r3, #12]
   b73c0:	4602      	mov	r2, r0
   b73c2:	4620      	mov	r0, r4
    }
   b73c4:	b002      	add	sp, #8
   b73c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b73ca:	4718      	bx	r3
    }
   b73cc:	b002      	add	sp, #8
   b73ce:	bd10      	pop	{r4, pc}

000b73d0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b73d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b73d2:	7803      	ldrb	r3, [r0, #0]
   b73d4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b73d6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b73d8:	d520      	bpl.n	b741c <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b73da:	6843      	ldr	r3, [r0, #4]
   b73dc:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b73de:	f100 020c 	add.w	r2, r0, #12
   b73e2:	6818      	ldr	r0, [r3, #0]
   b73e4:	9201      	str	r2, [sp, #4]
   b73e6:	f000 fb88 	bl	b7afa <_ZN9SdSpiCard10writeBlockEmPKh>
   b73ea:	9a01      	ldr	r2, [sp, #4]
   b73ec:	4605      	mov	r5, r0
   b73ee:	b918      	cbnz	r0, b73f8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b73f0:	2500      	movs	r5, #0
}
   b73f2:	4628      	mov	r0, r5
   b73f4:	b003      	add	sp, #12
   b73f6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b73f8:	7823      	ldrb	r3, [r4, #0]
   b73fa:	079b      	lsls	r3, r3, #30
   b73fc:	d404      	bmi.n	b7408 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b73fe:	7823      	ldrb	r3, [r4, #0]
   b7400:	f023 0301 	bic.w	r3, r3, #1
   b7404:	7023      	strb	r3, [r4, #0]
   b7406:	e7f4      	b.n	b73f2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7408:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b740c:	6919      	ldr	r1, [r3, #16]
   b740e:	4401      	add	r1, r0
   b7410:	6818      	ldr	r0, [r3, #0]
   b7412:	f000 fb72 	bl	b7afa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7416:	2800      	cmp	r0, #0
   b7418:	d1f1      	bne.n	b73fe <_ZN8FatCache4syncEv+0x2e>
   b741a:	e7e9      	b.n	b73f0 <_ZN8FatCache4syncEv+0x20>
  return true;
   b741c:	2501      	movs	r5, #1
   b741e:	e7e8      	b.n	b73f2 <_ZN8FatCache4syncEv+0x22>

000b7420 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7420:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7422:	6883      	ldr	r3, [r0, #8]
   b7424:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7426:	4604      	mov	r4, r0
   b7428:	460e      	mov	r6, r1
   b742a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b742c:	d009      	beq.n	b7442 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b742e:	f7ff ffcf 	bl	b73d0 <_ZN8FatCache4syncEv>
   b7432:	b908      	cbnz	r0, b7438 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7434:	2000      	movs	r0, #0
}
   b7436:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7438:	076b      	lsls	r3, r5, #29
   b743a:	d50a      	bpl.n	b7452 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b743c:	2300      	movs	r3, #0
   b743e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7440:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7442:	7822      	ldrb	r2, [r4, #0]
   b7444:	f005 0503 	and.w	r5, r5, #3
   b7448:	4620      	mov	r0, r4
   b744a:	4315      	orrs	r5, r2
   b744c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7450:	e7f1      	b.n	b7436 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7452:	6863      	ldr	r3, [r4, #4]
   b7454:	f104 020c 	add.w	r2, r4, #12
   b7458:	6818      	ldr	r0, [r3, #0]
   b745a:	4631      	mov	r1, r6
   b745c:	f000 fac4 	bl	b79e8 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7460:	2800      	cmp	r0, #0
   b7462:	d1eb      	bne.n	b743c <_ZN8FatCache4readEmh+0x1c>
   b7464:	e7e6      	b.n	b7434 <_ZN8FatCache4readEmh+0x14>

000b7466 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7466:	7983      	ldrb	r3, [r0, #6]
   b7468:	6940      	ldr	r0, [r0, #20]
   b746a:	3902      	subs	r1, #2
   b746c:	4099      	lsls	r1, r3
}
   b746e:	4408      	add	r0, r1
   b7470:	4770      	bx	lr

000b7472 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7472:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7474:	b570      	push	{r4, r5, r6, lr}
   b7476:	4605      	mov	r5, r0
   b7478:	460c      	mov	r4, r1
   b747a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b747c:	d802      	bhi.n	b7484 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b747e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7482:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7484:	69c3      	ldr	r3, [r0, #28]
   b7486:	428b      	cmp	r3, r1
   b7488:	d3f9      	bcc.n	b747e <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b748a:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b748c:	2b20      	cmp	r3, #32
   b748e:	d116      	bne.n	b74be <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7490:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7492:	2202      	movs	r2, #2
   b7494:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7498:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b749c:	f7ff ffc0 	bl	b7420 <_ZN8FatCache4readEmh>
    if (!pc) {
   b74a0:	2800      	cmp	r0, #0
   b74a2:	d0ec      	beq.n	b747e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b74a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b74a8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b74ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b74b0:	69ea      	ldr	r2, [r5, #28]
   b74b2:	429a      	cmp	r2, r3
  *value = next;
   b74b4:	bf26      	itte	cs
   b74b6:	6033      	strcs	r3, [r6, #0]
  return 1;
   b74b8:	2001      	movcs	r0, #1
    return 0;
   b74ba:	2000      	movcc	r0, #0
   b74bc:	e7e1      	b.n	b7482 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b74be:	2b10      	cmp	r3, #16
   b74c0:	d1dd      	bne.n	b747e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b74c2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b74c6:	6981      	ldr	r1, [r0, #24]
   b74c8:	2202      	movs	r2, #2
   b74ca:	4419      	add	r1, r3
   b74cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b74d0:	f7ff ffa6 	bl	b7420 <_ZN8FatCache4readEmh>
    if (!pc) {
   b74d4:	2800      	cmp	r0, #0
   b74d6:	d0d2      	beq.n	b747e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b74d8:	b2e4      	uxtb	r4, r4
   b74da:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b74de:	e7e7      	b.n	b74b0 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b74e0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b74e0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b74e2:	b538      	push	{r3, r4, r5, lr}
   b74e4:	460c      	mov	r4, r1
   b74e6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b74e8:	d801      	bhi.n	b74ee <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b74ea:	2000      	movs	r0, #0
}
   b74ec:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b74ee:	69c3      	ldr	r3, [r0, #28]
   b74f0:	428b      	cmp	r3, r1
   b74f2:	d3fa      	bcc.n	b74ea <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b74f4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b74f6:	2b20      	cmp	r3, #32
   b74f8:	d10f      	bne.n	b751a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b74fa:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b74fc:	2203      	movs	r2, #3
   b74fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7502:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7506:	f7ff ff8b 	bl	b7420 <_ZN8FatCache4readEmh>
    if (!pc) {
   b750a:	2800      	cmp	r0, #0
   b750c:	d0ed      	beq.n	b74ea <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b750e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7512:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7516:	2001      	movs	r0, #1
   b7518:	e7e8      	b.n	b74ec <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b751a:	2b10      	cmp	r3, #16
   b751c:	d1e5      	bne.n	b74ea <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b751e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7522:	6981      	ldr	r1, [r0, #24]
   b7524:	2203      	movs	r2, #3
   b7526:	4419      	add	r1, r3
   b7528:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b752c:	f7ff ff78 	bl	b7420 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7530:	2800      	cmp	r0, #0
   b7532:	d0da      	beq.n	b74ea <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7534:	b2e4      	uxtb	r4, r4
   b7536:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b753a:	e7ec      	b.n	b7516 <_ZN9FatVolume6fatPutEmm+0x36>

000b753c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b753c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7540:	68c4      	ldr	r4, [r0, #12]
   b7542:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7544:	4605      	mov	r5, r0
   b7546:	460e      	mov	r6, r1
   b7548:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b754a:	d301      	bcc.n	b7550 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b754c:	2701      	movs	r7, #1
   b754e:	e001      	b.n	b7554 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7550:	460c      	mov	r4, r1
    setStart = false;
   b7552:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7554:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7556:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7558:	42a3      	cmp	r3, r4
   b755a:	d202      	bcs.n	b7562 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b755c:	b9c7      	cbnz	r7, b7590 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b755e:	68ec      	ldr	r4, [r5, #12]
   b7560:	e7f4      	b.n	b754c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7562:	42a6      	cmp	r6, r4
   b7564:	d014      	beq.n	b7590 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7566:	aa01      	add	r2, sp, #4
   b7568:	4621      	mov	r1, r4
   b756a:	4628      	mov	r0, r5
   b756c:	f7ff ff81 	bl	b7472 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7570:	2800      	cmp	r0, #0
   b7572:	db0d      	blt.n	b7590 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7574:	d0ee      	beq.n	b7554 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7576:	9b01      	ldr	r3, [sp, #4]
   b7578:	2b00      	cmp	r3, #0
   b757a:	d1eb      	bne.n	b7554 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b757c:	b107      	cbz	r7, b7580 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b757e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7580:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7584:	4621      	mov	r1, r4
   b7586:	4628      	mov	r0, r5
   b7588:	f7ff ffaa 	bl	b74e0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b758c:	4607      	mov	r7, r0
   b758e:	b920      	cbnz	r0, b759a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7590:	2700      	movs	r7, #0
}
   b7592:	4638      	mov	r0, r7
   b7594:	b002      	add	sp, #8
   b7596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b759a:	b916      	cbnz	r6, b75a2 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b759c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b75a0:	e7f7      	b.n	b7592 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b75a2:	4622      	mov	r2, r4
   b75a4:	4631      	mov	r1, r6
   b75a6:	4628      	mov	r0, r5
   b75a8:	f7ff ff9a 	bl	b74e0 <_ZN9FatVolume6fatPutEmm>
   b75ac:	2800      	cmp	r0, #0
   b75ae:	d1f5      	bne.n	b759c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b75b0:	e7ee      	b.n	b7590 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b75b2 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b75b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b75b4:	4605      	mov	r5, r0
   b75b6:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b75b8:	aa01      	add	r2, sp, #4
   b75ba:	4621      	mov	r1, r4
   b75bc:	4628      	mov	r0, r5
   b75be:	f7ff ff58 	bl	b7472 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b75c2:	1e06      	subs	r6, r0, #0
   b75c4:	db10      	blt.n	b75e8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b75c6:	2200      	movs	r2, #0
   b75c8:	4621      	mov	r1, r4
   b75ca:	4628      	mov	r0, r5
   b75cc:	f7ff ff88 	bl	b74e0 <_ZN9FatVolume6fatPutEmm>
   b75d0:	b150      	cbz	r0, b75e8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b75d2:	68eb      	ldr	r3, [r5, #12]
   b75d4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b75d6:	bf24      	itt	cs
   b75d8:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b75dc:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b75de:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b75e0:	2e00      	cmp	r6, #0
   b75e2:	d1e9      	bne.n	b75b8 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b75e4:	b002      	add	sp, #8
   b75e6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b75e8:	2000      	movs	r0, #0
   b75ea:	e7fb      	b.n	b75e4 <_ZN9FatVolume9freeChainEm+0x32>

000b75ec <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b75ec:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b75ee:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b75f0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b75f2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b75f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b75f8:	4604      	mov	r4, r0
  m_fatType = 0;
   b75fa:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b75fc:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7600:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7602:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7606:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7608:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b760c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7610:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7614:	460d      	mov	r5, r1
   b7616:	b1b9      	cbz	r1, b7648 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7618:	2904      	cmp	r1, #4
   b761a:	d901      	bls.n	b7620 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b761c:	2000      	movs	r0, #0
}
   b761e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7620:	4611      	mov	r1, r2
   b7622:	4630      	mov	r0, r6
   b7624:	f7ff fefc 	bl	b7420 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7628:	2800      	cmp	r0, #0
   b762a:	d0f7      	beq.n	b761c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b762c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7630:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7634:	065b      	lsls	r3, r3, #25
   b7636:	d1f1      	bne.n	b761c <_ZN9FatVolume4initEh+0x30>
   b7638:	f105 011b 	add.w	r1, r5, #27
   b763c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7640:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7644:	2d00      	cmp	r5, #0
   b7646:	d0e9      	beq.n	b761c <_ZN9FatVolume4initEh+0x30>
   b7648:	2200      	movs	r2, #0
   b764a:	4629      	mov	r1, r5
   b764c:	4630      	mov	r0, r6
   b764e:	f7ff fee7 	bl	b7420 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7652:	2800      	cmp	r0, #0
   b7654:	d0e2      	beq.n	b761c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7656:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b765a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b765e:	d1dd      	bne.n	b761c <_ZN9FatVolume4initEh+0x30>
   b7660:	7c03      	ldrb	r3, [r0, #16]
   b7662:	2b02      	cmp	r3, #2
   b7664:	d1da      	bne.n	b761c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7666:	89c3      	ldrh	r3, [r0, #14]
   b7668:	2b00      	cmp	r3, #0
   b766a:	d0d7      	beq.n	b761c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b766c:	7b41      	ldrb	r1, [r0, #13]
   b766e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7670:	1e4b      	subs	r3, r1, #1
   b7672:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7674:	2300      	movs	r3, #0
   b7676:	71a3      	strb	r3, [r4, #6]
   b7678:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b767a:	2301      	movs	r3, #1
   b767c:	4299      	cmp	r1, r3
   b767e:	d007      	beq.n	b7690 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7680:	3e01      	subs	r6, #1
   b7682:	d0cb      	beq.n	b761c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7684:	79a2      	ldrb	r2, [r4, #6]
   b7686:	005b      	lsls	r3, r3, #1
   b7688:	3201      	adds	r2, #1
   b768a:	b2db      	uxtb	r3, r3
   b768c:	71a2      	strb	r2, [r4, #6]
   b768e:	e7f5      	b.n	b767c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7690:	8ac1      	ldrh	r1, [r0, #22]
   b7692:	b901      	cbnz	r1, b7696 <_ZN9FatVolume4initEh+0xaa>
   b7694:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7696:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7698:	89c3      	ldrh	r3, [r0, #14]
   b769a:	442b      	add	r3, r5
   b769c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b769e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b76a2:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b76a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b76a8:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b76aa:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b76ae:	0149      	lsls	r1, r1, #5
   b76b0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b76b4:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b76b8:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b76ba:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b76be:	b902      	cbnz	r2, b76c2 <_ZN9FatVolume4initEh+0xd6>
   b76c0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b76c2:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b76c4:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b76c6:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b76c8:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b76ca:	1c4b      	adds	r3, r1, #1
   b76cc:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b76ce:	f640 73f4 	movw	r3, #4084	; 0xff4
   b76d2:	4299      	cmp	r1, r3
   b76d4:	d802      	bhi.n	b76dc <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b76d6:	230c      	movs	r3, #12
   b76d8:	71e3      	strb	r3, [r4, #7]
   b76da:	e79f      	b.n	b761c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b76dc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b76e0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b76e2:	bf85      	ittet	hi
   b76e4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b76e6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b76e8:	2310      	movls	r3, #16
    m_fatType = 32;
   b76ea:	2320      	movhi	r3, #32
   b76ec:	71e3      	strb	r3, [r4, #7]
  return true;
   b76ee:	2001      	movs	r0, #1
   b76f0:	e795      	b.n	b761e <_ZN9FatVolume4initEh+0x32>

000b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b76f2:	f000 bacb 	b.w	b7c8c <_ZN14SdSpiAltDriver4sendEh>

000b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b76f6:	f000 baae 	b.w	b7c56 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b76fc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b76fc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b76fe:	4e0e      	ldr	r6, [pc, #56]	; (b7738 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7700:	460d      	mov	r5, r1
   b7702:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7704:	f001 fcf0 	bl	b90e8 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7708:	6833      	ldr	r3, [r6, #0]
   b770a:	1ac0      	subs	r0, r0, r3
   b770c:	4b0b      	ldr	r3, [pc, #44]	; (b773c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b770e:	4298      	cmp	r0, r3
   b7710:	d908      	bls.n	b7724 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7712:	f001 fcf1 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7716:	4b0a      	ldr	r3, [pc, #40]	; (b7740 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7718:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b771a:	f001 fec9 	bl	b94b0 <spark_process>
   b771e:	f001 fce3 	bl	b90e8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7722:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7724:	f001 fce8 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7728:	b280      	uxth	r0, r0
   b772a:	1b40      	subs	r0, r0, r5
}
   b772c:	42a0      	cmp	r0, r4
   b772e:	bfd4      	ite	le
   b7730:	2000      	movle	r0, #0
   b7732:	2001      	movgt	r0, #1
   b7734:	bd70      	pop	{r4, r5, r6, pc}
   b7736:	bf00      	nop
   b7738:	2003e640 	.word	0x2003e640
   b773c:	000186a0 	.word	0x000186a0
   b7740:	2003e728 	.word	0x2003e728

000b7744 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7744:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7746:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7748:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b774a:	b94d      	cbnz	r5, b7760 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b774c:	6840      	ldr	r0, [r0, #4]
   b774e:	f000 fa6b 	bl	b7c28 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7752:	6863      	ldr	r3, [r4, #4]
   b7754:	4629      	mov	r1, r5
   b7756:	7d18      	ldrb	r0, [r3, #20]
   b7758:	f005 fcfd 	bl	bd156 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b775c:	2301      	movs	r3, #1
   b775e:	7223      	strb	r3, [r4, #8]
  }
}
   b7760:	bd38      	pop	{r3, r4, r5, pc}

000b7762 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7762:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7764:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7766:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7768:	b16b      	cbz	r3, b7786 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b776a:	6843      	ldr	r3, [r0, #4]
   b776c:	2101      	movs	r1, #1
   b776e:	7d18      	ldrb	r0, [r3, #20]
   b7770:	f005 fcf1 	bl	bd156 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7774:	6860      	ldr	r0, [r4, #4]
   b7776:	21ff      	movs	r1, #255	; 0xff
   b7778:	f7ff ffbb 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b777c:	6860      	ldr	r0, [r4, #4]
   b777e:	f000 fa67 	bl	b7c50 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7782:	2300      	movs	r3, #0
   b7784:	7223      	strb	r3, [r4, #8]
  }
}
   b7786:	bd10      	pop	{r4, pc}

000b7788 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b778a:	4604      	mov	r4, r0
   b778c:	460d      	mov	r5, r1
   b778e:	4616      	mov	r6, r2
   b7790:	f001 fcb2 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7794:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7796:	6860      	ldr	r0, [r4, #4]
   b7798:	f7ff ffad 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b779c:	28ff      	cmp	r0, #255	; 0xff
   b779e:	7260      	strb	r0, [r4, #9]
   b77a0:	d10e      	bne.n	b77c0 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b77a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b77a6:	4639      	mov	r1, r7
   b77a8:	4620      	mov	r0, r4
   b77aa:	f7ff ffa7 	bl	b76fc <_ZN9SdSpiCard10isTimedOutEtt>
   b77ae:	2800      	cmp	r0, #0
   b77b0:	d0f1      	beq.n	b7796 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b77b2:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b77b4:	4620      	mov	r0, r4
   b77b6:	7023      	strb	r3, [r4, #0]
   b77b8:	f7ff ffd3 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b77bc:	2000      	movs	r0, #0
}
   b77be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b77c0:	28fe      	cmp	r0, #254	; 0xfe
   b77c2:	d001      	beq.n	b77c8 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b77c4:	2350      	movs	r3, #80	; 0x50
   b77c6:	e7f5      	b.n	b77b4 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b77c8:	6860      	ldr	r0, [r4, #4]
   b77ca:	4632      	mov	r2, r6
   b77cc:	4629      	mov	r1, r5
   b77ce:	f000 fa47 	bl	b7c60 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b77d2:	7260      	strb	r0, [r4, #9]
   b77d4:	b108      	cbz	r0, b77da <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b77d6:	2360      	movs	r3, #96	; 0x60
   b77d8:	e7ec      	b.n	b77b4 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b77da:	6860      	ldr	r0, [r4, #4]
   b77dc:	f7ff ff8b 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b77e0:	6860      	ldr	r0, [r4, #4]
   b77e2:	f7ff ff88 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b77e6:	2001      	movs	r0, #1
   b77e8:	e7e9      	b.n	b77be <_ZN9SdSpiCard8readDataEPhj+0x36>

000b77ea <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b77ea:	b570      	push	{r4, r5, r6, lr}
   b77ec:	4604      	mov	r4, r0
   b77ee:	460e      	mov	r6, r1
   b77f0:	f001 fc82 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
   b77f4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b77f6:	4632      	mov	r2, r6
   b77f8:	4629      	mov	r1, r5
   b77fa:	4620      	mov	r0, r4
   b77fc:	f7ff ff7e 	bl	b76fc <_ZN9SdSpiCard10isTimedOutEtt>
   b7800:	b930      	cbnz	r0, b7810 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7802:	6860      	ldr	r0, [r4, #4]
   b7804:	f7ff ff77 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7808:	28ff      	cmp	r0, #255	; 0xff
   b780a:	d1f4      	bne.n	b77f6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b780c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b780e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7810:	2000      	movs	r0, #0
   b7812:	e7fc      	b.n	b780e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7814 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7816:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7818:	9201      	str	r2, [sp, #4]
   b781a:	4604      	mov	r4, r0
   b781c:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b781e:	b90b      	cbnz	r3, b7824 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7820:	f7ff ff90 	bl	b7744 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7824:	b125      	cbz	r5, b7830 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7826:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b782a:	4620      	mov	r0, r4
   b782c:	f7ff ffdd 	bl	b77ea <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7830:	6860      	ldr	r0, [r4, #4]
   b7832:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7836:	f7ff ff5c 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b783a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b783c:	af01      	add	r7, sp, #4
   b783e:	5db9      	ldrb	r1, [r7, r6]
   b7840:	6860      	ldr	r0, [r4, #4]
   b7842:	f7ff ff56 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7846:	3e01      	subs	r6, #1
   b7848:	d2f9      	bcs.n	b783e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b784a:	2d00      	cmp	r5, #0
   b784c:	6860      	ldr	r0, [r4, #4]
   b784e:	bf0c      	ite	eq
   b7850:	2195      	moveq	r1, #149	; 0x95
   b7852:	2187      	movne	r1, #135	; 0x87
   b7854:	f7ff ff4d 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7858:	6860      	ldr	r0, [r4, #4]
   b785a:	f7ff ff4c 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b785e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7860:	6860      	ldr	r0, [r4, #4]
   b7862:	f7ff ff48 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7866:	0603      	lsls	r3, r0, #24
   b7868:	7260      	strb	r0, [r4, #9]
   b786a:	d503      	bpl.n	b7874 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b786c:	3d01      	subs	r5, #1
   b786e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7872:	d1f5      	bne.n	b7860 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7874:	b003      	add	sp, #12
   b7876:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7878 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7878:	b570      	push	{r4, r5, r6, lr}
   b787a:	4604      	mov	r4, r0
   b787c:	460d      	mov	r5, r1
   b787e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7880:	2137      	movs	r1, #55	; 0x37
   b7882:	2200      	movs	r2, #0
   b7884:	f7ff ffc6 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7888:	4632      	mov	r2, r6
   b788a:	4629      	mov	r1, r5
   b788c:	4620      	mov	r0, r4
  }
   b788e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7892:	f7ff bfbf 	b.w	b7814 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7898 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b789c:	2500      	movs	r5, #0
   b789e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b78a0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b78a2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b78a4:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b78a6:	4604      	mov	r4, r0
   b78a8:	4690      	mov	r8, r2
   b78aa:	461e      	mov	r6, r3
   b78ac:	f001 fc24 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b78b0:	4641      	mov	r1, r8
   b78b2:	4607      	mov	r7, r0
   b78b4:	6860      	ldr	r0, [r4, #4]
   b78b6:	f000 f9bb 	bl	b7c30 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b78ba:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b78bc:	4a49      	ldr	r2, [pc, #292]	; (b79e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b78be:	721d      	strb	r5, [r3, #8]
   b78c0:	2501      	movs	r5, #1
   b78c2:	60da      	str	r2, [r3, #12]
   b78c4:	821d      	strh	r5, [r3, #16]
  spiStart();
   b78c6:	4620      	mov	r0, r4
   b78c8:	f7ff ff3c 	bl	b7744 <_ZN9SdSpiCard8spiStartEv>
   b78cc:	6863      	ldr	r3, [r4, #4]
   b78ce:	4629      	mov	r1, r5
   b78d0:	7d18      	ldrb	r0, [r3, #20]
   b78d2:	f005 fc40 	bl	bd156 <digitalWrite>
   b78d6:	250a      	movs	r5, #10
    spiSend(0XFF);
   b78d8:	6860      	ldr	r0, [r4, #4]
   b78da:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b78dc:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b78de:	f7ff ff08 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b78e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b78e6:	d1f7      	bne.n	b78d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b78e8:	6863      	ldr	r3, [r4, #4]
   b78ea:	4629      	mov	r1, r5
   b78ec:	7d18      	ldrb	r0, [r3, #20]
   b78ee:	f005 fc32 	bl	bd156 <digitalWrite>
  }
   b78f2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b78f4:	2200      	movs	r2, #0
   b78f6:	4611      	mov	r1, r2
   b78f8:	4620      	mov	r0, r4
   b78fa:	f7ff ff8b 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b78fe:	2801      	cmp	r0, #1
   b7900:	4680      	mov	r8, r0
   b7902:	d018      	beq.n	b7936 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7904:	3d01      	subs	r5, #1
   b7906:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b790a:	d107      	bne.n	b791c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b790c:	2320      	movs	r3, #32
  spiStop();
   b790e:	4620      	mov	r0, r4
   b7910:	7023      	strb	r3, [r4, #0]
   b7912:	f7ff ff26 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7916:	2000      	movs	r0, #0
}
   b7918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b791c:	6860      	ldr	r0, [r4, #4]
   b791e:	21fd      	movs	r1, #253	; 0xfd
   b7920:	f7ff fee7 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7924:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7928:	6860      	ldr	r0, [r4, #4]
   b792a:	f7ff fee4 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b792e:	f1b8 0801 	subs.w	r8, r8, #1
   b7932:	d1f9      	bne.n	b7928 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7934:	e7de      	b.n	b78f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7936:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b793a:	2108      	movs	r1, #8
   b793c:	4620      	mov	r0, r4
   b793e:	f7ff ff69 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b7942:	2805      	cmp	r0, #5
   b7944:	d114      	bne.n	b7970 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7946:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b794a:	2500      	movs	r5, #0
   b794c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b794e:	462a      	mov	r2, r5
   b7950:	2129      	movs	r1, #41	; 0x29
   b7952:	4620      	mov	r0, r4
   b7954:	f7ff ff90 	bl	b7878 <_ZN9SdSpiCard8cardAcmdEhm>
   b7958:	4602      	mov	r2, r0
   b795a:	b1d8      	cbz	r0, b7994 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b795c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7960:	4639      	mov	r1, r7
   b7962:	4620      	mov	r0, r4
   b7964:	f7ff feca 	bl	b76fc <_ZN9SdSpiCard10isTimedOutEtt>
   b7968:	2800      	cmp	r0, #0
   b796a:	d0f0      	beq.n	b794e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b796c:	2343      	movs	r3, #67	; 0x43
   b796e:	e7ce      	b.n	b790e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7970:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7972:	6860      	ldr	r0, [r4, #4]
   b7974:	f7ff febf 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7978:	3d01      	subs	r5, #1
   b797a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b797e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7980:	d1f7      	bne.n	b7972 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7982:	28aa      	cmp	r0, #170	; 0xaa
   b7984:	d104      	bne.n	b7990 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7986:	2302      	movs	r3, #2
   b7988:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b798a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b798e:	e7dd      	b.n	b794c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7990:	2325      	movs	r3, #37	; 0x25
   b7992:	e7bc      	b.n	b790e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7994:	7aa3      	ldrb	r3, [r4, #10]
   b7996:	2b02      	cmp	r3, #2
   b7998:	d118      	bne.n	b79cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b799a:	213a      	movs	r1, #58	; 0x3a
   b799c:	4620      	mov	r0, r4
   b799e:	f7ff ff39 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b79a2:	b108      	cbz	r0, b79a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b79a4:	2337      	movs	r3, #55	; 0x37
   b79a6:	e7b2      	b.n	b790e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b79a8:	6860      	ldr	r0, [r4, #4]
   b79aa:	f7ff fea4 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79ae:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b79b2:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b79b4:	bf04      	itt	eq
   b79b6:	2303      	moveq	r3, #3
   b79b8:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b79ba:	6860      	ldr	r0, [r4, #4]
   b79bc:	f7ff fe9b 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79c0:	6860      	ldr	r0, [r4, #4]
   b79c2:	f7ff fe98 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79c6:	6860      	ldr	r0, [r4, #4]
   b79c8:	f7ff fe95 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b79cc:	4620      	mov	r0, r4
   b79ce:	f7ff fec8 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b79d2:	6863      	ldr	r3, [r4, #4]
   b79d4:	7930      	ldrb	r0, [r6, #4]
   b79d6:	68b1      	ldr	r1, [r6, #8]
   b79d8:	89b2      	ldrh	r2, [r6, #12]
   b79da:	821a      	strh	r2, [r3, #16]
   b79dc:	7218      	strb	r0, [r3, #8]
   b79de:	60d9      	str	r1, [r3, #12]
  return true;
   b79e0:	2001      	movs	r0, #1
   b79e2:	e799      	b.n	b7918 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b79e4:	0003d090 	.word	0x0003d090

000b79e8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79e8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b79ea:	7a83      	ldrb	r3, [r0, #10]
   b79ec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b79ee:	bf18      	it	ne
   b79f0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79f2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b79f4:	460a      	mov	r2, r1
   b79f6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79f8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b79fa:	f7ff ff0b 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b79fe:	b130      	cbz	r0, b7a0e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7a00:	2330      	movs	r3, #48	; 0x30
   b7a02:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7a04:	4620      	mov	r0, r4
   b7a06:	f7ff feac 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a0a:	2500      	movs	r5, #0
   b7a0c:	e00b      	b.n	b7a26 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7a0e:	4629      	mov	r1, r5
   b7a10:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a14:	4620      	mov	r0, r4
   b7a16:	f7ff feb7 	bl	b7788 <_ZN9SdSpiCard8readDataEPhj>
   b7a1a:	4605      	mov	r5, r0
   b7a1c:	2800      	cmp	r0, #0
   b7a1e:	d0f1      	beq.n	b7a04 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7a20:	4620      	mov	r0, r4
   b7a22:	f7ff fe9e 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
}
   b7a26:	4628      	mov	r0, r5
   b7a28:	bd38      	pop	{r3, r4, r5, pc}

000b7a2a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a2a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7a2c:	7a83      	ldrb	r3, [r0, #10]
   b7a2e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a30:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7a32:	bf18      	it	ne
   b7a34:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7a36:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a38:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7a3a:	f7ff feeb 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b7a3e:	b130      	cbz	r0, b7a4e <_ZN9SdSpiCard9readStartEm+0x24>
   b7a40:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7a42:	4620      	mov	r0, r4
   b7a44:	7023      	strb	r3, [r4, #0]
   b7a46:	f7ff fe8c 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a4a:	2000      	movs	r0, #0
}
   b7a4c:	bd10      	pop	{r4, pc}
  return true;
   b7a4e:	2001      	movs	r0, #1
   b7a50:	e7fc      	b.n	b7a4c <_ZN9SdSpiCard9readStartEm+0x22>

000b7a52 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7a52:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7a54:	2200      	movs	r2, #0
   b7a56:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7a58:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7a5a:	f7ff fedb 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b7a5e:	b130      	cbz	r0, b7a6e <_ZN9SdSpiCard8readStopEv+0x1c>
   b7a60:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7a62:	4620      	mov	r0, r4
   b7a64:	7023      	strb	r3, [r4, #0]
   b7a66:	f7ff fe7c 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a6a:	2000      	movs	r0, #0
}
   b7a6c:	bd10      	pop	{r4, pc}
  spiStop();
   b7a6e:	4620      	mov	r0, r4
   b7a70:	f7ff fe77 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7a74:	2001      	movs	r0, #1
   b7a76:	e7f9      	b.n	b7a6c <_ZN9SdSpiCard8readStopEv+0x1a>

000b7a78 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a7a:	4604      	mov	r4, r0
   b7a7c:	4616      	mov	r6, r2
   b7a7e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7a80:	f7ff ffd3 	bl	b7a2a <_ZN9SdSpiCard9readStartEm>
   b7a84:	b168      	cbz	r0, b7aa2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7a86:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7a88:	b2ab      	uxth	r3, r5
   b7a8a:	429f      	cmp	r7, r3
   b7a8c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7a90:	d909      	bls.n	b7aa6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7a92:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a96:	4620      	mov	r0, r4
   b7a98:	f7ff fe76 	bl	b7788 <_ZN9SdSpiCard8readDataEPhj>
   b7a9c:	3501      	adds	r5, #1
   b7a9e:	2800      	cmp	r0, #0
   b7aa0:	d1f2      	bne.n	b7a88 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7aa2:	2000      	movs	r0, #0
   b7aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7aa6:	4620      	mov	r0, r4
}
   b7aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7aac:	f7ff bfd1 	b.w	b7a52 <_ZN9SdSpiCard8readStopEv>

000b7ab0 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7ab0:	b538      	push	{r3, r4, r5, lr}
   b7ab2:	4604      	mov	r4, r0
   b7ab4:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7ab6:	6840      	ldr	r0, [r0, #4]
   b7ab8:	f7ff fe1b 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7abc:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7ac0:	6860      	ldr	r0, [r4, #4]
   b7ac2:	4629      	mov	r1, r5
   b7ac4:	f000 f8e6 	bl	b7c94 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7ac8:	6860      	ldr	r0, [r4, #4]
   b7aca:	21ff      	movs	r1, #255	; 0xff
   b7acc:	f7ff fe11 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7ad0:	6860      	ldr	r0, [r4, #4]
   b7ad2:	21ff      	movs	r1, #255	; 0xff
   b7ad4:	f7ff fe0d 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7ad8:	6860      	ldr	r0, [r4, #4]
   b7ada:	f7ff fe0c 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ade:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7ae0:	f000 001f 	and.w	r0, r0, #31
   b7ae4:	2805      	cmp	r0, #5
   b7ae6:	d006      	beq.n	b7af6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7ae8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7aea:	4620      	mov	r0, r4
   b7aec:	7023      	strb	r3, [r4, #0]
   b7aee:	f7ff fe38 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7af2:	2000      	movs	r0, #0
}
   b7af4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7af6:	2001      	movs	r0, #1
   b7af8:	e7fc      	b.n	b7af4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7afa <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7afa:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7afc:	7a83      	ldrb	r3, [r0, #10]
   b7afe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7b00:	bf18      	it	ne
   b7b02:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7b04:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7b06:	460a      	mov	r2, r1
   b7b08:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7b0a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7b0c:	f7ff fe82 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b7b10:	4606      	mov	r6, r0
   b7b12:	b130      	cbz	r0, b7b22 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7b14:	2332      	movs	r3, #50	; 0x32
   b7b16:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b18:	4620      	mov	r0, r4
   b7b1a:	f7ff fe22 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b1e:	2500      	movs	r5, #0
   b7b20:	e01f      	b.n	b7b62 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7b22:	462a      	mov	r2, r5
   b7b24:	21fe      	movs	r1, #254	; 0xfe
   b7b26:	4620      	mov	r0, r4
   b7b28:	f7ff ffc2 	bl	b7ab0 <_ZN9SdSpiCard9writeDataEhPKh>
   b7b2c:	2800      	cmp	r0, #0
   b7b2e:	d0f3      	beq.n	b7b18 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b30:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7b34:	4620      	mov	r0, r4
   b7b36:	f7ff fe58 	bl	b77ea <_ZN9SdSpiCard11waitNotBusyEt>
   b7b3a:	4605      	mov	r5, r0
   b7b3c:	b908      	cbnz	r0, b7b42 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7b3e:	235a      	movs	r3, #90	; 0x5a
   b7b40:	e7e9      	b.n	b7b16 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7b42:	4632      	mov	r2, r6
   b7b44:	210d      	movs	r1, #13
   b7b46:	4620      	mov	r0, r4
   b7b48:	f7ff fe64 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b7b4c:	b108      	cbz	r0, b7b52 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7b4e:	2329      	movs	r3, #41	; 0x29
   b7b50:	e7e1      	b.n	b7b16 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7b52:	6860      	ldr	r0, [r4, #4]
   b7b54:	f7ff fdcf 	bl	b76f6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b58:	2800      	cmp	r0, #0
   b7b5a:	d1f8      	bne.n	b7b4e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7b5c:	4620      	mov	r0, r4
   b7b5e:	f7ff fe00 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
}
   b7b62:	4628      	mov	r0, r5
   b7b64:	bd70      	pop	{r4, r5, r6, pc}

000b7b66 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b66:	b513      	push	{r0, r1, r4, lr}
   b7b68:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b6e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b70:	f7ff fe3b 	bl	b77ea <_ZN9SdSpiCard11waitNotBusyEt>
   b7b74:	9a01      	ldr	r2, [sp, #4]
   b7b76:	b930      	cbnz	r0, b7b86 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7b78:	235b      	movs	r3, #91	; 0x5b
   b7b7a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	f7ff fdf0 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b82:	2000      	movs	r0, #0
   b7b84:	e005      	b.n	b7b92 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7b86:	21fc      	movs	r1, #252	; 0xfc
   b7b88:	4620      	mov	r0, r4
   b7b8a:	f7ff ff91 	bl	b7ab0 <_ZN9SdSpiCard9writeDataEhPKh>
   b7b8e:	2800      	cmp	r0, #0
   b7b90:	d0f4      	beq.n	b7b7c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7b92:	b002      	add	sp, #8
   b7b94:	bd10      	pop	{r4, pc}

000b7b96 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b96:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b98:	7a83      	ldrb	r3, [r0, #10]
   b7b9a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b9c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7b9e:	bf18      	it	ne
   b7ba0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7ba2:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7ba4:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7ba6:	f7ff fe35 	bl	b7814 <_ZN9SdSpiCard11cardCommandEhm>
   b7baa:	b130      	cbz	r0, b7bba <_ZN9SdSpiCard10writeStartEm+0x24>
   b7bac:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7bae:	4620      	mov	r0, r4
   b7bb0:	7023      	strb	r3, [r4, #0]
   b7bb2:	f7ff fdd6 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bb6:	2000      	movs	r0, #0
}
   b7bb8:	bd10      	pop	{r4, pc}
  return true;
   b7bba:	2001      	movs	r0, #1
   b7bbc:	e7fc      	b.n	b7bb8 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7bbe <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7bbe:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7bc0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7bc4:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7bc6:	f7ff fe10 	bl	b77ea <_ZN9SdSpiCard11waitNotBusyEt>
   b7bca:	4605      	mov	r5, r0
   b7bcc:	b930      	cbnz	r0, b7bdc <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7bce:	2356      	movs	r3, #86	; 0x56
   b7bd0:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7bd2:	4620      	mov	r0, r4
   b7bd4:	f7ff fdc5 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7bd8:	4628      	mov	r0, r5
   b7bda:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7bdc:	6860      	ldr	r0, [r4, #4]
   b7bde:	21fd      	movs	r1, #253	; 0xfd
   b7be0:	f7ff fd87 	bl	b76f2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7be4:	e7f5      	b.n	b7bd2 <_ZN9SdSpiCard9writeStopEv+0x14>

000b7be6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7be8:	4604      	mov	r4, r0
   b7bea:	4616      	mov	r6, r2
   b7bec:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7bee:	f7ff ffd2 	bl	b7b96 <_ZN9SdSpiCard10writeStartEm>
   b7bf2:	b170      	cbz	r0, b7c12 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bf4:	2500      	movs	r5, #0
   b7bf6:	42bd      	cmp	r5, r7
   b7bf8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7bfc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bfe:	d004      	beq.n	b7c0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7c00:	f7ff ffb1 	bl	b7b66 <_ZN9SdSpiCard9writeDataEPKh>
   b7c04:	b128      	cbz	r0, b7c12 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7c06:	3501      	adds	r5, #1
   b7c08:	e7f5      	b.n	b7bf6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7c0e:	f7ff bfd6 	b.w	b7bbe <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7c12:	4620      	mov	r0, r4
   b7c14:	f7ff fda5 	bl	b7762 <_ZN9SdSpiCard7spiStopEv>
}
   b7c18:	2000      	movs	r0, #0
   b7c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c1c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7c1c:	4b01      	ldr	r3, [pc, #4]	; (b7c24 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7c1e:	2201      	movs	r2, #1
   b7c20:	701a      	strb	r2, [r3, #0]
}
   b7c22:	4770      	bx	lr
   b7c24:	2003e644 	.word	0x2003e644

000b7c28 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7c28:	1d01      	adds	r1, r0, #4
   b7c2a:	6800      	ldr	r0, [r0, #0]
   b7c2c:	f004 be36 	b.w	bc89c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7c30 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7c30:	b510      	push	{r4, lr}
   b7c32:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7c34:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7c36:	6800      	ldr	r0, [r0, #0]
   b7c38:	f004 fe02 	bl	bc840 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7c3c:	7d20      	ldrb	r0, [r4, #20]
   b7c3e:	2101      	movs	r1, #1
   b7c40:	f005 fa78 	bl	bd134 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7c44:	7d20      	ldrb	r0, [r4, #20]
   b7c46:	2101      	movs	r1, #1
}
   b7c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7c4c:	f005 ba83 	b.w	bd156 <digitalWrite>

000b7c50 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7c50:	6800      	ldr	r0, [r0, #0]
   b7c52:	f004 be09 	b.w	bc868 <_ZN8SPIClass14endTransactionEv>

000b7c56 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7c56:	6800      	ldr	r0, [r0, #0]
   b7c58:	21ff      	movs	r1, #255	; 0xff
   b7c5a:	f004 be8d 	b.w	bc978 <_ZN8SPIClass8transferEh>
	...

000b7c60 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c62:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c64:	4a07      	ldr	r2, [pc, #28]	; (b7c84 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7c66:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c68:	2500      	movs	r5, #0
   b7c6a:	4c07      	ldr	r4, [pc, #28]	; (b7c88 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c6c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c6e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c70:	460a      	mov	r2, r1
   b7c72:	4629      	mov	r1, r5
   b7c74:	f004 fe86 	bl	bc984 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7c78:	7823      	ldrb	r3, [r4, #0]
   b7c7a:	2b00      	cmp	r3, #0
   b7c7c:	d0fc      	beq.n	b7c78 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7c7e:	2000      	movs	r0, #0
   b7c80:	b003      	add	sp, #12
   b7c82:	bd30      	pop	{r4, r5, pc}
   b7c84:	000b7c1d 	.word	0x000b7c1d
   b7c88:	2003e644 	.word	0x2003e644

000b7c8c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7c8c:	6800      	ldr	r0, [r0, #0]
   b7c8e:	f004 be73 	b.w	bc978 <_ZN8SPIClass8transferEh>
	...

000b7c94 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c96:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c98:	4a06      	ldr	r2, [pc, #24]	; (b7cb4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7c9a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c9c:	2500      	movs	r5, #0
   b7c9e:	4c06      	ldr	r4, [pc, #24]	; (b7cb8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7ca0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7ca2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7ca4:	462a      	mov	r2, r5
   b7ca6:	f004 fe6d 	bl	bc984 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7caa:	7823      	ldrb	r3, [r4, #0]
   b7cac:	2b00      	cmp	r3, #0
   b7cae:	d0fc      	beq.n	b7caa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7cb0:	b003      	add	sp, #12
   b7cb2:	bd30      	pop	{r4, r5, pc}
   b7cb4:	000b7c1d 	.word	0x000b7c1d
   b7cb8:	2003e644 	.word	0x2003e644

000b7cbc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cc0:	b085      	sub	sp, #20
   b7cc2:	461f      	mov	r7, r3
   b7cc4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7cc8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7ccc:	eba8 0902 	sub.w	r9, r8, r2
   b7cd0:	eba7 0a01 	sub.w	sl, r7, r1
   b7cd4:	f1b9 0f00 	cmp.w	r9, #0
   b7cd8:	bfb8      	it	lt
   b7cda:	f1c9 0900 	rsblt	r9, r9, #0
   b7cde:	f1ba 0f00 	cmp.w	sl, #0
   b7ce2:	bfb8      	it	lt
   b7ce4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b7ce8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b7cea:	4683      	mov	fp, r0
   b7cec:	460c      	mov	r4, r1
   b7cee:	4615      	mov	r5, r2
    if (steep) {
   b7cf0:	dd04      	ble.n	b7cfc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7cf2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7cf4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b7cf6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b7cf8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b7cfa:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7cfc:	42bc      	cmp	r4, r7
   b7cfe:	dd05      	ble.n	b7d0c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7d00:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7d02:	4645      	mov	r5, r8
   b7d04:	4690      	mov	r8, r2
    if (x0 > x1) {
   b7d06:	4622      	mov	r2, r4
   b7d08:	463c      	mov	r4, r7
   b7d0a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b7d0c:	1b3e      	subs	r6, r7, r4
   b7d0e:	b2b2      	uxth	r2, r6
   b7d10:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b7d12:	eba8 0205 	sub.w	r2, r8, r5
   b7d16:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b7d1a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b7d1e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b7d22:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b7d26:	4545      	cmp	r5, r8
   b7d28:	bfb4      	ite	lt
   b7d2a:	2201      	movlt	r2, #1
   b7d2c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b7d30:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b7d32:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b7d34:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b7d36:	42bc      	cmp	r4, r7
   b7d38:	dc1c      	bgt.n	b7d74 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b7d3a:	f8db 2000 	ldr.w	r2, [fp]
   b7d3e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b7d40:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b7d42:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b7d46:	bfc7      	ittee	gt
   b7d48:	4629      	movgt	r1, r5
   b7d4a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b7d4c:	462a      	movle	r2, r5
   b7d4e:	4621      	movle	r1, r4
   b7d50:	4658      	mov	r0, fp
   b7d52:	47c0      	blx	r8
        }
        err -= dy;
   b7d54:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b7d56:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b7d58:	1ab6      	subs	r6, r6, r2
   b7d5a:	b2b1      	uxth	r1, r6
   b7d5c:	b236      	sxth	r6, r6
        if (err < 0) {
   b7d5e:	2e00      	cmp	r6, #0
   b7d60:	da05      	bge.n	b7d6e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b7d62:	9a02      	ldr	r2, [sp, #8]
   b7d64:	4415      	add	r5, r2
            err += dx;
   b7d66:	9a00      	ldr	r2, [sp, #0]
   b7d68:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b7d6a:	b22d      	sxth	r5, r5
            err += dx;
   b7d6c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7d6e:	3401      	adds	r4, #1
   b7d70:	b224      	sxth	r4, r4
   b7d72:	e7e0      	b.n	b7d36 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7d74:	b005      	add	sp, #20
   b7d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7d7a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b7d7a:	4770      	bx	lr

000b7d7c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7d7c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7d7e:	6804      	ldr	r4, [r0, #0]
   b7d80:	6924      	ldr	r4, [r4, #16]
   b7d82:	46a4      	mov	ip, r4
}
   b7d84:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b7d88:	4760      	bx	ip

000b7d8a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7d8a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7d8c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7d8e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7d92:	9502      	str	r5, [sp, #8]
   b7d94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7d96:	46a4      	mov	ip, r4
}
   b7d98:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b7d9a:	4760      	bx	ip

000b7d9c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7d9c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7d9e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7da0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7da4:	9502      	str	r5, [sp, #8]
   b7da6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b7da8:	46a4      	mov	ip, r4
}
   b7daa:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7dac:	4760      	bx	ip

000b7dae <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7dae:	b470      	push	{r4, r5, r6}
   b7db0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7db4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b7db8:	6804      	ldr	r4, [r0, #0]
   b7dba:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b7dbe:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7dc0:	46a4      	mov	ip, r4
}
   b7dc2:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b7dc4:	4760      	bx	ip

000b7dc6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7dc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7dca:	461c      	mov	r4, r3
    startWrite();
   b7dcc:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b7dce:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7dd2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b7dd4:	4605      	mov	r5, r0
   b7dd6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b7dd8:	3c01      	subs	r4, #1
   b7dda:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b7ddc:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b7dde:	b224      	sxth	r4, r4
    startWrite();
   b7de0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b7de2:	682b      	ldr	r3, [r5, #0]
   b7de4:	f8cd 8004 	str.w	r8, [sp, #4]
   b7de8:	9400      	str	r4, [sp, #0]
   b7dea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b7dec:	4628      	mov	r0, r5
   b7dee:	463b      	mov	r3, r7
   b7df0:	4632      	mov	r2, r6
   b7df2:	4639      	mov	r1, r7
   b7df4:	47a0      	blx	r4
    endWrite();
   b7df6:	682b      	ldr	r3, [r5, #0]
   b7df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7dfa:	4628      	mov	r0, r5
}
   b7dfc:	b002      	add	sp, #8
   b7dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7e02:	4718      	bx	r3

000b7e04 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7e08:	461d      	mov	r5, r3
    startWrite();
   b7e0a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b7e0c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7e10:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b7e12:	4604      	mov	r4, r0
   b7e14:	4617      	mov	r7, r2
   b7e16:	460e      	mov	r6, r1
    startWrite();
   b7e18:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b7e1a:	e9cd 7800 	strd	r7, r8, [sp]
   b7e1e:	6822      	ldr	r2, [r4, #0]
   b7e20:	1e6b      	subs	r3, r5, #1
   b7e22:	4433      	add	r3, r6
   b7e24:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b7e26:	4620      	mov	r0, r4
   b7e28:	b21b      	sxth	r3, r3
   b7e2a:	463a      	mov	r2, r7
   b7e2c:	4631      	mov	r1, r6
   b7e2e:	47a8      	blx	r5
    endWrite();
   b7e30:	6823      	ldr	r3, [r4, #0]
   b7e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e34:	4620      	mov	r0, r4
}
   b7e36:	b002      	add	sp, #8
   b7e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7e3c:	4718      	bx	r3

000b7e3e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7e3e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7e42:	461e      	mov	r6, r3
    startWrite();
   b7e44:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7e46:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b7e4a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7e4c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b7e50:	460c      	mov	r4, r1
   b7e52:	4605      	mov	r5, r0
   b7e54:	4617      	mov	r7, r2
    startWrite();
   b7e56:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b7e58:	4426      	add	r6, r4
   b7e5a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b7e5c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b7e5e:	da0b      	bge.n	b7e78 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b7e60:	f8cd 8000 	str.w	r8, [sp]
   b7e64:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7e68:	4621      	mov	r1, r4
   b7e6a:	464b      	mov	r3, r9
   b7e6c:	463a      	mov	r2, r7
   b7e6e:	4628      	mov	r0, r5
   b7e70:	3401      	adds	r4, #1
   b7e72:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b7e74:	b224      	sxth	r4, r4
   b7e76:	e7f0      	b.n	b7e5a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b7e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e7a:	4628      	mov	r0, r5
}
   b7e7c:	b002      	add	sp, #8
   b7e7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7e82:	4718      	bx	r3

000b7e84 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b7e84:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b7e86:	6802      	ldr	r2, [r0, #0]
   b7e88:	9101      	str	r1, [sp, #4]
   b7e8a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b7e8e:	9100      	str	r1, [sp, #0]
   b7e90:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b7e92:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b7e96:	2200      	movs	r2, #0
   b7e98:	4611      	mov	r1, r2
   b7e9a:	47a0      	blx	r4
}
   b7e9c:	b002      	add	sp, #8
   b7e9e:	bd10      	pop	{r4, pc}

000b7ea0 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b7ea4:	4299      	cmp	r1, r3
        uint16_t color) {
   b7ea6:	4616      	mov	r6, r2
   b7ea8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b7eac:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7eb0:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b7eb2:	4680      	mov	r8, r0
   b7eb4:	460d      	mov	r5, r1
   b7eb6:	461c      	mov	r4, r3
    if(x0 == x1){
   b7eb8:	d113      	bne.n	b7ee2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b7eba:	42be      	cmp	r6, r7
   b7ebc:	bfc8      	it	gt
   b7ebe:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7ec0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b7ec4:	bfc4      	itt	gt
   b7ec6:	463e      	movgt	r6, r7
   b7ec8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7eca:	1c7b      	adds	r3, r7, #1
   b7ecc:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b7ece:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7ed0:	b21b      	sxth	r3, r3
   b7ed2:	4632      	mov	r2, r6
   b7ed4:	4629      	mov	r1, r5
   b7ed6:	4640      	mov	r0, r8
   b7ed8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b7eda:	b003      	add	sp, #12
   b7edc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7ee0:	4760      	bx	ip
    } else if(y0 == y1){
   b7ee2:	42be      	cmp	r6, r7
   b7ee4:	d10a      	bne.n	b7efc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b7ee6:	4299      	cmp	r1, r3
   b7ee8:	bfc2      	ittt	gt
   b7eea:	460b      	movgt	r3, r1
   b7eec:	4625      	movgt	r5, r4
   b7eee:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7ef0:	1c63      	adds	r3, r4, #1
   b7ef2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b7ef6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7ef8:	1b5b      	subs	r3, r3, r5
   b7efa:	e7e9      	b.n	b7ed0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b7efc:	6953      	ldr	r3, [r2, #20]
   b7efe:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b7f00:	e9cd 7900 	strd	r7, r9, [sp]
   b7f04:	f8d8 3000 	ldr.w	r3, [r8]
   b7f08:	4640      	mov	r0, r8
   b7f0a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b7f0c:	4632      	mov	r2, r6
   b7f0e:	4623      	mov	r3, r4
   b7f10:	4629      	mov	r1, r5
   b7f12:	47b8      	blx	r7
        endWrite();
   b7f14:	f8d8 3000 	ldr.w	r3, [r8]
   b7f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f1a:	4640      	mov	r0, r8
}
   b7f1c:	b003      	add	sp, #12
   b7f1e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b7f22:	4718      	bx	r3

000b7f24 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7f24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7f28:	461d      	mov	r5, r3
    startWrite();
   b7f2a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7f2c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b7f30:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7f32:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b7f36:	4604      	mov	r4, r0
   b7f38:	460f      	mov	r7, r1
   b7f3a:	4616      	mov	r6, r2
    startWrite();
   b7f3c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b7f3e:	6823      	ldr	r3, [r4, #0]
   b7f40:	f8cd 8000 	str.w	r8, [sp]
   b7f44:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b7f48:	4632      	mov	r2, r6
   b7f4a:	462b      	mov	r3, r5
   b7f4c:	4639      	mov	r1, r7
   b7f4e:	4620      	mov	r0, r4
   b7f50:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b7f52:	6823      	ldr	r3, [r4, #0]
   b7f54:	f8cd 8000 	str.w	r8, [sp]
   b7f58:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b7f5c:	4432      	add	r2, r6
   b7f5e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b7f62:	4639      	mov	r1, r7
   b7f64:	462b      	mov	r3, r5
   b7f66:	4620      	mov	r0, r4
   b7f68:	b212      	sxth	r2, r2
   b7f6a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b7f6c:	6823      	ldr	r3, [r4, #0]
   b7f6e:	f8cd 8000 	str.w	r8, [sp]
   b7f72:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7f76:	4632      	mov	r2, r6
   b7f78:	464b      	mov	r3, r9
   b7f7a:	4639      	mov	r1, r7
   b7f7c:	4620      	mov	r0, r4
   b7f7e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b7f80:	1e6b      	subs	r3, r5, #1
   b7f82:	19d9      	adds	r1, r3, r7
   b7f84:	6823      	ldr	r3, [r4, #0]
   b7f86:	f8cd 8000 	str.w	r8, [sp]
   b7f8a:	6a1d      	ldr	r5, [r3, #32]
   b7f8c:	4620      	mov	r0, r4
   b7f8e:	464b      	mov	r3, r9
   b7f90:	4632      	mov	r2, r6
   b7f92:	b209      	sxth	r1, r1
   b7f94:	47a8      	blx	r5
    endWrite();
   b7f96:	6823      	ldr	r3, [r4, #0]
   b7f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f9a:	4620      	mov	r0, r4
}
   b7f9c:	b002      	add	sp, #8
   b7f9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7fa2:	4718      	bx	r3

000b7fa4 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b7fa4:	4770      	bx	lr

000b7fa6 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b7fa6:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b7faa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b7fae:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b7fb0:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b7fb2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7fb6:	bf59      	ittee	pl
   b7fb8:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b7fba:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b7fbc:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b7fbe:	81c3      	strhmi	r3, [r0, #14]
}
   b7fc0:	4770      	bx	lr
	...

000b7fc4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b7fc4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b7fc6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b7fc8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b7fca:	4a07      	ldr	r2, [pc, #28]	; (b7fe8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b7fcc:	4d07      	ldr	r5, [pc, #28]	; (b7fec <_ZN12Adafruit_GFXC1Ess+0x28>)
   b7fce:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b7fd0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b7fd2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b7fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7fd8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b7fdc:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b7fde:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b7fe0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b7fe2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b7fe4:	6204      	str	r4, [r0, #32]
}
   b7fe6:	bd30      	pop	{r4, r5, pc}
   b7fe8:	01000101 	.word	0x01000101
   b7fec:	000c0ec4 	.word	0x000c0ec4

000b7ff0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b7ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ff4:	b089      	sub	sp, #36	; 0x24
   b7ff6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b7ffa:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b7ffc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8000:	9304      	str	r3, [sp, #16]
   b8002:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8006:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8008:	9305      	str	r3, [sp, #20]
   b800a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b800e:	4604      	mov	r4, r0
    startWrite();
   b8010:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8012:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8016:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b801a:	bf48      	it	mi
   b801c:	f108 020e 	addmi.w	r2, r8, #14
   b8020:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8024:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b8026:	4635      	mov	r5, r6
   b8028:	9b03      	ldr	r3, [sp, #12]
   b802a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b802c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8030:	189a      	adds	r2, r3, r2
   b8032:	9b05      	ldr	r3, [sp, #20]
   b8034:	428b      	cmp	r3, r1
   b8036:	b212      	sxth	r2, r2
   b8038:	dd27      	ble.n	b808a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b803a:	9b04      	ldr	r3, [sp, #16]
   b803c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b803e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8042:	9306      	str	r3, [sp, #24]
   b8044:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8048:	4580      	cmp	r8, r0
   b804a:	fa1f f189 	uxth.w	r1, r9
   b804e:	dd17      	ble.n	b8080 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8050:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8052:	bf05      	ittet	eq
   b8054:	9b06      	ldreq	r3, [sp, #24]
   b8056:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8058:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b805a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b805c:	bf18      	it	ne
   b805e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8060:	062b      	lsls	r3, r5, #24
   b8062:	d50a      	bpl.n	b807a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8064:	9b02      	ldr	r3, [sp, #8]
   b8066:	6820      	ldr	r0, [r4, #0]
   b8068:	9207      	str	r2, [sp, #28]
   b806a:	4419      	add	r1, r3
   b806c:	6983      	ldr	r3, [r0, #24]
   b806e:	b209      	sxth	r1, r1
   b8070:	461f      	mov	r7, r3
   b8072:	4620      	mov	r0, r4
   b8074:	4653      	mov	r3, sl
   b8076:	47b8      	blx	r7
   b8078:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b807a:	f109 0901 	add.w	r9, r9, #1
   b807e:	e7e1      	b.n	b8044 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8080:	9b01      	ldr	r3, [sp, #4]
   b8082:	3301      	adds	r3, #1
   b8084:	9301      	str	r3, [sp, #4]
   b8086:	445e      	add	r6, fp
   b8088:	e7ce      	b.n	b8028 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b808a:	6823      	ldr	r3, [r4, #0]
   b808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b808e:	4620      	mov	r0, r4
}
   b8090:	b009      	add	sp, #36	; 0x24
   b8092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8096:	4718      	bx	r3

000b8098 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b809c:	ed2d 8b02 	vpush	{d8}
   b80a0:	b091      	sub	sp, #68	; 0x44
   b80a2:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b80a4:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b80a6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b80aa:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b80ae:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b80b2:	9103      	str	r1, [sp, #12]
   b80b4:	461f      	mov	r7, r3
   b80b6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b80ba:	9304      	str	r3, [sp, #16]
   b80bc:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b80be:	2a00      	cmp	r2, #0
   b80c0:	f040 80c5 	bne.w	b824e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b80c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b80c8:	428b      	cmp	r3, r1
   b80ca:	f340 814c 	ble.w	b8366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b80ce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b80d2:	42b3      	cmp	r3, r6
   b80d4:	f340 8147 	ble.w	b8366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b80d8:	2306      	movs	r3, #6
   b80da:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b80de:	2b00      	cmp	r3, #0
   b80e0:	f340 8141 	ble.w	b8366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b80e4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b80e8:	2b00      	cmp	r3, #0
   b80ea:	f340 813c 	ble.w	b8366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b80ee:	7f03      	ldrb	r3, [r0, #28]
   b80f0:	b91b      	cbnz	r3, b80fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b80f2:	2faf      	cmp	r7, #175	; 0xaf
   b80f4:	bf84      	itt	hi
   b80f6:	3701      	addhi	r7, #1
   b80f8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b80fa:	f8db 3000 	ldr.w	r3, [fp]
   b80fe:	4658      	mov	r0, fp
   b8100:	695b      	ldr	r3, [r3, #20]
   b8102:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8104:	2205      	movs	r2, #5
   b8106:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8108:	2200      	movs	r2, #0
   b810a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b810c:	4a98      	ldr	r2, [pc, #608]	; (b8370 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b810e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8112:	18d3      	adds	r3, r2, r3
   b8114:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8116:	b2b3      	uxth	r3, r6
   b8118:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b811a:	9a05      	ldr	r2, [sp, #20]
   b811c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b811e:	5c9b      	ldrb	r3, [r3, r2]
   b8120:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8122:	b2ab      	uxth	r3, r5
   b8124:	930b      	str	r3, [sp, #44]	; 0x2c
   b8126:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b812a:	9308      	str	r3, [sp, #32]
   b812c:	9b03      	ldr	r3, [sp, #12]
   b812e:	fb02 f905 	mul.w	r9, r2, r5
   b8132:	fa19 f983 	uxtah	r9, r9, r3
   b8136:	fa0f f389 	sxth.w	r3, r9
   b813a:	ee08 3a10 	vmov	s16, r3
   b813e:	2308      	movs	r3, #8
   b8140:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8142:	9b03      	ldr	r3, [sp, #12]
   b8144:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8148:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b814c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8150:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b8152:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b8156:	07d2      	lsls	r2, r2, #31
   b8158:	d552      	bpl.n	b8200 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b815a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b815c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8160:	d13e      	bne.n	b81e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b8162:	2c01      	cmp	r4, #1
   b8164:	d13c      	bne.n	b81e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b8166:	699b      	ldr	r3, [r3, #24]
   b8168:	9906      	ldr	r1, [sp, #24]
   b816a:	461f      	mov	r7, r3
   b816c:	9b04      	ldr	r3, [sp, #16]
   b816e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8170:	b212      	sxth	r2, r2
   b8172:	4651      	mov	r1, sl
   b8174:	4658      	mov	r0, fp
   b8176:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8178:	f109 0301 	add.w	r3, r9, #1
   b817c:	fa4f f983 	sxtb.w	r9, r3
   b8180:	9b07      	ldr	r3, [sp, #28]
   b8182:	085b      	lsrs	r3, r3, #1
   b8184:	9307      	str	r3, [sp, #28]
   b8186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8188:	3b01      	subs	r3, #1
   b818a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b818e:	930a      	str	r3, [sp, #40]	; 0x28
   b8190:	d1de      	bne.n	b8150 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8192:	9f05      	ldr	r7, [sp, #20]
   b8194:	3701      	adds	r7, #1
   b8196:	b27b      	sxtb	r3, r7
   b8198:	9305      	str	r3, [sp, #20]
   b819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b819c:	3b01      	subs	r3, #1
   b819e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b81a2:	9309      	str	r3, [sp, #36]	; 0x24
   b81a4:	d1b9      	bne.n	b811a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b81a6:	9b04      	ldr	r3, [sp, #16]
   b81a8:	4543      	cmp	r3, r8
   b81aa:	d00f      	beq.n	b81cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b81ac:	2d01      	cmp	r5, #1
   b81ae:	f8db 3000 	ldr.w	r3, [fp]
   b81b2:	d13b      	bne.n	b822c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b81b4:	2c01      	cmp	r4, #1
   b81b6:	d139      	bne.n	b822c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b81b8:	9908      	ldr	r1, [sp, #32]
   b81ba:	f8cd 8000 	str.w	r8, [sp]
   b81be:	3105      	adds	r1, #5
   b81c0:	6a1c      	ldr	r4, [r3, #32]
   b81c2:	4632      	mov	r2, r6
   b81c4:	2308      	movs	r3, #8
   b81c6:	b209      	sxth	r1, r1
   b81c8:	4658      	mov	r0, fp
   b81ca:	47a0      	blx	r4
        endWrite();
   b81cc:	f8db 3000 	ldr.w	r3, [fp]
   b81d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b81d2:	4658      	mov	r0, fp
}
   b81d4:	b011      	add	sp, #68	; 0x44
   b81d6:	ecbd 8b02 	vpop	{d8}
   b81da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b81de:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b81e0:	9906      	ldr	r1, [sp, #24]
   b81e2:	fb14 f202 	smulbb	r2, r4, r2
   b81e6:	440a      	add	r2, r1
   b81e8:	9904      	ldr	r1, [sp, #16]
   b81ea:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b81ec:	9400      	str	r4, [sp, #0]
   b81ee:	69db      	ldr	r3, [r3, #28]
   b81f0:	ee18 1a10 	vmov	r1, s16
   b81f4:	461f      	mov	r7, r3
   b81f6:	b212      	sxth	r2, r2
   b81f8:	462b      	mov	r3, r5
   b81fa:	4658      	mov	r0, fp
   b81fc:	47b8      	blx	r7
   b81fe:	e7bb      	b.n	b8178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8200:	9a04      	ldr	r2, [sp, #16]
   b8202:	4542      	cmp	r2, r8
   b8204:	d0b8      	beq.n	b8178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8206:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8208:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b820c:	d107      	bne.n	b821e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b820e:	2c01      	cmp	r4, #1
   b8210:	d105      	bne.n	b821e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8212:	699b      	ldr	r3, [r3, #24]
   b8214:	9906      	ldr	r1, [sp, #24]
   b8216:	461f      	mov	r7, r3
   b8218:	440a      	add	r2, r1
   b821a:	4643      	mov	r3, r8
   b821c:	e7a8      	b.n	b8170 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b821e:	9906      	ldr	r1, [sp, #24]
   b8220:	f8cd 8004 	str.w	r8, [sp, #4]
   b8224:	fb14 f202 	smulbb	r2, r4, r2
   b8228:	440a      	add	r2, r1
   b822a:	e7df      	b.n	b81ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b822c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b822e:	f8cd 8004 	str.w	r8, [sp, #4]
   b8232:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b8236:	9a08      	ldr	r2, [sp, #32]
   b8238:	00e4      	lsls	r4, r4, #3
   b823a:	440a      	add	r2, r1
   b823c:	4611      	mov	r1, r2
   b823e:	9400      	str	r4, [sp, #0]
   b8240:	69dc      	ldr	r4, [r3, #28]
   b8242:	4632      	mov	r2, r6
   b8244:	462b      	mov	r3, r5
   b8246:	b209      	sxth	r1, r1
   b8248:	4658      	mov	r0, fp
   b824a:	47a0      	blx	r4
        endWrite();
   b824c:	e7be      	b.n	b81cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b824e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8250:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8252:	6812      	ldr	r2, [r2, #0]
   b8254:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8256:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8258:	b2ff      	uxtb	r7, r7
   b825a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b825e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8262:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8264:	789a      	ldrb	r2, [r3, #2]
   b8266:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8268:	78da      	ldrb	r2, [r3, #3]
   b826a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b826c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b826e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8272:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8276:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8278:	d801      	bhi.n	b827e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b827a:	2c01      	cmp	r4, #1
   b827c:	d957      	bls.n	b832e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b827e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b8282:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8284:	fa0f f38a 	sxth.w	r3, sl
   b8288:	9307      	str	r3, [sp, #28]
        startWrite();
   b828a:	f8db 3000 	ldr.w	r3, [fp]
   b828e:	4658      	mov	r0, fp
   b8290:	695b      	ldr	r3, [r3, #20]
   b8292:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8294:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8296:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b829a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b829c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b82a0:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b82a2:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82a4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b82a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b82a8:	429f      	cmp	r7, r3
   b82aa:	d28f      	bcs.n	b81cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82ac:	9b07      	ldr	r3, [sp, #28]
   b82ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b82b0:	443b      	add	r3, r7
   b82b2:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b82b6:	2200      	movs	r2, #0
   b82b8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82bc:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82be:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82c2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82c6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82ca:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b82cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b82ce:	9905      	ldr	r1, [sp, #20]
   b82d0:	4291      	cmp	r1, r2
   b82d2:	d241      	bcs.n	b8358 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b82d4:	1c5a      	adds	r2, r3, #1
   b82d6:	b2d2      	uxtb	r2, r2
   b82d8:	075b      	lsls	r3, r3, #29
   b82da:	920d      	str	r2, [sp, #52]	; 0x34
   b82dc:	d107      	bne.n	b82ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b82de:	9b06      	ldr	r3, [sp, #24]
   b82e0:	9906      	ldr	r1, [sp, #24]
   b82e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b82e4:	3301      	adds	r3, #1
   b82e6:	b29b      	uxth	r3, r3
   b82e8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b82ec:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b82ee:	f019 0f80 	tst.w	r9, #128	; 0x80
   b82f2:	d012      	beq.n	b831a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b82f4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82f6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b82fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b82fe:	d11a      	bne.n	b8336 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8300:	2c01      	cmp	r4, #1
   b8302:	d118      	bne.n	b8336 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8306:	699b      	ldr	r3, [r3, #24]
   b8308:	4411      	add	r1, r2
   b830a:	9a05      	ldr	r2, [sp, #20]
   b830c:	4411      	add	r1, r2
   b830e:	461e      	mov	r6, r3
   b8310:	4652      	mov	r2, sl
   b8312:	9b04      	ldr	r3, [sp, #16]
   b8314:	b209      	sxth	r1, r1
   b8316:	4658      	mov	r0, fp
   b8318:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b831a:	9e05      	ldr	r6, [sp, #20]
   b831c:	3601      	adds	r6, #1
   b831e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8320:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8324:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b8326:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b832a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b832c:	e7ce      	b.n	b82cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b832e:	2300      	movs	r3, #0
   b8330:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8334:	e7a9      	b.n	b828a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8336:	9805      	ldr	r0, [sp, #20]
   b8338:	9a08      	ldr	r2, [sp, #32]
   b833a:	4402      	add	r2, r0
   b833c:	fb02 1105 	mla	r1, r2, r5, r1
   b8340:	9a04      	ldr	r2, [sp, #16]
   b8342:	e9cd 4200 	strd	r4, r2, [sp]
   b8346:	69db      	ldr	r3, [r3, #28]
   b8348:	ee18 2a10 	vmov	r2, s16
   b834c:	461e      	mov	r6, r3
   b834e:	b209      	sxth	r1, r1
   b8350:	462b      	mov	r3, r5
   b8352:	4658      	mov	r0, fp
   b8354:	47b0      	blx	r6
   b8356:	e7e0      	b.n	b831a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8358:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b835a:	3701      	adds	r7, #1
   b835c:	4498      	add	r8, r3
   b835e:	fa5f f888 	uxtb.w	r8, r8
   b8362:	b2ff      	uxtb	r7, r7
   b8364:	e79f      	b.n	b82a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8366:	b011      	add	sp, #68	; 0x44
   b8368:	ecbd 8b02 	vpop	{d8}
   b836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8370:	000c09bc 	.word	0x000c09bc

000b8374 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8374:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8376:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8378:	b085      	sub	sp, #20
   b837a:	4604      	mov	r4, r0
   b837c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b837e:	2a00      	cmp	r2, #0
   b8380:	d134      	bne.n	b83ec <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b8382:	290a      	cmp	r1, #10
   b8384:	d108      	bne.n	b8398 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8386:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8388:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b838a:	7e42      	ldrb	r2, [r0, #25]
   b838c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8390:	8263      	strh	r3, [r4, #18]
}
   b8392:	2001      	movs	r0, #1
   b8394:	b005      	add	sp, #20
   b8396:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8398:	290d      	cmp	r1, #13
   b839a:	d0fa      	beq.n	b8392 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b839c:	7ee1      	ldrb	r1, [r4, #27]
   b839e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b83a0:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b83a2:	b171      	cbz	r1, b83c2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b83a4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b83a8:	2106      	movs	r1, #6
   b83aa:	fb11 6100 	smlabb	r1, r1, r0, r6
   b83ae:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b83b2:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b83b4:	bfc1      	itttt	gt
   b83b6:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b83ba:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b83bc:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b83c0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b83c2:	8ae2      	ldrh	r2, [r4, #22]
   b83c4:	9201      	str	r2, [sp, #4]
   b83c6:	8aa2      	ldrh	r2, [r4, #20]
   b83c8:	9200      	str	r2, [sp, #0]
   b83ca:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b83ce:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b83d2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b83d6:	4620      	mov	r0, r4
   b83d8:	f7ff fe5e 	bl	b8098 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b83dc:	7e23      	ldrb	r3, [r4, #24]
   b83de:	8a22      	ldrh	r2, [r4, #16]
   b83e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b83e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b83e8:	8223      	strh	r3, [r4, #16]
   b83ea:	e7d2      	b.n	b8392 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b83ec:	290a      	cmp	r1, #10
   b83ee:	d107      	bne.n	b8400 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b83f0:	2300      	movs	r3, #0
   b83f2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b83f4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b83f6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b83f8:	8a43      	ldrh	r3, [r0, #18]
   b83fa:	fb01 3302 	mla	r3, r1, r2, r3
   b83fe:	e7c7      	b.n	b8390 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8400:	290d      	cmp	r1, #13
   b8402:	d0c6      	beq.n	b8392 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8404:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8406:	42a9      	cmp	r1, r5
   b8408:	d3c3      	bcc.n	b8392 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b840a:	7a51      	ldrb	r1, [r2, #9]
   b840c:	4299      	cmp	r1, r3
   b840e:	d3c0      	bcc.n	b8392 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8410:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8412:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8414:	b2ed      	uxtb	r5, r5
   b8416:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b841a:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b841c:	b328      	cbz	r0, b846a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b841e:	78e9      	ldrb	r1, [r5, #3]
   b8420:	b319      	cbz	r1, b846a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8422:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8424:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8426:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8428:	b191      	cbz	r1, b8450 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b842a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b842e:	4408      	add	r0, r1
   b8430:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8434:	fb06 1100 	mla	r1, r6, r0, r1
   b8438:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b843c:	4281      	cmp	r1, r0
   b843e:	dd07      	ble.n	b8450 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8440:	2000      	movs	r0, #0
   b8442:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8444:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8448:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b844a:	fb02 1207 	mla	r2, r2, r7, r1
   b844e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8450:	8ae2      	ldrh	r2, [r4, #22]
   b8452:	9201      	str	r2, [sp, #4]
   b8454:	8aa2      	ldrh	r2, [r4, #20]
   b8456:	9200      	str	r2, [sp, #0]
   b8458:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b845c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8460:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8464:	4620      	mov	r0, r4
   b8466:	f7ff fe17 	bl	b8098 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b846a:	7929      	ldrb	r1, [r5, #4]
   b846c:	7e22      	ldrb	r2, [r4, #24]
   b846e:	8a23      	ldrh	r3, [r4, #16]
   b8470:	fb01 3302 	mla	r3, r1, r2, r3
   b8474:	e7b8      	b.n	b83e8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b8476 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8476:	2901      	cmp	r1, #1
   b8478:	bf38      	it	cc
   b847a:	2101      	movcc	r1, #1
   b847c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b847e:	7641      	strb	r1, [r0, #25]
}
   b8480:	4770      	bx	lr
	...

000b8484 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8484:	b510      	push	{r4, lr}
   b8486:	4b04      	ldr	r3, [pc, #16]	; (b8498 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b8488:	6003      	str	r3, [r0, #0]
   b848a:	4604      	mov	r4, r0
  if(buffer) {
   b848c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b848e:	b108      	cbz	r0, b8494 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b8490:	f001 f8a6 	bl	b95e0 <free>
    buffer = NULL;
  }
}
   b8494:	4620      	mov	r0, r4
   b8496:	bd10      	pop	{r4, pc}
   b8498:	000c13bc 	.word	0x000c13bc

000b849c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b849c:	b510      	push	{r4, lr}
   b849e:	4604      	mov	r4, r0
}
   b84a0:	f7ff fff0 	bl	b8484 <_ZN16Adafruit_SSD1306D1Ev>
   b84a4:	4620      	mov	r0, r4
   b84a6:	2150      	movs	r1, #80	; 0x50
   b84a8:	f7fb fdf9 	bl	b409e <_ZdlPvj>
   b84ac:	4620      	mov	r0, r4
   b84ae:	bd10      	pop	{r4, pc}

000b84b0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b84b0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b84b2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b84b4:	db4b      	blt.n	b854e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b84b6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b84ba:	428c      	cmp	r4, r1
   b84bc:	dd47      	ble.n	b854e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b84be:	2a00      	cmp	r2, #0
   b84c0:	db45      	blt.n	b854e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b84c2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b84c6:	4294      	cmp	r4, r2
   b84c8:	dd41      	ble.n	b854e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b84ca:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b84cc:	2c02      	cmp	r4, #2
   b84ce:	d01f      	beq.n	b8510 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b84d0:	2c03      	cmp	r4, #3
   b84d2:	d026      	beq.n	b8522 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b84d4:	2c01      	cmp	r4, #1
   b84d6:	d104      	bne.n	b84e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b84d8:	8904      	ldrh	r4, [r0, #8]
   b84da:	43d2      	mvns	r2, r2
   b84dc:	4414      	add	r4, r2
      break;
   b84de:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b84e0:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b84e2:	2b01      	cmp	r3, #1
   b84e4:	d023      	beq.n	b852e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b84e6:	2b02      	cmp	r3, #2
   b84e8:	d032      	beq.n	b8550 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b84ea:	bb83      	cbnz	r3, b854e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b84ec:	2a00      	cmp	r2, #0
   b84ee:	4613      	mov	r3, r2
   b84f0:	8904      	ldrh	r4, [r0, #8]
   b84f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b84f4:	bfb8      	it	lt
   b84f6:	1dd3      	addlt	r3, r2, #7
   b84f8:	10db      	asrs	r3, r3, #3
   b84fa:	fb13 1104 	smlabb	r1, r3, r4, r1
   b84fe:	f002 0207 	and.w	r2, r2, #7
   b8502:	2301      	movs	r3, #1
   b8504:	4093      	lsls	r3, r2
   b8506:	5c42      	ldrb	r2, [r0, r1]
   b8508:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b850c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b850e:	e01e      	b.n	b854e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b8510:	8904      	ldrh	r4, [r0, #8]
   b8512:	3c01      	subs	r4, #1
   b8514:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b8516:	8944      	ldrh	r4, [r0, #10]
   b8518:	43d2      	mvns	r2, r2
   b851a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b851c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b851e:	b212      	sxth	r2, r2
      break;
   b8520:	e7df      	b.n	b84e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b8522:	8944      	ldrh	r4, [r0, #10]
   b8524:	3c01      	subs	r4, #1
   b8526:	1a64      	subs	r4, r4, r1
      break;
   b8528:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b852a:	b222      	sxth	r2, r4
      break;
   b852c:	e7d9      	b.n	b84e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b852e:	2a00      	cmp	r2, #0
   b8530:	8904      	ldrh	r4, [r0, #8]
   b8532:	4613      	mov	r3, r2
   b8534:	bfb8      	it	lt
   b8536:	1dd3      	addlt	r3, r2, #7
   b8538:	10db      	asrs	r3, r3, #3
   b853a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b853e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b8540:	f002 0007 	and.w	r0, r2, #7
   b8544:	2201      	movs	r2, #1
   b8546:	4082      	lsls	r2, r0
   b8548:	5c58      	ldrb	r0, [r3, r1]
   b854a:	4302      	orrs	r2, r0
   b854c:	545a      	strb	r2, [r3, r1]
}
   b854e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b8550:	2a00      	cmp	r2, #0
   b8552:	4613      	mov	r3, r2
   b8554:	8904      	ldrh	r4, [r0, #8]
   b8556:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8558:	bfb8      	it	lt
   b855a:	1dd3      	addlt	r3, r2, #7
   b855c:	10db      	asrs	r3, r3, #3
   b855e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b8562:	f002 0207 	and.w	r2, r2, #7
   b8566:	2301      	movs	r3, #1
   b8568:	fa03 f202 	lsl.w	r2, r3, r2
   b856c:	5c43      	ldrb	r3, [r0, r1]
   b856e:	405a      	eors	r2, r3
   b8570:	e7cc      	b.n	b850c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b8574 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b8574:	b570      	push	{r4, r5, r6, lr}
   b8576:	4604      	mov	r4, r0
   b8578:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b857a:	2600      	movs	r6, #0
   b857c:	f7ff fd22 	bl	b7fc4 <_ZN12Adafruit_GFXC1Ess>
   b8580:	4b11      	ldr	r3, [pc, #68]	; (b85c8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b8582:	6023      	str	r3, [r4, #0]
   b8584:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b8586:	b915      	cbnz	r5, b858e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b8588:	f004 fe28 	bl	bd1dc <_Z19__fetch_global_Wirev>
   b858c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b858e:	23ff      	movs	r3, #255	; 0xff
   b8590:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b8594:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b8598:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b859c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b85a0:	4b0a      	ldr	r3, [pc, #40]	; (b85cc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b85a2:	63a3      	str	r3, [r4, #56]	; 0x38
   b85a4:	2301      	movs	r3, #1
   b85a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b85aa:	9b05      	ldr	r3, [sp, #20]
   b85ac:	64a3      	str	r3, [r4, #72]	; 0x48
   b85ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b85b2:	9b06      	ldr	r3, [sp, #24]
   b85b4:	86a2      	strh	r2, [r4, #52]	; 0x34
   b85b6:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b85ba:	6426      	str	r6, [r4, #64]	; 0x40
   b85bc:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b85c0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b85c2:	4620      	mov	r0, r4
   b85c4:	bd70      	pop	{r4, r5, r6, pc}
   b85c6:	bf00      	nop
   b85c8:	000c13bc 	.word	0x000c13bc
   b85cc:	000c0974 	.word	0x000c0974

000b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b85d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85d2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b85d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b85d6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b85d8:	b190      	cbz	r0, b8600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b85da:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b85de:	f003 ff23 	bl	bc428 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b85e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b85e4:	6803      	ldr	r3, [r0, #0]
   b85e6:	2100      	movs	r1, #0
   b85e8:	689b      	ldr	r3, [r3, #8]
   b85ea:	4798      	blx	r3
    WIRE_WRITE(c);
   b85ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b85ee:	6803      	ldr	r3, [r0, #0]
   b85f0:	4629      	mov	r1, r5
   b85f2:	689b      	ldr	r3, [r3, #8]
   b85f4:	4798      	blx	r3
    wire->endTransmission();
   b85f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b85f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b85fc:	f003 bf1b 	b.w	bc436 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b8600:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8604:	4601      	mov	r1, r0
   b8606:	b298      	uxth	r0, r3
   b8608:	f004 fda5 	bl	bd156 <digitalWrite>
  if(spi) {
   b860c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b860e:	b120      	cbz	r0, b861a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b8610:	4629      	mov	r1, r5
}
   b8612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b8616:	f004 b9af 	b.w	bc978 <_ZN8SPIClass8transferEh>
   b861a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b861c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b861e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8622:	ea05 0107 	and.w	r1, r5, r7
   b8626:	b280      	uxth	r0, r0
   b8628:	f004 fd95 	bl	bd156 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b862c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8630:	2101      	movs	r1, #1
   b8632:	b280      	uxth	r0, r0
   b8634:	f004 fd8f 	bl	bd156 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8638:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b863c:	2100      	movs	r1, #0
   b863e:	b280      	uxth	r0, r0
   b8640:	f004 fd89 	bl	bd156 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8644:	3e01      	subs	r6, #1
   b8646:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b864a:	d1e8      	bne.n	b861e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b864e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b864e:	b538      	push	{r3, r4, r5, lr}
   b8650:	4604      	mov	r4, r0
  TRANSACTION_START
   b8652:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b8654:	460d      	mov	r5, r1
  TRANSACTION_START
   b8656:	b180      	cbz	r0, b867a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b8658:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b865a:	f003 fed7 	bl	bc40c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b865e:	2d00      	cmp	r5, #0
   b8660:	4620      	mov	r0, r4
   b8662:	bf14      	ite	ne
   b8664:	21a7      	movne	r1, #167	; 0xa7
   b8666:	21a6      	moveq	r1, #166	; 0xa6
   b8668:	f7ff ffb2 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b866c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b866e:	b188      	cbz	r0, b8694 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b8670:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8676:	f003 bec9 	b.w	bc40c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b867a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b867c:	b118      	cbz	r0, b8686 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b867e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8682:	f004 f90b 	bl	bc89c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8686:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b868a:	2100      	movs	r1, #0
   b868c:	b280      	uxth	r0, r0
   b868e:	f004 fd62 	bl	bd156 <digitalWrite>
   b8692:	e7e4      	b.n	b865e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b8694:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8698:	2101      	movs	r1, #1
   b869a:	b280      	uxth	r0, r0
   b869c:	f004 fd5b 	bl	bd156 <digitalWrite>
   b86a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b86a2:	b118      	cbz	r0, b86ac <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b86a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b86a8:	f004 b8de 	b.w	bc868 <_ZN8SPIClass14endTransactionEv>
}
   b86ac:	bd38      	pop	{r3, r4, r5, pc}

000b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b86ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b86b2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b86b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b86b6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b86b8:	188f      	adds	r7, r1, r2
   b86ba:	b340      	cbz	r0, b870e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b86bc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b86c0:	f003 feb2 	bl	bc428 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b86c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b86c6:	6803      	ldr	r3, [r0, #0]
   b86c8:	2100      	movs	r1, #0
   b86ca:	689b      	ldr	r3, [r3, #8]
   b86cc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b86ce:	2601      	movs	r6, #1
    while(n--) {
   b86d0:	42af      	cmp	r7, r5
        wire->endTransmission();
   b86d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b86d4:	d017      	beq.n	b8706 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b86d6:	2e1f      	cmp	r6, #31
   b86d8:	d90c      	bls.n	b86f4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b86da:	f003 feac 	bl	bc436 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b86de:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b86e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b86e4:	f003 fea0 	bl	bc428 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b86e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b86ea:	6803      	ldr	r3, [r0, #0]
   b86ec:	2100      	movs	r1, #0
   b86ee:	689b      	ldr	r3, [r3, #8]
   b86f0:	4798      	blx	r3
        bytesOut = 1;
   b86f2:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b86f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b86f6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b86fa:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b86fc:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b86fe:	689b      	ldr	r3, [r3, #8]
   b8700:	4798      	blx	r3
      bytesOut++;
   b8702:	b2f6      	uxtb	r6, r6
    while(n--) {
   b8704:	e7e4      	b.n	b86d0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b8706:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b870a:	f003 be94 	b.w	bc436 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b870e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8712:	4601      	mov	r1, r0
   b8714:	b298      	uxth	r0, r3
   b8716:	f004 fd1e 	bl	bd156 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b871a:	42bd      	cmp	r5, r7
   b871c:	d022      	beq.n	b8764 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b871e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b8720:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8724:	b118      	cbz	r0, b872e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b8726:	4649      	mov	r1, r9
   b8728:	f004 f926 	bl	bc978 <_ZN8SPIClass8transferEh>
   b872c:	e7f5      	b.n	b871a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b872e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8730:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8734:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8738:	ea09 0108 	and.w	r1, r9, r8
   b873c:	b280      	uxth	r0, r0
   b873e:	f004 fd0a 	bl	bd156 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8742:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8746:	2101      	movs	r1, #1
   b8748:	b280      	uxth	r0, r0
   b874a:	f004 fd04 	bl	bd156 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b874e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8752:	2100      	movs	r1, #0
   b8754:	b280      	uxth	r0, r0
   b8756:	f004 fcfe 	bl	bd156 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b875a:	3e01      	subs	r6, #1
   b875c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8760:	d1e8      	bne.n	b8734 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b8762:	e7da      	b.n	b871a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b8764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8768 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b8768:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b876c:	1dda      	adds	r2, r3, #7
   b876e:	bf48      	it	mi
   b8770:	f103 020e 	addmi.w	r2, r3, #14
   b8774:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b8778:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b877a:	10d2      	asrs	r2, r2, #3
   b877c:	435a      	muls	r2, r3
   b877e:	2100      	movs	r1, #0
   b8780:	f005 bc85 	b.w	be08e <memset>

000b8784 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b8784:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8788:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b878a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b878c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b8790:	4604      	mov	r4, r0
   b8792:	460f      	mov	r7, r1
   b8794:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8796:	b1c3      	cbz	r3, b87ca <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b8798:	4620      	mov	r0, r4
   b879a:	f7ff ffe5 	bl	b8768 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b879e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b87a2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b87a6:	2820      	cmp	r0, #32
   b87a8:	dc21      	bgt.n	b87ee <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b87aa:	2320      	movs	r3, #32
   b87ac:	2201      	movs	r2, #1
   b87ae:	3820      	subs	r0, #32
   b87b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b87b4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b87b8:	2373      	movs	r3, #115	; 0x73
   b87ba:	3973      	subs	r1, #115	; 0x73
   b87bc:	9300      	str	r3, [sp, #0]
   b87be:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b87c2:	4b89      	ldr	r3, [pc, #548]	; (b89e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b87c4:	f340 024f 	sbfx	r2, r0, #1, #16
   b87c8:	e021      	b.n	b880e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b87ca:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b87ce:	1dd8      	adds	r0, r3, #7
   b87d0:	bf48      	it	mi
   b87d2:	f103 000e 	addmi.w	r0, r3, #14
   b87d6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b87da:	10c0      	asrs	r0, r0, #3
   b87dc:	4358      	muls	r0, r3
   b87de:	f000 fef7 	bl	b95d0 <malloc>
   b87e2:	62e0      	str	r0, [r4, #44]	; 0x2c
   b87e4:	2800      	cmp	r0, #0
   b87e6:	d1d7      	bne.n	b8798 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b87e8:	b004      	add	sp, #16
   b87ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b87ee:	3840      	subs	r0, #64	; 0x40
   b87f0:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b87f4:	fa02 f280 	sxtah	r2, r2, r0
   b87f8:	2340      	movs	r3, #64	; 0x40
   b87fa:	2001      	movs	r0, #1
   b87fc:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b8800:	2352      	movs	r3, #82	; 0x52
   b8802:	3952      	subs	r1, #82	; 0x52
   b8804:	9300      	str	r3, [sp, #0]
   b8806:	4b79      	ldr	r3, [pc, #484]	; (b89ec <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b8808:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b880c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b880e:	4620      	mov	r0, r4
   b8810:	f341 014f 	sbfx	r1, r1, #1, #16
   b8814:	f7ff fbec 	bl	b7ff0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b8818:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b881a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b881e:	2800      	cmp	r0, #0
   b8820:	d078      	beq.n	b8914 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8822:	2d00      	cmp	r5, #0
   b8824:	d174      	bne.n	b8910 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b8826:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b882a:	2b20      	cmp	r3, #32
   b882c:	bf0c      	ite	eq
   b882e:	253c      	moveq	r5, #60	; 0x3c
   b8830:	253d      	movne	r5, #61	; 0x3d
   b8832:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b8836:	f1b8 0f00 	cmp.w	r8, #0
   b883a:	d001      	beq.n	b8840 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b883c:	f003 fdea 	bl	bc414 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b8840:	b1fe      	cbz	r6, b8882 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b8842:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8846:	2800      	cmp	r0, #0
   b8848:	db1b      	blt.n	b8882 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b884a:	2101      	movs	r1, #1
   b884c:	b280      	uxth	r0, r0
   b884e:	f004 fc71 	bl	bd134 <pinMode>
    digitalWrite(rstPin, HIGH);
   b8852:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8856:	2101      	movs	r1, #1
   b8858:	b280      	uxth	r0, r0
   b885a:	f004 fc7c 	bl	bd156 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b885e:	2001      	movs	r0, #1
   b8860:	f000 ff1e 	bl	b96a0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b8864:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8868:	2100      	movs	r1, #0
   b886a:	b280      	uxth	r0, r0
   b886c:	f004 fc73 	bl	bd156 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b8870:	200a      	movs	r0, #10
   b8872:	f000 ff15 	bl	b96a0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b8876:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b887a:	2101      	movs	r1, #1
   b887c:	b280      	uxth	r0, r0
   b887e:	f004 fc6a 	bl	bd156 <digitalWrite>
  TRANSACTION_START
   b8882:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8884:	2800      	cmp	r0, #0
   b8886:	d074      	beq.n	b8972 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8888:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b888a:	f003 fdbf 	bl	bc40c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b888e:	2204      	movs	r2, #4
   b8890:	4957      	ldr	r1, [pc, #348]	; (b89f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b8892:	4620      	mov	r0, r4
   b8894:	f7ff ff0b 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b8898:	8961      	ldrh	r1, [r4, #10]
   b889a:	3901      	subs	r1, #1
   b889c:	b2c9      	uxtb	r1, r1
   b889e:	4620      	mov	r0, r4
   b88a0:	f7ff fe96 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b88a4:	4953      	ldr	r1, [pc, #332]	; (b89f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b88a6:	2204      	movs	r2, #4
   b88a8:	4620      	mov	r0, r4
   b88aa:	f7ff ff00 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b88ae:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b88b2:	2b01      	cmp	r3, #1
   b88b4:	bf0c      	ite	eq
   b88b6:	2110      	moveq	r1, #16
   b88b8:	2114      	movne	r1, #20
   b88ba:	4620      	mov	r0, r4
   b88bc:	f7ff fe88 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b88c0:	2204      	movs	r2, #4
   b88c2:	494d      	ldr	r1, [pc, #308]	; (b89f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b88c4:	4620      	mov	r0, r4
   b88c6:	f7ff fef2 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b88ca:	68a3      	ldr	r3, [r4, #8]
   b88cc:	4a4b      	ldr	r2, [pc, #300]	; (b89fc <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b88ce:	4293      	cmp	r3, r2
   b88d0:	d15c      	bne.n	b898c <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b88d2:	494b      	ldr	r1, [pc, #300]	; (b8a00 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b88d4:	2204      	movs	r2, #4
   b88d6:	4620      	mov	r0, r4
   b88d8:	f7ff fee9 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b88dc:	21d9      	movs	r1, #217	; 0xd9
   b88de:	4620      	mov	r0, r4
   b88e0:	f7ff fe76 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b88e4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b88e8:	2b01      	cmp	r3, #1
   b88ea:	bf0c      	ite	eq
   b88ec:	2122      	moveq	r1, #34	; 0x22
   b88ee:	21f1      	movne	r1, #241	; 0xf1
   b88f0:	4620      	mov	r0, r4
   b88f2:	f7ff fe6d 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b88f6:	4620      	mov	r0, r4
   b88f8:	4942      	ldr	r1, [pc, #264]	; (b8a04 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b88fa:	2206      	movs	r2, #6
   b88fc:	f7ff fed7 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8900:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8902:	2800      	cmp	r0, #0
   b8904:	d063      	beq.n	b89ce <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b8906:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8908:	f003 fd80 	bl	bc40c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b890c:	2001      	movs	r0, #1
   b890e:	e76b      	b.n	b87e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8910:	b26d      	sxtb	r5, r5
   b8912:	e78e      	b.n	b8832 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8914:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8918:	2101      	movs	r1, #1
   b891a:	b280      	uxth	r0, r0
   b891c:	f004 fc0a 	bl	bd134 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b8920:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8924:	2101      	movs	r1, #1
   b8926:	b280      	uxth	r0, r0
   b8928:	f004 fc04 	bl	bd134 <pinMode>
    SSD1306_DESELECT
   b892c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8930:	2101      	movs	r1, #1
   b8932:	b280      	uxth	r0, r0
   b8934:	f004 fc0f 	bl	bd156 <digitalWrite>
    if(spi) { // Hardware SPI
   b8938:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b893a:	b13d      	cbz	r5, b894c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b893c:	f1b8 0f00 	cmp.w	r8, #0
   b8940:	f43f af7e 	beq.w	b8840 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b8944:	4628      	mov	r0, r5
   b8946:	f003 ff7b 	bl	bc840 <_ZN8SPIClass5beginEv>
   b894a:	e779      	b.n	b8840 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b894c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8950:	2101      	movs	r1, #1
   b8952:	b280      	uxth	r0, r0
   b8954:	f004 fbee 	bl	bd134 <pinMode>
      pinMode(clkPin , OUTPUT);
   b8958:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b895c:	2101      	movs	r1, #1
   b895e:	b280      	uxth	r0, r0
   b8960:	f004 fbe8 	bl	bd134 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8964:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8968:	4629      	mov	r1, r5
   b896a:	b280      	uxth	r0, r0
   b896c:	f004 fbf3 	bl	bd156 <digitalWrite>
   b8970:	e766      	b.n	b8840 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b8972:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8974:	b118      	cbz	r0, b897e <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b8976:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b897a:	f003 ff8f 	bl	bc89c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b897e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8982:	2100      	movs	r1, #0
   b8984:	b280      	uxth	r0, r0
   b8986:	f004 fbe6 	bl	bd156 <digitalWrite>
   b898a:	e780      	b.n	b888e <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b898c:	4a1e      	ldr	r2, [pc, #120]	; (b8a08 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b898e:	4293      	cmp	r3, r2
   b8990:	d10e      	bne.n	b89b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8992:	491e      	ldr	r1, [pc, #120]	; (b8a0c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b8994:	2203      	movs	r2, #3
   b8996:	4620      	mov	r0, r4
   b8998:	f7ff fe89 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b899c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b89a0:	2b01      	cmp	r3, #1
   b89a2:	bf0c      	ite	eq
   b89a4:	219f      	moveq	r1, #159	; 0x9f
   b89a6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b89a8:	4620      	mov	r0, r4
   b89aa:	f7ff fe11 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b89ae:	e795      	b.n	b88dc <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b89b0:	4a17      	ldr	r2, [pc, #92]	; (b8a10 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b89b2:	4293      	cmp	r3, r2
   b89b4:	d192      	bne.n	b88dc <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b89b6:	4917      	ldr	r1, [pc, #92]	; (b8a14 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b89b8:	2203      	movs	r2, #3
   b89ba:	4620      	mov	r0, r4
   b89bc:	f7ff fe77 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b89c0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b89c4:	2b01      	cmp	r3, #1
   b89c6:	bf0c      	ite	eq
   b89c8:	2110      	moveq	r1, #16
   b89ca:	21af      	movne	r1, #175	; 0xaf
   b89cc:	e7ec      	b.n	b89a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b89ce:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b89d2:	2101      	movs	r1, #1
   b89d4:	b280      	uxth	r0, r0
   b89d6:	f004 fbbe 	bl	bd156 <digitalWrite>
   b89da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b89dc:	2800      	cmp	r0, #0
   b89de:	d095      	beq.n	b890c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b89e0:	f003 ff42 	bl	bc868 <_ZN8SPIClass14endTransactionEv>
   b89e4:	e792      	b.n	b890c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b89e6:	bf00      	nop
   b89e8:	000c11d4 	.word	0x000c11d4
   b89ec:	000c0f14 	.word	0x000c0f14
   b89f0:	000c141c 	.word	0x000c141c
   b89f4:	000c1420 	.word	0x000c1420
   b89f8:	000c1424 	.word	0x000c1424
   b89fc:	00200080 	.word	0x00200080
   b8a00:	000c142e 	.word	0x000c142e
   b8a04:	000c1428 	.word	0x000c1428
   b8a08:	00400080 	.word	0x00400080
   b8a0c:	000c1432 	.word	0x000c1432
   b8a10:	00100060 	.word	0x00100060
   b8a14:	000c1435 	.word	0x000c1435

000b8a18 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8a18:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8a1a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8a1c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8a20:	db3d      	blt.n	b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8a22:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8a26:	4294      	cmp	r4, r2
   b8a28:	dd39      	ble.n	b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b8a2a:	2900      	cmp	r1, #0
      w += x;
   b8a2c:	bfbe      	ittt	lt
   b8a2e:	185b      	addlt	r3, r3, r1
   b8a30:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8a32:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8a34:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8a38:	18ce      	adds	r6, r1, r3
   b8a3a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8a3c:	bfc4      	itt	gt
   b8a3e:	1a63      	subgt	r3, r4, r1
   b8a40:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8a42:	2b00      	cmp	r3, #0
   b8a44:	dd2b      	ble.n	b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8a46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8a48:	10d6      	asrs	r6, r2, #3
   b8a4a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b8a4e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8a50:	f002 0007 	and.w	r0, r2, #7
   b8a54:	2201      	movs	r2, #1
   b8a56:	4082      	lsls	r2, r0
      switch(color) {
   b8a58:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b8a5a:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8a5c:	d016      	beq.n	b8a8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8a5e:	2d02      	cmp	r5, #2
   b8a60:	d00b      	beq.n	b8a7a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8a62:	b9e5      	cbnz	r5, b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8a64:	43d2      	mvns	r2, r2
   b8a66:	b2d2      	uxtb	r2, r2
   b8a68:	440b      	add	r3, r1
   b8a6a:	4299      	cmp	r1, r3
   b8a6c:	d017      	beq.n	b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8a6e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8a72:	4010      	ands	r0, r2
   b8a74:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8a78:	e7f7      	b.n	b8a6a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b8a7a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8a7c:	4299      	cmp	r1, r3
   b8a7e:	d00e      	beq.n	b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8a80:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8a84:	4050      	eors	r0, r2
   b8a86:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8a8a:	e7f7      	b.n	b8a7c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8a8c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8a8e:	4299      	cmp	r1, r3
   b8a90:	d005      	beq.n	b8a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8a92:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8a96:	4310      	orrs	r0, r2
   b8a98:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8a9c:	e7f7      	b.n	b8a8e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8a9e:	bd70      	pop	{r4, r5, r6, pc}

000b8aa0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8aa2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8aa4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8aa8:	db76      	blt.n	b8b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b8aaa:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b8aae:	42b1      	cmp	r1, r6
   b8ab0:	da72      	bge.n	b8b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8ab2:	2a00      	cmp	r2, #0
      __h += __y;
   b8ab4:	bfbe      	ittt	lt
   b8ab6:	189b      	addlt	r3, r3, r2
   b8ab8:	b21b      	sxthlt	r3, r3
      __y = 0;
   b8aba:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b8abc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8ac0:	18d7      	adds	r7, r2, r3
   b8ac2:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8ac4:	bfc4      	itt	gt
   b8ac6:	1aa3      	subgt	r3, r4, r2
   b8ac8:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b8aca:	2b00      	cmp	r3, #0
   b8acc:	dd64      	ble.n	b8b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8ace:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8ad2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8ad4:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8ad8:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b8adc:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8ade:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8ae2:	d023      	beq.n	b8b2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8ae4:	f1c2 0208 	rsb	r2, r2, #8
   b8ae8:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8aea:	492d      	ldr	r1, [pc, #180]	; (b8ba0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8aec:	4293      	cmp	r3, r2
   b8aee:	bf3c      	itt	cc
   b8af0:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8af4:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8af8:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8afa:	bf3c      	itt	cc
   b8afc:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8b00:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8b04:	2d01      	cmp	r5, #1
   b8b06:	d007      	beq.n	b8b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8b08:	2d02      	cmp	r5, #2
   b8b0a:	d02e      	beq.n	b8b6a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8b0c:	b94d      	cbnz	r5, b8b22 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b8b0e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8b12:	ea2c 0101 	bic.w	r1, ip, r1
   b8b16:	e003      	b.n	b8b20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8b18:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8b1c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8b20:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8b22:	4293      	cmp	r3, r2
   b8b24:	d338      	bcc.n	b8b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8b26:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b8b2a:	440c      	add	r4, r1
        h -= mod;
   b8b2c:	1a9a      	subs	r2, r3, r2
   b8b2e:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8b30:	2a07      	cmp	r2, #7
   b8b32:	d90e      	bls.n	b8b52 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8b34:	2d02      	cmp	r5, #2
   b8b36:	d11d      	bne.n	b8b74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8b38:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b8b3a:	7821      	ldrb	r1, [r4, #0]
   b8b3c:	43c9      	mvns	r1, r1
   b8b3e:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8b40:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8b42:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8b46:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8b48:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8b4a:	440c      	add	r4, r1
            } while(h >= 8);
   b8b4c:	d8f5      	bhi.n	b8b3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b8b4e:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8b52:	b30a      	cbz	r2, b8b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8b54:	4b13      	ldr	r3, [pc, #76]	; (b8ba4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8b56:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8b58:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b8b5a:	d01a      	beq.n	b8b92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8b5c:	2d02      	cmp	r5, #2
   b8b5e:	d01c      	beq.n	b8b9a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8b60:	b9d5      	cbnz	r5, b8b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8b62:	7822      	ldrb	r2, [r4, #0]
   b8b64:	ea22 0303 	bic.w	r3, r2, r3
   b8b68:	e015      	b.n	b8b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b8b6a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8b6e:	ea81 010c 	eor.w	r1, r1, ip
   b8b72:	e7d5      	b.n	b8b20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8b74:	1e29      	subs	r1, r5, #0
   b8b76:	bf18      	it	ne
   b8b78:	2101      	movne	r1, #1
   b8b7a:	4249      	negs	r1, r1
   b8b7c:	b2c9      	uxtb	r1, r1
   b8b7e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8b80:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8b82:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8b84:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b8b88:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8b8a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8b8c:	4434      	add	r4, r6
            } while(h >= 8);
   b8b8e:	d8f7      	bhi.n	b8b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8b90:	e7dd      	b.n	b8b4e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8b92:	7822      	ldrb	r2, [r4, #0]
   b8b94:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b8b96:	7023      	strb	r3, [r4, #0]
}
   b8b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b8b9a:	7822      	ldrb	r2, [r4, #0]
   b8b9c:	4053      	eors	r3, r2
   b8b9e:	e7fa      	b.n	b8b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8ba0:	000c140c 	.word	0x000c140c
   b8ba4:	000c1414 	.word	0x000c1414

000b8ba8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8ba8:	b470      	push	{r4, r5, r6}
   b8baa:	4614      	mov	r4, r2
  switch(rotation) {
   b8bac:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8bae:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8bb2:	2a02      	cmp	r2, #2
   b8bb4:	d00d      	beq.n	b8bd2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b8bb6:	2a03      	cmp	r2, #3
   b8bb8:	d018      	beq.n	b8bec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b8bba:	2a01      	cmp	r2, #1
   b8bbc:	d111      	bne.n	b8be2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b8bbe:	8902      	ldrh	r2, [r0, #8]
   b8bc0:	43e4      	mvns	r4, r4
   b8bc2:	4414      	add	r4, r2
   b8bc4:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8bc6:	9603      	str	r6, [sp, #12]
   b8bc8:	460a      	mov	r2, r1
   b8bca:	4621      	mov	r1, r4
}
   b8bcc:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8bce:	f7ff bf67 	b.w	b8aa0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8bd2:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8bd4:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8bd6:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8bd8:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b8bda:	4414      	add	r4, r2
    x -= (w-1);
   b8bdc:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b8bde:	b224      	sxth	r4, r4
    x -= (w-1);
   b8be0:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8be2:	9603      	str	r6, [sp, #12]
   b8be4:	4622      	mov	r2, r4
}
   b8be6:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8be8:	f7ff bf16 	b.w	b8a18 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8bec:	8945      	ldrh	r5, [r0, #10]
   b8bee:	4419      	add	r1, r3
   b8bf0:	1a69      	subs	r1, r5, r1
   b8bf2:	b209      	sxth	r1, r1
    break;
   b8bf4:	e7e7      	b.n	b8bc6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8bf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8bf6:	b430      	push	{r4, r5}
   b8bf8:	4614      	mov	r4, r2
  switch(rotation) {
   b8bfa:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8bfc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8c00:	2a02      	cmp	r2, #2
   b8c02:	d00d      	beq.n	b8c20 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8c04:	2a03      	cmp	r2, #3
   b8c06:	d018      	beq.n	b8c3a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8c08:	2a01      	cmp	r2, #1
   b8c0a:	d111      	bne.n	b8c30 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8c0c:	18e2      	adds	r2, r4, r3
   b8c0e:	8904      	ldrh	r4, [r0, #8]
   b8c10:	1aa4      	subs	r4, r4, r2
   b8c12:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8c14:	9502      	str	r5, [sp, #8]
   b8c16:	460a      	mov	r2, r1
   b8c18:	4621      	mov	r1, r4
}
   b8c1a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8c1c:	f7ff befc 	b.w	b8a18 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8c20:	8902      	ldrh	r2, [r0, #8]
   b8c22:	43c9      	mvns	r1, r1
   b8c24:	4411      	add	r1, r2
    y -= (h-1);
   b8c26:	18e2      	adds	r2, r4, r3
   b8c28:	8944      	ldrh	r4, [r0, #10]
   b8c2a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8c2c:	b209      	sxth	r1, r1
    y -= (h-1);
   b8c2e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8c30:	9502      	str	r5, [sp, #8]
   b8c32:	4622      	mov	r2, r4
}
   b8c34:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8c36:	f7ff bf33 	b.w	b8aa0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b8c3a:	8942      	ldrh	r2, [r0, #10]
   b8c3c:	43c9      	mvns	r1, r1
   b8c3e:	4411      	add	r1, r2
   b8c40:	b209      	sxth	r1, r1
    break;
   b8c42:	e7e7      	b.n	b8c14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8c44 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c48:	4604      	mov	r4, r0
  TRANSACTION_START
   b8c4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8c4c:	2800      	cmp	r0, #0
   b8c4e:	d042      	beq.n	b8cd6 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8c50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8c52:	f003 fbdb 	bl	bc40c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8c56:	4947      	ldr	r1, [pc, #284]	; (b8d74 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8c58:	2205      	movs	r2, #5
   b8c5a:	4620      	mov	r0, r4
   b8c5c:	f7ff fd27 	bl	b86ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8c60:	8921      	ldrh	r1, [r4, #8]
   b8c62:	3901      	subs	r1, #1
   b8c64:	4620      	mov	r0, r4
   b8c66:	b2c9      	uxtb	r1, r1
   b8c68:	f7ff fcb2 	bl	b85d0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8c6c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8c70:	1dde      	adds	r6, r3, #7
   b8c72:	bf48      	it	mi
   b8c74:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8c78:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8c7c:	8923      	ldrh	r3, [r4, #8]
   b8c7e:	10f6      	asrs	r6, r6, #3
   b8c80:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8c84:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8c88:	2800      	cmp	r0, #0
   b8c8a:	d03a      	beq.n	b8d02 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8c8c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8c90:	f003 fbca 	bl	bc428 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8c94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8c96:	6803      	ldr	r3, [r0, #0]
   b8c98:	2140      	movs	r1, #64	; 0x40
   b8c9a:	689b      	ldr	r3, [r3, #8]
   b8c9c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8c9e:	2701      	movs	r7, #1
    while(count--) {
   b8ca0:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8ca2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8ca4:	d024      	beq.n	b8cf0 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b8ca6:	2f1f      	cmp	r7, #31
   b8ca8:	d90c      	bls.n	b8cc4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b8caa:	f003 fbc4 	bl	bc436 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8cae:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8cb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8cb4:	f003 fbb8 	bl	bc428 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8cb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8cba:	6803      	ldr	r3, [r0, #0]
   b8cbc:	2140      	movs	r1, #64	; 0x40
   b8cbe:	689b      	ldr	r3, [r3, #8]
   b8cc0:	4798      	blx	r3
        bytesOut = 1;
   b8cc2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8cc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8cc6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8cca:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8ccc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8cce:	689b      	ldr	r3, [r3, #8]
   b8cd0:	4798      	blx	r3
      bytesOut++;
   b8cd2:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8cd4:	e7e4      	b.n	b8ca0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8cd8:	b118      	cbz	r0, b8ce2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b8cda:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8cde:	f003 fddd 	bl	bc89c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8ce2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8ce6:	2100      	movs	r1, #0
   b8ce8:	b280      	uxth	r0, r0
   b8cea:	f004 fa34 	bl	bd156 <digitalWrite>
   b8cee:	e7b2      	b.n	b8c56 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8cf0:	f003 fba1 	bl	bc436 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8cf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8cf6:	b378      	cbz	r0, b8d58 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8cf8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8cfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8cfe:	f003 bb85 	b.w	bc40c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8d02:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8d06:	2101      	movs	r1, #1
   b8d08:	b280      	uxth	r0, r0
   b8d0a:	f004 fa24 	bl	bd156 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b8d0e:	42ae      	cmp	r6, r5
   b8d10:	d0f0      	beq.n	b8cf4 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8d12:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8d14:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8d18:	b118      	cbz	r0, b8d22 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b8d1a:	4649      	mov	r1, r9
   b8d1c:	f003 fe2c 	bl	bc978 <_ZN8SPIClass8transferEh>
   b8d20:	e7f5      	b.n	b8d0e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8d22:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8d24:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8d28:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8d2c:	ea09 0108 	and.w	r1, r9, r8
   b8d30:	b280      	uxth	r0, r0
   b8d32:	f004 fa10 	bl	bd156 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8d36:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8d3a:	2101      	movs	r1, #1
   b8d3c:	b280      	uxth	r0, r0
   b8d3e:	f004 fa0a 	bl	bd156 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8d42:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8d46:	2100      	movs	r1, #0
   b8d48:	b280      	uxth	r0, r0
   b8d4a:	f004 fa04 	bl	bd156 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8d4e:	3f01      	subs	r7, #1
   b8d50:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8d54:	d1e8      	bne.n	b8d28 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8d56:	e7da      	b.n	b8d0e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8d58:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8d5c:	2101      	movs	r1, #1
   b8d5e:	b280      	uxth	r0, r0
   b8d60:	f004 f9f9 	bl	bd156 <digitalWrite>
   b8d64:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8d66:	b118      	cbz	r0, b8d70 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8d68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8d6c:	f003 bd7c 	b.w	bc868 <_ZN8SPIClass14endTransactionEv>
}
   b8d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8d74:	000c1438 	.word	0x000c1438

000b8d78 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b8d78:	2100      	movs	r1, #0
   b8d7a:	220a      	movs	r2, #10
   b8d7c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b8d80:	4770      	bx	lr

000b8d82 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b8d82:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b8d84:	b510      	push	{r4, lr}
   b8d86:	4604      	mov	r4, r0
    this->pin = pin;
   b8d88:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b8d8a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b8d8c:	b288      	uxth	r0, r1
   b8d8e:	f004 f9fb 	bl	bd188 <digitalRead>
   b8d92:	b108      	cbz	r0, b8d98 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b8d94:	2303      	movs	r3, #3
   b8d96:	71a3      	strb	r3, [r4, #6]
   b8d98:	f000 f9ae 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b8d9c:	6020      	str	r0, [r4, #0]
#endif
}
   b8d9e:	bd10      	pop	{r4, pc}

000b8da0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b8da0:	b538      	push	{r3, r4, r5, lr}
   b8da2:	460c      	mov	r4, r1
   b8da4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b8da6:	4611      	mov	r1, r2
   b8da8:	b2a0      	uxth	r0, r4
   b8daa:	f004 f9c3 	bl	bd134 <pinMode>
  
  this->attach(pin);
   b8dae:	4621      	mov	r1, r4
   b8db0:	4628      	mov	r0, r5
}
   b8db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b8db6:	f7ff bfe4 	b.w	b8d82 <_ZN8Debounce6attachEi>
	...

000b8dbc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b8dbc:	b510      	push	{r4, lr}
   b8dbe:	4b06      	ldr	r3, [pc, #24]	; (b8dd8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b8dc0:	6003      	str	r3, [r0, #0]
   b8dc2:	4604      	mov	r4, r0
	if (mutex) {
   b8dc4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b8dc6:	b108      	cbz	r0, b8dcc <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b8dc8:	f000 f956 	bl	b9078 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b8dcc:	4620      	mov	r0, r4
   b8dce:	f7ff fb59 	bl	b8484 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b8dd2:	4620      	mov	r0, r4
   b8dd4:	bd10      	pop	{r4, pc}
   b8dd6:	bf00      	nop
   b8dd8:	000c1448 	.word	0x000c1448

000b8ddc <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b8ddc:	b510      	push	{r4, lr}
   b8dde:	4604      	mov	r4, r0
}
   b8de0:	f7ff ffec 	bl	b8dbc <_ZN16OledWingAdafruitD1Ev>
   b8de4:	4620      	mov	r0, r4
   b8de6:	2170      	movs	r1, #112	; 0x70
   b8de8:	f7fb f959 	bl	b409e <_ZdlPvj>
   b8dec:	4620      	mov	r0, r4
   b8dee:	bd10      	pop	{r4, pc}

000b8df0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b8df0:	b530      	push	{r4, r5, lr}
   b8df2:	b085      	sub	sp, #20
   b8df4:	4604      	mov	r4, r0
   b8df6:	460d      	mov	r5, r1
   b8df8:	f004 f9f0 	bl	bd1dc <_Z19__fetch_global_Wirev>
   b8dfc:	4a10      	ldr	r2, [pc, #64]	; (b8e40 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b8dfe:	4911      	ldr	r1, [pc, #68]	; (b8e44 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b8e00:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b8e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8e08:	2180      	movs	r1, #128	; 0x80
   b8e0a:	4603      	mov	r3, r0
   b8e0c:	9200      	str	r2, [sp, #0]
   b8e0e:	4620      	mov	r0, r4
   b8e10:	2220      	movs	r2, #32
   b8e12:	f7ff fbaf 	bl	b8574 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b8e16:	4b0c      	ldr	r3, [pc, #48]	; (b8e48 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b8e18:	6023      	str	r3, [r4, #0]
   b8e1a:	2300      	movs	r3, #0
   b8e1c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b8e20:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8e24:	f7ff ffa8 	bl	b8d78 <_ZN8DebounceC1Ev>
   b8e28:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b8e2c:	f7ff ffa4 	bl	b8d78 <_ZN8DebounceC1Ev>
   b8e30:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b8e34:	f7ff ffa0 	bl	b8d78 <_ZN8DebounceC1Ev>
}
   b8e38:	4620      	mov	r0, r4
   b8e3a:	b005      	add	sp, #20
   b8e3c:	bd30      	pop	{r4, r5, pc}
   b8e3e:	bf00      	nop
   b8e40:	00061a80 	.word	0x00061a80
   b8e44:	000186a0 	.word	0x000186a0
   b8e48:	000c1448 	.word	0x000c1448

000b8e4c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b8e4c:	b513      	push	{r0, r1, r4, lr}
   b8e4e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b8e50:	3050      	adds	r0, #80	; 0x50
   b8e52:	f000 f909 	bl	b9068 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b8e56:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8e58:	07d9      	lsls	r1, r3, #31
   b8e5a:	d505      	bpl.n	b8e68 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b8e5c:	2202      	movs	r2, #2
   b8e5e:	2104      	movs	r1, #4
   b8e60:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8e64:	f7ff ff9c 	bl	b8da0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b8e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8e6a:	079a      	lsls	r2, r3, #30
   b8e6c:	d505      	bpl.n	b8e7a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b8e6e:	2200      	movs	r2, #0
   b8e70:	2103      	movs	r1, #3
   b8e72:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b8e76:	f7ff ff93 	bl	b8da0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b8e7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8e7c:	075b      	lsls	r3, r3, #29
   b8e7e:	d505      	bpl.n	b8e8c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b8e80:	2202      	movs	r2, #2
   b8e82:	4611      	mov	r1, r2
   b8e84:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b8e88:	f7ff ff8a 	bl	b8da0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b8e8c:	2301      	movs	r3, #1
   b8e8e:	9300      	str	r3, [sp, #0]
   b8e90:	223c      	movs	r2, #60	; 0x3c
   b8e92:	2102      	movs	r1, #2
   b8e94:	4620      	mov	r0, r4
   b8e96:	f7ff fc75 	bl	b8784 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b8e9a:	b002      	add	sp, #8
   b8e9c:	bd10      	pop	{r4, pc}
	...

000b8ea0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b8ea0:	b508      	push	{r3, lr}
   b8ea2:	4b02      	ldr	r3, [pc, #8]	; (b8eac <hal_ble_stack_init+0xc>)
   b8ea4:	681b      	ldr	r3, [r3, #0]
   b8ea6:	689b      	ldr	r3, [r3, #8]
   b8ea8:	9301      	str	r3, [sp, #4]
   b8eaa:	bd08      	pop	{r3, pc}
   b8eac:	00030278 	.word	0x00030278

000b8eb0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b8eb0:	b508      	push	{r3, lr}
   b8eb2:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <hal_ble_gap_set_tx_power+0xc>)
   b8eb4:	681b      	ldr	r3, [r3, #0]
   b8eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8eb8:	9301      	str	r3, [sp, #4]
   b8eba:	bd08      	pop	{r3, pc}
   b8ebc:	00030278 	.word	0x00030278

000b8ec0 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b8ec0:	b508      	push	{r3, lr}
   b8ec2:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <hal_ble_gap_set_scan_parameters+0xc>)
   b8ec4:	681b      	ldr	r3, [r3, #0]
   b8ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b8ec8:	9301      	str	r3, [sp, #4]
   b8eca:	bd08      	pop	{r3, pc}
   b8ecc:	00030278 	.word	0x00030278

000b8ed0 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b8ed0:	b508      	push	{r3, lr}
   b8ed2:	4b02      	ldr	r3, [pc, #8]	; (b8edc <hal_ble_gap_get_scan_parameters+0xc>)
   b8ed4:	681b      	ldr	r3, [r3, #0]
   b8ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8ed8:	9301      	str	r3, [sp, #4]
   b8eda:	bd08      	pop	{r3, pc}
   b8edc:	00030278 	.word	0x00030278

000b8ee0 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b8ee0:	b508      	push	{r3, lr}
   b8ee2:	4b02      	ldr	r3, [pc, #8]	; (b8eec <hal_ble_gap_start_scan+0xc>)
   b8ee4:	681b      	ldr	r3, [r3, #0]
   b8ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8ee8:	9301      	str	r3, [sp, #4]
   b8eea:	bd08      	pop	{r3, pc}
   b8eec:	00030278 	.word	0x00030278

000b8ef0 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b8ef0:	b508      	push	{r3, lr}
   b8ef2:	4b03      	ldr	r3, [pc, #12]	; (b8f00 <hal_ble_gap_stop_scan+0x10>)
   b8ef4:	681b      	ldr	r3, [r3, #0]
   b8ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b8efa:	9301      	str	r3, [sp, #4]
   b8efc:	bd08      	pop	{r3, pc}
   b8efe:	0000      	.short	0x0000
   b8f00:	00030278 	.word	0x00030278

000b8f04 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8f04:	b508      	push	{r3, lr}
   b8f06:	4b03      	ldr	r3, [pc, #12]	; (b8f14 <hal_ble_gap_disconnect+0x10>)
   b8f08:	681b      	ldr	r3, [r3, #0]
   b8f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8f0e:	9301      	str	r3, [sp, #4]
   b8f10:	bd08      	pop	{r3, pc}
   b8f12:	0000      	.short	0x0000
   b8f14:	00030278 	.word	0x00030278

000b8f18 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8f18:	b508      	push	{r3, lr}
   b8f1a:	4b03      	ldr	r3, [pc, #12]	; (b8f28 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8f1c:	681b      	ldr	r3, [r3, #0]
   b8f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b8f22:	9301      	str	r3, [sp, #4]
   b8f24:	bd08      	pop	{r3, pc}
   b8f26:	0000      	.short	0x0000
   b8f28:	00030278 	.word	0x00030278

000b8f2c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b8f2c:	b508      	push	{r3, lr}
   b8f2e:	4b03      	ldr	r3, [pc, #12]	; (b8f3c <hal_ble_gatt_client_discover_all_services+0x10>)
   b8f30:	681b      	ldr	r3, [r3, #0]
   b8f32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b8f36:	9301      	str	r3, [sp, #4]
   b8f38:	bd08      	pop	{r3, pc}
   b8f3a:	0000      	.short	0x0000
   b8f3c:	00030278 	.word	0x00030278

000b8f40 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b8f40:	b508      	push	{r3, lr}
   b8f42:	4b03      	ldr	r3, [pc, #12]	; (b8f50 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b8f44:	681b      	ldr	r3, [r3, #0]
   b8f46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b8f4a:	9301      	str	r3, [sp, #4]
   b8f4c:	bd08      	pop	{r3, pc}
   b8f4e:	0000      	.short	0x0000
   b8f50:	00030278 	.word	0x00030278

000b8f54 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8f54:	b508      	push	{r3, lr}
   b8f56:	4b03      	ldr	r3, [pc, #12]	; (b8f64 <hal_ble_gatt_client_write_with_response+0x10>)
   b8f58:	681b      	ldr	r3, [r3, #0]
   b8f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b8f5e:	9301      	str	r3, [sp, #4]
   b8f60:	bd08      	pop	{r3, pc}
   b8f62:	0000      	.short	0x0000
   b8f64:	00030278 	.word	0x00030278

000b8f68 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8f68:	b508      	push	{r3, lr}
   b8f6a:	4b03      	ldr	r3, [pc, #12]	; (b8f78 <hal_ble_gatt_client_write_without_response+0x10>)
   b8f6c:	681b      	ldr	r3, [r3, #0]
   b8f6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b8f72:	9301      	str	r3, [sp, #4]
   b8f74:	bd08      	pop	{r3, pc}
   b8f76:	0000      	.short	0x0000
   b8f78:	00030278 	.word	0x00030278

000b8f7c <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b8f7c:	b508      	push	{r3, lr}
   b8f7e:	4b03      	ldr	r3, [pc, #12]	; (b8f8c <hal_ble_gatt_client_read+0x10>)
   b8f80:	681b      	ldr	r3, [r3, #0]
   b8f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b8f86:	9301      	str	r3, [sp, #4]
   b8f88:	bd08      	pop	{r3, pc}
   b8f8a:	0000      	.short	0x0000
   b8f8c:	00030278 	.word	0x00030278

000b8f90 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b8f90:	b508      	push	{r3, lr}
   b8f92:	4b03      	ldr	r3, [pc, #12]	; (b8fa0 <hal_ble_gap_connect+0x10>)
   b8f94:	681b      	ldr	r3, [r3, #0]
   b8f96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b8f9a:	9301      	str	r3, [sp, #4]
   b8f9c:	bd08      	pop	{r3, pc}
   b8f9e:	0000      	.short	0x0000
   b8fa0:	00030278 	.word	0x00030278

000b8fa4 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b8fa4:	b508      	push	{r3, lr}
   b8fa6:	4b03      	ldr	r3, [pc, #12]	; (b8fb4 <hal_ble_gap_get_connection_info+0x10>)
   b8fa8:	681b      	ldr	r3, [r3, #0]
   b8faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b8fae:	9301      	str	r3, [sp, #4]
   b8fb0:	bd08      	pop	{r3, pc}
   b8fb2:	0000      	.short	0x0000
   b8fb4:	00030278 	.word	0x00030278

000b8fb8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8fb8:	b508      	push	{r3, lr}
   b8fba:	4b03      	ldr	r3, [pc, #12]	; (b8fc8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8fbc:	681b      	ldr	r3, [r3, #0]
   b8fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b8fc2:	9301      	str	r3, [sp, #4]
   b8fc4:	bd08      	pop	{r3, pc}
   b8fc6:	0000      	.short	0x0000
   b8fc8:	00030278 	.word	0x00030278

000b8fcc <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b8fcc:	b508      	push	{r3, lr}
   b8fce:	4b03      	ldr	r3, [pc, #12]	; (b8fdc <hal_ble_gatt_client_configure_cccd+0x10>)
   b8fd0:	681b      	ldr	r3, [r3, #0]
   b8fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b8fd6:	9301      	str	r3, [sp, #4]
   b8fd8:	bd08      	pop	{r3, pc}
   b8fda:	0000      	.short	0x0000
   b8fdc:	00030278 	.word	0x00030278

000b8fe0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8fe0:	b508      	push	{r3, lr}
   b8fe2:	4b03      	ldr	r3, [pc, #12]	; (b8ff0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b8fe4:	681b      	ldr	r3, [r3, #0]
   b8fe6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8fea:	9301      	str	r3, [sp, #4]
   b8fec:	bd08      	pop	{r3, pc}
   b8fee:	0000      	.short	0x0000
   b8ff0:	00030278 	.word	0x00030278

000b8ff4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8ff4:	b508      	push	{r3, lr}
   b8ff6:	4b03      	ldr	r3, [pc, #12]	; (b9004 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8ff8:	681b      	ldr	r3, [r3, #0]
   b8ffa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b8ffe:	9301      	str	r3, [sp, #4]
   b9000:	bd08      	pop	{r3, pc}
   b9002:	0000      	.short	0x0000
   b9004:	00030278 	.word	0x00030278

000b9008 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9008:	b508      	push	{r3, lr}
   b900a:	4b02      	ldr	r3, [pc, #8]	; (b9014 <os_thread_yield+0xc>)
   b900c:	681b      	ldr	r3, [r3, #0]
   b900e:	68db      	ldr	r3, [r3, #12]
   b9010:	9301      	str	r3, [sp, #4]
   b9012:	bd08      	pop	{r3, pc}
   b9014:	00030248 	.word	0x00030248

000b9018 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9018:	b508      	push	{r3, lr}
   b901a:	4b02      	ldr	r3, [pc, #8]	; (b9024 <os_thread_scheduling+0xc>)
   b901c:	681b      	ldr	r3, [r3, #0]
   b901e:	69db      	ldr	r3, [r3, #28]
   b9020:	9301      	str	r3, [sp, #4]
   b9022:	bd08      	pop	{r3, pc}
   b9024:	00030248 	.word	0x00030248

000b9028 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b9028:	b508      	push	{r3, lr}
   b902a:	4b02      	ldr	r3, [pc, #8]	; (b9034 <os_timer_create+0xc>)
   b902c:	681b      	ldr	r3, [r3, #0]
   b902e:	6a1b      	ldr	r3, [r3, #32]
   b9030:	9301      	str	r3, [sp, #4]
   b9032:	bd08      	pop	{r3, pc}
   b9034:	00030248 	.word	0x00030248

000b9038 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b9038:	b508      	push	{r3, lr}
   b903a:	4b02      	ldr	r3, [pc, #8]	; (b9044 <os_timer_destroy+0xc>)
   b903c:	681b      	ldr	r3, [r3, #0]
   b903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9040:	9301      	str	r3, [sp, #4]
   b9042:	bd08      	pop	{r3, pc}
   b9044:	00030248 	.word	0x00030248

000b9048 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b9048:	b508      	push	{r3, lr}
   b904a:	4b02      	ldr	r3, [pc, #8]	; (b9054 <os_timer_get_id+0xc>)
   b904c:	681b      	ldr	r3, [r3, #0]
   b904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9050:	9301      	str	r3, [sp, #4]
   b9052:	bd08      	pop	{r3, pc}
   b9054:	00030248 	.word	0x00030248

000b9058 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b9058:	b508      	push	{r3, lr}
   b905a:	4b02      	ldr	r3, [pc, #8]	; (b9064 <os_timer_change+0xc>)
   b905c:	681b      	ldr	r3, [r3, #0]
   b905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9060:	9301      	str	r3, [sp, #4]
   b9062:	bd08      	pop	{r3, pc}
   b9064:	00030248 	.word	0x00030248

000b9068 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b9068:	b508      	push	{r3, lr}
   b906a:	4b02      	ldr	r3, [pc, #8]	; (b9074 <os_mutex_create+0xc>)
   b906c:	681b      	ldr	r3, [r3, #0]
   b906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9070:	9301      	str	r3, [sp, #4]
   b9072:	bd08      	pop	{r3, pc}
   b9074:	00030248 	.word	0x00030248

000b9078 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b9078:	b508      	push	{r3, lr}
   b907a:	4b02      	ldr	r3, [pc, #8]	; (b9084 <os_mutex_destroy+0xc>)
   b907c:	681b      	ldr	r3, [r3, #0]
   b907e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9080:	9301      	str	r3, [sp, #4]
   b9082:	bd08      	pop	{r3, pc}
   b9084:	00030248 	.word	0x00030248

000b9088 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9088:	b508      	push	{r3, lr}
   b908a:	4b02      	ldr	r3, [pc, #8]	; (b9094 <os_mutex_recursive_create+0xc>)
   b908c:	681b      	ldr	r3, [r3, #0]
   b908e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9090:	9301      	str	r3, [sp, #4]
   b9092:	bd08      	pop	{r3, pc}
   b9094:	00030248 	.word	0x00030248

000b9098 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b9098:	b508      	push	{r3, lr}
   b909a:	4b02      	ldr	r3, [pc, #8]	; (b90a4 <os_mutex_recursive_lock+0xc>)
   b909c:	681b      	ldr	r3, [r3, #0]
   b909e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b90a0:	9301      	str	r3, [sp, #4]
   b90a2:	bd08      	pop	{r3, pc}
   b90a4:	00030248 	.word	0x00030248

000b90a8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b90a8:	b508      	push	{r3, lr}
   b90aa:	4b02      	ldr	r3, [pc, #8]	; (b90b4 <os_mutex_recursive_unlock+0xc>)
   b90ac:	681b      	ldr	r3, [r3, #0]
   b90ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b90b0:	9301      	str	r3, [sp, #4]
   b90b2:	bd08      	pop	{r3, pc}
   b90b4:	00030248 	.word	0x00030248

000b90b8 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b90b8:	b508      	push	{r3, lr}
   b90ba:	4b02      	ldr	r3, [pc, #8]	; (b90c4 <os_timer_set_id+0xc>)
   b90bc:	681b      	ldr	r3, [r3, #0]
   b90be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b90c0:	9301      	str	r3, [sp, #4]
   b90c2:	bd08      	pop	{r3, pc}
   b90c4:	00030248 	.word	0x00030248

000b90c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b90c8:	b508      	push	{r3, lr}
   b90ca:	4b02      	ldr	r3, [pc, #8]	; (b90d4 <HAL_RNG_GetRandomNumber+0xc>)
   b90cc:	681b      	ldr	r3, [r3, #0]
   b90ce:	685b      	ldr	r3, [r3, #4]
   b90d0:	9301      	str	r3, [sp, #4]
   b90d2:	bd08      	pop	{r3, pc}
   b90d4:	00030218 	.word	0x00030218

000b90d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b90d8:	b508      	push	{r3, lr}
   b90da:	4b02      	ldr	r3, [pc, #8]	; (b90e4 <HAL_Delay_Microseconds+0xc>)
   b90dc:	681b      	ldr	r3, [r3, #0]
   b90de:	68db      	ldr	r3, [r3, #12]
   b90e0:	9301      	str	r3, [sp, #4]
   b90e2:	bd08      	pop	{r3, pc}
   b90e4:	00030218 	.word	0x00030218

000b90e8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b90e8:	b508      	push	{r3, lr}
   b90ea:	4b02      	ldr	r3, [pc, #8]	; (b90f4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b90ec:	681b      	ldr	r3, [r3, #0]
   b90ee:	691b      	ldr	r3, [r3, #16]
   b90f0:	9301      	str	r3, [sp, #4]
   b90f2:	bd08      	pop	{r3, pc}
   b90f4:	00030218 	.word	0x00030218

000b90f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b90f8:	b508      	push	{r3, lr}
   b90fa:	4b02      	ldr	r3, [pc, #8]	; (b9104 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b90fc:	681b      	ldr	r3, [r3, #0]
   b90fe:	695b      	ldr	r3, [r3, #20]
   b9100:	9301      	str	r3, [sp, #4]
   b9102:	bd08      	pop	{r3, pc}
   b9104:	00030218 	.word	0x00030218

000b9108 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9108:	b508      	push	{r3, lr}
   b910a:	4b02      	ldr	r3, [pc, #8]	; (b9114 <hal_rtc_time_is_valid+0xc>)
   b910c:	681b      	ldr	r3, [r3, #0]
   b910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9110:	9301      	str	r3, [sp, #4]
   b9112:	bd08      	pop	{r3, pc}
   b9114:	00030218 	.word	0x00030218

000b9118 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b9118:	b508      	push	{r3, lr}
   b911a:	4b02      	ldr	r3, [pc, #8]	; (b9124 <hal_rtc_get_time+0xc>)
   b911c:	681b      	ldr	r3, [r3, #0]
   b911e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9120:	9301      	str	r3, [sp, #4]
   b9122:	bd08      	pop	{r3, pc}
   b9124:	00030218 	.word	0x00030218

000b9128 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b9128:	b508      	push	{r3, lr}
   b912a:	4b02      	ldr	r3, [pc, #8]	; (b9134 <HAL_Pin_Mode+0xc>)
   b912c:	681b      	ldr	r3, [r3, #0]
   b912e:	689b      	ldr	r3, [r3, #8]
   b9130:	9301      	str	r3, [sp, #4]
   b9132:	bd08      	pop	{r3, pc}
   b9134:	0003022c 	.word	0x0003022c

000b9138 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b9138:	b508      	push	{r3, lr}
   b913a:	4b02      	ldr	r3, [pc, #8]	; (b9144 <HAL_Get_Pin_Mode+0xc>)
   b913c:	681b      	ldr	r3, [r3, #0]
   b913e:	68db      	ldr	r3, [r3, #12]
   b9140:	9301      	str	r3, [sp, #4]
   b9142:	bd08      	pop	{r3, pc}
   b9144:	0003022c 	.word	0x0003022c

000b9148 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b9148:	b508      	push	{r3, lr}
   b914a:	4b02      	ldr	r3, [pc, #8]	; (b9154 <HAL_GPIO_Write+0xc>)
   b914c:	681b      	ldr	r3, [r3, #0]
   b914e:	691b      	ldr	r3, [r3, #16]
   b9150:	9301      	str	r3, [sp, #4]
   b9152:	bd08      	pop	{r3, pc}
   b9154:	0003022c 	.word	0x0003022c

000b9158 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b9158:	b508      	push	{r3, lr}
   b915a:	4b02      	ldr	r3, [pc, #8]	; (b9164 <HAL_GPIO_Read+0xc>)
   b915c:	681b      	ldr	r3, [r3, #0]
   b915e:	695b      	ldr	r3, [r3, #20]
   b9160:	9301      	str	r3, [sp, #4]
   b9162:	bd08      	pop	{r3, pc}
   b9164:	0003022c 	.word	0x0003022c

000b9168 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9168:	b508      	push	{r3, lr}
   b916a:	4b02      	ldr	r3, [pc, #8]	; (b9174 <HAL_Interrupts_Attach+0xc>)
   b916c:	681b      	ldr	r3, [r3, #0]
   b916e:	699b      	ldr	r3, [r3, #24]
   b9170:	9301      	str	r3, [sp, #4]
   b9172:	bd08      	pop	{r3, pc}
   b9174:	0003022c 	.word	0x0003022c

000b9178 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9178:	b508      	push	{r3, lr}
   b917a:	4b02      	ldr	r3, [pc, #8]	; (b9184 <HAL_Interrupts_Detach+0xc>)
   b917c:	681b      	ldr	r3, [r3, #0]
   b917e:	69db      	ldr	r3, [r3, #28]
   b9180:	9301      	str	r3, [sp, #4]
   b9182:	bd08      	pop	{r3, pc}
   b9184:	0003022c 	.word	0x0003022c

000b9188 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9188:	b508      	push	{r3, lr}
   b918a:	4b02      	ldr	r3, [pc, #8]	; (b9194 <hal_i2c_set_speed+0xc>)
   b918c:	681b      	ldr	r3, [r3, #0]
   b918e:	681b      	ldr	r3, [r3, #0]
   b9190:	9301      	str	r3, [sp, #4]
   b9192:	bd08      	pop	{r3, pc}
   b9194:	00030228 	.word	0x00030228

000b9198 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9198:	b508      	push	{r3, lr}
   b919a:	4b02      	ldr	r3, [pc, #8]	; (b91a4 <hal_i2c_begin+0xc>)
   b919c:	681b      	ldr	r3, [r3, #0]
   b919e:	68db      	ldr	r3, [r3, #12]
   b91a0:	9301      	str	r3, [sp, #4]
   b91a2:	bd08      	pop	{r3, pc}
   b91a4:	00030228 	.word	0x00030228

000b91a8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b91a8:	b508      	push	{r3, lr}
   b91aa:	4b02      	ldr	r3, [pc, #8]	; (b91b4 <hal_i2c_begin_transmission+0xc>)
   b91ac:	681b      	ldr	r3, [r3, #0]
   b91ae:	699b      	ldr	r3, [r3, #24]
   b91b0:	9301      	str	r3, [sp, #4]
   b91b2:	bd08      	pop	{r3, pc}
   b91b4:	00030228 	.word	0x00030228

000b91b8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b91b8:	b508      	push	{r3, lr}
   b91ba:	4b02      	ldr	r3, [pc, #8]	; (b91c4 <hal_i2c_end_transmission+0xc>)
   b91bc:	681b      	ldr	r3, [r3, #0]
   b91be:	69db      	ldr	r3, [r3, #28]
   b91c0:	9301      	str	r3, [sp, #4]
   b91c2:	bd08      	pop	{r3, pc}
   b91c4:	00030228 	.word	0x00030228

000b91c8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b91c8:	b508      	push	{r3, lr}
   b91ca:	4b02      	ldr	r3, [pc, #8]	; (b91d4 <hal_i2c_write+0xc>)
   b91cc:	681b      	ldr	r3, [r3, #0]
   b91ce:	6a1b      	ldr	r3, [r3, #32]
   b91d0:	9301      	str	r3, [sp, #4]
   b91d2:	bd08      	pop	{r3, pc}
   b91d4:	00030228 	.word	0x00030228

000b91d8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b91d8:	b508      	push	{r3, lr}
   b91da:	4b02      	ldr	r3, [pc, #8]	; (b91e4 <hal_i2c_available+0xc>)
   b91dc:	681b      	ldr	r3, [r3, #0]
   b91de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b91e0:	9301      	str	r3, [sp, #4]
   b91e2:	bd08      	pop	{r3, pc}
   b91e4:	00030228 	.word	0x00030228

000b91e8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b91e8:	b508      	push	{r3, lr}
   b91ea:	4b02      	ldr	r3, [pc, #8]	; (b91f4 <hal_i2c_read+0xc>)
   b91ec:	681b      	ldr	r3, [r3, #0]
   b91ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b91f0:	9301      	str	r3, [sp, #4]
   b91f2:	bd08      	pop	{r3, pc}
   b91f4:	00030228 	.word	0x00030228

000b91f8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b91f8:	b508      	push	{r3, lr}
   b91fa:	4b02      	ldr	r3, [pc, #8]	; (b9204 <hal_i2c_peek+0xc>)
   b91fc:	681b      	ldr	r3, [r3, #0]
   b91fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9200:	9301      	str	r3, [sp, #4]
   b9202:	bd08      	pop	{r3, pc}
   b9204:	00030228 	.word	0x00030228

000b9208 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9208:	b508      	push	{r3, lr}
   b920a:	4b02      	ldr	r3, [pc, #8]	; (b9214 <hal_i2c_flush+0xc>)
   b920c:	681b      	ldr	r3, [r3, #0]
   b920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9210:	9301      	str	r3, [sp, #4]
   b9212:	bd08      	pop	{r3, pc}
   b9214:	00030228 	.word	0x00030228

000b9218 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9218:	b508      	push	{r3, lr}
   b921a:	4b02      	ldr	r3, [pc, #8]	; (b9224 <hal_i2c_is_enabled+0xc>)
   b921c:	681b      	ldr	r3, [r3, #0]
   b921e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9220:	9301      	str	r3, [sp, #4]
   b9222:	bd08      	pop	{r3, pc}
   b9224:	00030228 	.word	0x00030228

000b9228 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9228:	b508      	push	{r3, lr}
   b922a:	4b02      	ldr	r3, [pc, #8]	; (b9234 <hal_i2c_init+0xc>)
   b922c:	681b      	ldr	r3, [r3, #0]
   b922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9230:	9301      	str	r3, [sp, #4]
   b9232:	bd08      	pop	{r3, pc}
   b9234:	00030228 	.word	0x00030228

000b9238 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9238:	b508      	push	{r3, lr}
   b923a:	4b02      	ldr	r3, [pc, #8]	; (b9244 <inet_inet_ntop+0xc>)
   b923c:	681b      	ldr	r3, [r3, #0]
   b923e:	695b      	ldr	r3, [r3, #20]
   b9240:	9301      	str	r3, [sp, #4]
   b9242:	bd08      	pop	{r3, pc}
   b9244:	00030264 	.word	0x00030264

000b9248 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9248:	b508      	push	{r3, lr}
   b924a:	4b02      	ldr	r3, [pc, #8]	; (b9254 <netdb_freeaddrinfo+0xc>)
   b924c:	681b      	ldr	r3, [r3, #0]
   b924e:	689b      	ldr	r3, [r3, #8]
   b9250:	9301      	str	r3, [sp, #4]
   b9252:	bd08      	pop	{r3, pc}
   b9254:	00030268 	.word	0x00030268

000b9258 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9258:	b508      	push	{r3, lr}
   b925a:	4b02      	ldr	r3, [pc, #8]	; (b9264 <netdb_getaddrinfo+0xc>)
   b925c:	681b      	ldr	r3, [r3, #0]
   b925e:	68db      	ldr	r3, [r3, #12]
   b9260:	9301      	str	r3, [sp, #4]
   b9262:	bd08      	pop	{r3, pc}
   b9264:	00030268 	.word	0x00030268

000b9268 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9268:	b508      	push	{r3, lr}
   b926a:	4b02      	ldr	r3, [pc, #8]	; (b9274 <hal_spi_begin+0xc>)
   b926c:	681b      	ldr	r3, [r3, #0]
   b926e:	681b      	ldr	r3, [r3, #0]
   b9270:	9301      	str	r3, [sp, #4]
   b9272:	bd08      	pop	{r3, pc}
   b9274:	00030230 	.word	0x00030230

000b9278 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9278:	b508      	push	{r3, lr}
   b927a:	4b02      	ldr	r3, [pc, #8]	; (b9284 <hal_spi_transfer+0xc>)
   b927c:	681b      	ldr	r3, [r3, #0]
   b927e:	695b      	ldr	r3, [r3, #20]
   b9280:	9301      	str	r3, [sp, #4]
   b9282:	bd08      	pop	{r3, pc}
   b9284:	00030230 	.word	0x00030230

000b9288 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9288:	b508      	push	{r3, lr}
   b928a:	4b02      	ldr	r3, [pc, #8]	; (b9294 <hal_spi_init+0xc>)
   b928c:	681b      	ldr	r3, [r3, #0]
   b928e:	69db      	ldr	r3, [r3, #28]
   b9290:	9301      	str	r3, [sp, #4]
   b9292:	bd08      	pop	{r3, pc}
   b9294:	00030230 	.word	0x00030230

000b9298 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9298:	b508      	push	{r3, lr}
   b929a:	4b02      	ldr	r3, [pc, #8]	; (b92a4 <hal_spi_is_enabled+0xc>)
   b929c:	681b      	ldr	r3, [r3, #0]
   b929e:	6a1b      	ldr	r3, [r3, #32]
   b92a0:	9301      	str	r3, [sp, #4]
   b92a2:	bd08      	pop	{r3, pc}
   b92a4:	00030230 	.word	0x00030230

000b92a8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b92a8:	b508      	push	{r3, lr}
   b92aa:	4b02      	ldr	r3, [pc, #8]	; (b92b4 <hal_spi_info+0xc>)
   b92ac:	681b      	ldr	r3, [r3, #0]
   b92ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b92b0:	9301      	str	r3, [sp, #4]
   b92b2:	bd08      	pop	{r3, pc}
   b92b4:	00030230 	.word	0x00030230

000b92b8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b92b8:	b508      	push	{r3, lr}
   b92ba:	4b02      	ldr	r3, [pc, #8]	; (b92c4 <hal_spi_transfer_dma+0xc>)
   b92bc:	681b      	ldr	r3, [r3, #0]
   b92be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b92c0:	9301      	str	r3, [sp, #4]
   b92c2:	bd08      	pop	{r3, pc}
   b92c4:	00030230 	.word	0x00030230

000b92c8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b92c8:	b508      	push	{r3, lr}
   b92ca:	4b02      	ldr	r3, [pc, #8]	; (b92d4 <hal_spi_transfer_dma_status+0xc>)
   b92cc:	681b      	ldr	r3, [r3, #0]
   b92ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b92d0:	9301      	str	r3, [sp, #4]
   b92d2:	bd08      	pop	{r3, pc}
   b92d4:	00030230 	.word	0x00030230

000b92d8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b92d8:	b508      	push	{r3, lr}
   b92da:	4b02      	ldr	r3, [pc, #8]	; (b92e4 <hal_spi_set_settings+0xc>)
   b92dc:	681b      	ldr	r3, [r3, #0]
   b92de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b92e0:	9301      	str	r3, [sp, #4]
   b92e2:	bd08      	pop	{r3, pc}
   b92e4:	00030230 	.word	0x00030230

000b92e8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b92e8:	b508      	push	{r3, lr}
   b92ea:	4b02      	ldr	r3, [pc, #8]	; (b92f4 <hal_spi_acquire+0xc>)
   b92ec:	681b      	ldr	r3, [r3, #0]
   b92ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b92f0:	9301      	str	r3, [sp, #4]
   b92f2:	bd08      	pop	{r3, pc}
   b92f4:	00030230 	.word	0x00030230

000b92f8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b92f8:	b508      	push	{r3, lr}
   b92fa:	4b02      	ldr	r3, [pc, #8]	; (b9304 <hal_spi_release+0xc>)
   b92fc:	681b      	ldr	r3, [r3, #0]
   b92fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9300:	9301      	str	r3, [sp, #4]
   b9302:	bd08      	pop	{r3, pc}
   b9304:	00030230 	.word	0x00030230

000b9308 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9308:	b508      	push	{r3, lr}
   b930a:	4b02      	ldr	r3, [pc, #8]	; (b9314 <hal_usart_write+0xc>)
   b930c:	681b      	ldr	r3, [r3, #0]
   b930e:	68db      	ldr	r3, [r3, #12]
   b9310:	9301      	str	r3, [sp, #4]
   b9312:	bd08      	pop	{r3, pc}
   b9314:	0003023c 	.word	0x0003023c

000b9318 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9318:	b508      	push	{r3, lr}
   b931a:	4b02      	ldr	r3, [pc, #8]	; (b9324 <hal_usart_available+0xc>)
   b931c:	681b      	ldr	r3, [r3, #0]
   b931e:	691b      	ldr	r3, [r3, #16]
   b9320:	9301      	str	r3, [sp, #4]
   b9322:	bd08      	pop	{r3, pc}
   b9324:	0003023c 	.word	0x0003023c

000b9328 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9328:	b508      	push	{r3, lr}
   b932a:	4b02      	ldr	r3, [pc, #8]	; (b9334 <hal_usart_read+0xc>)
   b932c:	681b      	ldr	r3, [r3, #0]
   b932e:	695b      	ldr	r3, [r3, #20]
   b9330:	9301      	str	r3, [sp, #4]
   b9332:	bd08      	pop	{r3, pc}
   b9334:	0003023c 	.word	0x0003023c

000b9338 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9338:	b508      	push	{r3, lr}
   b933a:	4b02      	ldr	r3, [pc, #8]	; (b9344 <hal_usart_peek+0xc>)
   b933c:	681b      	ldr	r3, [r3, #0]
   b933e:	699b      	ldr	r3, [r3, #24]
   b9340:	9301      	str	r3, [sp, #4]
   b9342:	bd08      	pop	{r3, pc}
   b9344:	0003023c 	.word	0x0003023c

000b9348 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9348:	b508      	push	{r3, lr}
   b934a:	4b02      	ldr	r3, [pc, #8]	; (b9354 <hal_usart_flush+0xc>)
   b934c:	681b      	ldr	r3, [r3, #0]
   b934e:	69db      	ldr	r3, [r3, #28]
   b9350:	9301      	str	r3, [sp, #4]
   b9352:	bd08      	pop	{r3, pc}
   b9354:	0003023c 	.word	0x0003023c

000b9358 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9358:	b508      	push	{r3, lr}
   b935a:	4b02      	ldr	r3, [pc, #8]	; (b9364 <hal_usart_is_enabled+0xc>)
   b935c:	681b      	ldr	r3, [r3, #0]
   b935e:	6a1b      	ldr	r3, [r3, #32]
   b9360:	9301      	str	r3, [sp, #4]
   b9362:	bd08      	pop	{r3, pc}
   b9364:	0003023c 	.word	0x0003023c

000b9368 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9368:	b508      	push	{r3, lr}
   b936a:	4b02      	ldr	r3, [pc, #8]	; (b9374 <hal_usart_available_data_for_write+0xc>)
   b936c:	681b      	ldr	r3, [r3, #0]
   b936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9370:	9301      	str	r3, [sp, #4]
   b9372:	bd08      	pop	{r3, pc}
   b9374:	0003023c 	.word	0x0003023c

000b9378 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9378:	b508      	push	{r3, lr}
   b937a:	4b02      	ldr	r3, [pc, #8]	; (b9384 <hal_usart_begin_config+0xc>)
   b937c:	681b      	ldr	r3, [r3, #0]
   b937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9380:	9301      	str	r3, [sp, #4]
   b9382:	bd08      	pop	{r3, pc}
   b9384:	0003023c 	.word	0x0003023c

000b9388 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9388:	b508      	push	{r3, lr}
   b938a:	4b02      	ldr	r3, [pc, #8]	; (b9394 <hal_usart_init_ex+0xc>)
   b938c:	681b      	ldr	r3, [r3, #0]
   b938e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9390:	9301      	str	r3, [sp, #4]
   b9392:	bd08      	pop	{r3, pc}
   b9394:	0003023c 	.word	0x0003023c

000b9398 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9398:	b508      	push	{r3, lr}
   b939a:	4b02      	ldr	r3, [pc, #8]	; (b93a4 <HAL_USB_USART_Init+0xc>)
   b939c:	681b      	ldr	r3, [r3, #0]
   b939e:	681b      	ldr	r3, [r3, #0]
   b93a0:	9301      	str	r3, [sp, #4]
   b93a2:	bd08      	pop	{r3, pc}
   b93a4:	0003024c 	.word	0x0003024c

000b93a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b93a8:	b508      	push	{r3, lr}
   b93aa:	4b02      	ldr	r3, [pc, #8]	; (b93b4 <HAL_USB_USART_Begin+0xc>)
   b93ac:	681b      	ldr	r3, [r3, #0]
   b93ae:	685b      	ldr	r3, [r3, #4]
   b93b0:	9301      	str	r3, [sp, #4]
   b93b2:	bd08      	pop	{r3, pc}
   b93b4:	0003024c 	.word	0x0003024c

000b93b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b93b8:	b508      	push	{r3, lr}
   b93ba:	4b02      	ldr	r3, [pc, #8]	; (b93c4 <HAL_USB_USART_Available_Data+0xc>)
   b93bc:	681b      	ldr	r3, [r3, #0]
   b93be:	691b      	ldr	r3, [r3, #16]
   b93c0:	9301      	str	r3, [sp, #4]
   b93c2:	bd08      	pop	{r3, pc}
   b93c4:	0003024c 	.word	0x0003024c

000b93c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b93c8:	b508      	push	{r3, lr}
   b93ca:	4b02      	ldr	r3, [pc, #8]	; (b93d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b93cc:	681b      	ldr	r3, [r3, #0]
   b93ce:	695b      	ldr	r3, [r3, #20]
   b93d0:	9301      	str	r3, [sp, #4]
   b93d2:	bd08      	pop	{r3, pc}
   b93d4:	0003024c 	.word	0x0003024c

000b93d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b93d8:	b508      	push	{r3, lr}
   b93da:	4b02      	ldr	r3, [pc, #8]	; (b93e4 <HAL_USB_USART_Receive_Data+0xc>)
   b93dc:	681b      	ldr	r3, [r3, #0]
   b93de:	699b      	ldr	r3, [r3, #24]
   b93e0:	9301      	str	r3, [sp, #4]
   b93e2:	bd08      	pop	{r3, pc}
   b93e4:	0003024c 	.word	0x0003024c

000b93e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b93e8:	b508      	push	{r3, lr}
   b93ea:	4b02      	ldr	r3, [pc, #8]	; (b93f4 <HAL_USB_USART_Send_Data+0xc>)
   b93ec:	681b      	ldr	r3, [r3, #0]
   b93ee:	69db      	ldr	r3, [r3, #28]
   b93f0:	9301      	str	r3, [sp, #4]
   b93f2:	bd08      	pop	{r3, pc}
   b93f4:	0003024c 	.word	0x0003024c

000b93f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b93f8:	b508      	push	{r3, lr}
   b93fa:	4b02      	ldr	r3, [pc, #8]	; (b9404 <HAL_USB_USART_Flush_Data+0xc>)
   b93fc:	681b      	ldr	r3, [r3, #0]
   b93fe:	6a1b      	ldr	r3, [r3, #32]
   b9400:	9301      	str	r3, [sp, #4]
   b9402:	bd08      	pop	{r3, pc}
   b9404:	0003024c 	.word	0x0003024c

000b9408 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9408:	b508      	push	{r3, lr}
   b940a:	4b02      	ldr	r3, [pc, #8]	; (b9414 <panic_+0xc>)
   b940c:	681b      	ldr	r3, [r3, #0]
   b940e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9410:	9301      	str	r3, [sp, #4]
   b9412:	bd08      	pop	{r3, pc}
   b9414:	00030260 	.word	0x00030260

000b9418 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9418:	b508      	push	{r3, lr}
   b941a:	4b02      	ldr	r3, [pc, #8]	; (b9424 <log_message+0xc>)
   b941c:	681b      	ldr	r3, [r3, #0]
   b941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9420:	9301      	str	r3, [sp, #4]
   b9422:	bd08      	pop	{r3, pc}
   b9424:	00030260 	.word	0x00030260

000b9428 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9428:	b508      	push	{r3, lr}
   b942a:	4b02      	ldr	r3, [pc, #8]	; (b9434 <system_mode+0xc>)
   b942c:	681b      	ldr	r3, [r3, #0]
   b942e:	681b      	ldr	r3, [r3, #0]
   b9430:	9301      	str	r3, [sp, #4]
   b9432:	bd08      	pop	{r3, pc}
   b9434:	00030220 	.word	0x00030220

000b9438 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9438:	b508      	push	{r3, lr}
   b943a:	4b02      	ldr	r3, [pc, #8]	; (b9444 <set_system_mode+0xc>)
   b943c:	681b      	ldr	r3, [r3, #0]
   b943e:	685b      	ldr	r3, [r3, #4]
   b9440:	9301      	str	r3, [sp, #4]
   b9442:	bd08      	pop	{r3, pc}
   b9444:	00030220 	.word	0x00030220

000b9448 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9448:	b508      	push	{r3, lr}
   b944a:	4b02      	ldr	r3, [pc, #8]	; (b9454 <system_delay_ms+0xc>)
   b944c:	681b      	ldr	r3, [r3, #0]
   b944e:	695b      	ldr	r3, [r3, #20]
   b9450:	9301      	str	r3, [sp, #4]
   b9452:	bd08      	pop	{r3, pc}
   b9454:	00030220 	.word	0x00030220

000b9458 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9458:	b508      	push	{r3, lr}
   b945a:	4b02      	ldr	r3, [pc, #8]	; (b9464 <application_thread_current+0xc>)
   b945c:	681b      	ldr	r3, [r3, #0]
   b945e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9460:	9301      	str	r3, [sp, #4]
   b9462:	bd08      	pop	{r3, pc}
   b9464:	00030220 	.word	0x00030220

000b9468 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9468:	b508      	push	{r3, lr}
   b946a:	4b02      	ldr	r3, [pc, #8]	; (b9474 <application_thread_invoke+0xc>)
   b946c:	681b      	ldr	r3, [r3, #0]
   b946e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9470:	9301      	str	r3, [sp, #4]
   b9472:	bd08      	pop	{r3, pc}
   b9474:	00030220 	.word	0x00030220

000b9478 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9478:	b508      	push	{r3, lr}
   b947a:	4b02      	ldr	r3, [pc, #8]	; (b9484 <system_thread_get_state+0xc>)
   b947c:	681b      	ldr	r3, [r3, #0]
   b947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9480:	9301      	str	r3, [sp, #4]
   b9482:	bd08      	pop	{r3, pc}
   b9484:	00030220 	.word	0x00030220

000b9488 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9488:	b508      	push	{r3, lr}
   b948a:	4b03      	ldr	r3, [pc, #12]	; (b9498 <system_ctrl_set_app_request_handler+0x10>)
   b948c:	681b      	ldr	r3, [r3, #0]
   b948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9492:	9301      	str	r3, [sp, #4]
   b9494:	bd08      	pop	{r3, pc}
   b9496:	0000      	.short	0x0000
   b9498:	00030220 	.word	0x00030220

000b949c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b949c:	b508      	push	{r3, lr}
   b949e:	4b03      	ldr	r3, [pc, #12]	; (b94ac <system_ctrl_set_result+0x10>)
   b94a0:	681b      	ldr	r3, [r3, #0]
   b94a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b94a6:	9301      	str	r3, [sp, #4]
   b94a8:	bd08      	pop	{r3, pc}
   b94aa:	0000      	.short	0x0000
   b94ac:	00030220 	.word	0x00030220

000b94b0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b94b0:	b508      	push	{r3, lr}
   b94b2:	4b02      	ldr	r3, [pc, #8]	; (b94bc <spark_process+0xc>)
   b94b4:	681b      	ldr	r3, [r3, #0]
   b94b6:	689b      	ldr	r3, [r3, #8]
   b94b8:	9301      	str	r3, [sp, #4]
   b94ba:	bd08      	pop	{r3, pc}
   b94bc:	00030244 	.word	0x00030244

000b94c0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b94c0:	b508      	push	{r3, lr}
   b94c2:	4b02      	ldr	r3, [pc, #8]	; (b94cc <spark_cloud_flag_connected+0xc>)
   b94c4:	681b      	ldr	r3, [r3, #0]
   b94c6:	695b      	ldr	r3, [r3, #20]
   b94c8:	9301      	str	r3, [sp, #4]
   b94ca:	bd08      	pop	{r3, pc}
   b94cc:	00030244 	.word	0x00030244

000b94d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b94d0:	b508      	push	{r3, lr}
   b94d2:	4b02      	ldr	r3, [pc, #8]	; (b94dc <spark_send_event+0xc>)
   b94d4:	681b      	ldr	r3, [r3, #0]
   b94d6:	6a1b      	ldr	r3, [r3, #32]
   b94d8:	9301      	str	r3, [sp, #4]
   b94da:	bd08      	pop	{r3, pc}
   b94dc:	00030244 	.word	0x00030244

000b94e0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b94e0:	b508      	push	{r3, lr}
   b94e2:	4b02      	ldr	r3, [pc, #8]	; (b94ec <spark_subscribe+0xc>)
   b94e4:	681b      	ldr	r3, [r3, #0]
   b94e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b94e8:	9301      	str	r3, [sp, #4]
   b94ea:	bd08      	pop	{r3, pc}
   b94ec:	00030244 	.word	0x00030244

000b94f0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b94f0:	b508      	push	{r3, lr}
   b94f2:	4b02      	ldr	r3, [pc, #8]	; (b94fc <spark_sync_time_pending+0xc>)
   b94f4:	681b      	ldr	r3, [r3, #0]
   b94f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b94f8:	9301      	str	r3, [sp, #4]
   b94fa:	bd08      	pop	{r3, pc}
   b94fc:	00030244 	.word	0x00030244

000b9500 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9500:	b508      	push	{r3, lr}
   b9502:	4b02      	ldr	r3, [pc, #8]	; (b950c <spark_set_random_seed_from_cloud_handler+0xc>)
   b9504:	681b      	ldr	r3, [r3, #0]
   b9506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9508:	9301      	str	r3, [sp, #4]
   b950a:	bd08      	pop	{r3, pc}
   b950c:	00030244 	.word	0x00030244

000b9510 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9510:	b508      	push	{r3, lr}
   b9512:	4b02      	ldr	r3, [pc, #8]	; (b951c <network_connect+0xc>)
   b9514:	681b      	ldr	r3, [r3, #0]
   b9516:	685b      	ldr	r3, [r3, #4]
   b9518:	9301      	str	r3, [sp, #4]
   b951a:	bd08      	pop	{r3, pc}
   b951c:	00030240 	.word	0x00030240

000b9520 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9520:	b508      	push	{r3, lr}
   b9522:	4b02      	ldr	r3, [pc, #8]	; (b952c <network_connecting+0xc>)
   b9524:	681b      	ldr	r3, [r3, #0]
   b9526:	689b      	ldr	r3, [r3, #8]
   b9528:	9301      	str	r3, [sp, #4]
   b952a:	bd08      	pop	{r3, pc}
   b952c:	00030240 	.word	0x00030240

000b9530 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9530:	b508      	push	{r3, lr}
   b9532:	4b02      	ldr	r3, [pc, #8]	; (b953c <network_disconnect+0xc>)
   b9534:	681b      	ldr	r3, [r3, #0]
   b9536:	68db      	ldr	r3, [r3, #12]
   b9538:	9301      	str	r3, [sp, #4]
   b953a:	bd08      	pop	{r3, pc}
   b953c:	00030240 	.word	0x00030240

000b9540 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9540:	b508      	push	{r3, lr}
   b9542:	4b02      	ldr	r3, [pc, #8]	; (b954c <network_ready+0xc>)
   b9544:	681b      	ldr	r3, [r3, #0]
   b9546:	691b      	ldr	r3, [r3, #16]
   b9548:	9301      	str	r3, [sp, #4]
   b954a:	bd08      	pop	{r3, pc}
   b954c:	00030240 	.word	0x00030240

000b9550 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9550:	b508      	push	{r3, lr}
   b9552:	4b02      	ldr	r3, [pc, #8]	; (b955c <network_on+0xc>)
   b9554:	681b      	ldr	r3, [r3, #0]
   b9556:	695b      	ldr	r3, [r3, #20]
   b9558:	9301      	str	r3, [sp, #4]
   b955a:	bd08      	pop	{r3, pc}
   b955c:	00030240 	.word	0x00030240

000b9560 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9560:	b508      	push	{r3, lr}
   b9562:	4b02      	ldr	r3, [pc, #8]	; (b956c <network_off+0xc>)
   b9564:	681b      	ldr	r3, [r3, #0]
   b9566:	699b      	ldr	r3, [r3, #24]
   b9568:	9301      	str	r3, [sp, #4]
   b956a:	bd08      	pop	{r3, pc}
   b956c:	00030240 	.word	0x00030240

000b9570 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9570:	b508      	push	{r3, lr}
   b9572:	4b02      	ldr	r3, [pc, #8]	; (b957c <network_listen+0xc>)
   b9574:	681b      	ldr	r3, [r3, #0]
   b9576:	69db      	ldr	r3, [r3, #28]
   b9578:	9301      	str	r3, [sp, #4]
   b957a:	bd08      	pop	{r3, pc}
   b957c:	00030240 	.word	0x00030240

000b9580 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9580:	b508      	push	{r3, lr}
   b9582:	4b02      	ldr	r3, [pc, #8]	; (b958c <network_listening+0xc>)
   b9584:	681b      	ldr	r3, [r3, #0]
   b9586:	6a1b      	ldr	r3, [r3, #32]
   b9588:	9301      	str	r3, [sp, #4]
   b958a:	bd08      	pop	{r3, pc}
   b958c:	00030240 	.word	0x00030240

000b9590 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9590:	b508      	push	{r3, lr}
   b9592:	4b02      	ldr	r3, [pc, #8]	; (b959c <network_set_listen_timeout+0xc>)
   b9594:	681b      	ldr	r3, [r3, #0]
   b9596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9598:	9301      	str	r3, [sp, #4]
   b959a:	bd08      	pop	{r3, pc}
   b959c:	00030240 	.word	0x00030240

000b95a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b95a0:	b508      	push	{r3, lr}
   b95a2:	4b02      	ldr	r3, [pc, #8]	; (b95ac <network_get_listen_timeout+0xc>)
   b95a4:	681b      	ldr	r3, [r3, #0]
   b95a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b95a8:	9301      	str	r3, [sp, #4]
   b95aa:	bd08      	pop	{r3, pc}
   b95ac:	00030240 	.word	0x00030240

000b95b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b95b0:	b508      	push	{r3, lr}
   b95b2:	4b02      	ldr	r3, [pc, #8]	; (b95bc <network_is_on+0xc>)
   b95b4:	681b      	ldr	r3, [r3, #0]
   b95b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b95b8:	9301      	str	r3, [sp, #4]
   b95ba:	bd08      	pop	{r3, pc}
   b95bc:	00030240 	.word	0x00030240

000b95c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b95c0:	b508      	push	{r3, lr}
   b95c2:	4b02      	ldr	r3, [pc, #8]	; (b95cc <network_is_off+0xc>)
   b95c4:	681b      	ldr	r3, [r3, #0]
   b95c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b95c8:	9301      	str	r3, [sp, #4]
   b95ca:	bd08      	pop	{r3, pc}
   b95cc:	00030240 	.word	0x00030240

000b95d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b95d0:	b508      	push	{r3, lr}
   b95d2:	4b02      	ldr	r3, [pc, #8]	; (b95dc <malloc+0xc>)
   b95d4:	681b      	ldr	r3, [r3, #0]
   b95d6:	681b      	ldr	r3, [r3, #0]
   b95d8:	9301      	str	r3, [sp, #4]
   b95da:	bd08      	pop	{r3, pc}
   b95dc:	0003021c 	.word	0x0003021c

000b95e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b95e0:	b508      	push	{r3, lr}
   b95e2:	4b02      	ldr	r3, [pc, #8]	; (b95ec <free+0xc>)
   b95e4:	681b      	ldr	r3, [r3, #0]
   b95e6:	685b      	ldr	r3, [r3, #4]
   b95e8:	9301      	str	r3, [sp, #4]
   b95ea:	bd08      	pop	{r3, pc}
   b95ec:	0003021c 	.word	0x0003021c

000b95f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b95f0:	b508      	push	{r3, lr}
   b95f2:	4b02      	ldr	r3, [pc, #8]	; (b95fc <realloc+0xc>)
   b95f4:	681b      	ldr	r3, [r3, #0]
   b95f6:	689b      	ldr	r3, [r3, #8]
   b95f8:	9301      	str	r3, [sp, #4]
   b95fa:	bd08      	pop	{r3, pc}
   b95fc:	0003021c 	.word	0x0003021c

000b9600 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b9600:	b508      	push	{r3, lr}
   b9602:	4b02      	ldr	r3, [pc, #8]	; (b960c <sprintf+0xc>)
   b9604:	681b      	ldr	r3, [r3, #0]
   b9606:	68db      	ldr	r3, [r3, #12]
   b9608:	9301      	str	r3, [sp, #4]
   b960a:	bd08      	pop	{r3, pc}
   b960c:	0003021c 	.word	0x0003021c

000b9610 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9610:	b508      	push	{r3, lr}
   b9612:	4b02      	ldr	r3, [pc, #8]	; (b961c <sscanf+0xc>)
   b9614:	681b      	ldr	r3, [r3, #0]
   b9616:	695b      	ldr	r3, [r3, #20]
   b9618:	9301      	str	r3, [sp, #4]
   b961a:	bd08      	pop	{r3, pc}
   b961c:	0003021c 	.word	0x0003021c

000b9620 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9620:	b508      	push	{r3, lr}
   b9622:	4b02      	ldr	r3, [pc, #8]	; (b962c <snprintf+0xc>)
   b9624:	681b      	ldr	r3, [r3, #0]
   b9626:	69db      	ldr	r3, [r3, #28]
   b9628:	9301      	str	r3, [sp, #4]
   b962a:	bd08      	pop	{r3, pc}
   b962c:	0003021c 	.word	0x0003021c

000b9630 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9630:	b508      	push	{r3, lr}
   b9632:	4b02      	ldr	r3, [pc, #8]	; (b963c <vsnprintf+0xc>)
   b9634:	681b      	ldr	r3, [r3, #0]
   b9636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9638:	9301      	str	r3, [sp, #4]
   b963a:	bd08      	pop	{r3, pc}
   b963c:	0003021c 	.word	0x0003021c

000b9640 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9640:	b508      	push	{r3, lr}
   b9642:	4b02      	ldr	r3, [pc, #8]	; (b964c <abort+0xc>)
   b9644:	681b      	ldr	r3, [r3, #0]
   b9646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9648:	9301      	str	r3, [sp, #4]
   b964a:	bd08      	pop	{r3, pc}
   b964c:	0003021c 	.word	0x0003021c

000b9650 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9650:	b508      	push	{r3, lr}
   b9652:	4b02      	ldr	r3, [pc, #8]	; (b965c <_malloc_r+0xc>)
   b9654:	681b      	ldr	r3, [r3, #0]
   b9656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9658:	9301      	str	r3, [sp, #4]
   b965a:	bd08      	pop	{r3, pc}
   b965c:	0003021c 	.word	0x0003021c

000b9660 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9660:	b508      	push	{r3, lr}
   b9662:	4b02      	ldr	r3, [pc, #8]	; (b966c <__errno+0xc>)
   b9664:	681b      	ldr	r3, [r3, #0]
   b9666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9668:	9301      	str	r3, [sp, #4]
   b966a:	bd08      	pop	{r3, pc}
   b966c:	0003021c 	.word	0x0003021c

000b9670 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9670:	b508      	push	{r3, lr}
   b9672:	4b02      	ldr	r3, [pc, #8]	; (b967c <__assert_func+0xc>)
   b9674:	681b      	ldr	r3, [r3, #0]
   b9676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9678:	9301      	str	r3, [sp, #4]
   b967a:	bd08      	pop	{r3, pc}
   b967c:	0003021c 	.word	0x0003021c

000b9680 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9680:	b508      	push	{r3, lr}
   b9682:	4b02      	ldr	r3, [pc, #8]	; (b968c <newlib_impure_ptr_callback+0xc>)
   b9684:	681b      	ldr	r3, [r3, #0]
   b9686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9688:	9301      	str	r3, [sp, #4]
   b968a:	bd08      	pop	{r3, pc}
   b968c:	0003021c 	.word	0x0003021c

000b9690 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9690:	b508      	push	{r3, lr}
   b9692:	4b02      	ldr	r3, [pc, #8]	; (b969c <localtime_r+0xc>)
   b9694:	681b      	ldr	r3, [r3, #0]
   b9696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9698:	9301      	str	r3, [sp, #4]
   b969a:	bd08      	pop	{r3, pc}
   b969c:	0003021c 	.word	0x0003021c

000b96a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b96a0:	2100      	movs	r1, #0
   b96a2:	f7ff bed1 	b.w	b9448 <system_delay_ms>

000b96a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b96a6:	b510      	push	{r4, lr}
      if (_M_empty())
   b96a8:	6883      	ldr	r3, [r0, #8]
   b96aa:	4604      	mov	r4, r0
   b96ac:	b90b      	cbnz	r3, b96b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b96ae:	f003 fe1d 	bl	bd2ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b96b2:	68c3      	ldr	r3, [r0, #12]
   b96b4:	4798      	blx	r3
      if (_M_manager)
   b96b6:	68a3      	ldr	r3, [r4, #8]
   b96b8:	b11b      	cbz	r3, b96c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b96ba:	2203      	movs	r2, #3
   b96bc:	4621      	mov	r1, r4
   b96be:	4620      	mov	r0, r4
   b96c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b96c2:	4620      	mov	r0, r4
   b96c4:	2110      	movs	r1, #16
}
   b96c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b96ca:	f7fa bce8 	b.w	b409e <_ZdlPvj>

000b96ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b96ce:	4770      	bx	lr

000b96d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b96d0:	4770      	bx	lr

000b96d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b96d2:	4770      	bx	lr

000b96d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b96d4:	4770      	bx	lr
	...

000b96d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b96d8:	4b06      	ldr	r3, [pc, #24]	; (b96f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b96da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b96dc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b96de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b96e2:	d005      	beq.n	b96f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b96e4:	4608      	mov	r0, r1
   b96e6:	f003 fe05 	bl	bd2f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b96ea:	2800      	cmp	r0, #0
   b96ec:	bf08      	it	eq
   b96ee:	2400      	moveq	r4, #0
      }
   b96f0:	4620      	mov	r0, r4
   b96f2:	bd10      	pop	{r4, pc}
   b96f4:	000c1708 	.word	0x000c1708

000b96f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b96f8:	4b06      	ldr	r3, [pc, #24]	; (b9714 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b96fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b96fc:	b510      	push	{r4, lr}
   b96fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9702:	d005      	beq.n	b9710 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9704:	4608      	mov	r0, r1
   b9706:	f003 fdf5 	bl	bd2f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b970a:	2800      	cmp	r0, #0
   b970c:	bf08      	it	eq
   b970e:	2400      	moveq	r4, #0
      }
   b9710:	4620      	mov	r0, r4
   b9712:	bd10      	pop	{r4, pc}
   b9714:	000c1708 	.word	0x000c1708

000b9718 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9718:	4b06      	ldr	r3, [pc, #24]	; (b9734 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b971a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b971c:	b510      	push	{r4, lr}
   b971e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9722:	d005      	beq.n	b9730 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9724:	4608      	mov	r0, r1
   b9726:	f003 fde5 	bl	bd2f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b972a:	2800      	cmp	r0, #0
   b972c:	bf08      	it	eq
   b972e:	2400      	moveq	r4, #0
      }
   b9730:	4620      	mov	r0, r4
   b9732:	bd10      	pop	{r4, pc}
   b9734:	000c1708 	.word	0x000c1708

000b9738 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9738:	b510      	push	{r4, lr}
   b973a:	2168      	movs	r1, #104	; 0x68
   b973c:	4604      	mov	r4, r0
   b973e:	f7fa fcae 	bl	b409e <_ZdlPvj>
   b9742:	4620      	mov	r0, r4
   b9744:	bd10      	pop	{r4, pc}

000b9746 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9746:	b510      	push	{r4, lr}
   b9748:	2128      	movs	r1, #40	; 0x28
   b974a:	4604      	mov	r4, r0
   b974c:	f7fa fca7 	bl	b409e <_ZdlPvj>
   b9750:	4620      	mov	r0, r4
   b9752:	bd10      	pop	{r4, pc}

000b9754 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9754:	b510      	push	{r4, lr}
   b9756:	2130      	movs	r1, #48	; 0x30
   b9758:	4604      	mov	r4, r0
   b975a:	f7fa fca0 	bl	b409e <_ZdlPvj>
   b975e:	4620      	mov	r0, r4
   b9760:	bd10      	pop	{r4, pc}

000b9762 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9762:	2168      	movs	r1, #104	; 0x68
   b9764:	f7fa bc9b 	b.w	b409e <_ZdlPvj>

000b9768 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9768:	2128      	movs	r1, #40	; 0x28
   b976a:	f7fa bc98 	b.w	b409e <_ZdlPvj>

000b976e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b976e:	2130      	movs	r1, #48	; 0x30
   b9770:	f7fa bc95 	b.w	b409e <_ZdlPvj>

000b9774 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b9774:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9776:	2500      	movs	r5, #0
   b9778:	1cec      	adds	r4, r5, #3
   b977a:	428c      	cmp	r4, r1
   b977c:	d80d      	bhi.n	b979a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b977e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9780:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b9782:	5d87      	ldrb	r7, [r0, r6]
   b9784:	4297      	cmp	r7, r2
   b9786:	d105      	bne.n	b9794 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9788:	4426      	add	r6, r4
   b978a:	42b1      	cmp	r1, r6
   b978c:	d305      	bcc.n	b979a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b978e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9790:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9792:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9794:	3401      	adds	r4, #1
   b9796:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9798:	e7ee      	b.n	b9778 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b979a:	2000      	movs	r0, #0
   b979c:	e7f9      	b.n	b9792 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b97a0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b97a0:	4a02      	ldr	r2, [pc, #8]	; (b97ac <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b97a2:	4903      	ldr	r1, [pc, #12]	; (b97b0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b97a4:	200a      	movs	r0, #10
   b97a6:	f7ff be2f 	b.w	b9408 <panic_>
   b97aa:	bf00      	nop
   b97ac:	000b90d9 	.word	0x000b90d9
   b97b0:	000c1498 	.word	0x000c1498

000b97b4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b97b4:	b430      	push	{r4, r5}
   b97b6:	460d      	mov	r5, r1
   b97b8:	4611      	mov	r1, r2
   b97ba:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b97bc:	6803      	ldr	r3, [r0, #0]
   b97be:	6809      	ldr	r1, [r1, #0]
   b97c0:	6828      	ldr	r0, [r5, #0]
   b97c2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b97c6:	46a4      	mov	ip, r4
      }
   b97c8:	bc30      	pop	{r4, r5}
   b97ca:	4760      	bx	ip

000b97cc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b97cc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b97ce:	b538      	push	{r3, r4, r5, lr}
   b97d0:	4604      	mov	r4, r0
	switch (__op)
   b97d2:	d102      	bne.n	b97da <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b97d4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b97d6:	6023      	str	r3, [r4, #0]
	}
   b97d8:	e003      	b.n	b97e2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b97da:	2a02      	cmp	r2, #2
   b97dc:	d003      	beq.n	b97e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b97de:	2a03      	cmp	r2, #3
   b97e0:	d00d      	beq.n	b97fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b97e2:	2000      	movs	r0, #0
   b97e4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b97e6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b97e8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b97ea:	f7fa fc54 	bl	b4096 <_Znwj>
   b97ee:	4603      	mov	r3, r0
   b97f0:	2800      	cmp	r0, #0
   b97f2:	d0f0      	beq.n	b97d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b97f4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b97f8:	e883 0003 	stmia.w	r3, {r0, r1}
   b97fc:	e7eb      	b.n	b97d6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b97fe:	6800      	ldr	r0, [r0, #0]
   b9800:	2800      	cmp	r0, #0
   b9802:	d0ee      	beq.n	b97e2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9804:	2108      	movs	r1, #8
   b9806:	f7fa fc4a 	bl	b409e <_ZdlPvj>
   b980a:	e7ea      	b.n	b97e2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b980c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b980c:	b510      	push	{r4, lr}
	if (_M_manager)
   b980e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9810:	4604      	mov	r4, r0
	if (_M_manager)
   b9812:	b12b      	cbz	r3, b9820 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9814:	2203      	movs	r2, #3
   b9816:	4601      	mov	r1, r0
   b9818:	4798      	blx	r3
	    _M_manager = nullptr;
   b981a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b981c:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9820:	bd10      	pop	{r4, pc}

000b9822 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9822:	b510      	push	{r4, lr}
	if (_M_manager)
   b9824:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9826:	4604      	mov	r4, r0
	if (_M_manager)
   b9828:	b12b      	cbz	r3, b9836 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b982a:	2203      	movs	r2, #3
   b982c:	4601      	mov	r1, r0
   b982e:	4798      	blx	r3
	    _M_manager = nullptr;
   b9830:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9832:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9836:	bd10      	pop	{r4, pc}

000b9838 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b9838:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b983a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b983c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b983e:	2220      	movs	r2, #32
   b9840:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b9844:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b9846:	4a08      	ldr	r2, [pc, #32]	; (b9868 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b9848:	9200      	str	r2, [sp, #0]
   b984a:	4908      	ldr	r1, [pc, #32]	; (b986c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b984c:	aa02      	add	r2, sp, #8
   b984e:	2001      	movs	r0, #1
   b9850:	f7ff fde2 	bl	b9418 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9854:	6820      	ldr	r0, [r4, #0]
   b9856:	4906      	ldr	r1, [pc, #24]	; (b9870 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b9858:	8800      	ldrh	r0, [r0, #0]
   b985a:	2300      	movs	r3, #0
   b985c:	4622      	mov	r2, r4
    }
   b985e:	b00a      	add	sp, #40	; 0x28
   b9860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9864:	f7ff bb62 	b.w	b8f2c <hal_ble_gatt_client_discover_all_services>
   b9868:	000c14ba 	.word	0x000c14ba
   b986c:	000c14af 	.word	0x000c14af
   b9870:	000bb3e9 	.word	0x000bb3e9

000b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b9874:	b510      	push	{r4, lr}
   b9876:	3801      	subs	r0, #1
   b9878:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b987c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b9880:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b9882:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9886:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9888:	bf88      	it	hi
   b988a:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b988e:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b9892:	7803      	ldrb	r3, [r0, #0]
   b9894:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b9898:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b989c:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b989e:	bf88      	it	hi
   b98a0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b98a4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b98a6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b98aa:	d1e7      	bne.n	b987c <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b98ac:	bd10      	pop	{r4, pc}

000b98ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b98ae:	b510      	push	{r4, lr}
   b98b0:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b98b2:	3058      	adds	r0, #88	; 0x58
   b98b4:	f7fa fd40 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b98b8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b98bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b98c0:	f003 b8a0 	b.w	bca04 <_ZN6StringD1Ev>

000b98c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b98c4:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b98c6:	6803      	ldr	r3, [r0, #0]
   b98c8:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b98ca:	4605      	mov	r5, r0
   b98cc:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b98ce:	d008      	beq.n	b98e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b98d0:	b111      	cbz	r1, b98d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b98d2:	684b      	ldr	r3, [r1, #4]
   b98d4:	3301      	adds	r3, #1
   b98d6:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b98d8:	6828      	ldr	r0, [r5, #0]
   b98da:	b108      	cbz	r0, b98e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b98dc:	f7fa fd6a 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b98e0:	602c      	str	r4, [r5, #0]
      }
   b98e2:	bd38      	pop	{r3, r4, r5, pc}

000b98e4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b98e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b98e8:	b2da      	uxtb	r2, r3
   b98ea:	2a09      	cmp	r2, #9
   b98ec:	d801      	bhi.n	b98f2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b98ee:	4618      	mov	r0, r3
   b98f0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b98f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b98f6:	2b05      	cmp	r3, #5
   b98f8:	d801      	bhi.n	b98fe <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b98fa:	3857      	subs	r0, #87	; 0x57
   b98fc:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b98fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9902:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9904:	bf94      	ite	ls
   b9906:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9908:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b990c:	4770      	bx	lr
	...

000b9910 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9910:	b510      	push	{r4, lr}
            locked_(false) {
   b9912:	2300      	movs	r3, #0
   b9914:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9916:	4b04      	ldr	r3, [pc, #16]	; (b9928 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9918:	4604      	mov	r4, r0
   b991a:	6818      	ldr	r0, [r3, #0]
   b991c:	f7ff fbbc 	bl	b9098 <os_mutex_recursive_lock>
        locked_ = true;
   b9920:	2301      	movs	r3, #1
   b9922:	7023      	strb	r3, [r4, #0]
    }
   b9924:	4620      	mov	r0, r4
   b9926:	bd10      	pop	{r4, pc}
   b9928:	2003e658 	.word	0x2003e658

000b992c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b992c:	b510      	push	{r4, lr}
        if (locked_) {
   b992e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b9930:	4604      	mov	r4, r0
        if (locked_) {
   b9932:	b11b      	cbz	r3, b993c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9934:	4b02      	ldr	r3, [pc, #8]	; (b9940 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9936:	6818      	ldr	r0, [r3, #0]
   b9938:	f7ff fbb6 	bl	b90a8 <os_mutex_recursive_unlock>
    }
   b993c:	4620      	mov	r0, r4
   b993e:	bd10      	pop	{r4, pc}
   b9940:	2003e658 	.word	0x2003e658

000b9944 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9944:	b082      	sub	sp, #8
   b9946:	4603      	mov	r3, r0
    address_ = addr;
   b9948:	6808      	ldr	r0, [r1, #0]
   b994a:	6849      	ldr	r1, [r1, #4]
   b994c:	466a      	mov	r2, sp
   b994e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b9950:	466a      	mov	r2, sp
   b9952:	ca03      	ldmia	r2!, {r0, r1}
   b9954:	6018      	str	r0, [r3, #0]
}
   b9956:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9958:	6059      	str	r1, [r3, #4]
}
   b995a:	b002      	add	sp, #8
   b995c:	4770      	bx	lr

000b995e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b995e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b9960:	7982      	ldrb	r2, [r0, #6]
   b9962:	798b      	ldrb	r3, [r1, #6]
   b9964:	429a      	cmp	r2, r3
   b9966:	d106      	bne.n	b9976 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9968:	2206      	movs	r2, #6
   b996a:	f004 fb58 	bl	be01e <memcmp>
   b996e:	fab0 f080 	clz	r0, r0
   b9972:	0940      	lsrs	r0, r0, #5
}
   b9974:	bd08      	pop	{r3, pc}
    return false;
   b9976:	2000      	movs	r0, #0
   b9978:	e7fc      	b.n	b9974 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b997a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b997a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b997e:	6003      	str	r3, [r0, #0]
   b9980:	8083      	strh	r3, [r0, #4]
}
   b9982:	2000      	movs	r0, #0
   b9984:	4770      	bx	lr

000b9986 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b9986:	b508      	push	{r3, lr}
   b9988:	4602      	mov	r2, r0
        : address_{} {
   b998a:	2100      	movs	r1, #0
   b998c:	6001      	str	r1, [r0, #0]
   b998e:	6041      	str	r1, [r0, #4]
    clear();
   b9990:	f7ff fff3 	bl	b997a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9994:	7191      	strb	r1, [r2, #6]
}
   b9996:	4610      	mov	r0, r2
   b9998:	bd08      	pop	{r3, pc}
	...

000b999c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b999c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b999e:	2301      	movs	r3, #1
   b99a0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b99a2:	4b05      	ldr	r3, [pc, #20]	; (b99b8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b99a4:	4602      	mov	r2, r0
   b99a6:	f103 0110 	add.w	r1, r3, #16
   b99aa:	f853 4b04 	ldr.w	r4, [r3], #4
   b99ae:	f842 4b04 	str.w	r4, [r2], #4
   b99b2:	428b      	cmp	r3, r1
   b99b4:	d1f9      	bne.n	b99aa <_ZN8particle7BleUuidC1Ev+0xe>
}
   b99b6:	bd10      	pop	{r4, pc}
   b99b8:	000c1716 	.word	0x000c1716

000b99bc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b99bc:	7c0b      	ldrb	r3, [r1, #16]
   b99be:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b99c2:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b99c4:	d10d      	bne.n	b99e2 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b99c6:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b99c8:	4b0c      	ldr	r3, [pc, #48]	; (b99fc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b99ca:	4602      	mov	r2, r0
   b99cc:	f103 0410 	add.w	r4, r3, #16
   b99d0:	f853 5b04 	ldr.w	r5, [r3], #4
   b99d4:	f842 5b04 	str.w	r5, [r2], #4
   b99d8:	42a3      	cmp	r3, r4
   b99da:	d1f9      	bne.n	b99d0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b99dc:	880b      	ldrh	r3, [r1, #0]
   b99de:	8183      	strh	r3, [r0, #12]
}
   b99e0:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b99e2:	2301      	movs	r3, #1
   b99e4:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b99e6:	f101 0210 	add.w	r2, r1, #16
   b99ea:	4603      	mov	r3, r0
   b99ec:	f851 4b04 	ldr.w	r4, [r1], #4
   b99f0:	f843 4b04 	str.w	r4, [r3], #4
   b99f4:	4291      	cmp	r1, r2
   b99f6:	d1f9      	bne.n	b99ec <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b99f8:	e7f2      	b.n	b99e0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b99fa:	bf00      	nop
   b99fc:	000c1716 	.word	0x000c1716

000b9a00 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9a00:	b510      	push	{r4, lr}
    if (uuid128) {
   b9a02:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9a04:	4604      	mov	r4, r0
    if (uuid128) {
   b9a06:	b1b1      	cbz	r1, b9a36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9a08:	2a01      	cmp	r2, #1
   b9a0a:	f101 0210 	add.w	r2, r1, #16
   b9a0e:	d10a      	bne.n	b9a26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9a10:	4601      	mov	r1, r0
   b9a12:	f853 0b04 	ldr.w	r0, [r3], #4
   b9a16:	f841 0b04 	str.w	r0, [r1], #4
   b9a1a:	4293      	cmp	r3, r2
   b9a1c:	d1f9      	bne.n	b9a12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b9a1e:	2301      	movs	r3, #1
   b9a20:	6123      	str	r3, [r4, #16]
}
   b9a22:	4620      	mov	r0, r4
   b9a24:	bd10      	pop	{r4, pc}
   b9a26:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9a28:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9a2c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9a30:	429a      	cmp	r2, r3
   b9a32:	d1f9      	bne.n	b9a28 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9a34:	e7f3      	b.n	b9a1e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9a36:	2210      	movs	r2, #16
   b9a38:	f004 fb29 	bl	be08e <memset>
   b9a3c:	e7f1      	b.n	b9a22 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b9a3e <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b9a3e:	b538      	push	{r3, r4, r5, lr}
   b9a40:	4604      	mov	r4, r0
   b9a42:	460d      	mov	r5, r1
        : BleUuid() {
   b9a44:	f7ff ffaa 	bl	b999c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b9a48:	2300      	movs	r3, #0
   b9a4a:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9a4c:	81a5      	strh	r5, [r4, #12]
}
   b9a4e:	4620      	mov	r0, r4
   b9a50:	bd38      	pop	{r3, r4, r5, pc}

000b9a52 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9a52:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9a54:	6902      	ldr	r2, [r0, #16]
   b9a56:	690b      	ldr	r3, [r1, #16]
   b9a58:	429a      	cmp	r2, r3
   b9a5a:	d106      	bne.n	b9a6a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9a5c:	2210      	movs	r2, #16
   b9a5e:	f004 fade 	bl	be01e <memcmp>
   b9a62:	fab0 f080 	clz	r0, r0
   b9a66:	0940      	lsrs	r0, r0, #5
}
   b9a68:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9a6a:	2000      	movs	r0, #0
   b9a6c:	e7fc      	b.n	b9a68 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b9a70 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b9a70:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b9a72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b9a76:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9a78:	4b34      	ldr	r3, [pc, #208]	; (b9b4c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b9a7a:	460c      	mov	r4, r1
   b9a7c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9a7e:	4602      	mov	r2, r0
   b9a80:	f103 0110 	add.w	r1, r3, #16
   b9a84:	f853 0b04 	ldr.w	r0, [r3], #4
   b9a88:	f842 0b04 	str.w	r0, [r2], #4
   b9a8c:	428b      	cmp	r3, r1
   b9a8e:	d1f9      	bne.n	b9a84 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b9a90:	b344      	cbz	r4, b9ae4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b9a92:	2124      	movs	r1, #36	; 0x24
   b9a94:	4620      	mov	r0, r4
   b9a96:	f004 fbdd 	bl	be254 <strnlen>
   b9a9a:	2804      	cmp	r0, #4
   b9a9c:	f04f 0500 	mov.w	r5, #0
   b9aa0:	d123      	bne.n	b9aea <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b9aa2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b9aa6:	af01      	add	r7, sp, #4
   b9aa8:	1ca5      	adds	r5, r4, #2
   b9aaa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b9aac:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b9ab0:	f7ff ff18 	bl	b98e4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9ab4:	f1b0 0800 	subs.w	r8, r0, #0
   b9ab8:	db12      	blt.n	b9ae0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b9aba:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b9abe:	f7ff ff11 	bl	b98e4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b9ac2:	2800      	cmp	r0, #0
   b9ac4:	db0c      	blt.n	b9ae0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9ac6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9ac8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9acc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9ace:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9ad2:	d1eb      	bne.n	b9aac <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9ad4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9ad8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9ada:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9ade:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9ae0:	2300      	movs	r3, #0
   b9ae2:	6133      	str	r3, [r6, #16]
}
   b9ae4:	b002      	add	sp, #8
   b9ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9aea:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9aee:	2124      	movs	r1, #36	; 0x24
   b9af0:	4620      	mov	r0, r4
   b9af2:	f004 fbaf 	bl	be254 <strnlen>
   b9af6:	42a8      	cmp	r0, r5
   b9af8:	d807      	bhi.n	b9b0a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9afa:	4642      	mov	r2, r8
   b9afc:	2100      	movs	r1, #0
   b9afe:	4630      	mov	r0, r6
}
   b9b00:	b002      	add	sp, #8
   b9b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9b06:	f004 bac2 	b.w	be08e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9b0a:	f1b8 0f00 	cmp.w	r8, #0
   b9b0e:	d0e9      	beq.n	b9ae4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9b10:	5d60      	ldrb	r0, [r4, r5]
   b9b12:	f7ff fee7 	bl	b98e4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9b16:	0603      	lsls	r3, r0, #24
   b9b18:	d415      	bmi.n	b9b46 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9b1a:	0100      	lsls	r0, r0, #4
   b9b1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9b20:	b2c7      	uxtb	r7, r0
   b9b22:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9b26:	2124      	movs	r1, #36	; 0x24
   b9b28:	4620      	mov	r0, r4
   b9b2a:	f004 fb93 	bl	be254 <strnlen>
   b9b2e:	3501      	adds	r5, #1
   b9b30:	42a8      	cmp	r0, r5
   b9b32:	d908      	bls.n	b9b46 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9b34:	5d60      	ldrb	r0, [r4, r5]
   b9b36:	f7ff fed5 	bl	b98e4 <_ZN8particle11hexToNibbleEc>
   b9b3a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9b3c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b9b3e:	bfa4      	itt	ge
   b9b40:	4338      	orrge	r0, r7
   b9b42:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9b46:	3501      	adds	r5, #1
   b9b48:	e7d1      	b.n	b9aee <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9b4a:	bf00      	nop
   b9b4c:	000c1716 	.word	0x000c1716

000b9b50 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9b50:	b513      	push	{r0, r1, r4, lr}
   b9b52:	4604      	mov	r4, r0
   b9b54:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9b56:	f7ff ff21 	bl	b999c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9b5a:	4620      	mov	r0, r4
   b9b5c:	9901      	ldr	r1, [sp, #4]
   b9b5e:	f7ff ff87 	bl	b9a70 <_ZN8particle7BleUuid9constructEPKc>
}
   b9b62:	4620      	mov	r0, r4
   b9b64:	b002      	add	sp, #8
   b9b66:	bd10      	pop	{r4, pc}

000b9b68 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b9b68:	b510      	push	{r4, lr}
   b9b6a:	f100 030f 	add.w	r3, r0, #15
   b9b6e:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b9b70:	781c      	ldrb	r4, [r3, #0]
   b9b72:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9b76:	4283      	cmp	r3, r0
   b9b78:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b9b7c:	d1f8      	bne.n	b9b70 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b9b7e:	bd10      	pop	{r4, pc}

000b9b80 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b9b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b84:	461f      	mov	r7, r3
   b9b86:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b9b88:	460d      	mov	r5, r1
   b9b8a:	2900      	cmp	r1, #0
   b9b8c:	d05b      	beq.n	b9c46 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b9b8e:	b1da      	cbz	r2, b9bc8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b9b90:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b9b94:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b9b96:	f1b8 0f00 	cmp.w	r8, #0
   b9b9a:	d119      	bne.n	b9bd0 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9b9c:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b9b9e:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9ba2:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9ba4:	aa05      	add	r2, sp, #20
   b9ba6:	2102      	movs	r1, #2
   b9ba8:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9baa:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9bae:	f7ff fe61 	bl	b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b9bb2:	2c04      	cmp	r4, #4
   b9bb4:	bf28      	it	cs
   b9bb6:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b9bb8:	4622      	mov	r2, r4
   b9bba:	a905      	add	r1, sp, #20
   b9bbc:	4628      	mov	r0, r5
   b9bbe:	f004 fa3e 	bl	be03e <memcpy>
        buf[len++] = '\0';
   b9bc2:	f805 8004 	strb.w	r8, [r5, r4]
   b9bc6:	1c62      	adds	r2, r4, #1
}
   b9bc8:	4610      	mov	r0, r2
   b9bca:	b00e      	add	sp, #56	; 0x38
   b9bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b9bd0:	a901      	add	r1, sp, #4
   b9bd2:	f7ff ffc9 	bl	b9b68 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9bd6:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9bd8:	b17f      	cbz	r7, b9bfa <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9bda:	2110      	movs	r1, #16
   b9bdc:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9bde:	f7ff fe49 	bl	b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b9be2:	2c24      	cmp	r4, #36	; 0x24
   b9be4:	bf28      	it	cs
   b9be6:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9be8:	4622      	mov	r2, r4
   b9bea:	a905      	add	r1, sp, #20
   b9bec:	4628      	mov	r0, r5
   b9bee:	f004 fa26 	bl	be03e <memcpy>
    buf[len++] = '\0';
   b9bf2:	2300      	movs	r3, #0
   b9bf4:	552b      	strb	r3, [r5, r4]
   b9bf6:	1c62      	adds	r2, r4, #1
    return len;
   b9bf8:	e7e6      	b.n	b9bc8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b9bfa:	2104      	movs	r1, #4
   b9bfc:	eb0d 0001 	add.w	r0, sp, r1
   b9c00:	f7ff fe38 	bl	b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9c04:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9c06:	f10d 021d 	add.w	r2, sp, #29
   b9c0a:	2102      	movs	r1, #2
   b9c0c:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b9c0e:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9c12:	f7ff fe2f 	bl	b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9c16:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b9c1a:	2102      	movs	r1, #2
   b9c1c:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b9c20:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9c24:	f7ff fe26 	bl	b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9c28:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b9c2c:	2102      	movs	r1, #2
   b9c2e:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b9c30:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9c34:	f7ff fe1e 	bl	b9874 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b9c38:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9c3c:	aa0b      	add	r2, sp, #44	; 0x2c
   b9c3e:	2106      	movs	r1, #6
   b9c40:	f10d 000e 	add.w	r0, sp, #14
   b9c44:	e7cb      	b.n	b9bde <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b9c46:	460a      	mov	r2, r1
   b9c48:	e7be      	b.n	b9bc8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b9c4a <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b9c4a:	b510      	push	{r4, lr}
   b9c4c:	b08a      	sub	sp, #40	; 0x28
   b9c4e:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b9c50:	2300      	movs	r3, #0
   b9c52:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b9c54:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b9c56:	4669      	mov	r1, sp
   b9c58:	f7ff ff92 	bl	b9b80 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b9c5c:	4669      	mov	r1, sp
   b9c5e:	4620      	mov	r0, r4
   b9c60:	f002 ff1b 	bl	bca9a <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9c64:	4620      	mov	r0, r4
   b9c66:	b00a      	add	sp, #40	; 0x28
   b9c68:	bd10      	pop	{r4, pc}

000b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b9c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9c6c:	4605      	mov	r5, r0
   b9c6e:	4616      	mov	r6, r2
   b9c70:	461f      	mov	r7, r3
   b9c72:	460a      	mov	r2, r1
   b9c74:	ab01      	add	r3, sp, #4
   b9c76:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9c7a:	f7ff fd7b 	bl	b9774 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b9c7e:	f030 0402 	bics.w	r4, r0, #2
   b9c82:	d00c      	beq.n	b9c9e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b9c84:	1e84      	subs	r4, r0, #2
   b9c86:	42bc      	cmp	r4, r7
   b9c88:	bf28      	it	cs
   b9c8a:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b9c8c:	b13e      	cbz	r6, b9c9e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b9c8e:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b9c90:	682b      	ldr	r3, [r5, #0]
   b9c92:	3102      	adds	r1, #2
   b9c94:	4622      	mov	r2, r4
   b9c96:	4419      	add	r1, r3
   b9c98:	4630      	mov	r0, r6
   b9c9a:	f004 f9d0 	bl	be03e <memcpy>
}
   b9c9e:	4620      	mov	r0, r4
   b9ca0:	b003      	add	sp, #12
   b9ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9ca4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9ca6:	4613      	mov	r3, r2
   b9ca8:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9caa:	9201      	str	r2, [sp, #4]
   b9cac:	460a      	mov	r2, r1
   b9cae:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9cb0:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9cb2:	f7ff ffda 	bl	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b9cb6:	b940      	cbnz	r0, b9cca <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9cb8:	9b01      	ldr	r3, [sp, #4]
   b9cba:	4622      	mov	r2, r4
   b9cbc:	2109      	movs	r1, #9
   b9cbe:	4628      	mov	r0, r5
}
   b9cc0:	b003      	add	sp, #12
   b9cc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9cc6:	f7ff bfd0 	b.w	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b9cca:	b003      	add	sp, #12
   b9ccc:	bd30      	pop	{r4, r5, pc}
	...

000b9cd0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b9cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9cd2:	460c      	mov	r4, r1
   b9cd4:	b089      	sub	sp, #36	; 0x24
    String name;
   b9cd6:	490c      	ldr	r1, [pc, #48]	; (b9d08 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b9cd8:	4605      	mov	r5, r0
    String name;
   b9cda:	f002 fede 	bl	bca9a <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b9cde:	221f      	movs	r2, #31
   b9ce0:	4669      	mov	r1, sp
   b9ce2:	4620      	mov	r0, r4
   b9ce4:	f7ff ffde 	bl	b9ca4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b9ce8:	4606      	mov	r6, r0
   b9cea:	b150      	cbz	r0, b9d02 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b9cec:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b9cee:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b9cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9cf4:	4628      	mov	r0, r5
   b9cf6:	f002 ff4f 	bl	bcb98 <_ZN6String6concatEc>
   b9cfa:	b110      	cbz	r0, b9d02 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b9cfc:	3701      	adds	r7, #1
   b9cfe:	42be      	cmp	r6, r7
   b9d00:	d1f6      	bne.n	b9cf0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b9d02:	4628      	mov	r0, r5
   b9d04:	b009      	add	sp, #36	; 0x24
   b9d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9d08:	000c071b 	.word	0x000c071b

000b9d0c <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b9d0c:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b9d0e:	460a      	mov	r2, r1
   b9d10:	21ff      	movs	r1, #255	; 0xff
   b9d12:	f7ff bfaa 	b.w	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b9d16 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b9d16:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b9d18:	2302      	movs	r3, #2
   b9d1a:	aa01      	add	r2, sp, #4
   b9d1c:	2119      	movs	r1, #25
   b9d1e:	f7ff ffa4 	bl	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b9d22:	b108      	cbz	r0, b9d28 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b9d24:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b9d28:	b003      	add	sp, #12
   b9d2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9d30 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9d30:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9d36:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9d38:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b9d3a:	8043      	strh	r3, [r0, #2]
   b9d3c:	220e      	movs	r2, #14
   b9d3e:	4629      	mov	r1, r5
   b9d40:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9d42:	7105      	strb	r5, [r0, #4]
   b9d44:	3006      	adds	r0, #6
   b9d46:	f004 f9a2 	bl	be08e <memset>
   b9d4a:	f104 0014 	add.w	r0, r4, #20
   b9d4e:	f7ff fe25 	bl	b999c <_ZN8particle7BleUuidC1Ev>
   b9d52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9d56:	f7ff fe21 	bl	b999c <_ZN8particle7BleUuidC1Ev>
   b9d5a:	4904      	ldr	r1, [pc, #16]	; (b9d6c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b9d5c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9d60:	f002 fe9b 	bl	bca9a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9d64:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9d66:	4620      	mov	r0, r4
   b9d68:	bd38      	pop	{r3, r4, r5, pc}
   b9d6a:	bf00      	nop
   b9d6c:	000c071b 	.word	0x000c071b

000b9d70 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b9d70:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9d72:	680d      	ldr	r5, [r1, #0]
   b9d74:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9d76:	4601      	mov	r1, r0
   b9d78:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b9d7c:	f7ff fe69 	bl	b9a52 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9d80:	b140      	cbz	r0, b9d94 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b9d82:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9d84:	8aa2      	ldrh	r2, [r4, #20]
   b9d86:	429a      	cmp	r2, r3
   b9d88:	d805      	bhi.n	b9d96 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9d8a:	8ae0      	ldrh	r0, [r4, #22]
   b9d8c:	4298      	cmp	r0, r3
   b9d8e:	bf34      	ite	cc
   b9d90:	2000      	movcc	r0, #0
   b9d92:	2001      	movcs	r0, #1
    }
   b9d94:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b9d96:	2000      	movs	r0, #0
   b9d98:	e7fc      	b.n	b9d94 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b9d9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b9d9a:	b510      	push	{r4, lr}
    return data_ + size_;
   b9d9c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9da0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b9da4:	4293      	cmp	r3, r2
   b9da6:	4618      	mov	r0, r3
   b9da8:	d006      	beq.n	b9db8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b9daa:	6804      	ldr	r4, [r0, #0]
   b9dac:	8824      	ldrh	r4, [r4, #0]
   b9dae:	428c      	cmp	r4, r1
   b9db0:	f103 0308 	add.w	r3, r3, #8
   b9db4:	d1f6      	bne.n	b9da4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b9db6:	bd10      	pop	{r4, pc}
        return nullptr;
   b9db8:	2000      	movs	r0, #0
   b9dba:	e7fc      	b.n	b9db6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b9dbc <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9dbc:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b9dbe:	b570      	push	{r4, r5, r6, lr}
   b9dc0:	6003      	str	r3, [r0, #0]
   b9dc2:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9dc4:	2068      	movs	r0, #104	; 0x68
   b9dc6:	f7fa f966 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9dca:	1e04      	subs	r4, r0, #0
   b9dcc:	f104 060c 	add.w	r6, r4, #12
   b9dd0:	d007      	beq.n	b9de2 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b9dd2:	2301      	movs	r3, #1
   b9dd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9dd8:	4b04      	ldr	r3, [pc, #16]	; (b9dec <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b9dda:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9ddc:	4630      	mov	r0, r6
   b9dde:	f7ff ffa7 	bl	b9d30 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b9de2:	e9c5 6400 	strd	r6, r4, [r5]
}
   b9de6:	4628      	mov	r0, r5
   b9de8:	bd70      	pop	{r4, r5, r6, pc}
   b9dea:	bf00      	nop
   b9dec:	000c16bc 	.word	0x000c16bc

000b9df0 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b9df0:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b9df2:	680c      	ldr	r4, [r1, #0]
   b9df4:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b9df6:	4606      	mov	r6, r0
    return impl()->charUUID();
   b9df8:	4605      	mov	r5, r0
   b9dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9dfe:	6823      	ldr	r3, [r4, #0]
   b9e00:	602b      	str	r3, [r5, #0]
}
   b9e02:	4630      	mov	r0, r6
   b9e04:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9e08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e0a:	4606      	mov	r6, r0
   b9e0c:	b085      	sub	sp, #20
   b9e0e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9e10:	460d      	mov	r5, r1
   b9e12:	2900      	cmp	r1, #0
   b9e14:	d050      	beq.n	b9eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9e16:	2a00      	cmp	r2, #0
   b9e18:	d04e      	beq.n	b9eb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b9e1a:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b9e1c:	7823      	ldrb	r3, [r4, #0]
   b9e1e:	2af4      	cmp	r2, #244	; 0xf4
   b9e20:	bf28      	it	cs
   b9e22:	22f4      	movcs	r2, #244	; 0xf4
   b9e24:	b343      	cbz	r3, b9e78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9e26:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9e28:	0798      	lsls	r0, r3, #30
   b9e2a:	d509      	bpl.n	b9e40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9e2c:	89a0      	ldrh	r0, [r4, #12]
   b9e2e:	9203      	str	r2, [sp, #12]
   b9e30:	2300      	movs	r3, #0
   b9e32:	f7ff f871 	bl	b8f18 <hal_ble_gatt_server_set_characteristic_value>
   b9e36:	2800      	cmp	r0, #0
   b9e38:	9a03      	ldr	r2, [sp, #12]
   b9e3a:	da03      	bge.n	b9e44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b9e3c:	b005      	add	sp, #20
   b9e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9e40:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9e44:	6834      	ldr	r4, [r6, #0]
   b9e46:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9e48:	06d9      	lsls	r1, r3, #27
   b9e4a:	d509      	bpl.n	b9e60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9e4c:	2f01      	cmp	r7, #1
   b9e4e:	d007      	beq.n	b9e60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9e50:	89a0      	ldrh	r0, [r4, #12]
   b9e52:	2300      	movs	r3, #0
   b9e54:	4629      	mov	r1, r5
}
   b9e56:	b005      	add	sp, #20
   b9e58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9e5c:	f7ff b8c0 	b.w	b8fe0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9e60:	069b      	lsls	r3, r3, #26
   b9e62:	d5eb      	bpl.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9e64:	2f02      	cmp	r7, #2
   b9e66:	d0e9      	beq.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9e68:	89a0      	ldrh	r0, [r4, #12]
   b9e6a:	2300      	movs	r3, #0
   b9e6c:	4629      	mov	r1, r5
}
   b9e6e:	b005      	add	sp, #20
   b9e70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9e74:	f7ff b8be 	b.w	b8ff4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b9e78:	8860      	ldrh	r0, [r4, #2]
   b9e7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9e7e:	4288      	cmp	r0, r1
   b9e80:	d01c      	beq.n	b9ebc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b9e82:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b9e84:	074e      	lsls	r6, r1, #29
   b9e86:	d501      	bpl.n	b9e8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b9e88:	2f01      	cmp	r7, #1
   b9e8a:	d104      	bne.n	b9e96 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9e8c:	070b      	lsls	r3, r1, #28
   b9e8e:	d409      	bmi.n	b9ea4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9e90:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9e94:	e7d2      	b.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9e96:	89a1      	ldrh	r1, [r4, #12]
   b9e98:	9300      	str	r3, [sp, #0]
   b9e9a:	4613      	mov	r3, r2
   b9e9c:	462a      	mov	r2, r5
   b9e9e:	f7ff f863 	bl	b8f68 <hal_ble_gatt_client_write_without_response>
   b9ea2:	e7cb      	b.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9ea4:	2f02      	cmp	r7, #2
   b9ea6:	d0f3      	beq.n	b9e90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9ea8:	2300      	movs	r3, #0
   b9eaa:	89a1      	ldrh	r1, [r4, #12]
   b9eac:	9300      	str	r3, [sp, #0]
   b9eae:	4613      	mov	r3, r2
   b9eb0:	462a      	mov	r2, r5
   b9eb2:	f7ff f84f 	bl	b8f54 <hal_ble_gatt_client_write_with_response>
   b9eb6:	e7c1      	b.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9eb8:	4802      	ldr	r0, [pc, #8]	; (b9ec4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b9eba:	e7bf      	b.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9ebc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9ec0:	e7bc      	b.n	b9e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9ec2:	bf00      	nop
   b9ec4:	fffffef2 	.word	0xfffffef2

000b9ec8 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b9ec8:	b510      	push	{r4, lr}
   b9eca:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9ecc:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b9ece:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9ed0:	bb52      	cbnz	r2, b9f28 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b9ed2:	885c      	ldrh	r4, [r3, #2]
   b9ed4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9ed8:	4284      	cmp	r4, r0
   b9eda:	d025      	beq.n	b9f28 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b9edc:	8a18      	ldrh	r0, [r3, #16]
   b9ede:	b330      	cbz	r0, b9f2e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b9ee0:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b9ee4:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b9ee6:	4a13      	ldr	r2, [pc, #76]	; (b9f34 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b9ee8:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b9eea:	4a13      	ldr	r2, [pc, #76]	; (b9f38 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b9eec:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b9ef0:	885a      	ldrh	r2, [r3, #2]
   b9ef2:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b9ef6:	8a1a      	ldrh	r2, [r3, #16]
   b9ef8:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b9efc:	899a      	ldrh	r2, [r3, #12]
   b9efe:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b9f02:	b159      	cbz	r1, b9f1c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b9f04:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b9f06:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b9f08:	bf44      	itt	mi
   b9f0a:	2202      	movmi	r2, #2
   b9f0c:	9205      	strmi	r2, [sp, #20]
   b9f0e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b9f10:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b9f12:	bf42      	ittt	mi
   b9f14:	9b05      	ldrmi	r3, [sp, #20]
   b9f16:	f043 0301 	orrmi.w	r3, r3, #1
   b9f1a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b9f1c:	2100      	movs	r1, #0
   b9f1e:	4668      	mov	r0, sp
   b9f20:	f7ff f854 	bl	b8fcc <hal_ble_gatt_client_configure_cccd>
}
   b9f24:	b006      	add	sp, #24
   b9f26:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9f28:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9f2c:	e7fa      	b.n	b9f24 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b9f2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9f32:	e7f7      	b.n	b9f24 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b9f34:	00180003 	.word	0x00180003
   b9f38:	000ba10d 	.word	0x000ba10d

000b9f3c <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b9f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9f3e:	2600      	movs	r6, #0
   b9f40:	6006      	str	r6, [r0, #0]
   b9f42:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9f44:	2028      	movs	r0, #40	; 0x28
   b9f46:	f7fa f8a6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9f4a:	1e04      	subs	r4, r0, #0
   b9f4c:	f104 070c 	add.w	r7, r4, #12
   b9f50:	d00a      	beq.n	b9f68 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b9f52:	2301      	movs	r3, #1
   b9f54:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9f58:	4b05      	ldr	r3, [pc, #20]	; (b9f70 <_ZN8particle10BleServiceC1Ev+0x34>)
   b9f5a:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b9f5c:	4638      	mov	r0, r7
   b9f5e:	f7ff fd1d 	bl	b999c <_ZN8particle7BleUuidC1Ev>
   b9f62:	6226      	str	r6, [r4, #32]
   b9f64:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b9f68:	e9c5 7400 	strd	r7, r4, [r5]
}
   b9f6c:	4628      	mov	r0, r5
   b9f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9f70:	000c16d8 	.word	0x000c16d8

000b9f74 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b9f74:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9f76:	2500      	movs	r5, #0
   b9f78:	6005      	str	r5, [r0, #0]
   b9f7a:	4606      	mov	r6, r0
   b9f7c:	2030      	movs	r0, #48	; 0x30
   b9f7e:	f7fa f88a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9f82:	4604      	mov	r4, r0
   b9f84:	b188      	cbz	r0, b9faa <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b9f86:	2301      	movs	r3, #1
   b9f88:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b9f8c:	4b09      	ldr	r3, [pc, #36]	; (b9fb4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b9f8e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9f94:	8183      	strh	r3, [r0, #12]
   b9f96:	300e      	adds	r0, #14
   b9f98:	f7ff fcf5 	bl	b9986 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b9f9c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9fa0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9fa4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9fa8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b9faa:	6074      	str	r4, [r6, #4]
   b9fac:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b9fae:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9fb0:	4630      	mov	r0, r6
   b9fb2:	bd70      	pop	{r4, r5, r6, pc}
   b9fb4:	000c16f4 	.word	0x000c16f4

000b9fb8 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b9fb8:	b513      	push	{r0, r1, r4, lr}
   b9fba:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9fbc:	a801      	add	r0, sp, #4
   b9fbe:	f7ff fca7 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9fc2:	6823      	ldr	r3, [r4, #0]
   b9fc4:	881c      	ldrh	r4, [r3, #0]
   b9fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9fca:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b9fcc:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9fce:	bf18      	it	ne
   b9fd0:	2401      	movne	r4, #1
    WiringBleLock lk;
   b9fd2:	f7ff fcab 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9fd6:	4620      	mov	r0, r4
   b9fd8:	b002      	add	sp, #8
   b9fda:	bd10      	pop	{r4, pc}

000b9fdc <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b9fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9fde:	4605      	mov	r5, r0
   b9fe0:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9fe2:	a801      	add	r0, sp, #4
   b9fe4:	f7ff fc94 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9fe8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9fea:	6823      	ldr	r3, [r4, #0]
   b9fec:	f8c2 3002 	str.w	r3, [r2, #2]
   b9ff0:	6863      	ldr	r3, [r4, #4]
   b9ff2:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b9ff6:	a801      	add	r0, sp, #4
   b9ff8:	f7ff fc98 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b9ffc:	b003      	add	sp, #12
   b9ffe:	bd30      	pop	{r4, r5, pc}

000ba000 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba000:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba002:	460d      	mov	r5, r1
   ba004:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba006:	a801      	add	r0, sp, #4
   ba008:	f7ff fc82 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
   ba00c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba00e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba012:	6023      	str	r3, [r4, #0]
   ba014:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba018:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba01a:	a801      	add	r0, sp, #4
   ba01c:	f7ff fc86 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba020:	4620      	mov	r0, r4
   ba022:	b003      	add	sp, #12
   ba024:	bd30      	pop	{r4, r5, pc}

000ba026 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba026:	b530      	push	{r4, r5, lr}
   ba028:	4605      	mov	r5, r0
   ba02a:	b087      	sub	sp, #28
   ba02c:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba02e:	a801      	add	r0, sp, #4
   ba030:	f7ff fc6e 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba034:	682a      	ldr	r2, [r5, #0]
   ba036:	6823      	ldr	r3, [r4, #0]
   ba038:	8812      	ldrh	r2, [r2, #0]
   ba03a:	881b      	ldrh	r3, [r3, #0]
   ba03c:	429a      	cmp	r2, r3
   ba03e:	d10d      	bne.n	ba05c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba040:	4629      	mov	r1, r5
   ba042:	a802      	add	r0, sp, #8
   ba044:	f7ff ffdc 	bl	ba000 <_ZNK8particle13BlePeerDevice7addressEv>
   ba048:	4621      	mov	r1, r4
   ba04a:	a804      	add	r0, sp, #16
   ba04c:	f7ff ffd8 	bl	ba000 <_ZNK8particle13BlePeerDevice7addressEv>
   ba050:	a904      	add	r1, sp, #16
   ba052:	a802      	add	r0, sp, #8
   ba054:	f7ff fc83 	bl	b995e <_ZNK8particle10BleAddresseqERKS0_>
   ba058:	4604      	mov	r4, r0
   ba05a:	b900      	cbnz	r0, ba05e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba05c:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba05e:	a801      	add	r0, sp, #4
   ba060:	f7ff fc64 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba064:	4620      	mov	r0, r4
   ba066:	b007      	add	sp, #28
   ba068:	bd30      	pop	{r4, r5, pc}
	...

000ba06c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba06c:	b510      	push	{r4, lr}
   ba06e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba070:	2064      	movs	r0, #100	; 0x64
   ba072:	f7fa f810 	bl	b4096 <_Znwj>
   ba076:	b168      	cbz	r0, ba094 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba078:	2300      	movs	r3, #0
   ba07a:	e9c0 3300 	strd	r3, r3, [r0]
   ba07e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba082:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba086:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba08a:	6203      	str	r3, [r0, #32]
   ba08c:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba08e:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba090:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba092:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba094:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba096:	b920      	cbnz	r0, ba0a2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba098:	4a0a      	ldr	r2, [pc, #40]	; (ba0c4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba09a:	490b      	ldr	r1, [pc, #44]	; (ba0c8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba09c:	200a      	movs	r0, #10
   ba09e:	f7ff f9b3 	bl	b9408 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba0a2:	2000      	movs	r0, #0
   ba0a4:	f7fe fefc 	bl	b8ea0 <hal_ble_stack_init>
   ba0a8:	b120      	cbz	r0, ba0b4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba0aa:	4a06      	ldr	r2, [pc, #24]	; (ba0c4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba0ac:	4907      	ldr	r1, [pc, #28]	; (ba0cc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba0ae:	200a      	movs	r0, #10
   ba0b0:	f7ff f9aa 	bl	b9408 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba0b4:	6821      	ldr	r1, [r4, #0]
   ba0b6:	4806      	ldr	r0, [pc, #24]	; (ba0d0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   ba0b8:	2200      	movs	r2, #0
   ba0ba:	f7fe ff7d 	bl	b8fb8 <hal_ble_set_callback_on_periph_link_events>
}
   ba0be:	4620      	mov	r0, r4
   ba0c0:	bd10      	pop	{r4, pc}
   ba0c2:	bf00      	nop
   ba0c4:	000b90d9 	.word	0x000b90d9
   ba0c8:	000c1498 	.word	0x000c1498
   ba0cc:	000c14d6 	.word	0x000c14d6
   ba0d0:	000bab19 	.word	0x000bab19

000ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   ba0d4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   ba0d6:	4c0a      	ldr	r4, [pc, #40]	; (ba100 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   ba0d8:	7823      	ldrb	r3, [r4, #0]
   ba0da:	f3bf 8f5b 	dmb	ish
   ba0de:	07db      	lsls	r3, r3, #31
   ba0e0:	d40c      	bmi.n	ba0fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba0e2:	4620      	mov	r0, r4
   ba0e4:	f7f9 ffea 	bl	b40bc <__cxa_guard_acquire>
   ba0e8:	b140      	cbz	r0, ba0fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba0ea:	4806      	ldr	r0, [pc, #24]	; (ba104 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba0ec:	f7ff ffbe 	bl	ba06c <_ZN8particle14BleLocalDeviceC1Ev>
   ba0f0:	4620      	mov	r0, r4
   ba0f2:	f7f9 ffe8 	bl	b40c6 <__cxa_guard_release>
   ba0f6:	4804      	ldr	r0, [pc, #16]	; (ba108 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   ba0f8:	f003 ff84 	bl	be004 <atexit>
    return instance;
}
   ba0fc:	4801      	ldr	r0, [pc, #4]	; (ba104 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba0fe:	bd10      	pop	{r4, pc}
   ba100:	2003e654 	.word	0x2003e654
   ba104:	2003e65c 	.word	0x2003e65c
   ba108:	000ba41d 	.word	0x000ba41d

000ba10c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba10c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   ba10e:	6803      	ldr	r3, [r0, #0]
   ba110:	3b09      	subs	r3, #9
   ba112:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba114:	b08d      	sub	sp, #52	; 0x34
   ba116:	4604      	mov	r4, r0
   ba118:	460d      	mov	r5, r1
    switch (event->type) {
   ba11a:	d811      	bhi.n	ba140 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   ba11c:	f7ff ffda 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba120:	88a1      	ldrh	r1, [r4, #4]
   ba122:	6800      	ldr	r0, [r0, #0]
   ba124:	f7ff fe39 	bl	b9d9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   ba128:	4603      	mov	r3, r0
   ba12a:	b958      	cbnz	r0, ba144 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   ba12c:	2220      	movs	r2, #32
   ba12e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   ba132:	4a0b      	ldr	r2, [pc, #44]	; (ba160 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   ba134:	9200      	str	r2, [sp, #0]
   ba136:	490b      	ldr	r1, [pc, #44]	; (ba164 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   ba138:	aa04      	add	r2, sp, #16
   ba13a:	2032      	movs	r0, #50	; 0x32
   ba13c:	f7ff f96c 	bl	b9418 <log_message>
}
   ba140:	b00d      	add	sp, #52	; 0x34
   ba142:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   ba144:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   ba146:	2a00      	cmp	r2, #0
   ba148:	d0fa      	beq.n	ba140 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   ba14a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba14e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   ba152:	e9cd 1203 	strd	r1, r2, [sp, #12]
   ba156:	6dac      	ldr	r4, [r5, #88]	; 0x58
   ba158:	aa04      	add	r2, sp, #16
   ba15a:	a903      	add	r1, sp, #12
   ba15c:	47a0      	blx	r4
}
   ba15e:	e7ef      	b.n	ba140 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   ba160:	000c1518 	.word	0x000c1518
   ba164:	000c14af 	.word	0x000c14af

000ba168 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   ba168:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   ba16a:	2000      	movs	r0, #0
   ba16c:	f7fe fe98 	bl	b8ea0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   ba170:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba174:	bd08      	pop	{r3, pc}

000ba176 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   ba176:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   ba178:	2100      	movs	r1, #0
   ba17a:	f7fe be99 	b.w	b8eb0 <hal_ble_gap_set_tx_power>
	...

000ba180 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   ba180:	b570      	push	{r4, r5, r6, lr}
   ba182:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   ba184:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   ba186:	460e      	mov	r6, r1
   ba188:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   ba18a:	f7ff fb3f 	bl	b980c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   ba18e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba192:	f7ff fb46 	bl	b9822 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   ba196:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   ba19a:	2200      	movs	r2, #0
   ba19c:	4621      	mov	r1, r4
   ba19e:	4803      	ldr	r0, [pc, #12]	; (ba1ac <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   ba1a0:	f7fe fe9e 	bl	b8ee0 <hal_ble_gap_start_scan>
   ba1a4:	2800      	cmp	r0, #0
        return foundCount_;
   ba1a6:	bfa8      	it	ge
   ba1a8:	6960      	ldrge	r0, [r4, #20]
    }
   ba1aa:	bd70      	pop	{r4, r5, r6, pc}
   ba1ac:	000bbb25 	.word	0x000bbb25

000ba1b0 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   ba1b0:	b510      	push	{r4, lr}
   ba1b2:	4604      	mov	r4, r0
    ::free(ptr);
   ba1b4:	6940      	ldr	r0, [r0, #20]
   ba1b6:	f7ff fa13 	bl	b95e0 <free>
   ba1ba:	68a0      	ldr	r0, [r4, #8]
   ba1bc:	f7ff fa10 	bl	b95e0 <free>
   ba1c0:	4620      	mov	r0, r4
   ba1c2:	bd10      	pop	{r4, pc}

000ba1c4 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   ba1c4:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   ba1c6:	f647 717f 	movw	r1, #32639	; 0x7f7f
   ba1ca:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   ba1ce:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba1d2:	e9c0 2204 	strd	r2, r2, [r0, #16]
   ba1d6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   ba1da:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   ba1de:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   ba1e2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   ba1e6:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   ba1ea:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   ba1ee:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   ba1f2:	6202      	str	r2, [r0, #32]
   ba1f4:	6302      	str	r2, [r0, #48]	; 0x30
   ba1f6:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   ba1fa:	4770      	bx	lr

000ba1fc <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba1fc:	b530      	push	{r4, r5, lr}
   ba1fe:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   ba200:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba202:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba204:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba206:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba20a:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   ba20c:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba20e:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   ba210:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   ba214:	e9cd 4401 	strd	r4, r4, [sp, #4]
   ba218:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba21a:	f7fe fe59 	bl	b8ed0 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba21e:	4621      	mov	r1, r4
   ba220:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   ba222:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba226:	f7fe fe4b 	bl	b8ec0 <hal_ble_gap_set_scan_parameters>
}
   ba22a:	b005      	add	sp, #20
   ba22c:	bd30      	pop	{r4, r5, pc}

000ba22e <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   ba22e:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   ba230:	69d8      	ldr	r0, [r3, #28]
}
   ba232:	2800      	cmp	r0, #0
   ba234:	bfd4      	ite	le
   ba236:	2000      	movle	r0, #0
   ba238:	2001      	movgt	r0, #1
   ba23a:	4770      	bx	lr

000ba23c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba23c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba23e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba242:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba244:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ba248:	42ae      	cmp	r6, r5
   ba24a:	d004      	beq.n	ba256 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ba24c:	4628      	mov	r0, r5
   ba24e:	f002 fbd9 	bl	bca04 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ba252:	3510      	adds	r5, #16
   ba254:	e7f8      	b.n	ba248 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba256:	6820      	ldr	r0, [r4, #0]
   ba258:	f7ff f9c2 	bl	b95e0 <free>
}
   ba25c:	4620      	mov	r0, r4
   ba25e:	bd70      	pop	{r4, r5, r6, pc}

000ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba260:	b510      	push	{r4, lr}
   ba262:	4604      	mov	r4, r0
    ::free(ptr);
   ba264:	6800      	ldr	r0, [r0, #0]
   ba266:	f7ff f9bb 	bl	b95e0 <free>
}
   ba26a:	4620      	mov	r0, r4
   ba26c:	bd10      	pop	{r4, pc}

000ba26e <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   ba26e:	b570      	push	{r4, r5, r6, lr}
   ba270:	4604      	mov	r4, r0
    ::free(ptr);
   ba272:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   ba274:	f7ff f9b4 	bl	b95e0 <free>
   ba278:	6d20      	ldr	r0, [r4, #80]	; 0x50
   ba27a:	f7ff f9b1 	bl	b95e0 <free>
    }
    ~BleScanFilter() = default;
   ba27e:	f104 0538 	add.w	r5, r4, #56	; 0x38
   ba282:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba286:	f7ff ffeb 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   ba28a:	4628      	mov	r0, r5
   ba28c:	f7ff ffd6 	bl	ba23c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   ba290:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba294:	f7fa f850 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba298:	f104 0018 	add.w	r0, r4, #24
   ba29c:	f7fa f84c 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba2a0:	e9d4 5300 	ldrd	r5, r3, [r4]
   ba2a4:	2624      	movs	r6, #36	; 0x24
   ba2a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba2aa:	42ae      	cmp	r6, r5
   ba2ac:	d004      	beq.n	ba2b8 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   ba2ae:	4628      	mov	r0, r5
   ba2b0:	f7ff ff7e 	bl	ba1b0 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   ba2b4:	3524      	adds	r5, #36	; 0x24
   ba2b6:	e7f8      	b.n	ba2aa <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   ba2b8:	6820      	ldr	r0, [r4, #0]
   ba2ba:	f7ff f991 	bl	b95e0 <free>
   ba2be:	4620      	mov	r0, r4
   ba2c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba2c4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   ba2c4:	b530      	push	{r4, r5, lr}
   ba2c6:	4615      	mov	r5, r2
   ba2c8:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   ba2ca:	460c      	mov	r4, r1
   ba2cc:	b179      	cbz	r1, ba2ee <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   ba2ce:	b172      	cbz	r2, ba2ee <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   ba2d0:	a801      	add	r0, sp, #4
   ba2d2:	f7ff ff77 	bl	ba1c4 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   ba2d6:	4621      	mov	r1, r4
   ba2d8:	462a      	mov	r2, r5
   ba2da:	a801      	add	r0, sp, #4
   ba2dc:	f7ff ff50 	bl	ba180 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   ba2e0:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   ba2e2:	a801      	add	r0, sp, #4
   ba2e4:	f7ff ffc3 	bl	ba26e <_ZN8particle16BleScanDelegatorD1Ev>
}
   ba2e8:	4620      	mov	r0, r4
   ba2ea:	b01f      	add	sp, #124	; 0x7c
   ba2ec:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba2ee:	4c01      	ldr	r4, [pc, #4]	; (ba2f4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   ba2f0:	e7fa      	b.n	ba2e8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   ba2f2:	bf00      	nop
   ba2f4:	fffffef2 	.word	0xfffffef2

000ba2f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba2f8:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   ba2fa:	1e14      	subs	r4, r2, #0
   ba2fc:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba2fe:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   ba300:	db02      	blt.n	ba308 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   ba302:	1862      	adds	r2, r4, r1
   ba304:	429a      	cmp	r2, r3
   ba306:	dd00      	ble.n	ba30a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   ba308:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   ba30a:	682a      	ldr	r2, [r5, #0]
   ba30c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   ba30e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   ba310:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba312:	1a52      	subs	r2, r2, r1
   ba314:	f003 fea1 	bl	be05a <memmove>
    size_ -= n;
   ba318:	686a      	ldr	r2, [r5, #4]
   ba31a:	1b12      	subs	r2, r2, r4
   ba31c:	606a      	str	r2, [r5, #4]
}
   ba31e:	bd38      	pop	{r3, r4, r5, pc}

000ba320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   ba320:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba322:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   ba324:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba326:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba328:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   ba32a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba32c:	f7f9 feb3 	bl	b4096 <_Znwj>
   ba330:	b118      	cbz	r0, ba33a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   ba332:	682b      	ldr	r3, [r5, #0]
   ba334:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba336:	686b      	ldr	r3, [r5, #4]
   ba338:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   ba33a:	4b03      	ldr	r3, [pc, #12]	; (ba348 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   ba33c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba33e:	4b03      	ldr	r3, [pc, #12]	; (ba34c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba340:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba342:	60a3      	str	r3, [r4, #8]
      }
   ba344:	4620      	mov	r0, r4
   ba346:	bd38      	pop	{r3, r4, r5, pc}
   ba348:	000b97b5 	.word	0x000b97b5
   ba34c:	000b97cd 	.word	0x000b97cd

000ba350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   ba350:	680b      	ldr	r3, [r1, #0]
   ba352:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   ba354:	b113      	cbz	r3, ba35c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   ba356:	685a      	ldr	r2, [r3, #4]
   ba358:	3201      	adds	r2, #1
   ba35a:	605a      	str	r2, [r3, #4]
      }
   ba35c:	4770      	bx	lr

000ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   ba35e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba360:	f851 3b04 	ldr.w	r3, [r1], #4
   ba364:	4604      	mov	r4, r0
   ba366:	f840 3b04 	str.w	r3, [r0], #4
   ba36a:	f7ff fff1 	bl	ba350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   ba36e:	6823      	ldr	r3, [r4, #0]
   ba370:	b90b      	cbnz	r3, ba376 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   ba372:	f7ff fa15 	bl	b97a0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   ba376:	4620      	mov	r0, r4
   ba378:	bd10      	pop	{r4, pc}

000ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba37a:	b510      	push	{r4, lr}
   ba37c:	f851 3b04 	ldr.w	r3, [r1], #4
   ba380:	4604      	mov	r4, r0
   ba382:	f840 3b04 	str.w	r3, [r0], #4
   ba386:	f7ff ffe3 	bl	ba350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba38a:	4620      	mov	r0, r4
   ba38c:	bd10      	pop	{r4, pc}

000ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba38e:	b510      	push	{r4, lr}
   ba390:	f851 3b04 	ldr.w	r3, [r1], #4
   ba394:	4604      	mov	r4, r0
   ba396:	f840 3b04 	str.w	r3, [r0], #4
   ba39a:	f7ff ffd9 	bl	ba350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba39e:	4620      	mov	r0, r4
   ba3a0:	bd10      	pop	{r4, pc}

000ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   ba3a2:	b510      	push	{r4, lr}
   ba3a4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   ba3a6:	6800      	ldr	r0, [r0, #0]
   ba3a8:	b108      	cbz	r0, ba3ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   ba3aa:	f7fa f803 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   ba3ae:	4620      	mov	r0, r4
   ba3b0:	bd10      	pop	{r4, pc}

000ba3b2 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   ba3b2:	b510      	push	{r4, lr}
   ba3b4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba3b6:	3004      	adds	r0, #4
   ba3b8:	f7ff fff3 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba3bc:	4620      	mov	r0, r4
   ba3be:	bd10      	pop	{r4, pc}

000ba3c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3c0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba3c2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3c6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba3c8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba3cc:	42ae      	cmp	r6, r5
   ba3ce:	d004      	beq.n	ba3da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   ba3d0:	1d28      	adds	r0, r5, #4
   ba3d2:	f7ff ffe6 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba3d6:	3508      	adds	r5, #8
   ba3d8:	e7f8      	b.n	ba3cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba3da:	6820      	ldr	r0, [r4, #0]
   ba3dc:	f7ff f900 	bl	b95e0 <free>
}
   ba3e0:	4620      	mov	r0, r4
   ba3e2:	bd70      	pop	{r4, r5, r6, pc}

000ba3e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba3e6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3ea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba3ec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba3f0:	42ae      	cmp	r6, r5
   ba3f2:	d004      	beq.n	ba3fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   ba3f4:	1d28      	adds	r0, r5, #4
   ba3f6:	f7ff ffd4 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba3fa:	3508      	adds	r5, #8
   ba3fc:	e7f8      	b.n	ba3f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba3fe:	6820      	ldr	r0, [r4, #0]
   ba400:	f7ff f8ee 	bl	b95e0 <free>
}
   ba404:	4620      	mov	r0, r4
   ba406:	bd70      	pop	{r4, r5, r6, pc}

000ba408 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba408:	b510      	push	{r4, lr}
   ba40a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   ba40c:	3024      	adds	r0, #36	; 0x24
   ba40e:	f7ff ffe9 	bl	ba3e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba412:	f104 0018 	add.w	r0, r4, #24
   ba416:	f7ff ffd3 	bl	ba3c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   ba41a:	bd10      	pop	{r4, pc}

000ba41c <__tcf_0>:
    static BleLocalDevice instance;
   ba41c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   ba41e:	4b17      	ldr	r3, [pc, #92]	; (ba47c <__tcf_0+0x60>)
   ba420:	681c      	ldr	r4, [r3, #0]
   ba422:	b354      	cbz	r4, ba47a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   ba424:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba428:	f7f9 ff86 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba42c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba430:	f7f9 ff82 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba434:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba438:	f7f9 ff7e 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba43c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba440:	f7f9 ff7a 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba444:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   ba448:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba44c:	42ae      	cmp	r6, r5
   ba44e:	d004      	beq.n	ba45a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   ba450:	1d28      	adds	r0, r5, #4
   ba452:	f7ff ffa6 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba456:	3508      	adds	r5, #8
   ba458:	e7f8      	b.n	ba44c <__tcf_0+0x30>
    ::free(ptr);
   ba45a:	69a0      	ldr	r0, [r4, #24]
   ba45c:	f7ff f8c0 	bl	b95e0 <free>
    ~BleLocalDeviceImpl() = default;
   ba460:	f104 000c 	add.w	r0, r4, #12
   ba464:	f7ff ffbe 	bl	ba3e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba468:	4620      	mov	r0, r4
   ba46a:	f7ff ffa9 	bl	ba3c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   ba46e:	4620      	mov	r0, r4
   ba470:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   ba472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba476:	f7f9 be12 	b.w	b409e <_ZdlPvj>
   ba47a:	bd70      	pop	{r4, r5, r6, pc}
   ba47c:	2003e65c 	.word	0x2003e65c

000ba480 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   ba480:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba482:	b510      	push	{r4, lr}
      if (_M_empty())
   ba484:	b90a      	cbnz	r2, ba48a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   ba486:	f002 ff31 	bl	bd2ec <_ZSt25__throw_bad_function_callv>
    }
   ba48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba48e:	68c3      	ldr	r3, [r0, #12]
   ba490:	4718      	bx	r3

000ba492 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   ba496:	2300      	movs	r3, #0
   ba498:	e9c0 3300 	strd	r3, r3, [r0]
   ba49c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba49e:	f8d1 8004 	ldr.w	r8, [r1, #4]
   ba4a2:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba4a4:	4605      	mov	r5, r0
   ba4a6:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba4a8:	dd4a      	ble.n	ba540 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   ba4aa:	ea4f 1008 	mov.w	r0, r8, lsl #4
   ba4ae:	f7ff f88f 	bl	b95d0 <malloc>
            if (!d) {
   ba4b2:	4606      	mov	r6, r0
   ba4b4:	2800      	cmp	r0, #0
   ba4b6:	d043      	beq.n	ba540 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   ba4b8:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   ba4bc:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   ba4be:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   ba4c2:	d916      	bls.n	ba4f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   ba4c4:	4550      	cmp	r0, sl
   ba4c6:	d215      	bcs.n	ba4f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   ba4c8:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   ba4cc:	f1a4 0910 	sub.w	r9, r4, #16
   ba4d0:	ebaa 0404 	sub.w	r4, sl, r4
   ba4d4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   ba4d6:	45d1      	cmp	r9, sl
   ba4d8:	d01d      	beq.n	ba516 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   ba4da:	b11c      	cbz	r4, ba4e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   ba4dc:	4651      	mov	r1, sl
   ba4de:	4620      	mov	r0, r4
   ba4e0:	f002 fb0c 	bl	bcafc <_ZN6StringC1EOS_>
                end->~T();
   ba4e4:	4650      	mov	r0, sl
   ba4e6:	f002 fa8d 	bl	bca04 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba4ea:	f1aa 0a10 	sub.w	sl, sl, #16
   ba4ee:	3c10      	subs	r4, #16
   ba4f0:	e7f1      	b.n	ba4d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   ba4f2:	d010      	beq.n	ba516 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   ba4f4:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   ba4f6:	45a2      	cmp	sl, r4
   ba4f8:	d00d      	beq.n	ba516 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   ba4fa:	f1b9 0f00 	cmp.w	r9, #0
   ba4fe:	d003      	beq.n	ba508 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   ba500:	4621      	mov	r1, r4
   ba502:	4648      	mov	r0, r9
   ba504:	f002 fafa 	bl	bcafc <_ZN6StringC1EOS_>
                p->~T();
   ba508:	4620      	mov	r0, r4
   ba50a:	f002 fa7b 	bl	bca04 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba50e:	3410      	adds	r4, #16
   ba510:	f109 0910 	add.w	r9, r9, #16
   ba514:	e7ef      	b.n	ba4f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   ba516:	6828      	ldr	r0, [r5, #0]
   ba518:	f7ff f862 	bl	b95e0 <free>
        capacity_ = n;
   ba51c:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   ba520:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba522:	e9d7 4300 	ldrd	r4, r3, [r7]
   ba526:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   ba52a:	45a0      	cmp	r8, r4
   ba52c:	d006      	beq.n	ba53c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   ba52e:	4621      	mov	r1, r4
   ba530:	4630      	mov	r0, r6
   ba532:	f002 fafd 	bl	bcb30 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   ba536:	3410      	adds	r4, #16
   ba538:	3610      	adds	r6, #16
   ba53a:	e7f6      	b.n	ba52a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   ba53c:	687b      	ldr	r3, [r7, #4]
   ba53e:	606b      	str	r3, [r5, #4]
}
   ba540:	4628      	mov	r0, r5
   ba542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ba546 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   ba546:	b530      	push	{r4, r5, lr}
   ba548:	b08d      	sub	sp, #52	; 0x34
   ba54a:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   ba54c:	f100 0138 	add.w	r1, r0, #56	; 0x38
   ba550:	a801      	add	r0, sp, #4
   ba552:	f7ff ff9e 	bl	ba492 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   ba556:	9b02      	ldr	r3, [sp, #8]
   ba558:	2b00      	cmp	r3, #0
   ba55a:	dd2f      	ble.n	ba5bc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   ba55c:	f104 0114 	add.w	r1, r4, #20
   ba560:	a804      	add	r0, sp, #16
   ba562:	f7ff fbb5 	bl	b9cd0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   ba566:	f104 0108 	add.w	r1, r4, #8
   ba56a:	a808      	add	r0, sp, #32
   ba56c:	f7ff fbb0 	bl	b9cd0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   ba570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba572:	9b06      	ldr	r3, [sp, #24]
   ba574:	4313      	orrs	r3, r2
   ba576:	d01f      	beq.n	ba5b8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   ba578:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   ba57c:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   ba580:	42ac      	cmp	r4, r5
   ba582:	d019      	beq.n	ba5b8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   ba584:	a904      	add	r1, sp, #16
   ba586:	4620      	mov	r0, r4
   ba588:	f002 fb28 	bl	bcbdc <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba58c:	b160      	cbz	r0, ba5a8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   ba58e:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   ba590:	a808      	add	r0, sp, #32
   ba592:	f002 fa37 	bl	bca04 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   ba596:	a804      	add	r0, sp, #16
   ba598:	f002 fa34 	bl	bca04 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   ba59c:	a801      	add	r0, sp, #4
   ba59e:	f7ff fe4d 	bl	ba23c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   ba5a2:	4620      	mov	r0, r4
   ba5a4:	b00d      	add	sp, #52	; 0x34
   ba5a6:	bd30      	pop	{r4, r5, pc}
   ba5a8:	4620      	mov	r0, r4
   ba5aa:	a908      	add	r1, sp, #32
   ba5ac:	f002 fb16 	bl	bcbdc <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba5b0:	3410      	adds	r4, #16
   ba5b2:	2800      	cmp	r0, #0
   ba5b4:	d0e4      	beq.n	ba580 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   ba5b6:	e7ea      	b.n	ba58e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   ba5b8:	2400      	movs	r4, #0
   ba5ba:	e7e9      	b.n	ba590 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   ba5bc:	2401      	movs	r4, #1
   ba5be:	e7ed      	b.n	ba59c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000ba5c0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   ba5c2:	2300      	movs	r3, #0
   ba5c4:	e9c0 3300 	strd	r3, r3, [r0]
   ba5c8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba5ca:	684f      	ldr	r7, [r1, #4]
   ba5cc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba5ce:	4605      	mov	r5, r0
   ba5d0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba5d2:	dd3e      	ble.n	ba652 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   ba5d4:	00f8      	lsls	r0, r7, #3
   ba5d6:	f7fe fffb 	bl	b95d0 <malloc>
            if (!d) {
   ba5da:	4604      	mov	r4, r0
   ba5dc:	b3c8      	cbz	r0, ba652 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   ba5de:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   ba5e2:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   ba5e4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   ba5e8:	d910      	bls.n	ba60c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba5ea:	429c      	cmp	r4, r3
   ba5ec:	d20f      	bcs.n	ba60e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   ba5ee:	3b08      	subs	r3, #8
            dest += end - p - 1;
   ba5f0:	1a1a      	subs	r2, r3, r0
   ba5f2:	f1a0 0c08 	sub.w	ip, r0, #8
   ba5f6:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   ba5f8:	459c      	cmp	ip, r3
   ba5fa:	d018      	beq.n	ba62e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   ba5fc:	b11a      	cbz	r2, ba606 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   ba5fe:	6819      	ldr	r1, [r3, #0]
   ba600:	6011      	str	r1, [r2, #0]
   ba602:	6859      	ldr	r1, [r3, #4]
   ba604:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   ba606:	3b08      	subs	r3, #8
   ba608:	3a08      	subs	r2, #8
   ba60a:	e7f5      	b.n	ba5f8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   ba60c:	d00f      	beq.n	ba62e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   ba60e:	4601      	mov	r1, r0
   ba610:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   ba612:	428b      	cmp	r3, r1
   ba614:	d00b      	beq.n	ba62e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   ba616:	b13a      	cbz	r2, ba628 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   ba618:	f8d1 c000 	ldr.w	ip, [r1]
   ba61c:	f8c2 c000 	str.w	ip, [r2]
   ba620:	f8d1 c004 	ldr.w	ip, [r1, #4]
   ba624:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   ba628:	3108      	adds	r1, #8
   ba62a:	3208      	adds	r2, #8
   ba62c:	e7f1      	b.n	ba612 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   ba62e:	f7fe ffd7 	bl	b95e0 <free>
        data_ = d;
   ba632:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba634:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba636:	e9d6 3100 	ldrd	r3, r1, [r6]
   ba63a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   ba63e:	4298      	cmp	r0, r3
   ba640:	d006      	beq.n	ba650 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   ba642:	681a      	ldr	r2, [r3, #0]
   ba644:	6022      	str	r2, [r4, #0]
   ba646:	685a      	ldr	r2, [r3, #4]
   ba648:	6062      	str	r2, [r4, #4]
   ba64a:	3308      	adds	r3, #8
   ba64c:	3408      	adds	r4, #8
   ba64e:	e7f6      	b.n	ba63e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   ba650:	6069      	str	r1, [r5, #4]
}
   ba652:	4628      	mov	r0, r5
   ba654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba656 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba656:	b570      	push	{r4, r5, r6, lr}
   ba658:	4604      	mov	r4, r0
        capacity_(0) {
   ba65a:	2000      	movs	r0, #0
   ba65c:	e9c4 0000 	strd	r0, r0, [r4]
   ba660:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba662:	684e      	ldr	r6, [r1, #4]
   ba664:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba666:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba668:	dd12      	ble.n	ba690 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   ba66a:	0071      	lsls	r1, r6, #1
   ba66c:	f7fe ffc0 	bl	b95f0 <realloc>
            if (!d) {
   ba670:	b170      	cbz	r0, ba690 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   ba672:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba674:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba676:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba67a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   ba67e:	429a      	cmp	r2, r3
   ba680:	d004      	beq.n	ba68c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   ba682:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba686:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   ba68a:	e7f8      	b.n	ba67e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   ba68c:	686b      	ldr	r3, [r5, #4]
   ba68e:	6063      	str	r3, [r4, #4]
}
   ba690:	4620      	mov	r0, r4
   ba692:	bd70      	pop	{r4, r5, r6, pc}

000ba694 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   ba694:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba696:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba698:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba69a:	b923      	cbnz	r3, ba6a6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   ba69c:	6803      	ldr	r3, [r0, #0]
   ba69e:	6818      	ldr	r0, [r3, #0]
   ba6a0:	b108      	cbz	r0, ba6a6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   ba6a2:	f7fe ff9d 	bl	b95e0 <free>
            func_();
        }
    }
   ba6a6:	4620      	mov	r0, r4
   ba6a8:	bd10      	pop	{r4, pc}

000ba6aa <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   ba6aa:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba6ac:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba6ae:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba6b0:	b923      	cbnz	r3, ba6bc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   ba6b2:	6803      	ldr	r3, [r0, #0]
   ba6b4:	6818      	ldr	r0, [r3, #0]
   ba6b6:	b108      	cbz	r0, ba6bc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   ba6b8:	f7fe ff92 	bl	b95e0 <free>
    }
   ba6bc:	4620      	mov	r0, r4
   ba6be:	bd10      	pop	{r4, pc}

000ba6c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   ba6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   ba6c4:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   ba6c8:	b08f      	sub	sp, #60	; 0x3c
   ba6ca:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   ba6cc:	f1b8 0f00 	cmp.w	r8, #0
   ba6d0:	d072      	beq.n	ba7b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   ba6d2:	6f05      	ldr	r5, [r0, #112]	; 0x70
   ba6d4:	2d00      	cmp	r5, #0
   ba6d6:	d06f      	beq.n	ba7b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   ba6d8:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba6dc:	231f      	movs	r3, #31
   ba6de:	2200      	movs	r2, #0
   ba6e0:	21ff      	movs	r1, #255	; 0xff
   ba6e2:	4648      	mov	r0, r9
   ba6e4:	f7ff fac1 	bl	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   ba6e8:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba6ea:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba6ec:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba6ee:	2200      	movs	r2, #0
   ba6f0:	4619      	mov	r1, r3
   ba6f2:	4638      	mov	r0, r7
   ba6f4:	f7ff fab9 	bl	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba6f8:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba6fa:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba6fc:	d006      	beq.n	ba70c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   ba6fe:	42ae      	cmp	r6, r5
   ba700:	d030      	beq.n	ba764 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   ba702:	2400      	movs	r4, #0
    }
   ba704:	4620      	mov	r0, r4
   ba706:	b00f      	add	sp, #60	; 0x3c
   ba708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   ba70c:	4620      	mov	r0, r4
   ba70e:	f7fe ff5f 	bl	b95d0 <malloc>
            dismissed_(false) {
   ba712:	ab03      	add	r3, sp, #12
   ba714:	9304      	str	r3, [sp, #16]
   ba716:	2300      	movs	r3, #0
   ba718:	4604      	mov	r4, r0
   ba71a:	9003      	str	r0, [sp, #12]
   ba71c:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   ba720:	b970      	cbnz	r0, ba740 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   ba722:	2320      	movs	r3, #32
   ba724:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba728:	4b24      	ldr	r3, [pc, #144]	; (ba7bc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba72a:	9300      	str	r3, [sp, #0]
   ba72c:	4924      	ldr	r1, [pc, #144]	; (ba7c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba72e:	4603      	mov	r3, r0
   ba730:	aa06      	add	r2, sp, #24
   ba732:	2032      	movs	r0, #50	; 0x32
   ba734:	f7fe fe70 	bl	b9418 <log_message>
                    return false;
   ba738:	a804      	add	r0, sp, #16
   ba73a:	f7ff ffab 	bl	ba694 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   ba73e:	e7e1      	b.n	ba704 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   ba740:	4602      	mov	r2, r0
   ba742:	21ff      	movs	r1, #255	; 0xff
   ba744:	462b      	mov	r3, r5
   ba746:	4648      	mov	r0, r9
   ba748:	f7ff fa8f 	bl	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   ba74c:	9803      	ldr	r0, [sp, #12]
   ba74e:	462a      	mov	r2, r5
   ba750:	4641      	mov	r1, r8
   ba752:	f003 fc64 	bl	be01e <memcmp>
   ba756:	b118      	cbz	r0, ba760 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   ba758:	a804      	add	r0, sp, #16
   ba75a:	f7ff ff9b 	bl	ba694 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   ba75e:	e7ce      	b.n	ba6fe <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   ba760:	2401      	movs	r4, #1
   ba762:	e7e9      	b.n	ba738 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   ba764:	4628      	mov	r0, r5
   ba766:	f7fe ff33 	bl	b95d0 <malloc>
   ba76a:	2400      	movs	r4, #0
   ba76c:	ab03      	add	r3, sp, #12
   ba76e:	4606      	mov	r6, r0
   ba770:	9003      	str	r0, [sp, #12]
   ba772:	9304      	str	r3, [sp, #16]
   ba774:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   ba778:	b978      	cbnz	r0, ba79a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   ba77a:	2320      	movs	r3, #32
   ba77c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba780:	4b0e      	ldr	r3, [pc, #56]	; (ba7bc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba782:	9300      	str	r3, [sp, #0]
   ba784:	490e      	ldr	r1, [pc, #56]	; (ba7c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba786:	4603      	mov	r3, r0
   ba788:	aa06      	add	r2, sp, #24
   ba78a:	2032      	movs	r0, #50	; 0x32
   ba78c:	f7fe fe44 	bl	b9418 <log_message>
                    return false;
   ba790:	4634      	mov	r4, r6
   ba792:	a804      	add	r0, sp, #16
   ba794:	f7ff ff89 	bl	ba6aa <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   ba798:	e7b4      	b.n	ba704 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   ba79a:	4602      	mov	r2, r0
   ba79c:	21ff      	movs	r1, #255	; 0xff
   ba79e:	462b      	mov	r3, r5
   ba7a0:	4638      	mov	r0, r7
   ba7a2:	f7ff fa62 	bl	b9c6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   ba7a6:	9803      	ldr	r0, [sp, #12]
   ba7a8:	462a      	mov	r2, r5
   ba7aa:	4641      	mov	r1, r8
   ba7ac:	f003 fc37 	bl	be01e <memcmp>
   ba7b0:	2800      	cmp	r0, #0
   ba7b2:	d1ee      	bne.n	ba792 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   ba7b4:	2401      	movs	r4, #1
   ba7b6:	e7ec      	b.n	ba792 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   ba7b8:	2401      	movs	r4, #1
   ba7ba:	e7a3      	b.n	ba704 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   ba7bc:	000c1530 	.word	0x000c1530
   ba7c0:	000c14af 	.word	0x000c14af

000ba7c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   ba7c4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba7c6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba7c8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba7ca:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba7cc:	dd03      	ble.n	ba7d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   ba7ce:	f7fe ff0f 	bl	b95f0 <realloc>
            if (!d) {
   ba7d2:	b918      	cbnz	r0, ba7dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   ba7d4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba7d6:	f7fe ff03 	bl	b95e0 <free>
        T* d = nullptr;
   ba7da:	2000      	movs	r0, #0
        data_ = d;
   ba7dc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba7de:	60a5      	str	r5, [r4, #8]
        return true;
   ba7e0:	2001      	movs	r0, #1
   ba7e2:	e7f7      	b.n	ba7d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000ba7e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba7e4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba7e6:	6883      	ldr	r3, [r0, #8]
   ba7e8:	428b      	cmp	r3, r1
   ba7ea:	da02      	bge.n	ba7f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   ba7ec:	f7ff ffea 	bl	ba7c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   ba7f0:	bd08      	pop	{r3, pc}
    return true;
   ba7f2:	2001      	movs	r0, #1
   ba7f4:	e7fc      	b.n	ba7f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000ba7f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba7f6:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba7f8:	2300      	movs	r3, #0
   ba7fa:	e9c0 3300 	strd	r3, r3, [r0]
   ba7fe:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba800:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba802:	6849      	ldr	r1, [r1, #4]
   ba804:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba806:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba808:	dd10      	ble.n	ba82c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   ba80a:	f7ff ffdb 	bl	ba7c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba80e:	b168      	cbz	r0, ba82c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba810:	e9d5 3100 	ldrd	r3, r1, [r5]
   ba814:	6822      	ldr	r2, [r4, #0]
   ba816:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   ba818:	4299      	cmp	r1, r3
   ba81a:	d005      	beq.n	ba828 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   ba81c:	b10a      	cbz	r2, ba822 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   ba81e:	7818      	ldrb	r0, [r3, #0]
   ba820:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   ba822:	3301      	adds	r3, #1
   ba824:	3201      	adds	r2, #1
   ba826:	e7f7      	b.n	ba818 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   ba828:	686b      	ldr	r3, [r5, #4]
   ba82a:	6063      	str	r3, [r4, #4]
}
   ba82c:	4620      	mov	r0, r4
   ba82e:	bd38      	pop	{r3, r4, r5, pc}

000ba830 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   ba830:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   ba832:	680b      	ldr	r3, [r1, #0]
   ba834:	6003      	str	r3, [r0, #0]
   ba836:	684b      	ldr	r3, [r1, #4]
   ba838:	6043      	str	r3, [r0, #4]
   ba83a:	4604      	mov	r4, r0
   ba83c:	460d      	mov	r5, r1
class BleAdvertisingData {
   ba83e:	3008      	adds	r0, #8
   ba840:	3108      	adds	r1, #8
   ba842:	f7ff ffd8 	bl	ba7f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba846:	f105 0114 	add.w	r1, r5, #20
   ba84a:	f104 0014 	add.w	r0, r4, #20
   ba84e:	f7ff ffd2 	bl	ba7f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba852:	f895 3020 	ldrb.w	r3, [r5, #32]
   ba856:	f884 3020 	strb.w	r3, [r4, #32]
   ba85a:	4620      	mov	r0, r4
   ba85c:	bd38      	pop	{r3, r4, r5, pc}

000ba85e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   ba85e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba860:	4604      	mov	r4, r0
   ba862:	a801      	add	r0, sp, #4
   ba864:	f7ff ffc7 	bl	ba7f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   ba868:	9b01      	ldr	r3, [sp, #4]
   ba86a:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba86c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba86e:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba870:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba872:	6062      	str	r2, [r4, #4]
   ba874:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba876:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba878:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba87a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba87c:	9001      	str	r0, [sp, #4]
   ba87e:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   ba880:	f7fe feae 	bl	b95e0 <free>
   ba884:	b004      	add	sp, #16
   ba886:	bd10      	pop	{r4, pc}

000ba888 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba88c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba88e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba890:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba892:	4419      	add	r1, r3
   ba894:	6883      	ldr	r3, [r0, #8]
   ba896:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba898:	4604      	mov	r4, r0
   ba89a:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba89c:	dc12      	bgt.n	ba8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   ba89e:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba8a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba8a2:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba8a4:	1bd2      	subs	r2, r2, r7
   ba8a6:	4631      	mov	r1, r6
   ba8a8:	1970      	adds	r0, r6, r5
   ba8aa:	f003 fbd6 	bl	be05a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   ba8ae:	462a      	mov	r2, r5
   ba8b0:	4641      	mov	r1, r8
   ba8b2:	4630      	mov	r0, r6
   ba8b4:	f003 fbc3 	bl	be03e <memcpy>
    size_ += n;
   ba8b8:	6863      	ldr	r3, [r4, #4]
   ba8ba:	442b      	add	r3, r5
   ba8bc:	6063      	str	r3, [r4, #4]
    return true;
   ba8be:	2001      	movs	r0, #1
}
   ba8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba8c4:	f7ff ff7e 	bl	ba7c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba8c8:	2800      	cmp	r0, #0
   ba8ca:	d1e8      	bne.n	ba89e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   ba8cc:	e7f8      	b.n	ba8c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000ba8ce <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   ba8ce:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   ba8d0:	460a      	mov	r2, r1
   ba8d2:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   ba8d4:	b510      	push	{r4, lr}
   ba8d6:	4604      	mov	r4, r0
    size_ = 0;
   ba8d8:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   ba8da:	b102      	cbz	r2, ba8de <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   ba8dc:	b90b      	cbnz	r3, ba8e2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   ba8de:	2000      	movs	r0, #0
}
   ba8e0:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   ba8e2:	2bff      	cmp	r3, #255	; 0xff
   ba8e4:	bf28      	it	cs
   ba8e6:	23ff      	movcs	r3, #255	; 0xff
   ba8e8:	f7ff ffce 	bl	ba888 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   ba8ec:	2800      	cmp	r0, #0
   ba8ee:	d0f7      	beq.n	ba8e0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   ba8f0:	6860      	ldr	r0, [r4, #4]
   ba8f2:	e7f5      	b.n	ba8e0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000ba8f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba8f6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8f8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba8fc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba8fe:	4604      	mov	r4, r0
   ba900:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba902:	da0b      	bge.n	ba91c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   ba904:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba906:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba908:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba90a:	1b52      	subs	r2, r2, r5
   ba90c:	1c48      	adds	r0, r1, #1
   ba90e:	f003 fba4 	bl	be05a <memmove>
    new(p) T(std::move(value));
   ba912:	557e      	strb	r6, [r7, r5]
    ++size_;
   ba914:	6863      	ldr	r3, [r4, #4]
   ba916:	3301      	adds	r3, #1
   ba918:	6063      	str	r3, [r4, #4]
}
   ba91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba91c:	3101      	adds	r1, #1
   ba91e:	f7ff ff51 	bl	ba7c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba922:	2800      	cmp	r0, #0
   ba924:	d1ee      	bne.n	ba904 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   ba926:	e7f8      	b.n	ba91a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000ba928 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba928:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   ba92a:	6841      	ldr	r1, [r0, #4]
   ba92c:	f7ff bfe2 	b.w	ba8f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000ba930 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba934:	4604      	mov	r4, r0
   ba936:	461d      	mov	r5, r3
   ba938:	460f      	mov	r7, r1
   ba93a:	ab01      	add	r3, sp, #4
   ba93c:	4690      	mov	r8, r2
   ba93e:	460a      	mov	r2, r1
   ba940:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba944:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   ba948:	f7fe ff14 	bl	b9774 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   ba94c:	1cae      	adds	r6, r5, #2
   ba94e:	6863      	ldr	r3, [r4, #4]
   ba950:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   ba952:	f1b9 0f00 	cmp.w	r9, #0
   ba956:	d126      	bne.n	ba9a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   ba958:	b328      	cbz	r0, ba9a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba95a:	4433      	add	r3, r6
   ba95c:	1a1b      	subs	r3, r3, r0
   ba95e:	2bff      	cmp	r3, #255	; 0xff
   ba960:	d809      	bhi.n	ba976 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   ba962:	9901      	ldr	r1, [sp, #4]
   ba964:	4620      	mov	r0, r4
   ba966:	f7ff fcc7 	bl	ba2f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba96a:	6861      	ldr	r1, [r4, #4]
   ba96c:	4620      	mov	r0, r4
   ba96e:	4431      	add	r1, r6
   ba970:	f7ff ff38 	bl	ba7e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba974:	b918      	cbnz	r0, ba97e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   ba976:	6860      	ldr	r0, [r4, #4]
}
   ba978:	b003      	add	sp, #12
   ba97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   ba97e:	1c6a      	adds	r2, r5, #1
   ba980:	9901      	ldr	r1, [sp, #4]
   ba982:	b2d2      	uxtb	r2, r2
   ba984:	4620      	mov	r0, r4
   ba986:	f7ff ffb5 	bl	ba8f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   ba98a:	9901      	ldr	r1, [sp, #4]
   ba98c:	463a      	mov	r2, r7
   ba98e:	3101      	adds	r1, #1
   ba990:	4620      	mov	r0, r4
   ba992:	f7ff ffaf 	bl	ba8f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   ba996:	9901      	ldr	r1, [sp, #4]
   ba998:	462b      	mov	r3, r5
   ba99a:	4642      	mov	r2, r8
   ba99c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   ba99e:	4620      	mov	r0, r4
   ba9a0:	f7ff ff72 	bl	ba888 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   ba9a4:	e7e7      	b.n	ba976 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba9a6:	18f1      	adds	r1, r6, r3
   ba9a8:	29ff      	cmp	r1, #255	; 0xff
   ba9aa:	d8e4      	bhi.n	ba976 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba9ac:	4620      	mov	r0, r4
   ba9ae:	f7ff ff19 	bl	ba7e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba9b2:	2800      	cmp	r0, #0
   ba9b4:	d0df      	beq.n	ba976 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   ba9b6:	1c69      	adds	r1, r5, #1
   ba9b8:	b2c9      	uxtb	r1, r1
   ba9ba:	4620      	mov	r0, r4
   ba9bc:	f7ff ffb4 	bl	ba928 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   ba9c0:	4639      	mov	r1, r7
   ba9c2:	4620      	mov	r0, r4
   ba9c4:	f7ff ffb0 	bl	ba928 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   ba9c8:	6861      	ldr	r1, [r4, #4]
   ba9ca:	462b      	mov	r3, r5
   ba9cc:	4642      	mov	r2, r8
   ba9ce:	e7e6      	b.n	ba99e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000ba9d0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba9d0:	b430      	push	{r4, r5}
   ba9d2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   ba9d6:	b11a      	cbz	r2, ba9e0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   ba9d8:	9502      	str	r5, [sp, #8]
}
   ba9da:	bc30      	pop	{r4, r5}
   ba9dc:	f7ff bfa8 	b.w	ba930 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   ba9e0:	6840      	ldr	r0, [r0, #4]
}
   ba9e2:	bc30      	pop	{r4, r5}
   ba9e4:	4770      	bx	lr

000ba9e6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   ba9e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   ba9e8:	2300      	movs	r3, #0
   ba9ea:	e9c0 3300 	strd	r3, r3, [r0]
   ba9ee:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba9f0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba9f2:	9300      	str	r3, [sp, #0]
   ba9f4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba9f6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba9fa:	4619      	mov	r1, r3
   ba9fc:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   baa00:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   baa02:	f7ff ffe5 	bl	ba9d0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   baa06:	4620      	mov	r0, r4
   baa08:	b004      	add	sp, #16
   baa0a:	bd10      	pop	{r4, pc}

000baa0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   baa0c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   baa0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa10:	4604      	mov	r4, r0
   baa12:	460d      	mov	r5, r1
   baa14:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   baa16:	d914      	bls.n	baa42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   baa18:	4290      	cmp	r0, r2
   baa1a:	d213      	bcs.n	baa44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   baa1c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   baa20:	1a75      	subs	r5, r6, r1
   baa22:	f1a1 0708 	sub.w	r7, r1, #8
   baa26:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   baa28:	42b7      	cmp	r7, r6
   baa2a:	d018      	beq.n	baa5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   baa2c:	b11c      	cbz	r4, baa36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   baa2e:	4631      	mov	r1, r6
   baa30:	4620      	mov	r0, r4
   baa32:	f7ff fcac 	bl	ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   baa36:	1d30      	adds	r0, r6, #4
   baa38:	f7ff fcb3 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   baa3c:	3e08      	subs	r6, #8
   baa3e:	3c08      	subs	r4, #8
   baa40:	e7f2      	b.n	baa28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   baa42:	d00c      	beq.n	baa5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   baa44:	42b5      	cmp	r5, r6
   baa46:	d00a      	beq.n	baa5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   baa48:	b11c      	cbz	r4, baa52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   baa4a:	4629      	mov	r1, r5
   baa4c:	4620      	mov	r0, r4
   baa4e:	f7ff fc9e 	bl	ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   baa52:	1d28      	adds	r0, r5, #4
   baa54:	f7ff fca5 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   baa58:	3508      	adds	r5, #8
   baa5a:	3408      	adds	r4, #8
   baa5c:	e7f2      	b.n	baa44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   baa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baa60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   baa60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   baa62:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   baa64:	6846      	ldr	r6, [r0, #4]
   baa66:	4668      	mov	r0, sp
   baa68:	f7ff fc91 	bl	ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baa6c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   baa70:	429f      	cmp	r7, r3
   baa72:	db12      	blt.n	baa9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   baa74:	3701      	adds	r7, #1
        if (n > 0) {
   baa76:	2f00      	cmp	r7, #0
   baa78:	dd29      	ble.n	baace <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   baa7a:	00f8      	lsls	r0, r7, #3
   baa7c:	f7fe fda8 	bl	b95d0 <malloc>
            if (!d) {
   baa80:	4605      	mov	r5, r0
   baa82:	b1f0      	cbz	r0, baac2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   baa84:	e9d4 1200 	ldrd	r1, r2, [r4]
   baa88:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   baa8c:	f7ff ffbe 	bl	baa0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   baa90:	6820      	ldr	r0, [r4, #0]
   baa92:	f7fe fda5 	bl	b95e0 <free>
        data_ = d;
   baa96:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   baa98:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   baa9a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   baa9c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baa9e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   baaa2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   baaa6:	4631      	mov	r1, r6
   baaa8:	f106 0008 	add.w	r0, r6, #8
   baaac:	f7ff ffae 	bl	baa0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   baab0:	b11e      	cbz	r6, baaba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   baab2:	4669      	mov	r1, sp
   baab4:	4630      	mov	r0, r6
   baab6:	f7ff fc6a 	bl	ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   baaba:	6863      	ldr	r3, [r4, #4]
   baabc:	3301      	adds	r3, #1
   baabe:	6063      	str	r3, [r4, #4]
    return true;
   baac0:	2501      	movs	r5, #1
   baac2:	a801      	add	r0, sp, #4
   baac4:	f7ff fc6d 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   baac8:	4628      	mov	r0, r5
   baaca:	b003      	add	sp, #12
   baacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   baace:	2500      	movs	r5, #0
   baad0:	e7de      	b.n	baa90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000baad2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   baad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   baad4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   baad8:	4605      	mov	r5, r0
   baada:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   baadc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   baae0:	42a6      	cmp	r6, r4
   baae2:	d005      	beq.n	baaf0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   baae4:	4639      	mov	r1, r7
   baae6:	4620      	mov	r0, r4
   baae8:	f7ff fa9d 	bl	ba026 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   baaec:	b108      	cbz	r0, baaf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   baaee:	b914      	cbnz	r4, baaf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   baaf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   baaf2:	3408      	adds	r4, #8
   baaf4:	e7f4      	b.n	baae0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   baaf6:	1d20      	adds	r0, r4, #4
   baaf8:	f7ff fc53 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   baafc:	e9d5 3200 	ldrd	r3, r2, [r5]
   bab00:	f104 0108 	add.w	r1, r4, #8
   bab04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bab08:	4620      	mov	r0, r4
   bab0a:	f7ff ff7f 	bl	baa0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bab0e:	686b      	ldr	r3, [r5, #4]
   bab10:	3b01      	subs	r3, #1
   bab12:	606b      	str	r3, [r5, #4]
    return true;
   bab14:	e7ec      	b.n	baaf0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bab18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bab1c:	4605      	mov	r5, r0
   bab1e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bab20:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bab22:	460c      	mov	r4, r1
        WiringBleLock lk;
   bab24:	f7fe fef4 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bab28:	682e      	ldr	r6, [r5, #0]
   bab2a:	1ef3      	subs	r3, r6, #3
   bab2c:	2b0d      	cmp	r3, #13
   bab2e:	d83c      	bhi.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bab30:	e8df f013 	tbh	[pc, r3, lsl #1]
   bab34:	0053000e 	.word	0x0053000e
   bab38:	00d1003b 	.word	0x00d1003b
   bab3c:	003b003b 	.word	0x003b003b
   bab40:	003b003b 	.word	0x003b003b
   bab44:	009b003b 	.word	0x009b003b
   bab48:	009b009b 	.word	0x009b009b
   bab4c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bab50:	a804      	add	r0, sp, #16
   bab52:	f7ff fa0f 	bl	b9f74 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bab56:	9b04      	ldr	r3, [sp, #16]
   bab58:	89aa      	ldrh	r2, [r5, #12]
   bab5a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bab5c:	6869      	ldr	r1, [r5, #4]
   bab5e:	9804      	ldr	r0, [sp, #16]
   bab60:	3108      	adds	r1, #8
   bab62:	3002      	adds	r0, #2
   bab64:	f7fe feee 	bl	b9944 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bab68:	a904      	add	r1, sp, #16
   bab6a:	a806      	add	r0, sp, #24
   bab6c:	f7ff fc0f 	bl	ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bab70:	a906      	add	r1, sp, #24
   bab72:	f104 0018 	add.w	r0, r4, #24
   bab76:	f7ff ff73 	bl	baa60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bab7a:	4605      	mov	r5, r0
   bab7c:	a807      	add	r0, sp, #28
   bab7e:	f7ff fc10 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bab82:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bab84:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bab86:	b9b5      	cbnz	r5, babb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bab88:	4b5d      	ldr	r3, [pc, #372]	; (bad00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bab8a:	495e      	ldr	r1, [pc, #376]	; (bad04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bab8c:	9300      	str	r3, [sp, #0]
   bab8e:	2032      	movs	r0, #50	; 0x32
   bab90:	462b      	mov	r3, r5
   bab92:	aa06      	add	r2, sp, #24
   bab94:	9507      	str	r5, [sp, #28]
   bab96:	f7fe fc3f 	bl	b9418 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bab9a:	9b04      	ldr	r3, [sp, #16]
   bab9c:	4629      	mov	r1, r5
   bab9e:	8818      	ldrh	r0, [r3, #0]
   baba0:	f7fe f9b0 	bl	b8f04 <hal_ble_gap_disconnect>
   baba4:	a805      	add	r0, sp, #20
   baba6:	f7ff fbfc 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   babaa:	a803      	add	r0, sp, #12
   babac:	f7fe febe 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   babb0:	b00e      	add	sp, #56	; 0x38
   babb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   babb6:	4a54      	ldr	r2, [pc, #336]	; (bad08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   babb8:	9200      	str	r2, [sp, #0]
   babba:	2300      	movs	r3, #0
   babbc:	4951      	ldr	r1, [pc, #324]	; (bad04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   babbe:	9307      	str	r3, [sp, #28]
   babc0:	aa06      	add	r2, sp, #24
   babc2:	2001      	movs	r0, #1
   babc4:	f7fe fc28 	bl	b9418 <log_message>
                if (impl->connectedCallback_) {
   babc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   babca:	2b00      	cmp	r3, #0
   babcc:	d0ea      	beq.n	baba4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   babce:	a904      	add	r1, sp, #16
   babd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   babd4:	f7ff fc54 	bl	ba480 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   babd8:	e7e4      	b.n	baba4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   babda:	89a9      	ldrh	r1, [r5, #12]
   babdc:	4620      	mov	r0, r4
   babde:	f7ff f8dc 	bl	b9d9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   babe2:	4606      	mov	r6, r0
   babe4:	2800      	cmp	r0, #0
   babe6:	d0e0      	beq.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   babe8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   babea:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   babee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   babf2:	8029      	strh	r1, [r5, #0]
   babf4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   babf8:	429a      	cmp	r2, r3
   babfa:	d003      	beq.n	bac04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   babfc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bac00:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bac02:	e7f9      	b.n	babf8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bac04:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bac08:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bac0c:	45b8      	cmp	r8, r7
   bac0e:	d004      	beq.n	bac1a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bac10:	1d38      	adds	r0, r7, #4
   bac12:	f7ff fbc6 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bac16:	3708      	adds	r7, #8
   bac18:	e7f8      	b.n	bac0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bac1a:	2300      	movs	r3, #0
   bac1c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bac1e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bac22:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bac26:	45b8      	cmp	r8, r7
   bac28:	d004      	beq.n	bac34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bac2a:	1d38      	adds	r0, r7, #4
   bac2c:	f7ff fbb9 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bac30:	3708      	adds	r7, #8
   bac32:	e7f8      	b.n	bac26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bac34:	2300      	movs	r3, #0
   bac36:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bac38:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bac3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bac3c:	b123      	cbz	r3, bac48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bac3e:	4631      	mov	r1, r6
   bac40:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bac44:	f7ff fc1c 	bl	ba480 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bac48:	2300      	movs	r3, #0
   bac4a:	2220      	movs	r2, #32
   bac4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bac50:	4a2e      	ldr	r2, [pc, #184]	; (bad0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bac52:	9200      	str	r2, [sp, #0]
   bac54:	492b      	ldr	r1, [pc, #172]	; (bad04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bac56:	aa06      	add	r2, sp, #24
   bac58:	2001      	movs	r0, #1
   bac5a:	f7fe fbdd 	bl	b9418 <log_message>
                    impl->peers_.removeOne(*peer);
   bac5e:	4631      	mov	r1, r6
   bac60:	f104 0018 	add.w	r0, r4, #24
   bac64:	f7ff ff35 	bl	baad2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bac68:	e79f      	b.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bac6a:	89a9      	ldrh	r1, [r5, #12]
   bac6c:	4620      	mov	r0, r4
   bac6e:	f7ff f894 	bl	b9d9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bac72:	2800      	cmp	r0, #0
   bac74:	d099      	beq.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bac76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bac78:	2b00      	cmp	r3, #0
   bac7a:	d096      	beq.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bac7c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bac7e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bac80:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bac84:	d001      	beq.n	bac8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bac86:	2e10      	cmp	r6, #16
   bac88:	d117      	bne.n	bacba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bac8a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bac8c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bac8e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bac90:	2506      	movs	r5, #6
                        };
   bac92:	f88d 3015 	strb.w	r3, [sp, #21]
   bac96:	9104      	str	r1, [sp, #16]
   bac98:	f88d 2014 	strb.w	r2, [sp, #20]
   bac9c:	9006      	str	r0, [sp, #24]
   bac9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   baca2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   baca4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   baca8:	9508      	str	r5, [sp, #32]
   bacaa:	e883 0003 	stmia.w	r3, {r0, r1}
   bacae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacb0:	a906      	add	r1, sp, #24
   bacb2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bacb6:	4798      	blx	r3
   bacb8:	e777      	b.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bacba:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bacbc:	bf01      	itttt	eq
   bacbe:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bacc0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bacc2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bacc6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bacc8:	bf0f      	iteee	eq
   bacca:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bacce:	461a      	movne	r2, r3
   bacd0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bacd2:	461d      	movne	r5, r3
   bacd4:	e7dd      	b.n	bac92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bacd6:	89a9      	ldrh	r1, [r5, #12]
   bacd8:	4620      	mov	r0, r4
   bacda:	f7ff f85e 	bl	b9d9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bacde:	4601      	mov	r1, r0
   bace0:	2800      	cmp	r0, #0
   bace2:	f43f af62 	beq.w	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bace6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bace8:	2b00      	cmp	r3, #0
   bacea:	f43f af5e 	beq.w	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bacee:	686b      	ldr	r3, [r5, #4]
   bacf0:	9306      	str	r3, [sp, #24]
   bacf2:	aa06      	add	r2, sp, #24
   bacf4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bacf6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bacfa:	4798      	blx	r3
   bacfc:	e755      	b.n	babaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bacfe:	bf00      	nop
   bad00:	000c154b 	.word	0x000c154b
   bad04:	000c14af 	.word	0x000c14af
   bad08:	000c1571 	.word	0x000c1571
   bad0c:	000c158e 	.word	0x000c158e

000bad10 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   bad10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bad14:	4607      	mov	r7, r0
   bad16:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   bad18:	4668      	mov	r0, sp
   bad1a:	f7fe fdf9 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bad1e:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bad20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   bad24:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   bad28:	42ac      	cmp	r4, r5
   bad2a:	d035      	beq.n	bad98 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   bad2c:	2224      	movs	r2, #36	; 0x24
   bad2e:	2100      	movs	r1, #0
   bad30:	a801      	add	r0, sp, #4
   bad32:	f003 f9ac 	bl	be08e <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   bad36:	6823      	ldr	r3, [r4, #0]
   bad38:	2200      	movs	r2, #0
   bad3a:	8818      	ldrh	r0, [r3, #0]
   bad3c:	a901      	add	r1, sp, #4
   bad3e:	f7fe f931 	bl	b8fa4 <hal_ble_gap_get_connection_info>
   bad42:	4606      	mov	r6, r0
   bad44:	b108      	cbz	r0, bad4a <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   bad46:	3408      	adds	r4, #8
   bad48:	e7ee      	b.n	bad28 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   bad4a:	f89d 8008 	ldrb.w	r8, [sp, #8]
   bad4e:	f1b8 0f01 	cmp.w	r8, #1
   bad52:	d1f8      	bne.n	bad46 <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   bad54:	f8df 9048 	ldr.w	r9, [pc, #72]	; bada0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   bad58:	f8d9 0000 	ldr.w	r0, [r9]
   bad5c:	f7fe f9a4 	bl	b90a8 <os_mutex_recursive_unlock>
        locked_ = false;
   bad60:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   bad64:	6823      	ldr	r3, [r4, #0]
   bad66:	4631      	mov	r1, r6
   bad68:	8818      	ldrh	r0, [r3, #0]
   bad6a:	f7fe f8cb 	bl	b8f04 <hal_ble_gap_disconnect>
   bad6e:	1e05      	subs	r5, r0, #0
   bad70:	db0b      	blt.n	bad8a <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   bad72:	f8d9 0000 	ldr.w	r0, [r9]
   bad76:	f7fe f98f 	bl	b9098 <os_mutex_recursive_lock>
        return peers_;
   bad7a:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   bad7c:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   bad80:	4621      	mov	r1, r4
   bad82:	3018      	adds	r0, #24
   bad84:	f7ff fea5 	bl	baad2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   bad88:	4635      	mov	r5, r6
    WiringBleLock lk;
   bad8a:	4668      	mov	r0, sp
   bad8c:	f7fe fdce 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   bad90:	4628      	mov	r0, r5
   bad92:	b00b      	add	sp, #44	; 0x2c
   bad94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   bad98:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   bad9c:	e7f5      	b.n	bad8a <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   bad9e:	bf00      	nop
   bada0:	2003e658 	.word	0x2003e658

000bada4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bada4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bada6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bada8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   badaa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   badac:	dd05      	ble.n	badba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   badae:	2114      	movs	r1, #20
   badb0:	4369      	muls	r1, r5
   badb2:	f7fe fc1d 	bl	b95f0 <realloc>
            if (!d) {
   badb6:	b918      	cbnz	r0, badc0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   badb8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   badba:	f7fe fc11 	bl	b95e0 <free>
        T* d = nullptr;
   badbe:	2000      	movs	r0, #0
        data_ = d;
   badc0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   badc2:	60a5      	str	r5, [r4, #8]
        return true;
   badc4:	2001      	movs	r0, #1
   badc6:	e7f7      	b.n	badb8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000badc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   badcc:	2400      	movs	r4, #0
   badce:	e9c0 4400 	strd	r4, r4, [r0]
   badd2:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badd4:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   badd6:	6849      	ldr	r1, [r1, #4]
   badd8:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badda:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baddc:	dd1a      	ble.n	bae14 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   badde:	f7ff ffe1 	bl	bada4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bade2:	b1b8      	cbz	r0, bae14 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bade4:	e9d8 9300 	ldrd	r9, r3, [r8]
   bade8:	f04f 0c14 	mov.w	ip, #20
   badec:	f8d7 e000 	ldr.w	lr, [r7]
   badf0:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   badf4:	eb09 0504 	add.w	r5, r9, r4
   badf8:	45ac      	cmp	ip, r5
   badfa:	d008      	beq.n	bae0e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   badfc:	eb1e 0604 	adds.w	r6, lr, r4
   bae00:	bf1f      	itttt	ne
   bae02:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bae04:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bae06:	682b      	ldrne	r3, [r5, #0]
   bae08:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bae0a:	3414      	adds	r4, #20
   bae0c:	e7f2      	b.n	badf4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bae0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bae12:	607b      	str	r3, [r7, #4]
}
   bae14:	4638      	mov	r0, r7
   bae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bae1a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bae1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bae1e:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bae22:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bae24:	6883      	ldr	r3, [r0, #8]
   bae26:	19e9      	adds	r1, r5, r7
   bae28:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bae2a:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bae2c:	dc17      	bgt.n	bae5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bae2e:	2314      	movs	r3, #20
   bae30:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bae32:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bae34:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bae36:	fb03 f907 	mul.w	r9, r3, r7
   bae3a:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bae3c:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bae3e:	1b52      	subs	r2, r2, r5
   bae40:	4631      	mov	r1, r6
   bae42:	eb06 0009 	add.w	r0, r6, r9
   bae46:	f003 f908 	bl	be05a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bae4a:	464a      	mov	r2, r9
   bae4c:	4641      	mov	r1, r8
   bae4e:	4630      	mov	r0, r6
   bae50:	f003 f8f5 	bl	be03e <memcpy>
    size_ += n;
   bae54:	6863      	ldr	r3, [r4, #4]
   bae56:	443b      	add	r3, r7
   bae58:	6063      	str	r3, [r4, #4]
}
   bae5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bae5e:	f7ff ffa1 	bl	bada4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bae62:	2800      	cmp	r0, #0
   bae64:	d1e3      	bne.n	bae2e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bae66:	e7f8      	b.n	bae5a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bae68 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bae68:	b082      	sub	sp, #8
   bae6a:	b570      	push	{r4, r5, r6, lr}
   bae6c:	460c      	mov	r4, r1
   bae6e:	a904      	add	r1, sp, #16
   bae70:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bae74:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bae78:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bae7a:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bae7c:	da17      	bge.n	baeae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bae7e:	2314      	movs	r3, #20
   bae80:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bae84:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bae86:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bae88:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bae8a:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bae8c:	1a52      	subs	r2, r2, r1
   bae8e:	18e0      	adds	r0, r4, r3
   bae90:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bae92:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bae94:	f003 f8e1 	bl	be05a <memmove>
    new(p) T(std::move(value));
   bae98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bae9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bae9c:	6833      	ldr	r3, [r6, #0]
   bae9e:	6023      	str	r3, [r4, #0]
    ++size_;
   baea0:	686b      	ldr	r3, [r5, #4]
   baea2:	3301      	adds	r3, #1
   baea4:	606b      	str	r3, [r5, #4]
}
   baea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   baeaa:	b002      	add	sp, #8
   baeac:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baeae:	3101      	adds	r1, #1
   baeb0:	f7ff ff78 	bl	bada4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   baeb4:	2800      	cmp	r0, #0
   baeb6:	d1e2      	bne.n	bae7e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   baeb8:	e7f5      	b.n	baea6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000baeba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   baeba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   baebe:	2400      	movs	r4, #0
   baec0:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   baec2:	1e93      	subs	r3, r2, #2
   baec4:	e9c0 4400 	strd	r4, r4, [r0]
   baec8:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   baeca:	4605      	mov	r5, r0
   baecc:	460f      	mov	r7, r1
   baece:	4690      	mov	r8, r2
   baed0:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   baed2:	9305      	str	r3, [sp, #20]
    return size_;
   baed4:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   baed6:	428c      	cmp	r4, r1
   baed8:	da72      	bge.n	bafc0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   baeda:	6838      	ldr	r0, [r7, #0]
   baedc:	ab07      	add	r3, sp, #28
   baede:	4642      	mov	r2, r8
   baee0:	1b09      	subs	r1, r1, r4
   baee2:	4420      	add	r0, r4
   baee4:	f7fe fc46 	bl	b9774 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   baee8:	4606      	mov	r6, r0
   baeea:	2800      	cmp	r0, #0
   baeec:	d068      	beq.n	bafc0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   baeee:	9b05      	ldr	r3, [sp, #20]
   baef0:	2b01      	cmp	r3, #1
   baef2:	d82f      	bhi.n	baf54 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   baef4:	f1a0 0b02 	sub.w	fp, r0, #2
   baef8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   baefc:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   baf00:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   baf04:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   baf06:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   baf08:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   baf0a:	d055      	beq.n	bafb8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   baf0c:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   baf0e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   baf12:	4413      	add	r3, r2
   baf14:	a808      	add	r0, sp, #32
   baf16:	78d9      	ldrb	r1, [r3, #3]
   baf18:	789b      	ldrb	r3, [r3, #2]
   baf1a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   baf1e:	f7fe fd8e 	bl	b9a3e <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   baf22:	f10d 0e20 	add.w	lr, sp, #32
   baf26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   baf2a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   baf2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   baf32:	f8de 3000 	ldr.w	r3, [lr]
   baf36:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   baf3a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   baf3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   baf42:	ab0d      	add	r3, sp, #52	; 0x34
   baf44:	cb0c      	ldmia	r3, {r2, r3}
   baf46:	6869      	ldr	r1, [r5, #4]
   baf48:	4628      	mov	r0, r5
   baf4a:	f7ff ff8d 	bl	bae68 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   baf4e:	f109 0901 	add.w	r9, r9, #1
   baf52:	e7d7      	b.n	baf04 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   baf54:	f1a8 0306 	sub.w	r3, r8, #6
   baf58:	2b01      	cmp	r3, #1
   baf5a:	d82d      	bhi.n	bafb8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   baf5c:	f1a0 0b02 	sub.w	fp, r0, #2
   baf60:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   baf64:	f04f 0900 	mov.w	r9, #0
   baf68:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   baf6c:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   baf6e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   baf70:	d022      	beq.n	bafb8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   baf72:	3302      	adds	r3, #2
    return data_[i];
   baf74:	6839      	ldr	r1, [r7, #0]
   baf76:	4423      	add	r3, r4
   baf78:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   baf7c:	2201      	movs	r2, #1
   baf7e:	4419      	add	r1, r3
   baf80:	a808      	add	r0, sp, #32
   baf82:	f7fe fd3d 	bl	b9a00 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   baf86:	f10d 0e20 	add.w	lr, sp, #32
   baf8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   baf8e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   baf92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   baf96:	f8de 3000 	ldr.w	r3, [lr]
   baf9a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   baf9e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bafa2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bafa6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bafaa:	6869      	ldr	r1, [r5, #4]
   bafac:	4628      	mov	r0, r5
   bafae:	f7ff ff5b 	bl	bae68 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bafb2:	f109 0901 	add.w	r9, r9, #1
   bafb6:	e7d9      	b.n	baf6c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bafb8:	9b07      	ldr	r3, [sp, #28]
   bafba:	441c      	add	r4, r3
   bafbc:	4434      	add	r4, r6
   bafbe:	e789      	b.n	baed4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bafc0:	4628      	mov	r0, r5
   bafc2:	b013      	add	sp, #76	; 0x4c
   bafc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bafc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bafc8:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bafca:	2300      	movs	r3, #0
   bafcc:	b085      	sub	sp, #20
   bafce:	e9c0 3300 	strd	r3, r3, [r0]
   bafd2:	6083      	str	r3, [r0, #8]
   bafd4:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bafd6:	2202      	movs	r2, #2
   bafd8:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bafda:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bafdc:	f7ff ff6d 	bl	baeba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bafe0:	a901      	add	r1, sp, #4
   bafe2:	4620      	mov	r0, r4
   bafe4:	f7ff ff19 	bl	bae1a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bafe8:	a801      	add	r0, sp, #4
   bafea:	f7ff f939 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bafee:	2202      	movs	r2, #2
   baff0:	4629      	mov	r1, r5
   baff2:	a801      	add	r0, sp, #4
   baff4:	f7ff ff61 	bl	baeba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   baff8:	a901      	add	r1, sp, #4
   baffa:	4620      	mov	r0, r4
   baffc:	f7ff ff0d 	bl	bae1a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb000:	a801      	add	r0, sp, #4
   bb002:	f7ff f92d 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb006:	2203      	movs	r2, #3
   bb008:	4629      	mov	r1, r5
   bb00a:	a801      	add	r0, sp, #4
   bb00c:	f7ff ff55 	bl	baeba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb010:	a901      	add	r1, sp, #4
   bb012:	4620      	mov	r0, r4
   bb014:	f7ff ff01 	bl	bae1a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb018:	a801      	add	r0, sp, #4
   bb01a:	f7ff f921 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb01e:	2206      	movs	r2, #6
   bb020:	4629      	mov	r1, r5
   bb022:	a801      	add	r0, sp, #4
   bb024:	f7ff ff49 	bl	baeba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb028:	a901      	add	r1, sp, #4
   bb02a:	4620      	mov	r0, r4
   bb02c:	f7ff fef5 	bl	bae1a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb030:	a801      	add	r0, sp, #4
   bb032:	f7ff f915 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb036:	2207      	movs	r2, #7
   bb038:	4629      	mov	r1, r5
   bb03a:	a801      	add	r0, sp, #4
   bb03c:	f7ff ff3d 	bl	baeba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb040:	a901      	add	r1, sp, #4
   bb042:	4620      	mov	r0, r4
   bb044:	f7ff fee9 	bl	bae1a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb048:	a801      	add	r0, sp, #4
   bb04a:	f7ff f909 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb04e:	4620      	mov	r0, r4
   bb050:	b005      	add	sp, #20
   bb052:	bd30      	pop	{r4, r5, pc}

000bb054 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb058:	b085      	sub	sp, #20
   bb05a:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb05c:	4601      	mov	r1, r0
   bb05e:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb060:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb062:	f7ff ffb1 	bl	bafc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bb066:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bb068:	9b02      	ldr	r3, [sp, #8]
   bb06a:	f04f 0e14 	mov.w	lr, #20
   bb06e:	fb0e 6c03 	mla	ip, lr, r3, r6
   bb072:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bb074:	45b4      	cmp	ip, r6
   bb076:	d00d      	beq.n	bb094 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bb078:	45b9      	cmp	r9, r7
   bb07a:	f106 0614 	add.w	r6, r6, #20
   bb07e:	d009      	beq.n	bb094 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bb080:	f1a6 0514 	sub.w	r5, r6, #20
   bb084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb086:	fb0e 8407 	mla	r4, lr, r7, r8
   bb08a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb08c:	682b      	ldr	r3, [r5, #0]
   bb08e:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bb090:	3701      	adds	r7, #1
   bb092:	e7ef      	b.n	bb074 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb094:	a801      	add	r0, sp, #4
   bb096:	f7ff f8e3 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb09a:	4638      	mov	r0, r7
   bb09c:	b005      	add	sp, #20
   bb09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb0a2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bb0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0a6:	b08b      	sub	sp, #44	; 0x2c
   bb0a8:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb0aa:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bb0ae:	a801      	add	r0, sp, #4
   bb0b0:	f7ff fe8a 	bl	badc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bb0b4:	9b02      	ldr	r3, [sp, #8]
   bb0b6:	2b00      	cmp	r3, #0
   bb0b8:	dd4a      	ble.n	bb150 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb0ba:	f104 0114 	add.w	r1, r4, #20
   bb0be:	a804      	add	r0, sp, #16
   bb0c0:	f7ff ff82 	bl	bafc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb0c4:	f104 0108 	add.w	r1, r4, #8
   bb0c8:	a807      	add	r0, sp, #28
   bb0ca:	f7ff ff7d 	bl	bafc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bb0ce:	9d05      	ldr	r5, [sp, #20]
   bb0d0:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bb0d2:	2d00      	cmp	r5, #0
   bb0d4:	dc01      	bgt.n	bb0da <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bb0d6:	2e00      	cmp	r6, #0
   bb0d8:	dd38      	ble.n	bb14c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bb0da:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bb0dc:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bb0de:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bb0e2:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bb0e6:	2314      	movs	r3, #20
   bb0e8:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bb0ec:	fb03 8505 	mla	r5, r3, r5, r8
   bb0f0:	fb03 9606 	mla	r6, r3, r6, r9
   bb0f4:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bb0f6:	45ba      	cmp	sl, r7
   bb0f8:	d028      	beq.n	bb14c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bb0fa:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bb0fc:	45ab      	cmp	fp, r5
   bb0fe:	d015      	beq.n	bb12c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bb100:	4659      	mov	r1, fp
   bb102:	4650      	mov	r0, sl
   bb104:	f7fe fca5 	bl	b9a52 <_ZNK8particle7BleUuideqERKS0_>
   bb108:	f10b 0b14 	add.w	fp, fp, #20
   bb10c:	4604      	mov	r4, r0
   bb10e:	2800      	cmp	r0, #0
   bb110:	d0f4      	beq.n	bb0fc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb112:	a807      	add	r0, sp, #28
   bb114:	f7ff f8a4 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb118:	a804      	add	r0, sp, #16
   bb11a:	f7ff f8a1 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb11e:	a801      	add	r0, sp, #4
   bb120:	f7ff f89e 	bl	ba260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bb124:	4620      	mov	r0, r4
   bb126:	b00b      	add	sp, #44	; 0x2c
   bb128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb12c:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bb12e:	45b3      	cmp	fp, r6
   bb130:	d009      	beq.n	bb146 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bb132:	4659      	mov	r1, fp
   bb134:	4650      	mov	r0, sl
   bb136:	f7fe fc8c 	bl	b9a52 <_ZNK8particle7BleUuideqERKS0_>
   bb13a:	f10b 0b14 	add.w	fp, fp, #20
   bb13e:	4604      	mov	r4, r0
   bb140:	2800      	cmp	r0, #0
   bb142:	d0f4      	beq.n	bb12e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bb144:	e7e5      	b.n	bb112 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bb146:	f10a 0a14 	add.w	sl, sl, #20
   bb14a:	e7d4      	b.n	bb0f6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bb14c:	2400      	movs	r4, #0
   bb14e:	e7e0      	b.n	bb112 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bb150:	2401      	movs	r4, #1
   bb152:	e7e4      	b.n	bb11e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bb154 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bb154:	b513      	push	{r0, r1, r4, lr}
   bb156:	460b      	mov	r3, r1
   bb158:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb15a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb15e:	466c      	mov	r4, sp
   bb160:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bb164:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb168:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bb16c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bb170:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bb174:	b002      	add	sp, #8
   bb176:	bd10      	pop	{r4, pc}

000bb178 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bb178:	b538      	push	{r3, r4, r5, lr}
   bb17a:	4605      	mov	r5, r0
   bb17c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb17e:	f7ff ffe9 	bl	bb154 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb182:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb184:	68a2      	ldr	r2, [r4, #8]
   bb186:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb188:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb18a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb18c:	68e2      	ldr	r2, [r4, #12]
   bb18e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb190:	60e3      	str	r3, [r4, #12]
      }
   bb192:	bd38      	pop	{r3, r4, r5, pc}

000bb194 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bb194:	b530      	push	{r4, r5, lr}
   bb196:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bb198:	2300      	movs	r3, #0
   bb19a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bb19c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bb19e:	4605      	mov	r5, r0
   bb1a0:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bb1a2:	b133      	cbz	r3, bb1b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb1a4:	2202      	movs	r2, #2
   bb1a6:	4668      	mov	r0, sp
   bb1a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb1aa:	68e3      	ldr	r3, [r4, #12]
   bb1ac:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bb1ae:	68a3      	ldr	r3, [r4, #8]
   bb1b0:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bb1b2:	4629      	mov	r1, r5
   bb1b4:	4668      	mov	r0, sp
   bb1b6:	f7ff ffdf 	bl	bb178 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb1ba:	4668      	mov	r0, sp
   bb1bc:	f7f9 f8bc 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
      }
   bb1c0:	b005      	add	sp, #20
   bb1c2:	bd30      	pop	{r4, r5, pc}

000bb1c4 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb1c4:	b538      	push	{r3, r4, r5, lr}
   bb1c6:	460d      	mov	r5, r1
      { return _M_ptr; }
   bb1c8:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bb1ca:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb1cc:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bb1ce:	b123      	cbz	r3, bb1da <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bb1d0:	6828      	ldr	r0, [r5, #0]
   bb1d2:	314c      	adds	r1, #76	; 0x4c
   bb1d4:	304c      	adds	r0, #76	; 0x4c
   bb1d6:	f7ff ffdd 	bl	bb194 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb1da:	4620      	mov	r0, r4
   bb1dc:	682b      	ldr	r3, [r5, #0]
   bb1de:	f840 3b04 	str.w	r3, [r0], #4
   bb1e2:	6869      	ldr	r1, [r5, #4]
   bb1e4:	f7fe fb6e 	bl	b98c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bb1e8:	4620      	mov	r0, r4
   bb1ea:	bd38      	pop	{r3, r4, r5, pc}

000bb1ec <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb1f0:	4604      	mov	r4, r0
   bb1f2:	b087      	sub	sp, #28
    WiringBleLock lk;
   bb1f4:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb1f6:	460e      	mov	r6, r1
   bb1f8:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb1fa:	f7fe fb89 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bb1fe:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb200:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb204:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bb208:	4544      	cmp	r4, r8
   bb20a:	46a1      	mov	r9, r4
   bb20c:	d016      	beq.n	bb23c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bb20e:	4621      	mov	r1, r4
   bb210:	a801      	add	r0, sp, #4
   bb212:	f7fe fded 	bl	b9df0 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bb216:	4639      	mov	r1, r7
   bb218:	a801      	add	r0, sp, #4
   bb21a:	f7fe fc1a 	bl	b9a52 <_ZNK8particle7BleUuideqERKS0_>
   bb21e:	3408      	adds	r4, #8
   bb220:	4605      	mov	r5, r0
   bb222:	2800      	cmp	r0, #0
   bb224:	d0f0      	beq.n	bb208 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bb226:	4649      	mov	r1, r9
   bb228:	4630      	mov	r0, r6
   bb22a:	f7ff ffcb 	bl	bb1c4 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bb22e:	4668      	mov	r0, sp
   bb230:	f7fe fb7c 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb234:	4628      	mov	r0, r5
   bb236:	b007      	add	sp, #28
   bb238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bb23c:	2500      	movs	r5, #0
   bb23e:	e7f6      	b.n	bb22e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bb240 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb240:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb242:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb244:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb246:	344c      	adds	r4, #76	; 0x4c
   bb248:	b1b9      	cbz	r1, bb27a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bb24a:	e9cd 1200 	strd	r1, r2, [sp]
   bb24e:	a802      	add	r0, sp, #8
   bb250:	4669      	mov	r1, sp
   bb252:	f7ff f865 	bl	ba320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb256:	2300      	movs	r3, #0
	__x.swap(*this);
   bb258:	a906      	add	r1, sp, #24
   bb25a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bb25c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bb25e:	f7ff ff8b 	bl	bb178 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bb262:	4621      	mov	r1, r4
   bb264:	a806      	add	r0, sp, #24
   bb266:	f7ff ff87 	bl	bb178 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb26a:	a806      	add	r0, sp, #24
   bb26c:	f7f9 f864 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bb270:	a802      	add	r0, sp, #8
   bb272:	f7f9 f861 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
}
   bb276:	b00a      	add	sp, #40	; 0x28
   bb278:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb27a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bb27c:	e7eb      	b.n	bb256 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bb27e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb27e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb282:	4604      	mov	r4, r0
   bb284:	460d      	mov	r5, r1
   bb286:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb288:	d914      	bls.n	bb2b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb28a:	4290      	cmp	r0, r2
   bb28c:	d213      	bcs.n	bb2b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb28e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb292:	1a75      	subs	r5, r6, r1
   bb294:	f1a1 0708 	sub.w	r7, r1, #8
   bb298:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb29a:	42b7      	cmp	r7, r6
   bb29c:	d018      	beq.n	bb2d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb29e:	b11c      	cbz	r4, bb2a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb2a0:	4631      	mov	r1, r6
   bb2a2:	4620      	mov	r0, r4
   bb2a4:	f7ff f869 	bl	ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bb2a8:	1d30      	adds	r0, r6, #4
   bb2aa:	f7ff f87a 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb2ae:	3e08      	subs	r6, #8
   bb2b0:	3c08      	subs	r4, #8
   bb2b2:	e7f2      	b.n	bb29a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb2b4:	d00c      	beq.n	bb2d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb2b6:	42b5      	cmp	r5, r6
   bb2b8:	d00a      	beq.n	bb2d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb2ba:	b11c      	cbz	r4, bb2c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb2bc:	4629      	mov	r1, r5
   bb2be:	4620      	mov	r0, r4
   bb2c0:	f7ff f85b 	bl	ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb2c4:	1d28      	adds	r0, r5, #4
   bb2c6:	f7ff f86c 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb2ca:	3508      	adds	r5, #8
   bb2cc:	3408      	adds	r4, #8
   bb2ce:	e7f2      	b.n	bb2b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb2d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb2d2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb2d4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb2d6:	4605      	mov	r5, r0
        if (n > 0) {
   bb2d8:	dd11      	ble.n	bb2fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb2da:	00f0      	lsls	r0, r6, #3
   bb2dc:	f7fe f978 	bl	b95d0 <malloc>
            if (!d) {
   bb2e0:	4604      	mov	r4, r0
   bb2e2:	b158      	cbz	r0, bb2fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb2e4:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb2e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb2ec:	f7ff ffc7 	bl	bb27e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb2f0:	6828      	ldr	r0, [r5, #0]
   bb2f2:	f7fe f975 	bl	b95e0 <free>
        data_ = d;
   bb2f6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb2f8:	60ae      	str	r6, [r5, #8]
        return true;
   bb2fa:	2001      	movs	r0, #1
    }
   bb2fc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb2fe:	2400      	movs	r4, #0
   bb300:	e7f6      	b.n	bb2f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb302 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb306:	2300      	movs	r3, #0
   bb308:	e9c0 3300 	strd	r3, r3, [r0]
   bb30c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb30e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb310:	6849      	ldr	r1, [r1, #4]
   bb312:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb314:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb316:	dd13      	ble.n	bb340 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb318:	f7ff ffdb 	bl	bb2d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb31c:	b180      	cbz	r0, bb340 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb31e:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb322:	6827      	ldr	r7, [r4, #0]
   bb324:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb328:	45b0      	cmp	r8, r6
   bb32a:	d007      	beq.n	bb33c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb32c:	b11f      	cbz	r7, bb336 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb32e:	4631      	mov	r1, r6
   bb330:	4638      	mov	r0, r7
   bb332:	f7ff f822 	bl	ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bb336:	3608      	adds	r6, #8
   bb338:	3708      	adds	r7, #8
   bb33a:	e7f5      	b.n	bb328 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb33c:	686b      	ldr	r3, [r5, #4]
   bb33e:	6063      	str	r3, [r4, #4]
}
   bb340:	4620      	mov	r0, r4
   bb342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb346 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bb346:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb348:	460d      	mov	r5, r1
   bb34a:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb34c:	a801      	add	r0, sp, #4
   bb34e:	f7fe fadf 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bb352:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bb354:	4620      	mov	r0, r4
   bb356:	310c      	adds	r1, #12
   bb358:	f7ff ffd3 	bl	bb302 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb35c:	a801      	add	r0, sp, #4
   bb35e:	f7fe fae5 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb362:	4620      	mov	r0, r4
   bb364:	b003      	add	sp, #12
   bb366:	bd30      	pop	{r4, r5, pc}

000bb368 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb368:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bb36a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb36c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb36e:	4605      	mov	r5, r0
   bb370:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bb372:	b933      	cbnz	r3, bb382 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bb374:	4608      	mov	r0, r1
   bb376:	f7fe fa5f 	bl	b9838 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bb37a:	b910      	cbnz	r0, bb382 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bb37c:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bb37e:	2201      	movs	r2, #1
   bb380:	729a      	strb	r2, [r3, #10]
    return services();
   bb382:	4628      	mov	r0, r5
   bb384:	4621      	mov	r1, r4
   bb386:	f7ff ffde 	bl	bb346 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bb38a:	4628      	mov	r0, r5
   bb38c:	bd38      	pop	{r3, r4, r5, pc}

000bb38e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb38e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb390:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb392:	6845      	ldr	r5, [r0, #4]
   bb394:	4668      	mov	r0, sp
   bb396:	f7fe fff0 	bl	ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb39a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb39e:	4299      	cmp	r1, r3
   bb3a0:	da10      	bge.n	bb3c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb3a2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb3a4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb3a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb3aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb3ae:	4629      	mov	r1, r5
   bb3b0:	f105 0008 	add.w	r0, r5, #8
   bb3b4:	f7ff ff63 	bl	bb27e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb3b8:	b98d      	cbnz	r5, bb3de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb3ba:	6863      	ldr	r3, [r4, #4]
   bb3bc:	3301      	adds	r3, #1
   bb3be:	6063      	str	r3, [r4, #4]
    return true;
   bb3c0:	2601      	movs	r6, #1
   bb3c2:	e006      	b.n	bb3d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb3c4:	3101      	adds	r1, #1
   bb3c6:	4620      	mov	r0, r4
   bb3c8:	f7ff ff83 	bl	bb2d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb3cc:	4606      	mov	r6, r0
   bb3ce:	2800      	cmp	r0, #0
   bb3d0:	d1e7      	bne.n	bb3a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bb3d2:	a801      	add	r0, sp, #4
   bb3d4:	f7fe ffe5 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb3d8:	4630      	mov	r0, r6
   bb3da:	b002      	add	sp, #8
   bb3dc:	bd70      	pop	{r4, r5, r6, pc}
   bb3de:	4669      	mov	r1, sp
   bb3e0:	4628      	mov	r0, r5
   bb3e2:	f7fe ffca 	bl	ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb3e6:	e7e8      	b.n	bb3ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb3e8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bb3ec:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bb4a8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bb3f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bb4ac <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb3f4:	b093      	sub	sp, #76	; 0x4c
   bb3f6:	4605      	mov	r5, r0
   bb3f8:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bb3fa:	2700      	movs	r7, #0
   bb3fc:	682b      	ldr	r3, [r5, #0]
   bb3fe:	42bb      	cmp	r3, r7
   bb400:	d94e      	bls.n	bb4a0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bb402:	a803      	add	r0, sp, #12
   bb404:	f7fe fd9a 	bl	b9f3c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb408:	261c      	movs	r6, #28
   bb40a:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bb40c:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bb40e:	437e      	muls	r6, r7
   bb410:	4432      	add	r2, r6
   bb412:	f10d 0c14 	add.w	ip, sp, #20
   bb416:	1d13      	adds	r3, r2, #4
   bb418:	46e3      	mov	fp, ip
   bb41a:	3214      	adds	r2, #20
   bb41c:	6818      	ldr	r0, [r3, #0]
   bb41e:	6859      	ldr	r1, [r3, #4]
   bb420:	46e6      	mov	lr, ip
   bb422:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bb426:	3308      	adds	r3, #8
   bb428:	4293      	cmp	r3, r2
   bb42a:	46f4      	mov	ip, lr
   bb42c:	d1f6      	bne.n	bb41c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bb42e:	6818      	ldr	r0, [r3, #0]
   bb430:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bb434:	4659      	mov	r1, fp
   bb436:	a80a      	add	r0, sp, #40	; 0x28
   bb438:	f7fe fac0 	bl	b99bc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb43c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bb440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb446:	f8dc 3000 	ldr.w	r3, [ip]
   bb44a:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bb44c:	686b      	ldr	r3, [r5, #4]
   bb44e:	9a03      	ldr	r2, [sp, #12]
   bb450:	4433      	add	r3, r6
   bb452:	a903      	add	r1, sp, #12
   bb454:	8b1b      	ldrh	r3, [r3, #24]
   bb456:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bb458:	686b      	ldr	r3, [r5, #4]
   bb45a:	4433      	add	r3, r6
   bb45c:	8b5b      	ldrh	r3, [r3, #26]
   bb45e:	82d3      	strh	r3, [r2, #22]
        return services_;
   bb460:	f8d8 0000 	ldr.w	r0, [r8]
   bb464:	f100 040c 	add.w	r4, r0, #12
   bb468:	a80a      	add	r0, sp, #40	; 0x28
   bb46a:	f7fe ff86 	bl	ba37a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bb46e:	4620      	mov	r0, r4
   bb470:	a90a      	add	r1, sp, #40	; 0x28
   bb472:	f7ff ff8c 	bl	bb38e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bb476:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb478:	a80b      	add	r0, sp, #44	; 0x2c
   bb47a:	f7fe ff92 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb47e:	b954      	cbnz	r4, bb496 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bb480:	2320      	movs	r3, #32
   bb482:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bb486:	f8cd 9000 	str.w	r9, [sp]
   bb48a:	4623      	mov	r3, r4
   bb48c:	aa0a      	add	r2, sp, #40	; 0x28
   bb48e:	4651      	mov	r1, sl
   bb490:	2032      	movs	r0, #50	; 0x32
   bb492:	f7fd ffc1 	bl	b9418 <log_message>
   bb496:	a804      	add	r0, sp, #16
   bb498:	f7fe ff83 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb49c:	3701      	adds	r7, #1
   bb49e:	e7ad      	b.n	bb3fc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bb4a0:	b013      	add	sp, #76	; 0x4c
   bb4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb4a6:	bf00      	nop
   bb4a8:	000c15ad 	.word	0x000c15ad
   bb4ac:	000c14af 	.word	0x000c14af

000bb4b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb4b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb4b4:	4604      	mov	r4, r0
   bb4b6:	460d      	mov	r5, r1
   bb4b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb4ba:	d914      	bls.n	bb4e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb4bc:	4290      	cmp	r0, r2
   bb4be:	d213      	bcs.n	bb4e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb4c0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb4c4:	1a75      	subs	r5, r6, r1
   bb4c6:	f1a1 0708 	sub.w	r7, r1, #8
   bb4ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb4cc:	42b7      	cmp	r7, r6
   bb4ce:	d018      	beq.n	bb502 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb4d0:	b11c      	cbz	r4, bb4da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb4d2:	4631      	mov	r1, r6
   bb4d4:	4620      	mov	r0, r4
   bb4d6:	f7fe ff42 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb4da:	1d30      	adds	r0, r6, #4
   bb4dc:	f7fe ff61 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb4e0:	3e08      	subs	r6, #8
   bb4e2:	3c08      	subs	r4, #8
   bb4e4:	e7f2      	b.n	bb4cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb4e6:	d00c      	beq.n	bb502 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb4e8:	42b5      	cmp	r5, r6
   bb4ea:	d00a      	beq.n	bb502 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb4ec:	b11c      	cbz	r4, bb4f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb4ee:	4629      	mov	r1, r5
   bb4f0:	4620      	mov	r0, r4
   bb4f2:	f7fe ff34 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb4f6:	1d28      	adds	r0, r5, #4
   bb4f8:	f7fe ff53 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb4fc:	3508      	adds	r5, #8
   bb4fe:	3408      	adds	r4, #8
   bb500:	e7f2      	b.n	bb4e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb504 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb504:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb506:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb508:	4605      	mov	r5, r0
        if (n > 0) {
   bb50a:	dd11      	ble.n	bb530 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb50c:	00f0      	lsls	r0, r6, #3
   bb50e:	f7fe f85f 	bl	b95d0 <malloc>
            if (!d) {
   bb512:	4604      	mov	r4, r0
   bb514:	b158      	cbz	r0, bb52e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb516:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb51a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb51e:	f7ff ffc7 	bl	bb4b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb522:	6828      	ldr	r0, [r5, #0]
   bb524:	f7fe f85c 	bl	b95e0 <free>
        data_ = d;
   bb528:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb52a:	60ae      	str	r6, [r5, #8]
        return true;
   bb52c:	2001      	movs	r0, #1
    }
   bb52e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb530:	2400      	movs	r4, #0
   bb532:	e7f6      	b.n	bb522 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb534 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb538:	2300      	movs	r3, #0
   bb53a:	e9c0 3300 	strd	r3, r3, [r0]
   bb53e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb540:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb542:	6849      	ldr	r1, [r1, #4]
   bb544:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb546:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb548:	dd13      	ble.n	bb572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb54a:	f7ff ffdb 	bl	bb504 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb54e:	b180      	cbz	r0, bb572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb550:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb554:	6827      	ldr	r7, [r4, #0]
   bb556:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb55a:	45b0      	cmp	r8, r6
   bb55c:	d007      	beq.n	bb56e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb55e:	b11f      	cbz	r7, bb568 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb560:	4631      	mov	r1, r6
   bb562:	4638      	mov	r0, r7
   bb564:	f7fe fefb 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bb568:	3608      	adds	r6, #8
   bb56a:	3708      	adds	r7, #8
   bb56c:	e7f5      	b.n	bb55a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb56e:	686b      	ldr	r3, [r5, #4]
   bb570:	6063      	str	r3, [r4, #4]
}
   bb572:	4620      	mov	r0, r4
   bb574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb578 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bb578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb57a:	460d      	mov	r5, r1
   bb57c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb57e:	a801      	add	r0, sp, #4
   bb580:	f7fe f9c6 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bb584:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bb586:	4620      	mov	r0, r4
   bb588:	3118      	adds	r1, #24
   bb58a:	f7ff ffd3 	bl	bb534 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb58e:	a801      	add	r0, sp, #4
   bb590:	f7fe f9cc 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb594:	4620      	mov	r0, r4
   bb596:	b003      	add	sp, #12
   bb598:	bd30      	pop	{r4, r5, pc}

000bb59a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb59a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb59c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb59e:	6845      	ldr	r5, [r0, #4]
   bb5a0:	4668      	mov	r0, sp
   bb5a2:	f7fe fedc 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb5a6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb5aa:	4299      	cmp	r1, r3
   bb5ac:	da10      	bge.n	bb5d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb5ae:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb5b0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb5b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb5b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb5ba:	4629      	mov	r1, r5
   bb5bc:	f105 0008 	add.w	r0, r5, #8
   bb5c0:	f7ff ff76 	bl	bb4b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb5c4:	b98d      	cbnz	r5, bb5ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb5c6:	6863      	ldr	r3, [r4, #4]
   bb5c8:	3301      	adds	r3, #1
   bb5ca:	6063      	str	r3, [r4, #4]
    return true;
   bb5cc:	2601      	movs	r6, #1
   bb5ce:	e006      	b.n	bb5de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb5d0:	3101      	adds	r1, #1
   bb5d2:	4620      	mov	r0, r4
   bb5d4:	f7ff ff96 	bl	bb504 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb5d8:	4606      	mov	r6, r0
   bb5da:	2800      	cmp	r0, #0
   bb5dc:	d1e7      	bne.n	bb5ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb5de:	a801      	add	r0, sp, #4
   bb5e0:	f7fe fedf 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb5e4:	4630      	mov	r0, r6
   bb5e6:	b002      	add	sp, #8
   bb5e8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb5ea:	4669      	mov	r1, sp
   bb5ec:	4628      	mov	r0, r5
   bb5ee:	f7fe feb6 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb5f2:	e7e8      	b.n	bb5c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb5f4 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb5f6:	b085      	sub	sp, #20
   bb5f8:	4605      	mov	r5, r0
    WiringBleLock lk;
   bb5fa:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb5fc:	460c      	mov	r4, r1
   bb5fe:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb600:	f7fe f986 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bb604:	2300      	movs	r3, #0
   bb606:	e9c5 3300 	strd	r3, r3, [r5]
   bb60a:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bb60c:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb60e:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bb612:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bb616:	42b4      	cmp	r4, r6
   bb618:	d011      	beq.n	bb63e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bb61a:	6838      	ldr	r0, [r7, #0]
   bb61c:	4621      	mov	r1, r4
   bb61e:	f7fe fba7 	bl	b9d70 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bb622:	b150      	cbz	r0, bb63a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bb624:	4621      	mov	r1, r4
   bb626:	a802      	add	r0, sp, #8
   bb628:	f7fe fe99 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb62c:	a902      	add	r1, sp, #8
   bb62e:	4628      	mov	r0, r5
   bb630:	f7ff ffb3 	bl	bb59a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bb634:	a803      	add	r0, sp, #12
   bb636:	f7fe feb4 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bb63a:	3408      	adds	r4, #8
   bb63c:	e7eb      	b.n	bb616 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bb63e:	a801      	add	r0, sp, #4
   bb640:	f7fe f974 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb644:	4628      	mov	r0, r5
   bb646:	b005      	add	sp, #20
   bb648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb64c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bb650:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb652:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb654:	b091      	sub	sp, #68	; 0x44
   bb656:	4606      	mov	r6, r0
   bb658:	460f      	mov	r7, r1
   bb65a:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bb65c:	b933      	cbnz	r3, bb66c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bb65e:	e9c0 3300 	strd	r3, r3, [r0]
   bb662:	6083      	str	r3, [r0, #8]
}
   bb664:	4630      	mov	r0, r6
   bb666:	b011      	add	sp, #68	; 0x44
   bb668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bb66c:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bb66e:	7e0d      	ldrb	r5, [r1, #24]
   bb670:	2d00      	cmp	r5, #0
   bb672:	d158      	bne.n	bb726 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bb674:	2320      	movs	r3, #32
   bb676:	462a      	mov	r2, r5
   bb678:	a803      	add	r0, sp, #12
   bb67a:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bb67e:	f7fe fae4 	bl	b9c4a <_ZNK8particle7BleUuid8toStringEb>
   bb682:	9b03      	ldr	r3, [sp, #12]
   bb684:	9301      	str	r3, [sp, #4]
   bb686:	4b2b      	ldr	r3, [pc, #172]	; (bb734 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bb688:	492b      	ldr	r1, [pc, #172]	; (bb738 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bb68a:	9300      	str	r3, [sp, #0]
   bb68c:	aa08      	add	r2, sp, #32
   bb68e:	462b      	mov	r3, r5
   bb690:	2001      	movs	r0, #1
   bb692:	f7fd fec1 	bl	b9418 <log_message>
   bb696:	a803      	add	r0, sp, #12
   bb698:	f001 f9b4 	bl	bca04 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bb69c:	231c      	movs	r3, #28
   bb69e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bb6a2:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bb6a6:	8a9a      	ldrh	r2, [r3, #20]
   bb6a8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bb6ac:	8adb      	ldrh	r3, [r3, #22]
   bb6ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bb6b2:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bb6b4:	4a21      	ldr	r2, [pc, #132]	; (bb73c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bb6b6:	8818      	ldrh	r0, [r3, #0]
   bb6b8:	9500      	str	r5, [sp, #0]
   bb6ba:	a908      	add	r1, sp, #32
   bb6bc:	f7fd fc40 	bl	b8f40 <hal_ble_gatt_client_discover_characteristics>
   bb6c0:	2800      	cmp	r0, #0
   bb6c2:	db30      	blt.n	bb726 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bb6c4:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb6c6:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb6ca:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bb6ce:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb6d0:	f1a4 0308 	sub.w	r3, r4, #8
   bb6d4:	4599      	cmp	r9, r3
   bb6d6:	d022      	beq.n	bb71e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bb6d8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb6dc:	89db      	ldrh	r3, [r3, #14]
   bb6de:	2b00      	cmp	r3, #0
   bb6e0:	d0f5      	beq.n	bb6ce <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bb6e2:	2210      	movs	r2, #16
   bb6e4:	2100      	movs	r1, #0
   bb6e6:	eb0d 0002 	add.w	r0, sp, r2
   bb6ea:	9503      	str	r5, [sp, #12]
   bb6ec:	f002 fccf 	bl	be08e <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bb6f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb6f4:	89d9      	ldrh	r1, [r3, #14]
   bb6f6:	683b      	ldr	r3, [r7, #0]
   bb6f8:	aa03      	add	r2, sp, #12
   bb6fa:	8818      	ldrh	r0, [r3, #0]
   bb6fc:	9500      	str	r5, [sp, #0]
   bb6fe:	2313      	movs	r3, #19
   bb700:	f7fd fc3c 	bl	b8f7c <hal_ble_gatt_client_read>
                if (len > 0) {
   bb704:	2800      	cmp	r0, #0
   bb706:	d0e2      	beq.n	bb6ce <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bb708:	ab10      	add	r3, sp, #64	; 0x40
   bb70a:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bb70c:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bb70e:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bb712:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bb716:	303c      	adds	r0, #60	; 0x3c
   bb718:	f001 fa15 	bl	bcb46 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb71c:	e7d7      	b.n	bb6ce <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bb71e:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bb722:	2201      	movs	r2, #1
   bb724:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bb726:	4642      	mov	r2, r8
   bb728:	4639      	mov	r1, r7
   bb72a:	4630      	mov	r0, r6
   bb72c:	f7ff ff62 	bl	bb5f4 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bb730:	e798      	b.n	bb664 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bb732:	bf00      	nop
   bb734:	000c15d2 	.word	0x000c15d2
   bb738:	000c14af 	.word	0x000c14af
   bb73c:	000bb8e5 	.word	0x000bb8e5

000bb740 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb740:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bb742:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb744:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb746:	b085      	sub	sp, #20
   bb748:	4606      	mov	r6, r0
   bb74a:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bb74c:	b92b      	cbnz	r3, bb75a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bb74e:	a801      	add	r0, sp, #4
   bb750:	f7ff fe0a 	bl	bb368 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bb754:	a801      	add	r0, sp, #4
   bb756:	f7fe fe33 	bl	ba3c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bb75a:	682b      	ldr	r3, [r5, #0]
   bb75c:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bb760:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bb764:	42bc      	cmp	r4, r7
   bb766:	d009      	beq.n	bb77c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bb768:	4622      	mov	r2, r4
   bb76a:	4629      	mov	r1, r5
   bb76c:	a801      	add	r0, sp, #4
   bb76e:	f7ff ff6d 	bl	bb64c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bb772:	a801      	add	r0, sp, #4
   bb774:	f7fe fe36 	bl	ba3e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bb778:	3408      	adds	r4, #8
   bb77a:	e7f3      	b.n	bb764 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bb77c:	4630      	mov	r0, r6
   bb77e:	4629      	mov	r1, r5
   bb780:	f7ff fefa 	bl	bb578 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bb784:	4630      	mov	r0, r6
   bb786:	b005      	add	sp, #20
   bb788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb78c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb78c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb790:	4605      	mov	r5, r0
   bb792:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bb794:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bb796:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb798:	460f      	mov	r7, r1
    return address_;
   bb79a:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb79c:	4698      	mov	r8, r3
    return address_;
   bb79e:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bb7a0:	4b41      	ldr	r3, [pc, #260]	; (bb8a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bb7a2:	9304      	str	r3, [sp, #16]
    return address_;
   bb7a4:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bb7a6:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bb7a8:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bb7ac:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bb7b0:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bb7b4:	f7fe fc8e 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb7b8:	4b3c      	ldr	r3, [pc, #240]	; (bb8ac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bb7ba:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb7bc:	f7fe fc8a 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb7c0:	6829      	ldr	r1, [r5, #0]
   bb7c2:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb7c4:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb7c6:	464a      	mov	r2, r9
   bb7c8:	a804      	add	r0, sp, #16
   bb7ca:	f7fd fbe1 	bl	b8f90 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bb7ce:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bb7d0:	4604      	mov	r4, r0
   bb7d2:	b138      	cbz	r0, bb7e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bb7d4:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb7d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb7da:	801a      	strh	r2, [r3, #0]
}
   bb7dc:	4620      	mov	r0, r4
   bb7de:	b013      	add	sp, #76	; 0x4c
   bb7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bb7e4:	4639      	mov	r1, r7
   bb7e6:	4628      	mov	r0, r5
   bb7e8:	f7fe fbf8 	bl	b9fdc <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bb7ec:	a803      	add	r0, sp, #12
   bb7ee:	f7fe f88f 	bl	b9910 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb7f2:	f7fe fc6f 	bl	ba0d4 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bb7f6:	6807      	ldr	r7, [r0, #0]
   bb7f8:	4629      	mov	r1, r5
   bb7fa:	3718      	adds	r7, #24
   bb7fc:	4630      	mov	r0, r6
   bb7fe:	f7fe fdc6 	bl	ba38e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb802:	4631      	mov	r1, r6
   bb804:	4638      	mov	r0, r7
   bb806:	f7ff f92b 	bl	baa60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb80a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bb80c:	a80b      	add	r0, sp, #44	; 0x2c
   bb80e:	f7fe fdc8 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb812:	f04f 0920 	mov.w	r9, #32
   bb816:	bb1f      	cbnz	r7, bb860 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bb818:	4632      	mov	r2, r6
   bb81a:	4b25      	ldr	r3, [pc, #148]	; (bb8b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bb81c:	4e25      	ldr	r6, [pc, #148]	; (bb8b4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bb81e:	4926      	ldr	r1, [pc, #152]	; (bb8b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb820:	9300      	str	r3, [sp, #0]
   bb822:	2032      	movs	r0, #50	; 0x32
   bb824:	4623      	mov	r3, r4
   bb826:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb82a:	f7fd fdf5 	bl	b9418 <log_message>
   bb82e:	6830      	ldr	r0, [r6, #0]
   bb830:	f7fd fc3a 	bl	b90a8 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb834:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bb836:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb83a:	4621      	mov	r1, r4
   bb83c:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb83e:	4c1f      	ldr	r4, [pc, #124]	; (bb8bc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb840:	f7fd fb60 	bl	b8f04 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb844:	6830      	ldr	r0, [r6, #0]
   bb846:	f7fd fc27 	bl	b9098 <os_mutex_recursive_lock>
        locked_ = true;
   bb84a:	2301      	movs	r3, #1
   bb84c:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bb850:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb852:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb856:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb858:	a803      	add	r0, sp, #12
   bb85a:	f7fe f867 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
   bb85e:	e7bd      	b.n	bb7dc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bb860:	a803      	add	r0, sp, #12
   bb862:	f7fe f863 	bl	b992c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bb866:	4b16      	ldr	r3, [pc, #88]	; (bb8c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bb868:	9300      	str	r3, [sp, #0]
   bb86a:	4913      	ldr	r1, [pc, #76]	; (bb8b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb86c:	4623      	mov	r3, r4
   bb86e:	4632      	mov	r2, r6
   bb870:	2001      	movs	r0, #1
   bb872:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb876:	f7fd fdcf 	bl	b9418 <log_message>
    if (automatic) {
   bb87a:	f1b8 0f00 	cmp.w	r8, #0
   bb87e:	d0ad      	beq.n	bb7dc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bb880:	4629      	mov	r1, r5
   bb882:	4630      	mov	r0, r6
   bb884:	f7ff ff5c 	bl	bb740 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bb888:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bb88c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bb890:	42bd      	cmp	r5, r7
   bb892:	d005      	beq.n	bb8a0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bb894:	4628      	mov	r0, r5
   bb896:	2101      	movs	r1, #1
   bb898:	f7fe fb16 	bl	b9ec8 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bb89c:	3508      	adds	r5, #8
   bb89e:	e7f7      	b.n	bb890 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bb8a0:	4630      	mov	r0, r6
   bb8a2:	f7fe fd9f 	bl	ba3e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb8a6:	e799      	b.n	bb7dc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bb8a8:	00180003 	.word	0x00180003
   bb8ac:	000bab19 	.word	0x000bab19
   bb8b0:	000c1604 	.word	0x000c1604
   bb8b4:	2003e658 	.word	0x2003e658
   bb8b8:	000c14af 	.word	0x000c14af
   bb8bc:	fffffefc 	.word	0xfffffefc
   bb8c0:	000c1620 	.word	0x000c1620

000bb8c4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bb8c4:	b513      	push	{r0, r1, r4, lr}
   bb8c6:	4604      	mov	r4, r0
   bb8c8:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bb8cc:	f7fe fb52 	bl	b9f74 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bb8d0:	9b00      	ldr	r3, [sp, #0]
   bb8d2:	9901      	ldr	r1, [sp, #4]
   bb8d4:	2200      	movs	r2, #0
   bb8d6:	4620      	mov	r0, r4
   bb8d8:	f7ff ff58 	bl	bb78c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bb8dc:	4620      	mov	r0, r4
   bb8de:	b002      	add	sp, #8
   bb8e0:	bd10      	pop	{r4, pc}
	...

000bb8e4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bb8e8:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb8ea:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bb8ec:	2600      	movs	r6, #0
   bb8ee:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bb8f2:	4b66      	ldr	r3, [pc, #408]	; (bba8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bb8f4:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb8f6:	4605      	mov	r5, r0
   bb8f8:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bb8fa:	4633      	mov	r3, r6
   bb8fc:	4964      	ldr	r1, [pc, #400]	; (bba90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bb8fe:	f8df 9194 	ldr.w	r9, [pc, #404]	; bba94 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bb902:	f8df 818c 	ldr.w	r8, [pc, #396]	; bba90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb906:	f8df a190 	ldr.w	sl, [pc, #400]	; bba98 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bb90a:	aa0c      	add	r2, sp, #48	; 0x30
   bb90c:	2001      	movs	r0, #1
   bb90e:	f7fd fd83 	bl	b9418 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bb912:	682b      	ldr	r3, [r5, #0]
   bb914:	42b3      	cmp	r3, r6
   bb916:	f240 80b5 	bls.w	bba84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bb91a:	a803      	add	r0, sp, #12
   bb91c:	f7fe fa4e 	bl	b9dbc <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bb920:	a805      	add	r0, sp, #20
   bb922:	f7fe fb0b 	bl	b9f3c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb926:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bb92a:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bb92c:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bb92e:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bb932:	445b      	add	r3, fp
        this->size = halHandles.size;
   bb934:	8bd9      	ldrh	r1, [r3, #30]
   bb936:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bb938:	8c19      	ldrh	r1, [r3, #32]
   bb93a:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bb93c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bb93e:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bb940:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bb942:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bb944:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bb946:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bb948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bb94a:	8253      	strh	r3, [r2, #18]
   bb94c:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bb950:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bb954:	429a      	cmp	r2, r3
   bb956:	d07d      	beq.n	bba54 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bb958:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bb95a:	8ac4      	ldrh	r4, [r0, #22]
   bb95c:	428c      	cmp	r4, r1
   bb95e:	d377      	bcc.n	bba50 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bb960:	8a84      	ldrh	r4, [r0, #20]
   bb962:	428c      	cmp	r4, r1
   bb964:	d874      	bhi.n	bba50 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb966:	6859      	ldr	r1, [r3, #4]
   bb968:	9005      	str	r0, [sp, #20]
   bb96a:	a806      	add	r0, sp, #24
   bb96c:	f7fd ffaa 	bl	b98c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bb970:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bb974:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bb978:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb97c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bb980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb982:	f8dc 3000 	ldr.w	r3, [ip]
   bb986:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bb988:	892b      	ldrh	r3, [r5, #8]
   bb98a:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bb98e:	686b      	ldr	r3, [r5, #4]
   bb990:	9c03      	ldr	r4, [sp, #12]
   bb992:	445b      	add	r3, fp
   bb994:	7e5b      	ldrb	r3, [r3, #25]
   bb996:	f013 0f02 	tst.w	r3, #2
   bb99a:	d16e      	bne.n	bba7a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bb99c:	686b      	ldr	r3, [r5, #4]
   bb99e:	445b      	add	r3, fp
   bb9a0:	7e5b      	ldrb	r3, [r3, #25]
   bb9a2:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bb9a4:	bf42      	ittt	mi
   bb9a6:	7923      	ldrbmi	r3, [r4, #4]
   bb9a8:	f043 0304 	orrmi.w	r3, r3, #4
   bb9ac:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bb9ae:	686b      	ldr	r3, [r5, #4]
   bb9b0:	445b      	add	r3, fp
   bb9b2:	7e5b      	ldrb	r3, [r3, #25]
   bb9b4:	0719      	lsls	r1, r3, #28
   bb9b6:	bf42      	ittt	mi
   bb9b8:	7923      	ldrbmi	r3, [r4, #4]
   bb9ba:	f043 0308 	orrmi.w	r3, r3, #8
   bb9be:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bb9c0:	686b      	ldr	r3, [r5, #4]
   bb9c2:	445b      	add	r3, fp
   bb9c4:	7e5b      	ldrb	r3, [r3, #25]
   bb9c6:	06da      	lsls	r2, r3, #27
   bb9c8:	bf42      	ittt	mi
   bb9ca:	7923      	ldrbmi	r3, [r4, #4]
   bb9cc:	f043 0310 	orrmi.w	r3, r3, #16
   bb9d0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bb9d2:	686b      	ldr	r3, [r5, #4]
   bb9d4:	445b      	add	r3, fp
   bb9d6:	aa07      	add	r2, sp, #28
   bb9d8:	7e5b      	ldrb	r3, [r3, #25]
   bb9da:	069b      	lsls	r3, r3, #26
   bb9dc:	bf42      	ittt	mi
   bb9de:	7923      	ldrbmi	r3, [r4, #4]
   bb9e0:	f043 0320 	orrmi.w	r3, r3, #32
   bb9e4:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bb9e6:	686b      	ldr	r3, [r5, #4]
   bb9e8:	449b      	add	fp, r3
   bb9ea:	f10b 0304 	add.w	r3, fp, #4
   bb9ee:	4696      	mov	lr, r2
   bb9f0:	f10b 0b14 	add.w	fp, fp, #20
   bb9f4:	6818      	ldr	r0, [r3, #0]
   bb9f6:	6859      	ldr	r1, [r3, #4]
   bb9f8:	4694      	mov	ip, r2
   bb9fa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bb9fe:	3308      	adds	r3, #8
   bba00:	455b      	cmp	r3, fp
   bba02:	4662      	mov	r2, ip
   bba04:	d1f6      	bne.n	bb9f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bba06:	6818      	ldr	r0, [r3, #0]
   bba08:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bba0c:	4671      	mov	r1, lr
   bba0e:	a80c      	add	r0, sp, #48	; 0x30
   bba10:	f7fd ffd4 	bl	b99bc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bba14:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bba18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bba1c:	3414      	adds	r4, #20
   bba1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bba20:	f8dc 3000 	ldr.w	r3, [ip]
   bba24:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bba26:	a903      	add	r1, sp, #12
   bba28:	a80c      	add	r0, sp, #48	; 0x30
   bba2a:	f7fe fc98 	bl	ba35e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bba2e:	a90c      	add	r1, sp, #48	; 0x30
   bba30:	f107 0018 	add.w	r0, r7, #24
   bba34:	f7ff fdb1 	bl	bb59a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bba38:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bba3a:	a80d      	add	r0, sp, #52	; 0x34
   bba3c:	f7fe fcb1 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bba40:	b99c      	cbnz	r4, bba6a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bba42:	2320      	movs	r3, #32
   bba44:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bba48:	f8cd a000 	str.w	sl, [sp]
   bba4c:	4623      	mov	r3, r4
   bba4e:	e007      	b.n	bba60 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bba50:	3308      	adds	r3, #8
   bba52:	e77f      	b.n	bb954 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bba54:	2420      	movs	r4, #32
   bba56:	2300      	movs	r3, #0
   bba58:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bba5c:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bba60:	aa0c      	add	r2, sp, #48	; 0x30
   bba62:	4641      	mov	r1, r8
   bba64:	2032      	movs	r0, #50	; 0x32
   bba66:	f7fd fcd7 	bl	b9418 <log_message>
   bba6a:	a806      	add	r0, sp, #24
   bba6c:	f7fe fc99 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bba70:	a804      	add	r0, sp, #16
   bba72:	f7fe fc96 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bba76:	3601      	adds	r6, #1
   bba78:	e74b      	b.n	bb912 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bba7a:	7923      	ldrb	r3, [r4, #4]
   bba7c:	f043 0302 	orr.w	r3, r3, #2
   bba80:	7123      	strb	r3, [r4, #4]
   bba82:	e78b      	b.n	bb99c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bba84:	b015      	add	sp, #84	; 0x54
   bba86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bba8a:	bf00      	nop
   bba8c:	000c163d 	.word	0x000c163d
   bba90:	000c14af 	.word	0x000c14af
   bba94:	000c1658 	.word	0x000c1658
   bba98:	000c1687 	.word	0x000c1687

000bba9c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bba9c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bba9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbaa0:	4604      	mov	r4, r0
   bbaa2:	460d      	mov	r5, r1
   bbaa4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbaa6:	d914      	bls.n	bbad2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbaa8:	4290      	cmp	r0, r2
   bbaaa:	d213      	bcs.n	bbad4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbaac:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bbab0:	1a75      	subs	r5, r6, r1
   bbab2:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bbab6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbab8:	42b7      	cmp	r7, r6
   bbaba:	d018      	beq.n	bbaee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbabc:	b11c      	cbz	r4, bbac6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbabe:	4631      	mov	r1, r6
   bbac0:	4620      	mov	r0, r4
   bbac2:	f7fe feb5 	bl	ba830 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bbac6:	4630      	mov	r0, r6
   bbac8:	f7fe fb72 	bl	ba1b0 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bbacc:	3e24      	subs	r6, #36	; 0x24
   bbace:	3c24      	subs	r4, #36	; 0x24
   bbad0:	e7f2      	b.n	bbab8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbad2:	d00c      	beq.n	bbaee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbad4:	42b5      	cmp	r5, r6
   bbad6:	d00a      	beq.n	bbaee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbad8:	b11c      	cbz	r4, bbae2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbada:	4629      	mov	r1, r5
   bbadc:	4620      	mov	r0, r4
   bbade:	f7fe fea7 	bl	ba830 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bbae2:	4628      	mov	r0, r5
   bbae4:	f7fe fb64 	bl	ba1b0 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bbae8:	3524      	adds	r5, #36	; 0x24
   bbaea:	3424      	adds	r4, #36	; 0x24
   bbaec:	e7f2      	b.n	bbad4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbaf0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bbaf2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbaf4:	4605      	mov	r5, r0
        if (n > 0) {
   bbaf6:	dd13      	ble.n	bbb20 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bbaf8:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bbafa:	fb07 f006 	mul.w	r0, r7, r6
   bbafe:	f7fd fd67 	bl	b95d0 <malloc>
            if (!d) {
   bbb02:	4604      	mov	r4, r0
   bbb04:	b158      	cbz	r0, bbb1e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bbb06:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbb0a:	fb07 1202 	mla	r2, r7, r2, r1
   bbb0e:	f7ff ffc5 	bl	bba9c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbb12:	6828      	ldr	r0, [r5, #0]
   bbb14:	f7fd fd64 	bl	b95e0 <free>
        data_ = d;
   bbb18:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbb1a:	60ae      	str	r6, [r5, #8]
        return true;
   bbb1c:	2001      	movs	r0, #1
    }
   bbb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bbb20:	2400      	movs	r4, #0
   bbb22:	e7f6      	b.n	bbb12 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bbb24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bbb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbb28:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bbb2a:	ad01      	add	r5, sp, #4
   bbb2c:	4606      	mov	r6, r0
   bbb2e:	4628      	mov	r0, r5
   bbb30:	460c      	mov	r4, r1
   bbb32:	f7fd ff28 	bl	b9986 <_ZN8particle10BleAddressC1Ev>
   bbb36:	a803      	add	r0, sp, #12
   bbb38:	f7fe ff55 	bl	ba9e6 <_ZN8particle18BleAdvertisingDataC1Ev>
   bbb3c:	a806      	add	r0, sp, #24
   bbb3e:	f7fe ff52 	bl	ba9e6 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bbb42:	6930      	ldr	r0, [r6, #16]
   bbb44:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bbb46:	89f2      	ldrh	r2, [r6, #14]
   bbb48:	ab13      	add	r3, sp, #76	; 0x4c
   bbb4a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bbb4c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bbb50:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bbb52:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bbb54:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bbb58:	a806      	add	r0, sp, #24
   bbb5a:	f7fe feb8 	bl	ba8ce <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bbb5e:	89b2      	ldrh	r2, [r6, #12]
   bbb60:	6871      	ldr	r1, [r6, #4]
   bbb62:	a803      	add	r0, sp, #12
   bbb64:	f7fe feb3 	bl	ba8ce <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bbb68:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbb6c:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bbb6e:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbb70:	d003      	beq.n	bbb7a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bbb72:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbb76:	429a      	cmp	r2, r3
   bbb78:	db5c      	blt.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bbb7a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bbb7e:	2b7f      	cmp	r3, #127	; 0x7f
   bbb80:	d003      	beq.n	bbb8a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bbb82:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbb86:	429a      	cmp	r2, r3
   bbb88:	dc54      	bgt.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bbb8a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bbb8e:	4638      	mov	r0, r7
   bbb90:	f7fe fd16 	bl	ba5c0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bbb94:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bbb96:	2b00      	cmp	r3, #0
   bbb98:	dd52      	ble.n	bbc40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bbb9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bbb9c:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bbba0:	45b1      	cmp	r9, r6
   bbba2:	d050      	beq.n	bbc46 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bbba4:	4630      	mov	r0, r6
   bbba6:	4629      	mov	r1, r5
   bbba8:	f7fd fed9 	bl	b995e <_ZNK8particle10BleAddresseqERKS0_>
   bbbac:	3608      	adds	r6, #8
   bbbae:	4680      	mov	r8, r0
   bbbb0:	2800      	cmp	r0, #0
   bbbb2:	d0f5      	beq.n	bbba0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bbbb4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbbb6:	f7fd fd13 	bl	b95e0 <free>
        if (!delegator->filterByRssi(result) ||
   bbbba:	f1b8 0f00 	cmp.w	r8, #0
   bbbbe:	d039      	beq.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bbbc0:	4629      	mov	r1, r5
   bbbc2:	4620      	mov	r0, r4
   bbbc4:	f7fe fcbf 	bl	ba546 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bbbc8:	b3a0      	cbz	r0, bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bbbca:	4629      	mov	r1, r5
   bbbcc:	4620      	mov	r0, r4
   bbbce:	f7ff fa68 	bl	bb0a2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bbbd2:	4606      	mov	r6, r0
   bbbd4:	b370      	cbz	r0, bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bbbd6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bbbda:	4638      	mov	r0, r7
   bbbdc:	f7fe fd3b 	bl	ba656 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bbbe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbbe2:	2b00      	cmp	r3, #0
   bbbe4:	dd12      	ble.n	bbc0c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bbbe6:	a806      	add	r0, sp, #24
   bbbe8:	f7fe f895 	bl	b9d16 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bbbec:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bbbee:	a803      	add	r0, sp, #12
   bbbf0:	f7fe f891 	bl	b9d16 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bbbf4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bbbf8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bbbfc:	429a      	cmp	r2, r3
   bbbfe:	d025      	beq.n	bbc4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bbc00:	f833 1b02 	ldrh.w	r1, [r3], #2
   bbc04:	4588      	cmp	r8, r1
   bbc06:	d001      	beq.n	bbc0c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bbc08:	4288      	cmp	r0, r1
   bbc0a:	d1f7      	bne.n	bbbfc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bbc0c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbc0e:	f7fd fce7 	bl	b95e0 <free>
              !delegator->filterByServiceUUID(result) ||
   bbc12:	b17e      	cbz	r6, bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bbc14:	4629      	mov	r1, r5
   bbc16:	4620      	mov	r0, r4
   bbc18:	f7fe fd52 	bl	ba6c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bbc1c:	b150      	cbz	r0, bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bbc1e:	6a23      	ldr	r3, [r4, #32]
   bbc20:	b1b3      	cbz	r3, bbc50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bbc22:	6963      	ldr	r3, [r4, #20]
   bbc24:	9513      	str	r5, [sp, #76]	; 0x4c
   bbc26:	3301      	adds	r3, #1
   bbc28:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbc2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbc2c:	4639      	mov	r1, r7
   bbc2e:	f104 0018 	add.w	r0, r4, #24
   bbc32:	4798      	blx	r3
            return;
   bbc34:	4628      	mov	r0, r5
   bbc36:	f7fe fabb 	bl	ba1b0 <_ZN8particle13BleScanResultD1Ev>
    }
   bbc3a:	b01d      	add	sp, #116	; 0x74
   bbc3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bbc40:	f04f 0801 	mov.w	r8, #1
   bbc44:	e7b6      	b.n	bbbb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbc46:	f04f 0800 	mov.w	r8, #0
   bbc4a:	e7b3      	b.n	bbbb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbc4c:	2600      	movs	r6, #0
   bbc4e:	e7dd      	b.n	bbc0c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bbc50:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bbc54:	f1b8 0f00 	cmp.w	r8, #0
   bbc58:	d007      	beq.n	bbc6a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bbc5a:	6963      	ldr	r3, [r4, #20]
   bbc5c:	3301      	adds	r3, #1
   bbc5e:	6163      	str	r3, [r4, #20]
   bbc60:	4629      	mov	r1, r5
   bbc62:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bbc64:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bbc68:	e7e3      	b.n	bbc32 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bbc6a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bbc6e:	f1bc 0f00 	cmp.w	ip, #0
   bbc72:	d025      	beq.n	bbcc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bbc74:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbc76:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bbc78:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbc7a:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bbc7c:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbc7e:	d8d9      	bhi.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbc80:	2224      	movs	r2, #36	; 0x24
   bbc82:	4353      	muls	r3, r2
    address_ = addr.address_;
   bbc84:	462a      	mov	r2, r5
   bbc86:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbc88:	3b24      	subs	r3, #36	; 0x24
   bbc8a:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bbc8e:	f84c 0003 	str.w	r0, [ip, r3]
   bbc92:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bbc94:	f106 0008 	add.w	r0, r6, #8
   bbc98:	a903      	add	r1, sp, #12
   bbc9a:	f7fe fde0 	bl	ba85e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bbc9e:	a906      	add	r1, sp, #24
   bbca0:	f106 0014 	add.w	r0, r6, #20
   bbca4:	f7fe fddb 	bl	ba85e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bbca8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bbcac:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bbcb0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bbcb4:	429a      	cmp	r2, r3
   bbcb6:	d3bd      	bcc.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bbcb8:	4640      	mov	r0, r8
   bbcba:	f7fd f919 	bl	b8ef0 <hal_ble_gap_stop_scan>
   bbcbe:	e7b9      	b.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bbcc0:	e895 0003 	ldmia.w	r5, {r0, r1}
   bbcc4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bbcc8:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bbccc:	a903      	add	r1, sp, #12
   bbcce:	a80c      	add	r0, sp, #48	; 0x30
   bbcd0:	f7fe fd91 	bl	ba7f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bbcd4:	a906      	add	r1, sp, #24
   bbcd6:	a80f      	add	r0, sp, #60	; 0x3c
   bbcd8:	f7fe fd8d 	bl	ba7f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bbcdc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bbce0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bbce4:	4641      	mov	r1, r8
   bbce6:	4638      	mov	r0, r7
   bbce8:	6866      	ldr	r6, [r4, #4]
   bbcea:	f7fe fda1 	bl	ba830 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbcee:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbcf2:	4299      	cmp	r1, r3
   bbcf4:	da10      	bge.n	bbd18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bbcf6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbcf8:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bbcfa:	2224      	movs	r2, #36	; 0x24
   bbcfc:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bbd00:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bbd04:	fb02 3201 	mla	r2, r2, r1, r3
   bbd08:	4631      	mov	r1, r6
   bbd0a:	f7ff fec7 	bl	bba9c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbd0e:	b986      	cbnz	r6, bbd32 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bbd10:	6863      	ldr	r3, [r4, #4]
   bbd12:	3301      	adds	r3, #1
   bbd14:	6063      	str	r3, [r4, #4]
    return true;
   bbd16:	e005      	b.n	bbd24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbd18:	3101      	adds	r1, #1
   bbd1a:	4620      	mov	r0, r4
   bbd1c:	f7ff fee8 	bl	bbaf0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbd20:	2800      	cmp	r0, #0
   bbd22:	d1e8      	bne.n	bbcf6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bbd24:	4638      	mov	r0, r7
   bbd26:	f7fe fa43 	bl	ba1b0 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bbd2a:	4640      	mov	r0, r8
   bbd2c:	f7fe fa40 	bl	ba1b0 <_ZN8particle13BleScanResultD1Ev>
   bbd30:	e780      	b.n	bbc34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bbd32:	4639      	mov	r1, r7
   bbd34:	4630      	mov	r0, r6
   bbd36:	f7fe fd7b 	bl	ba830 <_ZN8particle13BleScanResultC1EOS0_>
   bbd3a:	e7e9      	b.n	bbd10 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bbd3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bbd3c:	4802      	ldr	r0, [pc, #8]	; (bbd48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bbd3e:	2300      	movs	r3, #0
   bbd40:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bbd42:	f7fd b9a1 	b.w	b9088 <os_mutex_recursive_create>
   bbd46:	bf00      	nop
   bbd48:	2003e658 	.word	0x2003e658

000bbd4c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bbd4c:	2200      	movs	r2, #0
   bbd4e:	6840      	ldr	r0, [r0, #4]
   bbd50:	4611      	mov	r1, r2
   bbd52:	f7fd bbf5 	b.w	b9540 <network_ready>

000bbd56 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bbd56:	2200      	movs	r2, #0
   bbd58:	6840      	ldr	r0, [r0, #4]
   bbd5a:	4611      	mov	r1, r2
   bbd5c:	f7fd bc10 	b.w	b9580 <network_listening>

000bbd60 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbd60:	2200      	movs	r2, #0
   bbd62:	6840      	ldr	r0, [r0, #4]
   bbd64:	4611      	mov	r1, r2
   bbd66:	f7fd bc1b 	b.w	b95a0 <network_get_listen_timeout>

000bbd6a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbd6a:	6840      	ldr	r0, [r0, #4]
   bbd6c:	2200      	movs	r2, #0
   bbd6e:	f7fd bc0f 	b.w	b9590 <network_set_listen_timeout>

000bbd72 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbd72:	6840      	ldr	r0, [r0, #4]
   bbd74:	2200      	movs	r2, #0
   bbd76:	f081 0101 	eor.w	r1, r1, #1
   bbd7a:	f7fd bbf9 	b.w	b9570 <network_listen>

000bbd7e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbd7e:	2300      	movs	r3, #0
   bbd80:	6840      	ldr	r0, [r0, #4]
   bbd82:	461a      	mov	r2, r3
   bbd84:	4619      	mov	r1, r3
   bbd86:	f7fd bbeb 	b.w	b9560 <network_off>

000bbd8a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbd8a:	2300      	movs	r3, #0
   bbd8c:	6840      	ldr	r0, [r0, #4]
   bbd8e:	461a      	mov	r2, r3
   bbd90:	4619      	mov	r1, r3
   bbd92:	f7fd bbdd 	b.w	b9550 <network_on>

000bbd96 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbd96:	2200      	movs	r2, #0
   bbd98:	6840      	ldr	r0, [r0, #4]
   bbd9a:	4611      	mov	r1, r2
   bbd9c:	f7fd bbc0 	b.w	b9520 <network_connecting>

000bbda0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbda0:	6840      	ldr	r0, [r0, #4]
   bbda2:	2200      	movs	r2, #0
   bbda4:	2102      	movs	r1, #2
   bbda6:	f7fd bbc3 	b.w	b9530 <network_disconnect>

000bbdaa <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbdaa:	2300      	movs	r3, #0
   bbdac:	6840      	ldr	r0, [r0, #4]
   bbdae:	461a      	mov	r2, r3
   bbdb0:	f7fd bbae 	b.w	b9510 <network_connect>

000bbdb4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bbdb4:	4b08      	ldr	r3, [pc, #32]	; (bbdd8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bbdb6:	b510      	push	{r4, lr}
   bbdb8:	2428      	movs	r4, #40	; 0x28
   bbdba:	4622      	mov	r2, r4
   bbdbc:	4618      	mov	r0, r3
   bbdbe:	2100      	movs	r1, #0
   bbdc0:	f002 f965 	bl	be08e <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bbdc4:	4b05      	ldr	r3, [pc, #20]	; (bbddc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bbdc6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bbdc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbdcc:	6042      	str	r2, [r0, #4]
   bbdce:	2204      	movs	r2, #4
   bbdd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bbdd2:	4a03      	ldr	r2, [pc, #12]	; (bbde0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bbdd4:	601a      	str	r2, [r3, #0]
   bbdd6:	bd10      	pop	{r4, pc}
   bbdd8:	2003e668 	.word	0x2003e668
   bbddc:	2003e660 	.word	0x2003e660
   bbde0:	000c1730 	.word	0x000c1730

000bbde4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbde4:	4770      	bx	lr

000bbde6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbde6:	2000      	movs	r0, #0
   bbde8:	4770      	bx	lr

000bbdea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbdea:	b510      	push	{r4, lr}
   bbdec:	2110      	movs	r1, #16
   bbdee:	4604      	mov	r4, r0
   bbdf0:	f7f8 f955 	bl	b409e <_ZdlPvj>
   bbdf4:	4620      	mov	r0, r4
   bbdf6:	bd10      	pop	{r4, pc}

000bbdf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbdf8:	b508      	push	{r3, lr}
      { delete this; }
   bbdfa:	f7ff fff6 	bl	bbdea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbdfe:	bd08      	pop	{r3, pc}

000bbe00 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbe00:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbe02:	2200      	movs	r2, #0
   bbe04:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbe08:	6002      	str	r2, [r0, #0]
   bbe0a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbe0c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe0e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbe10:	680c      	ldr	r4, [r1, #0]
   bbe12:	8085      	strh	r5, [r0, #4]
   bbe14:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe16:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbe18:	bd30      	pop	{r4, r5, pc}

000bbe1a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbe1a:	b510      	push	{r4, lr}
   bbe1c:	4604      	mov	r4, r0
    free((void*)msg_);
   bbe1e:	6800      	ldr	r0, [r0, #0]
   bbe20:	f7fd fbde 	bl	b95e0 <free>
}
   bbe24:	4620      	mov	r0, r4
   bbe26:	bd10      	pop	{r4, pc}

000bbe28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbe28:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbe2a:	68c4      	ldr	r4, [r0, #12]
   bbe2c:	b1f4      	cbz	r4, bbe6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bbe2e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbe30:	2b02      	cmp	r3, #2
   bbe32:	d103      	bne.n	bbe3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbe34:	f104 000c 	add.w	r0, r4, #12
   bbe38:	f7ff ffef 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbe3c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbe3e:	b135      	cbz	r5, bbe4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbe40:	4628      	mov	r0, r5
   bbe42:	f7f8 fa79 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bbe46:	2110      	movs	r1, #16
   bbe48:	4628      	mov	r0, r5
   bbe4a:	f7f8 f928 	bl	b409e <_ZdlPvj>
   bbe4e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbe50:	b135      	cbz	r5, bbe60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbe52:	4628      	mov	r0, r5
   bbe54:	f7f8 fa70 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bbe58:	2110      	movs	r1, #16
   bbe5a:	4628      	mov	r0, r5
   bbe5c:	f7f8 f91f 	bl	b409e <_ZdlPvj>
   bbe60:	4620      	mov	r0, r4
   bbe62:	2114      	movs	r1, #20
   bbe64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbe68:	f7f8 b919 	b.w	b409e <_ZdlPvj>
   bbe6c:	bd38      	pop	{r3, r4, r5, pc}

000bbe6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbe6e:	680b      	ldr	r3, [r1, #0]
   bbe70:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bbe72:	684b      	ldr	r3, [r1, #4]
   bbe74:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bbe76:	b113      	cbz	r3, bbe7e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bbe78:	685a      	ldr	r2, [r3, #4]
   bbe7a:	3201      	adds	r2, #1
   bbe7c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbe7e:	4770      	bx	lr

000bbe80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bbe80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbe82:	4604      	mov	r4, r0
   bbe84:	4668      	mov	r0, sp
   bbe86:	460d      	mov	r5, r1
   bbe88:	f7ff fff1 	bl	bbe6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbe8c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbe8e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbe90:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bbe92:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bbe94:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbe96:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bbe98:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bbe9a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bbe9c:	f7fe fa81 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bbea0:	b135      	cbz	r5, bbeb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bbea2:	1d28      	adds	r0, r5, #4
   bbea4:	f7fe fa7d 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbea8:	2108      	movs	r1, #8
   bbeaa:	4628      	mov	r0, r5
   bbeac:	f7f8 f8f7 	bl	b409e <_ZdlPvj>
        return p;
    }
   bbeb0:	4620      	mov	r0, r4
   bbeb2:	b003      	add	sp, #12
   bbeb4:	bd30      	pop	{r4, r5, pc}

000bbeb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bbeb6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbeb8:	b510      	push	{r4, lr}
      if (_M_empty())
   bbeba:	b90a      	cbnz	r2, bbec0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bbebc:	f001 fa16 	bl	bd2ec <_ZSt25__throw_bad_function_callv>
    }
   bbec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbec4:	68c3      	ldr	r3, [r0, #12]
   bbec6:	4718      	bx	r3

000bbec8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbec8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbeca:	6800      	ldr	r0, [r0, #0]
   bbecc:	f100 0110 	add.w	r1, r0, #16
   bbed0:	f7ff fff1 	bl	bbeb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bbed4:	bd08      	pop	{r3, pc}

000bbed6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bbed6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbed8:	b510      	push	{r4, lr}
      if (_M_empty())
   bbeda:	b90a      	cbnz	r2, bbee0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bbedc:	f001 fa06 	bl	bd2ec <_ZSt25__throw_bad_function_callv>
    }
   bbee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbee4:	68c3      	ldr	r3, [r0, #12]
   bbee6:	4718      	bx	r3

000bbee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbee8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbeea:	6800      	ldr	r0, [r0, #0]
   bbeec:	f100 0110 	add.w	r1, r0, #16
   bbef0:	f7ff fff1 	bl	bbed6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bbef4:	bd08      	pop	{r3, pc}
	...

000bbef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bbef8:	b538      	push	{r3, r4, r5, lr}
   bbefa:	2300      	movs	r3, #0
   bbefc:	4604      	mov	r4, r0
   bbefe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbf00:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bbf02:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbf04:	f7f8 f8c7 	bl	b4096 <_Znwj>
   bbf08:	b128      	cbz	r0, bbf16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bbf0a:	2301      	movs	r3, #1
   bbf0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bbf10:	4b02      	ldr	r3, [pc, #8]	; (bbf1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bbf12:	6003      	str	r3, [r0, #0]
   bbf14:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbf16:	6020      	str	r0, [r4, #0]
	}
   bbf18:	4620      	mov	r0, r4
   bbf1a:	bd38      	pop	{r3, r4, r5, pc}
   bbf1c:	000c176c 	.word	0x000c176c

000bbf20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bbf20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbf22:	2300      	movs	r3, #0
   bbf24:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbf26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbf28:	4604      	mov	r4, r0
   bbf2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbf2c:	b12b      	cbz	r3, bbf3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbf2e:	2202      	movs	r2, #2
   bbf30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbf32:	68eb      	ldr	r3, [r5, #12]
   bbf34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbf36:	68ab      	ldr	r3, [r5, #8]
   bbf38:	60a3      	str	r3, [r4, #8]
    }
   bbf3a:	4620      	mov	r0, r4
   bbf3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbf40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bbf40:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbf42:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bbf44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bbf46:	4668      	mov	r0, sp
   bbf48:	f7ff ff5a 	bl	bbe00 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbf4c:	f04f 0302 	mov.w	r3, #2
   bbf50:	e8d4 2f4f 	ldrexb	r2, [r4]
   bbf54:	2a00      	cmp	r2, #0
   bbf56:	d103      	bne.n	bbf60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bbf58:	e8c4 3f41 	strexb	r1, r3, [r4]
   bbf5c:	2900      	cmp	r1, #0
   bbf5e:	d1f7      	bne.n	bbf50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bbf60:	d125      	bne.n	bbfae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bbf62:	f104 050c 	add.w	r5, r4, #12
   bbf66:	4669      	mov	r1, sp
   bbf68:	4628      	mov	r0, r5
   bbf6a:	f7ff ff49 	bl	bbe00 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bbf6e:	f3bf 8f5b 	dmb	ish
   bbf72:	2301      	movs	r3, #1
   bbf74:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbf76:	2000      	movs	r0, #0
   bbf78:	f104 0308 	add.w	r3, r4, #8
   bbf7c:	f3bf 8f5b 	dmb	ish
   bbf80:	e853 6f00 	ldrex	r6, [r3]
   bbf84:	e843 0200 	strex	r2, r0, [r3]
   bbf88:	2a00      	cmp	r2, #0
   bbf8a:	d1f9      	bne.n	bbf80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bbf8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbf90:	b16e      	cbz	r6, bbfae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bbf92:	f7fd fa61 	bl	b9458 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbf96:	b178      	cbz	r0, bbfb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbf98:	4629      	mov	r1, r5
   bbf9a:	4630      	mov	r0, r6
   bbf9c:	f7ff ff8b 	bl	bbeb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bbfa0:	4630      	mov	r0, r6
   bbfa2:	f7f8 f9c9 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbfa6:	2110      	movs	r1, #16
   bbfa8:	4630      	mov	r0, r6
   bbfaa:	f7f8 f878 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bbfae:	4668      	mov	r0, sp
   bbfb0:	f7ff ff33 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
    }
   bbfb4:	b009      	add	sp, #36	; 0x24
   bbfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbfb8:	4631      	mov	r1, r6
   bbfba:	a802      	add	r0, sp, #8
   bbfbc:	f7ff ffb0 	bl	bbf20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbfc0:	68e0      	ldr	r0, [r4, #12]
   bbfc2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbfc6:	b108      	cbz	r0, bbfcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bbfc8:	f002 f8f8 	bl	be1bc <strdup>
        type_(type) {
   bbfcc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbfce:	2010      	movs	r0, #16
   bbfd0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bbfd4:	f7f8 f85f 	bl	b4096 <_Znwj>
   bbfd8:	4605      	mov	r5, r0
   bbfda:	b1e8      	cbz	r0, bc018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bbfdc:	2700      	movs	r7, #0
   bbfde:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbfe0:	2018      	movs	r0, #24
   bbfe2:	f7f8 f858 	bl	b4096 <_Znwj>
   bbfe6:	4604      	mov	r4, r0
   bbfe8:	b188      	cbz	r0, bc00e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bbfea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bbfec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbfee:	a802      	add	r0, sp, #8
   bbff0:	f7ff f8b0 	bl	bb154 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbff4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbff6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbff8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbffa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbffc:	9204      	str	r2, [sp, #16]
   bbffe:	a906      	add	r1, sp, #24
   bc000:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc002:	60e3      	str	r3, [r4, #12]
   bc004:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc008:	9205      	str	r2, [sp, #20]
   bc00a:	f7ff fef9 	bl	bbe00 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc00e:	4b08      	ldr	r3, [pc, #32]	; (bc030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc010:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc012:	4b08      	ldr	r3, [pc, #32]	; (bc034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc014:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc016:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc018:	a806      	add	r0, sp, #24
   bc01a:	f7ff fefe 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc01e:	a802      	add	r0, sp, #8
   bc020:	f7f8 f98a 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc024:	2200      	movs	r2, #0
   bc026:	4629      	mov	r1, r5
   bc028:	4803      	ldr	r0, [pc, #12]	; (bc038 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc02a:	f7fd fa1d 	bl	b9468 <application_thread_invoke>
   bc02e:	e7b7      	b.n	bbfa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc030:	000bbec9 	.word	0x000bbec9
   bc034:	000bc14d 	.word	0x000bc14d
   bc038:	000b96a7 	.word	0x000b96a7

000bc03c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc040:	b08b      	sub	sp, #44	; 0x2c
   bc042:	4605      	mov	r5, r0
   bc044:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc048:	460f      	mov	r7, r1
   bc04a:	4690      	mov	r8, r2
   bc04c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc04e:	f7fd fa37 	bl	b94c0 <spark_cloud_flag_connected>
   bc052:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc054:	4683      	mov	fp, r0
   bc056:	bb38      	cbnz	r0, bc0a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc058:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc05c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc05e:	a905      	add	r1, sp, #20
   bc060:	4630      	mov	r0, r6
   bc062:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc066:	f7ff fecb 	bl	bbe00 <_ZN8particle5ErrorC1EOS0_>
   bc06a:	2014      	movs	r0, #20
   bc06c:	f7f8 f813 	bl	b4096 <_Znwj>
   bc070:	4604      	mov	r4, r0
   bc072:	b148      	cbz	r0, bc088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc074:	2302      	movs	r3, #2
   bc076:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc078:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc07a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc07e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc080:	4631      	mov	r1, r6
   bc082:	300c      	adds	r0, #12
   bc084:	f7ff febc 	bl	bbe00 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc088:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc08a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc08c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc090:	f7ff ff32 	bl	bbef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc094:	4630      	mov	r0, r6
   bc096:	f7ff fec0 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc09a:	a805      	add	r0, sp, #20
   bc09c:	f7ff febd 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc0a0:	4628      	mov	r0, r5
   bc0a2:	b00b      	add	sp, #44	; 0x2c
   bc0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc0a8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc0aa:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc0ac:	2014      	movs	r0, #20
   bc0ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc0b2:	9307      	str	r3, [sp, #28]
   bc0b4:	f7f7 ffef 	bl	b4096 <_Znwj>
   bc0b8:	4601      	mov	r1, r0
   bc0ba:	b118      	cbz	r0, bc0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc0bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc0c0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc0c2:	7044      	strb	r4, [r0, #1]
   bc0c4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc0c6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc0c8:	f7ff ff16 	bl	bbef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc0cc:	4b1e      	ldr	r3, [pc, #120]	; (bc148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc0ce:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc0d0:	2008      	movs	r0, #8
   bc0d2:	f7f7 ffe0 	bl	b4096 <_Znwj>
   bc0d6:	4604      	mov	r4, r0
   bc0d8:	b110      	cbz	r0, bc0e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc0da:	a903      	add	r1, sp, #12
   bc0dc:	f7ff fec7 	bl	bbe6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc0e0:	9600      	str	r6, [sp, #0]
   bc0e2:	fa5f f38a 	uxtb.w	r3, sl
   bc0e6:	464a      	mov	r2, r9
   bc0e8:	4641      	mov	r1, r8
   bc0ea:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc0ec:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc0ee:	f7fd f9ef 	bl	b94d0 <spark_send_event>
   bc0f2:	b9b8      	cbnz	r0, bc124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc0f4:	9b03      	ldr	r3, [sp, #12]
   bc0f6:	785b      	ldrb	r3, [r3, #1]
   bc0f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc0fc:	b993      	cbnz	r3, bc124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc0fe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc102:	a905      	add	r1, sp, #20
   bc104:	a803      	add	r0, sp, #12
   bc106:	9205      	str	r2, [sp, #20]
   bc108:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc10c:	f7ff ff18 	bl	bbf40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc110:	a805      	add	r0, sp, #20
   bc112:	f7ff fe82 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc116:	a805      	add	r0, sp, #20
   bc118:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc11a:	f7ff feb1 	bl	bbe80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc11e:	a806      	add	r0, sp, #24
   bc120:	f7fe f93f 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc124:	a903      	add	r1, sp, #12
   bc126:	a805      	add	r0, sp, #20
   bc128:	f7ff fea1 	bl	bbe6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc12c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc12e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc130:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc132:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc134:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc136:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc138:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc13a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc13c:	f7fe f931 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc140:	a804      	add	r0, sp, #16
   bc142:	f7fe f92e 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc146:	e7ab      	b.n	bc0a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc148:	000bc1c9 	.word	0x000bc1c9

000bc14c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc14c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc150:	4605      	mov	r5, r0
	switch (__op)
   bc152:	d103      	bne.n	bc15c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc154:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc156:	6003      	str	r3, [r0, #0]
      }
   bc158:	2000      	movs	r0, #0
   bc15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc15c:	2a02      	cmp	r2, #2
   bc15e:	d010      	beq.n	bc182 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc160:	2a03      	cmp	r2, #3
   bc162:	d1f9      	bne.n	bc158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc164:	6804      	ldr	r4, [r0, #0]
   bc166:	2c00      	cmp	r4, #0
   bc168:	d0f6      	beq.n	bc158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc16a:	f104 0010 	add.w	r0, r4, #16
   bc16e:	f7ff fe54 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc172:	4620      	mov	r0, r4
   bc174:	f7f8 f8e0 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc178:	2118      	movs	r1, #24
   bc17a:	4620      	mov	r0, r4
   bc17c:	f7f7 ff8f 	bl	b409e <_ZdlPvj>
   bc180:	e7ea      	b.n	bc158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc182:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc184:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc186:	f7f7 ff86 	bl	b4096 <_Znwj>
   bc18a:	4604      	mov	r4, r0
   bc18c:	b150      	cbz	r0, bc1a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc18e:	4631      	mov	r1, r6
   bc190:	f7ff fec6 	bl	bbf20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc194:	6930      	ldr	r0, [r6, #16]
   bc196:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc19a:	b108      	cbz	r0, bc1a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc19c:	f002 f80e 	bl	be1bc <strdup>
        type_(type) {
   bc1a0:	6120      	str	r0, [r4, #16]
   bc1a2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc1a4:	602c      	str	r4, [r5, #0]
	}
   bc1a6:	e7d7      	b.n	bc158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc1a8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc1a8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc1aa:	2300      	movs	r3, #0
   bc1ac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc1ae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc1b0:	4604      	mov	r4, r0
   bc1b2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc1b4:	b12b      	cbz	r3, bc1c2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc1b6:	2202      	movs	r2, #2
   bc1b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc1ba:	68eb      	ldr	r3, [r5, #12]
   bc1bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc1be:	68ab      	ldr	r3, [r5, #8]
   bc1c0:	60a3      	str	r3, [r4, #8]
    }
   bc1c2:	4620      	mov	r0, r4
   bc1c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc1c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc1ca:	b089      	sub	sp, #36	; 0x24
   bc1cc:	4604      	mov	r4, r0
   bc1ce:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc1d0:	a801      	add	r0, sp, #4
   bc1d2:	4611      	mov	r1, r2
   bc1d4:	f7ff fe54 	bl	bbe80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc1d8:	b1a4      	cbz	r4, bc204 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc1da:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc1dc:	b11d      	cbz	r5, bc1e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc1de:	4628      	mov	r0, r5
   bc1e0:	f001 ffec 	bl	be1bc <strdup>
   bc1e4:	4605      	mov	r5, r0
   bc1e6:	a801      	add	r0, sp, #4
   bc1e8:	a903      	add	r1, sp, #12
        type_(type) {
   bc1ea:	9503      	str	r5, [sp, #12]
   bc1ec:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc1f0:	f7ff fea6 	bl	bbf40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc1f4:	a803      	add	r0, sp, #12
   bc1f6:	f7ff fe10 	bl	bbe1a <_ZN8particle5ErrorD1Ev>
   bc1fa:	a802      	add	r0, sp, #8
   bc1fc:	f7fe f8d1 	bl	ba3a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc200:	b009      	add	sp, #36	; 0x24
   bc202:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc204:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc206:	2301      	movs	r3, #1
   bc208:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc20c:	2a00      	cmp	r2, #0
   bc20e:	d103      	bne.n	bc218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc210:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc214:	2900      	cmp	r1, #0
   bc216:	d1f7      	bne.n	bc208 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc218:	d1ef      	bne.n	bc1fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc21a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc21c:	f3bf 8f5b 	dmb	ish
   bc220:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc222:	1d2b      	adds	r3, r5, #4
   bc224:	f3bf 8f5b 	dmb	ish
   bc228:	e853 6f00 	ldrex	r6, [r3]
   bc22c:	e843 4200 	strex	r2, r4, [r3]
   bc230:	2a00      	cmp	r2, #0
   bc232:	d1f9      	bne.n	bc228 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc234:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc238:	2e00      	cmp	r6, #0
   bc23a:	d0de      	beq.n	bc1fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc23c:	4620      	mov	r0, r4
   bc23e:	f7fd f90b 	bl	b9458 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc242:	4607      	mov	r7, r0
   bc244:	b160      	cbz	r0, bc260 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc246:	f105 010c 	add.w	r1, r5, #12
   bc24a:	4630      	mov	r0, r6
   bc24c:	f7ff fe43 	bl	bbed6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc250:	4630      	mov	r0, r6
   bc252:	f7f8 f871 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc256:	2110      	movs	r1, #16
   bc258:	4630      	mov	r0, r6
   bc25a:	f7f7 ff20 	bl	b409e <_ZdlPvj>
   bc25e:	e7cc      	b.n	bc1fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc260:	4631      	mov	r1, r6
   bc262:	a803      	add	r0, sp, #12
   bc264:	f7ff ffa0 	bl	bc1a8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc268:	7b2b      	ldrb	r3, [r5, #12]
   bc26a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc26e:	2010      	movs	r0, #16
   bc270:	f7f7 ff11 	bl	b4096 <_Znwj>
   bc274:	4605      	mov	r5, r0
   bc276:	b1d0      	cbz	r0, bc2ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc278:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc27a:	2014      	movs	r0, #20
   bc27c:	f7f7 ff0b 	bl	b4096 <_Znwj>
   bc280:	4604      	mov	r4, r0
   bc282:	b178      	cbz	r0, bc2a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc284:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc286:	4601      	mov	r1, r0
   bc288:	a803      	add	r0, sp, #12
   bc28a:	f7fe ff63 	bl	bb154 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc28e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc290:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc292:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc294:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc296:	9205      	str	r2, [sp, #20]
   bc298:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc29a:	60e3      	str	r3, [r4, #12]
   bc29c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc2a0:	9206      	str	r2, [sp, #24]
   bc2a2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc2a4:	4b06      	ldr	r3, [pc, #24]	; (bc2c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc2a6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc2a8:	4b06      	ldr	r3, [pc, #24]	; (bc2c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc2aa:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc2ac:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc2ae:	a803      	add	r0, sp, #12
   bc2b0:	f7f8 f842 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc2b4:	2200      	movs	r2, #0
   bc2b6:	4629      	mov	r1, r5
   bc2b8:	4803      	ldr	r0, [pc, #12]	; (bc2c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc2ba:	f7fd f8d5 	bl	b9468 <application_thread_invoke>
   bc2be:	e7c7      	b.n	bc250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc2c0:	000bbee9 	.word	0x000bbee9
   bc2c4:	000bc2cd 	.word	0x000bc2cd
   bc2c8:	000b96a7 	.word	0x000b96a7

000bc2cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc2cc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc2ce:	b570      	push	{r4, r5, r6, lr}
   bc2d0:	4604      	mov	r4, r0
	switch (__op)
   bc2d2:	d103      	bne.n	bc2dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc2d4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc2d6:	6003      	str	r3, [r0, #0]
      }
   bc2d8:	2000      	movs	r0, #0
   bc2da:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc2dc:	2a02      	cmp	r2, #2
   bc2de:	d00c      	beq.n	bc2fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc2e0:	2a03      	cmp	r2, #3
   bc2e2:	d1f9      	bne.n	bc2d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc2e4:	6804      	ldr	r4, [r0, #0]
   bc2e6:	2c00      	cmp	r4, #0
   bc2e8:	d0f6      	beq.n	bc2d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc2ea:	4620      	mov	r0, r4
   bc2ec:	f7f8 f824 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc2f0:	2114      	movs	r1, #20
   bc2f2:	4620      	mov	r0, r4
   bc2f4:	f7f7 fed3 	bl	b409e <_ZdlPvj>
   bc2f8:	e7ee      	b.n	bc2d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc2fa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc2fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc2fe:	f7f7 feca 	bl	b4096 <_Znwj>
   bc302:	4605      	mov	r5, r0
   bc304:	b120      	cbz	r0, bc310 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc306:	4631      	mov	r1, r6
   bc308:	f7ff ff4e 	bl	bc1a8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc30c:	7c33      	ldrb	r3, [r6, #16]
   bc30e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc310:	6025      	str	r5, [r4, #0]
	}
   bc312:	e7e1      	b.n	bc2d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc314 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bc314:	2200      	movs	r2, #0
   bc316:	6840      	ldr	r0, [r0, #4]
   bc318:	4611      	mov	r1, r2
   bc31a:	f7fd b931 	b.w	b9580 <network_listening>

000bc31e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc31e:	2200      	movs	r2, #0
   bc320:	6840      	ldr	r0, [r0, #4]
   bc322:	4611      	mov	r1, r2
   bc324:	f7fd b93c 	b.w	b95a0 <network_get_listen_timeout>

000bc328 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc328:	6840      	ldr	r0, [r0, #4]
   bc32a:	2200      	movs	r2, #0
   bc32c:	f7fd b930 	b.w	b9590 <network_set_listen_timeout>

000bc330 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc330:	6840      	ldr	r0, [r0, #4]
   bc332:	2200      	movs	r2, #0
   bc334:	f081 0101 	eor.w	r1, r1, #1
   bc338:	f7fd b91a 	b.w	b9570 <network_listen>

000bc33c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc33c:	2300      	movs	r3, #0
   bc33e:	6840      	ldr	r0, [r0, #4]
   bc340:	461a      	mov	r2, r3
   bc342:	4619      	mov	r1, r3
   bc344:	f7fd b90c 	b.w	b9560 <network_off>

000bc348 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc348:	2300      	movs	r3, #0
   bc34a:	6840      	ldr	r0, [r0, #4]
   bc34c:	461a      	mov	r2, r3
   bc34e:	4619      	mov	r1, r3
   bc350:	f7fd b8fe 	b.w	b9550 <network_on>

000bc354 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bc354:	2200      	movs	r2, #0
   bc356:	6840      	ldr	r0, [r0, #4]
   bc358:	4611      	mov	r1, r2
   bc35a:	f7fd b8f1 	b.w	b9540 <network_ready>

000bc35e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc35e:	2200      	movs	r2, #0
   bc360:	6840      	ldr	r0, [r0, #4]
   bc362:	4611      	mov	r1, r2
   bc364:	f7fd b8dc 	b.w	b9520 <network_connecting>

000bc368 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc368:	6840      	ldr	r0, [r0, #4]
   bc36a:	2200      	movs	r2, #0
   bc36c:	2102      	movs	r1, #2
   bc36e:	f7fd b8df 	b.w	b9530 <network_disconnect>

000bc372 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc372:	2300      	movs	r3, #0
   bc374:	6840      	ldr	r0, [r0, #4]
   bc376:	461a      	mov	r2, r3
   bc378:	f7fd b8ca 	b.w	b9510 <network_connect>

000bc37c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bc37c:	4b02      	ldr	r3, [pc, #8]	; (bc388 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bc37e:	2203      	movs	r2, #3
   bc380:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bc382:	4a02      	ldr	r2, [pc, #8]	; (bc38c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bc384:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bc386:	4770      	bx	lr
   bc388:	2003e690 	.word	0x2003e690
   bc38c:	000c1788 	.word	0x000c1788

000bc390 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc390:	4770      	bx	lr

000bc392 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc394:	4606      	mov	r6, r0
   bc396:	4615      	mov	r5, r2
   bc398:	460c      	mov	r4, r1
   bc39a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc39c:	42bc      	cmp	r4, r7
   bc39e:	d006      	beq.n	bc3ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc3a0:	6833      	ldr	r3, [r6, #0]
   bc3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc3a6:	689b      	ldr	r3, [r3, #8]
   bc3a8:	4630      	mov	r0, r6
   bc3aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc3ac:	e7f6      	b.n	bc39c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc3ae:	4628      	mov	r0, r5
   bc3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc3b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc3b2:	7c00      	ldrb	r0, [r0, #16]
   bc3b4:	2200      	movs	r2, #0
   bc3b6:	f7fc bf07 	b.w	b91c8 <hal_i2c_write>

000bc3ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc3ba:	7c00      	ldrb	r0, [r0, #16]
   bc3bc:	2100      	movs	r1, #0
   bc3be:	f7fc bf0b 	b.w	b91d8 <hal_i2c_available>

000bc3c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc3c2:	7c00      	ldrb	r0, [r0, #16]
   bc3c4:	2100      	movs	r1, #0
   bc3c6:	f7fc bf0f 	b.w	b91e8 <hal_i2c_read>

000bc3ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc3ca:	7c00      	ldrb	r0, [r0, #16]
   bc3cc:	2100      	movs	r1, #0
   bc3ce:	f7fc bf13 	b.w	b91f8 <hal_i2c_peek>

000bc3d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc3d2:	7c00      	ldrb	r0, [r0, #16]
   bc3d4:	2100      	movs	r1, #0
   bc3d6:	f7fc bf17 	b.w	b9208 <hal_i2c_flush>

000bc3da <_ZN7TwoWireD0Ev>:
   bc3da:	b510      	push	{r4, lr}
   bc3dc:	2114      	movs	r1, #20
   bc3de:	4604      	mov	r4, r0
   bc3e0:	f7f7 fe5d 	bl	b409e <_ZdlPvj>
   bc3e4:	4620      	mov	r0, r4
   bc3e6:	bd10      	pop	{r4, pc}

000bc3e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc3e8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc3ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc3ee:	4604      	mov	r4, r0
   bc3f0:	4608      	mov	r0, r1
   bc3f2:	2100      	movs	r1, #0
   bc3f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc3f8:	4b03      	ldr	r3, [pc, #12]	; (bc408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc3fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc3fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc3fe:	4611      	mov	r1, r2
   bc400:	f7fc ff12 	bl	b9228 <hal_i2c_init>
}
   bc404:	4620      	mov	r0, r4
   bc406:	bd10      	pop	{r4, pc}
   bc408:	000c17c4 	.word	0x000c17c4

000bc40c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bc40c:	7c00      	ldrb	r0, [r0, #16]
   bc40e:	2200      	movs	r2, #0
   bc410:	f7fc beba 	b.w	b9188 <hal_i2c_set_speed>

000bc414 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc414:	2300      	movs	r3, #0
   bc416:	7c00      	ldrb	r0, [r0, #16]
   bc418:	461a      	mov	r2, r3
   bc41a:	4619      	mov	r1, r3
   bc41c:	f7fc bebc 	b.w	b9198 <hal_i2c_begin>

000bc420 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc420:	7c00      	ldrb	r0, [r0, #16]
   bc422:	2200      	movs	r2, #0
   bc424:	f7fc bec0 	b.w	b91a8 <hal_i2c_begin_transmission>

000bc428 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc428:	b2c9      	uxtb	r1, r1
   bc42a:	f7ff bff9 	b.w	bc420 <_ZN7TwoWire17beginTransmissionEh>

000bc42e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc42e:	7c00      	ldrb	r0, [r0, #16]
   bc430:	2200      	movs	r2, #0
   bc432:	f7fc bec1 	b.w	b91b8 <hal_i2c_end_transmission>

000bc436 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bc436:	2101      	movs	r1, #1
   bc438:	f7ff bff9 	b.w	bc42e <_ZN7TwoWire15endTransmissionEh>

000bc43c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc43c:	4700      	bx	r0
	...

000bc440 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc440:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc444:	2400      	movs	r4, #0
{
   bc446:	461d      	mov	r5, r3
   bc448:	460f      	mov	r7, r1
   bc44a:	4690      	mov	r8, r2
   bc44c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc44e:	f7fc fe93 	bl	b9178 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc452:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc454:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc458:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc45c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc460:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc464:	bfa2      	ittt	ge
   bc466:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc46a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc46e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc470:	4907      	ldr	r1, [pc, #28]	; (bc490 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc472:	9400      	str	r4, [sp, #0]
   bc474:	4643      	mov	r3, r8
   bc476:	463a      	mov	r2, r7
   bc478:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc47a:	bfa8      	it	ge
   bc47c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc480:	f7fc fe72 	bl	b9168 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc484:	fab0 f080 	clz	r0, r0
   bc488:	0940      	lsrs	r0, r0, #5
   bc48a:	b004      	add	sp, #16
   bc48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc490:	000bc43d 	.word	0x000bc43d

000bc494 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc494:	4770      	bx	lr

000bc496 <_ZN9IPAddressD0Ev>:
   bc496:	b510      	push	{r4, lr}
   bc498:	2118      	movs	r1, #24
   bc49a:	4604      	mov	r4, r0
   bc49c:	f7f7 fdff 	bl	b409e <_ZdlPvj>
   bc4a0:	4620      	mov	r0, r4
   bc4a2:	bd10      	pop	{r4, pc}

000bc4a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc4a6:	7d03      	ldrb	r3, [r0, #20]
   bc4a8:	2b06      	cmp	r3, #6
{
   bc4aa:	b08d      	sub	sp, #52	; 0x34
   bc4ac:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc4ae:	f100 0704 	add.w	r7, r0, #4
   bc4b2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc4b6:	d012      	beq.n	bc4de <_ZNK9IPAddress7printToER5Print+0x3a>
   bc4b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc4bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc4c0:	220a      	movs	r2, #10
   bc4c2:	4630      	mov	r0, r6
   bc4c4:	f000 f94b 	bl	bc75e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc4c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc4ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc4cc:	d019      	beq.n	bc502 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc4ce:	2c00      	cmp	r4, #0
   bc4d0:	d0f4      	beq.n	bc4bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc4d2:	212e      	movs	r1, #46	; 0x2e
   bc4d4:	4630      	mov	r0, r6
   bc4d6:	f000 f929 	bl	bc72c <_ZN5Print5printEc>
   bc4da:	4404      	add	r4, r0
   bc4dc:	e7ee      	b.n	bc4bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc4de:	232f      	movs	r3, #47	; 0x2f
   bc4e0:	466a      	mov	r2, sp
   bc4e2:	4639      	mov	r1, r7
   bc4e4:	200a      	movs	r0, #10
		buf[0] = 0;
   bc4e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc4ea:	f7fc fea5 	bl	b9238 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc4ee:	4668      	mov	r0, sp
   bc4f0:	f001 fe81 	bl	be1f6 <strlen>
   bc4f4:	6833      	ldr	r3, [r6, #0]
   bc4f6:	4602      	mov	r2, r0
   bc4f8:	68db      	ldr	r3, [r3, #12]
   bc4fa:	4669      	mov	r1, sp
   bc4fc:	4630      	mov	r0, r6
   bc4fe:	4798      	blx	r3
   bc500:	4604      	mov	r4, r0
    }
    return n;
}
   bc502:	4620      	mov	r0, r4
   bc504:	b00d      	add	sp, #52	; 0x34
   bc506:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc508 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc508:	b510      	push	{r4, lr}
   bc50a:	4b05      	ldr	r3, [pc, #20]	; (bc520 <_ZN9IPAddressC1Ev+0x18>)
   bc50c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc50e:	2211      	movs	r2, #17
   bc510:	f840 3b04 	str.w	r3, [r0], #4
   bc514:	2100      	movs	r1, #0
   bc516:	f001 fdba 	bl	be08e <memset>
}
   bc51a:	4620      	mov	r0, r4
   bc51c:	bd10      	pop	{r4, pc}
   bc51e:	bf00      	nop
   bc520:	000c17ec 	.word	0x000c17ec

000bc524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc524:	4603      	mov	r3, r0
   bc526:	4a07      	ldr	r2, [pc, #28]	; (bc544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc528:	b510      	push	{r4, lr}
   bc52a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc52e:	f101 0210 	add.w	r2, r1, #16
   bc532:	f851 4b04 	ldr.w	r4, [r1], #4
   bc536:	f843 4b04 	str.w	r4, [r3], #4
   bc53a:	4291      	cmp	r1, r2
   bc53c:	d1f9      	bne.n	bc532 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc53e:	780a      	ldrb	r2, [r1, #0]
   bc540:	701a      	strb	r2, [r3, #0]
}
   bc542:	bd10      	pop	{r4, pc}
   bc544:	000c17ec 	.word	0x000c17ec

000bc548 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc548:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc54a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc54e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc552:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc556:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc55a:	2304      	movs	r3, #4
   bc55c:	6041      	str	r1, [r0, #4]
   bc55e:	7503      	strb	r3, [r0, #20]
}
   bc560:	bd10      	pop	{r4, pc}
	...

000bc564 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc564:	b507      	push	{r0, r1, r2, lr}
   bc566:	4b06      	ldr	r3, [pc, #24]	; (bc580 <_ZN9IPAddressC1EPKh+0x1c>)
   bc568:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc56a:	78cb      	ldrb	r3, [r1, #3]
   bc56c:	9300      	str	r3, [sp, #0]
   bc56e:	788b      	ldrb	r3, [r1, #2]
   bc570:	784a      	ldrb	r2, [r1, #1]
   bc572:	7809      	ldrb	r1, [r1, #0]
   bc574:	f7ff ffe8 	bl	bc548 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc578:	b003      	add	sp, #12
   bc57a:	f85d fb04 	ldr.w	pc, [sp], #4
   bc57e:	bf00      	nop
   bc580:	000c17ec 	.word	0x000c17ec

000bc584 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bc584:	4b01      	ldr	r3, [pc, #4]	; (bc58c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bc586:	4a02      	ldr	r2, [pc, #8]	; (bc590 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bc588:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bc58a:	4770      	bx	lr
   bc58c:	2003e698 	.word	0x2003e698
   bc590:	000c17f8 	.word	0x000c17f8

000bc594 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc594:	2300      	movs	r3, #0
   bc596:	6840      	ldr	r0, [r0, #4]
   bc598:	461a      	mov	r2, r3
   bc59a:	f7fc bfb9 	b.w	b9510 <network_connect>

000bc59e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc59e:	6840      	ldr	r0, [r0, #4]
   bc5a0:	2200      	movs	r2, #0
   bc5a2:	2102      	movs	r1, #2
   bc5a4:	f7fc bfc4 	b.w	b9530 <network_disconnect>

000bc5a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc5a8:	2200      	movs	r2, #0
   bc5aa:	6840      	ldr	r0, [r0, #4]
   bc5ac:	4611      	mov	r1, r2
   bc5ae:	f7fc bfb7 	b.w	b9520 <network_connecting>

000bc5b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc5b2:	2200      	movs	r2, #0
   bc5b4:	6840      	ldr	r0, [r0, #4]
   bc5b6:	4611      	mov	r1, r2
   bc5b8:	f7fc bfc2 	b.w	b9540 <network_ready>

000bc5bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc5bc:	2300      	movs	r3, #0
   bc5be:	6840      	ldr	r0, [r0, #4]
   bc5c0:	461a      	mov	r2, r3
   bc5c2:	4619      	mov	r1, r3
   bc5c4:	f7fc bfc4 	b.w	b9550 <network_on>

000bc5c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc5c8:	2300      	movs	r3, #0
   bc5ca:	6840      	ldr	r0, [r0, #4]
   bc5cc:	461a      	mov	r2, r3
   bc5ce:	4619      	mov	r1, r3
   bc5d0:	f7fc bfc6 	b.w	b9560 <network_off>

000bc5d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc5d4:	6840      	ldr	r0, [r0, #4]
   bc5d6:	2100      	movs	r1, #0
   bc5d8:	f7fc bfea 	b.w	b95b0 <network_is_on>

000bc5dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc5dc:	6840      	ldr	r0, [r0, #4]
   bc5de:	2100      	movs	r1, #0
   bc5e0:	f7fc bfee 	b.w	b95c0 <network_is_off>

000bc5e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc5e4:	6840      	ldr	r0, [r0, #4]
   bc5e6:	2200      	movs	r2, #0
   bc5e8:	f081 0101 	eor.w	r1, r1, #1
   bc5ec:	f7fc bfc0 	b.w	b9570 <network_listen>

000bc5f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc5f0:	6840      	ldr	r0, [r0, #4]
   bc5f2:	2200      	movs	r2, #0
   bc5f4:	f7fc bfcc 	b.w	b9590 <network_set_listen_timeout>

000bc5f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc5f8:	2200      	movs	r2, #0
   bc5fa:	6840      	ldr	r0, [r0, #4]
   bc5fc:	4611      	mov	r1, r2
   bc5fe:	f7fc bfcf 	b.w	b95a0 <network_get_listen_timeout>

000bc602 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc602:	2200      	movs	r2, #0
   bc604:	6840      	ldr	r0, [r0, #4]
   bc606:	4611      	mov	r1, r2
   bc608:	f7fc bfba 	b.w	b9580 <network_listening>

000bc60c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc610:	b095      	sub	sp, #84	; 0x54
   bc612:	4614      	mov	r4, r2
   bc614:	460d      	mov	r5, r1
   bc616:	4607      	mov	r7, r0
    IPAddress addr;
   bc618:	f7ff ff76 	bl	bc508 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc61c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc61e:	221c      	movs	r2, #28
   bc620:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc622:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bc624:	f001 fd33 	bl	be08e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bc628:	2340      	movs	r3, #64	; 0x40
   bc62a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bc62c:	4620      	mov	r0, r4
   bc62e:	466b      	mov	r3, sp
   bc630:	aa0c      	add	r2, sp, #48	; 0x30
   bc632:	2100      	movs	r1, #0
   bc634:	f7fc fe10 	bl	b9258 <netdb_getaddrinfo>
    if (!r) {
   bc638:	4604      	mov	r4, r0
   bc63a:	2800      	cmp	r0, #0
   bc63c:	d14b      	bne.n	bc6d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc63e:	4602      	mov	r2, r0
   bc640:	2101      	movs	r1, #1
   bc642:	6868      	ldr	r0, [r5, #4]
   bc644:	f7fc ff7c 	bl	b9540 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc648:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc64a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc64c:	4622      	mov	r2, r4
   bc64e:	6868      	ldr	r0, [r5, #4]
   bc650:	f7fc ff76 	bl	b9540 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc654:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc656:	4681      	mov	r9, r0
        bool ok = false;
   bc658:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc65a:	2e00      	cmp	r6, #0
   bc65c:	d03b      	beq.n	bc6d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bc65e:	2900      	cmp	r1, #0
   bc660:	d139      	bne.n	bc6d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bc662:	6873      	ldr	r3, [r6, #4]
   bc664:	2b02      	cmp	r3, #2
   bc666:	d003      	beq.n	bc670 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bc668:	2b0a      	cmp	r3, #10
   bc66a:	d011      	beq.n	bc690 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc66c:	69f6      	ldr	r6, [r6, #28]
   bc66e:	e7f4      	b.n	bc65a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bc670:	f1b8 0f00 	cmp.w	r8, #0
   bc674:	d0fa      	beq.n	bc66c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bc676:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bc678:	a806      	add	r0, sp, #24
   bc67a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bc67c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bc67e:	f7ff ff71 	bl	bc564 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc684:	1d3c      	adds	r4, r7, #4
   bc686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc688:	682b      	ldr	r3, [r5, #0]
   bc68a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc68c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bc68e:	e7ed      	b.n	bc66c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bc690:	f1b9 0f00 	cmp.w	r9, #0
   bc694:	d0ea      	beq.n	bc66c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bc696:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bc698:	2210      	movs	r2, #16
   bc69a:	a801      	add	r0, sp, #4
   bc69c:	f001 fcf7 	bl	be08e <memset>
                    a.v = 6;
   bc6a0:	2306      	movs	r3, #6
   bc6a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc6a6:	ad01      	add	r5, sp, #4
   bc6a8:	f104 0308 	add.w	r3, r4, #8
   bc6ac:	3418      	adds	r4, #24
   bc6ae:	6818      	ldr	r0, [r3, #0]
   bc6b0:	6859      	ldr	r1, [r3, #4]
   bc6b2:	462a      	mov	r2, r5
   bc6b4:	c203      	stmia	r2!, {r0, r1}
   bc6b6:	3308      	adds	r3, #8
   bc6b8:	42a3      	cmp	r3, r4
   bc6ba:	4615      	mov	r5, r2
   bc6bc:	d1f7      	bne.n	bc6ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bc6be:	a901      	add	r1, sp, #4
   bc6c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bc6c2:	ad07      	add	r5, sp, #28
   bc6c4:	f7ff ff2e 	bl	bc524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc6ca:	1d3c      	adds	r4, r7, #4
   bc6cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc6ce:	682b      	ldr	r3, [r5, #0]
   bc6d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc6d2:	4649      	mov	r1, r9
   bc6d4:	e7ca      	b.n	bc66c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bc6d6:	9800      	ldr	r0, [sp, #0]
   bc6d8:	f7fc fdb6 	bl	b9248 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bc6dc:	4638      	mov	r0, r7
   bc6de:	b015      	add	sp, #84	; 0x54
   bc6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bc6e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bc6e4:	4b02      	ldr	r3, [pc, #8]	; (bc6f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bc6e6:	4a03      	ldr	r2, [pc, #12]	; (bc6f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bc6e8:	601a      	str	r2, [r3, #0]
   bc6ea:	2200      	movs	r2, #0
   bc6ec:	605a      	str	r2, [r3, #4]

} // spark
   bc6ee:	4770      	bx	lr
   bc6f0:	2003e69c 	.word	0x2003e69c
   bc6f4:	000c1804 	.word	0x000c1804

000bc6f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bc6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc6fa:	4606      	mov	r6, r0
   bc6fc:	460d      	mov	r5, r1
  size_t n = 0;
   bc6fe:	188f      	adds	r7, r1, r2
   bc700:	2400      	movs	r4, #0
  while (size--) {
   bc702:	42bd      	cmp	r5, r7
   bc704:	d00c      	beq.n	bc720 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bc706:	6833      	ldr	r3, [r6, #0]
   bc708:	f815 1b01 	ldrb.w	r1, [r5], #1
   bc70c:	689b      	ldr	r3, [r3, #8]
   bc70e:	4630      	mov	r0, r6
   bc710:	4798      	blx	r3
     if (chunk>=0)
   bc712:	1e03      	subs	r3, r0, #0
   bc714:	db01      	blt.n	bc71a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bc716:	441c      	add	r4, r3
  while (size--) {
   bc718:	e7f3      	b.n	bc702 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bc71a:	2c00      	cmp	r4, #0
   bc71c:	bf08      	it	eq
   bc71e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bc720:	4620      	mov	r0, r4
   bc722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc724 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bc724:	b508      	push	{r3, lr}
  return write(str);
   bc726:	f7fa fe41 	bl	b73ac <_ZN5Print5writeEPKc>
}
   bc72a:	bd08      	pop	{r3, pc}

000bc72c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bc72c:	6803      	ldr	r3, [r0, #0]
   bc72e:	689b      	ldr	r3, [r3, #8]
   bc730:	4718      	bx	r3

000bc732 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bc732:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bc734:	210d      	movs	r1, #13
{
   bc736:	4605      	mov	r5, r0
  size_t n = print('\r');
   bc738:	f7ff fff8 	bl	bc72c <_ZN5Print5printEc>
  n += print('\n');
   bc73c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bc73e:	4604      	mov	r4, r0
  n += print('\n');
   bc740:	4628      	mov	r0, r5
   bc742:	f7ff fff3 	bl	bc72c <_ZN5Print5printEc>
  return n;
}
   bc746:	4420      	add	r0, r4
   bc748:	bd38      	pop	{r3, r4, r5, pc}

000bc74a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bc74a:	b538      	push	{r3, r4, r5, lr}
   bc74c:	4605      	mov	r5, r0
  return write(str);
   bc74e:	f7fa fe2d 	bl	b73ac <_ZN5Print5writeEPKc>
   bc752:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bc754:	4628      	mov	r0, r5
   bc756:	f7ff ffec 	bl	bc732 <_ZN5Print7printlnEv>
  return n;
}
   bc75a:	4420      	add	r0, r4
   bc75c:	bd38      	pop	{r3, r4, r5, pc}

000bc75e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bc75e:	b530      	push	{r4, r5, lr}
   bc760:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bc762:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bc764:	2a01      	cmp	r2, #1
  *str = '\0';
   bc766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bc76a:	bf98      	it	ls
   bc76c:	220a      	movls	r2, #10
   bc76e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bc770:	460d      	mov	r5, r1
   bc772:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bc776:	fb01 5312 	mls	r3, r1, r2, r5
   bc77a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc77e:	2b09      	cmp	r3, #9
   bc780:	bf94      	ite	ls
   bc782:	3330      	addls	r3, #48	; 0x30
   bc784:	3337      	addhi	r3, #55	; 0x37
   bc786:	b2db      	uxtb	r3, r3
  } while(n);
   bc788:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc78a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bc78e:	d9ef      	bls.n	bc770 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bc790:	4621      	mov	r1, r4
   bc792:	f7fa fe0b 	bl	b73ac <_ZN5Print5writeEPKc>
}
   bc796:	b00b      	add	sp, #44	; 0x2c
   bc798:	bd30      	pop	{r4, r5, pc}

000bc79a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bc79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc79e:	b086      	sub	sp, #24
   bc7a0:	af00      	add	r7, sp, #0
   bc7a2:	4605      	mov	r5, r0
   bc7a4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bc7a6:	1d38      	adds	r0, r7, #4
   bc7a8:	2114      	movs	r1, #20
{
   bc7aa:	4614      	mov	r4, r2
    va_copy(args2, args);
   bc7ac:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bc7ae:	f7fc ff3f 	bl	b9630 <vsnprintf>

    if (n<bufsize)
   bc7b2:	2813      	cmp	r0, #19
   bc7b4:	d80e      	bhi.n	bc7d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bc7b6:	1d39      	adds	r1, r7, #4
   bc7b8:	4628      	mov	r0, r5
   bc7ba:	f7fa fdf7 	bl	b73ac <_ZN5Print5writeEPKc>
   bc7be:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bc7c0:	b11e      	cbz	r6, bc7ca <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bc7c2:	4628      	mov	r0, r5
   bc7c4:	f7ff ffb5 	bl	bc732 <_ZN5Print7printlnEv>
   bc7c8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bc7ca:	4620      	mov	r0, r4
   bc7cc:	3718      	adds	r7, #24
   bc7ce:	46bd      	mov	sp, r7
   bc7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bc7d4:	f100 0308 	add.w	r3, r0, #8
   bc7d8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bc7dc:	46e8      	mov	r8, sp
        char bigger[n+1];
   bc7de:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bc7e2:	4622      	mov	r2, r4
   bc7e4:	1c41      	adds	r1, r0, #1
   bc7e6:	683b      	ldr	r3, [r7, #0]
   bc7e8:	4668      	mov	r0, sp
   bc7ea:	f7fc ff21 	bl	b9630 <vsnprintf>
  return write(str);
   bc7ee:	4669      	mov	r1, sp
   bc7f0:	4628      	mov	r0, r5
   bc7f2:	f7fa fddb 	bl	b73ac <_ZN5Print5writeEPKc>
   bc7f6:	4604      	mov	r4, r0
   bc7f8:	46c5      	mov	sp, r8
   bc7fa:	e7e1      	b.n	bc7c0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bc7fc <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bc7fc:	b510      	push	{r4, lr}
  if (0 == max) {
   bc7fe:	4604      	mov	r4, r0
   bc800:	b128      	cbz	r0, bc80e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bc802:	f001 fc7b 	bl	be0fc <rand>
   bc806:	fb90 f3f4 	sdiv	r3, r0, r4
   bc80a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bc80e:	4620      	mov	r0, r4
   bc810:	bd10      	pop	{r4, pc}
	...

000bc814 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bc814:	4b01      	ldr	r3, [pc, #4]	; (bc81c <_GLOBAL__sub_I_RGB+0x8>)
   bc816:	2200      	movs	r2, #0
   bc818:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bc81a:	4770      	bx	lr
   bc81c:	2003e6a4 	.word	0x2003e6a4

000bc820 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bc820:	2100      	movs	r1, #0
   bc822:	f7fc bd69 	b.w	b92f8 <hal_spi_release>

000bc826 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bc826:	2100      	movs	r1, #0
   bc828:	f7fc bd5e 	b.w	b92e8 <hal_spi_acquire>

000bc82c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bc82c:	b510      	push	{r4, lr}
   bc82e:	4604      	mov	r4, r0
   bc830:	4608      	mov	r0, r1
{
    _spi = spi;
   bc832:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bc834:	f7fc fd28 	bl	b9288 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bc838:	2300      	movs	r3, #0
   bc83a:	6063      	str	r3, [r4, #4]
}
   bc83c:	4620      	mov	r0, r4
   bc83e:	bd10      	pop	{r4, pc}

000bc840 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bc840:	b513      	push	{r0, r1, r4, lr}
   bc842:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bc844:	7800      	ldrb	r0, [r0, #0]
   bc846:	f7ff ffee 	bl	bc826 <_ZN8SPIClass4lockEv.isra.0>
   bc84a:	b958      	cbnz	r0, bc864 <_ZN8SPIClass5beginEv+0x24>
   bc84c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bc84e:	9001      	str	r0, [sp, #4]
   bc850:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bc854:	f7fc fd08 	bl	b9268 <hal_spi_begin>
        unlock();
   bc858:	9801      	ldr	r0, [sp, #4]
    }
}
   bc85a:	b002      	add	sp, #8
   bc85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bc860:	f7ff bfde 	b.w	bc820 <_ZN8SPIClass6unlockEv.isra.0>
   bc864:	b002      	add	sp, #8
   bc866:	bd10      	pop	{r4, pc}

000bc868 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bc868:	7800      	ldrb	r0, [r0, #0]
   bc86a:	f7ff bfd9 	b.w	bc820 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bc870 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bc870:	0840      	lsrs	r0, r0, #1
{
   bc872:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bc874:	6018      	str	r0, [r3, #0]
   bc876:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bc878:	6818      	ldr	r0, [r3, #0]
   bc87a:	4288      	cmp	r0, r1
   bc87c:	b2e5      	uxtb	r5, r4
   bc87e:	d906      	bls.n	bc88e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bc880:	3401      	adds	r4, #1
   bc882:	2c08      	cmp	r4, #8
   bc884:	d002      	beq.n	bc88c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bc886:	0840      	lsrs	r0, r0, #1
   bc888:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bc88a:	e7f5      	b.n	bc878 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bc88c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bc88e:	4b02      	ldr	r3, [pc, #8]	; (bc898 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bc890:	5d5b      	ldrb	r3, [r3, r5]
   bc892:	7013      	strb	r3, [r2, #0]
}
   bc894:	bd30      	pop	{r4, r5, pc}
   bc896:	bf00      	nop
   bc898:	000c1838 	.word	0x000c1838

000bc89c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bc89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc8a0:	4606      	mov	r6, r0
   bc8a2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bc8a4:	7800      	ldrb	r0, [r0, #0]
{
   bc8a6:	460c      	mov	r4, r1
    CHECK(lock());
   bc8a8:	f7ff ffbd 	bl	bc826 <_ZN8SPIClass4lockEv.isra.0>
   bc8ac:	2800      	cmp	r0, #0
   bc8ae:	db1b      	blt.n	bc8e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bc8b0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bc8b2:	2214      	movs	r2, #20
   bc8b4:	2100      	movs	r1, #0
   bc8b6:	a809      	add	r0, sp, #36	; 0x24
   bc8b8:	f001 fbe9 	bl	be08e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bc8bc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bc8be:	2200      	movs	r2, #0
   bc8c0:	a909      	add	r1, sp, #36	; 0x24
   bc8c2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bc8c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bc8c8:	f7fc fcee 	bl	b92a8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bc8cc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bc8d0:	b113      	cbz	r3, bc8d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bc8d2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bc8d6:	b155      	cbz	r5, bc8ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bc8d8:	2700      	movs	r7, #0
   bc8da:	46b9      	mov	r9, r7
   bc8dc:	46b8      	mov	r8, r7
   bc8de:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bc8e0:	7923      	ldrb	r3, [r4, #4]
   bc8e2:	b15d      	cbz	r5, bc8fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bc8e4:	b1c3      	cbz	r3, bc918 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bc8e6:	2000      	movs	r0, #0
}
   bc8e8:	b00f      	add	sp, #60	; 0x3c
   bc8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bc8ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bc8f2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bc8f6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bc8fa:	e7f1      	b.n	bc8e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bc8fc:	2b00      	cmp	r3, #0
   bc8fe:	d135      	bne.n	bc96c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bc900:	68a3      	ldr	r3, [r4, #8]
   bc902:	4543      	cmp	r3, r8
   bc904:	d108      	bne.n	bc918 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bc906:	f88d 9020 	strb.w	r9, [sp, #32]
   bc90a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bc90e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bc912:	89a3      	ldrh	r3, [r4, #12]
   bc914:	429a      	cmp	r2, r3
   bc916:	d0e6      	beq.n	bc8e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bc918:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bc91a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bc91c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bc920:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc922:	ab04      	add	r3, sp, #16
   bc924:	f10d 020f 	add.w	r2, sp, #15
   bc928:	f7ff ffa2 	bl	bc870 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bc92c:	7921      	ldrb	r1, [r4, #4]
   bc92e:	b985      	cbnz	r5, bc952 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bc930:	b989      	cbnz	r1, bc956 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bc932:	68a3      	ldr	r3, [r4, #8]
   bc934:	4543      	cmp	r3, r8
   bc936:	d30e      	bcc.n	bc956 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bc938:	f88d 9020 	strb.w	r9, [sp, #32]
   bc93c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bc940:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bc944:	89a3      	ldrh	r3, [r4, #12]
   bc946:	429a      	cmp	r2, r3
   bc948:	d105      	bne.n	bc956 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bc94a:	9b04      	ldr	r3, [sp, #16]
   bc94c:	4543      	cmp	r3, r8
   bc94e:	d102      	bne.n	bc956 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bc950:	e7c9      	b.n	bc8e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bc952:	2900      	cmp	r1, #0
   bc954:	d1f9      	bne.n	bc94a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bc956:	2300      	movs	r3, #0
   bc958:	9301      	str	r3, [sp, #4]
   bc95a:	7b63      	ldrb	r3, [r4, #13]
   bc95c:	9300      	str	r3, [sp, #0]
   bc95e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc962:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bc964:	7830      	ldrb	r0, [r6, #0]
   bc966:	f7fc fcb7 	bl	b92d8 <hal_spi_set_settings>
   bc96a:	e7bc      	b.n	bc8e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bc96c:	e9cd 5500 	strd	r5, r5, [sp]
   bc970:	462b      	mov	r3, r5
   bc972:	462a      	mov	r2, r5
   bc974:	2101      	movs	r1, #1
   bc976:	e7f5      	b.n	bc964 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bc978 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bc978:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bc97a:	7800      	ldrb	r0, [r0, #0]
   bc97c:	f7fc fc7c 	bl	b9278 <hal_spi_transfer>
}
   bc980:	b2c0      	uxtb	r0, r0
   bc982:	bd08      	pop	{r3, pc}

000bc984 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bc984:	b530      	push	{r4, r5, lr}
   bc986:	b087      	sub	sp, #28
   bc988:	4604      	mov	r4, r0
   bc98a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bc98c:	9500      	str	r5, [sp, #0]
   bc98e:	7800      	ldrb	r0, [r0, #0]
   bc990:	f7fc fc92 	bl	b92b8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bc994:	b93d      	cbnz	r5, bc9a6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bc996:	7820      	ldrb	r0, [r4, #0]
   bc998:	a902      	add	r1, sp, #8
   bc99a:	f7fc fc95 	bl	b92c8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bc99e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bc9a2:	07db      	lsls	r3, r3, #31
   bc9a4:	d4f7      	bmi.n	bc996 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bc9a6:	b007      	add	sp, #28
   bc9a8:	bd30      	pop	{r4, r5, pc}

000bc9aa <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bc9aa:	b510      	push	{r4, lr}
   bc9ac:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc9ae:	f7fc fba3 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bc9b2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bc9b4:	6823      	ldr	r3, [r4, #0]
   bc9b6:	4620      	mov	r0, r4
   bc9b8:	695b      	ldr	r3, [r3, #20]
   bc9ba:	4798      	blx	r3
    if (c >= 0) return c;
   bc9bc:	2800      	cmp	r0, #0
   bc9be:	da08      	bge.n	bc9d2 <_ZN6Stream9timedReadEv+0x28>
   bc9c0:	f7fc fb9a 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bc9c4:	68e3      	ldr	r3, [r4, #12]
   bc9c6:	1ac0      	subs	r0, r0, r3
   bc9c8:	68a3      	ldr	r3, [r4, #8]
   bc9ca:	4298      	cmp	r0, r3
   bc9cc:	d3f2      	bcc.n	bc9b4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bc9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bc9d2:	bd10      	pop	{r4, pc}

000bc9d4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bc9d4:	b570      	push	{r4, r5, r6, lr}
   bc9d6:	460d      	mov	r5, r1
  String ret;
   bc9d8:	4909      	ldr	r1, [pc, #36]	; (bca00 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bc9da:	4604      	mov	r4, r0
   bc9dc:	4616      	mov	r6, r2
  String ret;
   bc9de:	f000 f85c 	bl	bca9a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bc9e2:	4628      	mov	r0, r5
   bc9e4:	f7ff ffe1 	bl	bc9aa <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bc9e8:	2800      	cmp	r0, #0
   bc9ea:	db06      	blt.n	bc9fa <_ZN6Stream15readStringUntilEc+0x26>
   bc9ec:	4286      	cmp	r6, r0
   bc9ee:	d004      	beq.n	bc9fa <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bc9f0:	b2c1      	uxtb	r1, r0
   bc9f2:	4620      	mov	r0, r4
   bc9f4:	f000 f8d0 	bl	bcb98 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bc9f8:	e7f3      	b.n	bc9e2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bc9fa:	4620      	mov	r0, r4
   bc9fc:	bd70      	pop	{r4, r5, r6, pc}
   bc9fe:	bf00      	nop
   bca00:	000c071b 	.word	0x000c071b

000bca04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bca04:	b510      	push	{r4, lr}
   bca06:	4604      	mov	r4, r0
{
	free(buffer);
   bca08:	6800      	ldr	r0, [r0, #0]
   bca0a:	f7fc fde9 	bl	b95e0 <free>
}
   bca0e:	4620      	mov	r0, r4
   bca10:	bd10      	pop	{r4, pc}

000bca12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bca12:	b510      	push	{r4, lr}
   bca14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bca16:	6800      	ldr	r0, [r0, #0]
   bca18:	b108      	cbz	r0, bca1e <_ZN6String10invalidateEv+0xc>
   bca1a:	f7fc fde1 	bl	b95e0 <free>
	buffer = NULL;
   bca1e:	2300      	movs	r3, #0
	capacity = len = 0;
   bca20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bca24:	6023      	str	r3, [r4, #0]
}
   bca26:	bd10      	pop	{r4, pc}

000bca28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bca28:	b538      	push	{r3, r4, r5, lr}
   bca2a:	4604      	mov	r4, r0
   bca2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bca2e:	6800      	ldr	r0, [r0, #0]
   bca30:	3101      	adds	r1, #1
   bca32:	f7fc fddd 	bl	b95f0 <realloc>
	if (newbuffer) {
   bca36:	b110      	cbz	r0, bca3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bca38:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bca3c:	2001      	movs	r0, #1
	}
	return 0;
}
   bca3e:	bd38      	pop	{r3, r4, r5, pc}

000bca40 <_ZN6String7reserveEj>:
{
   bca40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bca42:	6803      	ldr	r3, [r0, #0]
{
   bca44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bca46:	b123      	cbz	r3, bca52 <_ZN6String7reserveEj+0x12>
   bca48:	6843      	ldr	r3, [r0, #4]
   bca4a:	428b      	cmp	r3, r1
   bca4c:	d301      	bcc.n	bca52 <_ZN6String7reserveEj+0x12>
   bca4e:	2001      	movs	r0, #1
}
   bca50:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bca52:	4620      	mov	r0, r4
   bca54:	f7ff ffe8 	bl	bca28 <_ZN6String12changeBufferEj>
   bca58:	2800      	cmp	r0, #0
   bca5a:	d0f9      	beq.n	bca50 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bca5c:	68a3      	ldr	r3, [r4, #8]
   bca5e:	2b00      	cmp	r3, #0
   bca60:	d1f5      	bne.n	bca4e <_ZN6String7reserveEj+0xe>
   bca62:	6822      	ldr	r2, [r4, #0]
   bca64:	7013      	strb	r3, [r2, #0]
   bca66:	e7f2      	b.n	bca4e <_ZN6String7reserveEj+0xe>

000bca68 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bca68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bca6a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bca6c:	4611      	mov	r1, r2
   bca6e:	9201      	str	r2, [sp, #4]
{
   bca70:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bca72:	f7ff ffe5 	bl	bca40 <_ZN6String7reserveEj>
   bca76:	9a01      	ldr	r2, [sp, #4]
   bca78:	b928      	cbnz	r0, bca86 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bca7a:	4620      	mov	r0, r4
   bca7c:	f7ff ffc9 	bl	bca12 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bca80:	4620      	mov	r0, r4
   bca82:	b003      	add	sp, #12
   bca84:	bd30      	pop	{r4, r5, pc}
	len = length;
   bca86:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bca88:	4629      	mov	r1, r5
   bca8a:	6820      	ldr	r0, [r4, #0]
   bca8c:	f001 fad7 	bl	be03e <memcpy>
	buffer[len] = 0;
   bca90:	6822      	ldr	r2, [r4, #0]
   bca92:	68a3      	ldr	r3, [r4, #8]
   bca94:	2100      	movs	r1, #0
   bca96:	54d1      	strb	r1, [r2, r3]
	return *this;
   bca98:	e7f2      	b.n	bca80 <_ZN6String4copyEPKcj+0x18>

000bca9a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bca9a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bca9c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bca9e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bcaa2:	4604      	mov	r4, r0
	len = 0;
   bcaa4:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcaa6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bcaa8:	b141      	cbz	r1, bcabc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bcaaa:	4608      	mov	r0, r1
   bcaac:	9101      	str	r1, [sp, #4]
   bcaae:	f001 fba2 	bl	be1f6 <strlen>
   bcab2:	9901      	ldr	r1, [sp, #4]
   bcab4:	4602      	mov	r2, r0
   bcab6:	4620      	mov	r0, r4
   bcab8:	f7ff ffd6 	bl	bca68 <_ZN6String4copyEPKcj>
}
   bcabc:	4620      	mov	r0, r4
   bcabe:	b002      	add	sp, #8
   bcac0:	bd10      	pop	{r4, pc}

000bcac2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bcac2:	b538      	push	{r3, r4, r5, lr}
   bcac4:	4605      	mov	r5, r0
	if (buffer) {
   bcac6:	6800      	ldr	r0, [r0, #0]
{
   bcac8:	460c      	mov	r4, r1
	if (buffer) {
   bcaca:	b168      	cbz	r0, bcae8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bcacc:	686a      	ldr	r2, [r5, #4]
   bcace:	688b      	ldr	r3, [r1, #8]
   bcad0:	429a      	cmp	r2, r3
   bcad2:	d307      	bcc.n	bcae4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bcad4:	6809      	ldr	r1, [r1, #0]
   bcad6:	f001 fb68 	bl	be1aa <strcpy>
			len = rhs.len;
   bcada:	68a3      	ldr	r3, [r4, #8]
   bcadc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bcade:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bcae0:	60a3      	str	r3, [r4, #8]
}
   bcae2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bcae4:	f7fc fd7c 	bl	b95e0 <free>
	buffer = rhs.buffer;
   bcae8:	6823      	ldr	r3, [r4, #0]
   bcaea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bcaec:	6863      	ldr	r3, [r4, #4]
   bcaee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bcaf0:	68a3      	ldr	r3, [r4, #8]
   bcaf2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bcaf4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bcaf6:	e9c4 3300 	strd	r3, r3, [r4]
   bcafa:	e7f1      	b.n	bcae0 <_ZN6String4moveERS_+0x1e>

000bcafc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bcafc:	b510      	push	{r4, lr}
	buffer = NULL;
   bcafe:	2300      	movs	r3, #0
	capacity = 0;
   bcb00:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bcb04:	4604      	mov	r4, r0
	len = 0;
   bcb06:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcb08:	7303      	strb	r3, [r0, #12]
	move(rval);
   bcb0a:	f7ff ffda 	bl	bcac2 <_ZN6String4moveERS_>
}
   bcb0e:	4620      	mov	r0, r4
   bcb10:	bd10      	pop	{r4, pc}

000bcb12 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bcb12:	4288      	cmp	r0, r1
{
   bcb14:	b510      	push	{r4, lr}
   bcb16:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bcb18:	d005      	beq.n	bcb26 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bcb1a:	680b      	ldr	r3, [r1, #0]
   bcb1c:	b12b      	cbz	r3, bcb2a <_ZN6StringaSERKS_+0x18>
   bcb1e:	688a      	ldr	r2, [r1, #8]
   bcb20:	4619      	mov	r1, r3
   bcb22:	f7ff ffa1 	bl	bca68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bcb26:	4620      	mov	r0, r4
   bcb28:	bd10      	pop	{r4, pc}
	else invalidate();
   bcb2a:	f7ff ff72 	bl	bca12 <_ZN6String10invalidateEv>
   bcb2e:	e7fa      	b.n	bcb26 <_ZN6StringaSERKS_+0x14>

000bcb30 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bcb30:	b510      	push	{r4, lr}
	buffer = NULL;
   bcb32:	2300      	movs	r3, #0
String::String(const String &value)
   bcb34:	4604      	mov	r4, r0
	capacity = 0;
   bcb36:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bcb3a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcb3c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bcb3e:	f7ff ffe8 	bl	bcb12 <_ZN6StringaSERKS_>
}
   bcb42:	4620      	mov	r0, r4
   bcb44:	bd10      	pop	{r4, pc}

000bcb46 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bcb46:	b513      	push	{r0, r1, r4, lr}
   bcb48:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bcb4a:	b159      	cbz	r1, bcb64 <_ZN6StringaSEPKc+0x1e>
   bcb4c:	4608      	mov	r0, r1
   bcb4e:	9101      	str	r1, [sp, #4]
   bcb50:	f001 fb51 	bl	be1f6 <strlen>
   bcb54:	9901      	ldr	r1, [sp, #4]
   bcb56:	4602      	mov	r2, r0
   bcb58:	4620      	mov	r0, r4
   bcb5a:	f7ff ff85 	bl	bca68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bcb5e:	4620      	mov	r0, r4
   bcb60:	b002      	add	sp, #8
   bcb62:	bd10      	pop	{r4, pc}
	else invalidate();
   bcb64:	f7ff ff55 	bl	bca12 <_ZN6String10invalidateEv>
   bcb68:	e7f9      	b.n	bcb5e <_ZN6StringaSEPKc+0x18>

000bcb6a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bcb6a:	b570      	push	{r4, r5, r6, lr}
   bcb6c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bcb6e:	460e      	mov	r6, r1
   bcb70:	b909      	cbnz	r1, bcb76 <_ZN6String6concatEPKcj+0xc>
   bcb72:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bcb74:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bcb76:	b16a      	cbz	r2, bcb94 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bcb78:	6884      	ldr	r4, [r0, #8]
   bcb7a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bcb7c:	4621      	mov	r1, r4
   bcb7e:	f7ff ff5f 	bl	bca40 <_ZN6String7reserveEj>
   bcb82:	2800      	cmp	r0, #0
   bcb84:	d0f5      	beq.n	bcb72 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bcb86:	6828      	ldr	r0, [r5, #0]
   bcb88:	68ab      	ldr	r3, [r5, #8]
   bcb8a:	4631      	mov	r1, r6
   bcb8c:	4418      	add	r0, r3
   bcb8e:	f001 fb0c 	bl	be1aa <strcpy>
	len = newlen;
   bcb92:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bcb94:	2001      	movs	r0, #1
   bcb96:	e7ed      	b.n	bcb74 <_ZN6String6concatEPKcj+0xa>

000bcb98 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bcb98:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bcb9a:	2300      	movs	r3, #0
	buf[0] = c;
   bcb9c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bcba0:	2201      	movs	r2, #1
   bcba2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bcba4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bcba8:	f7ff ffdf 	bl	bcb6a <_ZN6String6concatEPKcj>
}
   bcbac:	b003      	add	sp, #12
   bcbae:	f85d fb04 	ldr.w	pc, [sp], #4

000bcbb2 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bcbb2:	6802      	ldr	r2, [r0, #0]
{
   bcbb4:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bcbb6:	6809      	ldr	r1, [r1, #0]
   bcbb8:	b162      	cbz	r2, bcbd4 <_ZNK6String9compareToERKS_+0x22>
   bcbba:	b941      	cbnz	r1, bcbce <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bcbbc:	6880      	ldr	r0, [r0, #8]
   bcbbe:	b160      	cbz	r0, bcbda <_ZNK6String9compareToERKS_+0x28>
   bcbc0:	7810      	ldrb	r0, [r2, #0]
   bcbc2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bcbc4:	6898      	ldr	r0, [r3, #8]
   bcbc6:	b140      	cbz	r0, bcbda <_ZNK6String9compareToERKS_+0x28>
   bcbc8:	7809      	ldrb	r1, [r1, #0]
   bcbca:	4248      	negs	r0, r1
   bcbcc:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bcbce:	4610      	mov	r0, r2
   bcbd0:	f001 bae1 	b.w	be196 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bcbd4:	2900      	cmp	r1, #0
   bcbd6:	d1f5      	bne.n	bcbc4 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bcbd8:	4608      	mov	r0, r1
}
   bcbda:	4770      	bx	lr

000bcbdc <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bcbdc:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bcbde:	6882      	ldr	r2, [r0, #8]
   bcbe0:	688b      	ldr	r3, [r1, #8]
   bcbe2:	429a      	cmp	r2, r3
   bcbe4:	d105      	bne.n	bcbf2 <_ZNK6String6equalsERKS_+0x16>
   bcbe6:	f7ff ffe4 	bl	bcbb2 <_ZNK6String9compareToERKS_>
   bcbea:	fab0 f080 	clz	r0, r0
   bcbee:	0940      	lsrs	r0, r0, #5
}
   bcbf0:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bcbf2:	2000      	movs	r0, #0
   bcbf4:	e7fc      	b.n	bcbf0 <_ZNK6String6equalsERKS_+0x14>

000bcbf6 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bcbf6:	6883      	ldr	r3, [r0, #8]
   bcbf8:	428b      	cmp	r3, r1
   bcbfa:	d903      	bls.n	bcc04 <_ZNK6StringixEj+0xe>
   bcbfc:	6800      	ldr	r0, [r0, #0]
   bcbfe:	b110      	cbz	r0, bcc06 <_ZNK6StringixEj+0x10>
	return buffer[index];
   bcc00:	5c40      	ldrb	r0, [r0, r1]
   bcc02:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bcc04:	2000      	movs	r0, #0
}
   bcc06:	4770      	bx	lr

000bcc08 <_ZNK6String6charAtEj>:
	return operator[](loc);
   bcc08:	f7ff bff5 	b.w	bcbf6 <_ZNK6StringixEj>

000bcc0c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bcc0c:	4b05      	ldr	r3, [pc, #20]	; (bcc24 <_GLOBAL__sub_I_System+0x18>)
   bcc0e:	2202      	movs	r2, #2
   bcc10:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bcc12:	4b05      	ldr	r3, [pc, #20]	; (bcc28 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bcc14:	4a05      	ldr	r2, [pc, #20]	; (bcc2c <_GLOBAL__sub_I_System+0x20>)
   bcc16:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bcc18:	2000      	movs	r0, #0
   bcc1a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bcc1e:	f7fc bc0b 	b.w	b9438 <set_system_mode>
   bcc22:	bf00      	nop
   bcc24:	2003e6c0 	.word	0x2003e6c0
   bcc28:	2003e6b4 	.word	0x2003e6b4
   bcc2c:	ffff0000 	.word	0xffff0000

000bcc30 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bcc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bcc34:	4a15      	ldr	r2, [pc, #84]	; (bcc8c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bcc36:	f8df 8060 	ldr.w	r8, [pc, #96]	; bcc98 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bcc3a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bcc3e:	1980      	adds	r0, r0, r6
   bcc40:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bcc44:	4b12      	ldr	r3, [pc, #72]	; (bcc90 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bcc46:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bcc4a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bcc4e:	1986      	adds	r6, r0, r6
   bcc50:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bcc54:	42bb      	cmp	r3, r7
   bcc56:	bf08      	it	eq
   bcc58:	42b2      	cmpeq	r2, r6
{
   bcc5a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bcc5c:	d013      	beq.n	bcc86 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bcc5e:	a903      	add	r1, sp, #12
   bcc60:	4668      	mov	r0, sp
   bcc62:	e9cd 6700 	strd	r6, r7, [sp]
   bcc66:	f7fc fd13 	bl	b9690 <localtime_r>
	calendar_time.tm_year += 1900;
   bcc6a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc6c:	4d09      	ldr	r5, [pc, #36]	; (bcc94 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bcc6e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc72:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bcc74:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bcc78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bcc7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bcc7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bcc7e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc82:	6823      	ldr	r3, [r4, #0]
   bcc84:	602b      	str	r3, [r5, #0]
    }
}
   bcc86:	b00c      	add	sp, #48	; 0x30
   bcc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcc8c:	2003e6f8 	.word	0x2003e6f8
   bcc90:	2003e6f0 	.word	0x2003e6f0
   bcc94:	2003e6c8 	.word	0x2003e6c8
   bcc98:	2003e700 	.word	0x2003e700

000bcc9c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bcc9c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bcc9e:	2000      	movs	r0, #0
   bcca0:	f7fc fc26 	bl	b94f0 <spark_sync_time_pending>
   bcca4:	b128      	cbz	r0, bccb2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bcca6:	f7fc fc0b 	bl	b94c0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bccaa:	f080 0001 	eor.w	r0, r0, #1
   bccae:	b2c0      	uxtb	r0, r0
    }
   bccb0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bccb2:	2001      	movs	r0, #1
   bccb4:	e7fc      	b.n	bccb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bccb8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bccb8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bccba:	f7ff ffb9 	bl	bcc30 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bccbe:	4b02      	ldr	r3, [pc, #8]	; (bccc8 <_ZN9TimeClass5monthEx+0x10>)
   bccc0:	6918      	ldr	r0, [r3, #16]
}
   bccc2:	3001      	adds	r0, #1
   bccc4:	bd08      	pop	{r3, pc}
   bccc6:	bf00      	nop
   bccc8:	2003e6c8 	.word	0x2003e6c8

000bcccc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bcccc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bccce:	2000      	movs	r0, #0
   bccd0:	f7fc fa1a 	bl	b9108 <hal_rtc_time_is_valid>
    if (rtcstate)
   bccd4:	4604      	mov	r4, r0
   bccd6:	b9a0      	cbnz	r0, bcd02 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bccd8:	f7fc fba6 	bl	b9428 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bccdc:	2801      	cmp	r0, #1
   bccde:	d110      	bne.n	bcd02 <_ZN9TimeClass7isValidEv+0x36>
   bcce0:	4620      	mov	r0, r4
   bcce2:	f7fc fbc9 	bl	b9478 <system_thread_get_state>
   bcce6:	b960      	cbnz	r0, bcd02 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bcce8:	f7ff ffd8 	bl	bcc9c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bccec:	b910      	cbnz	r0, bccf4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bccee:	f7fc fbdf 	bl	b94b0 <spark_process>
        while (_while() && !_condition()) {
   bccf2:	e7f9      	b.n	bcce8 <_ZN9TimeClass7isValidEv+0x1c>
   bccf4:	f7ff ffd2 	bl	bcc9c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bccf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bccfc:	2000      	movs	r0, #0
   bccfe:	f7fc ba03 	b.w	b9108 <hal_rtc_time_is_valid>
}
   bcd02:	4620      	mov	r0, r4
   bcd04:	bd10      	pop	{r4, pc}

000bcd06 <_ZN9TimeClass3nowEv>:
{
   bcd06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bcd08:	f7ff ffe0 	bl	bcccc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bcd0c:	2210      	movs	r2, #16
   bcd0e:	2100      	movs	r1, #0
   bcd10:	4668      	mov	r0, sp
   bcd12:	f001 f9bc 	bl	be08e <memset>
    hal_rtc_get_time(&tv, nullptr);
   bcd16:	2100      	movs	r1, #0
   bcd18:	4668      	mov	r0, sp
   bcd1a:	f7fc f9fd 	bl	b9118 <hal_rtc_get_time>
}
   bcd1e:	9800      	ldr	r0, [sp, #0]
   bcd20:	b005      	add	sp, #20
   bcd22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bcd28 <_ZN9TimeClass4hourEv>:
{
   bcd28:	b508      	push	{r3, lr}
	return hour(now());
   bcd2a:	f7ff ffec 	bl	bcd06 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd2e:	17c1      	asrs	r1, r0, #31
   bcd30:	f7ff ff7e 	bl	bcc30 <_ZL22Refresh_UnixTime_Cachex>
}
   bcd34:	4b01      	ldr	r3, [pc, #4]	; (bcd3c <_ZN9TimeClass4hourEv+0x14>)
   bcd36:	6898      	ldr	r0, [r3, #8]
   bcd38:	bd08      	pop	{r3, pc}
   bcd3a:	bf00      	nop
   bcd3c:	2003e6c8 	.word	0x2003e6c8

000bcd40 <_ZN9TimeClass6minuteEv>:
{
   bcd40:	b508      	push	{r3, lr}
	return minute(now());
   bcd42:	f7ff ffe0 	bl	bcd06 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd46:	17c1      	asrs	r1, r0, #31
   bcd48:	f7ff ff72 	bl	bcc30 <_ZL22Refresh_UnixTime_Cachex>
}
   bcd4c:	4b01      	ldr	r3, [pc, #4]	; (bcd54 <_ZN9TimeClass6minuteEv+0x14>)
   bcd4e:	6858      	ldr	r0, [r3, #4]
   bcd50:	bd08      	pop	{r3, pc}
   bcd52:	bf00      	nop
   bcd54:	2003e6c8 	.word	0x2003e6c8

000bcd58 <_ZN9TimeClass6secondEv>:
{
   bcd58:	b508      	push	{r3, lr}
	return second(now());
   bcd5a:	f7ff ffd4 	bl	bcd06 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd5e:	17c1      	asrs	r1, r0, #31
   bcd60:	f7ff ff66 	bl	bcc30 <_ZL22Refresh_UnixTime_Cachex>
}
   bcd64:	4b01      	ldr	r3, [pc, #4]	; (bcd6c <_ZN9TimeClass6secondEv+0x14>)
   bcd66:	6818      	ldr	r0, [r3, #0]
   bcd68:	bd08      	pop	{r3, pc}
   bcd6a:	bf00      	nop
   bcd6c:	2003e6c8 	.word	0x2003e6c8

000bcd70 <_ZN9TimeClass3dayEv>:
{
   bcd70:	b508      	push	{r3, lr}
	return day(now());
   bcd72:	f7ff ffc8 	bl	bcd06 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd76:	17c1      	asrs	r1, r0, #31
   bcd78:	f7ff ff5a 	bl	bcc30 <_ZL22Refresh_UnixTime_Cachex>
}
   bcd7c:	4b01      	ldr	r3, [pc, #4]	; (bcd84 <_ZN9TimeClass3dayEv+0x14>)
   bcd7e:	68d8      	ldr	r0, [r3, #12]
   bcd80:	bd08      	pop	{r3, pc}
   bcd82:	bf00      	nop
   bcd84:	2003e6c8 	.word	0x2003e6c8

000bcd88 <_ZN9TimeClass5monthEv>:
{
   bcd88:	b508      	push	{r3, lr}
	return month(now());
   bcd8a:	f7ff ffbc 	bl	bcd06 <_ZN9TimeClass3nowEv>
}
   bcd8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bcd92:	17c1      	asrs	r1, r0, #31
   bcd94:	f7ff bf90 	b.w	bccb8 <_ZN9TimeClass5monthEx>

000bcd98 <_ZN9TimeClass4yearEv>:
{
   bcd98:	b508      	push	{r3, lr}
	return year(now());
   bcd9a:	f7ff ffb4 	bl	bcd06 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd9e:	17c1      	asrs	r1, r0, #31
   bcda0:	f7ff ff46 	bl	bcc30 <_ZL22Refresh_UnixTime_Cachex>
}
   bcda4:	4b01      	ldr	r3, [pc, #4]	; (bcdac <_ZN9TimeClass4yearEv+0x14>)
   bcda6:	6958      	ldr	r0, [r3, #20]
   bcda8:	bd08      	pop	{r3, pc}
   bcdaa:	bf00      	nop
   bcdac:	2003e6c8 	.word	0x2003e6c8

000bcdb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bcdb0:	4b02      	ldr	r3, [pc, #8]	; (bcdbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bcdb2:	681a      	ldr	r2, [r3, #0]
   bcdb4:	4b02      	ldr	r3, [pc, #8]	; (bcdc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bcdb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bcdb8:	4770      	bx	lr
   bcdba:	bf00      	nop
   bcdbc:	2003da8c 	.word	0x2003da8c
   bcdc0:	2003e6c4 	.word	0x2003e6c4

000bcdc4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bcdc4:	4770      	bx	lr

000bcdc6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bcdc6:	7441      	strb	r1, [r0, #17]
}
   bcdc8:	4770      	bx	lr

000bcdca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bcdca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bcdcc:	7c00      	ldrb	r0, [r0, #16]
   bcdce:	f7fc facb 	bl	b9368 <hal_usart_available_data_for_write>
}
   bcdd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcdd6:	bd08      	pop	{r3, pc}

000bcdd8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bcdd8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bcdda:	7c00      	ldrb	r0, [r0, #16]
   bcddc:	f7fc fa9c 	bl	b9318 <hal_usart_available>
}
   bcde0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcde4:	bd08      	pop	{r3, pc}

000bcde6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bcde6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bcde8:	7c00      	ldrb	r0, [r0, #16]
   bcdea:	f7fc faa5 	bl	b9338 <hal_usart_peek>
}
   bcdee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcdf2:	bd08      	pop	{r3, pc}

000bcdf4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bcdf4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bcdf6:	7c00      	ldrb	r0, [r0, #16]
   bcdf8:	f7fc fa96 	bl	b9328 <hal_usart_read>
}
   bcdfc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bce00:	bd08      	pop	{r3, pc}

000bce02 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bce02:	7c00      	ldrb	r0, [r0, #16]
   bce04:	f7fc baa0 	b.w	b9348 <hal_usart_flush>

000bce08 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bce08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bce0a:	7c45      	ldrb	r5, [r0, #17]
{
   bce0c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bce0e:	b12d      	cbz	r5, bce1c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bce10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bce12:	b003      	add	sp, #12
   bce14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bce18:	f7fc ba76 	b.w	b9308 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bce1c:	7c00      	ldrb	r0, [r0, #16]
   bce1e:	9101      	str	r1, [sp, #4]
   bce20:	f7fc faa2 	bl	b9368 <hal_usart_available_data_for_write>
   bce24:	2800      	cmp	r0, #0
   bce26:	9901      	ldr	r1, [sp, #4]
   bce28:	dcf2      	bgt.n	bce10 <_ZN11USARTSerial5writeEh+0x8>
}
   bce2a:	4628      	mov	r0, r5
   bce2c:	b003      	add	sp, #12
   bce2e:	bd30      	pop	{r4, r5, pc}

000bce30 <_ZN11USARTSerialD0Ev>:
   bce30:	b510      	push	{r4, lr}
   bce32:	2114      	movs	r1, #20
   bce34:	4604      	mov	r4, r0
   bce36:	f7f7 f932 	bl	b409e <_ZdlPvj>
   bce3a:	4620      	mov	r0, r4
   bce3c:	bd10      	pop	{r4, pc}
	...

000bce40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bce40:	b510      	push	{r4, lr}
   bce42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bce46:	4604      	mov	r4, r0
   bce48:	4608      	mov	r0, r1
   bce4a:	4611      	mov	r1, r2
   bce4c:	2200      	movs	r2, #0
   bce4e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bce52:	4b04      	ldr	r3, [pc, #16]	; (bce64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bce54:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bce56:	2301      	movs	r3, #1
  _serial = serial;
   bce58:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bce5a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bce5c:	f7fc fa94 	bl	b9388 <hal_usart_init_ex>
}
   bce60:	4620      	mov	r0, r4
   bce62:	bd10      	pop	{r4, pc}
   bce64:	000c1864 	.word	0x000c1864

000bce68 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bce68:	7c00      	ldrb	r0, [r0, #16]
   bce6a:	2300      	movs	r3, #0
   bce6c:	f7fc ba84 	b.w	b9378 <hal_usart_begin_config>

000bce70 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bce70:	2200      	movs	r2, #0
   bce72:	f7ff bff9 	b.w	bce68 <_ZN11USARTSerial5beginEmm>

000bce76 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bce76:	7441      	strb	r1, [r0, #17]
}
   bce78:	4770      	bx	lr

000bce7a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bce7a:	4770      	bx	lr

000bce7c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bce7c:	4770      	bx	lr

000bce7e <_ZN9USBSerial4readEv>:
{
   bce7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bce80:	2100      	movs	r1, #0
   bce82:	7c00      	ldrb	r0, [r0, #16]
   bce84:	f7fc faa8 	bl	b93d8 <HAL_USB_USART_Receive_Data>
}
   bce88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bce8c:	bd08      	pop	{r3, pc}

000bce8e <_ZN9USBSerial4peekEv>:
{
   bce8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bce90:	2101      	movs	r1, #1
   bce92:	7c00      	ldrb	r0, [r0, #16]
   bce94:	f7fc faa0 	bl	b93d8 <HAL_USB_USART_Receive_Data>
}
   bce98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bce9c:	bd08      	pop	{r3, pc}

000bce9e <_ZN9USBSerial17availableForWriteEv>:
{
   bce9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bcea0:	7c00      	ldrb	r0, [r0, #16]
   bcea2:	f7fc fa91 	bl	b93c8 <HAL_USB_USART_Available_Data_For_Write>
}
   bcea6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bceaa:	bd08      	pop	{r3, pc}

000bceac <_ZN9USBSerial9availableEv>:
{
   bceac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bceae:	7c00      	ldrb	r0, [r0, #16]
   bceb0:	f7fc fa82 	bl	b93b8 <HAL_USB_USART_Available_Data>
}
   bceb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bceb8:	bd08      	pop	{r3, pc}

000bceba <_ZN9USBSerial5writeEh>:
{
   bceba:	b513      	push	{r0, r1, r4, lr}
   bcebc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bcebe:	7c00      	ldrb	r0, [r0, #16]
{
   bcec0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bcec2:	f7fc fa81 	bl	b93c8 <HAL_USB_USART_Available_Data_For_Write>
   bcec6:	2800      	cmp	r0, #0
   bcec8:	9901      	ldr	r1, [sp, #4]
   bceca:	dc01      	bgt.n	bced0 <_ZN9USBSerial5writeEh+0x16>
   bcecc:	7c60      	ldrb	r0, [r4, #17]
   bcece:	b120      	cbz	r0, bceda <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bced0:	7c20      	ldrb	r0, [r4, #16]
   bced2:	f7fc fa89 	bl	b93e8 <HAL_USB_USART_Send_Data>
   bced6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bceda:	b002      	add	sp, #8
   bcedc:	bd10      	pop	{r4, pc}

000bcede <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bcede:	7c00      	ldrb	r0, [r0, #16]
   bcee0:	f7fc ba8a 	b.w	b93f8 <HAL_USB_USART_Flush_Data>

000bcee4 <_ZN9USBSerialD0Ev>:
   bcee4:	b510      	push	{r4, lr}
   bcee6:	2114      	movs	r1, #20
   bcee8:	4604      	mov	r4, r0
   bceea:	f7f7 f8d8 	bl	b409e <_ZdlPvj>
   bceee:	4620      	mov	r0, r4
   bcef0:	bd10      	pop	{r4, pc}
	...

000bcef4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bcef4:	b510      	push	{r4, lr}
   bcef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcefa:	4604      	mov	r4, r0
   bcefc:	4608      	mov	r0, r1
   bcefe:	2100      	movs	r1, #0
   bcf00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bcf04:	4b04      	ldr	r3, [pc, #16]	; (bcf18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bcf06:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcf08:	2301      	movs	r3, #1
  _serial = serial;
   bcf0a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bcf0c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bcf0e:	4611      	mov	r1, r2
   bcf10:	f7fc fa42 	bl	b9398 <HAL_USB_USART_Init>
}
   bcf14:	4620      	mov	r0, r4
   bcf16:	bd10      	pop	{r4, pc}
   bcf18:	000c1894 	.word	0x000c1894

000bcf1c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bcf1c:	7c00      	ldrb	r0, [r0, #16]
   bcf1e:	2200      	movs	r2, #0
   bcf20:	f7fc ba42 	b.w	b93a8 <HAL_USB_USART_Begin>

000bcf24 <_Z19acquireSerialBufferv>:
{
   bcf24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bcf26:	2214      	movs	r2, #20
{
   bcf28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bcf2a:	2100      	movs	r1, #0
   bcf2c:	f001 f8af 	bl	be08e <memset>
}
   bcf30:	4620      	mov	r0, r4
   bcf32:	bd10      	pop	{r4, pc}

000bcf34 <_Z16_fetch_usbserialv>:
{
   bcf34:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcf36:	4c0f      	ldr	r4, [pc, #60]	; (bcf74 <_Z16_fetch_usbserialv+0x40>)
{
   bcf38:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bcf3a:	a803      	add	r0, sp, #12
   bcf3c:	f7ff fff2 	bl	bcf24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcf40:	7821      	ldrb	r1, [r4, #0]
   bcf42:	f3bf 8f5b 	dmb	ish
   bcf46:	f011 0101 	ands.w	r1, r1, #1
   bcf4a:	d10f      	bne.n	bcf6c <_Z16_fetch_usbserialv+0x38>
   bcf4c:	4620      	mov	r0, r4
   bcf4e:	9101      	str	r1, [sp, #4]
   bcf50:	f7f7 f8b4 	bl	b40bc <__cxa_guard_acquire>
   bcf54:	9901      	ldr	r1, [sp, #4]
   bcf56:	b148      	cbz	r0, bcf6c <_Z16_fetch_usbserialv+0x38>
   bcf58:	aa03      	add	r2, sp, #12
   bcf5a:	4807      	ldr	r0, [pc, #28]	; (bcf78 <_Z16_fetch_usbserialv+0x44>)
   bcf5c:	f7ff ffca 	bl	bcef4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bcf60:	4620      	mov	r0, r4
   bcf62:	f7f7 f8b0 	bl	b40c6 <__cxa_guard_release>
   bcf66:	4805      	ldr	r0, [pc, #20]	; (bcf7c <_Z16_fetch_usbserialv+0x48>)
   bcf68:	f001 f84c 	bl	be004 <atexit>
	return _usbserial;
}
   bcf6c:	4802      	ldr	r0, [pc, #8]	; (bcf78 <_Z16_fetch_usbserialv+0x44>)
   bcf6e:	b008      	add	sp, #32
   bcf70:	bd10      	pop	{r4, pc}
   bcf72:	bf00      	nop
   bcf74:	2003e708 	.word	0x2003e708
   bcf78:	2003e70c 	.word	0x2003e70c
   bcf7c:	000bce7b 	.word	0x000bce7b

000bcf80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bcf80:	4b01      	ldr	r3, [pc, #4]	; (bcf88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bcf82:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bcf84:	4770      	bx	lr
   bcf86:	bf00      	nop
   bcf88:	2003da90 	.word	0x2003da90

000bcf8c <serialEventRun>:
{
   bcf8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bcf8e:	4b0b      	ldr	r3, [pc, #44]	; (bcfbc <serialEventRun+0x30>)
   bcf90:	b143      	cbz	r3, bcfa4 <serialEventRun+0x18>
   bcf92:	f7ff ffcf 	bl	bcf34 <_Z16_fetch_usbserialv>
   bcf96:	6803      	ldr	r3, [r0, #0]
   bcf98:	691b      	ldr	r3, [r3, #16]
   bcf9a:	4798      	blx	r3
   bcf9c:	2800      	cmp	r0, #0
   bcf9e:	dd01      	ble.n	bcfa4 <serialEventRun+0x18>
        serialEvent();
   bcfa0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bcfa4:	4b06      	ldr	r3, [pc, #24]	; (bcfc0 <serialEventRun+0x34>)
   bcfa6:	b143      	cbz	r3, bcfba <serialEventRun+0x2e>
   bcfa8:	f000 f958 	bl	bd25c <_Z22__fetch_global_Serial1v>
   bcfac:	6803      	ldr	r3, [r0, #0]
   bcfae:	691b      	ldr	r3, [r3, #16]
   bcfb0:	4798      	blx	r3
   bcfb2:	2800      	cmp	r0, #0
   bcfb4:	dd01      	ble.n	bcfba <serialEventRun+0x2e>
        serialEvent1();
   bcfb6:	f3af 8000 	nop.w
}
   bcfba:	bd08      	pop	{r3, pc}
	...

000bcfc4 <_post_loop>:
{
   bcfc4:	b508      	push	{r3, lr}
	serialEventRun();
   bcfc6:	f7ff ffe1 	bl	bcf8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bcfca:	f7fc f895 	bl	b90f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bcfce:	4b01      	ldr	r3, [pc, #4]	; (bcfd4 <_post_loop+0x10>)
   bcfd0:	6018      	str	r0, [r3, #0]
}
   bcfd2:	bd08      	pop	{r3, pc}
   bcfd4:	2003e728 	.word	0x2003e728

000bcfd8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bcfd8:	4805      	ldr	r0, [pc, #20]	; (bcff0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bcfda:	4a06      	ldr	r2, [pc, #24]	; (bcff4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bcfdc:	4906      	ldr	r1, [pc, #24]	; (bcff8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bcfde:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bcfe0:	1a12      	subs	r2, r2, r0
   bcfe2:	f001 f82c 	bl	be03e <memcpy>
    __backup_sram_signature = signature;
   bcfe6:	4b05      	ldr	r3, [pc, #20]	; (bcffc <_Z33system_initialize_user_backup_ramv+0x24>)
   bcfe8:	4a05      	ldr	r2, [pc, #20]	; (bd000 <_Z33system_initialize_user_backup_ramv+0x28>)
   bcfea:	601a      	str	r2, [r3, #0]
}
   bcfec:	bd08      	pop	{r3, pc}
   bcfee:	bf00      	nop
   bcff0:	2003f400 	.word	0x2003f400
   bcff4:	2003f404 	.word	0x2003f404
   bcff8:	000c1e24 	.word	0x000c1e24
   bcffc:	2003f400 	.word	0x2003f400
   bd000:	9a271c1e 	.word	0x9a271c1e

000bd004 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd004:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd006:	2300      	movs	r3, #0
   bd008:	9300      	str	r3, [sp, #0]
   bd00a:	461a      	mov	r2, r3
   bd00c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd010:	f7fc fa44 	bl	b949c <system_ctrl_set_result>
}
   bd014:	b003      	add	sp, #12
   bd016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd01c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd01c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd01e:	8843      	ldrh	r3, [r0, #2]
   bd020:	2b0a      	cmp	r3, #10
   bd022:	d008      	beq.n	bd036 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd024:	2b50      	cmp	r3, #80	; 0x50
   bd026:	d10b      	bne.n	bd040 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd028:	4b09      	ldr	r3, [pc, #36]	; (bd050 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd02a:	681b      	ldr	r3, [r3, #0]
   bd02c:	b14b      	cbz	r3, bd042 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd02e:	b003      	add	sp, #12
   bd030:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd034:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd036:	f7ff ffe5 	bl	bd004 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd03a:	b003      	add	sp, #12
   bd03c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd040:	2300      	movs	r3, #0
   bd042:	9300      	str	r3, [sp, #0]
   bd044:	461a      	mov	r2, r3
   bd046:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd04a:	f7fc fa27 	bl	b949c <system_ctrl_set_result>
}
   bd04e:	e7f4      	b.n	bd03a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd050:	2003e724 	.word	0x2003e724

000bd054 <module_user_init_hook>:
{
   bd054:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd056:	4812      	ldr	r0, [pc, #72]	; (bd0a0 <module_user_init_hook+0x4c>)
   bd058:	2100      	movs	r1, #0
   bd05a:	f7fc fb11 	bl	b9680 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd05e:	4b11      	ldr	r3, [pc, #68]	; (bd0a4 <module_user_init_hook+0x50>)
   bd060:	681a      	ldr	r2, [r3, #0]
   bd062:	4b11      	ldr	r3, [pc, #68]	; (bd0a8 <module_user_init_hook+0x54>)
   bd064:	429a      	cmp	r2, r3
   bd066:	4b11      	ldr	r3, [pc, #68]	; (bd0ac <module_user_init_hook+0x58>)
   bd068:	bf0c      	ite	eq
   bd06a:	2201      	moveq	r2, #1
   bd06c:	2200      	movne	r2, #0
   bd06e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd070:	d001      	beq.n	bd076 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd072:	f7ff ffb1 	bl	bcfd8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd076:	f7fc f827 	bl	b90c8 <HAL_RNG_GetRandomNumber>
   bd07a:	4604      	mov	r4, r0
    srand(seed);
   bd07c:	f001 f810 	bl	be0a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd080:	4b0b      	ldr	r3, [pc, #44]	; (bd0b0 <module_user_init_hook+0x5c>)
   bd082:	b113      	cbz	r3, bd08a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd084:	4620      	mov	r0, r4
   bd086:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd08a:	2100      	movs	r1, #0
   bd08c:	4808      	ldr	r0, [pc, #32]	; (bd0b0 <module_user_init_hook+0x5c>)
   bd08e:	f7fc fa37 	bl	b9500 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd096:	4807      	ldr	r0, [pc, #28]	; (bd0b4 <module_user_init_hook+0x60>)
   bd098:	2100      	movs	r1, #0
   bd09a:	f7fc b9f5 	b.w	b9488 <system_ctrl_set_app_request_handler>
   bd09e:	bf00      	nop
   bd0a0:	000bcf81 	.word	0x000bcf81
   bd0a4:	2003f400 	.word	0x2003f400
   bd0a8:	9a271c1e 	.word	0x9a271c1e
   bd0ac:	2003e720 	.word	0x2003e720
   bd0b0:	00000000 	.word	0x00000000
   bd0b4:	000bd01d 	.word	0x000bd01d

000bd0b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd0b8:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bd0ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd0bc:	d902      	bls.n	bd0c4 <pinAvailable+0xc>
    return false;
   bd0be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bd0c0:	b002      	add	sp, #8
   bd0c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bd0c4:	f1a0 030b 	sub.w	r3, r0, #11
   bd0c8:	2b02      	cmp	r3, #2
   bd0ca:	d81a      	bhi.n	bd102 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bd0cc:	4c17      	ldr	r4, [pc, #92]	; (bd12c <pinAvailable+0x74>)
   bd0ce:	7821      	ldrb	r1, [r4, #0]
   bd0d0:	f3bf 8f5b 	dmb	ish
   bd0d4:	f011 0101 	ands.w	r1, r1, #1
   bd0d8:	d10b      	bne.n	bd0f2 <pinAvailable+0x3a>
   bd0da:	4620      	mov	r0, r4
   bd0dc:	9101      	str	r1, [sp, #4]
   bd0de:	f7f6 ffed 	bl	b40bc <__cxa_guard_acquire>
   bd0e2:	9901      	ldr	r1, [sp, #4]
   bd0e4:	b128      	cbz	r0, bd0f2 <pinAvailable+0x3a>
   bd0e6:	4812      	ldr	r0, [pc, #72]	; (bd130 <pinAvailable+0x78>)
   bd0e8:	f7ff fba0 	bl	bc82c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bd0ec:	4620      	mov	r0, r4
   bd0ee:	f7f6 ffea 	bl	b40c6 <__cxa_guard_release>
   bd0f2:	4b0f      	ldr	r3, [pc, #60]	; (bd130 <pinAvailable+0x78>)
   bd0f4:	7818      	ldrb	r0, [r3, #0]
   bd0f6:	f7fc f8cf 	bl	b9298 <hal_spi_is_enabled>
   bd0fa:	2800      	cmp	r0, #0
   bd0fc:	d1df      	bne.n	bd0be <pinAvailable+0x6>
  return true; // 'pin' is available
   bd0fe:	2001      	movs	r0, #1
   bd100:	e7de      	b.n	bd0c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bd102:	2801      	cmp	r0, #1
   bd104:	d809      	bhi.n	bd11a <pinAvailable+0x62>
   bd106:	f000 f869 	bl	bd1dc <_Z19__fetch_global_Wirev>
   bd10a:	2100      	movs	r1, #0
   bd10c:	7c00      	ldrb	r0, [r0, #16]
   bd10e:	f7fc f883 	bl	b9218 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bd112:	f080 0001 	eor.w	r0, r0, #1
   bd116:	b2c0      	uxtb	r0, r0
   bd118:	e7d2      	b.n	bd0c0 <pinAvailable+0x8>
   bd11a:	3809      	subs	r0, #9
   bd11c:	2801      	cmp	r0, #1
   bd11e:	d8ee      	bhi.n	bd0fe <pinAvailable+0x46>
   bd120:	f000 f89c 	bl	bd25c <_Z22__fetch_global_Serial1v>
   bd124:	7c00      	ldrb	r0, [r0, #16]
   bd126:	f7fc f917 	bl	b9358 <hal_usart_is_enabled>
   bd12a:	e7f2      	b.n	bd112 <pinAvailable+0x5a>
   bd12c:	2003e648 	.word	0x2003e648
   bd130:	2003e64c 	.word	0x2003e64c

000bd134 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd134:	2825      	cmp	r0, #37	; 0x25
{
   bd136:	b538      	push	{r3, r4, r5, lr}
   bd138:	4604      	mov	r4, r0
   bd13a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd13c:	d80a      	bhi.n	bd154 <pinMode+0x20>
   bd13e:	29ff      	cmp	r1, #255	; 0xff
   bd140:	d008      	beq.n	bd154 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bd142:	f7ff ffb9 	bl	bd0b8 <pinAvailable>
   bd146:	b128      	cbz	r0, bd154 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bd148:	4629      	mov	r1, r5
   bd14a:	4620      	mov	r0, r4
}
   bd14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bd150:	f7fb bfea 	b.w	b9128 <HAL_Pin_Mode>
}
   bd154:	bd38      	pop	{r3, r4, r5, pc}

000bd156 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bd156:	b538      	push	{r3, r4, r5, lr}
   bd158:	4604      	mov	r4, r0
   bd15a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd15c:	f7fb ffec 	bl	b9138 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bd160:	28ff      	cmp	r0, #255	; 0xff
   bd162:	d010      	beq.n	bd186 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bd164:	2806      	cmp	r0, #6
   bd166:	d804      	bhi.n	bd172 <digitalWrite+0x1c>
   bd168:	234d      	movs	r3, #77	; 0x4d
   bd16a:	fa23 f000 	lsr.w	r0, r3, r0
   bd16e:	07c3      	lsls	r3, r0, #31
   bd170:	d409      	bmi.n	bd186 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bd172:	4620      	mov	r0, r4
   bd174:	f7ff ffa0 	bl	bd0b8 <pinAvailable>
   bd178:	b128      	cbz	r0, bd186 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bd17a:	4629      	mov	r1, r5
   bd17c:	4620      	mov	r0, r4
}
   bd17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bd182:	f7fb bfe1 	b.w	b9148 <HAL_GPIO_Write>
}
   bd186:	bd38      	pop	{r3, r4, r5, pc}

000bd188 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bd188:	b510      	push	{r4, lr}
   bd18a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd18c:	f7fb ffd4 	bl	b9138 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bd190:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bd192:	b2db      	uxtb	r3, r3
   bd194:	2b01      	cmp	r3, #1
   bd196:	d908      	bls.n	bd1aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bd198:	4620      	mov	r0, r4
   bd19a:	f7ff ff8d 	bl	bd0b8 <pinAvailable>
   bd19e:	b120      	cbz	r0, bd1aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bd1a0:	4620      	mov	r0, r4
}
   bd1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bd1a6:	f7fb bfd7 	b.w	b9158 <HAL_GPIO_Read>
}
   bd1aa:	2000      	movs	r0, #0
   bd1ac:	bd10      	pop	{r4, pc}

000bd1ae <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd1ae:	4770      	bx	lr

000bd1b0 <_Z17acquireWireBufferv>:
{
   bd1b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd1b2:	2520      	movs	r5, #32
   bd1b4:	2314      	movs	r3, #20
{
   bd1b6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd1b8:	6003      	str	r3, [r0, #0]
   bd1ba:	6085      	str	r5, [r0, #8]
   bd1bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd1be:	4906      	ldr	r1, [pc, #24]	; (bd1d8 <_Z17acquireWireBufferv+0x28>)
   bd1c0:	4628      	mov	r0, r5
   bd1c2:	f000 f86f 	bl	bd2a4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd1c6:	4904      	ldr	r1, [pc, #16]	; (bd1d8 <_Z17acquireWireBufferv+0x28>)
	};
   bd1c8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd1ca:	4628      	mov	r0, r5
   bd1cc:	f000 f86a 	bl	bd2a4 <_ZnajRKSt9nothrow_t>
	};
   bd1d0:	60e0      	str	r0, [r4, #12]
}
   bd1d2:	4620      	mov	r0, r4
   bd1d4:	bd38      	pop	{r3, r4, r5, pc}
   bd1d6:	bf00      	nop
   bd1d8:	000c18bc 	.word	0x000c18bc

000bd1dc <_Z19__fetch_global_Wirev>:
{
   bd1dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd1de:	4d0e      	ldr	r5, [pc, #56]	; (bd218 <_Z19__fetch_global_Wirev+0x3c>)
   bd1e0:	7829      	ldrb	r1, [r5, #0]
   bd1e2:	f3bf 8f5b 	dmb	ish
   bd1e6:	f011 0401 	ands.w	r4, r1, #1
{
   bd1ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd1ec:	d111      	bne.n	bd212 <_Z19__fetch_global_Wirev+0x36>
   bd1ee:	4628      	mov	r0, r5
   bd1f0:	f7f6 ff64 	bl	b40bc <__cxa_guard_acquire>
   bd1f4:	b168      	cbz	r0, bd212 <_Z19__fetch_global_Wirev+0x36>
   bd1f6:	a801      	add	r0, sp, #4
   bd1f8:	f7ff ffda 	bl	bd1b0 <_Z17acquireWireBufferv>
   bd1fc:	aa01      	add	r2, sp, #4
   bd1fe:	4621      	mov	r1, r4
   bd200:	4806      	ldr	r0, [pc, #24]	; (bd21c <_Z19__fetch_global_Wirev+0x40>)
   bd202:	f7ff f8f1 	bl	bc3e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd206:	4628      	mov	r0, r5
   bd208:	f7f6 ff5d 	bl	b40c6 <__cxa_guard_release>
   bd20c:	4804      	ldr	r0, [pc, #16]	; (bd220 <_Z19__fetch_global_Wirev+0x44>)
   bd20e:	f000 fef9 	bl	be004 <atexit>
	return wire;
}
   bd212:	4802      	ldr	r0, [pc, #8]	; (bd21c <_Z19__fetch_global_Wirev+0x40>)
   bd214:	b007      	add	sp, #28
   bd216:	bd30      	pop	{r4, r5, pc}
   bd218:	2003e72c 	.word	0x2003e72c
   bd21c:	2003e730 	.word	0x2003e730
   bd220:	000bd1af 	.word	0x000bd1af

000bd224 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd224:	4770      	bx	lr
	...

000bd228 <_Z20acquireSerial1Bufferv>:
{
   bd228:	b538      	push	{r3, r4, r5, lr}
   bd22a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bd22c:	2514      	movs	r5, #20
   bd22e:	462a      	mov	r2, r5
   bd230:	2100      	movs	r1, #0
   bd232:	f000 ff2c 	bl	be08e <memset>
   bd236:	8025      	strh	r5, [r4, #0]
   bd238:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd23a:	4907      	ldr	r1, [pc, #28]	; (bd258 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bd23c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd23e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bd240:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd242:	f000 f82f 	bl	bd2a4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd246:	4904      	ldr	r1, [pc, #16]	; (bd258 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bd248:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd24a:	4628      	mov	r0, r5
   bd24c:	f000 f82a 	bl	bd2a4 <_ZnajRKSt9nothrow_t>
    };
   bd250:	60e0      	str	r0, [r4, #12]
}
   bd252:	4620      	mov	r0, r4
   bd254:	bd38      	pop	{r3, r4, r5, pc}
   bd256:	bf00      	nop
   bd258:	000c18bc 	.word	0x000c18bc

000bd25c <_Z22__fetch_global_Serial1v>:
{
   bd25c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd25e:	4d0e      	ldr	r5, [pc, #56]	; (bd298 <_Z22__fetch_global_Serial1v+0x3c>)
   bd260:	7829      	ldrb	r1, [r5, #0]
   bd262:	f3bf 8f5b 	dmb	ish
   bd266:	f011 0401 	ands.w	r4, r1, #1
{
   bd26a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd26c:	d111      	bne.n	bd292 <_Z22__fetch_global_Serial1v+0x36>
   bd26e:	4628      	mov	r0, r5
   bd270:	f7f6 ff24 	bl	b40bc <__cxa_guard_acquire>
   bd274:	b168      	cbz	r0, bd292 <_Z22__fetch_global_Serial1v+0x36>
   bd276:	a801      	add	r0, sp, #4
   bd278:	f7ff ffd6 	bl	bd228 <_Z20acquireSerial1Bufferv>
   bd27c:	aa01      	add	r2, sp, #4
   bd27e:	4621      	mov	r1, r4
   bd280:	4806      	ldr	r0, [pc, #24]	; (bd29c <_Z22__fetch_global_Serial1v+0x40>)
   bd282:	f7ff fddd 	bl	bce40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd286:	4628      	mov	r0, r5
   bd288:	f7f6 ff1d 	bl	b40c6 <__cxa_guard_release>
   bd28c:	4804      	ldr	r0, [pc, #16]	; (bd2a0 <_Z22__fetch_global_Serial1v+0x44>)
   bd28e:	f000 feb9 	bl	be004 <atexit>
    return serial1;
}
   bd292:	4802      	ldr	r0, [pc, #8]	; (bd29c <_Z22__fetch_global_Serial1v+0x40>)
   bd294:	b007      	add	sp, #28
   bd296:	bd30      	pop	{r4, r5, pc}
   bd298:	2003e744 	.word	0x2003e744
   bd29c:	2003e748 	.word	0x2003e748
   bd2a0:	000bd225 	.word	0x000bd225

000bd2a4 <_ZnajRKSt9nothrow_t>:
   bd2a4:	f7f6 bef9 	b.w	b409a <_Znaj>

000bd2a8 <_ZSt19__throw_logic_errorPKc>:
   bd2a8:	b508      	push	{r3, lr}
   bd2aa:	f7fc f9c9 	bl	b9640 <abort>

000bd2ae <_ZSt20__throw_length_errorPKc>:
   bd2ae:	b508      	push	{r3, lr}
   bd2b0:	f7fc f9c6 	bl	b9640 <abort>

000bd2b4 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bd2b4:	b40f      	push	{r0, r1, r2, r3}
   bd2b6:	b580      	push	{r7, lr}
   bd2b8:	b084      	sub	sp, #16
   bd2ba:	af00      	add	r7, sp, #0
   bd2bc:	f107 0418 	add.w	r4, r7, #24
   bd2c0:	f854 2b04 	ldr.w	r2, [r4], #4
   bd2c4:	607a      	str	r2, [r7, #4]
   bd2c6:	4610      	mov	r0, r2
   bd2c8:	f000 ff95 	bl	be1f6 <strlen>
   bd2cc:	f200 2307 	addw	r3, r0, #519	; 0x207
   bd2d0:	f023 0307 	bic.w	r3, r3, #7
   bd2d4:	ebad 0d03 	sub.w	sp, sp, r3
   bd2d8:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bd2dc:	687a      	ldr	r2, [r7, #4]
   bd2de:	60fc      	str	r4, [r7, #12]
   bd2e0:	4623      	mov	r3, r4
   bd2e2:	4668      	mov	r0, sp
   bd2e4:	f000 f85e 	bl	bd3a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bd2e8:	f7fc f9aa 	bl	b9640 <abort>

000bd2ec <_ZSt25__throw_bad_function_callv>:
   bd2ec:	b508      	push	{r3, lr}
   bd2ee:	f7fc f9a7 	bl	b9640 <abort>
	...

000bd2f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bd2f4:	4901      	ldr	r1, [pc, #4]	; (bd2fc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bd2f6:	f000 b98b 	b.w	bd610 <_ZNKSt9type_infoeqERKS_>
   bd2fa:	bf00      	nop
   bd2fc:	000c18d8 	.word	0x000c18d8

000bd300 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bd300:	b580      	push	{r7, lr}
   bd302:	b09c      	sub	sp, #112	; 0x70
   bd304:	4606      	mov	r6, r0
   bd306:	af00      	add	r7, sp, #0
   bd308:	460c      	mov	r4, r1
   bd30a:	1ba4      	subs	r4, r4, r6
   bd30c:	490e      	ldr	r1, [pc, #56]	; (bd348 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bd30e:	2269      	movs	r2, #105	; 0x69
   bd310:	1d38      	adds	r0, r7, #4
   bd312:	f000 fe94 	bl	be03e <memcpy>
   bd316:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bd31a:	f023 0307 	bic.w	r3, r3, #7
   bd31e:	ebad 0d03 	sub.w	sp, sp, r3
   bd322:	466d      	mov	r5, sp
   bd324:	2268      	movs	r2, #104	; 0x68
   bd326:	1d39      	adds	r1, r7, #4
   bd328:	4628      	mov	r0, r5
   bd32a:	f000 fe88 	bl	be03e <memcpy>
   bd32e:	4622      	mov	r2, r4
   bd330:	4631      	mov	r1, r6
   bd332:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bd336:	442c      	add	r4, r5
   bd338:	f000 fe81 	bl	be03e <memcpy>
   bd33c:	2300      	movs	r3, #0
   bd33e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bd342:	4628      	mov	r0, r5
   bd344:	f7ff ffb0 	bl	bd2a8 <_ZSt19__throw_logic_errorPKc>
   bd348:	000c18e0 	.word	0x000c18e0

000bd34c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bd34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd350:	af00      	add	r7, sp, #0
   bd352:	b084      	sub	sp, #16
   bd354:	466d      	mov	r5, sp
   bd356:	f105 040c 	add.w	r4, r5, #12
   bd35a:	f8df 8044 	ldr.w	r8, [pc, #68]	; bd3a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bd35e:	4623      	mov	r3, r4
   bd360:	f04f 0c0a 	mov.w	ip, #10
   bd364:	fbb2 f6fc 	udiv	r6, r2, ip
   bd368:	fb0c 2e16 	mls	lr, ip, r6, r2
   bd36c:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bd370:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bd374:	4696      	mov	lr, r2
   bd376:	f1be 0f09 	cmp.w	lr, #9
   bd37a:	4632      	mov	r2, r6
   bd37c:	d8f2      	bhi.n	bd364 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bd37e:	1ae4      	subs	r4, r4, r3
   bd380:	428c      	cmp	r4, r1
   bd382:	d809      	bhi.n	bd398 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bd384:	f1c4 030c 	rsb	r3, r4, #12
   bd388:	4622      	mov	r2, r4
   bd38a:	18e9      	adds	r1, r5, r3
   bd38c:	f000 fe57 	bl	be03e <memcpy>
   bd390:	4620      	mov	r0, r4
   bd392:	46bd      	mov	sp, r7
   bd394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd398:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bd39c:	e7f8      	b.n	bd390 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bd39e:	bf00      	nop
   bd3a0:	000c1949 	.word	0x000c1949

000bd3a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bd3a4:	3901      	subs	r1, #1
   bd3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd3aa:	4607      	mov	r7, r0
   bd3ac:	4615      	mov	r5, r2
   bd3ae:	eb00 0801 	add.w	r8, r0, r1
   bd3b2:	4604      	mov	r4, r0
   bd3b4:	782a      	ldrb	r2, [r5, #0]
   bd3b6:	b392      	cbz	r2, bd41e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bd3b8:	4544      	cmp	r4, r8
   bd3ba:	d22a      	bcs.n	bd412 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd3bc:	2a25      	cmp	r2, #37	; 0x25
   bd3be:	d107      	bne.n	bd3d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd3c0:	786a      	ldrb	r2, [r5, #1]
   bd3c2:	2a73      	cmp	r2, #115	; 0x73
   bd3c4:	d009      	beq.n	bd3da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bd3c6:	2a7a      	cmp	r2, #122	; 0x7a
   bd3c8:	d012      	beq.n	bd3f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bd3ca:	2a25      	cmp	r2, #37	; 0x25
   bd3cc:	d100      	bne.n	bd3d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd3ce:	3501      	adds	r5, #1
   bd3d0:	f815 2b01 	ldrb.w	r2, [r5], #1
   bd3d4:	f804 2b01 	strb.w	r2, [r4], #1
   bd3d8:	e7ec      	b.n	bd3b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd3da:	f853 2b04 	ldr.w	r2, [r3], #4
   bd3de:	3a01      	subs	r2, #1
   bd3e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bd3e4:	b1c9      	cbz	r1, bd41a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bd3e6:	4544      	cmp	r4, r8
   bd3e8:	d013      	beq.n	bd412 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd3ea:	f804 1b01 	strb.w	r1, [r4], #1
   bd3ee:	e7f7      	b.n	bd3e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bd3f0:	78aa      	ldrb	r2, [r5, #2]
   bd3f2:	2a75      	cmp	r2, #117	; 0x75
   bd3f4:	d1ec      	bne.n	bd3d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd3f6:	461e      	mov	r6, r3
   bd3f8:	eba8 0104 	sub.w	r1, r8, r4
   bd3fc:	f856 2b04 	ldr.w	r2, [r6], #4
   bd400:	4620      	mov	r0, r4
   bd402:	f7ff ffa3 	bl	bd34c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bd406:	2800      	cmp	r0, #0
   bd408:	dd03      	ble.n	bd412 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd40a:	4404      	add	r4, r0
   bd40c:	3503      	adds	r5, #3
   bd40e:	4633      	mov	r3, r6
   bd410:	e7d0      	b.n	bd3b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd412:	4621      	mov	r1, r4
   bd414:	4638      	mov	r0, r7
   bd416:	f7ff ff73 	bl	bd300 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bd41a:	3502      	adds	r5, #2
   bd41c:	e7ca      	b.n	bd3b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd41e:	7022      	strb	r2, [r4, #0]
   bd420:	1be0      	subs	r0, r4, r7
   bd422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd426 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bd426:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bd428:	2400      	movs	r4, #0
   bd42a:	2310      	movs	r3, #16
   bd42c:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bd430:	6803      	ldr	r3, [r0, #0]
   bd432:	4615      	mov	r5, r2
   bd434:	699e      	ldr	r6, [r3, #24]
   bd436:	6812      	ldr	r2, [r2, #0]
   bd438:	466b      	mov	r3, sp
   bd43a:	e9cd 4400 	strd	r4, r4, [sp]
   bd43e:	47b0      	blx	r6
   bd440:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bd444:	f003 0306 	and.w	r3, r3, #6
   bd448:	2b06      	cmp	r3, #6
   bd44a:	bf03      	ittte	eq
   bd44c:	9b00      	ldreq	r3, [sp, #0]
   bd44e:	602b      	streq	r3, [r5, #0]
   bd450:	2001      	moveq	r0, #1
   bd452:	4620      	movne	r0, r4
   bd454:	b004      	add	sp, #16
   bd456:	bd70      	pop	{r4, r5, r6, pc}

000bd458 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bd458:	9800      	ldr	r0, [sp, #0]
   bd45a:	4290      	cmp	r0, r2
   bd45c:	bf14      	ite	ne
   bd45e:	2001      	movne	r0, #1
   bd460:	2006      	moveq	r0, #6
   bd462:	4770      	bx	lr

000bd464 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bd464:	b510      	push	{r4, lr}
   bd466:	4b03      	ldr	r3, [pc, #12]	; (bd474 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bd468:	6003      	str	r3, [r0, #0]
   bd46a:	4604      	mov	r4, r0
   bd46c:	f000 f8cd 	bl	bd60a <_ZNSt9type_infoD1Ev>
   bd470:	4620      	mov	r0, r4
   bd472:	bd10      	pop	{r4, pc}
   bd474:	000c198c 	.word	0x000c198c

000bd478 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bd478:	b510      	push	{r4, lr}
   bd47a:	4604      	mov	r4, r0
   bd47c:	f7ff fff2 	bl	bd464 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd480:	4620      	mov	r0, r4
   bd482:	2108      	movs	r1, #8
   bd484:	f7f6 fe0b 	bl	b409e <_ZdlPvj>
   bd488:	4620      	mov	r0, r4
   bd48a:	bd10      	pop	{r4, pc}

000bd48c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bd48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd490:	461f      	mov	r7, r3
   bd492:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bd496:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bd49a:	4598      	cmp	r8, r3
   bd49c:	4606      	mov	r6, r0
   bd49e:	4615      	mov	r5, r2
   bd4a0:	d107      	bne.n	bd4b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd4a2:	9907      	ldr	r1, [sp, #28]
   bd4a4:	f000 f8b4 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd4a8:	b118      	cbz	r0, bd4b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd4aa:	7165      	strb	r5, [r4, #5]
   bd4ac:	2000      	movs	r0, #0
   bd4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd4b2:	4639      	mov	r1, r7
   bd4b4:	4630      	mov	r0, r6
   bd4b6:	f000 f8ab 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd4ba:	2800      	cmp	r0, #0
   bd4bc:	d0f6      	beq.n	bd4ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bd4be:	2301      	movs	r3, #1
   bd4c0:	f8c4 8000 	str.w	r8, [r4]
   bd4c4:	7125      	strb	r5, [r4, #4]
   bd4c6:	71a3      	strb	r3, [r4, #6]
   bd4c8:	e7f0      	b.n	bd4ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bd4ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bd4ca:	b538      	push	{r3, r4, r5, lr}
   bd4cc:	4615      	mov	r5, r2
   bd4ce:	461c      	mov	r4, r3
   bd4d0:	f000 f89e 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd4d4:	b120      	cbz	r0, bd4e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bd4d6:	2308      	movs	r3, #8
   bd4d8:	60e3      	str	r3, [r4, #12]
   bd4da:	2306      	movs	r3, #6
   bd4dc:	6025      	str	r5, [r4, #0]
   bd4de:	7123      	strb	r3, [r4, #4]
   bd4e0:	bd38      	pop	{r3, r4, r5, pc}

000bd4e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bd4e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd4e4:	4605      	mov	r5, r0
   bd4e6:	460c      	mov	r4, r1
   bd4e8:	9201      	str	r2, [sp, #4]
   bd4ea:	461e      	mov	r6, r3
   bd4ec:	f000 f890 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd4f0:	b950      	cbnz	r0, bd508 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd4f2:	2e03      	cmp	r6, #3
   bd4f4:	d808      	bhi.n	bd508 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd4f6:	6823      	ldr	r3, [r4, #0]
   bd4f8:	9a01      	ldr	r2, [sp, #4]
   bd4fa:	695b      	ldr	r3, [r3, #20]
   bd4fc:	4629      	mov	r1, r5
   bd4fe:	4620      	mov	r0, r4
   bd500:	b002      	add	sp, #8
   bd502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd506:	4718      	bx	r3
   bd508:	b002      	add	sp, #8
   bd50a:	bd70      	pop	{r4, r5, r6, pc}

000bd50c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bd50c:	b510      	push	{r4, lr}
   bd50e:	4b03      	ldr	r3, [pc, #12]	; (bd51c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bd510:	6003      	str	r3, [r0, #0]
   bd512:	4604      	mov	r4, r0
   bd514:	f7ff ffa6 	bl	bd464 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd518:	4620      	mov	r0, r4
   bd51a:	bd10      	pop	{r4, pc}
   bd51c:	000c19ec 	.word	0x000c19ec

000bd520 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bd520:	b510      	push	{r4, lr}
   bd522:	4604      	mov	r4, r0
   bd524:	f7ff fff2 	bl	bd50c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bd528:	4620      	mov	r0, r4
   bd52a:	210c      	movs	r1, #12
   bd52c:	f7f6 fdb7 	bl	b409e <_ZdlPvj>
   bd530:	4620      	mov	r0, r4
   bd532:	bd10      	pop	{r4, pc}

000bd534 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bd534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bd536:	9f08      	ldr	r7, [sp, #32]
   bd538:	4297      	cmp	r7, r2
   bd53a:	4605      	mov	r5, r0
   bd53c:	460e      	mov	r6, r1
   bd53e:	4614      	mov	r4, r2
   bd540:	d00a      	beq.n	bd558 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bd542:	68a8      	ldr	r0, [r5, #8]
   bd544:	6802      	ldr	r2, [r0, #0]
   bd546:	9708      	str	r7, [sp, #32]
   bd548:	6a15      	ldr	r5, [r2, #32]
   bd54a:	4631      	mov	r1, r6
   bd54c:	4622      	mov	r2, r4
   bd54e:	46ac      	mov	ip, r5
   bd550:	b003      	add	sp, #12
   bd552:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd556:	4760      	bx	ip
   bd558:	4619      	mov	r1, r3
   bd55a:	9301      	str	r3, [sp, #4]
   bd55c:	f000 f858 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd560:	9b01      	ldr	r3, [sp, #4]
   bd562:	2800      	cmp	r0, #0
   bd564:	d0ed      	beq.n	bd542 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bd566:	2006      	movs	r0, #6
   bd568:	b003      	add	sp, #12
   bd56a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd56c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bd56c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd570:	460d      	mov	r5, r1
   bd572:	4619      	mov	r1, r3
   bd574:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bd578:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bd57c:	4681      	mov	r9, r0
   bd57e:	4617      	mov	r7, r2
   bd580:	4698      	mov	r8, r3
   bd582:	f000 f845 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd586:	b190      	cbz	r0, bd5ae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bd588:	2d00      	cmp	r5, #0
   bd58a:	6034      	str	r4, [r6, #0]
   bd58c:	7137      	strb	r7, [r6, #4]
   bd58e:	db09      	blt.n	bd5a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bd590:	1961      	adds	r1, r4, r5
   bd592:	458a      	cmp	sl, r1
   bd594:	bf0c      	ite	eq
   bd596:	2106      	moveq	r1, #6
   bd598:	2101      	movne	r1, #1
   bd59a:	71b1      	strb	r1, [r6, #6]
   bd59c:	2000      	movs	r0, #0
   bd59e:	b001      	add	sp, #4
   bd5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd5a4:	3502      	adds	r5, #2
   bd5a6:	d1f9      	bne.n	bd59c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd5a8:	2301      	movs	r3, #1
   bd5aa:	71b3      	strb	r3, [r6, #6]
   bd5ac:	e7f6      	b.n	bd59c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd5ae:	4554      	cmp	r4, sl
   bd5b0:	d106      	bne.n	bd5c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd5b2:	4659      	mov	r1, fp
   bd5b4:	4648      	mov	r0, r9
   bd5b6:	f000 f82b 	bl	bd610 <_ZNKSt9type_infoeqERKS_>
   bd5ba:	b108      	cbz	r0, bd5c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd5bc:	7177      	strb	r7, [r6, #5]
   bd5be:	e7ed      	b.n	bd59c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd5c0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bd5c4:	6803      	ldr	r3, [r0, #0]
   bd5c6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bd5ca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bd5ce:	69dc      	ldr	r4, [r3, #28]
   bd5d0:	463a      	mov	r2, r7
   bd5d2:	4643      	mov	r3, r8
   bd5d4:	4629      	mov	r1, r5
   bd5d6:	46a4      	mov	ip, r4
   bd5d8:	b001      	add	sp, #4
   bd5da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd5de:	4760      	bx	ip

000bd5e0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bd5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd5e4:	4607      	mov	r7, r0
   bd5e6:	460c      	mov	r4, r1
   bd5e8:	4615      	mov	r5, r2
   bd5ea:	461e      	mov	r6, r3
   bd5ec:	f7ff ff6d 	bl	bd4ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bd5f0:	b948      	cbnz	r0, bd606 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bd5f2:	68b8      	ldr	r0, [r7, #8]
   bd5f4:	6803      	ldr	r3, [r0, #0]
   bd5f6:	699f      	ldr	r7, [r3, #24]
   bd5f8:	462a      	mov	r2, r5
   bd5fa:	4633      	mov	r3, r6
   bd5fc:	4621      	mov	r1, r4
   bd5fe:	46bc      	mov	ip, r7
   bd600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd604:	4760      	bx	ip
   bd606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd60a <_ZNSt9type_infoD1Ev>:
   bd60a:	4770      	bx	lr

000bd60c <_ZNKSt9type_info14__is_pointer_pEv>:
   bd60c:	2000      	movs	r0, #0
   bd60e:	4770      	bx	lr

000bd610 <_ZNKSt9type_infoeqERKS_>:
   bd610:	4281      	cmp	r1, r0
   bd612:	b508      	push	{r3, lr}
   bd614:	d00e      	beq.n	bd634 <_ZNKSt9type_infoeqERKS_+0x24>
   bd616:	6840      	ldr	r0, [r0, #4]
   bd618:	7803      	ldrb	r3, [r0, #0]
   bd61a:	2b2a      	cmp	r3, #42	; 0x2a
   bd61c:	d00c      	beq.n	bd638 <_ZNKSt9type_infoeqERKS_+0x28>
   bd61e:	6849      	ldr	r1, [r1, #4]
   bd620:	780b      	ldrb	r3, [r1, #0]
   bd622:	2b2a      	cmp	r3, #42	; 0x2a
   bd624:	bf08      	it	eq
   bd626:	3101      	addeq	r1, #1
   bd628:	f000 fdb5 	bl	be196 <strcmp>
   bd62c:	fab0 f080 	clz	r0, r0
   bd630:	0940      	lsrs	r0, r0, #5
   bd632:	bd08      	pop	{r3, pc}
   bd634:	2001      	movs	r0, #1
   bd636:	e7fc      	b.n	bd632 <_ZNKSt9type_infoeqERKS_+0x22>
   bd638:	2000      	movs	r0, #0
   bd63a:	e7fa      	b.n	bd632 <_ZNKSt9type_infoeqERKS_+0x22>

000bd63c <__aeabi_drsub>:
   bd63c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd640:	e002      	b.n	bd648 <__adddf3>
   bd642:	bf00      	nop

000bd644 <__aeabi_dsub>:
   bd644:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd648 <__adddf3>:
   bd648:	b530      	push	{r4, r5, lr}
   bd64a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd64e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd652:	ea94 0f05 	teq	r4, r5
   bd656:	bf08      	it	eq
   bd658:	ea90 0f02 	teqeq	r0, r2
   bd65c:	bf1f      	itttt	ne
   bd65e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd662:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd666:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd66a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd66e:	f000 80e2 	beq.w	bd836 <__adddf3+0x1ee>
   bd672:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd676:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd67a:	bfb8      	it	lt
   bd67c:	426d      	neglt	r5, r5
   bd67e:	dd0c      	ble.n	bd69a <__adddf3+0x52>
   bd680:	442c      	add	r4, r5
   bd682:	ea80 0202 	eor.w	r2, r0, r2
   bd686:	ea81 0303 	eor.w	r3, r1, r3
   bd68a:	ea82 0000 	eor.w	r0, r2, r0
   bd68e:	ea83 0101 	eor.w	r1, r3, r1
   bd692:	ea80 0202 	eor.w	r2, r0, r2
   bd696:	ea81 0303 	eor.w	r3, r1, r3
   bd69a:	2d36      	cmp	r5, #54	; 0x36
   bd69c:	bf88      	it	hi
   bd69e:	bd30      	pophi	{r4, r5, pc}
   bd6a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd6a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd6a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd6ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd6b0:	d002      	beq.n	bd6b8 <__adddf3+0x70>
   bd6b2:	4240      	negs	r0, r0
   bd6b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd6b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd6bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd6c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd6c4:	d002      	beq.n	bd6cc <__adddf3+0x84>
   bd6c6:	4252      	negs	r2, r2
   bd6c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd6cc:	ea94 0f05 	teq	r4, r5
   bd6d0:	f000 80a7 	beq.w	bd822 <__adddf3+0x1da>
   bd6d4:	f1a4 0401 	sub.w	r4, r4, #1
   bd6d8:	f1d5 0e20 	rsbs	lr, r5, #32
   bd6dc:	db0d      	blt.n	bd6fa <__adddf3+0xb2>
   bd6de:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd6e2:	fa22 f205 	lsr.w	r2, r2, r5
   bd6e6:	1880      	adds	r0, r0, r2
   bd6e8:	f141 0100 	adc.w	r1, r1, #0
   bd6ec:	fa03 f20e 	lsl.w	r2, r3, lr
   bd6f0:	1880      	adds	r0, r0, r2
   bd6f2:	fa43 f305 	asr.w	r3, r3, r5
   bd6f6:	4159      	adcs	r1, r3
   bd6f8:	e00e      	b.n	bd718 <__adddf3+0xd0>
   bd6fa:	f1a5 0520 	sub.w	r5, r5, #32
   bd6fe:	f10e 0e20 	add.w	lr, lr, #32
   bd702:	2a01      	cmp	r2, #1
   bd704:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd708:	bf28      	it	cs
   bd70a:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd70e:	fa43 f305 	asr.w	r3, r3, r5
   bd712:	18c0      	adds	r0, r0, r3
   bd714:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd718:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd71c:	d507      	bpl.n	bd72e <__adddf3+0xe6>
   bd71e:	f04f 0e00 	mov.w	lr, #0
   bd722:	f1dc 0c00 	rsbs	ip, ip, #0
   bd726:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd72a:	eb6e 0101 	sbc.w	r1, lr, r1
   bd72e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd732:	d31b      	bcc.n	bd76c <__adddf3+0x124>
   bd734:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd738:	d30c      	bcc.n	bd754 <__adddf3+0x10c>
   bd73a:	0849      	lsrs	r1, r1, #1
   bd73c:	ea5f 0030 	movs.w	r0, r0, rrx
   bd740:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd744:	f104 0401 	add.w	r4, r4, #1
   bd748:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd74c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd750:	f080 809a 	bcs.w	bd888 <__adddf3+0x240>
   bd754:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd758:	bf08      	it	eq
   bd75a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd75e:	f150 0000 	adcs.w	r0, r0, #0
   bd762:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd766:	ea41 0105 	orr.w	r1, r1, r5
   bd76a:	bd30      	pop	{r4, r5, pc}
   bd76c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd770:	4140      	adcs	r0, r0
   bd772:	eb41 0101 	adc.w	r1, r1, r1
   bd776:	3c01      	subs	r4, #1
   bd778:	bf28      	it	cs
   bd77a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd77e:	d2e9      	bcs.n	bd754 <__adddf3+0x10c>
   bd780:	f091 0f00 	teq	r1, #0
   bd784:	bf04      	itt	eq
   bd786:	4601      	moveq	r1, r0
   bd788:	2000      	moveq	r0, #0
   bd78a:	fab1 f381 	clz	r3, r1
   bd78e:	bf08      	it	eq
   bd790:	3320      	addeq	r3, #32
   bd792:	f1a3 030b 	sub.w	r3, r3, #11
   bd796:	f1b3 0220 	subs.w	r2, r3, #32
   bd79a:	da0c      	bge.n	bd7b6 <__adddf3+0x16e>
   bd79c:	320c      	adds	r2, #12
   bd79e:	dd08      	ble.n	bd7b2 <__adddf3+0x16a>
   bd7a0:	f102 0c14 	add.w	ip, r2, #20
   bd7a4:	f1c2 020c 	rsb	r2, r2, #12
   bd7a8:	fa01 f00c 	lsl.w	r0, r1, ip
   bd7ac:	fa21 f102 	lsr.w	r1, r1, r2
   bd7b0:	e00c      	b.n	bd7cc <__adddf3+0x184>
   bd7b2:	f102 0214 	add.w	r2, r2, #20
   bd7b6:	bfd8      	it	le
   bd7b8:	f1c2 0c20 	rsble	ip, r2, #32
   bd7bc:	fa01 f102 	lsl.w	r1, r1, r2
   bd7c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd7c4:	bfdc      	itt	le
   bd7c6:	ea41 010c 	orrle.w	r1, r1, ip
   bd7ca:	4090      	lslle	r0, r2
   bd7cc:	1ae4      	subs	r4, r4, r3
   bd7ce:	bfa2      	ittt	ge
   bd7d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd7d4:	4329      	orrge	r1, r5
   bd7d6:	bd30      	popge	{r4, r5, pc}
   bd7d8:	ea6f 0404 	mvn.w	r4, r4
   bd7dc:	3c1f      	subs	r4, #31
   bd7de:	da1c      	bge.n	bd81a <__adddf3+0x1d2>
   bd7e0:	340c      	adds	r4, #12
   bd7e2:	dc0e      	bgt.n	bd802 <__adddf3+0x1ba>
   bd7e4:	f104 0414 	add.w	r4, r4, #20
   bd7e8:	f1c4 0220 	rsb	r2, r4, #32
   bd7ec:	fa20 f004 	lsr.w	r0, r0, r4
   bd7f0:	fa01 f302 	lsl.w	r3, r1, r2
   bd7f4:	ea40 0003 	orr.w	r0, r0, r3
   bd7f8:	fa21 f304 	lsr.w	r3, r1, r4
   bd7fc:	ea45 0103 	orr.w	r1, r5, r3
   bd800:	bd30      	pop	{r4, r5, pc}
   bd802:	f1c4 040c 	rsb	r4, r4, #12
   bd806:	f1c4 0220 	rsb	r2, r4, #32
   bd80a:	fa20 f002 	lsr.w	r0, r0, r2
   bd80e:	fa01 f304 	lsl.w	r3, r1, r4
   bd812:	ea40 0003 	orr.w	r0, r0, r3
   bd816:	4629      	mov	r1, r5
   bd818:	bd30      	pop	{r4, r5, pc}
   bd81a:	fa21 f004 	lsr.w	r0, r1, r4
   bd81e:	4629      	mov	r1, r5
   bd820:	bd30      	pop	{r4, r5, pc}
   bd822:	f094 0f00 	teq	r4, #0
   bd826:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd82a:	bf06      	itte	eq
   bd82c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd830:	3401      	addeq	r4, #1
   bd832:	3d01      	subne	r5, #1
   bd834:	e74e      	b.n	bd6d4 <__adddf3+0x8c>
   bd836:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd83a:	bf18      	it	ne
   bd83c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd840:	d029      	beq.n	bd896 <__adddf3+0x24e>
   bd842:	ea94 0f05 	teq	r4, r5
   bd846:	bf08      	it	eq
   bd848:	ea90 0f02 	teqeq	r0, r2
   bd84c:	d005      	beq.n	bd85a <__adddf3+0x212>
   bd84e:	ea54 0c00 	orrs.w	ip, r4, r0
   bd852:	bf04      	itt	eq
   bd854:	4619      	moveq	r1, r3
   bd856:	4610      	moveq	r0, r2
   bd858:	bd30      	pop	{r4, r5, pc}
   bd85a:	ea91 0f03 	teq	r1, r3
   bd85e:	bf1e      	ittt	ne
   bd860:	2100      	movne	r1, #0
   bd862:	2000      	movne	r0, #0
   bd864:	bd30      	popne	{r4, r5, pc}
   bd866:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd86a:	d105      	bne.n	bd878 <__adddf3+0x230>
   bd86c:	0040      	lsls	r0, r0, #1
   bd86e:	4149      	adcs	r1, r1
   bd870:	bf28      	it	cs
   bd872:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd876:	bd30      	pop	{r4, r5, pc}
   bd878:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd87c:	bf3c      	itt	cc
   bd87e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd882:	bd30      	popcc	{r4, r5, pc}
   bd884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd888:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd88c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd890:	f04f 0000 	mov.w	r0, #0
   bd894:	bd30      	pop	{r4, r5, pc}
   bd896:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd89a:	bf1a      	itte	ne
   bd89c:	4619      	movne	r1, r3
   bd89e:	4610      	movne	r0, r2
   bd8a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd8a4:	bf1c      	itt	ne
   bd8a6:	460b      	movne	r3, r1
   bd8a8:	4602      	movne	r2, r0
   bd8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd8ae:	bf06      	itte	eq
   bd8b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd8b4:	ea91 0f03 	teqeq	r1, r3
   bd8b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd8bc:	bd30      	pop	{r4, r5, pc}
   bd8be:	bf00      	nop

000bd8c0 <__aeabi_ui2d>:
   bd8c0:	f090 0f00 	teq	r0, #0
   bd8c4:	bf04      	itt	eq
   bd8c6:	2100      	moveq	r1, #0
   bd8c8:	4770      	bxeq	lr
   bd8ca:	b530      	push	{r4, r5, lr}
   bd8cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd8d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd8d4:	f04f 0500 	mov.w	r5, #0
   bd8d8:	f04f 0100 	mov.w	r1, #0
   bd8dc:	e750      	b.n	bd780 <__adddf3+0x138>
   bd8de:	bf00      	nop

000bd8e0 <__aeabi_i2d>:
   bd8e0:	f090 0f00 	teq	r0, #0
   bd8e4:	bf04      	itt	eq
   bd8e6:	2100      	moveq	r1, #0
   bd8e8:	4770      	bxeq	lr
   bd8ea:	b530      	push	{r4, r5, lr}
   bd8ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd8f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd8f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd8f8:	bf48      	it	mi
   bd8fa:	4240      	negmi	r0, r0
   bd8fc:	f04f 0100 	mov.w	r1, #0
   bd900:	e73e      	b.n	bd780 <__adddf3+0x138>
   bd902:	bf00      	nop

000bd904 <__aeabi_f2d>:
   bd904:	0042      	lsls	r2, r0, #1
   bd906:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd90a:	ea4f 0131 	mov.w	r1, r1, rrx
   bd90e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd912:	bf1f      	itttt	ne
   bd914:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd918:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd91c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd920:	4770      	bxne	lr
   bd922:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd926:	bf08      	it	eq
   bd928:	4770      	bxeq	lr
   bd92a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd92e:	bf04      	itt	eq
   bd930:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd934:	4770      	bxeq	lr
   bd936:	b530      	push	{r4, r5, lr}
   bd938:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd93c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd944:	e71c      	b.n	bd780 <__adddf3+0x138>
   bd946:	bf00      	nop

000bd948 <__aeabi_ul2d>:
   bd948:	ea50 0201 	orrs.w	r2, r0, r1
   bd94c:	bf08      	it	eq
   bd94e:	4770      	bxeq	lr
   bd950:	b530      	push	{r4, r5, lr}
   bd952:	f04f 0500 	mov.w	r5, #0
   bd956:	e00a      	b.n	bd96e <__aeabi_l2d+0x16>

000bd958 <__aeabi_l2d>:
   bd958:	ea50 0201 	orrs.w	r2, r0, r1
   bd95c:	bf08      	it	eq
   bd95e:	4770      	bxeq	lr
   bd960:	b530      	push	{r4, r5, lr}
   bd962:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd966:	d502      	bpl.n	bd96e <__aeabi_l2d+0x16>
   bd968:	4240      	negs	r0, r0
   bd96a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd96e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd972:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd976:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd97a:	f43f aed8 	beq.w	bd72e <__adddf3+0xe6>
   bd97e:	f04f 0203 	mov.w	r2, #3
   bd982:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd986:	bf18      	it	ne
   bd988:	3203      	addne	r2, #3
   bd98a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd98e:	bf18      	it	ne
   bd990:	3203      	addne	r2, #3
   bd992:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd996:	f1c2 0320 	rsb	r3, r2, #32
   bd99a:	fa00 fc03 	lsl.w	ip, r0, r3
   bd99e:	fa20 f002 	lsr.w	r0, r0, r2
   bd9a2:	fa01 fe03 	lsl.w	lr, r1, r3
   bd9a6:	ea40 000e 	orr.w	r0, r0, lr
   bd9aa:	fa21 f102 	lsr.w	r1, r1, r2
   bd9ae:	4414      	add	r4, r2
   bd9b0:	e6bd      	b.n	bd72e <__adddf3+0xe6>
   bd9b2:	bf00      	nop

000bd9b4 <__aeabi_dmul>:
   bd9b4:	b570      	push	{r4, r5, r6, lr}
   bd9b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd9ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd9be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd9c2:	bf1d      	ittte	ne
   bd9c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd9c8:	ea94 0f0c 	teqne	r4, ip
   bd9cc:	ea95 0f0c 	teqne	r5, ip
   bd9d0:	f000 f8de 	bleq	bdb90 <__aeabi_dmul+0x1dc>
   bd9d4:	442c      	add	r4, r5
   bd9d6:	ea81 0603 	eor.w	r6, r1, r3
   bd9da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd9de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd9e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd9e6:	bf18      	it	ne
   bd9e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd9ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd9f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd9f4:	d038      	beq.n	bda68 <__aeabi_dmul+0xb4>
   bd9f6:	fba0 ce02 	umull	ip, lr, r0, r2
   bd9fa:	f04f 0500 	mov.w	r5, #0
   bd9fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   bda02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bda06:	fbe0 e503 	umlal	lr, r5, r0, r3
   bda0a:	f04f 0600 	mov.w	r6, #0
   bda0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bda12:	f09c 0f00 	teq	ip, #0
   bda16:	bf18      	it	ne
   bda18:	f04e 0e01 	orrne.w	lr, lr, #1
   bda1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bda20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bda24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bda28:	d204      	bcs.n	bda34 <__aeabi_dmul+0x80>
   bda2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bda2e:	416d      	adcs	r5, r5
   bda30:	eb46 0606 	adc.w	r6, r6, r6
   bda34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bda38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bda3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bda40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bda44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bda48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bda4c:	bf88      	it	hi
   bda4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bda52:	d81e      	bhi.n	bda92 <__aeabi_dmul+0xde>
   bda54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bda58:	bf08      	it	eq
   bda5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bda5e:	f150 0000 	adcs.w	r0, r0, #0
   bda62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bda66:	bd70      	pop	{r4, r5, r6, pc}
   bda68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bda6c:	ea46 0101 	orr.w	r1, r6, r1
   bda70:	ea40 0002 	orr.w	r0, r0, r2
   bda74:	ea81 0103 	eor.w	r1, r1, r3
   bda78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bda7c:	bfc2      	ittt	gt
   bda7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bda82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bda86:	bd70      	popgt	{r4, r5, r6, pc}
   bda88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bda8c:	f04f 0e00 	mov.w	lr, #0
   bda90:	3c01      	subs	r4, #1
   bda92:	f300 80ab 	bgt.w	bdbec <__aeabi_dmul+0x238>
   bda96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bda9a:	bfde      	ittt	le
   bda9c:	2000      	movle	r0, #0
   bda9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bdaa2:	bd70      	pople	{r4, r5, r6, pc}
   bdaa4:	f1c4 0400 	rsb	r4, r4, #0
   bdaa8:	3c20      	subs	r4, #32
   bdaaa:	da35      	bge.n	bdb18 <__aeabi_dmul+0x164>
   bdaac:	340c      	adds	r4, #12
   bdaae:	dc1b      	bgt.n	bdae8 <__aeabi_dmul+0x134>
   bdab0:	f104 0414 	add.w	r4, r4, #20
   bdab4:	f1c4 0520 	rsb	r5, r4, #32
   bdab8:	fa00 f305 	lsl.w	r3, r0, r5
   bdabc:	fa20 f004 	lsr.w	r0, r0, r4
   bdac0:	fa01 f205 	lsl.w	r2, r1, r5
   bdac4:	ea40 0002 	orr.w	r0, r0, r2
   bdac8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bdacc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bdad0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bdad4:	fa21 f604 	lsr.w	r6, r1, r4
   bdad8:	eb42 0106 	adc.w	r1, r2, r6
   bdadc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdae0:	bf08      	it	eq
   bdae2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdae6:	bd70      	pop	{r4, r5, r6, pc}
   bdae8:	f1c4 040c 	rsb	r4, r4, #12
   bdaec:	f1c4 0520 	rsb	r5, r4, #32
   bdaf0:	fa00 f304 	lsl.w	r3, r0, r4
   bdaf4:	fa20 f005 	lsr.w	r0, r0, r5
   bdaf8:	fa01 f204 	lsl.w	r2, r1, r4
   bdafc:	ea40 0002 	orr.w	r0, r0, r2
   bdb00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdb04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bdb08:	f141 0100 	adc.w	r1, r1, #0
   bdb0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdb10:	bf08      	it	eq
   bdb12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdb16:	bd70      	pop	{r4, r5, r6, pc}
   bdb18:	f1c4 0520 	rsb	r5, r4, #32
   bdb1c:	fa00 f205 	lsl.w	r2, r0, r5
   bdb20:	ea4e 0e02 	orr.w	lr, lr, r2
   bdb24:	fa20 f304 	lsr.w	r3, r0, r4
   bdb28:	fa01 f205 	lsl.w	r2, r1, r5
   bdb2c:	ea43 0302 	orr.w	r3, r3, r2
   bdb30:	fa21 f004 	lsr.w	r0, r1, r4
   bdb34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdb38:	fa21 f204 	lsr.w	r2, r1, r4
   bdb3c:	ea20 0002 	bic.w	r0, r0, r2
   bdb40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bdb44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdb48:	bf08      	it	eq
   bdb4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdb4e:	bd70      	pop	{r4, r5, r6, pc}
   bdb50:	f094 0f00 	teq	r4, #0
   bdb54:	d10f      	bne.n	bdb76 <__aeabi_dmul+0x1c2>
   bdb56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bdb5a:	0040      	lsls	r0, r0, #1
   bdb5c:	eb41 0101 	adc.w	r1, r1, r1
   bdb60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdb64:	bf08      	it	eq
   bdb66:	3c01      	subeq	r4, #1
   bdb68:	d0f7      	beq.n	bdb5a <__aeabi_dmul+0x1a6>
   bdb6a:	ea41 0106 	orr.w	r1, r1, r6
   bdb6e:	f095 0f00 	teq	r5, #0
   bdb72:	bf18      	it	ne
   bdb74:	4770      	bxne	lr
   bdb76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bdb7a:	0052      	lsls	r2, r2, #1
   bdb7c:	eb43 0303 	adc.w	r3, r3, r3
   bdb80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bdb84:	bf08      	it	eq
   bdb86:	3d01      	subeq	r5, #1
   bdb88:	d0f7      	beq.n	bdb7a <__aeabi_dmul+0x1c6>
   bdb8a:	ea43 0306 	orr.w	r3, r3, r6
   bdb8e:	4770      	bx	lr
   bdb90:	ea94 0f0c 	teq	r4, ip
   bdb94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdb98:	bf18      	it	ne
   bdb9a:	ea95 0f0c 	teqne	r5, ip
   bdb9e:	d00c      	beq.n	bdbba <__aeabi_dmul+0x206>
   bdba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdba4:	bf18      	it	ne
   bdba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdbaa:	d1d1      	bne.n	bdb50 <__aeabi_dmul+0x19c>
   bdbac:	ea81 0103 	eor.w	r1, r1, r3
   bdbb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdbb4:	f04f 0000 	mov.w	r0, #0
   bdbb8:	bd70      	pop	{r4, r5, r6, pc}
   bdbba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdbbe:	bf06      	itte	eq
   bdbc0:	4610      	moveq	r0, r2
   bdbc2:	4619      	moveq	r1, r3
   bdbc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdbc8:	d019      	beq.n	bdbfe <__aeabi_dmul+0x24a>
   bdbca:	ea94 0f0c 	teq	r4, ip
   bdbce:	d102      	bne.n	bdbd6 <__aeabi_dmul+0x222>
   bdbd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bdbd4:	d113      	bne.n	bdbfe <__aeabi_dmul+0x24a>
   bdbd6:	ea95 0f0c 	teq	r5, ip
   bdbda:	d105      	bne.n	bdbe8 <__aeabi_dmul+0x234>
   bdbdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bdbe0:	bf1c      	itt	ne
   bdbe2:	4610      	movne	r0, r2
   bdbe4:	4619      	movne	r1, r3
   bdbe6:	d10a      	bne.n	bdbfe <__aeabi_dmul+0x24a>
   bdbe8:	ea81 0103 	eor.w	r1, r1, r3
   bdbec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdbf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bdbf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bdbf8:	f04f 0000 	mov.w	r0, #0
   bdbfc:	bd70      	pop	{r4, r5, r6, pc}
   bdbfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bdc02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bdc06:	bd70      	pop	{r4, r5, r6, pc}

000bdc08 <__aeabi_ddiv>:
   bdc08:	b570      	push	{r4, r5, r6, lr}
   bdc0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdc0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bdc12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdc16:	bf1d      	ittte	ne
   bdc18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdc1c:	ea94 0f0c 	teqne	r4, ip
   bdc20:	ea95 0f0c 	teqne	r5, ip
   bdc24:	f000 f8a7 	bleq	bdd76 <__aeabi_ddiv+0x16e>
   bdc28:	eba4 0405 	sub.w	r4, r4, r5
   bdc2c:	ea81 0e03 	eor.w	lr, r1, r3
   bdc30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdc34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bdc38:	f000 8088 	beq.w	bdd4c <__aeabi_ddiv+0x144>
   bdc3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bdc40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bdc44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bdc48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bdc4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bdc50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bdc54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bdc58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bdc5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bdc60:	429d      	cmp	r5, r3
   bdc62:	bf08      	it	eq
   bdc64:	4296      	cmpeq	r6, r2
   bdc66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bdc6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bdc6e:	d202      	bcs.n	bdc76 <__aeabi_ddiv+0x6e>
   bdc70:	085b      	lsrs	r3, r3, #1
   bdc72:	ea4f 0232 	mov.w	r2, r2, rrx
   bdc76:	1ab6      	subs	r6, r6, r2
   bdc78:	eb65 0503 	sbc.w	r5, r5, r3
   bdc7c:	085b      	lsrs	r3, r3, #1
   bdc7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bdc82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bdc86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bdc8a:	ebb6 0e02 	subs.w	lr, r6, r2
   bdc8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdc92:	bf22      	ittt	cs
   bdc94:	1ab6      	subcs	r6, r6, r2
   bdc96:	4675      	movcs	r5, lr
   bdc98:	ea40 000c 	orrcs.w	r0, r0, ip
   bdc9c:	085b      	lsrs	r3, r3, #1
   bdc9e:	ea4f 0232 	mov.w	r2, r2, rrx
   bdca2:	ebb6 0e02 	subs.w	lr, r6, r2
   bdca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdcaa:	bf22      	ittt	cs
   bdcac:	1ab6      	subcs	r6, r6, r2
   bdcae:	4675      	movcs	r5, lr
   bdcb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bdcb4:	085b      	lsrs	r3, r3, #1
   bdcb6:	ea4f 0232 	mov.w	r2, r2, rrx
   bdcba:	ebb6 0e02 	subs.w	lr, r6, r2
   bdcbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdcc2:	bf22      	ittt	cs
   bdcc4:	1ab6      	subcs	r6, r6, r2
   bdcc6:	4675      	movcs	r5, lr
   bdcc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bdccc:	085b      	lsrs	r3, r3, #1
   bdcce:	ea4f 0232 	mov.w	r2, r2, rrx
   bdcd2:	ebb6 0e02 	subs.w	lr, r6, r2
   bdcd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdcda:	bf22      	ittt	cs
   bdcdc:	1ab6      	subcs	r6, r6, r2
   bdcde:	4675      	movcs	r5, lr
   bdce0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bdce4:	ea55 0e06 	orrs.w	lr, r5, r6
   bdce8:	d018      	beq.n	bdd1c <__aeabi_ddiv+0x114>
   bdcea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bdcee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bdcf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bdcf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bdcfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bdcfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bdd02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bdd06:	d1c0      	bne.n	bdc8a <__aeabi_ddiv+0x82>
   bdd08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdd0c:	d10b      	bne.n	bdd26 <__aeabi_ddiv+0x11e>
   bdd0e:	ea41 0100 	orr.w	r1, r1, r0
   bdd12:	f04f 0000 	mov.w	r0, #0
   bdd16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bdd1a:	e7b6      	b.n	bdc8a <__aeabi_ddiv+0x82>
   bdd1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdd20:	bf04      	itt	eq
   bdd22:	4301      	orreq	r1, r0
   bdd24:	2000      	moveq	r0, #0
   bdd26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdd2a:	bf88      	it	hi
   bdd2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bdd30:	f63f aeaf 	bhi.w	bda92 <__aeabi_dmul+0xde>
   bdd34:	ebb5 0c03 	subs.w	ip, r5, r3
   bdd38:	bf04      	itt	eq
   bdd3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bdd3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bdd42:	f150 0000 	adcs.w	r0, r0, #0
   bdd46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdd4a:	bd70      	pop	{r4, r5, r6, pc}
   bdd4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bdd50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bdd54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bdd58:	bfc2      	ittt	gt
   bdd5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdd5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdd62:	bd70      	popgt	{r4, r5, r6, pc}
   bdd64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdd68:	f04f 0e00 	mov.w	lr, #0
   bdd6c:	3c01      	subs	r4, #1
   bdd6e:	e690      	b.n	bda92 <__aeabi_dmul+0xde>
   bdd70:	ea45 0e06 	orr.w	lr, r5, r6
   bdd74:	e68d      	b.n	bda92 <__aeabi_dmul+0xde>
   bdd76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdd7a:	ea94 0f0c 	teq	r4, ip
   bdd7e:	bf08      	it	eq
   bdd80:	ea95 0f0c 	teqeq	r5, ip
   bdd84:	f43f af3b 	beq.w	bdbfe <__aeabi_dmul+0x24a>
   bdd88:	ea94 0f0c 	teq	r4, ip
   bdd8c:	d10a      	bne.n	bdda4 <__aeabi_ddiv+0x19c>
   bdd8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdd92:	f47f af34 	bne.w	bdbfe <__aeabi_dmul+0x24a>
   bdd96:	ea95 0f0c 	teq	r5, ip
   bdd9a:	f47f af25 	bne.w	bdbe8 <__aeabi_dmul+0x234>
   bdd9e:	4610      	mov	r0, r2
   bdda0:	4619      	mov	r1, r3
   bdda2:	e72c      	b.n	bdbfe <__aeabi_dmul+0x24a>
   bdda4:	ea95 0f0c 	teq	r5, ip
   bdda8:	d106      	bne.n	bddb8 <__aeabi_ddiv+0x1b0>
   bddaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bddae:	f43f aefd 	beq.w	bdbac <__aeabi_dmul+0x1f8>
   bddb2:	4610      	mov	r0, r2
   bddb4:	4619      	mov	r1, r3
   bddb6:	e722      	b.n	bdbfe <__aeabi_dmul+0x24a>
   bddb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bddbc:	bf18      	it	ne
   bddbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bddc2:	f47f aec5 	bne.w	bdb50 <__aeabi_dmul+0x19c>
   bddc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bddca:	f47f af0d 	bne.w	bdbe8 <__aeabi_dmul+0x234>
   bddce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bddd2:	f47f aeeb 	bne.w	bdbac <__aeabi_dmul+0x1f8>
   bddd6:	e712      	b.n	bdbfe <__aeabi_dmul+0x24a>

000bddd8 <__gedf2>:
   bddd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdddc:	e006      	b.n	bddec <__cmpdf2+0x4>
   bddde:	bf00      	nop

000bdde0 <__ledf2>:
   bdde0:	f04f 0c01 	mov.w	ip, #1
   bdde4:	e002      	b.n	bddec <__cmpdf2+0x4>
   bdde6:	bf00      	nop

000bdde8 <__cmpdf2>:
   bdde8:	f04f 0c01 	mov.w	ip, #1
   bddec:	f84d cd04 	str.w	ip, [sp, #-4]!
   bddf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bddf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bddf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bddfc:	bf18      	it	ne
   bddfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bde02:	d01b      	beq.n	bde3c <__cmpdf2+0x54>
   bde04:	b001      	add	sp, #4
   bde06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bde0a:	bf0c      	ite	eq
   bde0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bde10:	ea91 0f03 	teqne	r1, r3
   bde14:	bf02      	ittt	eq
   bde16:	ea90 0f02 	teqeq	r0, r2
   bde1a:	2000      	moveq	r0, #0
   bde1c:	4770      	bxeq	lr
   bde1e:	f110 0f00 	cmn.w	r0, #0
   bde22:	ea91 0f03 	teq	r1, r3
   bde26:	bf58      	it	pl
   bde28:	4299      	cmppl	r1, r3
   bde2a:	bf08      	it	eq
   bde2c:	4290      	cmpeq	r0, r2
   bde2e:	bf2c      	ite	cs
   bde30:	17d8      	asrcs	r0, r3, #31
   bde32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bde36:	f040 0001 	orr.w	r0, r0, #1
   bde3a:	4770      	bx	lr
   bde3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bde40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bde44:	d102      	bne.n	bde4c <__cmpdf2+0x64>
   bde46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bde4a:	d107      	bne.n	bde5c <__cmpdf2+0x74>
   bde4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bde50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bde54:	d1d6      	bne.n	bde04 <__cmpdf2+0x1c>
   bde56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bde5a:	d0d3      	beq.n	bde04 <__cmpdf2+0x1c>
   bde5c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bde60:	4770      	bx	lr
   bde62:	bf00      	nop

000bde64 <__aeabi_cdrcmple>:
   bde64:	4684      	mov	ip, r0
   bde66:	4610      	mov	r0, r2
   bde68:	4662      	mov	r2, ip
   bde6a:	468c      	mov	ip, r1
   bde6c:	4619      	mov	r1, r3
   bde6e:	4663      	mov	r3, ip
   bde70:	e000      	b.n	bde74 <__aeabi_cdcmpeq>
   bde72:	bf00      	nop

000bde74 <__aeabi_cdcmpeq>:
   bde74:	b501      	push	{r0, lr}
   bde76:	f7ff ffb7 	bl	bdde8 <__cmpdf2>
   bde7a:	2800      	cmp	r0, #0
   bde7c:	bf48      	it	mi
   bde7e:	f110 0f00 	cmnmi.w	r0, #0
   bde82:	bd01      	pop	{r0, pc}

000bde84 <__aeabi_dcmpeq>:
   bde84:	f84d ed08 	str.w	lr, [sp, #-8]!
   bde88:	f7ff fff4 	bl	bde74 <__aeabi_cdcmpeq>
   bde8c:	bf0c      	ite	eq
   bde8e:	2001      	moveq	r0, #1
   bde90:	2000      	movne	r0, #0
   bde92:	f85d fb08 	ldr.w	pc, [sp], #8
   bde96:	bf00      	nop

000bde98 <__aeabi_dcmplt>:
   bde98:	f84d ed08 	str.w	lr, [sp, #-8]!
   bde9c:	f7ff ffea 	bl	bde74 <__aeabi_cdcmpeq>
   bdea0:	bf34      	ite	cc
   bdea2:	2001      	movcc	r0, #1
   bdea4:	2000      	movcs	r0, #0
   bdea6:	f85d fb08 	ldr.w	pc, [sp], #8
   bdeaa:	bf00      	nop

000bdeac <__aeabi_dcmple>:
   bdeac:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdeb0:	f7ff ffe0 	bl	bde74 <__aeabi_cdcmpeq>
   bdeb4:	bf94      	ite	ls
   bdeb6:	2001      	movls	r0, #1
   bdeb8:	2000      	movhi	r0, #0
   bdeba:	f85d fb08 	ldr.w	pc, [sp], #8
   bdebe:	bf00      	nop

000bdec0 <__aeabi_dcmpge>:
   bdec0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bdec4:	f7ff ffce 	bl	bde64 <__aeabi_cdrcmple>
   bdec8:	bf94      	ite	ls
   bdeca:	2001      	movls	r0, #1
   bdecc:	2000      	movhi	r0, #0
   bdece:	f85d fb08 	ldr.w	pc, [sp], #8
   bded2:	bf00      	nop

000bded4 <__aeabi_dcmpgt>:
   bded4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bded8:	f7ff ffc4 	bl	bde64 <__aeabi_cdrcmple>
   bdedc:	bf34      	ite	cc
   bdede:	2001      	movcc	r0, #1
   bdee0:	2000      	movcs	r0, #0
   bdee2:	f85d fb08 	ldr.w	pc, [sp], #8
   bdee6:	bf00      	nop

000bdee8 <__aeabi_d2uiz>:
   bdee8:	004a      	lsls	r2, r1, #1
   bdeea:	d211      	bcs.n	bdf10 <__aeabi_d2uiz+0x28>
   bdeec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bdef0:	d211      	bcs.n	bdf16 <__aeabi_d2uiz+0x2e>
   bdef2:	d50d      	bpl.n	bdf10 <__aeabi_d2uiz+0x28>
   bdef4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bdef8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bdefc:	d40e      	bmi.n	bdf1c <__aeabi_d2uiz+0x34>
   bdefe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdf02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bdf06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bdf0a:	fa23 f002 	lsr.w	r0, r3, r2
   bdf0e:	4770      	bx	lr
   bdf10:	f04f 0000 	mov.w	r0, #0
   bdf14:	4770      	bx	lr
   bdf16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bdf1a:	d102      	bne.n	bdf22 <__aeabi_d2uiz+0x3a>
   bdf1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdf20:	4770      	bx	lr
   bdf22:	f04f 0000 	mov.w	r0, #0
   bdf26:	4770      	bx	lr

000bdf28 <__aeabi_d2f>:
   bdf28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdf2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bdf30:	bf24      	itt	cs
   bdf32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bdf36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bdf3a:	d90d      	bls.n	bdf58 <__aeabi_d2f+0x30>
   bdf3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bdf40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bdf44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bdf48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bdf4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bdf50:	bf08      	it	eq
   bdf52:	f020 0001 	biceq.w	r0, r0, #1
   bdf56:	4770      	bx	lr
   bdf58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bdf5c:	d121      	bne.n	bdfa2 <__aeabi_d2f+0x7a>
   bdf5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bdf62:	bfbc      	itt	lt
   bdf64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bdf68:	4770      	bxlt	lr
   bdf6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdf6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bdf72:	f1c2 0218 	rsb	r2, r2, #24
   bdf76:	f1c2 0c20 	rsb	ip, r2, #32
   bdf7a:	fa10 f30c 	lsls.w	r3, r0, ip
   bdf7e:	fa20 f002 	lsr.w	r0, r0, r2
   bdf82:	bf18      	it	ne
   bdf84:	f040 0001 	orrne.w	r0, r0, #1
   bdf88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdf8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bdf90:	fa03 fc0c 	lsl.w	ip, r3, ip
   bdf94:	ea40 000c 	orr.w	r0, r0, ip
   bdf98:	fa23 f302 	lsr.w	r3, r3, r2
   bdf9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bdfa0:	e7cc      	b.n	bdf3c <__aeabi_d2f+0x14>
   bdfa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bdfa6:	d107      	bne.n	bdfb8 <__aeabi_d2f+0x90>
   bdfa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bdfac:	bf1e      	ittt	ne
   bdfae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bdfb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bdfb6:	4770      	bxne	lr
   bdfb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bdfbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bdfc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bdfc4:	4770      	bx	lr
   bdfc6:	bf00      	nop

000bdfc8 <__aeabi_d2ulz>:
   bdfc8:	b5d0      	push	{r4, r6, r7, lr}
   bdfca:	4b0c      	ldr	r3, [pc, #48]	; (bdffc <__aeabi_d2ulz+0x34>)
   bdfcc:	2200      	movs	r2, #0
   bdfce:	4606      	mov	r6, r0
   bdfd0:	460f      	mov	r7, r1
   bdfd2:	f7ff fcef 	bl	bd9b4 <__aeabi_dmul>
   bdfd6:	f7ff ff87 	bl	bdee8 <__aeabi_d2uiz>
   bdfda:	4604      	mov	r4, r0
   bdfdc:	f7ff fc70 	bl	bd8c0 <__aeabi_ui2d>
   bdfe0:	4b07      	ldr	r3, [pc, #28]	; (be000 <__aeabi_d2ulz+0x38>)
   bdfe2:	2200      	movs	r2, #0
   bdfe4:	f7ff fce6 	bl	bd9b4 <__aeabi_dmul>
   bdfe8:	4602      	mov	r2, r0
   bdfea:	460b      	mov	r3, r1
   bdfec:	4630      	mov	r0, r6
   bdfee:	4639      	mov	r1, r7
   bdff0:	f7ff fb28 	bl	bd644 <__aeabi_dsub>
   bdff4:	f7ff ff78 	bl	bdee8 <__aeabi_d2uiz>
   bdff8:	4621      	mov	r1, r4
   bdffa:	bdd0      	pop	{r4, r6, r7, pc}
   bdffc:	3df00000 	.word	0x3df00000
   be000:	41f00000 	.word	0x41f00000

000be004 <atexit>:
   be004:	2300      	movs	r3, #0
   be006:	4601      	mov	r1, r0
   be008:	461a      	mov	r2, r3
   be00a:	4618      	mov	r0, r3
   be00c:	f000 bfea 	b.w	befe4 <__register_exitproc>

000be010 <atof>:
   be010:	2100      	movs	r1, #0
   be012:	f000 bf4f 	b.w	beeb4 <strtod>

000be016 <atoi>:
   be016:	220a      	movs	r2, #10
   be018:	2100      	movs	r1, #0
   be01a:	f000 bfd9 	b.w	befd0 <strtol>

000be01e <memcmp>:
   be01e:	b510      	push	{r4, lr}
   be020:	3901      	subs	r1, #1
   be022:	4402      	add	r2, r0
   be024:	4290      	cmp	r0, r2
   be026:	d101      	bne.n	be02c <memcmp+0xe>
   be028:	2000      	movs	r0, #0
   be02a:	e005      	b.n	be038 <memcmp+0x1a>
   be02c:	7803      	ldrb	r3, [r0, #0]
   be02e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be032:	42a3      	cmp	r3, r4
   be034:	d001      	beq.n	be03a <memcmp+0x1c>
   be036:	1b18      	subs	r0, r3, r4
   be038:	bd10      	pop	{r4, pc}
   be03a:	3001      	adds	r0, #1
   be03c:	e7f2      	b.n	be024 <memcmp+0x6>

000be03e <memcpy>:
   be03e:	440a      	add	r2, r1
   be040:	4291      	cmp	r1, r2
   be042:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be046:	d100      	bne.n	be04a <memcpy+0xc>
   be048:	4770      	bx	lr
   be04a:	b510      	push	{r4, lr}
   be04c:	f811 4b01 	ldrb.w	r4, [r1], #1
   be050:	f803 4f01 	strb.w	r4, [r3, #1]!
   be054:	4291      	cmp	r1, r2
   be056:	d1f9      	bne.n	be04c <memcpy+0xe>
   be058:	bd10      	pop	{r4, pc}

000be05a <memmove>:
   be05a:	4288      	cmp	r0, r1
   be05c:	b510      	push	{r4, lr}
   be05e:	eb01 0402 	add.w	r4, r1, r2
   be062:	d902      	bls.n	be06a <memmove+0x10>
   be064:	4284      	cmp	r4, r0
   be066:	4623      	mov	r3, r4
   be068:	d807      	bhi.n	be07a <memmove+0x20>
   be06a:	1e43      	subs	r3, r0, #1
   be06c:	42a1      	cmp	r1, r4
   be06e:	d008      	beq.n	be082 <memmove+0x28>
   be070:	f811 2b01 	ldrb.w	r2, [r1], #1
   be074:	f803 2f01 	strb.w	r2, [r3, #1]!
   be078:	e7f8      	b.n	be06c <memmove+0x12>
   be07a:	4402      	add	r2, r0
   be07c:	4601      	mov	r1, r0
   be07e:	428a      	cmp	r2, r1
   be080:	d100      	bne.n	be084 <memmove+0x2a>
   be082:	bd10      	pop	{r4, pc}
   be084:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   be088:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be08c:	e7f7      	b.n	be07e <memmove+0x24>

000be08e <memset>:
   be08e:	4402      	add	r2, r0
   be090:	4603      	mov	r3, r0
   be092:	4293      	cmp	r3, r2
   be094:	d100      	bne.n	be098 <memset+0xa>
   be096:	4770      	bx	lr
   be098:	f803 1b01 	strb.w	r1, [r3], #1
   be09c:	e7f9      	b.n	be092 <memset+0x4>
	...

000be0a0 <srand>:
   be0a0:	b538      	push	{r3, r4, r5, lr}
   be0a2:	4b10      	ldr	r3, [pc, #64]	; (be0e4 <srand+0x44>)
   be0a4:	681d      	ldr	r5, [r3, #0]
   be0a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be0a8:	4604      	mov	r4, r0
   be0aa:	b9b3      	cbnz	r3, be0da <srand+0x3a>
   be0ac:	2018      	movs	r0, #24
   be0ae:	f7fb fa8f 	bl	b95d0 <malloc>
   be0b2:	4602      	mov	r2, r0
   be0b4:	63a8      	str	r0, [r5, #56]	; 0x38
   be0b6:	b920      	cbnz	r0, be0c2 <srand+0x22>
   be0b8:	4b0b      	ldr	r3, [pc, #44]	; (be0e8 <srand+0x48>)
   be0ba:	480c      	ldr	r0, [pc, #48]	; (be0ec <srand+0x4c>)
   be0bc:	2142      	movs	r1, #66	; 0x42
   be0be:	f7fb fad7 	bl	b9670 <__assert_func>
   be0c2:	490b      	ldr	r1, [pc, #44]	; (be0f0 <srand+0x50>)
   be0c4:	4b0b      	ldr	r3, [pc, #44]	; (be0f4 <srand+0x54>)
   be0c6:	e9c0 1300 	strd	r1, r3, [r0]
   be0ca:	4b0b      	ldr	r3, [pc, #44]	; (be0f8 <srand+0x58>)
   be0cc:	6083      	str	r3, [r0, #8]
   be0ce:	230b      	movs	r3, #11
   be0d0:	8183      	strh	r3, [r0, #12]
   be0d2:	2100      	movs	r1, #0
   be0d4:	2001      	movs	r0, #1
   be0d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   be0da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be0dc:	2200      	movs	r2, #0
   be0de:	611c      	str	r4, [r3, #16]
   be0e0:	615a      	str	r2, [r3, #20]
   be0e2:	bd38      	pop	{r3, r4, r5, pc}
   be0e4:	2003da90 	.word	0x2003da90
   be0e8:	000c1a25 	.word	0x000c1a25
   be0ec:	000c1a3c 	.word	0x000c1a3c
   be0f0:	abcd330e 	.word	0xabcd330e
   be0f4:	e66d1234 	.word	0xe66d1234
   be0f8:	0005deec 	.word	0x0005deec

000be0fc <rand>:
   be0fc:	4b16      	ldr	r3, [pc, #88]	; (be158 <rand+0x5c>)
   be0fe:	b510      	push	{r4, lr}
   be100:	681c      	ldr	r4, [r3, #0]
   be102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   be104:	b9b3      	cbnz	r3, be134 <rand+0x38>
   be106:	2018      	movs	r0, #24
   be108:	f7fb fa62 	bl	b95d0 <malloc>
   be10c:	63a0      	str	r0, [r4, #56]	; 0x38
   be10e:	b928      	cbnz	r0, be11c <rand+0x20>
   be110:	4602      	mov	r2, r0
   be112:	4b12      	ldr	r3, [pc, #72]	; (be15c <rand+0x60>)
   be114:	4812      	ldr	r0, [pc, #72]	; (be160 <rand+0x64>)
   be116:	214e      	movs	r1, #78	; 0x4e
   be118:	f7fb faaa 	bl	b9670 <__assert_func>
   be11c:	4a11      	ldr	r2, [pc, #68]	; (be164 <rand+0x68>)
   be11e:	4b12      	ldr	r3, [pc, #72]	; (be168 <rand+0x6c>)
   be120:	e9c0 2300 	strd	r2, r3, [r0]
   be124:	4b11      	ldr	r3, [pc, #68]	; (be16c <rand+0x70>)
   be126:	6083      	str	r3, [r0, #8]
   be128:	230b      	movs	r3, #11
   be12a:	8183      	strh	r3, [r0, #12]
   be12c:	2201      	movs	r2, #1
   be12e:	2300      	movs	r3, #0
   be130:	e9c0 2304 	strd	r2, r3, [r0, #16]
   be134:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   be136:	4a0e      	ldr	r2, [pc, #56]	; (be170 <rand+0x74>)
   be138:	6920      	ldr	r0, [r4, #16]
   be13a:	6963      	ldr	r3, [r4, #20]
   be13c:	490d      	ldr	r1, [pc, #52]	; (be174 <rand+0x78>)
   be13e:	4342      	muls	r2, r0
   be140:	fb01 2203 	mla	r2, r1, r3, r2
   be144:	fba0 0101 	umull	r0, r1, r0, r1
   be148:	1c43      	adds	r3, r0, #1
   be14a:	eb42 0001 	adc.w	r0, r2, r1
   be14e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   be152:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   be156:	bd10      	pop	{r4, pc}
   be158:	2003da90 	.word	0x2003da90
   be15c:	000c1a25 	.word	0x000c1a25
   be160:	000c1a3c 	.word	0x000c1a3c
   be164:	abcd330e 	.word	0xabcd330e
   be168:	e66d1234 	.word	0xe66d1234
   be16c:	0005deec 	.word	0x0005deec
   be170:	5851f42d 	.word	0x5851f42d
   be174:	4c957f2d 	.word	0x4c957f2d

000be178 <strcat>:
   be178:	b510      	push	{r4, lr}
   be17a:	4602      	mov	r2, r0
   be17c:	7814      	ldrb	r4, [r2, #0]
   be17e:	4613      	mov	r3, r2
   be180:	3201      	adds	r2, #1
   be182:	2c00      	cmp	r4, #0
   be184:	d1fa      	bne.n	be17c <strcat+0x4>
   be186:	3b01      	subs	r3, #1
   be188:	f811 2b01 	ldrb.w	r2, [r1], #1
   be18c:	f803 2f01 	strb.w	r2, [r3, #1]!
   be190:	2a00      	cmp	r2, #0
   be192:	d1f9      	bne.n	be188 <strcat+0x10>
   be194:	bd10      	pop	{r4, pc}

000be196 <strcmp>:
   be196:	f810 2b01 	ldrb.w	r2, [r0], #1
   be19a:	f811 3b01 	ldrb.w	r3, [r1], #1
   be19e:	2a01      	cmp	r2, #1
   be1a0:	bf28      	it	cs
   be1a2:	429a      	cmpcs	r2, r3
   be1a4:	d0f7      	beq.n	be196 <strcmp>
   be1a6:	1ad0      	subs	r0, r2, r3
   be1a8:	4770      	bx	lr

000be1aa <strcpy>:
   be1aa:	4603      	mov	r3, r0
   be1ac:	f811 2b01 	ldrb.w	r2, [r1], #1
   be1b0:	f803 2b01 	strb.w	r2, [r3], #1
   be1b4:	2a00      	cmp	r2, #0
   be1b6:	d1f9      	bne.n	be1ac <strcpy+0x2>
   be1b8:	4770      	bx	lr
	...

000be1bc <strdup>:
   be1bc:	4b02      	ldr	r3, [pc, #8]	; (be1c8 <strdup+0xc>)
   be1be:	4601      	mov	r1, r0
   be1c0:	6818      	ldr	r0, [r3, #0]
   be1c2:	f000 b803 	b.w	be1cc <_strdup_r>
   be1c6:	bf00      	nop
   be1c8:	2003da90 	.word	0x2003da90

000be1cc <_strdup_r>:
   be1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be1ce:	4604      	mov	r4, r0
   be1d0:	4608      	mov	r0, r1
   be1d2:	460d      	mov	r5, r1
   be1d4:	f000 f80f 	bl	be1f6 <strlen>
   be1d8:	1c42      	adds	r2, r0, #1
   be1da:	4611      	mov	r1, r2
   be1dc:	4620      	mov	r0, r4
   be1de:	9201      	str	r2, [sp, #4]
   be1e0:	f7fb fa36 	bl	b9650 <_malloc_r>
   be1e4:	4604      	mov	r4, r0
   be1e6:	b118      	cbz	r0, be1f0 <_strdup_r+0x24>
   be1e8:	9a01      	ldr	r2, [sp, #4]
   be1ea:	4629      	mov	r1, r5
   be1ec:	f7ff ff27 	bl	be03e <memcpy>
   be1f0:	4620      	mov	r0, r4
   be1f2:	b003      	add	sp, #12
   be1f4:	bd30      	pop	{r4, r5, pc}

000be1f6 <strlen>:
   be1f6:	4603      	mov	r3, r0
   be1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   be1fc:	2a00      	cmp	r2, #0
   be1fe:	d1fb      	bne.n	be1f8 <strlen+0x2>
   be200:	1a18      	subs	r0, r3, r0
   be202:	3801      	subs	r0, #1
   be204:	4770      	bx	lr

000be206 <strncmp>:
   be206:	b510      	push	{r4, lr}
   be208:	b17a      	cbz	r2, be22a <strncmp+0x24>
   be20a:	4603      	mov	r3, r0
   be20c:	3901      	subs	r1, #1
   be20e:	1884      	adds	r4, r0, r2
   be210:	f813 0b01 	ldrb.w	r0, [r3], #1
   be214:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   be218:	4290      	cmp	r0, r2
   be21a:	d101      	bne.n	be220 <strncmp+0x1a>
   be21c:	42a3      	cmp	r3, r4
   be21e:	d101      	bne.n	be224 <strncmp+0x1e>
   be220:	1a80      	subs	r0, r0, r2
   be222:	bd10      	pop	{r4, pc}
   be224:	2800      	cmp	r0, #0
   be226:	d1f3      	bne.n	be210 <strncmp+0xa>
   be228:	e7fa      	b.n	be220 <strncmp+0x1a>
   be22a:	4610      	mov	r0, r2
   be22c:	e7f9      	b.n	be222 <strncmp+0x1c>

000be22e <strncpy>:
   be22e:	b510      	push	{r4, lr}
   be230:	3901      	subs	r1, #1
   be232:	4603      	mov	r3, r0
   be234:	b132      	cbz	r2, be244 <strncpy+0x16>
   be236:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be23a:	f803 4b01 	strb.w	r4, [r3], #1
   be23e:	3a01      	subs	r2, #1
   be240:	2c00      	cmp	r4, #0
   be242:	d1f7      	bne.n	be234 <strncpy+0x6>
   be244:	441a      	add	r2, r3
   be246:	2100      	movs	r1, #0
   be248:	4293      	cmp	r3, r2
   be24a:	d100      	bne.n	be24e <strncpy+0x20>
   be24c:	bd10      	pop	{r4, pc}
   be24e:	f803 1b01 	strb.w	r1, [r3], #1
   be252:	e7f9      	b.n	be248 <strncpy+0x1a>

000be254 <strnlen>:
   be254:	b510      	push	{r4, lr}
   be256:	4602      	mov	r2, r0
   be258:	4401      	add	r1, r0
   be25a:	428a      	cmp	r2, r1
   be25c:	4613      	mov	r3, r2
   be25e:	d003      	beq.n	be268 <strnlen+0x14>
   be260:	781c      	ldrb	r4, [r3, #0]
   be262:	3201      	adds	r2, #1
   be264:	2c00      	cmp	r4, #0
   be266:	d1f8      	bne.n	be25a <strnlen+0x6>
   be268:	1a18      	subs	r0, r3, r0
   be26a:	bd10      	pop	{r4, pc}

000be26c <sulp>:
   be26c:	b570      	push	{r4, r5, r6, lr}
   be26e:	4604      	mov	r4, r0
   be270:	460d      	mov	r5, r1
   be272:	ec45 4b10 	vmov	d0, r4, r5
   be276:	4616      	mov	r6, r2
   be278:	f001 fe0e 	bl	bfe98 <__ulp>
   be27c:	ec51 0b10 	vmov	r0, r1, d0
   be280:	b17e      	cbz	r6, be2a2 <sulp+0x36>
   be282:	f3c5 530a 	ubfx	r3, r5, #20, #11
   be286:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be28a:	2b00      	cmp	r3, #0
   be28c:	dd09      	ble.n	be2a2 <sulp+0x36>
   be28e:	051b      	lsls	r3, r3, #20
   be290:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   be294:	2400      	movs	r4, #0
   be296:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   be29a:	4622      	mov	r2, r4
   be29c:	462b      	mov	r3, r5
   be29e:	f7ff fb89 	bl	bd9b4 <__aeabi_dmul>
   be2a2:	bd70      	pop	{r4, r5, r6, pc}
   be2a4:	0000      	movs	r0, r0
	...

000be2a8 <_strtod_l>:
   be2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be2ac:	ed2d 8b02 	vpush	{d8}
   be2b0:	b09d      	sub	sp, #116	; 0x74
   be2b2:	461f      	mov	r7, r3
   be2b4:	2300      	movs	r3, #0
   be2b6:	9318      	str	r3, [sp, #96]	; 0x60
   be2b8:	4ba2      	ldr	r3, [pc, #648]	; (be544 <_strtod_l+0x29c>)
   be2ba:	9213      	str	r2, [sp, #76]	; 0x4c
   be2bc:	681b      	ldr	r3, [r3, #0]
   be2be:	9305      	str	r3, [sp, #20]
   be2c0:	4604      	mov	r4, r0
   be2c2:	4618      	mov	r0, r3
   be2c4:	4688      	mov	r8, r1
   be2c6:	f7ff ff96 	bl	be1f6 <strlen>
   be2ca:	f04f 0a00 	mov.w	sl, #0
   be2ce:	4605      	mov	r5, r0
   be2d0:	f04f 0b00 	mov.w	fp, #0
   be2d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be2d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be2da:	781a      	ldrb	r2, [r3, #0]
   be2dc:	2a2b      	cmp	r2, #43	; 0x2b
   be2de:	d04e      	beq.n	be37e <_strtod_l+0xd6>
   be2e0:	d83b      	bhi.n	be35a <_strtod_l+0xb2>
   be2e2:	2a0d      	cmp	r2, #13
   be2e4:	d834      	bhi.n	be350 <_strtod_l+0xa8>
   be2e6:	2a08      	cmp	r2, #8
   be2e8:	d834      	bhi.n	be354 <_strtod_l+0xac>
   be2ea:	2a00      	cmp	r2, #0
   be2ec:	d03e      	beq.n	be36c <_strtod_l+0xc4>
   be2ee:	2300      	movs	r3, #0
   be2f0:	930a      	str	r3, [sp, #40]	; 0x28
   be2f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   be2f4:	7833      	ldrb	r3, [r6, #0]
   be2f6:	2b30      	cmp	r3, #48	; 0x30
   be2f8:	f040 80b0 	bne.w	be45c <_strtod_l+0x1b4>
   be2fc:	7873      	ldrb	r3, [r6, #1]
   be2fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be302:	2b58      	cmp	r3, #88	; 0x58
   be304:	d168      	bne.n	be3d8 <_strtod_l+0x130>
   be306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be308:	9301      	str	r3, [sp, #4]
   be30a:	ab18      	add	r3, sp, #96	; 0x60
   be30c:	9702      	str	r7, [sp, #8]
   be30e:	9300      	str	r3, [sp, #0]
   be310:	4a8d      	ldr	r2, [pc, #564]	; (be548 <_strtod_l+0x2a0>)
   be312:	ab19      	add	r3, sp, #100	; 0x64
   be314:	a917      	add	r1, sp, #92	; 0x5c
   be316:	4620      	mov	r0, r4
   be318:	f000 ff2e 	bl	bf178 <__gethex>
   be31c:	f010 0707 	ands.w	r7, r0, #7
   be320:	4605      	mov	r5, r0
   be322:	d005      	beq.n	be330 <_strtod_l+0x88>
   be324:	2f06      	cmp	r7, #6
   be326:	d12c      	bne.n	be382 <_strtod_l+0xda>
   be328:	3601      	adds	r6, #1
   be32a:	2300      	movs	r3, #0
   be32c:	9617      	str	r6, [sp, #92]	; 0x5c
   be32e:	930a      	str	r3, [sp, #40]	; 0x28
   be330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be332:	2b00      	cmp	r3, #0
   be334:	f040 8590 	bne.w	bee58 <_strtod_l+0xbb0>
   be338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be33a:	b1eb      	cbz	r3, be378 <_strtod_l+0xd0>
   be33c:	4652      	mov	r2, sl
   be33e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   be342:	ec43 2b10 	vmov	d0, r2, r3
   be346:	b01d      	add	sp, #116	; 0x74
   be348:	ecbd 8b02 	vpop	{d8}
   be34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be350:	2a20      	cmp	r2, #32
   be352:	d1cc      	bne.n	be2ee <_strtod_l+0x46>
   be354:	3301      	adds	r3, #1
   be356:	9317      	str	r3, [sp, #92]	; 0x5c
   be358:	e7be      	b.n	be2d8 <_strtod_l+0x30>
   be35a:	2a2d      	cmp	r2, #45	; 0x2d
   be35c:	d1c7      	bne.n	be2ee <_strtod_l+0x46>
   be35e:	2201      	movs	r2, #1
   be360:	920a      	str	r2, [sp, #40]	; 0x28
   be362:	1c5a      	adds	r2, r3, #1
   be364:	9217      	str	r2, [sp, #92]	; 0x5c
   be366:	785b      	ldrb	r3, [r3, #1]
   be368:	2b00      	cmp	r3, #0
   be36a:	d1c2      	bne.n	be2f2 <_strtod_l+0x4a>
   be36c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be36e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be372:	2b00      	cmp	r3, #0
   be374:	f040 856e 	bne.w	bee54 <_strtod_l+0xbac>
   be378:	4652      	mov	r2, sl
   be37a:	465b      	mov	r3, fp
   be37c:	e7e1      	b.n	be342 <_strtod_l+0x9a>
   be37e:	2200      	movs	r2, #0
   be380:	e7ee      	b.n	be360 <_strtod_l+0xb8>
   be382:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be384:	b13a      	cbz	r2, be396 <_strtod_l+0xee>
   be386:	2135      	movs	r1, #53	; 0x35
   be388:	a81a      	add	r0, sp, #104	; 0x68
   be38a:	f001 fe90 	bl	c00ae <__copybits>
   be38e:	9918      	ldr	r1, [sp, #96]	; 0x60
   be390:	4620      	mov	r0, r4
   be392:	f001 fa4f 	bl	bf834 <_Bfree>
   be396:	3f01      	subs	r7, #1
   be398:	2f04      	cmp	r7, #4
   be39a:	d806      	bhi.n	be3aa <_strtod_l+0x102>
   be39c:	e8df f007 	tbb	[pc, r7]
   be3a0:	1714030a 	.word	0x1714030a
   be3a4:	0a          	.byte	0x0a
   be3a5:	00          	.byte	0x00
   be3a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   be3aa:	0728      	lsls	r0, r5, #28
   be3ac:	d5c0      	bpl.n	be330 <_strtod_l+0x88>
   be3ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   be3b2:	e7bd      	b.n	be330 <_strtod_l+0x88>
   be3b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   be3b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   be3ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   be3be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   be3c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   be3c6:	e7f0      	b.n	be3aa <_strtod_l+0x102>
   be3c8:	f8df b180 	ldr.w	fp, [pc, #384]	; be54c <_strtod_l+0x2a4>
   be3cc:	e7ed      	b.n	be3aa <_strtod_l+0x102>
   be3ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   be3d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   be3d6:	e7e8      	b.n	be3aa <_strtod_l+0x102>
   be3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be3da:	1c5a      	adds	r2, r3, #1
   be3dc:	9217      	str	r2, [sp, #92]	; 0x5c
   be3de:	785b      	ldrb	r3, [r3, #1]
   be3e0:	2b30      	cmp	r3, #48	; 0x30
   be3e2:	d0f9      	beq.n	be3d8 <_strtod_l+0x130>
   be3e4:	2b00      	cmp	r3, #0
   be3e6:	d0a3      	beq.n	be330 <_strtod_l+0x88>
   be3e8:	2301      	movs	r3, #1
   be3ea:	f04f 0900 	mov.w	r9, #0
   be3ee:	9304      	str	r3, [sp, #16]
   be3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be3f2:	9308      	str	r3, [sp, #32]
   be3f4:	f8cd 901c 	str.w	r9, [sp, #28]
   be3f8:	464f      	mov	r7, r9
   be3fa:	220a      	movs	r2, #10
   be3fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   be3fe:	7806      	ldrb	r6, [r0, #0]
   be400:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   be404:	b2d9      	uxtb	r1, r3
   be406:	2909      	cmp	r1, #9
   be408:	d92a      	bls.n	be460 <_strtod_l+0x1b8>
   be40a:	9905      	ldr	r1, [sp, #20]
   be40c:	462a      	mov	r2, r5
   be40e:	f7ff fefa 	bl	be206 <strncmp>
   be412:	b398      	cbz	r0, be47c <_strtod_l+0x1d4>
   be414:	2000      	movs	r0, #0
   be416:	4632      	mov	r2, r6
   be418:	463d      	mov	r5, r7
   be41a:	9005      	str	r0, [sp, #20]
   be41c:	4603      	mov	r3, r0
   be41e:	2a65      	cmp	r2, #101	; 0x65
   be420:	d001      	beq.n	be426 <_strtod_l+0x17e>
   be422:	2a45      	cmp	r2, #69	; 0x45
   be424:	d118      	bne.n	be458 <_strtod_l+0x1b0>
   be426:	b91d      	cbnz	r5, be430 <_strtod_l+0x188>
   be428:	9a04      	ldr	r2, [sp, #16]
   be42a:	4302      	orrs	r2, r0
   be42c:	d09e      	beq.n	be36c <_strtod_l+0xc4>
   be42e:	2500      	movs	r5, #0
   be430:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   be434:	f108 0201 	add.w	r2, r8, #1
   be438:	9217      	str	r2, [sp, #92]	; 0x5c
   be43a:	f898 2001 	ldrb.w	r2, [r8, #1]
   be43e:	2a2b      	cmp	r2, #43	; 0x2b
   be440:	d075      	beq.n	be52e <_strtod_l+0x286>
   be442:	2a2d      	cmp	r2, #45	; 0x2d
   be444:	d07b      	beq.n	be53e <_strtod_l+0x296>
   be446:	f04f 0c00 	mov.w	ip, #0
   be44a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   be44e:	2909      	cmp	r1, #9
   be450:	f240 8082 	bls.w	be558 <_strtod_l+0x2b0>
   be454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be458:	2600      	movs	r6, #0
   be45a:	e09d      	b.n	be598 <_strtod_l+0x2f0>
   be45c:	2300      	movs	r3, #0
   be45e:	e7c4      	b.n	be3ea <_strtod_l+0x142>
   be460:	2f08      	cmp	r7, #8
   be462:	bfd8      	it	le
   be464:	9907      	ldrle	r1, [sp, #28]
   be466:	f100 0001 	add.w	r0, r0, #1
   be46a:	bfda      	itte	le
   be46c:	fb02 3301 	mlale	r3, r2, r1, r3
   be470:	9307      	strle	r3, [sp, #28]
   be472:	fb02 3909 	mlagt	r9, r2, r9, r3
   be476:	3701      	adds	r7, #1
   be478:	9017      	str	r0, [sp, #92]	; 0x5c
   be47a:	e7bf      	b.n	be3fc <_strtod_l+0x154>
   be47c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be47e:	195a      	adds	r2, r3, r5
   be480:	9217      	str	r2, [sp, #92]	; 0x5c
   be482:	5d5a      	ldrb	r2, [r3, r5]
   be484:	2f00      	cmp	r7, #0
   be486:	d037      	beq.n	be4f8 <_strtod_l+0x250>
   be488:	9005      	str	r0, [sp, #20]
   be48a:	463d      	mov	r5, r7
   be48c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   be490:	2b09      	cmp	r3, #9
   be492:	d912      	bls.n	be4ba <_strtod_l+0x212>
   be494:	2301      	movs	r3, #1
   be496:	e7c2      	b.n	be41e <_strtod_l+0x176>
   be498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be49a:	1c5a      	adds	r2, r3, #1
   be49c:	9217      	str	r2, [sp, #92]	; 0x5c
   be49e:	785a      	ldrb	r2, [r3, #1]
   be4a0:	3001      	adds	r0, #1
   be4a2:	2a30      	cmp	r2, #48	; 0x30
   be4a4:	d0f8      	beq.n	be498 <_strtod_l+0x1f0>
   be4a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   be4aa:	2b08      	cmp	r3, #8
   be4ac:	f200 84d9 	bhi.w	bee62 <_strtod_l+0xbba>
   be4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be4b2:	9005      	str	r0, [sp, #20]
   be4b4:	2000      	movs	r0, #0
   be4b6:	9308      	str	r3, [sp, #32]
   be4b8:	4605      	mov	r5, r0
   be4ba:	3a30      	subs	r2, #48	; 0x30
   be4bc:	f100 0301 	add.w	r3, r0, #1
   be4c0:	d014      	beq.n	be4ec <_strtod_l+0x244>
   be4c2:	9905      	ldr	r1, [sp, #20]
   be4c4:	4419      	add	r1, r3
   be4c6:	9105      	str	r1, [sp, #20]
   be4c8:	462b      	mov	r3, r5
   be4ca:	eb00 0e05 	add.w	lr, r0, r5
   be4ce:	210a      	movs	r1, #10
   be4d0:	4573      	cmp	r3, lr
   be4d2:	d113      	bne.n	be4fc <_strtod_l+0x254>
   be4d4:	182b      	adds	r3, r5, r0
   be4d6:	2b08      	cmp	r3, #8
   be4d8:	f105 0501 	add.w	r5, r5, #1
   be4dc:	4405      	add	r5, r0
   be4de:	dc1c      	bgt.n	be51a <_strtod_l+0x272>
   be4e0:	9907      	ldr	r1, [sp, #28]
   be4e2:	230a      	movs	r3, #10
   be4e4:	fb03 2301 	mla	r3, r3, r1, r2
   be4e8:	9307      	str	r3, [sp, #28]
   be4ea:	2300      	movs	r3, #0
   be4ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be4ee:	1c51      	adds	r1, r2, #1
   be4f0:	9117      	str	r1, [sp, #92]	; 0x5c
   be4f2:	7852      	ldrb	r2, [r2, #1]
   be4f4:	4618      	mov	r0, r3
   be4f6:	e7c9      	b.n	be48c <_strtod_l+0x1e4>
   be4f8:	4638      	mov	r0, r7
   be4fa:	e7d2      	b.n	be4a2 <_strtod_l+0x1fa>
   be4fc:	2b08      	cmp	r3, #8
   be4fe:	dc04      	bgt.n	be50a <_strtod_l+0x262>
   be500:	9e07      	ldr	r6, [sp, #28]
   be502:	434e      	muls	r6, r1
   be504:	9607      	str	r6, [sp, #28]
   be506:	3301      	adds	r3, #1
   be508:	e7e2      	b.n	be4d0 <_strtod_l+0x228>
   be50a:	f103 0c01 	add.w	ip, r3, #1
   be50e:	f1bc 0f10 	cmp.w	ip, #16
   be512:	bfd8      	it	le
   be514:	fb01 f909 	mulle.w	r9, r1, r9
   be518:	e7f5      	b.n	be506 <_strtod_l+0x25e>
   be51a:	2d10      	cmp	r5, #16
   be51c:	bfdc      	itt	le
   be51e:	230a      	movle	r3, #10
   be520:	fb03 2909 	mlale	r9, r3, r9, r2
   be524:	e7e1      	b.n	be4ea <_strtod_l+0x242>
   be526:	2300      	movs	r3, #0
   be528:	9305      	str	r3, [sp, #20]
   be52a:	2301      	movs	r3, #1
   be52c:	e77c      	b.n	be428 <_strtod_l+0x180>
   be52e:	f04f 0c00 	mov.w	ip, #0
   be532:	f108 0202 	add.w	r2, r8, #2
   be536:	9217      	str	r2, [sp, #92]	; 0x5c
   be538:	f898 2002 	ldrb.w	r2, [r8, #2]
   be53c:	e785      	b.n	be44a <_strtod_l+0x1a2>
   be53e:	f04f 0c01 	mov.w	ip, #1
   be542:	e7f6      	b.n	be532 <_strtod_l+0x28a>
   be544:	000c1c6c 	.word	0x000c1c6c
   be548:	000c1aa4 	.word	0x000c1aa4
   be54c:	7ff00000 	.word	0x7ff00000
   be550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be552:	1c51      	adds	r1, r2, #1
   be554:	9117      	str	r1, [sp, #92]	; 0x5c
   be556:	7852      	ldrb	r2, [r2, #1]
   be558:	2a30      	cmp	r2, #48	; 0x30
   be55a:	d0f9      	beq.n	be550 <_strtod_l+0x2a8>
   be55c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   be560:	2908      	cmp	r1, #8
   be562:	f63f af79 	bhi.w	be458 <_strtod_l+0x1b0>
   be566:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   be56a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be56c:	9206      	str	r2, [sp, #24]
   be56e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be570:	1c51      	adds	r1, r2, #1
   be572:	9117      	str	r1, [sp, #92]	; 0x5c
   be574:	7852      	ldrb	r2, [r2, #1]
   be576:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   be57a:	2e09      	cmp	r6, #9
   be57c:	d937      	bls.n	be5ee <_strtod_l+0x346>
   be57e:	9e06      	ldr	r6, [sp, #24]
   be580:	1b89      	subs	r1, r1, r6
   be582:	2908      	cmp	r1, #8
   be584:	f644 661f 	movw	r6, #19999	; 0x4e1f
   be588:	dc02      	bgt.n	be590 <_strtod_l+0x2e8>
   be58a:	4576      	cmp	r6, lr
   be58c:	bfa8      	it	ge
   be58e:	4676      	movge	r6, lr
   be590:	f1bc 0f00 	cmp.w	ip, #0
   be594:	d000      	beq.n	be598 <_strtod_l+0x2f0>
   be596:	4276      	negs	r6, r6
   be598:	2d00      	cmp	r5, #0
   be59a:	d14d      	bne.n	be638 <_strtod_l+0x390>
   be59c:	9904      	ldr	r1, [sp, #16]
   be59e:	4301      	orrs	r1, r0
   be5a0:	f47f aec6 	bne.w	be330 <_strtod_l+0x88>
   be5a4:	2b00      	cmp	r3, #0
   be5a6:	f47f aee1 	bne.w	be36c <_strtod_l+0xc4>
   be5aa:	2a69      	cmp	r2, #105	; 0x69
   be5ac:	d027      	beq.n	be5fe <_strtod_l+0x356>
   be5ae:	dc24      	bgt.n	be5fa <_strtod_l+0x352>
   be5b0:	2a49      	cmp	r2, #73	; 0x49
   be5b2:	d024      	beq.n	be5fe <_strtod_l+0x356>
   be5b4:	2a4e      	cmp	r2, #78	; 0x4e
   be5b6:	f47f aed9 	bne.w	be36c <_strtod_l+0xc4>
   be5ba:	499f      	ldr	r1, [pc, #636]	; (be838 <_strtod_l+0x590>)
   be5bc:	a817      	add	r0, sp, #92	; 0x5c
   be5be:	f001 f833 	bl	bf628 <__match>
   be5c2:	2800      	cmp	r0, #0
   be5c4:	f43f aed2 	beq.w	be36c <_strtod_l+0xc4>
   be5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be5ca:	781b      	ldrb	r3, [r3, #0]
   be5cc:	2b28      	cmp	r3, #40	; 0x28
   be5ce:	d12d      	bne.n	be62c <_strtod_l+0x384>
   be5d0:	499a      	ldr	r1, [pc, #616]	; (be83c <_strtod_l+0x594>)
   be5d2:	aa1a      	add	r2, sp, #104	; 0x68
   be5d4:	a817      	add	r0, sp, #92	; 0x5c
   be5d6:	f001 f83b 	bl	bf650 <__hexnan>
   be5da:	2805      	cmp	r0, #5
   be5dc:	d126      	bne.n	be62c <_strtod_l+0x384>
   be5de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be5e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   be5e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   be5e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   be5ec:	e6a0      	b.n	be330 <_strtod_l+0x88>
   be5ee:	210a      	movs	r1, #10
   be5f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   be5f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   be5f8:	e7b9      	b.n	be56e <_strtod_l+0x2c6>
   be5fa:	2a6e      	cmp	r2, #110	; 0x6e
   be5fc:	e7db      	b.n	be5b6 <_strtod_l+0x30e>
   be5fe:	4990      	ldr	r1, [pc, #576]	; (be840 <_strtod_l+0x598>)
   be600:	a817      	add	r0, sp, #92	; 0x5c
   be602:	f001 f811 	bl	bf628 <__match>
   be606:	2800      	cmp	r0, #0
   be608:	f43f aeb0 	beq.w	be36c <_strtod_l+0xc4>
   be60c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be60e:	498d      	ldr	r1, [pc, #564]	; (be844 <_strtod_l+0x59c>)
   be610:	3b01      	subs	r3, #1
   be612:	a817      	add	r0, sp, #92	; 0x5c
   be614:	9317      	str	r3, [sp, #92]	; 0x5c
   be616:	f001 f807 	bl	bf628 <__match>
   be61a:	b910      	cbnz	r0, be622 <_strtod_l+0x37a>
   be61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be61e:	3301      	adds	r3, #1
   be620:	9317      	str	r3, [sp, #92]	; 0x5c
   be622:	f8df b230 	ldr.w	fp, [pc, #560]	; be854 <_strtod_l+0x5ac>
   be626:	f04f 0a00 	mov.w	sl, #0
   be62a:	e681      	b.n	be330 <_strtod_l+0x88>
   be62c:	4886      	ldr	r0, [pc, #536]	; (be848 <_strtod_l+0x5a0>)
   be62e:	f001 fd93 	bl	c0158 <nan>
   be632:	ec5b ab10 	vmov	sl, fp, d0
   be636:	e67b      	b.n	be330 <_strtod_l+0x88>
   be638:	9b05      	ldr	r3, [sp, #20]
   be63a:	9807      	ldr	r0, [sp, #28]
   be63c:	1af3      	subs	r3, r6, r3
   be63e:	2f00      	cmp	r7, #0
   be640:	bf08      	it	eq
   be642:	462f      	moveq	r7, r5
   be644:	2d10      	cmp	r5, #16
   be646:	9306      	str	r3, [sp, #24]
   be648:	46a8      	mov	r8, r5
   be64a:	bfa8      	it	ge
   be64c:	f04f 0810 	movge.w	r8, #16
   be650:	f7ff f936 	bl	bd8c0 <__aeabi_ui2d>
   be654:	2d09      	cmp	r5, #9
   be656:	4682      	mov	sl, r0
   be658:	468b      	mov	fp, r1
   be65a:	dd13      	ble.n	be684 <_strtod_l+0x3dc>
   be65c:	4b7b      	ldr	r3, [pc, #492]	; (be84c <_strtod_l+0x5a4>)
   be65e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   be662:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   be666:	f7ff f9a5 	bl	bd9b4 <__aeabi_dmul>
   be66a:	4682      	mov	sl, r0
   be66c:	4648      	mov	r0, r9
   be66e:	468b      	mov	fp, r1
   be670:	f7ff f926 	bl	bd8c0 <__aeabi_ui2d>
   be674:	4602      	mov	r2, r0
   be676:	460b      	mov	r3, r1
   be678:	4650      	mov	r0, sl
   be67a:	4659      	mov	r1, fp
   be67c:	f7fe ffe4 	bl	bd648 <__adddf3>
   be680:	4682      	mov	sl, r0
   be682:	468b      	mov	fp, r1
   be684:	2d0f      	cmp	r5, #15
   be686:	dc38      	bgt.n	be6fa <_strtod_l+0x452>
   be688:	9b06      	ldr	r3, [sp, #24]
   be68a:	2b00      	cmp	r3, #0
   be68c:	f43f ae50 	beq.w	be330 <_strtod_l+0x88>
   be690:	dd24      	ble.n	be6dc <_strtod_l+0x434>
   be692:	2b16      	cmp	r3, #22
   be694:	dc0b      	bgt.n	be6ae <_strtod_l+0x406>
   be696:	496d      	ldr	r1, [pc, #436]	; (be84c <_strtod_l+0x5a4>)
   be698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be69c:	e9d1 0100 	ldrd	r0, r1, [r1]
   be6a0:	4652      	mov	r2, sl
   be6a2:	465b      	mov	r3, fp
   be6a4:	f7ff f986 	bl	bd9b4 <__aeabi_dmul>
   be6a8:	4682      	mov	sl, r0
   be6aa:	468b      	mov	fp, r1
   be6ac:	e640      	b.n	be330 <_strtod_l+0x88>
   be6ae:	9a06      	ldr	r2, [sp, #24]
   be6b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   be6b4:	4293      	cmp	r3, r2
   be6b6:	db20      	blt.n	be6fa <_strtod_l+0x452>
   be6b8:	4c64      	ldr	r4, [pc, #400]	; (be84c <_strtod_l+0x5a4>)
   be6ba:	f1c5 050f 	rsb	r5, r5, #15
   be6be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   be6c2:	4652      	mov	r2, sl
   be6c4:	465b      	mov	r3, fp
   be6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   be6ca:	f7ff f973 	bl	bd9b4 <__aeabi_dmul>
   be6ce:	9b06      	ldr	r3, [sp, #24]
   be6d0:	1b5d      	subs	r5, r3, r5
   be6d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   be6d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   be6da:	e7e3      	b.n	be6a4 <_strtod_l+0x3fc>
   be6dc:	9b06      	ldr	r3, [sp, #24]
   be6de:	3316      	adds	r3, #22
   be6e0:	db0b      	blt.n	be6fa <_strtod_l+0x452>
   be6e2:	9b05      	ldr	r3, [sp, #20]
   be6e4:	1b9e      	subs	r6, r3, r6
   be6e6:	4b59      	ldr	r3, [pc, #356]	; (be84c <_strtod_l+0x5a4>)
   be6e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   be6ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   be6f0:	4650      	mov	r0, sl
   be6f2:	4659      	mov	r1, fp
   be6f4:	f7ff fa88 	bl	bdc08 <__aeabi_ddiv>
   be6f8:	e7d6      	b.n	be6a8 <_strtod_l+0x400>
   be6fa:	9b06      	ldr	r3, [sp, #24]
   be6fc:	eba5 0808 	sub.w	r8, r5, r8
   be700:	4498      	add	r8, r3
   be702:	f1b8 0f00 	cmp.w	r8, #0
   be706:	dd74      	ble.n	be7f2 <_strtod_l+0x54a>
   be708:	f018 030f 	ands.w	r3, r8, #15
   be70c:	d00a      	beq.n	be724 <_strtod_l+0x47c>
   be70e:	494f      	ldr	r1, [pc, #316]	; (be84c <_strtod_l+0x5a4>)
   be710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be714:	4652      	mov	r2, sl
   be716:	465b      	mov	r3, fp
   be718:	e9d1 0100 	ldrd	r0, r1, [r1]
   be71c:	f7ff f94a 	bl	bd9b4 <__aeabi_dmul>
   be720:	4682      	mov	sl, r0
   be722:	468b      	mov	fp, r1
   be724:	f038 080f 	bics.w	r8, r8, #15
   be728:	d04f      	beq.n	be7ca <_strtod_l+0x522>
   be72a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   be72e:	dd22      	ble.n	be776 <_strtod_l+0x4ce>
   be730:	2500      	movs	r5, #0
   be732:	462e      	mov	r6, r5
   be734:	9507      	str	r5, [sp, #28]
   be736:	9505      	str	r5, [sp, #20]
   be738:	2322      	movs	r3, #34	; 0x22
   be73a:	f8df b118 	ldr.w	fp, [pc, #280]	; be854 <_strtod_l+0x5ac>
   be73e:	6023      	str	r3, [r4, #0]
   be740:	f04f 0a00 	mov.w	sl, #0
   be744:	9b07      	ldr	r3, [sp, #28]
   be746:	2b00      	cmp	r3, #0
   be748:	f43f adf2 	beq.w	be330 <_strtod_l+0x88>
   be74c:	9918      	ldr	r1, [sp, #96]	; 0x60
   be74e:	4620      	mov	r0, r4
   be750:	f001 f870 	bl	bf834 <_Bfree>
   be754:	9905      	ldr	r1, [sp, #20]
   be756:	4620      	mov	r0, r4
   be758:	f001 f86c 	bl	bf834 <_Bfree>
   be75c:	4631      	mov	r1, r6
   be75e:	4620      	mov	r0, r4
   be760:	f001 f868 	bl	bf834 <_Bfree>
   be764:	9907      	ldr	r1, [sp, #28]
   be766:	4620      	mov	r0, r4
   be768:	f001 f864 	bl	bf834 <_Bfree>
   be76c:	4629      	mov	r1, r5
   be76e:	4620      	mov	r0, r4
   be770:	f001 f860 	bl	bf834 <_Bfree>
   be774:	e5dc      	b.n	be330 <_strtod_l+0x88>
   be776:	4b36      	ldr	r3, [pc, #216]	; (be850 <_strtod_l+0x5a8>)
   be778:	9304      	str	r3, [sp, #16]
   be77a:	2300      	movs	r3, #0
   be77c:	ea4f 1828 	mov.w	r8, r8, asr #4
   be780:	4650      	mov	r0, sl
   be782:	4659      	mov	r1, fp
   be784:	4699      	mov	r9, r3
   be786:	f1b8 0f01 	cmp.w	r8, #1
   be78a:	dc21      	bgt.n	be7d0 <_strtod_l+0x528>
   be78c:	b10b      	cbz	r3, be792 <_strtod_l+0x4ea>
   be78e:	4682      	mov	sl, r0
   be790:	468b      	mov	fp, r1
   be792:	4b2f      	ldr	r3, [pc, #188]	; (be850 <_strtod_l+0x5a8>)
   be794:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   be798:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   be79c:	4652      	mov	r2, sl
   be79e:	465b      	mov	r3, fp
   be7a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   be7a4:	f7ff f906 	bl	bd9b4 <__aeabi_dmul>
   be7a8:	4b2a      	ldr	r3, [pc, #168]	; (be854 <_strtod_l+0x5ac>)
   be7aa:	460a      	mov	r2, r1
   be7ac:	400b      	ands	r3, r1
   be7ae:	492a      	ldr	r1, [pc, #168]	; (be858 <_strtod_l+0x5b0>)
   be7b0:	428b      	cmp	r3, r1
   be7b2:	4682      	mov	sl, r0
   be7b4:	d8bc      	bhi.n	be730 <_strtod_l+0x488>
   be7b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   be7ba:	428b      	cmp	r3, r1
   be7bc:	bf86      	itte	hi
   be7be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; be85c <_strtod_l+0x5b4>
   be7c2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   be7c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   be7ca:	2300      	movs	r3, #0
   be7cc:	9304      	str	r3, [sp, #16]
   be7ce:	e084      	b.n	be8da <_strtod_l+0x632>
   be7d0:	f018 0f01 	tst.w	r8, #1
   be7d4:	d005      	beq.n	be7e2 <_strtod_l+0x53a>
   be7d6:	9b04      	ldr	r3, [sp, #16]
   be7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   be7dc:	f7ff f8ea 	bl	bd9b4 <__aeabi_dmul>
   be7e0:	2301      	movs	r3, #1
   be7e2:	9a04      	ldr	r2, [sp, #16]
   be7e4:	3208      	adds	r2, #8
   be7e6:	f109 0901 	add.w	r9, r9, #1
   be7ea:	ea4f 0868 	mov.w	r8, r8, asr #1
   be7ee:	9204      	str	r2, [sp, #16]
   be7f0:	e7c9      	b.n	be786 <_strtod_l+0x4de>
   be7f2:	d0ea      	beq.n	be7ca <_strtod_l+0x522>
   be7f4:	f1c8 0800 	rsb	r8, r8, #0
   be7f8:	f018 020f 	ands.w	r2, r8, #15
   be7fc:	d00a      	beq.n	be814 <_strtod_l+0x56c>
   be7fe:	4b13      	ldr	r3, [pc, #76]	; (be84c <_strtod_l+0x5a4>)
   be800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   be804:	4650      	mov	r0, sl
   be806:	4659      	mov	r1, fp
   be808:	e9d3 2300 	ldrd	r2, r3, [r3]
   be80c:	f7ff f9fc 	bl	bdc08 <__aeabi_ddiv>
   be810:	4682      	mov	sl, r0
   be812:	468b      	mov	fp, r1
   be814:	ea5f 1828 	movs.w	r8, r8, asr #4
   be818:	d0d7      	beq.n	be7ca <_strtod_l+0x522>
   be81a:	f1b8 0f1f 	cmp.w	r8, #31
   be81e:	dd1f      	ble.n	be860 <_strtod_l+0x5b8>
   be820:	2500      	movs	r5, #0
   be822:	462e      	mov	r6, r5
   be824:	9507      	str	r5, [sp, #28]
   be826:	9505      	str	r5, [sp, #20]
   be828:	2322      	movs	r3, #34	; 0x22
   be82a:	f04f 0a00 	mov.w	sl, #0
   be82e:	f04f 0b00 	mov.w	fp, #0
   be832:	6023      	str	r3, [r4, #0]
   be834:	e786      	b.n	be744 <_strtod_l+0x49c>
   be836:	bf00      	nop
   be838:	000c1a9e 	.word	0x000c1a9e
   be83c:	000c1ab8 	.word	0x000c1ab8
   be840:	000c1a95 	.word	0x000c1a95
   be844:	000c1a98 	.word	0x000c1a98
   be848:	000c071b 	.word	0x000c071b
   be84c:	000c1d08 	.word	0x000c1d08
   be850:	000c1ce0 	.word	0x000c1ce0
   be854:	7ff00000 	.word	0x7ff00000
   be858:	7ca00000 	.word	0x7ca00000
   be85c:	7fefffff 	.word	0x7fefffff
   be860:	f018 0310 	ands.w	r3, r8, #16
   be864:	bf18      	it	ne
   be866:	236a      	movne	r3, #106	; 0x6a
   be868:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bec18 <_strtod_l+0x970>
   be86c:	9304      	str	r3, [sp, #16]
   be86e:	4650      	mov	r0, sl
   be870:	4659      	mov	r1, fp
   be872:	2300      	movs	r3, #0
   be874:	f018 0f01 	tst.w	r8, #1
   be878:	d004      	beq.n	be884 <_strtod_l+0x5dc>
   be87a:	e9d9 2300 	ldrd	r2, r3, [r9]
   be87e:	f7ff f899 	bl	bd9b4 <__aeabi_dmul>
   be882:	2301      	movs	r3, #1
   be884:	ea5f 0868 	movs.w	r8, r8, asr #1
   be888:	f109 0908 	add.w	r9, r9, #8
   be88c:	d1f2      	bne.n	be874 <_strtod_l+0x5cc>
   be88e:	b10b      	cbz	r3, be894 <_strtod_l+0x5ec>
   be890:	4682      	mov	sl, r0
   be892:	468b      	mov	fp, r1
   be894:	9b04      	ldr	r3, [sp, #16]
   be896:	b1c3      	cbz	r3, be8ca <_strtod_l+0x622>
   be898:	f3cb 520a 	ubfx	r2, fp, #20, #11
   be89c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   be8a0:	2b00      	cmp	r3, #0
   be8a2:	4659      	mov	r1, fp
   be8a4:	dd11      	ble.n	be8ca <_strtod_l+0x622>
   be8a6:	2b1f      	cmp	r3, #31
   be8a8:	f340 8124 	ble.w	beaf4 <_strtod_l+0x84c>
   be8ac:	2b34      	cmp	r3, #52	; 0x34
   be8ae:	bfde      	ittt	le
   be8b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   be8b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   be8b8:	fa03 f202 	lslle.w	r2, r3, r2
   be8bc:	f04f 0a00 	mov.w	sl, #0
   be8c0:	bfcc      	ite	gt
   be8c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   be8c6:	ea02 0b01 	andle.w	fp, r2, r1
   be8ca:	2200      	movs	r2, #0
   be8cc:	2300      	movs	r3, #0
   be8ce:	4650      	mov	r0, sl
   be8d0:	4659      	mov	r1, fp
   be8d2:	f7ff fad7 	bl	bde84 <__aeabi_dcmpeq>
   be8d6:	2800      	cmp	r0, #0
   be8d8:	d1a2      	bne.n	be820 <_strtod_l+0x578>
   be8da:	9b07      	ldr	r3, [sp, #28]
   be8dc:	9300      	str	r3, [sp, #0]
   be8de:	9908      	ldr	r1, [sp, #32]
   be8e0:	462b      	mov	r3, r5
   be8e2:	463a      	mov	r2, r7
   be8e4:	4620      	mov	r0, r4
   be8e6:	f001 f80d 	bl	bf904 <__s2b>
   be8ea:	9007      	str	r0, [sp, #28]
   be8ec:	2800      	cmp	r0, #0
   be8ee:	f43f af1f 	beq.w	be730 <_strtod_l+0x488>
   be8f2:	9b05      	ldr	r3, [sp, #20]
   be8f4:	1b9e      	subs	r6, r3, r6
   be8f6:	9b06      	ldr	r3, [sp, #24]
   be8f8:	2b00      	cmp	r3, #0
   be8fa:	bfb4      	ite	lt
   be8fc:	4633      	movlt	r3, r6
   be8fe:	2300      	movge	r3, #0
   be900:	930c      	str	r3, [sp, #48]	; 0x30
   be902:	9b06      	ldr	r3, [sp, #24]
   be904:	2500      	movs	r5, #0
   be906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   be90a:	9312      	str	r3, [sp, #72]	; 0x48
   be90c:	462e      	mov	r6, r5
   be90e:	9b07      	ldr	r3, [sp, #28]
   be910:	4620      	mov	r0, r4
   be912:	6859      	ldr	r1, [r3, #4]
   be914:	f000 ff4e 	bl	bf7b4 <_Balloc>
   be918:	9005      	str	r0, [sp, #20]
   be91a:	2800      	cmp	r0, #0
   be91c:	f43f af0c 	beq.w	be738 <_strtod_l+0x490>
   be920:	9b07      	ldr	r3, [sp, #28]
   be922:	691a      	ldr	r2, [r3, #16]
   be924:	3202      	adds	r2, #2
   be926:	f103 010c 	add.w	r1, r3, #12
   be92a:	0092      	lsls	r2, r2, #2
   be92c:	300c      	adds	r0, #12
   be92e:	f7ff fb86 	bl	be03e <memcpy>
   be932:	ec4b ab10 	vmov	d0, sl, fp
   be936:	aa1a      	add	r2, sp, #104	; 0x68
   be938:	a919      	add	r1, sp, #100	; 0x64
   be93a:	4620      	mov	r0, r4
   be93c:	f001 fb28 	bl	bff90 <__d2b>
   be940:	ec4b ab18 	vmov	d8, sl, fp
   be944:	9018      	str	r0, [sp, #96]	; 0x60
   be946:	2800      	cmp	r0, #0
   be948:	f43f aef6 	beq.w	be738 <_strtod_l+0x490>
   be94c:	2101      	movs	r1, #1
   be94e:	4620      	mov	r0, r4
   be950:	f001 f872 	bl	bfa38 <__i2b>
   be954:	4606      	mov	r6, r0
   be956:	2800      	cmp	r0, #0
   be958:	f43f aeee 	beq.w	be738 <_strtod_l+0x490>
   be95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   be95e:	9904      	ldr	r1, [sp, #16]
   be960:	2b00      	cmp	r3, #0
   be962:	bfab      	itete	ge
   be964:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   be966:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   be968:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   be96a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   be96e:	bfac      	ite	ge
   be970:	eb03 0902 	addge.w	r9, r3, r2
   be974:	1ad7      	sublt	r7, r2, r3
   be976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   be978:	eba3 0801 	sub.w	r8, r3, r1
   be97c:	4490      	add	r8, r2
   be97e:	4ba1      	ldr	r3, [pc, #644]	; (bec04 <_strtod_l+0x95c>)
   be980:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be984:	4598      	cmp	r8, r3
   be986:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   be98a:	f280 80c7 	bge.w	beb1c <_strtod_l+0x874>
   be98e:	eba3 0308 	sub.w	r3, r3, r8
   be992:	2b1f      	cmp	r3, #31
   be994:	eba2 0203 	sub.w	r2, r2, r3
   be998:	f04f 0101 	mov.w	r1, #1
   be99c:	f300 80b1 	bgt.w	beb02 <_strtod_l+0x85a>
   be9a0:	fa01 f303 	lsl.w	r3, r1, r3
   be9a4:	930d      	str	r3, [sp, #52]	; 0x34
   be9a6:	2300      	movs	r3, #0
   be9a8:	9308      	str	r3, [sp, #32]
   be9aa:	eb09 0802 	add.w	r8, r9, r2
   be9ae:	9b04      	ldr	r3, [sp, #16]
   be9b0:	45c1      	cmp	r9, r8
   be9b2:	4417      	add	r7, r2
   be9b4:	441f      	add	r7, r3
   be9b6:	464b      	mov	r3, r9
   be9b8:	bfa8      	it	ge
   be9ba:	4643      	movge	r3, r8
   be9bc:	42bb      	cmp	r3, r7
   be9be:	bfa8      	it	ge
   be9c0:	463b      	movge	r3, r7
   be9c2:	2b00      	cmp	r3, #0
   be9c4:	bfc2      	ittt	gt
   be9c6:	eba8 0803 	subgt.w	r8, r8, r3
   be9ca:	1aff      	subgt	r7, r7, r3
   be9cc:	eba9 0903 	subgt.w	r9, r9, r3
   be9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   be9d2:	2b00      	cmp	r3, #0
   be9d4:	dd17      	ble.n	bea06 <_strtod_l+0x75e>
   be9d6:	4631      	mov	r1, r6
   be9d8:	461a      	mov	r2, r3
   be9da:	4620      	mov	r0, r4
   be9dc:	f001 f8ec 	bl	bfbb8 <__pow5mult>
   be9e0:	4606      	mov	r6, r0
   be9e2:	2800      	cmp	r0, #0
   be9e4:	f43f aea8 	beq.w	be738 <_strtod_l+0x490>
   be9e8:	4601      	mov	r1, r0
   be9ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be9ec:	4620      	mov	r0, r4
   be9ee:	f001 f839 	bl	bfa64 <__multiply>
   be9f2:	900b      	str	r0, [sp, #44]	; 0x2c
   be9f4:	2800      	cmp	r0, #0
   be9f6:	f43f ae9f 	beq.w	be738 <_strtod_l+0x490>
   be9fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   be9fc:	4620      	mov	r0, r4
   be9fe:	f000 ff19 	bl	bf834 <_Bfree>
   bea02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bea04:	9318      	str	r3, [sp, #96]	; 0x60
   bea06:	f1b8 0f00 	cmp.w	r8, #0
   bea0a:	f300 808c 	bgt.w	beb26 <_strtod_l+0x87e>
   bea0e:	9b06      	ldr	r3, [sp, #24]
   bea10:	2b00      	cmp	r3, #0
   bea12:	dd08      	ble.n	bea26 <_strtod_l+0x77e>
   bea14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bea16:	9905      	ldr	r1, [sp, #20]
   bea18:	4620      	mov	r0, r4
   bea1a:	f001 f8cd 	bl	bfbb8 <__pow5mult>
   bea1e:	9005      	str	r0, [sp, #20]
   bea20:	2800      	cmp	r0, #0
   bea22:	f43f ae89 	beq.w	be738 <_strtod_l+0x490>
   bea26:	2f00      	cmp	r7, #0
   bea28:	dd08      	ble.n	bea3c <_strtod_l+0x794>
   bea2a:	9905      	ldr	r1, [sp, #20]
   bea2c:	463a      	mov	r2, r7
   bea2e:	4620      	mov	r0, r4
   bea30:	f001 f91c 	bl	bfc6c <__lshift>
   bea34:	9005      	str	r0, [sp, #20]
   bea36:	2800      	cmp	r0, #0
   bea38:	f43f ae7e 	beq.w	be738 <_strtod_l+0x490>
   bea3c:	f1b9 0f00 	cmp.w	r9, #0
   bea40:	dd08      	ble.n	bea54 <_strtod_l+0x7ac>
   bea42:	4631      	mov	r1, r6
   bea44:	464a      	mov	r2, r9
   bea46:	4620      	mov	r0, r4
   bea48:	f001 f910 	bl	bfc6c <__lshift>
   bea4c:	4606      	mov	r6, r0
   bea4e:	2800      	cmp	r0, #0
   bea50:	f43f ae72 	beq.w	be738 <_strtod_l+0x490>
   bea54:	9a05      	ldr	r2, [sp, #20]
   bea56:	9918      	ldr	r1, [sp, #96]	; 0x60
   bea58:	4620      	mov	r0, r4
   bea5a:	f001 f993 	bl	bfd84 <__mdiff>
   bea5e:	4605      	mov	r5, r0
   bea60:	2800      	cmp	r0, #0
   bea62:	f43f ae69 	beq.w	be738 <_strtod_l+0x490>
   bea66:	68c3      	ldr	r3, [r0, #12]
   bea68:	930b      	str	r3, [sp, #44]	; 0x2c
   bea6a:	2300      	movs	r3, #0
   bea6c:	60c3      	str	r3, [r0, #12]
   bea6e:	4631      	mov	r1, r6
   bea70:	f001 f96c 	bl	bfd4c <__mcmp>
   bea74:	2800      	cmp	r0, #0
   bea76:	da60      	bge.n	beb3a <_strtod_l+0x892>
   bea78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bea7a:	ea53 030a 	orrs.w	r3, r3, sl
   bea7e:	f040 8082 	bne.w	beb86 <_strtod_l+0x8de>
   bea82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bea86:	2b00      	cmp	r3, #0
   bea88:	d17d      	bne.n	beb86 <_strtod_l+0x8de>
   bea8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bea8e:	0d1b      	lsrs	r3, r3, #20
   bea90:	051b      	lsls	r3, r3, #20
   bea92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bea96:	d976      	bls.n	beb86 <_strtod_l+0x8de>
   bea98:	696b      	ldr	r3, [r5, #20]
   bea9a:	b913      	cbnz	r3, beaa2 <_strtod_l+0x7fa>
   bea9c:	692b      	ldr	r3, [r5, #16]
   bea9e:	2b01      	cmp	r3, #1
   beaa0:	dd71      	ble.n	beb86 <_strtod_l+0x8de>
   beaa2:	4629      	mov	r1, r5
   beaa4:	2201      	movs	r2, #1
   beaa6:	4620      	mov	r0, r4
   beaa8:	f001 f8e0 	bl	bfc6c <__lshift>
   beaac:	4631      	mov	r1, r6
   beaae:	4605      	mov	r5, r0
   beab0:	f001 f94c 	bl	bfd4c <__mcmp>
   beab4:	2800      	cmp	r0, #0
   beab6:	dd66      	ble.n	beb86 <_strtod_l+0x8de>
   beab8:	9904      	ldr	r1, [sp, #16]
   beaba:	4a53      	ldr	r2, [pc, #332]	; (bec08 <_strtod_l+0x960>)
   beabc:	465b      	mov	r3, fp
   beabe:	2900      	cmp	r1, #0
   beac0:	f000 8081 	beq.w	bebc6 <_strtod_l+0x91e>
   beac4:	ea02 010b 	and.w	r1, r2, fp
   beac8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   beacc:	dc7b      	bgt.n	bebc6 <_strtod_l+0x91e>
   beace:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bead2:	f77f aea9 	ble.w	be828 <_strtod_l+0x580>
   bead6:	4b4d      	ldr	r3, [pc, #308]	; (bec0c <_strtod_l+0x964>)
   bead8:	4650      	mov	r0, sl
   beada:	4659      	mov	r1, fp
   beadc:	2200      	movs	r2, #0
   beade:	f7fe ff69 	bl	bd9b4 <__aeabi_dmul>
   beae2:	460b      	mov	r3, r1
   beae4:	4303      	orrs	r3, r0
   beae6:	bf08      	it	eq
   beae8:	2322      	moveq	r3, #34	; 0x22
   beaea:	4682      	mov	sl, r0
   beaec:	468b      	mov	fp, r1
   beaee:	bf08      	it	eq
   beaf0:	6023      	streq	r3, [r4, #0]
   beaf2:	e62b      	b.n	be74c <_strtod_l+0x4a4>
   beaf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   beaf8:	fa02 f303 	lsl.w	r3, r2, r3
   beafc:	ea03 0a0a 	and.w	sl, r3, sl
   beb00:	e6e3      	b.n	be8ca <_strtod_l+0x622>
   beb02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   beb06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   beb0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   beb0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   beb12:	fa01 f308 	lsl.w	r3, r1, r8
   beb16:	9308      	str	r3, [sp, #32]
   beb18:	910d      	str	r1, [sp, #52]	; 0x34
   beb1a:	e746      	b.n	be9aa <_strtod_l+0x702>
   beb1c:	2300      	movs	r3, #0
   beb1e:	9308      	str	r3, [sp, #32]
   beb20:	2301      	movs	r3, #1
   beb22:	930d      	str	r3, [sp, #52]	; 0x34
   beb24:	e741      	b.n	be9aa <_strtod_l+0x702>
   beb26:	9918      	ldr	r1, [sp, #96]	; 0x60
   beb28:	4642      	mov	r2, r8
   beb2a:	4620      	mov	r0, r4
   beb2c:	f001 f89e 	bl	bfc6c <__lshift>
   beb30:	9018      	str	r0, [sp, #96]	; 0x60
   beb32:	2800      	cmp	r0, #0
   beb34:	f47f af6b 	bne.w	bea0e <_strtod_l+0x766>
   beb38:	e5fe      	b.n	be738 <_strtod_l+0x490>
   beb3a:	465f      	mov	r7, fp
   beb3c:	d16e      	bne.n	bec1c <_strtod_l+0x974>
   beb3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   beb40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   beb44:	b342      	cbz	r2, beb98 <_strtod_l+0x8f0>
   beb46:	4a32      	ldr	r2, [pc, #200]	; (bec10 <_strtod_l+0x968>)
   beb48:	4293      	cmp	r3, r2
   beb4a:	d128      	bne.n	beb9e <_strtod_l+0x8f6>
   beb4c:	9b04      	ldr	r3, [sp, #16]
   beb4e:	4651      	mov	r1, sl
   beb50:	b1eb      	cbz	r3, beb8e <_strtod_l+0x8e6>
   beb52:	4b2d      	ldr	r3, [pc, #180]	; (bec08 <_strtod_l+0x960>)
   beb54:	403b      	ands	r3, r7
   beb56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   beb5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   beb5e:	d819      	bhi.n	beb94 <_strtod_l+0x8ec>
   beb60:	0d1b      	lsrs	r3, r3, #20
   beb62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   beb66:	fa02 f303 	lsl.w	r3, r2, r3
   beb6a:	4299      	cmp	r1, r3
   beb6c:	d117      	bne.n	beb9e <_strtod_l+0x8f6>
   beb6e:	4b29      	ldr	r3, [pc, #164]	; (bec14 <_strtod_l+0x96c>)
   beb70:	429f      	cmp	r7, r3
   beb72:	d102      	bne.n	beb7a <_strtod_l+0x8d2>
   beb74:	3101      	adds	r1, #1
   beb76:	f43f addf 	beq.w	be738 <_strtod_l+0x490>
   beb7a:	4b23      	ldr	r3, [pc, #140]	; (bec08 <_strtod_l+0x960>)
   beb7c:	403b      	ands	r3, r7
   beb7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   beb82:	f04f 0a00 	mov.w	sl, #0
   beb86:	9b04      	ldr	r3, [sp, #16]
   beb88:	2b00      	cmp	r3, #0
   beb8a:	d1a4      	bne.n	bead6 <_strtod_l+0x82e>
   beb8c:	e5de      	b.n	be74c <_strtod_l+0x4a4>
   beb8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   beb92:	e7ea      	b.n	beb6a <_strtod_l+0x8c2>
   beb94:	4613      	mov	r3, r2
   beb96:	e7e8      	b.n	beb6a <_strtod_l+0x8c2>
   beb98:	ea53 030a 	orrs.w	r3, r3, sl
   beb9c:	d08c      	beq.n	beab8 <_strtod_l+0x810>
   beb9e:	9b08      	ldr	r3, [sp, #32]
   beba0:	b1db      	cbz	r3, bebda <_strtod_l+0x932>
   beba2:	423b      	tst	r3, r7
   beba4:	d0ef      	beq.n	beb86 <_strtod_l+0x8de>
   beba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   beba8:	9a04      	ldr	r2, [sp, #16]
   bebaa:	4650      	mov	r0, sl
   bebac:	4659      	mov	r1, fp
   bebae:	b1c3      	cbz	r3, bebe2 <_strtod_l+0x93a>
   bebb0:	f7ff fb5c 	bl	be26c <sulp>
   bebb4:	4602      	mov	r2, r0
   bebb6:	460b      	mov	r3, r1
   bebb8:	ec51 0b18 	vmov	r0, r1, d8
   bebbc:	f7fe fd44 	bl	bd648 <__adddf3>
   bebc0:	4682      	mov	sl, r0
   bebc2:	468b      	mov	fp, r1
   bebc4:	e7df      	b.n	beb86 <_strtod_l+0x8de>
   bebc6:	4013      	ands	r3, r2
   bebc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bebcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bebd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bebd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bebd8:	e7d5      	b.n	beb86 <_strtod_l+0x8de>
   bebda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bebdc:	ea13 0f0a 	tst.w	r3, sl
   bebe0:	e7e0      	b.n	beba4 <_strtod_l+0x8fc>
   bebe2:	f7ff fb43 	bl	be26c <sulp>
   bebe6:	4602      	mov	r2, r0
   bebe8:	460b      	mov	r3, r1
   bebea:	ec51 0b18 	vmov	r0, r1, d8
   bebee:	f7fe fd29 	bl	bd644 <__aeabi_dsub>
   bebf2:	2200      	movs	r2, #0
   bebf4:	2300      	movs	r3, #0
   bebf6:	4682      	mov	sl, r0
   bebf8:	468b      	mov	fp, r1
   bebfa:	f7ff f943 	bl	bde84 <__aeabi_dcmpeq>
   bebfe:	2800      	cmp	r0, #0
   bec00:	d0c1      	beq.n	beb86 <_strtod_l+0x8de>
   bec02:	e611      	b.n	be828 <_strtod_l+0x580>
   bec04:	fffffc02 	.word	0xfffffc02
   bec08:	7ff00000 	.word	0x7ff00000
   bec0c:	39500000 	.word	0x39500000
   bec10:	000fffff 	.word	0x000fffff
   bec14:	7fefffff 	.word	0x7fefffff
   bec18:	000c1ad0 	.word	0x000c1ad0
   bec1c:	4631      	mov	r1, r6
   bec1e:	4628      	mov	r0, r5
   bec20:	f001 fa12 	bl	c0048 <__ratio>
   bec24:	ec59 8b10 	vmov	r8, r9, d0
   bec28:	ee10 0a10 	vmov	r0, s0
   bec2c:	2200      	movs	r2, #0
   bec2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bec32:	4649      	mov	r1, r9
   bec34:	f7ff f93a 	bl	bdeac <__aeabi_dcmple>
   bec38:	2800      	cmp	r0, #0
   bec3a:	d07a      	beq.n	bed32 <_strtod_l+0xa8a>
   bec3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bec3e:	2b00      	cmp	r3, #0
   bec40:	d04a      	beq.n	becd8 <_strtod_l+0xa30>
   bec42:	4b95      	ldr	r3, [pc, #596]	; (bee98 <_strtod_l+0xbf0>)
   bec44:	2200      	movs	r2, #0
   bec46:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bec4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bee98 <_strtod_l+0xbf0>
   bec4e:	f04f 0800 	mov.w	r8, #0
   bec52:	4b92      	ldr	r3, [pc, #584]	; (bee9c <_strtod_l+0xbf4>)
   bec54:	403b      	ands	r3, r7
   bec56:	930d      	str	r3, [sp, #52]	; 0x34
   bec58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bec5a:	4b91      	ldr	r3, [pc, #580]	; (beea0 <_strtod_l+0xbf8>)
   bec5c:	429a      	cmp	r2, r3
   bec5e:	f040 80b0 	bne.w	bedc2 <_strtod_l+0xb1a>
   bec62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bec66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bec6a:	ec4b ab10 	vmov	d0, sl, fp
   bec6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bec72:	f001 f911 	bl	bfe98 <__ulp>
   bec76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bec7a:	ec53 2b10 	vmov	r2, r3, d0
   bec7e:	f7fe fe99 	bl	bd9b4 <__aeabi_dmul>
   bec82:	4652      	mov	r2, sl
   bec84:	465b      	mov	r3, fp
   bec86:	f7fe fcdf 	bl	bd648 <__adddf3>
   bec8a:	460b      	mov	r3, r1
   bec8c:	4983      	ldr	r1, [pc, #524]	; (bee9c <_strtod_l+0xbf4>)
   bec8e:	4a85      	ldr	r2, [pc, #532]	; (beea4 <_strtod_l+0xbfc>)
   bec90:	4019      	ands	r1, r3
   bec92:	4291      	cmp	r1, r2
   bec94:	4682      	mov	sl, r0
   bec96:	d960      	bls.n	bed5a <_strtod_l+0xab2>
   bec98:	ee18 3a90 	vmov	r3, s17
   bec9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   beca0:	4293      	cmp	r3, r2
   beca2:	d104      	bne.n	becae <_strtod_l+0xa06>
   beca4:	ee18 3a10 	vmov	r3, s16
   beca8:	3301      	adds	r3, #1
   becaa:	f43f ad45 	beq.w	be738 <_strtod_l+0x490>
   becae:	f8df b200 	ldr.w	fp, [pc, #512]	; beeb0 <_strtod_l+0xc08>
   becb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   becb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   becb8:	4620      	mov	r0, r4
   becba:	f000 fdbb 	bl	bf834 <_Bfree>
   becbe:	9905      	ldr	r1, [sp, #20]
   becc0:	4620      	mov	r0, r4
   becc2:	f000 fdb7 	bl	bf834 <_Bfree>
   becc6:	4631      	mov	r1, r6
   becc8:	4620      	mov	r0, r4
   becca:	f000 fdb3 	bl	bf834 <_Bfree>
   becce:	4629      	mov	r1, r5
   becd0:	4620      	mov	r0, r4
   becd2:	f000 fdaf 	bl	bf834 <_Bfree>
   becd6:	e61a      	b.n	be90e <_strtod_l+0x666>
   becd8:	f1ba 0f00 	cmp.w	sl, #0
   becdc:	d11b      	bne.n	bed16 <_strtod_l+0xa6e>
   becde:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bece2:	b9f3      	cbnz	r3, bed22 <_strtod_l+0xa7a>
   bece4:	4b6c      	ldr	r3, [pc, #432]	; (bee98 <_strtod_l+0xbf0>)
   bece6:	2200      	movs	r2, #0
   bece8:	4640      	mov	r0, r8
   becea:	4649      	mov	r1, r9
   becec:	f7ff f8d4 	bl	bde98 <__aeabi_dcmplt>
   becf0:	b9d0      	cbnz	r0, bed28 <_strtod_l+0xa80>
   becf2:	4640      	mov	r0, r8
   becf4:	4649      	mov	r1, r9
   becf6:	4b6c      	ldr	r3, [pc, #432]	; (beea8 <_strtod_l+0xc00>)
   becf8:	2200      	movs	r2, #0
   becfa:	f7fe fe5b 	bl	bd9b4 <__aeabi_dmul>
   becfe:	4680      	mov	r8, r0
   bed00:	4689      	mov	r9, r1
   bed02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bed06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bed0a:	9315      	str	r3, [sp, #84]	; 0x54
   bed0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bed10:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bed14:	e79d      	b.n	bec52 <_strtod_l+0x9aa>
   bed16:	f1ba 0f01 	cmp.w	sl, #1
   bed1a:	d102      	bne.n	bed22 <_strtod_l+0xa7a>
   bed1c:	2f00      	cmp	r7, #0
   bed1e:	f43f ad83 	beq.w	be828 <_strtod_l+0x580>
   bed22:	4b62      	ldr	r3, [pc, #392]	; (beeac <_strtod_l+0xc04>)
   bed24:	2200      	movs	r2, #0
   bed26:	e78e      	b.n	bec46 <_strtod_l+0x99e>
   bed28:	f8df 917c 	ldr.w	r9, [pc, #380]	; beea8 <_strtod_l+0xc00>
   bed2c:	f04f 0800 	mov.w	r8, #0
   bed30:	e7e7      	b.n	bed02 <_strtod_l+0xa5a>
   bed32:	4b5d      	ldr	r3, [pc, #372]	; (beea8 <_strtod_l+0xc00>)
   bed34:	4640      	mov	r0, r8
   bed36:	4649      	mov	r1, r9
   bed38:	2200      	movs	r2, #0
   bed3a:	f7fe fe3b 	bl	bd9b4 <__aeabi_dmul>
   bed3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bed40:	4680      	mov	r8, r0
   bed42:	4689      	mov	r9, r1
   bed44:	b933      	cbnz	r3, bed54 <_strtod_l+0xaac>
   bed46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bed4a:	900e      	str	r0, [sp, #56]	; 0x38
   bed4c:	930f      	str	r3, [sp, #60]	; 0x3c
   bed4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bed52:	e7dd      	b.n	bed10 <_strtod_l+0xa68>
   bed54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bed58:	e7f9      	b.n	bed4e <_strtod_l+0xaa6>
   bed5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bed5e:	9b04      	ldr	r3, [sp, #16]
   bed60:	2b00      	cmp	r3, #0
   bed62:	d1a8      	bne.n	becb6 <_strtod_l+0xa0e>
   bed64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bed68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bed6a:	0d1b      	lsrs	r3, r3, #20
   bed6c:	051b      	lsls	r3, r3, #20
   bed6e:	429a      	cmp	r2, r3
   bed70:	d1a1      	bne.n	becb6 <_strtod_l+0xa0e>
   bed72:	4640      	mov	r0, r8
   bed74:	4649      	mov	r1, r9
   bed76:	f001 fa05 	bl	c0184 <__aeabi_d2lz>
   bed7a:	f7fe fded 	bl	bd958 <__aeabi_l2d>
   bed7e:	4602      	mov	r2, r0
   bed80:	460b      	mov	r3, r1
   bed82:	4640      	mov	r0, r8
   bed84:	4649      	mov	r1, r9
   bed86:	f7fe fc5d 	bl	bd644 <__aeabi_dsub>
   bed8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bed8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bed90:	ea43 030a 	orr.w	r3, r3, sl
   bed94:	4313      	orrs	r3, r2
   bed96:	4680      	mov	r8, r0
   bed98:	4689      	mov	r9, r1
   bed9a:	d055      	beq.n	bee48 <_strtod_l+0xba0>
   bed9c:	a336      	add	r3, pc, #216	; (adr r3, bee78 <_strtod_l+0xbd0>)
   bed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   beda2:	f7ff f879 	bl	bde98 <__aeabi_dcmplt>
   beda6:	2800      	cmp	r0, #0
   beda8:	f47f acd0 	bne.w	be74c <_strtod_l+0x4a4>
   bedac:	a334      	add	r3, pc, #208	; (adr r3, bee80 <_strtod_l+0xbd8>)
   bedae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bedb2:	4640      	mov	r0, r8
   bedb4:	4649      	mov	r1, r9
   bedb6:	f7ff f88d 	bl	bded4 <__aeabi_dcmpgt>
   bedba:	2800      	cmp	r0, #0
   bedbc:	f43f af7b 	beq.w	becb6 <_strtod_l+0xa0e>
   bedc0:	e4c4      	b.n	be74c <_strtod_l+0x4a4>
   bedc2:	9b04      	ldr	r3, [sp, #16]
   bedc4:	b333      	cbz	r3, bee14 <_strtod_l+0xb6c>
   bedc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bedc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bedcc:	d822      	bhi.n	bee14 <_strtod_l+0xb6c>
   bedce:	a32e      	add	r3, pc, #184	; (adr r3, bee88 <_strtod_l+0xbe0>)
   bedd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bedd4:	4640      	mov	r0, r8
   bedd6:	4649      	mov	r1, r9
   bedd8:	f7ff f868 	bl	bdeac <__aeabi_dcmple>
   beddc:	b1a0      	cbz	r0, bee08 <_strtod_l+0xb60>
   bedde:	4649      	mov	r1, r9
   bede0:	4640      	mov	r0, r8
   bede2:	f7ff f881 	bl	bdee8 <__aeabi_d2uiz>
   bede6:	2801      	cmp	r0, #1
   bede8:	bf38      	it	cc
   bedea:	2001      	movcc	r0, #1
   bedec:	f7fe fd68 	bl	bd8c0 <__aeabi_ui2d>
   bedf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bedf2:	4680      	mov	r8, r0
   bedf4:	4689      	mov	r9, r1
   bedf6:	bb23      	cbnz	r3, bee42 <_strtod_l+0xb9a>
   bedf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bedfc:	9010      	str	r0, [sp, #64]	; 0x40
   bedfe:	9311      	str	r3, [sp, #68]	; 0x44
   bee00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bee04:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bee08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bee0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bee0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bee10:	1a9b      	subs	r3, r3, r2
   bee12:	9309      	str	r3, [sp, #36]	; 0x24
   bee14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bee18:	eeb0 0a48 	vmov.f32	s0, s16
   bee1c:	eef0 0a68 	vmov.f32	s1, s17
   bee20:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bee24:	f001 f838 	bl	bfe98 <__ulp>
   bee28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bee2c:	ec53 2b10 	vmov	r2, r3, d0
   bee30:	f7fe fdc0 	bl	bd9b4 <__aeabi_dmul>
   bee34:	ec53 2b18 	vmov	r2, r3, d8
   bee38:	f7fe fc06 	bl	bd648 <__adddf3>
   bee3c:	4682      	mov	sl, r0
   bee3e:	468b      	mov	fp, r1
   bee40:	e78d      	b.n	bed5e <_strtod_l+0xab6>
   bee42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bee46:	e7db      	b.n	bee00 <_strtod_l+0xb58>
   bee48:	a311      	add	r3, pc, #68	; (adr r3, bee90 <_strtod_l+0xbe8>)
   bee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bee4e:	f7ff f823 	bl	bde98 <__aeabi_dcmplt>
   bee52:	e7b2      	b.n	bedba <_strtod_l+0xb12>
   bee54:	2300      	movs	r3, #0
   bee56:	930a      	str	r3, [sp, #40]	; 0x28
   bee58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bee5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bee5c:	6013      	str	r3, [r2, #0]
   bee5e:	f7ff ba6b 	b.w	be338 <_strtod_l+0x90>
   bee62:	2a65      	cmp	r2, #101	; 0x65
   bee64:	f43f ab5f 	beq.w	be526 <_strtod_l+0x27e>
   bee68:	2a45      	cmp	r2, #69	; 0x45
   bee6a:	f43f ab5c 	beq.w	be526 <_strtod_l+0x27e>
   bee6e:	2301      	movs	r3, #1
   bee70:	f7ff bb94 	b.w	be59c <_strtod_l+0x2f4>
   bee74:	f3af 8000 	nop.w
   bee78:	94a03595 	.word	0x94a03595
   bee7c:	3fdfffff 	.word	0x3fdfffff
   bee80:	35afe535 	.word	0x35afe535
   bee84:	3fe00000 	.word	0x3fe00000
   bee88:	ffc00000 	.word	0xffc00000
   bee8c:	41dfffff 	.word	0x41dfffff
   bee90:	94a03595 	.word	0x94a03595
   bee94:	3fcfffff 	.word	0x3fcfffff
   bee98:	3ff00000 	.word	0x3ff00000
   bee9c:	7ff00000 	.word	0x7ff00000
   beea0:	7fe00000 	.word	0x7fe00000
   beea4:	7c9fffff 	.word	0x7c9fffff
   beea8:	3fe00000 	.word	0x3fe00000
   beeac:	bff00000 	.word	0xbff00000
   beeb0:	7fefffff 	.word	0x7fefffff

000beeb4 <strtod>:
   beeb4:	460a      	mov	r2, r1
   beeb6:	4601      	mov	r1, r0
   beeb8:	4802      	ldr	r0, [pc, #8]	; (beec4 <strtod+0x10>)
   beeba:	4b03      	ldr	r3, [pc, #12]	; (beec8 <strtod+0x14>)
   beebc:	6800      	ldr	r0, [r0, #0]
   beebe:	f7ff b9f3 	b.w	be2a8 <_strtod_l>
   beec2:	bf00      	nop
   beec4:	2003da90 	.word	0x2003da90
   beec8:	2003dafc 	.word	0x2003dafc

000beecc <_strtol_l.constprop.0>:
   beecc:	2b01      	cmp	r3, #1
   beece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   beed2:	d001      	beq.n	beed8 <_strtol_l.constprop.0+0xc>
   beed4:	2b24      	cmp	r3, #36	; 0x24
   beed6:	d906      	bls.n	beee6 <_strtol_l.constprop.0+0x1a>
   beed8:	f7fa fbc2 	bl	b9660 <__errno>
   beedc:	2316      	movs	r3, #22
   beede:	6003      	str	r3, [r0, #0]
   beee0:	2000      	movs	r0, #0
   beee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   beee6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; befcc <_strtol_l.constprop.0+0x100>
   beeea:	460d      	mov	r5, r1
   beeec:	462e      	mov	r6, r5
   beeee:	f815 4b01 	ldrb.w	r4, [r5], #1
   beef2:	f814 700c 	ldrb.w	r7, [r4, ip]
   beef6:	f017 0708 	ands.w	r7, r7, #8
   beefa:	d1f7      	bne.n	beeec <_strtol_l.constprop.0+0x20>
   beefc:	2c2d      	cmp	r4, #45	; 0x2d
   beefe:	d132      	bne.n	bef66 <_strtol_l.constprop.0+0x9a>
   bef00:	782c      	ldrb	r4, [r5, #0]
   bef02:	2701      	movs	r7, #1
   bef04:	1cb5      	adds	r5, r6, #2
   bef06:	2b00      	cmp	r3, #0
   bef08:	d05b      	beq.n	befc2 <_strtol_l.constprop.0+0xf6>
   bef0a:	2b10      	cmp	r3, #16
   bef0c:	d109      	bne.n	bef22 <_strtol_l.constprop.0+0x56>
   bef0e:	2c30      	cmp	r4, #48	; 0x30
   bef10:	d107      	bne.n	bef22 <_strtol_l.constprop.0+0x56>
   bef12:	782c      	ldrb	r4, [r5, #0]
   bef14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bef18:	2c58      	cmp	r4, #88	; 0x58
   bef1a:	d14d      	bne.n	befb8 <_strtol_l.constprop.0+0xec>
   bef1c:	786c      	ldrb	r4, [r5, #1]
   bef1e:	2310      	movs	r3, #16
   bef20:	3502      	adds	r5, #2
   bef22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bef26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bef2a:	f04f 0c00 	mov.w	ip, #0
   bef2e:	fbb8 f9f3 	udiv	r9, r8, r3
   bef32:	4666      	mov	r6, ip
   bef34:	fb03 8a19 	mls	sl, r3, r9, r8
   bef38:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bef3c:	f1be 0f09 	cmp.w	lr, #9
   bef40:	d816      	bhi.n	bef70 <_strtol_l.constprop.0+0xa4>
   bef42:	4674      	mov	r4, lr
   bef44:	42a3      	cmp	r3, r4
   bef46:	dd24      	ble.n	bef92 <_strtol_l.constprop.0+0xc6>
   bef48:	f1bc 0f00 	cmp.w	ip, #0
   bef4c:	db1e      	blt.n	bef8c <_strtol_l.constprop.0+0xc0>
   bef4e:	45b1      	cmp	r9, r6
   bef50:	d31c      	bcc.n	bef8c <_strtol_l.constprop.0+0xc0>
   bef52:	d101      	bne.n	bef58 <_strtol_l.constprop.0+0x8c>
   bef54:	45a2      	cmp	sl, r4
   bef56:	db19      	blt.n	bef8c <_strtol_l.constprop.0+0xc0>
   bef58:	fb06 4603 	mla	r6, r6, r3, r4
   bef5c:	f04f 0c01 	mov.w	ip, #1
   bef60:	f815 4b01 	ldrb.w	r4, [r5], #1
   bef64:	e7e8      	b.n	bef38 <_strtol_l.constprop.0+0x6c>
   bef66:	2c2b      	cmp	r4, #43	; 0x2b
   bef68:	bf04      	itt	eq
   bef6a:	782c      	ldrbeq	r4, [r5, #0]
   bef6c:	1cb5      	addeq	r5, r6, #2
   bef6e:	e7ca      	b.n	bef06 <_strtol_l.constprop.0+0x3a>
   bef70:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bef74:	f1be 0f19 	cmp.w	lr, #25
   bef78:	d801      	bhi.n	bef7e <_strtol_l.constprop.0+0xb2>
   bef7a:	3c37      	subs	r4, #55	; 0x37
   bef7c:	e7e2      	b.n	bef44 <_strtol_l.constprop.0+0x78>
   bef7e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bef82:	f1be 0f19 	cmp.w	lr, #25
   bef86:	d804      	bhi.n	bef92 <_strtol_l.constprop.0+0xc6>
   bef88:	3c57      	subs	r4, #87	; 0x57
   bef8a:	e7db      	b.n	bef44 <_strtol_l.constprop.0+0x78>
   bef8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bef90:	e7e6      	b.n	bef60 <_strtol_l.constprop.0+0x94>
   bef92:	f1bc 0f00 	cmp.w	ip, #0
   bef96:	da05      	bge.n	befa4 <_strtol_l.constprop.0+0xd8>
   bef98:	2322      	movs	r3, #34	; 0x22
   bef9a:	6003      	str	r3, [r0, #0]
   bef9c:	4646      	mov	r6, r8
   bef9e:	b942      	cbnz	r2, befb2 <_strtol_l.constprop.0+0xe6>
   befa0:	4630      	mov	r0, r6
   befa2:	e79e      	b.n	beee2 <_strtol_l.constprop.0+0x16>
   befa4:	b107      	cbz	r7, befa8 <_strtol_l.constprop.0+0xdc>
   befa6:	4276      	negs	r6, r6
   befa8:	2a00      	cmp	r2, #0
   befaa:	d0f9      	beq.n	befa0 <_strtol_l.constprop.0+0xd4>
   befac:	f1bc 0f00 	cmp.w	ip, #0
   befb0:	d000      	beq.n	befb4 <_strtol_l.constprop.0+0xe8>
   befb2:	1e69      	subs	r1, r5, #1
   befb4:	6011      	str	r1, [r2, #0]
   befb6:	e7f3      	b.n	befa0 <_strtol_l.constprop.0+0xd4>
   befb8:	2430      	movs	r4, #48	; 0x30
   befba:	2b00      	cmp	r3, #0
   befbc:	d1b1      	bne.n	bef22 <_strtol_l.constprop.0+0x56>
   befbe:	2308      	movs	r3, #8
   befc0:	e7af      	b.n	bef22 <_strtol_l.constprop.0+0x56>
   befc2:	2c30      	cmp	r4, #48	; 0x30
   befc4:	d0a5      	beq.n	bef12 <_strtol_l.constprop.0+0x46>
   befc6:	230a      	movs	r3, #10
   befc8:	e7ab      	b.n	bef22 <_strtol_l.constprop.0+0x56>
   befca:	bf00      	nop
   befcc:	000c1af9 	.word	0x000c1af9

000befd0 <strtol>:
   befd0:	4613      	mov	r3, r2
   befd2:	460a      	mov	r2, r1
   befd4:	4601      	mov	r1, r0
   befd6:	4802      	ldr	r0, [pc, #8]	; (befe0 <strtol+0x10>)
   befd8:	6800      	ldr	r0, [r0, #0]
   befda:	f7ff bf77 	b.w	beecc <_strtol_l.constprop.0>
   befde:	bf00      	nop
   befe0:	2003da90 	.word	0x2003da90

000befe4 <__register_exitproc>:
   befe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   befe8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf0a4 <__register_exitproc+0xc0>
   befec:	4606      	mov	r6, r0
   befee:	f8d8 0000 	ldr.w	r0, [r8]
   beff2:	461f      	mov	r7, r3
   beff4:	460d      	mov	r5, r1
   beff6:	4691      	mov	r9, r2
   beff8:	f000 fbc6 	bl	bf788 <__retarget_lock_acquire_recursive>
   beffc:	4b25      	ldr	r3, [pc, #148]	; (bf094 <__register_exitproc+0xb0>)
   beffe:	681c      	ldr	r4, [r3, #0]
   bf000:	b934      	cbnz	r4, bf010 <__register_exitproc+0x2c>
   bf002:	4c25      	ldr	r4, [pc, #148]	; (bf098 <__register_exitproc+0xb4>)
   bf004:	601c      	str	r4, [r3, #0]
   bf006:	4b25      	ldr	r3, [pc, #148]	; (bf09c <__register_exitproc+0xb8>)
   bf008:	b113      	cbz	r3, bf010 <__register_exitproc+0x2c>
   bf00a:	681b      	ldr	r3, [r3, #0]
   bf00c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf010:	6863      	ldr	r3, [r4, #4]
   bf012:	2b1f      	cmp	r3, #31
   bf014:	dd07      	ble.n	bf026 <__register_exitproc+0x42>
   bf016:	f8d8 0000 	ldr.w	r0, [r8]
   bf01a:	f000 fbb7 	bl	bf78c <__retarget_lock_release_recursive>
   bf01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf026:	b34e      	cbz	r6, bf07c <__register_exitproc+0x98>
   bf028:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf02c:	b988      	cbnz	r0, bf052 <__register_exitproc+0x6e>
   bf02e:	4b1c      	ldr	r3, [pc, #112]	; (bf0a0 <__register_exitproc+0xbc>)
   bf030:	b923      	cbnz	r3, bf03c <__register_exitproc+0x58>
   bf032:	f8d8 0000 	ldr.w	r0, [r8]
   bf036:	f000 fba8 	bl	bf78a <__retarget_lock_release>
   bf03a:	e7f0      	b.n	bf01e <__register_exitproc+0x3a>
   bf03c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf040:	f7fa fac6 	bl	b95d0 <malloc>
   bf044:	2800      	cmp	r0, #0
   bf046:	d0f4      	beq.n	bf032 <__register_exitproc+0x4e>
   bf048:	2300      	movs	r3, #0
   bf04a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf04e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf052:	6863      	ldr	r3, [r4, #4]
   bf054:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf058:	2201      	movs	r2, #1
   bf05a:	409a      	lsls	r2, r3
   bf05c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf060:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf064:	4313      	orrs	r3, r2
   bf066:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf06a:	2e02      	cmp	r6, #2
   bf06c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf070:	bf02      	ittt	eq
   bf072:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf076:	4313      	orreq	r3, r2
   bf078:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf07c:	6863      	ldr	r3, [r4, #4]
   bf07e:	f8d8 0000 	ldr.w	r0, [r8]
   bf082:	1c5a      	adds	r2, r3, #1
   bf084:	3302      	adds	r3, #2
   bf086:	6062      	str	r2, [r4, #4]
   bf088:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf08c:	f000 fb7e 	bl	bf78c <__retarget_lock_release_recursive>
   bf090:	2000      	movs	r0, #0
   bf092:	e7c6      	b.n	bf022 <__register_exitproc+0x3e>
   bf094:	2003e7e8 	.word	0x2003e7e8
   bf098:	2003e75c 	.word	0x2003e75c
   bf09c:	00000000 	.word	0x00000000
   bf0a0:	000b95d1 	.word	0x000b95d1
   bf0a4:	2003daf4 	.word	0x2003daf4

000bf0a8 <rshift>:
   bf0a8:	6903      	ldr	r3, [r0, #16]
   bf0aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf0ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf0b2:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf0b6:	f100 0414 	add.w	r4, r0, #20
   bf0ba:	dd45      	ble.n	bf148 <rshift+0xa0>
   bf0bc:	f011 011f 	ands.w	r1, r1, #31
   bf0c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bf0c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bf0c8:	d10c      	bne.n	bf0e4 <rshift+0x3c>
   bf0ca:	f100 0710 	add.w	r7, r0, #16
   bf0ce:	4629      	mov	r1, r5
   bf0d0:	42b1      	cmp	r1, r6
   bf0d2:	d334      	bcc.n	bf13e <rshift+0x96>
   bf0d4:	1a9b      	subs	r3, r3, r2
   bf0d6:	009b      	lsls	r3, r3, #2
   bf0d8:	1eea      	subs	r2, r5, #3
   bf0da:	4296      	cmp	r6, r2
   bf0dc:	bf38      	it	cc
   bf0de:	2300      	movcc	r3, #0
   bf0e0:	4423      	add	r3, r4
   bf0e2:	e015      	b.n	bf110 <rshift+0x68>
   bf0e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bf0e8:	f1c1 0820 	rsb	r8, r1, #32
   bf0ec:	40cf      	lsrs	r7, r1
   bf0ee:	f105 0e04 	add.w	lr, r5, #4
   bf0f2:	46a1      	mov	r9, r4
   bf0f4:	4576      	cmp	r6, lr
   bf0f6:	46f4      	mov	ip, lr
   bf0f8:	d815      	bhi.n	bf126 <rshift+0x7e>
   bf0fa:	1a9a      	subs	r2, r3, r2
   bf0fc:	0092      	lsls	r2, r2, #2
   bf0fe:	3a04      	subs	r2, #4
   bf100:	3501      	adds	r5, #1
   bf102:	42ae      	cmp	r6, r5
   bf104:	bf38      	it	cc
   bf106:	2200      	movcc	r2, #0
   bf108:	18a3      	adds	r3, r4, r2
   bf10a:	50a7      	str	r7, [r4, r2]
   bf10c:	b107      	cbz	r7, bf110 <rshift+0x68>
   bf10e:	3304      	adds	r3, #4
   bf110:	1b1a      	subs	r2, r3, r4
   bf112:	42a3      	cmp	r3, r4
   bf114:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bf118:	bf08      	it	eq
   bf11a:	2300      	moveq	r3, #0
   bf11c:	6102      	str	r2, [r0, #16]
   bf11e:	bf08      	it	eq
   bf120:	6143      	streq	r3, [r0, #20]
   bf122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf126:	f8dc c000 	ldr.w	ip, [ip]
   bf12a:	fa0c fc08 	lsl.w	ip, ip, r8
   bf12e:	ea4c 0707 	orr.w	r7, ip, r7
   bf132:	f849 7b04 	str.w	r7, [r9], #4
   bf136:	f85e 7b04 	ldr.w	r7, [lr], #4
   bf13a:	40cf      	lsrs	r7, r1
   bf13c:	e7da      	b.n	bf0f4 <rshift+0x4c>
   bf13e:	f851 cb04 	ldr.w	ip, [r1], #4
   bf142:	f847 cf04 	str.w	ip, [r7, #4]!
   bf146:	e7c3      	b.n	bf0d0 <rshift+0x28>
   bf148:	4623      	mov	r3, r4
   bf14a:	e7e1      	b.n	bf110 <rshift+0x68>

000bf14c <__hexdig_fun>:
   bf14c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf150:	2b09      	cmp	r3, #9
   bf152:	d802      	bhi.n	bf15a <__hexdig_fun+0xe>
   bf154:	3820      	subs	r0, #32
   bf156:	b2c0      	uxtb	r0, r0
   bf158:	4770      	bx	lr
   bf15a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bf15e:	2b05      	cmp	r3, #5
   bf160:	d801      	bhi.n	bf166 <__hexdig_fun+0x1a>
   bf162:	3847      	subs	r0, #71	; 0x47
   bf164:	e7f7      	b.n	bf156 <__hexdig_fun+0xa>
   bf166:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bf16a:	2b05      	cmp	r3, #5
   bf16c:	d801      	bhi.n	bf172 <__hexdig_fun+0x26>
   bf16e:	3827      	subs	r0, #39	; 0x27
   bf170:	e7f1      	b.n	bf156 <__hexdig_fun+0xa>
   bf172:	2000      	movs	r0, #0
   bf174:	4770      	bx	lr
	...

000bf178 <__gethex>:
   bf178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf17c:	ed2d 8b02 	vpush	{d8}
   bf180:	b089      	sub	sp, #36	; 0x24
   bf182:	ee08 0a10 	vmov	s16, r0
   bf186:	9304      	str	r3, [sp, #16]
   bf188:	4bb4      	ldr	r3, [pc, #720]	; (bf45c <__gethex+0x2e4>)
   bf18a:	681b      	ldr	r3, [r3, #0]
   bf18c:	9301      	str	r3, [sp, #4]
   bf18e:	4618      	mov	r0, r3
   bf190:	468b      	mov	fp, r1
   bf192:	4690      	mov	r8, r2
   bf194:	f7ff f82f 	bl	be1f6 <strlen>
   bf198:	9b01      	ldr	r3, [sp, #4]
   bf19a:	f8db 2000 	ldr.w	r2, [fp]
   bf19e:	4403      	add	r3, r0
   bf1a0:	4682      	mov	sl, r0
   bf1a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bf1a6:	9305      	str	r3, [sp, #20]
   bf1a8:	1c93      	adds	r3, r2, #2
   bf1aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bf1ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bf1b2:	32fe      	adds	r2, #254	; 0xfe
   bf1b4:	18d1      	adds	r1, r2, r3
   bf1b6:	461f      	mov	r7, r3
   bf1b8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf1bc:	9100      	str	r1, [sp, #0]
   bf1be:	2830      	cmp	r0, #48	; 0x30
   bf1c0:	d0f8      	beq.n	bf1b4 <__gethex+0x3c>
   bf1c2:	f7ff ffc3 	bl	bf14c <__hexdig_fun>
   bf1c6:	4604      	mov	r4, r0
   bf1c8:	2800      	cmp	r0, #0
   bf1ca:	d13a      	bne.n	bf242 <__gethex+0xca>
   bf1cc:	9901      	ldr	r1, [sp, #4]
   bf1ce:	4652      	mov	r2, sl
   bf1d0:	4638      	mov	r0, r7
   bf1d2:	f7ff f818 	bl	be206 <strncmp>
   bf1d6:	4605      	mov	r5, r0
   bf1d8:	2800      	cmp	r0, #0
   bf1da:	d168      	bne.n	bf2ae <__gethex+0x136>
   bf1dc:	f817 000a 	ldrb.w	r0, [r7, sl]
   bf1e0:	eb07 060a 	add.w	r6, r7, sl
   bf1e4:	f7ff ffb2 	bl	bf14c <__hexdig_fun>
   bf1e8:	2800      	cmp	r0, #0
   bf1ea:	d062      	beq.n	bf2b2 <__gethex+0x13a>
   bf1ec:	4633      	mov	r3, r6
   bf1ee:	7818      	ldrb	r0, [r3, #0]
   bf1f0:	2830      	cmp	r0, #48	; 0x30
   bf1f2:	461f      	mov	r7, r3
   bf1f4:	f103 0301 	add.w	r3, r3, #1
   bf1f8:	d0f9      	beq.n	bf1ee <__gethex+0x76>
   bf1fa:	f7ff ffa7 	bl	bf14c <__hexdig_fun>
   bf1fe:	2301      	movs	r3, #1
   bf200:	fab0 f480 	clz	r4, r0
   bf204:	0964      	lsrs	r4, r4, #5
   bf206:	4635      	mov	r5, r6
   bf208:	9300      	str	r3, [sp, #0]
   bf20a:	463a      	mov	r2, r7
   bf20c:	4616      	mov	r6, r2
   bf20e:	3201      	adds	r2, #1
   bf210:	7830      	ldrb	r0, [r6, #0]
   bf212:	f7ff ff9b 	bl	bf14c <__hexdig_fun>
   bf216:	2800      	cmp	r0, #0
   bf218:	d1f8      	bne.n	bf20c <__gethex+0x94>
   bf21a:	9901      	ldr	r1, [sp, #4]
   bf21c:	4652      	mov	r2, sl
   bf21e:	4630      	mov	r0, r6
   bf220:	f7fe fff1 	bl	be206 <strncmp>
   bf224:	b980      	cbnz	r0, bf248 <__gethex+0xd0>
   bf226:	b94d      	cbnz	r5, bf23c <__gethex+0xc4>
   bf228:	eb06 050a 	add.w	r5, r6, sl
   bf22c:	462a      	mov	r2, r5
   bf22e:	4616      	mov	r6, r2
   bf230:	3201      	adds	r2, #1
   bf232:	7830      	ldrb	r0, [r6, #0]
   bf234:	f7ff ff8a 	bl	bf14c <__hexdig_fun>
   bf238:	2800      	cmp	r0, #0
   bf23a:	d1f8      	bne.n	bf22e <__gethex+0xb6>
   bf23c:	1bad      	subs	r5, r5, r6
   bf23e:	00ad      	lsls	r5, r5, #2
   bf240:	e004      	b.n	bf24c <__gethex+0xd4>
   bf242:	2400      	movs	r4, #0
   bf244:	4625      	mov	r5, r4
   bf246:	e7e0      	b.n	bf20a <__gethex+0x92>
   bf248:	2d00      	cmp	r5, #0
   bf24a:	d1f7      	bne.n	bf23c <__gethex+0xc4>
   bf24c:	7833      	ldrb	r3, [r6, #0]
   bf24e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf252:	2b50      	cmp	r3, #80	; 0x50
   bf254:	d13b      	bne.n	bf2ce <__gethex+0x156>
   bf256:	7873      	ldrb	r3, [r6, #1]
   bf258:	2b2b      	cmp	r3, #43	; 0x2b
   bf25a:	d02c      	beq.n	bf2b6 <__gethex+0x13e>
   bf25c:	2b2d      	cmp	r3, #45	; 0x2d
   bf25e:	d02e      	beq.n	bf2be <__gethex+0x146>
   bf260:	1c71      	adds	r1, r6, #1
   bf262:	f04f 0900 	mov.w	r9, #0
   bf266:	7808      	ldrb	r0, [r1, #0]
   bf268:	f7ff ff70 	bl	bf14c <__hexdig_fun>
   bf26c:	1e43      	subs	r3, r0, #1
   bf26e:	b2db      	uxtb	r3, r3
   bf270:	2b18      	cmp	r3, #24
   bf272:	d82c      	bhi.n	bf2ce <__gethex+0x156>
   bf274:	f1a0 0210 	sub.w	r2, r0, #16
   bf278:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bf27c:	f7ff ff66 	bl	bf14c <__hexdig_fun>
   bf280:	1e43      	subs	r3, r0, #1
   bf282:	b2db      	uxtb	r3, r3
   bf284:	2b18      	cmp	r3, #24
   bf286:	d91d      	bls.n	bf2c4 <__gethex+0x14c>
   bf288:	f1b9 0f00 	cmp.w	r9, #0
   bf28c:	d000      	beq.n	bf290 <__gethex+0x118>
   bf28e:	4252      	negs	r2, r2
   bf290:	4415      	add	r5, r2
   bf292:	f8cb 1000 	str.w	r1, [fp]
   bf296:	b1e4      	cbz	r4, bf2d2 <__gethex+0x15a>
   bf298:	9b00      	ldr	r3, [sp, #0]
   bf29a:	2b00      	cmp	r3, #0
   bf29c:	bf14      	ite	ne
   bf29e:	2700      	movne	r7, #0
   bf2a0:	2706      	moveq	r7, #6
   bf2a2:	4638      	mov	r0, r7
   bf2a4:	b009      	add	sp, #36	; 0x24
   bf2a6:	ecbd 8b02 	vpop	{d8}
   bf2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf2ae:	463e      	mov	r6, r7
   bf2b0:	4625      	mov	r5, r4
   bf2b2:	2401      	movs	r4, #1
   bf2b4:	e7ca      	b.n	bf24c <__gethex+0xd4>
   bf2b6:	f04f 0900 	mov.w	r9, #0
   bf2ba:	1cb1      	adds	r1, r6, #2
   bf2bc:	e7d3      	b.n	bf266 <__gethex+0xee>
   bf2be:	f04f 0901 	mov.w	r9, #1
   bf2c2:	e7fa      	b.n	bf2ba <__gethex+0x142>
   bf2c4:	230a      	movs	r3, #10
   bf2c6:	fb03 0202 	mla	r2, r3, r2, r0
   bf2ca:	3a10      	subs	r2, #16
   bf2cc:	e7d4      	b.n	bf278 <__gethex+0x100>
   bf2ce:	4631      	mov	r1, r6
   bf2d0:	e7df      	b.n	bf292 <__gethex+0x11a>
   bf2d2:	1bf3      	subs	r3, r6, r7
   bf2d4:	3b01      	subs	r3, #1
   bf2d6:	4621      	mov	r1, r4
   bf2d8:	2b07      	cmp	r3, #7
   bf2da:	dc0b      	bgt.n	bf2f4 <__gethex+0x17c>
   bf2dc:	ee18 0a10 	vmov	r0, s16
   bf2e0:	f000 fa68 	bl	bf7b4 <_Balloc>
   bf2e4:	4604      	mov	r4, r0
   bf2e6:	b940      	cbnz	r0, bf2fa <__gethex+0x182>
   bf2e8:	4b5d      	ldr	r3, [pc, #372]	; (bf460 <__gethex+0x2e8>)
   bf2ea:	4602      	mov	r2, r0
   bf2ec:	21de      	movs	r1, #222	; 0xde
   bf2ee:	485d      	ldr	r0, [pc, #372]	; (bf464 <__gethex+0x2ec>)
   bf2f0:	f7fa f9be 	bl	b9670 <__assert_func>
   bf2f4:	3101      	adds	r1, #1
   bf2f6:	105b      	asrs	r3, r3, #1
   bf2f8:	e7ee      	b.n	bf2d8 <__gethex+0x160>
   bf2fa:	f100 0914 	add.w	r9, r0, #20
   bf2fe:	f04f 0b00 	mov.w	fp, #0
   bf302:	f1ca 0301 	rsb	r3, sl, #1
   bf306:	f8cd 9008 	str.w	r9, [sp, #8]
   bf30a:	f8cd b000 	str.w	fp, [sp]
   bf30e:	9306      	str	r3, [sp, #24]
   bf310:	42b7      	cmp	r7, r6
   bf312:	d340      	bcc.n	bf396 <__gethex+0x21e>
   bf314:	9802      	ldr	r0, [sp, #8]
   bf316:	9b00      	ldr	r3, [sp, #0]
   bf318:	f840 3b04 	str.w	r3, [r0], #4
   bf31c:	eba0 0009 	sub.w	r0, r0, r9
   bf320:	1080      	asrs	r0, r0, #2
   bf322:	0146      	lsls	r6, r0, #5
   bf324:	6120      	str	r0, [r4, #16]
   bf326:	4618      	mov	r0, r3
   bf328:	f000 fb36 	bl	bf998 <__hi0bits>
   bf32c:	1a30      	subs	r0, r6, r0
   bf32e:	f8d8 6000 	ldr.w	r6, [r8]
   bf332:	42b0      	cmp	r0, r6
   bf334:	dd63      	ble.n	bf3fe <__gethex+0x286>
   bf336:	1b87      	subs	r7, r0, r6
   bf338:	4639      	mov	r1, r7
   bf33a:	4620      	mov	r0, r4
   bf33c:	f000 feda 	bl	c00f4 <__any_on>
   bf340:	4682      	mov	sl, r0
   bf342:	b1a8      	cbz	r0, bf370 <__gethex+0x1f8>
   bf344:	1e7b      	subs	r3, r7, #1
   bf346:	1159      	asrs	r1, r3, #5
   bf348:	f003 021f 	and.w	r2, r3, #31
   bf34c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bf350:	f04f 0a01 	mov.w	sl, #1
   bf354:	fa0a f202 	lsl.w	r2, sl, r2
   bf358:	420a      	tst	r2, r1
   bf35a:	d009      	beq.n	bf370 <__gethex+0x1f8>
   bf35c:	4553      	cmp	r3, sl
   bf35e:	dd05      	ble.n	bf36c <__gethex+0x1f4>
   bf360:	1eb9      	subs	r1, r7, #2
   bf362:	4620      	mov	r0, r4
   bf364:	f000 fec6 	bl	c00f4 <__any_on>
   bf368:	2800      	cmp	r0, #0
   bf36a:	d145      	bne.n	bf3f8 <__gethex+0x280>
   bf36c:	f04f 0a02 	mov.w	sl, #2
   bf370:	4639      	mov	r1, r7
   bf372:	4620      	mov	r0, r4
   bf374:	f7ff fe98 	bl	bf0a8 <rshift>
   bf378:	443d      	add	r5, r7
   bf37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf37e:	42ab      	cmp	r3, r5
   bf380:	da4c      	bge.n	bf41c <__gethex+0x2a4>
   bf382:	ee18 0a10 	vmov	r0, s16
   bf386:	4621      	mov	r1, r4
   bf388:	f000 fa54 	bl	bf834 <_Bfree>
   bf38c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf38e:	2300      	movs	r3, #0
   bf390:	6013      	str	r3, [r2, #0]
   bf392:	27a3      	movs	r7, #163	; 0xa3
   bf394:	e785      	b.n	bf2a2 <__gethex+0x12a>
   bf396:	1e73      	subs	r3, r6, #1
   bf398:	9a05      	ldr	r2, [sp, #20]
   bf39a:	9303      	str	r3, [sp, #12]
   bf39c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bf3a0:	4293      	cmp	r3, r2
   bf3a2:	d019      	beq.n	bf3d8 <__gethex+0x260>
   bf3a4:	f1bb 0f20 	cmp.w	fp, #32
   bf3a8:	d107      	bne.n	bf3ba <__gethex+0x242>
   bf3aa:	9b02      	ldr	r3, [sp, #8]
   bf3ac:	9a00      	ldr	r2, [sp, #0]
   bf3ae:	f843 2b04 	str.w	r2, [r3], #4
   bf3b2:	9302      	str	r3, [sp, #8]
   bf3b4:	2300      	movs	r3, #0
   bf3b6:	9300      	str	r3, [sp, #0]
   bf3b8:	469b      	mov	fp, r3
   bf3ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bf3be:	f7ff fec5 	bl	bf14c <__hexdig_fun>
   bf3c2:	9b00      	ldr	r3, [sp, #0]
   bf3c4:	f000 000f 	and.w	r0, r0, #15
   bf3c8:	fa00 f00b 	lsl.w	r0, r0, fp
   bf3cc:	4303      	orrs	r3, r0
   bf3ce:	9300      	str	r3, [sp, #0]
   bf3d0:	f10b 0b04 	add.w	fp, fp, #4
   bf3d4:	9b03      	ldr	r3, [sp, #12]
   bf3d6:	e00d      	b.n	bf3f4 <__gethex+0x27c>
   bf3d8:	9b03      	ldr	r3, [sp, #12]
   bf3da:	9a06      	ldr	r2, [sp, #24]
   bf3dc:	4413      	add	r3, r2
   bf3de:	42bb      	cmp	r3, r7
   bf3e0:	d3e0      	bcc.n	bf3a4 <__gethex+0x22c>
   bf3e2:	4618      	mov	r0, r3
   bf3e4:	9901      	ldr	r1, [sp, #4]
   bf3e6:	9307      	str	r3, [sp, #28]
   bf3e8:	4652      	mov	r2, sl
   bf3ea:	f7fe ff0c 	bl	be206 <strncmp>
   bf3ee:	9b07      	ldr	r3, [sp, #28]
   bf3f0:	2800      	cmp	r0, #0
   bf3f2:	d1d7      	bne.n	bf3a4 <__gethex+0x22c>
   bf3f4:	461e      	mov	r6, r3
   bf3f6:	e78b      	b.n	bf310 <__gethex+0x198>
   bf3f8:	f04f 0a03 	mov.w	sl, #3
   bf3fc:	e7b8      	b.n	bf370 <__gethex+0x1f8>
   bf3fe:	da0a      	bge.n	bf416 <__gethex+0x29e>
   bf400:	1a37      	subs	r7, r6, r0
   bf402:	4621      	mov	r1, r4
   bf404:	ee18 0a10 	vmov	r0, s16
   bf408:	463a      	mov	r2, r7
   bf40a:	f000 fc2f 	bl	bfc6c <__lshift>
   bf40e:	1bed      	subs	r5, r5, r7
   bf410:	4604      	mov	r4, r0
   bf412:	f100 0914 	add.w	r9, r0, #20
   bf416:	f04f 0a00 	mov.w	sl, #0
   bf41a:	e7ae      	b.n	bf37a <__gethex+0x202>
   bf41c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bf420:	42a8      	cmp	r0, r5
   bf422:	dd72      	ble.n	bf50a <__gethex+0x392>
   bf424:	1b45      	subs	r5, r0, r5
   bf426:	42ae      	cmp	r6, r5
   bf428:	dc36      	bgt.n	bf498 <__gethex+0x320>
   bf42a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf42e:	2b02      	cmp	r3, #2
   bf430:	d02a      	beq.n	bf488 <__gethex+0x310>
   bf432:	2b03      	cmp	r3, #3
   bf434:	d02c      	beq.n	bf490 <__gethex+0x318>
   bf436:	2b01      	cmp	r3, #1
   bf438:	d11c      	bne.n	bf474 <__gethex+0x2fc>
   bf43a:	42ae      	cmp	r6, r5
   bf43c:	d11a      	bne.n	bf474 <__gethex+0x2fc>
   bf43e:	2e01      	cmp	r6, #1
   bf440:	d112      	bne.n	bf468 <__gethex+0x2f0>
   bf442:	9a04      	ldr	r2, [sp, #16]
   bf444:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bf448:	6013      	str	r3, [r2, #0]
   bf44a:	2301      	movs	r3, #1
   bf44c:	6123      	str	r3, [r4, #16]
   bf44e:	f8c9 3000 	str.w	r3, [r9]
   bf452:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf454:	2762      	movs	r7, #98	; 0x62
   bf456:	601c      	str	r4, [r3, #0]
   bf458:	e723      	b.n	bf2a2 <__gethex+0x12a>
   bf45a:	bf00      	nop
   bf45c:	000c1c6c 	.word	0x000c1c6c
   bf460:	000c1bf9 	.word	0x000c1bf9
   bf464:	000c1c0a 	.word	0x000c1c0a
   bf468:	1e71      	subs	r1, r6, #1
   bf46a:	4620      	mov	r0, r4
   bf46c:	f000 fe42 	bl	c00f4 <__any_on>
   bf470:	2800      	cmp	r0, #0
   bf472:	d1e6      	bne.n	bf442 <__gethex+0x2ca>
   bf474:	ee18 0a10 	vmov	r0, s16
   bf478:	4621      	mov	r1, r4
   bf47a:	f000 f9db 	bl	bf834 <_Bfree>
   bf47e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf480:	2300      	movs	r3, #0
   bf482:	6013      	str	r3, [r2, #0]
   bf484:	2750      	movs	r7, #80	; 0x50
   bf486:	e70c      	b.n	bf2a2 <__gethex+0x12a>
   bf488:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf48a:	2b00      	cmp	r3, #0
   bf48c:	d1f2      	bne.n	bf474 <__gethex+0x2fc>
   bf48e:	e7d8      	b.n	bf442 <__gethex+0x2ca>
   bf490:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf492:	2b00      	cmp	r3, #0
   bf494:	d1d5      	bne.n	bf442 <__gethex+0x2ca>
   bf496:	e7ed      	b.n	bf474 <__gethex+0x2fc>
   bf498:	1e6f      	subs	r7, r5, #1
   bf49a:	f1ba 0f00 	cmp.w	sl, #0
   bf49e:	d131      	bne.n	bf504 <__gethex+0x38c>
   bf4a0:	b127      	cbz	r7, bf4ac <__gethex+0x334>
   bf4a2:	4639      	mov	r1, r7
   bf4a4:	4620      	mov	r0, r4
   bf4a6:	f000 fe25 	bl	c00f4 <__any_on>
   bf4aa:	4682      	mov	sl, r0
   bf4ac:	117b      	asrs	r3, r7, #5
   bf4ae:	2101      	movs	r1, #1
   bf4b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bf4b4:	f007 071f 	and.w	r7, r7, #31
   bf4b8:	fa01 f707 	lsl.w	r7, r1, r7
   bf4bc:	421f      	tst	r7, r3
   bf4be:	4629      	mov	r1, r5
   bf4c0:	4620      	mov	r0, r4
   bf4c2:	bf18      	it	ne
   bf4c4:	f04a 0a02 	orrne.w	sl, sl, #2
   bf4c8:	1b76      	subs	r6, r6, r5
   bf4ca:	f7ff fded 	bl	bf0a8 <rshift>
   bf4ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bf4d2:	2702      	movs	r7, #2
   bf4d4:	f1ba 0f00 	cmp.w	sl, #0
   bf4d8:	d048      	beq.n	bf56c <__gethex+0x3f4>
   bf4da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf4de:	2b02      	cmp	r3, #2
   bf4e0:	d015      	beq.n	bf50e <__gethex+0x396>
   bf4e2:	2b03      	cmp	r3, #3
   bf4e4:	d017      	beq.n	bf516 <__gethex+0x39e>
   bf4e6:	2b01      	cmp	r3, #1
   bf4e8:	d109      	bne.n	bf4fe <__gethex+0x386>
   bf4ea:	f01a 0f02 	tst.w	sl, #2
   bf4ee:	d006      	beq.n	bf4fe <__gethex+0x386>
   bf4f0:	f8d9 0000 	ldr.w	r0, [r9]
   bf4f4:	ea4a 0a00 	orr.w	sl, sl, r0
   bf4f8:	f01a 0f01 	tst.w	sl, #1
   bf4fc:	d10e      	bne.n	bf51c <__gethex+0x3a4>
   bf4fe:	f047 0710 	orr.w	r7, r7, #16
   bf502:	e033      	b.n	bf56c <__gethex+0x3f4>
   bf504:	f04f 0a01 	mov.w	sl, #1
   bf508:	e7d0      	b.n	bf4ac <__gethex+0x334>
   bf50a:	2701      	movs	r7, #1
   bf50c:	e7e2      	b.n	bf4d4 <__gethex+0x35c>
   bf50e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf510:	f1c3 0301 	rsb	r3, r3, #1
   bf514:	9315      	str	r3, [sp, #84]	; 0x54
   bf516:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf518:	2b00      	cmp	r3, #0
   bf51a:	d0f0      	beq.n	bf4fe <__gethex+0x386>
   bf51c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bf520:	f104 0314 	add.w	r3, r4, #20
   bf524:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bf528:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bf52c:	f04f 0c00 	mov.w	ip, #0
   bf530:	4618      	mov	r0, r3
   bf532:	f853 2b04 	ldr.w	r2, [r3], #4
   bf536:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bf53a:	d01c      	beq.n	bf576 <__gethex+0x3fe>
   bf53c:	3201      	adds	r2, #1
   bf53e:	6002      	str	r2, [r0, #0]
   bf540:	2f02      	cmp	r7, #2
   bf542:	f104 0314 	add.w	r3, r4, #20
   bf546:	d13f      	bne.n	bf5c8 <__gethex+0x450>
   bf548:	f8d8 2000 	ldr.w	r2, [r8]
   bf54c:	3a01      	subs	r2, #1
   bf54e:	42b2      	cmp	r2, r6
   bf550:	d10a      	bne.n	bf568 <__gethex+0x3f0>
   bf552:	1171      	asrs	r1, r6, #5
   bf554:	2201      	movs	r2, #1
   bf556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bf55a:	f006 061f 	and.w	r6, r6, #31
   bf55e:	fa02 f606 	lsl.w	r6, r2, r6
   bf562:	421e      	tst	r6, r3
   bf564:	bf18      	it	ne
   bf566:	4617      	movne	r7, r2
   bf568:	f047 0720 	orr.w	r7, r7, #32
   bf56c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf56e:	601c      	str	r4, [r3, #0]
   bf570:	9b04      	ldr	r3, [sp, #16]
   bf572:	601d      	str	r5, [r3, #0]
   bf574:	e695      	b.n	bf2a2 <__gethex+0x12a>
   bf576:	4299      	cmp	r1, r3
   bf578:	f843 cc04 	str.w	ip, [r3, #-4]
   bf57c:	d8d8      	bhi.n	bf530 <__gethex+0x3b8>
   bf57e:	68a3      	ldr	r3, [r4, #8]
   bf580:	459b      	cmp	fp, r3
   bf582:	db19      	blt.n	bf5b8 <__gethex+0x440>
   bf584:	6861      	ldr	r1, [r4, #4]
   bf586:	ee18 0a10 	vmov	r0, s16
   bf58a:	3101      	adds	r1, #1
   bf58c:	f000 f912 	bl	bf7b4 <_Balloc>
   bf590:	4681      	mov	r9, r0
   bf592:	b918      	cbnz	r0, bf59c <__gethex+0x424>
   bf594:	4b1a      	ldr	r3, [pc, #104]	; (bf600 <__gethex+0x488>)
   bf596:	4602      	mov	r2, r0
   bf598:	2184      	movs	r1, #132	; 0x84
   bf59a:	e6a8      	b.n	bf2ee <__gethex+0x176>
   bf59c:	6922      	ldr	r2, [r4, #16]
   bf59e:	3202      	adds	r2, #2
   bf5a0:	f104 010c 	add.w	r1, r4, #12
   bf5a4:	0092      	lsls	r2, r2, #2
   bf5a6:	300c      	adds	r0, #12
   bf5a8:	f7fe fd49 	bl	be03e <memcpy>
   bf5ac:	4621      	mov	r1, r4
   bf5ae:	ee18 0a10 	vmov	r0, s16
   bf5b2:	f000 f93f 	bl	bf834 <_Bfree>
   bf5b6:	464c      	mov	r4, r9
   bf5b8:	6923      	ldr	r3, [r4, #16]
   bf5ba:	1c5a      	adds	r2, r3, #1
   bf5bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bf5c0:	6122      	str	r2, [r4, #16]
   bf5c2:	2201      	movs	r2, #1
   bf5c4:	615a      	str	r2, [r3, #20]
   bf5c6:	e7bb      	b.n	bf540 <__gethex+0x3c8>
   bf5c8:	6922      	ldr	r2, [r4, #16]
   bf5ca:	455a      	cmp	r2, fp
   bf5cc:	dd0b      	ble.n	bf5e6 <__gethex+0x46e>
   bf5ce:	2101      	movs	r1, #1
   bf5d0:	4620      	mov	r0, r4
   bf5d2:	f7ff fd69 	bl	bf0a8 <rshift>
   bf5d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf5da:	3501      	adds	r5, #1
   bf5dc:	42ab      	cmp	r3, r5
   bf5de:	f6ff aed0 	blt.w	bf382 <__gethex+0x20a>
   bf5e2:	2701      	movs	r7, #1
   bf5e4:	e7c0      	b.n	bf568 <__gethex+0x3f0>
   bf5e6:	f016 061f 	ands.w	r6, r6, #31
   bf5ea:	d0fa      	beq.n	bf5e2 <__gethex+0x46a>
   bf5ec:	4453      	add	r3, sl
   bf5ee:	f1c6 0620 	rsb	r6, r6, #32
   bf5f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bf5f6:	f000 f9cf 	bl	bf998 <__hi0bits>
   bf5fa:	42b0      	cmp	r0, r6
   bf5fc:	dbe7      	blt.n	bf5ce <__gethex+0x456>
   bf5fe:	e7f0      	b.n	bf5e2 <__gethex+0x46a>
   bf600:	000c1bf9 	.word	0x000c1bf9

000bf604 <L_shift>:
   bf604:	f1c2 0208 	rsb	r2, r2, #8
   bf608:	0092      	lsls	r2, r2, #2
   bf60a:	b570      	push	{r4, r5, r6, lr}
   bf60c:	f1c2 0620 	rsb	r6, r2, #32
   bf610:	6843      	ldr	r3, [r0, #4]
   bf612:	6804      	ldr	r4, [r0, #0]
   bf614:	fa03 f506 	lsl.w	r5, r3, r6
   bf618:	432c      	orrs	r4, r5
   bf61a:	40d3      	lsrs	r3, r2
   bf61c:	6004      	str	r4, [r0, #0]
   bf61e:	f840 3f04 	str.w	r3, [r0, #4]!
   bf622:	4288      	cmp	r0, r1
   bf624:	d3f4      	bcc.n	bf610 <L_shift+0xc>
   bf626:	bd70      	pop	{r4, r5, r6, pc}

000bf628 <__match>:
   bf628:	b530      	push	{r4, r5, lr}
   bf62a:	6803      	ldr	r3, [r0, #0]
   bf62c:	3301      	adds	r3, #1
   bf62e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf632:	b914      	cbnz	r4, bf63a <__match+0x12>
   bf634:	6003      	str	r3, [r0, #0]
   bf636:	2001      	movs	r0, #1
   bf638:	bd30      	pop	{r4, r5, pc}
   bf63a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf63e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bf642:	2d19      	cmp	r5, #25
   bf644:	bf98      	it	ls
   bf646:	3220      	addls	r2, #32
   bf648:	42a2      	cmp	r2, r4
   bf64a:	d0f0      	beq.n	bf62e <__match+0x6>
   bf64c:	2000      	movs	r0, #0
   bf64e:	e7f3      	b.n	bf638 <__match+0x10>

000bf650 <__hexnan>:
   bf650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf654:	680b      	ldr	r3, [r1, #0]
   bf656:	115e      	asrs	r6, r3, #5
   bf658:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bf65c:	f013 031f 	ands.w	r3, r3, #31
   bf660:	b087      	sub	sp, #28
   bf662:	bf18      	it	ne
   bf664:	3604      	addne	r6, #4
   bf666:	2500      	movs	r5, #0
   bf668:	1f37      	subs	r7, r6, #4
   bf66a:	4690      	mov	r8, r2
   bf66c:	6802      	ldr	r2, [r0, #0]
   bf66e:	9301      	str	r3, [sp, #4]
   bf670:	4682      	mov	sl, r0
   bf672:	f846 5c04 	str.w	r5, [r6, #-4]
   bf676:	46b9      	mov	r9, r7
   bf678:	463c      	mov	r4, r7
   bf67a:	9502      	str	r5, [sp, #8]
   bf67c:	46ab      	mov	fp, r5
   bf67e:	7851      	ldrb	r1, [r2, #1]
   bf680:	1c53      	adds	r3, r2, #1
   bf682:	9303      	str	r3, [sp, #12]
   bf684:	b341      	cbz	r1, bf6d8 <__hexnan+0x88>
   bf686:	4608      	mov	r0, r1
   bf688:	9205      	str	r2, [sp, #20]
   bf68a:	9104      	str	r1, [sp, #16]
   bf68c:	f7ff fd5e 	bl	bf14c <__hexdig_fun>
   bf690:	2800      	cmp	r0, #0
   bf692:	d14f      	bne.n	bf734 <__hexnan+0xe4>
   bf694:	9904      	ldr	r1, [sp, #16]
   bf696:	9a05      	ldr	r2, [sp, #20]
   bf698:	2920      	cmp	r1, #32
   bf69a:	d818      	bhi.n	bf6ce <__hexnan+0x7e>
   bf69c:	9b02      	ldr	r3, [sp, #8]
   bf69e:	459b      	cmp	fp, r3
   bf6a0:	dd13      	ble.n	bf6ca <__hexnan+0x7a>
   bf6a2:	454c      	cmp	r4, r9
   bf6a4:	d206      	bcs.n	bf6b4 <__hexnan+0x64>
   bf6a6:	2d07      	cmp	r5, #7
   bf6a8:	dc04      	bgt.n	bf6b4 <__hexnan+0x64>
   bf6aa:	462a      	mov	r2, r5
   bf6ac:	4649      	mov	r1, r9
   bf6ae:	4620      	mov	r0, r4
   bf6b0:	f7ff ffa8 	bl	bf604 <L_shift>
   bf6b4:	4544      	cmp	r4, r8
   bf6b6:	d950      	bls.n	bf75a <__hexnan+0x10a>
   bf6b8:	2300      	movs	r3, #0
   bf6ba:	f1a4 0904 	sub.w	r9, r4, #4
   bf6be:	f844 3c04 	str.w	r3, [r4, #-4]
   bf6c2:	f8cd b008 	str.w	fp, [sp, #8]
   bf6c6:	464c      	mov	r4, r9
   bf6c8:	461d      	mov	r5, r3
   bf6ca:	9a03      	ldr	r2, [sp, #12]
   bf6cc:	e7d7      	b.n	bf67e <__hexnan+0x2e>
   bf6ce:	2929      	cmp	r1, #41	; 0x29
   bf6d0:	d156      	bne.n	bf780 <__hexnan+0x130>
   bf6d2:	3202      	adds	r2, #2
   bf6d4:	f8ca 2000 	str.w	r2, [sl]
   bf6d8:	f1bb 0f00 	cmp.w	fp, #0
   bf6dc:	d050      	beq.n	bf780 <__hexnan+0x130>
   bf6de:	454c      	cmp	r4, r9
   bf6e0:	d206      	bcs.n	bf6f0 <__hexnan+0xa0>
   bf6e2:	2d07      	cmp	r5, #7
   bf6e4:	dc04      	bgt.n	bf6f0 <__hexnan+0xa0>
   bf6e6:	462a      	mov	r2, r5
   bf6e8:	4649      	mov	r1, r9
   bf6ea:	4620      	mov	r0, r4
   bf6ec:	f7ff ff8a 	bl	bf604 <L_shift>
   bf6f0:	4544      	cmp	r4, r8
   bf6f2:	d934      	bls.n	bf75e <__hexnan+0x10e>
   bf6f4:	f1a8 0204 	sub.w	r2, r8, #4
   bf6f8:	4623      	mov	r3, r4
   bf6fa:	f853 1b04 	ldr.w	r1, [r3], #4
   bf6fe:	f842 1f04 	str.w	r1, [r2, #4]!
   bf702:	429f      	cmp	r7, r3
   bf704:	d2f9      	bcs.n	bf6fa <__hexnan+0xaa>
   bf706:	1b3b      	subs	r3, r7, r4
   bf708:	f023 0303 	bic.w	r3, r3, #3
   bf70c:	3304      	adds	r3, #4
   bf70e:	3401      	adds	r4, #1
   bf710:	3e03      	subs	r6, #3
   bf712:	42b4      	cmp	r4, r6
   bf714:	bf88      	it	hi
   bf716:	2304      	movhi	r3, #4
   bf718:	4443      	add	r3, r8
   bf71a:	2200      	movs	r2, #0
   bf71c:	f843 2b04 	str.w	r2, [r3], #4
   bf720:	429f      	cmp	r7, r3
   bf722:	d2fb      	bcs.n	bf71c <__hexnan+0xcc>
   bf724:	683b      	ldr	r3, [r7, #0]
   bf726:	b91b      	cbnz	r3, bf730 <__hexnan+0xe0>
   bf728:	4547      	cmp	r7, r8
   bf72a:	d127      	bne.n	bf77c <__hexnan+0x12c>
   bf72c:	2301      	movs	r3, #1
   bf72e:	603b      	str	r3, [r7, #0]
   bf730:	2005      	movs	r0, #5
   bf732:	e026      	b.n	bf782 <__hexnan+0x132>
   bf734:	3501      	adds	r5, #1
   bf736:	2d08      	cmp	r5, #8
   bf738:	f10b 0b01 	add.w	fp, fp, #1
   bf73c:	dd06      	ble.n	bf74c <__hexnan+0xfc>
   bf73e:	4544      	cmp	r4, r8
   bf740:	d9c3      	bls.n	bf6ca <__hexnan+0x7a>
   bf742:	2300      	movs	r3, #0
   bf744:	f844 3c04 	str.w	r3, [r4, #-4]
   bf748:	2501      	movs	r5, #1
   bf74a:	3c04      	subs	r4, #4
   bf74c:	6822      	ldr	r2, [r4, #0]
   bf74e:	f000 000f 	and.w	r0, r0, #15
   bf752:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bf756:	6022      	str	r2, [r4, #0]
   bf758:	e7b7      	b.n	bf6ca <__hexnan+0x7a>
   bf75a:	2508      	movs	r5, #8
   bf75c:	e7b5      	b.n	bf6ca <__hexnan+0x7a>
   bf75e:	9b01      	ldr	r3, [sp, #4]
   bf760:	2b00      	cmp	r3, #0
   bf762:	d0df      	beq.n	bf724 <__hexnan+0xd4>
   bf764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf768:	f1c3 0320 	rsb	r3, r3, #32
   bf76c:	fa22 f303 	lsr.w	r3, r2, r3
   bf770:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bf774:	401a      	ands	r2, r3
   bf776:	f846 2c04 	str.w	r2, [r6, #-4]
   bf77a:	e7d3      	b.n	bf724 <__hexnan+0xd4>
   bf77c:	3f04      	subs	r7, #4
   bf77e:	e7d1      	b.n	bf724 <__hexnan+0xd4>
   bf780:	2004      	movs	r0, #4
   bf782:	b007      	add	sp, #28
   bf784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf788 <__retarget_lock_acquire_recursive>:
   bf788:	4770      	bx	lr

000bf78a <__retarget_lock_release>:
   bf78a:	4770      	bx	lr

000bf78c <__retarget_lock_release_recursive>:
   bf78c:	4770      	bx	lr

000bf78e <__ascii_mbtowc>:
   bf78e:	b082      	sub	sp, #8
   bf790:	b901      	cbnz	r1, bf794 <__ascii_mbtowc+0x6>
   bf792:	a901      	add	r1, sp, #4
   bf794:	b142      	cbz	r2, bf7a8 <__ascii_mbtowc+0x1a>
   bf796:	b14b      	cbz	r3, bf7ac <__ascii_mbtowc+0x1e>
   bf798:	7813      	ldrb	r3, [r2, #0]
   bf79a:	600b      	str	r3, [r1, #0]
   bf79c:	7812      	ldrb	r2, [r2, #0]
   bf79e:	1e10      	subs	r0, r2, #0
   bf7a0:	bf18      	it	ne
   bf7a2:	2001      	movne	r0, #1
   bf7a4:	b002      	add	sp, #8
   bf7a6:	4770      	bx	lr
   bf7a8:	4610      	mov	r0, r2
   bf7aa:	e7fb      	b.n	bf7a4 <__ascii_mbtowc+0x16>
   bf7ac:	f06f 0001 	mvn.w	r0, #1
   bf7b0:	e7f8      	b.n	bf7a4 <__ascii_mbtowc+0x16>
	...

000bf7b4 <_Balloc>:
   bf7b4:	b570      	push	{r4, r5, r6, lr}
   bf7b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf7b8:	4604      	mov	r4, r0
   bf7ba:	460d      	mov	r5, r1
   bf7bc:	b976      	cbnz	r6, bf7dc <_Balloc+0x28>
   bf7be:	2010      	movs	r0, #16
   bf7c0:	f7f9 ff06 	bl	b95d0 <malloc>
   bf7c4:	4602      	mov	r2, r0
   bf7c6:	6260      	str	r0, [r4, #36]	; 0x24
   bf7c8:	b920      	cbnz	r0, bf7d4 <_Balloc+0x20>
   bf7ca:	4b18      	ldr	r3, [pc, #96]	; (bf82c <_Balloc+0x78>)
   bf7cc:	4818      	ldr	r0, [pc, #96]	; (bf830 <_Balloc+0x7c>)
   bf7ce:	2166      	movs	r1, #102	; 0x66
   bf7d0:	f7f9 ff4e 	bl	b9670 <__assert_func>
   bf7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf7d8:	6006      	str	r6, [r0, #0]
   bf7da:	60c6      	str	r6, [r0, #12]
   bf7dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bf7de:	68f3      	ldr	r3, [r6, #12]
   bf7e0:	b183      	cbz	r3, bf804 <_Balloc+0x50>
   bf7e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf7e4:	68db      	ldr	r3, [r3, #12]
   bf7e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bf7ea:	b9b8      	cbnz	r0, bf81c <_Balloc+0x68>
   bf7ec:	2101      	movs	r1, #1
   bf7ee:	fa01 f605 	lsl.w	r6, r1, r5
   bf7f2:	1d72      	adds	r2, r6, #5
   bf7f4:	0092      	lsls	r2, r2, #2
   bf7f6:	4620      	mov	r0, r4
   bf7f8:	f000 fc9d 	bl	c0136 <_calloc_r>
   bf7fc:	b160      	cbz	r0, bf818 <_Balloc+0x64>
   bf7fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bf802:	e00e      	b.n	bf822 <_Balloc+0x6e>
   bf804:	2221      	movs	r2, #33	; 0x21
   bf806:	2104      	movs	r1, #4
   bf808:	4620      	mov	r0, r4
   bf80a:	f000 fc94 	bl	c0136 <_calloc_r>
   bf80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf810:	60f0      	str	r0, [r6, #12]
   bf812:	68db      	ldr	r3, [r3, #12]
   bf814:	2b00      	cmp	r3, #0
   bf816:	d1e4      	bne.n	bf7e2 <_Balloc+0x2e>
   bf818:	2000      	movs	r0, #0
   bf81a:	bd70      	pop	{r4, r5, r6, pc}
   bf81c:	6802      	ldr	r2, [r0, #0]
   bf81e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bf822:	2300      	movs	r3, #0
   bf824:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bf828:	e7f7      	b.n	bf81a <_Balloc+0x66>
   bf82a:	bf00      	nop
   bf82c:	000c1a25 	.word	0x000c1a25
   bf830:	000c1c80 	.word	0x000c1c80

000bf834 <_Bfree>:
   bf834:	b570      	push	{r4, r5, r6, lr}
   bf836:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf838:	4605      	mov	r5, r0
   bf83a:	460c      	mov	r4, r1
   bf83c:	b976      	cbnz	r6, bf85c <_Bfree+0x28>
   bf83e:	2010      	movs	r0, #16
   bf840:	f7f9 fec6 	bl	b95d0 <malloc>
   bf844:	4602      	mov	r2, r0
   bf846:	6268      	str	r0, [r5, #36]	; 0x24
   bf848:	b920      	cbnz	r0, bf854 <_Bfree+0x20>
   bf84a:	4b09      	ldr	r3, [pc, #36]	; (bf870 <_Bfree+0x3c>)
   bf84c:	4809      	ldr	r0, [pc, #36]	; (bf874 <_Bfree+0x40>)
   bf84e:	218a      	movs	r1, #138	; 0x8a
   bf850:	f7f9 ff0e 	bl	b9670 <__assert_func>
   bf854:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf858:	6006      	str	r6, [r0, #0]
   bf85a:	60c6      	str	r6, [r0, #12]
   bf85c:	b13c      	cbz	r4, bf86e <_Bfree+0x3a>
   bf85e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bf860:	6862      	ldr	r2, [r4, #4]
   bf862:	68db      	ldr	r3, [r3, #12]
   bf864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bf868:	6021      	str	r1, [r4, #0]
   bf86a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bf86e:	bd70      	pop	{r4, r5, r6, pc}
   bf870:	000c1a25 	.word	0x000c1a25
   bf874:	000c1c80 	.word	0x000c1c80

000bf878 <__multadd>:
   bf878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf87c:	690d      	ldr	r5, [r1, #16]
   bf87e:	4607      	mov	r7, r0
   bf880:	460c      	mov	r4, r1
   bf882:	461e      	mov	r6, r3
   bf884:	f101 0c14 	add.w	ip, r1, #20
   bf888:	2000      	movs	r0, #0
   bf88a:	f8dc 3000 	ldr.w	r3, [ip]
   bf88e:	b299      	uxth	r1, r3
   bf890:	fb02 6101 	mla	r1, r2, r1, r6
   bf894:	0c1e      	lsrs	r6, r3, #16
   bf896:	0c0b      	lsrs	r3, r1, #16
   bf898:	fb02 3306 	mla	r3, r2, r6, r3
   bf89c:	b289      	uxth	r1, r1
   bf89e:	3001      	adds	r0, #1
   bf8a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bf8a4:	4285      	cmp	r5, r0
   bf8a6:	f84c 1b04 	str.w	r1, [ip], #4
   bf8aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bf8ae:	dcec      	bgt.n	bf88a <__multadd+0x12>
   bf8b0:	b30e      	cbz	r6, bf8f6 <__multadd+0x7e>
   bf8b2:	68a3      	ldr	r3, [r4, #8]
   bf8b4:	42ab      	cmp	r3, r5
   bf8b6:	dc19      	bgt.n	bf8ec <__multadd+0x74>
   bf8b8:	6861      	ldr	r1, [r4, #4]
   bf8ba:	4638      	mov	r0, r7
   bf8bc:	3101      	adds	r1, #1
   bf8be:	f7ff ff79 	bl	bf7b4 <_Balloc>
   bf8c2:	4680      	mov	r8, r0
   bf8c4:	b928      	cbnz	r0, bf8d2 <__multadd+0x5a>
   bf8c6:	4602      	mov	r2, r0
   bf8c8:	4b0c      	ldr	r3, [pc, #48]	; (bf8fc <__multadd+0x84>)
   bf8ca:	480d      	ldr	r0, [pc, #52]	; (bf900 <__multadd+0x88>)
   bf8cc:	21b5      	movs	r1, #181	; 0xb5
   bf8ce:	f7f9 fecf 	bl	b9670 <__assert_func>
   bf8d2:	6922      	ldr	r2, [r4, #16]
   bf8d4:	3202      	adds	r2, #2
   bf8d6:	f104 010c 	add.w	r1, r4, #12
   bf8da:	0092      	lsls	r2, r2, #2
   bf8dc:	300c      	adds	r0, #12
   bf8de:	f7fe fbae 	bl	be03e <memcpy>
   bf8e2:	4621      	mov	r1, r4
   bf8e4:	4638      	mov	r0, r7
   bf8e6:	f7ff ffa5 	bl	bf834 <_Bfree>
   bf8ea:	4644      	mov	r4, r8
   bf8ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bf8f0:	3501      	adds	r5, #1
   bf8f2:	615e      	str	r6, [r3, #20]
   bf8f4:	6125      	str	r5, [r4, #16]
   bf8f6:	4620      	mov	r0, r4
   bf8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf8fc:	000c1bf9 	.word	0x000c1bf9
   bf900:	000c1c80 	.word	0x000c1c80

000bf904 <__s2b>:
   bf904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf908:	460c      	mov	r4, r1
   bf90a:	4615      	mov	r5, r2
   bf90c:	461f      	mov	r7, r3
   bf90e:	2209      	movs	r2, #9
   bf910:	3308      	adds	r3, #8
   bf912:	4606      	mov	r6, r0
   bf914:	fb93 f3f2 	sdiv	r3, r3, r2
   bf918:	2100      	movs	r1, #0
   bf91a:	2201      	movs	r2, #1
   bf91c:	429a      	cmp	r2, r3
   bf91e:	db09      	blt.n	bf934 <__s2b+0x30>
   bf920:	4630      	mov	r0, r6
   bf922:	f7ff ff47 	bl	bf7b4 <_Balloc>
   bf926:	b940      	cbnz	r0, bf93a <__s2b+0x36>
   bf928:	4602      	mov	r2, r0
   bf92a:	4b19      	ldr	r3, [pc, #100]	; (bf990 <__s2b+0x8c>)
   bf92c:	4819      	ldr	r0, [pc, #100]	; (bf994 <__s2b+0x90>)
   bf92e:	21ce      	movs	r1, #206	; 0xce
   bf930:	f7f9 fe9e 	bl	b9670 <__assert_func>
   bf934:	0052      	lsls	r2, r2, #1
   bf936:	3101      	adds	r1, #1
   bf938:	e7f0      	b.n	bf91c <__s2b+0x18>
   bf93a:	9b08      	ldr	r3, [sp, #32]
   bf93c:	6143      	str	r3, [r0, #20]
   bf93e:	2d09      	cmp	r5, #9
   bf940:	f04f 0301 	mov.w	r3, #1
   bf944:	6103      	str	r3, [r0, #16]
   bf946:	dd16      	ble.n	bf976 <__s2b+0x72>
   bf948:	f104 0909 	add.w	r9, r4, #9
   bf94c:	46c8      	mov	r8, r9
   bf94e:	442c      	add	r4, r5
   bf950:	f818 3b01 	ldrb.w	r3, [r8], #1
   bf954:	4601      	mov	r1, r0
   bf956:	3b30      	subs	r3, #48	; 0x30
   bf958:	220a      	movs	r2, #10
   bf95a:	4630      	mov	r0, r6
   bf95c:	f7ff ff8c 	bl	bf878 <__multadd>
   bf960:	45a0      	cmp	r8, r4
   bf962:	d1f5      	bne.n	bf950 <__s2b+0x4c>
   bf964:	f1a5 0408 	sub.w	r4, r5, #8
   bf968:	444c      	add	r4, r9
   bf96a:	1b2d      	subs	r5, r5, r4
   bf96c:	1963      	adds	r3, r4, r5
   bf96e:	42bb      	cmp	r3, r7
   bf970:	db04      	blt.n	bf97c <__s2b+0x78>
   bf972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf976:	340a      	adds	r4, #10
   bf978:	2509      	movs	r5, #9
   bf97a:	e7f6      	b.n	bf96a <__s2b+0x66>
   bf97c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf980:	4601      	mov	r1, r0
   bf982:	3b30      	subs	r3, #48	; 0x30
   bf984:	220a      	movs	r2, #10
   bf986:	4630      	mov	r0, r6
   bf988:	f7ff ff76 	bl	bf878 <__multadd>
   bf98c:	e7ee      	b.n	bf96c <__s2b+0x68>
   bf98e:	bf00      	nop
   bf990:	000c1bf9 	.word	0x000c1bf9
   bf994:	000c1c80 	.word	0x000c1c80

000bf998 <__hi0bits>:
   bf998:	0c03      	lsrs	r3, r0, #16
   bf99a:	041b      	lsls	r3, r3, #16
   bf99c:	b9d3      	cbnz	r3, bf9d4 <__hi0bits+0x3c>
   bf99e:	0400      	lsls	r0, r0, #16
   bf9a0:	2310      	movs	r3, #16
   bf9a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bf9a6:	bf04      	itt	eq
   bf9a8:	0200      	lsleq	r0, r0, #8
   bf9aa:	3308      	addeq	r3, #8
   bf9ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bf9b0:	bf04      	itt	eq
   bf9b2:	0100      	lsleq	r0, r0, #4
   bf9b4:	3304      	addeq	r3, #4
   bf9b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bf9ba:	bf04      	itt	eq
   bf9bc:	0080      	lsleq	r0, r0, #2
   bf9be:	3302      	addeq	r3, #2
   bf9c0:	2800      	cmp	r0, #0
   bf9c2:	db05      	blt.n	bf9d0 <__hi0bits+0x38>
   bf9c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bf9c8:	f103 0301 	add.w	r3, r3, #1
   bf9cc:	bf08      	it	eq
   bf9ce:	2320      	moveq	r3, #32
   bf9d0:	4618      	mov	r0, r3
   bf9d2:	4770      	bx	lr
   bf9d4:	2300      	movs	r3, #0
   bf9d6:	e7e4      	b.n	bf9a2 <__hi0bits+0xa>

000bf9d8 <__lo0bits>:
   bf9d8:	6803      	ldr	r3, [r0, #0]
   bf9da:	f013 0207 	ands.w	r2, r3, #7
   bf9de:	4601      	mov	r1, r0
   bf9e0:	d00b      	beq.n	bf9fa <__lo0bits+0x22>
   bf9e2:	07da      	lsls	r2, r3, #31
   bf9e4:	d423      	bmi.n	bfa2e <__lo0bits+0x56>
   bf9e6:	0798      	lsls	r0, r3, #30
   bf9e8:	bf49      	itett	mi
   bf9ea:	085b      	lsrmi	r3, r3, #1
   bf9ec:	089b      	lsrpl	r3, r3, #2
   bf9ee:	2001      	movmi	r0, #1
   bf9f0:	600b      	strmi	r3, [r1, #0]
   bf9f2:	bf5c      	itt	pl
   bf9f4:	600b      	strpl	r3, [r1, #0]
   bf9f6:	2002      	movpl	r0, #2
   bf9f8:	4770      	bx	lr
   bf9fa:	b298      	uxth	r0, r3
   bf9fc:	b9a8      	cbnz	r0, bfa2a <__lo0bits+0x52>
   bf9fe:	0c1b      	lsrs	r3, r3, #16
   bfa00:	2010      	movs	r0, #16
   bfa02:	b2da      	uxtb	r2, r3
   bfa04:	b90a      	cbnz	r2, bfa0a <__lo0bits+0x32>
   bfa06:	3008      	adds	r0, #8
   bfa08:	0a1b      	lsrs	r3, r3, #8
   bfa0a:	071a      	lsls	r2, r3, #28
   bfa0c:	bf04      	itt	eq
   bfa0e:	091b      	lsreq	r3, r3, #4
   bfa10:	3004      	addeq	r0, #4
   bfa12:	079a      	lsls	r2, r3, #30
   bfa14:	bf04      	itt	eq
   bfa16:	089b      	lsreq	r3, r3, #2
   bfa18:	3002      	addeq	r0, #2
   bfa1a:	07da      	lsls	r2, r3, #31
   bfa1c:	d403      	bmi.n	bfa26 <__lo0bits+0x4e>
   bfa1e:	085b      	lsrs	r3, r3, #1
   bfa20:	f100 0001 	add.w	r0, r0, #1
   bfa24:	d005      	beq.n	bfa32 <__lo0bits+0x5a>
   bfa26:	600b      	str	r3, [r1, #0]
   bfa28:	4770      	bx	lr
   bfa2a:	4610      	mov	r0, r2
   bfa2c:	e7e9      	b.n	bfa02 <__lo0bits+0x2a>
   bfa2e:	2000      	movs	r0, #0
   bfa30:	4770      	bx	lr
   bfa32:	2020      	movs	r0, #32
   bfa34:	4770      	bx	lr
	...

000bfa38 <__i2b>:
   bfa38:	b510      	push	{r4, lr}
   bfa3a:	460c      	mov	r4, r1
   bfa3c:	2101      	movs	r1, #1
   bfa3e:	f7ff feb9 	bl	bf7b4 <_Balloc>
   bfa42:	4602      	mov	r2, r0
   bfa44:	b928      	cbnz	r0, bfa52 <__i2b+0x1a>
   bfa46:	4b05      	ldr	r3, [pc, #20]	; (bfa5c <__i2b+0x24>)
   bfa48:	4805      	ldr	r0, [pc, #20]	; (bfa60 <__i2b+0x28>)
   bfa4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bfa4e:	f7f9 fe0f 	bl	b9670 <__assert_func>
   bfa52:	2301      	movs	r3, #1
   bfa54:	6144      	str	r4, [r0, #20]
   bfa56:	6103      	str	r3, [r0, #16]
   bfa58:	bd10      	pop	{r4, pc}
   bfa5a:	bf00      	nop
   bfa5c:	000c1bf9 	.word	0x000c1bf9
   bfa60:	000c1c80 	.word	0x000c1c80

000bfa64 <__multiply>:
   bfa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfa68:	4691      	mov	r9, r2
   bfa6a:	690a      	ldr	r2, [r1, #16]
   bfa6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bfa70:	429a      	cmp	r2, r3
   bfa72:	bfb8      	it	lt
   bfa74:	460b      	movlt	r3, r1
   bfa76:	460c      	mov	r4, r1
   bfa78:	bfbc      	itt	lt
   bfa7a:	464c      	movlt	r4, r9
   bfa7c:	4699      	movlt	r9, r3
   bfa7e:	6927      	ldr	r7, [r4, #16]
   bfa80:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bfa84:	68a3      	ldr	r3, [r4, #8]
   bfa86:	6861      	ldr	r1, [r4, #4]
   bfa88:	eb07 060a 	add.w	r6, r7, sl
   bfa8c:	42b3      	cmp	r3, r6
   bfa8e:	b085      	sub	sp, #20
   bfa90:	bfb8      	it	lt
   bfa92:	3101      	addlt	r1, #1
   bfa94:	f7ff fe8e 	bl	bf7b4 <_Balloc>
   bfa98:	b930      	cbnz	r0, bfaa8 <__multiply+0x44>
   bfa9a:	4602      	mov	r2, r0
   bfa9c:	4b44      	ldr	r3, [pc, #272]	; (bfbb0 <__multiply+0x14c>)
   bfa9e:	4845      	ldr	r0, [pc, #276]	; (bfbb4 <__multiply+0x150>)
   bfaa0:	f240 115d 	movw	r1, #349	; 0x15d
   bfaa4:	f7f9 fde4 	bl	b9670 <__assert_func>
   bfaa8:	f100 0514 	add.w	r5, r0, #20
   bfaac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bfab0:	462b      	mov	r3, r5
   bfab2:	2200      	movs	r2, #0
   bfab4:	4543      	cmp	r3, r8
   bfab6:	d321      	bcc.n	bfafc <__multiply+0x98>
   bfab8:	f104 0314 	add.w	r3, r4, #20
   bfabc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bfac0:	f109 0314 	add.w	r3, r9, #20
   bfac4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bfac8:	9202      	str	r2, [sp, #8]
   bfaca:	1b3a      	subs	r2, r7, r4
   bfacc:	3a15      	subs	r2, #21
   bface:	f022 0203 	bic.w	r2, r2, #3
   bfad2:	3204      	adds	r2, #4
   bfad4:	f104 0115 	add.w	r1, r4, #21
   bfad8:	428f      	cmp	r7, r1
   bfada:	bf38      	it	cc
   bfadc:	2204      	movcc	r2, #4
   bfade:	9201      	str	r2, [sp, #4]
   bfae0:	9a02      	ldr	r2, [sp, #8]
   bfae2:	9303      	str	r3, [sp, #12]
   bfae4:	429a      	cmp	r2, r3
   bfae6:	d80c      	bhi.n	bfb02 <__multiply+0x9e>
   bfae8:	2e00      	cmp	r6, #0
   bfaea:	dd03      	ble.n	bfaf4 <__multiply+0x90>
   bfaec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bfaf0:	2b00      	cmp	r3, #0
   bfaf2:	d05a      	beq.n	bfbaa <__multiply+0x146>
   bfaf4:	6106      	str	r6, [r0, #16]
   bfaf6:	b005      	add	sp, #20
   bfaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfafc:	f843 2b04 	str.w	r2, [r3], #4
   bfb00:	e7d8      	b.n	bfab4 <__multiply+0x50>
   bfb02:	f8b3 a000 	ldrh.w	sl, [r3]
   bfb06:	f1ba 0f00 	cmp.w	sl, #0
   bfb0a:	d024      	beq.n	bfb56 <__multiply+0xf2>
   bfb0c:	f104 0e14 	add.w	lr, r4, #20
   bfb10:	46a9      	mov	r9, r5
   bfb12:	f04f 0c00 	mov.w	ip, #0
   bfb16:	f85e 2b04 	ldr.w	r2, [lr], #4
   bfb1a:	f8d9 1000 	ldr.w	r1, [r9]
   bfb1e:	fa1f fb82 	uxth.w	fp, r2
   bfb22:	b289      	uxth	r1, r1
   bfb24:	fb0a 110b 	mla	r1, sl, fp, r1
   bfb28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bfb2c:	f8d9 2000 	ldr.w	r2, [r9]
   bfb30:	4461      	add	r1, ip
   bfb32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfb36:	fb0a c20b 	mla	r2, sl, fp, ip
   bfb3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bfb3e:	b289      	uxth	r1, r1
   bfb40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bfb44:	4577      	cmp	r7, lr
   bfb46:	f849 1b04 	str.w	r1, [r9], #4
   bfb4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfb4e:	d8e2      	bhi.n	bfb16 <__multiply+0xb2>
   bfb50:	9a01      	ldr	r2, [sp, #4]
   bfb52:	f845 c002 	str.w	ip, [r5, r2]
   bfb56:	9a03      	ldr	r2, [sp, #12]
   bfb58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bfb5c:	3304      	adds	r3, #4
   bfb5e:	f1b9 0f00 	cmp.w	r9, #0
   bfb62:	d020      	beq.n	bfba6 <__multiply+0x142>
   bfb64:	6829      	ldr	r1, [r5, #0]
   bfb66:	f104 0c14 	add.w	ip, r4, #20
   bfb6a:	46ae      	mov	lr, r5
   bfb6c:	f04f 0a00 	mov.w	sl, #0
   bfb70:	f8bc b000 	ldrh.w	fp, [ip]
   bfb74:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bfb78:	fb09 220b 	mla	r2, r9, fp, r2
   bfb7c:	4492      	add	sl, r2
   bfb7e:	b289      	uxth	r1, r1
   bfb80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bfb84:	f84e 1b04 	str.w	r1, [lr], #4
   bfb88:	f85c 2b04 	ldr.w	r2, [ip], #4
   bfb8c:	f8be 1000 	ldrh.w	r1, [lr]
   bfb90:	0c12      	lsrs	r2, r2, #16
   bfb92:	fb09 1102 	mla	r1, r9, r2, r1
   bfb96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bfb9a:	4567      	cmp	r7, ip
   bfb9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bfba0:	d8e6      	bhi.n	bfb70 <__multiply+0x10c>
   bfba2:	9a01      	ldr	r2, [sp, #4]
   bfba4:	50a9      	str	r1, [r5, r2]
   bfba6:	3504      	adds	r5, #4
   bfba8:	e79a      	b.n	bfae0 <__multiply+0x7c>
   bfbaa:	3e01      	subs	r6, #1
   bfbac:	e79c      	b.n	bfae8 <__multiply+0x84>
   bfbae:	bf00      	nop
   bfbb0:	000c1bf9 	.word	0x000c1bf9
   bfbb4:	000c1c80 	.word	0x000c1c80

000bfbb8 <__pow5mult>:
   bfbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfbbc:	4615      	mov	r5, r2
   bfbbe:	f012 0203 	ands.w	r2, r2, #3
   bfbc2:	4606      	mov	r6, r0
   bfbc4:	460f      	mov	r7, r1
   bfbc6:	d007      	beq.n	bfbd8 <__pow5mult+0x20>
   bfbc8:	4c25      	ldr	r4, [pc, #148]	; (bfc60 <__pow5mult+0xa8>)
   bfbca:	3a01      	subs	r2, #1
   bfbcc:	2300      	movs	r3, #0
   bfbce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bfbd2:	f7ff fe51 	bl	bf878 <__multadd>
   bfbd6:	4607      	mov	r7, r0
   bfbd8:	10ad      	asrs	r5, r5, #2
   bfbda:	d03d      	beq.n	bfc58 <__pow5mult+0xa0>
   bfbdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bfbde:	b97c      	cbnz	r4, bfc00 <__pow5mult+0x48>
   bfbe0:	2010      	movs	r0, #16
   bfbe2:	f7f9 fcf5 	bl	b95d0 <malloc>
   bfbe6:	4602      	mov	r2, r0
   bfbe8:	6270      	str	r0, [r6, #36]	; 0x24
   bfbea:	b928      	cbnz	r0, bfbf8 <__pow5mult+0x40>
   bfbec:	4b1d      	ldr	r3, [pc, #116]	; (bfc64 <__pow5mult+0xac>)
   bfbee:	481e      	ldr	r0, [pc, #120]	; (bfc68 <__pow5mult+0xb0>)
   bfbf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bfbf4:	f7f9 fd3c 	bl	b9670 <__assert_func>
   bfbf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfbfc:	6004      	str	r4, [r0, #0]
   bfbfe:	60c4      	str	r4, [r0, #12]
   bfc00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bfc04:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bfc08:	b94c      	cbnz	r4, bfc1e <__pow5mult+0x66>
   bfc0a:	f240 2171 	movw	r1, #625	; 0x271
   bfc0e:	4630      	mov	r0, r6
   bfc10:	f7ff ff12 	bl	bfa38 <__i2b>
   bfc14:	2300      	movs	r3, #0
   bfc16:	f8c8 0008 	str.w	r0, [r8, #8]
   bfc1a:	4604      	mov	r4, r0
   bfc1c:	6003      	str	r3, [r0, #0]
   bfc1e:	f04f 0900 	mov.w	r9, #0
   bfc22:	07eb      	lsls	r3, r5, #31
   bfc24:	d50a      	bpl.n	bfc3c <__pow5mult+0x84>
   bfc26:	4639      	mov	r1, r7
   bfc28:	4622      	mov	r2, r4
   bfc2a:	4630      	mov	r0, r6
   bfc2c:	f7ff ff1a 	bl	bfa64 <__multiply>
   bfc30:	4639      	mov	r1, r7
   bfc32:	4680      	mov	r8, r0
   bfc34:	4630      	mov	r0, r6
   bfc36:	f7ff fdfd 	bl	bf834 <_Bfree>
   bfc3a:	4647      	mov	r7, r8
   bfc3c:	106d      	asrs	r5, r5, #1
   bfc3e:	d00b      	beq.n	bfc58 <__pow5mult+0xa0>
   bfc40:	6820      	ldr	r0, [r4, #0]
   bfc42:	b938      	cbnz	r0, bfc54 <__pow5mult+0x9c>
   bfc44:	4622      	mov	r2, r4
   bfc46:	4621      	mov	r1, r4
   bfc48:	4630      	mov	r0, r6
   bfc4a:	f7ff ff0b 	bl	bfa64 <__multiply>
   bfc4e:	6020      	str	r0, [r4, #0]
   bfc50:	f8c0 9000 	str.w	r9, [r0]
   bfc54:	4604      	mov	r4, r0
   bfc56:	e7e4      	b.n	bfc22 <__pow5mult+0x6a>
   bfc58:	4638      	mov	r0, r7
   bfc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfc5e:	bf00      	nop
   bfc60:	000c1dd0 	.word	0x000c1dd0
   bfc64:	000c1a25 	.word	0x000c1a25
   bfc68:	000c1c80 	.word	0x000c1c80

000bfc6c <__lshift>:
   bfc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfc70:	460c      	mov	r4, r1
   bfc72:	6849      	ldr	r1, [r1, #4]
   bfc74:	6923      	ldr	r3, [r4, #16]
   bfc76:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bfc7a:	68a3      	ldr	r3, [r4, #8]
   bfc7c:	4607      	mov	r7, r0
   bfc7e:	4691      	mov	r9, r2
   bfc80:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bfc84:	f108 0601 	add.w	r6, r8, #1
   bfc88:	42b3      	cmp	r3, r6
   bfc8a:	db0b      	blt.n	bfca4 <__lshift+0x38>
   bfc8c:	4638      	mov	r0, r7
   bfc8e:	f7ff fd91 	bl	bf7b4 <_Balloc>
   bfc92:	4605      	mov	r5, r0
   bfc94:	b948      	cbnz	r0, bfcaa <__lshift+0x3e>
   bfc96:	4602      	mov	r2, r0
   bfc98:	4b2a      	ldr	r3, [pc, #168]	; (bfd44 <__lshift+0xd8>)
   bfc9a:	482b      	ldr	r0, [pc, #172]	; (bfd48 <__lshift+0xdc>)
   bfc9c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bfca0:	f7f9 fce6 	bl	b9670 <__assert_func>
   bfca4:	3101      	adds	r1, #1
   bfca6:	005b      	lsls	r3, r3, #1
   bfca8:	e7ee      	b.n	bfc88 <__lshift+0x1c>
   bfcaa:	2300      	movs	r3, #0
   bfcac:	f100 0114 	add.w	r1, r0, #20
   bfcb0:	f100 0210 	add.w	r2, r0, #16
   bfcb4:	4618      	mov	r0, r3
   bfcb6:	4553      	cmp	r3, sl
   bfcb8:	db37      	blt.n	bfd2a <__lshift+0xbe>
   bfcba:	6920      	ldr	r0, [r4, #16]
   bfcbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bfcc0:	f104 0314 	add.w	r3, r4, #20
   bfcc4:	f019 091f 	ands.w	r9, r9, #31
   bfcc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bfccc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bfcd0:	d02f      	beq.n	bfd32 <__lshift+0xc6>
   bfcd2:	f1c9 0e20 	rsb	lr, r9, #32
   bfcd6:	468a      	mov	sl, r1
   bfcd8:	f04f 0c00 	mov.w	ip, #0
   bfcdc:	681a      	ldr	r2, [r3, #0]
   bfcde:	fa02 f209 	lsl.w	r2, r2, r9
   bfce2:	ea42 020c 	orr.w	r2, r2, ip
   bfce6:	f84a 2b04 	str.w	r2, [sl], #4
   bfcea:	f853 2b04 	ldr.w	r2, [r3], #4
   bfcee:	4298      	cmp	r0, r3
   bfcf0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bfcf4:	d8f2      	bhi.n	bfcdc <__lshift+0x70>
   bfcf6:	1b03      	subs	r3, r0, r4
   bfcf8:	3b15      	subs	r3, #21
   bfcfa:	f023 0303 	bic.w	r3, r3, #3
   bfcfe:	3304      	adds	r3, #4
   bfd00:	f104 0215 	add.w	r2, r4, #21
   bfd04:	4290      	cmp	r0, r2
   bfd06:	bf38      	it	cc
   bfd08:	2304      	movcc	r3, #4
   bfd0a:	f841 c003 	str.w	ip, [r1, r3]
   bfd0e:	f1bc 0f00 	cmp.w	ip, #0
   bfd12:	d001      	beq.n	bfd18 <__lshift+0xac>
   bfd14:	f108 0602 	add.w	r6, r8, #2
   bfd18:	3e01      	subs	r6, #1
   bfd1a:	4638      	mov	r0, r7
   bfd1c:	612e      	str	r6, [r5, #16]
   bfd1e:	4621      	mov	r1, r4
   bfd20:	f7ff fd88 	bl	bf834 <_Bfree>
   bfd24:	4628      	mov	r0, r5
   bfd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfd2a:	f842 0f04 	str.w	r0, [r2, #4]!
   bfd2e:	3301      	adds	r3, #1
   bfd30:	e7c1      	b.n	bfcb6 <__lshift+0x4a>
   bfd32:	3904      	subs	r1, #4
   bfd34:	f853 2b04 	ldr.w	r2, [r3], #4
   bfd38:	f841 2f04 	str.w	r2, [r1, #4]!
   bfd3c:	4298      	cmp	r0, r3
   bfd3e:	d8f9      	bhi.n	bfd34 <__lshift+0xc8>
   bfd40:	e7ea      	b.n	bfd18 <__lshift+0xac>
   bfd42:	bf00      	nop
   bfd44:	000c1bf9 	.word	0x000c1bf9
   bfd48:	000c1c80 	.word	0x000c1c80

000bfd4c <__mcmp>:
   bfd4c:	b530      	push	{r4, r5, lr}
   bfd4e:	6902      	ldr	r2, [r0, #16]
   bfd50:	690c      	ldr	r4, [r1, #16]
   bfd52:	1b12      	subs	r2, r2, r4
   bfd54:	d10e      	bne.n	bfd74 <__mcmp+0x28>
   bfd56:	f100 0314 	add.w	r3, r0, #20
   bfd5a:	3114      	adds	r1, #20
   bfd5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bfd60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bfd64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bfd68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bfd6c:	42a5      	cmp	r5, r4
   bfd6e:	d003      	beq.n	bfd78 <__mcmp+0x2c>
   bfd70:	d305      	bcc.n	bfd7e <__mcmp+0x32>
   bfd72:	2201      	movs	r2, #1
   bfd74:	4610      	mov	r0, r2
   bfd76:	bd30      	pop	{r4, r5, pc}
   bfd78:	4283      	cmp	r3, r0
   bfd7a:	d3f3      	bcc.n	bfd64 <__mcmp+0x18>
   bfd7c:	e7fa      	b.n	bfd74 <__mcmp+0x28>
   bfd7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bfd82:	e7f7      	b.n	bfd74 <__mcmp+0x28>

000bfd84 <__mdiff>:
   bfd84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfd88:	460c      	mov	r4, r1
   bfd8a:	4606      	mov	r6, r0
   bfd8c:	4611      	mov	r1, r2
   bfd8e:	4620      	mov	r0, r4
   bfd90:	4690      	mov	r8, r2
   bfd92:	f7ff ffdb 	bl	bfd4c <__mcmp>
   bfd96:	1e05      	subs	r5, r0, #0
   bfd98:	d110      	bne.n	bfdbc <__mdiff+0x38>
   bfd9a:	4629      	mov	r1, r5
   bfd9c:	4630      	mov	r0, r6
   bfd9e:	f7ff fd09 	bl	bf7b4 <_Balloc>
   bfda2:	b930      	cbnz	r0, bfdb2 <__mdiff+0x2e>
   bfda4:	4b3a      	ldr	r3, [pc, #232]	; (bfe90 <__mdiff+0x10c>)
   bfda6:	4602      	mov	r2, r0
   bfda8:	f240 2132 	movw	r1, #562	; 0x232
   bfdac:	4839      	ldr	r0, [pc, #228]	; (bfe94 <__mdiff+0x110>)
   bfdae:	f7f9 fc5f 	bl	b9670 <__assert_func>
   bfdb2:	2301      	movs	r3, #1
   bfdb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bfdb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfdbc:	bfa4      	itt	ge
   bfdbe:	4643      	movge	r3, r8
   bfdc0:	46a0      	movge	r8, r4
   bfdc2:	4630      	mov	r0, r6
   bfdc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bfdc8:	bfa6      	itte	ge
   bfdca:	461c      	movge	r4, r3
   bfdcc:	2500      	movge	r5, #0
   bfdce:	2501      	movlt	r5, #1
   bfdd0:	f7ff fcf0 	bl	bf7b4 <_Balloc>
   bfdd4:	b920      	cbnz	r0, bfde0 <__mdiff+0x5c>
   bfdd6:	4b2e      	ldr	r3, [pc, #184]	; (bfe90 <__mdiff+0x10c>)
   bfdd8:	4602      	mov	r2, r0
   bfdda:	f44f 7110 	mov.w	r1, #576	; 0x240
   bfdde:	e7e5      	b.n	bfdac <__mdiff+0x28>
   bfde0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bfde4:	6926      	ldr	r6, [r4, #16]
   bfde6:	60c5      	str	r5, [r0, #12]
   bfde8:	f104 0914 	add.w	r9, r4, #20
   bfdec:	f108 0514 	add.w	r5, r8, #20
   bfdf0:	f100 0e14 	add.w	lr, r0, #20
   bfdf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bfdf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bfdfc:	f108 0210 	add.w	r2, r8, #16
   bfe00:	46f2      	mov	sl, lr
   bfe02:	2100      	movs	r1, #0
   bfe04:	f859 3b04 	ldr.w	r3, [r9], #4
   bfe08:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bfe0c:	fa1f f883 	uxth.w	r8, r3
   bfe10:	fa11 f18b 	uxtah	r1, r1, fp
   bfe14:	0c1b      	lsrs	r3, r3, #16
   bfe16:	eba1 0808 	sub.w	r8, r1, r8
   bfe1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bfe1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bfe22:	fa1f f888 	uxth.w	r8, r8
   bfe26:	1419      	asrs	r1, r3, #16
   bfe28:	454e      	cmp	r6, r9
   bfe2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bfe2e:	f84a 3b04 	str.w	r3, [sl], #4
   bfe32:	d8e7      	bhi.n	bfe04 <__mdiff+0x80>
   bfe34:	1b33      	subs	r3, r6, r4
   bfe36:	3b15      	subs	r3, #21
   bfe38:	f023 0303 	bic.w	r3, r3, #3
   bfe3c:	3304      	adds	r3, #4
   bfe3e:	3415      	adds	r4, #21
   bfe40:	42a6      	cmp	r6, r4
   bfe42:	bf38      	it	cc
   bfe44:	2304      	movcc	r3, #4
   bfe46:	441d      	add	r5, r3
   bfe48:	4473      	add	r3, lr
   bfe4a:	469e      	mov	lr, r3
   bfe4c:	462e      	mov	r6, r5
   bfe4e:	4566      	cmp	r6, ip
   bfe50:	d30e      	bcc.n	bfe70 <__mdiff+0xec>
   bfe52:	f10c 0203 	add.w	r2, ip, #3
   bfe56:	1b52      	subs	r2, r2, r5
   bfe58:	f022 0203 	bic.w	r2, r2, #3
   bfe5c:	3d03      	subs	r5, #3
   bfe5e:	45ac      	cmp	ip, r5
   bfe60:	bf38      	it	cc
   bfe62:	2200      	movcc	r2, #0
   bfe64:	441a      	add	r2, r3
   bfe66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bfe6a:	b17b      	cbz	r3, bfe8c <__mdiff+0x108>
   bfe6c:	6107      	str	r7, [r0, #16]
   bfe6e:	e7a3      	b.n	bfdb8 <__mdiff+0x34>
   bfe70:	f856 8b04 	ldr.w	r8, [r6], #4
   bfe74:	fa11 f288 	uxtah	r2, r1, r8
   bfe78:	1414      	asrs	r4, r2, #16
   bfe7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bfe7e:	b292      	uxth	r2, r2
   bfe80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bfe84:	f84e 2b04 	str.w	r2, [lr], #4
   bfe88:	1421      	asrs	r1, r4, #16
   bfe8a:	e7e0      	b.n	bfe4e <__mdiff+0xca>
   bfe8c:	3f01      	subs	r7, #1
   bfe8e:	e7ea      	b.n	bfe66 <__mdiff+0xe2>
   bfe90:	000c1bf9 	.word	0x000c1bf9
   bfe94:	000c1c80 	.word	0x000c1c80

000bfe98 <__ulp>:
   bfe98:	b082      	sub	sp, #8
   bfe9a:	ed8d 0b00 	vstr	d0, [sp]
   bfe9e:	9b01      	ldr	r3, [sp, #4]
   bfea0:	4912      	ldr	r1, [pc, #72]	; (bfeec <__ulp+0x54>)
   bfea2:	4019      	ands	r1, r3
   bfea4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bfea8:	2900      	cmp	r1, #0
   bfeaa:	dd05      	ble.n	bfeb8 <__ulp+0x20>
   bfeac:	2200      	movs	r2, #0
   bfeae:	460b      	mov	r3, r1
   bfeb0:	ec43 2b10 	vmov	d0, r2, r3
   bfeb4:	b002      	add	sp, #8
   bfeb6:	4770      	bx	lr
   bfeb8:	4249      	negs	r1, r1
   bfeba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bfebe:	ea4f 5021 	mov.w	r0, r1, asr #20
   bfec2:	f04f 0200 	mov.w	r2, #0
   bfec6:	f04f 0300 	mov.w	r3, #0
   bfeca:	da04      	bge.n	bfed6 <__ulp+0x3e>
   bfecc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bfed0:	fa41 f300 	asr.w	r3, r1, r0
   bfed4:	e7ec      	b.n	bfeb0 <__ulp+0x18>
   bfed6:	f1a0 0114 	sub.w	r1, r0, #20
   bfeda:	291e      	cmp	r1, #30
   bfedc:	bfda      	itte	le
   bfede:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bfee2:	fa20 f101 	lsrle.w	r1, r0, r1
   bfee6:	2101      	movgt	r1, #1
   bfee8:	460a      	mov	r2, r1
   bfeea:	e7e1      	b.n	bfeb0 <__ulp+0x18>
   bfeec:	7ff00000 	.word	0x7ff00000

000bfef0 <__b2d>:
   bfef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfef2:	6905      	ldr	r5, [r0, #16]
   bfef4:	f100 0714 	add.w	r7, r0, #20
   bfef8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bfefc:	1f2e      	subs	r6, r5, #4
   bfefe:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bff02:	4620      	mov	r0, r4
   bff04:	f7ff fd48 	bl	bf998 <__hi0bits>
   bff08:	f1c0 0320 	rsb	r3, r0, #32
   bff0c:	280a      	cmp	r0, #10
   bff0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bff8c <__b2d+0x9c>
   bff12:	600b      	str	r3, [r1, #0]
   bff14:	dc14      	bgt.n	bff40 <__b2d+0x50>
   bff16:	f1c0 0e0b 	rsb	lr, r0, #11
   bff1a:	fa24 f10e 	lsr.w	r1, r4, lr
   bff1e:	42b7      	cmp	r7, r6
   bff20:	ea41 030c 	orr.w	r3, r1, ip
   bff24:	bf34      	ite	cc
   bff26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bff2a:	2100      	movcs	r1, #0
   bff2c:	3015      	adds	r0, #21
   bff2e:	fa04 f000 	lsl.w	r0, r4, r0
   bff32:	fa21 f10e 	lsr.w	r1, r1, lr
   bff36:	ea40 0201 	orr.w	r2, r0, r1
   bff3a:	ec43 2b10 	vmov	d0, r2, r3
   bff3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bff40:	42b7      	cmp	r7, r6
   bff42:	bf3a      	itte	cc
   bff44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bff48:	f1a5 0608 	subcc.w	r6, r5, #8
   bff4c:	2100      	movcs	r1, #0
   bff4e:	380b      	subs	r0, #11
   bff50:	d017      	beq.n	bff82 <__b2d+0x92>
   bff52:	f1c0 0c20 	rsb	ip, r0, #32
   bff56:	fa04 f500 	lsl.w	r5, r4, r0
   bff5a:	42be      	cmp	r6, r7
   bff5c:	fa21 f40c 	lsr.w	r4, r1, ip
   bff60:	ea45 0504 	orr.w	r5, r5, r4
   bff64:	bf8c      	ite	hi
   bff66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bff6a:	2400      	movls	r4, #0
   bff6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bff70:	fa01 f000 	lsl.w	r0, r1, r0
   bff74:	fa24 f40c 	lsr.w	r4, r4, ip
   bff78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bff7c:	ea40 0204 	orr.w	r2, r0, r4
   bff80:	e7db      	b.n	bff3a <__b2d+0x4a>
   bff82:	ea44 030c 	orr.w	r3, r4, ip
   bff86:	460a      	mov	r2, r1
   bff88:	e7d7      	b.n	bff3a <__b2d+0x4a>
   bff8a:	bf00      	nop
   bff8c:	3ff00000 	.word	0x3ff00000

000bff90 <__d2b>:
   bff90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bff94:	4689      	mov	r9, r1
   bff96:	2101      	movs	r1, #1
   bff98:	ec57 6b10 	vmov	r6, r7, d0
   bff9c:	4690      	mov	r8, r2
   bff9e:	f7ff fc09 	bl	bf7b4 <_Balloc>
   bffa2:	4604      	mov	r4, r0
   bffa4:	b930      	cbnz	r0, bffb4 <__d2b+0x24>
   bffa6:	4602      	mov	r2, r0
   bffa8:	4b25      	ldr	r3, [pc, #148]	; (c0040 <__d2b+0xb0>)
   bffaa:	4826      	ldr	r0, [pc, #152]	; (c0044 <__d2b+0xb4>)
   bffac:	f240 310a 	movw	r1, #778	; 0x30a
   bffb0:	f7f9 fb5e 	bl	b9670 <__assert_func>
   bffb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bffb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bffbc:	bb35      	cbnz	r5, c000c <__d2b+0x7c>
   bffbe:	2e00      	cmp	r6, #0
   bffc0:	9301      	str	r3, [sp, #4]
   bffc2:	d028      	beq.n	c0016 <__d2b+0x86>
   bffc4:	4668      	mov	r0, sp
   bffc6:	9600      	str	r6, [sp, #0]
   bffc8:	f7ff fd06 	bl	bf9d8 <__lo0bits>
   bffcc:	9900      	ldr	r1, [sp, #0]
   bffce:	b300      	cbz	r0, c0012 <__d2b+0x82>
   bffd0:	9a01      	ldr	r2, [sp, #4]
   bffd2:	f1c0 0320 	rsb	r3, r0, #32
   bffd6:	fa02 f303 	lsl.w	r3, r2, r3
   bffda:	430b      	orrs	r3, r1
   bffdc:	40c2      	lsrs	r2, r0
   bffde:	6163      	str	r3, [r4, #20]
   bffe0:	9201      	str	r2, [sp, #4]
   bffe2:	9b01      	ldr	r3, [sp, #4]
   bffe4:	61a3      	str	r3, [r4, #24]
   bffe6:	2b00      	cmp	r3, #0
   bffe8:	bf14      	ite	ne
   bffea:	2202      	movne	r2, #2
   bffec:	2201      	moveq	r2, #1
   bffee:	6122      	str	r2, [r4, #16]
   bfff0:	b1d5      	cbz	r5, c0028 <__d2b+0x98>
   bfff2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bfff6:	4405      	add	r5, r0
   bfff8:	f8c9 5000 	str.w	r5, [r9]
   bfffc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c0000:	f8c8 0000 	str.w	r0, [r8]
   c0004:	4620      	mov	r0, r4
   c0006:	b003      	add	sp, #12
   c0008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c000c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0010:	e7d5      	b.n	bffbe <__d2b+0x2e>
   c0012:	6161      	str	r1, [r4, #20]
   c0014:	e7e5      	b.n	bffe2 <__d2b+0x52>
   c0016:	a801      	add	r0, sp, #4
   c0018:	f7ff fcde 	bl	bf9d8 <__lo0bits>
   c001c:	9b01      	ldr	r3, [sp, #4]
   c001e:	6163      	str	r3, [r4, #20]
   c0020:	2201      	movs	r2, #1
   c0022:	6122      	str	r2, [r4, #16]
   c0024:	3020      	adds	r0, #32
   c0026:	e7e3      	b.n	bfff0 <__d2b+0x60>
   c0028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c002c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c0030:	f8c9 0000 	str.w	r0, [r9]
   c0034:	6918      	ldr	r0, [r3, #16]
   c0036:	f7ff fcaf 	bl	bf998 <__hi0bits>
   c003a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c003e:	e7df      	b.n	c0000 <__d2b+0x70>
   c0040:	000c1bf9 	.word	0x000c1bf9
   c0044:	000c1c80 	.word	0x000c1c80

000c0048 <__ratio>:
   c0048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c004c:	4688      	mov	r8, r1
   c004e:	4669      	mov	r1, sp
   c0050:	4681      	mov	r9, r0
   c0052:	f7ff ff4d 	bl	bfef0 <__b2d>
   c0056:	a901      	add	r1, sp, #4
   c0058:	4640      	mov	r0, r8
   c005a:	ec55 4b10 	vmov	r4, r5, d0
   c005e:	f7ff ff47 	bl	bfef0 <__b2d>
   c0062:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c0066:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c006a:	eba3 0c02 	sub.w	ip, r3, r2
   c006e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c0072:	1a9b      	subs	r3, r3, r2
   c0074:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c0078:	ec51 0b10 	vmov	r0, r1, d0
   c007c:	2b00      	cmp	r3, #0
   c007e:	bfd6      	itet	le
   c0080:	460a      	movle	r2, r1
   c0082:	462a      	movgt	r2, r5
   c0084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0088:	468b      	mov	fp, r1
   c008a:	462f      	mov	r7, r5
   c008c:	bfd4      	ite	le
   c008e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c0092:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c0096:	4620      	mov	r0, r4
   c0098:	ee10 2a10 	vmov	r2, s0
   c009c:	465b      	mov	r3, fp
   c009e:	4639      	mov	r1, r7
   c00a0:	f7fd fdb2 	bl	bdc08 <__aeabi_ddiv>
   c00a4:	ec41 0b10 	vmov	d0, r0, r1
   c00a8:	b003      	add	sp, #12
   c00aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c00ae <__copybits>:
   c00ae:	3901      	subs	r1, #1
   c00b0:	b570      	push	{r4, r5, r6, lr}
   c00b2:	1149      	asrs	r1, r1, #5
   c00b4:	6914      	ldr	r4, [r2, #16]
   c00b6:	3101      	adds	r1, #1
   c00b8:	f102 0314 	add.w	r3, r2, #20
   c00bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c00c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c00c4:	1f05      	subs	r5, r0, #4
   c00c6:	42a3      	cmp	r3, r4
   c00c8:	d30c      	bcc.n	c00e4 <__copybits+0x36>
   c00ca:	1aa3      	subs	r3, r4, r2
   c00cc:	3b11      	subs	r3, #17
   c00ce:	f023 0303 	bic.w	r3, r3, #3
   c00d2:	3211      	adds	r2, #17
   c00d4:	42a2      	cmp	r2, r4
   c00d6:	bf88      	it	hi
   c00d8:	2300      	movhi	r3, #0
   c00da:	4418      	add	r0, r3
   c00dc:	2300      	movs	r3, #0
   c00de:	4288      	cmp	r0, r1
   c00e0:	d305      	bcc.n	c00ee <__copybits+0x40>
   c00e2:	bd70      	pop	{r4, r5, r6, pc}
   c00e4:	f853 6b04 	ldr.w	r6, [r3], #4
   c00e8:	f845 6f04 	str.w	r6, [r5, #4]!
   c00ec:	e7eb      	b.n	c00c6 <__copybits+0x18>
   c00ee:	f840 3b04 	str.w	r3, [r0], #4
   c00f2:	e7f4      	b.n	c00de <__copybits+0x30>

000c00f4 <__any_on>:
   c00f4:	f100 0214 	add.w	r2, r0, #20
   c00f8:	6900      	ldr	r0, [r0, #16]
   c00fa:	114b      	asrs	r3, r1, #5
   c00fc:	4298      	cmp	r0, r3
   c00fe:	b510      	push	{r4, lr}
   c0100:	db11      	blt.n	c0126 <__any_on+0x32>
   c0102:	dd0a      	ble.n	c011a <__any_on+0x26>
   c0104:	f011 011f 	ands.w	r1, r1, #31
   c0108:	d007      	beq.n	c011a <__any_on+0x26>
   c010a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c010e:	fa24 f001 	lsr.w	r0, r4, r1
   c0112:	fa00 f101 	lsl.w	r1, r0, r1
   c0116:	428c      	cmp	r4, r1
   c0118:	d10b      	bne.n	c0132 <__any_on+0x3e>
   c011a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c011e:	4293      	cmp	r3, r2
   c0120:	d803      	bhi.n	c012a <__any_on+0x36>
   c0122:	2000      	movs	r0, #0
   c0124:	bd10      	pop	{r4, pc}
   c0126:	4603      	mov	r3, r0
   c0128:	e7f7      	b.n	c011a <__any_on+0x26>
   c012a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c012e:	2900      	cmp	r1, #0
   c0130:	d0f5      	beq.n	c011e <__any_on+0x2a>
   c0132:	2001      	movs	r0, #1
   c0134:	e7f6      	b.n	c0124 <__any_on+0x30>

000c0136 <_calloc_r>:
   c0136:	b513      	push	{r0, r1, r4, lr}
   c0138:	434a      	muls	r2, r1
   c013a:	4611      	mov	r1, r2
   c013c:	9201      	str	r2, [sp, #4]
   c013e:	f7f9 fa87 	bl	b9650 <_malloc_r>
   c0142:	4604      	mov	r4, r0
   c0144:	b118      	cbz	r0, c014e <_calloc_r+0x18>
   c0146:	9a01      	ldr	r2, [sp, #4]
   c0148:	2100      	movs	r1, #0
   c014a:	f7fd ffa0 	bl	be08e <memset>
   c014e:	4620      	mov	r0, r4
   c0150:	b002      	add	sp, #8
   c0152:	bd10      	pop	{r4, pc}
   c0154:	0000      	movs	r0, r0
	...

000c0158 <nan>:
   c0158:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0160 <nan+0x8>
   c015c:	4770      	bx	lr
   c015e:	bf00      	nop
   c0160:	00000000 	.word	0x00000000
   c0164:	7ff80000 	.word	0x7ff80000

000c0168 <__ascii_wctomb>:
   c0168:	b149      	cbz	r1, c017e <__ascii_wctomb+0x16>
   c016a:	2aff      	cmp	r2, #255	; 0xff
   c016c:	bf85      	ittet	hi
   c016e:	238a      	movhi	r3, #138	; 0x8a
   c0170:	6003      	strhi	r3, [r0, #0]
   c0172:	700a      	strbls	r2, [r1, #0]
   c0174:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0178:	bf98      	it	ls
   c017a:	2001      	movls	r0, #1
   c017c:	4770      	bx	lr
   c017e:	4608      	mov	r0, r1
   c0180:	4770      	bx	lr
	...

000c0184 <__aeabi_d2lz>:
   c0184:	b538      	push	{r3, r4, r5, lr}
   c0186:	2200      	movs	r2, #0
   c0188:	2300      	movs	r3, #0
   c018a:	4604      	mov	r4, r0
   c018c:	460d      	mov	r5, r1
   c018e:	f7fd fe83 	bl	bde98 <__aeabi_dcmplt>
   c0192:	b928      	cbnz	r0, c01a0 <__aeabi_d2lz+0x1c>
   c0194:	4620      	mov	r0, r4
   c0196:	4629      	mov	r1, r5
   c0198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c019c:	f7fd bf14 	b.w	bdfc8 <__aeabi_d2ulz>
   c01a0:	4620      	mov	r0, r4
   c01a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c01a6:	f7fd ff0f 	bl	bdfc8 <__aeabi_d2ulz>
   c01aa:	4240      	negs	r0, r0
   c01ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c01b0:	bd38      	pop	{r3, r4, r5, pc}
   c01b2:	bf00      	nop

000c01b4 <dynalib_user>:
   c01b4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c01c4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c01d4:	7620 7269 7574 6c61 4500 746e 7265 7420      virtual.Enter t
   c01e4:	6972 6767 7265 4a00 796f 7473 6369 206b     rigger.Joystick 
   c01f4:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c0204:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c0214:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c0224:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c0234:	2520 2073 4f4d 4544 7525 003e 6966 656c      %s MODE%u>.file
   c0244:	616e 656d 4600 6c69 2065 2527 2773 6120     name.File '%s' a
   c0254:	726c 6165 7964 6520 6978 7473 2c73 6420     lready exists, d
   c0264:	6c65 7465 6e69 2067 6e61 2064 766f 7265     eleting and over
   c0274:	7277 7469 6e69 0067 7453 7261 6974 676e     writing.Starting
   c0284:	6f20 6666 6f6c 6461 6f20 2066 6966 656c      offload of file
   c0294:	203a 7325 6600 6c69 6365 6d6f 0070 6552     : %s.filecomp.Re
   c02a4:	6361 6568 2064 6e65 2064 666f 6620 6c69     ached end of fil
   c02b4:	3a65 2520 0073 6966 656c 6f64 656e 5200     e: %s.filedone.R
   c02c4:	6365 6965 6576 2064 6f64 656e 6320 6d6f     eceived done com
   c02d4:	616d 646e 2500 2573 3230 0078 6f42 3174     mand.%s%02x.Bot1
   c02e4:	6164 0074 4343 2542 6864 6177 7600 6365     dat.CCB%dhwa.vec
   c02f4:	6f74 3a72 5f3a 5f4d 6172 676e 5f65 6863     tor::_M_range_ch
   c0304:	6365 3a6b 5f20 6e5f 2820 6877 6369 2068     eck: __n (which 
   c0314:	7369 2520 757a 2029 3d3e 7420 6968 2d73     is %zu) >= this-
   c0324:	733e 7a69 2865 2029 7728 6968 6863 6920     >size() (which i
   c0334:	2073 7a25 2975 5200 6769 7468 7420 6972     s %zu).Right tri
   c0344:	6767 7265 4d00 646f 6669 6569 2064 6e61     gger.Modified an
   c0354:	4f20 2f6e 664f 2066 6f43 746e 6f72 006c      On/Off Control.
   c0364:	6f42 3a74 2520 2c64 4d20 646f 6669 6569     Bot: %d, Modifie
   c0374:	2064 5500 2070 7274 6769 6567 0072 6f44     d .Up trigger.Do
   c0384:	6e77 7420 6972 6767 7265 7600 6365 6f74     wn trigger.vecto
   c0394:	3a72 5f3a 5f4d 6572 6c61 6f6c 5f63 6e69     r::_M_realloc_in
   c03a4:	6573 7472 4300 6568 6b63 7573 3a6d 2520     sert.Checksum: %
   c03b4:	3230 2c78 2520 3330 0064 7453 6972 676e     02x, %03d.String
   c03c4:	4c20 6e65 203a 6425 202c 6843 6365 736b      Len: %d, Checks
   c03d4:	6d75 203a 6425 5b00 4157 4e52 205d 654d     um: %d.[WARN] Me
   c03e4:	7373 6761 2065 6843 6365 736b 6d75 4420     ssage Checksum D
   c03f4:	656f 2073 6f4e 2074 614d 6374 2168 203a     oes Not Match!: 
   c0404:	7325 5700 7261 696e 676e 202c 6863 6365     %s.Warning, chec
   c0414:	736b 6d75 6420 656f 2073 6f6e 2074 616d     ksum does not ma
   c0424:	6374 0068 4343 3225 6e73 6b61 3325 0073     tch.CC%2snak%3s.
   c0434:	6361 006b 7573 0070 7525 2520 2075 7325     ack.sup.%u %u %s
   c0444:	2520 0073 7453 7461 7375 5520 6470 7461      %s.Status Updat
   c0454:	2165 2300 2323 2323 2323 2323 2323 2323     e!.#############
   c0464:	2323 2323 2323 2323 2323 2323 0023 2323     #############.##
   c0474:	2020 2020 5320 4154 5554 2053 5055 4144          STATUS UPDA
   c0484:	4554 2020 2020 2323 2300 2023 2020 2020     TE    ##.##     
   c0494:	2020 6f42 2074 3a23 2520 6431 2020 2020       Bot #: %1d    
   c04a4:	2020 2323 2300 2023 2020 2020 4220 7461       ##.##      Bat
   c04b4:	2074 3a25 2520 3330 2064 2020 2020 2323     t %: %03d     ##
   c04c4:	2300 2023 2020 4c20 4554 2020 4c42 2045     .##    LTE  BLE 
   c04d4:	5820 6542 2065 2020 2320 0023 2323 2020      XBee    ##.##  
   c04e4:	2020 2520 2064 2020 2520 2064 2020 2020        %d    %d     
   c04f4:	6425 2020 2020 2320 0023 2323 2020 614c     %d     ##.##  La
   c0504:	6974 7574 6564 4c20 6e6f 6967 7574 6564     titude Longitude
   c0514:	2020 2323 2300 2023 2e25 6636 2520 362e       ##.## %.6f %.6
   c0524:	2066 2323 7300 736e 2500 2073 7325 2520     f ##.sns.%s %s %
   c0534:	2064 6425 2520 2064 6425 2520 0064 6f42     d %d %d %d %d.Bo
   c0544:	2074 3a23 2520 2064 6554 706d 203a 6625     t #: %d Temp: %f
   c0554:	6e00 6b61 6800 6477 4600 756f 646e 6120     .nak.hwd.Found a
   c0564:	6e20 7765 7720 7461 7265 6220 746f 4920      new water bot I
   c0574:	0044 7470 0073 505b 5455 5d53 5220 6365     D.pts.[PUTS] Rec
   c0584:	6965 6576 2064 7453 6972 676e 4320 6d6f     eived String Com
   c0594:	616d 646e 203a 7325 5b00 4e49 4f46 205d     mand: %s.[INFO] 
   c05a4:	6552 6563 7669 6465 4c20 4554 4d20 7365     Received LTE Mes
   c05b4:	6173 6567 203a 7325 4e00 7765 4220 2054     sage: %s.New BT 
   c05c4:	6f43 6d6d 6e61 3a64 0020 495b 464e 5d4f     Command: .[INFO]
   c05d4:	5220 6365 6965 6576 2064 4c42 2045 654d      Received BLE Me
   c05e4:	7373 6761 3a65 2520 0073 495b 464e 5d4f     ssage: %s.[INFO]
   c05f4:	5220 6365 6965 6576 2064 6152 7073 6562      Received Raspbe
   c0604:	7272 2079 6950 4d20 7365 6173 6567 203a     rry Pi Message: 
   c0614:	7325 4e00 7765 5820 6542 2065 6f43 6d6d     %s.New XBee Comm
   c0624:	6e61 3a64 5b00 4e49 4f46 205d 6552 6563     and:.[INFO] Rece
   c0634:	7669 6465 5820 6542 2065 654d 7373 6761     ived XBee Messag
   c0644:	3a65 2520 0073 6f46 6e75 2064 6f42 2074     e: %s.Found Bot 
   c0654:	3a23 2520 2064 6425 2520 2064 6425 2520     #: %d %d %d %d %
   c0664:	2064 6425 2520 2064 6425 202c 6573 7672     d %d %d %d, serv
   c0674:	6369 7365 203a 6425 4600 756f 646e 6e20     ices: %d.Found n
   c0684:	7765 6220 746f 203a 6425 4300 6e6f 656e     ew bot: %d.Conne
   c0694:	7463 6465 7420 206f 6f42 2074 6425 2f00     cted to Bot %d./
   c06a4:	4500 7272 726f 202c 6f63 6c75 2064 6f6e     .Error, could no
   c06b4:	2074 706f 6e65 7220 6f6f 2074 6964 6572     t open root dire
   c06c4:	7463 726f 2079 6e6f 5320 2044 6143 6472     ctory on SD Card
   c06d4:	202e 7349 6920 2074 6e69 6573 7472 6465     . Is it inserted
   c06e4:	003f 4343 2542 6464 706d 5200 7165 6575     ?.CCB%ddmp.Reque
   c06f4:	7473 6465 5320 2044 6143 6472 4420 7461     sted SD Card Dat
   c0704:	2061 7266 6d6f 4220 746f 2520 2064 764f     a from Bot %d Ov
   c0714:	7265 4220 454c 000a 7543 7272 6e65 6c74     er BLE..Currentl
   c0724:	2079 6f63 6e6e 6365 6574 2064 6f74 4220     y connected to B
   c0734:	746f 2520 2c66 6e20 6565 2064 6f74 6320     ot %f, need to c
   c0744:	6e6f 656e 7463 7420 206f 6f42 2074 6425     onnect to Bot %d
   c0754:	5300 6375 6563 7373 7566 6c6c 2079 6f63     .Successfully co
   c0764:	6e6e 6365 6574 2064 6f74 4220 746f 2520     nnected to Bot %
   c0774:	0064 7453 7261 6974 676e 6620 6c69 2065     d.Starting file 
   c0784:	7274 6e61 6673 7265 6620 6f72 206d 6f42     transfer from Bo
   c0794:	2074 6425 4600 6e69 7369 6568 2064 7274     t %d.Finished tr
   c07a4:	6e61 6673 7265 6972 676e 6620 6c69 2065     ansferring file 
   c07b4:	7266 6d6f 4220 746f 2520 0064 6552 6f63     from Bot %d.Reco
   c07c4:	6472 4200 7461 6574 7972 4f00 6666 6f6c     rd.Battery.Offlo
   c07d4:	6461 5300 6e65 7274 0079 3025 6432 3025     ad.Sentry.%02d%0
   c07e4:	6432 3025 6434 3025 6432 3025 6432 3025     2d%04d%02d%02d%0
   c07f4:	6432 5700 7461 7265 6f42 0074 4c5f 474f     2d.WaterBot._LOG
   c0804:	742e 7478 4500 7272 726f 203a 6f63 6c75     .txt.Error: coul
   c0814:	2064 6f6e 2074 6f63 6e6e 6365 2074 6f74     d not connect to
   c0824:	5320 2044 6163 6472 0021 5320 6174 7472      SD card!. Start
   c0834:	6e69 2067 6200 3234 3630 3139 2d30 6364     ing .b4206910-dc
   c0844:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c0854:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c0864:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c0874:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c0884:	3234 3630 3139 2d33 6364 6234 352d 3437     4206913-dc4b-574
   c0894:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c08a4:	6232 0030 3462 3032 3936 3431 642d 3463     2b0.b4206914-dc4
   c08b4:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c08c4:	3765 3135 3238 3062 4f00 006e 664f 0066     e75182b0.On.Off.
   c08d4:	7250 6e69 6574 2064 6948 6867 696c 6867     Printed Highligh
   c08e4:	6574 2064 654d 756e 6920 6574 206d 6977     ted Menu item wi
   c08f4:	6874 6e20 6d61 3a65 2520 0073 654d 756e     th name: %s.Menu
   c0904:	6920 6574 206d 0030 654d 756e 6920 6574      item 0.Menu ite
   c0914:	206d 6425 4300 4143 7342 6370 2542 6431     m %d.CCABspcB%1d
   c0924:	4300 4143 7342 6370 424e 4500 7272 726f     .CCABspcNB.Error
   c0934:	202c 4453 4320 7261 2064 6f4e 2074 6f77     , SD Card Not wo
   c0944:	6b72 6e69 0067 4343 2542 6364 666e 3125     rking.CCB%dcnf%1
   c0954:	0064 4343 3142 6572 0071 6554 706d 203a     d.CCB1req.Temp: 
   c0964:	3025 362e 0066 0000                         %0.6f...

000c096c <_ZTVN8particle11SPISettingsE>:
	...
   c0974:	42c9 000b 40cd 000b 40f7 000b               .B...@...@..

000c0980 <_ZTV5Timer>:
	...
   c0988:	434d 000b 43a1 000b 415d 000b               MC...C..]A..

000c0994 <_ZTV4File>:
	...
   c099c:	40f5 000b 4105 000b 4145 000b 413f 000b     .@...A..EA..?A..
   c09ac:	40cf 000b 411f 000b 4119 000b 4113 000b     .@...A...A...A..

000c09bc <_ZL4font>:
   c09bc:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c09cc:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c09dc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c09ec:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c09fc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c0a0c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c0a1c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c0a2c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c0a3c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c0a4c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c0a5c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c0a6c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c0a7c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c0a8c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c0a9c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c0aac:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c0abc:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c0acc:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c0adc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c0aec:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c0afc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c0b0c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c0b1c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c0b2c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c0b3c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c0b4c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c0b5c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c0b6c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c0b7c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c0b8c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c0b9c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c0bac:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c0bbc:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c0bcc:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c0bdc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c0bec:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c0bfc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c0c0c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c0c1c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c0c2c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c0c3c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c0c4c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c0c5c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c0c6c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c0c7c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c0c8c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c0c9c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c0cac:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c0cbc:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c0ccc:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c0cdc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c0cec:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c0cfc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c0d0c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c0d1c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c0d2c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c0d3c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c0d4c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c0d5c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c0d6c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c0d7c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c0d8c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c0d9c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c0dac:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c0dbc:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c0dcc:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c0ddc:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c0dec:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c0dfc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c0e0c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c0e1c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c0e2c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c0e3c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c0e4c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c0e5c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c0e6c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c0e7c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c0e8c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c0e9c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c0eac:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c0ebc <_ZTV12Adafruit_GFX>:
	...
   c0ecc:	8375 000b c6f9 000b 40a5 000b 7d7b 000b     u........@..{}..
   c0edc:	7d7d 000b 7daf 000b 7d8b 000b 7d9d 000b     }}...}...}...}..
   c0eec:	7cbd 000b 7d7b 000b 7fa7 000b 7fa5 000b     .|..{}..........
   c0efc:	7dc7 000b 7e05 000b 7e3f 000b 7e85 000b     .}...~..?~...~..
   c0f0c:	7ea1 000b 7f25 000b                         .~..%...

000c0f14 <_ZL12splash1_data>:
   c0f14:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   c0f24:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   c0f34:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   c0f44:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   c0f54:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   c0f64:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   c0f7c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   c0f8c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   c0f9c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   c0fac:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   c0fbc:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   c0fcc:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   c0fdc:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   c0fec:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   c0ffc:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   c100c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   c101c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   c102c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   c103c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   c104c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   c105c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   c106c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   c107c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   c108c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   c10a4:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   c10bc:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   c10cc:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   c10dc:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   c10ec:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   c10fc:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   c110c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   c111c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   c112c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   c113c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   c114c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   c115c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   c116c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   c117c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   c118c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   c119c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   c11ac:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   c11bc:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   c11cc:	fdff 5b6b 6adb c0fd                         ..k[.j..

000c11d4 <_ZL12splash2_data>:
   c11d4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c11e4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c11f4:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c1210:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c1220:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c1230:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c1240:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1250:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1260:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c1270:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c1280:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c1290:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c12a0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c12b0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c12c0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c12d0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c12e0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c12f0:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c1300:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c1310:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c1320:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c1330:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c1340:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c1350:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1368:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c1378:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c1388:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1398:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c13a8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c13b4 <_ZTV16Adafruit_SSD1306>:
	...
   c13bc:	8485 000b 849d 000b 8375 000b c6f9 000b     ........u.......
   c13cc:	84b1 000b 7d7b 000b 7d7d 000b 7daf 000b     ....{}..}}...}..
   c13dc:	7d8b 000b 7d9d 000b 7cbd 000b 7d7b 000b     .}...}...|..{}..
   c13ec:	7fa7 000b 864f 000b 8bf7 000b 8ba9 000b     ....O...........
   c13fc:	7e3f 000b 7e85 000b 7ea1 000b 7f25 000b     ?~...~...~..%...

000c140c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   c140c:	8000 e0c0 f8f0 fefc                         ........

000c1414 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   c1414:	0100 0703 1f0f 7f3f                         ......?.

000c141c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   c141c:	d5ae a880                                   ....

000c1420 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   c1420:	00d3 8d40                                   ..@.

000c1424 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   c1424:	0020 c8a1                                    ...

000c1428 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   c1428:	40db a6a4 af2e                              .@....

000c142e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   c142e:	02da 8f81                                   ....

000c1432 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   c1432:	12da                                         ...

000c1435 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   c1435:	02da                                         ...

000c1438 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   c1438:	0022 21ff 0000 0000                         "..!....

000c1440 <_ZTV16OledWingAdafruit>:
	...
   c1448:	8dbd 000b 8ddd 000b 8375 000b c6f9 000b     ........u.......
   c1458:	84b1 000b 7d7b 000b 7d7d 000b 7daf 000b     ....{}..}}...}..
   c1468:	7d8b 000b 7d9d 000b 7cbd 000b 7d7b 000b     .}...}...|..{}..
   c1478:	7fa7 000b 864f 000b 8bf7 000b 8ba9 000b     ....O...........
   c1488:	7e3f 000b 7e85 000b 7ea1 000b 7f25 000b     ?~...~...~..%...
   c1498:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   c14a8:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   c14b8:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   c14c8:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   c14d8:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   c14e8:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   c14f8:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   c1508:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   c1518:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   c1528:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   c1538:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   c1548:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   c1558:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   c1568:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   c1578:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   c1588:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   c1598:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   c15a8:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   c15b8:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   c15c8:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   c15d8:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   c15e8:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   c15f8:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   c1608:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   c1618:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   c1628:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   c1638:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   c1648:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   c1658:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   c1668:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   c1678:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   c1688:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   c1698:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   c16a8:	7463 7265 7369 6974 2e63 0000               cteristic...

000c16b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c16bc:	96d5 000b 9739 000b 98af 000b 9763 000b     ....9.......c...
   c16cc:	96d9 000b                                   ....

000c16d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c16d8:	96d1 000b 9747 000b 96d3 000b 9769 000b     ....G.......i...
   c16e8:	96f9 000b                                   ....

000c16ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c16f4:	96cf 000b 9755 000b a409 000b 976f 000b     ....U.......o...
   c1704:	9719 000b                                   ....

000c1708 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1714:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1724:	0000 0000                                   ....

000c1728 <_ZTVN5spark13CellularClassE>:
	...
   c1730:	bdab 000b bda1 000b bd97 000b bd4d 000b     ............M...
   c1740:	bd8b 000b bd7f 000b c5d5 000b c5dd 000b     ................
   c1750:	bd73 000b bd6b 000b bd61 000b bd57 000b     s...k...a...W...
   c1760:	c60d 000b                                   ....

000c1764 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c176c:	bde5 000b bdeb 000b be29 000b bdf9 000b     ........).......
   c177c:	bde7 000b                                   ....

000c1780 <_ZTVN5spark13EthernetClassE>:
	...
   c1788:	c373 000b c369 000b c35f 000b c355 000b     s...i..._...U...
   c1798:	c349 000b c33d 000b c5d5 000b c5dd 000b     I...=...........
   c17a8:	c331 000b c329 000b c31f 000b c315 000b     1...)...........
   c17b8:	c60d 000b                                   ....

000c17bc <_ZTV7TwoWire>:
	...
   c17c4:	c391 000b c3db 000b c3b3 000b c393 000b     ................
   c17d4:	c3bb 000b c3c3 000b c3cb 000b c3d3 000b     ................

000c17e4 <_ZTV9IPAddress>:
	...
   c17ec:	c4a5 000b c495 000b c497 000b 7061 0070     ............app.

000c17fc <_ZTVN5spark12NetworkClassE>:
	...
   c1804:	c595 000b c59f 000b c5a9 000b c5b3 000b     ................
   c1814:	c5bd 000b c5c9 000b c5d5 000b c5dd 000b     ................
   c1824:	c5e5 000b c5f1 000b c5f9 000b c603 000b     ................
   c1834:	c60d 000b                                   ....

000c1838 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1838:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c1848:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c1858:	6d69 0065                                   ime.

000c185c <_ZTV11USARTSerial>:
	...
   c1864:	cdc5 000b ce31 000b ce09 000b c6f9 000b     ....1...........
   c1874:	cdd9 000b cdf5 000b cde7 000b ce03 000b     ................
   c1884:	cdc7 000b cdcb 000b                         ........

000c188c <_ZTV9USBSerial>:
	...
   c1894:	ce7d 000b cee5 000b cebb 000b c6f9 000b     }...............
   c18a4:	cead 000b ce7f 000b ce8f 000b cedf 000b     ................
   c18b4:	ce9f 000b ce77 000b                         ....w...

000c18bc <_ZSt7nothrow>:
	...

000c18bd <_ZTSSt19_Sp_make_shared_tag>:
   c18bd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c18cd:	6572 5f64 6174 0067 0000                     red_tag....

000c18d8 <_ZTISt19_Sp_make_shared_tag>:
   c18d8:	198c 000c 18bd 000c 6f6e 2074 6e65 756f     ........not enou
   c18e8:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c18f8:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c1908:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c1918:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c1928:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c1938:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c1948:	3000 3231 3433 3635 3837 0039               .0123456789.

000c1954 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c1954:	19ec 000c 1960 000c 1a10 000c               ....`.......

000c1960 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c1960:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c1970:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1980:	0045 0000                                   E...

000c1984 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c1984:	0000 0000 1954 000c d465 000b d479 000b     ....T...e...y...
   c1994:	d60d 000b d60d 000b d4e3 000b d427 000b     ............'...
   c19a4:	d4cb 000b d48d 000b d459 000b               ........Y...

000c19b0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c19b0:	19ec 000c 19bc 000c 1954 000c               ........T...

000c19bc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c19bc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c19cc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c19dc:	666e 456f 0000 0000                         nfoE....

000c19e4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c19e4:	0000 0000 19b0 000c d50d 000b d521 000b     ............!...
   c19f4:	d60d 000b d60d 000b d4e3 000b d427 000b     ............'...
   c1a04:	d5e1 000b d56d 000b d535 000b               ....m...5...

000c1a10 <_ZTISt9type_info>:
   c1a10:	198c 000c 1a18 000c                         ........

000c1a18 <_ZTSSt9type_info>:
   c1a18:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c1a28:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c1a38:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c1a48:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1a58:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1a68:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1a78:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1a88:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c1a98:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c1aa4 <fpi.1>:
   c1aa4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1ab4:	0000 0000                                   ....

000c1ab8 <fpinan.0>:
   c1ab8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c1ad0 <tinytens>:
   c1ad0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c1ae0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c1af0:	6f43 64ac 0628 1168                         Co.d(.h.

000c1af8 <_ctype_>:
   c1af8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c1b08:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c1b18:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1b28:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1b38:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1b48:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1b58:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1b68:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c1b78:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c1bf8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c1c08:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c1c18:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c1c28:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c1c38:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c1c48:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c1c58:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c1c68:	632e 0000                                   .c..

000c1c6c <_C_numeric_locale>:
   c1c6c:	16b1 000c 071b 000c daf8 2003 0043 4f50     ........... C.PO
   c1c7c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c1c8c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1c9c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1cac:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1cbc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1ccc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c1cdc:	0000 0000                                   ....

000c1ce0 <__mprec_bigtens>:
   c1ce0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c1cf0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c1d00:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c1d08 <__mprec_tens>:
   c1d08:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c1d18:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c1d28:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c1d38:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c1d48:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c1d58:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c1d68:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c1d78:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c1d88:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c1d98:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c1da8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c1db8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c1dc8:	9db4 79d9 7843 44ea                         ...yCx.D

000c1dd0 <p05.0>:
   c1dd0:	0005 0000 0019 0000 007d 0000               ........}...

000c1ddc <link_const_variable_data_end>:
   c1ddc:	000b5d25 	.word	0x000b5d25
   c1de0:	000bbd3d 	.word	0x000bbd3d
   c1de4:	000bbdb5 	.word	0x000bbdb5
   c1de8:	000bc37d 	.word	0x000bc37d
   c1dec:	000bc585 	.word	0x000bc585
   c1df0:	000bc6e5 	.word	0x000bc6e5
   c1df4:	000bc815 	.word	0x000bc815
   c1df8:	000bcc0d 	.word	0x000bcc0d
   c1dfc:	000bcdb1 	.word	0x000bcdb1
