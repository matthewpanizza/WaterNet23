
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000dda0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1dc0  000c1dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1de4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da88  000c1de8  0002da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b88  2003dc68  2003dc68  0003dc68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c1fc8  000c1fc8  00031fc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c1ff0  000c1ff0  00031ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001c316d  00000000  00000000  00031ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001dfdc  00000000  00000000  001f5161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00057ef3  00000000  00000000  0021313d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b18  00000000  00000000  0026b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000dfe0  00000000  00000000  0026eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004c146  00000000  00000000  0027cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0006b1dd  00000000  00000000  002c8c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b949  00000000  00000000  00333e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bc88  00000000  00000000  0047f794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 ffbe 	bl	bdfb2 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 ffe0 	bl	be002 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da88 	.word	0x2003da88
   b404c:	000c1de8 	.word	0x000c1de8
   b4050:	2003dc68 	.word	0x2003dc68
   b4054:	2003dc68 	.word	0x2003dc68
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f008 fa23 	bl	bc4ac <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1d9c 	.word	0x000c1d9c
   b4080:	000c1dc0 	.word	0x000c1dc0

000b4084 <module_user_setup>:
   b4084:	f001 bcd6 	b.w	b5a34 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f002 f987 	bl	b639c <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f008 b9c3 	b.w	bc41c <_post_loop>

000b4096 <_Znwj>:
   b4096:	f005 ba53 	b.w	b9540 <malloc>

000b409a <_Znaj>:
   b409a:	f005 ba51 	b.w	b9540 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f005 ba57 	b.w	b9550 <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 f964 	bl	b9378 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8ea1 	.word	0x000b8ea1
   b40b8:	000c0138 	.word	0x000c0138

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b01      	ldr	r3, [pc, #4]	; (b40f0 <_Z12actionTimer5v+0x8>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40ee:	4770      	bx	lr
   b40f0:	2003dedc 	.word	0x2003dedc

000b40f4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f4:	4770      	bx	lr

000b40f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40f6:	b510      	push	{r4, lr}
  }
   b40f8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40fa:	4604      	mov	r4, r0
  }
   b40fc:	f7ff ffcf 	bl	b409e <_ZdlPvj>
   b4100:	4620      	mov	r0, r4
   b4102:	bd10      	pop	{r4, pc}

000b4104 <_ZN4FileD0Ev>:
   b4104:	b510      	push	{r4, lr}
   b4106:	2134      	movs	r1, #52	; 0x34
   b4108:	4604      	mov	r4, r0
   b410a:	f7ff ffc8 	bl	b409e <_ZdlPvj>
   b410e:	4620      	mov	r0, r4
   b4110:	bd10      	pop	{r4, pc}

000b4112 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b4112:	3010      	adds	r0, #16
   b4114:	f003 bc1a 	b.w	b794c <_ZN7FatFile4syncEv>

000b4118 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4118:	3010      	adds	r0, #16
   b411a:	f003 bb38 	b.w	b778e <_ZN7FatFile4peekEv>

000b411e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b411e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4120:	2201      	movs	r2, #1
   b4122:	f10d 0107 	add.w	r1, sp, #7
   b4126:	3010      	adds	r0, #16
   b4128:	f003 fa83 	bl	b7632 <_ZN7FatFile4readEPvj>
   b412c:	2801      	cmp	r0, #1
   b412e:	bf0c      	ite	eq
   b4130:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4134:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4138:	b003      	add	sp, #12
   b413a:	f85d fb04 	ldr.w	pc, [sp], #4

000b413e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b413e:	3010      	adds	r0, #16
   b4140:	f003 bc9e 	b.w	b7a80 <_ZN7FatFile5writeEPKvj>

000b4144 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4144:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4146:	2201      	movs	r2, #1
   b4148:	f88d 1007 	strb.w	r1, [sp, #7]
   b414c:	3010      	adds	r0, #16
   b414e:	f10d 0107 	add.w	r1, sp, #7
   b4152:	f003 fc95 	bl	b7a80 <_ZN7FatFile5writeEPKvj>
  }
   b4156:	b003      	add	sp, #12
   b4158:	f85d fb04 	ldr.w	pc, [sp], #4

000b415c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b415c:	6943      	ldr	r3, [r0, #20]
   b415e:	b113      	cbz	r3, b4166 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4160:	6983      	ldr	r3, [r0, #24]
   b4162:	300c      	adds	r0, #12
   b4164:	4718      	bx	r3
            callback();
        }
    }
   b4166:	4770      	bx	lr

000b4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b416a:	2100      	movs	r1, #0
   b416c:	4604      	mov	r4, r0
   b416e:	4608      	mov	r0, r1
   b4170:	f004 ff7a 	bl	b9068 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4176:	4620      	mov	r0, r4
   b4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b417c:	f004 ff8c 	bl	b9098 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4182:	b10c      	cbz	r4, b4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4184:	2301      	movs	r3, #1
   b4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4188:	2100      	movs	r1, #0
   b418a:	2001      	movs	r0, #1
   b418c:	f004 ff6c 	bl	b9068 <os_thread_scheduling>
            }
        }
        if (t) {
   b4190:	b12c      	cbz	r4, b419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4192:	6823      	ldr	r3, [r4, #0]
   b4194:	4620      	mov	r0, r4
   b4196:	689b      	ldr	r3, [r3, #8]
   b4198:	4798      	blx	r3
            t->running = false;
   b419a:	2300      	movs	r3, #0
   b419c:	7123      	strb	r3, [r4, #4]
        }
    }
   b419e:	b002      	add	sp, #8
   b41a0:	bd10      	pop	{r4, pc}
	...

000b41a4 <_Z10entHandlerv>:
    MenuItems.push_back(sentryToggle);

    SelectedItem = &MenuItems.at(menuItem);
}

void entHandler(){
   b41a4:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41a6:	4c0e      	ldr	r4, [pc, #56]	; (b41e0 <_Z10entHandlerv+0x3c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a8:	f004 fe8a 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
   b41ac:	6823      	ldr	r3, [r4, #0]
   b41ae:	1ac0      	subs	r0, r0, r3
   b41b0:	2863      	cmp	r0, #99	; 0x63
   b41b2:	d913      	bls.n	b41dc <_Z10entHandlerv+0x38>
    Serial.println("Enter trigger");
   b41b4:	f008 fd1a 	bl	bcbec <_Z16_fetch_usbserialv>
   b41b8:	490a      	ldr	r1, [pc, #40]	; (b41e4 <_Z10entHandlerv+0x40>)
   b41ba:	f007 ffaa 	bl	bc112 <_ZN5Print7printlnEPKc>
   b41be:	f004 fe7f 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
    
    redrawMenu = true;  
   b41c2:	4b09      	ldr	r3, [pc, #36]	; (b41e8 <_Z10entHandlerv+0x44>)
    selectingBots = !selectingBots;
   b41c4:	4909      	ldr	r1, [pc, #36]	; (b41ec <_Z10entHandlerv+0x48>)
    debounceTime = millis();
   b41c6:	6020      	str	r0, [r4, #0]
    redrawMenu = true;  
   b41c8:	2201      	movs	r2, #1
   b41ca:	701a      	strb	r2, [r3, #0]
    selectingBots = !selectingBots;
   b41cc:	780b      	ldrb	r3, [r1, #0]
   b41ce:	4053      	eors	r3, r2
   b41d0:	700b      	strb	r3, [r1, #0]
    if(modifiedValue) updateControl = true;
   b41d2:	4b07      	ldr	r3, [pc, #28]	; (b41f0 <_Z10entHandlerv+0x4c>)
   b41d4:	781b      	ldrb	r3, [r3, #0]
   b41d6:	b10b      	cbz	r3, b41dc <_Z10entHandlerv+0x38>
   b41d8:	4b06      	ldr	r3, [pc, #24]	; (b41f4 <_Z10entHandlerv+0x50>)
   b41da:	701a      	strb	r2, [r3, #0]
}
   b41dc:	bd10      	pop	{r4, pc}
   b41de:	bf00      	nop
   b41e0:	2003dd50 	.word	0x2003dd50
   b41e4:	000c014d 	.word	0x000c014d
   b41e8:	2003da88 	.word	0x2003da88
   b41ec:	2003da89 	.word	0x2003da89
   b41f0:	2003ddf7 	.word	0x2003ddf7
   b41f4:	2003e636 	.word	0x2003e636

000b41f8 <_Z8jHandlerv>:
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
    redrawMenu = true;  
}

void jHandler(){
   b41f8:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41fa:	4c09      	ldr	r4, [pc, #36]	; (b4220 <_Z8jHandlerv+0x28>)
   b41fc:	f004 fe60 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
   b4200:	6823      	ldr	r3, [r4, #0]
   b4202:	1ac0      	subs	r0, r0, r3
   b4204:	2863      	cmp	r0, #99	; 0x63
   b4206:	d909      	bls.n	b421c <_Z8jHandlerv+0x24>
   b4208:	f004 fe5a 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b420c:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b420e:	f008 fced 	bl	bcbec <_Z16_fetch_usbserialv>
   b4212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b4216:	4903      	ldr	r1, [pc, #12]	; (b4224 <_Z8jHandlerv+0x2c>)
   b4218:	f007 bf7b 	b.w	bc112 <_ZN5Print7printlnEPKc>
   b421c:	bd10      	pop	{r4, pc}
   b421e:	bf00      	nop
   b4220:	2003dd50 	.word	0x2003dd50
   b4224:	000c015b 	.word	0x000c015b

000b4228 <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b4228:	4b0b      	ldr	r3, [pc, #44]	; (b4258 <_Z13actionTimer60v+0x30>)
   b422a:	e9d3 3000 	ldrd	r3, r0, [r3]
    bool reqLTEStatus = false;
   b422e:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4230:	4283      	cmp	r3, r0
   b4232:	d005      	beq.n	b4240 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4234:	6b19      	ldr	r1, [r3, #48]	; 0x30
            reqLTEStatus = true;
   b4236:	2925      	cmp	r1, #37	; 0x25
   b4238:	bf28      	it	cs
   b423a:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b423c:	3334      	adds	r3, #52	; 0x34
      {
	++_M_current;
	return *this;
   b423e:	e7f7      	b.n	b4230 <_Z13actionTimer60v+0x8>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b4240:	b142      	cbz	r2, b4254 <_Z13actionTimer60v+0x2c>
   b4242:	4a06      	ldr	r2, [pc, #24]	; (b425c <_Z13actionTimer60v+0x34>)
   b4244:	7813      	ldrb	r3, [r2, #0]
   b4246:	2b18      	cmp	r3, #24
   b4248:	d804      	bhi.n	b4254 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b424a:	3301      	adds	r3, #1
   b424c:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b424e:	4b04      	ldr	r3, [pc, #16]	; (b4260 <_Z13actionTimer60v+0x38>)
   b4250:	2201      	movs	r2, #1
   b4252:	701a      	strb	r2, [r3, #0]
}
   b4254:	4770      	bx	lr
   b4256:	bf00      	nop
   b4258:	2003dcb4 	.word	0x2003dcb4
   b425c:	2003dc88 	.word	0x2003dc88
   b4260:	2003e635 	.word	0x2003e635

000b4264 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4264:	2a01      	cmp	r2, #1
   b4266:	d102      	bne.n	b426e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4268:	6001      	str	r1, [r0, #0]
      }
   b426a:	2000      	movs	r0, #0
   b426c:	4770      	bx	lr
	  switch (__op)
   b426e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4270:	bf04      	itt	eq
   b4272:	680b      	ldreq	r3, [r1, #0]
   b4274:	6003      	streq	r3, [r0, #0]
	      break;
   b4276:	e7f8      	b.n	b426a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4278 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4278:	6803      	ldr	r3, [r0, #0]
   b427a:	4718      	bx	r3

000b427c <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b427c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b427e:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4280:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4282:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4284:	b130      	cbz	r0, b4294 <_ZN5Timer5startEj.isra.0+0x18>
   b4286:	2300      	movs	r3, #0
   b4288:	e9cd 3300 	strd	r3, r3, [sp]
   b428c:	461a      	mov	r2, r3
   b428e:	2102      	movs	r1, #2
   b4290:	f004 ff0a 	bl	b90a8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4294:	68a0      	ldr	r0, [r4, #8]
   b4296:	b130      	cbz	r0, b42a6 <_ZN5Timer5startEj.isra.0+0x2a>
   b4298:	2300      	movs	r3, #0
   b429a:	e9cd 5300 	strd	r5, r3, [sp]
   b429e:	461a      	mov	r2, r3
   b42a0:	4619      	mov	r1, r3
   b42a2:	f004 ff01 	bl	b90a8 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42a6:	b003      	add	sp, #12
   b42a8:	bd30      	pop	{r4, r5, pc}

000b42aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42aa:	b40e      	push	{r1, r2, r3}
   b42ac:	b503      	push	{r0, r1, lr}
   b42ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42b8:	f007 ff53 	bl	bc162 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42bc:	b002      	add	sp, #8
   b42be:	f85d eb04 	ldr.w	lr, [sp], #4
   b42c2:	b003      	add	sp, #12
   b42c4:	4770      	bx	lr
	...

000b42c8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42ca:	4604      	mov	r4, r0
   b42cc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42ce:	7922      	ldrb	r2, [r4, #4]
   b42d0:	68a3      	ldr	r3, [r4, #8]
   b42d2:	b132      	cbz	r2, b42e2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42d4:	b9a3      	cbnz	r3, b4300 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42d6:	490b      	ldr	r1, [pc, #44]	; (b4304 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42d8:	b002      	add	sp, #8
   b42da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42de:	f007 bf05 	b.w	bc0ec <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42e2:	4a09      	ldr	r2, [pc, #36]	; (b4308 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b42e4:	7b26      	ldrb	r6, [r4, #12]
   b42e6:	4d09      	ldr	r5, [pc, #36]	; (b430c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b42e8:	4909      	ldr	r1, [pc, #36]	; (b4310 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b42ea:	7b64      	ldrb	r4, [r4, #13]
   b42ec:	2e01      	cmp	r6, #1
   b42ee:	bf18      	it	ne
   b42f0:	4629      	movne	r1, r5
   b42f2:	e9cd 1400 	strd	r1, r4, [sp]
   b42f6:	4907      	ldr	r1, [pc, #28]	; (b4314 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b42f8:	f7ff ffd7 	bl	b42aa <_ZN5Print6printfEPKcz>
  }
   b42fc:	b002      	add	sp, #8
   b42fe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4300:	4a05      	ldr	r2, [pc, #20]	; (b4318 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4302:	e7ef      	b.n	b42e4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4304:	000c017d 	.word	0x000c017d
   b4308:	000c0674 	.word	0x000c0674
   b430c:	000c0179 	.word	0x000c0179
   b4310:	000c0175 	.word	0x000c0175
   b4314:	000c0193 	.word	0x000c0193
   b4318:	000c016c 	.word	0x000c016c

000b431c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b431c:	b40e      	push	{r1, r2, r3}
   b431e:	b503      	push	{r0, r1, lr}
   b4320:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4322:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4324:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4328:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b432a:	f007 ff1a 	bl	bc162 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b432e:	b002      	add	sp, #8
   b4330:	f85d eb04 	ldr.w	lr, [sp], #4
   b4334:	b003      	add	sp, #12
   b4336:	4770      	bx	lr

000b4338 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4338:	b510      	push	{r4, lr}
      if (_M_manager)
   b433a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b433c:	4604      	mov	r4, r0
      if (_M_manager)
   b433e:	b113      	cbz	r3, b4346 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4340:	2203      	movs	r2, #3
   b4342:	4601      	mov	r1, r0
   b4344:	4798      	blx	r3
    }
   b4346:	4620      	mov	r0, r4
   b4348:	bd10      	pop	{r4, pc}
	...

000b434c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b434c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b434e:	4b13      	ldr	r3, [pc, #76]	; (b439c <_ZN5TimerD1Ev+0x50>)
   b4350:	6003      	str	r3, [r0, #0]
   b4352:	4604      	mov	r4, r0
        if (handle) {
   b4354:	6880      	ldr	r0, [r0, #8]
   b4356:	b1c8      	cbz	r0, b438c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4358:	2500      	movs	r5, #0
   b435a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b435e:	e9cd 3500 	strd	r3, r5, [sp]
   b4362:	2102      	movs	r1, #2
   b4364:	462b      	mov	r3, r5
   b4366:	462a      	mov	r2, r5
   b4368:	f004 fe9e 	bl	b90a8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b436c:	68a0      	ldr	r0, [r4, #8]
   b436e:	4629      	mov	r1, r5
   b4370:	f004 feca 	bl	b9108 <os_timer_set_id>
            while (running) {
   b4374:	7923      	ldrb	r3, [r4, #4]
   b4376:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b437a:	b113      	cbz	r3, b4382 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b437c:	f004 fe6c 	bl	b9058 <os_thread_yield>
            while (running) {
   b4380:	e7f8      	b.n	b4374 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4382:	68a0      	ldr	r0, [r4, #8]
   b4384:	4629      	mov	r1, r5
   b4386:	f004 fe7f 	bl	b9088 <os_timer_destroy>
            handle = nullptr;
   b438a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b438c:	f104 000c 	add.w	r0, r4, #12
   b4390:	f7ff ffd2 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    }
   b4394:	4620      	mov	r0, r4
   b4396:	b003      	add	sp, #12
   b4398:	bd30      	pop	{r4, r5, pc}
   b439a:	bf00      	nop
   b439c:	000c08e0 	.word	0x000c08e0

000b43a0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43a0:	b510      	push	{r4, lr}
   b43a2:	4604      	mov	r4, r0
    }
   b43a4:	f7ff ffd2 	bl	b434c <_ZN5TimerD1Ev>
   b43a8:	4620      	mov	r0, r4
   b43aa:	211c      	movs	r1, #28
   b43ac:	f7ff fe77 	bl	b409e <_ZdlPvj>
   b43b0:	4620      	mov	r0, r4
   b43b2:	bd10      	pop	{r4, pc}

000b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b43b4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b43b6:	6843      	ldr	r3, [r0, #4]
   b43b8:	3b01      	subs	r3, #1
    {
   b43ba:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b43bc:	6043      	str	r3, [r0, #4]
   b43be:	b963      	cbnz	r3, b43da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b43c0:	6803      	ldr	r3, [r0, #0]
   b43c2:	689b      	ldr	r3, [r3, #8]
   b43c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43c6:	68a3      	ldr	r3, [r4, #8]
   b43c8:	3b01      	subs	r3, #1
   b43ca:	60a3      	str	r3, [r4, #8]
   b43cc:	b92b      	cbnz	r3, b43da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b43ce:	6823      	ldr	r3, [r4, #0]
   b43d0:	4620      	mov	r0, r4
   b43d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   b43d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b43d8:	4718      	bx	r3
    }
   b43da:	bd10      	pop	{r4, pc}

000b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43de:	468c      	mov	ip, r1
   b43e0:	2500      	movs	r5, #0
   b43e2:	4914      	ldr	r1, [pc, #80]	; (b4434 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b43e4:	7105      	strb	r5, [r0, #4]
   b43e6:	4604      	mov	r4, r0
   b43e8:	6085      	str	r5, [r0, #8]
   b43ea:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43ec:	e892 0003 	ldmia.w	r2, {r0, r1}
   b43f0:	b085      	sub	sp, #20
   b43f2:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b43f4:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43f8:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b43fc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4400:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4404:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4408:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b440c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b440e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4410:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4412:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4414:	6095      	str	r5, [r2, #8]
   b4416:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4418:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b441a:	e9cd 3500 	strd	r3, r5, [sp]
   b441e:	4a06      	ldr	r2, [pc, #24]	; (b4438 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4420:	4623      	mov	r3, r4
   b4422:	4661      	mov	r1, ip
   b4424:	f104 0008 	add.w	r0, r4, #8
   b4428:	f004 fe26 	bl	b9078 <os_timer_create>
    }
   b442c:	4620      	mov	r0, r4
   b442e:	b005      	add	sp, #20
   b4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4432:	bf00      	nop
   b4434:	000c08e0 	.word	0x000c08e0
   b4438:	000b4169 	.word	0x000b4169

000b443c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b443c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b443e:	460a      	mov	r2, r1
   b4440:	4901      	ldr	r1, [pc, #4]	; (b4448 <_ZN7FatFile4openEPKci+0xc>)
   b4442:	6809      	ldr	r1, [r1, #0]
   b4444:	f003 babf 	b.w	b79c6 <_ZN7FatFile4openEPS_PKci>
   b4448:	2003e648 	.word	0x2003e648

000b444c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b444c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b444e:	b095      	sub	sp, #84	; 0x54
   b4450:	4604      	mov	r4, r0
   b4452:	af00      	add	r7, sp, #0
   b4454:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4456:	221e      	movs	r2, #30
   b4458:	2100      	movs	r1, #0
   b445a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b445e:	f009 fdd0 	bl	be002 <memset>
    memcpy(fileCommand,data,8);
   b4462:	6820      	ldr	r0, [r4, #0]
   b4464:	6861      	ldr	r1, [r4, #4]
   b4466:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b446a:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b446c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b4470:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b4472:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b4474:	d168      	bne.n	b4548 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b4476:	493e      	ldr	r1, [pc, #248]	; (b4570 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b4478:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b447c:	f009 fe45 	bl	be10a <strcmp>
   b4480:	2800      	cmp	r0, #0
   b4482:	d13e      	bne.n	b4502 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b4484:	483b      	ldr	r0, [pc, #236]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4486:	7c03      	ldrb	r3, [r0, #16]
   b4488:	b113      	cbz	r3, b4490 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b448a:	3010      	adds	r0, #16
   b448c:	f003 fa94 	bl	b79b8 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b4490:	4623      	mov	r3, r4
   b4492:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4496:	f104 0520 	add.w	r5, r4, #32
   b449a:	6818      	ldr	r0, [r3, #0]
   b449c:	6859      	ldr	r1, [r3, #4]
   b449e:	4614      	mov	r4, r2
   b44a0:	c403      	stmia	r4!, {r0, r1}
   b44a2:	3308      	adds	r3, #8
   b44a4:	42ab      	cmp	r3, r5
   b44a6:	4622      	mov	r2, r4
   b44a8:	d1f7      	bne.n	b449a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b44aa:	6818      	ldr	r0, [r3, #0]
   b44ac:	6020      	str	r0, [r4, #0]
   b44ae:	889b      	ldrh	r3, [r3, #4]
   b44b0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b44b2:	221e      	movs	r2, #30
   b44b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b44b8:	482f      	ldr	r0, [pc, #188]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44ba:	f009 fe72 	bl	be1a2 <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44be:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b44c0:	4a2d      	ldr	r2, [pc, #180]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44c2:	492e      	ldr	r1, [pc, #184]	; (b457c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44c4:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b44c6:	1d38      	adds	r0, r7, #4
   b44c8:	f003 fa7d 	bl	b79c6 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b44cc:	b148      	cbz	r0, b44e2 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b44ce:	f008 fb8d 	bl	bcbec <_Z16_fetch_usbserialv>
   b44d2:	492b      	ldr	r1, [pc, #172]	; (b4580 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b44d4:	4a28      	ldr	r2, [pc, #160]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44d6:	f7ff ff21 	bl	b431c <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b44da:	4927      	ldr	r1, [pc, #156]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44dc:	4827      	ldr	r0, [pc, #156]	; (b457c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b44de:	f003 fabe 	bl	b7a5e <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b44e2:	f008 fb83 	bl	bcbec <_Z16_fetch_usbserialv>
   b44e6:	4a24      	ldr	r2, [pc, #144]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44e8:	4926      	ldr	r1, [pc, #152]	; (b4584 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b44ea:	f7ff ff17 	bl	b431c <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b44ee:	4922      	ldr	r1, [pc, #136]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44f0:	4825      	ldr	r0, [pc, #148]	; (b4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b44f2:	f244 2202 	movw	r2, #16898	; 0x4202
   b44f6:	f7ff ffa1 	bl	b443c <_ZN7FatFile4openEPKci>
}
   b44fa:	3754      	adds	r7, #84	; 0x54
   b44fc:	46b5      	mov	sp, r6
   b44fe:	46bd      	mov	sp, r7
   b4500:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4502:	4922      	ldr	r1, [pc, #136]	; (b458c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4504:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4508:	f009 fdff 	bl	be10a <strcmp>
   b450c:	b968      	cbnz	r0, b452a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b450e:	f008 fb6d 	bl	bcbec <_Z16_fetch_usbserialv>
   b4512:	4a19      	ldr	r2, [pc, #100]	; (b4578 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4514:	491e      	ldr	r1, [pc, #120]	; (b4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4516:	f7ff ff01 	bl	b431c <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b451a:	4b16      	ldr	r3, [pc, #88]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b451c:	7c1b      	ldrb	r3, [r3, #16]
   b451e:	2b00      	cmp	r3, #0
   b4520:	d0eb      	beq.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4522:	4819      	ldr	r0, [pc, #100]	; (b4588 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4524:	f003 fa48 	bl	b79b8 <_ZN7FatFile5closeEv>
   b4528:	e7e7      	b.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b452a:	491a      	ldr	r1, [pc, #104]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b452c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4530:	f009 fdeb 	bl	be10a <strcmp>
   b4534:	b940      	cbnz	r0, b4548 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4536:	f008 fb59 	bl	bcbec <_Z16_fetch_usbserialv>
   b453a:	4917      	ldr	r1, [pc, #92]	; (b4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b453c:	f007 fde9 	bl	bc112 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4540:	4b16      	ldr	r3, [pc, #88]	; (b459c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4542:	2201      	movs	r2, #1
   b4544:	701a      	strb	r2, [r3, #0]
   b4546:	e7e8      	b.n	b451a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4548:	1deb      	adds	r3, r5, #7
   b454a:	f023 0307 	bic.w	r3, r3, #7
   b454e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4552:	462a      	mov	r2, r5
   b4554:	4621      	mov	r1, r4
   b4556:	4668      	mov	r0, sp
   b4558:	f009 fd2b 	bl	bdfb2 <memcpy>
    myFile.print(dataStr);
   b455c:	4669      	mov	r1, sp
   b455e:	4805      	ldr	r0, [pc, #20]	; (b4574 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b4560:	f007 fdc4 	bl	bc0ec <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b4564:	f008 fb42 	bl	bcbec <_Z16_fetch_usbserialv>
   b4568:	4669      	mov	r1, sp
   b456a:	f007 fdd2 	bl	bc112 <_ZN5Print7printlnEPKc>
   b456e:	e7c4      	b.n	b44fa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4570:	000c01b0 	.word	0x000c01b0
   b4574:	2003ddf8 	.word	0x2003ddf8
   b4578:	2003de2c 	.word	0x2003de2c
   b457c:	2003e5ec 	.word	0x2003e5ec
   b4580:	000c01b9 	.word	0x000c01b9
   b4584:	000c01ec 	.word	0x000c01ec
   b4588:	2003de08 	.word	0x2003de08
   b458c:	000c0209 	.word	0x000c0209
   b4590:	000c0212 	.word	0x000c0212
   b4594:	000c022a 	.word	0x000c022a
   b4598:	000c0233 	.word	0x000c0233
   b459c:	2003de4a 	.word	0x2003de4a

000b45a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45a0:	b530      	push	{r4, r5, lr}
   b45a2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b45a4:	4b1b      	ldr	r3, [pc, #108]	; (b4614 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b45a6:	9300      	str	r3, [sp, #0]
   b45a8:	7913      	ldrb	r3, [r2, #4]
   b45aa:	f88d 3004 	strb.w	r3, [sp, #4]
   b45ae:	6893      	ldr	r3, [r2, #8]
   b45b0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45b2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b45b6:	8993      	ldrh	r3, [r2, #12]
   b45b8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45bc:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45be:	460a      	mov	r2, r1
   b45c0:	466b      	mov	r3, sp
   b45c2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b45c6:	4628      	mov	r0, r5
   b45c8:	f003 fd96 	bl	b80f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b45cc:	b910      	cbnz	r0, b45d4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b45ce:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b45d0:	b005      	add	sp, #20
   b45d2:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b45d4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b45d6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b45da:	4628      	mov	r0, r5
   b45dc:	f003 f9ec 	bl	b79b8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b45e0:	2101      	movs	r1, #1
   b45e2:	4620      	mov	r0, r4
   b45e4:	f003 fc32 	bl	b7e4c <_ZN9FatVolume4initEh>
   b45e8:	4601      	mov	r1, r0
   b45ea:	b168      	cbz	r0, b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b45ec:	4621      	mov	r1, r4
   b45ee:	4628      	mov	r0, r5
   b45f0:	f003 f819 	bl	b7626 <_ZN7FatFile8openRootEP9FatVolume>
   b45f4:	2800      	cmp	r0, #0
   b45f6:	d0ea      	beq.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b45f8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b45fc:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4600:	d0e5      	beq.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4602:	4b05      	ldr	r3, [pc, #20]	; (b4618 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4604:	601d      	str	r5, [r3, #0]
    return true;
   b4606:	e7e3      	b.n	b45d0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4608:	4620      	mov	r0, r4
   b460a:	f003 fc1f 	bl	b7e4c <_ZN9FatVolume4initEh>
   b460e:	2800      	cmp	r0, #0
   b4610:	d1ec      	bne.n	b45ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4612:	e7dc      	b.n	b45ce <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4614:	000c08cc 	.word	0x000c08cc
   b4618:	2003e648 	.word	0x2003e648

000b461c <_ZN8WaterBotC1Ev>:
class WaterBot{
   b461c:	2200      	movs	r2, #0
   b461e:	7202      	strb	r2, [r0, #8]
   b4620:	4a05      	ldr	r2, [pc, #20]	; (b4638 <_ZN8WaterBotC1Ev+0x1c>)
   b4622:	60c2      	str	r2, [r0, #12]
   b4624:	6102      	str	r2, [r0, #16]
   b4626:	2200      	movs	r2, #0
   b4628:	6142      	str	r2, [r0, #20]
   b462a:	6182      	str	r2, [r0, #24]
   b462c:	61c2      	str	r2, [r0, #28]
   b462e:	6202      	str	r2, [r0, #32]
   b4630:	6242      	str	r2, [r0, #36]	; 0x24
   b4632:	6282      	str	r2, [r0, #40]	; 0x28
   b4634:	62c2      	str	r2, [r0, #44]	; 0x2c
   b4636:	4770      	bx	lr
   b4638:	c479c000 	.word	0xc479c000

000b463c <_Z9setupXBeev>:
void setupXBee(){
   b463c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b463e:	f008 fd8b 	bl	bd158 <_Z22__fetch_global_Serial1v>
   b4642:	4908      	ldr	r1, [pc, #32]	; (b4664 <_Z9setupXBeev+0x28>)
   b4644:	f7ff fe31 	bl	b42aa <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4648:	2014      	movs	r0, #20
   b464a:	f007 febb 	bl	bc3c4 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b464e:	f008 fd83 	bl	bd158 <_Z22__fetch_global_Serial1v>
   b4652:	4905      	ldr	r1, [pc, #20]	; (b4668 <_Z9setupXBeev+0x2c>)
   b4654:	f7ff fe29 	bl	b42aa <_ZN5Print6printfEPKcz>
}
   b4658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b465c:	2014      	movs	r0, #20
   b465e:	f007 beb1 	b.w	bc3c4 <delay>
   b4662:	bf00      	nop
   b4664:	000c0673 	.word	0x000c0673
   b4668:	000c0886 	.word	0x000c0886

000b466c <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b466c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4670:	b084      	sub	sp, #16
   b4672:	af02      	add	r7, sp, #8
   b4674:	4680      	mov	r8, r0
   b4676:	4691      	mov	r9, r2
   b4678:	461e      	mov	r6, r3
   b467a:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b467c:	f009 fd75 	bl	be16a <strlen>
   b4680:	3009      	adds	r0, #9
   b4682:	f020 0107 	bic.w	r1, r0, #7
   b4686:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b468a:	4640      	mov	r0, r8
   b468c:	f009 fd6d 	bl	be16a <strlen>
    char outStr[strlen(dataOut)+2];
   b4690:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4692:	4929      	ldr	r1, [pc, #164]	; (b4738 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4694:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4698:	4603      	mov	r3, r0
   b469a:	4642      	mov	r2, r8
   b469c:	4620      	mov	r0, r4
   b469e:	f004 ff67 	bl	b9570 <sprintf>
    if(VERBOSE) Serial.println(outStr);
   b46a2:	f008 faa3 	bl	bcbec <_Z16_fetch_usbserialv>
   b46a6:	4621      	mov	r1, r4
   b46a8:	f007 fd33 	bl	bc112 <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b46ac:	f1ba 0f00 	cmp.w	sl, #0
   b46b0:	d101      	bne.n	b46b6 <_Z8sendDataPKchbbb+0x4a>
   b46b2:	2d04      	cmp	r5, #4
   b46b4:	d10d      	bne.n	b46d2 <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b46b6:	4b21      	ldr	r3, [pc, #132]	; (b473c <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b46b8:	4921      	ldr	r1, [pc, #132]	; (b4740 <_Z8sendDataPKchbbb+0xd4>)
   b46ba:	781b      	ldrb	r3, [r3, #0]
   b46bc:	f88d 3000 	strb.w	r3, [sp]
   b46c0:	4638      	mov	r0, r7
   b46c2:	233c      	movs	r3, #60	; 0x3c
   b46c4:	4622      	mov	r2, r4
   b46c6:	f008 f84f 	bl	bc768 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b46ca:	6878      	ldr	r0, [r7, #4]
   b46cc:	b108      	cbz	r0, b46d2 <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b46ce:	f7ff fe71 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b46d2:	f1b9 0f00 	cmp.w	r9, #0
   b46d6:	d101      	bne.n	b46dc <_Z8sendDataPKchbbb+0x70>
   b46d8:	2d01      	cmp	r5, #1
   b46da:	d121      	bne.n	b4720 <_Z8sendDataPKchbbb+0xb4>
   b46dc:	f005 feb4 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b46e0:	f005 ff5f 	bl	ba5a2 <_ZNK8particle14BleLocalDevice9connectedEv>
   b46e4:	b1e0      	cbz	r0, b4720 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b46e6:	4620      	mov	r0, r4
   b46e8:	f009 fd3f 	bl	be16a <strlen>
   b46ec:	3007      	adds	r0, #7
   b46ee:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b46f2:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b46f4:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b46f8:	4620      	mov	r0, r4
   b46fa:	f009 fd36 	bl	be16a <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b46fe:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4702:	4602      	mov	r2, r0
   b4704:	4621      	mov	r1, r4
   b4706:	4648      	mov	r0, r9
   b4708:	f009 fc53 	bl	bdfb2 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b470c:	4620      	mov	r0, r4
   b470e:	f009 fd2c 	bl	be16a <strlen>
   b4712:	2300      	movs	r3, #0
   b4714:	4602      	mov	r2, r0
   b4716:	4649      	mov	r1, r9
   b4718:	480a      	ldr	r0, [pc, #40]	; (b4744 <_Z8sendDataPKchbbb+0xd8>)
   b471a:	f005 fd2f 	bl	ba17c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b471e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4720:	b90e      	cbnz	r6, b4726 <_Z8sendDataPKchbbb+0xba>
   b4722:	2d02      	cmp	r5, #2
   b4724:	d104      	bne.n	b4730 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4726:	f008 fd17 	bl	bd158 <_Z22__fetch_global_Serial1v>
   b472a:	4621      	mov	r1, r4
   b472c:	f007 fcf1 	bl	bc112 <_ZN5Print7printlnEPKc>
}
   b4730:	3708      	adds	r7, #8
   b4732:	46bd      	mov	sp, r7
   b4734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4738:	000c0249 	.word	0x000c0249
   b473c:	2003dcfc 	.word	0x2003dcfc
   b4740:	000c0250 	.word	0x000c0250
   b4744:	2003decc 	.word	0x2003decc

000b4748 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b474c:	4d0e      	ldr	r5, [pc, #56]	; (b4788 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b474e:	4f0f      	ldr	r7, [pc, #60]	; (b478c <_Z14XBeeLTEPairSetv+0x44>)
   b4750:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4754:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4756:	45a0      	cmp	r8, r4
   b4758:	d013      	beq.n	b4782 <_Z14XBeeLTEPairSetv+0x3a>
   b475a:	7923      	ldrb	r3, [r4, #4]
   b475c:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b475e:	f814 2b34 	ldrb.w	r2, [r4], #52
    for(WaterBot p: PairBots){
   b4762:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4764:	4639      	mov	r1, r7
   b4766:	a805      	add	r0, sp, #20
   b4768:	f004 ff02 	bl	b9570 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b476c:	9b03      	ldr	r3, [sp, #12]
   b476e:	9600      	str	r6, [sp, #0]
   b4770:	2201      	movs	r2, #1
   b4772:	2100      	movs	r1, #0
   b4774:	a805      	add	r0, sp, #20
   b4776:	f7ff ff79 	bl	b466c <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b477a:	686b      	ldr	r3, [r5, #4]
   b477c:	3b34      	subs	r3, #52	; 0x34
   b477e:	606b      	str	r3, [r5, #4]
	return *this;
   b4780:	e7e9      	b.n	b4756 <_Z14XBeeLTEPairSetv+0xe>
}
   b4782:	b008      	add	sp, #32
   b4784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4788:	2003dc98 	.word	0x2003dc98
   b478c:	000c0258 	.word	0x000c0258

000b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b4790:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4792:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4796:	4806      	ldr	r0, [pc, #24]	; (b47b0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b4798:	1b12      	subs	r2, r2, r4
   b479a:	1092      	asrs	r2, r2, #2
   b479c:	4342      	muls	r2, r0
	if (__n >= this->size())
   b479e:	4291      	cmp	r1, r2
   b47a0:	d302      	bcc.n	b47a8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b47a2:	4804      	ldr	r0, [pc, #16]	; (b47b4 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b47a4:	f008 fd40 	bl	bd228 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b47a8:	2034      	movs	r0, #52	; 0x34
   b47aa:	fb00 4001 	mla	r0, r0, r1, r4
   b47ae:	bd10      	pop	{r4, pc}
   b47b0:	c4ec4ec5 	.word	0xc4ec4ec5
   b47b4:	000c0261 	.word	0x000c0261

000b47b8 <_Z8lHandlerv>:
void lHandler(){
   b47b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b47bc:	4c3d      	ldr	r4, [pc, #244]	; (b48b4 <_Z8lHandlerv+0xfc>)
void lHandler(){
   b47be:	b087      	sub	sp, #28
   b47c0:	f004 fb7e 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b47c4:	6823      	ldr	r3, [r4, #0]
   b47c6:	1ac0      	subs	r0, r0, r3
   b47c8:	2863      	cmp	r0, #99	; 0x63
   b47ca:	d970      	bls.n	b48ae <_Z8lHandlerv+0xf6>
    Serial.println("Right trigger");
   b47cc:	f008 fa0e 	bl	bcbec <_Z16_fetch_usbserialv>
   b47d0:	4939      	ldr	r1, [pc, #228]	; (b48b8 <_Z8lHandlerv+0x100>)
   b47d2:	f007 fc9e 	bl	bc112 <_ZN5Print7printlnEPKc>
   b47d6:	f004 fb73 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    redrawMenu = true;
   b47da:	4b38      	ldr	r3, [pc, #224]	; (b48bc <_Z8lHandlerv+0x104>)
    debounceTime = millis();
   b47dc:	6020      	str	r0, [r4, #0]
    redrawMenu = true;
   b47de:	2201      	movs	r2, #1
   b47e0:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b47e2:	4b37      	ldr	r3, [pc, #220]	; (b48c0 <_Z8lHandlerv+0x108>)
   b47e4:	4a37      	ldr	r2, [pc, #220]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b47e6:	781c      	ldrb	r4, [r3, #0]
   b47e8:	b18c      	cbz	r4, b480e <_Z8lHandlerv+0x56>
      : _M_current(__i) { }
   b47ea:	6813      	ldr	r3, [r2, #0]
        if(botSelect != WaterBots.front().botNum){
   b47ec:	4836      	ldr	r0, [pc, #216]	; (b48c8 <_Z8lHandlerv+0x110>)
   b47ee:	7819      	ldrb	r1, [r3, #0]
   b47f0:	7804      	ldrb	r4, [r0, #0]
   b47f2:	428c      	cmp	r4, r1
   b47f4:	d05b      	beq.n	b48ae <_Z8lHandlerv+0xf6>
   b47f6:	6854      	ldr	r4, [r2, #4]
            for(WaterBot ws: WaterBots){
   b47f8:	429c      	cmp	r4, r3
   b47fa:	d058      	beq.n	b48ae <_Z8lHandlerv+0xf6>
   b47fc:	781a      	ldrb	r2, [r3, #0]
                if(ws.botNum == botSelect) botSelect = newBotNum;
   b47fe:	7805      	ldrb	r5, [r0, #0]
   b4800:	4295      	cmp	r5, r2
   b4802:	bf04      	itt	eq
   b4804:	460a      	moveq	r2, r1
   b4806:	7001      	strbeq	r1, [r0, #0]
   b4808:	3334      	adds	r3, #52	; 0x34
	return *this;
   b480a:	4611      	mov	r1, r2
   b480c:	e7f4      	b.n	b47f8 <_Z8lHandlerv+0x40>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b480e:	e9d2 7800 	ldrd	r7, r8, [r2]
            if(ws.botNum == botSelect){
   b4812:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b48c8 <_Z8lHandlerv+0x110>
                MenuItem curItem = *SelectedItem;
   b4816:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b48d4 <_Z8lHandlerv+0x11c>
                modifiedValue = true;
   b481a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b48d8 <_Z8lHandlerv+0x120>
        for(WaterBot ws: WaterBots){
   b481e:	45b8      	cmp	r8, r7
   b4820:	d045      	beq.n	b48ae <_Z8lHandlerv+0xf6>
            if(ws.botNum == botSelect){
   b4822:	783a      	ldrb	r2, [r7, #0]
   b4824:	f899 3000 	ldrb.w	r3, [r9]
   b4828:	429a      	cmp	r2, r3
   b482a:	d12e      	bne.n	b488a <_Z8lHandlerv+0xd2>
                MenuItem curItem = *SelectedItem;
   b482c:	f8da 6000 	ldr.w	r6, [sl]
   b4830:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4832:	466d      	mov	r5, sp
   b4834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4836:	e896 0003 	ldmia.w	r6, {r0, r1}
   b483a:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b483e:	f008 f9d5 	bl	bcbec <_Z16_fetch_usbserialv>
   b4842:	f10d 010d 	add.w	r1, sp, #13
   b4846:	f007 fc64 	bl	bc112 <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b484a:	f89d 500a 	ldrb.w	r5, [sp, #10]
   b484e:	bb75      	cbnz	r5, b48ae <_Z8lHandlerv+0xf6>
                if(curItem.onOffSetting){
   b4850:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4854:	b1e3      	cbz	r3, b4890 <_Z8lHandlerv+0xd8>
                    Serial.println("Modified an On/Off Control");
   b4856:	f008 f9c9 	bl	bcbec <_Z16_fetch_usbserialv>
   b485a:	491c      	ldr	r1, [pc, #112]	; (b48cc <_Z8lHandlerv+0x114>)
   b485c:	f007 fc59 	bl	bc112 <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = false;//!(WaterBots.at(index).*(curItem.MethodPointerBool));
   b4860:	4621      	mov	r1, r4
   b4862:	4818      	ldr	r0, [pc, #96]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b4864:	f7ff ff94 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4868:	9b01      	ldr	r3, [sp, #4]
   b486a:	54c5      	strb	r5, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b486c:	f008 f9be 	bl	bcbec <_Z16_fetch_usbserialv>
   b4870:	4621      	mov	r1, r4
   b4872:	4605      	mov	r5, r0
   b4874:	4813      	ldr	r0, [pc, #76]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b4876:	f7ff ff8b 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b487a:	4915      	ldr	r1, [pc, #84]	; (b48d0 <_Z8lHandlerv+0x118>)
   b487c:	7802      	ldrb	r2, [r0, #0]
   b487e:	4628      	mov	r0, r5
   b4880:	f7ff fd4c 	bl	b431c <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4884:	2301      	movs	r3, #1
   b4886:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b488a:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b488c:	3734      	adds	r7, #52	; 0x34
	return *this;
   b488e:	e7c6      	b.n	b481e <_Z8lHandlerv+0x66>
                    if(WaterBots.at(index).*(curItem.MethodPointer) > curItem.minVal) WaterBots.at(index).*(curItem.MethodPointer) -= curItem.stepSize;
   b4890:	4621      	mov	r1, r4
   b4892:	480c      	ldr	r0, [pc, #48]	; (b48c4 <_Z8lHandlerv+0x10c>)
   b4894:	f7ff ff7c 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4898:	9a00      	ldr	r2, [sp, #0]
   b489a:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b489e:	5c83      	ldrb	r3, [r0, r2]
   b48a0:	4299      	cmp	r1, r3
   b48a2:	bf3e      	ittt	cc
   b48a4:	f89d 1008 	ldrbcc.w	r1, [sp, #8]
   b48a8:	1a5b      	subcc	r3, r3, r1
   b48aa:	5483      	strbcc	r3, [r0, r2]
   b48ac:	e7ea      	b.n	b4884 <_Z8lHandlerv+0xcc>
}
   b48ae:	b007      	add	sp, #28
   b48b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b48b4:	2003dd50 	.word	0x2003dd50
   b48b8:	000c02ab 	.word	0x000c02ab
   b48bc:	2003da88 	.word	0x2003da88
   b48c0:	2003da89 	.word	0x2003da89
   b48c4:	2003dcb4 	.word	0x2003dcb4
   b48c8:	2003dd4d 	.word	0x2003dd4d
   b48cc:	000c02b9 	.word	0x000c02b9
   b48d0:	000c02d4 	.word	0x000c02d4
   b48d4:	2003dca4 	.word	0x2003dca4
   b48d8:	2003ddf7 	.word	0x2003ddf7

000b48dc <_Z8rHandlerv>:
void rHandler(){
   b48dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b48e0:	4c3f      	ldr	r4, [pc, #252]	; (b49e0 <_Z8rHandlerv+0x104>)
void rHandler(){
   b48e2:	b087      	sub	sp, #28
   b48e4:	f004 faec 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b48e8:	6823      	ldr	r3, [r4, #0]
   b48ea:	1ac0      	subs	r0, r0, r3
   b48ec:	2863      	cmp	r0, #99	; 0x63
   b48ee:	d91d      	bls.n	b492c <_Z8rHandlerv+0x50>
   b48f0:	f004 fae6 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b48f4:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b48f6:	f008 f979 	bl	bcbec <_Z16_fetch_usbserialv>
   b48fa:	493a      	ldr	r1, [pc, #232]	; (b49e4 <_Z8rHandlerv+0x108>)
   b48fc:	f007 fc09 	bl	bc112 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4900:	4b39      	ldr	r3, [pc, #228]	; (b49e8 <_Z8rHandlerv+0x10c>)
   b4902:	2201      	movs	r2, #1
   b4904:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b4906:	4b39      	ldr	r3, [pc, #228]	; (b49ec <_Z8rHandlerv+0x110>)
   b4908:	781c      	ldrb	r4, [r3, #0]
   b490a:	4b39      	ldr	r3, [pc, #228]	; (b49f0 <_Z8rHandlerv+0x114>)
   b490c:	b1ac      	cbz	r4, b493a <_Z8rHandlerv+0x5e>
      : _M_current(__i) { }
   b490e:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b4910:	4d38      	ldr	r5, [pc, #224]	; (b49f4 <_Z8rHandlerv+0x118>)
   b4912:	f814 2c34 	ldrb.w	r2, [r4, #-52]
   b4916:	7828      	ldrb	r0, [r5, #0]
   b4918:	4282      	cmp	r2, r0
   b491a:	d007      	beq.n	b492c <_Z8rHandlerv+0x50>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b491c:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b491e:	2200      	movs	r2, #0
            for(WaterBot ws: WaterBots){
   b4920:	429c      	cmp	r4, r3
   b4922:	d003      	beq.n	b492c <_Z8rHandlerv+0x50>
   b4924:	f813 1b34 	ldrb.w	r1, [r3], #52
                if(findCurrent){
   b4928:	b11a      	cbz	r2, b4932 <_Z8rHandlerv+0x56>
                    botSelect = ws.botNum;
   b492a:	7029      	strb	r1, [r5, #0]
}
   b492c:	b007      	add	sp, #28
   b492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b4932:	1a41      	subs	r1, r0, r1
   b4934:	424a      	negs	r2, r1
   b4936:	414a      	adcs	r2, r1
	return *this;
   b4938:	e7f2      	b.n	b4920 <_Z8rHandlerv+0x44>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b493a:	e9d3 7800 	ldrd	r7, r8, [r3]
            if(ws.botNum == botSelect){
   b493e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b49f4 <_Z8rHandlerv+0x118>
                MenuItem curItem = *SelectedItem;
   b4942:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b4a00 <_Z8rHandlerv+0x124>
                modifiedValue = true;
   b4946:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4a04 <_Z8rHandlerv+0x128>
        for(WaterBot ws: WaterBots){
   b494a:	45b8      	cmp	r8, r7
   b494c:	d0ee      	beq.n	b492c <_Z8rHandlerv+0x50>
            if(ws.botNum == botSelect){
   b494e:	783a      	ldrb	r2, [r7, #0]
   b4950:	f899 3000 	ldrb.w	r3, [r9]
   b4954:	429a      	cmp	r2, r3
   b4956:	d130      	bne.n	b49ba <_Z8rHandlerv+0xde>
                MenuItem curItem = *SelectedItem;
   b4958:	f8da 6000 	ldr.w	r6, [sl]
   b495c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b495e:	466d      	mov	r5, sp
   b4960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4962:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4966:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b496a:	f008 f93f 	bl	bcbec <_Z16_fetch_usbserialv>
   b496e:	f10d 010d 	add.w	r1, sp, #13
   b4972:	f007 fbce 	bl	bc112 <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b4976:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b497a:	2b00      	cmp	r3, #0
   b497c:	d1d6      	bne.n	b492c <_Z8rHandlerv+0x50>
                if(curItem.onOffSetting){
   b497e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4982:	b1eb      	cbz	r3, b49c0 <_Z8rHandlerv+0xe4>
                    Serial.println("Modified an On/Off Control");
   b4984:	f008 f932 	bl	bcbec <_Z16_fetch_usbserialv>
   b4988:	491b      	ldr	r1, [pc, #108]	; (b49f8 <_Z8rHandlerv+0x11c>)
   b498a:	f007 fbc2 	bl	bc112 <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = true;
   b498e:	4621      	mov	r1, r4
   b4990:	4817      	ldr	r0, [pc, #92]	; (b49f0 <_Z8rHandlerv+0x114>)
   b4992:	f7ff fefd 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4996:	9b01      	ldr	r3, [sp, #4]
   b4998:	2201      	movs	r2, #1
   b499a:	54c2      	strb	r2, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b499c:	f008 f926 	bl	bcbec <_Z16_fetch_usbserialv>
   b49a0:	4621      	mov	r1, r4
   b49a2:	4605      	mov	r5, r0
   b49a4:	4812      	ldr	r0, [pc, #72]	; (b49f0 <_Z8rHandlerv+0x114>)
   b49a6:	f7ff fef3 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b49aa:	4914      	ldr	r1, [pc, #80]	; (b49fc <_Z8rHandlerv+0x120>)
   b49ac:	7802      	ldrb	r2, [r0, #0]
   b49ae:	4628      	mov	r0, r5
   b49b0:	f7ff fcb4 	bl	b431c <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b49b4:	2301      	movs	r3, #1
   b49b6:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b49ba:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b49bc:	3734      	adds	r7, #52	; 0x34
	return *this;
   b49be:	e7c4      	b.n	b494a <_Z8rHandlerv+0x6e>
                    if(WaterBots.at(index).*(curItem.MethodPointer) < curItem.maxVal) WaterBots.at(index).*(curItem.MethodPointer) += curItem.stepSize;
   b49c0:	4621      	mov	r1, r4
   b49c2:	480b      	ldr	r0, [pc, #44]	; (b49f0 <_Z8rHandlerv+0x114>)
   b49c4:	f7ff fee4 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b49c8:	9a00      	ldr	r2, [sp, #0]
   b49ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b49ce:	5c83      	ldrb	r3, [r0, r2]
   b49d0:	4299      	cmp	r1, r3
   b49d2:	bf82      	ittt	hi
   b49d4:	f89d 1008 	ldrbhi.w	r1, [sp, #8]
   b49d8:	185b      	addhi	r3, r3, r1
   b49da:	5483      	strbhi	r3, [r0, r2]
   b49dc:	e7ea      	b.n	b49b4 <_Z8rHandlerv+0xd8>
   b49de:	bf00      	nop
   b49e0:	2003dd50 	.word	0x2003dd50
   b49e4:	000c02ab 	.word	0x000c02ab
   b49e8:	2003da88 	.word	0x2003da88
   b49ec:	2003da89 	.word	0x2003da89
   b49f0:	2003dcb4 	.word	0x2003dcb4
   b49f4:	2003dd4d 	.word	0x2003dd4d
   b49f8:	000c02b9 	.word	0x000c02b9
   b49fc:	000c02d4 	.word	0x000c02d4
   b4a00:	2003dca4 	.word	0x2003dca4
   b4a04:	2003ddf7 	.word	0x2003ddf7

000b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4a08:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a0a:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4a0e:	4806      	ldr	r0, [pc, #24]	; (b4a28 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4a10:	1b12      	subs	r2, r2, r4
   b4a12:	10d2      	asrs	r2, r2, #3
   b4a14:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4a16:	4291      	cmp	r1, r2
   b4a18:	d302      	bcc.n	b4a20 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4a1a:	4804      	ldr	r0, [pc, #16]	; (b4a2c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4a1c:	f008 fc04 	bl	bd228 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4a20:	2018      	movs	r0, #24
   b4a22:	fb00 4001 	mla	r0, r0, r1, r4
   b4a26:	bd10      	pop	{r4, pc}
   b4a28:	aaaaaaab 	.word	0xaaaaaaab
   b4a2c:	000c0261 	.word	0x000c0261

000b4a30 <_Z8uHandlerv>:
void uHandler(){
   b4a30:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a32:	4c0f      	ldr	r4, [pc, #60]	; (b4a70 <_Z8uHandlerv+0x40>)
   b4a34:	f004 fa44 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
   b4a38:	6823      	ldr	r3, [r4, #0]
   b4a3a:	1ac0      	subs	r0, r0, r3
   b4a3c:	2863      	cmp	r0, #99	; 0x63
   b4a3e:	d915      	bls.n	b4a6c <_Z8uHandlerv+0x3c>
   b4a40:	f004 fa3e 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4a44:	4a0b      	ldr	r2, [pc, #44]	; (b4a74 <_Z8uHandlerv+0x44>)
    debounceTime = millis();
   b4a46:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4a48:	7813      	ldrb	r3, [r2, #0]
   b4a4a:	b10b      	cbz	r3, b4a50 <_Z8uHandlerv+0x20>
   b4a4c:	3b01      	subs	r3, #1
   b4a4e:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4a50:	7811      	ldrb	r1, [r2, #0]
   b4a52:	4809      	ldr	r0, [pc, #36]	; (b4a78 <_Z8uHandlerv+0x48>)
   b4a54:	f7ff ffd8 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4a58:	4b08      	ldr	r3, [pc, #32]	; (b4a7c <_Z8uHandlerv+0x4c>)
   b4a5a:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4a5c:	f008 f8c6 	bl	bcbec <_Z16_fetch_usbserialv>
   b4a60:	4907      	ldr	r1, [pc, #28]	; (b4a80 <_Z8uHandlerv+0x50>)
   b4a62:	f007 fb56 	bl	bc112 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4a66:	4b07      	ldr	r3, [pc, #28]	; (b4a84 <_Z8uHandlerv+0x54>)
   b4a68:	2201      	movs	r2, #1
   b4a6a:	701a      	strb	r2, [r3, #0]
}
   b4a6c:	bd10      	pop	{r4, pc}
   b4a6e:	bf00      	nop
   b4a70:	2003dd50 	.word	0x2003dd50
   b4a74:	2003ddf5 	.word	0x2003ddf5
   b4a78:	2003dc8c 	.word	0x2003dc8c
   b4a7c:	2003dca4 	.word	0x2003dca4
   b4a80:	000c02e7 	.word	0x000c02e7
   b4a84:	2003da88 	.word	0x2003da88

000b4a88 <_Z8dHandlerv>:
void dHandler(){
   b4a88:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a8a:	4c0f      	ldr	r4, [pc, #60]	; (b4ac8 <_Z8dHandlerv+0x40>)
   b4a8c:	f004 fa18 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
   b4a90:	6823      	ldr	r3, [r4, #0]
   b4a92:	1ac0      	subs	r0, r0, r3
   b4a94:	2863      	cmp	r0, #99	; 0x63
   b4a96:	d916      	bls.n	b4ac6 <_Z8dHandlerv+0x3e>
   b4a98:	f004 fa12 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4a9c:	4a0b      	ldr	r2, [pc, #44]	; (b4acc <_Z8dHandlerv+0x44>)
    debounceTime = millis();
   b4a9e:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4aa0:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4aa2:	480b      	ldr	r0, [pc, #44]	; (b4ad0 <_Z8dHandlerv+0x48>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4aa4:	2b02      	cmp	r3, #2
   b4aa6:	bf9c      	itt	ls
   b4aa8:	3301      	addls	r3, #1
   b4aaa:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4aac:	7811      	ldrb	r1, [r2, #0]
   b4aae:	f7ff ffab 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4ab2:	4b08      	ldr	r3, [pc, #32]	; (b4ad4 <_Z8dHandlerv+0x4c>)
   b4ab4:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b4ab6:	f008 f899 	bl	bcbec <_Z16_fetch_usbserialv>
   b4aba:	4907      	ldr	r1, [pc, #28]	; (b4ad8 <_Z8dHandlerv+0x50>)
   b4abc:	f007 fb29 	bl	bc112 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4ac0:	4b06      	ldr	r3, [pc, #24]	; (b4adc <_Z8dHandlerv+0x54>)
   b4ac2:	2201      	movs	r2, #1
   b4ac4:	701a      	strb	r2, [r3, #0]
}
   b4ac6:	bd10      	pop	{r4, pc}
   b4ac8:	2003dd50 	.word	0x2003dd50
   b4acc:	2003ddf5 	.word	0x2003ddf5
   b4ad0:	2003dc8c 	.word	0x2003dc8c
   b4ad4:	2003dca4 	.word	0x2003dca4
   b4ad8:	000c02f2 	.word	0x000c02f2
   b4adc:	2003da88 	.word	0x2003da88

000b4ae0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ae4:	6843      	ldr	r3, [r0, #4]
   b4ae6:	f8d0 a000 	ldr.w	sl, [r0]
   b4aea:	9301      	str	r3, [sp, #4]
   b4aec:	eba3 040a 	sub.w	r4, r3, sl
   b4af0:	4b41      	ldr	r3, [pc, #260]	; (b4bf8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b4af2:	10a4      	asrs	r4, r4, #2
   b4af4:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4af6:	4b41      	ldr	r3, [pc, #260]	; (b4bfc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b4af8:	429c      	cmp	r4, r3
   b4afa:	4681      	mov	r9, r0
   b4afc:	468b      	mov	fp, r1
   b4afe:	4616      	mov	r6, r2
   b4b00:	d102      	bne.n	b4b08 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b4b02:	483f      	ldr	r0, [pc, #252]	; (b4c00 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>)
   b4b04:	f008 fb8d 	bl	bd222 <_ZSt20__throw_length_errorPKc>
   b4b08:	2c01      	cmp	r4, #1
   b4b0a:	4622      	mov	r2, r4
   b4b0c:	bf38      	it	cc
   b4b0e:	2201      	movcc	r2, #1
   b4b10:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4b12:	eba1 070a 	sub.w	r7, r1, sl

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4b16:	d229      	bcs.n	b4b6c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b18:	b354      	cbz	r4, b4b70 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b4b1a:	429c      	cmp	r4, r3
   b4b1c:	bf28      	it	cs
   b4b1e:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b20:	2034      	movs	r0, #52	; 0x34
   b4b22:	4360      	muls	r0, r4
   b4b24:	f7ff fab7 	bl	b4096 <_Znwj>
   b4b28:	4680      	mov	r8, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4b2a:	eb18 0507 	adds.w	r5, r8, r7
   b4b2e:	d007      	beq.n	b4b40 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
   b4b30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b3c:	6833      	ldr	r3, [r6, #0]
   b4b3e:	602b      	str	r3, [r5, #0]
   b4b40:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b42:	46d6      	mov	lr, sl
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b4b44:	45f3      	cmp	fp, lr
   b4b46:	d015      	beq.n	b4b74 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b4b48:	f1bc 0f00 	cmp.w	ip, #0
   b4b4c:	d009      	beq.n	b4b62 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b4b4e:	4676      	mov	r6, lr
   b4b50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b52:	4665      	mov	r5, ip
   b4b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b5e:	6833      	ldr	r3, [r6, #0]
   b4b60:	602b      	str	r3, [r5, #0]
   b4b62:	f10e 0e34 	add.w	lr, lr, #52	; 0x34
   b4b66:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4b6a:	e7eb      	b.n	b4b44 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4b6c:	461c      	mov	r4, r3
   b4b6e:	e7d7      	b.n	b4b20 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b70:	46a0      	mov	r8, r4
   b4b72:	e7da      	b.n	b4b2a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b4b74:	f8df e08c 	ldr.w	lr, [pc, #140]	; b4c04 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>
   b4b78:	08bf      	lsrs	r7, r7, #2
   b4b7a:	fb0e f707 	mul.w	r7, lr, r7
   b4b7e:	2334      	movs	r3, #52	; 0x34
   b4b80:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b4b84:	435f      	muls	r7, r3
   b4b86:	eb0a 0b07 	add.w	fp, sl, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b4b8a:	441f      	add	r7, r3
   b4b8c:	eb08 0307 	add.w	r3, r8, r7
   b4b90:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b4b92:	469c      	mov	ip, r3
   b4b94:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b4b96:	9b01      	ldr	r3, [sp, #4]
   b4b98:	429f      	cmp	r7, r3
   b4b9a:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4b9e:	d00c      	beq.n	b4bba <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   b4ba0:	463e      	mov	r6, r7
   b4ba2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4ba4:	f1ac 0534 	sub.w	r5, ip, #52	; 0x34
   b4ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4baa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4bae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4bb2:	6833      	ldr	r3, [r6, #0]
   b4bb4:	602b      	str	r3, [r5, #0]
   b4bb6:	3734      	adds	r7, #52	; 0x34
   b4bb8:	e7ed      	b.n	b4b96 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
   b4bba:	eba7 070b 	sub.w	r7, r7, fp
   b4bbe:	08bf      	lsrs	r7, r7, #2
   b4bc0:	fb0e fe07 	mul.w	lr, lr, r7
   b4bc4:	9b00      	ldr	r3, [sp, #0]
   b4bc6:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b4bca:	2734      	movs	r7, #52	; 0x34
   b4bcc:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b4bd0:	f1ba 0f00 	cmp.w	sl, #0
   b4bd4:	d006      	beq.n	b4be4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x104>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4bd6:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b4bda:	4650      	mov	r0, sl
   b4bdc:	eba1 010a 	sub.w	r1, r1, sl
   b4be0:	f7ff fa5d 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4be4:	2034      	movs	r0, #52	; 0x34
   b4be6:	fb00 8404 	mla	r4, r0, r4, r8
      this->_M_impl._M_finish = __new_finish;
   b4bea:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4bee:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   b4bf2:	b003      	add	sp, #12
   b4bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4bf8:	c4ec4ec5 	.word	0xc4ec4ec5
   b4bfc:	02762762 	.word	0x02762762
   b4c00:	000c02ff 	.word	0x000c02ff
   b4c04:	04ec4ec5 	.word	0x04ec4ec5

000b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b4c08:	b570      	push	{r4, r5, r6, lr}
   b4c0a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4c0c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b4c10:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b4c12:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4c14:	d00e      	beq.n	b4c34 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4c16:	b149      	cbz	r1, b4c2c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x24>
   b4c18:	4615      	mov	r5, r2
   b4c1a:	460c      	mov	r4, r1
   b4c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c28:	682b      	ldr	r3, [r5, #0]
   b4c2a:	6023      	str	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
   b4c2c:	6873      	ldr	r3, [r6, #4]
   b4c2e:	3334      	adds	r3, #52	; 0x34
   b4c30:	6073      	str	r3, [r6, #4]
      }
   b4c32:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b4c34:	f7ff ff54 	bl	b4ae0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b4c38:	e7fb      	b.n	b4c32 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2a>
	...

000b4c3c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c40:	b0a7      	sub	sp, #156	; 0x9c
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4c42:	7883      	ldrb	r3, [r0, #2]
   b4c44:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4c46:	af06      	add	r7, sp, #24
   b4c48:	4683      	mov	fp, r0
   b4c4a:	460d      	mov	r5, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4c4c:	d125      	bne.n	b4c9a <_Z14processCommandPKchb+0x5e>
   b4c4e:	78c3      	ldrb	r3, [r0, #3]
   b4c50:	2b42      	cmp	r3, #66	; 0x42
   b4c52:	f040 81bb 	bne.w	b4fcc <_Z14processCommandPKchb+0x390>
        rxIDBuf[0] = command[1];
   b4c56:	f89b 3001 	ldrb.w	r3, [fp, #1]
      : _M_current(__i) { }
   b4c5a:	f8df a378 	ldr.w	sl, [pc, #888]	; b4fd4 <_Z14processCommandPKchb+0x398>
   b4c5e:	773b      	strb	r3, [r7, #28]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4c60:	f107 001c 	add.w	r0, r7, #28
   b4c64:	f009 f991 	bl	bdf8a <atoi>
   b4c68:	e9da 8300 	ldrd	r8, r3, [sl]
        }
   b4c6c:	46e9      	mov	r9, sp
        uint8_t rxBotID = atoi(rxIDBuf);
   b4c6e:	b2c6      	uxtb	r6, r0
        int index = 0;
   b4c70:	2100      	movs	r1, #0
        bool newBot = true;
   b4c72:	2201      	movs	r2, #1
        for(WaterBot w: WaterBots){
   b4c74:	4598      	cmp	r8, r3
   b4c76:	d016      	beq.n	b4ca6 <_Z14processCommandPKchb+0x6a>
            if(rxBotID == w.botNum){
   b4c78:	f898 0000 	ldrb.w	r0, [r8]
   b4c7c:	42b0      	cmp	r0, r6
   b4c7e:	d108      	bne.n	b4c92 <_Z14processCommandPKchb+0x56>
                TargetWB = &WaterBots.at(index);
   b4c80:	4650      	mov	r0, sl
   b4c82:	60bb      	str	r3, [r7, #8]
   b4c84:	6179      	str	r1, [r7, #20]
   b4c86:	f7ff fd83 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b4c8a:	68bb      	ldr	r3, [r7, #8]
   b4c8c:	6979      	ldr	r1, [r7, #20]
                TargetWB = &WaterBots.at(index);
   b4c8e:	4604      	mov	r4, r0
                newBot = false;
   b4c90:	2200      	movs	r2, #0
            index++;
   b4c92:	3101      	adds	r1, #1
	++_M_current;
   b4c94:	f108 0834 	add.w	r8, r8, #52	; 0x34
	return *this;
   b4c98:	e7ec      	b.n	b4c74 <_Z14processCommandPKchb+0x38>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4c9a:	2b43      	cmp	r3, #67	; 0x43
   b4c9c:	f040 8196 	bne.w	b4fcc <_Z14processCommandPKchb+0x390>
   b4ca0:	78c3      	ldrb	r3, [r0, #3]
   b4ca2:	2b43      	cmp	r3, #67	; 0x43
   b4ca4:	e7d5      	b.n	b4c52 <_Z14processCommandPKchb+0x16>
        if(newBot){
   b4ca6:	b16a      	cbz	r2, b4cc4 <_Z14processCommandPKchb+0x88>
            WaterBot newWaterbot;
   b4ca8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   b4cac:	f7ff fcb6 	bl	b461c <_ZN8WaterBotC1Ev>
            WaterBots.push_back(newWaterbot);
   b4cb0:	48c8      	ldr	r0, [pc, #800]	; (b4fd4 <_Z14processCommandPKchb+0x398>)
            newWaterbot.botNum = rxBotID;
   b4cb2:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
            WaterBots.push_back(newWaterbot);
   b4cb6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   b4cba:	f7ff ffa5 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b4cbe:	f8da 4004 	ldr.w	r4, [sl, #4]
   b4cc2:	3c34      	subs	r4, #52	; 0x34
        char dataStr[strlen(command)-8];
   b4cc4:	4658      	mov	r0, fp
   b4cc6:	f009 fa50 	bl	be16a <strlen>
   b4cca:	3801      	subs	r0, #1
   b4ccc:	f020 0007 	bic.w	r0, r0, #7
   b4cd0:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4cd4:	4658      	mov	r0, fp
   b4cd6:	f009 fa48 	bl	be16a <strlen>
        char dataStr[strlen(command)-8];
   b4cda:	f10d 0818 	add.w	r8, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4cde:	4440      	add	r0, r8
   b4ce0:	2100      	movs	r1, #0
   b4ce2:	f800 1c09 	strb.w	r1, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b4ce6:	4658      	mov	r0, fp
        cmdStr[3] = '\0';
   b4ce8:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
        checkStr[0] = command[strlen(command)-2];
   b4cec:	f009 fa3d 	bl	be16a <strlen>
   b4cf0:	4458      	add	r0, fp
   b4cf2:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4cf6:	f887 3020 	strb.w	r3, [r7, #32]
        checkStr[1] = command[strlen(command)-1];
   b4cfa:	4658      	mov	r0, fp
   b4cfc:	f009 fa35 	bl	be16a <strlen>
   b4d00:	4458      	add	r0, fp
        checkStr[2] = '\0';
   b4d02:	2100      	movs	r1, #0
        checkStr[1] = command[strlen(command)-1];
   b4d04:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4d08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4d0c:	2210      	movs	r2, #16
   b4d0e:	f107 0020 	add.w	r0, r7, #32
        checkStr[2] = '\0';
   b4d12:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4d16:	f00a f913 	bl	bef40 <strtol>
   b4d1a:	6178      	str	r0, [r7, #20]
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4d1c:	f007 ff66 	bl	bcbec <_Z16_fetch_usbserialv>
   b4d20:	697b      	ldr	r3, [r7, #20]
   b4d22:	49ad      	ldr	r1, [pc, #692]	; (b4fd8 <_Z14processCommandPKchb+0x39c>)
   b4d24:	b2db      	uxtb	r3, r3
   b4d26:	461a      	mov	r2, r3
   b4d28:	617b      	str	r3, [r7, #20]
   b4d2a:	f7ff faf7 	bl	b431c <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4d2e:	697b      	ldr	r3, [r7, #20]
   b4d30:	2104      	movs	r1, #4
   b4d32:	4658      	mov	r0, fp
   b4d34:	60bb      	str	r3, [r7, #8]
   b4d36:	6179      	str	r1, [r7, #20]
   b4d38:	f009 fa17 	bl	be16a <strlen>
   b4d3c:	6979      	ldr	r1, [r7, #20]
   b4d3e:	68bb      	ldr	r3, [r7, #8]
   b4d40:	3802      	subs	r0, #2
   b4d42:	4281      	cmp	r1, r0
   b4d44:	d214      	bcs.n	b4d70 <_Z14processCommandPKchb+0x134>
            if(i < 7) cmdStr[i-4] = command[i];
   b4d46:	2906      	cmp	r1, #6
   b4d48:	bf9b      	ittet	ls
   b4d4a:	f107 0280 	addls.w	r2, r7, #128	; 0x80
   b4d4e:	1852      	addls	r2, r2, r1
            else dataStr[i-7] = command[i];
   b4d50:	eb08 0201 	addhi.w	r2, r8, r1
            if(i < 7) cmdStr[i-4] = command[i];
   b4d54:	f81b 0001 	ldrbls.w	r0, [fp, r1]
            else dataStr[i-7] = command[i];
   b4d58:	bf8c      	ite	hi
   b4d5a:	f81b 0001 	ldrbhi.w	r0, [fp, r1]
            if(i < 7) cmdStr[i-4] = command[i];
   b4d5e:	f802 0c60 	strbls.w	r0, [r2, #-96]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4d62:	f101 0101 	add.w	r1, r1, #1
            else dataStr[i-7] = command[i];
   b4d66:	bf88      	it	hi
   b4d68:	f802 0c07 	strbhi.w	r0, [r2, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4d6c:	b2c9      	uxtb	r1, r1
   b4d6e:	e7e0      	b.n	b4d32 <_Z14processCommandPKchb+0xf6>
        if(checksum != strlen(command)-2){
   b4d70:	4298      	cmp	r0, r3
   b4d72:	d044      	beq.n	b4dfe <_Z14processCommandPKchb+0x1c2>
   b4d74:	617b      	str	r3, [r7, #20]
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4d76:	f007 ff39 	bl	bcbec <_Z16_fetch_usbserialv>
   b4d7a:	4604      	mov	r4, r0
   b4d7c:	4658      	mov	r0, fp
   b4d7e:	f009 f9f4 	bl	be16a <strlen>
   b4d82:	1e82      	subs	r2, r0, #2
   b4d84:	4620      	mov	r0, r4
    return m_attr;
   b4d86:	4c95      	ldr	r4, [pc, #596]	; (b4fdc <_Z14processCommandPKchb+0x3a0>)
   b4d88:	697b      	ldr	r3, [r7, #20]
   b4d8a:	4995      	ldr	r1, [pc, #596]	; (b4fe0 <_Z14processCommandPKchb+0x3a4>)
   b4d8c:	f7ff fac6 	bl	b431c <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4d90:	7c23      	ldrb	r3, [r4, #16]
   b4d92:	bb73      	cbnz	r3, b4df2 <_Z14processCommandPKchb+0x1b6>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4d94:	4993      	ldr	r1, [pc, #588]	; (b4fe4 <_Z14processCommandPKchb+0x3a8>)
   b4d96:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d9a:	f104 0010 	add.w	r0, r4, #16
   b4d9e:	f7ff fb4d 	bl	b443c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4da2:	4991      	ldr	r1, [pc, #580]	; (b4fe8 <_Z14processCommandPKchb+0x3ac>)
   b4da4:	465a      	mov	r2, fp
   b4da6:	4620      	mov	r0, r4
   b4da8:	f7ff fab8 	bl	b431c <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4dac:	f104 0010 	add.w	r0, r4, #16
   b4db0:	f002 fe02 	bl	b79b8 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4db4:	f007 ff1a 	bl	bcbec <_Z16_fetch_usbserialv>
   b4db8:	498c      	ldr	r1, [pc, #560]	; (b4fec <_Z14processCommandPKchb+0x3b0>)
   b4dba:	f007 f9aa 	bl	bc112 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4dbe:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b4dc2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4dc6:	2a09      	cmp	r2, #9
   b4dc8:	d902      	bls.n	b4dd0 <_Z14processCommandPKchb+0x194>
   b4dca:	2b43      	cmp	r3, #67	; 0x43
   b4dcc:	f040 80fd 	bne.w	b4fca <_Z14processCommandPKchb+0x38e>
                rxBotNum[0] = command[0];
   b4dd0:	f89b 2000 	ldrb.w	r2, [fp]
   b4dd4:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
                rxBotNum[1] = command[1];
   b4dd8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4ddc:	4984      	ldr	r1, [pc, #528]	; (b4ff0 <_Z14processCommandPKchb+0x3b4>)
   b4dde:	4885      	ldr	r0, [pc, #532]	; (b4ff4 <_Z14processCommandPKchb+0x3b8>)
   b4de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4de4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   b4de8:	f004 fbc2 	bl	b9570 <sprintf>
                errModeReply = mode;
   b4dec:	4b82      	ldr	r3, [pc, #520]	; (b4ff8 <_Z14processCommandPKchb+0x3bc>)
            errCmdMode = mode;
   b4dee:	701d      	strb	r5, [r3, #0]
   b4df0:	e0eb      	b.n	b4fca <_Z14processCommandPKchb+0x38e>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4df2:	497d      	ldr	r1, [pc, #500]	; (b4fe8 <_Z14processCommandPKchb+0x3ac>)
   b4df4:	465a      	mov	r2, fp
   b4df6:	4620      	mov	r0, r4
   b4df8:	f7ff fa90 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b4dfc:	e7da      	b.n	b4db4 <_Z14processCommandPKchb+0x178>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4dfe:	497f      	ldr	r1, [pc, #508]	; (b4ffc <_Z14processCommandPKchb+0x3c0>)
   b4e00:	f107 0024 	add.w	r0, r7, #36	; 0x24
   b4e04:	f009 f981 	bl	be10a <strcmp>
   b4e08:	2800      	cmp	r0, #0
   b4e0a:	f000 80de 	beq.w	b4fca <_Z14processCommandPKchb+0x38e>
        else if(!strcmp(cmdStr,"sup")){
   b4e0e:	497c      	ldr	r1, [pc, #496]	; (b5000 <_Z14processCommandPKchb+0x3c4>)
   b4e10:	f107 0024 	add.w	r0, r7, #36	; 0x24
   b4e14:	f009 f979 	bl	be10a <strcmp>
   b4e18:	2800      	cmp	r0, #0
   b4e1a:	d17e      	bne.n	b4f1a <_Z14processCommandPKchb+0x2de>
      : _M_current(__i) { }
   b4e1c:	f8da 3004 	ldr.w	r3, [sl, #4]
   b4e20:	613b      	str	r3, [r7, #16]
   b4e22:	f8da 3000 	ldr.w	r3, [sl]
            for(WaterBot w: WaterBots){
   b4e26:	617b      	str	r3, [r7, #20]
   b4e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   b4e2c:	4293      	cmp	r3, r2
   b4e2e:	d074      	beq.n	b4f1a <_Z14processCommandPKchb+0x2de>
   b4e30:	781b      	ldrb	r3, [r3, #0]
                if(rxBotID == w.botNum){
   b4e32:	429e      	cmp	r6, r3
   b4e34:	d16e      	bne.n	b4f14 <_Z14processCommandPKchb+0x2d8>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4e36:	f107 0a4c 	add.w	sl, r7, #76	; 0x4c
   b4e3a:	f107 0b3c 	add.w	fp, r7, #60	; 0x3c
   b4e3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4e42:	f107 0234 	add.w	r2, r7, #52	; 0x34
   b4e46:	496f      	ldr	r1, [pc, #444]	; (b5004 <_Z14processCommandPKchb+0x3c8>)
   b4e48:	f8cd a004 	str.w	sl, [sp, #4]
   b4e4c:	f8cd b000 	str.w	fp, [sp]
   b4e50:	4640      	mov	r0, r8
   b4e52:	f004 fb95 	bl	b9580 <sscanf>
                    latRX = atof(testLat);
   b4e56:	4658      	mov	r0, fp
   b4e58:	f009 f894 	bl	bdf84 <atof>
                    lonRX = atof(testLon);
   b4e5c:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b4e5e:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4e62:	f009 f88f 	bl	bdf84 <atof>
                    w.LTEAvail = statflags & 1;
   b4e66:	f897 a038 	ldrb.w	sl, [r7, #56]	; 0x38
                    w.battPercent = battpct;
   b4e6a:	f897 b034 	ldrb.w	fp, [r7, #52]	; 0x34
                    lonRX = atof(testLon);
   b4e6e:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4e72:	f007 febb 	bl	bcbec <_Z16_fetch_usbserialv>
   b4e76:	4964      	ldr	r1, [pc, #400]	; (b5008 <_Z14processCommandPKchb+0x3cc>)
   b4e78:	f007 f94b 	bl	bc112 <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b4e7c:	f007 feb6 	bl	bcbec <_Z16_fetch_usbserialv>
   b4e80:	4962      	ldr	r1, [pc, #392]	; (b500c <_Z14processCommandPKchb+0x3d0>)
   b4e82:	f007 f946 	bl	bc112 <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4e86:	f007 feb1 	bl	bcbec <_Z16_fetch_usbserialv>
   b4e8a:	4961      	ldr	r1, [pc, #388]	; (b5010 <_Z14processCommandPKchb+0x3d4>)
   b4e8c:	f007 f941 	bl	bc112 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b4e90:	f007 feac 	bl	bcbec <_Z16_fetch_usbserialv>
   b4e94:	495f      	ldr	r1, [pc, #380]	; (b5014 <_Z14processCommandPKchb+0x3d8>)
   b4e96:	4632      	mov	r2, r6
   b4e98:	f7ff fa40 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b4e9c:	f007 fea6 	bl	bcbec <_Z16_fetch_usbserialv>
   b4ea0:	465a      	mov	r2, fp
   b4ea2:	495d      	ldr	r1, [pc, #372]	; (b5018 <_Z14processCommandPKchb+0x3dc>)
   b4ea4:	f7ff fa3a 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b4ea8:	f007 fea0 	bl	bcbec <_Z16_fetch_usbserialv>
   b4eac:	495b      	ldr	r1, [pc, #364]	; (b501c <_Z14processCommandPKchb+0x3e0>)
   b4eae:	f007 f930 	bl	bc112 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4eb2:	f007 fe9b 	bl	bcbec <_Z16_fetch_usbserialv>
   b4eb6:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b4eba:	f00a 0201 	and.w	r2, sl, #1
   b4ebe:	4958      	ldr	r1, [pc, #352]	; (b5020 <_Z14processCommandPKchb+0x3e4>)
   b4ec0:	9300      	str	r3, [sp, #0]
   b4ec2:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4ec6:	f7ff fa29 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b4eca:	f007 fe8f 	bl	bcbec <_Z16_fetch_usbserialv>
   b4ece:	4955      	ldr	r1, [pc, #340]	; (b5024 <_Z14processCommandPKchb+0x3e8>)
   b4ed0:	f007 f91f 	bl	bc112 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4ed4:	f007 fe8a 	bl	bcbec <_Z16_fetch_usbserialv>
   b4ed8:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b4eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b4ede:	f008 ffdd 	bl	bde9c <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4ee2:	f008 fcc9 	bl	bd878 <__aeabi_f2d>
   b4ee6:	4602      	mov	r2, r0
   b4ee8:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b4eea:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4eee:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b4ef2:	f008 ffd3 	bl	bde9c <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4ef6:	f008 fcbf 	bl	bd878 <__aeabi_f2d>
   b4efa:	e9cd 0100 	strd	r0, r1, [sp]
   b4efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b4f02:	4949      	ldr	r1, [pc, #292]	; (b5028 <_Z14processCommandPKchb+0x3ec>)
   b4f04:	4650      	mov	r0, sl
   b4f06:	f7ff fa09 	bl	b431c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b4f0a:	f007 fe6f 	bl	bcbec <_Z16_fetch_usbserialv>
   b4f0e:	493f      	ldr	r1, [pc, #252]	; (b500c <_Z14processCommandPKchb+0x3d0>)
   b4f10:	f007 f8ff 	bl	bc112 <_ZN5Print7printlnEPKc>
      operator++() _GLIBCXX_NOEXCEPT
   b4f14:	697b      	ldr	r3, [r7, #20]
   b4f16:	3334      	adds	r3, #52	; 0x34
   b4f18:	e785      	b.n	b4e26 <_Z14processCommandPKchb+0x1ea>
        if(!strcmp(cmdStr,"sns")){
   b4f1a:	4944      	ldr	r1, [pc, #272]	; (b502c <_Z14processCommandPKchb+0x3f0>)
   b4f1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
   b4f20:	f009 f8f3 	bl	be10a <strcmp>
   b4f24:	2800      	cmp	r0, #0
   b4f26:	f040 8089 	bne.w	b503c <_Z14processCommandPKchb+0x400>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b4f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4f2e:	9304      	str	r3, [sp, #16]
   b4f30:	f107 0334 	add.w	r3, r7, #52	; 0x34
   b4f34:	9303      	str	r3, [sp, #12]
   b4f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
   b4f3a:	9302      	str	r3, [sp, #8]
   b4f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b4f46:	493a      	ldr	r1, [pc, #232]	; (b5030 <_Z14processCommandPKchb+0x3f4>)
   b4f48:	9300      	str	r3, [sp, #0]
   b4f4a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   b4f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   b4f52:	4640      	mov	r0, r8
   b4f54:	f004 fb14 	bl	b9580 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b4f58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   b4f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b4f60:	eddf 7a34 	vldr	s15, [pc, #208]	; b5034 <_Z14processCommandPKchb+0x3f8>
   b4f64:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b4f68:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
            TargetWB->DO = ((float)do_in)/1000.0;
   b4f6c:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
            TargetWB->pH = ((float)pH_in)/1000.0;
   b4f70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f74:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b4f78:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
            TargetWB->pH = ((float)pH_in)/1000.0;
   b4f7c:	edc4 6a07 	vstr	s13, [r4, #28]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b4f80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f84:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4f88:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b4f8c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
   b4f90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4f94:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4f98:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
            TargetWB->temp = ((float)temp_in)/1000.0;
   b4f9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   b4fa0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4fa4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4fa8:	edc4 6a08 	vstr	s13, [r4, #32]
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b4fac:	f007 fe1e 	bl	bcbec <_Z16_fetch_usbserialv>
   b4fb0:	7822      	ldrb	r2, [r4, #0]
   b4fb2:	617a      	str	r2, [r7, #20]
   b4fb4:	4605      	mov	r5, r0
   b4fb6:	6a20      	ldr	r0, [r4, #32]
   b4fb8:	f008 fc5e 	bl	bd878 <__aeabi_f2d>
   b4fbc:	e9cd 0100 	strd	r0, r1, [sp]
   b4fc0:	697a      	ldr	r2, [r7, #20]
   b4fc2:	491d      	ldr	r1, [pc, #116]	; (b5038 <_Z14processCommandPKchb+0x3fc>)
   b4fc4:	4628      	mov	r0, r5
   b4fc6:	f7ff f9a9 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b4fca:	46cd      	mov	sp, r9
}
   b4fcc:	3784      	adds	r7, #132	; 0x84
   b4fce:	46bd      	mov	sp, r7
   b4fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4fd4:	2003dcb4 	.word	0x2003dcb4
   b4fd8:	000c0319 	.word	0x000c0319
   b4fdc:	2003ddc0 	.word	0x2003ddc0
   b4fe0:	000c032e 	.word	0x000c032e
   b4fe4:	2003dd68 	.word	0x2003dd68
   b4fe8:	000c034b 	.word	0x000c034b
   b4fec:	000c0377 	.word	0x000c0377
   b4ff0:	000c0398 	.word	0x000c0398
   b4ff4:	2003dd54 	.word	0x2003dd54
   b4ff8:	2003dd67 	.word	0x2003dd67
   b4ffc:	000c03a4 	.word	0x000c03a4
   b5000:	000c03a8 	.word	0x000c03a8
   b5004:	000c03ac 	.word	0x000c03ac
   b5008:	000c03b8 	.word	0x000c03b8
   b500c:	000c03c7 	.word	0x000c03c7
   b5010:	000c03e2 	.word	0x000c03e2
   b5014:	000c03fd 	.word	0x000c03fd
   b5018:	000c0419 	.word	0x000c0419
   b501c:	000c0435 	.word	0x000c0435
   b5020:	000c0450 	.word	0x000c0450
   b5024:	000c046e 	.word	0x000c046e
   b5028:	000c0489 	.word	0x000c0489
   b502c:	000c0499 	.word	0x000c0499
   b5030:	000c049d 	.word	0x000c049d
   b5034:	447a0000 	.word	0x447a0000
   b5038:	000c04b2 	.word	0x000c04b2
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b503c:	4949      	ldr	r1, [pc, #292]	; (b5164 <_Z14processCommandPKchb+0x528>)
   b503e:	f107 0024 	add.w	r0, r7, #36	; 0x24
   b5042:	f009 f862 	bl	be10a <strcmp>
   b5046:	b930      	cbnz	r0, b5056 <_Z14processCommandPKchb+0x41a>
            strncpy(errCmdStr,dataStr,3);
   b5048:	4847      	ldr	r0, [pc, #284]	; (b5168 <_Z14processCommandPKchb+0x52c>)
   b504a:	2203      	movs	r2, #3
   b504c:	4641      	mov	r1, r8
   b504e:	f009 f8a8 	bl	be1a2 <strncpy>
            errCmdMode = mode;
   b5052:	4b46      	ldr	r3, [pc, #280]	; (b516c <_Z14processCommandPKchb+0x530>)
   b5054:	e6cb      	b.n	b4dee <_Z14processCommandPKchb+0x1b2>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b5056:	4946      	ldr	r1, [pc, #280]	; (b5170 <_Z14processCommandPKchb+0x534>)
   b5058:	f107 0024 	add.w	r0, r7, #36	; 0x24
   b505c:	f009 f855 	bl	be10a <strcmp>
   b5060:	bba8      	cbnz	r0, b50ce <_Z14processCommandPKchb+0x492>
      : _M_current(__i) { }
   b5062:	4b44      	ldr	r3, [pc, #272]	; (b5174 <_Z14processCommandPKchb+0x538>)
   b5064:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b5068:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b506a:	4290      	cmp	r0, r2
   b506c:	d005      	beq.n	b507a <_Z14processCommandPKchb+0x43e>
                if(rxBotID == w.botNum) newBot = false;
   b506e:	f812 1b34 	ldrb.w	r1, [r2], #52
   b5072:	42b1      	cmp	r1, r6
   b5074:	bf08      	it	eq
   b5076:	2300      	moveq	r3, #0
	return *this;
   b5078:	e7f7      	b.n	b506a <_Z14processCommandPKchb+0x42e>
            if(newBot){
   b507a:	b1c3      	cbz	r3, b50ae <_Z14processCommandPKchb+0x472>
                Serial.println("Found a new water bot ID");
   b507c:	f007 fdb6 	bl	bcbec <_Z16_fetch_usbserialv>
   b5080:	493d      	ldr	r1, [pc, #244]	; (b5178 <_Z14processCommandPKchb+0x53c>)
   b5082:	f007 f846 	bl	bc112 <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b5086:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   b508a:	f7ff fac7 	bl	b461c <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b508e:	2d01      	cmp	r5, #1
   b5090:	d111      	bne.n	b50b6 <_Z14processCommandPKchb+0x47a>
   b5092:	f887 504e 	strb.w	r5, [r7, #78]	; 0x4e
                WaterBots.push_back(newWaterbot);
   b5096:	4837      	ldr	r0, [pc, #220]	; (b5174 <_Z14processCommandPKchb+0x538>)
                newWaterbot.botNum = rxBotID;
   b5098:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
                WaterBots.push_back(newWaterbot);
   b509c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   b50a0:	f7ff fdb2 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b50a4:	4835      	ldr	r0, [pc, #212]	; (b517c <_Z14processCommandPKchb+0x540>)
   b50a6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   b50aa:	f7ff fdad 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b50ae:	4b34      	ldr	r3, [pc, #208]	; (b5180 <_Z14processCommandPKchb+0x544>)
   b50b0:	2201      	movs	r2, #1
   b50b2:	701a      	strb	r2, [r3, #0]
   b50b4:	e789      	b.n	b4fca <_Z14processCommandPKchb+0x38e>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b50b6:	2d02      	cmp	r5, #2
   b50b8:	f04f 0301 	mov.w	r3, #1
   b50bc:	d102      	bne.n	b50c4 <_Z14processCommandPKchb+0x488>
   b50be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   b50c2:	e7e8      	b.n	b5096 <_Z14processCommandPKchb+0x45a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b50c4:	2d03      	cmp	r5, #3
   b50c6:	bf08      	it	eq
   b50c8:	f887 304f 	strbeq.w	r3, [r7, #79]	; 0x4f
   b50cc:	e7e3      	b.n	b5096 <_Z14processCommandPKchb+0x45a>
        else if(!strcmp(cmdStr,"pts")){
   b50ce:	492d      	ldr	r1, [pc, #180]	; (b5184 <_Z14processCommandPKchb+0x548>)
   b50d0:	f107 0024 	add.w	r0, r7, #36	; 0x24
   b50d4:	f009 f819 	bl	be10a <strcmp>
   b50d8:	2800      	cmp	r0, #0
   b50da:	f47f af76 	bne.w	b4fca <_Z14processCommandPKchb+0x38e>
            Serial.println(dataStr);
   b50de:	f007 fd85 	bl	bcbec <_Z16_fetch_usbserialv>
   b50e2:	4641      	mov	r1, r8
   b50e4:	f007 f815 	bl	bc112 <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   b50e8:	f244 2202 	movw	r2, #16898	; 0x4202
   b50ec:	4926      	ldr	r1, [pc, #152]	; (b5188 <_Z14processCommandPKchb+0x54c>)
   b50ee:	4827      	ldr	r0, [pc, #156]	; (b518c <_Z14processCommandPKchb+0x550>)
   b50f0:	f7ff f9a4 	bl	b443c <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b50f4:	4926      	ldr	r1, [pc, #152]	; (b5190 <_Z14processCommandPKchb+0x554>)
   b50f6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   b50fa:	f004 fbea 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
   b50fe:	4925      	ldr	r1, [pc, #148]	; (b5194 <_Z14processCommandPKchb+0x558>)
   b5100:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   b5104:	f004 fbe5 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
   b5108:	4923      	ldr	r1, [pc, #140]	; (b5198 <_Z14processCommandPKchb+0x55c>)
   b510a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
   b510e:	f004 fbe0 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   b5112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   b5116:	eb03 1105 	add.w	r1, r3, r5, lsl #4
   b511a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b511e:	f004 fc23 	bl	b9968 <_ZN6StringC1ERKS_>
   b5122:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   b5126:	491d      	ldr	r1, [pc, #116]	; (b519c <_Z14processCommandPKchb+0x560>)
   b5128:	481d      	ldr	r0, [pc, #116]	; (b51a0 <_Z14processCommandPKchb+0x564>)
   b512a:	f7ff f8be 	bl	b42aa <_ZN5Print6printfEPKcz>
   b512e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b5132:	f004 fb83 	bl	b983c <_ZN6StringD1Ev>
            myFile.println(dataStr);
   b5136:	4641      	mov	r1, r8
   b5138:	4819      	ldr	r0, [pc, #100]	; (b51a0 <_Z14processCommandPKchb+0x564>)
   b513a:	f006 ffea 	bl	bc112 <_ZN5Print7printlnEPKc>
            delay(5);
   b513e:	2005      	movs	r0, #5
   b5140:	f007 f940 	bl	bc3c4 <delay>
            myFile.close();
   b5144:	4811      	ldr	r0, [pc, #68]	; (b518c <_Z14processCommandPKchb+0x550>)
   b5146:	f002 fc37 	bl	b79b8 <_ZN7FatFile5closeEv>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b514a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
   b514e:	f004 fb75 	bl	b983c <_ZN6StringD1Ev>
   b5152:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   b5156:	f004 fb71 	bl	b983c <_ZN6StringD1Ev>
   b515a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   b515e:	f004 fb6d 	bl	b983c <_ZN6StringD1Ev>
        if(sendAck){    //Transmit out acknowledgement if needed
   b5162:	e732      	b.n	b4fca <_Z14processCommandPKchb+0x38e>
   b5164:	000c04c5 	.word	0x000c04c5
   b5168:	2003dd64 	.word	0x2003dd64
   b516c:	2003dd63 	.word	0x2003dd63
   b5170:	000c04c9 	.word	0x000c04c9
   b5174:	2003dcb4 	.word	0x2003dcb4
   b5178:	000c04cd 	.word	0x000c04cd
   b517c:	2003dc98 	.word	0x2003dc98
   b5180:	2003dd4c 	.word	0x2003dd4c
   b5184:	000c04e6 	.word	0x000c04e6
   b5188:	000c04ea 	.word	0x000c04ea
   b518c:	2003de08 	.word	0x2003de08
   b5190:	000c04f7 	.word	0x000c04f7
   b5194:	000c04fb 	.word	0x000c04fb
   b5198:	000c0500 	.word	0x000c0500
   b519c:	000c050a 	.word	0x000c050a
   b51a0:	2003ddf8 	.word	0x2003ddf8

000b51a4 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b51a4:	b510      	push	{r4, lr}
   b51a6:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b51a8:	2200      	movs	r2, #0
   b51aa:	2104      	movs	r1, #4
   b51ac:	4620      	mov	r0, r4
   b51ae:	f7ff fd45 	bl	b4c3c <_Z14processCommandPKchb>
    if(logMessages){
   b51b2:	4b0b      	ldr	r3, [pc, #44]	; (b51e0 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b51b4:	781b      	ldrb	r3, [r3, #0]
   b51b6:	b193      	cbz	r3, b51de <_Z14dataLTEHandlerPKcS0_+0x3a>
   b51b8:	480a      	ldr	r0, [pc, #40]	; (b51e4 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b51ba:	7c03      	ldrb	r3, [r0, #16]
   b51bc:	b92b      	cbnz	r3, b51ca <_Z14dataLTEHandlerPKcS0_+0x26>
   b51be:	490a      	ldr	r1, [pc, #40]	; (b51e8 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b51c0:	f244 2202 	movw	r2, #16898	; 0x4202
   b51c4:	3010      	adds	r0, #16
   b51c6:	f7ff f939 	bl	b443c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b51ca:	4622      	mov	r2, r4
   b51cc:	4907      	ldr	r1, [pc, #28]	; (b51ec <_Z14dataLTEHandlerPKcS0_+0x48>)
   b51ce:	4805      	ldr	r0, [pc, #20]	; (b51e4 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b51d0:	f7ff f8a4 	bl	b431c <_ZN5Print8printlnfEPKcz>
}
   b51d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b51d8:	4805      	ldr	r0, [pc, #20]	; (b51f0 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b51da:	f002 bbed 	b.w	b79b8 <_ZN7FatFile5closeEv>
}
   b51de:	bd10      	pop	{r4, pc}
   b51e0:	2003ddf4 	.word	0x2003ddf4
   b51e4:	2003ddc0 	.word	0x2003ddc0
   b51e8:	2003dd68 	.word	0x2003dd68
   b51ec:	000c051f 	.word	0x000c051f
   b51f0:	2003ddd0 	.word	0x2003ddd0

000b51f4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b51f4:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b51f6:	f101 0308 	add.w	r3, r1, #8
   b51fa:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b51fe:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5200:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5204:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b5206:	460a      	mov	r2, r1
   b5208:	4601      	mov	r1, r0
   b520a:	4668      	mov	r0, sp
   b520c:	f008 fed1 	bl	bdfb2 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5210:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5214:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5216:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b521a:	b113      	cbz	r3, b5222 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b521c:	2300      	movs	r3, #0
   b521e:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b5222:	f007 fce3 	bl	bcbec <_Z16_fetch_usbserialv>
   b5226:	4911      	ldr	r1, [pc, #68]	; (b526c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b5228:	f006 ff60 	bl	bc0ec <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b522c:	f007 fcde 	bl	bcbec <_Z16_fetch_usbserialv>
   b5230:	4629      	mov	r1, r5
   b5232:	f006 ff6e 	bl	bc112 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b5236:	2201      	movs	r2, #1
   b5238:	4611      	mov	r1, r2
   b523a:	4628      	mov	r0, r5
   b523c:	f7ff fcfe 	bl	b4c3c <_Z14processCommandPKchb>
    if(logMessages){
   b5240:	4b0b      	ldr	r3, [pc, #44]	; (b5270 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b5242:	781b      	ldrb	r3, [r3, #0]
   b5244:	b183      	cbz	r3, b5268 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b5246:	480b      	ldr	r0, [pc, #44]	; (b5274 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5248:	7c03      	ldrb	r3, [r0, #16]
   b524a:	b92b      	cbnz	r3, b5258 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b524c:	490a      	ldr	r1, [pc, #40]	; (b5278 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b524e:	f244 2202 	movw	r2, #16898	; 0x4202
   b5252:	3010      	adds	r0, #16
   b5254:	f7ff f8f2 	bl	b443c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b5258:	4908      	ldr	r1, [pc, #32]	; (b527c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b525a:	4806      	ldr	r0, [pc, #24]	; (b5274 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b525c:	462a      	mov	r2, r5
   b525e:	f7ff f85d 	bl	b431c <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5262:	4807      	ldr	r0, [pc, #28]	; (b5280 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b5264:	f002 fba8 	bl	b79b8 <_ZN7FatFile5closeEv>
}
   b5268:	46bd      	mov	sp, r7
   b526a:	bdb0      	pop	{r4, r5, r7, pc}
   b526c:	000c053f 	.word	0x000c053f
   b5270:	2003ddf4 	.word	0x2003ddf4
   b5274:	2003ddc0 	.word	0x2003ddc0
   b5278:	2003dd68 	.word	0x2003dd68
   b527c:	000c0550 	.word	0x000c0550
   b5280:	2003ddd0 	.word	0x2003ddd0

000b5284 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5288:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5378 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b528c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b537c <_Z11XBeeHandlerv+0xf8>
   b5290:	4d35      	ldr	r5, [pc, #212]	; (b5368 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b5292:	b089      	sub	sp, #36	; 0x24
   b5294:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5296:	f007 ff5f 	bl	bd158 <_Z22__fetch_global_Serial1v>
   b529a:	6803      	ldr	r3, [r0, #0]
   b529c:	691b      	ldr	r3, [r3, #16]
   b529e:	4798      	blx	r3
   b52a0:	2800      	cmp	r0, #0
   b52a2:	d05c      	beq.n	b535e <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b52a4:	f007 ff58 	bl	bd158 <_Z22__fetch_global_Serial1v>
   b52a8:	220a      	movs	r2, #10
   b52aa:	4601      	mov	r1, r0
   b52ac:	4638      	mov	r0, r7
   b52ae:	f006 ff9f 	bl	bc1f0 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b52b2:	68bb      	ldr	r3, [r7, #8]
   b52b4:	3307      	adds	r3, #7
   b52b6:	f023 0307 	bic.w	r3, r3, #7
    }
   b52ba:	466e      	mov	r6, sp
        char buffer[data.length()];
   b52bc:	ebad 0d03 	sub.w	sp, sp, r3
   b52c0:	46ea      	mov	sl, sp
   b52c2:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b52c4:	68b9      	ldr	r1, [r7, #8]
   b52c6:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b52ca:	458b      	cmp	fp, r1
   b52cc:	f103 0401 	add.w	r4, r3, #1
   b52d0:	d207      	bcs.n	b52e2 <_Z11XBeeHandlerv+0x5e>
   b52d2:	4659      	mov	r1, fp
   b52d4:	4638      	mov	r0, r7
   b52d6:	f004 fbb3 	bl	b9a40 <_ZNK6String6charAtEj>
   b52da:	4623      	mov	r3, r4
   b52dc:	f80a 000b 	strb.w	r0, [sl, fp]
   b52e0:	e7f0      	b.n	b52c4 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b52e2:	2901      	cmp	r1, #1
   b52e4:	d90a      	bls.n	b52fc <_Z11XBeeHandlerv+0x78>
   b52e6:	3901      	subs	r1, #1
   b52e8:	4638      	mov	r0, r7
   b52ea:	f004 fba9 	bl	b9a40 <_ZNK6String6charAtEj>
   b52ee:	280d      	cmp	r0, #13
   b52f0:	bf01      	itttt	eq
   b52f2:	68bb      	ldreq	r3, [r7, #8]
   b52f4:	4453      	addeq	r3, sl
   b52f6:	2200      	moveq	r2, #0
   b52f8:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b52fc:	2201      	movs	r2, #1
   b52fe:	2102      	movs	r1, #2
   b5300:	4650      	mov	r0, sl
   b5302:	f7ff fc9b 	bl	b4c3c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5306:	f007 fc71 	bl	bcbec <_Z16_fetch_usbserialv>
   b530a:	4641      	mov	r1, r8
   b530c:	f006 ff01 	bl	bc112 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5310:	f007 fc6c 	bl	bcbec <_Z16_fetch_usbserialv>
   b5314:	6839      	ldr	r1, [r7, #0]
   b5316:	f006 fefc 	bl	bc112 <_ZN5Print7printlnEPKc>
        if(logMessages){
   b531a:	f899 3000 	ldrb.w	r3, [r9]
   b531e:	b1cb      	cbz	r3, b5354 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5320:	7c2b      	ldrb	r3, [r5, #16]
   b5322:	b92b      	cbnz	r3, b5330 <_Z11XBeeHandlerv+0xac>
   b5324:	4911      	ldr	r1, [pc, #68]	; (b536c <_Z11XBeeHandlerv+0xe8>)
   b5326:	4812      	ldr	r0, [pc, #72]	; (b5370 <_Z11XBeeHandlerv+0xec>)
   b5328:	f244 2202 	movw	r2, #16898	; 0x4202
   b532c:	f7ff f886 	bl	b443c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5330:	4639      	mov	r1, r7
   b5332:	f107 0010 	add.w	r0, r7, #16
   b5336:	f004 fb17 	bl	b9968 <_ZN6StringC1ERKS_>
   b533a:	490e      	ldr	r1, [pc, #56]	; (b5374 <_Z11XBeeHandlerv+0xf0>)
   b533c:	f107 0210 	add.w	r2, r7, #16
   b5340:	4628      	mov	r0, r5
   b5342:	f7fe ffeb 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b5346:	f107 0010 	add.w	r0, r7, #16
   b534a:	f004 fa77 	bl	b983c <_ZN6StringD1Ev>
            logFile.close();
   b534e:	4808      	ldr	r0, [pc, #32]	; (b5370 <_Z11XBeeHandlerv+0xec>)
   b5350:	f002 fb32 	bl	b79b8 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5354:	4638      	mov	r0, r7
   b5356:	f004 fa71 	bl	b983c <_ZN6StringD1Ev>
   b535a:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b535c:	e79b      	b.n	b5296 <_Z11XBeeHandlerv+0x12>
}
   b535e:	3724      	adds	r7, #36	; 0x24
   b5360:	46bd      	mov	sp, r7
   b5362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5366:	bf00      	nop
   b5368:	2003ddc0 	.word	0x2003ddc0
   b536c:	2003dd68 	.word	0x2003dd68
   b5370:	2003ddd0 	.word	0x2003ddd0
   b5374:	000c0582 	.word	0x000c0582
   b5378:	000c0570 	.word	0x000c0570
   b537c:	2003ddf4 	.word	0x2003ddf4

000b5380 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5384:	4d1e      	ldr	r5, [pc, #120]	; (b5400 <_Z11WaterBotSimh+0x80>)
        WaterBots.push_back(simBot);
   b5386:	f8df a078 	ldr.w	sl, [pc, #120]	; b5400 <_Z11WaterBotSimh+0x80>
   b538a:	e9d5 2300 	ldrd	r2, r3, [r5]
   b538e:	1a9b      	subs	r3, r3, r2
   b5390:	4a1c      	ldr	r2, [pc, #112]	; (b5404 <_Z11WaterBotSimh+0x84>)
   b5392:	109b      	asrs	r3, r3, #2
   b5394:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b5396:	b2dc      	uxtb	r4, r3
   b5398:	4403      	add	r3, r0
   b539a:	2b0a      	cmp	r3, #10
   b539c:	bf84      	itt	hi
   b539e:	f1c4 000a 	rsbhi	r0, r4, #10
   b53a2:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b53a4:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b53a6:	b08e      	sub	sp, #56	; 0x38
    uint8_t botloop = count+WaterBots.size();
   b53a8:	b2c4      	uxtb	r4, r0
   b53aa:	2700      	movs	r7, #0
        simBot.XBeeAvail = true;
   b53ac:	f04f 0901 	mov.w	r9, #1
   b53b0:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b53b4:	4544      	cmp	r4, r8
   b53b6:	d91f      	bls.n	b53f8 <_Z11WaterBotSimh+0x78>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b53b8:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b53bc:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b53be:	4299      	cmp	r1, r3
   b53c0:	d005      	beq.n	b53ce <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b53c2:	f813 2b34 	ldrb.w	r2, [r3], #52
   b53c6:	4542      	cmp	r2, r8
   b53c8:	bf08      	it	eq
   b53ca:	2601      	moveq	r6, #1
	return *this;
   b53cc:	e7f7      	b.n	b53be <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b53ce:	b98e      	cbnz	r6, b53f4 <_Z11WaterBotSimh+0x74>
        WaterBot simBot;
   b53d0:	a801      	add	r0, sp, #4
   b53d2:	f7ff f923 	bl	b461c <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b53d6:	2064      	movs	r0, #100	; 0x64
        simBot.botNum = temp;
   b53d8:	f88d 8004 	strb.w	r8, [sp, #4]
        simBot.BLEAvail = false;
   b53dc:	f8ad 6006 	strh.w	r6, [sp, #6]
        simBot.XBeeAvail = true;
   b53e0:	f88d 9008 	strb.w	r9, [sp, #8]
        simBot.battPercent = random(100);
   b53e4:	f007 fd64 	bl	bceb0 <_Z6randomi>
        WaterBots.push_back(simBot);
   b53e8:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b53ea:	f88d 0005 	strb.w	r0, [sp, #5]
        WaterBots.push_back(simBot);
   b53ee:	4650      	mov	r0, sl
   b53f0:	f7ff fc0a 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b53f4:	3701      	adds	r7, #1
   b53f6:	e7db      	b.n	b53b0 <_Z11WaterBotSimh+0x30>
}
   b53f8:	b00e      	add	sp, #56	; 0x38
   b53fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b53fe:	bf00      	nop
   b5400:	2003dcb4 	.word	0x2003dcb4
   b5404:	c4ec4ec5 	.word	0xc4ec4ec5

000b5408 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b540c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5410:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5412:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5416:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b541a:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b541e:	4607      	mov	r7, r0
   b5420:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5422:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5426:	d102      	bne.n	b542e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5428:	4820      	ldr	r0, [pc, #128]	; (b54ac <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b542a:	f007 fefa 	bl	bd222 <_ZSt20__throw_length_errorPKc>
   b542e:	2c01      	cmp	r4, #1
   b5430:	4622      	mov	r2, r4
   b5432:	bf38      	it	cc
   b5434:	2201      	movcc	r2, #1
   b5436:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5438:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b543c:	d231      	bcs.n	b54a2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b543e:	b394      	cbz	r4, b54a6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5440:	429c      	cmp	r4, r3
   b5442:	bf28      	it	cs
   b5444:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5446:	00e0      	lsls	r0, r4, #3
   b5448:	f7fe fe25 	bl	b4096 <_Znwj>
   b544c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b544e:	1973      	adds	r3, r6, r5
   b5450:	bf1c      	itt	ne
   b5452:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5456:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b545a:	2d00      	cmp	r5, #0
   b545c:	dd04      	ble.n	b5468 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b545e:	462a      	mov	r2, r5
   b5460:	4641      	mov	r1, r8
   b5462:	4630      	mov	r0, r6
   b5464:	f008 fdb3 	bl	bdfce <memmove>
      ptrdiff_t __count = __last - __first;
   b5468:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b546c:	3508      	adds	r5, #8
      if (__count > 0)
   b546e:	f1b9 0f00 	cmp.w	r9, #0
   b5472:	4435      	add	r5, r6
   b5474:	dd04      	ble.n	b5480 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5476:	464a      	mov	r2, r9
   b5478:	4651      	mov	r1, sl
   b547a:	4628      	mov	r0, r5
   b547c:	f008 fd99 	bl	bdfb2 <memcpy>
      return __result + __count;
   b5480:	444d      	add	r5, r9
	if (__p)
   b5482:	f1b8 0f00 	cmp.w	r8, #0
   b5486:	d005      	beq.n	b5494 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5488:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b548a:	4640      	mov	r0, r8
   b548c:	eba1 0108 	sub.w	r1, r1, r8
   b5490:	f7fe fe05 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5494:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5498:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b549c:	60bc      	str	r4, [r7, #8]
    }
   b549e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b54a2:	461c      	mov	r4, r3
   b54a4:	e7cf      	b.n	b5446 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b54a6:	4626      	mov	r6, r4
   b54a8:	e7d1      	b.n	b544e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b54aa:	bf00      	nop
   b54ac:	000c02ff 	.word	0x000c02ff

000b54b0 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b54b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54b4:	b0b3      	sub	sp, #204	; 0xcc
   b54b6:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b54b8:	f004 ffc6 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b54bc:	4984      	ldr	r1, [pc, #528]	; (b56d0 <_Z7BLEScani+0x220>)
   b54be:	2214      	movs	r2, #20
   b54c0:	f005 f8ba 	bl	ba638 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b54c4:	4680      	mov	r8, r0
   b54c6:	2800      	cmp	r0, #0
   b54c8:	f000 80ff 	beq.w	b56ca <_Z7BLEScani+0x21a>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b54cc:	f8df b200 	ldr.w	fp, [pc, #512]	; b56d0 <_Z7BLEScani+0x220>
		for (uint8_t ii = 0; ii < count; ii++) {
   b54d0:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b54d2:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b54d6:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b54da:	f109 0708 	add.w	r7, r9, #8
   b54de:	a80b      	add	r0, sp, #44	; 0x2c
   b54e0:	445f      	add	r7, fp
   b54e2:	f004 fc15 	bl	b9d10 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b54e6:	2201      	movs	r2, #1
   b54e8:	a90b      	add	r1, sp, #44	; 0x2c
   b54ea:	4638      	mov	r0, r7
   b54ec:	f005 ff6c 	bl	bb3c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b54f0:	4682      	mov	sl, r0
   b54f2:	2800      	cmp	r0, #0
   b54f4:	d056      	beq.n	b55a4 <_Z7BLEScani+0xf4>
   b54f6:	4977      	ldr	r1, [pc, #476]	; (b56d4 <_Z7BLEScani+0x224>)
   b54f8:	a80b      	add	r0, sp, #44	; 0x2c
   b54fa:	f004 fc64 	bl	b9dc6 <_ZNK8particle7BleUuideqERKS0_>
   b54fe:	4605      	mov	r5, r0
   b5500:	2800      	cmp	r0, #0
   b5502:	d04f      	beq.n	b55a4 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5504:	2208      	movs	r2, #8
   b5506:	a909      	add	r1, sp, #36	; 0x24
   b5508:	4638      	mov	r0, r7
   b550a:	f004 fdb9 	bl	ba080 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b550e:	1cb2      	adds	r2, r6, #2
   b5510:	d153      	bne.n	b55ba <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b5512:	f007 fb6b 	bl	bcbec <_Z16_fetch_usbserialv>
   b5516:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b551a:	9305      	str	r3, [sp, #20]
   b551c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b5520:	9304      	str	r3, [sp, #16]
   b5522:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b5526:	9303      	str	r3, [sp, #12]
   b5528:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b552c:	9302      	str	r3, [sp, #8]
   b552e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
      : _M_current(__i) { }
   b5532:	4f69      	ldr	r7, [pc, #420]	; (b56d8 <_Z7BLEScani+0x228>)
   b5534:	9301      	str	r3, [sp, #4]
   b5536:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b553a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b553e:	4967      	ldr	r1, [pc, #412]	; (b56dc <_Z7BLEScani+0x22c>)
   b5540:	9300      	str	r3, [sp, #0]
   b5542:	f8cd a018 	str.w	sl, [sp, #24]
   b5546:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b554a:	f7fe fee7 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b554e:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b5550:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   b5554:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b5556:	4293      	cmp	r3, r2
   b5558:	d005      	beq.n	b5566 <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b555a:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b555e:	4288      	cmp	r0, r1
   b5560:	bf08      	it	eq
   b5562:	2500      	moveq	r5, #0
	return *this;
   b5564:	e7f7      	b.n	b5556 <_Z7BLEScani+0xa6>
                    if(newBot){
   b5566:	b1ed      	cbz	r5, b55a4 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b5568:	2224      	movs	r2, #36	; 0x24
   b556a:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b556e:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
                        NewBot.rssi = scanResults[ii].rssi();
   b5572:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b5576:	9226      	str	r2, [sp, #152]	; 0x98
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5578:	68ba      	ldr	r2, [r7, #8]
   b557a:	4293      	cmp	r3, r2
   b557c:	d017      	beq.n	b55ae <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b557e:	b11b      	cbz	r3, b5588 <_Z7BLEScani+0xd8>
   b5580:	e9dd 0125 	ldrd	r0, r1, [sp, #148]	; 0x94
   b5584:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5588:	687b      	ldr	r3, [r7, #4]
   b558a:	3308      	adds	r3, #8
   b558c:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b558e:	f007 fb2d 	bl	bcbec <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5592:	e9d7 2300 	ldrd	r2, r3, [r7]
   b5596:	1a9b      	subs	r3, r3, r2
   b5598:	4951      	ldr	r1, [pc, #324]	; (b56e0 <_Z7BLEScani+0x230>)
   b559a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b559e:	10db      	asrs	r3, r3, #3
   b55a0:	f7fe febc 	bl	b431c <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b55a4:	3401      	adds	r4, #1
   b55a6:	b2e4      	uxtb	r4, r4
   b55a8:	4544      	cmp	r4, r8
   b55aa:	d392      	bcc.n	b54d2 <_Z7BLEScani+0x22>
   b55ac:	e08d      	b.n	b56ca <_Z7BLEScani+0x21a>
	  _M_realloc_insert(end(), __x);
   b55ae:	484a      	ldr	r0, [pc, #296]	; (b56d8 <_Z7BLEScani+0x228>)
   b55b0:	aa25      	add	r2, sp, #148	; 0x94
   b55b2:	4619      	mov	r1, r3
   b55b4:	f7ff ff28 	bl	b5408 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b55b8:	e7e9      	b.n	b558e <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b55ba:	1c73      	adds	r3, r6, #1
   b55bc:	d003      	beq.n	b55c6 <_Z7BLEScani+0x116>
   b55be:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b55c2:	42b3      	cmp	r3, r6
   b55c4:	d1ee      	bne.n	b55a4 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b55c6:	f004 ff3f 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55ca:	f10d 0894 	add.w	r8, sp, #148	; 0x94
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b55ce:	4d45      	ldr	r5, [pc, #276]	; (b56e4 <_Z7BLEScani+0x234>)
   b55d0:	4601      	mov	r1, r0
   b55d2:	2301      	movs	r3, #1
   b55d4:	eb0b 0209 	add.w	r2, fp, r9
   b55d8:	4640      	mov	r0, r8
   b55da:	f006 fb2d 	bl	bbc38 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b55de:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b55e0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   b55e2:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b55e4:	686b      	ldr	r3, [r5, #4]
   b55e6:	429c      	cmp	r4, r3
   b55e8:	d008      	beq.n	b55fc <_Z7BLEScani+0x14c>
	    if (__tmp != 0)
   b55ea:	b114      	cbz	r4, b55f2 <_Z7BLEScani+0x142>
    { ++_M_use_count; }
   b55ec:	6863      	ldr	r3, [r4, #4]
   b55ee:	3301      	adds	r3, #1
   b55f0:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b55f2:	6868      	ldr	r0, [r5, #4]
   b55f4:	b108      	cbz	r0, b55fa <_Z7BLEScani+0x14a>
	      _M_pi->_M_release();
   b55f6:	f7fe fedd 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b55fa:	606c      	str	r4, [r5, #4]
   b55fc:	4640      	mov	r0, r8
   b55fe:	f005 f892 	bl	ba726 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5602:	4838      	ldr	r0, [pc, #224]	; (b56e4 <_Z7BLEScani+0x234>)
   b5604:	f004 fe92 	bl	ba32c <_ZNK8particle13BlePeerDevice9connectedEv>
   b5608:	4606      	mov	r6, r0
   b560a:	2800      	cmp	r0, #0
   b560c:	d05d      	beq.n	b56ca <_Z7BLEScani+0x21a>
                        meshPair = false;
   b560e:	4b36      	ldr	r3, [pc, #216]	; (b56e8 <_Z7BLEScani+0x238>)
      : _M_current(__i) { }
   b5610:	f8df 9100 	ldr.w	r9, [pc, #256]	; b5714 <_Z7BLEScani+0x264>
   b5614:	2200      	movs	r2, #0
   b5616:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b5618:	4b34      	ldr	r3, [pc, #208]	; (b56ec <_Z7BLEScani+0x23c>)
   b561a:	f04f 0a01 	mov.w	sl, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b561e:	221f      	movs	r2, #31
   b5620:	a910      	add	r1, sp, #64	; 0x40
   b5622:	4638      	mov	r0, r7
                        startConnect = true;
   b5624:	f883 a000 	strb.w	sl, [r3]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5628:	f004 fd2a 	bl	ba080 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b562c:	4a30      	ldr	r2, [pc, #192]	; (b56f0 <_Z7BLEScani+0x240>)
   b562e:	4931      	ldr	r1, [pc, #196]	; (b56f4 <_Z7BLEScani+0x244>)
   b5630:	482c      	ldr	r0, [pc, #176]	; (b56e4 <_Z7BLEScani+0x234>)
   b5632:	f005 ff95 	bl	bb560 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5636:	4a30      	ldr	r2, [pc, #192]	; (b56f8 <_Z7BLEScani+0x248>)
   b5638:	4930      	ldr	r1, [pc, #192]	; (b56fc <_Z7BLEScani+0x24c>)
   b563a:	482a      	ldr	r0, [pc, #168]	; (b56e4 <_Z7BLEScani+0x234>)
   b563c:	f005 ff90 	bl	bb560 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5640:	4a2f      	ldr	r2, [pc, #188]	; (b5700 <_Z7BLEScani+0x250>)
   b5642:	4930      	ldr	r1, [pc, #192]	; (b5704 <_Z7BLEScani+0x254>)
   b5644:	4827      	ldr	r0, [pc, #156]	; (b56e4 <_Z7BLEScani+0x234>)
   b5646:	f005 ff8b 	bl	bb560 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b564a:	f007 facf 	bl	bcbec <_Z16_fetch_usbserialv>
   b564e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b5652:	492d      	ldr	r1, [pc, #180]	; (b5708 <_Z7BLEScani+0x258>)
   b5654:	f7fe fe62 	bl	b431c <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b5658:	a818      	add	r0, sp, #96	; 0x60
   b565a:	f7fe ffdf 	bl	b461c <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b565e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
                        PairBots.push_back(newWaterbot);
   b5662:	482a      	ldr	r0, [pc, #168]	; (b570c <_Z7BLEScani+0x25c>)
                        newWaterbot.BLEAvail = true;
   b5664:	f88d a062 	strb.w	sl, [sp, #98]	; 0x62
                        PairBots.push_back(newWaterbot);
   b5668:	a918      	add	r1, sp, #96	; 0x60
                        newWaterbot.botNum = bufName[0];
   b566a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                        PairBots.push_back(newWaterbot);
   b566e:	f7ff facb 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5672:	e9d9 7c00 	ldrd	r7, ip, [r9]
                                BLEBot = &w;
   b5676:	f8df e0a0 	ldr.w	lr, [pc, #160]	; b5718 <_Z7BLEScani+0x268>
                        for(WaterBot w: WaterBots){
   b567a:	45bc      	cmp	ip, r7
   b567c:	d016      	beq.n	b56ac <_Z7BLEScani+0x1fc>
   b567e:	463d      	mov	r5, r7
   b5680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5682:	4644      	mov	r4, r8
   b5684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b568a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b568c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b568e:	682b      	ldr	r3, [r5, #0]
   b5690:	6023      	str	r3, [r4, #0]
                            if(bufName[0] == w.botNum){
   b5692:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b5696:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   b569a:	429a      	cmp	r2, r3
                                w.BLEAvail = true;
   b569c:	bf02      	ittt	eq
   b569e:	f88d a096 	strbeq.w	sl, [sp, #150]	; 0x96
                                BLEBot = &w;
   b56a2:	f8ce 8000 	streq.w	r8, [lr]
                                newBot = false;
   b56a6:	2600      	moveq	r6, #0
      operator++() _GLIBCXX_NOEXCEPT
   b56a8:	3734      	adds	r7, #52	; 0x34
	return *this;
   b56aa:	e7e6      	b.n	b567a <_Z7BLEScani+0x1ca>
                        if(newBot){
   b56ac:	b16e      	cbz	r6, b56ca <_Z7BLEScani+0x21a>
                            Serial.println("Found a new water bot ID");
   b56ae:	f007 fa9d 	bl	bcbec <_Z16_fetch_usbserialv>
   b56b2:	4917      	ldr	r1, [pc, #92]	; (b5710 <_Z7BLEScani+0x260>)
   b56b4:	f006 fd2d 	bl	bc112 <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b56b8:	4816      	ldr	r0, [pc, #88]	; (b5714 <_Z7BLEScani+0x264>)
   b56ba:	a918      	add	r1, sp, #96	; 0x60
   b56bc:	f7ff faa4 	bl	b4c08 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b56c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
                            BLEBot = &WaterBots.back();
   b56c4:	4a14      	ldr	r2, [pc, #80]	; (b5718 <_Z7BLEScani+0x268>)
   b56c6:	3b34      	subs	r3, #52	; 0x34
   b56c8:	6013      	str	r3, [r2, #0]
}
   b56ca:	b033      	add	sp, #204	; 0xcc
   b56cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56d0:	2003dee0 	.word	0x2003dee0
   b56d4:	2003dcc0 	.word	0x2003dcc0
   b56d8:	2003dc78 	.word	0x2003dc78
   b56dc:	000c05a3 	.word	0x000c05a3
   b56e0:	000c05d6 	.word	0x000c05d6
   b56e4:	2003debc 	.word	0x2003debc
   b56e8:	2003ddf6 	.word	0x2003ddf6
   b56ec:	2003e634 	.word	0x2003e634
   b56f0:	2003dce8 	.word	0x2003dce8
   b56f4:	2003ded4 	.word	0x2003ded4
   b56f8:	2003dcd4 	.word	0x2003dcd4
   b56fc:	2003decc 	.word	0x2003decc
   b5700:	2003dd00 	.word	0x2003dd00
   b5704:	2003dec4 	.word	0x2003dec4
   b5708:	000c05e8 	.word	0x000c05e8
   b570c:	2003dc98 	.word	0x2003dc98
   b5710:	000c04cd 	.word	0x000c04cd
   b5714:	2003dcb4 	.word	0x2003dcb4
   b5718:	2003dc74 	.word	0x2003dc74

000b571c <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b571c:	b530      	push	{r4, r5, lr}
    if (!logDir.open("/")) {
   b571e:	4938      	ldr	r1, [pc, #224]	; (b5800 <_Z13DataOffloaderh+0xe4>)
void DataOffloader(uint8_t bot_id){
   b5720:	b087      	sub	sp, #28
   b5722:	4605      	mov	r5, r0
    if (!logDir.open("/")) {
   b5724:	2200      	movs	r2, #0
   b5726:	4837      	ldr	r0, [pc, #220]	; (b5804 <_Z13DataOffloaderh+0xe8>)
   b5728:	f7fe fe88 	bl	b443c <_ZN7FatFile4openEPKci>
   b572c:	b950      	cbnz	r0, b5744 <_Z13DataOffloaderh+0x28>
        offloadingDone = true;
   b572e:	4b36      	ldr	r3, [pc, #216]	; (b5808 <_Z13DataOffloaderh+0xec>)
   b5730:	2201      	movs	r2, #1
   b5732:	701a      	strb	r2, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5734:	f007 fa5a 	bl	bcbec <_Z16_fetch_usbserialv>
   b5738:	4934      	ldr	r1, [pc, #208]	; (b580c <_Z13DataOffloaderh+0xf0>)
}
   b573a:	b007      	add	sp, #28
   b573c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5740:	f006 bce7 	b.w	bc112 <_ZN5Print7printlnEPKc>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5744:	4a32      	ldr	r2, [pc, #200]	; (b5810 <_Z13DataOffloaderh+0xf4>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5746:	4c33      	ldr	r4, [pc, #204]	; (b5814 <_Z13DataOffloaderh+0xf8>)
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5748:	462b      	mov	r3, r5
   b574a:	210a      	movs	r1, #10
   b574c:	a803      	add	r0, sp, #12
   b574e:	f003 ff1f 	bl	b9590 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b5752:	2300      	movs	r3, #0
   b5754:	4619      	mov	r1, r3
   b5756:	9300      	str	r3, [sp, #0]
   b5758:	2201      	movs	r2, #1
   b575a:	a803      	add	r0, sp, #12
   b575c:	f7fe ff86 	bl	b466c <_Z8sendDataPKchbbb>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5760:	f007 fa44 	bl	bcbec <_Z16_fetch_usbserialv>
   b5764:	6823      	ldr	r3, [r4, #0]
   b5766:	492c      	ldr	r1, [pc, #176]	; (b5818 <_Z13DataOffloaderh+0xfc>)
   b5768:	781a      	ldrb	r2, [r3, #0]
   b576a:	f7fe fdd7 	bl	b431c <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b576e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5772:	f006 fe27 	bl	bc3c4 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5776:	6823      	ldr	r3, [r4, #0]
   b5778:	781b      	ldrb	r3, [r3, #0]
   b577a:	42ab      	cmp	r3, r5
   b577c:	d01e      	beq.n	b57bc <_Z13DataOffloaderh+0xa0>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b577e:	f007 fa35 	bl	bcbec <_Z16_fetch_usbserialv>
   b5782:	6822      	ldr	r2, [r4, #0]
   b5784:	4925      	ldr	r1, [pc, #148]	; (b581c <_Z13DataOffloaderh+0x100>)
   b5786:	7812      	ldrb	r2, [r2, #0]
   b5788:	462b      	mov	r3, r5
   b578a:	f7fe fdc7 	bl	b431c <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b578e:	f004 fe5b 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5792:	f005 fc77 	bl	bb084 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b5796:	f004 fe57 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b579a:	f004 ff02 	bl	ba5a2 <_ZNK8particle14BleLocalDevice9connectedEv>
   b579e:	b930      	cbnz	r0, b57ae <_Z13DataOffloaderh+0x92>
                BLEScan(OffloadingBot);
   b57a0:	4628      	mov	r0, r5
   b57a2:	f7ff fe85 	bl	b54b0 <_Z7BLEScani>
                delay(50);
   b57a6:	2032      	movs	r0, #50	; 0x32
   b57a8:	f006 fe0c 	bl	bc3c4 <delay>
            while(!BLE.connected()){
   b57ac:	e7f3      	b.n	b5796 <_Z13DataOffloaderh+0x7a>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b57ae:	f007 fa1d 	bl	bcbec <_Z16_fetch_usbserialv>
   b57b2:	6823      	ldr	r3, [r4, #0]
   b57b4:	491a      	ldr	r1, [pc, #104]	; (b5820 <_Z13DataOffloaderh+0x104>)
   b57b6:	781a      	ldrb	r2, [r3, #0]
   b57b8:	f7fe fdb0 	bl	b431c <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b57bc:	f007 fa16 	bl	bcbec <_Z16_fetch_usbserialv>
   b57c0:	6823      	ldr	r3, [r4, #0]
   b57c2:	4918      	ldr	r1, [pc, #96]	; (b5824 <_Z13DataOffloaderh+0x108>)
   b57c4:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b57c6:	4d10      	ldr	r5, [pc, #64]	; (b5808 <_Z13DataOffloaderh+0xec>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b57c8:	f7fe fda8 	bl	b431c <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b57cc:	2300      	movs	r3, #0
   b57ce:	702b      	strb	r3, [r5, #0]
        while(!offloadingDone) delay(100);
   b57d0:	2064      	movs	r0, #100	; 0x64
   b57d2:	f006 fdf7 	bl	bc3c4 <delay>
   b57d6:	782b      	ldrb	r3, [r5, #0]
   b57d8:	2b00      	cmp	r3, #0
   b57da:	d0f9      	beq.n	b57d0 <_Z13DataOffloaderh+0xb4>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b57dc:	f007 fa06 	bl	bcbec <_Z16_fetch_usbserialv>
   b57e0:	6823      	ldr	r3, [r4, #0]
   b57e2:	4911      	ldr	r1, [pc, #68]	; (b5828 <_Z13DataOffloaderh+0x10c>)
   b57e4:	781a      	ldrb	r2, [r3, #0]
   b57e6:	f7fe fd99 	bl	b431c <_ZN5Print8printlnfEPKcz>
   b57ea:	4810      	ldr	r0, [pc, #64]	; (b582c <_Z13DataOffloaderh+0x110>)
    if(logDir.isOpen()) logDir.close();
   b57ec:	7c03      	ldrb	r3, [r0, #16]
   b57ee:	b113      	cbz	r3, b57f6 <_Z13DataOffloaderh+0xda>
   b57f0:	3010      	adds	r0, #16
   b57f2:	f002 f8e1 	bl	b79b8 <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b57f6:	4b0e      	ldr	r3, [pc, #56]	; (b5830 <_Z13DataOffloaderh+0x114>)
   b57f8:	2200      	movs	r2, #0
   b57fa:	701a      	strb	r2, [r3, #0]
}
   b57fc:	b007      	add	sp, #28
   b57fe:	bd30      	pop	{r4, r5, pc}
   b5800:	000c05fc 	.word	0x000c05fc
   b5804:	2003dd9c 	.word	0x2003dd9c
   b5808:	2003de4a 	.word	0x2003de4a
   b580c:	000c05fe 	.word	0x000c05fe
   b5810:	000c063f 	.word	0x000c063f
   b5814:	2003dc74 	.word	0x2003dc74
   b5818:	000c0648 	.word	0x000c0648
   b581c:	000c0675 	.word	0x000c0675
   b5820:	000c06ae 	.word	0x000c06ae
   b5824:	000c06cf 	.word	0x000c06cf
   b5828:	000c06f2 	.word	0x000c06f2
   b582c:	2003dd8c 	.word	0x2003dd8c
   b5830:	2003de4b 	.word	0x2003de4b

000b5834 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5838:	6843      	ldr	r3, [r0, #4]
   b583a:	f8d0 8000 	ldr.w	r8, [r0]
   b583e:	9301      	str	r3, [sp, #4]
   b5840:	eba3 0408 	sub.w	r4, r3, r8
   b5844:	4b40      	ldr	r3, [pc, #256]	; (b5948 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>)
   b5846:	10e4      	asrs	r4, r4, #3
   b5848:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b584a:	4b40      	ldr	r3, [pc, #256]	; (b594c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b584c:	429c      	cmp	r4, r3
   b584e:	4607      	mov	r7, r0
   b5850:	4689      	mov	r9, r1
   b5852:	4692      	mov	sl, r2
   b5854:	d102      	bne.n	b585c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b5856:	483e      	ldr	r0, [pc, #248]	; (b5950 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b5858:	f007 fce3 	bl	bd222 <_ZSt20__throw_length_errorPKc>
   b585c:	2c01      	cmp	r4, #1
   b585e:	4622      	mov	r2, r4
   b5860:	bf38      	it	cc
   b5862:	2201      	movcc	r2, #1
   b5864:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5866:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b586a:	d229      	bcs.n	b58c0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b586c:	b354      	cbz	r4, b58c4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b586e:	429c      	cmp	r4, r3
   b5870:	bf28      	it	cs
   b5872:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5874:	2018      	movs	r0, #24
   b5876:	4360      	muls	r0, r4
   b5878:	f7fe fc0d 	bl	b4096 <_Znwj>
   b587c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b587e:	eb16 0c05 	adds.w	ip, r6, r5
   b5882:	bf1f      	itttt	ne
   b5884:	e8ba 000f 	ldmiane.w	sl!, {r0, r1, r2, r3}
   b5888:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b588c:	e9da 0100 	ldrdne	r0, r1, [sl]
   b5890:	e9cc 0100 	strdne	r0, r1, [ip]
   b5894:	46b2      	mov	sl, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5896:	46c3      	mov	fp, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b5898:	45d9      	cmp	r9, fp
   b589a:	d015      	beq.n	b58c8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b589c:	f1ba 0f00 	cmp.w	sl, #0
   b58a0:	d009      	beq.n	b58b6 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b58a2:	46de      	mov	lr, fp
   b58a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b58a8:	46d4      	mov	ip, sl
   b58aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b58ae:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b58b2:	e88c 0003 	stmia.w	ip, {r0, r1}
   b58b6:	f10b 0b18 	add.w	fp, fp, #24
   b58ba:	f10a 0a18 	add.w	sl, sl, #24
   b58be:	e7eb      	b.n	b5898 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b58c0:	461c      	mov	r4, r3
   b58c2:	e7d7      	b.n	b5874 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b58c4:	4626      	mov	r6, r4
   b58c6:	e7da      	b.n	b587e <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b58c8:	f8df a088 	ldr.w	sl, [pc, #136]	; b5954 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
   b58cc:	08ed      	lsrs	r5, r5, #3
   b58ce:	fb0a f505 	mul.w	r5, sl, r5
   b58d2:	2318      	movs	r3, #24
   b58d4:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
   b58d8:	435d      	muls	r5, r3
   b58da:	eb08 0b05 	add.w	fp, r8, r5
	      ++__new_finish;
   b58de:	441d      	add	r5, r3
   b58e0:	1973      	adds	r3, r6, r5
   b58e2:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b58e4:	4699      	mov	r9, r3
   b58e6:	465d      	mov	r5, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b58e8:	9b01      	ldr	r3, [sp, #4]
   b58ea:	429d      	cmp	r5, r3
   b58ec:	f109 0918 	add.w	r9, r9, #24
   b58f0:	d00c      	beq.n	b590c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
   b58f2:	46ae      	mov	lr, r5
   b58f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b58f8:	f1a9 0c18 	sub.w	ip, r9, #24
   b58fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5900:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b5904:	3518      	adds	r5, #24
   b5906:	e88c 0003 	stmia.w	ip, {r0, r1}
   b590a:	e7ed      	b.n	b58e8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
   b590c:	eba5 050b 	sub.w	r5, r5, fp
   b5910:	08ed      	lsrs	r5, r5, #3
   b5912:	fb0a fa05 	mul.w	sl, sl, r5
   b5916:	9b00      	ldr	r3, [sp, #0]
   b5918:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
   b591c:	2518      	movs	r5, #24
   b591e:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
   b5922:	f1b8 0f00 	cmp.w	r8, #0
   b5926:	d005      	beq.n	b5934 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5928:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b592a:	4640      	mov	r0, r8
   b592c:	eba1 0108 	sub.w	r1, r1, r8
   b5930:	f7fe fbb5 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5934:	2018      	movs	r0, #24
   b5936:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b593a:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b593e:	60bc      	str	r4, [r7, #8]
    }
   b5940:	b003      	add	sp, #12
   b5942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5946:	bf00      	nop
   b5948:	aaaaaaab 	.word	0xaaaaaaab
   b594c:	05555555 	.word	0x05555555
   b5950:	000c02ff 	.word	0x000c02ff
   b5954:	0aaaaaab 	.word	0x0aaaaaab

000b5958 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5958:	b570      	push	{r4, r5, r6, lr}
   b595a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b595c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5960:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b5962:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5964:	d00c      	beq.n	b5980 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5966:	b139      	cbz	r1, b5978 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x20>
   b5968:	4615      	mov	r5, r2
   b596a:	460c      	mov	r4, r1
   b596c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b596e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5970:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5974:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5978:	6873      	ldr	r3, [r6, #4]
   b597a:	3318      	adds	r3, #24
   b597c:	6073      	str	r3, [r6, #4]
      }
   b597e:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b5980:	f7ff ff58 	bl	b5834 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b5984:	e7fb      	b.n	b597e <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x26>
	...

000b5988 <_Z10createMenuv>:
void createMenu(){
   b5988:	b530      	push	{r4, r5, lr}
   b598a:	b099      	sub	sp, #100	; 0x64
            strcpy(itemName,itemString);
   b598c:	4922      	ldr	r1, [pc, #136]	; (b5a18 <_Z10createMenuv+0x90>)
   b598e:	f10d 000d 	add.w	r0, sp, #13
   b5992:	f008 fbc4 	bl	be11e <strcpy>
            maxVal = maxV;
   b5996:	2401      	movs	r4, #1
            stepSize = inStep;
   b5998:	f240 1501 	movw	r5, #257	; 0x101
   b599c:	2307      	movs	r3, #7
            strcpy(itemName,itemString);
   b599e:	491f      	ldr	r1, [pc, #124]	; (b5a1c <_Z10createMenuv+0x94>)
            maxVal = maxV;
   b59a0:	f88d 400c 	strb.w	r4, [sp, #12]
            strcpy(itemName,itemString);
   b59a4:	f10d 0025 	add.w	r0, sp, #37	; 0x25
            stepSize = inStep;
   b59a8:	e9cd 3501 	strd	r3, r5, [sp, #4]
            strcpy(itemName,itemString);
   b59ac:	f008 fbb7 	bl	be11e <strcpy>
            stepSize = inStep;
   b59b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b59b4:	9308      	str	r3, [sp, #32]
            strcpy(itemName,itemString);
   b59b6:	491a      	ldr	r1, [pc, #104]	; (b5a20 <_Z10createMenuv+0x98>)
    battStat.MethodPointer = &WaterBot::battPercent;
   b59b8:	9406      	str	r4, [sp, #24]
            maxVal = maxV;
   b59ba:	2364      	movs	r3, #100	; 0x64
            strcpy(itemName,itemString);
   b59bc:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
            maxVal = maxV;
   b59c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            strcpy(itemName,itemString);
   b59c4:	f008 fbab 	bl	be11e <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b59c8:	2308      	movs	r3, #8
            strcpy(itemName,itemString);
   b59ca:	4916      	ldr	r1, [pc, #88]	; (b5a24 <_Z10createMenuv+0x9c>)
            maxVal = maxV;
   b59cc:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
            strcpy(itemName,itemString);
   b59d0:	f10d 0055 	add.w	r0, sp, #85	; 0x55
            stepSize = inStep;
   b59d4:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
   b59d8:	9514      	str	r5, [sp, #80]	; 0x50
            maxVal = maxV;
   b59da:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
            strcpy(itemName,itemString);
   b59de:	f008 fb9e 	bl	be11e <strcpy>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b59e2:	2305      	movs	r3, #5
    MenuItems.push_back(dataRecord);
   b59e4:	4669      	mov	r1, sp
   b59e6:	4810      	ldr	r0, [pc, #64]	; (b5a28 <_Z10createMenuv+0xa0>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b59e8:	9312      	str	r3, [sp, #72]	; 0x48
    MenuItems.push_back(dataRecord);
   b59ea:	f7ff ffb5 	bl	b5958 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b59ee:	a906      	add	r1, sp, #24
   b59f0:	480d      	ldr	r0, [pc, #52]	; (b5a28 <_Z10createMenuv+0xa0>)
   b59f2:	f7ff ffb1 	bl	b5958 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b59f6:	a90c      	add	r1, sp, #48	; 0x30
   b59f8:	480b      	ldr	r0, [pc, #44]	; (b5a28 <_Z10createMenuv+0xa0>)
   b59fa:	f7ff ffad 	bl	b5958 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b59fe:	a912      	add	r1, sp, #72	; 0x48
   b5a00:	4809      	ldr	r0, [pc, #36]	; (b5a28 <_Z10createMenuv+0xa0>)
   b5a02:	f7ff ffa9 	bl	b5958 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b5a06:	4b09      	ldr	r3, [pc, #36]	; (b5a2c <_Z10createMenuv+0xa4>)
   b5a08:	4807      	ldr	r0, [pc, #28]	; (b5a28 <_Z10createMenuv+0xa0>)
   b5a0a:	7819      	ldrb	r1, [r3, #0]
   b5a0c:	f7fe fffc 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5a10:	4b07      	ldr	r3, [pc, #28]	; (b5a30 <_Z10createMenuv+0xa8>)
   b5a12:	6018      	str	r0, [r3, #0]
}
   b5a14:	b019      	add	sp, #100	; 0x64
   b5a16:	bd30      	pop	{r4, r5, pc}
   b5a18:	000c0719 	.word	0x000c0719
   b5a1c:	000c0720 	.word	0x000c0720
   b5a20:	000c0728 	.word	0x000c0728
   b5a24:	000c0730 	.word	0x000c0730
   b5a28:	2003dc8c 	.word	0x2003dc8c
   b5a2c:	2003ddf5 	.word	0x2003ddf5
   b5a30:	2003dca4 	.word	0x2003dca4

000b5a34 <setup>:
void setup() {
   b5a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLUP);
   b5a38:	2102      	movs	r1, #2
void setup() {
   b5a3a:	b090      	sub	sp, #64	; 0x40
    pinMode(E_DPAD,INPUT_PULLUP);
   b5a3c:	201c      	movs	r0, #28
   b5a3e:	f007 fb33 	bl	bd0a8 <pinMode>
    pinMode(U_DPAD,INPUT_PULLUP);
   b5a42:	2102      	movs	r1, #2
   b5a44:	200e      	movs	r0, #14
   b5a46:	f007 fb2f 	bl	bd0a8 <pinMode>
    pinMode(D_DPAD,INPUT_PULLUP);
   b5a4a:	2102      	movs	r1, #2
   b5a4c:	2007      	movs	r0, #7
   b5a4e:	f007 fb2b 	bl	bd0a8 <pinMode>
    pinMode(L_DPAD,INPUT_PULLUP);
   b5a52:	2102      	movs	r1, #2
   b5a54:	200f      	movs	r0, #15
   b5a56:	f007 fb27 	bl	bd0a8 <pinMode>
    pinMode(R_DPAD,INPUT_PULLUP);
   b5a5a:	2102      	movs	r1, #2
   b5a5c:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5a5e:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLUP);
   b5a60:	f007 fb22 	bl	bd0a8 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLUP);
   b5a64:	2102      	movs	r1, #2
   b5a66:	201d      	movs	r0, #29
   b5a68:	f007 fb1e 	bl	bd0a8 <pinMode>
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5a6c:	496d      	ldr	r1, [pc, #436]	; (b5c24 <setup+0x1f0>)
   b5a6e:	9400      	str	r4, [sp, #0]
   b5a70:	f04f 33ff 	mov.w	r3, #4294967295
   b5a74:	2202      	movs	r2, #2
   b5a76:	201c      	movs	r0, #28
   b5a78:	f007 f8e0 	bl	bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,FALLING);
   b5a7c:	496a      	ldr	r1, [pc, #424]	; (b5c28 <setup+0x1f4>)
   b5a7e:	9400      	str	r4, [sp, #0]
   b5a80:	f04f 33ff 	mov.w	r3, #4294967295
   b5a84:	2202      	movs	r2, #2
   b5a86:	200e      	movs	r0, #14
   b5a88:	f007 f8d8 	bl	bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,FALLING);
   b5a8c:	4967      	ldr	r1, [pc, #412]	; (b5c2c <setup+0x1f8>)
   b5a8e:	9400      	str	r4, [sp, #0]
   b5a90:	f04f 33ff 	mov.w	r3, #4294967295
   b5a94:	2202      	movs	r2, #2
   b5a96:	2007      	movs	r0, #7
   b5a98:	f007 f8d0 	bl	bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,FALLING);
   b5a9c:	4964      	ldr	r1, [pc, #400]	; (b5c30 <setup+0x1fc>)
   b5a9e:	9400      	str	r4, [sp, #0]
   b5aa0:	f04f 33ff 	mov.w	r3, #4294967295
   b5aa4:	2202      	movs	r2, #2
   b5aa6:	200f      	movs	r0, #15
   b5aa8:	f007 f8c8 	bl	bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,FALLING);
   b5aac:	4961      	ldr	r1, [pc, #388]	; (b5c34 <setup+0x200>)
   b5aae:	9400      	str	r4, [sp, #0]
   b5ab0:	f04f 33ff 	mov.w	r3, #4294967295
   b5ab4:	2202      	movs	r2, #2
   b5ab6:	2012      	movs	r0, #18
   b5ab8:	f007 f8c0 	bl	bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,FALLING);
   b5abc:	2202      	movs	r2, #2
   b5abe:	495e      	ldr	r1, [pc, #376]	; (b5c38 <setup+0x204>)
   b5ac0:	9400      	str	r4, [sp, #0]
   b5ac2:	f04f 33ff 	mov.w	r3, #4294967295
   b5ac6:	201d      	movs	r0, #29
   b5ac8:	f007 f8b8 	bl	bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>
   b5acc:	f003 f9f8 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b5ad0:	4b5a      	ldr	r3, [pc, #360]	; (b5c3c <setup+0x208>)
    logMessages = true;
   b5ad2:	4f5b      	ldr	r7, [pc, #364]	; (b5c40 <setup+0x20c>)
    debounceTime = millis();
   b5ad4:	6018      	str	r0, [r3, #0]
    Serial.begin(115200);
   b5ad6:	f007 f889 	bl	bcbec <_Z16_fetch_usbserialv>
   b5ada:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b5ade:	f007 f879 	bl	bcbd4 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5ae2:	f007 fb39 	bl	bd158 <_Z22__fetch_global_Serial1v>
   b5ae6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5aea:	f007 f973 	bl	bcdd4 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b5aee:	f7fe fda5 	bl	b463c <_Z9setupXBeev>
	BLE.on();
   b5af2:	f004 fca9 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5af6:	f004 fcf1 	bl	ba4dc <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b5afa:	f004 fca5 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5afe:	2132      	movs	r1, #50	; 0x32
   b5b00:	f004 fd36 	bl	ba570 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b5b04:	f004 fca0 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b08:	2108      	movs	r1, #8
   b5b0a:	f004 fcee 	bl	ba4ea <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b5b0e:	4a4d      	ldr	r2, [pc, #308]	; (b5c44 <setup+0x210>)
   b5b10:	494d      	ldr	r1, [pc, #308]	; (b5c48 <setup+0x214>)
   b5b12:	4610      	mov	r0, r2
   b5b14:	f005 fd4e 	bl	bb5b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b5b18:	4a4c      	ldr	r2, [pc, #304]	; (b5c4c <setup+0x218>)
   b5b1a:	494d      	ldr	r1, [pc, #308]	; (b5c50 <setup+0x21c>)
   b5b1c:	4610      	mov	r0, r2
   b5b1e:	f005 fd49 	bl	bb5b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5b22:	4622      	mov	r2, r4
   b5b24:	494b      	ldr	r1, [pc, #300]	; (b5c54 <setup+0x220>)
   b5b26:	484c      	ldr	r0, [pc, #304]	; (b5c58 <setup+0x224>)
   b5b28:	e9cd 4400 	strd	r4, r4, [sp]
   b5b2c:	2301      	movs	r3, #1
   b5b2e:	f003 fcef 	bl	b9510 <spark_subscribe>
    offloadingMode = false;
   b5b32:	4b4a      	ldr	r3, [pc, #296]	; (b5c5c <setup+0x228>)
   b5b34:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b5b36:	4b4a      	ldr	r3, [pc, #296]	; (b5c60 <setup+0x22c>)
   b5b38:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b5b3a:	4b4a      	ldr	r3, [pc, #296]	; (b5c64 <setup+0x230>)
   b5b3c:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b5b3e:	4b4a      	ldr	r3, [pc, #296]	; (b5c68 <setup+0x234>)
    logMessages = true;
   b5b40:	f04f 0901 	mov.w	r9, #1
    statusTimeout = false;
   b5b44:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b5b46:	f887 9000 	strb.w	r9, [r7]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5b4a:	f006 fc1d 	bl	bc388 <_ZN9TimeClass5monthEv>
   b5b4e:	9007      	str	r0, [sp, #28]
   b5b50:	f006 fc0e 	bl	bc370 <_ZN9TimeClass3dayEv>
   b5b54:	4605      	mov	r5, r0
   b5b56:	f006 fc1f 	bl	bc398 <_ZN9TimeClass4yearEv>
   b5b5a:	4606      	mov	r6, r0
   b5b5c:	f006 fbe4 	bl	bc328 <_ZN9TimeClass4hourEv>
   b5b60:	4680      	mov	r8, r0
   b5b62:	f006 fbed 	bl	bc340 <_ZN9TimeClass6minuteEv>
   b5b66:	4682      	mov	sl, r0
   b5b68:	f006 fbf6 	bl	bc358 <_ZN9TimeClass6secondEv>
   b5b6c:	9b07      	ldr	r3, [sp, #28]
   b5b6e:	4a3f      	ldr	r2, [pc, #252]	; (b5c6c <setup+0x238>)
   b5b70:	9500      	str	r5, [sp, #0]
   b5b72:	e9cd a003 	strd	sl, r0, [sp, #12]
   b5b76:	2110      	movs	r1, #16
   b5b78:	e9cd 6801 	strd	r6, r8, [sp, #4]
   b5b7c:	a808      	add	r0, sp, #32
   b5b7e:	f003 fd07 	bl	b9590 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b5b82:	493b      	ldr	r1, [pc, #236]	; (b5c70 <setup+0x23c>)
   b5b84:	483b      	ldr	r0, [pc, #236]	; (b5c74 <setup+0x240>)
   b5b86:	f008 faca 	bl	be11e <strcpy>
    strcat(filenameMessages,timestamp);
   b5b8a:	a908      	add	r1, sp, #32
   b5b8c:	4839      	ldr	r0, [pc, #228]	; (b5c74 <setup+0x240>)
   b5b8e:	f008 faad 	bl	be0ec <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5b92:	4939      	ldr	r1, [pc, #228]	; (b5c78 <setup+0x244>)
   b5b94:	4837      	ldr	r0, [pc, #220]	; (b5c74 <setup+0x240>)
   b5b96:	f008 faa9 	bl	be0ec <strcat>
    createMenu();
   b5b9a:	f7ff fef5 	bl	b5988 <_Z10createMenuv>
    oled.setup(); 
   b5b9e:	4837      	ldr	r0, [pc, #220]	; (b5c7c <setup+0x248>)
   b5ba0:	f001 f8f6 	bl	b6d90 <_ZN16OledWingAdafruit5setupEv>
    oled.clearDisplay();
   b5ba4:	4835      	ldr	r0, [pc, #212]	; (b5c7c <setup+0x248>)
   b5ba6:	f002 fe2b 	bl	b8800 <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.display();
   b5baa:	4834      	ldr	r0, [pc, #208]	; (b5c7c <setup+0x248>)
   b5bac:	f003 f896 	bl	b8cdc <_ZN16Adafruit_SSD13067displayEv>
      dataMode_{dataMode}
   b5bb0:	4b33      	ldr	r3, [pc, #204]	; (b5c80 <setup+0x24c>)
   b5bb2:	930c      	str	r3, [sp, #48]	; 0x30
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5bb4:	4833      	ldr	r0, [pc, #204]	; (b5c84 <setup+0x250>)
   b5bb6:	4b34      	ldr	r3, [pc, #208]	; (b5c88 <setup+0x254>)
   b5bb8:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   b5bbc:	aa0c      	add	r2, sp, #48	; 0x30
   b5bbe:	2108      	movs	r1, #8
   b5bc0:	930e      	str	r3, [sp, #56]	; 0x38
   b5bc2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
   b5bc6:	f7fe fceb 	bl	b45a0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5bca:	4604      	mov	r4, r0
   b5bcc:	b928      	cbnz	r0, b5bda <setup+0x1a6>
        Serial.println("Error: could not connect to SD card!");
   b5bce:	f007 f80d 	bl	bcbec <_Z16_fetch_usbserialv>
   b5bd2:	492e      	ldr	r1, [pc, #184]	; (b5c8c <setup+0x258>)
   b5bd4:	f006 fa9d 	bl	bc112 <_ZN5Print7printlnEPKc>
        logMessages = false;
   b5bd8:	703c      	strb	r4, [r7, #0]
    oled.setTextSize(2);
   b5bda:	4c28      	ldr	r4, [pc, #160]	; (b5c7c <setup+0x248>)
   b5bdc:	2102      	movs	r1, #2
   b5bde:	4620      	mov	r0, r4
   b5be0:	f001 f887 	bl	b6cf2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5be4:	2200      	movs	r2, #0
   b5be6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5bea:	e9c4 2304 	strd	r2, r3, [r4, #16]
    oled.print(" Starting ");
   b5bee:	4928      	ldr	r1, [pc, #160]	; (b5c90 <setup+0x25c>)
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	f006 fa7b 	bl	bc0ec <_ZN5Print5printEPKc>
    oled.display();
   b5bf6:	4620      	mov	r0, r4
   b5bf8:	f003 f870 	bl	b8cdc <_ZN16Adafruit_SSD13067displayEv>
    delay(3000);
   b5bfc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5c00:	f006 fbe0 	bl	bc3c4 <delay>
    at1.start();
   b5c04:	4823      	ldr	r0, [pc, #140]	; (b5c94 <setup+0x260>)
   b5c06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5c0a:	f7fe fb37 	bl	b427c <_ZN5Timer5startEj.isra.0>
    at2.start();
   b5c0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5c12:	4821      	ldr	r0, [pc, #132]	; (b5c98 <setup+0x264>)
   b5c14:	f7fe fb32 	bl	b427c <_ZN5Timer5startEj.isra.0>
    WaterBotSim(2);
   b5c18:	2002      	movs	r0, #2
   b5c1a:	f7ff fbb1 	bl	b5380 <_Z11WaterBotSimh>
}
   b5c1e:	b010      	add	sp, #64	; 0x40
   b5c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5c24:	000b41a5 	.word	0x000b41a5
   b5c28:	000b4a31 	.word	0x000b4a31
   b5c2c:	000b4a89 	.word	0x000b4a89
   b5c30:	000b47b9 	.word	0x000b47b9
   b5c34:	000b48dd 	.word	0x000b48dd
   b5c38:	000b41f9 	.word	0x000b41f9
   b5c3c:	2003dd50 	.word	0x2003dd50
   b5c40:	2003ddf4 	.word	0x2003ddf4
   b5c44:	2003ded4 	.word	0x2003ded4
   b5c48:	000b51f5 	.word	0x000b51f5
   b5c4c:	2003dec4 	.word	0x2003dec4
   b5c50:	000b444d 	.word	0x000b444d
   b5c54:	000b51a5 	.word	0x000b51a5
   b5c58:	000c0250 	.word	0x000c0250
   b5c5c:	2003de4b 	.word	0x2003de4b
   b5c60:	2003de4a 	.word	0x2003de4a
   b5c64:	2003dedc 	.word	0x2003dedc
   b5c68:	2003e635 	.word	0x2003e635
   b5c6c:	000c0737 	.word	0x000c0737
   b5c70:	000c0750 	.word	0x000c0750
   b5c74:	2003dd68 	.word	0x2003dd68
   b5c78:	000c0759 	.word	0x000c0759
   b5c7c:	2003de4c 	.word	0x2003de4c
   b5c80:	000c08cc 	.word	0x000c08cc
   b5c84:	2003e1b0 	.word	0x2003e1b0
   b5c88:	007a1200 	.word	0x007a1200
   b5c8c:	000c0762 	.word	0x000c0762
   b5c90:	000c0787 	.word	0x000c0787
   b5c94:	2003dd14 	.word	0x2003dd14
   b5c98:	2003dd30 	.word	0x2003dd30

000b5c9c <_GLOBAL__sub_I_SystemMode>:
   b5c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b5c9e:	4b55      	ldr	r3, [pc, #340]	; (b5df4 <_GLOBAL__sub_I_SystemMode+0x158>)
   b5ca0:	4c55      	ldr	r4, [pc, #340]	; (b5df8 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b5ca2:	2201      	movs	r2, #1
   b5ca4:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5ca6:	4b55      	ldr	r3, [pc, #340]	; (b5dfc <_GLOBAL__sub_I_SystemMode+0x160>)
   b5ca8:	2200      	movs	r2, #0
   b5caa:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b5cae:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5cb2:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5cb4:	2003      	movs	r0, #3
   b5cb6:	f003 fb77 	bl	b93a8 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b5cba:	4951      	ldr	r1, [pc, #324]	; (b5e00 <_GLOBAL__sub_I_SystemMode+0x164>)
   b5cbc:	4851      	ldr	r0, [pc, #324]	; (b5e04 <_GLOBAL__sub_I_SystemMode+0x168>)
   b5cbe:	f004 f901 	bl	b9ec4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b5cc2:	4951      	ldr	r1, [pc, #324]	; (b5e08 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b5cc4:	4851      	ldr	r0, [pc, #324]	; (b5e0c <_GLOBAL__sub_I_SystemMode+0x170>)
   b5cc6:	f004 f8fd 	bl	b9ec4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b5cca:	4951      	ldr	r1, [pc, #324]	; (b5e10 <_GLOBAL__sub_I_SystemMode+0x174>)
   b5ccc:	4851      	ldr	r0, [pc, #324]	; (b5e14 <_GLOBAL__sub_I_SystemMode+0x178>)
   b5cce:	f004 f8f9 	bl	b9ec4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b5cd2:	4951      	ldr	r1, [pc, #324]	; (b5e18 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b5cd4:	4851      	ldr	r0, [pc, #324]	; (b5e1c <_GLOBAL__sub_I_SystemMode+0x180>)
   b5cd6:	f004 f8f5 	bl	b9ec4 <_ZN8particle7BleUuidC1EPKc>
   b5cda:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b5cdc:	267f      	movs	r6, #127	; 0x7f
   b5cde:	4620      	mov	r0, r4
   b5ce0:	f004 f80b 	bl	b9cfa <_ZN8particle10BleAddressC1Ev>
   b5ce4:	f104 0008 	add.w	r0, r4, #8
   b5ce8:	f005 f837 	bl	bad5a <_ZN8particle18BleAdvertisingDataC1Ev>
   b5cec:	f104 0014 	add.w	r0, r4, #20
   b5cf0:	f005 f833 	bl	bad5a <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b5cf4:	3d01      	subs	r5, #1
   b5cf6:	f884 6020 	strb.w	r6, [r4, #32]
   b5cfa:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5cfe:	d1ee      	bne.n	b5cde <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5d00:	4847      	ldr	r0, [pc, #284]	; (b5e20 <_GLOBAL__sub_I_SystemMode+0x184>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5d02:	4c48      	ldr	r4, [pc, #288]	; (b5e24 <_GLOBAL__sub_I_SystemMode+0x188>)
   b5d04:	f004 fa14 	bl	ba130 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b5d08:	4847      	ldr	r0, [pc, #284]	; (b5e28 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b5d0a:	f004 fa11 	bl	ba130 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5d0e:	4847      	ldr	r0, [pc, #284]	; (b5e2c <_GLOBAL__sub_I_SystemMode+0x190>)
   b5d10:	f004 fa0e 	bl	ba130 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b5d14:	4846      	ldr	r0, [pc, #280]	; (b5e30 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5d16:	f004 fae7 	bl	ba2e8 <_ZN8particle13BlePeerDeviceC1Ev>
OledWingAdafruit oled;
   b5d1a:	4846      	ldr	r0, [pc, #280]	; (b5e34 <_GLOBAL__sub_I_SystemMode+0x198>)
   b5d1c:	2107      	movs	r1, #7
   b5d1e:	f001 f809 	bl	b6d34 <_ZN16OledWingAdafruitC1Ei>
   b5d22:	7823      	ldrb	r3, [r4, #0]
   b5d24:	f3bf 8f5b 	dmb	ish
   b5d28:	07db      	lsls	r3, r3, #31
   b5d2a:	d40a      	bmi.n	b5d42 <_GLOBAL__sub_I_SystemMode+0xa6>
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	f7fe f9c5 	bl	b40bc <__cxa_guard_acquire>
   b5d32:	b130      	cbz	r0, b5d42 <_GLOBAL__sub_I_SystemMode+0xa6>
   b5d34:	4840      	ldr	r0, [pc, #256]	; (b5e38 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5d36:	2101      	movs	r1, #1
   b5d38:	f003 fcae 	bl	b9698 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	f7fe f9c2 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b5d42:	4b3e      	ldr	r3, [pc, #248]	; (b5e3c <_GLOBAL__sub_I_SystemMode+0x1a0>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5d44:	4e3e      	ldr	r6, [pc, #248]	; (b5e40 <_GLOBAL__sub_I_SystemMode+0x1a4>)
	    _M_manager = &_My_handler::_M_manager;
   b5d46:	4d3f      	ldr	r5, [pc, #252]	; (b5e44 <_GLOBAL__sub_I_SystemMode+0x1a8>)
Timer at1(5000,actionTimer5);
   b5d48:	483f      	ldr	r0, [pc, #252]	; (b5e48 <_GLOBAL__sub_I_SystemMode+0x1ac>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5d4a:	9603      	str	r6, [sp, #12]
   b5d4c:	2264      	movs	r2, #100	; 0x64
   b5d4e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5d52:	4a3e      	ldr	r2, [pc, #248]	; (b5e4c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b5d54:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5d58:	2201      	movs	r2, #1
   b5d5a:	2400      	movs	r4, #0
   b5d5c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5d60:	4a35      	ldr	r2, [pc, #212]	; (b5e38 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5d62:	605c      	str	r4, [r3, #4]
   b5d64:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5d68:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b5d6c:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5d70:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5d74:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5d78:	4b35      	ldr	r3, [pc, #212]	; (b5e50 <_GLOBAL__sub_I_SystemMode+0x1b4>)
  File() {}
   b5d7a:	4a36      	ldr	r2, [pc, #216]	; (b5e54 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5d7c:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5d7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5d82:	6099      	str	r1, [r3, #8]
   b5d84:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5d86:	611c      	str	r4, [r3, #16]
   b5d88:	4b33      	ldr	r3, [pc, #204]	; (b5e58 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5d8a:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5d8e:	601a      	str	r2, [r3, #0]
   b5d90:	611c      	str	r4, [r3, #16]
   b5d92:	4b32      	ldr	r3, [pc, #200]	; (b5e5c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5d94:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5d98:	601a      	str	r2, [r3, #0]
   b5d9a:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5d9c:	4b30      	ldr	r3, [pc, #192]	; (b5e60 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5d9e:	e9c3 4400 	strd	r4, r4, [r3]
   b5da2:	609c      	str	r4, [r3, #8]
   b5da4:	4b2f      	ldr	r3, [pc, #188]	; (b5e64 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5da6:	e9c3 4400 	strd	r4, r4, [r3]
   b5daa:	609c      	str	r4, [r3, #8]
   b5dac:	4b2e      	ldr	r3, [pc, #184]	; (b5e68 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5dae:	e9c3 4400 	strd	r4, r4, [r3]
   b5db2:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5db4:	4b2d      	ldr	r3, [pc, #180]	; (b5e6c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5db6:	9300      	str	r3, [sp, #0]
   b5db8:	466a      	mov	r2, sp
   b5dba:	4623      	mov	r3, r4
   b5dbc:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b5dc0:	9502      	str	r5, [sp, #8]
   b5dc2:	f7fe fb0b 	bl	b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5dc6:	4668      	mov	r0, sp
   b5dc8:	f7fe fab6 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5dcc:	4b28      	ldr	r3, [pc, #160]	; (b5e70 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5dce:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b5dd0:	466a      	mov	r2, sp
   b5dd2:	4623      	mov	r3, r4
   b5dd4:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5dd8:	4826      	ldr	r0, [pc, #152]	; (b5e74 <_GLOBAL__sub_I_SystemMode+0x1d8>)
	    _M_manager = &_My_handler::_M_manager;
   b5dda:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b5dde:	f7fe fafd 	bl	b43dc <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5de2:	4668      	mov	r0, sp
   b5de4:	f7fe faa8 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   b5de8:	4b23      	ldr	r3, [pc, #140]	; (b5e78 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5dea:	e9c3 4400 	strd	r4, r4, [r3]
   b5dee:	609c      	str	r4, [r3, #8]
   b5df0:	b004      	add	sp, #16
   b5df2:	bd70      	pop	{r4, r5, r6, pc}
   b5df4:	2003dcfc 	.word	0x2003dcfc
   b5df8:	2003dee0 	.word	0x2003dee0
   b5dfc:	2003dca8 	.word	0x2003dca8
   b5e00:	000c0792 	.word	0x000c0792
   b5e04:	2003dcc0 	.word	0x2003dcc0
   b5e08:	000c07b7 	.word	0x000c07b7
   b5e0c:	2003dcd4 	.word	0x2003dcd4
   b5e10:	000c07dc 	.word	0x000c07dc
   b5e14:	2003dce8 	.word	0x2003dce8
   b5e18:	000c0801 	.word	0x000c0801
   b5e1c:	2003dd00 	.word	0x2003dd00
   b5e20:	2003ded4 	.word	0x2003ded4
   b5e24:	2003dc68 	.word	0x2003dc68
   b5e28:	2003decc 	.word	0x2003decc
   b5e2c:	2003dec4 	.word	0x2003dec4
   b5e30:	2003debc 	.word	0x2003debc
   b5e34:	2003de4c 	.word	0x2003de4c
   b5e38:	2003dc6c 	.word	0x2003dc6c
   b5e3c:	2003e1b0 	.word	0x2003e1b0
   b5e40:	000b4279 	.word	0x000b4279
   b5e44:	000b4265 	.word	0x000b4265
   b5e48:	2003dd14 	.word	0x2003dd14
   b5e4c:	000c08cc 	.word	0x000c08cc
   b5e50:	2003ddf8 	.word	0x2003ddf8
   b5e54:	000c08f4 	.word	0x000c08f4
   b5e58:	2003ddc0 	.word	0x2003ddc0
   b5e5c:	2003dd8c 	.word	0x2003dd8c
   b5e60:	2003dcb4 	.word	0x2003dcb4
   b5e64:	2003dc98 	.word	0x2003dc98
   b5e68:	2003dc78 	.word	0x2003dc78
   b5e6c:	000b40e9 	.word	0x000b40e9
   b5e70:	000b4229 	.word	0x000b4229
   b5e74:	2003dd30 	.word	0x2003dd30
   b5e78:	2003dc8c 	.word	0x2003dc8c

000b5e7c <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b5e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b5e80:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b5e84:	4c5d      	ldr	r4, [pc, #372]	; (b5ffc <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b5e86:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b5e88:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b5e8a:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b5e8c:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b5e8e:	4690      	mov	r8, r2
   b5e90:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b5e92:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b5e96:	fa0f f983 	sxth.w	r9, r3
   b5e9a:	b236      	sxth	r6, r6
   b5e9c:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b5ea0:	2f00      	cmp	r7, #0
   b5ea2:	d067      	beq.n	b5f74 <_Z13printMenuItemhbbtt8WaterBot+0xf8>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b5ea4:	2701      	movs	r7, #1
   b5ea6:	2358      	movs	r3, #88	; 0x58
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	e9cd a700 	strd	sl, r7, [sp]
   b5eae:	9203      	str	r2, [sp, #12]
   b5eb0:	f000 fc03 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5eb4:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b5eb8:	2102      	movs	r1, #2
   b5eba:	4620      	mov	r0, r4
   b5ebc:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5ebe:	f04f 0900 	mov.w	r9, #0
   b5ec2:	f000 ff16 	bl	b6cf2 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b5ec6:	4629      	mov	r1, r5
   b5ec8:	484d      	ldr	r0, [pc, #308]	; (b6000 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5eca:	f8c4 9014 	str.w	r9, [r4, #20]
   b5ece:	f7fe fd9b 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5ed2:	f100 010d 	add.w	r1, r0, #13
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	f006 f908 	bl	bc0ec <_ZN5Print5printEPKc>
        if(selected){
   b5edc:	9a03      	ldr	r2, [sp, #12]
   b5ede:	f1b8 0f00 	cmp.w	r8, #0
   b5ee2:	d030      	beq.n	b5f46 <_Z13printMenuItemhbbtt8WaterBot+0xca>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b5ee4:	237f      	movs	r3, #127	; 0x7f
   b5ee6:	e9cd a700 	strd	sl, r7, [sp]
   b5eea:	2158      	movs	r1, #88	; 0x58
   b5eec:	4620      	mov	r0, r4
   b5eee:	f000 fbe4 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5ef2:	2359      	movs	r3, #89	; 0x59
   b5ef4:	8223      	strh	r3, [r4, #16]
   b5ef6:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5ef8:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b5efc:	4840      	ldr	r0, [pc, #256]	; (b6000 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5efe:	4629      	mov	r1, r5
   b5f00:	f7fe fd82 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5f04:	7a43      	ldrb	r3, [r0, #9]
   b5f06:	b363      	cbz	r3, b5f62 <_Z13printMenuItemhbbtt8WaterBot+0xe6>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b5f08:	6843      	ldr	r3, [r0, #4]
   b5f0a:	aa0c      	add	r2, sp, #48	; 0x30
   b5f0c:	4413      	add	r3, r2
   b5f0e:	791b      	ldrb	r3, [r3, #4]
   b5f10:	b1bb      	cbz	r3, b5f42 <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b5f12:	493c      	ldr	r1, [pc, #240]	; (b6004 <_Z13printMenuItemhbbtt8WaterBot+0x188>)
                else oled.printf("Off");
   b5f14:	4839      	ldr	r0, [pc, #228]	; (b5ffc <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b5f16:	f7fe f9c8 	bl	b42aa <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b5f1a:	f006 fe67 	bl	bcbec <_Z16_fetch_usbserialv>
   b5f1e:	4629      	mov	r1, r5
   b5f20:	4604      	mov	r4, r0
   b5f22:	4837      	ldr	r0, [pc, #220]	; (b6000 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5f24:	f7fe fd70 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5f28:	4937      	ldr	r1, [pc, #220]	; (b6008 <_Z13printMenuItemhbbtt8WaterBot+0x18c>)
   b5f2a:	f100 020d 	add.w	r2, r0, #13
   b5f2e:	4620      	mov	r0, r4
   b5f30:	f7fe f9f4 	bl	b431c <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b5f34:	4629      	mov	r1, r5
   b5f36:	4832      	ldr	r0, [pc, #200]	; (b6000 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5f38:	f7fe fd66 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b5f3c:	b004      	add	sp, #16
   b5f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b5f42:	4932      	ldr	r1, [pc, #200]	; (b600c <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b5f44:	e7e6      	b.n	b5f14 <_Z13printMenuItemhbbtt8WaterBot+0x98>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b5f46:	237f      	movs	r3, #127	; 0x7f
   b5f48:	e9cd a800 	strd	sl, r8, [sp]
   b5f4c:	2158      	movs	r1, #88	; 0x58
   b5f4e:	4620      	mov	r0, r4
   b5f50:	f000 fbb3 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5f54:	2359      	movs	r3, #89	; 0x59
   b5f56:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5f58:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5f5c:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5f5e:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b5f60:	e7cc      	b.n	b5efc <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b5f62:	6803      	ldr	r3, [r0, #0]
   b5f64:	492a      	ldr	r1, [pc, #168]	; (b6010 <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b5f66:	aa0c      	add	r2, sp, #48	; 0x30
   b5f68:	4413      	add	r3, r2
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	791a      	ldrb	r2, [r3, #4]
   b5f6e:	f7fe f99c 	bl	b42aa <_ZN5Print6printfEPKcz>
   b5f72:	e7d2      	b.n	b5f1a <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b5f74:	2358      	movs	r3, #88	; 0x58
   b5f76:	4620      	mov	r0, r4
   b5f78:	e9cd a700 	strd	sl, r7, [sp]
   b5f7c:	9203      	str	r2, [sp, #12]
   b5f7e:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b5f82:	f000 fb9a 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b5f86:	2102      	movs	r1, #2
   b5f88:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5f8a:	f8a4 9010 	strh.w	r9, [r4, #16]
   b5f8e:	8266      	strh	r6, [r4, #18]
   b5f90:	f000 feaf 	bl	b6cf2 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b5f94:	4629      	mov	r1, r5
   b5f96:	481a      	ldr	r0, [pc, #104]	; (b6000 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5f98:	f8c4 8014 	str.w	r8, [r4, #20]
   b5f9c:	f7fe fd34 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5fa0:	f100 010d 	add.w	r1, r0, #13
   b5fa4:	4620      	mov	r0, r4
   b5fa6:	f006 f8a1 	bl	bc0ec <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b5faa:	9a03      	ldr	r2, [sp, #12]
   b5fac:	237f      	movs	r3, #127	; 0x7f
   b5fae:	2158      	movs	r1, #88	; 0x58
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	e9cd a700 	strd	sl, r7, [sp]
   b5fb6:	f000 fb80 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5fba:	2359      	movs	r3, #89	; 0x59
   b5fbc:	8223      	strh	r3, [r4, #16]
        if(MenuItems.at(id).onOffSetting){
   b5fbe:	4810      	ldr	r0, [pc, #64]	; (b6000 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b5fc0:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5fc2:	f8c4 8014 	str.w	r8, [r4, #20]
   b5fc6:	4629      	mov	r1, r5
   b5fc8:	f7fe fd1e 	bl	b4a08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5fcc:	7a43      	ldrb	r3, [r0, #9]
   b5fce:	b15b      	cbz	r3, b5fe8 <_Z13printMenuItemhbbtt8WaterBot+0x16c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b5fd0:	6843      	ldr	r3, [r0, #4]
   b5fd2:	aa0c      	add	r2, sp, #48	; 0x30
   b5fd4:	4413      	add	r3, r2
   b5fd6:	791b      	ldrb	r3, [r3, #4]
   b5fd8:	b123      	cbz	r3, b5fe4 <_Z13printMenuItemhbbtt8WaterBot+0x168>
   b5fda:	490a      	ldr	r1, [pc, #40]	; (b6004 <_Z13printMenuItemhbbtt8WaterBot+0x188>)
            else oled.printf("Off");
   b5fdc:	4620      	mov	r0, r4
   b5fde:	f7fe f964 	bl	b42aa <_ZN5Print6printfEPKcz>
   b5fe2:	e7a7      	b.n	b5f34 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b5fe4:	4909      	ldr	r1, [pc, #36]	; (b600c <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b5fe6:	e7f9      	b.n	b5fdc <_Z13printMenuItemhbbtt8WaterBot+0x160>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b5fe8:	6803      	ldr	r3, [r0, #0]
   b5fea:	4909      	ldr	r1, [pc, #36]	; (b6010 <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b5fec:	aa0c      	add	r2, sp, #48	; 0x30
   b5fee:	4413      	add	r3, r2
   b5ff0:	4620      	mov	r0, r4
   b5ff2:	791a      	ldrb	r2, [r3, #4]
   b5ff4:	f7fe f959 	bl	b42aa <_ZN5Print6printfEPKcz>
   b5ff8:	e79c      	b.n	b5f34 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b5ffa:	bf00      	nop
   b5ffc:	2003de4c 	.word	0x2003de4c
   b6000:	2003dc8c 	.word	0x2003dc8c
   b6004:	000c0826 	.word	0x000c0826
   b6008:	000c082d 	.word	0x000c082d
   b600c:	000c0829 	.word	0x000c0829
   b6010:	000c0348 	.word	0x000c0348

000b6014 <_Z10updateMenuv>:
void updateMenu(){
   b6014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b6018:	4ba5      	ldr	r3, [pc, #660]	; (b62b0 <_Z10updateMenuv+0x29c>)
   b601a:	781b      	ldrb	r3, [r3, #0]
void updateMenu(){
   b601c:	b08f      	sub	sp, #60	; 0x3c
    if(redrawMenu){
   b601e:	2b00      	cmp	r3, #0
   b6020:	f000 8142 	beq.w	b62a8 <_Z10updateMenuv+0x294>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b6024:	2600      	movs	r6, #0
   b6026:	230f      	movs	r3, #15
   b6028:	e9cd 3600 	strd	r3, r6, [sp]
   b602c:	48a1      	ldr	r0, [pc, #644]	; (b62b4 <_Z10updateMenuv+0x2a0>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b602e:	f8df 9298 	ldr.w	r9, [pc, #664]	; b62c8 <_Z10updateMenuv+0x2b4>
   b6032:	f8df a2a4 	ldr.w	sl, [pc, #676]	; b62d8 <_Z10updateMenuv+0x2c4>
            if(WaterBots.at(i).botNum == botSelect){
   b6036:	f8df b2a4 	ldr.w	fp, [pc, #676]	; b62dc <_Z10updateMenuv+0x2c8>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b603a:	2380      	movs	r3, #128	; 0x80
   b603c:	4632      	mov	r2, r6
   b603e:	4631      	mov	r1, r6
   b6040:	f000 fb3b 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
        uint8_t menuSelect = 0;
   b6044:	4635      	mov	r5, r6
   b6046:	e9d9 2300 	ldrd	r2, r3, [r9]
   b604a:	1a9b      	subs	r3, r3, r2
   b604c:	109b      	asrs	r3, r3, #2
   b604e:	b2f7      	uxtb	r7, r6
   b6050:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6054:	429f      	cmp	r7, r3
   b6056:	d248      	bcs.n	b60ea <_Z10updateMenuv+0xd6>
            if(WaterBots.at(i).botNum == botSelect){
   b6058:	4639      	mov	r1, r7
   b605a:	4648      	mov	r0, r9
   b605c:	f7fe fb98 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b6060:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b6064:	7801      	ldrb	r1, [r0, #0]
   b6066:	f89b 3000 	ldrb.w	r3, [fp]
   b606a:	4c92      	ldr	r4, [pc, #584]	; (b62b4 <_Z10updateMenuv+0x2a0>)
                oled.setCursor(5+18*i,4);
   b606c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b6070:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b6074:	4299      	cmp	r1, r3
   b6076:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b607a:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b607e:	8222      	strh	r2, [r4, #16]
   b6080:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b6082:	f04f 0101 	mov.w	r1, #1
   b6086:	4620      	mov	r0, r4
            if(WaterBots.at(i).botNum == botSelect){
   b6088:	d117      	bne.n	b60ba <_Z10updateMenuv+0xa6>
                oled.setTextSize(1);
   b608a:	f000 fe32 	bl	b6cf2 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b608e:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6090:	2201      	movs	r2, #1
   b6092:	6163      	str	r3, [r4, #20]
   b6094:	230e      	movs	r3, #14
   b6096:	e9cd 3200 	strd	r3, r2, [sp]
   b609a:	4641      	mov	r1, r8
   b609c:	4620      	mov	r0, r4
   b609e:	f000 fb0c 	bl	b66ba <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b60a2:	4639      	mov	r1, r7
   b60a4:	4648      	mov	r0, r9
   b60a6:	f7fe fb73 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b60aa:	4983      	ldr	r1, [pc, #524]	; (b62b8 <_Z10updateMenuv+0x2a4>)
   b60ac:	7802      	ldrb	r2, [r0, #0]
   b60ae:	4620      	mov	r0, r4
   b60b0:	f7fe f8fb 	bl	b42aa <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b60b4:	3601      	adds	r6, #1
   b60b6:	463d      	mov	r5, r7
   b60b8:	e7c5      	b.n	b6046 <_Z10updateMenuv+0x32>
                oled.setTextSize(1);
   b60ba:	f000 fe1a 	bl	b6cf2 <_ZN12Adafruit_GFX11setTextSizeEh>
   b60be:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b60c2:	2201      	movs	r2, #1
   b60c4:	6163      	str	r3, [r4, #20]
   b60c6:	230e      	movs	r3, #14
   b60c8:	e9cd 3200 	strd	r3, r2, [sp]
   b60cc:	4641      	mov	r1, r8
   b60ce:	4620      	mov	r0, r4
   b60d0:	f000 fb66 	bl	b67a0 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b60d4:	4639      	mov	r1, r7
   b60d6:	4648      	mov	r0, r9
   b60d8:	f7fe fb5a 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b60dc:	4976      	ldr	r1, [pc, #472]	; (b62b8 <_Z10updateMenuv+0x2a4>)
   b60de:	7802      	ldrb	r2, [r0, #0]
   b60e0:	4620      	mov	r0, r4
   b60e2:	f7fe f8e2 	bl	b42aa <_ZN5Print6printfEPKcz>
   b60e6:	462f      	mov	r7, r5
   b60e8:	e7e4      	b.n	b60b4 <_Z10updateMenuv+0xa0>
        if(menuItem == 0){
   b60ea:	4f74      	ldr	r7, [pc, #464]	; (b62bc <_Z10updateMenuv+0x2a8>)
   b60ec:	f897 8000 	ldrb.w	r8, [r7]
   b60f0:	f1b8 0f00 	cmp.w	r8, #0
   b60f4:	d160      	bne.n	b61b8 <_Z10updateMenuv+0x1a4>
   b60f6:	4f72      	ldr	r7, [pc, #456]	; (b62c0 <_Z10updateMenuv+0x2ac>)
            Serial.println("Menu item 0");
   b60f8:	f006 fd78 	bl	bcbec <_Z16_fetch_usbserialv>
   b60fc:	4971      	ldr	r1, [pc, #452]	; (b62c4 <_Z10updateMenuv+0x2b0>)
   b60fe:	f006 f808 	bl	bc112 <_ZN5Print7printlnEPKc>
            if(MenuItems.size()) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6102:	e9d7 3200 	ldrd	r3, r2, [r7]
   b6106:	429a      	cmp	r2, r3
   b6108:	d019      	beq.n	b613e <_Z10updateMenuv+0x12a>
   b610a:	4629      	mov	r1, r5
   b610c:	486e      	ldr	r0, [pc, #440]	; (b62c8 <_Z10updateMenuv+0x2b4>)
   b610e:	f7fe fb3f 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6112:	4b6e      	ldr	r3, [pc, #440]	; (b62cc <_Z10updateMenuv+0x2b8>)
   b6114:	4604      	mov	r4, r0
   b6116:	f893 c000 	ldrb.w	ip, [r3]
   b611a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b611c:	ae01      	add	r6, sp, #4
   b611e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6122:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6128:	6823      	ldr	r3, [r4, #0]
   b612a:	6033      	str	r3, [r6, #0]
   b612c:	2310      	movs	r3, #16
   b612e:	9300      	str	r3, [sp, #0]
   b6130:	f08c 0201 	eor.w	r2, ip, #1
   b6134:	4643      	mov	r3, r8
   b6136:	2101      	movs	r1, #1
   b6138:	4640      	mov	r0, r8
   b613a:	f7ff fe9f 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
   b613e:	e9d7 3600 	ldrd	r3, r6, [r7]
   b6142:	1af6      	subs	r6, r6, r3
   b6144:	4b62      	ldr	r3, [pc, #392]	; (b62d0 <_Z10updateMenuv+0x2bc>)
                Serial.printlnf("Menu item %d", mi);
   b6146:	f8df a18c 	ldr.w	sl, [pc, #396]	; b62d4 <_Z10updateMenuv+0x2c0>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b614a:	f8df 917c 	ldr.w	r9, [pc, #380]	; b62c8 <_Z10updateMenuv+0x2b4>
   b614e:	f8df b17c 	ldr.w	fp, [pc, #380]	; b62cc <_Z10updateMenuv+0x2b8>
   b6152:	10f6      	asrs	r6, r6, #3
   b6154:	435e      	muls	r6, r3
            uint8_t loopIter = MenuItems.size();
   b6156:	b2f6      	uxtb	r6, r6
            if(loopIter > 2) loopIter = 2;
   b6158:	2e02      	cmp	r6, #2
   b615a:	bf28      	it	cs
   b615c:	2602      	movcs	r6, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b615e:	2701      	movs	r7, #1
   b6160:	42be      	cmp	r6, r7
   b6162:	f2c0 809b 	blt.w	b629c <_Z10updateMenuv+0x288>
                Serial.printlnf("Menu item %d", mi);
   b6166:	f006 fd41 	bl	bcbec <_Z16_fetch_usbserialv>
   b616a:	463a      	mov	r2, r7
   b616c:	4651      	mov	r1, sl
   b616e:	f7fe f8d5 	bl	b431c <_ZN5Print8printlnfEPKcz>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6172:	4629      	mov	r1, r5
   b6174:	4648      	mov	r0, r9
   b6176:	f7fe fb0b 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b617a:	4604      	mov	r4, r0
   b617c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b617e:	f10d 0c04 	add.w	ip, sp, #4
   b6182:	f89b e000 	ldrb.w	lr, [fp]
   b6186:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b618a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b618c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6196:	fa5f f887 	uxtb.w	r8, r7
   b619a:	6823      	ldr	r3, [r4, #0]
   b619c:	f8cc 3000 	str.w	r3, [ip]
   b61a0:	3701      	adds	r7, #1
   b61a2:	013b      	lsls	r3, r7, #4
   b61a4:	b29b      	uxth	r3, r3
   b61a6:	9300      	str	r3, [sp, #0]
   b61a8:	2300      	movs	r3, #0
   b61aa:	f08e 0201 	eor.w	r2, lr, #1
   b61ae:	4619      	mov	r1, r3
   b61b0:	4640      	mov	r0, r8
   b61b2:	f7ff fe63 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b61b6:	e7d3      	b.n	b6160 <_Z10updateMenuv+0x14c>
        else if(menuItem == MAX_MENU_ITEMS-1){
   b61b8:	f1b8 0f03 	cmp.w	r8, #3
   b61bc:	f8df 810c 	ldr.w	r8, [pc, #268]	; b62cc <_Z10updateMenuv+0x2b8>
   b61c0:	f040 808e 	bne.w	b62e0 <_Z10updateMenuv+0x2cc>
            Serial.printlnf("Menu item %d", menuItem);
   b61c4:	f006 fd12 	bl	bcbec <_Z16_fetch_usbserialv>
   b61c8:	783a      	ldrb	r2, [r7, #0]
   b61ca:	4942      	ldr	r1, [pc, #264]	; (b62d4 <_Z10updateMenuv+0x2c0>)
   b61cc:	f7fe f8a6 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b61d0:	4629      	mov	r1, r5
   b61d2:	483d      	ldr	r0, [pc, #244]	; (b62c8 <_Z10updateMenuv+0x2b4>)
   b61d4:	f897 9000 	ldrb.w	r9, [r7]
   b61d8:	f7fe fada 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b61dc:	4606      	mov	r6, r0
   b61de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b61e0:	ac01      	add	r4, sp, #4
   b61e2:	f898 c000 	ldrb.w	ip, [r8]
   b61e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b61ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b61ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61f0:	6833      	ldr	r3, [r6, #0]
   b61f2:	6023      	str	r3, [r4, #0]
   b61f4:	2330      	movs	r3, #48	; 0x30
   b61f6:	f08c 0201 	eor.w	r2, ip, #1
   b61fa:	2101      	movs	r1, #1
   b61fc:	4648      	mov	r0, r9
   b61fe:	9300      	str	r3, [sp, #0]
   b6200:	2300      	movs	r3, #0
   b6202:	f7ff fe3b 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6206:	f006 fcf1 	bl	bcbec <_Z16_fetch_usbserialv>
   b620a:	783a      	ldrb	r2, [r7, #0]
   b620c:	4931      	ldr	r1, [pc, #196]	; (b62d4 <_Z10updateMenuv+0x2c0>)
   b620e:	3a01      	subs	r2, #1
   b6210:	f7fe f884 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6214:	4629      	mov	r1, r5
   b6216:	482c      	ldr	r0, [pc, #176]	; (b62c8 <_Z10updateMenuv+0x2b4>)
   b6218:	f7fe faba 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b621c:	4606      	mov	r6, r0
   b621e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6220:	f10d 0c04 	add.w	ip, sp, #4
   b6224:	f897 e000 	ldrb.w	lr, [r7]
   b6228:	f898 9000 	ldrb.w	r9, [r8]
   b622c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6230:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6236:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6238:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b623c:	6833      	ldr	r3, [r6, #0]
   b623e:	6023      	str	r3, [r4, #0]
   b6240:	2320      	movs	r3, #32
   b6242:	f10e 3eff 	add.w	lr, lr, #4294967295
   b6246:	9300      	str	r3, [sp, #0]
   b6248:	2300      	movs	r3, #0
   b624a:	4619      	mov	r1, r3
   b624c:	fa5f f08e 	uxtb.w	r0, lr
   b6250:	f089 0201 	eor.w	r2, r9, #1
   b6254:	f7ff fe12 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-2);
   b6258:	f006 fcc8 	bl	bcbec <_Z16_fetch_usbserialv>
   b625c:	783a      	ldrb	r2, [r7, #0]
   b625e:	491d      	ldr	r1, [pc, #116]	; (b62d4 <_Z10updateMenuv+0x2c0>)
   b6260:	3a02      	subs	r2, #2
   b6262:	f7fe f85b 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6266:	4818      	ldr	r0, [pc, #96]	; (b62c8 <_Z10updateMenuv+0x2b4>)
   b6268:	4629      	mov	r1, r5
   b626a:	f7fe fa91 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b626e:	783f      	ldrb	r7, [r7, #0]
   b6270:	f898 c000 	ldrb.w	ip, [r8]
   b6274:	3f02      	subs	r7, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6276:	4605      	mov	r5, r0
   b6278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b627a:	ae01      	add	r6, sp, #4
   b627c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b627e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6280:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6284:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6286:	682b      	ldr	r3, [r5, #0]
   b6288:	6023      	str	r3, [r4, #0]
   b628a:	2310      	movs	r3, #16
   b628c:	9300      	str	r3, [sp, #0]
   b628e:	2300      	movs	r3, #0
   b6290:	f08c 0201 	eor.w	r2, ip, #1
   b6294:	4619      	mov	r1, r3
   b6296:	b2f8      	uxtb	r0, r7
   b6298:	f7ff fdf0 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b629c:	4805      	ldr	r0, [pc, #20]	; (b62b4 <_Z10updateMenuv+0x2a0>)
   b629e:	f002 fd1d 	bl	b8cdc <_ZN16Adafruit_SSD13067displayEv>
        redrawMenu = false;
   b62a2:	4a03      	ldr	r2, [pc, #12]	; (b62b0 <_Z10updateMenuv+0x29c>)
   b62a4:	2300      	movs	r3, #0
   b62a6:	7013      	strb	r3, [r2, #0]
}
   b62a8:	b00f      	add	sp, #60	; 0x3c
   b62aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b62ae:	bf00      	nop
   b62b0:	2003da88 	.word	0x2003da88
   b62b4:	2003de4c 	.word	0x2003de4c
   b62b8:	000c0348 	.word	0x000c0348
   b62bc:	2003ddf5 	.word	0x2003ddf5
   b62c0:	2003dc8c 	.word	0x2003dc8c
   b62c4:	000c0859 	.word	0x000c0859
   b62c8:	2003dcb4 	.word	0x2003dcb4
   b62cc:	2003da89 	.word	0x2003da89
   b62d0:	aaaaaaab 	.word	0xaaaaaaab
   b62d4:	000c0865 	.word	0x000c0865
   b62d8:	c4ec4ec5 	.word	0xc4ec4ec5
   b62dc:	2003dd4d 	.word	0x2003dd4d
            Serial.printlnf("Menu item %d", menuItem+1);
   b62e0:	f006 fc84 	bl	bcbec <_Z16_fetch_usbserialv>
   b62e4:	783a      	ldrb	r2, [r7, #0]
   b62e6:	492b      	ldr	r1, [pc, #172]	; (b6394 <_Z10updateMenuv+0x380>)
   b62e8:	3201      	adds	r2, #1
   b62ea:	f7fe f817 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b62ee:	4629      	mov	r1, r5
   b62f0:	4829      	ldr	r0, [pc, #164]	; (b6398 <_Z10updateMenuv+0x384>)
   b62f2:	f7fe fa4d 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62f6:	4606      	mov	r6, r0
   b62f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b62fa:	ac01      	add	r4, sp, #4
   b62fc:	f898 e000 	ldrb.w	lr, [r8]
   b6300:	f897 c000 	ldrb.w	ip, [r7]
   b6304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6306:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b630a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b630c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b630e:	6833      	ldr	r3, [r6, #0]
   b6310:	6023      	str	r3, [r4, #0]
   b6312:	2330      	movs	r3, #48	; 0x30
   b6314:	f10c 0c01 	add.w	ip, ip, #1
   b6318:	9300      	str	r3, [sp, #0]
   b631a:	2300      	movs	r3, #0
   b631c:	f08e 0201 	eor.w	r2, lr, #1
   b6320:	4619      	mov	r1, r3
   b6322:	fa5f f08c 	uxtb.w	r0, ip
   b6326:	f7ff fda9 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem);
   b632a:	f006 fc5f 	bl	bcbec <_Z16_fetch_usbserialv>
   b632e:	783a      	ldrb	r2, [r7, #0]
   b6330:	4918      	ldr	r1, [pc, #96]	; (b6394 <_Z10updateMenuv+0x380>)
   b6332:	f7fd fff3 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6336:	4629      	mov	r1, r5
   b6338:	4817      	ldr	r0, [pc, #92]	; (b6398 <_Z10updateMenuv+0x384>)
   b633a:	f897 9000 	ldrb.w	r9, [r7]
   b633e:	f7fe fa27 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6342:	4606      	mov	r6, r0
   b6344:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6346:	f10d 0c04 	add.w	ip, sp, #4
   b634a:	f898 e000 	ldrb.w	lr, [r8]
   b634e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6352:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6354:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6358:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b635a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b635e:	6833      	ldr	r3, [r6, #0]
   b6360:	6023      	str	r3, [r4, #0]
   b6362:	2320      	movs	r3, #32
   b6364:	f08e 0201 	eor.w	r2, lr, #1
   b6368:	2101      	movs	r1, #1
   b636a:	9300      	str	r3, [sp, #0]
   b636c:	4648      	mov	r0, r9
   b636e:	2300      	movs	r3, #0
   b6370:	f7ff fd84 	bl	b5e7c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6374:	f006 fc3a 	bl	bcbec <_Z16_fetch_usbserialv>
   b6378:	783a      	ldrb	r2, [r7, #0]
   b637a:	4906      	ldr	r1, [pc, #24]	; (b6394 <_Z10updateMenuv+0x380>)
   b637c:	3a01      	subs	r2, #1
   b637e:	f7fd ffcd 	bl	b431c <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6382:	4805      	ldr	r0, [pc, #20]	; (b6398 <_Z10updateMenuv+0x384>)
   b6384:	4629      	mov	r1, r5
   b6386:	f7fe fa03 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b638a:	783f      	ldrb	r7, [r7, #0]
   b638c:	f898 c000 	ldrb.w	ip, [r8]
   b6390:	3f01      	subs	r7, #1
   b6392:	e770      	b.n	b6276 <_Z10updateMenuv+0x262>
   b6394:	000c0865 	.word	0x000c0865
   b6398:	2003dcb4 	.word	0x2003dcb4

000b639c <loop>:
void loop() {
   b639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(postStatus){
   b63a0:	4d55      	ldr	r5, [pc, #340]	; (b64f8 <loop+0x15c>)
   b63a2:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b63a4:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b63a6:	b1a3      	cbz	r3, b63d2 <loop+0x36>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b63a8:	4b54      	ldr	r3, [pc, #336]	; (b64fc <loop+0x160>)
   b63aa:	681b      	ldr	r3, [r3, #0]
   b63ac:	2b00      	cmp	r3, #0
   b63ae:	d038      	beq.n	b6422 <loop+0x86>
   b63b0:	781a      	ldrb	r2, [r3, #0]
   b63b2:	4953      	ldr	r1, [pc, #332]	; (b6500 <loop+0x164>)
   b63b4:	a802      	add	r0, sp, #8
   b63b6:	f003 f8db 	bl	b9570 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b63ba:	4c52      	ldr	r4, [pc, #328]	; (b6504 <loop+0x168>)
   b63bc:	7823      	ldrb	r3, [r4, #0]
   b63be:	9300      	str	r3, [sp, #0]
   b63c0:	2301      	movs	r3, #1
   b63c2:	461a      	mov	r2, r3
   b63c4:	2100      	movs	r1, #0
   b63c6:	a802      	add	r0, sp, #8
   b63c8:	f7fe f950 	bl	b466c <_Z8sendDataPKchbbb>
        postStatus = false;
   b63cc:	2300      	movs	r3, #0
   b63ce:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b63d0:	7023      	strb	r3, [r4, #0]
    updateMenu();
   b63d2:	f7ff fe1f 	bl	b6014 <_Z10updateMenuv>
    if(!logMessages) Serial.println("Error, SD Card Not working");
   b63d6:	4b4c      	ldr	r3, [pc, #304]	; (b6508 <loop+0x16c>)
   b63d8:	781b      	ldrb	r3, [r3, #0]
   b63da:	b923      	cbnz	r3, b63e6 <loop+0x4a>
   b63dc:	f006 fc06 	bl	bcbec <_Z16_fetch_usbserialv>
   b63e0:	494a      	ldr	r1, [pc, #296]	; (b650c <loop+0x170>)
   b63e2:	f005 fe96 	bl	bc112 <_ZN5Print7printlnEPKc>
    if(updateControl){
   b63e6:	4b4a      	ldr	r3, [pc, #296]	; (b6510 <loop+0x174>)
   b63e8:	781a      	ldrb	r2, [r3, #0]
   b63ea:	2a00      	cmp	r2, #0
   b63ec:	d035      	beq.n	b645a <loop+0xbe>
   b63ee:	4f49      	ldr	r7, [pc, #292]	; (b6514 <loop+0x178>)
        ControlledBot = NULL;
   b63f0:	4e42      	ldr	r6, [pc, #264]	; (b64fc <loop+0x160>)
        updateControl = false;
   b63f2:	2400      	movs	r4, #0
   b63f4:	701c      	strb	r4, [r3, #0]
   b63f6:	e9d7 5300 	ldrd	r5, r3, [r7]
   b63fa:	1b5d      	subs	r5, r3, r5
   b63fc:	4b46      	ldr	r3, [pc, #280]	; (b6518 <loop+0x17c>)
        ControlledBot = NULL;
   b63fe:	6034      	str	r4, [r6, #0]
   b6400:	10ad      	asrs	r5, r5, #2
   b6402:	435d      	muls	r5, r3
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b6404:	4b45      	ldr	r3, [pc, #276]	; (b651c <loop+0x180>)
   b6406:	f893 8000 	ldrb.w	r8, [r3]
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b640a:	b2e1      	uxtb	r1, r4
   b640c:	428d      	cmp	r5, r1
   b640e:	d90d      	bls.n	b642c <loop+0x90>
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b6410:	4638      	mov	r0, r7
   b6412:	f7fe f9bd 	bl	b4790 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6416:	7803      	ldrb	r3, [r0, #0]
   b6418:	4543      	cmp	r3, r8
   b641a:	bf08      	it	eq
   b641c:	6030      	streq	r0, [r6, #0]
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b641e:	3401      	adds	r4, #1
   b6420:	e7f3      	b.n	b640a <loop+0x6e>
        else sprintf(statusStr,"CCABspcNB");
   b6422:	493f      	ldr	r1, [pc, #252]	; (b6520 <loop+0x184>)
   b6424:	a802      	add	r0, sp, #8
   b6426:	f007 fe7a 	bl	be11e <strcpy>
   b642a:	e7c6      	b.n	b63ba <loop+0x1e>
        if(ControlledBot == NULL) return;
   b642c:	6832      	ldr	r2, [r6, #0]
   b642e:	2a00      	cmp	r2, #0
   b6430:	d05f      	beq.n	b64f2 <loop+0x156>
        if(ControlledBot->offloading) offloadingMode = true;
   b6432:	7a13      	ldrb	r3, [r2, #8]
   b6434:	b113      	cbz	r3, b643c <loop+0xa0>
   b6436:	4b3b      	ldr	r3, [pc, #236]	; (b6524 <loop+0x188>)
   b6438:	2101      	movs	r1, #1
   b643a:	7019      	strb	r1, [r3, #0]
        sprintf(statusStr,"CCB%dcnf%1d",ControlledBot->botNum,int(ControlledBot->dataRecording));
   b643c:	79d3      	ldrb	r3, [r2, #7]
   b643e:	493a      	ldr	r1, [pc, #232]	; (b6528 <loop+0x18c>)
   b6440:	7812      	ldrb	r2, [r2, #0]
   b6442:	a802      	add	r0, sp, #8
   b6444:	f003 f894 	bl	b9570 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b6448:	4b2e      	ldr	r3, [pc, #184]	; (b6504 <loop+0x168>)
   b644a:	781b      	ldrb	r3, [r3, #0]
   b644c:	9300      	str	r3, [sp, #0]
   b644e:	2301      	movs	r3, #1
   b6450:	461a      	mov	r2, r3
   b6452:	2100      	movs	r1, #0
   b6454:	a802      	add	r0, sp, #8
   b6456:	f7fe f909 	bl	b466c <_Z8sendDataPKchbbb>
    if (BLE.connected()) {
   b645a:	f003 fff5 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b645e:	f004 f8a0 	bl	ba5a2 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6462:	2800      	cmp	r0, #0
   b6464:	d035      	beq.n	b64d2 <loop+0x136>
        if(!digitalRead(D_DPAD)) sendData("CCB1req",0,true,false,false);//offloadingMode = true;
   b6466:	2007      	movs	r0, #7
   b6468:	f006 fe48 	bl	bd0fc <digitalRead>
   b646c:	4603      	mov	r3, r0
   b646e:	b928      	cbnz	r0, b647c <loop+0xe0>
   b6470:	9000      	str	r0, [sp, #0]
   b6472:	4601      	mov	r1, r0
   b6474:	2201      	movs	r2, #1
   b6476:	482d      	ldr	r0, [pc, #180]	; (b652c <loop+0x190>)
   b6478:	f7fe f8f8 	bl	b466c <_Z8sendDataPKchbbb>
      : _M_current(__i) { }
   b647c:	4b25      	ldr	r3, [pc, #148]	; (b6514 <loop+0x178>)
        for(WaterBot ws: WaterBots) Serial.printlnf("Temp: %0.6f",ws.temp);
   b647e:	4e2c      	ldr	r6, [pc, #176]	; (b6530 <loop+0x194>)
   b6480:	e9d3 4700 	ldrd	r4, r7, [r3]
   b6484:	42a7      	cmp	r7, r4
   b6486:	d00f      	beq.n	b64a8 <loop+0x10c>
   b6488:	f8d4 8020 	ldr.w	r8, [r4, #32]
   b648c:	f006 fbae 	bl	bcbec <_Z16_fetch_usbserialv>
   b6490:	4605      	mov	r5, r0
   b6492:	4640      	mov	r0, r8
   b6494:	f007 f9f0 	bl	bd878 <__aeabi_f2d>
   b6498:	4602      	mov	r2, r0
   b649a:	460b      	mov	r3, r1
   b649c:	4628      	mov	r0, r5
   b649e:	4631      	mov	r1, r6
   b64a0:	f7fd ff3c 	bl	b431c <_ZN5Print8printlnfEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
   b64a4:	3434      	adds	r4, #52	; 0x34
	return *this;
   b64a6:	e7ed      	b.n	b6484 <loop+0xe8>
        delay(250);
   b64a8:	20fa      	movs	r0, #250	; 0xfa
   b64aa:	f005 ff8b 	bl	bc3c4 <delay>
    if(offloadingMode){
   b64ae:	4b1d      	ldr	r3, [pc, #116]	; (b6524 <loop+0x188>)
   b64b0:	781b      	ldrb	r3, [r3, #0]
   b64b2:	b13b      	cbz	r3, b64c4 <loop+0x128>
        DataOffloader(ControlledBot->botNum);
   b64b4:	4c11      	ldr	r4, [pc, #68]	; (b64fc <loop+0x160>)
   b64b6:	6823      	ldr	r3, [r4, #0]
   b64b8:	7818      	ldrb	r0, [r3, #0]
   b64ba:	f7ff f92f 	bl	b571c <_Z13DataOffloaderh>
        ControlledBot->offloading = false;
   b64be:	6823      	ldr	r3, [r4, #0]
   b64c0:	2200      	movs	r2, #0
   b64c2:	721a      	strb	r2, [r3, #8]
    XBeeHandler();
   b64c4:	f7fe fede 	bl	b5284 <_Z11XBeeHandlerv>
}
   b64c8:	b00a      	add	sp, #40	; 0x28
   b64ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    XBeeLTEPairSet();
   b64ce:	f7fe b93b 	b.w	b4748 <_Z14XBeeLTEPairSetv>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b64d2:	4c18      	ldr	r4, [pc, #96]	; (b6534 <loop+0x198>)
   b64d4:	f002 fcf4 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
   b64d8:	6823      	ldr	r3, [r4, #0]
   b64da:	1ac0      	subs	r0, r0, r3
   b64dc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b64e0:	d3e5      	bcc.n	b64ae <loop+0x112>
   b64e2:	f002 fced 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b64e6:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b64e8:	f04f 30ff 	mov.w	r0, #4294967295
   b64ec:	f7fe ffe0 	bl	b54b0 <_Z7BLEScani>
   b64f0:	e7dd      	b.n	b64ae <loop+0x112>
}
   b64f2:	b00a      	add	sp, #40	; 0x28
   b64f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b64f8:	2003dedc 	.word	0x2003dedc
   b64fc:	2003dc84 	.word	0x2003dc84
   b6500:	000c0872 	.word	0x000c0872
   b6504:	2003e635 	.word	0x2003e635
   b6508:	2003ddf4 	.word	0x2003ddf4
   b650c:	000c0888 	.word	0x000c0888
   b6510:	2003e636 	.word	0x2003e636
   b6514:	2003dcb4 	.word	0x2003dcb4
   b6518:	c4ec4ec5 	.word	0xc4ec4ec5
   b651c:	2003dd4d 	.word	0x2003dd4d
   b6520:	000c087e 	.word	0x000c087e
   b6524:	2003de4b 	.word	0x2003de4b
   b6528:	000c08a3 	.word	0x000c08a3
   b652c:	000c08af 	.word	0x000c08af
   b6530:	000c08b7 	.word	0x000c08b7
   b6534:	2003dd88 	.word	0x2003dd88

000b6538 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b6538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b653c:	b085      	sub	sp, #20
   b653e:	461f      	mov	r7, r3
   b6540:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b6544:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b6548:	eba8 0902 	sub.w	r9, r8, r2
   b654c:	eba7 0a01 	sub.w	sl, r7, r1
   b6550:	f1b9 0f00 	cmp.w	r9, #0
   b6554:	bfb8      	it	lt
   b6556:	f1c9 0900 	rsblt	r9, r9, #0
   b655a:	f1ba 0f00 	cmp.w	sl, #0
   b655e:	bfb8      	it	lt
   b6560:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b6564:	45d1      	cmp	r9, sl
        uint16_t color) {
   b6566:	4683      	mov	fp, r0
   b6568:	460c      	mov	r4, r1
   b656a:	4615      	mov	r5, r2
    if (steep) {
   b656c:	dd04      	ble.n	b6578 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b656e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b6570:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b6572:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b6574:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b6576:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b6578:	42bc      	cmp	r4, r7
   b657a:	dd05      	ble.n	b6588 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b657c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b657e:	4645      	mov	r5, r8
   b6580:	4690      	mov	r8, r2
    if (x0 > x1) {
   b6582:	4622      	mov	r2, r4
   b6584:	463c      	mov	r4, r7
   b6586:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b6588:	1b3e      	subs	r6, r7, r4
   b658a:	b2b2      	uxth	r2, r6
   b658c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b658e:	eba8 0205 	sub.w	r2, r8, r5
   b6592:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b6596:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b659a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b659e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b65a2:	4545      	cmp	r5, r8
   b65a4:	bfb4      	ite	lt
   b65a6:	2201      	movlt	r2, #1
   b65a8:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b65ac:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b65ae:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b65b0:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b65b2:	42bc      	cmp	r4, r7
   b65b4:	dc1c      	bgt.n	b65f0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b65b6:	f8db 2000 	ldr.w	r2, [fp]
   b65ba:	9303      	str	r3, [sp, #12]
        if (steep) {
   b65bc:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b65be:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b65c2:	bfc7      	ittee	gt
   b65c4:	4629      	movgt	r1, r5
   b65c6:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b65c8:	462a      	movle	r2, r5
   b65ca:	4621      	movle	r1, r4
   b65cc:	4658      	mov	r0, fp
   b65ce:	47c0      	blx	r8
        }
        err -= dy;
   b65d0:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b65d2:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b65d4:	1ab6      	subs	r6, r6, r2
   b65d6:	b2b1      	uxth	r1, r6
   b65d8:	b236      	sxth	r6, r6
        if (err < 0) {
   b65da:	2e00      	cmp	r6, #0
   b65dc:	da05      	bge.n	b65ea <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b65de:	9a02      	ldr	r2, [sp, #8]
   b65e0:	4415      	add	r5, r2
            err += dx;
   b65e2:	9a00      	ldr	r2, [sp, #0]
   b65e4:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b65e6:	b22d      	sxth	r5, r5
            err += dx;
   b65e8:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b65ea:	3401      	adds	r4, #1
   b65ec:	b224      	sxth	r4, r4
   b65ee:	e7e0      	b.n	b65b2 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b65f0:	b005      	add	sp, #20
   b65f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b65f6 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b65f6:	4770      	bx	lr

000b65f8 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b65f8:	b410      	push	{r4}
    drawPixel(x, y, color);
   b65fa:	6804      	ldr	r4, [r0, #0]
   b65fc:	6924      	ldr	r4, [r4, #16]
   b65fe:	46a4      	mov	ip, r4
}
   b6600:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b6604:	4760      	bx	ip

000b6606 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6606:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b6608:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b660a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b660e:	9502      	str	r5, [sp, #8]
   b6610:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b6612:	46a4      	mov	ip, r4
}
   b6614:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b6616:	4760      	bx	ip

000b6618 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6618:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b661a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b661c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b6620:	9502      	str	r5, [sp, #8]
   b6622:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b6624:	46a4      	mov	ip, r4
}
   b6626:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b6628:	4760      	bx	ip

000b662a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b662a:	b470      	push	{r4, r5, r6}
   b662c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b6630:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b6634:	6804      	ldr	r4, [r0, #0]
   b6636:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b663a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b663c:	46a4      	mov	ip, r4
}
   b663e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b6640:	4760      	bx	ip

000b6642 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6642:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6646:	461c      	mov	r4, r3
    startWrite();
   b6648:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b664a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b664e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b6650:	4605      	mov	r5, r0
   b6652:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b6654:	3c01      	subs	r4, #1
   b6656:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b6658:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b665a:	b224      	sxth	r4, r4
    startWrite();
   b665c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b665e:	682b      	ldr	r3, [r5, #0]
   b6660:	f8cd 8004 	str.w	r8, [sp, #4]
   b6664:	9400      	str	r4, [sp, #0]
   b6666:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b6668:	4628      	mov	r0, r5
   b666a:	463b      	mov	r3, r7
   b666c:	4632      	mov	r2, r6
   b666e:	4639      	mov	r1, r7
   b6670:	47a0      	blx	r4
    endWrite();
   b6672:	682b      	ldr	r3, [r5, #0]
   b6674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6676:	4628      	mov	r0, r5
}
   b6678:	b002      	add	sp, #8
   b667a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b667e:	4718      	bx	r3

000b6680 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6684:	461d      	mov	r5, r3
    startWrite();
   b6686:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b6688:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b668c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b668e:	4604      	mov	r4, r0
   b6690:	4617      	mov	r7, r2
   b6692:	460e      	mov	r6, r1
    startWrite();
   b6694:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b6696:	e9cd 7800 	strd	r7, r8, [sp]
   b669a:	6822      	ldr	r2, [r4, #0]
   b669c:	1e6b      	subs	r3, r5, #1
   b669e:	4433      	add	r3, r6
   b66a0:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b66a2:	4620      	mov	r0, r4
   b66a4:	b21b      	sxth	r3, r3
   b66a6:	463a      	mov	r2, r7
   b66a8:	4631      	mov	r1, r6
   b66aa:	47a8      	blx	r5
    endWrite();
   b66ac:	6823      	ldr	r3, [r4, #0]
   b66ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66b0:	4620      	mov	r0, r4
}
   b66b2:	b002      	add	sp, #8
   b66b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b66b8:	4718      	bx	r3

000b66ba <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b66ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b66be:	461e      	mov	r6, r3
    startWrite();
   b66c0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b66c2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b66c6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b66c8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b66cc:	460c      	mov	r4, r1
   b66ce:	4605      	mov	r5, r0
   b66d0:	4617      	mov	r7, r2
    startWrite();
   b66d2:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b66d4:	4426      	add	r6, r4
   b66d6:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b66d8:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b66da:	da0b      	bge.n	b66f4 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b66dc:	f8cd 8000 	str.w	r8, [sp]
   b66e0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b66e4:	4621      	mov	r1, r4
   b66e6:	464b      	mov	r3, r9
   b66e8:	463a      	mov	r2, r7
   b66ea:	4628      	mov	r0, r5
   b66ec:	3401      	adds	r4, #1
   b66ee:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b66f0:	b224      	sxth	r4, r4
   b66f2:	e7f0      	b.n	b66d6 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b66f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66f6:	4628      	mov	r0, r5
}
   b66f8:	b002      	add	sp, #8
   b66fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b66fe:	4718      	bx	r3

000b6700 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b6700:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b6702:	6802      	ldr	r2, [r0, #0]
   b6704:	9101      	str	r1, [sp, #4]
   b6706:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b670a:	9100      	str	r1, [sp, #0]
   b670c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b670e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6712:	2200      	movs	r2, #0
   b6714:	4611      	mov	r1, r2
   b6716:	47a0      	blx	r4
}
   b6718:	b002      	add	sp, #8
   b671a:	bd10      	pop	{r4, pc}

000b671c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b671c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b6720:	4299      	cmp	r1, r3
        uint16_t color) {
   b6722:	4616      	mov	r6, r2
   b6724:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b6728:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b672c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b672e:	4680      	mov	r8, r0
   b6730:	460d      	mov	r5, r1
   b6732:	461c      	mov	r4, r3
    if(x0 == x1){
   b6734:	d113      	bne.n	b675e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6736:	42be      	cmp	r6, r7
   b6738:	bfc8      	it	gt
   b673a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b673c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6740:	bfc4      	itt	gt
   b6742:	463e      	movgt	r6, r7
   b6744:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6746:	1c7b      	adds	r3, r7, #1
   b6748:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b674a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b674c:	b21b      	sxth	r3, r3
   b674e:	4632      	mov	r2, r6
   b6750:	4629      	mov	r1, r5
   b6752:	4640      	mov	r0, r8
   b6754:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b6756:	b003      	add	sp, #12
   b6758:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b675c:	4760      	bx	ip
    } else if(y0 == y1){
   b675e:	42be      	cmp	r6, r7
   b6760:	d10a      	bne.n	b6778 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b6762:	4299      	cmp	r1, r3
   b6764:	bfc2      	ittt	gt
   b6766:	460b      	movgt	r3, r1
   b6768:	4625      	movgt	r5, r4
   b676a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b676c:	1c63      	adds	r3, r4, #1
   b676e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b6772:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6774:	1b5b      	subs	r3, r3, r5
   b6776:	e7e9      	b.n	b674c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b6778:	6953      	ldr	r3, [r2, #20]
   b677a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b677c:	e9cd 7900 	strd	r7, r9, [sp]
   b6780:	f8d8 3000 	ldr.w	r3, [r8]
   b6784:	4640      	mov	r0, r8
   b6786:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b6788:	4632      	mov	r2, r6
   b678a:	4623      	mov	r3, r4
   b678c:	4629      	mov	r1, r5
   b678e:	47b8      	blx	r7
        endWrite();
   b6790:	f8d8 3000 	ldr.w	r3, [r8]
   b6794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6796:	4640      	mov	r0, r8
}
   b6798:	b003      	add	sp, #12
   b679a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b679e:	4718      	bx	r3

000b67a0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b67a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b67a4:	461d      	mov	r5, r3
    startWrite();
   b67a6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b67a8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b67ac:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b67ae:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b67b2:	4604      	mov	r4, r0
   b67b4:	460f      	mov	r7, r1
   b67b6:	4616      	mov	r6, r2
    startWrite();
   b67b8:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b67ba:	6823      	ldr	r3, [r4, #0]
   b67bc:	f8cd 8000 	str.w	r8, [sp]
   b67c0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b67c4:	4632      	mov	r2, r6
   b67c6:	462b      	mov	r3, r5
   b67c8:	4639      	mov	r1, r7
   b67ca:	4620      	mov	r0, r4
   b67cc:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b67ce:	6823      	ldr	r3, [r4, #0]
   b67d0:	f8cd 8000 	str.w	r8, [sp]
   b67d4:	f109 32ff 	add.w	r2, r9, #4294967295
   b67d8:	4432      	add	r2, r6
   b67da:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b67de:	4639      	mov	r1, r7
   b67e0:	462b      	mov	r3, r5
   b67e2:	4620      	mov	r0, r4
   b67e4:	b212      	sxth	r2, r2
   b67e6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b67e8:	6823      	ldr	r3, [r4, #0]
   b67ea:	f8cd 8000 	str.w	r8, [sp]
   b67ee:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b67f2:	4632      	mov	r2, r6
   b67f4:	464b      	mov	r3, r9
   b67f6:	4639      	mov	r1, r7
   b67f8:	4620      	mov	r0, r4
   b67fa:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b67fc:	1e6b      	subs	r3, r5, #1
   b67fe:	19d9      	adds	r1, r3, r7
   b6800:	6823      	ldr	r3, [r4, #0]
   b6802:	f8cd 8000 	str.w	r8, [sp]
   b6806:	6a1d      	ldr	r5, [r3, #32]
   b6808:	4620      	mov	r0, r4
   b680a:	464b      	mov	r3, r9
   b680c:	4632      	mov	r2, r6
   b680e:	b209      	sxth	r1, r1
   b6810:	47a8      	blx	r5
    endWrite();
   b6812:	6823      	ldr	r3, [r4, #0]
   b6814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6816:	4620      	mov	r0, r4
}
   b6818:	b002      	add	sp, #8
   b681a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b681e:	4718      	bx	r3

000b6820 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b6820:	4770      	bx	lr

000b6822 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b6822:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b6826:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b682a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b682c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b682e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6832:	bf59      	ittee	pl
   b6834:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b6836:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b6838:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b683a:	81c3      	strhmi	r3, [r0, #14]
}
   b683c:	4770      	bx	lr
	...

000b6840 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b6840:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b6842:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b6844:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b6846:	4a07      	ldr	r2, [pc, #28]	; (b6864 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b6848:	4d07      	ldr	r5, [pc, #28]	; (b6868 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b684a:	8101      	strh	r1, [r0, #8]
   b684c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b684e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b6850:	f04f 31ff 	mov.w	r1, #4294967295
   b6854:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b6858:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b685a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b685c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b685e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b6860:	6204      	str	r4, [r0, #32]
}
   b6862:	bd30      	pop	{r4, r5, pc}
   b6864:	01000101 	.word	0x01000101
   b6868:	000c0e1c 	.word	0x000c0e1c

000b686c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6870:	b089      	sub	sp, #36	; 0x24
   b6872:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b6876:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6878:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b687c:	9304      	str	r3, [sp, #16]
   b687e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b6882:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6884:	9305      	str	r3, [sp, #20]
   b6886:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b688a:	4604      	mov	r4, r0
    startWrite();
   b688c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b688e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b6892:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6896:	bf48      	it	mi
   b6898:	f108 020e 	addmi.w	r2, r8, #14
   b689c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b68a0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b68a2:	4635      	mov	r5, r6
   b68a4:	9b03      	ldr	r3, [sp, #12]
   b68a6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b68a8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b68ac:	189a      	adds	r2, r3, r2
   b68ae:	9b05      	ldr	r3, [sp, #20]
   b68b0:	428b      	cmp	r3, r1
   b68b2:	b212      	sxth	r2, r2
   b68b4:	dd27      	ble.n	b6906 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b68b6:	9b04      	ldr	r3, [sp, #16]
   b68b8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b68ba:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b68be:	9306      	str	r3, [sp, #24]
   b68c0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b68c4:	4580      	cmp	r8, r0
   b68c6:	fa1f f189 	uxth.w	r1, r9
   b68ca:	dd17      	ble.n	b68fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b68cc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b68ce:	bf05      	ittet	eq
   b68d0:	9b06      	ldreq	r3, [sp, #24]
   b68d2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b68d4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b68d6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b68d8:	bf18      	it	ne
   b68da:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b68dc:	062b      	lsls	r3, r5, #24
   b68de:	d50a      	bpl.n	b68f6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b68e0:	9b02      	ldr	r3, [sp, #8]
   b68e2:	6820      	ldr	r0, [r4, #0]
   b68e4:	9207      	str	r2, [sp, #28]
   b68e6:	4419      	add	r1, r3
   b68e8:	6983      	ldr	r3, [r0, #24]
   b68ea:	b209      	sxth	r1, r1
   b68ec:	461f      	mov	r7, r3
   b68ee:	4620      	mov	r0, r4
   b68f0:	4653      	mov	r3, sl
   b68f2:	47b8      	blx	r7
   b68f4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b68f6:	f109 0901 	add.w	r9, r9, #1
   b68fa:	e7e1      	b.n	b68c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b68fc:	9b01      	ldr	r3, [sp, #4]
   b68fe:	3301      	adds	r3, #1
   b6900:	9301      	str	r3, [sp, #4]
   b6902:	445e      	add	r6, fp
   b6904:	e7ce      	b.n	b68a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6906:	6823      	ldr	r3, [r4, #0]
   b6908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b690a:	4620      	mov	r0, r4
}
   b690c:	b009      	add	sp, #36	; 0x24
   b690e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b6912:	4718      	bx	r3

000b6914 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6918:	ed2d 8b02 	vpush	{d8}
   b691c:	b091      	sub	sp, #68	; 0x44
   b691e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b6920:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6922:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6926:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b692a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b692e:	9103      	str	r1, [sp, #12]
   b6930:	461f      	mov	r7, r3
   b6932:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6936:	9304      	str	r3, [sp, #16]
   b6938:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b693a:	2a00      	cmp	r2, #0
   b693c:	f040 80c5 	bne.w	b6aca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b6940:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6944:	428b      	cmp	r3, r1
   b6946:	f340 814c 	ble.w	b6be2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b694a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b694e:	42b3      	cmp	r3, r6
   b6950:	f340 8147 	ble.w	b6be2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6954:	2306      	movs	r3, #6
   b6956:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b695a:	2b00      	cmp	r3, #0
   b695c:	f340 8141 	ble.w	b6be2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b6960:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6964:	2b00      	cmp	r3, #0
   b6966:	f340 813c 	ble.w	b6be2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b696a:	7f03      	ldrb	r3, [r0, #28]
   b696c:	b91b      	cbnz	r3, b6976 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b696e:	2faf      	cmp	r7, #175	; 0xaf
   b6970:	bf84      	itt	hi
   b6972:	3701      	addhi	r7, #1
   b6974:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6976:	f8db 3000 	ldr.w	r3, [fp]
   b697a:	4658      	mov	r0, fp
   b697c:	695b      	ldr	r3, [r3, #20]
   b697e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6980:	2205      	movs	r2, #5
   b6982:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6984:	2200      	movs	r2, #0
   b6986:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6988:	4a98      	ldr	r2, [pc, #608]	; (b6bec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b698a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b698e:	18d3      	adds	r3, r2, r3
   b6990:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b6992:	b2b3      	uxth	r3, r6
   b6994:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6996:	9a05      	ldr	r2, [sp, #20]
   b6998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b699a:	5c9b      	ldrb	r3, [r3, r2]
   b699c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b699e:	b2ab      	uxth	r3, r5
   b69a0:	930b      	str	r3, [sp, #44]	; 0x2c
   b69a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b69a6:	9308      	str	r3, [sp, #32]
   b69a8:	9b03      	ldr	r3, [sp, #12]
   b69aa:	fb02 f905 	mul.w	r9, r2, r5
   b69ae:	fa19 f983 	uxtah	r9, r9, r3
   b69b2:	fa0f f389 	sxth.w	r3, r9
   b69b6:	ee08 3a10 	vmov	s16, r3
   b69ba:	2308      	movs	r3, #8
   b69bc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b69be:	9b03      	ldr	r3, [sp, #12]
   b69c0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b69c4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b69c8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b69cc:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b69ce:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b69d2:	07d2      	lsls	r2, r2, #31
   b69d4:	d552      	bpl.n	b6a7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b69d6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b69d8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b69dc:	d13e      	bne.n	b6a5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b69de:	2c01      	cmp	r4, #1
   b69e0:	d13c      	bne.n	b6a5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b69e2:	699b      	ldr	r3, [r3, #24]
   b69e4:	9906      	ldr	r1, [sp, #24]
   b69e6:	461f      	mov	r7, r3
   b69e8:	9b04      	ldr	r3, [sp, #16]
   b69ea:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b69ec:	b212      	sxth	r2, r2
   b69ee:	4651      	mov	r1, sl
   b69f0:	4658      	mov	r0, fp
   b69f2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b69f4:	f109 0301 	add.w	r3, r9, #1
   b69f8:	fa4f f983 	sxtb.w	r9, r3
   b69fc:	9b07      	ldr	r3, [sp, #28]
   b69fe:	085b      	lsrs	r3, r3, #1
   b6a00:	9307      	str	r3, [sp, #28]
   b6a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6a04:	3b01      	subs	r3, #1
   b6a06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6a0a:	930a      	str	r3, [sp, #40]	; 0x28
   b6a0c:	d1de      	bne.n	b69cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6a0e:	9f05      	ldr	r7, [sp, #20]
   b6a10:	3701      	adds	r7, #1
   b6a12:	b27b      	sxtb	r3, r7
   b6a14:	9305      	str	r3, [sp, #20]
   b6a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6a18:	3b01      	subs	r3, #1
   b6a1a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6a1e:	9309      	str	r3, [sp, #36]	; 0x24
   b6a20:	d1b9      	bne.n	b6996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b6a22:	9b04      	ldr	r3, [sp, #16]
   b6a24:	4543      	cmp	r3, r8
   b6a26:	d00f      	beq.n	b6a48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6a28:	2d01      	cmp	r5, #1
   b6a2a:	f8db 3000 	ldr.w	r3, [fp]
   b6a2e:	d13b      	bne.n	b6aa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6a30:	2c01      	cmp	r4, #1
   b6a32:	d139      	bne.n	b6aa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6a34:	9908      	ldr	r1, [sp, #32]
   b6a36:	f8cd 8000 	str.w	r8, [sp]
   b6a3a:	3105      	adds	r1, #5
   b6a3c:	6a1c      	ldr	r4, [r3, #32]
   b6a3e:	4632      	mov	r2, r6
   b6a40:	2308      	movs	r3, #8
   b6a42:	b209      	sxth	r1, r1
   b6a44:	4658      	mov	r0, fp
   b6a46:	47a0      	blx	r4
        endWrite();
   b6a48:	f8db 3000 	ldr.w	r3, [fp]
   b6a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a4e:	4658      	mov	r0, fp
}
   b6a50:	b011      	add	sp, #68	; 0x44
   b6a52:	ecbd 8b02 	vpop	{d8}
   b6a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6a5a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6a5c:	9906      	ldr	r1, [sp, #24]
   b6a5e:	fb14 f202 	smulbb	r2, r4, r2
   b6a62:	440a      	add	r2, r1
   b6a64:	9904      	ldr	r1, [sp, #16]
   b6a66:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6a68:	9400      	str	r4, [sp, #0]
   b6a6a:	69db      	ldr	r3, [r3, #28]
   b6a6c:	ee18 1a10 	vmov	r1, s16
   b6a70:	461f      	mov	r7, r3
   b6a72:	b212      	sxth	r2, r2
   b6a74:	462b      	mov	r3, r5
   b6a76:	4658      	mov	r0, fp
   b6a78:	47b8      	blx	r7
   b6a7a:	e7bb      	b.n	b69f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6a7c:	9a04      	ldr	r2, [sp, #16]
   b6a7e:	4542      	cmp	r2, r8
   b6a80:	d0b8      	beq.n	b69f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b6a82:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6a84:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6a88:	d107      	bne.n	b6a9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6a8a:	2c01      	cmp	r4, #1
   b6a8c:	d105      	bne.n	b6a9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b6a8e:	699b      	ldr	r3, [r3, #24]
   b6a90:	9906      	ldr	r1, [sp, #24]
   b6a92:	461f      	mov	r7, r3
   b6a94:	440a      	add	r2, r1
   b6a96:	4643      	mov	r3, r8
   b6a98:	e7a8      	b.n	b69ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6a9a:	9906      	ldr	r1, [sp, #24]
   b6a9c:	f8cd 8004 	str.w	r8, [sp, #4]
   b6aa0:	fb14 f202 	smulbb	r2, r4, r2
   b6aa4:	440a      	add	r2, r1
   b6aa6:	e7df      	b.n	b6a68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b6aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6aaa:	f8cd 8004 	str.w	r8, [sp, #4]
   b6aae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b6ab2:	9a08      	ldr	r2, [sp, #32]
   b6ab4:	00e4      	lsls	r4, r4, #3
   b6ab6:	440a      	add	r2, r1
   b6ab8:	4611      	mov	r1, r2
   b6aba:	9400      	str	r4, [sp, #0]
   b6abc:	69dc      	ldr	r4, [r3, #28]
   b6abe:	4632      	mov	r2, r6
   b6ac0:	462b      	mov	r3, r5
   b6ac2:	b209      	sxth	r1, r1
   b6ac4:	4658      	mov	r0, fp
   b6ac6:	47a0      	blx	r4
        endWrite();
   b6ac8:	e7be      	b.n	b6a48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6aca:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b6acc:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b6ace:	6812      	ldr	r2, [r2, #0]
   b6ad0:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6ad2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b6ad4:	b2ff      	uxtb	r7, r7
   b6ad6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b6ada:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b6ade:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6ae0:	789a      	ldrb	r2, [r3, #2]
   b6ae2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6ae4:	78da      	ldrb	r2, [r3, #3]
   b6ae6:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b6ae8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6aea:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b6aee:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6af2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6af4:	d801      	bhi.n	b6afa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6af6:	2c01      	cmp	r4, #1
   b6af8:	d957      	bls.n	b6baa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6afa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b6afe:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b6b00:	fa0f f38a 	sxth.w	r3, sl
   b6b04:	9307      	str	r3, [sp, #28]
        startWrite();
   b6b06:	f8db 3000 	ldr.w	r3, [fp]
   b6b0a:	4658      	mov	r0, fp
   b6b0c:	695b      	ldr	r3, [r3, #20]
   b6b0e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6b10:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6b12:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6b16:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b18:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6b1c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b6b1e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b20:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b6b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6b24:	429f      	cmp	r7, r3
   b6b26:	d28f      	bcs.n	b6a48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6b28:	9b07      	ldr	r3, [sp, #28]
   b6b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6b2c:	443b      	add	r3, r7
   b6b2e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b6b32:	2200      	movs	r2, #0
   b6b34:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6b38:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b3a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6b3e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b42:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6b46:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6b4a:	9905      	ldr	r1, [sp, #20]
   b6b4c:	4291      	cmp	r1, r2
   b6b4e:	d241      	bcs.n	b6bd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b6b50:	1c5a      	adds	r2, r3, #1
   b6b52:	b2d2      	uxtb	r2, r2
   b6b54:	075b      	lsls	r3, r3, #29
   b6b56:	920d      	str	r2, [sp, #52]	; 0x34
   b6b58:	d107      	bne.n	b6b6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6b5a:	9b06      	ldr	r3, [sp, #24]
   b6b5c:	9906      	ldr	r1, [sp, #24]
   b6b5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6b60:	3301      	adds	r3, #1
   b6b62:	b29b      	uxth	r3, r3
   b6b64:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6b68:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6b6a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b6b6e:	d012      	beq.n	b6b96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b6b70:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b72:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6b76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6b7a:	d11a      	bne.n	b6bb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6b7c:	2c01      	cmp	r4, #1
   b6b7e:	d118      	bne.n	b6bb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6b82:	699b      	ldr	r3, [r3, #24]
   b6b84:	4411      	add	r1, r2
   b6b86:	9a05      	ldr	r2, [sp, #20]
   b6b88:	4411      	add	r1, r2
   b6b8a:	461e      	mov	r6, r3
   b6b8c:	4652      	mov	r2, sl
   b6b8e:	9b04      	ldr	r3, [sp, #16]
   b6b90:	b209      	sxth	r1, r1
   b6b92:	4658      	mov	r0, fp
   b6b94:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b6b96:	9e05      	ldr	r6, [sp, #20]
   b6b98:	3601      	adds	r6, #1
   b6b9a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6b9c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b6ba0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b6ba2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b6ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6ba8:	e7ce      	b.n	b6b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b6baa:	2300      	movs	r3, #0
   b6bac:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6bb0:	e7a9      	b.n	b6b06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6bb2:	9805      	ldr	r0, [sp, #20]
   b6bb4:	9a08      	ldr	r2, [sp, #32]
   b6bb6:	4402      	add	r2, r0
   b6bb8:	fb02 1105 	mla	r1, r2, r5, r1
   b6bbc:	9a04      	ldr	r2, [sp, #16]
   b6bbe:	e9cd 4200 	strd	r4, r2, [sp]
   b6bc2:	69db      	ldr	r3, [r3, #28]
   b6bc4:	ee18 2a10 	vmov	r2, s16
   b6bc8:	461e      	mov	r6, r3
   b6bca:	b209      	sxth	r1, r1
   b6bcc:	462b      	mov	r3, r5
   b6bce:	4658      	mov	r0, fp
   b6bd0:	47b0      	blx	r6
   b6bd2:	e7e0      	b.n	b6b96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b6bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b6bd6:	3701      	adds	r7, #1
   b6bd8:	4498      	add	r8, r3
   b6bda:	fa5f f888 	uxtb.w	r8, r8
   b6bde:	b2ff      	uxtb	r7, r7
   b6be0:	e79f      	b.n	b6b22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b6be2:	b011      	add	sp, #68	; 0x44
   b6be4:	ecbd 8b02 	vpop	{d8}
   b6be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6bec:	000c0914 	.word	0x000c0914

000b6bf0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b6bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b6bf2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6bf4:	b085      	sub	sp, #20
   b6bf6:	4604      	mov	r4, r0
   b6bf8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b6bfa:	2a00      	cmp	r2, #0
   b6bfc:	d134      	bne.n	b6c68 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b6bfe:	290a      	cmp	r1, #10
   b6c00:	d108      	bne.n	b6c14 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b6c02:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6c04:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6c06:	7e42      	ldrb	r2, [r0, #25]
   b6c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6c0c:	8263      	strh	r3, [r4, #18]
}
   b6c0e:	2001      	movs	r0, #1
   b6c10:	b005      	add	sp, #20
   b6c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6c14:	290d      	cmp	r1, #13
   b6c16:	d0fa      	beq.n	b6c0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6c18:	7ee1      	ldrb	r1, [r4, #27]
   b6c1a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6c1c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6c1e:	b171      	cbz	r1, b6c3e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6c20:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6c24:	2106      	movs	r1, #6
   b6c26:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6c2a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b6c2e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6c30:	bfc1      	itttt	gt
   b6c32:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6c36:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6c38:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6c3c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6c3e:	8ae2      	ldrh	r2, [r4, #22]
   b6c40:	9201      	str	r2, [sp, #4]
   b6c42:	8aa2      	ldrh	r2, [r4, #20]
   b6c44:	9200      	str	r2, [sp, #0]
   b6c46:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6c4a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6c4e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6c52:	4620      	mov	r0, r4
   b6c54:	f7ff fe5e 	bl	b6914 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6c58:	7e23      	ldrb	r3, [r4, #24]
   b6c5a:	8a22      	ldrh	r2, [r4, #16]
   b6c5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6c60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6c64:	8223      	strh	r3, [r4, #16]
   b6c66:	e7d2      	b.n	b6c0e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6c68:	290a      	cmp	r1, #10
   b6c6a:	d107      	bne.n	b6c7c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6c6c:	2300      	movs	r3, #0
   b6c6e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6c70:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6c72:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6c74:	8a43      	ldrh	r3, [r0, #18]
   b6c76:	fb01 3302 	mla	r3, r1, r2, r3
   b6c7a:	e7c7      	b.n	b6c0c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6c7c:	290d      	cmp	r1, #13
   b6c7e:	d0c6      	beq.n	b6c0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6c80:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b6c82:	42a9      	cmp	r1, r5
   b6c84:	d3c3      	bcc.n	b6c0e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6c86:	7a51      	ldrb	r1, [r2, #9]
   b6c88:	4299      	cmp	r1, r3
   b6c8a:	d3c0      	bcc.n	b6c0e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6c8c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b6c8e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b6c90:	b2ed      	uxtb	r5, r5
   b6c92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b6c96:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6c98:	b328      	cbz	r0, b6ce6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6c9a:	78e9      	ldrb	r1, [r5, #3]
   b6c9c:	b319      	cbz	r1, b6ce6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6c9e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6ca0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6ca2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6ca4:	b191      	cbz	r1, b6ccc <_ZN12Adafruit_GFX5writeEh+0xdc>
   b6ca6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b6caa:	4408      	add	r0, r1
   b6cac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6cb0:	fb06 1100 	mla	r1, r6, r0, r1
   b6cb4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b6cb8:	4281      	cmp	r1, r0
   b6cba:	dd07      	ble.n	b6ccc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6cbc:	2000      	movs	r0, #0
   b6cbe:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6cc0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6cc4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b6cc6:	fb02 1207 	mla	r2, r2, r7, r1
   b6cca:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6ccc:	8ae2      	ldrh	r2, [r4, #22]
   b6cce:	9201      	str	r2, [sp, #4]
   b6cd0:	8aa2      	ldrh	r2, [r4, #20]
   b6cd2:	9200      	str	r2, [sp, #0]
   b6cd4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6cd8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6cdc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6ce0:	4620      	mov	r0, r4
   b6ce2:	f7ff fe17 	bl	b6914 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6ce6:	7929      	ldrb	r1, [r5, #4]
   b6ce8:	7e22      	ldrb	r2, [r4, #24]
   b6cea:	8a23      	ldrh	r3, [r4, #16]
   b6cec:	fb01 3302 	mla	r3, r1, r2, r3
   b6cf0:	e7b8      	b.n	b6c64 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6cf2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6cf2:	2901      	cmp	r1, #1
   b6cf4:	bf38      	it	cc
   b6cf6:	2101      	movcc	r1, #1
   b6cf8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b6cfa:	7641      	strb	r1, [r0, #25]
}
   b6cfc:	4770      	bx	lr
	...

000b6d00 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6d00:	b510      	push	{r4, lr}
   b6d02:	4b06      	ldr	r3, [pc, #24]	; (b6d1c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6d04:	6003      	str	r3, [r0, #0]
   b6d06:	4604      	mov	r4, r0
	if (mutex) {
   b6d08:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6d0a:	b108      	cbz	r0, b6d10 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6d0c:	f002 f9dc 	bl	b90c8 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6d10:	4620      	mov	r0, r4
   b6d12:	f001 fc03 	bl	b851c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6d16:	4620      	mov	r0, r4
   b6d18:	bd10      	pop	{r4, pc}
   b6d1a:	bf00      	nop
   b6d1c:	000c0e74 	.word	0x000c0e74

000b6d20 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6d20:	b510      	push	{r4, lr}
   b6d22:	4604      	mov	r4, r0
}
   b6d24:	f7ff ffec 	bl	b6d00 <_ZN16OledWingAdafruitD1Ev>
   b6d28:	4620      	mov	r0, r4
   b6d2a:	2170      	movs	r1, #112	; 0x70
   b6d2c:	f7fd f9b7 	bl	b409e <_ZdlPvj>
   b6d30:	4620      	mov	r0, r4
   b6d32:	bd10      	pop	{r4, pc}

000b6d34 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6d34:	b530      	push	{r4, r5, lr}
   b6d36:	b085      	sub	sp, #20
   b6d38:	4604      	mov	r4, r0
   b6d3a:	460d      	mov	r5, r1
   b6d3c:	f006 fa48 	bl	bd1d0 <_Z19__fetch_global_Wirev>
   b6d40:	4a10      	ldr	r2, [pc, #64]	; (b6d84 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b6d42:	4911      	ldr	r1, [pc, #68]	; (b6d88 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6d44:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6d48:	f04f 32ff 	mov.w	r2, #4294967295
   b6d4c:	2180      	movs	r1, #128	; 0x80
   b6d4e:	4603      	mov	r3, r0
   b6d50:	9200      	str	r2, [sp, #0]
   b6d52:	4620      	mov	r0, r4
   b6d54:	2220      	movs	r2, #32
   b6d56:	f001 fc59 	bl	b860c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6d5a:	4b0c      	ldr	r3, [pc, #48]	; (b6d8c <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6d5c:	6023      	str	r3, [r4, #0]
   b6d5e:	2300      	movs	r3, #0
   b6d60:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6d64:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6d68:	f000 f83b 	bl	b6de2 <_ZN8DebounceC1Ev>
   b6d6c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6d70:	f000 f837 	bl	b6de2 <_ZN8DebounceC1Ev>
   b6d74:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6d78:	f000 f833 	bl	b6de2 <_ZN8DebounceC1Ev>
}
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	b005      	add	sp, #20
   b6d80:	bd30      	pop	{r4, r5, pc}
   b6d82:	bf00      	nop
   b6d84:	00061a80 	.word	0x00061a80
   b6d88:	000186a0 	.word	0x000186a0
   b6d8c:	000c0e74 	.word	0x000c0e74

000b6d90 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6d90:	b513      	push	{r0, r1, r4, lr}
   b6d92:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6d94:	3050      	adds	r0, #80	; 0x50
   b6d96:	f002 f98f 	bl	b90b8 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6d9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6d9c:	07d9      	lsls	r1, r3, #31
   b6d9e:	d505      	bpl.n	b6dac <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6da0:	2202      	movs	r2, #2
   b6da2:	2104      	movs	r1, #4
   b6da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6da8:	f000 f82f 	bl	b6e0a <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6dac:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6dae:	079a      	lsls	r2, r3, #30
   b6db0:	d505      	bpl.n	b6dbe <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6db2:	2200      	movs	r2, #0
   b6db4:	2103      	movs	r1, #3
   b6db6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6dba:	f000 f826 	bl	b6e0a <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6dbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6dc0:	075b      	lsls	r3, r3, #29
   b6dc2:	d505      	bpl.n	b6dd0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6dc4:	2202      	movs	r2, #2
   b6dc6:	4611      	mov	r1, r2
   b6dc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6dcc:	f000 f81d 	bl	b6e0a <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6dd0:	2301      	movs	r3, #1
   b6dd2:	9300      	str	r3, [sp, #0]
   b6dd4:	223c      	movs	r2, #60	; 0x3c
   b6dd6:	2102      	movs	r1, #2
   b6dd8:	4620      	mov	r0, r4
   b6dda:	f001 fd1f 	bl	b881c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b6dde:	b002      	add	sp, #8
   b6de0:	bd10      	pop	{r4, pc}

000b6de2 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6de2:	2100      	movs	r1, #0
   b6de4:	220a      	movs	r2, #10
   b6de6:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6dea:	4770      	bx	lr

000b6dec <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6dec:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6dee:	b510      	push	{r4, lr}
   b6df0:	4604      	mov	r4, r0
    this->pin = pin;
   b6df2:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6df4:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6df6:	b288      	uxth	r0, r1
   b6df8:	f006 f980 	bl	bd0fc <digitalRead>
   b6dfc:	b108      	cbz	r0, b6e02 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6dfe:	2303      	movs	r3, #3
   b6e00:	71a3      	strb	r3, [r4, #6]
   b6e02:	f002 f85d 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6e06:	6020      	str	r0, [r4, #0]
#endif
}
   b6e08:	bd10      	pop	{r4, pc}

000b6e0a <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6e0a:	b538      	push	{r3, r4, r5, lr}
   b6e0c:	460c      	mov	r4, r1
   b6e0e:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b6e10:	4611      	mov	r1, r2
   b6e12:	b2a0      	uxth	r0, r4
   b6e14:	f006 f948 	bl	bd0a8 <pinMode>
  
  this->attach(pin);
   b6e18:	4621      	mov	r1, r4
   b6e1a:	4628      	mov	r0, r5
}
   b6e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b6e20:	f7ff bfe4 	b.w	b6dec <_ZN8Debounce6attachEi>

000b6e24 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6e24:	2904      	cmp	r1, #4
   b6e26:	d804      	bhi.n	b6e32 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6e28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6e2c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6e30:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6e32:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6e34:	bf9b      	ittet	ls
   b6e36:	f101 31ff 	addls.w	r1, r1, #4294967295
   b6e3a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6e3e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6e40:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6e42:	bf84      	itt	hi
   b6e44:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6e48:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6e4a:	4770      	bx	lr

000b6e4c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6e4c:	b510      	push	{r4, lr}
   b6e4e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6e50:	3024      	adds	r0, #36	; 0x24
   b6e52:	f000 feed 	bl	b7c30 <_ZN8FatCache4syncEv>
   b6e56:	b128      	cbz	r0, b6e64 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6e58:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6e60:	f000 bee6 	b.w	b7c30 <_ZN8FatCache4syncEv>
  }
   b6e64:	bd10      	pop	{r4, pc}

000b6e66 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6e66:	1e41      	subs	r1, r0, #1
   b6e68:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6e6c:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6e6e:	0842      	lsrs	r2, r0, #1
   b6e70:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6e74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6e78:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6e7c:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6e7e:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6e80:	d1f5      	bne.n	b6e6e <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6e82:	4770      	bx	lr

000b6e84 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6e84:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6e86:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6e88:	4604      	mov	r4, r0
   b6e8a:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6e8c:	b923      	cbnz	r3, b6e98 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6e92:	6889      	ldr	r1, [r1, #8]
   b6e94:	f000 bbc7 	b.w	b7626 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6e98:	2224      	movs	r2, #36	; 0x24
   b6e9a:	2100      	movs	r1, #0
   b6e9c:	f007 f8b1 	bl	be002 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6ea0:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6ea2:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6ea4:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6ea6:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6ea8:	68ab      	ldr	r3, [r5, #8]
   b6eaa:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6eac:	68eb      	ldr	r3, [r5, #12]
   b6eae:	6223      	str	r3, [r4, #32]
}
   b6eb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6eb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6eb8:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6eba:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6ebe:	2b20      	cmp	r3, #32
   b6ec0:	d0fa      	beq.n	b6eb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6ec2:	4d6a      	ldr	r5, [pc, #424]	; (b706c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6ec4:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6ec6:	2400      	movs	r4, #0
    c = path[len];
   b6ec8:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6eca:	b1c3      	cbz	r3, b6efe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6ecc:	2b2f      	cmp	r3, #47	; 0x2f
   b6ece:	d016      	beq.n	b6efe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6ed0:	2b5c      	cmp	r3, #92	; 0x5c
   b6ed2:	d102      	bne.n	b6eda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6ed4:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6eda:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6ede:	b2c0      	uxtb	r0, r0
   b6ee0:	281d      	cmp	r0, #29
   b6ee2:	d803      	bhi.n	b6eec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6ee4:	fa25 f000 	lsr.w	r0, r5, r0
   b6ee8:	07c0      	lsls	r0, r0, #31
   b6eea:	d4f3      	bmi.n	b6ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6eec:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6ef0:	283c      	cmp	r0, #60	; 0x3c
   b6ef2:	d0ef      	beq.n	b6ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6ef4:	3b20      	subs	r3, #32
   b6ef6:	2b5e      	cmp	r3, #94	; 0x5e
   b6ef8:	d8ec      	bhi.n	b6ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6efa:	3401      	adds	r4, #1
    c = path[len];
   b6efc:	e7e4      	b.n	b6ec8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6efe:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6f00:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6f02:	4607      	mov	r7, r0
   b6f04:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6f08:	2d20      	cmp	r5, #32
   b6f0a:	d0fa      	beq.n	b6f02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6f0c:	2d2f      	cmp	r5, #47	; 0x2f
   b6f0e:	d0f8      	beq.n	b6f02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6f10:	6017      	str	r7, [r2, #0]
  while (len) {
   b6f12:	b14c      	cbz	r4, b6f28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6f14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6f18:	2a2e      	cmp	r2, #46	; 0x2e
   b6f1a:	d001      	beq.n	b6f20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6f1c:	2a20      	cmp	r2, #32
   b6f1e:	d101      	bne.n	b6f24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6f20:	3c01      	subs	r4, #1
  while (len) {
   b6f22:	e7f6      	b.n	b6f12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6f24:	2cff      	cmp	r4, #255	; 0xff
   b6f26:	dcd5      	bgt.n	b6ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6f28:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6f2c:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6f30:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6f32:	f8c1 300d 	str.w	r3, [r1, #13]
   b6f36:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6f38:	f04f 0800 	mov.w	r8, #0
   b6f3c:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6f40:	2b2e      	cmp	r3, #46	; 0x2e
   b6f42:	d001      	beq.n	b6f48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6f44:	2b20      	cmp	r3, #32
   b6f46:	d102      	bne.n	b6f4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6f48:	f108 0801 	add.w	r8, r8, #1
   b6f4c:	e7f6      	b.n	b6f3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6f4e:	fab8 f088 	clz	r0, r8
   b6f52:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6f54:	1e65      	subs	r5, r4, #1
   b6f56:	1c6b      	adds	r3, r5, #1
   b6f58:	d002      	beq.n	b6f60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6f5a:	5d73      	ldrb	r3, [r6, r5]
   b6f5c:	2b2e      	cmp	r3, #46	; 0x2e
   b6f5e:	d114      	bne.n	b6f8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6f60:	f04f 0900 	mov.w	r9, #0
   b6f64:	2707      	movs	r7, #7
   b6f66:	464a      	mov	r2, r9
   b6f68:	46ca      	mov	sl, r9
   b6f6a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6f6e:	45a0      	cmp	r8, r4
   b6f70:	da68      	bge.n	b7044 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6f72:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6f76:	2b20      	cmp	r3, #32
   b6f78:	d003      	beq.n	b6f82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6f7a:	2b2e      	cmp	r3, #46	; 0x2e
   b6f7c:	d107      	bne.n	b6f8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6f7e:	45a8      	cmp	r8, r5
   b6f80:	d012      	beq.n	b6fa8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6f82:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6f84:	f108 0801 	add.w	r8, r8, #1
   b6f88:	e7f1      	b.n	b6f6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6f8a:	3d01      	subs	r5, #1
   b6f8c:	e7e3      	b.n	b6f56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6f8e:	2b22      	cmp	r3, #34	; 0x22
   b6f90:	d008      	beq.n	b6fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6f92:	2b7c      	cmp	r3, #124	; 0x7c
   b6f94:	d006      	beq.n	b6fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6f96:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6f9a:	f1bc 0f05 	cmp.w	ip, #5
   b6f9e:	d80a      	bhi.n	b6fb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6fa0:	2b2d      	cmp	r3, #45	; 0x2d
   b6fa2:	d012      	beq.n	b6fca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6fa4:	45a8      	cmp	r8, r5
   b6fa6:	d15b      	bne.n	b7060 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6fa8:	2f0a      	cmp	r7, #10
   b6faa:	d04a      	beq.n	b7042 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6fac:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6fae:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6fb0:	f04f 0e10 	mov.w	lr, #16
   b6fb4:	e7e6      	b.n	b6f84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6fb6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6fba:	f1bc 0f05 	cmp.w	ip, #5
   b6fbe:	d9f1      	bls.n	b6fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6fc0:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6fc4:	f1bc 0f02 	cmp.w	ip, #2
   b6fc8:	d9ec      	bls.n	b6fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6fca:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6fce:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6fd2:	d8e7      	bhi.n	b6fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6fd4:	45a8      	cmp	r8, r5
   b6fd6:	d0e7      	beq.n	b6fa8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6fd8:	42ba      	cmp	r2, r7
   b6fda:	d830      	bhi.n	b703e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6fdc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6fe0:	f1bc 0f19 	cmp.w	ip, #25
   b6fe4:	d81a      	bhi.n	b701c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6fe6:	3b20      	subs	r3, #32
        lc |= bit;
   b6fe8:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6fec:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6fee:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6ff2:	f102 0c01 	add.w	ip, r2, #1
   b6ff6:	fa5f fc8c 	uxtb.w	ip, ip
   b6ffa:	440a      	add	r2, r1
      if (i < 7) {
   b6ffc:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b7000:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b7002:	d801      	bhi.n	b7008 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b7004:	f881 c00c 	strb.w	ip, [r1, #12]
   b7008:	4662      	mov	r2, ip
   b700a:	e7bb      	b.n	b6f84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b700c:	45a8      	cmp	r8, r5
   b700e:	dc18      	bgt.n	b7042 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b7010:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b7012:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7014:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7016:	f04f 0e10 	mov.w	lr, #16
   b701a:	e7b2      	b.n	b6f82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b701c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b7020:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b7024:	bf98      	it	ls
   b7026:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b702a:	e7e2      	b.n	b6ff2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b702c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b702e:	2001      	movs	r0, #1
   b7030:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b7032:	4419      	add	r1, r3
   b7034:	237e      	movs	r3, #126	; 0x7e
   b7036:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b7038:	2331      	movs	r3, #49	; 0x31
   b703a:	738b      	strb	r3, [r1, #14]
   b703c:	e74b      	b.n	b6ed6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b703e:	2f0a      	cmp	r7, #10
   b7040:	d1e4      	bne.n	b700c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b7042:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b7044:	7b4b      	ldrb	r3, [r1, #13]
   b7046:	2b20      	cmp	r3, #32
   b7048:	f43f af44 	beq.w	b6ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b704c:	2800      	cmp	r0, #0
   b704e:	d0ed      	beq.n	b702c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7050:	ea1a 0f09 	tst.w	sl, r9
   b7054:	bf18      	it	ne
   b7056:	f04f 0902 	movne.w	r9, #2
   b705a:	f881 9000 	strb.w	r9, [r1]
   b705e:	e73a      	b.n	b6ed6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7060:	42ba      	cmp	r2, r7
   b7062:	d8ec      	bhi.n	b703e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7064:	2000      	movs	r0, #0
      c = '_';
   b7066:	235f      	movs	r3, #95	; 0x5f
   b7068:	e7c3      	b.n	b6ff2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b706a:	bf00      	nop
   b706c:	31000101 	.word	0x31000101

000b7070 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b7070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7074:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7076:	2300      	movs	r3, #0
   b7078:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b707a:	7803      	ldrb	r3, [r0, #0]
   b707c:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b707e:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7080:	d50a      	bpl.n	b7098 <_ZN7FatFile6removeEv+0x28>
   b7082:	7883      	ldrb	r3, [r0, #2]
   b7084:	079a      	lsls	r2, r3, #30
   b7086:	d507      	bpl.n	b7098 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7088:	6a01      	ldr	r1, [r0, #32]
   b708a:	b939      	cbnz	r1, b709c <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b708c:	2101      	movs	r1, #1
   b708e:	4620      	mov	r0, r4
   b7090:	f000 faba 	bl	b7608 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7094:	4605      	mov	r5, r0
   b7096:	b938      	cbnz	r0, b70a8 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b7098:	2000      	movs	r0, #0
   b709a:	e048      	b.n	b712e <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b709c:	6880      	ldr	r0, [r0, #8]
   b709e:	f000 feb8 	bl	b7e12 <_ZN9FatVolume9freeChainEm>
   b70a2:	2800      	cmp	r0, #0
   b70a4:	d1f2      	bne.n	b708c <_ZN7FatFile6removeEv+0x1c>
   b70a6:	e7f7      	b.n	b7098 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b70a8:	f7ff fedd 	bl	b6e66 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b70ac:	27e5      	movs	r7, #229	; 0xe5
   b70ae:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b70b0:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b70b2:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b70b4:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b70b6:	68a0      	ldr	r0, [r4, #8]
   b70b8:	f7ff fec8 	bl	b6e4c <_ZN9FatVolume9cacheSyncEv>
   b70bc:	2800      	cmp	r0, #0
   b70be:	d0eb      	beq.n	b7098 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b70c0:	78e3      	ldrb	r3, [r4, #3]
   b70c2:	2b00      	cmp	r3, #0
   b70c4:	d033      	beq.n	b712e <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b70c6:	4621      	mov	r1, r4
   b70c8:	a801      	add	r0, sp, #4
   b70ca:	f7ff fedb 	bl	b6e84 <_ZN7FatFile11openClusterEPS_>
   b70ce:	2800      	cmp	r0, #0
   b70d0:	d0e2      	beq.n	b7098 <_ZN7FatFile6removeEv+0x28>
   b70d2:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b70d4:	78e3      	ldrb	r3, [r4, #3]
   b70d6:	fa5f f885 	uxtb.w	r8, r5
   b70da:	4543      	cmp	r3, r8
   b70dc:	d3dc      	bcc.n	b7098 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b70de:	88a1      	ldrh	r1, [r4, #4]
   b70e0:	1b49      	subs	r1, r1, r5
   b70e2:	0149      	lsls	r1, r1, #5
   b70e4:	a801      	add	r0, sp, #4
   b70e6:	f000 fb84 	bl	b77f2 <_ZN7FatFile7seekSetEm>
   b70ea:	2800      	cmp	r0, #0
   b70ec:	d0d4      	beq.n	b7098 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b70ee:	2100      	movs	r1, #0
   b70f0:	a801      	add	r0, sp, #4
   b70f2:	f000 fb5f 	bl	b77b4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b70f6:	2800      	cmp	r0, #0
   b70f8:	d0ce      	beq.n	b7098 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b70fa:	7ac3      	ldrb	r3, [r0, #11]
   b70fc:	2b0f      	cmp	r3, #15
   b70fe:	d1cb      	bne.n	b7098 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b7100:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b7102:	f002 031f 	and.w	r3, r2, #31
   b7106:	4543      	cmp	r3, r8
   b7108:	d1c6      	bne.n	b7098 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b710a:	7b43      	ldrb	r3, [r0, #13]
   b710c:	42b3      	cmp	r3, r6
   b710e:	d1c3      	bne.n	b7098 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b7110:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b7112:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7114:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b7118:	f043 0301 	orr.w	r3, r3, #1
   b711c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b7120:	0653      	lsls	r3, r2, #25
   b7122:	f105 0501 	add.w	r5, r5, #1
   b7126:	d5d5      	bpl.n	b70d4 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b7128:	68a0      	ldr	r0, [r4, #8]
   b712a:	f7ff fe8f 	bl	b6e4c <_ZN9FatVolume9cacheSyncEv>
}
   b712e:	b00a      	add	sp, #40	; 0x28
   b7130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7134 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7138:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b713c:	4606      	mov	r6, r0
   b713e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7140:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b7142:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7144:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7148:	6861      	ldr	r1, [r4, #4]
   b714a:	68a2      	ldr	r2, [r4, #8]
   b714c:	186b      	adds	r3, r5, r1
   b714e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7150:	4411      	add	r1, r2
   b7152:	4291      	cmp	r1, r2
   b7154:	d006      	beq.n	b7164 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b7156:	f812 0b01 	ldrb.w	r0, [r2], #1
   b715a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b715e:	4043      	eors	r3, r0
   b7160:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7162:	e7f6      	b.n	b7152 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7164:	f1b9 0f03 	cmp.w	r9, #3
   b7168:	bf28      	it	cs
   b716a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b716e:	f109 0204 	add.w	r2, r9, #4
   b7172:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7174:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7178:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b717a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b717c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b717e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7180:	bf94      	ite	ls
   b7182:	3130      	addls	r1, #48	; 0x30
   b7184:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7186:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7188:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b718a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b718e:	d1f1      	bne.n	b7174 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7190:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7194:	2100      	movs	r1, #0
   b7196:	735f      	strb	r7, [r3, #13]
   b7198:	4630      	mov	r0, r6
   b719a:	f000 fb2a 	bl	b77f2 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b719e:	2101      	movs	r1, #1
   b71a0:	4630      	mov	r0, r6
   b71a2:	f000 fb07 	bl	b77b4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b71a6:	4601      	mov	r1, r0
   b71a8:	b928      	cbnz	r0, b71b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b71aa:	7870      	ldrb	r0, [r6, #1]
   b71ac:	fab0 f080 	clz	r0, r0
   b71b0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b71b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b71b6:	7803      	ldrb	r3, [r0, #0]
   b71b8:	b16b      	cbz	r3, b71d6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b71ba:	7ac3      	ldrb	r3, [r0, #11]
   b71bc:	071b      	lsls	r3, r3, #28
   b71be:	d4ee      	bmi.n	b719e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b71c0:	220b      	movs	r2, #11
   b71c2:	4640      	mov	r0, r8
   b71c4:	f006 fee5 	bl	bdf92 <memcmp>
   b71c8:	2800      	cmp	r0, #0
   b71ca:	d1e8      	bne.n	b719e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b71cc:	3501      	adds	r5, #1
   b71ce:	b2ad      	uxth	r5, r5
   b71d0:	2d64      	cmp	r5, #100	; 0x64
   b71d2:	d1b9      	bne.n	b7148 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b71d4:	e7ed      	b.n	b71b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b71d6:	2001      	movs	r0, #1
   b71d8:	e7eb      	b.n	b71b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b71dc <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71e0:	ed2d 8b02 	vpush	{d8}
   b71e4:	b08b      	sub	sp, #44	; 0x2c
   b71e6:	460d      	mov	r5, r1
   b71e8:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b71ea:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71ec:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b71ee:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71f2:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b71f4:	d105      	bne.n	b7202 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b71f6:	2000      	movs	r0, #0
}
   b71f8:	b00b      	add	sp, #44	; 0x2c
   b71fa:	ecbd 8b02 	vpop	{d8}
   b71fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7202:	9b07      	ldr	r3, [sp, #28]
   b7204:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7206:	2b00      	cmp	r3, #0
   b7208:	d1f5      	bne.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b720a:	6853      	ldr	r3, [r2, #4]
   b720c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b720e:	7813      	ldrb	r3, [r2, #0]
   b7210:	079c      	lsls	r4, r3, #30
   b7212:	bf1f      	itttt	ne
   b7214:	9b05      	ldrne	r3, [sp, #20]
   b7216:	330c      	addne	r3, #12
   b7218:	220d      	movne	r2, #13
   b721a:	fbb3 f3f2 	udivne	r3, r3, r2
   b721e:	bf1a      	itte	ne
   b7220:	3301      	addne	r3, #1
   b7222:	b2db      	uxtbne	r3, r3
   b7224:	2301      	moveq	r3, #1
    seekSet(0);
   b7226:	2100      	movs	r1, #0
   b7228:	4628      	mov	r0, r5
   b722a:	9303      	str	r3, [sp, #12]
   b722c:	f000 fae1 	bl	b77f2 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7230:	f107 030d 	add.w	r3, r7, #13
  }
   b7234:	f04f 0b00 	mov.w	fp, #0
   b7238:	ee08 3a10 	vmov	s16, r3
   b723c:	46da      	mov	sl, fp
   b723e:	465c      	mov	r4, fp
   b7240:	465e      	mov	r6, fp
   b7242:	f8cd b010 	str.w	fp, [sp, #16]
   b7246:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7248:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b724a:	2101      	movs	r1, #1
   b724c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b724e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7252:	f000 faaf 	bl	b77b4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7256:	4603      	mov	r3, r0
   b7258:	2800      	cmp	r0, #0
   b725a:	d171      	bne.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b725c:	786b      	ldrb	r3, [r5, #1]
   b725e:	2b00      	cmp	r3, #0
   b7260:	d1c9      	bne.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7262:	9b06      	ldr	r3, [sp, #24]
   b7264:	059a      	lsls	r2, r3, #22
   b7266:	d5c6      	bpl.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7268:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b726c:	3b01      	subs	r3, #1
   b726e:	2b01      	cmp	r3, #1
   b7270:	d8c1      	bhi.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7272:	9b04      	ldr	r3, [sp, #16]
   b7274:	2c00      	cmp	r4, #0
   b7276:	bf08      	it	eq
   b7278:	4643      	moveq	r3, r8
   b727a:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b727c:	9b03      	ldr	r3, [sp, #12]
   b727e:	429c      	cmp	r4, r3
   b7280:	f0c0 80f1 	bcc.w	b7466 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7284:	f1b9 0f00 	cmp.w	r9, #0
   b7288:	f040 810a 	bne.w	b74a0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b728c:	9b04      	ldr	r3, [sp, #16]
   b728e:	4628      	mov	r0, r5
   b7290:	0159      	lsls	r1, r3, #5
   b7292:	f000 faae 	bl	b77f2 <_ZN7FatFile7seekSetEm>
   b7296:	2800      	cmp	r0, #0
   b7298:	d0ad      	beq.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b729a:	9b03      	ldr	r3, [sp, #12]
   b729c:	f103 39ff 	add.w	r9, r3, #4294967295
   b72a0:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b72a4:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b72a6:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b72aa:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b72ae:	2e00      	cmp	r6, #0
   b72b0:	f000 810d 	beq.w	b74ce <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b72b4:	2100      	movs	r1, #0
   b72b6:	4628      	mov	r0, r5
   b72b8:	f000 fa7c 	bl	b77b4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b72bc:	4604      	mov	r4, r0
   b72be:	2800      	cmp	r0, #0
   b72c0:	d099      	beq.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b72c2:	68aa      	ldr	r2, [r5, #8]
   b72c4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b72c8:	454e      	cmp	r6, r9
   b72ca:	f043 0301 	orr.w	r3, r3, #1
   b72ce:	bf0c      	ite	eq
   b72d0:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b72d4:	46b3      	movne	fp, r6
   b72d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b72da:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b72de:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b72e2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b72e6:	f107 000d 	add.w	r0, r7, #13
   b72ea:	f7ff fdbc 	bl	b6e66 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b72ee:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b72f2:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b72f4:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b72f8:	f00b 031f 	and.w	r3, fp, #31
   b72fc:	220d      	movs	r2, #13
   b72fe:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7300:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7304:	4353      	muls	r3, r2
   b7306:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7308:	9905      	ldr	r1, [sp, #20]
   b730a:	4299      	cmp	r1, r3
   b730c:	f240 80d0 	bls.w	b74b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7310:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7314:	2a04      	cmp	r2, #4
   b7316:	fa5f fe82 	uxtb.w	lr, r2
   b731a:	f102 0001 	add.w	r0, r2, #1
   b731e:	f200 80cd 	bhi.w	b74bc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7322:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7326:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b732a:	280d      	cmp	r0, #13
   b732c:	f103 0301 	add.w	r3, r3, #1
   b7330:	4602      	mov	r2, r0
   b7332:	d1e9      	bne.n	b7308 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7334:	3e01      	subs	r6, #1
   b7336:	b2f6      	uxtb	r6, r6
   b7338:	e7b9      	b.n	b72ae <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b733a:	f04f 0901 	mov.w	r9, #1
   b733e:	e783      	b.n	b7248 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7340:	7802      	ldrb	r2, [r0, #0]
   b7342:	2ae5      	cmp	r2, #229	; 0xe5
   b7344:	d000      	beq.n	b7348 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7346:	b97a      	cbnz	r2, b7368 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7348:	9904      	ldr	r1, [sp, #16]
   b734a:	2c00      	cmp	r4, #0
   b734c:	bf08      	it	eq
   b734e:	4641      	moveq	r1, r8
   b7350:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7352:	9903      	ldr	r1, [sp, #12]
   b7354:	428c      	cmp	r4, r1
        freeFound++;
   b7356:	bf3c      	itt	cc
   b7358:	3401      	addcc	r4, #1
   b735a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b735c:	2a00      	cmp	r2, #0
   b735e:	d080      	beq.n	b7262 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7360:	2ae5      	cmp	r2, #229	; 0xe5
   b7362:	d105      	bne.n	b7370 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7364:	2600      	movs	r6, #0
   b7366:	e76f      	b.n	b7248 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7368:	9903      	ldr	r1, [sp, #12]
   b736a:	428c      	cmp	r4, r1
   b736c:	bf38      	it	cc
   b736e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7370:	2a2e      	cmp	r2, #46	; 0x2e
   b7372:	d0f7      	beq.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7374:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7376:	290f      	cmp	r1, #15
   b7378:	d14a      	bne.n	b7410 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b737a:	bb16      	cbnz	r6, b73c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b737c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7380:	f43f af62 	beq.w	b7248 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7384:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7388:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b738c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b738e:	220d      	movs	r2, #13
   b7390:	f10a 38ff 	add.w	r8, sl, #4294967295
   b7394:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7398:	9a05      	ldr	r2, [sp, #20]
   b739a:	4542      	cmp	r2, r8
   b739c:	d9e2      	bls.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b739e:	eba2 0208 	sub.w	r2, r2, r8
   b73a2:	9208      	str	r2, [sp, #32]
   b73a4:	2200      	movs	r2, #0
   b73a6:	eb02 0108 	add.w	r1, r2, r8
   b73aa:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b73ac:	4618      	mov	r0, r3
   b73ae:	b2d1      	uxtb	r1, r2
   b73b0:	f7ff fd38 	bl	b6e24 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b73b4:	9908      	ldr	r1, [sp, #32]
   b73b6:	428a      	cmp	r2, r1
   b73b8:	d10d      	bne.n	b73d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b73ba:	2800      	cmp	r0, #0
   b73bc:	bf18      	it	ne
   b73be:	2600      	movne	r6, #0
   b73c0:	e742      	b.n	b7248 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b73c2:	f10a 3aff 	add.w	sl, sl, #4294967295
   b73c6:	fa5f fa8a 	uxtb.w	sl, sl
   b73ca:	4552      	cmp	r2, sl
   b73cc:	d1ca      	bne.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b73ce:	7b5a      	ldrb	r2, [r3, #13]
   b73d0:	455a      	cmp	r2, fp
   b73d2:	d0dc      	beq.n	b738e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b73d4:	e7c6      	b.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73d6:	28ff      	cmp	r0, #255	; 0xff
   b73d8:	d8c4      	bhi.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b73da:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73de:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b73e2:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73e4:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73e6:	bf9c      	itt	ls
   b73e8:	f10e 0020 	addls.w	r0, lr, #32
   b73ec:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73f0:	4608      	mov	r0, r1
   b73f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   b73f4:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73f6:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b73fa:	f1bc 0f19 	cmp.w	ip, #25
   b73fe:	bf9c      	itt	ls
   b7400:	3120      	addls	r1, #32
   b7402:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7404:	4571      	cmp	r1, lr
   b7406:	d1ad      	bne.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7408:	3201      	adds	r2, #1
   b740a:	2a0d      	cmp	r2, #13
   b740c:	d1cb      	bne.n	b73a6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b740e:	e71b      	b.n	b7248 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7410:	0708      	lsls	r0, r1, #28
   b7412:	d4a7      	bmi.n	b7364 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7414:	b15e      	cbz	r6, b742e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7416:	f1ba 0f01 	cmp.w	sl, #1
   b741a:	f47f aeec 	bne.w	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b741e:	4618      	mov	r0, r3
   b7420:	f7ff fd21 	bl	b6e66 <_ZN7FatFile11lfnChecksumEPh>
   b7424:	4558      	cmp	r0, fp
   b7426:	f47f aee6 	bne.w	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b742a:	46b1      	mov	r9, r6
   b742c:	e00e      	b.n	b744c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b742e:	ee18 1a10 	vmov	r1, s16
   b7432:	220b      	movs	r2, #11
   b7434:	4618      	mov	r0, r3
   b7436:	f006 fdac 	bl	bdf92 <memcmp>
   b743a:	2800      	cmp	r0, #0
   b743c:	f47f af04 	bne.w	b7248 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7440:	f897 9000 	ldrb.w	r9, [r7]
   b7444:	f019 0901 	ands.w	r9, r9, #1
   b7448:	f47f af77 	bne.w	b733a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b744c:	9b06      	ldr	r3, [sp, #24]
   b744e:	0519      	lsls	r1, r3, #20
   b7450:	f53f aed1 	bmi.w	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7454:	9b06      	ldr	r3, [sp, #24]
   b7456:	9807      	ldr	r0, [sp, #28]
   b7458:	f8cd 9000 	str.w	r9, [sp]
   b745c:	4642      	mov	r2, r8
   b745e:	4629      	mov	r1, r5
   b7460:	f000 fa0a 	bl	b7878 <_ZN7FatFile15openCachedEntryEPS_tih>
   b7464:	e6c8      	b.n	b71f8 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7466:	2100      	movs	r1, #0
   b7468:	4628      	mov	r0, r5
   b746a:	f000 f9a3 	bl	b77b4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b746e:	b9a0      	cbnz	r0, b749a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7470:	786b      	ldrb	r3, [r5, #1]
   b7472:	2b00      	cmp	r3, #0
   b7474:	f47f aebf 	bne.w	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7478:	4628      	mov	r0, r5
   b747a:	f000 f887 	bl	b758c <_ZN7FatFile13addDirClusterEv>
   b747e:	2800      	cmp	r0, #0
   b7480:	f43f aeb9 	beq.w	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7484:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7486:	791b      	ldrb	r3, [r3, #4]
   b7488:	2b01      	cmp	r3, #1
   b748a:	f63f aefb 	bhi.w	b7284 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b748e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7490:	3410      	adds	r4, #16
   b7492:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7494:	42a3      	cmp	r3, r4
   b7496:	d8ef      	bhi.n	b7478 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7498:	e6f4      	b.n	b7284 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b749a:	3401      	adds	r4, #1
   b749c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b749e:	e6ed      	b.n	b727c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b74a0:	4639      	mov	r1, r7
   b74a2:	4628      	mov	r0, r5
   b74a4:	f7ff fe46 	bl	b7134 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b74a8:	2800      	cmp	r0, #0
   b74aa:	f47f aeef 	bne.w	b728c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b74ae:	e6a2      	b.n	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b74b0:	bf14      	ite	ne
   b74b2:	f04f 31ff 	movne.w	r1, #4294967295
   b74b6:	2100      	moveq	r1, #0
   b74b8:	b289      	uxth	r1, r1
   b74ba:	e72b      	b.n	b7314 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b74bc:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b74c0:	bf94      	ite	ls
   b74c2:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b74c6:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b74ca:	8091      	strh	r1, [r2, #4]
   b74cc:	e72d      	b.n	b732a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b74ce:	4631      	mov	r1, r6
   b74d0:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b74d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b74d6:	f000 f96d 	bl	b77b4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b74da:	4604      	mov	r4, r0
   b74dc:	2800      	cmp	r0, #0
   b74de:	f43f ae8a 	beq.w	b71f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b74e2:	2220      	movs	r2, #32
   b74e4:	4631      	mov	r1, r6
   b74e6:	f006 fd8c 	bl	be002 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b74ea:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b74ee:	6023      	str	r3, [r4, #0]
   b74f0:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b74f4:	6063      	str	r3, [r4, #4]
   b74f6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b74fa:	8123      	strh	r3, [r4, #8]
   b74fc:	7dfb      	ldrb	r3, [r7, #23]
   b74fe:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7500:	783b      	ldrb	r3, [r7, #0]
   b7502:	f003 0318 	and.w	r3, r3, #24
   b7506:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7508:	4b0f      	ldr	r3, [pc, #60]	; (b7548 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b750a:	681b      	ldr	r3, [r3, #0]
   b750c:	b19b      	cbz	r3, b7536 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b750e:	f104 010e 	add.w	r1, r4, #14
   b7512:	f104 0010 	add.w	r0, r4, #16
   b7516:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7518:	8a23      	ldrh	r3, [r4, #16]
   b751a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b751c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b751e:	89e3      	ldrh	r3, [r4, #14]
   b7520:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7522:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7524:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7528:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b752c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7530:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b7534:	e78e      	b.n	b7454 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7536:	2321      	movs	r3, #33	; 0x21
   b7538:	7423      	strb	r3, [r4, #16]
   b753a:	2328      	movs	r3, #40	; 0x28
   b753c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b753e:	2308      	movs	r3, #8
   b7540:	73a6      	strb	r6, [r4, #14]
   b7542:	73e3      	strb	r3, [r4, #15]
   b7544:	e7e8      	b.n	b7518 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7546:	bf00      	nop
   b7548:	2003e644 	.word	0x2003e644

000b754c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b754c:	b538      	push	{r3, r4, r5, lr}
   b754e:	4604      	mov	r4, r0
   b7550:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b7552:	2224      	movs	r2, #36	; 0x24
   b7554:	2100      	movs	r1, #0
   b7556:	f006 fd54 	bl	be002 <memset>

  m_vol = vol;
   b755a:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b755c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b755e:	2b10      	cmp	r3, #16
   b7560:	d003      	beq.n	b756a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b7562:	2b20      	cmp	r3, #32
   b7564:	d006      	beq.n	b7574 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b7566:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b7568:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b756a:	2320      	movs	r3, #32
  m_flags = F_READ;
   b756c:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b756e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7570:	70a0      	strb	r0, [r4, #2]
  return true;
   b7572:	e7f9      	b.n	b7568 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b7574:	2340      	movs	r3, #64	; 0x40
   b7576:	e7f9      	b.n	b756c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b7578 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b7578:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b757a:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b757c:	f043 0304 	orr.w	r3, r3, #4
   b7580:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7582:	f100 0210 	add.w	r2, r0, #16
   b7586:	6880      	ldr	r0, [r0, #8]
   b7588:	f000 bc08 	b.w	b7d9c <_ZN9FatVolume15allocateClusterEmPm>

000b758c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b7590:	7801      	ldrb	r1, [r0, #0]
   b7592:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b7596:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b7598:	d003      	beq.n	b75a2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b759a:	2600      	movs	r6, #0
}
   b759c:	4630      	mov	r0, r6
   b759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b75a2:	6942      	ldr	r2, [r0, #20]
   b75a4:	4b17      	ldr	r3, [pc, #92]	; (b7604 <_ZN7FatFile13addDirClusterEv+0x78>)
   b75a6:	429a      	cmp	r2, r3
   b75a8:	d2f7      	bcs.n	b759a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b75aa:	f7ff ffe5 	bl	b7578 <_ZN7FatFile10addClusterEv>
   b75ae:	4606      	mov	r6, r0
   b75b0:	2800      	cmp	r0, #0
   b75b2:	d0f2      	beq.n	b759a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b75b4:	6921      	ldr	r1, [r4, #16]
   b75b6:	68a0      	ldr	r0, [r4, #8]
   b75b8:	f000 fb85 	bl	b7cc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   b75bc:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b75be:	68a0      	ldr	r0, [r4, #8]
   b75c0:	2205      	movs	r2, #5
   b75c2:	4639      	mov	r1, r7
   b75c4:	3024      	adds	r0, #36	; 0x24
   b75c6:	f000 fb5b 	bl	b7c80 <_ZN8FatCache4readEmh>
  if (!pc) {
   b75ca:	4680      	mov	r8, r0
   b75cc:	2800      	cmp	r0, #0
   b75ce:	d0e4      	beq.n	b759a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b75d0:	4629      	mov	r1, r5
   b75d2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b75d6:	f006 fd14 	bl	be002 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b75da:	2501      	movs	r5, #1
   b75dc:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b75de:	791a      	ldrb	r2, [r3, #4]
   b75e0:	42aa      	cmp	r2, r5
   b75e2:	d909      	bls.n	b75f8 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b75e4:	6818      	ldr	r0, [r3, #0]
   b75e6:	4642      	mov	r2, r8
   b75e8:	19e9      	adds	r1, r5, r7
   b75ea:	f000 feb6 	bl	b835a <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b75ee:	2800      	cmp	r0, #0
   b75f0:	d0d3      	beq.n	b759a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b75f2:	3501      	adds	r5, #1
   b75f4:	b2ed      	uxtb	r5, r5
   b75f6:	e7f1      	b.n	b75dc <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b75f8:	6963      	ldr	r3, [r4, #20]
   b75fa:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b75fe:	6163      	str	r3, [r4, #20]
  return true;
   b7600:	e7cc      	b.n	b759c <_ZN7FatFile13addDirClusterEv+0x10>
   b7602:	bf00      	nop
   b7604:	001ffe00 	.word	0x001ffe00

000b7608 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b7608:	b510      	push	{r4, lr}
   b760a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b760c:	6880      	ldr	r0, [r0, #8]
   b760e:	460a      	mov	r2, r1
   b7610:	3024      	adds	r0, #36	; 0x24
   b7612:	69a1      	ldr	r1, [r4, #24]
   b7614:	f000 fb34 	bl	b7c80 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7618:	b120      	cbz	r0, b7624 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b761a:	88a3      	ldrh	r3, [r4, #4]
   b761c:	f003 030f 	and.w	r3, r3, #15
   b7620:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b7624:	bd10      	pop	{r4, pc}

000b7626 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b7626:	7803      	ldrb	r3, [r0, #0]
   b7628:	b90b      	cbnz	r3, b762e <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b762a:	f7ff bf8f 	b.w	b754c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b762e:	2000      	movs	r0, #0
   b7630:	4770      	bx	lr

000b7632 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b7632:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b7636:	7803      	ldrb	r3, [r0, #0]
   b7638:	4604      	mov	r4, r0
   b763a:	4688      	mov	r8, r1
   b763c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b763e:	2b00      	cmp	r3, #0
   b7640:	d05d      	beq.n	b76fe <_ZN7FatFile4readEPvj+0xcc>
   b7642:	7882      	ldrb	r2, [r0, #2]
   b7644:	07d1      	lsls	r1, r2, #31
   b7646:	d55a      	bpl.n	b76fe <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b7648:	071a      	lsls	r2, r3, #28
   b764a:	d52d      	bpl.n	b76a8 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b764c:	69c3      	ldr	r3, [r0, #28]
   b764e:	6942      	ldr	r2, [r0, #20]
   b7650:	1a9b      	subs	r3, r3, r2
   b7652:	429d      	cmp	r5, r3
   b7654:	bf28      	it	cs
   b7656:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b7658:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b765a:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b765e:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b7662:	2e00      	cmp	r6, #0
   b7664:	f000 808f 	beq.w	b7786 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b7668:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b766a:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b766c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b766e:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7670:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7674:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b7678:	d51f      	bpl.n	b76ba <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b767a:	6a00      	ldr	r0, [r0, #32]
   b767c:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b767e:	68a0      	ldr	r0, [r4, #8]
   b7680:	f1ba 0f00 	cmp.w	sl, #0
   b7684:	d142      	bne.n	b770c <_ZN7FatFile4readEPvj+0xda>
   b7686:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b768a:	d33f      	bcc.n	b770c <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b768c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b768e:	4299      	cmp	r1, r3
   b7690:	d03c      	beq.n	b770c <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b7692:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b7696:	d252      	bcs.n	b773e <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b7698:	6800      	ldr	r0, [r0, #0]
   b769a:	4642      	mov	r2, r8
   b769c:	f000 fdd4 	bl	b8248 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b76a0:	b368      	cbz	r0, b76fe <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b76a2:	f44f 7700 	mov.w	r7, #512	; 0x200
   b76a6:	e044      	b.n	b7732 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b76a8:	069b      	lsls	r3, r3, #26
   b76aa:	d5d5      	bpl.n	b7658 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b76ac:	6883      	ldr	r3, [r0, #8]
   b76ae:	891a      	ldrh	r2, [r3, #8]
   b76b0:	6943      	ldr	r3, [r0, #20]
   b76b2:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b76b6:	b29b      	uxth	r3, r3
   b76b8:	e7cb      	b.n	b7652 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b76ba:	f890 9005 	ldrb.w	r9, [r0, #5]
   b76be:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b76c2:	f1ba 0f00 	cmp.w	sl, #0
   b76c6:	d108      	bne.n	b76da <_ZN7FatFile4readEPvj+0xa8>
   b76c8:	f1b9 0f00 	cmp.w	r9, #0
   b76cc:	d105      	bne.n	b76da <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b76ce:	b95b      	cbnz	r3, b76e8 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b76d0:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b76d2:	bf4c      	ite	mi
   b76d4:	6a03      	ldrmi	r3, [r0, #32]
   b76d6:	6a23      	ldrpl	r3, [r4, #32]
   b76d8:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b76da:	6921      	ldr	r1, [r4, #16]
   b76dc:	68a0      	ldr	r0, [r4, #8]
   b76de:	f000 faf2 	bl	b7cc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   b76e2:	eb09 0100 	add.w	r1, r9, r0
   b76e6:	e7ca      	b.n	b767e <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b76e8:	6921      	ldr	r1, [r4, #16]
   b76ea:	465a      	mov	r2, fp
   b76ec:	f000 faf1 	bl	b7cd2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b76f0:	2800      	cmp	r0, #0
   b76f2:	db04      	blt.n	b76fe <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b76f4:	d1f1      	bne.n	b76da <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b76f6:	7823      	ldrb	r3, [r4, #0]
   b76f8:	f013 0f70 	tst.w	r3, #112	; 0x70
   b76fc:	d143      	bne.n	b7786 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b76fe:	7863      	ldrb	r3, [r4, #1]
   b7700:	f043 0302 	orr.w	r3, r3, #2
   b7704:	7063      	strb	r3, [r4, #1]
  return -1;
   b7706:	f04f 30ff 	mov.w	r0, #4294967295
   b770a:	e03d      	b.n	b7788 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b770c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b7710:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b7712:	f04f 0200 	mov.w	r2, #0
   b7716:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b771a:	bf28      	it	cs
   b771c:	4637      	movcs	r7, r6
   b771e:	f000 faaf 	bl	b7c80 <_ZN8FatCache4readEmh>
      if (!pc) {
   b7722:	2800      	cmp	r0, #0
   b7724:	d0eb      	beq.n	b76fe <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b7726:	eb00 010a 	add.w	r1, r0, sl
   b772a:	463a      	mov	r2, r7
   b772c:	4640      	mov	r0, r8
   b772e:	f006 fc40 	bl	bdfb2 <memcpy>
    m_curPosition += n;
   b7732:	6963      	ldr	r3, [r4, #20]
   b7734:	443b      	add	r3, r7
    dst += n;
   b7736:	44b8      	add	r8, r7
    m_curPosition += n;
   b7738:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b773a:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b773c:	e791      	b.n	b7662 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b773e:	7822      	ldrb	r2, [r4, #0]
   b7740:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b7742:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b7746:	d406      	bmi.n	b7756 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b7748:	7902      	ldrb	r2, [r0, #4]
   b774a:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b774e:	b2d2      	uxtb	r2, r2
   b7750:	4592      	cmp	sl, r2
   b7752:	bf28      	it	cs
   b7754:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7756:	4299      	cmp	r1, r3
      n = 512*nb;
   b7758:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b775c:	d208      	bcs.n	b7770 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b775e:	68a0      	ldr	r0, [r4, #8]
   b7760:	4653      	mov	r3, sl
   b7762:	6800      	ldr	r0, [r0, #0]
   b7764:	4642      	mov	r2, r8
   b7766:	f000 fdb7 	bl	b82d8 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b776a:	2800      	cmp	r0, #0
   b776c:	d1e1      	bne.n	b7732 <_ZN7FatFile4readEPvj+0x100>
   b776e:	e7c6      	b.n	b76fe <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7770:	4453      	add	r3, sl
   b7772:	428b      	cmp	r3, r1
   b7774:	d9f3      	bls.n	b775e <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b7776:	3024      	adds	r0, #36	; 0x24
   b7778:	9101      	str	r1, [sp, #4]
   b777a:	f000 fa59 	bl	b7c30 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b777e:	9901      	ldr	r1, [sp, #4]
   b7780:	2800      	cmp	r0, #0
   b7782:	d1ec      	bne.n	b775e <_ZN7FatFile4readEPvj+0x12c>
   b7784:	e7bb      	b.n	b76fe <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b7786:	1ba8      	subs	r0, r5, r6
}
   b7788:	b003      	add	sp, #12
   b778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b778e <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b778e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7790:	2201      	movs	r2, #1
   b7792:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b7796:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b779a:	4604      	mov	r4, r0
   b779c:	f7ff ff49 	bl	b7632 <_ZN7FatFile4readEPvj>
   b77a0:	2801      	cmp	r0, #1
   b77a2:	bf0a      	itet	eq
   b77a4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b77a8:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b77ac:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b77b0:	b002      	add	sp, #8
   b77b2:	bd70      	pop	{r4, r5, r6, pc}

000b77b4 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b77b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b77b6:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b77b8:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b77bc:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b77be:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b77c2:	d000      	beq.n	b77c6 <_ZN7FatFile12readDirCacheEb+0x12>
   b77c4:	b999      	cbnz	r1, b77ee <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b77c6:	2201      	movs	r2, #1
   b77c8:	f10d 0107 	add.w	r1, sp, #7
   b77cc:	4620      	mov	r0, r4
   b77ce:	f7ff ff30 	bl	b7632 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b77d2:	b240      	sxtb	r0, r0
   b77d4:	2801      	cmp	r0, #1
   b77d6:	d002      	beq.n	b77de <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b77d8:	2000      	movs	r0, #0
}
   b77da:	b003      	add	sp, #12
   b77dc:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b77de:	6963      	ldr	r3, [r4, #20]
   b77e0:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b77e2:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b77e4:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b77e6:	3030      	adds	r0, #48	; 0x30
   b77e8:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b77ec:	e7f5      	b.n	b77da <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b77ee:	3320      	adds	r3, #32
   b77f0:	e7f7      	b.n	b77e2 <_ZN7FatFile12readDirCacheEb+0x2e>

000b77f2 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b77f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b77f6:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b77f8:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b77fa:	4604      	mov	r4, r0
   b77fc:	460d      	mov	r5, r1
  if (!isOpen()) {
   b77fe:	b162      	cbz	r2, b781a <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b7800:	6940      	ldr	r0, [r0, #20]
   b7802:	4288      	cmp	r0, r1
   b7804:	d002      	beq.n	b780c <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b7806:	b919      	cbnz	r1, b7810 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b7808:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b780a:	6165      	str	r5, [r4, #20]
    return true;
   b780c:	2001      	movs	r0, #1
   b780e:	e006      	b.n	b781e <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b7810:	0716      	lsls	r6, r2, #28
   b7812:	d506      	bpl.n	b7822 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b7814:	69e3      	ldr	r3, [r4, #28]
   b7816:	428b      	cmp	r3, r1
   b7818:	d20b      	bcs.n	b7832 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b781a:	6127      	str	r7, [r4, #16]
  return false;
   b781c:	2000      	movs	r0, #0
}
   b781e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b7822:	0691      	lsls	r1, r2, #26
   b7824:	d505      	bpl.n	b7832 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b7826:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b7828:	891b      	ldrh	r3, [r3, #8]
   b782a:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b782e:	d9ec      	bls.n	b780a <_ZN7FatFile7seekSetEm+0x18>
   b7830:	e7f3      	b.n	b781a <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7832:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b7836:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b783a:	1e43      	subs	r3, r0, #1
   b783c:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7840:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7842:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7844:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b7846:	42b3      	cmp	r3, r6
   b7848:	d800      	bhi.n	b784c <_ZN7FatFile7seekSetEm+0x5a>
   b784a:	b998      	cbnz	r0, b7874 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b784c:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b784e:	bf4c      	ite	mi
   b7850:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b7854:	6a23      	ldrpl	r3, [r4, #32]
   b7856:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7858:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b785c:	2e00      	cmp	r6, #0
   b785e:	d0d4      	beq.n	b780a <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7860:	6921      	ldr	r1, [r4, #16]
   b7862:	68a0      	ldr	r0, [r4, #8]
   b7864:	4642      	mov	r2, r8
   b7866:	f000 fa34 	bl	b7cd2 <_ZN9FatVolume6fatGetEmPm>
   b786a:	2800      	cmp	r0, #0
   b786c:	f106 36ff 	add.w	r6, r6, #4294967295
   b7870:	dcf4      	bgt.n	b785c <_ZN7FatFile7seekSetEm+0x6a>
   b7872:	e7d2      	b.n	b781a <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b7874:	1af6      	subs	r6, r6, r3
   b7876:	e7ef      	b.n	b7858 <_ZN7FatFile7seekSetEm+0x66>

000b7878 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b7878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b787a:	460f      	mov	r7, r1
   b787c:	4604      	mov	r4, r0
   b787e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7880:	2100      	movs	r1, #0
   b7882:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b7884:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b7886:	f006 fbbc 	bl	be002 <memset>
  m_vol = dirFile->m_vol;
   b788a:	68b8      	ldr	r0, [r7, #8]
   b788c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b788e:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7890:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b7894:	6a3b      	ldr	r3, [r7, #32]
   b7896:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b7898:	016a      	lsls	r2, r5, #5
   b789a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b789e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b78a2:	071f      	lsls	r7, r3, #28
   b78a4:	d444      	bmi.n	b7930 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b78a6:	f003 0317 	and.w	r3, r3, #23
   b78aa:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b78ac:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b78b0:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b78b4:	bf04      	itt	eq
   b78b6:	f043 0308 	orreq.w	r3, r3, #8
   b78ba:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b78bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b78c0:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b78c2:	f006 0303 	and.w	r3, r6, #3
   b78c6:	2b01      	cmp	r3, #1
   b78c8:	d02c      	beq.n	b7924 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b78ca:	2b02      	cmp	r3, #2
   b78cc:	d028      	beq.n	b7920 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b78ce:	bb7b      	cbnz	r3, b7930 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b78d0:	0571      	lsls	r1, r6, #21
   b78d2:	d42d      	bmi.n	b7930 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b78d4:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b78d6:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b78d8:	78a1      	ldrb	r1, [r4, #2]
   b78da:	078b      	lsls	r3, r1, #30
   b78dc:	d504      	bpl.n	b78e8 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b78de:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b78e0:	06df      	lsls	r7, r3, #27
   b78e2:	d425      	bmi.n	b7930 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b78e4:	07dd      	lsls	r5, r3, #31
   b78e6:	d423      	bmi.n	b7930 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b78e8:	11b3      	asrs	r3, r6, #6
   b78ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b78ee:	f006 0508 	and.w	r5, r6, #8
   b78f2:	432b      	orrs	r3, r5
   b78f4:	430b      	orrs	r3, r1
   b78f6:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b78f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b78fa:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b78fc:	1883      	adds	r3, r0, r2
   b78fe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b7902:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7906:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b790a:	0572      	lsls	r2, r6, #21
   b790c:	d513      	bpl.n	b7936 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b790e:	b959      	cbnz	r1, b7928 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b7910:	78a3      	ldrb	r3, [r4, #2]
   b7912:	f043 0304 	orr.w	r3, r3, #4
   b7916:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7918:	0473      	lsls	r3, r6, #17
   b791a:	d410      	bmi.n	b793e <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b791c:	2001      	movs	r0, #1
}
   b791e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7920:	2303      	movs	r3, #3
   b7922:	e7d8      	b.n	b78d6 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b7924:	2302      	movs	r3, #2
   b7926:	e7d6      	b.n	b78d6 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7928:	f000 fa73 	bl	b7e12 <_ZN9FatVolume9freeChainEm>
   b792c:	2800      	cmp	r0, #0
   b792e:	d1ef      	bne.n	b7910 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7930:	2000      	movs	r0, #0
   b7932:	7020      	strb	r0, [r4, #0]
  return false;
   b7934:	e7f3      	b.n	b791e <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b7936:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b7938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b793a:	61e3      	str	r3, [r4, #28]
   b793c:	e7ec      	b.n	b7918 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b793e:	69e1      	ldr	r1, [r4, #28]
   b7940:	4620      	mov	r0, r4
   b7942:	f7ff ff56 	bl	b77f2 <_ZN7FatFile7seekSetEm>
   b7946:	2800      	cmp	r0, #0
   b7948:	d1e8      	bne.n	b791c <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b794a:	e7f1      	b.n	b7930 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b794c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b794c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b794e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b7950:	4604      	mov	r4, r0
  if (!isOpen()) {
   b7952:	b90b      	cbnz	r3, b7958 <_ZN7FatFile4syncEv+0xc>
    return true;
   b7954:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b7956:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7958:	7883      	ldrb	r3, [r0, #2]
   b795a:	075a      	lsls	r2, r3, #29
   b795c:	d523      	bpl.n	b79a6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b795e:	2101      	movs	r1, #1
   b7960:	f7ff fe52 	bl	b7608 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7964:	4605      	mov	r5, r0
   b7966:	b928      	cbnz	r0, b7974 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7968:	7863      	ldrb	r3, [r4, #1]
   b796a:	f043 0301 	orr.w	r3, r3, #1
   b796e:	7063      	strb	r3, [r4, #1]
  return false;
   b7970:	2000      	movs	r0, #0
   b7972:	e7f0      	b.n	b7956 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7974:	7803      	ldrb	r3, [r0, #0]
   b7976:	2be5      	cmp	r3, #229	; 0xe5
   b7978:	d0f6      	beq.n	b7968 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b797a:	7823      	ldrb	r3, [r4, #0]
   b797c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b797e:	bf44      	itt	mi
   b7980:	69e3      	ldrmi	r3, [r4, #28]
   b7982:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b7984:	6a23      	ldr	r3, [r4, #32]
   b7986:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7988:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b798a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b798c:	4b09      	ldr	r3, [pc, #36]	; (b79b4 <_ZN7FatFile4syncEv+0x68>)
   b798e:	681b      	ldr	r3, [r3, #0]
   b7990:	b12b      	cbz	r3, b799e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b7992:	f100 0116 	add.w	r1, r0, #22
   b7996:	3018      	adds	r0, #24
   b7998:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b799a:	8b2b      	ldrh	r3, [r5, #24]
   b799c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b799e:	78a3      	ldrb	r3, [r4, #2]
   b79a0:	f023 0304 	bic.w	r3, r3, #4
   b79a4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b79a6:	68a0      	ldr	r0, [r4, #8]
   b79a8:	f7ff fa50 	bl	b6e4c <_ZN9FatVolume9cacheSyncEv>
   b79ac:	2800      	cmp	r0, #0
   b79ae:	d0db      	beq.n	b7968 <_ZN7FatFile4syncEv+0x1c>
   b79b0:	e7d0      	b.n	b7954 <_ZN7FatFile4syncEv+0x8>
   b79b2:	bf00      	nop
   b79b4:	2003e644 	.word	0x2003e644

000b79b8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b79b8:	b510      	push	{r4, lr}
   b79ba:	4604      	mov	r4, r0
  bool rtn = sync();
   b79bc:	f7ff ffc6 	bl	b794c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b79c0:	2300      	movs	r3, #0
   b79c2:	7023      	strb	r3, [r4, #0]
}
   b79c4:	bd10      	pop	{r4, pc}

000b79c6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b79c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b79c8:	b093      	sub	sp, #76	; 0x4c
   b79ca:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b79cc:	2300      	movs	r3, #0
   b79ce:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b79d0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b79d2:	9201      	str	r2, [sp, #4]
   b79d4:	4606      	mov	r6, r0
   b79d6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b79d8:	b113      	cbz	r3, b79e0 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b79da:	2000      	movs	r0, #0
}
   b79dc:	b013      	add	sp, #76	; 0x4c
   b79de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b79e0:	780b      	ldrb	r3, [r1, #0]
   b79e2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b79e6:	d0f8      	beq.n	b79da <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b79e8:	7813      	ldrb	r3, [r2, #0]
   b79ea:	2b2f      	cmp	r3, #47	; 0x2f
   b79ec:	d112      	bne.n	b7a14 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b79ee:	9a01      	ldr	r2, [sp, #4]
   b79f0:	7813      	ldrb	r3, [r2, #0]
   b79f2:	2b2f      	cmp	r3, #47	; 0x2f
   b79f4:	d102      	bne.n	b79fc <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b79f6:	3201      	adds	r2, #1
   b79f8:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b79fa:	e7f8      	b.n	b79ee <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b79fc:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b79fe:	b91b      	cbnz	r3, b7a08 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b7a00:	4630      	mov	r0, r6
   b7a02:	f7ff fe10 	bl	b7626 <_ZN7FatFile8openRootEP9FatVolume>
   b7a06:	e7e9      	b.n	b79dc <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7a08:	a809      	add	r0, sp, #36	; 0x24
   b7a0a:	f7ff fd9f 	bl	b754c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b7a0e:	2800      	cmp	r0, #0
   b7a10:	d0e3      	beq.n	b79da <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b7a12:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7a14:	9801      	ldr	r0, [sp, #4]
   b7a16:	aa01      	add	r2, sp, #4
   b7a18:	a903      	add	r1, sp, #12
   b7a1a:	f7ff fa4b 	bl	b6eb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b7a1e:	2800      	cmp	r0, #0
   b7a20:	d0db      	beq.n	b79da <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b7a22:	9b01      	ldr	r3, [sp, #4]
   b7a24:	781b      	ldrb	r3, [r3, #0]
   b7a26:	b19b      	cbz	r3, b7a50 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7a28:	2300      	movs	r3, #0
   b7a2a:	aa03      	add	r2, sp, #12
   b7a2c:	4621      	mov	r1, r4
   b7a2e:	4630      	mov	r0, r6
   b7a30:	f7ff fbd4 	bl	b71dc <_ZN7FatFile4openEPS_P7fname_ti>
   b7a34:	2800      	cmp	r0, #0
   b7a36:	d0d0      	beq.n	b79da <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7a38:	4635      	mov	r5, r6
   b7a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a3c:	ac09      	add	r4, sp, #36	; 0x24
   b7a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a44:	682b      	ldr	r3, [r5, #0]
   b7a46:	6023      	str	r3, [r4, #0]
    close();
   b7a48:	4630      	mov	r0, r6
   b7a4a:	f7ff ffb5 	bl	b79b8 <_ZN7FatFile5closeEv>
  while (1) {
   b7a4e:	e7e0      	b.n	b7a12 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b7a50:	463b      	mov	r3, r7
   b7a52:	aa03      	add	r2, sp, #12
   b7a54:	4621      	mov	r1, r4
   b7a56:	4630      	mov	r0, r6
   b7a58:	f7ff fbc0 	bl	b71dc <_ZN7FatFile4openEPS_P7fname_ti>
   b7a5c:	e7be      	b.n	b79dc <_ZN7FatFile4openEPS_PKci+0x16>

000b7a5e <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b7a5e:	b500      	push	{lr}
   b7a60:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7a62:	2300      	movs	r3, #0
   b7a64:	460a      	mov	r2, r1
   b7a66:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b7a68:	4601      	mov	r1, r0
   b7a6a:	2301      	movs	r3, #1
   b7a6c:	a801      	add	r0, sp, #4
   b7a6e:	f7ff ffaa 	bl	b79c6 <_ZN7FatFile4openEPS_PKci>
   b7a72:	b110      	cbz	r0, b7a7a <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b7a74:	a801      	add	r0, sp, #4
   b7a76:	f7ff fafb 	bl	b7070 <_ZN7FatFile6removeEv>
}
   b7a7a:	b00b      	add	sp, #44	; 0x2c
   b7a7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a80 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7a84:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7a86:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7a88:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b7a8a:	4604      	mov	r4, r0
   b7a8c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7a8e:	d55b      	bpl.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
   b7a90:	7883      	ldrb	r3, [r0, #2]
   b7a92:	079a      	lsls	r2, r3, #30
   b7a94:	d558      	bpl.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b7a96:	071b      	lsls	r3, r3, #28
   b7a98:	d451      	bmi.n	b7b3e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b7a9a:	6963      	ldr	r3, [r4, #20]
   b7a9c:	43db      	mvns	r3, r3
   b7a9e:	42bb      	cmp	r3, r7
   b7aa0:	d352      	bcc.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
   b7aa2:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7aa4:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7aa8:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b7aaa:	f1b8 0f00 	cmp.w	r8, #0
   b7aae:	f000 8091 	beq.w	b7bd4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7ab2:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b7ab4:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b7ab6:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b7aba:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b7abe:	d10e      	bne.n	b7ade <_ZN7FatFile5writeEPKvj+0x5e>
   b7ac0:	b96d      	cbnz	r5, b7ade <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b7ac2:	6921      	ldr	r1, [r4, #16]
   b7ac4:	2900      	cmp	r1, #0
   b7ac6:	d046      	beq.n	b7b56 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7ac8:	4652      	mov	r2, sl
   b7aca:	f000 f902 	bl	b7cd2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b7ace:	2800      	cmp	r0, #0
   b7ad0:	db3a      	blt.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b7ad2:	d104      	bne.n	b7ade <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	f7ff fd4f 	bl	b7578 <_ZN7FatFile10addClusterEv>
   b7ada:	2800      	cmp	r0, #0
   b7adc:	d034      	beq.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b7ade:	6921      	ldr	r1, [r4, #16]
   b7ae0:	68a0      	ldr	r0, [r4, #8]
   b7ae2:	f000 f8f0 	bl	b7cc6 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7ae6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7ae8:	68a0      	ldr	r0, [r4, #8]
   b7aea:	b915      	cbnz	r5, b7af2 <_ZN7FatFile5writeEPKvj+0x72>
   b7aec:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b7af0:	d23f      	bcs.n	b7b72 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b7af2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7af6:	4546      	cmp	r6, r8
   b7af8:	bf28      	it	cs
   b7afa:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7afc:	2d00      	cmp	r5, #0
   b7afe:	d136      	bne.n	b7b6e <_ZN7FatFile5writeEPKvj+0xee>
   b7b00:	6962      	ldr	r2, [r4, #20]
   b7b02:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7b04:	429a      	cmp	r2, r3
   b7b06:	bf34      	ite	cc
   b7b08:	2201      	movcc	r2, #1
   b7b0a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7b0c:	3024      	adds	r0, #36	; 0x24
   b7b0e:	f000 f8b7 	bl	b7c80 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b7b12:	b1c8      	cbz	r0, b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7b14:	4428      	add	r0, r5
   b7b16:	4632      	mov	r2, r6
   b7b18:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7b1a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7b1c:	f006 fa49 	bl	bdfb2 <memcpy>
      if (512 == (n + blockOffset)) {
   b7b20:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7b24:	d104      	bne.n	b7b30 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7b26:	68a0      	ldr	r0, [r4, #8]
   b7b28:	3024      	adds	r0, #36	; 0x24
   b7b2a:	f000 f881 	bl	b7c30 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b7b2e:	b158      	cbz	r0, b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7b30:	6963      	ldr	r3, [r4, #20]
   b7b32:	4433      	add	r3, r6
   b7b34:	6163      	str	r3, [r4, #20]
    src += n;
   b7b36:	44b1      	add	r9, r6
    nToWrite -= n;
   b7b38:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7b3c:	e7b4      	b.n	b7aa8 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b7b3e:	69c1      	ldr	r1, [r0, #28]
   b7b40:	f7ff fe57 	bl	b77f2 <_ZN7FatFile7seekSetEm>
   b7b44:	2800      	cmp	r0, #0
   b7b46:	d1a8      	bne.n	b7a9a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7b48:	7863      	ldrb	r3, [r4, #1]
   b7b4a:	f043 0301 	orr.w	r3, r3, #1
   b7b4e:	7063      	strb	r3, [r4, #1]
  return -1;
   b7b50:	f04f 30ff 	mov.w	r0, #4294967295
   b7b54:	e050      	b.n	b7bf8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7b56:	6a23      	ldr	r3, [r4, #32]
   b7b58:	b93b      	cbnz	r3, b7b6a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7b5a:	4620      	mov	r0, r4
   b7b5c:	f7ff fd0c 	bl	b7578 <_ZN7FatFile10addClusterEv>
   b7b60:	2800      	cmp	r0, #0
   b7b62:	d0f1      	beq.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b7b64:	6923      	ldr	r3, [r4, #16]
   b7b66:	6223      	str	r3, [r4, #32]
   b7b68:	e7b9      	b.n	b7ade <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7b6a:	6123      	str	r3, [r4, #16]
   b7b6c:	e7b7      	b.n	b7ade <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b7b6e:	2201      	movs	r2, #1
   b7b70:	e7cc      	b.n	b7b0c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b7b72:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7b76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7b78:	d31b      	bcc.n	b7bb2 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7b7a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b7b7e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b7b82:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7b84:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7b88:	4573      	cmp	r3, lr
   b7b8a:	bf28      	it	cs
   b7b8c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7b8e:	4291      	cmp	r1, r2
      n = 512*nb;
   b7b90:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7b94:	d307      	bcc.n	b7ba6 <_ZN7FatFile5writeEPKvj+0x126>
   b7b96:	441a      	add	r2, r3
   b7b98:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b7b9a:	bf82      	ittt	hi
   b7b9c:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b7ba0:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7ba4:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7ba6:	68a5      	ldr	r5, [r4, #8]
   b7ba8:	464a      	mov	r2, r9
   b7baa:	6828      	ldr	r0, [r5, #0]
   b7bac:	f000 fc4b 	bl	b8446 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7bb0:	e7bd      	b.n	b7b2e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b7bb2:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7bb4:	bf02      	ittt	eq
   b7bb6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b7bba:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7bbe:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b7bc0:	68a3      	ldr	r3, [r4, #8]
   b7bc2:	464a      	mov	r2, r9
   b7bc4:	6818      	ldr	r0, [r3, #0]
   b7bc6:	f000 fbc8 	bl	b835a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b7bca:	2800      	cmp	r0, #0
   b7bcc:	d0bc      	beq.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b7bce:	f44f 7600 	mov.w	r6, #512	; 0x200
   b7bd2:	e7ad      	b.n	b7b30 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7bd4:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7bd6:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7bd8:	42b2      	cmp	r2, r6
   b7bda:	d204      	bcs.n	b7be6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b7bdc:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7bde:	f043 0304 	orr.w	r3, r3, #4
   b7be2:	70a3      	strb	r3, [r4, #2]
   b7be4:	e003      	b.n	b7bee <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7be6:	4a08      	ldr	r2, [pc, #32]	; (b7c08 <_ZN7FatFile5writeEPKvj+0x188>)
   b7be8:	6812      	ldr	r2, [r2, #0]
   b7bea:	2a00      	cmp	r2, #0
   b7bec:	d1f7      	bne.n	b7bde <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b7bee:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b7bf2:	2b00      	cmp	r3, #0
   b7bf4:	db02      	blt.n	b7bfc <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7bf6:	4638      	mov	r0, r7
}
   b7bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7bfc:	4620      	mov	r0, r4
   b7bfe:	f7ff fea5 	bl	b794c <_ZN7FatFile4syncEv>
   b7c02:	2800      	cmp	r0, #0
   b7c04:	d1f7      	bne.n	b7bf6 <_ZN7FatFile5writeEPKvj+0x176>
   b7c06:	e79f      	b.n	b7b48 <_ZN7FatFile5writeEPKvj+0xc8>
   b7c08:	2003e644 	.word	0x2003e644

000b7c0c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7c0c:	b513      	push	{r0, r1, r4, lr}
   b7c0e:	4604      	mov	r4, r0
    }
   b7c10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7c12:	b159      	cbz	r1, b7c2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7c14:	9101      	str	r1, [sp, #4]
   b7c16:	f006 faa8 	bl	be16a <strlen>
   b7c1a:	6823      	ldr	r3, [r4, #0]
   b7c1c:	9901      	ldr	r1, [sp, #4]
   b7c1e:	68db      	ldr	r3, [r3, #12]
   b7c20:	4602      	mov	r2, r0
   b7c22:	4620      	mov	r0, r4
    }
   b7c24:	b002      	add	sp, #8
   b7c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7c2a:	4718      	bx	r3
    }
   b7c2c:	b002      	add	sp, #8
   b7c2e:	bd10      	pop	{r4, pc}

000b7c30 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7c32:	7803      	ldrb	r3, [r0, #0]
   b7c34:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7c36:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7c38:	d520      	bpl.n	b7c7c <_ZN8FatCache4syncEv+0x4c>
   b7c3a:	6843      	ldr	r3, [r0, #4]
   b7c3c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7c3e:	f100 020c 	add.w	r2, r0, #12
   b7c42:	6818      	ldr	r0, [r3, #0]
   b7c44:	9201      	str	r2, [sp, #4]
   b7c46:	f000 fb88 	bl	b835a <_ZN9SdSpiCard10writeBlockEmPKh>
   b7c4a:	9a01      	ldr	r2, [sp, #4]
   b7c4c:	4605      	mov	r5, r0
   b7c4e:	b918      	cbnz	r0, b7c58 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7c50:	2500      	movs	r5, #0
}
   b7c52:	4628      	mov	r0, r5
   b7c54:	b003      	add	sp, #12
   b7c56:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7c58:	7823      	ldrb	r3, [r4, #0]
   b7c5a:	079b      	lsls	r3, r3, #30
   b7c5c:	d404      	bmi.n	b7c68 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7c5e:	7823      	ldrb	r3, [r4, #0]
   b7c60:	f023 0301 	bic.w	r3, r3, #1
   b7c64:	7023      	strb	r3, [r4, #0]
   b7c66:	e7f4      	b.n	b7c52 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7c68:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7c6c:	6919      	ldr	r1, [r3, #16]
   b7c6e:	4401      	add	r1, r0
   b7c70:	6818      	ldr	r0, [r3, #0]
   b7c72:	f000 fb72 	bl	b835a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7c76:	2800      	cmp	r0, #0
   b7c78:	d1f1      	bne.n	b7c5e <_ZN8FatCache4syncEv+0x2e>
   b7c7a:	e7e9      	b.n	b7c50 <_ZN8FatCache4syncEv+0x20>
  return true;
   b7c7c:	2501      	movs	r5, #1
   b7c7e:	e7e8      	b.n	b7c52 <_ZN8FatCache4syncEv+0x22>

000b7c80 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7c80:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7c82:	6883      	ldr	r3, [r0, #8]
   b7c84:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7c86:	4604      	mov	r4, r0
   b7c88:	460e      	mov	r6, r1
   b7c8a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7c8c:	d009      	beq.n	b7ca2 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7c8e:	f7ff ffcf 	bl	b7c30 <_ZN8FatCache4syncEv>
   b7c92:	b908      	cbnz	r0, b7c98 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7c94:	2000      	movs	r0, #0
}
   b7c96:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7c98:	076b      	lsls	r3, r5, #29
   b7c9a:	d50a      	bpl.n	b7cb2 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7c9c:	2300      	movs	r3, #0
   b7c9e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7ca0:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7ca2:	7822      	ldrb	r2, [r4, #0]
   b7ca4:	f005 0503 	and.w	r5, r5, #3
   b7ca8:	4620      	mov	r0, r4
   b7caa:	4315      	orrs	r5, r2
   b7cac:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7cb0:	e7f1      	b.n	b7c96 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7cb2:	6863      	ldr	r3, [r4, #4]
   b7cb4:	f104 020c 	add.w	r2, r4, #12
   b7cb8:	6818      	ldr	r0, [r3, #0]
   b7cba:	4631      	mov	r1, r6
   b7cbc:	f000 fac4 	bl	b8248 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7cc0:	2800      	cmp	r0, #0
   b7cc2:	d1eb      	bne.n	b7c9c <_ZN8FatCache4readEmh+0x1c>
   b7cc4:	e7e6      	b.n	b7c94 <_ZN8FatCache4readEmh+0x14>

000b7cc6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7cc6:	7983      	ldrb	r3, [r0, #6]
   b7cc8:	6940      	ldr	r0, [r0, #20]
   b7cca:	3902      	subs	r1, #2
   b7ccc:	4099      	lsls	r1, r3
}
   b7cce:	4408      	add	r0, r1
   b7cd0:	4770      	bx	lr

000b7cd2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7cd2:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7cd4:	b570      	push	{r4, r5, r6, lr}
   b7cd6:	4605      	mov	r5, r0
   b7cd8:	460c      	mov	r4, r1
   b7cda:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7cdc:	d802      	bhi.n	b7ce4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7cde:	f04f 30ff 	mov.w	r0, #4294967295
}
   b7ce2:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ce4:	69c3      	ldr	r3, [r0, #28]
   b7ce6:	428b      	cmp	r3, r1
   b7ce8:	d3f9      	bcc.n	b7cde <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7cea:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7cec:	2b20      	cmp	r3, #32
   b7cee:	d116      	bne.n	b7d1e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7cf0:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7cf2:	2202      	movs	r2, #2
   b7cf4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7cf8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7cfc:	f7ff ffc0 	bl	b7c80 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d00:	2800      	cmp	r0, #0
   b7d02:	d0ec      	beq.n	b7cde <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7d04:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7d08:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7d0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7d10:	69ea      	ldr	r2, [r5, #28]
   b7d12:	429a      	cmp	r2, r3
  *value = next;
   b7d14:	bf26      	itte	cs
   b7d16:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7d18:	2001      	movcs	r0, #1
    return 0;
   b7d1a:	2000      	movcc	r0, #0
   b7d1c:	e7e1      	b.n	b7ce2 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7d1e:	2b10      	cmp	r3, #16
   b7d20:	d1dd      	bne.n	b7cde <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7d22:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7d26:	6981      	ldr	r1, [r0, #24]
   b7d28:	2202      	movs	r2, #2
   b7d2a:	4419      	add	r1, r3
   b7d2c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7d30:	f7ff ffa6 	bl	b7c80 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d34:	2800      	cmp	r0, #0
   b7d36:	d0d2      	beq.n	b7cde <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7d38:	b2e4      	uxtb	r4, r4
   b7d3a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7d3e:	e7e7      	b.n	b7d10 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7d40 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7d40:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7d42:	b538      	push	{r3, r4, r5, lr}
   b7d44:	460c      	mov	r4, r1
   b7d46:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7d48:	d801      	bhi.n	b7d4e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7d4a:	2000      	movs	r0, #0
}
   b7d4c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7d4e:	69c3      	ldr	r3, [r0, #28]
   b7d50:	428b      	cmp	r3, r1
   b7d52:	d3fa      	bcc.n	b7d4a <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7d54:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7d56:	2b20      	cmp	r3, #32
   b7d58:	d10f      	bne.n	b7d7a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7d5a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7d5c:	2203      	movs	r2, #3
   b7d5e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7d62:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7d66:	f7ff ff8b 	bl	b7c80 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d6a:	2800      	cmp	r0, #0
   b7d6c:	d0ed      	beq.n	b7d4a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7d6e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7d72:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7d76:	2001      	movs	r0, #1
   b7d78:	e7e8      	b.n	b7d4c <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7d7a:	2b10      	cmp	r3, #16
   b7d7c:	d1e5      	bne.n	b7d4a <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7d7e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7d82:	6981      	ldr	r1, [r0, #24]
   b7d84:	2203      	movs	r2, #3
   b7d86:	4419      	add	r1, r3
   b7d88:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7d8c:	f7ff ff78 	bl	b7c80 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d90:	2800      	cmp	r0, #0
   b7d92:	d0da      	beq.n	b7d4a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7d94:	b2e4      	uxtb	r4, r4
   b7d96:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7d9a:	e7ec      	b.n	b7d76 <_ZN9FatVolume6fatPutEmm+0x36>

000b7d9c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7da0:	68c4      	ldr	r4, [r0, #12]
   b7da2:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7da4:	4605      	mov	r5, r0
   b7da6:	460e      	mov	r6, r1
   b7da8:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7daa:	d301      	bcc.n	b7db0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7dac:	2701      	movs	r7, #1
   b7dae:	e001      	b.n	b7db4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7db0:	460c      	mov	r4, r1
    setStart = false;
   b7db2:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7db4:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7db6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7db8:	42a3      	cmp	r3, r4
   b7dba:	d202      	bcs.n	b7dc2 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7dbc:	b9c7      	cbnz	r7, b7df0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7dbe:	68ec      	ldr	r4, [r5, #12]
   b7dc0:	e7f4      	b.n	b7dac <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7dc2:	42a6      	cmp	r6, r4
   b7dc4:	d014      	beq.n	b7df0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7dc6:	aa01      	add	r2, sp, #4
   b7dc8:	4621      	mov	r1, r4
   b7dca:	4628      	mov	r0, r5
   b7dcc:	f7ff ff81 	bl	b7cd2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7dd0:	2800      	cmp	r0, #0
   b7dd2:	db0d      	blt.n	b7df0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7dd4:	d0ee      	beq.n	b7db4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7dd6:	9b01      	ldr	r3, [sp, #4]
   b7dd8:	2b00      	cmp	r3, #0
   b7dda:	d1eb      	bne.n	b7db4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7ddc:	b107      	cbz	r7, b7de0 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7dde:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7de0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7de4:	4621      	mov	r1, r4
   b7de6:	4628      	mov	r0, r5
   b7de8:	f7ff ffaa 	bl	b7d40 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7dec:	4607      	mov	r7, r0
   b7dee:	b920      	cbnz	r0, b7dfa <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7df0:	2700      	movs	r7, #0
}
   b7df2:	4638      	mov	r0, r7
   b7df4:	b002      	add	sp, #8
   b7df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7dfa:	b916      	cbnz	r6, b7e02 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7dfc:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7e00:	e7f7      	b.n	b7df2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7e02:	4622      	mov	r2, r4
   b7e04:	4631      	mov	r1, r6
   b7e06:	4628      	mov	r0, r5
   b7e08:	f7ff ff9a 	bl	b7d40 <_ZN9FatVolume6fatPutEmm>
   b7e0c:	2800      	cmp	r0, #0
   b7e0e:	d1f5      	bne.n	b7dfc <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7e10:	e7ee      	b.n	b7df0 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7e12 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7e14:	4605      	mov	r5, r0
   b7e16:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7e18:	aa01      	add	r2, sp, #4
   b7e1a:	4621      	mov	r1, r4
   b7e1c:	4628      	mov	r0, r5
   b7e1e:	f7ff ff58 	bl	b7cd2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7e22:	1e06      	subs	r6, r0, #0
   b7e24:	db10      	blt.n	b7e48 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7e26:	2200      	movs	r2, #0
   b7e28:	4621      	mov	r1, r4
   b7e2a:	4628      	mov	r0, r5
   b7e2c:	f7ff ff88 	bl	b7d40 <_ZN9FatVolume6fatPutEmm>
   b7e30:	b150      	cbz	r0, b7e48 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7e32:	68eb      	ldr	r3, [r5, #12]
   b7e34:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7e36:	bf24      	itt	cs
   b7e38:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b7e3c:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7e3e:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7e40:	2e00      	cmp	r6, #0
   b7e42:	d1e9      	bne.n	b7e18 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7e44:	b002      	add	sp, #8
   b7e46:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7e48:	2000      	movs	r0, #0
   b7e4a:	e7fb      	b.n	b7e44 <_ZN9FatVolume9freeChainEm+0x32>

000b7e4c <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7e4c:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7e4e:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7e50:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7e52:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7e54:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7e58:	4604      	mov	r4, r0
  m_fatType = 0;
   b7e5a:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7e5c:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7e60:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7e62:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7e66:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7e68:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7e6c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7e70:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7e74:	460d      	mov	r5, r1
   b7e76:	b1b9      	cbz	r1, b7ea8 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7e78:	2904      	cmp	r1, #4
   b7e7a:	d901      	bls.n	b7e80 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7e7c:	2000      	movs	r0, #0
}
   b7e7e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7e80:	4611      	mov	r1, r2
   b7e82:	4630      	mov	r0, r6
   b7e84:	f7ff fefc 	bl	b7c80 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7e88:	2800      	cmp	r0, #0
   b7e8a:	d0f7      	beq.n	b7e7c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7e8c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7e90:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7e94:	065b      	lsls	r3, r3, #25
   b7e96:	d1f1      	bne.n	b7e7c <_ZN9FatVolume4initEh+0x30>
   b7e98:	f105 011b 	add.w	r1, r5, #27
   b7e9c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7ea0:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7ea4:	2d00      	cmp	r5, #0
   b7ea6:	d0e9      	beq.n	b7e7c <_ZN9FatVolume4initEh+0x30>
   b7ea8:	2200      	movs	r2, #0
   b7eaa:	4629      	mov	r1, r5
   b7eac:	4630      	mov	r0, r6
   b7eae:	f7ff fee7 	bl	b7c80 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7eb2:	2800      	cmp	r0, #0
   b7eb4:	d0e2      	beq.n	b7e7c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7eb6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7ebe:	d1dd      	bne.n	b7e7c <_ZN9FatVolume4initEh+0x30>
   b7ec0:	7c03      	ldrb	r3, [r0, #16]
   b7ec2:	2b02      	cmp	r3, #2
   b7ec4:	d1da      	bne.n	b7e7c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7ec6:	89c3      	ldrh	r3, [r0, #14]
   b7ec8:	2b00      	cmp	r3, #0
   b7eca:	d0d7      	beq.n	b7e7c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7ecc:	7b41      	ldrb	r1, [r0, #13]
   b7ece:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7ed0:	1e4b      	subs	r3, r1, #1
   b7ed2:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7ed4:	2300      	movs	r3, #0
   b7ed6:	71a3      	strb	r3, [r4, #6]
   b7ed8:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7eda:	2301      	movs	r3, #1
   b7edc:	4299      	cmp	r1, r3
   b7ede:	d007      	beq.n	b7ef0 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7ee0:	3e01      	subs	r6, #1
   b7ee2:	d0cb      	beq.n	b7e7c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7ee4:	79a2      	ldrb	r2, [r4, #6]
   b7ee6:	005b      	lsls	r3, r3, #1
   b7ee8:	3201      	adds	r2, #1
   b7eea:	b2db      	uxtb	r3, r3
   b7eec:	71a2      	strb	r2, [r4, #6]
   b7eee:	e7f5      	b.n	b7edc <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7ef0:	8ac1      	ldrh	r1, [r0, #22]
   b7ef2:	b901      	cbnz	r1, b7ef6 <_ZN9FatVolume4initEh+0xaa>
   b7ef4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7ef6:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7ef8:	89c3      	ldrh	r3, [r0, #14]
   b7efa:	442b      	add	r3, r5
   b7efc:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7efe:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7f02:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7f04:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7f08:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7f0a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7f0e:	0149      	lsls	r1, r1, #5
   b7f10:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7f14:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7f18:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7f1a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7f1e:	b902      	cbnz	r2, b7f22 <_ZN9FatVolume4initEh+0xd6>
   b7f20:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7f22:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7f24:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7f26:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7f28:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7f2a:	1c4b      	adds	r3, r1, #1
   b7f2c:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7f2e:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7f32:	4299      	cmp	r1, r3
   b7f34:	d802      	bhi.n	b7f3c <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7f36:	230c      	movs	r3, #12
   b7f38:	71e3      	strb	r3, [r4, #7]
   b7f3a:	e79f      	b.n	b7e7c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7f3c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7f40:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7f42:	bf85      	ittet	hi
   b7f44:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7f46:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7f48:	2310      	movls	r3, #16
    m_fatType = 32;
   b7f4a:	2320      	movhi	r3, #32
   b7f4c:	71e3      	strb	r3, [r4, #7]
  return true;
   b7f4e:	2001      	movs	r0, #1
   b7f50:	e795      	b.n	b7e7e <_ZN9FatVolume4initEh+0x32>

000b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7f52:	f000 bacb 	b.w	b84ec <_ZN14SdSpiAltDriver4sendEh>

000b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7f56:	f000 baae 	b.w	b84b6 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7f5c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7f5c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7f5e:	4e0e      	ldr	r6, [pc, #56]	; (b7f98 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7f60:	460d      	mov	r5, r1
   b7f62:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7f64:	f000 ffa4 	bl	b8eb0 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7f68:	6833      	ldr	r3, [r6, #0]
   b7f6a:	1ac0      	subs	r0, r0, r3
   b7f6c:	4b0b      	ldr	r3, [pc, #44]	; (b7f9c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7f6e:	4298      	cmp	r0, r3
   b7f70:	d908      	bls.n	b7f84 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7f72:	f000 ffa5 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7f76:	4b0a      	ldr	r3, [pc, #40]	; (b7fa0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7f78:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7f7a:	f001 fab1 	bl	b94e0 <spark_process>
   b7f7e:	f000 ff97 	bl	b8eb0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7f82:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7f84:	f000 ff9c 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7f88:	b280      	uxth	r0, r0
   b7f8a:	1b40      	subs	r0, r0, r5
}
   b7f8c:	42a0      	cmp	r0, r4
   b7f8e:	bfd4      	ite	le
   b7f90:	2000      	movle	r0, #0
   b7f92:	2001      	movgt	r0, #1
   b7f94:	bd70      	pop	{r4, r5, r6, pc}
   b7f96:	bf00      	nop
   b7f98:	2003e64c 	.word	0x2003e64c
   b7f9c:	000186a0 	.word	0x000186a0
   b7fa0:	2003e740 	.word	0x2003e740

000b7fa4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7fa4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7fa6:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7fa8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7faa:	b94d      	cbnz	r5, b7fc0 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7fac:	6840      	ldr	r0, [r0, #4]
   b7fae:	f000 fa6b 	bl	b8488 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7fb2:	6863      	ldr	r3, [r4, #4]
   b7fb4:	4629      	mov	r1, r5
   b7fb6:	7d18      	ldrb	r0, [r3, #20]
   b7fb8:	f005 f887 	bl	bd0ca <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7fbc:	2301      	movs	r3, #1
   b7fbe:	7223      	strb	r3, [r4, #8]
  }
}
   b7fc0:	bd38      	pop	{r3, r4, r5, pc}

000b7fc2 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7fc2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7fc4:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7fc6:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7fc8:	b16b      	cbz	r3, b7fe6 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7fca:	6843      	ldr	r3, [r0, #4]
   b7fcc:	2101      	movs	r1, #1
   b7fce:	7d18      	ldrb	r0, [r3, #20]
   b7fd0:	f005 f87b 	bl	bd0ca <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7fd4:	6860      	ldr	r0, [r4, #4]
   b7fd6:	21ff      	movs	r1, #255	; 0xff
   b7fd8:	f7ff ffbb 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7fdc:	6860      	ldr	r0, [r4, #4]
   b7fde:	f000 fa67 	bl	b84b0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7fe2:	2300      	movs	r3, #0
   b7fe4:	7223      	strb	r3, [r4, #8]
  }
}
   b7fe6:	bd10      	pop	{r4, pc}

000b7fe8 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fea:	4604      	mov	r4, r0
   b7fec:	460d      	mov	r5, r1
   b7fee:	4616      	mov	r6, r2
   b7ff0:	f000 ff66 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7ff4:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7ff6:	6860      	ldr	r0, [r4, #4]
   b7ff8:	f7ff ffad 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ffc:	28ff      	cmp	r0, #255	; 0xff
   b7ffe:	7260      	strb	r0, [r4, #9]
   b8000:	d10e      	bne.n	b8020 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b8002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8006:	4639      	mov	r1, r7
   b8008:	4620      	mov	r0, r4
   b800a:	f7ff ffa7 	bl	b7f5c <_ZN9SdSpiCard10isTimedOutEtt>
   b800e:	2800      	cmp	r0, #0
   b8010:	d0f1      	beq.n	b7ff6 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b8012:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b8014:	4620      	mov	r0, r4
   b8016:	7023      	strb	r3, [r4, #0]
   b8018:	f7ff ffd3 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b801c:	2000      	movs	r0, #0
}
   b801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b8020:	28fe      	cmp	r0, #254	; 0xfe
   b8022:	d001      	beq.n	b8028 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b8024:	2350      	movs	r3, #80	; 0x50
   b8026:	e7f5      	b.n	b8014 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b8028:	6860      	ldr	r0, [r4, #4]
   b802a:	4632      	mov	r2, r6
   b802c:	4629      	mov	r1, r5
   b802e:	f000 fa47 	bl	b84c0 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b8032:	7260      	strb	r0, [r4, #9]
   b8034:	b108      	cbz	r0, b803a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b8036:	2360      	movs	r3, #96	; 0x60
   b8038:	e7ec      	b.n	b8014 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b803a:	6860      	ldr	r0, [r4, #4]
   b803c:	f7ff ff8b 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b8040:	6860      	ldr	r0, [r4, #4]
   b8042:	f7ff ff88 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b8046:	2001      	movs	r0, #1
   b8048:	e7e9      	b.n	b801e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b804a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b804a:	b570      	push	{r4, r5, r6, lr}
   b804c:	4604      	mov	r4, r0
   b804e:	460e      	mov	r6, r1
   b8050:	f000 ff36 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
   b8054:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b8056:	4632      	mov	r2, r6
   b8058:	4629      	mov	r1, r5
   b805a:	4620      	mov	r0, r4
   b805c:	f7ff ff7e 	bl	b7f5c <_ZN9SdSpiCard10isTimedOutEtt>
   b8060:	b930      	cbnz	r0, b8070 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b8062:	6860      	ldr	r0, [r4, #4]
   b8064:	f7ff ff77 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8068:	28ff      	cmp	r0, #255	; 0xff
   b806a:	d1f4      	bne.n	b8056 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b806c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b806e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b8070:	2000      	movs	r0, #0
   b8072:	e7fc      	b.n	b806e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b8074 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b8074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b8076:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b8078:	9201      	str	r2, [sp, #4]
   b807a:	4604      	mov	r4, r0
   b807c:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b807e:	b90b      	cbnz	r3, b8084 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b8080:	f7ff ff90 	bl	b7fa4 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b8084:	b125      	cbz	r5, b8090 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b8086:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b808a:	4620      	mov	r0, r4
   b808c:	f7ff ffdd 	bl	b804a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b8090:	6860      	ldr	r0, [r4, #4]
   b8092:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b8096:	f7ff ff5c 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b809a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b809c:	af01      	add	r7, sp, #4
   b809e:	5db9      	ldrb	r1, [r7, r6]
   b80a0:	6860      	ldr	r0, [r4, #4]
   b80a2:	f7ff ff56 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b80a6:	3e01      	subs	r6, #1
   b80a8:	d2f9      	bcs.n	b809e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b80aa:	2d00      	cmp	r5, #0
   b80ac:	6860      	ldr	r0, [r4, #4]
   b80ae:	bf0c      	ite	eq
   b80b0:	2195      	moveq	r1, #149	; 0x95
   b80b2:	2187      	movne	r1, #135	; 0x87
   b80b4:	f7ff ff4d 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b80b8:	6860      	ldr	r0, [r4, #4]
   b80ba:	f7ff ff4c 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b80be:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b80c0:	6860      	ldr	r0, [r4, #4]
   b80c2:	f7ff ff48 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b80c6:	0603      	lsls	r3, r0, #24
   b80c8:	7260      	strb	r0, [r4, #9]
   b80ca:	d503      	bpl.n	b80d4 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b80cc:	3d01      	subs	r5, #1
   b80ce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b80d2:	d1f5      	bne.n	b80c0 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b80d4:	b003      	add	sp, #12
   b80d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80d8 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b80d8:	b570      	push	{r4, r5, r6, lr}
   b80da:	4604      	mov	r4, r0
   b80dc:	460d      	mov	r5, r1
   b80de:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b80e0:	2137      	movs	r1, #55	; 0x37
   b80e2:	2200      	movs	r2, #0
   b80e4:	f7ff ffc6 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b80e8:	4632      	mov	r2, r6
   b80ea:	4629      	mov	r1, r5
   b80ec:	4620      	mov	r0, r4
  }
   b80ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b80f2:	f7ff bfbf 	b.w	b8074 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b80f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b80f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b80fc:	2500      	movs	r5, #0
   b80fe:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b8100:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b8102:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b8104:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b8106:	4604      	mov	r4, r0
   b8108:	4690      	mov	r8, r2
   b810a:	461e      	mov	r6, r3
   b810c:	f000 fed8 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b8110:	4641      	mov	r1, r8
   b8112:	4607      	mov	r7, r0
   b8114:	6860      	ldr	r0, [r4, #4]
   b8116:	f000 f9bb 	bl	b8490 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b811a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b811c:	4a49      	ldr	r2, [pc, #292]	; (b8244 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b811e:	721d      	strb	r5, [r3, #8]
   b8120:	2501      	movs	r5, #1
   b8122:	60da      	str	r2, [r3, #12]
   b8124:	821d      	strh	r5, [r3, #16]
  spiStart();
   b8126:	4620      	mov	r0, r4
   b8128:	f7ff ff3c 	bl	b7fa4 <_ZN9SdSpiCard8spiStartEv>
   b812c:	6863      	ldr	r3, [r4, #4]
   b812e:	4629      	mov	r1, r5
   b8130:	7d18      	ldrb	r0, [r3, #20]
   b8132:	f004 ffca 	bl	bd0ca <digitalWrite>
   b8136:	250a      	movs	r5, #10
    spiSend(0XFF);
   b8138:	6860      	ldr	r0, [r4, #4]
   b813a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b813c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b813e:	f7ff ff08 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b8142:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b8146:	d1f7      	bne.n	b8138 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b8148:	6863      	ldr	r3, [r4, #4]
   b814a:	4629      	mov	r1, r5
   b814c:	7d18      	ldrb	r0, [r3, #20]
   b814e:	f004 ffbc 	bl	bd0ca <digitalWrite>
  }
   b8152:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b8154:	2200      	movs	r2, #0
   b8156:	4611      	mov	r1, r2
   b8158:	4620      	mov	r0, r4
   b815a:	f7ff ff8b 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b815e:	2801      	cmp	r0, #1
   b8160:	4680      	mov	r8, r0
   b8162:	d018      	beq.n	b8196 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b8164:	3d01      	subs	r5, #1
   b8166:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b816a:	d107      	bne.n	b817c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b816c:	2320      	movs	r3, #32
  spiStop();
   b816e:	4620      	mov	r0, r4
   b8170:	7023      	strb	r3, [r4, #0]
   b8172:	f7ff ff26 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8176:	2000      	movs	r0, #0
}
   b8178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b817c:	6860      	ldr	r0, [r4, #4]
   b817e:	21fd      	movs	r1, #253	; 0xfd
   b8180:	f7ff fee7 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8184:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b8188:	6860      	ldr	r0, [r4, #4]
   b818a:	f7ff fee4 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b818e:	f1b8 0801 	subs.w	r8, r8, #1
   b8192:	d1f9      	bne.n	b8188 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b8194:	e7de      	b.n	b8154 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b8196:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b819a:	2108      	movs	r1, #8
   b819c:	4620      	mov	r0, r4
   b819e:	f7ff ff69 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b81a2:	2805      	cmp	r0, #5
   b81a4:	d114      	bne.n	b81d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b81a6:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b81aa:	2500      	movs	r5, #0
   b81ac:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b81ae:	462a      	mov	r2, r5
   b81b0:	2129      	movs	r1, #41	; 0x29
   b81b2:	4620      	mov	r0, r4
   b81b4:	f7ff ff90 	bl	b80d8 <_ZN9SdSpiCard8cardAcmdEhm>
   b81b8:	4602      	mov	r2, r0
   b81ba:	b1d8      	cbz	r0, b81f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b81bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b81c0:	4639      	mov	r1, r7
   b81c2:	4620      	mov	r0, r4
   b81c4:	f7ff feca 	bl	b7f5c <_ZN9SdSpiCard10isTimedOutEtt>
   b81c8:	2800      	cmp	r0, #0
   b81ca:	d0f0      	beq.n	b81ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b81cc:	2343      	movs	r3, #67	; 0x43
   b81ce:	e7ce      	b.n	b816e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b81d0:	2504      	movs	r5, #4
      m_status = spiReceive();
   b81d2:	6860      	ldr	r0, [r4, #4]
   b81d4:	f7ff febf 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b81d8:	3d01      	subs	r5, #1
   b81da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b81de:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b81e0:	d1f7      	bne.n	b81d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b81e2:	28aa      	cmp	r0, #170	; 0xaa
   b81e4:	d104      	bne.n	b81f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b81e6:	2302      	movs	r3, #2
   b81e8:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b81ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b81ee:	e7dd      	b.n	b81ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b81f0:	2325      	movs	r3, #37	; 0x25
   b81f2:	e7bc      	b.n	b816e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b81f4:	7aa3      	ldrb	r3, [r4, #10]
   b81f6:	2b02      	cmp	r3, #2
   b81f8:	d118      	bne.n	b822c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b81fa:	213a      	movs	r1, #58	; 0x3a
   b81fc:	4620      	mov	r0, r4
   b81fe:	f7ff ff39 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b8202:	b108      	cbz	r0, b8208 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b8204:	2337      	movs	r3, #55	; 0x37
   b8206:	e7b2      	b.n	b816e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b8208:	6860      	ldr	r0, [r4, #4]
   b820a:	f7ff fea4 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b820e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b8212:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b8214:	bf04      	itt	eq
   b8216:	2303      	moveq	r3, #3
   b8218:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b821a:	6860      	ldr	r0, [r4, #4]
   b821c:	f7ff fe9b 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8220:	6860      	ldr	r0, [r4, #4]
   b8222:	f7ff fe98 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8226:	6860      	ldr	r0, [r4, #4]
   b8228:	f7ff fe95 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b822c:	4620      	mov	r0, r4
   b822e:	f7ff fec8 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b8232:	6863      	ldr	r3, [r4, #4]
   b8234:	7930      	ldrb	r0, [r6, #4]
   b8236:	68b1      	ldr	r1, [r6, #8]
   b8238:	89b2      	ldrh	r2, [r6, #12]
   b823a:	821a      	strh	r2, [r3, #16]
   b823c:	7218      	strb	r0, [r3, #8]
   b823e:	60d9      	str	r1, [r3, #12]
  return true;
   b8240:	2001      	movs	r0, #1
   b8242:	e799      	b.n	b8178 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b8244:	0003d090 	.word	0x0003d090

000b8248 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8248:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b824a:	7a83      	ldrb	r3, [r0, #10]
   b824c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b824e:	bf18      	it	ne
   b8250:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8252:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b8254:	460a      	mov	r2, r1
   b8256:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8258:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b825a:	f7ff ff0b 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b825e:	b130      	cbz	r0, b826e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b8260:	2330      	movs	r3, #48	; 0x30
   b8262:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8264:	4620      	mov	r0, r4
   b8266:	f7ff feac 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b826a:	2500      	movs	r5, #0
   b826c:	e00b      	b.n	b8286 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b826e:	4629      	mov	r1, r5
   b8270:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8274:	4620      	mov	r0, r4
   b8276:	f7ff feb7 	bl	b7fe8 <_ZN9SdSpiCard8readDataEPhj>
   b827a:	4605      	mov	r5, r0
   b827c:	2800      	cmp	r0, #0
   b827e:	d0f1      	beq.n	b8264 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b8280:	4620      	mov	r0, r4
   b8282:	f7ff fe9e 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
}
   b8286:	4628      	mov	r0, r5
   b8288:	bd38      	pop	{r3, r4, r5, pc}

000b828a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b828a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b828c:	7a83      	ldrb	r3, [r0, #10]
   b828e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8290:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b8292:	bf18      	it	ne
   b8294:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b8296:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8298:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b829a:	f7ff feeb 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b829e:	b130      	cbz	r0, b82ae <_ZN9SdSpiCard9readStartEm+0x24>
   b82a0:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b82a2:	4620      	mov	r0, r4
   b82a4:	7023      	strb	r3, [r4, #0]
   b82a6:	f7ff fe8c 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b82aa:	2000      	movs	r0, #0
}
   b82ac:	bd10      	pop	{r4, pc}
  return true;
   b82ae:	2001      	movs	r0, #1
   b82b0:	e7fc      	b.n	b82ac <_ZN9SdSpiCard9readStartEm+0x22>

000b82b2 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b82b2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b82b4:	2200      	movs	r2, #0
   b82b6:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b82b8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b82ba:	f7ff fedb 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b82be:	b130      	cbz	r0, b82ce <_ZN9SdSpiCard8readStopEv+0x1c>
   b82c0:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b82c2:	4620      	mov	r0, r4
   b82c4:	7023      	strb	r3, [r4, #0]
   b82c6:	f7ff fe7c 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b82ca:	2000      	movs	r0, #0
}
   b82cc:	bd10      	pop	{r4, pc}
  spiStop();
   b82ce:	4620      	mov	r0, r4
   b82d0:	f7ff fe77 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b82d4:	2001      	movs	r0, #1
   b82d6:	e7f9      	b.n	b82cc <_ZN9SdSpiCard8readStopEv+0x1a>

000b82d8 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b82d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82da:	4604      	mov	r4, r0
   b82dc:	4616      	mov	r6, r2
   b82de:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b82e0:	f7ff ffd3 	bl	b828a <_ZN9SdSpiCard9readStartEm>
   b82e4:	b168      	cbz	r0, b8302 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b82e6:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b82e8:	b2ab      	uxth	r3, r5
   b82ea:	429f      	cmp	r7, r3
   b82ec:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b82f0:	d909      	bls.n	b8306 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b82f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b82f6:	4620      	mov	r0, r4
   b82f8:	f7ff fe76 	bl	b7fe8 <_ZN9SdSpiCard8readDataEPhj>
   b82fc:	3501      	adds	r5, #1
   b82fe:	2800      	cmp	r0, #0
   b8300:	d1f2      	bne.n	b82e8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b8302:	2000      	movs	r0, #0
   b8304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b8306:	4620      	mov	r0, r4
}
   b8308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b830c:	f7ff bfd1 	b.w	b82b2 <_ZN9SdSpiCard8readStopEv>

000b8310 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b8310:	b538      	push	{r3, r4, r5, lr}
   b8312:	4604      	mov	r4, r0
   b8314:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b8316:	6840      	ldr	r0, [r0, #4]
   b8318:	f7ff fe1b 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b831c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8320:	6860      	ldr	r0, [r4, #4]
   b8322:	4629      	mov	r1, r5
   b8324:	f000 f8e6 	bl	b84f4 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b8328:	6860      	ldr	r0, [r4, #4]
   b832a:	21ff      	movs	r1, #255	; 0xff
   b832c:	f7ff fe11 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b8330:	6860      	ldr	r0, [r4, #4]
   b8332:	21ff      	movs	r1, #255	; 0xff
   b8334:	f7ff fe0d 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b8338:	6860      	ldr	r0, [r4, #4]
   b833a:	f7ff fe0c 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b833e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b8340:	f000 001f 	and.w	r0, r0, #31
   b8344:	2805      	cmp	r0, #5
   b8346:	d006      	beq.n	b8356 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b8348:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b834a:	4620      	mov	r0, r4
   b834c:	7023      	strb	r3, [r4, #0]
   b834e:	f7ff fe38 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8352:	2000      	movs	r0, #0
}
   b8354:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b8356:	2001      	movs	r0, #1
   b8358:	e7fc      	b.n	b8354 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b835a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b835a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b835c:	7a83      	ldrb	r3, [r0, #10]
   b835e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b8360:	bf18      	it	ne
   b8362:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8364:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b8366:	460a      	mov	r2, r1
   b8368:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b836a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b836c:	f7ff fe82 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b8370:	4606      	mov	r6, r0
   b8372:	b130      	cbz	r0, b8382 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b8374:	2332      	movs	r3, #50	; 0x32
   b8376:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8378:	4620      	mov	r0, r4
   b837a:	f7ff fe22 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b837e:	2500      	movs	r5, #0
   b8380:	e01f      	b.n	b83c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b8382:	462a      	mov	r2, r5
   b8384:	21fe      	movs	r1, #254	; 0xfe
   b8386:	4620      	mov	r0, r4
   b8388:	f7ff ffc2 	bl	b8310 <_ZN9SdSpiCard9writeDataEhPKh>
   b838c:	2800      	cmp	r0, #0
   b838e:	d0f3      	beq.n	b8378 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8390:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8394:	4620      	mov	r0, r4
   b8396:	f7ff fe58 	bl	b804a <_ZN9SdSpiCard11waitNotBusyEt>
   b839a:	4605      	mov	r5, r0
   b839c:	b908      	cbnz	r0, b83a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b839e:	235a      	movs	r3, #90	; 0x5a
   b83a0:	e7e9      	b.n	b8376 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b83a2:	4632      	mov	r2, r6
   b83a4:	210d      	movs	r1, #13
   b83a6:	4620      	mov	r0, r4
   b83a8:	f7ff fe64 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b83ac:	b108      	cbz	r0, b83b2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b83ae:	2329      	movs	r3, #41	; 0x29
   b83b0:	e7e1      	b.n	b8376 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b83b2:	6860      	ldr	r0, [r4, #4]
   b83b4:	f7ff fdcf 	bl	b7f56 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b83b8:	2800      	cmp	r0, #0
   b83ba:	d1f8      	bne.n	b83ae <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b83bc:	4620      	mov	r0, r4
   b83be:	f7ff fe00 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
}
   b83c2:	4628      	mov	r0, r5
   b83c4:	bd70      	pop	{r4, r5, r6, pc}

000b83c6 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b83c6:	b513      	push	{r0, r1, r4, lr}
   b83c8:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b83ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b83ce:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b83d0:	f7ff fe3b 	bl	b804a <_ZN9SdSpiCard11waitNotBusyEt>
   b83d4:	9a01      	ldr	r2, [sp, #4]
   b83d6:	b930      	cbnz	r0, b83e6 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b83d8:	235b      	movs	r3, #91	; 0x5b
   b83da:	7023      	strb	r3, [r4, #0]
  spiStop();
   b83dc:	4620      	mov	r0, r4
   b83de:	f7ff fdf0 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b83e2:	2000      	movs	r0, #0
   b83e4:	e005      	b.n	b83f2 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b83e6:	21fc      	movs	r1, #252	; 0xfc
   b83e8:	4620      	mov	r0, r4
   b83ea:	f7ff ff91 	bl	b8310 <_ZN9SdSpiCard9writeDataEhPKh>
   b83ee:	2800      	cmp	r0, #0
   b83f0:	d0f4      	beq.n	b83dc <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b83f2:	b002      	add	sp, #8
   b83f4:	bd10      	pop	{r4, pc}

000b83f6 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b83f6:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b83f8:	7a83      	ldrb	r3, [r0, #10]
   b83fa:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b83fc:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b83fe:	bf18      	it	ne
   b8400:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b8402:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8404:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b8406:	f7ff fe35 	bl	b8074 <_ZN9SdSpiCard11cardCommandEhm>
   b840a:	b130      	cbz	r0, b841a <_ZN9SdSpiCard10writeStartEm+0x24>
   b840c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b840e:	4620      	mov	r0, r4
   b8410:	7023      	strb	r3, [r4, #0]
   b8412:	f7ff fdd6 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8416:	2000      	movs	r0, #0
}
   b8418:	bd10      	pop	{r4, pc}
  return true;
   b841a:	2001      	movs	r0, #1
   b841c:	e7fc      	b.n	b8418 <_ZN9SdSpiCard10writeStartEm+0x22>

000b841e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b841e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8420:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8424:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8426:	f7ff fe10 	bl	b804a <_ZN9SdSpiCard11waitNotBusyEt>
   b842a:	4605      	mov	r5, r0
   b842c:	b930      	cbnz	r0, b843c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b842e:	2356      	movs	r3, #86	; 0x56
   b8430:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b8432:	4620      	mov	r0, r4
   b8434:	f7ff fdc5 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8438:	4628      	mov	r0, r5
   b843a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b843c:	6860      	ldr	r0, [r4, #4]
   b843e:	21fd      	movs	r1, #253	; 0xfd
   b8440:	f7ff fd87 	bl	b7f52 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8444:	e7f5      	b.n	b8432 <_ZN9SdSpiCard9writeStopEv+0x14>

000b8446 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8448:	4604      	mov	r4, r0
   b844a:	4616      	mov	r6, r2
   b844c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b844e:	f7ff ffd2 	bl	b83f6 <_ZN9SdSpiCard10writeStartEm>
   b8452:	b170      	cbz	r0, b8472 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8454:	2500      	movs	r5, #0
   b8456:	42bd      	cmp	r5, r7
   b8458:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b845c:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b845e:	d004      	beq.n	b846a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b8460:	f7ff ffb1 	bl	b83c6 <_ZN9SdSpiCard9writeDataEPKh>
   b8464:	b128      	cbz	r0, b8472 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8466:	3501      	adds	r5, #1
   b8468:	e7f5      	b.n	b8456 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b846a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b846e:	f7ff bfd6 	b.w	b841e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b8472:	4620      	mov	r0, r4
   b8474:	f7ff fda5 	bl	b7fc2 <_ZN9SdSpiCard7spiStopEv>
}
   b8478:	2000      	movs	r0, #0
   b847a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b847c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b847c:	4b01      	ldr	r3, [pc, #4]	; (b8484 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b847e:	2201      	movs	r2, #1
   b8480:	701a      	strb	r2, [r3, #0]
}
   b8482:	4770      	bx	lr
   b8484:	2003e650 	.word	0x2003e650

000b8488 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b8488:	1d01      	adds	r1, r0, #4
   b848a:	6800      	ldr	r0, [r0, #0]
   b848c:	f001 b93c 	b.w	b9708 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8490 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b8490:	b510      	push	{r4, lr}
   b8492:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8494:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b8496:	6800      	ldr	r0, [r0, #0]
   b8498:	f001 f908 	bl	b96ac <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b849c:	7d20      	ldrb	r0, [r4, #20]
   b849e:	2101      	movs	r1, #1
   b84a0:	f004 fe02 	bl	bd0a8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b84a4:	7d20      	ldrb	r0, [r4, #20]
   b84a6:	2101      	movs	r1, #1
}
   b84a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b84ac:	f004 be0d 	b.w	bd0ca <digitalWrite>

000b84b0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b84b0:	6800      	ldr	r0, [r0, #0]
   b84b2:	f001 b90f 	b.w	b96d4 <_ZN8SPIClass14endTransactionEv>

000b84b6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b84b6:	6800      	ldr	r0, [r0, #0]
   b84b8:	21ff      	movs	r1, #255	; 0xff
   b84ba:	f001 b993 	b.w	b97e4 <_ZN8SPIClass8transferEh>
	...

000b84c0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b84c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84c2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b84c4:	4a07      	ldr	r2, [pc, #28]	; (b84e4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b84c6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b84c8:	2500      	movs	r5, #0
   b84ca:	4c07      	ldr	r4, [pc, #28]	; (b84e8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b84cc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b84ce:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b84d0:	460a      	mov	r2, r1
   b84d2:	4629      	mov	r1, r5
   b84d4:	f001 f98c 	bl	b97f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b84d8:	7823      	ldrb	r3, [r4, #0]
   b84da:	2b00      	cmp	r3, #0
   b84dc:	d0fc      	beq.n	b84d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b84de:	2000      	movs	r0, #0
   b84e0:	b003      	add	sp, #12
   b84e2:	bd30      	pop	{r4, r5, pc}
   b84e4:	000b847d 	.word	0x000b847d
   b84e8:	2003e650 	.word	0x2003e650

000b84ec <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b84ec:	6800      	ldr	r0, [r0, #0]
   b84ee:	f001 b979 	b.w	b97e4 <_ZN8SPIClass8transferEh>
	...

000b84f4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b84f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84f6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b84f8:	4a06      	ldr	r2, [pc, #24]	; (b8514 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b84fa:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b84fc:	2500      	movs	r5, #0
   b84fe:	4c06      	ldr	r4, [pc, #24]	; (b8518 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8500:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b8502:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8504:	462a      	mov	r2, r5
   b8506:	f001 f973 	bl	b97f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b850a:	7823      	ldrb	r3, [r4, #0]
   b850c:	2b00      	cmp	r3, #0
   b850e:	d0fc      	beq.n	b850a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b8510:	b003      	add	sp, #12
   b8512:	bd30      	pop	{r4, r5, pc}
   b8514:	000b847d 	.word	0x000b847d
   b8518:	2003e650 	.word	0x2003e650

000b851c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b851c:	b510      	push	{r4, lr}
   b851e:	4b04      	ldr	r3, [pc, #16]	; (b8530 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b8520:	6003      	str	r3, [r0, #0]
   b8522:	4604      	mov	r4, r0
  if(buffer) {
   b8524:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8526:	b108      	cbz	r0, b852c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b8528:	f001 f812 	bl	b9550 <free>
    buffer = NULL;
  }
}
   b852c:	4620      	mov	r0, r4
   b852e:	bd10      	pop	{r4, pc}
   b8530:	000c136c 	.word	0x000c136c

000b8534 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8534:	b510      	push	{r4, lr}
   b8536:	4604      	mov	r4, r0
}
   b8538:	f7ff fff0 	bl	b851c <_ZN16Adafruit_SSD1306D1Ev>
   b853c:	4620      	mov	r0, r4
   b853e:	2150      	movs	r1, #80	; 0x50
   b8540:	f7fb fdad 	bl	b409e <_ZdlPvj>
   b8544:	4620      	mov	r0, r4
   b8546:	bd10      	pop	{r4, pc}

000b8548 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8548:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b854a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b854c:	db4b      	blt.n	b85e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b854e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b8552:	428c      	cmp	r4, r1
   b8554:	dd47      	ble.n	b85e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8556:	2a00      	cmp	r2, #0
   b8558:	db45      	blt.n	b85e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b855a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b855e:	4294      	cmp	r4, r2
   b8560:	dd41      	ble.n	b85e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b8562:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b8564:	2c02      	cmp	r4, #2
   b8566:	d01f      	beq.n	b85a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b8568:	2c03      	cmp	r4, #3
   b856a:	d026      	beq.n	b85ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b856c:	2c01      	cmp	r4, #1
   b856e:	d104      	bne.n	b857a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b8570:	8904      	ldrh	r4, [r0, #8]
   b8572:	43d2      	mvns	r2, r2
   b8574:	4414      	add	r4, r2
      break;
   b8576:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b8578:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b857a:	2b01      	cmp	r3, #1
   b857c:	d023      	beq.n	b85c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b857e:	2b02      	cmp	r3, #2
   b8580:	d032      	beq.n	b85e8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b8582:	bb83      	cbnz	r3, b85e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b8584:	2a00      	cmp	r2, #0
   b8586:	4613      	mov	r3, r2
   b8588:	8904      	ldrh	r4, [r0, #8]
   b858a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b858c:	bfb8      	it	lt
   b858e:	1dd3      	addlt	r3, r2, #7
   b8590:	10db      	asrs	r3, r3, #3
   b8592:	fb13 1104 	smlabb	r1, r3, r4, r1
   b8596:	f002 0207 	and.w	r2, r2, #7
   b859a:	2301      	movs	r3, #1
   b859c:	4093      	lsls	r3, r2
   b859e:	5c42      	ldrb	r2, [r0, r1]
   b85a0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b85a4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b85a6:	e01e      	b.n	b85e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b85a8:	8904      	ldrh	r4, [r0, #8]
   b85aa:	3c01      	subs	r4, #1
   b85ac:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b85ae:	8944      	ldrh	r4, [r0, #10]
   b85b0:	43d2      	mvns	r2, r2
   b85b2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b85b4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b85b6:	b212      	sxth	r2, r2
      break;
   b85b8:	e7df      	b.n	b857a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b85ba:	8944      	ldrh	r4, [r0, #10]
   b85bc:	3c01      	subs	r4, #1
   b85be:	1a64      	subs	r4, r4, r1
      break;
   b85c0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b85c2:	b222      	sxth	r2, r4
      break;
   b85c4:	e7d9      	b.n	b857a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b85c6:	2a00      	cmp	r2, #0
   b85c8:	8904      	ldrh	r4, [r0, #8]
   b85ca:	4613      	mov	r3, r2
   b85cc:	bfb8      	it	lt
   b85ce:	1dd3      	addlt	r3, r2, #7
   b85d0:	10db      	asrs	r3, r3, #3
   b85d2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b85d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b85d8:	f002 0007 	and.w	r0, r2, #7
   b85dc:	2201      	movs	r2, #1
   b85de:	4082      	lsls	r2, r0
   b85e0:	5c58      	ldrb	r0, [r3, r1]
   b85e2:	4302      	orrs	r2, r0
   b85e4:	545a      	strb	r2, [r3, r1]
}
   b85e6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b85e8:	2a00      	cmp	r2, #0
   b85ea:	4613      	mov	r3, r2
   b85ec:	8904      	ldrh	r4, [r0, #8]
   b85ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b85f0:	bfb8      	it	lt
   b85f2:	1dd3      	addlt	r3, r2, #7
   b85f4:	10db      	asrs	r3, r3, #3
   b85f6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b85fa:	f002 0207 	and.w	r2, r2, #7
   b85fe:	2301      	movs	r3, #1
   b8600:	fa03 f202 	lsl.w	r2, r3, r2
   b8604:	5c43      	ldrb	r3, [r0, r1]
   b8606:	405a      	eors	r2, r3
   b8608:	e7cc      	b.n	b85a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b860c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b860c:	b570      	push	{r4, r5, r6, lr}
   b860e:	4604      	mov	r4, r0
   b8610:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b8612:	2600      	movs	r6, #0
   b8614:	f7fe f914 	bl	b6840 <_ZN12Adafruit_GFXC1Ess>
   b8618:	4b11      	ldr	r3, [pc, #68]	; (b8660 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b861a:	6023      	str	r3, [r4, #0]
   b861c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b861e:	b915      	cbnz	r5, b8626 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b8620:	f004 fdd6 	bl	bd1d0 <_Z19__fetch_global_Wirev>
   b8624:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b8626:	23ff      	movs	r3, #255	; 0xff
   b8628:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b862c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b8630:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b8634:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b8638:	4b0a      	ldr	r3, [pc, #40]	; (b8664 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b863a:	63a3      	str	r3, [r4, #56]	; 0x38
   b863c:	2301      	movs	r3, #1
   b863e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b8642:	9b05      	ldr	r3, [sp, #20]
   b8644:	64a3      	str	r3, [r4, #72]	; 0x48
   b8646:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b864a:	9b06      	ldr	r3, [sp, #24]
   b864c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b864e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b8652:	6426      	str	r6, [r4, #64]	; 0x40
   b8654:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b8658:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b865a:	4620      	mov	r0, r4
   b865c:	bd70      	pop	{r4, r5, r6, pc}
   b865e:	bf00      	nop
   b8660:	000c136c 	.word	0x000c136c
   b8664:	000c08cc 	.word	0x000c08cc

000b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b866a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b866c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b866e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8670:	b190      	cbz	r0, b8698 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b8672:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8676:	f004 fc11 	bl	bce9c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b867a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b867c:	6803      	ldr	r3, [r0, #0]
   b867e:	2100      	movs	r1, #0
   b8680:	689b      	ldr	r3, [r3, #8]
   b8682:	4798      	blx	r3
    WIRE_WRITE(c);
   b8684:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8686:	6803      	ldr	r3, [r0, #0]
   b8688:	4629      	mov	r1, r5
   b868a:	689b      	ldr	r3, [r3, #8]
   b868c:	4798      	blx	r3
    wire->endTransmission();
   b868e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b8690:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b8694:	f004 bc09 	b.w	bceaa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b8698:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b869c:	4601      	mov	r1, r0
   b869e:	b298      	uxth	r0, r3
   b86a0:	f004 fd13 	bl	bd0ca <digitalWrite>
  if(spi) {
   b86a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b86a6:	b120      	cbz	r0, b86b2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b86a8:	4629      	mov	r1, r5
}
   b86aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b86ae:	f001 b899 	b.w	b97e4 <_ZN8SPIClass8transferEh>
   b86b2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b86b4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b86b6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b86ba:	ea05 0107 	and.w	r1, r5, r7
   b86be:	b280      	uxth	r0, r0
   b86c0:	f004 fd03 	bl	bd0ca <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b86c4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b86c8:	2101      	movs	r1, #1
   b86ca:	b280      	uxth	r0, r0
   b86cc:	f004 fcfd 	bl	bd0ca <digitalWrite>
      digitalWrite(clkPin , LOW);
   b86d0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b86d4:	2100      	movs	r1, #0
   b86d6:	b280      	uxth	r0, r0
   b86d8:	f004 fcf7 	bl	bd0ca <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b86dc:	3e01      	subs	r6, #1
   b86de:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b86e2:	d1e8      	bne.n	b86b6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b86e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86e6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b86e6:	b538      	push	{r3, r4, r5, lr}
   b86e8:	4604      	mov	r4, r0
  TRANSACTION_START
   b86ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b86ec:	460d      	mov	r5, r1
  TRANSACTION_START
   b86ee:	b180      	cbz	r0, b8712 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b86f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b86f2:	f004 fbc5 	bl	bce80 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b86f6:	2d00      	cmp	r5, #0
   b86f8:	4620      	mov	r0, r4
   b86fa:	bf14      	ite	ne
   b86fc:	21a7      	movne	r1, #167	; 0xa7
   b86fe:	21a6      	moveq	r1, #166	; 0xa6
   b8700:	f7ff ffb2 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b8704:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8706:	b188      	cbz	r0, b872c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b8708:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b870a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b870e:	f004 bbb7 	b.w	bce80 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b8712:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8714:	b118      	cbz	r0, b871e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b8716:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b871a:	f000 fff5 	bl	b9708 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b871e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8722:	2100      	movs	r1, #0
   b8724:	b280      	uxth	r0, r0
   b8726:	f004 fcd0 	bl	bd0ca <digitalWrite>
   b872a:	e7e4      	b.n	b86f6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b872c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8730:	2101      	movs	r1, #1
   b8732:	b280      	uxth	r0, r0
   b8734:	f004 fcc9 	bl	bd0ca <digitalWrite>
   b8738:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b873a:	b118      	cbz	r0, b8744 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b873c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b8740:	f000 bfc8 	b.w	b96d4 <_ZN8SPIClass14endTransactionEv>
}
   b8744:	bd38      	pop	{r3, r4, r5, pc}

000b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b8746:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b874a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b874c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b874e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8750:	188f      	adds	r7, r1, r2
   b8752:	b340      	cbz	r0, b87a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b8754:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8758:	f004 fba0 	bl	bce9c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b875c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b875e:	6803      	ldr	r3, [r0, #0]
   b8760:	2100      	movs	r1, #0
   b8762:	689b      	ldr	r3, [r3, #8]
   b8764:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8766:	2601      	movs	r6, #1
    while(n--) {
   b8768:	42af      	cmp	r7, r5
        wire->endTransmission();
   b876a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b876c:	d017      	beq.n	b879e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b876e:	2e1f      	cmp	r6, #31
   b8770:	d90c      	bls.n	b878c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b8772:	f004 fb9a 	bl	bceaa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8776:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b877a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b877c:	f004 fb8e 	bl	bce9c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8780:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8782:	6803      	ldr	r3, [r0, #0]
   b8784:	2100      	movs	r1, #0
   b8786:	689b      	ldr	r3, [r3, #8]
   b8788:	4798      	blx	r3
        bytesOut = 1;
   b878a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b878c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b878e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8792:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8794:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b8796:	689b      	ldr	r3, [r3, #8]
   b8798:	4798      	blx	r3
      bytesOut++;
   b879a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b879c:	e7e4      	b.n	b8768 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b879e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b87a2:	f004 bb82 	b.w	bceaa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b87a6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b87aa:	4601      	mov	r1, r0
   b87ac:	b298      	uxth	r0, r3
   b87ae:	f004 fc8c 	bl	bd0ca <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b87b2:	42bd      	cmp	r5, r7
   b87b4:	d022      	beq.n	b87fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b87b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b87b8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b87bc:	b118      	cbz	r0, b87c6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b87be:	4649      	mov	r1, r9
   b87c0:	f001 f810 	bl	b97e4 <_ZN8SPIClass8transferEh>
   b87c4:	e7f5      	b.n	b87b2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b87c6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87c8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b87cc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b87d0:	ea09 0108 	and.w	r1, r9, r8
   b87d4:	b280      	uxth	r0, r0
   b87d6:	f004 fc78 	bl	bd0ca <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b87da:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87de:	2101      	movs	r1, #1
   b87e0:	b280      	uxth	r0, r0
   b87e2:	f004 fc72 	bl	bd0ca <digitalWrite>
      digitalWrite(clkPin , LOW);
   b87e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87ea:	2100      	movs	r1, #0
   b87ec:	b280      	uxth	r0, r0
   b87ee:	f004 fc6c 	bl	bd0ca <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87f2:	3e01      	subs	r6, #1
   b87f4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b87f8:	d1e8      	bne.n	b87cc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b87fa:	e7da      	b.n	b87b2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b87fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8800 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b8800:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b8804:	1dda      	adds	r2, r3, #7
   b8806:	bf48      	it	mi
   b8808:	f103 020e 	addmi.w	r2, r3, #14
   b880c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b8810:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8812:	10d2      	asrs	r2, r2, #3
   b8814:	435a      	muls	r2, r3
   b8816:	2100      	movs	r1, #0
   b8818:	f005 bbf3 	b.w	be002 <memset>

000b881c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b881c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8820:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8822:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b8824:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b8828:	4604      	mov	r4, r0
   b882a:	460f      	mov	r7, r1
   b882c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b882e:	b1c3      	cbz	r3, b8862 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b8830:	4620      	mov	r0, r4
   b8832:	f7ff ffe5 	bl	b8800 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b8836:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b883a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b883e:	2820      	cmp	r0, #32
   b8840:	dc21      	bgt.n	b8886 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8842:	2320      	movs	r3, #32
   b8844:	2201      	movs	r2, #1
   b8846:	3820      	subs	r0, #32
   b8848:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b884c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b8850:	2373      	movs	r3, #115	; 0x73
   b8852:	3973      	subs	r1, #115	; 0x73
   b8854:	9300      	str	r3, [sp, #0]
   b8856:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b885a:	4b89      	ldr	r3, [pc, #548]	; (b8a80 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b885c:	f340 024f 	sbfx	r2, r0, #1, #16
   b8860:	e021      	b.n	b88a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8862:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b8866:	1dd8      	adds	r0, r3, #7
   b8868:	bf48      	it	mi
   b886a:	f103 000e 	addmi.w	r0, r3, #14
   b886e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b8872:	10c0      	asrs	r0, r0, #3
   b8874:	4358      	muls	r0, r3
   b8876:	f000 fe63 	bl	b9540 <malloc>
   b887a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b887c:	2800      	cmp	r0, #0
   b887e:	d1d7      	bne.n	b8830 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b8880:	b004      	add	sp, #16
   b8882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b8886:	3840      	subs	r0, #64	; 0x40
   b8888:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b888c:	fa02 f280 	sxtah	r2, r2, r0
   b8890:	2340      	movs	r3, #64	; 0x40
   b8892:	2001      	movs	r0, #1
   b8894:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b8898:	2352      	movs	r3, #82	; 0x52
   b889a:	3952      	subs	r1, #82	; 0x52
   b889c:	9300      	str	r3, [sp, #0]
   b889e:	4b79      	ldr	r3, [pc, #484]	; (b8a84 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b88a0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b88a4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b88a6:	4620      	mov	r0, r4
   b88a8:	f341 014f 	sbfx	r1, r1, #1, #16
   b88ac:	f7fd ffde 	bl	b686c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b88b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b88b2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b88b6:	2800      	cmp	r0, #0
   b88b8:	d078      	beq.n	b89ac <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b88ba:	2d00      	cmp	r5, #0
   b88bc:	d174      	bne.n	b89a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b88be:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b88c2:	2b20      	cmp	r3, #32
   b88c4:	bf0c      	ite	eq
   b88c6:	253c      	moveq	r5, #60	; 0x3c
   b88c8:	253d      	movne	r5, #61	; 0x3d
   b88ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b88ce:	f1b8 0f00 	cmp.w	r8, #0
   b88d2:	d001      	beq.n	b88d8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b88d4:	f004 fad8 	bl	bce88 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b88d8:	b1fe      	cbz	r6, b891a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b88da:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b88de:	2800      	cmp	r0, #0
   b88e0:	db1b      	blt.n	b891a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b88e2:	2101      	movs	r1, #1
   b88e4:	b280      	uxth	r0, r0
   b88e6:	f004 fbdf 	bl	bd0a8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b88ea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b88ee:	2101      	movs	r1, #1
   b88f0:	b280      	uxth	r0, r0
   b88f2:	f004 fbea 	bl	bd0ca <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b88f6:	2001      	movs	r0, #1
   b88f8:	f003 fd64 	bl	bc3c4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b88fc:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8900:	2100      	movs	r1, #0
   b8902:	b280      	uxth	r0, r0
   b8904:	f004 fbe1 	bl	bd0ca <digitalWrite>
    delay(10);                  // Wait 10 ms
   b8908:	200a      	movs	r0, #10
   b890a:	f003 fd5b 	bl	bc3c4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b890e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8912:	2101      	movs	r1, #1
   b8914:	b280      	uxth	r0, r0
   b8916:	f004 fbd8 	bl	bd0ca <digitalWrite>
  TRANSACTION_START
   b891a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b891c:	2800      	cmp	r0, #0
   b891e:	d074      	beq.n	b8a0a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8920:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8922:	f004 faad 	bl	bce80 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b8926:	2204      	movs	r2, #4
   b8928:	4957      	ldr	r1, [pc, #348]	; (b8a88 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b892a:	4620      	mov	r0, r4
   b892c:	f7ff ff0b 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b8930:	8961      	ldrh	r1, [r4, #10]
   b8932:	3901      	subs	r1, #1
   b8934:	b2c9      	uxtb	r1, r1
   b8936:	4620      	mov	r0, r4
   b8938:	f7ff fe96 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b893c:	4953      	ldr	r1, [pc, #332]	; (b8a8c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b893e:	2204      	movs	r2, #4
   b8940:	4620      	mov	r0, r4
   b8942:	f7ff ff00 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b8946:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b894a:	2b01      	cmp	r3, #1
   b894c:	bf0c      	ite	eq
   b894e:	2110      	moveq	r1, #16
   b8950:	2114      	movne	r1, #20
   b8952:	4620      	mov	r0, r4
   b8954:	f7ff fe88 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8958:	2204      	movs	r2, #4
   b895a:	494d      	ldr	r1, [pc, #308]	; (b8a90 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b895c:	4620      	mov	r0, r4
   b895e:	f7ff fef2 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b8962:	68a3      	ldr	r3, [r4, #8]
   b8964:	4a4b      	ldr	r2, [pc, #300]	; (b8a94 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b8966:	4293      	cmp	r3, r2
   b8968:	d15c      	bne.n	b8a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b896a:	494b      	ldr	r1, [pc, #300]	; (b8a98 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b896c:	2204      	movs	r2, #4
   b896e:	4620      	mov	r0, r4
   b8970:	f7ff fee9 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b8974:	21d9      	movs	r1, #217	; 0xd9
   b8976:	4620      	mov	r0, r4
   b8978:	f7ff fe76 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b897c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8980:	2b01      	cmp	r3, #1
   b8982:	bf0c      	ite	eq
   b8984:	2122      	moveq	r1, #34	; 0x22
   b8986:	21f1      	movne	r1, #241	; 0xf1
   b8988:	4620      	mov	r0, r4
   b898a:	f7ff fe6d 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b898e:	4620      	mov	r0, r4
   b8990:	4942      	ldr	r1, [pc, #264]	; (b8a9c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b8992:	2206      	movs	r2, #6
   b8994:	f7ff fed7 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b899a:	2800      	cmp	r0, #0
   b899c:	d063      	beq.n	b8a66 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b899e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b89a0:	f004 fa6e 	bl	bce80 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b89a4:	2001      	movs	r0, #1
   b89a6:	e76b      	b.n	b8880 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b89a8:	b26d      	sxtb	r5, r5
   b89aa:	e78e      	b.n	b88ca <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b89ac:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b89b0:	2101      	movs	r1, #1
   b89b2:	b280      	uxth	r0, r0
   b89b4:	f004 fb78 	bl	bd0a8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b89b8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b89bc:	2101      	movs	r1, #1
   b89be:	b280      	uxth	r0, r0
   b89c0:	f004 fb72 	bl	bd0a8 <pinMode>
    SSD1306_DESELECT
   b89c4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b89c8:	2101      	movs	r1, #1
   b89ca:	b280      	uxth	r0, r0
   b89cc:	f004 fb7d 	bl	bd0ca <digitalWrite>
    if(spi) { // Hardware SPI
   b89d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b89d2:	b13d      	cbz	r5, b89e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b89d4:	f1b8 0f00 	cmp.w	r8, #0
   b89d8:	f43f af7e 	beq.w	b88d8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b89dc:	4628      	mov	r0, r5
   b89de:	f000 fe65 	bl	b96ac <_ZN8SPIClass5beginEv>
   b89e2:	e779      	b.n	b88d8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b89e4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b89e8:	2101      	movs	r1, #1
   b89ea:	b280      	uxth	r0, r0
   b89ec:	f004 fb5c 	bl	bd0a8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b89f0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b89f4:	2101      	movs	r1, #1
   b89f6:	b280      	uxth	r0, r0
   b89f8:	f004 fb56 	bl	bd0a8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b89fc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8a00:	4629      	mov	r1, r5
   b8a02:	b280      	uxth	r0, r0
   b8a04:	f004 fb61 	bl	bd0ca <digitalWrite>
   b8a08:	e766      	b.n	b88d8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b8a0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8a0c:	b118      	cbz	r0, b8a16 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b8a0e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8a12:	f000 fe79 	bl	b9708 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8a16:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8a1a:	2100      	movs	r1, #0
   b8a1c:	b280      	uxth	r0, r0
   b8a1e:	f004 fb54 	bl	bd0ca <digitalWrite>
   b8a22:	e780      	b.n	b8926 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b8a24:	4a1e      	ldr	r2, [pc, #120]	; (b8aa0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b8a26:	4293      	cmp	r3, r2
   b8a28:	d10e      	bne.n	b8a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8a2a:	491e      	ldr	r1, [pc, #120]	; (b8aa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b8a2c:	2203      	movs	r2, #3
   b8a2e:	4620      	mov	r0, r4
   b8a30:	f7ff fe89 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b8a34:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8a38:	2b01      	cmp	r3, #1
   b8a3a:	bf0c      	ite	eq
   b8a3c:	219f      	moveq	r1, #159	; 0x9f
   b8a3e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8a40:	4620      	mov	r0, r4
   b8a42:	f7ff fe11 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b8a46:	e795      	b.n	b8974 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b8a48:	4a17      	ldr	r2, [pc, #92]	; (b8aa8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b8a4a:	4293      	cmp	r3, r2
   b8a4c:	d192      	bne.n	b8974 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b8a4e:	4917      	ldr	r1, [pc, #92]	; (b8aac <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b8a50:	2203      	movs	r2, #3
   b8a52:	4620      	mov	r0, r4
   b8a54:	f7ff fe77 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8a58:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8a5c:	2b01      	cmp	r3, #1
   b8a5e:	bf0c      	ite	eq
   b8a60:	2110      	moveq	r1, #16
   b8a62:	21af      	movne	r1, #175	; 0xaf
   b8a64:	e7ec      	b.n	b8a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b8a66:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8a6a:	2101      	movs	r1, #1
   b8a6c:	b280      	uxth	r0, r0
   b8a6e:	f004 fb2c 	bl	bd0ca <digitalWrite>
   b8a72:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8a74:	2800      	cmp	r0, #0
   b8a76:	d095      	beq.n	b89a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8a78:	f000 fe2c 	bl	b96d4 <_ZN8SPIClass14endTransactionEv>
   b8a7c:	e792      	b.n	b89a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8a7e:	bf00      	nop
   b8a80:	000c1184 	.word	0x000c1184
   b8a84:	000c0ec4 	.word	0x000c0ec4
   b8a88:	000c13cc 	.word	0x000c13cc
   b8a8c:	000c13d0 	.word	0x000c13d0
   b8a90:	000c13d4 	.word	0x000c13d4
   b8a94:	00200080 	.word	0x00200080
   b8a98:	000c13de 	.word	0x000c13de
   b8a9c:	000c13d8 	.word	0x000c13d8
   b8aa0:	00400080 	.word	0x00400080
   b8aa4:	000c13e2 	.word	0x000c13e2
   b8aa8:	00100060 	.word	0x00100060
   b8aac:	000c13e5 	.word	0x000c13e5

000b8ab0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8ab0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8ab2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8ab4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8ab8:	db3d      	blt.n	b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8aba:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8abe:	4294      	cmp	r4, r2
   b8ac0:	dd39      	ble.n	b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b8ac2:	2900      	cmp	r1, #0
      w += x;
   b8ac4:	bfbe      	ittt	lt
   b8ac6:	185b      	addlt	r3, r3, r1
   b8ac8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8aca:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8acc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8ad0:	18ce      	adds	r6, r1, r3
   b8ad2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8ad4:	bfc4      	itt	gt
   b8ad6:	1a63      	subgt	r3, r4, r1
   b8ad8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8ada:	2b00      	cmp	r3, #0
   b8adc:	dd2b      	ble.n	b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8ade:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8ae0:	10d6      	asrs	r6, r2, #3
   b8ae2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b8ae6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8ae8:	f002 0007 	and.w	r0, r2, #7
   b8aec:	2201      	movs	r2, #1
   b8aee:	4082      	lsls	r2, r0
      switch(color) {
   b8af0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b8af2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8af4:	d016      	beq.n	b8b24 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8af6:	2d02      	cmp	r5, #2
   b8af8:	d00b      	beq.n	b8b12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8afa:	b9e5      	cbnz	r5, b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8afc:	43d2      	mvns	r2, r2
   b8afe:	b2d2      	uxtb	r2, r2
   b8b00:	440b      	add	r3, r1
   b8b02:	4299      	cmp	r1, r3
   b8b04:	d017      	beq.n	b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8b06:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8b0a:	4010      	ands	r0, r2
   b8b0c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8b10:	e7f7      	b.n	b8b02 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b8b12:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8b14:	4299      	cmp	r1, r3
   b8b16:	d00e      	beq.n	b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8b18:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8b1c:	4050      	eors	r0, r2
   b8b1e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8b22:	e7f7      	b.n	b8b14 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8b24:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8b26:	4299      	cmp	r1, r3
   b8b28:	d005      	beq.n	b8b36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8b2a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8b2e:	4310      	orrs	r0, r2
   b8b30:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8b34:	e7f7      	b.n	b8b26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8b36:	bd70      	pop	{r4, r5, r6, pc}

000b8b38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8b3a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8b3c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8b40:	db76      	blt.n	b8c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b8b42:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b8b46:	42b1      	cmp	r1, r6
   b8b48:	da72      	bge.n	b8c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8b4a:	2a00      	cmp	r2, #0
      __h += __y;
   b8b4c:	bfbe      	ittt	lt
   b8b4e:	189b      	addlt	r3, r3, r2
   b8b50:	b21b      	sxthlt	r3, r3
      __y = 0;
   b8b52:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b8b54:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8b58:	18d7      	adds	r7, r2, r3
   b8b5a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8b5c:	bfc4      	itt	gt
   b8b5e:	1aa3      	subgt	r3, r4, r2
   b8b60:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b8b62:	2b00      	cmp	r3, #0
   b8b64:	dd64      	ble.n	b8c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8b66:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8b6a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8b6c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8b70:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b8b74:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8b76:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8b7a:	d023      	beq.n	b8bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8b7c:	f1c2 0208 	rsb	r2, r2, #8
   b8b80:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8b82:	492d      	ldr	r1, [pc, #180]	; (b8c38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8b84:	4293      	cmp	r3, r2
   b8b86:	bf3c      	itt	cc
   b8b88:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8b8c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8b90:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8b92:	bf3c      	itt	cc
   b8b94:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8b98:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8b9c:	2d01      	cmp	r5, #1
   b8b9e:	d007      	beq.n	b8bb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8ba0:	2d02      	cmp	r5, #2
   b8ba2:	d02e      	beq.n	b8c02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8ba4:	b94d      	cbnz	r5, b8bba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b8ba6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8baa:	ea2c 0101 	bic.w	r1, ip, r1
   b8bae:	e003      	b.n	b8bb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8bb0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8bb4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8bb8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8bba:	4293      	cmp	r3, r2
   b8bbc:	d338      	bcc.n	b8c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8bbe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b8bc2:	440c      	add	r4, r1
        h -= mod;
   b8bc4:	1a9a      	subs	r2, r3, r2
   b8bc6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8bc8:	2a07      	cmp	r2, #7
   b8bca:	d90e      	bls.n	b8bea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8bcc:	2d02      	cmp	r5, #2
   b8bce:	d11d      	bne.n	b8c0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8bd0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b8bd2:	7821      	ldrb	r1, [r4, #0]
   b8bd4:	43c9      	mvns	r1, r1
   b8bd6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8bd8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8bda:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8bde:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8be0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8be2:	440c      	add	r4, r1
            } while(h >= 8);
   b8be4:	d8f5      	bhi.n	b8bd2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b8be6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8bea:	b30a      	cbz	r2, b8c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8bec:	4b13      	ldr	r3, [pc, #76]	; (b8c3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8bee:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8bf0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b8bf2:	d01a      	beq.n	b8c2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8bf4:	2d02      	cmp	r5, #2
   b8bf6:	d01c      	beq.n	b8c32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8bf8:	b9d5      	cbnz	r5, b8c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8bfa:	7822      	ldrb	r2, [r4, #0]
   b8bfc:	ea22 0303 	bic.w	r3, r2, r3
   b8c00:	e015      	b.n	b8c2e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b8c02:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8c06:	ea81 010c 	eor.w	r1, r1, ip
   b8c0a:	e7d5      	b.n	b8bb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8c0c:	1e29      	subs	r1, r5, #0
   b8c0e:	bf18      	it	ne
   b8c10:	2101      	movne	r1, #1
   b8c12:	4249      	negs	r1, r1
   b8c14:	b2c9      	uxtb	r1, r1
   b8c16:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8c18:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8c1a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8c1c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b8c20:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8c22:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8c24:	4434      	add	r4, r6
            } while(h >= 8);
   b8c26:	d8f7      	bhi.n	b8c18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8c28:	e7dd      	b.n	b8be6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8c2a:	7822      	ldrb	r2, [r4, #0]
   b8c2c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b8c2e:	7023      	strb	r3, [r4, #0]
}
   b8c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b8c32:	7822      	ldrb	r2, [r4, #0]
   b8c34:	4053      	eors	r3, r2
   b8c36:	e7fa      	b.n	b8c2e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8c38:	000c13bc 	.word	0x000c13bc
   b8c3c:	000c13c4 	.word	0x000c13c4

000b8c40 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8c40:	b470      	push	{r4, r5, r6}
   b8c42:	4614      	mov	r4, r2
  switch(rotation) {
   b8c44:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8c46:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8c4a:	2a02      	cmp	r2, #2
   b8c4c:	d00d      	beq.n	b8c6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b8c4e:	2a03      	cmp	r2, #3
   b8c50:	d018      	beq.n	b8c84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b8c52:	2a01      	cmp	r2, #1
   b8c54:	d111      	bne.n	b8c7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b8c56:	8902      	ldrh	r2, [r0, #8]
   b8c58:	43e4      	mvns	r4, r4
   b8c5a:	4414      	add	r4, r2
   b8c5c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8c5e:	9603      	str	r6, [sp, #12]
   b8c60:	460a      	mov	r2, r1
   b8c62:	4621      	mov	r1, r4
}
   b8c64:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8c66:	f7ff bf67 	b.w	b8b38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8c6a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8c6c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8c6e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8c70:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b8c72:	4414      	add	r4, r2
    x -= (w-1);
   b8c74:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b8c76:	b224      	sxth	r4, r4
    x -= (w-1);
   b8c78:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8c7a:	9603      	str	r6, [sp, #12]
   b8c7c:	4622      	mov	r2, r4
}
   b8c7e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8c80:	f7ff bf16 	b.w	b8ab0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8c84:	8945      	ldrh	r5, [r0, #10]
   b8c86:	4419      	add	r1, r3
   b8c88:	1a69      	subs	r1, r5, r1
   b8c8a:	b209      	sxth	r1, r1
    break;
   b8c8c:	e7e7      	b.n	b8c5e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8c8e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8c8e:	b430      	push	{r4, r5}
   b8c90:	4614      	mov	r4, r2
  switch(rotation) {
   b8c92:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8c94:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8c98:	2a02      	cmp	r2, #2
   b8c9a:	d00d      	beq.n	b8cb8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8c9c:	2a03      	cmp	r2, #3
   b8c9e:	d018      	beq.n	b8cd2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8ca0:	2a01      	cmp	r2, #1
   b8ca2:	d111      	bne.n	b8cc8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8ca4:	18e2      	adds	r2, r4, r3
   b8ca6:	8904      	ldrh	r4, [r0, #8]
   b8ca8:	1aa4      	subs	r4, r4, r2
   b8caa:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8cac:	9502      	str	r5, [sp, #8]
   b8cae:	460a      	mov	r2, r1
   b8cb0:	4621      	mov	r1, r4
}
   b8cb2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8cb4:	f7ff befc 	b.w	b8ab0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8cb8:	8902      	ldrh	r2, [r0, #8]
   b8cba:	43c9      	mvns	r1, r1
   b8cbc:	4411      	add	r1, r2
    y -= (h-1);
   b8cbe:	18e2      	adds	r2, r4, r3
   b8cc0:	8944      	ldrh	r4, [r0, #10]
   b8cc2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8cc4:	b209      	sxth	r1, r1
    y -= (h-1);
   b8cc6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8cc8:	9502      	str	r5, [sp, #8]
   b8cca:	4622      	mov	r2, r4
}
   b8ccc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8cce:	f7ff bf33 	b.w	b8b38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b8cd2:	8942      	ldrh	r2, [r0, #10]
   b8cd4:	43c9      	mvns	r1, r1
   b8cd6:	4411      	add	r1, r2
   b8cd8:	b209      	sxth	r1, r1
    break;
   b8cda:	e7e7      	b.n	b8cac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8cdc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8ce0:	4604      	mov	r4, r0
  TRANSACTION_START
   b8ce2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8ce4:	2800      	cmp	r0, #0
   b8ce6:	d042      	beq.n	b8d6e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8ce8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8cea:	f004 f8c9 	bl	bce80 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8cee:	4947      	ldr	r1, [pc, #284]	; (b8e0c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8cf0:	2205      	movs	r2, #5
   b8cf2:	4620      	mov	r0, r4
   b8cf4:	f7ff fd27 	bl	b8746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8cf8:	8921      	ldrh	r1, [r4, #8]
   b8cfa:	3901      	subs	r1, #1
   b8cfc:	4620      	mov	r0, r4
   b8cfe:	b2c9      	uxtb	r1, r1
   b8d00:	f7ff fcb2 	bl	b8668 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8d04:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8d08:	1dde      	adds	r6, r3, #7
   b8d0a:	bf48      	it	mi
   b8d0c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8d10:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8d14:	8923      	ldrh	r3, [r4, #8]
   b8d16:	10f6      	asrs	r6, r6, #3
   b8d18:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8d1c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8d20:	2800      	cmp	r0, #0
   b8d22:	d03a      	beq.n	b8d9a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8d24:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8d28:	f004 f8b8 	bl	bce9c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8d2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8d2e:	6803      	ldr	r3, [r0, #0]
   b8d30:	2140      	movs	r1, #64	; 0x40
   b8d32:	689b      	ldr	r3, [r3, #8]
   b8d34:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8d36:	2701      	movs	r7, #1
    while(count--) {
   b8d38:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8d3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8d3c:	d024      	beq.n	b8d88 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b8d3e:	2f1f      	cmp	r7, #31
   b8d40:	d90c      	bls.n	b8d5c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b8d42:	f004 f8b2 	bl	bceaa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8d46:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8d4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8d4c:	f004 f8a6 	bl	bce9c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8d50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8d52:	6803      	ldr	r3, [r0, #0]
   b8d54:	2140      	movs	r1, #64	; 0x40
   b8d56:	689b      	ldr	r3, [r3, #8]
   b8d58:	4798      	blx	r3
        bytesOut = 1;
   b8d5a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8d5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8d5e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8d62:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8d64:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8d66:	689b      	ldr	r3, [r3, #8]
   b8d68:	4798      	blx	r3
      bytesOut++;
   b8d6a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8d6c:	e7e4      	b.n	b8d38 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8d6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8d70:	b118      	cbz	r0, b8d7a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b8d72:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8d76:	f000 fcc7 	bl	b9708 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8d7a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8d7e:	2100      	movs	r1, #0
   b8d80:	b280      	uxth	r0, r0
   b8d82:	f004 f9a2 	bl	bd0ca <digitalWrite>
   b8d86:	e7b2      	b.n	b8cee <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8d88:	f004 f88f 	bl	bceaa <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8d8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8d8e:	b378      	cbz	r0, b8df0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8d90:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8d92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8d96:	f004 b873 	b.w	bce80 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8d9a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8d9e:	2101      	movs	r1, #1
   b8da0:	b280      	uxth	r0, r0
   b8da2:	f004 f992 	bl	bd0ca <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b8da6:	42ae      	cmp	r6, r5
   b8da8:	d0f0      	beq.n	b8d8c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8daa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8dac:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8db0:	b118      	cbz	r0, b8dba <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b8db2:	4649      	mov	r1, r9
   b8db4:	f000 fd16 	bl	b97e4 <_ZN8SPIClass8transferEh>
   b8db8:	e7f5      	b.n	b8da6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8dba:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8dbc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8dc0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8dc4:	ea09 0108 	and.w	r1, r9, r8
   b8dc8:	b280      	uxth	r0, r0
   b8dca:	f004 f97e 	bl	bd0ca <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8dce:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8dd2:	2101      	movs	r1, #1
   b8dd4:	b280      	uxth	r0, r0
   b8dd6:	f004 f978 	bl	bd0ca <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8dda:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8dde:	2100      	movs	r1, #0
   b8de0:	b280      	uxth	r0, r0
   b8de2:	f004 f972 	bl	bd0ca <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8de6:	3f01      	subs	r7, #1
   b8de8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8dec:	d1e8      	bne.n	b8dc0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8dee:	e7da      	b.n	b8da6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8df0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8df4:	2101      	movs	r1, #1
   b8df6:	b280      	uxth	r0, r0
   b8df8:	f004 f967 	bl	bd0ca <digitalWrite>
   b8dfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8dfe:	b118      	cbz	r0, b8e08 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8e00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8e04:	f000 bc66 	b.w	b96d4 <_ZN8SPIClass14endTransactionEv>
}
   b8e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8e0c:	000c13e8 	.word	0x000c13e8

000b8e10 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8e10:	b508      	push	{r3, lr}
   b8e12:	4b02      	ldr	r3, [pc, #8]	; (b8e1c <netdb_freeaddrinfo+0xc>)
   b8e14:	681b      	ldr	r3, [r3, #0]
   b8e16:	689b      	ldr	r3, [r3, #8]
   b8e18:	9301      	str	r3, [sp, #4]
   b8e1a:	bd08      	pop	{r3, pc}
   b8e1c:	00030268 	.word	0x00030268

000b8e20 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8e20:	b508      	push	{r3, lr}
   b8e22:	4b02      	ldr	r3, [pc, #8]	; (b8e2c <netdb_getaddrinfo+0xc>)
   b8e24:	681b      	ldr	r3, [r3, #0]
   b8e26:	68db      	ldr	r3, [r3, #12]
   b8e28:	9301      	str	r3, [sp, #4]
   b8e2a:	bd08      	pop	{r3, pc}
   b8e2c:	00030268 	.word	0x00030268

000b8e30 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8e30:	b508      	push	{r3, lr}
   b8e32:	4b02      	ldr	r3, [pc, #8]	; (b8e3c <HAL_Pin_Mode+0xc>)
   b8e34:	681b      	ldr	r3, [r3, #0]
   b8e36:	689b      	ldr	r3, [r3, #8]
   b8e38:	9301      	str	r3, [sp, #4]
   b8e3a:	bd08      	pop	{r3, pc}
   b8e3c:	0003022c 	.word	0x0003022c

000b8e40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8e40:	b508      	push	{r3, lr}
   b8e42:	4b02      	ldr	r3, [pc, #8]	; (b8e4c <HAL_Get_Pin_Mode+0xc>)
   b8e44:	681b      	ldr	r3, [r3, #0]
   b8e46:	68db      	ldr	r3, [r3, #12]
   b8e48:	9301      	str	r3, [sp, #4]
   b8e4a:	bd08      	pop	{r3, pc}
   b8e4c:	0003022c 	.word	0x0003022c

000b8e50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8e50:	b508      	push	{r3, lr}
   b8e52:	4b02      	ldr	r3, [pc, #8]	; (b8e5c <HAL_GPIO_Write+0xc>)
   b8e54:	681b      	ldr	r3, [r3, #0]
   b8e56:	691b      	ldr	r3, [r3, #16]
   b8e58:	9301      	str	r3, [sp, #4]
   b8e5a:	bd08      	pop	{r3, pc}
   b8e5c:	0003022c 	.word	0x0003022c

000b8e60 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8e60:	b508      	push	{r3, lr}
   b8e62:	4b02      	ldr	r3, [pc, #8]	; (b8e6c <HAL_GPIO_Read+0xc>)
   b8e64:	681b      	ldr	r3, [r3, #0]
   b8e66:	695b      	ldr	r3, [r3, #20]
   b8e68:	9301      	str	r3, [sp, #4]
   b8e6a:	bd08      	pop	{r3, pc}
   b8e6c:	0003022c 	.word	0x0003022c

000b8e70 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8e70:	b508      	push	{r3, lr}
   b8e72:	4b02      	ldr	r3, [pc, #8]	; (b8e7c <HAL_Interrupts_Attach+0xc>)
   b8e74:	681b      	ldr	r3, [r3, #0]
   b8e76:	699b      	ldr	r3, [r3, #24]
   b8e78:	9301      	str	r3, [sp, #4]
   b8e7a:	bd08      	pop	{r3, pc}
   b8e7c:	0003022c 	.word	0x0003022c

000b8e80 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8e80:	b508      	push	{r3, lr}
   b8e82:	4b02      	ldr	r3, [pc, #8]	; (b8e8c <HAL_Interrupts_Detach+0xc>)
   b8e84:	681b      	ldr	r3, [r3, #0]
   b8e86:	69db      	ldr	r3, [r3, #28]
   b8e88:	9301      	str	r3, [sp, #4]
   b8e8a:	bd08      	pop	{r3, pc}
   b8e8c:	0003022c 	.word	0x0003022c

000b8e90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8e90:	b508      	push	{r3, lr}
   b8e92:	4b02      	ldr	r3, [pc, #8]	; (b8e9c <HAL_RNG_GetRandomNumber+0xc>)
   b8e94:	681b      	ldr	r3, [r3, #0]
   b8e96:	685b      	ldr	r3, [r3, #4]
   b8e98:	9301      	str	r3, [sp, #4]
   b8e9a:	bd08      	pop	{r3, pc}
   b8e9c:	00030218 	.word	0x00030218

000b8ea0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8ea0:	b508      	push	{r3, lr}
   b8ea2:	4b02      	ldr	r3, [pc, #8]	; (b8eac <HAL_Delay_Microseconds+0xc>)
   b8ea4:	681b      	ldr	r3, [r3, #0]
   b8ea6:	68db      	ldr	r3, [r3, #12]
   b8ea8:	9301      	str	r3, [sp, #4]
   b8eaa:	bd08      	pop	{r3, pc}
   b8eac:	00030218 	.word	0x00030218

000b8eb0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b8eb0:	b508      	push	{r3, lr}
   b8eb2:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <HAL_Timer_Get_Micro_Seconds+0xc>)
   b8eb4:	681b      	ldr	r3, [r3, #0]
   b8eb6:	691b      	ldr	r3, [r3, #16]
   b8eb8:	9301      	str	r3, [sp, #4]
   b8eba:	bd08      	pop	{r3, pc}
   b8ebc:	00030218 	.word	0x00030218

000b8ec0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8ec0:	b508      	push	{r3, lr}
   b8ec2:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8ec4:	681b      	ldr	r3, [r3, #0]
   b8ec6:	695b      	ldr	r3, [r3, #20]
   b8ec8:	9301      	str	r3, [sp, #4]
   b8eca:	bd08      	pop	{r3, pc}
   b8ecc:	00030218 	.word	0x00030218

000b8ed0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8ed0:	b508      	push	{r3, lr}
   b8ed2:	4b02      	ldr	r3, [pc, #8]	; (b8edc <hal_rtc_time_is_valid+0xc>)
   b8ed4:	681b      	ldr	r3, [r3, #0]
   b8ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8ed8:	9301      	str	r3, [sp, #4]
   b8eda:	bd08      	pop	{r3, pc}
   b8edc:	00030218 	.word	0x00030218

000b8ee0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8ee0:	b508      	push	{r3, lr}
   b8ee2:	4b02      	ldr	r3, [pc, #8]	; (b8eec <hal_rtc_get_time+0xc>)
   b8ee4:	681b      	ldr	r3, [r3, #0]
   b8ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8ee8:	9301      	str	r3, [sp, #4]
   b8eea:	bd08      	pop	{r3, pc}
   b8eec:	00030218 	.word	0x00030218

000b8ef0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b8ef0:	b508      	push	{r3, lr}
   b8ef2:	4b02      	ldr	r3, [pc, #8]	; (b8efc <hal_ble_stack_init+0xc>)
   b8ef4:	681b      	ldr	r3, [r3, #0]
   b8ef6:	689b      	ldr	r3, [r3, #8]
   b8ef8:	9301      	str	r3, [sp, #4]
   b8efa:	bd08      	pop	{r3, pc}
   b8efc:	00030278 	.word	0x00030278

000b8f00 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b8f00:	b508      	push	{r3, lr}
   b8f02:	4b02      	ldr	r3, [pc, #8]	; (b8f0c <hal_ble_gap_set_tx_power+0xc>)
   b8f04:	681b      	ldr	r3, [r3, #0]
   b8f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8f08:	9301      	str	r3, [sp, #4]
   b8f0a:	bd08      	pop	{r3, pc}
   b8f0c:	00030278 	.word	0x00030278

000b8f10 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b8f10:	b508      	push	{r3, lr}
   b8f12:	4b02      	ldr	r3, [pc, #8]	; (b8f1c <hal_ble_gap_set_scan_parameters+0xc>)
   b8f14:	681b      	ldr	r3, [r3, #0]
   b8f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b8f18:	9301      	str	r3, [sp, #4]
   b8f1a:	bd08      	pop	{r3, pc}
   b8f1c:	00030278 	.word	0x00030278

000b8f20 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b8f20:	b508      	push	{r3, lr}
   b8f22:	4b02      	ldr	r3, [pc, #8]	; (b8f2c <hal_ble_gap_get_scan_parameters+0xc>)
   b8f24:	681b      	ldr	r3, [r3, #0]
   b8f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8f28:	9301      	str	r3, [sp, #4]
   b8f2a:	bd08      	pop	{r3, pc}
   b8f2c:	00030278 	.word	0x00030278

000b8f30 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b8f30:	b508      	push	{r3, lr}
   b8f32:	4b02      	ldr	r3, [pc, #8]	; (b8f3c <hal_ble_gap_start_scan+0xc>)
   b8f34:	681b      	ldr	r3, [r3, #0]
   b8f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8f38:	9301      	str	r3, [sp, #4]
   b8f3a:	bd08      	pop	{r3, pc}
   b8f3c:	00030278 	.word	0x00030278

000b8f40 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b8f40:	b508      	push	{r3, lr}
   b8f42:	4b03      	ldr	r3, [pc, #12]	; (b8f50 <hal_ble_gap_stop_scan+0x10>)
   b8f44:	681b      	ldr	r3, [r3, #0]
   b8f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b8f4a:	9301      	str	r3, [sp, #4]
   b8f4c:	bd08      	pop	{r3, pc}
   b8f4e:	0000      	.short	0x0000
   b8f50:	00030278 	.word	0x00030278

000b8f54 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8f54:	b508      	push	{r3, lr}
   b8f56:	4b03      	ldr	r3, [pc, #12]	; (b8f64 <hal_ble_gap_disconnect+0x10>)
   b8f58:	681b      	ldr	r3, [r3, #0]
   b8f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8f5e:	9301      	str	r3, [sp, #4]
   b8f60:	bd08      	pop	{r3, pc}
   b8f62:	0000      	.short	0x0000
   b8f64:	00030278 	.word	0x00030278

000b8f68 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8f68:	b508      	push	{r3, lr}
   b8f6a:	4b03      	ldr	r3, [pc, #12]	; (b8f78 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8f6c:	681b      	ldr	r3, [r3, #0]
   b8f6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b8f72:	9301      	str	r3, [sp, #4]
   b8f74:	bd08      	pop	{r3, pc}
   b8f76:	0000      	.short	0x0000
   b8f78:	00030278 	.word	0x00030278

000b8f7c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b8f7c:	b508      	push	{r3, lr}
   b8f7e:	4b03      	ldr	r3, [pc, #12]	; (b8f8c <hal_ble_gatt_client_discover_all_services+0x10>)
   b8f80:	681b      	ldr	r3, [r3, #0]
   b8f82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b8f86:	9301      	str	r3, [sp, #4]
   b8f88:	bd08      	pop	{r3, pc}
   b8f8a:	0000      	.short	0x0000
   b8f8c:	00030278 	.word	0x00030278

000b8f90 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b8f90:	b508      	push	{r3, lr}
   b8f92:	4b03      	ldr	r3, [pc, #12]	; (b8fa0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b8f94:	681b      	ldr	r3, [r3, #0]
   b8f96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b8f9a:	9301      	str	r3, [sp, #4]
   b8f9c:	bd08      	pop	{r3, pc}
   b8f9e:	0000      	.short	0x0000
   b8fa0:	00030278 	.word	0x00030278

000b8fa4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8fa4:	b508      	push	{r3, lr}
   b8fa6:	4b03      	ldr	r3, [pc, #12]	; (b8fb4 <hal_ble_gatt_client_write_with_response+0x10>)
   b8fa8:	681b      	ldr	r3, [r3, #0]
   b8faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b8fae:	9301      	str	r3, [sp, #4]
   b8fb0:	bd08      	pop	{r3, pc}
   b8fb2:	0000      	.short	0x0000
   b8fb4:	00030278 	.word	0x00030278

000b8fb8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8fb8:	b508      	push	{r3, lr}
   b8fba:	4b03      	ldr	r3, [pc, #12]	; (b8fc8 <hal_ble_gatt_client_write_without_response+0x10>)
   b8fbc:	681b      	ldr	r3, [r3, #0]
   b8fbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b8fc2:	9301      	str	r3, [sp, #4]
   b8fc4:	bd08      	pop	{r3, pc}
   b8fc6:	0000      	.short	0x0000
   b8fc8:	00030278 	.word	0x00030278

000b8fcc <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b8fcc:	b508      	push	{r3, lr}
   b8fce:	4b03      	ldr	r3, [pc, #12]	; (b8fdc <hal_ble_gatt_client_read+0x10>)
   b8fd0:	681b      	ldr	r3, [r3, #0]
   b8fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b8fd6:	9301      	str	r3, [sp, #4]
   b8fd8:	bd08      	pop	{r3, pc}
   b8fda:	0000      	.short	0x0000
   b8fdc:	00030278 	.word	0x00030278

000b8fe0 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b8fe0:	b508      	push	{r3, lr}
   b8fe2:	4b03      	ldr	r3, [pc, #12]	; (b8ff0 <hal_ble_gap_connect+0x10>)
   b8fe4:	681b      	ldr	r3, [r3, #0]
   b8fe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b8fea:	9301      	str	r3, [sp, #4]
   b8fec:	bd08      	pop	{r3, pc}
   b8fee:	0000      	.short	0x0000
   b8ff0:	00030278 	.word	0x00030278

000b8ff4 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b8ff4:	b508      	push	{r3, lr}
   b8ff6:	4b03      	ldr	r3, [pc, #12]	; (b9004 <hal_ble_gap_get_connection_info+0x10>)
   b8ff8:	681b      	ldr	r3, [r3, #0]
   b8ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b8ffe:	9301      	str	r3, [sp, #4]
   b9000:	bd08      	pop	{r3, pc}
   b9002:	0000      	.short	0x0000
   b9004:	00030278 	.word	0x00030278

000b9008 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9008:	b508      	push	{r3, lr}
   b900a:	4b03      	ldr	r3, [pc, #12]	; (b9018 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b900c:	681b      	ldr	r3, [r3, #0]
   b900e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b9012:	9301      	str	r3, [sp, #4]
   b9014:	bd08      	pop	{r3, pc}
   b9016:	0000      	.short	0x0000
   b9018:	00030278 	.word	0x00030278

000b901c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b901c:	b508      	push	{r3, lr}
   b901e:	4b03      	ldr	r3, [pc, #12]	; (b902c <hal_ble_gatt_client_configure_cccd+0x10>)
   b9020:	681b      	ldr	r3, [r3, #0]
   b9022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b9026:	9301      	str	r3, [sp, #4]
   b9028:	bd08      	pop	{r3, pc}
   b902a:	0000      	.short	0x0000
   b902c:	00030278 	.word	0x00030278

000b9030 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9030:	b508      	push	{r3, lr}
   b9032:	4b03      	ldr	r3, [pc, #12]	; (b9040 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b9034:	681b      	ldr	r3, [r3, #0]
   b9036:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b903a:	9301      	str	r3, [sp, #4]
   b903c:	bd08      	pop	{r3, pc}
   b903e:	0000      	.short	0x0000
   b9040:	00030278 	.word	0x00030278

000b9044 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9044:	b508      	push	{r3, lr}
   b9046:	4b03      	ldr	r3, [pc, #12]	; (b9054 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9048:	681b      	ldr	r3, [r3, #0]
   b904a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b904e:	9301      	str	r3, [sp, #4]
   b9050:	bd08      	pop	{r3, pc}
   b9052:	0000      	.short	0x0000
   b9054:	00030278 	.word	0x00030278

000b9058 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9058:	b508      	push	{r3, lr}
   b905a:	4b02      	ldr	r3, [pc, #8]	; (b9064 <os_thread_yield+0xc>)
   b905c:	681b      	ldr	r3, [r3, #0]
   b905e:	68db      	ldr	r3, [r3, #12]
   b9060:	9301      	str	r3, [sp, #4]
   b9062:	bd08      	pop	{r3, pc}
   b9064:	00030248 	.word	0x00030248

000b9068 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9068:	b508      	push	{r3, lr}
   b906a:	4b02      	ldr	r3, [pc, #8]	; (b9074 <os_thread_scheduling+0xc>)
   b906c:	681b      	ldr	r3, [r3, #0]
   b906e:	69db      	ldr	r3, [r3, #28]
   b9070:	9301      	str	r3, [sp, #4]
   b9072:	bd08      	pop	{r3, pc}
   b9074:	00030248 	.word	0x00030248

000b9078 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b9078:	b508      	push	{r3, lr}
   b907a:	4b02      	ldr	r3, [pc, #8]	; (b9084 <os_timer_create+0xc>)
   b907c:	681b      	ldr	r3, [r3, #0]
   b907e:	6a1b      	ldr	r3, [r3, #32]
   b9080:	9301      	str	r3, [sp, #4]
   b9082:	bd08      	pop	{r3, pc}
   b9084:	00030248 	.word	0x00030248

000b9088 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b9088:	b508      	push	{r3, lr}
   b908a:	4b02      	ldr	r3, [pc, #8]	; (b9094 <os_timer_destroy+0xc>)
   b908c:	681b      	ldr	r3, [r3, #0]
   b908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9090:	9301      	str	r3, [sp, #4]
   b9092:	bd08      	pop	{r3, pc}
   b9094:	00030248 	.word	0x00030248

000b9098 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b9098:	b508      	push	{r3, lr}
   b909a:	4b02      	ldr	r3, [pc, #8]	; (b90a4 <os_timer_get_id+0xc>)
   b909c:	681b      	ldr	r3, [r3, #0]
   b909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b90a0:	9301      	str	r3, [sp, #4]
   b90a2:	bd08      	pop	{r3, pc}
   b90a4:	00030248 	.word	0x00030248

000b90a8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b90a8:	b508      	push	{r3, lr}
   b90aa:	4b02      	ldr	r3, [pc, #8]	; (b90b4 <os_timer_change+0xc>)
   b90ac:	681b      	ldr	r3, [r3, #0]
   b90ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b90b0:	9301      	str	r3, [sp, #4]
   b90b2:	bd08      	pop	{r3, pc}
   b90b4:	00030248 	.word	0x00030248

000b90b8 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b90b8:	b508      	push	{r3, lr}
   b90ba:	4b02      	ldr	r3, [pc, #8]	; (b90c4 <os_mutex_create+0xc>)
   b90bc:	681b      	ldr	r3, [r3, #0]
   b90be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b90c0:	9301      	str	r3, [sp, #4]
   b90c2:	bd08      	pop	{r3, pc}
   b90c4:	00030248 	.word	0x00030248

000b90c8 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b90c8:	b508      	push	{r3, lr}
   b90ca:	4b02      	ldr	r3, [pc, #8]	; (b90d4 <os_mutex_destroy+0xc>)
   b90cc:	681b      	ldr	r3, [r3, #0]
   b90ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b90d0:	9301      	str	r3, [sp, #4]
   b90d2:	bd08      	pop	{r3, pc}
   b90d4:	00030248 	.word	0x00030248

000b90d8 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b90d8:	b508      	push	{r3, lr}
   b90da:	4b02      	ldr	r3, [pc, #8]	; (b90e4 <os_mutex_recursive_create+0xc>)
   b90dc:	681b      	ldr	r3, [r3, #0]
   b90de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b90e0:	9301      	str	r3, [sp, #4]
   b90e2:	bd08      	pop	{r3, pc}
   b90e4:	00030248 	.word	0x00030248

000b90e8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b90e8:	b508      	push	{r3, lr}
   b90ea:	4b02      	ldr	r3, [pc, #8]	; (b90f4 <os_mutex_recursive_lock+0xc>)
   b90ec:	681b      	ldr	r3, [r3, #0]
   b90ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b90f0:	9301      	str	r3, [sp, #4]
   b90f2:	bd08      	pop	{r3, pc}
   b90f4:	00030248 	.word	0x00030248

000b90f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b90f8:	b508      	push	{r3, lr}
   b90fa:	4b02      	ldr	r3, [pc, #8]	; (b9104 <os_mutex_recursive_unlock+0xc>)
   b90fc:	681b      	ldr	r3, [r3, #0]
   b90fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9100:	9301      	str	r3, [sp, #4]
   b9102:	bd08      	pop	{r3, pc}
   b9104:	00030248 	.word	0x00030248

000b9108 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9108:	b508      	push	{r3, lr}
   b910a:	4b02      	ldr	r3, [pc, #8]	; (b9114 <os_timer_set_id+0xc>)
   b910c:	681b      	ldr	r3, [r3, #0]
   b910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9110:	9301      	str	r3, [sp, #4]
   b9112:	bd08      	pop	{r3, pc}
   b9114:	00030248 	.word	0x00030248

000b9118 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9118:	b508      	push	{r3, lr}
   b911a:	4b02      	ldr	r3, [pc, #8]	; (b9124 <inet_inet_ntop+0xc>)
   b911c:	681b      	ldr	r3, [r3, #0]
   b911e:	695b      	ldr	r3, [r3, #20]
   b9120:	9301      	str	r3, [sp, #4]
   b9122:	bd08      	pop	{r3, pc}
   b9124:	00030264 	.word	0x00030264

000b9128 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9128:	b508      	push	{r3, lr}
   b912a:	4b02      	ldr	r3, [pc, #8]	; (b9134 <hal_usart_write+0xc>)
   b912c:	681b      	ldr	r3, [r3, #0]
   b912e:	68db      	ldr	r3, [r3, #12]
   b9130:	9301      	str	r3, [sp, #4]
   b9132:	bd08      	pop	{r3, pc}
   b9134:	0003023c 	.word	0x0003023c

000b9138 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9138:	b508      	push	{r3, lr}
   b913a:	4b02      	ldr	r3, [pc, #8]	; (b9144 <hal_usart_available+0xc>)
   b913c:	681b      	ldr	r3, [r3, #0]
   b913e:	691b      	ldr	r3, [r3, #16]
   b9140:	9301      	str	r3, [sp, #4]
   b9142:	bd08      	pop	{r3, pc}
   b9144:	0003023c 	.word	0x0003023c

000b9148 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9148:	b508      	push	{r3, lr}
   b914a:	4b02      	ldr	r3, [pc, #8]	; (b9154 <hal_usart_read+0xc>)
   b914c:	681b      	ldr	r3, [r3, #0]
   b914e:	695b      	ldr	r3, [r3, #20]
   b9150:	9301      	str	r3, [sp, #4]
   b9152:	bd08      	pop	{r3, pc}
   b9154:	0003023c 	.word	0x0003023c

000b9158 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9158:	b508      	push	{r3, lr}
   b915a:	4b02      	ldr	r3, [pc, #8]	; (b9164 <hal_usart_peek+0xc>)
   b915c:	681b      	ldr	r3, [r3, #0]
   b915e:	699b      	ldr	r3, [r3, #24]
   b9160:	9301      	str	r3, [sp, #4]
   b9162:	bd08      	pop	{r3, pc}
   b9164:	0003023c 	.word	0x0003023c

000b9168 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9168:	b508      	push	{r3, lr}
   b916a:	4b02      	ldr	r3, [pc, #8]	; (b9174 <hal_usart_flush+0xc>)
   b916c:	681b      	ldr	r3, [r3, #0]
   b916e:	69db      	ldr	r3, [r3, #28]
   b9170:	9301      	str	r3, [sp, #4]
   b9172:	bd08      	pop	{r3, pc}
   b9174:	0003023c 	.word	0x0003023c

000b9178 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9178:	b508      	push	{r3, lr}
   b917a:	4b02      	ldr	r3, [pc, #8]	; (b9184 <hal_usart_is_enabled+0xc>)
   b917c:	681b      	ldr	r3, [r3, #0]
   b917e:	6a1b      	ldr	r3, [r3, #32]
   b9180:	9301      	str	r3, [sp, #4]
   b9182:	bd08      	pop	{r3, pc}
   b9184:	0003023c 	.word	0x0003023c

000b9188 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9188:	b508      	push	{r3, lr}
   b918a:	4b02      	ldr	r3, [pc, #8]	; (b9194 <hal_usart_available_data_for_write+0xc>)
   b918c:	681b      	ldr	r3, [r3, #0]
   b918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9190:	9301      	str	r3, [sp, #4]
   b9192:	bd08      	pop	{r3, pc}
   b9194:	0003023c 	.word	0x0003023c

000b9198 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9198:	b508      	push	{r3, lr}
   b919a:	4b02      	ldr	r3, [pc, #8]	; (b91a4 <hal_usart_begin_config+0xc>)
   b919c:	681b      	ldr	r3, [r3, #0]
   b919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b91a0:	9301      	str	r3, [sp, #4]
   b91a2:	bd08      	pop	{r3, pc}
   b91a4:	0003023c 	.word	0x0003023c

000b91a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b91a8:	b508      	push	{r3, lr}
   b91aa:	4b02      	ldr	r3, [pc, #8]	; (b91b4 <hal_usart_init_ex+0xc>)
   b91ac:	681b      	ldr	r3, [r3, #0]
   b91ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b91b0:	9301      	str	r3, [sp, #4]
   b91b2:	bd08      	pop	{r3, pc}
   b91b4:	0003023c 	.word	0x0003023c

000b91b8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b91b8:	b508      	push	{r3, lr}
   b91ba:	4b02      	ldr	r3, [pc, #8]	; (b91c4 <hal_i2c_set_speed+0xc>)
   b91bc:	681b      	ldr	r3, [r3, #0]
   b91be:	681b      	ldr	r3, [r3, #0]
   b91c0:	9301      	str	r3, [sp, #4]
   b91c2:	bd08      	pop	{r3, pc}
   b91c4:	00030228 	.word	0x00030228

000b91c8 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b91c8:	b508      	push	{r3, lr}
   b91ca:	4b02      	ldr	r3, [pc, #8]	; (b91d4 <hal_i2c_begin+0xc>)
   b91cc:	681b      	ldr	r3, [r3, #0]
   b91ce:	68db      	ldr	r3, [r3, #12]
   b91d0:	9301      	str	r3, [sp, #4]
   b91d2:	bd08      	pop	{r3, pc}
   b91d4:	00030228 	.word	0x00030228

000b91d8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b91d8:	b508      	push	{r3, lr}
   b91da:	4b02      	ldr	r3, [pc, #8]	; (b91e4 <hal_i2c_begin_transmission+0xc>)
   b91dc:	681b      	ldr	r3, [r3, #0]
   b91de:	699b      	ldr	r3, [r3, #24]
   b91e0:	9301      	str	r3, [sp, #4]
   b91e2:	bd08      	pop	{r3, pc}
   b91e4:	00030228 	.word	0x00030228

000b91e8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b91e8:	b508      	push	{r3, lr}
   b91ea:	4b02      	ldr	r3, [pc, #8]	; (b91f4 <hal_i2c_end_transmission+0xc>)
   b91ec:	681b      	ldr	r3, [r3, #0]
   b91ee:	69db      	ldr	r3, [r3, #28]
   b91f0:	9301      	str	r3, [sp, #4]
   b91f2:	bd08      	pop	{r3, pc}
   b91f4:	00030228 	.word	0x00030228

000b91f8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b91f8:	b508      	push	{r3, lr}
   b91fa:	4b02      	ldr	r3, [pc, #8]	; (b9204 <hal_i2c_write+0xc>)
   b91fc:	681b      	ldr	r3, [r3, #0]
   b91fe:	6a1b      	ldr	r3, [r3, #32]
   b9200:	9301      	str	r3, [sp, #4]
   b9202:	bd08      	pop	{r3, pc}
   b9204:	00030228 	.word	0x00030228

000b9208 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9208:	b508      	push	{r3, lr}
   b920a:	4b02      	ldr	r3, [pc, #8]	; (b9214 <hal_i2c_available+0xc>)
   b920c:	681b      	ldr	r3, [r3, #0]
   b920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9210:	9301      	str	r3, [sp, #4]
   b9212:	bd08      	pop	{r3, pc}
   b9214:	00030228 	.word	0x00030228

000b9218 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9218:	b508      	push	{r3, lr}
   b921a:	4b02      	ldr	r3, [pc, #8]	; (b9224 <hal_i2c_read+0xc>)
   b921c:	681b      	ldr	r3, [r3, #0]
   b921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9220:	9301      	str	r3, [sp, #4]
   b9222:	bd08      	pop	{r3, pc}
   b9224:	00030228 	.word	0x00030228

000b9228 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9228:	b508      	push	{r3, lr}
   b922a:	4b02      	ldr	r3, [pc, #8]	; (b9234 <hal_i2c_peek+0xc>)
   b922c:	681b      	ldr	r3, [r3, #0]
   b922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9230:	9301      	str	r3, [sp, #4]
   b9232:	bd08      	pop	{r3, pc}
   b9234:	00030228 	.word	0x00030228

000b9238 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9238:	b508      	push	{r3, lr}
   b923a:	4b02      	ldr	r3, [pc, #8]	; (b9244 <hal_i2c_flush+0xc>)
   b923c:	681b      	ldr	r3, [r3, #0]
   b923e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9240:	9301      	str	r3, [sp, #4]
   b9242:	bd08      	pop	{r3, pc}
   b9244:	00030228 	.word	0x00030228

000b9248 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9248:	b508      	push	{r3, lr}
   b924a:	4b02      	ldr	r3, [pc, #8]	; (b9254 <hal_i2c_is_enabled+0xc>)
   b924c:	681b      	ldr	r3, [r3, #0]
   b924e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9250:	9301      	str	r3, [sp, #4]
   b9252:	bd08      	pop	{r3, pc}
   b9254:	00030228 	.word	0x00030228

000b9258 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9258:	b508      	push	{r3, lr}
   b925a:	4b02      	ldr	r3, [pc, #8]	; (b9264 <hal_i2c_init+0xc>)
   b925c:	681b      	ldr	r3, [r3, #0]
   b925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9260:	9301      	str	r3, [sp, #4]
   b9262:	bd08      	pop	{r3, pc}
   b9264:	00030228 	.word	0x00030228

000b9268 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9268:	b508      	push	{r3, lr}
   b926a:	4b02      	ldr	r3, [pc, #8]	; (b9274 <hal_spi_begin+0xc>)
   b926c:	681b      	ldr	r3, [r3, #0]
   b926e:	681b      	ldr	r3, [r3, #0]
   b9270:	9301      	str	r3, [sp, #4]
   b9272:	bd08      	pop	{r3, pc}
   b9274:	00030230 	.word	0x00030230

000b9278 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9278:	b508      	push	{r3, lr}
   b927a:	4b02      	ldr	r3, [pc, #8]	; (b9284 <hal_spi_transfer+0xc>)
   b927c:	681b      	ldr	r3, [r3, #0]
   b927e:	695b      	ldr	r3, [r3, #20]
   b9280:	9301      	str	r3, [sp, #4]
   b9282:	bd08      	pop	{r3, pc}
   b9284:	00030230 	.word	0x00030230

000b9288 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9288:	b508      	push	{r3, lr}
   b928a:	4b02      	ldr	r3, [pc, #8]	; (b9294 <hal_spi_init+0xc>)
   b928c:	681b      	ldr	r3, [r3, #0]
   b928e:	69db      	ldr	r3, [r3, #28]
   b9290:	9301      	str	r3, [sp, #4]
   b9292:	bd08      	pop	{r3, pc}
   b9294:	00030230 	.word	0x00030230

000b9298 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9298:	b508      	push	{r3, lr}
   b929a:	4b02      	ldr	r3, [pc, #8]	; (b92a4 <hal_spi_is_enabled+0xc>)
   b929c:	681b      	ldr	r3, [r3, #0]
   b929e:	6a1b      	ldr	r3, [r3, #32]
   b92a0:	9301      	str	r3, [sp, #4]
   b92a2:	bd08      	pop	{r3, pc}
   b92a4:	00030230 	.word	0x00030230

000b92a8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b92a8:	b508      	push	{r3, lr}
   b92aa:	4b02      	ldr	r3, [pc, #8]	; (b92b4 <hal_spi_info+0xc>)
   b92ac:	681b      	ldr	r3, [r3, #0]
   b92ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b92b0:	9301      	str	r3, [sp, #4]
   b92b2:	bd08      	pop	{r3, pc}
   b92b4:	00030230 	.word	0x00030230

000b92b8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b92b8:	b508      	push	{r3, lr}
   b92ba:	4b02      	ldr	r3, [pc, #8]	; (b92c4 <hal_spi_transfer_dma+0xc>)
   b92bc:	681b      	ldr	r3, [r3, #0]
   b92be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b92c0:	9301      	str	r3, [sp, #4]
   b92c2:	bd08      	pop	{r3, pc}
   b92c4:	00030230 	.word	0x00030230

000b92c8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b92c8:	b508      	push	{r3, lr}
   b92ca:	4b02      	ldr	r3, [pc, #8]	; (b92d4 <hal_spi_transfer_dma_status+0xc>)
   b92cc:	681b      	ldr	r3, [r3, #0]
   b92ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b92d0:	9301      	str	r3, [sp, #4]
   b92d2:	bd08      	pop	{r3, pc}
   b92d4:	00030230 	.word	0x00030230

000b92d8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b92d8:	b508      	push	{r3, lr}
   b92da:	4b02      	ldr	r3, [pc, #8]	; (b92e4 <hal_spi_set_settings+0xc>)
   b92dc:	681b      	ldr	r3, [r3, #0]
   b92de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b92e0:	9301      	str	r3, [sp, #4]
   b92e2:	bd08      	pop	{r3, pc}
   b92e4:	00030230 	.word	0x00030230

000b92e8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b92e8:	b508      	push	{r3, lr}
   b92ea:	4b02      	ldr	r3, [pc, #8]	; (b92f4 <hal_spi_acquire+0xc>)
   b92ec:	681b      	ldr	r3, [r3, #0]
   b92ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b92f0:	9301      	str	r3, [sp, #4]
   b92f2:	bd08      	pop	{r3, pc}
   b92f4:	00030230 	.word	0x00030230

000b92f8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b92f8:	b508      	push	{r3, lr}
   b92fa:	4b02      	ldr	r3, [pc, #8]	; (b9304 <hal_spi_release+0xc>)
   b92fc:	681b      	ldr	r3, [r3, #0]
   b92fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9300:	9301      	str	r3, [sp, #4]
   b9302:	bd08      	pop	{r3, pc}
   b9304:	00030230 	.word	0x00030230

000b9308 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9308:	b508      	push	{r3, lr}
   b930a:	4b02      	ldr	r3, [pc, #8]	; (b9314 <HAL_USB_USART_Init+0xc>)
   b930c:	681b      	ldr	r3, [r3, #0]
   b930e:	681b      	ldr	r3, [r3, #0]
   b9310:	9301      	str	r3, [sp, #4]
   b9312:	bd08      	pop	{r3, pc}
   b9314:	0003024c 	.word	0x0003024c

000b9318 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9318:	b508      	push	{r3, lr}
   b931a:	4b02      	ldr	r3, [pc, #8]	; (b9324 <HAL_USB_USART_Begin+0xc>)
   b931c:	681b      	ldr	r3, [r3, #0]
   b931e:	685b      	ldr	r3, [r3, #4]
   b9320:	9301      	str	r3, [sp, #4]
   b9322:	bd08      	pop	{r3, pc}
   b9324:	0003024c 	.word	0x0003024c

000b9328 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9328:	b508      	push	{r3, lr}
   b932a:	4b02      	ldr	r3, [pc, #8]	; (b9334 <HAL_USB_USART_Available_Data+0xc>)
   b932c:	681b      	ldr	r3, [r3, #0]
   b932e:	691b      	ldr	r3, [r3, #16]
   b9330:	9301      	str	r3, [sp, #4]
   b9332:	bd08      	pop	{r3, pc}
   b9334:	0003024c 	.word	0x0003024c

000b9338 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9338:	b508      	push	{r3, lr}
   b933a:	4b02      	ldr	r3, [pc, #8]	; (b9344 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b933c:	681b      	ldr	r3, [r3, #0]
   b933e:	695b      	ldr	r3, [r3, #20]
   b9340:	9301      	str	r3, [sp, #4]
   b9342:	bd08      	pop	{r3, pc}
   b9344:	0003024c 	.word	0x0003024c

000b9348 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9348:	b508      	push	{r3, lr}
   b934a:	4b02      	ldr	r3, [pc, #8]	; (b9354 <HAL_USB_USART_Receive_Data+0xc>)
   b934c:	681b      	ldr	r3, [r3, #0]
   b934e:	699b      	ldr	r3, [r3, #24]
   b9350:	9301      	str	r3, [sp, #4]
   b9352:	bd08      	pop	{r3, pc}
   b9354:	0003024c 	.word	0x0003024c

000b9358 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9358:	b508      	push	{r3, lr}
   b935a:	4b02      	ldr	r3, [pc, #8]	; (b9364 <HAL_USB_USART_Send_Data+0xc>)
   b935c:	681b      	ldr	r3, [r3, #0]
   b935e:	69db      	ldr	r3, [r3, #28]
   b9360:	9301      	str	r3, [sp, #4]
   b9362:	bd08      	pop	{r3, pc}
   b9364:	0003024c 	.word	0x0003024c

000b9368 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9368:	b508      	push	{r3, lr}
   b936a:	4b02      	ldr	r3, [pc, #8]	; (b9374 <HAL_USB_USART_Flush_Data+0xc>)
   b936c:	681b      	ldr	r3, [r3, #0]
   b936e:	6a1b      	ldr	r3, [r3, #32]
   b9370:	9301      	str	r3, [sp, #4]
   b9372:	bd08      	pop	{r3, pc}
   b9374:	0003024c 	.word	0x0003024c

000b9378 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9378:	b508      	push	{r3, lr}
   b937a:	4b02      	ldr	r3, [pc, #8]	; (b9384 <panic_+0xc>)
   b937c:	681b      	ldr	r3, [r3, #0]
   b937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9380:	9301      	str	r3, [sp, #4]
   b9382:	bd08      	pop	{r3, pc}
   b9384:	00030260 	.word	0x00030260

000b9388 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9388:	b508      	push	{r3, lr}
   b938a:	4b02      	ldr	r3, [pc, #8]	; (b9394 <log_message+0xc>)
   b938c:	681b      	ldr	r3, [r3, #0]
   b938e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9390:	9301      	str	r3, [sp, #4]
   b9392:	bd08      	pop	{r3, pc}
   b9394:	00030260 	.word	0x00030260

000b9398 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9398:	b508      	push	{r3, lr}
   b939a:	4b02      	ldr	r3, [pc, #8]	; (b93a4 <system_mode+0xc>)
   b939c:	681b      	ldr	r3, [r3, #0]
   b939e:	681b      	ldr	r3, [r3, #0]
   b93a0:	9301      	str	r3, [sp, #4]
   b93a2:	bd08      	pop	{r3, pc}
   b93a4:	00030220 	.word	0x00030220

000b93a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b93a8:	b508      	push	{r3, lr}
   b93aa:	4b02      	ldr	r3, [pc, #8]	; (b93b4 <set_system_mode+0xc>)
   b93ac:	681b      	ldr	r3, [r3, #0]
   b93ae:	685b      	ldr	r3, [r3, #4]
   b93b0:	9301      	str	r3, [sp, #4]
   b93b2:	bd08      	pop	{r3, pc}
   b93b4:	00030220 	.word	0x00030220

000b93b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b93b8:	b508      	push	{r3, lr}
   b93ba:	4b02      	ldr	r3, [pc, #8]	; (b93c4 <system_delay_ms+0xc>)
   b93bc:	681b      	ldr	r3, [r3, #0]
   b93be:	695b      	ldr	r3, [r3, #20]
   b93c0:	9301      	str	r3, [sp, #4]
   b93c2:	bd08      	pop	{r3, pc}
   b93c4:	00030220 	.word	0x00030220

000b93c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b93c8:	b508      	push	{r3, lr}
   b93ca:	4b02      	ldr	r3, [pc, #8]	; (b93d4 <application_thread_current+0xc>)
   b93cc:	681b      	ldr	r3, [r3, #0]
   b93ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b93d0:	9301      	str	r3, [sp, #4]
   b93d2:	bd08      	pop	{r3, pc}
   b93d4:	00030220 	.word	0x00030220

000b93d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b93d8:	b508      	push	{r3, lr}
   b93da:	4b02      	ldr	r3, [pc, #8]	; (b93e4 <application_thread_invoke+0xc>)
   b93dc:	681b      	ldr	r3, [r3, #0]
   b93de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b93e0:	9301      	str	r3, [sp, #4]
   b93e2:	bd08      	pop	{r3, pc}
   b93e4:	00030220 	.word	0x00030220

000b93e8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b93e8:	b508      	push	{r3, lr}
   b93ea:	4b02      	ldr	r3, [pc, #8]	; (b93f4 <system_thread_get_state+0xc>)
   b93ec:	681b      	ldr	r3, [r3, #0]
   b93ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b93f0:	9301      	str	r3, [sp, #4]
   b93f2:	bd08      	pop	{r3, pc}
   b93f4:	00030220 	.word	0x00030220

000b93f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b93f8:	b508      	push	{r3, lr}
   b93fa:	4b03      	ldr	r3, [pc, #12]	; (b9408 <system_ctrl_set_app_request_handler+0x10>)
   b93fc:	681b      	ldr	r3, [r3, #0]
   b93fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9402:	9301      	str	r3, [sp, #4]
   b9404:	bd08      	pop	{r3, pc}
   b9406:	0000      	.short	0x0000
   b9408:	00030220 	.word	0x00030220

000b940c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b940c:	b508      	push	{r3, lr}
   b940e:	4b03      	ldr	r3, [pc, #12]	; (b941c <system_ctrl_set_result+0x10>)
   b9410:	681b      	ldr	r3, [r3, #0]
   b9412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9416:	9301      	str	r3, [sp, #4]
   b9418:	bd08      	pop	{r3, pc}
   b941a:	0000      	.short	0x0000
   b941c:	00030220 	.word	0x00030220

000b9420 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9420:	b508      	push	{r3, lr}
   b9422:	4b02      	ldr	r3, [pc, #8]	; (b942c <network_connect+0xc>)
   b9424:	681b      	ldr	r3, [r3, #0]
   b9426:	685b      	ldr	r3, [r3, #4]
   b9428:	9301      	str	r3, [sp, #4]
   b942a:	bd08      	pop	{r3, pc}
   b942c:	00030240 	.word	0x00030240

000b9430 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9430:	b508      	push	{r3, lr}
   b9432:	4b02      	ldr	r3, [pc, #8]	; (b943c <network_connecting+0xc>)
   b9434:	681b      	ldr	r3, [r3, #0]
   b9436:	689b      	ldr	r3, [r3, #8]
   b9438:	9301      	str	r3, [sp, #4]
   b943a:	bd08      	pop	{r3, pc}
   b943c:	00030240 	.word	0x00030240

000b9440 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9440:	b508      	push	{r3, lr}
   b9442:	4b02      	ldr	r3, [pc, #8]	; (b944c <network_disconnect+0xc>)
   b9444:	681b      	ldr	r3, [r3, #0]
   b9446:	68db      	ldr	r3, [r3, #12]
   b9448:	9301      	str	r3, [sp, #4]
   b944a:	bd08      	pop	{r3, pc}
   b944c:	00030240 	.word	0x00030240

000b9450 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9450:	b508      	push	{r3, lr}
   b9452:	4b02      	ldr	r3, [pc, #8]	; (b945c <network_ready+0xc>)
   b9454:	681b      	ldr	r3, [r3, #0]
   b9456:	691b      	ldr	r3, [r3, #16]
   b9458:	9301      	str	r3, [sp, #4]
   b945a:	bd08      	pop	{r3, pc}
   b945c:	00030240 	.word	0x00030240

000b9460 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9460:	b508      	push	{r3, lr}
   b9462:	4b02      	ldr	r3, [pc, #8]	; (b946c <network_on+0xc>)
   b9464:	681b      	ldr	r3, [r3, #0]
   b9466:	695b      	ldr	r3, [r3, #20]
   b9468:	9301      	str	r3, [sp, #4]
   b946a:	bd08      	pop	{r3, pc}
   b946c:	00030240 	.word	0x00030240

000b9470 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9470:	b508      	push	{r3, lr}
   b9472:	4b02      	ldr	r3, [pc, #8]	; (b947c <network_off+0xc>)
   b9474:	681b      	ldr	r3, [r3, #0]
   b9476:	699b      	ldr	r3, [r3, #24]
   b9478:	9301      	str	r3, [sp, #4]
   b947a:	bd08      	pop	{r3, pc}
   b947c:	00030240 	.word	0x00030240

000b9480 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9480:	b508      	push	{r3, lr}
   b9482:	4b02      	ldr	r3, [pc, #8]	; (b948c <network_listen+0xc>)
   b9484:	681b      	ldr	r3, [r3, #0]
   b9486:	69db      	ldr	r3, [r3, #28]
   b9488:	9301      	str	r3, [sp, #4]
   b948a:	bd08      	pop	{r3, pc}
   b948c:	00030240 	.word	0x00030240

000b9490 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9490:	b508      	push	{r3, lr}
   b9492:	4b02      	ldr	r3, [pc, #8]	; (b949c <network_listening+0xc>)
   b9494:	681b      	ldr	r3, [r3, #0]
   b9496:	6a1b      	ldr	r3, [r3, #32]
   b9498:	9301      	str	r3, [sp, #4]
   b949a:	bd08      	pop	{r3, pc}
   b949c:	00030240 	.word	0x00030240

000b94a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b94a0:	b508      	push	{r3, lr}
   b94a2:	4b02      	ldr	r3, [pc, #8]	; (b94ac <network_set_listen_timeout+0xc>)
   b94a4:	681b      	ldr	r3, [r3, #0]
   b94a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b94a8:	9301      	str	r3, [sp, #4]
   b94aa:	bd08      	pop	{r3, pc}
   b94ac:	00030240 	.word	0x00030240

000b94b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b94b0:	b508      	push	{r3, lr}
   b94b2:	4b02      	ldr	r3, [pc, #8]	; (b94bc <network_get_listen_timeout+0xc>)
   b94b4:	681b      	ldr	r3, [r3, #0]
   b94b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b94b8:	9301      	str	r3, [sp, #4]
   b94ba:	bd08      	pop	{r3, pc}
   b94bc:	00030240 	.word	0x00030240

000b94c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b94c0:	b508      	push	{r3, lr}
   b94c2:	4b02      	ldr	r3, [pc, #8]	; (b94cc <network_is_on+0xc>)
   b94c4:	681b      	ldr	r3, [r3, #0]
   b94c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b94c8:	9301      	str	r3, [sp, #4]
   b94ca:	bd08      	pop	{r3, pc}
   b94cc:	00030240 	.word	0x00030240

000b94d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b94d0:	b508      	push	{r3, lr}
   b94d2:	4b02      	ldr	r3, [pc, #8]	; (b94dc <network_is_off+0xc>)
   b94d4:	681b      	ldr	r3, [r3, #0]
   b94d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b94d8:	9301      	str	r3, [sp, #4]
   b94da:	bd08      	pop	{r3, pc}
   b94dc:	00030240 	.word	0x00030240

000b94e0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b94e0:	b508      	push	{r3, lr}
   b94e2:	4b02      	ldr	r3, [pc, #8]	; (b94ec <spark_process+0xc>)
   b94e4:	681b      	ldr	r3, [r3, #0]
   b94e6:	689b      	ldr	r3, [r3, #8]
   b94e8:	9301      	str	r3, [sp, #4]
   b94ea:	bd08      	pop	{r3, pc}
   b94ec:	00030244 	.word	0x00030244

000b94f0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b94f0:	b508      	push	{r3, lr}
   b94f2:	4b02      	ldr	r3, [pc, #8]	; (b94fc <spark_cloud_flag_connected+0xc>)
   b94f4:	681b      	ldr	r3, [r3, #0]
   b94f6:	695b      	ldr	r3, [r3, #20]
   b94f8:	9301      	str	r3, [sp, #4]
   b94fa:	bd08      	pop	{r3, pc}
   b94fc:	00030244 	.word	0x00030244

000b9500 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9500:	b508      	push	{r3, lr}
   b9502:	4b02      	ldr	r3, [pc, #8]	; (b950c <spark_send_event+0xc>)
   b9504:	681b      	ldr	r3, [r3, #0]
   b9506:	6a1b      	ldr	r3, [r3, #32]
   b9508:	9301      	str	r3, [sp, #4]
   b950a:	bd08      	pop	{r3, pc}
   b950c:	00030244 	.word	0x00030244

000b9510 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9510:	b508      	push	{r3, lr}
   b9512:	4b02      	ldr	r3, [pc, #8]	; (b951c <spark_subscribe+0xc>)
   b9514:	681b      	ldr	r3, [r3, #0]
   b9516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9518:	9301      	str	r3, [sp, #4]
   b951a:	bd08      	pop	{r3, pc}
   b951c:	00030244 	.word	0x00030244

000b9520 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9520:	b508      	push	{r3, lr}
   b9522:	4b02      	ldr	r3, [pc, #8]	; (b952c <spark_sync_time_pending+0xc>)
   b9524:	681b      	ldr	r3, [r3, #0]
   b9526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9528:	9301      	str	r3, [sp, #4]
   b952a:	bd08      	pop	{r3, pc}
   b952c:	00030244 	.word	0x00030244

000b9530 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9530:	b508      	push	{r3, lr}
   b9532:	4b02      	ldr	r3, [pc, #8]	; (b953c <spark_set_random_seed_from_cloud_handler+0xc>)
   b9534:	681b      	ldr	r3, [r3, #0]
   b9536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9538:	9301      	str	r3, [sp, #4]
   b953a:	bd08      	pop	{r3, pc}
   b953c:	00030244 	.word	0x00030244

000b9540 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9540:	b508      	push	{r3, lr}
   b9542:	4b02      	ldr	r3, [pc, #8]	; (b954c <malloc+0xc>)
   b9544:	681b      	ldr	r3, [r3, #0]
   b9546:	681b      	ldr	r3, [r3, #0]
   b9548:	9301      	str	r3, [sp, #4]
   b954a:	bd08      	pop	{r3, pc}
   b954c:	0003021c 	.word	0x0003021c

000b9550 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9550:	b508      	push	{r3, lr}
   b9552:	4b02      	ldr	r3, [pc, #8]	; (b955c <free+0xc>)
   b9554:	681b      	ldr	r3, [r3, #0]
   b9556:	685b      	ldr	r3, [r3, #4]
   b9558:	9301      	str	r3, [sp, #4]
   b955a:	bd08      	pop	{r3, pc}
   b955c:	0003021c 	.word	0x0003021c

000b9560 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9560:	b508      	push	{r3, lr}
   b9562:	4b02      	ldr	r3, [pc, #8]	; (b956c <realloc+0xc>)
   b9564:	681b      	ldr	r3, [r3, #0]
   b9566:	689b      	ldr	r3, [r3, #8]
   b9568:	9301      	str	r3, [sp, #4]
   b956a:	bd08      	pop	{r3, pc}
   b956c:	0003021c 	.word	0x0003021c

000b9570 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b9570:	b508      	push	{r3, lr}
   b9572:	4b02      	ldr	r3, [pc, #8]	; (b957c <sprintf+0xc>)
   b9574:	681b      	ldr	r3, [r3, #0]
   b9576:	68db      	ldr	r3, [r3, #12]
   b9578:	9301      	str	r3, [sp, #4]
   b957a:	bd08      	pop	{r3, pc}
   b957c:	0003021c 	.word	0x0003021c

000b9580 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9580:	b508      	push	{r3, lr}
   b9582:	4b02      	ldr	r3, [pc, #8]	; (b958c <sscanf+0xc>)
   b9584:	681b      	ldr	r3, [r3, #0]
   b9586:	695b      	ldr	r3, [r3, #20]
   b9588:	9301      	str	r3, [sp, #4]
   b958a:	bd08      	pop	{r3, pc}
   b958c:	0003021c 	.word	0x0003021c

000b9590 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9590:	b508      	push	{r3, lr}
   b9592:	4b02      	ldr	r3, [pc, #8]	; (b959c <snprintf+0xc>)
   b9594:	681b      	ldr	r3, [r3, #0]
   b9596:	69db      	ldr	r3, [r3, #28]
   b9598:	9301      	str	r3, [sp, #4]
   b959a:	bd08      	pop	{r3, pc}
   b959c:	0003021c 	.word	0x0003021c

000b95a0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b95a0:	b508      	push	{r3, lr}
   b95a2:	4b02      	ldr	r3, [pc, #8]	; (b95ac <vsnprintf+0xc>)
   b95a4:	681b      	ldr	r3, [r3, #0]
   b95a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b95a8:	9301      	str	r3, [sp, #4]
   b95aa:	bd08      	pop	{r3, pc}
   b95ac:	0003021c 	.word	0x0003021c

000b95b0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b95b0:	b508      	push	{r3, lr}
   b95b2:	4b02      	ldr	r3, [pc, #8]	; (b95bc <abort+0xc>)
   b95b4:	681b      	ldr	r3, [r3, #0]
   b95b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b95b8:	9301      	str	r3, [sp, #4]
   b95ba:	bd08      	pop	{r3, pc}
   b95bc:	0003021c 	.word	0x0003021c

000b95c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b95c0:	b508      	push	{r3, lr}
   b95c2:	4b02      	ldr	r3, [pc, #8]	; (b95cc <_malloc_r+0xc>)
   b95c4:	681b      	ldr	r3, [r3, #0]
   b95c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b95c8:	9301      	str	r3, [sp, #4]
   b95ca:	bd08      	pop	{r3, pc}
   b95cc:	0003021c 	.word	0x0003021c

000b95d0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b95d0:	b508      	push	{r3, lr}
   b95d2:	4b02      	ldr	r3, [pc, #8]	; (b95dc <__errno+0xc>)
   b95d4:	681b      	ldr	r3, [r3, #0]
   b95d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b95d8:	9301      	str	r3, [sp, #4]
   b95da:	bd08      	pop	{r3, pc}
   b95dc:	0003021c 	.word	0x0003021c

000b95e0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b95e0:	b508      	push	{r3, lr}
   b95e2:	4b02      	ldr	r3, [pc, #8]	; (b95ec <__assert_func+0xc>)
   b95e4:	681b      	ldr	r3, [r3, #0]
   b95e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b95e8:	9301      	str	r3, [sp, #4]
   b95ea:	bd08      	pop	{r3, pc}
   b95ec:	0003021c 	.word	0x0003021c

000b95f0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b95f0:	b508      	push	{r3, lr}
   b95f2:	4b02      	ldr	r3, [pc, #8]	; (b95fc <newlib_impure_ptr_callback+0xc>)
   b95f4:	681b      	ldr	r3, [r3, #0]
   b95f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b95f8:	9301      	str	r3, [sp, #4]
   b95fa:	bd08      	pop	{r3, pc}
   b95fc:	0003021c 	.word	0x0003021c

000b9600 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9600:	b508      	push	{r3, lr}
   b9602:	4b02      	ldr	r3, [pc, #8]	; (b960c <localtime_r+0xc>)
   b9604:	681b      	ldr	r3, [r3, #0]
   b9606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9608:	9301      	str	r3, [sp, #4]
   b960a:	bd08      	pop	{r3, pc}
   b960c:	0003021c 	.word	0x0003021c

000b9610 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9610:	2200      	movs	r2, #0
   b9612:	6840      	ldr	r0, [r0, #4]
   b9614:	4611      	mov	r1, r2
   b9616:	f7ff bf3b 	b.w	b9490 <network_listening>

000b961a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b961a:	2200      	movs	r2, #0
   b961c:	6840      	ldr	r0, [r0, #4]
   b961e:	4611      	mov	r1, r2
   b9620:	f7ff bf46 	b.w	b94b0 <network_get_listen_timeout>

000b9624 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9624:	6840      	ldr	r0, [r0, #4]
   b9626:	2200      	movs	r2, #0
   b9628:	f7ff bf3a 	b.w	b94a0 <network_set_listen_timeout>

000b962c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b962c:	6840      	ldr	r0, [r0, #4]
   b962e:	2200      	movs	r2, #0
   b9630:	f081 0101 	eor.w	r1, r1, #1
   b9634:	f7ff bf24 	b.w	b9480 <network_listen>

000b9638 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9638:	2300      	movs	r3, #0
   b963a:	6840      	ldr	r0, [r0, #4]
   b963c:	461a      	mov	r2, r3
   b963e:	4619      	mov	r1, r3
   b9640:	f7ff bf16 	b.w	b9470 <network_off>

000b9644 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9644:	2300      	movs	r3, #0
   b9646:	6840      	ldr	r0, [r0, #4]
   b9648:	461a      	mov	r2, r3
   b964a:	4619      	mov	r1, r3
   b964c:	f7ff bf08 	b.w	b9460 <network_on>

000b9650 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9650:	2200      	movs	r2, #0
   b9652:	6840      	ldr	r0, [r0, #4]
   b9654:	4611      	mov	r1, r2
   b9656:	f7ff befb 	b.w	b9450 <network_ready>

000b965a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b965a:	2200      	movs	r2, #0
   b965c:	6840      	ldr	r0, [r0, #4]
   b965e:	4611      	mov	r1, r2
   b9660:	f7ff bee6 	b.w	b9430 <network_connecting>

000b9664 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9664:	6840      	ldr	r0, [r0, #4]
   b9666:	2200      	movs	r2, #0
   b9668:	2102      	movs	r1, #2
   b966a:	f7ff bee9 	b.w	b9440 <network_disconnect>

000b966e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b966e:	2300      	movs	r3, #0
   b9670:	6840      	ldr	r0, [r0, #4]
   b9672:	461a      	mov	r2, r3
   b9674:	f7ff bed4 	b.w	b9420 <network_connect>

000b9678 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9678:	4b02      	ldr	r3, [pc, #8]	; (b9684 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b967a:	2203      	movs	r2, #3
   b967c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b967e:	4a02      	ldr	r2, [pc, #8]	; (b9688 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9680:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9682:	4770      	bx	lr
   b9684:	2003e654 	.word	0x2003e654
   b9688:	000c13f8 	.word	0x000c13f8

000b968c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b968c:	2100      	movs	r1, #0
   b968e:	f7ff be33 	b.w	b92f8 <hal_spi_release>

000b9692 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b9692:	2100      	movs	r1, #0
   b9694:	f7ff be28 	b.w	b92e8 <hal_spi_acquire>

000b9698 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9698:	b510      	push	{r4, lr}
   b969a:	4604      	mov	r4, r0
   b969c:	4608      	mov	r0, r1
{
    _spi = spi;
   b969e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b96a0:	f7ff fdf2 	bl	b9288 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b96a4:	2300      	movs	r3, #0
   b96a6:	6063      	str	r3, [r4, #4]
}
   b96a8:	4620      	mov	r0, r4
   b96aa:	bd10      	pop	{r4, pc}

000b96ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b96ac:	b513      	push	{r0, r1, r4, lr}
   b96ae:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b96b0:	7800      	ldrb	r0, [r0, #0]
   b96b2:	f7ff ffee 	bl	b9692 <_ZN8SPIClass4lockEv.isra.0>
   b96b6:	b958      	cbnz	r0, b96d0 <_ZN8SPIClass5beginEv+0x24>
   b96b8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b96ba:	9001      	str	r0, [sp, #4]
   b96bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b96c0:	f7ff fdd2 	bl	b9268 <hal_spi_begin>
        unlock();
   b96c4:	9801      	ldr	r0, [sp, #4]
    }
}
   b96c6:	b002      	add	sp, #8
   b96c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b96cc:	f7ff bfde 	b.w	b968c <_ZN8SPIClass6unlockEv.isra.0>
   b96d0:	b002      	add	sp, #8
   b96d2:	bd10      	pop	{r4, pc}

000b96d4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b96d4:	7800      	ldrb	r0, [r0, #0]
   b96d6:	f7ff bfd9 	b.w	b968c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b96dc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b96dc:	0840      	lsrs	r0, r0, #1
{
   b96de:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b96e0:	6018      	str	r0, [r3, #0]
   b96e2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b96e4:	6818      	ldr	r0, [r3, #0]
   b96e6:	4288      	cmp	r0, r1
   b96e8:	b2e5      	uxtb	r5, r4
   b96ea:	d906      	bls.n	b96fa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b96ec:	3401      	adds	r4, #1
   b96ee:	2c08      	cmp	r4, #8
   b96f0:	d002      	beq.n	b96f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b96f2:	0840      	lsrs	r0, r0, #1
   b96f4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b96f6:	e7f5      	b.n	b96e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b96f8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b96fa:	4b02      	ldr	r3, [pc, #8]	; (b9704 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b96fc:	5d5b      	ldrb	r3, [r3, r5]
   b96fe:	7013      	strb	r3, [r2, #0]
}
   b9700:	bd30      	pop	{r4, r5, pc}
   b9702:	bf00      	nop
   b9704:	000c142c 	.word	0x000c142c

000b9708 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b9708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b970c:	4606      	mov	r6, r0
   b970e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b9710:	7800      	ldrb	r0, [r0, #0]
{
   b9712:	460c      	mov	r4, r1
    CHECK(lock());
   b9714:	f7ff ffbd 	bl	b9692 <_ZN8SPIClass4lockEv.isra.0>
   b9718:	2800      	cmp	r0, #0
   b971a:	db1b      	blt.n	b9754 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b971c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b971e:	2214      	movs	r2, #20
   b9720:	2100      	movs	r1, #0
   b9722:	a809      	add	r0, sp, #36	; 0x24
   b9724:	f004 fc6d 	bl	be002 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b9728:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b972a:	2200      	movs	r2, #0
   b972c:	a909      	add	r1, sp, #36	; 0x24
   b972e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b9730:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b9734:	f7ff fdb8 	bl	b92a8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b9738:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b973c:	b113      	cbz	r3, b9744 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b973e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b9742:	b155      	cbz	r5, b975a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b9744:	2700      	movs	r7, #0
   b9746:	46b9      	mov	r9, r7
   b9748:	46b8      	mov	r8, r7
   b974a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b974c:	7923      	ldrb	r3, [r4, #4]
   b974e:	b15d      	cbz	r5, b9768 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b9750:	b1c3      	cbz	r3, b9784 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b9752:	2000      	movs	r0, #0
}
   b9754:	b00f      	add	sp, #60	; 0x3c
   b9756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b975a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b975e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b9762:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b9766:	e7f1      	b.n	b974c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b9768:	2b00      	cmp	r3, #0
   b976a:	d135      	bne.n	b97d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b976c:	68a3      	ldr	r3, [r4, #8]
   b976e:	4543      	cmp	r3, r8
   b9770:	d108      	bne.n	b9784 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b9772:	f88d 9020 	strb.w	r9, [sp, #32]
   b9776:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b977a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b977e:	89a3      	ldrh	r3, [r4, #12]
   b9780:	429a      	cmp	r2, r3
   b9782:	d0e6      	beq.n	b9752 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b9784:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9786:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9788:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b978c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b978e:	ab04      	add	r3, sp, #16
   b9790:	f10d 020f 	add.w	r2, sp, #15
   b9794:	f7ff ffa2 	bl	b96dc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9798:	7921      	ldrb	r1, [r4, #4]
   b979a:	b985      	cbnz	r5, b97be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b979c:	b989      	cbnz	r1, b97c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b979e:	68a3      	ldr	r3, [r4, #8]
   b97a0:	4543      	cmp	r3, r8
   b97a2:	d30e      	bcc.n	b97c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b97a4:	f88d 9020 	strb.w	r9, [sp, #32]
   b97a8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b97ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b97b0:	89a3      	ldrh	r3, [r4, #12]
   b97b2:	429a      	cmp	r2, r3
   b97b4:	d105      	bne.n	b97c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b97b6:	9b04      	ldr	r3, [sp, #16]
   b97b8:	4543      	cmp	r3, r8
   b97ba:	d102      	bne.n	b97c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b97bc:	e7c9      	b.n	b9752 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b97be:	2900      	cmp	r1, #0
   b97c0:	d1f9      	bne.n	b97b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b97c2:	2300      	movs	r3, #0
   b97c4:	9301      	str	r3, [sp, #4]
   b97c6:	7b63      	ldrb	r3, [r4, #13]
   b97c8:	9300      	str	r3, [sp, #0]
   b97ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b97ce:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b97d0:	7830      	ldrb	r0, [r6, #0]
   b97d2:	f7ff fd81 	bl	b92d8 <hal_spi_set_settings>
   b97d6:	e7bc      	b.n	b9752 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b97d8:	e9cd 5500 	strd	r5, r5, [sp]
   b97dc:	462b      	mov	r3, r5
   b97de:	462a      	mov	r2, r5
   b97e0:	2101      	movs	r1, #1
   b97e2:	e7f5      	b.n	b97d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b97e4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b97e4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b97e6:	7800      	ldrb	r0, [r0, #0]
   b97e8:	f7ff fd46 	bl	b9278 <hal_spi_transfer>
}
   b97ec:	b2c0      	uxtb	r0, r0
   b97ee:	bd08      	pop	{r3, pc}

000b97f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b97f0:	b530      	push	{r4, r5, lr}
   b97f2:	b087      	sub	sp, #28
   b97f4:	4604      	mov	r4, r0
   b97f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b97f8:	9500      	str	r5, [sp, #0]
   b97fa:	7800      	ldrb	r0, [r0, #0]
   b97fc:	f7ff fd5c 	bl	b92b8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b9800:	b93d      	cbnz	r5, b9812 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b9802:	7820      	ldrb	r0, [r4, #0]
   b9804:	a902      	add	r1, sp, #8
   b9806:	f7ff fd5f 	bl	b92c8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b980a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b980e:	07db      	lsls	r3, r3, #31
   b9810:	d4f7      	bmi.n	b9802 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b9812:	b007      	add	sp, #28
   b9814:	bd30      	pop	{r4, r5, pc}
	...

000b9818 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9818:	4b05      	ldr	r3, [pc, #20]	; (b9830 <_GLOBAL__sub_I_System+0x18>)
   b981a:	2202      	movs	r2, #2
   b981c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b981e:	4b05      	ldr	r3, [pc, #20]	; (b9834 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9820:	4a05      	ldr	r2, [pc, #20]	; (b9838 <_GLOBAL__sub_I_System+0x20>)
   b9822:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9824:	2000      	movs	r0, #0
   b9826:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b982a:	f7ff bdbd 	b.w	b93a8 <set_system_mode>
   b982e:	bf00      	nop
   b9830:	2003e668 	.word	0x2003e668
   b9834:	2003e65c 	.word	0x2003e65c
   b9838:	ffff0000 	.word	0xffff0000

000b983c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b983c:	b510      	push	{r4, lr}
   b983e:	4604      	mov	r4, r0
{
	free(buffer);
   b9840:	6800      	ldr	r0, [r0, #0]
   b9842:	f7ff fe85 	bl	b9550 <free>
}
   b9846:	4620      	mov	r0, r4
   b9848:	bd10      	pop	{r4, pc}

000b984a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b984a:	b510      	push	{r4, lr}
   b984c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b984e:	6800      	ldr	r0, [r0, #0]
   b9850:	b108      	cbz	r0, b9856 <_ZN6String10invalidateEv+0xc>
   b9852:	f7ff fe7d 	bl	b9550 <free>
	buffer = NULL;
   b9856:	2300      	movs	r3, #0
	capacity = len = 0;
   b9858:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b985c:	6023      	str	r3, [r4, #0]
}
   b985e:	bd10      	pop	{r4, pc}

000b9860 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9860:	b538      	push	{r3, r4, r5, lr}
   b9862:	4604      	mov	r4, r0
   b9864:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9866:	6800      	ldr	r0, [r0, #0]
   b9868:	3101      	adds	r1, #1
   b986a:	f7ff fe79 	bl	b9560 <realloc>
	if (newbuffer) {
   b986e:	b110      	cbz	r0, b9876 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9870:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9874:	2001      	movs	r0, #1
	}
	return 0;
}
   b9876:	bd38      	pop	{r3, r4, r5, pc}

000b9878 <_ZN6String7reserveEj>:
{
   b9878:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b987a:	6803      	ldr	r3, [r0, #0]
{
   b987c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b987e:	b123      	cbz	r3, b988a <_ZN6String7reserveEj+0x12>
   b9880:	6843      	ldr	r3, [r0, #4]
   b9882:	428b      	cmp	r3, r1
   b9884:	d301      	bcc.n	b988a <_ZN6String7reserveEj+0x12>
   b9886:	2001      	movs	r0, #1
}
   b9888:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b988a:	4620      	mov	r0, r4
   b988c:	f7ff ffe8 	bl	b9860 <_ZN6String12changeBufferEj>
   b9890:	2800      	cmp	r0, #0
   b9892:	d0f9      	beq.n	b9888 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9894:	68a3      	ldr	r3, [r4, #8]
   b9896:	2b00      	cmp	r3, #0
   b9898:	d1f5      	bne.n	b9886 <_ZN6String7reserveEj+0xe>
   b989a:	6822      	ldr	r2, [r4, #0]
   b989c:	7013      	strb	r3, [r2, #0]
   b989e:	e7f2      	b.n	b9886 <_ZN6String7reserveEj+0xe>

000b98a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b98a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98a2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b98a4:	4611      	mov	r1, r2
   b98a6:	9201      	str	r2, [sp, #4]
{
   b98a8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b98aa:	f7ff ffe5 	bl	b9878 <_ZN6String7reserveEj>
   b98ae:	9a01      	ldr	r2, [sp, #4]
   b98b0:	b928      	cbnz	r0, b98be <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b98b2:	4620      	mov	r0, r4
   b98b4:	f7ff ffc9 	bl	b984a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b98b8:	4620      	mov	r0, r4
   b98ba:	b003      	add	sp, #12
   b98bc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b98be:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b98c0:	4629      	mov	r1, r5
   b98c2:	6820      	ldr	r0, [r4, #0]
   b98c4:	f004 fb75 	bl	bdfb2 <memcpy>
	buffer[len] = 0;
   b98c8:	6822      	ldr	r2, [r4, #0]
   b98ca:	68a3      	ldr	r3, [r4, #8]
   b98cc:	2100      	movs	r1, #0
   b98ce:	54d1      	strb	r1, [r2, r3]
	return *this;
   b98d0:	e7f2      	b.n	b98b8 <_ZN6String4copyEPKcj+0x18>

000b98d2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b98d2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b98d4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b98d6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b98da:	4604      	mov	r4, r0
	len = 0;
   b98dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b98de:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b98e0:	b141      	cbz	r1, b98f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b98e2:	4608      	mov	r0, r1
   b98e4:	9101      	str	r1, [sp, #4]
   b98e6:	f004 fc40 	bl	be16a <strlen>
   b98ea:	9901      	ldr	r1, [sp, #4]
   b98ec:	4602      	mov	r2, r0
   b98ee:	4620      	mov	r0, r4
   b98f0:	f7ff ffd6 	bl	b98a0 <_ZN6String4copyEPKcj>
}
   b98f4:	4620      	mov	r0, r4
   b98f6:	b002      	add	sp, #8
   b98f8:	bd10      	pop	{r4, pc}

000b98fa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b98fa:	b538      	push	{r3, r4, r5, lr}
   b98fc:	4605      	mov	r5, r0
	if (buffer) {
   b98fe:	6800      	ldr	r0, [r0, #0]
{
   b9900:	460c      	mov	r4, r1
	if (buffer) {
   b9902:	b168      	cbz	r0, b9920 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9904:	686a      	ldr	r2, [r5, #4]
   b9906:	688b      	ldr	r3, [r1, #8]
   b9908:	429a      	cmp	r2, r3
   b990a:	d307      	bcc.n	b991c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b990c:	6809      	ldr	r1, [r1, #0]
   b990e:	f004 fc06 	bl	be11e <strcpy>
			len = rhs.len;
   b9912:	68a3      	ldr	r3, [r4, #8]
   b9914:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9916:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9918:	60a3      	str	r3, [r4, #8]
}
   b991a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b991c:	f7ff fe18 	bl	b9550 <free>
	buffer = rhs.buffer;
   b9920:	6823      	ldr	r3, [r4, #0]
   b9922:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9924:	6863      	ldr	r3, [r4, #4]
   b9926:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9928:	68a3      	ldr	r3, [r4, #8]
   b992a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b992c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b992e:	e9c4 3300 	strd	r3, r3, [r4]
   b9932:	e7f1      	b.n	b9918 <_ZN6String4moveERS_+0x1e>

000b9934 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9934:	b510      	push	{r4, lr}
	buffer = NULL;
   b9936:	2300      	movs	r3, #0
	capacity = 0;
   b9938:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b993c:	4604      	mov	r4, r0
	len = 0;
   b993e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9940:	7303      	strb	r3, [r0, #12]
	move(rval);
   b9942:	f7ff ffda 	bl	b98fa <_ZN6String4moveERS_>
}
   b9946:	4620      	mov	r0, r4
   b9948:	bd10      	pop	{r4, pc}

000b994a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b994a:	4288      	cmp	r0, r1
{
   b994c:	b510      	push	{r4, lr}
   b994e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9950:	d005      	beq.n	b995e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9952:	680b      	ldr	r3, [r1, #0]
   b9954:	b12b      	cbz	r3, b9962 <_ZN6StringaSERKS_+0x18>
   b9956:	688a      	ldr	r2, [r1, #8]
   b9958:	4619      	mov	r1, r3
   b995a:	f7ff ffa1 	bl	b98a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b995e:	4620      	mov	r0, r4
   b9960:	bd10      	pop	{r4, pc}
	else invalidate();
   b9962:	f7ff ff72 	bl	b984a <_ZN6String10invalidateEv>
   b9966:	e7fa      	b.n	b995e <_ZN6StringaSERKS_+0x14>

000b9968 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9968:	b510      	push	{r4, lr}
	buffer = NULL;
   b996a:	2300      	movs	r3, #0
String::String(const String &value)
   b996c:	4604      	mov	r4, r0
	capacity = 0;
   b996e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b9972:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9974:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9976:	f7ff ffe8 	bl	b994a <_ZN6StringaSERKS_>
}
   b997a:	4620      	mov	r0, r4
   b997c:	bd10      	pop	{r4, pc}

000b997e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b997e:	b513      	push	{r0, r1, r4, lr}
   b9980:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9982:	b159      	cbz	r1, b999c <_ZN6StringaSEPKc+0x1e>
   b9984:	4608      	mov	r0, r1
   b9986:	9101      	str	r1, [sp, #4]
   b9988:	f004 fbef 	bl	be16a <strlen>
   b998c:	9901      	ldr	r1, [sp, #4]
   b998e:	4602      	mov	r2, r0
   b9990:	4620      	mov	r0, r4
   b9992:	f7ff ff85 	bl	b98a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9996:	4620      	mov	r0, r4
   b9998:	b002      	add	sp, #8
   b999a:	bd10      	pop	{r4, pc}
	else invalidate();
   b999c:	f7ff ff55 	bl	b984a <_ZN6String10invalidateEv>
   b99a0:	e7f9      	b.n	b9996 <_ZN6StringaSEPKc+0x18>

000b99a2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b99a2:	b570      	push	{r4, r5, r6, lr}
   b99a4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b99a6:	460e      	mov	r6, r1
   b99a8:	b909      	cbnz	r1, b99ae <_ZN6String6concatEPKcj+0xc>
   b99aa:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b99ac:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b99ae:	b16a      	cbz	r2, b99cc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b99b0:	6884      	ldr	r4, [r0, #8]
   b99b2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b99b4:	4621      	mov	r1, r4
   b99b6:	f7ff ff5f 	bl	b9878 <_ZN6String7reserveEj>
   b99ba:	2800      	cmp	r0, #0
   b99bc:	d0f5      	beq.n	b99aa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b99be:	6828      	ldr	r0, [r5, #0]
   b99c0:	68ab      	ldr	r3, [r5, #8]
   b99c2:	4631      	mov	r1, r6
   b99c4:	4418      	add	r0, r3
   b99c6:	f004 fbaa 	bl	be11e <strcpy>
	len = newlen;
   b99ca:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b99cc:	2001      	movs	r0, #1
   b99ce:	e7ed      	b.n	b99ac <_ZN6String6concatEPKcj+0xa>

000b99d0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b99d0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b99d2:	2300      	movs	r3, #0
	buf[0] = c;
   b99d4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b99d8:	2201      	movs	r2, #1
   b99da:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b99dc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b99e0:	f7ff ffdf 	bl	b99a2 <_ZN6String6concatEPKcj>
}
   b99e4:	b003      	add	sp, #12
   b99e6:	f85d fb04 	ldr.w	pc, [sp], #4

000b99ea <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b99ea:	6802      	ldr	r2, [r0, #0]
{
   b99ec:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b99ee:	6809      	ldr	r1, [r1, #0]
   b99f0:	b162      	cbz	r2, b9a0c <_ZNK6String9compareToERKS_+0x22>
   b99f2:	b941      	cbnz	r1, b9a06 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b99f4:	6880      	ldr	r0, [r0, #8]
   b99f6:	b160      	cbz	r0, b9a12 <_ZNK6String9compareToERKS_+0x28>
   b99f8:	7810      	ldrb	r0, [r2, #0]
   b99fa:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b99fc:	6898      	ldr	r0, [r3, #8]
   b99fe:	b140      	cbz	r0, b9a12 <_ZNK6String9compareToERKS_+0x28>
   b9a00:	7809      	ldrb	r1, [r1, #0]
   b9a02:	4248      	negs	r0, r1
   b9a04:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b9a06:	4610      	mov	r0, r2
   b9a08:	f004 bb7f 	b.w	be10a <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9a0c:	2900      	cmp	r1, #0
   b9a0e:	d1f5      	bne.n	b99fc <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b9a10:	4608      	mov	r0, r1
}
   b9a12:	4770      	bx	lr

000b9a14 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b9a14:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b9a16:	6882      	ldr	r2, [r0, #8]
   b9a18:	688b      	ldr	r3, [r1, #8]
   b9a1a:	429a      	cmp	r2, r3
   b9a1c:	d105      	bne.n	b9a2a <_ZNK6String6equalsERKS_+0x16>
   b9a1e:	f7ff ffe4 	bl	b99ea <_ZNK6String9compareToERKS_>
   b9a22:	fab0 f080 	clz	r0, r0
   b9a26:	0940      	lsrs	r0, r0, #5
}
   b9a28:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9a2a:	2000      	movs	r0, #0
   b9a2c:	e7fc      	b.n	b9a28 <_ZNK6String6equalsERKS_+0x14>

000b9a2e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b9a2e:	6883      	ldr	r3, [r0, #8]
   b9a30:	428b      	cmp	r3, r1
   b9a32:	d903      	bls.n	b9a3c <_ZNK6StringixEj+0xe>
   b9a34:	6800      	ldr	r0, [r0, #0]
   b9a36:	b110      	cbz	r0, b9a3e <_ZNK6StringixEj+0x10>
	return buffer[index];
   b9a38:	5c40      	ldrb	r0, [r0, r1]
   b9a3a:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b9a3c:	2000      	movs	r0, #0
}
   b9a3e:	4770      	bx	lr

000b9a40 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b9a40:	f7ff bff5 	b.w	b9a2e <_ZNK6StringixEj>

000b9a44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9a44:	4770      	bx	lr

000b9a46 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b9a46:	4770      	bx	lr

000b9a48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b9a48:	4770      	bx	lr

000b9a4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9a4a:	4770      	bx	lr

000b9a4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9a4c:	4b06      	ldr	r3, [pc, #24]	; (b9a68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9a4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9a50:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b9a52:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9a56:	d005      	beq.n	b9a64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9a58:	4608      	mov	r0, r1
   b9a5a:	f003 fc05 	bl	bd268 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9a5e:	2800      	cmp	r0, #0
   b9a60:	bf08      	it	eq
   b9a62:	2400      	moveq	r4, #0
      }
   b9a64:	4620      	mov	r0, r4
   b9a66:	bd10      	pop	{r4, pc}
   b9a68:	000c16a4 	.word	0x000c16a4

000b9a6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9a6c:	4b06      	ldr	r3, [pc, #24]	; (b9a88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9a6e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9a70:	b510      	push	{r4, lr}
   b9a72:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9a76:	d005      	beq.n	b9a84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9a78:	4608      	mov	r0, r1
   b9a7a:	f003 fbf5 	bl	bd268 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9a7e:	2800      	cmp	r0, #0
   b9a80:	bf08      	it	eq
   b9a82:	2400      	moveq	r4, #0
      }
   b9a84:	4620      	mov	r0, r4
   b9a86:	bd10      	pop	{r4, pc}
   b9a88:	000c16a4 	.word	0x000c16a4

000b9a8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9a8c:	4b06      	ldr	r3, [pc, #24]	; (b9aa8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9a8e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9a90:	b510      	push	{r4, lr}
   b9a92:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9a96:	d005      	beq.n	b9aa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9a98:	4608      	mov	r0, r1
   b9a9a:	f003 fbe5 	bl	bd268 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9a9e:	2800      	cmp	r0, #0
   b9aa0:	bf08      	it	eq
   b9aa2:	2400      	moveq	r4, #0
      }
   b9aa4:	4620      	mov	r0, r4
   b9aa6:	bd10      	pop	{r4, pc}
   b9aa8:	000c16a4 	.word	0x000c16a4

000b9aac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9aac:	b510      	push	{r4, lr}
   b9aae:	2168      	movs	r1, #104	; 0x68
   b9ab0:	4604      	mov	r4, r0
   b9ab2:	f7fa faf4 	bl	b409e <_ZdlPvj>
   b9ab6:	4620      	mov	r0, r4
   b9ab8:	bd10      	pop	{r4, pc}

000b9aba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9aba:	b510      	push	{r4, lr}
   b9abc:	2128      	movs	r1, #40	; 0x28
   b9abe:	4604      	mov	r4, r0
   b9ac0:	f7fa faed 	bl	b409e <_ZdlPvj>
   b9ac4:	4620      	mov	r0, r4
   b9ac6:	bd10      	pop	{r4, pc}

000b9ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9ac8:	b510      	push	{r4, lr}
   b9aca:	2130      	movs	r1, #48	; 0x30
   b9acc:	4604      	mov	r4, r0
   b9ace:	f7fa fae6 	bl	b409e <_ZdlPvj>
   b9ad2:	4620      	mov	r0, r4
   b9ad4:	bd10      	pop	{r4, pc}

000b9ad6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9ad6:	2168      	movs	r1, #104	; 0x68
   b9ad8:	f7fa bae1 	b.w	b409e <_ZdlPvj>

000b9adc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9adc:	2128      	movs	r1, #40	; 0x28
   b9ade:	f7fa bade 	b.w	b409e <_ZdlPvj>

000b9ae2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9ae2:	2130      	movs	r1, #48	; 0x30
   b9ae4:	f7fa badb 	b.w	b409e <_ZdlPvj>

000b9ae8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b9ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9aea:	2500      	movs	r5, #0
   b9aec:	1cec      	adds	r4, r5, #3
   b9aee:	428c      	cmp	r4, r1
   b9af0:	d80d      	bhi.n	b9b0e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b9af2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9af4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b9af6:	5d87      	ldrb	r7, [r0, r6]
   b9af8:	4297      	cmp	r7, r2
   b9afa:	d105      	bne.n	b9b08 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9afc:	4426      	add	r6, r4
   b9afe:	42b1      	cmp	r1, r6
   b9b00:	d305      	bcc.n	b9b0e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b9b02:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9b04:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9b08:	3401      	adds	r4, #1
   b9b0a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9b0c:	e7ee      	b.n	b9aec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b9b0e:	2000      	movs	r0, #0
   b9b10:	e7f9      	b.n	b9b06 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9b14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9b14:	4a02      	ldr	r2, [pc, #8]	; (b9b20 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b9b16:	4903      	ldr	r1, [pc, #12]	; (b9b24 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9b18:	200a      	movs	r0, #10
   b9b1a:	f7ff bc2d 	b.w	b9378 <panic_>
   b9b1e:	bf00      	nop
   b9b20:	000b8ea1 	.word	0x000b8ea1
   b9b24:	000c1434 	.word	0x000c1434

000b9b28 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9b28:	b430      	push	{r4, r5}
   b9b2a:	460d      	mov	r5, r1
   b9b2c:	4611      	mov	r1, r2
   b9b2e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b9b30:	6803      	ldr	r3, [r0, #0]
   b9b32:	6809      	ldr	r1, [r1, #0]
   b9b34:	6828      	ldr	r0, [r5, #0]
   b9b36:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9b3a:	46a4      	mov	ip, r4
      }
   b9b3c:	bc30      	pop	{r4, r5}
   b9b3e:	4760      	bx	ip

000b9b40 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9b40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9b42:	b538      	push	{r3, r4, r5, lr}
   b9b44:	4604      	mov	r4, r0
	switch (__op)
   b9b46:	d102      	bne.n	b9b4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9b48:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9b4a:	6023      	str	r3, [r4, #0]
	}
   b9b4c:	e003      	b.n	b9b56 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b9b4e:	2a02      	cmp	r2, #2
   b9b50:	d003      	beq.n	b9b5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b9b52:	2a03      	cmp	r2, #3
   b9b54:	d00d      	beq.n	b9b72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b9b56:	2000      	movs	r0, #0
   b9b58:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9b5a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9b5c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9b5e:	f7fa fa9a 	bl	b4096 <_Znwj>
   b9b62:	4603      	mov	r3, r0
   b9b64:	2800      	cmp	r0, #0
   b9b66:	d0f0      	beq.n	b9b4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9b68:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9b6c:	e883 0003 	stmia.w	r3, {r0, r1}
   b9b70:	e7eb      	b.n	b9b4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b9b72:	6800      	ldr	r0, [r0, #0]
   b9b74:	2800      	cmp	r0, #0
   b9b76:	d0ee      	beq.n	b9b56 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9b78:	2108      	movs	r1, #8
   b9b7a:	f7fa fa90 	bl	b409e <_ZdlPvj>
   b9b7e:	e7ea      	b.n	b9b56 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b9b80 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9b80:	b510      	push	{r4, lr}
	if (_M_manager)
   b9b82:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9b84:	4604      	mov	r4, r0
	if (_M_manager)
   b9b86:	b12b      	cbz	r3, b9b94 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9b88:	2203      	movs	r2, #3
   b9b8a:	4601      	mov	r1, r0
   b9b8c:	4798      	blx	r3
	    _M_manager = nullptr;
   b9b8e:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9b90:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9b94:	bd10      	pop	{r4, pc}

000b9b96 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9b96:	b510      	push	{r4, lr}
	if (_M_manager)
   b9b98:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9b9a:	4604      	mov	r4, r0
	if (_M_manager)
   b9b9c:	b12b      	cbz	r3, b9baa <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9b9e:	2203      	movs	r2, #3
   b9ba0:	4601      	mov	r1, r0
   b9ba2:	4798      	blx	r3
	    _M_manager = nullptr;
   b9ba4:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9ba6:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9baa:	bd10      	pop	{r4, pc}

000b9bac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b9bac:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b9bae:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b9bb0:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b9bb2:	2220      	movs	r2, #32
   b9bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b9bb8:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b9bba:	4a08      	ldr	r2, [pc, #32]	; (b9bdc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b9bbc:	9200      	str	r2, [sp, #0]
   b9bbe:	4908      	ldr	r1, [pc, #32]	; (b9be0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b9bc0:	aa02      	add	r2, sp, #8
   b9bc2:	2001      	movs	r0, #1
   b9bc4:	f7ff fbe0 	bl	b9388 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9bc8:	6820      	ldr	r0, [r4, #0]
   b9bca:	4906      	ldr	r1, [pc, #24]	; (b9be4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b9bcc:	8800      	ldrh	r0, [r0, #0]
   b9bce:	2300      	movs	r3, #0
   b9bd0:	4622      	mov	r2, r4
    }
   b9bd2:	b00a      	add	sp, #40	; 0x28
   b9bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9bd8:	f7ff b9d0 	b.w	b8f7c <hal_ble_gatt_client_discover_all_services>
   b9bdc:	000c1456 	.word	0x000c1456
   b9be0:	000c144b 	.word	0x000c144b
   b9be4:	000bb75d 	.word	0x000bb75d

000b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b9be8:	b510      	push	{r4, lr}
   b9bea:	3801      	subs	r0, #1
   b9bec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b9bf0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b9bf4:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b9bf6:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9bfa:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9bfc:	bf88      	it	hi
   b9bfe:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b9c02:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b9c06:	7803      	ldrb	r3, [r0, #0]
   b9c08:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b9c0c:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9c10:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9c12:	bf88      	it	hi
   b9c14:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b9c18:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b9c1a:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b9c1e:	d1e7      	bne.n	b9bf0 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b9c20:	bd10      	pop	{r4, pc}

000b9c22 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9c22:	b510      	push	{r4, lr}
   b9c24:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b9c26:	3058      	adds	r0, #88	; 0x58
   b9c28:	f7fa fb86 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b9c2c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b9c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9c34:	f7ff be02 	b.w	b983c <_ZN6StringD1Ev>

000b9c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b9c38:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b9c3a:	6803      	ldr	r3, [r0, #0]
   b9c3c:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b9c3e:	4605      	mov	r5, r0
   b9c40:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b9c42:	d008      	beq.n	b9c56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b9c44:	b111      	cbz	r1, b9c4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b9c46:	684b      	ldr	r3, [r1, #4]
   b9c48:	3301      	adds	r3, #1
   b9c4a:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b9c4c:	6828      	ldr	r0, [r5, #0]
   b9c4e:	b108      	cbz	r0, b9c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b9c50:	f7fa fbb0 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9c54:	602c      	str	r4, [r5, #0]
      }
   b9c56:	bd38      	pop	{r3, r4, r5, pc}

000b9c58 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9c58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9c5c:	b2da      	uxtb	r2, r3
   b9c5e:	2a09      	cmp	r2, #9
   b9c60:	d801      	bhi.n	b9c66 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b9c62:	4618      	mov	r0, r3
   b9c64:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b9c66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9c6a:	2b05      	cmp	r3, #5
   b9c6c:	d801      	bhi.n	b9c72 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9c6e:	3857      	subs	r0, #87	; 0x57
   b9c70:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b9c72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9c76:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9c78:	bf94      	ite	ls
   b9c7a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9c7c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b9c80:	4770      	bx	lr
	...

000b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9c84:	b510      	push	{r4, lr}
            locked_(false) {
   b9c86:	2300      	movs	r3, #0
   b9c88:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9c8a:	4b04      	ldr	r3, [pc, #16]	; (b9c9c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9c8c:	4604      	mov	r4, r0
   b9c8e:	6818      	ldr	r0, [r3, #0]
   b9c90:	f7ff fa2a 	bl	b90e8 <os_mutex_recursive_lock>
        locked_ = true;
   b9c94:	2301      	movs	r3, #1
   b9c96:	7023      	strb	r3, [r4, #0]
    }
   b9c98:	4620      	mov	r0, r4
   b9c9a:	bd10      	pop	{r4, pc}
   b9c9c:	2003e670 	.word	0x2003e670

000b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9ca0:	b510      	push	{r4, lr}
        if (locked_) {
   b9ca2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b9ca4:	4604      	mov	r4, r0
        if (locked_) {
   b9ca6:	b11b      	cbz	r3, b9cb0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9ca8:	4b02      	ldr	r3, [pc, #8]	; (b9cb4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9caa:	6818      	ldr	r0, [r3, #0]
   b9cac:	f7ff fa24 	bl	b90f8 <os_mutex_recursive_unlock>
    }
   b9cb0:	4620      	mov	r0, r4
   b9cb2:	bd10      	pop	{r4, pc}
   b9cb4:	2003e670 	.word	0x2003e670

000b9cb8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9cb8:	b082      	sub	sp, #8
   b9cba:	4603      	mov	r3, r0
    address_ = addr;
   b9cbc:	6808      	ldr	r0, [r1, #0]
   b9cbe:	6849      	ldr	r1, [r1, #4]
   b9cc0:	466a      	mov	r2, sp
   b9cc2:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b9cc4:	466a      	mov	r2, sp
   b9cc6:	ca03      	ldmia	r2!, {r0, r1}
   b9cc8:	6018      	str	r0, [r3, #0]
}
   b9cca:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9ccc:	6059      	str	r1, [r3, #4]
}
   b9cce:	b002      	add	sp, #8
   b9cd0:	4770      	bx	lr

000b9cd2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b9cd2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b9cd4:	7982      	ldrb	r2, [r0, #6]
   b9cd6:	798b      	ldrb	r3, [r1, #6]
   b9cd8:	429a      	cmp	r2, r3
   b9cda:	d106      	bne.n	b9cea <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9cdc:	2206      	movs	r2, #6
   b9cde:	f004 f958 	bl	bdf92 <memcmp>
   b9ce2:	fab0 f080 	clz	r0, r0
   b9ce6:	0940      	lsrs	r0, r0, #5
}
   b9ce8:	bd08      	pop	{r3, pc}
    return false;
   b9cea:	2000      	movs	r0, #0
   b9cec:	e7fc      	b.n	b9ce8 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b9cee <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b9cee:	f04f 33ff 	mov.w	r3, #4294967295
   b9cf2:	6003      	str	r3, [r0, #0]
   b9cf4:	8083      	strh	r3, [r0, #4]
}
   b9cf6:	2000      	movs	r0, #0
   b9cf8:	4770      	bx	lr

000b9cfa <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b9cfa:	b508      	push	{r3, lr}
   b9cfc:	4602      	mov	r2, r0
        : address_{} {
   b9cfe:	2100      	movs	r1, #0
   b9d00:	6001      	str	r1, [r0, #0]
   b9d02:	6041      	str	r1, [r0, #4]
    clear();
   b9d04:	f7ff fff3 	bl	b9cee <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9d08:	7191      	strb	r1, [r2, #6]
}
   b9d0a:	4610      	mov	r0, r2
   b9d0c:	bd08      	pop	{r3, pc}
	...

000b9d10 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b9d10:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b9d12:	2301      	movs	r3, #1
   b9d14:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9d16:	4b05      	ldr	r3, [pc, #20]	; (b9d2c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b9d18:	4602      	mov	r2, r0
   b9d1a:	f103 0110 	add.w	r1, r3, #16
   b9d1e:	f853 4b04 	ldr.w	r4, [r3], #4
   b9d22:	f842 4b04 	str.w	r4, [r2], #4
   b9d26:	428b      	cmp	r3, r1
   b9d28:	d1f9      	bne.n	b9d1e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b9d2a:	bd10      	pop	{r4, pc}
   b9d2c:	000c16b2 	.word	0x000c16b2

000b9d30 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9d30:	7c0b      	ldrb	r3, [r1, #16]
   b9d32:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b9d36:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9d38:	d10d      	bne.n	b9d56 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b9d3a:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9d3c:	4b0c      	ldr	r3, [pc, #48]	; (b9d70 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b9d3e:	4602      	mov	r2, r0
   b9d40:	f103 0410 	add.w	r4, r3, #16
   b9d44:	f853 5b04 	ldr.w	r5, [r3], #4
   b9d48:	f842 5b04 	str.w	r5, [r2], #4
   b9d4c:	42a3      	cmp	r3, r4
   b9d4e:	d1f9      	bne.n	b9d44 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b9d50:	880b      	ldrh	r3, [r1, #0]
   b9d52:	8183      	strh	r3, [r0, #12]
}
   b9d54:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b9d56:	2301      	movs	r3, #1
   b9d58:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9d5a:	f101 0210 	add.w	r2, r1, #16
   b9d5e:	4603      	mov	r3, r0
   b9d60:	f851 4b04 	ldr.w	r4, [r1], #4
   b9d64:	f843 4b04 	str.w	r4, [r3], #4
   b9d68:	4291      	cmp	r1, r2
   b9d6a:	d1f9      	bne.n	b9d60 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b9d6c:	e7f2      	b.n	b9d54 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b9d6e:	bf00      	nop
   b9d70:	000c16b2 	.word	0x000c16b2

000b9d74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9d74:	b510      	push	{r4, lr}
    if (uuid128) {
   b9d76:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9d78:	4604      	mov	r4, r0
    if (uuid128) {
   b9d7a:	b1b1      	cbz	r1, b9daa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9d7c:	2a01      	cmp	r2, #1
   b9d7e:	f101 0210 	add.w	r2, r1, #16
   b9d82:	d10a      	bne.n	b9d9a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9d84:	4601      	mov	r1, r0
   b9d86:	f853 0b04 	ldr.w	r0, [r3], #4
   b9d8a:	f841 0b04 	str.w	r0, [r1], #4
   b9d8e:	4293      	cmp	r3, r2
   b9d90:	d1f9      	bne.n	b9d86 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b9d92:	2301      	movs	r3, #1
   b9d94:	6123      	str	r3, [r4, #16]
}
   b9d96:	4620      	mov	r0, r4
   b9d98:	bd10      	pop	{r4, pc}
   b9d9a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9d9c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9da0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9da4:	429a      	cmp	r2, r3
   b9da6:	d1f9      	bne.n	b9d9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9da8:	e7f3      	b.n	b9d92 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9daa:	2210      	movs	r2, #16
   b9dac:	f004 f929 	bl	be002 <memset>
   b9db0:	e7f1      	b.n	b9d96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b9db2 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b9db2:	b538      	push	{r3, r4, r5, lr}
   b9db4:	4604      	mov	r4, r0
   b9db6:	460d      	mov	r5, r1
        : BleUuid() {
   b9db8:	f7ff ffaa 	bl	b9d10 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b9dbc:	2300      	movs	r3, #0
   b9dbe:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9dc0:	81a5      	strh	r5, [r4, #12]
}
   b9dc2:	4620      	mov	r0, r4
   b9dc4:	bd38      	pop	{r3, r4, r5, pc}

000b9dc6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9dc6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9dc8:	6902      	ldr	r2, [r0, #16]
   b9dca:	690b      	ldr	r3, [r1, #16]
   b9dcc:	429a      	cmp	r2, r3
   b9dce:	d106      	bne.n	b9dde <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9dd0:	2210      	movs	r2, #16
   b9dd2:	f004 f8de 	bl	bdf92 <memcmp>
   b9dd6:	fab0 f080 	clz	r0, r0
   b9dda:	0940      	lsrs	r0, r0, #5
}
   b9ddc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9dde:	2000      	movs	r0, #0
   b9de0:	e7fc      	b.n	b9ddc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b9de4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b9de4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b9de6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b9dea:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9dec:	4b34      	ldr	r3, [pc, #208]	; (b9ec0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b9dee:	460c      	mov	r4, r1
   b9df0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9df2:	4602      	mov	r2, r0
   b9df4:	f103 0110 	add.w	r1, r3, #16
   b9df8:	f853 0b04 	ldr.w	r0, [r3], #4
   b9dfc:	f842 0b04 	str.w	r0, [r2], #4
   b9e00:	428b      	cmp	r3, r1
   b9e02:	d1f9      	bne.n	b9df8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b9e04:	b344      	cbz	r4, b9e58 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b9e06:	2124      	movs	r1, #36	; 0x24
   b9e08:	4620      	mov	r0, r4
   b9e0a:	f004 f9dd 	bl	be1c8 <strnlen>
   b9e0e:	2804      	cmp	r0, #4
   b9e10:	f04f 0500 	mov.w	r5, #0
   b9e14:	d123      	bne.n	b9e5e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b9e16:	f8ad 5004 	strh.w	r5, [sp, #4]
   b9e1a:	af01      	add	r7, sp, #4
   b9e1c:	1ca5      	adds	r5, r4, #2
   b9e1e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b9e20:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b9e24:	f7ff ff18 	bl	b9c58 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9e28:	f1b0 0800 	subs.w	r8, r0, #0
   b9e2c:	db12      	blt.n	b9e54 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b9e2e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b9e32:	f7ff ff11 	bl	b9c58 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b9e36:	2800      	cmp	r0, #0
   b9e38:	db0c      	blt.n	b9e54 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9e3a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9e3c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9e40:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9e42:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9e46:	d1eb      	bne.n	b9e20 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9e48:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9e4c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9e4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9e52:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9e54:	2300      	movs	r3, #0
   b9e56:	6133      	str	r3, [r6, #16]
}
   b9e58:	b002      	add	sp, #8
   b9e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9e5e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9e62:	2124      	movs	r1, #36	; 0x24
   b9e64:	4620      	mov	r0, r4
   b9e66:	f004 f9af 	bl	be1c8 <strnlen>
   b9e6a:	42a8      	cmp	r0, r5
   b9e6c:	d807      	bhi.n	b9e7e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9e6e:	4642      	mov	r2, r8
   b9e70:	2100      	movs	r1, #0
   b9e72:	4630      	mov	r0, r6
}
   b9e74:	b002      	add	sp, #8
   b9e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9e7a:	f004 b8c2 	b.w	be002 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9e7e:	f1b8 0f00 	cmp.w	r8, #0
   b9e82:	d0e9      	beq.n	b9e58 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9e84:	5d60      	ldrb	r0, [r4, r5]
   b9e86:	f7ff fee7 	bl	b9c58 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9e8a:	0603      	lsls	r3, r0, #24
   b9e8c:	d415      	bmi.n	b9eba <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9e8e:	0100      	lsls	r0, r0, #4
   b9e90:	f108 38ff 	add.w	r8, r8, #4294967295
   b9e94:	b2c7      	uxtb	r7, r0
   b9e96:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9e9a:	2124      	movs	r1, #36	; 0x24
   b9e9c:	4620      	mov	r0, r4
   b9e9e:	f004 f993 	bl	be1c8 <strnlen>
   b9ea2:	3501      	adds	r5, #1
   b9ea4:	42a8      	cmp	r0, r5
   b9ea6:	d908      	bls.n	b9eba <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9ea8:	5d60      	ldrb	r0, [r4, r5]
   b9eaa:	f7ff fed5 	bl	b9c58 <_ZN8particle11hexToNibbleEc>
   b9eae:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9eb0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b9eb2:	bfa4      	itt	ge
   b9eb4:	4338      	orrge	r0, r7
   b9eb6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9eba:	3501      	adds	r5, #1
   b9ebc:	e7d1      	b.n	b9e62 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9ebe:	bf00      	nop
   b9ec0:	000c16b2 	.word	0x000c16b2

000b9ec4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9ec4:	b513      	push	{r0, r1, r4, lr}
   b9ec6:	4604      	mov	r4, r0
   b9ec8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9eca:	f7ff ff21 	bl	b9d10 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9ece:	4620      	mov	r0, r4
   b9ed0:	9901      	ldr	r1, [sp, #4]
   b9ed2:	f7ff ff87 	bl	b9de4 <_ZN8particle7BleUuid9constructEPKc>
}
   b9ed6:	4620      	mov	r0, r4
   b9ed8:	b002      	add	sp, #8
   b9eda:	bd10      	pop	{r4, pc}

000b9edc <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b9edc:	b510      	push	{r4, lr}
   b9ede:	f100 030f 	add.w	r3, r0, #15
   b9ee2:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b9ee4:	781c      	ldrb	r4, [r3, #0]
   b9ee6:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9eea:	4283      	cmp	r3, r0
   b9eec:	f103 33ff 	add.w	r3, r3, #4294967295
   b9ef0:	d1f8      	bne.n	b9ee4 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b9ef2:	bd10      	pop	{r4, pc}

000b9ef4 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b9ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ef8:	461f      	mov	r7, r3
   b9efa:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b9efc:	460d      	mov	r5, r1
   b9efe:	2900      	cmp	r1, #0
   b9f00:	d05b      	beq.n	b9fba <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b9f02:	b1da      	cbz	r2, b9f3c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b9f04:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b9f08:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b9f0a:	f1b8 0f00 	cmp.w	r8, #0
   b9f0e:	d119      	bne.n	b9f44 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9f10:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b9f12:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9f16:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9f18:	aa05      	add	r2, sp, #20
   b9f1a:	2102      	movs	r1, #2
   b9f1c:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9f1e:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9f22:	f7ff fe61 	bl	b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b9f26:	2c04      	cmp	r4, #4
   b9f28:	bf28      	it	cs
   b9f2a:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b9f2c:	4622      	mov	r2, r4
   b9f2e:	a905      	add	r1, sp, #20
   b9f30:	4628      	mov	r0, r5
   b9f32:	f004 f83e 	bl	bdfb2 <memcpy>
        buf[len++] = '\0';
   b9f36:	f805 8004 	strb.w	r8, [r5, r4]
   b9f3a:	1c62      	adds	r2, r4, #1
}
   b9f3c:	4610      	mov	r0, r2
   b9f3e:	b00e      	add	sp, #56	; 0x38
   b9f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b9f44:	a901      	add	r1, sp, #4
   b9f46:	f7ff ffc9 	bl	b9edc <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9f4a:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9f4c:	b17f      	cbz	r7, b9f6e <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9f4e:	2110      	movs	r1, #16
   b9f50:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9f52:	f7ff fe49 	bl	b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b9f56:	2c24      	cmp	r4, #36	; 0x24
   b9f58:	bf28      	it	cs
   b9f5a:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9f5c:	4622      	mov	r2, r4
   b9f5e:	a905      	add	r1, sp, #20
   b9f60:	4628      	mov	r0, r5
   b9f62:	f004 f826 	bl	bdfb2 <memcpy>
    buf[len++] = '\0';
   b9f66:	2300      	movs	r3, #0
   b9f68:	552b      	strb	r3, [r5, r4]
   b9f6a:	1c62      	adds	r2, r4, #1
    return len;
   b9f6c:	e7e6      	b.n	b9f3c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b9f6e:	2104      	movs	r1, #4
   b9f70:	eb0d 0001 	add.w	r0, sp, r1
   b9f74:	f7ff fe38 	bl	b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9f78:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9f7a:	f10d 021d 	add.w	r2, sp, #29
   b9f7e:	2102      	movs	r1, #2
   b9f80:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b9f82:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9f86:	f7ff fe2f 	bl	b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9f8a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b9f8e:	2102      	movs	r1, #2
   b9f90:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b9f94:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9f98:	f7ff fe26 	bl	b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9f9c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b9fa0:	2102      	movs	r1, #2
   b9fa2:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b9fa4:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9fa8:	f7ff fe1e 	bl	b9be8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b9fac:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9fb0:	aa0b      	add	r2, sp, #44	; 0x2c
   b9fb2:	2106      	movs	r1, #6
   b9fb4:	f10d 000e 	add.w	r0, sp, #14
   b9fb8:	e7cb      	b.n	b9f52 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b9fba:	460a      	mov	r2, r1
   b9fbc:	e7be      	b.n	b9f3c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b9fbe <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b9fbe:	b510      	push	{r4, lr}
   b9fc0:	b08a      	sub	sp, #40	; 0x28
   b9fc2:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b9fc4:	2300      	movs	r3, #0
   b9fc6:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b9fc8:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b9fca:	4669      	mov	r1, sp
   b9fcc:	f7ff ff92 	bl	b9ef4 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b9fd0:	4669      	mov	r1, sp
   b9fd2:	4620      	mov	r0, r4
   b9fd4:	f7ff fc7d 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9fd8:	4620      	mov	r0, r4
   b9fda:	b00a      	add	sp, #40	; 0x28
   b9fdc:	bd10      	pop	{r4, pc}

000b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b9fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9fe0:	4605      	mov	r5, r0
   b9fe2:	4616      	mov	r6, r2
   b9fe4:	461f      	mov	r7, r3
   b9fe6:	460a      	mov	r2, r1
   b9fe8:	ab01      	add	r3, sp, #4
   b9fea:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9fee:	f7ff fd7b 	bl	b9ae8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b9ff2:	f030 0402 	bics.w	r4, r0, #2
   b9ff6:	d00c      	beq.n	ba012 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b9ff8:	1e84      	subs	r4, r0, #2
   b9ffa:	42bc      	cmp	r4, r7
   b9ffc:	bf28      	it	cs
   b9ffe:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   ba000:	b13e      	cbz	r6, ba012 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   ba002:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   ba004:	682b      	ldr	r3, [r5, #0]
   ba006:	3102      	adds	r1, #2
   ba008:	4622      	mov	r2, r4
   ba00a:	4419      	add	r1, r3
   ba00c:	4630      	mov	r0, r6
   ba00e:	f003 ffd0 	bl	bdfb2 <memcpy>
}
   ba012:	4620      	mov	r0, r4
   ba014:	b003      	add	sp, #12
   ba016:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba018 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba01a:	4613      	mov	r3, r2
   ba01c:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba01e:	9201      	str	r2, [sp, #4]
   ba020:	460a      	mov	r2, r1
   ba022:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba024:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba026:	f7ff ffda 	bl	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   ba02a:	b940      	cbnz	r0, ba03e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba02c:	9b01      	ldr	r3, [sp, #4]
   ba02e:	4622      	mov	r2, r4
   ba030:	2109      	movs	r1, #9
   ba032:	4628      	mov	r0, r5
}
   ba034:	b003      	add	sp, #12
   ba036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba03a:	f7ff bfd0 	b.w	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   ba03e:	b003      	add	sp, #12
   ba040:	bd30      	pop	{r4, r5, pc}
	...

000ba044 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   ba044:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba046:	460c      	mov	r4, r1
   ba048:	b089      	sub	sp, #36	; 0x24
    String name;
   ba04a:	490c      	ldr	r1, [pc, #48]	; (ba07c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   ba04c:	4605      	mov	r5, r0
    String name;
   ba04e:	f7ff fc40 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   ba052:	221f      	movs	r2, #31
   ba054:	4669      	mov	r1, sp
   ba056:	4620      	mov	r0, r4
   ba058:	f7ff ffde 	bl	ba018 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   ba05c:	4606      	mov	r6, r0
   ba05e:	b150      	cbz	r0, ba076 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   ba060:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   ba062:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   ba064:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba068:	4628      	mov	r0, r5
   ba06a:	f7ff fcb1 	bl	b99d0 <_ZN6String6concatEc>
   ba06e:	b110      	cbz	r0, ba076 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   ba070:	3701      	adds	r7, #1
   ba072:	42be      	cmp	r6, r7
   ba074:	d1f6      	bne.n	ba064 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   ba076:	4628      	mov	r0, r5
   ba078:	b009      	add	sp, #36	; 0x24
   ba07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba07c:	000c0674 	.word	0x000c0674

000ba080 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   ba080:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   ba082:	460a      	mov	r2, r1
   ba084:	21ff      	movs	r1, #255	; 0xff
   ba086:	f7ff bfaa 	b.w	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000ba08a <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   ba08a:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   ba08c:	2302      	movs	r3, #2
   ba08e:	aa01      	add	r2, sp, #4
   ba090:	2119      	movs	r1, #25
   ba092:	f7ff ffa4 	bl	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   ba096:	b108      	cbz	r0, ba09c <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   ba098:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   ba09c:	b003      	add	sp, #12
   ba09e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba0a4 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   ba0a4:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   ba0a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba0aa:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   ba0ac:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   ba0ae:	8043      	strh	r3, [r0, #2]
   ba0b0:	220e      	movs	r2, #14
   ba0b2:	4629      	mov	r1, r5
   ba0b4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   ba0b6:	7105      	strb	r5, [r0, #4]
   ba0b8:	3006      	adds	r0, #6
   ba0ba:	f003 ffa2 	bl	be002 <memset>
   ba0be:	f104 0014 	add.w	r0, r4, #20
   ba0c2:	f7ff fe25 	bl	b9d10 <_ZN8particle7BleUuidC1Ev>
   ba0c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba0ca:	f7ff fe21 	bl	b9d10 <_ZN8particle7BleUuidC1Ev>
   ba0ce:	4904      	ldr	r1, [pc, #16]	; (ba0e0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   ba0d0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba0d4:	f7ff fbfd 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   ba0d8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   ba0da:	4620      	mov	r0, r4
   ba0dc:	bd38      	pop	{r3, r4, r5, pc}
   ba0de:	bf00      	nop
   ba0e0:	000c0674 	.word	0x000c0674

000ba0e4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   ba0e4:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   ba0e6:	680d      	ldr	r5, [r1, #0]
   ba0e8:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba0ea:	4601      	mov	r1, r0
   ba0ec:	f105 0028 	add.w	r0, r5, #40	; 0x28
   ba0f0:	f7ff fe69 	bl	b9dc6 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba0f4:	b140      	cbz	r0, ba108 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   ba0f6:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba0f8:	8aa2      	ldrh	r2, [r4, #20]
   ba0fa:	429a      	cmp	r2, r3
   ba0fc:	d805      	bhi.n	ba10a <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba0fe:	8ae0      	ldrh	r0, [r4, #22]
   ba100:	4298      	cmp	r0, r3
   ba102:	bf34      	ite	cc
   ba104:	2000      	movcc	r0, #0
   ba106:	2001      	movcs	r0, #1
    }
   ba108:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   ba10a:	2000      	movs	r0, #0
   ba10c:	e7fc      	b.n	ba108 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000ba10e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   ba10e:	b510      	push	{r4, lr}
    return data_ + size_;
   ba110:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   ba114:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   ba118:	4293      	cmp	r3, r2
   ba11a:	4618      	mov	r0, r3
   ba11c:	d006      	beq.n	ba12c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   ba11e:	6804      	ldr	r4, [r0, #0]
   ba120:	8824      	ldrh	r4, [r4, #0]
   ba122:	428c      	cmp	r4, r1
   ba124:	f103 0308 	add.w	r3, r3, #8
   ba128:	d1f6      	bne.n	ba118 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   ba12a:	bd10      	pop	{r4, pc}
        return nullptr;
   ba12c:	2000      	movs	r0, #0
   ba12e:	e7fc      	b.n	ba12a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000ba130 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba130:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   ba132:	b570      	push	{r4, r5, r6, lr}
   ba134:	6003      	str	r3, [r0, #0]
   ba136:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba138:	2068      	movs	r0, #104	; 0x68
   ba13a:	f7f9 ffac 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba13e:	1e04      	subs	r4, r0, #0
   ba140:	f104 060c 	add.w	r6, r4, #12
   ba144:	d007      	beq.n	ba156 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   ba146:	2301      	movs	r3, #1
   ba148:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba14c:	4b04      	ldr	r3, [pc, #16]	; (ba160 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   ba14e:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba150:	4630      	mov	r0, r6
   ba152:	f7ff ffa7 	bl	ba0a4 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   ba156:	e9c5 6400 	strd	r6, r4, [r5]
}
   ba15a:	4628      	mov	r0, r5
   ba15c:	bd70      	pop	{r4, r5, r6, pc}
   ba15e:	bf00      	nop
   ba160:	000c1658 	.word	0x000c1658

000ba164 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   ba164:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   ba166:	680c      	ldr	r4, [r1, #0]
   ba168:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   ba16a:	4606      	mov	r6, r0
    return impl()->charUUID();
   ba16c:	4605      	mov	r5, r0
   ba16e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba172:	6823      	ldr	r3, [r4, #0]
   ba174:	602b      	str	r3, [r5, #0]
}
   ba176:	4630      	mov	r0, r6
   ba178:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba17c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   ba17c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba17e:	4606      	mov	r6, r0
   ba180:	b085      	sub	sp, #20
   ba182:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   ba184:	460d      	mov	r5, r1
   ba186:	2900      	cmp	r1, #0
   ba188:	d050      	beq.n	ba22c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   ba18a:	2a00      	cmp	r2, #0
   ba18c:	d04e      	beq.n	ba22c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   ba18e:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   ba190:	7823      	ldrb	r3, [r4, #0]
   ba192:	2af4      	cmp	r2, #244	; 0xf4
   ba194:	bf28      	it	cs
   ba196:	22f4      	movcs	r2, #244	; 0xf4
   ba198:	b343      	cbz	r3, ba1ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   ba19a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   ba19c:	0798      	lsls	r0, r3, #30
   ba19e:	d509      	bpl.n	ba1b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   ba1a0:	89a0      	ldrh	r0, [r4, #12]
   ba1a2:	9203      	str	r2, [sp, #12]
   ba1a4:	2300      	movs	r3, #0
   ba1a6:	f7fe fedf 	bl	b8f68 <hal_ble_gatt_server_set_characteristic_value>
   ba1aa:	2800      	cmp	r0, #0
   ba1ac:	9a03      	ldr	r2, [sp, #12]
   ba1ae:	da03      	bge.n	ba1b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   ba1b0:	b005      	add	sp, #20
   ba1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   ba1b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba1b8:	6834      	ldr	r4, [r6, #0]
   ba1ba:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   ba1bc:	06d9      	lsls	r1, r3, #27
   ba1be:	d509      	bpl.n	ba1d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   ba1c0:	2f01      	cmp	r7, #1
   ba1c2:	d007      	beq.n	ba1d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba1c4:	89a0      	ldrh	r0, [r4, #12]
   ba1c6:	2300      	movs	r3, #0
   ba1c8:	4629      	mov	r1, r5
}
   ba1ca:	b005      	add	sp, #20
   ba1cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba1d0:	f7fe bf2e 	b.w	b9030 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   ba1d4:	069b      	lsls	r3, r3, #26
   ba1d6:	d5eb      	bpl.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba1d8:	2f02      	cmp	r7, #2
   ba1da:	d0e9      	beq.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba1dc:	89a0      	ldrh	r0, [r4, #12]
   ba1de:	2300      	movs	r3, #0
   ba1e0:	4629      	mov	r1, r5
}
   ba1e2:	b005      	add	sp, #20
   ba1e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba1e8:	f7fe bf2c 	b.w	b9044 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba1ec:	8860      	ldrh	r0, [r4, #2]
   ba1ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba1f2:	4288      	cmp	r0, r1
   ba1f4:	d01c      	beq.n	ba230 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba1f6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba1f8:	074e      	lsls	r6, r1, #29
   ba1fa:	d501      	bpl.n	ba200 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba1fc:	2f01      	cmp	r7, #1
   ba1fe:	d104      	bne.n	ba20a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba200:	070b      	lsls	r3, r1, #28
   ba202:	d409      	bmi.n	ba218 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba204:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba208:	e7d2      	b.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba20a:	89a1      	ldrh	r1, [r4, #12]
   ba20c:	9300      	str	r3, [sp, #0]
   ba20e:	4613      	mov	r3, r2
   ba210:	462a      	mov	r2, r5
   ba212:	f7fe fed1 	bl	b8fb8 <hal_ble_gatt_client_write_without_response>
   ba216:	e7cb      	b.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba218:	2f02      	cmp	r7, #2
   ba21a:	d0f3      	beq.n	ba204 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba21c:	2300      	movs	r3, #0
   ba21e:	89a1      	ldrh	r1, [r4, #12]
   ba220:	9300      	str	r3, [sp, #0]
   ba222:	4613      	mov	r3, r2
   ba224:	462a      	mov	r2, r5
   ba226:	f7fe febd 	bl	b8fa4 <hal_ble_gatt_client_write_with_response>
   ba22a:	e7c1      	b.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba22c:	4802      	ldr	r0, [pc, #8]	; (ba238 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba22e:	e7bf      	b.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba230:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba234:	e7bc      	b.n	ba1b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba236:	bf00      	nop
   ba238:	fffffef2 	.word	0xfffffef2

000ba23c <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   ba23c:	b510      	push	{r4, lr}
   ba23e:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba240:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   ba242:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba244:	bb52      	cbnz	r2, ba29c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   ba246:	885c      	ldrh	r4, [r3, #2]
   ba248:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba24c:	4284      	cmp	r4, r0
   ba24e:	d025      	beq.n	ba29c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba250:	8a18      	ldrh	r0, [r3, #16]
   ba252:	b330      	cbz	r0, ba2a2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   ba254:	e9cd 2203 	strd	r2, r2, [sp, #12]
   ba258:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   ba25a:	4a13      	ldr	r2, [pc, #76]	; (ba2a8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   ba25c:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   ba25e:	4a13      	ldr	r2, [pc, #76]	; (ba2ac <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   ba260:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   ba264:	885a      	ldrh	r2, [r3, #2]
   ba266:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   ba26a:	8a1a      	ldrh	r2, [r3, #16]
   ba26c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   ba270:	899a      	ldrh	r2, [r3, #12]
   ba272:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   ba276:	b159      	cbz	r1, ba290 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   ba278:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   ba27a:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   ba27c:	bf44      	itt	mi
   ba27e:	2202      	movmi	r2, #2
   ba280:	9205      	strmi	r2, [sp, #20]
   ba282:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   ba284:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   ba286:	bf42      	ittt	mi
   ba288:	9b05      	ldrmi	r3, [sp, #20]
   ba28a:	f043 0301 	orrmi.w	r3, r3, #1
   ba28e:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   ba290:	2100      	movs	r1, #0
   ba292:	4668      	mov	r0, sp
   ba294:	f7fe fec2 	bl	b901c <hal_ble_gatt_client_configure_cccd>
}
   ba298:	b006      	add	sp, #24
   ba29a:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba29c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba2a0:	e7fa      	b.n	ba298 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba2a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba2a6:	e7f7      	b.n	ba298 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   ba2a8:	00180003 	.word	0x00180003
   ba2ac:	000ba481 	.word	0x000ba481

000ba2b0 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   ba2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba2b2:	2600      	movs	r6, #0
   ba2b4:	6006      	str	r6, [r0, #0]
   ba2b6:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba2b8:	2028      	movs	r0, #40	; 0x28
   ba2ba:	f7f9 feec 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba2be:	1e04      	subs	r4, r0, #0
   ba2c0:	f104 070c 	add.w	r7, r4, #12
   ba2c4:	d00a      	beq.n	ba2dc <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba2c6:	2301      	movs	r3, #1
   ba2c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba2cc:	4b05      	ldr	r3, [pc, #20]	; (ba2e4 <_ZN8particle10BleServiceC1Ev+0x34>)
   ba2ce:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   ba2d0:	4638      	mov	r0, r7
   ba2d2:	f7ff fd1d 	bl	b9d10 <_ZN8particle7BleUuidC1Ev>
   ba2d6:	6226      	str	r6, [r4, #32]
   ba2d8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   ba2dc:	e9c5 7400 	strd	r7, r4, [r5]
}
   ba2e0:	4628      	mov	r0, r5
   ba2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba2e4:	000c1674 	.word	0x000c1674

000ba2e8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba2e8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba2ea:	2500      	movs	r5, #0
   ba2ec:	6005      	str	r5, [r0, #0]
   ba2ee:	4606      	mov	r6, r0
   ba2f0:	2030      	movs	r0, #48	; 0x30
   ba2f2:	f7f9 fed0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba2f6:	4604      	mov	r4, r0
   ba2f8:	b188      	cbz	r0, ba31e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba2fa:	2301      	movs	r3, #1
   ba2fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba300:	4b09      	ldr	r3, [pc, #36]	; (ba328 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba302:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba304:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba308:	8183      	strh	r3, [r0, #12]
   ba30a:	300e      	adds	r0, #14
   ba30c:	f7ff fcf5 	bl	b9cfa <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba310:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba314:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba318:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba31c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba31e:	6074      	str	r4, [r6, #4]
   ba320:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba322:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba324:	4630      	mov	r0, r6
   ba326:	bd70      	pop	{r4, r5, r6, pc}
   ba328:	000c1690 	.word	0x000c1690

000ba32c <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   ba32c:	b513      	push	{r0, r1, r4, lr}
   ba32e:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba330:	a801      	add	r0, sp, #4
   ba332:	f7ff fca7 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba336:	6823      	ldr	r3, [r4, #0]
   ba338:	881c      	ldrh	r4, [r3, #0]
   ba33a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba33e:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   ba340:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba342:	bf18      	it	ne
   ba344:	2401      	movne	r4, #1
    WiringBleLock lk;
   ba346:	f7ff fcab 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba34a:	4620      	mov	r0, r4
   ba34c:	b002      	add	sp, #8
   ba34e:	bd10      	pop	{r4, pc}

000ba350 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   ba350:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba352:	4605      	mov	r5, r0
   ba354:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba356:	a801      	add	r0, sp, #4
   ba358:	f7ff fc94 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba35c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba35e:	6823      	ldr	r3, [r4, #0]
   ba360:	f8c2 3002 	str.w	r3, [r2, #2]
   ba364:	6863      	ldr	r3, [r4, #4]
   ba366:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   ba36a:	a801      	add	r0, sp, #4
   ba36c:	f7ff fc98 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   ba370:	b003      	add	sp, #12
   ba372:	bd30      	pop	{r4, r5, pc}

000ba374 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba374:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba376:	460d      	mov	r5, r1
   ba378:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba37a:	a801      	add	r0, sp, #4
   ba37c:	f7ff fc82 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
   ba380:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba382:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba386:	6023      	str	r3, [r4, #0]
   ba388:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba38c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba38e:	a801      	add	r0, sp, #4
   ba390:	f7ff fc86 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba394:	4620      	mov	r0, r4
   ba396:	b003      	add	sp, #12
   ba398:	bd30      	pop	{r4, r5, pc}

000ba39a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba39a:	b530      	push	{r4, r5, lr}
   ba39c:	4605      	mov	r5, r0
   ba39e:	b087      	sub	sp, #28
   ba3a0:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba3a2:	a801      	add	r0, sp, #4
   ba3a4:	f7ff fc6e 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba3a8:	682a      	ldr	r2, [r5, #0]
   ba3aa:	6823      	ldr	r3, [r4, #0]
   ba3ac:	8812      	ldrh	r2, [r2, #0]
   ba3ae:	881b      	ldrh	r3, [r3, #0]
   ba3b0:	429a      	cmp	r2, r3
   ba3b2:	d10d      	bne.n	ba3d0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba3b4:	4629      	mov	r1, r5
   ba3b6:	a802      	add	r0, sp, #8
   ba3b8:	f7ff ffdc 	bl	ba374 <_ZNK8particle13BlePeerDevice7addressEv>
   ba3bc:	4621      	mov	r1, r4
   ba3be:	a804      	add	r0, sp, #16
   ba3c0:	f7ff ffd8 	bl	ba374 <_ZNK8particle13BlePeerDevice7addressEv>
   ba3c4:	a904      	add	r1, sp, #16
   ba3c6:	a802      	add	r0, sp, #8
   ba3c8:	f7ff fc83 	bl	b9cd2 <_ZNK8particle10BleAddresseqERKS0_>
   ba3cc:	4604      	mov	r4, r0
   ba3ce:	b900      	cbnz	r0, ba3d2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba3d0:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba3d2:	a801      	add	r0, sp, #4
   ba3d4:	f7ff fc64 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba3d8:	4620      	mov	r0, r4
   ba3da:	b007      	add	sp, #28
   ba3dc:	bd30      	pop	{r4, r5, pc}
	...

000ba3e0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba3e0:	b510      	push	{r4, lr}
   ba3e2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba3e4:	2064      	movs	r0, #100	; 0x64
   ba3e6:	f7f9 fe56 	bl	b4096 <_Znwj>
   ba3ea:	b168      	cbz	r0, ba408 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba3ec:	2300      	movs	r3, #0
   ba3ee:	e9c0 3300 	strd	r3, r3, [r0]
   ba3f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba3f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba3fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba3fe:	6203      	str	r3, [r0, #32]
   ba400:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba402:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba404:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba406:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba408:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba40a:	b920      	cbnz	r0, ba416 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba40c:	4a0a      	ldr	r2, [pc, #40]	; (ba438 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba40e:	490b      	ldr	r1, [pc, #44]	; (ba43c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba410:	200a      	movs	r0, #10
   ba412:	f7fe ffb1 	bl	b9378 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba416:	2000      	movs	r0, #0
   ba418:	f7fe fd6a 	bl	b8ef0 <hal_ble_stack_init>
   ba41c:	b120      	cbz	r0, ba428 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba41e:	4a06      	ldr	r2, [pc, #24]	; (ba438 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba420:	4907      	ldr	r1, [pc, #28]	; (ba440 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba422:	200a      	movs	r0, #10
   ba424:	f7fe ffa8 	bl	b9378 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba428:	6821      	ldr	r1, [r4, #0]
   ba42a:	4806      	ldr	r0, [pc, #24]	; (ba444 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   ba42c:	2200      	movs	r2, #0
   ba42e:	f7fe fdeb 	bl	b9008 <hal_ble_set_callback_on_periph_link_events>
}
   ba432:	4620      	mov	r0, r4
   ba434:	bd10      	pop	{r4, pc}
   ba436:	bf00      	nop
   ba438:	000b8ea1 	.word	0x000b8ea1
   ba43c:	000c1434 	.word	0x000c1434
   ba440:	000c1472 	.word	0x000c1472
   ba444:	000bae8d 	.word	0x000bae8d

000ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   ba448:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   ba44a:	4c0a      	ldr	r4, [pc, #40]	; (ba474 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   ba44c:	7823      	ldrb	r3, [r4, #0]
   ba44e:	f3bf 8f5b 	dmb	ish
   ba452:	07db      	lsls	r3, r3, #31
   ba454:	d40c      	bmi.n	ba470 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba456:	4620      	mov	r0, r4
   ba458:	f7f9 fe30 	bl	b40bc <__cxa_guard_acquire>
   ba45c:	b140      	cbz	r0, ba470 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba45e:	4806      	ldr	r0, [pc, #24]	; (ba478 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba460:	f7ff ffbe 	bl	ba3e0 <_ZN8particle14BleLocalDeviceC1Ev>
   ba464:	4620      	mov	r0, r4
   ba466:	f7f9 fe2e 	bl	b40c6 <__cxa_guard_release>
   ba46a:	4804      	ldr	r0, [pc, #16]	; (ba47c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   ba46c:	f003 fd84 	bl	bdf78 <atexit>
    return instance;
}
   ba470:	4801      	ldr	r0, [pc, #4]	; (ba478 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba472:	bd10      	pop	{r4, pc}
   ba474:	2003e66c 	.word	0x2003e66c
   ba478:	2003e674 	.word	0x2003e674
   ba47c:	000ba791 	.word	0x000ba791

000ba480 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba480:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   ba482:	6803      	ldr	r3, [r0, #0]
   ba484:	3b09      	subs	r3, #9
   ba486:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba488:	b08d      	sub	sp, #52	; 0x34
   ba48a:	4604      	mov	r4, r0
   ba48c:	460d      	mov	r5, r1
    switch (event->type) {
   ba48e:	d811      	bhi.n	ba4b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   ba490:	f7ff ffda 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba494:	88a1      	ldrh	r1, [r4, #4]
   ba496:	6800      	ldr	r0, [r0, #0]
   ba498:	f7ff fe39 	bl	ba10e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   ba49c:	4603      	mov	r3, r0
   ba49e:	b958      	cbnz	r0, ba4b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   ba4a0:	2220      	movs	r2, #32
   ba4a2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   ba4a6:	4a0b      	ldr	r2, [pc, #44]	; (ba4d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   ba4a8:	9200      	str	r2, [sp, #0]
   ba4aa:	490b      	ldr	r1, [pc, #44]	; (ba4d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   ba4ac:	aa04      	add	r2, sp, #16
   ba4ae:	2032      	movs	r0, #50	; 0x32
   ba4b0:	f7fe ff6a 	bl	b9388 <log_message>
}
   ba4b4:	b00d      	add	sp, #52	; 0x34
   ba4b6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   ba4b8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   ba4ba:	2a00      	cmp	r2, #0
   ba4bc:	d0fa      	beq.n	ba4b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   ba4be:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba4c2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   ba4c6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   ba4ca:	6dac      	ldr	r4, [r5, #88]	; 0x58
   ba4cc:	aa04      	add	r2, sp, #16
   ba4ce:	a903      	add	r1, sp, #12
   ba4d0:	47a0      	blx	r4
}
   ba4d2:	e7ef      	b.n	ba4b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   ba4d4:	000c14b4 	.word	0x000c14b4
   ba4d8:	000c144b 	.word	0x000c144b

000ba4dc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   ba4dc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   ba4de:	2000      	movs	r0, #0
   ba4e0:	f7fe fd06 	bl	b8ef0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   ba4e4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba4e8:	bd08      	pop	{r3, pc}

000ba4ea <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   ba4ea:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   ba4ec:	2100      	movs	r1, #0
   ba4ee:	f7fe bd07 	b.w	b8f00 <hal_ble_gap_set_tx_power>
	...

000ba4f4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   ba4f4:	b570      	push	{r4, r5, r6, lr}
   ba4f6:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   ba4f8:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   ba4fa:	460e      	mov	r6, r1
   ba4fc:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   ba4fe:	f7ff fb3f 	bl	b9b80 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   ba502:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba506:	f7ff fb46 	bl	b9b96 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   ba50a:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   ba50e:	2200      	movs	r2, #0
   ba510:	4621      	mov	r1, r4
   ba512:	4803      	ldr	r0, [pc, #12]	; (ba520 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   ba514:	f7fe fd0c 	bl	b8f30 <hal_ble_gap_start_scan>
   ba518:	2800      	cmp	r0, #0
        return foundCount_;
   ba51a:	bfa8      	it	ge
   ba51c:	6960      	ldrge	r0, [r4, #20]
    }
   ba51e:	bd70      	pop	{r4, r5, r6, pc}
   ba520:	000bbe99 	.word	0x000bbe99

000ba524 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   ba524:	b510      	push	{r4, lr}
   ba526:	4604      	mov	r4, r0
    ::free(ptr);
   ba528:	6940      	ldr	r0, [r0, #20]
   ba52a:	f7ff f811 	bl	b9550 <free>
   ba52e:	68a0      	ldr	r0, [r4, #8]
   ba530:	f7ff f80e 	bl	b9550 <free>
   ba534:	4620      	mov	r0, r4
   ba536:	bd10      	pop	{r4, pc}

000ba538 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   ba538:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   ba53a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   ba53e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   ba542:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba546:	e9c0 2204 	strd	r2, r2, [r0, #16]
   ba54a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   ba54e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   ba552:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   ba556:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   ba55a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   ba55e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   ba562:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   ba566:	6202      	str	r2, [r0, #32]
   ba568:	6302      	str	r2, [r0, #48]	; 0x30
   ba56a:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   ba56e:	4770      	bx	lr

000ba570 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba570:	b530      	push	{r4, r5, lr}
   ba572:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   ba574:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba576:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba578:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba57a:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba57e:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   ba580:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba582:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   ba584:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   ba588:	e9cd 4401 	strd	r4, r4, [sp, #4]
   ba58c:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba58e:	f7fe fcc7 	bl	b8f20 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba592:	4621      	mov	r1, r4
   ba594:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   ba596:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba59a:	f7fe fcb9 	bl	b8f10 <hal_ble_gap_set_scan_parameters>
}
   ba59e:	b005      	add	sp, #20
   ba5a0:	bd30      	pop	{r4, r5, pc}

000ba5a2 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   ba5a2:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   ba5a4:	69d8      	ldr	r0, [r3, #28]
}
   ba5a6:	2800      	cmp	r0, #0
   ba5a8:	bfd4      	ite	le
   ba5aa:	2000      	movle	r0, #0
   ba5ac:	2001      	movgt	r0, #1
   ba5ae:	4770      	bx	lr

000ba5b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba5b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba5b2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba5b6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba5b8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ba5bc:	42ae      	cmp	r6, r5
   ba5be:	d004      	beq.n	ba5ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ba5c0:	4628      	mov	r0, r5
   ba5c2:	f7ff f93b 	bl	b983c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ba5c6:	3510      	adds	r5, #16
   ba5c8:	e7f8      	b.n	ba5bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba5ca:	6820      	ldr	r0, [r4, #0]
   ba5cc:	f7fe ffc0 	bl	b9550 <free>
}
   ba5d0:	4620      	mov	r0, r4
   ba5d2:	bd70      	pop	{r4, r5, r6, pc}

000ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba5d4:	b510      	push	{r4, lr}
   ba5d6:	4604      	mov	r4, r0
    ::free(ptr);
   ba5d8:	6800      	ldr	r0, [r0, #0]
   ba5da:	f7fe ffb9 	bl	b9550 <free>
}
   ba5de:	4620      	mov	r0, r4
   ba5e0:	bd10      	pop	{r4, pc}

000ba5e2 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   ba5e2:	b570      	push	{r4, r5, r6, lr}
   ba5e4:	4604      	mov	r4, r0
    ::free(ptr);
   ba5e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   ba5e8:	f7fe ffb2 	bl	b9550 <free>
   ba5ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
   ba5ee:	f7fe ffaf 	bl	b9550 <free>
    }
    ~BleScanFilter() = default;
   ba5f2:	f104 0538 	add.w	r5, r4, #56	; 0x38
   ba5f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba5fa:	f7ff ffeb 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   ba5fe:	4628      	mov	r0, r5
   ba600:	f7ff ffd6 	bl	ba5b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   ba604:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba608:	f7f9 fe96 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba60c:	f104 0018 	add.w	r0, r4, #24
   ba610:	f7f9 fe92 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba614:	e9d4 5300 	ldrd	r5, r3, [r4]
   ba618:	2624      	movs	r6, #36	; 0x24
   ba61a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba61e:	42ae      	cmp	r6, r5
   ba620:	d004      	beq.n	ba62c <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   ba622:	4628      	mov	r0, r5
   ba624:	f7ff ff7e 	bl	ba524 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   ba628:	3524      	adds	r5, #36	; 0x24
   ba62a:	e7f8      	b.n	ba61e <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   ba62c:	6820      	ldr	r0, [r4, #0]
   ba62e:	f7fe ff8f 	bl	b9550 <free>
   ba632:	4620      	mov	r0, r4
   ba634:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba638 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   ba638:	b530      	push	{r4, r5, lr}
   ba63a:	4615      	mov	r5, r2
   ba63c:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   ba63e:	460c      	mov	r4, r1
   ba640:	b179      	cbz	r1, ba662 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   ba642:	b172      	cbz	r2, ba662 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   ba644:	a801      	add	r0, sp, #4
   ba646:	f7ff ff77 	bl	ba538 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   ba64a:	4621      	mov	r1, r4
   ba64c:	462a      	mov	r2, r5
   ba64e:	a801      	add	r0, sp, #4
   ba650:	f7ff ff50 	bl	ba4f4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   ba654:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   ba656:	a801      	add	r0, sp, #4
   ba658:	f7ff ffc3 	bl	ba5e2 <_ZN8particle16BleScanDelegatorD1Ev>
}
   ba65c:	4620      	mov	r0, r4
   ba65e:	b01f      	add	sp, #124	; 0x7c
   ba660:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba662:	4c01      	ldr	r4, [pc, #4]	; (ba668 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   ba664:	e7fa      	b.n	ba65c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   ba666:	bf00      	nop
   ba668:	fffffef2 	.word	0xfffffef2

000ba66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba66c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   ba66e:	1e14      	subs	r4, r2, #0
   ba670:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba672:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   ba674:	db02      	blt.n	ba67c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   ba676:	1862      	adds	r2, r4, r1
   ba678:	429a      	cmp	r2, r3
   ba67a:	dd00      	ble.n	ba67e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   ba67c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   ba67e:	682a      	ldr	r2, [r5, #0]
   ba680:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   ba682:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   ba684:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba686:	1a52      	subs	r2, r2, r1
   ba688:	f003 fca1 	bl	bdfce <memmove>
    size_ -= n;
   ba68c:	686a      	ldr	r2, [r5, #4]
   ba68e:	1b12      	subs	r2, r2, r4
   ba690:	606a      	str	r2, [r5, #4]
}
   ba692:	bd38      	pop	{r3, r4, r5, pc}

000ba694 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   ba694:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba696:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   ba698:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba69a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba69c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   ba69e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba6a0:	f7f9 fcf9 	bl	b4096 <_Znwj>
   ba6a4:	b118      	cbz	r0, ba6ae <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   ba6a6:	682b      	ldr	r3, [r5, #0]
   ba6a8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba6aa:	686b      	ldr	r3, [r5, #4]
   ba6ac:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   ba6ae:	4b03      	ldr	r3, [pc, #12]	; (ba6bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   ba6b0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba6b2:	4b03      	ldr	r3, [pc, #12]	; (ba6c0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba6b4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba6b6:	60a3      	str	r3, [r4, #8]
      }
   ba6b8:	4620      	mov	r0, r4
   ba6ba:	bd38      	pop	{r3, r4, r5, pc}
   ba6bc:	000b9b29 	.word	0x000b9b29
   ba6c0:	000b9b41 	.word	0x000b9b41

000ba6c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   ba6c4:	680b      	ldr	r3, [r1, #0]
   ba6c6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   ba6c8:	b113      	cbz	r3, ba6d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   ba6ca:	685a      	ldr	r2, [r3, #4]
   ba6cc:	3201      	adds	r2, #1
   ba6ce:	605a      	str	r2, [r3, #4]
      }
   ba6d0:	4770      	bx	lr

000ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   ba6d2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba6d4:	f851 3b04 	ldr.w	r3, [r1], #4
   ba6d8:	4604      	mov	r4, r0
   ba6da:	f840 3b04 	str.w	r3, [r0], #4
   ba6de:	f7ff fff1 	bl	ba6c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   ba6e2:	6823      	ldr	r3, [r4, #0]
   ba6e4:	b90b      	cbnz	r3, ba6ea <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   ba6e6:	f7ff fa15 	bl	b9b14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   ba6ea:	4620      	mov	r0, r4
   ba6ec:	bd10      	pop	{r4, pc}

000ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba6ee:	b510      	push	{r4, lr}
   ba6f0:	f851 3b04 	ldr.w	r3, [r1], #4
   ba6f4:	4604      	mov	r4, r0
   ba6f6:	f840 3b04 	str.w	r3, [r0], #4
   ba6fa:	f7ff ffe3 	bl	ba6c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba6fe:	4620      	mov	r0, r4
   ba700:	bd10      	pop	{r4, pc}

000ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba702:	b510      	push	{r4, lr}
   ba704:	f851 3b04 	ldr.w	r3, [r1], #4
   ba708:	4604      	mov	r4, r0
   ba70a:	f840 3b04 	str.w	r3, [r0], #4
   ba70e:	f7ff ffd9 	bl	ba6c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba712:	4620      	mov	r0, r4
   ba714:	bd10      	pop	{r4, pc}

000ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   ba716:	b510      	push	{r4, lr}
   ba718:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   ba71a:	6800      	ldr	r0, [r0, #0]
   ba71c:	b108      	cbz	r0, ba722 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   ba71e:	f7f9 fe49 	bl	b43b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   ba722:	4620      	mov	r0, r4
   ba724:	bd10      	pop	{r4, pc}

000ba726 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   ba726:	b510      	push	{r4, lr}
   ba728:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba72a:	3004      	adds	r0, #4
   ba72c:	f7ff fff3 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba730:	4620      	mov	r0, r4
   ba732:	bd10      	pop	{r4, pc}

000ba734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba734:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba736:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba73a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba73c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba740:	42ae      	cmp	r6, r5
   ba742:	d004      	beq.n	ba74e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   ba744:	1d28      	adds	r0, r5, #4
   ba746:	f7ff ffe6 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba74a:	3508      	adds	r5, #8
   ba74c:	e7f8      	b.n	ba740 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba74e:	6820      	ldr	r0, [r4, #0]
   ba750:	f7fe fefe 	bl	b9550 <free>
}
   ba754:	4620      	mov	r0, r4
   ba756:	bd70      	pop	{r4, r5, r6, pc}

000ba758 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba758:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba75a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba75e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba760:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba764:	42ae      	cmp	r6, r5
   ba766:	d004      	beq.n	ba772 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   ba768:	1d28      	adds	r0, r5, #4
   ba76a:	f7ff ffd4 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba76e:	3508      	adds	r5, #8
   ba770:	e7f8      	b.n	ba764 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba772:	6820      	ldr	r0, [r4, #0]
   ba774:	f7fe feec 	bl	b9550 <free>
}
   ba778:	4620      	mov	r0, r4
   ba77a:	bd70      	pop	{r4, r5, r6, pc}

000ba77c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba77c:	b510      	push	{r4, lr}
   ba77e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   ba780:	3024      	adds	r0, #36	; 0x24
   ba782:	f7ff ffe9 	bl	ba758 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba786:	f104 0018 	add.w	r0, r4, #24
   ba78a:	f7ff ffd3 	bl	ba734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   ba78e:	bd10      	pop	{r4, pc}

000ba790 <__tcf_0>:
    static BleLocalDevice instance;
   ba790:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   ba792:	4b17      	ldr	r3, [pc, #92]	; (ba7f0 <__tcf_0+0x60>)
   ba794:	681c      	ldr	r4, [r3, #0]
   ba796:	b354      	cbz	r4, ba7ee <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   ba798:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba79c:	f7f9 fdcc 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba7a0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba7a4:	f7f9 fdc8 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba7a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba7ac:	f7f9 fdc4 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   ba7b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba7b4:	f7f9 fdc0 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba7b8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   ba7bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba7c0:	42ae      	cmp	r6, r5
   ba7c2:	d004      	beq.n	ba7ce <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   ba7c4:	1d28      	adds	r0, r5, #4
   ba7c6:	f7ff ffa6 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba7ca:	3508      	adds	r5, #8
   ba7cc:	e7f8      	b.n	ba7c0 <__tcf_0+0x30>
    ::free(ptr);
   ba7ce:	69a0      	ldr	r0, [r4, #24]
   ba7d0:	f7fe febe 	bl	b9550 <free>
    ~BleLocalDeviceImpl() = default;
   ba7d4:	f104 000c 	add.w	r0, r4, #12
   ba7d8:	f7ff ffbe 	bl	ba758 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba7dc:	4620      	mov	r0, r4
   ba7de:	f7ff ffa9 	bl	ba734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   ba7e2:	4620      	mov	r0, r4
   ba7e4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   ba7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba7ea:	f7f9 bc58 	b.w	b409e <_ZdlPvj>
   ba7ee:	bd70      	pop	{r4, r5, r6, pc}
   ba7f0:	2003e674 	.word	0x2003e674

000ba7f4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   ba7f4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba7f6:	b510      	push	{r4, lr}
      if (_M_empty())
   ba7f8:	b90a      	cbnz	r2, ba7fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   ba7fa:	f002 fd31 	bl	bd260 <_ZSt25__throw_bad_function_callv>
    }
   ba7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba802:	68c3      	ldr	r3, [r0, #12]
   ba804:	4718      	bx	r3

000ba806 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   ba80a:	2300      	movs	r3, #0
   ba80c:	e9c0 3300 	strd	r3, r3, [r0]
   ba810:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba812:	f8d1 8004 	ldr.w	r8, [r1, #4]
   ba816:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba818:	4605      	mov	r5, r0
   ba81a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba81c:	dd4a      	ble.n	ba8b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   ba81e:	ea4f 1008 	mov.w	r0, r8, lsl #4
   ba822:	f7fe fe8d 	bl	b9540 <malloc>
            if (!d) {
   ba826:	4606      	mov	r6, r0
   ba828:	2800      	cmp	r0, #0
   ba82a:	d043      	beq.n	ba8b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   ba82c:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   ba830:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   ba832:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   ba836:	d916      	bls.n	ba866 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   ba838:	4550      	cmp	r0, sl
   ba83a:	d215      	bcs.n	ba868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   ba83c:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   ba840:	f1a4 0910 	sub.w	r9, r4, #16
   ba844:	ebaa 0404 	sub.w	r4, sl, r4
   ba848:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   ba84a:	45d1      	cmp	r9, sl
   ba84c:	d01d      	beq.n	ba88a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   ba84e:	b11c      	cbz	r4, ba858 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   ba850:	4651      	mov	r1, sl
   ba852:	4620      	mov	r0, r4
   ba854:	f7ff f86e 	bl	b9934 <_ZN6StringC1EOS_>
                end->~T();
   ba858:	4650      	mov	r0, sl
   ba85a:	f7fe ffef 	bl	b983c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba85e:	f1aa 0a10 	sub.w	sl, sl, #16
   ba862:	3c10      	subs	r4, #16
   ba864:	e7f1      	b.n	ba84a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   ba866:	d010      	beq.n	ba88a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   ba868:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   ba86a:	45a2      	cmp	sl, r4
   ba86c:	d00d      	beq.n	ba88a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   ba86e:	f1b9 0f00 	cmp.w	r9, #0
   ba872:	d003      	beq.n	ba87c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   ba874:	4621      	mov	r1, r4
   ba876:	4648      	mov	r0, r9
   ba878:	f7ff f85c 	bl	b9934 <_ZN6StringC1EOS_>
                p->~T();
   ba87c:	4620      	mov	r0, r4
   ba87e:	f7fe ffdd 	bl	b983c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba882:	3410      	adds	r4, #16
   ba884:	f109 0910 	add.w	r9, r9, #16
   ba888:	e7ef      	b.n	ba86a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   ba88a:	6828      	ldr	r0, [r5, #0]
   ba88c:	f7fe fe60 	bl	b9550 <free>
        capacity_ = n;
   ba890:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   ba894:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba896:	e9d7 4300 	ldrd	r4, r3, [r7]
   ba89a:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   ba89e:	45a0      	cmp	r8, r4
   ba8a0:	d006      	beq.n	ba8b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   ba8a2:	4621      	mov	r1, r4
   ba8a4:	4630      	mov	r0, r6
   ba8a6:	f7ff f85f 	bl	b9968 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   ba8aa:	3410      	adds	r4, #16
   ba8ac:	3610      	adds	r6, #16
   ba8ae:	e7f6      	b.n	ba89e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   ba8b0:	687b      	ldr	r3, [r7, #4]
   ba8b2:	606b      	str	r3, [r5, #4]
}
   ba8b4:	4628      	mov	r0, r5
   ba8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ba8ba <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   ba8ba:	b530      	push	{r4, r5, lr}
   ba8bc:	b08d      	sub	sp, #52	; 0x34
   ba8be:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   ba8c0:	f100 0138 	add.w	r1, r0, #56	; 0x38
   ba8c4:	a801      	add	r0, sp, #4
   ba8c6:	f7ff ff9e 	bl	ba806 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   ba8ca:	9b02      	ldr	r3, [sp, #8]
   ba8cc:	2b00      	cmp	r3, #0
   ba8ce:	dd2f      	ble.n	ba930 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   ba8d0:	f104 0114 	add.w	r1, r4, #20
   ba8d4:	a804      	add	r0, sp, #16
   ba8d6:	f7ff fbb5 	bl	ba044 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   ba8da:	f104 0108 	add.w	r1, r4, #8
   ba8de:	a808      	add	r0, sp, #32
   ba8e0:	f7ff fbb0 	bl	ba044 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   ba8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba8e6:	9b06      	ldr	r3, [sp, #24]
   ba8e8:	4313      	orrs	r3, r2
   ba8ea:	d01f      	beq.n	ba92c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   ba8ec:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   ba8f0:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   ba8f4:	42ac      	cmp	r4, r5
   ba8f6:	d019      	beq.n	ba92c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   ba8f8:	a904      	add	r1, sp, #16
   ba8fa:	4620      	mov	r0, r4
   ba8fc:	f7ff f88a 	bl	b9a14 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba900:	b160      	cbz	r0, ba91c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   ba902:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   ba904:	a808      	add	r0, sp, #32
   ba906:	f7fe ff99 	bl	b983c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   ba90a:	a804      	add	r0, sp, #16
   ba90c:	f7fe ff96 	bl	b983c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   ba910:	a801      	add	r0, sp, #4
   ba912:	f7ff fe4d 	bl	ba5b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   ba916:	4620      	mov	r0, r4
   ba918:	b00d      	add	sp, #52	; 0x34
   ba91a:	bd30      	pop	{r4, r5, pc}
   ba91c:	4620      	mov	r0, r4
   ba91e:	a908      	add	r1, sp, #32
   ba920:	f7ff f878 	bl	b9a14 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba924:	3410      	adds	r4, #16
   ba926:	2800      	cmp	r0, #0
   ba928:	d0e4      	beq.n	ba8f4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   ba92a:	e7ea      	b.n	ba902 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   ba92c:	2400      	movs	r4, #0
   ba92e:	e7e9      	b.n	ba904 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   ba930:	2401      	movs	r4, #1
   ba932:	e7ed      	b.n	ba910 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000ba934 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   ba936:	2300      	movs	r3, #0
   ba938:	e9c0 3300 	strd	r3, r3, [r0]
   ba93c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba93e:	684f      	ldr	r7, [r1, #4]
   ba940:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba942:	4605      	mov	r5, r0
   ba944:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba946:	dd3e      	ble.n	ba9c6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   ba948:	00f8      	lsls	r0, r7, #3
   ba94a:	f7fe fdf9 	bl	b9540 <malloc>
            if (!d) {
   ba94e:	4604      	mov	r4, r0
   ba950:	b3c8      	cbz	r0, ba9c6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   ba952:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   ba956:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   ba958:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   ba95c:	d910      	bls.n	ba980 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba95e:	429c      	cmp	r4, r3
   ba960:	d20f      	bcs.n	ba982 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   ba962:	3b08      	subs	r3, #8
            dest += end - p - 1;
   ba964:	1a1a      	subs	r2, r3, r0
   ba966:	f1a0 0c08 	sub.w	ip, r0, #8
   ba96a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   ba96c:	459c      	cmp	ip, r3
   ba96e:	d018      	beq.n	ba9a2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   ba970:	b11a      	cbz	r2, ba97a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   ba972:	6819      	ldr	r1, [r3, #0]
   ba974:	6011      	str	r1, [r2, #0]
   ba976:	6859      	ldr	r1, [r3, #4]
   ba978:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   ba97a:	3b08      	subs	r3, #8
   ba97c:	3a08      	subs	r2, #8
   ba97e:	e7f5      	b.n	ba96c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   ba980:	d00f      	beq.n	ba9a2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   ba982:	4601      	mov	r1, r0
   ba984:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   ba986:	428b      	cmp	r3, r1
   ba988:	d00b      	beq.n	ba9a2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   ba98a:	b13a      	cbz	r2, ba99c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   ba98c:	f8d1 c000 	ldr.w	ip, [r1]
   ba990:	f8c2 c000 	str.w	ip, [r2]
   ba994:	f8d1 c004 	ldr.w	ip, [r1, #4]
   ba998:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   ba99c:	3108      	adds	r1, #8
   ba99e:	3208      	adds	r2, #8
   ba9a0:	e7f1      	b.n	ba986 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   ba9a2:	f7fe fdd5 	bl	b9550 <free>
        data_ = d;
   ba9a6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba9a8:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba9aa:	e9d6 3100 	ldrd	r3, r1, [r6]
   ba9ae:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   ba9b2:	4298      	cmp	r0, r3
   ba9b4:	d006      	beq.n	ba9c4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   ba9b6:	681a      	ldr	r2, [r3, #0]
   ba9b8:	6022      	str	r2, [r4, #0]
   ba9ba:	685a      	ldr	r2, [r3, #4]
   ba9bc:	6062      	str	r2, [r4, #4]
   ba9be:	3308      	adds	r3, #8
   ba9c0:	3408      	adds	r4, #8
   ba9c2:	e7f6      	b.n	ba9b2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   ba9c4:	6069      	str	r1, [r5, #4]
}
   ba9c6:	4628      	mov	r0, r5
   ba9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba9ca <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba9ca:	b570      	push	{r4, r5, r6, lr}
   ba9cc:	4604      	mov	r4, r0
        capacity_(0) {
   ba9ce:	2000      	movs	r0, #0
   ba9d0:	e9c4 0000 	strd	r0, r0, [r4]
   ba9d4:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba9d6:	684e      	ldr	r6, [r1, #4]
   ba9d8:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba9da:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba9dc:	dd12      	ble.n	baa04 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   ba9de:	0071      	lsls	r1, r6, #1
   ba9e0:	f7fe fdbe 	bl	b9560 <realloc>
            if (!d) {
   ba9e4:	b170      	cbz	r0, baa04 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   ba9e6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba9e8:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba9ea:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba9ee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   ba9f2:	429a      	cmp	r2, r3
   ba9f4:	d004      	beq.n	baa00 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   ba9f6:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba9fa:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   ba9fe:	e7f8      	b.n	ba9f2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   baa00:	686b      	ldr	r3, [r5, #4]
   baa02:	6063      	str	r3, [r4, #4]
}
   baa04:	4620      	mov	r0, r4
   baa06:	bd70      	pop	{r4, r5, r6, pc}

000baa08 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   baa08:	b510      	push	{r4, lr}
        if (!dismissed_) {
   baa0a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   baa0c:	4604      	mov	r4, r0
        if (!dismissed_) {
   baa0e:	b923      	cbnz	r3, baa1a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   baa10:	6803      	ldr	r3, [r0, #0]
   baa12:	6818      	ldr	r0, [r3, #0]
   baa14:	b108      	cbz	r0, baa1a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   baa16:	f7fe fd9b 	bl	b9550 <free>
            func_();
        }
    }
   baa1a:	4620      	mov	r0, r4
   baa1c:	bd10      	pop	{r4, pc}

000baa1e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   baa1e:	b510      	push	{r4, lr}
        if (!dismissed_) {
   baa20:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   baa22:	4604      	mov	r4, r0
        if (!dismissed_) {
   baa24:	b923      	cbnz	r3, baa30 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   baa26:	6803      	ldr	r3, [r0, #0]
   baa28:	6818      	ldr	r0, [r3, #0]
   baa2a:	b108      	cbz	r0, baa30 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   baa2c:	f7fe fd90 	bl	b9550 <free>
    }
   baa30:	4620      	mov	r0, r4
   baa32:	bd10      	pop	{r4, pc}

000baa34 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   baa34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   baa38:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   baa3c:	b08f      	sub	sp, #60	; 0x3c
   baa3e:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   baa40:	f1b8 0f00 	cmp.w	r8, #0
   baa44:	d072      	beq.n	bab2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   baa46:	6f05      	ldr	r5, [r0, #112]	; 0x70
   baa48:	2d00      	cmp	r5, #0
   baa4a:	d06f      	beq.n	bab2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   baa4c:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   baa50:	231f      	movs	r3, #31
   baa52:	2200      	movs	r2, #0
   baa54:	21ff      	movs	r1, #255	; 0xff
   baa56:	4648      	mov	r0, r9
   baa58:	f7ff fac1 	bl	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   baa5c:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   baa5e:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   baa60:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   baa62:	2200      	movs	r2, #0
   baa64:	4619      	mov	r1, r3
   baa66:	4638      	mov	r0, r7
   baa68:	f7ff fab9 	bl	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   baa6c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   baa6e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   baa70:	d006      	beq.n	baa80 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   baa72:	42ae      	cmp	r6, r5
   baa74:	d030      	beq.n	baad8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   baa76:	2400      	movs	r4, #0
    }
   baa78:	4620      	mov	r0, r4
   baa7a:	b00f      	add	sp, #60	; 0x3c
   baa7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   baa80:	4620      	mov	r0, r4
   baa82:	f7fe fd5d 	bl	b9540 <malloc>
            dismissed_(false) {
   baa86:	ab03      	add	r3, sp, #12
   baa88:	9304      	str	r3, [sp, #16]
   baa8a:	2300      	movs	r3, #0
   baa8c:	4604      	mov	r4, r0
   baa8e:	9003      	str	r0, [sp, #12]
   baa90:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   baa94:	b970      	cbnz	r0, baab4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   baa96:	2320      	movs	r3, #32
   baa98:	e9cd 3006 	strd	r3, r0, [sp, #24]
   baa9c:	4b24      	ldr	r3, [pc, #144]	; (bab30 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   baa9e:	9300      	str	r3, [sp, #0]
   baaa0:	4924      	ldr	r1, [pc, #144]	; (bab34 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   baaa2:	4603      	mov	r3, r0
   baaa4:	aa06      	add	r2, sp, #24
   baaa6:	2032      	movs	r0, #50	; 0x32
   baaa8:	f7fe fc6e 	bl	b9388 <log_message>
                    return false;
   baaac:	a804      	add	r0, sp, #16
   baaae:	f7ff ffab 	bl	baa08 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   baab2:	e7e1      	b.n	baa78 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   baab4:	4602      	mov	r2, r0
   baab6:	21ff      	movs	r1, #255	; 0xff
   baab8:	462b      	mov	r3, r5
   baaba:	4648      	mov	r0, r9
   baabc:	f7ff fa8f 	bl	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   baac0:	9803      	ldr	r0, [sp, #12]
   baac2:	462a      	mov	r2, r5
   baac4:	4641      	mov	r1, r8
   baac6:	f003 fa64 	bl	bdf92 <memcmp>
   baaca:	b118      	cbz	r0, baad4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   baacc:	a804      	add	r0, sp, #16
   baace:	f7ff ff9b 	bl	baa08 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   baad2:	e7ce      	b.n	baa72 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   baad4:	2401      	movs	r4, #1
   baad6:	e7e9      	b.n	baaac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   baad8:	4628      	mov	r0, r5
   baada:	f7fe fd31 	bl	b9540 <malloc>
   baade:	2400      	movs	r4, #0
   baae0:	ab03      	add	r3, sp, #12
   baae2:	4606      	mov	r6, r0
   baae4:	9003      	str	r0, [sp, #12]
   baae6:	9304      	str	r3, [sp, #16]
   baae8:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   baaec:	b978      	cbnz	r0, bab0e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   baaee:	2320      	movs	r3, #32
   baaf0:	e9cd 3006 	strd	r3, r0, [sp, #24]
   baaf4:	4b0e      	ldr	r3, [pc, #56]	; (bab30 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   baaf6:	9300      	str	r3, [sp, #0]
   baaf8:	490e      	ldr	r1, [pc, #56]	; (bab34 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   baafa:	4603      	mov	r3, r0
   baafc:	aa06      	add	r2, sp, #24
   baafe:	2032      	movs	r0, #50	; 0x32
   bab00:	f7fe fc42 	bl	b9388 <log_message>
                    return false;
   bab04:	4634      	mov	r4, r6
   bab06:	a804      	add	r0, sp, #16
   bab08:	f7ff ff89 	bl	baa1e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   bab0c:	e7b4      	b.n	baa78 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   bab0e:	4602      	mov	r2, r0
   bab10:	21ff      	movs	r1, #255	; 0xff
   bab12:	462b      	mov	r3, r5
   bab14:	4638      	mov	r0, r7
   bab16:	f7ff fa62 	bl	b9fde <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   bab1a:	9803      	ldr	r0, [sp, #12]
   bab1c:	462a      	mov	r2, r5
   bab1e:	4641      	mov	r1, r8
   bab20:	f003 fa37 	bl	bdf92 <memcmp>
   bab24:	2800      	cmp	r0, #0
   bab26:	d1ee      	bne.n	bab06 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   bab28:	2401      	movs	r4, #1
   bab2a:	e7ec      	b.n	bab06 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   bab2c:	2401      	movs	r4, #1
   bab2e:	e7a3      	b.n	baa78 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   bab30:	000c14cc 	.word	0x000c14cc
   bab34:	000c144b 	.word	0x000c144b

000bab38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bab38:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bab3a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bab3c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bab3e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bab40:	dd03      	ble.n	bab4a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bab42:	f7fe fd0d 	bl	b9560 <realloc>
            if (!d) {
   bab46:	b918      	cbnz	r0, bab50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bab48:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bab4a:	f7fe fd01 	bl	b9550 <free>
        T* d = nullptr;
   bab4e:	2000      	movs	r0, #0
        data_ = d;
   bab50:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bab52:	60a5      	str	r5, [r4, #8]
        return true;
   bab54:	2001      	movs	r0, #1
   bab56:	e7f7      	b.n	bab48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bab58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bab58:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bab5a:	6883      	ldr	r3, [r0, #8]
   bab5c:	428b      	cmp	r3, r1
   bab5e:	da02      	bge.n	bab66 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bab60:	f7ff ffea 	bl	bab38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bab64:	bd08      	pop	{r3, pc}
    return true;
   bab66:	2001      	movs	r0, #1
   bab68:	e7fc      	b.n	bab64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bab6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bab6a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bab6c:	2300      	movs	r3, #0
   bab6e:	e9c0 3300 	strd	r3, r3, [r0]
   bab72:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bab74:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bab76:	6849      	ldr	r1, [r1, #4]
   bab78:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bab7a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bab7c:	dd10      	ble.n	baba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   bab7e:	f7ff ffdb 	bl	bab38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bab82:	b168      	cbz	r0, baba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bab84:	e9d5 3100 	ldrd	r3, r1, [r5]
   bab88:	6822      	ldr	r2, [r4, #0]
   bab8a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   bab8c:	4299      	cmp	r1, r3
   bab8e:	d005      	beq.n	bab9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   bab90:	b10a      	cbz	r2, bab96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   bab92:	7818      	ldrb	r0, [r3, #0]
   bab94:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   bab96:	3301      	adds	r3, #1
   bab98:	3201      	adds	r2, #1
   bab9a:	e7f7      	b.n	bab8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   bab9c:	686b      	ldr	r3, [r5, #4]
   bab9e:	6063      	str	r3, [r4, #4]
}
   baba0:	4620      	mov	r0, r4
   baba2:	bd38      	pop	{r3, r4, r5, pc}

000baba4 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   baba4:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   baba6:	680b      	ldr	r3, [r1, #0]
   baba8:	6003      	str	r3, [r0, #0]
   babaa:	684b      	ldr	r3, [r1, #4]
   babac:	6043      	str	r3, [r0, #4]
   babae:	4604      	mov	r4, r0
   babb0:	460d      	mov	r5, r1
class BleAdvertisingData {
   babb2:	3008      	adds	r0, #8
   babb4:	3108      	adds	r1, #8
   babb6:	f7ff ffd8 	bl	bab6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   babba:	f105 0114 	add.w	r1, r5, #20
   babbe:	f104 0014 	add.w	r0, r4, #20
   babc2:	f7ff ffd2 	bl	bab6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   babc6:	f895 3020 	ldrb.w	r3, [r5, #32]
   babca:	f884 3020 	strb.w	r3, [r4, #32]
   babce:	4620      	mov	r0, r4
   babd0:	bd38      	pop	{r3, r4, r5, pc}

000babd2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   babd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   babd4:	4604      	mov	r4, r0
   babd6:	a801      	add	r0, sp, #4
   babd8:	f7ff ffc7 	bl	bab6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   babdc:	9b01      	ldr	r3, [sp, #4]
   babde:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   babe0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   babe2:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   babe4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   babe6:	6062      	str	r2, [r4, #4]
   babe8:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   babea:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   babec:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   babee:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   babf0:	9001      	str	r0, [sp, #4]
   babf2:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   babf4:	f7fe fcac 	bl	b9550 <free>
   babf8:	b004      	add	sp, #16
   babfa:	bd10      	pop	{r4, pc}

000babfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   babfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bac00:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bac02:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bac04:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bac06:	4419      	add	r1, r3
   bac08:	6883      	ldr	r3, [r0, #8]
   bac0a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bac0c:	4604      	mov	r4, r0
   bac0e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bac10:	dc12      	bgt.n	bac38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bac12:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bac14:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bac16:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bac18:	1bd2      	subs	r2, r2, r7
   bac1a:	4631      	mov	r1, r6
   bac1c:	1970      	adds	r0, r6, r5
   bac1e:	f003 f9d6 	bl	bdfce <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bac22:	462a      	mov	r2, r5
   bac24:	4641      	mov	r1, r8
   bac26:	4630      	mov	r0, r6
   bac28:	f003 f9c3 	bl	bdfb2 <memcpy>
    size_ += n;
   bac2c:	6863      	ldr	r3, [r4, #4]
   bac2e:	442b      	add	r3, r5
   bac30:	6063      	str	r3, [r4, #4]
    return true;
   bac32:	2001      	movs	r0, #1
}
   bac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bac38:	f7ff ff7e 	bl	bab38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bac3c:	2800      	cmp	r0, #0
   bac3e:	d1e8      	bne.n	bac12 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bac40:	e7f8      	b.n	bac34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bac42 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bac42:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   bac44:	460a      	mov	r2, r1
   bac46:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bac48:	b510      	push	{r4, lr}
   bac4a:	4604      	mov	r4, r0
    size_ = 0;
   bac4c:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   bac4e:	b102      	cbz	r2, bac52 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   bac50:	b90b      	cbnz	r3, bac56 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   bac52:	2000      	movs	r0, #0
}
   bac54:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   bac56:	2bff      	cmp	r3, #255	; 0xff
   bac58:	bf28      	it	cs
   bac5a:	23ff      	movcs	r3, #255	; 0xff
   bac5c:	f7ff ffce 	bl	babfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   bac60:	2800      	cmp	r0, #0
   bac62:	d0f7      	beq.n	bac54 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   bac64:	6860      	ldr	r0, [r4, #4]
   bac66:	e7f5      	b.n	bac54 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000bac68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac6a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bac6c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bac70:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bac72:	4604      	mov	r4, r0
   bac74:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bac76:	da0b      	bge.n	bac90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bac78:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bac7a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bac7c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bac7e:	1b52      	subs	r2, r2, r5
   bac80:	1c48      	adds	r0, r1, #1
   bac82:	f003 f9a4 	bl	bdfce <memmove>
    new(p) T(std::move(value));
   bac86:	557e      	strb	r6, [r7, r5]
    ++size_;
   bac88:	6863      	ldr	r3, [r4, #4]
   bac8a:	3301      	adds	r3, #1
   bac8c:	6063      	str	r3, [r4, #4]
}
   bac8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bac90:	3101      	adds	r1, #1
   bac92:	f7ff ff51 	bl	bab38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bac96:	2800      	cmp	r0, #0
   bac98:	d1ee      	bne.n	bac78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bac9a:	e7f8      	b.n	bac8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bac9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bac9c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bac9e:	6841      	ldr	r1, [r0, #4]
   baca0:	f7ff bfe2 	b.w	bac68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000baca4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   baca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   baca8:	4604      	mov	r4, r0
   bacaa:	461d      	mov	r5, r3
   bacac:	460f      	mov	r7, r1
   bacae:	ab01      	add	r3, sp, #4
   bacb0:	4690      	mov	r8, r2
   bacb2:	460a      	mov	r2, r1
   bacb4:	e9d0 0100 	ldrd	r0, r1, [r0]
   bacb8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bacbc:	f7fe ff14 	bl	b9ae8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bacc0:	1cae      	adds	r6, r5, #2
   bacc2:	6863      	ldr	r3, [r4, #4]
   bacc4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bacc6:	f1b9 0f00 	cmp.w	r9, #0
   bacca:	d126      	bne.n	bad1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   baccc:	b328      	cbz	r0, bad1a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bacce:	4433      	add	r3, r6
   bacd0:	1a1b      	subs	r3, r3, r0
   bacd2:	2bff      	cmp	r3, #255	; 0xff
   bacd4:	d809      	bhi.n	bacea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bacd6:	9901      	ldr	r1, [sp, #4]
   bacd8:	4620      	mov	r0, r4
   bacda:	f7ff fcc7 	bl	ba66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bacde:	6861      	ldr	r1, [r4, #4]
   bace0:	4620      	mov	r0, r4
   bace2:	4431      	add	r1, r6
   bace4:	f7ff ff38 	bl	bab58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bace8:	b918      	cbnz	r0, bacf2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bacea:	6860      	ldr	r0, [r4, #4]
}
   bacec:	b003      	add	sp, #12
   bacee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bacf2:	1c6a      	adds	r2, r5, #1
   bacf4:	9901      	ldr	r1, [sp, #4]
   bacf6:	b2d2      	uxtb	r2, r2
   bacf8:	4620      	mov	r0, r4
   bacfa:	f7ff ffb5 	bl	bac68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bacfe:	9901      	ldr	r1, [sp, #4]
   bad00:	463a      	mov	r2, r7
   bad02:	3101      	adds	r1, #1
   bad04:	4620      	mov	r0, r4
   bad06:	f7ff ffaf 	bl	bac68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bad0a:	9901      	ldr	r1, [sp, #4]
   bad0c:	462b      	mov	r3, r5
   bad0e:	4642      	mov	r2, r8
   bad10:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bad12:	4620      	mov	r0, r4
   bad14:	f7ff ff72 	bl	babfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bad18:	e7e7      	b.n	bacea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bad1a:	18f1      	adds	r1, r6, r3
   bad1c:	29ff      	cmp	r1, #255	; 0xff
   bad1e:	d8e4      	bhi.n	bacea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bad20:	4620      	mov	r0, r4
   bad22:	f7ff ff19 	bl	bab58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bad26:	2800      	cmp	r0, #0
   bad28:	d0df      	beq.n	bacea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bad2a:	1c69      	adds	r1, r5, #1
   bad2c:	b2c9      	uxtb	r1, r1
   bad2e:	4620      	mov	r0, r4
   bad30:	f7ff ffb4 	bl	bac9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bad34:	4639      	mov	r1, r7
   bad36:	4620      	mov	r0, r4
   bad38:	f7ff ffb0 	bl	bac9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bad3c:	6861      	ldr	r1, [r4, #4]
   bad3e:	462b      	mov	r3, r5
   bad40:	4642      	mov	r2, r8
   bad42:	e7e6      	b.n	bad12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bad44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bad44:	b430      	push	{r4, r5}
   bad46:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bad4a:	b11a      	cbz	r2, bad54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bad4c:	9502      	str	r5, [sp, #8]
}
   bad4e:	bc30      	pop	{r4, r5}
   bad50:	f7ff bfa8 	b.w	baca4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bad54:	6840      	ldr	r0, [r0, #4]
}
   bad56:	bc30      	pop	{r4, r5}
   bad58:	4770      	bx	lr

000bad5a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bad5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bad5c:	2300      	movs	r3, #0
   bad5e:	e9c0 3300 	strd	r3, r3, [r0]
   bad62:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bad64:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bad66:	9300      	str	r3, [sp, #0]
   bad68:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bad6a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bad6e:	4619      	mov	r1, r3
   bad70:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bad74:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bad76:	f7ff ffe5 	bl	bad44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bad7a:	4620      	mov	r0, r4
   bad7c:	b004      	add	sp, #16
   bad7e:	bd10      	pop	{r4, pc}

000bad80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bad80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bad82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bad84:	4604      	mov	r4, r0
   bad86:	460d      	mov	r5, r1
   bad88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bad8a:	d914      	bls.n	badb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bad8c:	4290      	cmp	r0, r2
   bad8e:	d213      	bcs.n	badb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bad90:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bad94:	1a75      	subs	r5, r6, r1
   bad96:	f1a1 0708 	sub.w	r7, r1, #8
   bad9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bad9c:	42b7      	cmp	r7, r6
   bad9e:	d018      	beq.n	badd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bada0:	b11c      	cbz	r4, badaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bada2:	4631      	mov	r1, r6
   bada4:	4620      	mov	r0, r4
   bada6:	f7ff fcac 	bl	ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   badaa:	1d30      	adds	r0, r6, #4
   badac:	f7ff fcb3 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   badb0:	3e08      	subs	r6, #8
   badb2:	3c08      	subs	r4, #8
   badb4:	e7f2      	b.n	bad9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   badb6:	d00c      	beq.n	badd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   badb8:	42b5      	cmp	r5, r6
   badba:	d00a      	beq.n	badd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   badbc:	b11c      	cbz	r4, badc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   badbe:	4629      	mov	r1, r5
   badc0:	4620      	mov	r0, r4
   badc2:	f7ff fc9e 	bl	ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   badc6:	1d28      	adds	r0, r5, #4
   badc8:	f7ff fca5 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   badcc:	3508      	adds	r5, #8
   badce:	3408      	adds	r4, #8
   badd0:	e7f2      	b.n	badb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   badd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000badd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   badd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   badd6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   badd8:	6846      	ldr	r6, [r0, #4]
   badda:	4668      	mov	r0, sp
   baddc:	f7ff fc91 	bl	ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bade0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bade4:	429f      	cmp	r7, r3
   bade6:	db12      	blt.n	bae0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bade8:	3701      	adds	r7, #1
        if (n > 0) {
   badea:	2f00      	cmp	r7, #0
   badec:	dd29      	ble.n	bae42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   badee:	00f8      	lsls	r0, r7, #3
   badf0:	f7fe fba6 	bl	b9540 <malloc>
            if (!d) {
   badf4:	4605      	mov	r5, r0
   badf6:	b1f0      	cbz	r0, bae36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   badf8:	e9d4 1200 	ldrd	r1, r2, [r4]
   badfc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bae00:	f7ff ffbe 	bl	bad80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bae04:	6820      	ldr	r0, [r4, #0]
   bae06:	f7fe fba3 	bl	b9550 <free>
        data_ = d;
   bae0a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bae0c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bae0e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bae10:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bae12:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bae16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bae1a:	4631      	mov	r1, r6
   bae1c:	f106 0008 	add.w	r0, r6, #8
   bae20:	f7ff ffae 	bl	bad80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bae24:	b11e      	cbz	r6, bae2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bae26:	4669      	mov	r1, sp
   bae28:	4630      	mov	r0, r6
   bae2a:	f7ff fc6a 	bl	ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bae2e:	6863      	ldr	r3, [r4, #4]
   bae30:	3301      	adds	r3, #1
   bae32:	6063      	str	r3, [r4, #4]
    return true;
   bae34:	2501      	movs	r5, #1
   bae36:	a801      	add	r0, sp, #4
   bae38:	f7ff fc6d 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bae3c:	4628      	mov	r0, r5
   bae3e:	b003      	add	sp, #12
   bae40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bae42:	2500      	movs	r5, #0
   bae44:	e7de      	b.n	bae04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bae46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bae46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bae48:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bae4c:	4605      	mov	r5, r0
   bae4e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bae50:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bae54:	42a6      	cmp	r6, r4
   bae56:	d005      	beq.n	bae64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bae58:	4639      	mov	r1, r7
   bae5a:	4620      	mov	r0, r4
   bae5c:	f7ff fa9d 	bl	ba39a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bae60:	b108      	cbz	r0, bae66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bae62:	b914      	cbnz	r4, bae6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bae64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bae66:	3408      	adds	r4, #8
   bae68:	e7f4      	b.n	bae54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bae6a:	1d20      	adds	r0, r4, #4
   bae6c:	f7ff fc53 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bae70:	e9d5 3200 	ldrd	r3, r2, [r5]
   bae74:	f104 0108 	add.w	r1, r4, #8
   bae78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bae7c:	4620      	mov	r0, r4
   bae7e:	f7ff ff7f 	bl	bad80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bae82:	686b      	ldr	r3, [r5, #4]
   bae84:	3b01      	subs	r3, #1
   bae86:	606b      	str	r3, [r5, #4]
    return true;
   bae88:	e7ec      	b.n	bae64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bae8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bae90:	4605      	mov	r5, r0
   bae92:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bae94:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bae96:	460c      	mov	r4, r1
        WiringBleLock lk;
   bae98:	f7fe fef4 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bae9c:	682e      	ldr	r6, [r5, #0]
   bae9e:	1ef3      	subs	r3, r6, #3
   baea0:	2b0d      	cmp	r3, #13
   baea2:	d83c      	bhi.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   baea4:	e8df f013 	tbh	[pc, r3, lsl #1]
   baea8:	0053000e 	.word	0x0053000e
   baeac:	00d1003b 	.word	0x00d1003b
   baeb0:	003b003b 	.word	0x003b003b
   baeb4:	003b003b 	.word	0x003b003b
   baeb8:	009b003b 	.word	0x009b003b
   baebc:	009b009b 	.word	0x009b009b
   baec0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   baec4:	a804      	add	r0, sp, #16
   baec6:	f7ff fa0f 	bl	ba2e8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   baeca:	9b04      	ldr	r3, [sp, #16]
   baecc:	89aa      	ldrh	r2, [r5, #12]
   baece:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   baed0:	6869      	ldr	r1, [r5, #4]
   baed2:	9804      	ldr	r0, [sp, #16]
   baed4:	3108      	adds	r1, #8
   baed6:	3002      	adds	r0, #2
   baed8:	f7fe feee 	bl	b9cb8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   baedc:	a904      	add	r1, sp, #16
   baede:	a806      	add	r0, sp, #24
   baee0:	f7ff fc0f 	bl	ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   baee4:	a906      	add	r1, sp, #24
   baee6:	f104 0018 	add.w	r0, r4, #24
   baeea:	f7ff ff73 	bl	badd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   baeee:	4605      	mov	r5, r0
   baef0:	a807      	add	r0, sp, #28
   baef2:	f7ff fc10 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baef6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   baef8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   baefa:	b9b5      	cbnz	r5, baf2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   baefc:	4b5d      	ldr	r3, [pc, #372]	; (bb074 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   baefe:	495e      	ldr	r1, [pc, #376]	; (bb078 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   baf00:	9300      	str	r3, [sp, #0]
   baf02:	2032      	movs	r0, #50	; 0x32
   baf04:	462b      	mov	r3, r5
   baf06:	aa06      	add	r2, sp, #24
   baf08:	9507      	str	r5, [sp, #28]
   baf0a:	f7fe fa3d 	bl	b9388 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   baf0e:	9b04      	ldr	r3, [sp, #16]
   baf10:	4629      	mov	r1, r5
   baf12:	8818      	ldrh	r0, [r3, #0]
   baf14:	f7fe f81e 	bl	b8f54 <hal_ble_gap_disconnect>
   baf18:	a805      	add	r0, sp, #20
   baf1a:	f7ff fbfc 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   baf1e:	a803      	add	r0, sp, #12
   baf20:	f7fe febe 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   baf24:	b00e      	add	sp, #56	; 0x38
   baf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   baf2a:	4a54      	ldr	r2, [pc, #336]	; (bb07c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   baf2c:	9200      	str	r2, [sp, #0]
   baf2e:	2300      	movs	r3, #0
   baf30:	4951      	ldr	r1, [pc, #324]	; (bb078 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   baf32:	9307      	str	r3, [sp, #28]
   baf34:	aa06      	add	r2, sp, #24
   baf36:	2001      	movs	r0, #1
   baf38:	f7fe fa26 	bl	b9388 <log_message>
                if (impl->connectedCallback_) {
   baf3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   baf3e:	2b00      	cmp	r3, #0
   baf40:	d0ea      	beq.n	baf18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   baf42:	a904      	add	r1, sp, #16
   baf44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   baf48:	f7ff fc54 	bl	ba7f4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   baf4c:	e7e4      	b.n	baf18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   baf4e:	89a9      	ldrh	r1, [r5, #12]
   baf50:	4620      	mov	r0, r4
   baf52:	f7ff f8dc 	bl	ba10e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   baf56:	4606      	mov	r6, r0
   baf58:	2800      	cmp	r0, #0
   baf5a:	d0e0      	beq.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   baf5c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   baf5e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   baf62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   baf66:	8029      	strh	r1, [r5, #0]
   baf68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   baf6c:	429a      	cmp	r2, r3
   baf6e:	d003      	beq.n	baf78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   baf70:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   baf74:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   baf76:	e7f9      	b.n	baf6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   baf78:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   baf7c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   baf80:	45b8      	cmp	r8, r7
   baf82:	d004      	beq.n	baf8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   baf84:	1d38      	adds	r0, r7, #4
   baf86:	f7ff fbc6 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baf8a:	3708      	adds	r7, #8
   baf8c:	e7f8      	b.n	baf80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   baf8e:	2300      	movs	r3, #0
   baf90:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   baf92:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   baf96:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   baf9a:	45b8      	cmp	r8, r7
   baf9c:	d004      	beq.n	bafa8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   baf9e:	1d38      	adds	r0, r7, #4
   bafa0:	f7ff fbb9 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bafa4:	3708      	adds	r7, #8
   bafa6:	e7f8      	b.n	baf9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bafa8:	2300      	movs	r3, #0
   bafaa:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bafac:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bafae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bafb0:	b123      	cbz	r3, bafbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bafb2:	4631      	mov	r1, r6
   bafb4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bafb8:	f7ff fc1c 	bl	ba7f4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bafbc:	2300      	movs	r3, #0
   bafbe:	2220      	movs	r2, #32
   bafc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bafc4:	4a2e      	ldr	r2, [pc, #184]	; (bb080 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bafc6:	9200      	str	r2, [sp, #0]
   bafc8:	492b      	ldr	r1, [pc, #172]	; (bb078 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bafca:	aa06      	add	r2, sp, #24
   bafcc:	2001      	movs	r0, #1
   bafce:	f7fe f9db 	bl	b9388 <log_message>
                    impl->peers_.removeOne(*peer);
   bafd2:	4631      	mov	r1, r6
   bafd4:	f104 0018 	add.w	r0, r4, #24
   bafd8:	f7ff ff35 	bl	bae46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bafdc:	e79f      	b.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bafde:	89a9      	ldrh	r1, [r5, #12]
   bafe0:	4620      	mov	r0, r4
   bafe2:	f7ff f894 	bl	ba10e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bafe6:	2800      	cmp	r0, #0
   bafe8:	d099      	beq.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bafea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bafec:	2b00      	cmp	r3, #0
   bafee:	d096      	beq.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   baff0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   baff2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   baff4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   baff8:	d001      	beq.n	baffe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   baffa:	2e10      	cmp	r6, #16
   baffc:	d117      	bne.n	bb02e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   baffe:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bb000:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bb002:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bb004:	2506      	movs	r5, #6
                        };
   bb006:	f88d 3015 	strb.w	r3, [sp, #21]
   bb00a:	9104      	str	r1, [sp, #16]
   bb00c:	f88d 2014 	strb.w	r2, [sp, #20]
   bb010:	9006      	str	r0, [sp, #24]
   bb012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bb016:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bb018:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bb01c:	9508      	str	r5, [sp, #32]
   bb01e:	e883 0003 	stmia.w	r3, {r0, r1}
   bb022:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb024:	a906      	add	r1, sp, #24
   bb026:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb02a:	4798      	blx	r3
   bb02c:	e777      	b.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bb02e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb030:	bf01      	itttt	eq
   bb032:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bb034:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb036:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bb03a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bb03c:	bf0f      	iteee	eq
   bb03e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bb042:	461a      	movne	r2, r3
   bb044:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bb046:	461d      	movne	r5, r3
   bb048:	e7dd      	b.n	bb006 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb04a:	89a9      	ldrh	r1, [r5, #12]
   bb04c:	4620      	mov	r0, r4
   bb04e:	f7ff f85e 	bl	ba10e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bb052:	4601      	mov	r1, r0
   bb054:	2800      	cmp	r0, #0
   bb056:	f43f af62 	beq.w	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb05a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb05c:	2b00      	cmp	r3, #0
   bb05e:	f43f af5e 	beq.w	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bb062:	686b      	ldr	r3, [r5, #4]
   bb064:	9306      	str	r3, [sp, #24]
   bb066:	aa06      	add	r2, sp, #24
   bb068:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb06a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb06e:	4798      	blx	r3
   bb070:	e755      	b.n	baf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb072:	bf00      	nop
   bb074:	000c14e7 	.word	0x000c14e7
   bb078:	000c144b 	.word	0x000c144b
   bb07c:	000c150d 	.word	0x000c150d
   bb080:	000c152a 	.word	0x000c152a

000bb084 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   bb084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb088:	4607      	mov	r7, r0
   bb08a:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   bb08c:	4668      	mov	r0, sp
   bb08e:	f7fe fdf9 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bb092:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb094:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   bb098:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   bb09c:	42ac      	cmp	r4, r5
   bb09e:	d035      	beq.n	bb10c <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   bb0a0:	2224      	movs	r2, #36	; 0x24
   bb0a2:	2100      	movs	r1, #0
   bb0a4:	a801      	add	r0, sp, #4
   bb0a6:	f002 ffac 	bl	be002 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   bb0aa:	6823      	ldr	r3, [r4, #0]
   bb0ac:	2200      	movs	r2, #0
   bb0ae:	8818      	ldrh	r0, [r3, #0]
   bb0b0:	a901      	add	r1, sp, #4
   bb0b2:	f7fd ff9f 	bl	b8ff4 <hal_ble_gap_get_connection_info>
   bb0b6:	4606      	mov	r6, r0
   bb0b8:	b108      	cbz	r0, bb0be <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   bb0ba:	3408      	adds	r4, #8
   bb0bc:	e7ee      	b.n	bb09c <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   bb0be:	f89d 8008 	ldrb.w	r8, [sp, #8]
   bb0c2:	f1b8 0f01 	cmp.w	r8, #1
   bb0c6:	d1f8      	bne.n	bb0ba <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   bb0c8:	f8df 9048 	ldr.w	r9, [pc, #72]	; bb114 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   bb0cc:	f8d9 0000 	ldr.w	r0, [r9]
   bb0d0:	f7fe f812 	bl	b90f8 <os_mutex_recursive_unlock>
        locked_ = false;
   bb0d4:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   bb0d8:	6823      	ldr	r3, [r4, #0]
   bb0da:	4631      	mov	r1, r6
   bb0dc:	8818      	ldrh	r0, [r3, #0]
   bb0de:	f7fd ff39 	bl	b8f54 <hal_ble_gap_disconnect>
   bb0e2:	1e05      	subs	r5, r0, #0
   bb0e4:	db0b      	blt.n	bb0fe <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb0e6:	f8d9 0000 	ldr.w	r0, [r9]
   bb0ea:	f7fd fffd 	bl	b90e8 <os_mutex_recursive_lock>
        return peers_;
   bb0ee:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   bb0f0:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   bb0f4:	4621      	mov	r1, r4
   bb0f6:	3018      	adds	r0, #24
   bb0f8:	f7ff fea5 	bl	bae46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   bb0fc:	4635      	mov	r5, r6
    WiringBleLock lk;
   bb0fe:	4668      	mov	r0, sp
   bb100:	f7fe fdce 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   bb104:	4628      	mov	r0, r5
   bb106:	b00b      	add	sp, #44	; 0x2c
   bb108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   bb10c:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   bb110:	e7f5      	b.n	bb0fe <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   bb112:	bf00      	nop
   bb114:	2003e670 	.word	0x2003e670

000bb118 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb118:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb11a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb11c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb11e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb120:	dd05      	ble.n	bb12e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   bb122:	2114      	movs	r1, #20
   bb124:	4369      	muls	r1, r5
   bb126:	f7fe fa1b 	bl	b9560 <realloc>
            if (!d) {
   bb12a:	b918      	cbnz	r0, bb134 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   bb12c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb12e:	f7fe fa0f 	bl	b9550 <free>
        T* d = nullptr;
   bb132:	2000      	movs	r0, #0
        data_ = d;
   bb134:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb136:	60a5      	str	r5, [r4, #8]
        return true;
   bb138:	2001      	movs	r0, #1
   bb13a:	e7f7      	b.n	bb12c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bb13c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bb140:	2400      	movs	r4, #0
   bb142:	e9c0 4400 	strd	r4, r4, [r0]
   bb146:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb148:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb14a:	6849      	ldr	r1, [r1, #4]
   bb14c:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb14e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb150:	dd1a      	ble.n	bb188 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bb152:	f7ff ffe1 	bl	bb118 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb156:	b1b8      	cbz	r0, bb188 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb158:	e9d8 9300 	ldrd	r9, r3, [r8]
   bb15c:	f04f 0c14 	mov.w	ip, #20
   bb160:	f8d7 e000 	ldr.w	lr, [r7]
   bb164:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bb168:	eb09 0504 	add.w	r5, r9, r4
   bb16c:	45ac      	cmp	ip, r5
   bb16e:	d008      	beq.n	bb182 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bb170:	eb1e 0604 	adds.w	r6, lr, r4
   bb174:	bf1f      	itttt	ne
   bb176:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bb178:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bb17a:	682b      	ldrne	r3, [r5, #0]
   bb17c:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bb17e:	3414      	adds	r4, #20
   bb180:	e7f2      	b.n	bb168 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bb182:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb186:	607b      	str	r3, [r7, #4]
}
   bb188:	4638      	mov	r0, r7
   bb18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bb18e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb18e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bb192:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bb196:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb198:	6883      	ldr	r3, [r0, #8]
   bb19a:	19e9      	adds	r1, r5, r7
   bb19c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb19e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb1a0:	dc17      	bgt.n	bb1d2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bb1a2:	2314      	movs	r3, #20
   bb1a4:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bb1a6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb1a8:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bb1aa:	fb03 f907 	mul.w	r9, r3, r7
   bb1ae:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb1b0:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb1b2:	1b52      	subs	r2, r2, r5
   bb1b4:	4631      	mov	r1, r6
   bb1b6:	eb06 0009 	add.w	r0, r6, r9
   bb1ba:	f002 ff08 	bl	bdfce <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb1be:	464a      	mov	r2, r9
   bb1c0:	4641      	mov	r1, r8
   bb1c2:	4630      	mov	r0, r6
   bb1c4:	f002 fef5 	bl	bdfb2 <memcpy>
    size_ += n;
   bb1c8:	6863      	ldr	r3, [r4, #4]
   bb1ca:	443b      	add	r3, r7
   bb1cc:	6063      	str	r3, [r4, #4]
}
   bb1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb1d2:	f7ff ffa1 	bl	bb118 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb1d6:	2800      	cmp	r0, #0
   bb1d8:	d1e3      	bne.n	bb1a2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bb1da:	e7f8      	b.n	bb1ce <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bb1dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb1dc:	b082      	sub	sp, #8
   bb1de:	b570      	push	{r4, r5, r6, lr}
   bb1e0:	460c      	mov	r4, r1
   bb1e2:	a904      	add	r1, sp, #16
   bb1e4:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb1e8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb1ec:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb1ee:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb1f0:	da17      	bge.n	bb222 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bb1f2:	2314      	movs	r3, #20
   bb1f4:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bb1f8:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bb1fa:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bb1fc:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb1fe:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb200:	1a52      	subs	r2, r2, r1
   bb202:	18e0      	adds	r0, r4, r3
   bb204:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bb206:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb208:	f002 fee1 	bl	bdfce <memmove>
    new(p) T(std::move(value));
   bb20c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bb20e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb210:	6833      	ldr	r3, [r6, #0]
   bb212:	6023      	str	r3, [r4, #0]
    ++size_;
   bb214:	686b      	ldr	r3, [r5, #4]
   bb216:	3301      	adds	r3, #1
   bb218:	606b      	str	r3, [r5, #4]
}
   bb21a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb21e:	b002      	add	sp, #8
   bb220:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb222:	3101      	adds	r1, #1
   bb224:	f7ff ff78 	bl	bb118 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb228:	2800      	cmp	r0, #0
   bb22a:	d1e2      	bne.n	bb1f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bb22c:	e7f5      	b.n	bb21a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bb22e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bb232:	2400      	movs	r4, #0
   bb234:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb236:	1e93      	subs	r3, r2, #2
   bb238:	e9c0 4400 	strd	r4, r4, [r0]
   bb23c:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb23e:	4605      	mov	r5, r0
   bb240:	460f      	mov	r7, r1
   bb242:	4690      	mov	r8, r2
   bb244:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb246:	9305      	str	r3, [sp, #20]
    return size_;
   bb248:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb24a:	428c      	cmp	r4, r1
   bb24c:	da72      	bge.n	bb334 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bb24e:	6838      	ldr	r0, [r7, #0]
   bb250:	ab07      	add	r3, sp, #28
   bb252:	4642      	mov	r2, r8
   bb254:	1b09      	subs	r1, r1, r4
   bb256:	4420      	add	r0, r4
   bb258:	f7fe fc46 	bl	b9ae8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bb25c:	4606      	mov	r6, r0
   bb25e:	2800      	cmp	r0, #0
   bb260:	d068      	beq.n	bb334 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb262:	9b05      	ldr	r3, [sp, #20]
   bb264:	2b01      	cmp	r3, #1
   bb266:	d82f      	bhi.n	bb2c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb268:	f1a0 0b02 	sub.w	fp, r0, #2
   bb26c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bb270:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bb274:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb278:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb27a:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb27c:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb27e:	d055      	beq.n	bb32c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bb280:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb282:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bb286:	4413      	add	r3, r2
   bb288:	a808      	add	r0, sp, #32
   bb28a:	78d9      	ldrb	r1, [r3, #3]
   bb28c:	789b      	ldrb	r3, [r3, #2]
   bb28e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bb292:	f7fe fd8e 	bl	b9db2 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bb296:	f10d 0e20 	add.w	lr, sp, #32
   bb29a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb29e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb2a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb2a6:	f8de 3000 	ldr.w	r3, [lr]
   bb2aa:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb2ae:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb2b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb2b6:	ab0d      	add	r3, sp, #52	; 0x34
   bb2b8:	cb0c      	ldmia	r3, {r2, r3}
   bb2ba:	6869      	ldr	r1, [r5, #4]
   bb2bc:	4628      	mov	r0, r5
   bb2be:	f7ff ff8d 	bl	bb1dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb2c2:	f109 0901 	add.w	r9, r9, #1
   bb2c6:	e7d7      	b.n	bb278 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bb2c8:	f1a8 0306 	sub.w	r3, r8, #6
   bb2cc:	2b01      	cmp	r3, #1
   bb2ce:	d82d      	bhi.n	bb32c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb2d0:	f1a0 0b02 	sub.w	fp, r0, #2
   bb2d4:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bb2d8:	f04f 0900 	mov.w	r9, #0
   bb2dc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bb2e0:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb2e2:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb2e4:	d022      	beq.n	bb32c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb2e6:	3302      	adds	r3, #2
    return data_[i];
   bb2e8:	6839      	ldr	r1, [r7, #0]
   bb2ea:	4423      	add	r3, r4
   bb2ec:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bb2f0:	2201      	movs	r2, #1
   bb2f2:	4419      	add	r1, r3
   bb2f4:	a808      	add	r0, sp, #32
   bb2f6:	f7fe fd3d 	bl	b9d74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bb2fa:	f10d 0e20 	add.w	lr, sp, #32
   bb2fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb302:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb306:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb30a:	f8de 3000 	ldr.w	r3, [lr]
   bb30e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb312:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb316:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb31a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bb31e:	6869      	ldr	r1, [r5, #4]
   bb320:	4628      	mov	r0, r5
   bb322:	f7ff ff5b 	bl	bb1dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb326:	f109 0901 	add.w	r9, r9, #1
   bb32a:	e7d9      	b.n	bb2e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb32c:	9b07      	ldr	r3, [sp, #28]
   bb32e:	441c      	add	r4, r3
   bb330:	4434      	add	r4, r6
   bb332:	e789      	b.n	bb248 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bb334:	4628      	mov	r0, r5
   bb336:	b013      	add	sp, #76	; 0x4c
   bb338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb33c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb33c:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bb33e:	2300      	movs	r3, #0
   bb340:	b085      	sub	sp, #20
   bb342:	e9c0 3300 	strd	r3, r3, [r0]
   bb346:	6083      	str	r3, [r0, #8]
   bb348:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb34a:	2202      	movs	r2, #2
   bb34c:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb34e:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb350:	f7ff ff6d 	bl	bb22e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb354:	a901      	add	r1, sp, #4
   bb356:	4620      	mov	r0, r4
   bb358:	f7ff ff19 	bl	bb18e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb35c:	a801      	add	r0, sp, #4
   bb35e:	f7ff f939 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb362:	2202      	movs	r2, #2
   bb364:	4629      	mov	r1, r5
   bb366:	a801      	add	r0, sp, #4
   bb368:	f7ff ff61 	bl	bb22e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb36c:	a901      	add	r1, sp, #4
   bb36e:	4620      	mov	r0, r4
   bb370:	f7ff ff0d 	bl	bb18e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb374:	a801      	add	r0, sp, #4
   bb376:	f7ff f92d 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb37a:	2203      	movs	r2, #3
   bb37c:	4629      	mov	r1, r5
   bb37e:	a801      	add	r0, sp, #4
   bb380:	f7ff ff55 	bl	bb22e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb384:	a901      	add	r1, sp, #4
   bb386:	4620      	mov	r0, r4
   bb388:	f7ff ff01 	bl	bb18e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb38c:	a801      	add	r0, sp, #4
   bb38e:	f7ff f921 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb392:	2206      	movs	r2, #6
   bb394:	4629      	mov	r1, r5
   bb396:	a801      	add	r0, sp, #4
   bb398:	f7ff ff49 	bl	bb22e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb39c:	a901      	add	r1, sp, #4
   bb39e:	4620      	mov	r0, r4
   bb3a0:	f7ff fef5 	bl	bb18e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb3a4:	a801      	add	r0, sp, #4
   bb3a6:	f7ff f915 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb3aa:	2207      	movs	r2, #7
   bb3ac:	4629      	mov	r1, r5
   bb3ae:	a801      	add	r0, sp, #4
   bb3b0:	f7ff ff3d 	bl	bb22e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb3b4:	a901      	add	r1, sp, #4
   bb3b6:	4620      	mov	r0, r4
   bb3b8:	f7ff fee9 	bl	bb18e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb3bc:	a801      	add	r0, sp, #4
   bb3be:	f7ff f909 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb3c2:	4620      	mov	r0, r4
   bb3c4:	b005      	add	sp, #20
   bb3c6:	bd30      	pop	{r4, r5, pc}

000bb3c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb3cc:	b085      	sub	sp, #20
   bb3ce:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb3d0:	4601      	mov	r1, r0
   bb3d2:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb3d4:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb3d6:	f7ff ffb1 	bl	bb33c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bb3da:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bb3dc:	9b02      	ldr	r3, [sp, #8]
   bb3de:	f04f 0e14 	mov.w	lr, #20
   bb3e2:	fb0e 6c03 	mla	ip, lr, r3, r6
   bb3e6:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bb3e8:	45b4      	cmp	ip, r6
   bb3ea:	d00d      	beq.n	bb408 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bb3ec:	45b9      	cmp	r9, r7
   bb3ee:	f106 0614 	add.w	r6, r6, #20
   bb3f2:	d009      	beq.n	bb408 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bb3f4:	f1a6 0514 	sub.w	r5, r6, #20
   bb3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb3fa:	fb0e 8407 	mla	r4, lr, r7, r8
   bb3fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb400:	682b      	ldr	r3, [r5, #0]
   bb402:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bb404:	3701      	adds	r7, #1
   bb406:	e7ef      	b.n	bb3e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb408:	a801      	add	r0, sp, #4
   bb40a:	f7ff f8e3 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb40e:	4638      	mov	r0, r7
   bb410:	b005      	add	sp, #20
   bb412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb416 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bb416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb41a:	b08b      	sub	sp, #44	; 0x2c
   bb41c:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb41e:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bb422:	a801      	add	r0, sp, #4
   bb424:	f7ff fe8a 	bl	bb13c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bb428:	9b02      	ldr	r3, [sp, #8]
   bb42a:	2b00      	cmp	r3, #0
   bb42c:	dd4a      	ble.n	bb4c4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb42e:	f104 0114 	add.w	r1, r4, #20
   bb432:	a804      	add	r0, sp, #16
   bb434:	f7ff ff82 	bl	bb33c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb438:	f104 0108 	add.w	r1, r4, #8
   bb43c:	a807      	add	r0, sp, #28
   bb43e:	f7ff ff7d 	bl	bb33c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bb442:	9d05      	ldr	r5, [sp, #20]
   bb444:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bb446:	2d00      	cmp	r5, #0
   bb448:	dc01      	bgt.n	bb44e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bb44a:	2e00      	cmp	r6, #0
   bb44c:	dd38      	ble.n	bb4c0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bb44e:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bb450:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bb452:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bb456:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bb45a:	2314      	movs	r3, #20
   bb45c:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bb460:	fb03 8505 	mla	r5, r3, r5, r8
   bb464:	fb03 9606 	mla	r6, r3, r6, r9
   bb468:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bb46a:	45ba      	cmp	sl, r7
   bb46c:	d028      	beq.n	bb4c0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bb46e:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bb470:	45ab      	cmp	fp, r5
   bb472:	d015      	beq.n	bb4a0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bb474:	4659      	mov	r1, fp
   bb476:	4650      	mov	r0, sl
   bb478:	f7fe fca5 	bl	b9dc6 <_ZNK8particle7BleUuideqERKS0_>
   bb47c:	f10b 0b14 	add.w	fp, fp, #20
   bb480:	4604      	mov	r4, r0
   bb482:	2800      	cmp	r0, #0
   bb484:	d0f4      	beq.n	bb470 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb486:	a807      	add	r0, sp, #28
   bb488:	f7ff f8a4 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb48c:	a804      	add	r0, sp, #16
   bb48e:	f7ff f8a1 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb492:	a801      	add	r0, sp, #4
   bb494:	f7ff f89e 	bl	ba5d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bb498:	4620      	mov	r0, r4
   bb49a:	b00b      	add	sp, #44	; 0x2c
   bb49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb4a0:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bb4a2:	45b3      	cmp	fp, r6
   bb4a4:	d009      	beq.n	bb4ba <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bb4a6:	4659      	mov	r1, fp
   bb4a8:	4650      	mov	r0, sl
   bb4aa:	f7fe fc8c 	bl	b9dc6 <_ZNK8particle7BleUuideqERKS0_>
   bb4ae:	f10b 0b14 	add.w	fp, fp, #20
   bb4b2:	4604      	mov	r4, r0
   bb4b4:	2800      	cmp	r0, #0
   bb4b6:	d0f4      	beq.n	bb4a2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bb4b8:	e7e5      	b.n	bb486 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bb4ba:	f10a 0a14 	add.w	sl, sl, #20
   bb4be:	e7d4      	b.n	bb46a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bb4c0:	2400      	movs	r4, #0
   bb4c2:	e7e0      	b.n	bb486 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bb4c4:	2401      	movs	r4, #1
   bb4c6:	e7e4      	b.n	bb492 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bb4c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bb4c8:	b513      	push	{r0, r1, r4, lr}
   bb4ca:	460b      	mov	r3, r1
   bb4cc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb4ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb4d2:	466c      	mov	r4, sp
   bb4d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bb4d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb4dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bb4e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   bb4e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bb4e8:	b002      	add	sp, #8
   bb4ea:	bd10      	pop	{r4, pc}

000bb4ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bb4ec:	b538      	push	{r3, r4, r5, lr}
   bb4ee:	4605      	mov	r5, r0
   bb4f0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb4f2:	f7ff ffe9 	bl	bb4c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb4f6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb4f8:	68a2      	ldr	r2, [r4, #8]
   bb4fa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb4fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb4fe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb500:	68e2      	ldr	r2, [r4, #12]
   bb502:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb504:	60e3      	str	r3, [r4, #12]
      }
   bb506:	bd38      	pop	{r3, r4, r5, pc}

000bb508 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bb508:	b530      	push	{r4, r5, lr}
   bb50a:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bb50c:	2300      	movs	r3, #0
   bb50e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bb510:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bb512:	4605      	mov	r5, r0
   bb514:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bb516:	b133      	cbz	r3, bb526 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb518:	2202      	movs	r2, #2
   bb51a:	4668      	mov	r0, sp
   bb51c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb51e:	68e3      	ldr	r3, [r4, #12]
   bb520:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bb522:	68a3      	ldr	r3, [r4, #8]
   bb524:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bb526:	4629      	mov	r1, r5
   bb528:	4668      	mov	r0, sp
   bb52a:	f7ff ffdf 	bl	bb4ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb52e:	4668      	mov	r0, sp
   bb530:	f7f8 ff02 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
      }
   bb534:	b005      	add	sp, #20
   bb536:	bd30      	pop	{r4, r5, pc}

000bb538 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb538:	b538      	push	{r3, r4, r5, lr}
   bb53a:	460d      	mov	r5, r1
      { return _M_ptr; }
   bb53c:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bb53e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb540:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bb542:	b123      	cbz	r3, bb54e <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bb544:	6828      	ldr	r0, [r5, #0]
   bb546:	314c      	adds	r1, #76	; 0x4c
   bb548:	304c      	adds	r0, #76	; 0x4c
   bb54a:	f7ff ffdd 	bl	bb508 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb54e:	4620      	mov	r0, r4
   bb550:	682b      	ldr	r3, [r5, #0]
   bb552:	f840 3b04 	str.w	r3, [r0], #4
   bb556:	6869      	ldr	r1, [r5, #4]
   bb558:	f7fe fb6e 	bl	b9c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bb55c:	4620      	mov	r0, r4
   bb55e:	bd38      	pop	{r3, r4, r5, pc}

000bb560 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb564:	4604      	mov	r4, r0
   bb566:	b087      	sub	sp, #28
    WiringBleLock lk;
   bb568:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb56a:	460e      	mov	r6, r1
   bb56c:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb56e:	f7fe fb89 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bb572:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb574:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb578:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bb57c:	4544      	cmp	r4, r8
   bb57e:	46a1      	mov	r9, r4
   bb580:	d016      	beq.n	bb5b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bb582:	4621      	mov	r1, r4
   bb584:	a801      	add	r0, sp, #4
   bb586:	f7fe fded 	bl	ba164 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bb58a:	4639      	mov	r1, r7
   bb58c:	a801      	add	r0, sp, #4
   bb58e:	f7fe fc1a 	bl	b9dc6 <_ZNK8particle7BleUuideqERKS0_>
   bb592:	3408      	adds	r4, #8
   bb594:	4605      	mov	r5, r0
   bb596:	2800      	cmp	r0, #0
   bb598:	d0f0      	beq.n	bb57c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bb59a:	4649      	mov	r1, r9
   bb59c:	4630      	mov	r0, r6
   bb59e:	f7ff ffcb 	bl	bb538 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bb5a2:	4668      	mov	r0, sp
   bb5a4:	f7fe fb7c 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb5a8:	4628      	mov	r0, r5
   bb5aa:	b007      	add	sp, #28
   bb5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bb5b0:	2500      	movs	r5, #0
   bb5b2:	e7f6      	b.n	bb5a2 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bb5b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb5b4:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb5b6:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb5b8:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb5ba:	344c      	adds	r4, #76	; 0x4c
   bb5bc:	b1b9      	cbz	r1, bb5ee <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bb5be:	e9cd 1200 	strd	r1, r2, [sp]
   bb5c2:	a802      	add	r0, sp, #8
   bb5c4:	4669      	mov	r1, sp
   bb5c6:	f7ff f865 	bl	ba694 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb5ca:	2300      	movs	r3, #0
	__x.swap(*this);
   bb5cc:	a906      	add	r1, sp, #24
   bb5ce:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bb5d0:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bb5d2:	f7ff ff8b 	bl	bb4ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bb5d6:	4621      	mov	r1, r4
   bb5d8:	a806      	add	r0, sp, #24
   bb5da:	f7ff ff87 	bl	bb4ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb5de:	a806      	add	r0, sp, #24
   bb5e0:	f7f8 feaa 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bb5e4:	a802      	add	r0, sp, #8
   bb5e6:	f7f8 fea7 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
}
   bb5ea:	b00a      	add	sp, #40	; 0x28
   bb5ec:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb5ee:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bb5f0:	e7eb      	b.n	bb5ca <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bb5f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb5f2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb5f6:	4604      	mov	r4, r0
   bb5f8:	460d      	mov	r5, r1
   bb5fa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb5fc:	d914      	bls.n	bb628 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb5fe:	4290      	cmp	r0, r2
   bb600:	d213      	bcs.n	bb62a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb602:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb606:	1a75      	subs	r5, r6, r1
   bb608:	f1a1 0708 	sub.w	r7, r1, #8
   bb60c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb60e:	42b7      	cmp	r7, r6
   bb610:	d018      	beq.n	bb644 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb612:	b11c      	cbz	r4, bb61c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb614:	4631      	mov	r1, r6
   bb616:	4620      	mov	r0, r4
   bb618:	f7ff f869 	bl	ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bb61c:	1d30      	adds	r0, r6, #4
   bb61e:	f7ff f87a 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb622:	3e08      	subs	r6, #8
   bb624:	3c08      	subs	r4, #8
   bb626:	e7f2      	b.n	bb60e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb628:	d00c      	beq.n	bb644 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb62a:	42b5      	cmp	r5, r6
   bb62c:	d00a      	beq.n	bb644 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb62e:	b11c      	cbz	r4, bb638 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb630:	4629      	mov	r1, r5
   bb632:	4620      	mov	r0, r4
   bb634:	f7ff f85b 	bl	ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb638:	1d28      	adds	r0, r5, #4
   bb63a:	f7ff f86c 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb63e:	3508      	adds	r5, #8
   bb640:	3408      	adds	r4, #8
   bb642:	e7f2      	b.n	bb62a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb646 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb646:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb648:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb64a:	4605      	mov	r5, r0
        if (n > 0) {
   bb64c:	dd11      	ble.n	bb672 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb64e:	00f0      	lsls	r0, r6, #3
   bb650:	f7fd ff76 	bl	b9540 <malloc>
            if (!d) {
   bb654:	4604      	mov	r4, r0
   bb656:	b158      	cbz	r0, bb670 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb658:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb65c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb660:	f7ff ffc7 	bl	bb5f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb664:	6828      	ldr	r0, [r5, #0]
   bb666:	f7fd ff73 	bl	b9550 <free>
        data_ = d;
   bb66a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb66c:	60ae      	str	r6, [r5, #8]
        return true;
   bb66e:	2001      	movs	r0, #1
    }
   bb670:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb672:	2400      	movs	r4, #0
   bb674:	e7f6      	b.n	bb664 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb676 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb67a:	2300      	movs	r3, #0
   bb67c:	e9c0 3300 	strd	r3, r3, [r0]
   bb680:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb682:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb684:	6849      	ldr	r1, [r1, #4]
   bb686:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb688:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb68a:	dd13      	ble.n	bb6b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb68c:	f7ff ffdb 	bl	bb646 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb690:	b180      	cbz	r0, bb6b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb692:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb696:	6827      	ldr	r7, [r4, #0]
   bb698:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb69c:	45b0      	cmp	r8, r6
   bb69e:	d007      	beq.n	bb6b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb6a0:	b11f      	cbz	r7, bb6aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb6a2:	4631      	mov	r1, r6
   bb6a4:	4638      	mov	r0, r7
   bb6a6:	f7ff f822 	bl	ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bb6aa:	3608      	adds	r6, #8
   bb6ac:	3708      	adds	r7, #8
   bb6ae:	e7f5      	b.n	bb69c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb6b0:	686b      	ldr	r3, [r5, #4]
   bb6b2:	6063      	str	r3, [r4, #4]
}
   bb6b4:	4620      	mov	r0, r4
   bb6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb6ba <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bb6ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb6bc:	460d      	mov	r5, r1
   bb6be:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb6c0:	a801      	add	r0, sp, #4
   bb6c2:	f7fe fadf 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bb6c6:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bb6c8:	4620      	mov	r0, r4
   bb6ca:	310c      	adds	r1, #12
   bb6cc:	f7ff ffd3 	bl	bb676 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb6d0:	a801      	add	r0, sp, #4
   bb6d2:	f7fe fae5 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb6d6:	4620      	mov	r0, r4
   bb6d8:	b003      	add	sp, #12
   bb6da:	bd30      	pop	{r4, r5, pc}

000bb6dc <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb6dc:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bb6de:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb6e0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb6e2:	4605      	mov	r5, r0
   bb6e4:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bb6e6:	b933      	cbnz	r3, bb6f6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bb6e8:	4608      	mov	r0, r1
   bb6ea:	f7fe fa5f 	bl	b9bac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bb6ee:	b910      	cbnz	r0, bb6f6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bb6f0:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bb6f2:	2201      	movs	r2, #1
   bb6f4:	729a      	strb	r2, [r3, #10]
    return services();
   bb6f6:	4628      	mov	r0, r5
   bb6f8:	4621      	mov	r1, r4
   bb6fa:	f7ff ffde 	bl	bb6ba <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bb6fe:	4628      	mov	r0, r5
   bb700:	bd38      	pop	{r3, r4, r5, pc}

000bb702 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb702:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb704:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb706:	6845      	ldr	r5, [r0, #4]
   bb708:	4668      	mov	r0, sp
   bb70a:	f7fe fff0 	bl	ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb70e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb712:	4299      	cmp	r1, r3
   bb714:	da10      	bge.n	bb738 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb716:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb718:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb71a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb71e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb722:	4629      	mov	r1, r5
   bb724:	f105 0008 	add.w	r0, r5, #8
   bb728:	f7ff ff63 	bl	bb5f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb72c:	b98d      	cbnz	r5, bb752 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb72e:	6863      	ldr	r3, [r4, #4]
   bb730:	3301      	adds	r3, #1
   bb732:	6063      	str	r3, [r4, #4]
    return true;
   bb734:	2601      	movs	r6, #1
   bb736:	e006      	b.n	bb746 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb738:	3101      	adds	r1, #1
   bb73a:	4620      	mov	r0, r4
   bb73c:	f7ff ff83 	bl	bb646 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb740:	4606      	mov	r6, r0
   bb742:	2800      	cmp	r0, #0
   bb744:	d1e7      	bne.n	bb716 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bb746:	a801      	add	r0, sp, #4
   bb748:	f7fe ffe5 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb74c:	4630      	mov	r0, r6
   bb74e:	b002      	add	sp, #8
   bb750:	bd70      	pop	{r4, r5, r6, pc}
   bb752:	4669      	mov	r1, sp
   bb754:	4628      	mov	r0, r5
   bb756:	f7fe ffca 	bl	ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb75a:	e7e8      	b.n	bb72e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb75c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bb760:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bb81c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bb764:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bb820 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb768:	b093      	sub	sp, #76	; 0x4c
   bb76a:	4605      	mov	r5, r0
   bb76c:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bb76e:	2700      	movs	r7, #0
   bb770:	682b      	ldr	r3, [r5, #0]
   bb772:	42bb      	cmp	r3, r7
   bb774:	d94e      	bls.n	bb814 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bb776:	a803      	add	r0, sp, #12
   bb778:	f7fe fd9a 	bl	ba2b0 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb77c:	261c      	movs	r6, #28
   bb77e:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bb780:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bb782:	437e      	muls	r6, r7
   bb784:	4432      	add	r2, r6
   bb786:	f10d 0c14 	add.w	ip, sp, #20
   bb78a:	1d13      	adds	r3, r2, #4
   bb78c:	46e3      	mov	fp, ip
   bb78e:	3214      	adds	r2, #20
   bb790:	6818      	ldr	r0, [r3, #0]
   bb792:	6859      	ldr	r1, [r3, #4]
   bb794:	46e6      	mov	lr, ip
   bb796:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bb79a:	3308      	adds	r3, #8
   bb79c:	4293      	cmp	r3, r2
   bb79e:	46f4      	mov	ip, lr
   bb7a0:	d1f6      	bne.n	bb790 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bb7a2:	6818      	ldr	r0, [r3, #0]
   bb7a4:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bb7a8:	4659      	mov	r1, fp
   bb7aa:	a80a      	add	r0, sp, #40	; 0x28
   bb7ac:	f7fe fac0 	bl	b9d30 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb7b0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bb7b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb7b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb7ba:	f8dc 3000 	ldr.w	r3, [ip]
   bb7be:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bb7c0:	686b      	ldr	r3, [r5, #4]
   bb7c2:	9a03      	ldr	r2, [sp, #12]
   bb7c4:	4433      	add	r3, r6
   bb7c6:	a903      	add	r1, sp, #12
   bb7c8:	8b1b      	ldrh	r3, [r3, #24]
   bb7ca:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bb7cc:	686b      	ldr	r3, [r5, #4]
   bb7ce:	4433      	add	r3, r6
   bb7d0:	8b5b      	ldrh	r3, [r3, #26]
   bb7d2:	82d3      	strh	r3, [r2, #22]
        return services_;
   bb7d4:	f8d8 0000 	ldr.w	r0, [r8]
   bb7d8:	f100 040c 	add.w	r4, r0, #12
   bb7dc:	a80a      	add	r0, sp, #40	; 0x28
   bb7de:	f7fe ff86 	bl	ba6ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bb7e2:	4620      	mov	r0, r4
   bb7e4:	a90a      	add	r1, sp, #40	; 0x28
   bb7e6:	f7ff ff8c 	bl	bb702 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bb7ea:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb7ec:	a80b      	add	r0, sp, #44	; 0x2c
   bb7ee:	f7fe ff92 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb7f2:	b954      	cbnz	r4, bb80a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bb7f4:	2320      	movs	r3, #32
   bb7f6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bb7fa:	f8cd 9000 	str.w	r9, [sp]
   bb7fe:	4623      	mov	r3, r4
   bb800:	aa0a      	add	r2, sp, #40	; 0x28
   bb802:	4651      	mov	r1, sl
   bb804:	2032      	movs	r0, #50	; 0x32
   bb806:	f7fd fdbf 	bl	b9388 <log_message>
   bb80a:	a804      	add	r0, sp, #16
   bb80c:	f7fe ff83 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb810:	3701      	adds	r7, #1
   bb812:	e7ad      	b.n	bb770 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bb814:	b013      	add	sp, #76	; 0x4c
   bb816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb81a:	bf00      	nop
   bb81c:	000c1549 	.word	0x000c1549
   bb820:	000c144b 	.word	0x000c144b

000bb824 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb824:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb828:	4604      	mov	r4, r0
   bb82a:	460d      	mov	r5, r1
   bb82c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb82e:	d914      	bls.n	bb85a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb830:	4290      	cmp	r0, r2
   bb832:	d213      	bcs.n	bb85c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb834:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb838:	1a75      	subs	r5, r6, r1
   bb83a:	f1a1 0708 	sub.w	r7, r1, #8
   bb83e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb840:	42b7      	cmp	r7, r6
   bb842:	d018      	beq.n	bb876 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb844:	b11c      	cbz	r4, bb84e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb846:	4631      	mov	r1, r6
   bb848:	4620      	mov	r0, r4
   bb84a:	f7fe ff42 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb84e:	1d30      	adds	r0, r6, #4
   bb850:	f7fe ff61 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb854:	3e08      	subs	r6, #8
   bb856:	3c08      	subs	r4, #8
   bb858:	e7f2      	b.n	bb840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb85a:	d00c      	beq.n	bb876 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb85c:	42b5      	cmp	r5, r6
   bb85e:	d00a      	beq.n	bb876 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb860:	b11c      	cbz	r4, bb86a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb862:	4629      	mov	r1, r5
   bb864:	4620      	mov	r0, r4
   bb866:	f7fe ff34 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb86a:	1d28      	adds	r0, r5, #4
   bb86c:	f7fe ff53 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb870:	3508      	adds	r5, #8
   bb872:	3408      	adds	r4, #8
   bb874:	e7f2      	b.n	bb85c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb878:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb87a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb87c:	4605      	mov	r5, r0
        if (n > 0) {
   bb87e:	dd11      	ble.n	bb8a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb880:	00f0      	lsls	r0, r6, #3
   bb882:	f7fd fe5d 	bl	b9540 <malloc>
            if (!d) {
   bb886:	4604      	mov	r4, r0
   bb888:	b158      	cbz	r0, bb8a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb88a:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb88e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb892:	f7ff ffc7 	bl	bb824 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb896:	6828      	ldr	r0, [r5, #0]
   bb898:	f7fd fe5a 	bl	b9550 <free>
        data_ = d;
   bb89c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb89e:	60ae      	str	r6, [r5, #8]
        return true;
   bb8a0:	2001      	movs	r0, #1
    }
   bb8a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb8a4:	2400      	movs	r4, #0
   bb8a6:	e7f6      	b.n	bb896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb8a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb8ac:	2300      	movs	r3, #0
   bb8ae:	e9c0 3300 	strd	r3, r3, [r0]
   bb8b2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb8b4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb8b6:	6849      	ldr	r1, [r1, #4]
   bb8b8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb8ba:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb8bc:	dd13      	ble.n	bb8e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb8be:	f7ff ffdb 	bl	bb878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb8c2:	b180      	cbz	r0, bb8e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb8c4:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb8c8:	6827      	ldr	r7, [r4, #0]
   bb8ca:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb8ce:	45b0      	cmp	r8, r6
   bb8d0:	d007      	beq.n	bb8e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb8d2:	b11f      	cbz	r7, bb8dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb8d4:	4631      	mov	r1, r6
   bb8d6:	4638      	mov	r0, r7
   bb8d8:	f7fe fefb 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bb8dc:	3608      	adds	r6, #8
   bb8de:	3708      	adds	r7, #8
   bb8e0:	e7f5      	b.n	bb8ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb8e2:	686b      	ldr	r3, [r5, #4]
   bb8e4:	6063      	str	r3, [r4, #4]
}
   bb8e6:	4620      	mov	r0, r4
   bb8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb8ec <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bb8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb8ee:	460d      	mov	r5, r1
   bb8f0:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb8f2:	a801      	add	r0, sp, #4
   bb8f4:	f7fe f9c6 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bb8f8:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bb8fa:	4620      	mov	r0, r4
   bb8fc:	3118      	adds	r1, #24
   bb8fe:	f7ff ffd3 	bl	bb8a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb902:	a801      	add	r0, sp, #4
   bb904:	f7fe f9cc 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb908:	4620      	mov	r0, r4
   bb90a:	b003      	add	sp, #12
   bb90c:	bd30      	pop	{r4, r5, pc}

000bb90e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb90e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb910:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb912:	6845      	ldr	r5, [r0, #4]
   bb914:	4668      	mov	r0, sp
   bb916:	f7fe fedc 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb91a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb91e:	4299      	cmp	r1, r3
   bb920:	da10      	bge.n	bb944 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb922:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb924:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb926:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb92a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb92e:	4629      	mov	r1, r5
   bb930:	f105 0008 	add.w	r0, r5, #8
   bb934:	f7ff ff76 	bl	bb824 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb938:	b98d      	cbnz	r5, bb95e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb93a:	6863      	ldr	r3, [r4, #4]
   bb93c:	3301      	adds	r3, #1
   bb93e:	6063      	str	r3, [r4, #4]
    return true;
   bb940:	2601      	movs	r6, #1
   bb942:	e006      	b.n	bb952 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb944:	3101      	adds	r1, #1
   bb946:	4620      	mov	r0, r4
   bb948:	f7ff ff96 	bl	bb878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb94c:	4606      	mov	r6, r0
   bb94e:	2800      	cmp	r0, #0
   bb950:	d1e7      	bne.n	bb922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb952:	a801      	add	r0, sp, #4
   bb954:	f7fe fedf 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb958:	4630      	mov	r0, r6
   bb95a:	b002      	add	sp, #8
   bb95c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb95e:	4669      	mov	r1, sp
   bb960:	4628      	mov	r0, r5
   bb962:	f7fe feb6 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb966:	e7e8      	b.n	bb93a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb968 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb968:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb96a:	b085      	sub	sp, #20
   bb96c:	4605      	mov	r5, r0
    WiringBleLock lk;
   bb96e:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb970:	460c      	mov	r4, r1
   bb972:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb974:	f7fe f986 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bb978:	2300      	movs	r3, #0
   bb97a:	e9c5 3300 	strd	r3, r3, [r5]
   bb97e:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bb980:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb982:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bb986:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bb98a:	42b4      	cmp	r4, r6
   bb98c:	d011      	beq.n	bb9b2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bb98e:	6838      	ldr	r0, [r7, #0]
   bb990:	4621      	mov	r1, r4
   bb992:	f7fe fba7 	bl	ba0e4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bb996:	b150      	cbz	r0, bb9ae <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bb998:	4621      	mov	r1, r4
   bb99a:	a802      	add	r0, sp, #8
   bb99c:	f7fe fe99 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb9a0:	a902      	add	r1, sp, #8
   bb9a2:	4628      	mov	r0, r5
   bb9a4:	f7ff ffb3 	bl	bb90e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bb9a8:	a803      	add	r0, sp, #12
   bb9aa:	f7fe feb4 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bb9ae:	3408      	adds	r4, #8
   bb9b0:	e7eb      	b.n	bb98a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bb9b2:	a801      	add	r0, sp, #4
   bb9b4:	f7fe f974 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb9b8:	4628      	mov	r0, r5
   bb9ba:	b005      	add	sp, #20
   bb9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb9c0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bb9c4:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb9c6:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb9c8:	b091      	sub	sp, #68	; 0x44
   bb9ca:	4606      	mov	r6, r0
   bb9cc:	460f      	mov	r7, r1
   bb9ce:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bb9d0:	b933      	cbnz	r3, bb9e0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bb9d2:	e9c0 3300 	strd	r3, r3, [r0]
   bb9d6:	6083      	str	r3, [r0, #8]
}
   bb9d8:	4630      	mov	r0, r6
   bb9da:	b011      	add	sp, #68	; 0x44
   bb9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bb9e0:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bb9e2:	7e0d      	ldrb	r5, [r1, #24]
   bb9e4:	2d00      	cmp	r5, #0
   bb9e6:	d158      	bne.n	bba9a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bb9e8:	2320      	movs	r3, #32
   bb9ea:	462a      	mov	r2, r5
   bb9ec:	a803      	add	r0, sp, #12
   bb9ee:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bb9f2:	f7fe fae4 	bl	b9fbe <_ZNK8particle7BleUuid8toStringEb>
   bb9f6:	9b03      	ldr	r3, [sp, #12]
   bb9f8:	9301      	str	r3, [sp, #4]
   bb9fa:	4b2b      	ldr	r3, [pc, #172]	; (bbaa8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bb9fc:	492b      	ldr	r1, [pc, #172]	; (bbaac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bb9fe:	9300      	str	r3, [sp, #0]
   bba00:	aa08      	add	r2, sp, #32
   bba02:	462b      	mov	r3, r5
   bba04:	2001      	movs	r0, #1
   bba06:	f7fd fcbf 	bl	b9388 <log_message>
   bba0a:	a803      	add	r0, sp, #12
   bba0c:	f7fd ff16 	bl	b983c <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bba10:	231c      	movs	r3, #28
   bba12:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bba16:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bba1a:	8a9a      	ldrh	r2, [r3, #20]
   bba1c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bba20:	8adb      	ldrh	r3, [r3, #22]
   bba22:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bba26:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bba28:	4a21      	ldr	r2, [pc, #132]	; (bbab0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bba2a:	8818      	ldrh	r0, [r3, #0]
   bba2c:	9500      	str	r5, [sp, #0]
   bba2e:	a908      	add	r1, sp, #32
   bba30:	f7fd faae 	bl	b8f90 <hal_ble_gatt_client_discover_characteristics>
   bba34:	2800      	cmp	r0, #0
   bba36:	db30      	blt.n	bba9a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bba38:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bba3a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bba3e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bba42:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bba44:	f1a4 0308 	sub.w	r3, r4, #8
   bba48:	4599      	cmp	r9, r3
   bba4a:	d022      	beq.n	bba92 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bba4c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bba50:	89db      	ldrh	r3, [r3, #14]
   bba52:	2b00      	cmp	r3, #0
   bba54:	d0f5      	beq.n	bba42 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bba56:	2210      	movs	r2, #16
   bba58:	2100      	movs	r1, #0
   bba5a:	eb0d 0002 	add.w	r0, sp, r2
   bba5e:	9503      	str	r5, [sp, #12]
   bba60:	f002 facf 	bl	be002 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bba64:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bba68:	89d9      	ldrh	r1, [r3, #14]
   bba6a:	683b      	ldr	r3, [r7, #0]
   bba6c:	aa03      	add	r2, sp, #12
   bba6e:	8818      	ldrh	r0, [r3, #0]
   bba70:	9500      	str	r5, [sp, #0]
   bba72:	2313      	movs	r3, #19
   bba74:	f7fd faaa 	bl	b8fcc <hal_ble_gatt_client_read>
                if (len > 0) {
   bba78:	2800      	cmp	r0, #0
   bba7a:	d0e2      	beq.n	bba42 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bba7c:	ab10      	add	r3, sp, #64	; 0x40
   bba7e:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bba80:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bba82:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bba86:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bba8a:	303c      	adds	r0, #60	; 0x3c
   bba8c:	f7fd ff77 	bl	b997e <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bba90:	e7d7      	b.n	bba42 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bba92:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bba96:	2201      	movs	r2, #1
   bba98:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bba9a:	4642      	mov	r2, r8
   bba9c:	4639      	mov	r1, r7
   bba9e:	4630      	mov	r0, r6
   bbaa0:	f7ff ff62 	bl	bb968 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bbaa4:	e798      	b.n	bb9d8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bbaa6:	bf00      	nop
   bbaa8:	000c156e 	.word	0x000c156e
   bbaac:	000c144b 	.word	0x000c144b
   bbab0:	000bbc59 	.word	0x000bbc59

000bbab4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bbab4:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bbab6:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bbab8:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bbaba:	b085      	sub	sp, #20
   bbabc:	4606      	mov	r6, r0
   bbabe:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bbac0:	b92b      	cbnz	r3, bbace <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bbac2:	a801      	add	r0, sp, #4
   bbac4:	f7ff fe0a 	bl	bb6dc <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bbac8:	a801      	add	r0, sp, #4
   bbaca:	f7fe fe33 	bl	ba734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bbace:	682b      	ldr	r3, [r5, #0]
   bbad0:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bbad4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bbad8:	42bc      	cmp	r4, r7
   bbada:	d009      	beq.n	bbaf0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bbadc:	4622      	mov	r2, r4
   bbade:	4629      	mov	r1, r5
   bbae0:	a801      	add	r0, sp, #4
   bbae2:	f7ff ff6d 	bl	bb9c0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bbae6:	a801      	add	r0, sp, #4
   bbae8:	f7fe fe36 	bl	ba758 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bbaec:	3408      	adds	r4, #8
   bbaee:	e7f3      	b.n	bbad8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bbaf0:	4630      	mov	r0, r6
   bbaf2:	4629      	mov	r1, r5
   bbaf4:	f7ff fefa 	bl	bb8ec <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bbaf8:	4630      	mov	r0, r6
   bbafa:	b005      	add	sp, #20
   bbafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bbb00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bbb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbb04:	4605      	mov	r5, r0
   bbb06:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bbb08:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bbb0a:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bbb0c:	460f      	mov	r7, r1
    return address_;
   bbb0e:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bbb10:	4698      	mov	r8, r3
    return address_;
   bbb12:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bbb14:	4b41      	ldr	r3, [pc, #260]	; (bbc1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bbb16:	9304      	str	r3, [sp, #16]
    return address_;
   bbb18:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bbb1a:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bbb1c:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bbb20:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bbb24:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bbb28:	f7fe fc8e 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bbb2c:	4b3c      	ldr	r3, [pc, #240]	; (bbc20 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bbb2e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bbb30:	f7fe fc8a 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bbb34:	6829      	ldr	r1, [r5, #0]
   bbb36:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bbb38:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bbb3a:	464a      	mov	r2, r9
   bbb3c:	a804      	add	r0, sp, #16
   bbb3e:	f7fd fa4f 	bl	b8fe0 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bbb42:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bbb44:	4604      	mov	r4, r0
   bbb46:	b138      	cbz	r0, bbb58 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bbb48:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bbb4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bbb4e:	801a      	strh	r2, [r3, #0]
}
   bbb50:	4620      	mov	r0, r4
   bbb52:	b013      	add	sp, #76	; 0x4c
   bbb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bbb58:	4639      	mov	r1, r7
   bbb5a:	4628      	mov	r0, r5
   bbb5c:	f7fe fbf8 	bl	ba350 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bbb60:	a803      	add	r0, sp, #12
   bbb62:	f7fe f88f 	bl	b9c84 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bbb66:	f7fe fc6f 	bl	ba448 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bbb6a:	6807      	ldr	r7, [r0, #0]
   bbb6c:	4629      	mov	r1, r5
   bbb6e:	3718      	adds	r7, #24
   bbb70:	4630      	mov	r0, r6
   bbb72:	f7fe fdc6 	bl	ba702 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bbb76:	4631      	mov	r1, r6
   bbb78:	4638      	mov	r0, r7
   bbb7a:	f7ff f92b 	bl	badd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bbb7e:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bbb80:	a80b      	add	r0, sp, #44	; 0x2c
   bbb82:	f7fe fdc8 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbb86:	f04f 0920 	mov.w	r9, #32
   bbb8a:	bb1f      	cbnz	r7, bbbd4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bbb8c:	4632      	mov	r2, r6
   bbb8e:	4b25      	ldr	r3, [pc, #148]	; (bbc24 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bbb90:	4e25      	ldr	r6, [pc, #148]	; (bbc28 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bbb92:	4926      	ldr	r1, [pc, #152]	; (bbc2c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bbb94:	9300      	str	r3, [sp, #0]
   bbb96:	2032      	movs	r0, #50	; 0x32
   bbb98:	4623      	mov	r3, r4
   bbb9a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bbb9e:	f7fd fbf3 	bl	b9388 <log_message>
   bbba2:	6830      	ldr	r0, [r6, #0]
   bbba4:	f7fd faa8 	bl	b90f8 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bbba8:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bbbaa:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bbbae:	4621      	mov	r1, r4
   bbbb0:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bbbb2:	4c1f      	ldr	r4, [pc, #124]	; (bbc30 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bbbb4:	f7fd f9ce 	bl	b8f54 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bbbb8:	6830      	ldr	r0, [r6, #0]
   bbbba:	f7fd fa95 	bl	b90e8 <os_mutex_recursive_lock>
        locked_ = true;
   bbbbe:	2301      	movs	r3, #1
   bbbc0:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bbbc4:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bbbc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bbbca:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bbbcc:	a803      	add	r0, sp, #12
   bbbce:	f7fe f867 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
   bbbd2:	e7bd      	b.n	bbb50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bbbd4:	a803      	add	r0, sp, #12
   bbbd6:	f7fe f863 	bl	b9ca0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bbbda:	4b16      	ldr	r3, [pc, #88]	; (bbc34 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bbbdc:	9300      	str	r3, [sp, #0]
   bbbde:	4913      	ldr	r1, [pc, #76]	; (bbc2c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bbbe0:	4623      	mov	r3, r4
   bbbe2:	4632      	mov	r2, r6
   bbbe4:	2001      	movs	r0, #1
   bbbe6:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bbbea:	f7fd fbcd 	bl	b9388 <log_message>
    if (automatic) {
   bbbee:	f1b8 0f00 	cmp.w	r8, #0
   bbbf2:	d0ad      	beq.n	bbb50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bbbf4:	4629      	mov	r1, r5
   bbbf6:	4630      	mov	r0, r6
   bbbf8:	f7ff ff5c 	bl	bbab4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bbbfc:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bbc00:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bbc04:	42bd      	cmp	r5, r7
   bbc06:	d005      	beq.n	bbc14 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bbc08:	4628      	mov	r0, r5
   bbc0a:	2101      	movs	r1, #1
   bbc0c:	f7fe fb16 	bl	ba23c <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bbc10:	3508      	adds	r5, #8
   bbc12:	e7f7      	b.n	bbc04 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bbc14:	4630      	mov	r0, r6
   bbc16:	f7fe fd9f 	bl	ba758 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bbc1a:	e799      	b.n	bbb50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bbc1c:	00180003 	.word	0x00180003
   bbc20:	000bae8d 	.word	0x000bae8d
   bbc24:	000c15a0 	.word	0x000c15a0
   bbc28:	2003e670 	.word	0x2003e670
   bbc2c:	000c144b 	.word	0x000c144b
   bbc30:	fffffefc 	.word	0xfffffefc
   bbc34:	000c15bc 	.word	0x000c15bc

000bbc38 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bbc38:	b513      	push	{r0, r1, r4, lr}
   bbc3a:	4604      	mov	r4, r0
   bbc3c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bbc40:	f7fe fb52 	bl	ba2e8 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bbc44:	9b00      	ldr	r3, [sp, #0]
   bbc46:	9901      	ldr	r1, [sp, #4]
   bbc48:	2200      	movs	r2, #0
   bbc4a:	4620      	mov	r0, r4
   bbc4c:	f7ff ff58 	bl	bbb00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bbc50:	4620      	mov	r0, r4
   bbc52:	b002      	add	sp, #8
   bbc54:	bd10      	pop	{r4, pc}
	...

000bbc58 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bbc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bbc5c:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bbc5e:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bbc60:	2600      	movs	r6, #0
   bbc62:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bbc66:	4b66      	ldr	r3, [pc, #408]	; (bbe00 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bbc68:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bbc6a:	4605      	mov	r5, r0
   bbc6c:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bbc6e:	4633      	mov	r3, r6
   bbc70:	4964      	ldr	r1, [pc, #400]	; (bbe04 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bbc72:	f8df 9194 	ldr.w	r9, [pc, #404]	; bbe08 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bbc76:	f8df 818c 	ldr.w	r8, [pc, #396]	; bbe04 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbc7a:	f8df a190 	ldr.w	sl, [pc, #400]	; bbe0c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bbc7e:	aa0c      	add	r2, sp, #48	; 0x30
   bbc80:	2001      	movs	r0, #1
   bbc82:	f7fd fb81 	bl	b9388 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bbc86:	682b      	ldr	r3, [r5, #0]
   bbc88:	42b3      	cmp	r3, r6
   bbc8a:	f240 80b5 	bls.w	bbdf8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bbc8e:	a803      	add	r0, sp, #12
   bbc90:	f7fe fa4e 	bl	ba130 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bbc94:	a805      	add	r0, sp, #20
   bbc96:	f7fe fb0b 	bl	ba2b0 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbc9a:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bbc9e:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bbca0:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bbca2:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bbca6:	445b      	add	r3, fp
        this->size = halHandles.size;
   bbca8:	8bd9      	ldrh	r1, [r3, #30]
   bbcaa:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bbcac:	8c19      	ldrh	r1, [r3, #32]
   bbcae:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bbcb0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bbcb2:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bbcb4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bbcb6:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bbcb8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bbcba:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bbcbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bbcbe:	8253      	strh	r3, [r2, #18]
   bbcc0:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bbcc4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bbcc8:	429a      	cmp	r2, r3
   bbcca:	d07d      	beq.n	bbdc8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bbccc:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bbcce:	8ac4      	ldrh	r4, [r0, #22]
   bbcd0:	428c      	cmp	r4, r1
   bbcd2:	d377      	bcc.n	bbdc4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bbcd4:	8a84      	ldrh	r4, [r0, #20]
   bbcd6:	428c      	cmp	r4, r1
   bbcd8:	d874      	bhi.n	bbdc4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbcda:	6859      	ldr	r1, [r3, #4]
   bbcdc:	9005      	str	r0, [sp, #20]
   bbcde:	a806      	add	r0, sp, #24
   bbce0:	f7fd ffaa 	bl	b9c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bbce4:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bbce8:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bbcec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbcf0:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bbcf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbcf6:	f8dc 3000 	ldr.w	r3, [ip]
   bbcfa:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bbcfc:	892b      	ldrh	r3, [r5, #8]
   bbcfe:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bbd02:	686b      	ldr	r3, [r5, #4]
   bbd04:	9c03      	ldr	r4, [sp, #12]
   bbd06:	445b      	add	r3, fp
   bbd08:	7e5b      	ldrb	r3, [r3, #25]
   bbd0a:	f013 0f02 	tst.w	r3, #2
   bbd0e:	d16e      	bne.n	bbdee <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bbd10:	686b      	ldr	r3, [r5, #4]
   bbd12:	445b      	add	r3, fp
   bbd14:	7e5b      	ldrb	r3, [r3, #25]
   bbd16:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bbd18:	bf42      	ittt	mi
   bbd1a:	7923      	ldrbmi	r3, [r4, #4]
   bbd1c:	f043 0304 	orrmi.w	r3, r3, #4
   bbd20:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bbd22:	686b      	ldr	r3, [r5, #4]
   bbd24:	445b      	add	r3, fp
   bbd26:	7e5b      	ldrb	r3, [r3, #25]
   bbd28:	0719      	lsls	r1, r3, #28
   bbd2a:	bf42      	ittt	mi
   bbd2c:	7923      	ldrbmi	r3, [r4, #4]
   bbd2e:	f043 0308 	orrmi.w	r3, r3, #8
   bbd32:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bbd34:	686b      	ldr	r3, [r5, #4]
   bbd36:	445b      	add	r3, fp
   bbd38:	7e5b      	ldrb	r3, [r3, #25]
   bbd3a:	06da      	lsls	r2, r3, #27
   bbd3c:	bf42      	ittt	mi
   bbd3e:	7923      	ldrbmi	r3, [r4, #4]
   bbd40:	f043 0310 	orrmi.w	r3, r3, #16
   bbd44:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bbd46:	686b      	ldr	r3, [r5, #4]
   bbd48:	445b      	add	r3, fp
   bbd4a:	aa07      	add	r2, sp, #28
   bbd4c:	7e5b      	ldrb	r3, [r3, #25]
   bbd4e:	069b      	lsls	r3, r3, #26
   bbd50:	bf42      	ittt	mi
   bbd52:	7923      	ldrbmi	r3, [r4, #4]
   bbd54:	f043 0320 	orrmi.w	r3, r3, #32
   bbd58:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bbd5a:	686b      	ldr	r3, [r5, #4]
   bbd5c:	449b      	add	fp, r3
   bbd5e:	f10b 0304 	add.w	r3, fp, #4
   bbd62:	4696      	mov	lr, r2
   bbd64:	f10b 0b14 	add.w	fp, fp, #20
   bbd68:	6818      	ldr	r0, [r3, #0]
   bbd6a:	6859      	ldr	r1, [r3, #4]
   bbd6c:	4694      	mov	ip, r2
   bbd6e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bbd72:	3308      	adds	r3, #8
   bbd74:	455b      	cmp	r3, fp
   bbd76:	4662      	mov	r2, ip
   bbd78:	d1f6      	bne.n	bbd68 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bbd7a:	6818      	ldr	r0, [r3, #0]
   bbd7c:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bbd80:	4671      	mov	r1, lr
   bbd82:	a80c      	add	r0, sp, #48	; 0x30
   bbd84:	f7fd ffd4 	bl	b9d30 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bbd88:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bbd8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbd90:	3414      	adds	r4, #20
   bbd92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbd94:	f8dc 3000 	ldr.w	r3, [ip]
   bbd98:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bbd9a:	a903      	add	r1, sp, #12
   bbd9c:	a80c      	add	r0, sp, #48	; 0x30
   bbd9e:	f7fe fc98 	bl	ba6d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbda2:	a90c      	add	r1, sp, #48	; 0x30
   bbda4:	f107 0018 	add.w	r0, r7, #24
   bbda8:	f7ff fdb1 	bl	bb90e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bbdac:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bbdae:	a80d      	add	r0, sp, #52	; 0x34
   bbdb0:	f7fe fcb1 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbdb4:	b99c      	cbnz	r4, bbdde <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbdb6:	2320      	movs	r3, #32
   bbdb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bbdbc:	f8cd a000 	str.w	sl, [sp]
   bbdc0:	4623      	mov	r3, r4
   bbdc2:	e007      	b.n	bbdd4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bbdc4:	3308      	adds	r3, #8
   bbdc6:	e77f      	b.n	bbcc8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bbdc8:	2420      	movs	r4, #32
   bbdca:	2300      	movs	r3, #0
   bbdcc:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bbdd0:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbdd4:	aa0c      	add	r2, sp, #48	; 0x30
   bbdd6:	4641      	mov	r1, r8
   bbdd8:	2032      	movs	r0, #50	; 0x32
   bbdda:	f7fd fad5 	bl	b9388 <log_message>
   bbdde:	a806      	add	r0, sp, #24
   bbde0:	f7fe fc99 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbde4:	a804      	add	r0, sp, #16
   bbde6:	f7fe fc96 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bbdea:	3601      	adds	r6, #1
   bbdec:	e74b      	b.n	bbc86 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bbdee:	7923      	ldrb	r3, [r4, #4]
   bbdf0:	f043 0302 	orr.w	r3, r3, #2
   bbdf4:	7123      	strb	r3, [r4, #4]
   bbdf6:	e78b      	b.n	bbd10 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bbdf8:	b015      	add	sp, #84	; 0x54
   bbdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbdfe:	bf00      	nop
   bbe00:	000c15d9 	.word	0x000c15d9
   bbe04:	000c144b 	.word	0x000c144b
   bbe08:	000c15f4 	.word	0x000c15f4
   bbe0c:	000c1623 	.word	0x000c1623

000bbe10 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbe10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbe12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbe14:	4604      	mov	r4, r0
   bbe16:	460d      	mov	r5, r1
   bbe18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbe1a:	d914      	bls.n	bbe46 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbe1c:	4290      	cmp	r0, r2
   bbe1e:	d213      	bcs.n	bbe48 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbe20:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bbe24:	1a75      	subs	r5, r6, r1
   bbe26:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bbe2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbe2c:	42b7      	cmp	r7, r6
   bbe2e:	d018      	beq.n	bbe62 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbe30:	b11c      	cbz	r4, bbe3a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbe32:	4631      	mov	r1, r6
   bbe34:	4620      	mov	r0, r4
   bbe36:	f7fe feb5 	bl	baba4 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bbe3a:	4630      	mov	r0, r6
   bbe3c:	f7fe fb72 	bl	ba524 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bbe40:	3e24      	subs	r6, #36	; 0x24
   bbe42:	3c24      	subs	r4, #36	; 0x24
   bbe44:	e7f2      	b.n	bbe2c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbe46:	d00c      	beq.n	bbe62 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbe48:	42b5      	cmp	r5, r6
   bbe4a:	d00a      	beq.n	bbe62 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbe4c:	b11c      	cbz	r4, bbe56 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbe4e:	4629      	mov	r1, r5
   bbe50:	4620      	mov	r0, r4
   bbe52:	f7fe fea7 	bl	baba4 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bbe56:	4628      	mov	r0, r5
   bbe58:	f7fe fb64 	bl	ba524 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bbe5c:	3524      	adds	r5, #36	; 0x24
   bbe5e:	3424      	adds	r4, #36	; 0x24
   bbe60:	e7f2      	b.n	bbe48 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbe62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbe64 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bbe66:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbe68:	4605      	mov	r5, r0
        if (n > 0) {
   bbe6a:	dd13      	ble.n	bbe94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bbe6c:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bbe6e:	fb07 f006 	mul.w	r0, r7, r6
   bbe72:	f7fd fb65 	bl	b9540 <malloc>
            if (!d) {
   bbe76:	4604      	mov	r4, r0
   bbe78:	b158      	cbz	r0, bbe92 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bbe7a:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbe7e:	fb07 1202 	mla	r2, r7, r2, r1
   bbe82:	f7ff ffc5 	bl	bbe10 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbe86:	6828      	ldr	r0, [r5, #0]
   bbe88:	f7fd fb62 	bl	b9550 <free>
        data_ = d;
   bbe8c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbe8e:	60ae      	str	r6, [r5, #8]
        return true;
   bbe90:	2001      	movs	r0, #1
    }
   bbe92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bbe94:	2400      	movs	r4, #0
   bbe96:	e7f6      	b.n	bbe86 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bbe98 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bbe98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbe9c:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bbe9e:	ad01      	add	r5, sp, #4
   bbea0:	4606      	mov	r6, r0
   bbea2:	4628      	mov	r0, r5
   bbea4:	460c      	mov	r4, r1
   bbea6:	f7fd ff28 	bl	b9cfa <_ZN8particle10BleAddressC1Ev>
   bbeaa:	a803      	add	r0, sp, #12
   bbeac:	f7fe ff55 	bl	bad5a <_ZN8particle18BleAdvertisingDataC1Ev>
   bbeb0:	a806      	add	r0, sp, #24
   bbeb2:	f7fe ff52 	bl	bad5a <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bbeb6:	6930      	ldr	r0, [r6, #16]
   bbeb8:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bbeba:	89f2      	ldrh	r2, [r6, #14]
   bbebc:	ab13      	add	r3, sp, #76	; 0x4c
   bbebe:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bbec0:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bbec4:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bbec6:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bbec8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bbecc:	a806      	add	r0, sp, #24
   bbece:	f7fe feb8 	bl	bac42 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bbed2:	89b2      	ldrh	r2, [r6, #12]
   bbed4:	6871      	ldr	r1, [r6, #4]
   bbed6:	a803      	add	r0, sp, #12
   bbed8:	f7fe feb3 	bl	bac42 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bbedc:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbee0:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bbee2:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbee4:	d003      	beq.n	bbeee <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bbee6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbeea:	429a      	cmp	r2, r3
   bbeec:	db5c      	blt.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bbeee:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bbef2:	2b7f      	cmp	r3, #127	; 0x7f
   bbef4:	d003      	beq.n	bbefe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bbef6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbefa:	429a      	cmp	r2, r3
   bbefc:	dc54      	bgt.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bbefe:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bbf02:	4638      	mov	r0, r7
   bbf04:	f7fe fd16 	bl	ba934 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bbf08:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bbf0a:	2b00      	cmp	r3, #0
   bbf0c:	dd52      	ble.n	bbfb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bbf0e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bbf10:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bbf14:	45b1      	cmp	r9, r6
   bbf16:	d050      	beq.n	bbfba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bbf18:	4630      	mov	r0, r6
   bbf1a:	4629      	mov	r1, r5
   bbf1c:	f7fd fed9 	bl	b9cd2 <_ZNK8particle10BleAddresseqERKS0_>
   bbf20:	3608      	adds	r6, #8
   bbf22:	4680      	mov	r8, r0
   bbf24:	2800      	cmp	r0, #0
   bbf26:	d0f5      	beq.n	bbf14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bbf28:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbf2a:	f7fd fb11 	bl	b9550 <free>
        if (!delegator->filterByRssi(result) ||
   bbf2e:	f1b8 0f00 	cmp.w	r8, #0
   bbf32:	d039      	beq.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bbf34:	4629      	mov	r1, r5
   bbf36:	4620      	mov	r0, r4
   bbf38:	f7fe fcbf 	bl	ba8ba <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bbf3c:	b3a0      	cbz	r0, bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bbf3e:	4629      	mov	r1, r5
   bbf40:	4620      	mov	r0, r4
   bbf42:	f7ff fa68 	bl	bb416 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bbf46:	4606      	mov	r6, r0
   bbf48:	b370      	cbz	r0, bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bbf4a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bbf4e:	4638      	mov	r0, r7
   bbf50:	f7fe fd3b 	bl	ba9ca <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bbf54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbf56:	2b00      	cmp	r3, #0
   bbf58:	dd12      	ble.n	bbf80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bbf5a:	a806      	add	r0, sp, #24
   bbf5c:	f7fe f895 	bl	ba08a <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bbf60:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bbf62:	a803      	add	r0, sp, #12
   bbf64:	f7fe f891 	bl	ba08a <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bbf68:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bbf6c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bbf70:	429a      	cmp	r2, r3
   bbf72:	d025      	beq.n	bbfc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bbf74:	f833 1b02 	ldrh.w	r1, [r3], #2
   bbf78:	4588      	cmp	r8, r1
   bbf7a:	d001      	beq.n	bbf80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bbf7c:	4288      	cmp	r0, r1
   bbf7e:	d1f7      	bne.n	bbf70 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bbf80:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbf82:	f7fd fae5 	bl	b9550 <free>
              !delegator->filterByServiceUUID(result) ||
   bbf86:	b17e      	cbz	r6, bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bbf88:	4629      	mov	r1, r5
   bbf8a:	4620      	mov	r0, r4
   bbf8c:	f7fe fd52 	bl	baa34 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bbf90:	b150      	cbz	r0, bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bbf92:	6a23      	ldr	r3, [r4, #32]
   bbf94:	b1b3      	cbz	r3, bbfc4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bbf96:	6963      	ldr	r3, [r4, #20]
   bbf98:	9513      	str	r5, [sp, #76]	; 0x4c
   bbf9a:	3301      	adds	r3, #1
   bbf9c:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbf9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbfa0:	4639      	mov	r1, r7
   bbfa2:	f104 0018 	add.w	r0, r4, #24
   bbfa6:	4798      	blx	r3
            return;
   bbfa8:	4628      	mov	r0, r5
   bbfaa:	f7fe fabb 	bl	ba524 <_ZN8particle13BleScanResultD1Ev>
    }
   bbfae:	b01d      	add	sp, #116	; 0x74
   bbfb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bbfb4:	f04f 0801 	mov.w	r8, #1
   bbfb8:	e7b6      	b.n	bbf28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbfba:	f04f 0800 	mov.w	r8, #0
   bbfbe:	e7b3      	b.n	bbf28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbfc0:	2600      	movs	r6, #0
   bbfc2:	e7dd      	b.n	bbf80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bbfc4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bbfc8:	f1b8 0f00 	cmp.w	r8, #0
   bbfcc:	d007      	beq.n	bbfde <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bbfce:	6963      	ldr	r3, [r4, #20]
   bbfd0:	3301      	adds	r3, #1
   bbfd2:	6163      	str	r3, [r4, #20]
   bbfd4:	4629      	mov	r1, r5
   bbfd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bbfd8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bbfdc:	e7e3      	b.n	bbfa6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bbfde:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bbfe2:	f1bc 0f00 	cmp.w	ip, #0
   bbfe6:	d025      	beq.n	bc034 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bbfe8:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbfea:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bbfec:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbfee:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bbff0:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbff2:	d8d9      	bhi.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbff4:	2224      	movs	r2, #36	; 0x24
   bbff6:	4353      	muls	r3, r2
    address_ = addr.address_;
   bbff8:	462a      	mov	r2, r5
   bbffa:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbffc:	3b24      	subs	r3, #36	; 0x24
   bbffe:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bc002:	f84c 0003 	str.w	r0, [ip, r3]
   bc006:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bc008:	f106 0008 	add.w	r0, r6, #8
   bc00c:	a903      	add	r1, sp, #12
   bc00e:	f7fe fde0 	bl	babd2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc012:	a906      	add	r1, sp, #24
   bc014:	f106 0014 	add.w	r0, r6, #20
   bc018:	f7fe fddb 	bl	babd2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc01c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bc020:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bc024:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bc028:	429a      	cmp	r2, r3
   bc02a:	d3bd      	bcc.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bc02c:	4640      	mov	r0, r8
   bc02e:	f7fc ff87 	bl	b8f40 <hal_ble_gap_stop_scan>
   bc032:	e7b9      	b.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bc034:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc038:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bc03c:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bc040:	a903      	add	r1, sp, #12
   bc042:	a80c      	add	r0, sp, #48	; 0x30
   bc044:	f7fe fd91 	bl	bab6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bc048:	a906      	add	r1, sp, #24
   bc04a:	a80f      	add	r0, sp, #60	; 0x3c
   bc04c:	f7fe fd8d 	bl	bab6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bc050:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bc054:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bc058:	4641      	mov	r1, r8
   bc05a:	4638      	mov	r0, r7
   bc05c:	6866      	ldr	r6, [r4, #4]
   bc05e:	f7fe fda1 	bl	baba4 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc062:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc066:	4299      	cmp	r1, r3
   bc068:	da10      	bge.n	bc08c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bc06a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc06c:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bc06e:	2224      	movs	r2, #36	; 0x24
   bc070:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bc074:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bc078:	fb02 3201 	mla	r2, r2, r1, r3
   bc07c:	4631      	mov	r1, r6
   bc07e:	f7ff fec7 	bl	bbe10 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc082:	b986      	cbnz	r6, bc0a6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bc084:	6863      	ldr	r3, [r4, #4]
   bc086:	3301      	adds	r3, #1
   bc088:	6063      	str	r3, [r4, #4]
    return true;
   bc08a:	e005      	b.n	bc098 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc08c:	3101      	adds	r1, #1
   bc08e:	4620      	mov	r0, r4
   bc090:	f7ff fee8 	bl	bbe64 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc094:	2800      	cmp	r0, #0
   bc096:	d1e8      	bne.n	bc06a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bc098:	4638      	mov	r0, r7
   bc09a:	f7fe fa43 	bl	ba524 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bc09e:	4640      	mov	r0, r8
   bc0a0:	f7fe fa40 	bl	ba524 <_ZN8particle13BleScanResultD1Ev>
   bc0a4:	e780      	b.n	bbfa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bc0a6:	4639      	mov	r1, r7
   bc0a8:	4630      	mov	r0, r6
   bc0aa:	f7fe fd7b 	bl	baba4 <_ZN8particle13BleScanResultC1EOS0_>
   bc0ae:	e7e9      	b.n	bc084 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bc0b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bc0b0:	4802      	ldr	r0, [pc, #8]	; (bc0bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc0b2:	2300      	movs	r3, #0
   bc0b4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bc0b6:	f7fd b80f 	b.w	b90d8 <os_mutex_recursive_create>
   bc0ba:	bf00      	nop
   bc0bc:	2003e670 	.word	0x2003e670

000bc0c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bc0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc0c2:	4606      	mov	r6, r0
   bc0c4:	460d      	mov	r5, r1
  size_t n = 0;
   bc0c6:	188f      	adds	r7, r1, r2
   bc0c8:	2400      	movs	r4, #0
  while (size--) {
   bc0ca:	42bd      	cmp	r5, r7
   bc0cc:	d00c      	beq.n	bc0e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bc0ce:	6833      	ldr	r3, [r6, #0]
   bc0d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bc0d4:	689b      	ldr	r3, [r3, #8]
   bc0d6:	4630      	mov	r0, r6
   bc0d8:	4798      	blx	r3
     if (chunk>=0)
   bc0da:	1e03      	subs	r3, r0, #0
   bc0dc:	db01      	blt.n	bc0e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bc0de:	441c      	add	r4, r3
  while (size--) {
   bc0e0:	e7f3      	b.n	bc0ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bc0e2:	2c00      	cmp	r4, #0
   bc0e4:	bf08      	it	eq
   bc0e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bc0e8:	4620      	mov	r0, r4
   bc0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc0ec <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bc0ec:	b508      	push	{r3, lr}
  return write(str);
   bc0ee:	f7fb fd8d 	bl	b7c0c <_ZN5Print5writeEPKc>
}
   bc0f2:	bd08      	pop	{r3, pc}

000bc0f4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bc0f4:	6803      	ldr	r3, [r0, #0]
   bc0f6:	689b      	ldr	r3, [r3, #8]
   bc0f8:	4718      	bx	r3

000bc0fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bc0fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bc0fc:	210d      	movs	r1, #13
{
   bc0fe:	4605      	mov	r5, r0
  size_t n = print('\r');
   bc100:	f7ff fff8 	bl	bc0f4 <_ZN5Print5printEc>
  n += print('\n');
   bc104:	210a      	movs	r1, #10
  size_t n = print('\r');
   bc106:	4604      	mov	r4, r0
  n += print('\n');
   bc108:	4628      	mov	r0, r5
   bc10a:	f7ff fff3 	bl	bc0f4 <_ZN5Print5printEc>
  return n;
}
   bc10e:	4420      	add	r0, r4
   bc110:	bd38      	pop	{r3, r4, r5, pc}

000bc112 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bc112:	b538      	push	{r3, r4, r5, lr}
   bc114:	4605      	mov	r5, r0
  return write(str);
   bc116:	f7fb fd79 	bl	b7c0c <_ZN5Print5writeEPKc>
   bc11a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bc11c:	4628      	mov	r0, r5
   bc11e:	f7ff ffec 	bl	bc0fa <_ZN5Print7printlnEv>
  return n;
}
   bc122:	4420      	add	r0, r4
   bc124:	bd38      	pop	{r3, r4, r5, pc}

000bc126 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bc126:	b530      	push	{r4, r5, lr}
   bc128:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bc12a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bc12c:	2a01      	cmp	r2, #1
  *str = '\0';
   bc12e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bc132:	bf98      	it	ls
   bc134:	220a      	movls	r2, #10
   bc136:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bc138:	460d      	mov	r5, r1
   bc13a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bc13e:	fb01 5312 	mls	r3, r1, r2, r5
   bc142:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc146:	2b09      	cmp	r3, #9
   bc148:	bf94      	ite	ls
   bc14a:	3330      	addls	r3, #48	; 0x30
   bc14c:	3337      	addhi	r3, #55	; 0x37
   bc14e:	b2db      	uxtb	r3, r3
  } while(n);
   bc150:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc152:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bc156:	d9ef      	bls.n	bc138 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bc158:	4621      	mov	r1, r4
   bc15a:	f7fb fd57 	bl	b7c0c <_ZN5Print5writeEPKc>
}
   bc15e:	b00b      	add	sp, #44	; 0x2c
   bc160:	bd30      	pop	{r4, r5, pc}

000bc162 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bc162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc166:	b086      	sub	sp, #24
   bc168:	af00      	add	r7, sp, #0
   bc16a:	4605      	mov	r5, r0
   bc16c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bc16e:	1d38      	adds	r0, r7, #4
   bc170:	2114      	movs	r1, #20
{
   bc172:	4614      	mov	r4, r2
    va_copy(args2, args);
   bc174:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bc176:	f7fd fa13 	bl	b95a0 <vsnprintf>

    if (n<bufsize)
   bc17a:	2813      	cmp	r0, #19
   bc17c:	d80e      	bhi.n	bc19c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bc17e:	1d39      	adds	r1, r7, #4
   bc180:	4628      	mov	r0, r5
   bc182:	f7fb fd43 	bl	b7c0c <_ZN5Print5writeEPKc>
   bc186:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bc188:	b11e      	cbz	r6, bc192 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bc18a:	4628      	mov	r0, r5
   bc18c:	f7ff ffb5 	bl	bc0fa <_ZN5Print7printlnEv>
   bc190:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bc192:	4620      	mov	r0, r4
   bc194:	3718      	adds	r7, #24
   bc196:	46bd      	mov	sp, r7
   bc198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bc19c:	f100 0308 	add.w	r3, r0, #8
   bc1a0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bc1a4:	46e8      	mov	r8, sp
        char bigger[n+1];
   bc1a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bc1aa:	4622      	mov	r2, r4
   bc1ac:	1c41      	adds	r1, r0, #1
   bc1ae:	683b      	ldr	r3, [r7, #0]
   bc1b0:	4668      	mov	r0, sp
   bc1b2:	f7fd f9f5 	bl	b95a0 <vsnprintf>
  return write(str);
   bc1b6:	4669      	mov	r1, sp
   bc1b8:	4628      	mov	r0, r5
   bc1ba:	f7fb fd27 	bl	b7c0c <_ZN5Print5writeEPKc>
   bc1be:	4604      	mov	r4, r0
   bc1c0:	46c5      	mov	sp, r8
   bc1c2:	e7e1      	b.n	bc188 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bc1c4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bc1c4:	b510      	push	{r4, lr}
   bc1c6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc1c8:	f7fc fe7a 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bc1cc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bc1ce:	6823      	ldr	r3, [r4, #0]
   bc1d0:	4620      	mov	r0, r4
   bc1d2:	695b      	ldr	r3, [r3, #20]
   bc1d4:	4798      	blx	r3
    if (c >= 0) return c;
   bc1d6:	2800      	cmp	r0, #0
   bc1d8:	da08      	bge.n	bc1ec <_ZN6Stream9timedReadEv+0x28>
   bc1da:	f7fc fe71 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bc1de:	68e3      	ldr	r3, [r4, #12]
   bc1e0:	1ac0      	subs	r0, r0, r3
   bc1e2:	68a3      	ldr	r3, [r4, #8]
   bc1e4:	4298      	cmp	r0, r3
   bc1e6:	d3f2      	bcc.n	bc1ce <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bc1e8:	f04f 30ff 	mov.w	r0, #4294967295
}
   bc1ec:	bd10      	pop	{r4, pc}
	...

000bc1f0 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bc1f0:	b570      	push	{r4, r5, r6, lr}
   bc1f2:	460d      	mov	r5, r1
  String ret;
   bc1f4:	4909      	ldr	r1, [pc, #36]	; (bc21c <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bc1f6:	4604      	mov	r4, r0
   bc1f8:	4616      	mov	r6, r2
  String ret;
   bc1fa:	f7fd fb6a 	bl	b98d2 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bc1fe:	4628      	mov	r0, r5
   bc200:	f7ff ffe0 	bl	bc1c4 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bc204:	2800      	cmp	r0, #0
   bc206:	db06      	blt.n	bc216 <_ZN6Stream15readStringUntilEc+0x26>
   bc208:	4286      	cmp	r6, r0
   bc20a:	d004      	beq.n	bc216 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bc20c:	b2c1      	uxtb	r1, r0
   bc20e:	4620      	mov	r0, r4
   bc210:	f7fd fbde 	bl	b99d0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bc214:	e7f3      	b.n	bc1fe <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bc216:	4620      	mov	r0, r4
   bc218:	bd70      	pop	{r4, r5, r6, pc}
   bc21a:	bf00      	nop
   bc21c:	000c0674 	.word	0x000c0674

000bc220 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bc220:	4b01      	ldr	r3, [pc, #4]	; (bc228 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bc222:	4a02      	ldr	r2, [pc, #8]	; (bc22c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bc224:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bc226:	4770      	bx	lr
   bc228:	2003e678 	.word	0x2003e678
   bc22c:	000c16c2 	.word	0x000c16c2

000bc230 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bc230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bc234:	4a15      	ldr	r2, [pc, #84]	; (bc28c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bc236:	f8df 8060 	ldr.w	r8, [pc, #96]	; bc298 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bc23a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bc23e:	1980      	adds	r0, r0, r6
   bc240:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bc244:	4b12      	ldr	r3, [pc, #72]	; (bc290 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bc246:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bc24a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bc24e:	1986      	adds	r6, r0, r6
   bc250:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bc254:	42bb      	cmp	r3, r7
   bc256:	bf08      	it	eq
   bc258:	42b2      	cmpeq	r2, r6
{
   bc25a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bc25c:	d013      	beq.n	bc286 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bc25e:	a903      	add	r1, sp, #12
   bc260:	4668      	mov	r0, sp
   bc262:	e9cd 6700 	strd	r6, r7, [sp]
   bc266:	f7fd f9cb 	bl	b9600 <localtime_r>
	calendar_time.tm_year += 1900;
   bc26a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc26c:	4d09      	ldr	r5, [pc, #36]	; (bc294 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bc26e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc272:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bc274:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bc278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bc27a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bc27c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bc27e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bc282:	6823      	ldr	r3, [r4, #0]
   bc284:	602b      	str	r3, [r5, #0]
    }
}
   bc286:	b00c      	add	sp, #48	; 0x30
   bc288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc28c:	2003e6b0 	.word	0x2003e6b0
   bc290:	2003e6a8 	.word	0x2003e6a8
   bc294:	2003e680 	.word	0x2003e680
   bc298:	2003e6b8 	.word	0x2003e6b8

000bc29c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bc29c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bc29e:	2000      	movs	r0, #0
   bc2a0:	f7fd f93e 	bl	b9520 <spark_sync_time_pending>
   bc2a4:	b128      	cbz	r0, bc2b2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc2a6:	f7fd f923 	bl	b94f0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bc2aa:	f080 0001 	eor.w	r0, r0, #1
   bc2ae:	b2c0      	uxtb	r0, r0
    }
   bc2b0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bc2b2:	2001      	movs	r0, #1
   bc2b4:	e7fc      	b.n	bc2b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bc2b8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bc2b8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bc2ba:	f7ff ffb9 	bl	bc230 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bc2be:	4b02      	ldr	r3, [pc, #8]	; (bc2c8 <_ZN9TimeClass5monthEx+0x10>)
   bc2c0:	6918      	ldr	r0, [r3, #16]
}
   bc2c2:	3001      	adds	r0, #1
   bc2c4:	bd08      	pop	{r3, pc}
   bc2c6:	bf00      	nop
   bc2c8:	2003e680 	.word	0x2003e680

000bc2cc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bc2cc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bc2ce:	2000      	movs	r0, #0
   bc2d0:	f7fc fdfe 	bl	b8ed0 <hal_rtc_time_is_valid>
    if (rtcstate)
   bc2d4:	4604      	mov	r4, r0
   bc2d6:	b9a0      	cbnz	r0, bc302 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bc2d8:	f7fd f85e 	bl	b9398 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bc2dc:	2801      	cmp	r0, #1
   bc2de:	d110      	bne.n	bc302 <_ZN9TimeClass7isValidEv+0x36>
   bc2e0:	4620      	mov	r0, r4
   bc2e2:	f7fd f881 	bl	b93e8 <system_thread_get_state>
   bc2e6:	b960      	cbnz	r0, bc302 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bc2e8:	f7ff ffd8 	bl	bc29c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bc2ec:	b910      	cbnz	r0, bc2f4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bc2ee:	f7fd f8f7 	bl	b94e0 <spark_process>
        while (_while() && !_condition()) {
   bc2f2:	e7f9      	b.n	bc2e8 <_ZN9TimeClass7isValidEv+0x1c>
   bc2f4:	f7ff ffd2 	bl	bc29c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bc2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bc2fc:	2000      	movs	r0, #0
   bc2fe:	f7fc bde7 	b.w	b8ed0 <hal_rtc_time_is_valid>
}
   bc302:	4620      	mov	r0, r4
   bc304:	bd10      	pop	{r4, pc}

000bc306 <_ZN9TimeClass3nowEv>:
{
   bc306:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bc308:	f7ff ffe0 	bl	bc2cc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bc30c:	2210      	movs	r2, #16
   bc30e:	2100      	movs	r1, #0
   bc310:	4668      	mov	r0, sp
   bc312:	f001 fe76 	bl	be002 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bc316:	2100      	movs	r1, #0
   bc318:	4668      	mov	r0, sp
   bc31a:	f7fc fde1 	bl	b8ee0 <hal_rtc_get_time>
}
   bc31e:	9800      	ldr	r0, [sp, #0]
   bc320:	b005      	add	sp, #20
   bc322:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bc328 <_ZN9TimeClass4hourEv>:
{
   bc328:	b508      	push	{r3, lr}
	return hour(now());
   bc32a:	f7ff ffec 	bl	bc306 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bc32e:	17c1      	asrs	r1, r0, #31
   bc330:	f7ff ff7e 	bl	bc230 <_ZL22Refresh_UnixTime_Cachex>
}
   bc334:	4b01      	ldr	r3, [pc, #4]	; (bc33c <_ZN9TimeClass4hourEv+0x14>)
   bc336:	6898      	ldr	r0, [r3, #8]
   bc338:	bd08      	pop	{r3, pc}
   bc33a:	bf00      	nop
   bc33c:	2003e680 	.word	0x2003e680

000bc340 <_ZN9TimeClass6minuteEv>:
{
   bc340:	b508      	push	{r3, lr}
	return minute(now());
   bc342:	f7ff ffe0 	bl	bc306 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bc346:	17c1      	asrs	r1, r0, #31
   bc348:	f7ff ff72 	bl	bc230 <_ZL22Refresh_UnixTime_Cachex>
}
   bc34c:	4b01      	ldr	r3, [pc, #4]	; (bc354 <_ZN9TimeClass6minuteEv+0x14>)
   bc34e:	6858      	ldr	r0, [r3, #4]
   bc350:	bd08      	pop	{r3, pc}
   bc352:	bf00      	nop
   bc354:	2003e680 	.word	0x2003e680

000bc358 <_ZN9TimeClass6secondEv>:
{
   bc358:	b508      	push	{r3, lr}
	return second(now());
   bc35a:	f7ff ffd4 	bl	bc306 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bc35e:	17c1      	asrs	r1, r0, #31
   bc360:	f7ff ff66 	bl	bc230 <_ZL22Refresh_UnixTime_Cachex>
}
   bc364:	4b01      	ldr	r3, [pc, #4]	; (bc36c <_ZN9TimeClass6secondEv+0x14>)
   bc366:	6818      	ldr	r0, [r3, #0]
   bc368:	bd08      	pop	{r3, pc}
   bc36a:	bf00      	nop
   bc36c:	2003e680 	.word	0x2003e680

000bc370 <_ZN9TimeClass3dayEv>:
{
   bc370:	b508      	push	{r3, lr}
	return day(now());
   bc372:	f7ff ffc8 	bl	bc306 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bc376:	17c1      	asrs	r1, r0, #31
   bc378:	f7ff ff5a 	bl	bc230 <_ZL22Refresh_UnixTime_Cachex>
}
   bc37c:	4b01      	ldr	r3, [pc, #4]	; (bc384 <_ZN9TimeClass3dayEv+0x14>)
   bc37e:	68d8      	ldr	r0, [r3, #12]
   bc380:	bd08      	pop	{r3, pc}
   bc382:	bf00      	nop
   bc384:	2003e680 	.word	0x2003e680

000bc388 <_ZN9TimeClass5monthEv>:
{
   bc388:	b508      	push	{r3, lr}
	return month(now());
   bc38a:	f7ff ffbc 	bl	bc306 <_ZN9TimeClass3nowEv>
}
   bc38e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bc392:	17c1      	asrs	r1, r0, #31
   bc394:	f7ff bf90 	b.w	bc2b8 <_ZN9TimeClass5monthEx>

000bc398 <_ZN9TimeClass4yearEv>:
{
   bc398:	b508      	push	{r3, lr}
	return year(now());
   bc39a:	f7ff ffb4 	bl	bc306 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bc39e:	17c1      	asrs	r1, r0, #31
   bc3a0:	f7ff ff46 	bl	bc230 <_ZL22Refresh_UnixTime_Cachex>
}
   bc3a4:	4b01      	ldr	r3, [pc, #4]	; (bc3ac <_ZN9TimeClass4yearEv+0x14>)
   bc3a6:	6958      	ldr	r0, [r3, #20]
   bc3a8:	bd08      	pop	{r3, pc}
   bc3aa:	bf00      	nop
   bc3ac:	2003e680 	.word	0x2003e680

000bc3b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bc3b0:	4b02      	ldr	r3, [pc, #8]	; (bc3bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bc3b2:	681a      	ldr	r2, [r3, #0]
   bc3b4:	4b02      	ldr	r3, [pc, #8]	; (bc3c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bc3b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bc3b8:	4770      	bx	lr
   bc3ba:	bf00      	nop
   bc3bc:	2003da8c 	.word	0x2003da8c
   bc3c0:	2003e67c 	.word	0x2003e67c

000bc3c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bc3c4:	2100      	movs	r1, #0
   bc3c6:	f7fc bff7 	b.w	b93b8 <system_delay_ms>
	...

000bc3cc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bc3cc:	4b01      	ldr	r3, [pc, #4]	; (bc3d4 <_GLOBAL__sub_I_RGB+0x8>)
   bc3ce:	2200      	movs	r2, #0
   bc3d0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bc3d2:	4770      	bx	lr
   bc3d4:	2003e6c0 	.word	0x2003e6c0

000bc3d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bc3d8:	4b01      	ldr	r3, [pc, #4]	; (bc3e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bc3da:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bc3dc:	4770      	bx	lr
   bc3de:	bf00      	nop
   bc3e0:	2003da90 	.word	0x2003da90

000bc3e4 <serialEventRun>:
{
   bc3e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bc3e6:	4b0b      	ldr	r3, [pc, #44]	; (bc414 <serialEventRun+0x30>)
   bc3e8:	b143      	cbz	r3, bc3fc <serialEventRun+0x18>
   bc3ea:	f000 fbff 	bl	bcbec <_Z16_fetch_usbserialv>
   bc3ee:	6803      	ldr	r3, [r0, #0]
   bc3f0:	691b      	ldr	r3, [r3, #16]
   bc3f2:	4798      	blx	r3
   bc3f4:	2800      	cmp	r0, #0
   bc3f6:	dd01      	ble.n	bc3fc <serialEventRun+0x18>
        serialEvent();
   bc3f8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bc3fc:	4b06      	ldr	r3, [pc, #24]	; (bc418 <serialEventRun+0x34>)
   bc3fe:	b143      	cbz	r3, bc412 <serialEventRun+0x2e>
   bc400:	f000 feaa 	bl	bd158 <_Z22__fetch_global_Serial1v>
   bc404:	6803      	ldr	r3, [r0, #0]
   bc406:	691b      	ldr	r3, [r3, #16]
   bc408:	4798      	blx	r3
   bc40a:	2800      	cmp	r0, #0
   bc40c:	dd01      	ble.n	bc412 <serialEventRun+0x2e>
        serialEvent1();
   bc40e:	f3af 8000 	nop.w
}
   bc412:	bd08      	pop	{r3, pc}
	...

000bc41c <_post_loop>:
{
   bc41c:	b508      	push	{r3, lr}
	serialEventRun();
   bc41e:	f7ff ffe1 	bl	bc3e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bc422:	f7fc fd4d 	bl	b8ec0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bc426:	4b01      	ldr	r3, [pc, #4]	; (bc42c <_post_loop+0x10>)
   bc428:	6018      	str	r0, [r3, #0]
}
   bc42a:	bd08      	pop	{r3, pc}
   bc42c:	2003e740 	.word	0x2003e740

000bc430 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bc430:	4805      	ldr	r0, [pc, #20]	; (bc448 <_Z33system_initialize_user_backup_ramv+0x18>)
   bc432:	4a06      	ldr	r2, [pc, #24]	; (bc44c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bc434:	4906      	ldr	r1, [pc, #24]	; (bc450 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bc436:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bc438:	1a12      	subs	r2, r2, r0
   bc43a:	f001 fdba 	bl	bdfb2 <memcpy>
    __backup_sram_signature = signature;
   bc43e:	4b05      	ldr	r3, [pc, #20]	; (bc454 <_Z33system_initialize_user_backup_ramv+0x24>)
   bc440:	4a05      	ldr	r2, [pc, #20]	; (bc458 <_Z33system_initialize_user_backup_ramv+0x28>)
   bc442:	601a      	str	r2, [r3, #0]
}
   bc444:	bd08      	pop	{r3, pc}
   bc446:	bf00      	nop
   bc448:	2003f400 	.word	0x2003f400
   bc44c:	2003f404 	.word	0x2003f404
   bc450:	000c1de4 	.word	0x000c1de4
   bc454:	2003f400 	.word	0x2003f400
   bc458:	9a271c1e 	.word	0x9a271c1e

000bc45c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bc45c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bc45e:	2300      	movs	r3, #0
   bc460:	9300      	str	r3, [sp, #0]
   bc462:	461a      	mov	r2, r3
   bc464:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bc468:	f7fc ffd0 	bl	b940c <system_ctrl_set_result>
}
   bc46c:	b003      	add	sp, #12
   bc46e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bc474 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bc474:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bc476:	8843      	ldrh	r3, [r0, #2]
   bc478:	2b0a      	cmp	r3, #10
   bc47a:	d008      	beq.n	bc48e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bc47c:	2b50      	cmp	r3, #80	; 0x50
   bc47e:	d10b      	bne.n	bc498 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bc480:	4b09      	ldr	r3, [pc, #36]	; (bc4a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bc482:	681b      	ldr	r3, [r3, #0]
   bc484:	b14b      	cbz	r3, bc49a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bc486:	b003      	add	sp, #12
   bc488:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bc48c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bc48e:	f7ff ffe5 	bl	bc45c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bc492:	b003      	add	sp, #12
   bc494:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bc498:	2300      	movs	r3, #0
   bc49a:	9300      	str	r3, [sp, #0]
   bc49c:	461a      	mov	r2, r3
   bc49e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bc4a2:	f7fc ffb3 	bl	b940c <system_ctrl_set_result>
}
   bc4a6:	e7f4      	b.n	bc492 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bc4a8:	2003e6d4 	.word	0x2003e6d4

000bc4ac <module_user_init_hook>:
{
   bc4ac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bc4ae:	4812      	ldr	r0, [pc, #72]	; (bc4f8 <module_user_init_hook+0x4c>)
   bc4b0:	2100      	movs	r1, #0
   bc4b2:	f7fd f89d 	bl	b95f0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bc4b6:	4b11      	ldr	r3, [pc, #68]	; (bc4fc <module_user_init_hook+0x50>)
   bc4b8:	681a      	ldr	r2, [r3, #0]
   bc4ba:	4b11      	ldr	r3, [pc, #68]	; (bc500 <module_user_init_hook+0x54>)
   bc4bc:	429a      	cmp	r2, r3
   bc4be:	4b11      	ldr	r3, [pc, #68]	; (bc504 <module_user_init_hook+0x58>)
   bc4c0:	bf0c      	ite	eq
   bc4c2:	2201      	moveq	r2, #1
   bc4c4:	2200      	movne	r2, #0
   bc4c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bc4c8:	d001      	beq.n	bc4ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bc4ca:	f7ff ffb1 	bl	bc430 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bc4ce:	f7fc fcdf 	bl	b8e90 <HAL_RNG_GetRandomNumber>
   bc4d2:	4604      	mov	r4, r0
    srand(seed);
   bc4d4:	f001 fd9e 	bl	be014 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bc4d8:	4b0b      	ldr	r3, [pc, #44]	; (bc508 <module_user_init_hook+0x5c>)
   bc4da:	b113      	cbz	r3, bc4e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bc4dc:	4620      	mov	r0, r4
   bc4de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bc4e2:	2100      	movs	r1, #0
   bc4e4:	4808      	ldr	r0, [pc, #32]	; (bc508 <module_user_init_hook+0x5c>)
   bc4e6:	f7fd f823 	bl	b9530 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bc4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bc4ee:	4807      	ldr	r0, [pc, #28]	; (bc50c <module_user_init_hook+0x60>)
   bc4f0:	2100      	movs	r1, #0
   bc4f2:	f7fc bf81 	b.w	b93f8 <system_ctrl_set_app_request_handler>
   bc4f6:	bf00      	nop
   bc4f8:	000bc3d9 	.word	0x000bc3d9
   bc4fc:	2003f400 	.word	0x2003f400
   bc500:	9a271c1e 	.word	0x9a271c1e
   bc504:	2003e6d0 	.word	0x2003e6d0
   bc508:	00000000 	.word	0x00000000
   bc50c:	000bc475 	.word	0x000bc475

000bc510 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc510:	4770      	bx	lr

000bc512 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc512:	2000      	movs	r0, #0
   bc514:	4770      	bx	lr

000bc516 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc516:	b510      	push	{r4, lr}
   bc518:	2110      	movs	r1, #16
   bc51a:	4604      	mov	r4, r0
   bc51c:	f7f7 fdbf 	bl	b409e <_ZdlPvj>
   bc520:	4620      	mov	r0, r4
   bc522:	bd10      	pop	{r4, pc}

000bc524 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc524:	b508      	push	{r3, lr}
      { delete this; }
   bc526:	f7ff fff6 	bl	bc516 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc52a:	bd08      	pop	{r3, pc}

000bc52c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc52c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc52e:	2200      	movs	r2, #0
   bc530:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc534:	6002      	str	r2, [r0, #0]
   bc536:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc538:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc53a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc53c:	680c      	ldr	r4, [r1, #0]
   bc53e:	8085      	strh	r5, [r0, #4]
   bc540:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc542:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc544:	bd30      	pop	{r4, r5, pc}

000bc546 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc546:	b510      	push	{r4, lr}
   bc548:	4604      	mov	r4, r0
    free((void*)msg_);
   bc54a:	6800      	ldr	r0, [r0, #0]
   bc54c:	f7fd f800 	bl	b9550 <free>
}
   bc550:	4620      	mov	r0, r4
   bc552:	bd10      	pop	{r4, pc}

000bc554 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bc554:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bc556:	68c4      	ldr	r4, [r0, #12]
   bc558:	b1f4      	cbz	r4, bc598 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bc55a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bc55c:	2b02      	cmp	r3, #2
   bc55e:	d103      	bne.n	bc568 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bc560:	f104 000c 	add.w	r0, r4, #12
   bc564:	f7ff ffef 	bl	bc546 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bc568:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bc56a:	b135      	cbz	r5, bc57a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bc56c:	4628      	mov	r0, r5
   bc56e:	f7f7 fee3 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bc572:	2110      	movs	r1, #16
   bc574:	4628      	mov	r0, r5
   bc576:	f7f7 fd92 	bl	b409e <_ZdlPvj>
   bc57a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bc57c:	b135      	cbz	r5, bc58c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bc57e:	4628      	mov	r0, r5
   bc580:	f7f7 feda 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
   bc584:	2110      	movs	r1, #16
   bc586:	4628      	mov	r0, r5
   bc588:	f7f7 fd89 	bl	b409e <_ZdlPvj>
   bc58c:	4620      	mov	r0, r4
   bc58e:	2114      	movs	r1, #20
   bc590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc594:	f7f7 bd83 	b.w	b409e <_ZdlPvj>
   bc598:	bd38      	pop	{r3, r4, r5, pc}

000bc59a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc59a:	680b      	ldr	r3, [r1, #0]
   bc59c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc59e:	684b      	ldr	r3, [r1, #4]
   bc5a0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc5a2:	b113      	cbz	r3, bc5aa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc5a4:	685a      	ldr	r2, [r3, #4]
   bc5a6:	3201      	adds	r2, #1
   bc5a8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc5aa:	4770      	bx	lr

000bc5ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc5ae:	4604      	mov	r4, r0
   bc5b0:	4668      	mov	r0, sp
   bc5b2:	460d      	mov	r5, r1
   bc5b4:	f7ff fff1 	bl	bc59a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc5b8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc5ba:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc5bc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc5be:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc5c0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc5c2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc5c4:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bc5c6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc5c8:	f7fe f8a5 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc5cc:	b135      	cbz	r5, bc5dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc5ce:	1d28      	adds	r0, r5, #4
   bc5d0:	f7fe f8a1 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc5d4:	2108      	movs	r1, #8
   bc5d6:	4628      	mov	r0, r5
   bc5d8:	f7f7 fd61 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc5dc:	4620      	mov	r0, r4
   bc5de:	b003      	add	sp, #12
   bc5e0:	bd30      	pop	{r4, r5, pc}

000bc5e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc5e2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc5e4:	b510      	push	{r4, lr}
      if (_M_empty())
   bc5e6:	b90a      	cbnz	r2, bc5ec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc5e8:	f000 fe3a 	bl	bd260 <_ZSt25__throw_bad_function_callv>
    }
   bc5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc5f0:	68c3      	ldr	r3, [r0, #12]
   bc5f2:	4718      	bx	r3

000bc5f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc5f4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc5f6:	6800      	ldr	r0, [r0, #0]
   bc5f8:	f100 0110 	add.w	r1, r0, #16
   bc5fc:	f7ff fff1 	bl	bc5e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc600:	bd08      	pop	{r3, pc}

000bc602 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc602:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc604:	b510      	push	{r4, lr}
      if (_M_empty())
   bc606:	b90a      	cbnz	r2, bc60c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc608:	f000 fe2a 	bl	bd260 <_ZSt25__throw_bad_function_callv>
    }
   bc60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc610:	68c3      	ldr	r3, [r0, #12]
   bc612:	4718      	bx	r3

000bc614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc614:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc616:	6800      	ldr	r0, [r0, #0]
   bc618:	f100 0110 	add.w	r1, r0, #16
   bc61c:	f7ff fff1 	bl	bc602 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc620:	bd08      	pop	{r3, pc}
	...

000bc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc624:	b538      	push	{r3, r4, r5, lr}
   bc626:	2300      	movs	r3, #0
   bc628:	4604      	mov	r4, r0
   bc62a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc62c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc62e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc630:	f7f7 fd31 	bl	b4096 <_Znwj>
   bc634:	b128      	cbz	r0, bc642 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc636:	2301      	movs	r3, #1
   bc638:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc63c:	4b02      	ldr	r3, [pc, #8]	; (bc648 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc63e:	6003      	str	r3, [r0, #0]
   bc640:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc642:	6020      	str	r0, [r4, #0]
	}
   bc644:	4620      	mov	r0, r4
   bc646:	bd38      	pop	{r3, r4, r5, pc}
   bc648:	000c16ec 	.word	0x000c16ec

000bc64c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc64c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc64e:	2300      	movs	r3, #0
   bc650:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc652:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc654:	4604      	mov	r4, r0
   bc656:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc658:	b12b      	cbz	r3, bc666 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc65a:	2202      	movs	r2, #2
   bc65c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc65e:	68eb      	ldr	r3, [r5, #12]
   bc660:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc662:	68ab      	ldr	r3, [r5, #8]
   bc664:	60a3      	str	r3, [r4, #8]
    }
   bc666:	4620      	mov	r0, r4
   bc668:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc66c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc66c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc66e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc670:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc672:	4668      	mov	r0, sp
   bc674:	f7ff ff5a 	bl	bc52c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc678:	f04f 0302 	mov.w	r3, #2
   bc67c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc680:	2a00      	cmp	r2, #0
   bc682:	d103      	bne.n	bc68c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc684:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc688:	2900      	cmp	r1, #0
   bc68a:	d1f7      	bne.n	bc67c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc68c:	d125      	bne.n	bc6da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc68e:	f104 050c 	add.w	r5, r4, #12
   bc692:	4669      	mov	r1, sp
   bc694:	4628      	mov	r0, r5
   bc696:	f7ff ff49 	bl	bc52c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc69a:	f3bf 8f5b 	dmb	ish
   bc69e:	2301      	movs	r3, #1
   bc6a0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc6a2:	2000      	movs	r0, #0
   bc6a4:	f104 0308 	add.w	r3, r4, #8
   bc6a8:	f3bf 8f5b 	dmb	ish
   bc6ac:	e853 6f00 	ldrex	r6, [r3]
   bc6b0:	e843 0200 	strex	r2, r0, [r3]
   bc6b4:	2a00      	cmp	r2, #0
   bc6b6:	d1f9      	bne.n	bc6ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc6b8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc6bc:	b16e      	cbz	r6, bc6da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc6be:	f7fc fe83 	bl	b93c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc6c2:	b178      	cbz	r0, bc6e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc6c4:	4629      	mov	r1, r5
   bc6c6:	4630      	mov	r0, r6
   bc6c8:	f7ff ff8b 	bl	bc5e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc6cc:	4630      	mov	r0, r6
   bc6ce:	f7f7 fe33 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc6d2:	2110      	movs	r1, #16
   bc6d4:	4630      	mov	r0, r6
   bc6d6:	f7f7 fce2 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc6da:	4668      	mov	r0, sp
   bc6dc:	f7ff ff33 	bl	bc546 <_ZN8particle5ErrorD1Ev>
    }
   bc6e0:	b009      	add	sp, #36	; 0x24
   bc6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc6e4:	4631      	mov	r1, r6
   bc6e6:	a802      	add	r0, sp, #8
   bc6e8:	f7ff ffb0 	bl	bc64c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc6ec:	68e0      	ldr	r0, [r4, #12]
   bc6ee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc6f2:	b108      	cbz	r0, bc6f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc6f4:	f001 fd1c 	bl	be130 <strdup>
        type_(type) {
   bc6f8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc6fa:	2010      	movs	r0, #16
   bc6fc:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc700:	f7f7 fcc9 	bl	b4096 <_Znwj>
   bc704:	4605      	mov	r5, r0
   bc706:	b1e8      	cbz	r0, bc744 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc708:	2700      	movs	r7, #0
   bc70a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc70c:	2018      	movs	r0, #24
   bc70e:	f7f7 fcc2 	bl	b4096 <_Znwj>
   bc712:	4604      	mov	r4, r0
   bc714:	b188      	cbz	r0, bc73a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc716:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc718:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc71a:	a802      	add	r0, sp, #8
   bc71c:	f7fe fed4 	bl	bb4c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc720:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc722:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc724:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc726:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc728:	9204      	str	r2, [sp, #16]
   bc72a:	a906      	add	r1, sp, #24
   bc72c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc72e:	60e3      	str	r3, [r4, #12]
   bc730:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc734:	9205      	str	r2, [sp, #20]
   bc736:	f7ff fef9 	bl	bc52c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc73a:	4b08      	ldr	r3, [pc, #32]	; (bc75c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc73c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc73e:	4b08      	ldr	r3, [pc, #32]	; (bc760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc740:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc742:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc744:	a806      	add	r0, sp, #24
   bc746:	f7ff fefe 	bl	bc546 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc74a:	a802      	add	r0, sp, #8
   bc74c:	f7f7 fdf4 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc750:	2200      	movs	r2, #0
   bc752:	4629      	mov	r1, r5
   bc754:	4803      	ldr	r0, [pc, #12]	; (bc764 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc756:	f7fc fe3f 	bl	b93d8 <application_thread_invoke>
   bc75a:	e7b7      	b.n	bc6cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc75c:	000bc5f5 	.word	0x000bc5f5
   bc760:	000bc879 	.word	0x000bc879
   bc764:	000bcddb 	.word	0x000bcddb

000bc768 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc76c:	b08b      	sub	sp, #44	; 0x2c
   bc76e:	4605      	mov	r5, r0
   bc770:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc774:	460f      	mov	r7, r1
   bc776:	4690      	mov	r8, r2
   bc778:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc77a:	f7fc feb9 	bl	b94f0 <spark_cloud_flag_connected>
   bc77e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc780:	4683      	mov	fp, r0
   bc782:	bb38      	cbnz	r0, bc7d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc784:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc788:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc78a:	a905      	add	r1, sp, #20
   bc78c:	4630      	mov	r0, r6
   bc78e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc792:	f7ff fecb 	bl	bc52c <_ZN8particle5ErrorC1EOS0_>
   bc796:	2014      	movs	r0, #20
   bc798:	f7f7 fc7d 	bl	b4096 <_Znwj>
   bc79c:	4604      	mov	r4, r0
   bc79e:	b148      	cbz	r0, bc7b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc7a0:	2302      	movs	r3, #2
   bc7a2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc7a4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc7a6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc7aa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc7ac:	4631      	mov	r1, r6
   bc7ae:	300c      	adds	r0, #12
   bc7b0:	f7ff febc 	bl	bc52c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc7b4:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc7b6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc7b8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc7bc:	f7ff ff32 	bl	bc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc7c0:	4630      	mov	r0, r6
   bc7c2:	f7ff fec0 	bl	bc546 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc7c6:	a805      	add	r0, sp, #20
   bc7c8:	f7ff febd 	bl	bc546 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc7cc:	4628      	mov	r0, r5
   bc7ce:	b00b      	add	sp, #44	; 0x2c
   bc7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc7d4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc7d6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc7d8:	2014      	movs	r0, #20
   bc7da:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc7de:	9307      	str	r3, [sp, #28]
   bc7e0:	f7f7 fc59 	bl	b4096 <_Znwj>
   bc7e4:	4601      	mov	r1, r0
   bc7e6:	b118      	cbz	r0, bc7f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc7e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc7ec:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc7ee:	7044      	strb	r4, [r0, #1]
   bc7f0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc7f2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc7f4:	f7ff ff16 	bl	bc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc7f8:	4b1e      	ldr	r3, [pc, #120]	; (bc874 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc7fa:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc7fc:	2008      	movs	r0, #8
   bc7fe:	f7f7 fc4a 	bl	b4096 <_Znwj>
   bc802:	4604      	mov	r4, r0
   bc804:	b110      	cbz	r0, bc80c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc806:	a903      	add	r1, sp, #12
   bc808:	f7ff fec7 	bl	bc59a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc80c:	9600      	str	r6, [sp, #0]
   bc80e:	fa5f f38a 	uxtb.w	r3, sl
   bc812:	464a      	mov	r2, r9
   bc814:	4641      	mov	r1, r8
   bc816:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc818:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc81a:	f7fc fe71 	bl	b9500 <spark_send_event>
   bc81e:	b9b8      	cbnz	r0, bc850 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc820:	9b03      	ldr	r3, [sp, #12]
   bc822:	785b      	ldrb	r3, [r3, #1]
   bc824:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc828:	b993      	cbnz	r3, bc850 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc82a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc82e:	a905      	add	r1, sp, #20
   bc830:	a803      	add	r0, sp, #12
   bc832:	9205      	str	r2, [sp, #20]
   bc834:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc838:	f7ff ff18 	bl	bc66c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc83c:	a805      	add	r0, sp, #20
   bc83e:	f7ff fe82 	bl	bc546 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc842:	a805      	add	r0, sp, #20
   bc844:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc846:	f7ff feb1 	bl	bc5ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc84a:	a806      	add	r0, sp, #24
   bc84c:	f7fd ff63 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc850:	a903      	add	r1, sp, #12
   bc852:	a805      	add	r0, sp, #20
   bc854:	f7ff fea1 	bl	bc59a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc858:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc85a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc85c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc85e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc860:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc862:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc864:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc866:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc868:	f7fd ff55 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc86c:	a804      	add	r0, sp, #16
   bc86e:	f7fd ff52 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc872:	e7ab      	b.n	bc7cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc874:	000bc8f5 	.word	0x000bc8f5

000bc878 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc878:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc87c:	4605      	mov	r5, r0
	switch (__op)
   bc87e:	d103      	bne.n	bc888 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc880:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc882:	6003      	str	r3, [r0, #0]
      }
   bc884:	2000      	movs	r0, #0
   bc886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc888:	2a02      	cmp	r2, #2
   bc88a:	d010      	beq.n	bc8ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc88c:	2a03      	cmp	r2, #3
   bc88e:	d1f9      	bne.n	bc884 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc890:	6804      	ldr	r4, [r0, #0]
   bc892:	2c00      	cmp	r4, #0
   bc894:	d0f6      	beq.n	bc884 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc896:	f104 0010 	add.w	r0, r4, #16
   bc89a:	f7ff fe54 	bl	bc546 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc89e:	4620      	mov	r0, r4
   bc8a0:	f7f7 fd4a 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc8a4:	2118      	movs	r1, #24
   bc8a6:	4620      	mov	r0, r4
   bc8a8:	f7f7 fbf9 	bl	b409e <_ZdlPvj>
   bc8ac:	e7ea      	b.n	bc884 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc8ae:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc8b0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc8b2:	f7f7 fbf0 	bl	b4096 <_Znwj>
   bc8b6:	4604      	mov	r4, r0
   bc8b8:	b150      	cbz	r0, bc8d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc8ba:	4631      	mov	r1, r6
   bc8bc:	f7ff fec6 	bl	bc64c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc8c0:	6930      	ldr	r0, [r6, #16]
   bc8c2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc8c6:	b108      	cbz	r0, bc8cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc8c8:	f001 fc32 	bl	be130 <strdup>
        type_(type) {
   bc8cc:	6120      	str	r0, [r4, #16]
   bc8ce:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc8d0:	602c      	str	r4, [r5, #0]
	}
   bc8d2:	e7d7      	b.n	bc884 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc8d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc8d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc8d6:	2300      	movs	r3, #0
   bc8d8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc8da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc8dc:	4604      	mov	r4, r0
   bc8de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc8e0:	b12b      	cbz	r3, bc8ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc8e2:	2202      	movs	r2, #2
   bc8e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc8e6:	68eb      	ldr	r3, [r5, #12]
   bc8e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc8ea:	68ab      	ldr	r3, [r5, #8]
   bc8ec:	60a3      	str	r3, [r4, #8]
    }
   bc8ee:	4620      	mov	r0, r4
   bc8f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc8f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc8f6:	b089      	sub	sp, #36	; 0x24
   bc8f8:	4604      	mov	r4, r0
   bc8fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc8fc:	a801      	add	r0, sp, #4
   bc8fe:	4611      	mov	r1, r2
   bc900:	f7ff fe54 	bl	bc5ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc904:	b1a4      	cbz	r4, bc930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc906:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc908:	b11d      	cbz	r5, bc912 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc90a:	4628      	mov	r0, r5
   bc90c:	f001 fc10 	bl	be130 <strdup>
   bc910:	4605      	mov	r5, r0
   bc912:	a801      	add	r0, sp, #4
   bc914:	a903      	add	r1, sp, #12
        type_(type) {
   bc916:	9503      	str	r5, [sp, #12]
   bc918:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc91c:	f7ff fea6 	bl	bc66c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc920:	a803      	add	r0, sp, #12
   bc922:	f7ff fe10 	bl	bc546 <_ZN8particle5ErrorD1Ev>
   bc926:	a802      	add	r0, sp, #8
   bc928:	f7fd fef5 	bl	ba716 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc92c:	b009      	add	sp, #36	; 0x24
   bc92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc930:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc932:	2301      	movs	r3, #1
   bc934:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc938:	2a00      	cmp	r2, #0
   bc93a:	d103      	bne.n	bc944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc93c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc940:	2900      	cmp	r1, #0
   bc942:	d1f7      	bne.n	bc934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc944:	d1ef      	bne.n	bc926 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc946:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc948:	f3bf 8f5b 	dmb	ish
   bc94c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc94e:	1d2b      	adds	r3, r5, #4
   bc950:	f3bf 8f5b 	dmb	ish
   bc954:	e853 6f00 	ldrex	r6, [r3]
   bc958:	e843 4200 	strex	r2, r4, [r3]
   bc95c:	2a00      	cmp	r2, #0
   bc95e:	d1f9      	bne.n	bc954 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc960:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc964:	2e00      	cmp	r6, #0
   bc966:	d0de      	beq.n	bc926 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc968:	4620      	mov	r0, r4
   bc96a:	f7fc fd2d 	bl	b93c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc96e:	4607      	mov	r7, r0
   bc970:	b160      	cbz	r0, bc98c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc972:	f105 010c 	add.w	r1, r5, #12
   bc976:	4630      	mov	r0, r6
   bc978:	f7ff fe43 	bl	bc602 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc97c:	4630      	mov	r0, r6
   bc97e:	f7f7 fcdb 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc982:	2110      	movs	r1, #16
   bc984:	4630      	mov	r0, r6
   bc986:	f7f7 fb8a 	bl	b409e <_ZdlPvj>
   bc98a:	e7cc      	b.n	bc926 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc98c:	4631      	mov	r1, r6
   bc98e:	a803      	add	r0, sp, #12
   bc990:	f7ff ffa0 	bl	bc8d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc994:	7b2b      	ldrb	r3, [r5, #12]
   bc996:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc99a:	2010      	movs	r0, #16
   bc99c:	f7f7 fb7b 	bl	b4096 <_Znwj>
   bc9a0:	4605      	mov	r5, r0
   bc9a2:	b1d0      	cbz	r0, bc9da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc9a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc9a6:	2014      	movs	r0, #20
   bc9a8:	f7f7 fb75 	bl	b4096 <_Znwj>
   bc9ac:	4604      	mov	r4, r0
   bc9ae:	b178      	cbz	r0, bc9d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc9b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc9b2:	4601      	mov	r1, r0
   bc9b4:	a803      	add	r0, sp, #12
   bc9b6:	f7fe fd87 	bl	bb4c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc9ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc9bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc9be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc9c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc9c2:	9205      	str	r2, [sp, #20]
   bc9c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc9c6:	60e3      	str	r3, [r4, #12]
   bc9c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc9cc:	9206      	str	r2, [sp, #24]
   bc9ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc9d0:	4b06      	ldr	r3, [pc, #24]	; (bc9ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc9d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc9d4:	4b06      	ldr	r3, [pc, #24]	; (bc9f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc9d6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc9d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc9da:	a803      	add	r0, sp, #12
   bc9dc:	f7f7 fcac 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc9e0:	2200      	movs	r2, #0
   bc9e2:	4629      	mov	r1, r5
   bc9e4:	4803      	ldr	r0, [pc, #12]	; (bc9f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc9e6:	f7fc fcf7 	bl	b93d8 <application_thread_invoke>
   bc9ea:	e7c7      	b.n	bc97c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc9ec:	000bc615 	.word	0x000bc615
   bc9f0:	000bc9f9 	.word	0x000bc9f9
   bc9f4:	000bcddb 	.word	0x000bcddb

000bc9f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc9f8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc9fa:	b570      	push	{r4, r5, r6, lr}
   bc9fc:	4604      	mov	r4, r0
	switch (__op)
   bc9fe:	d103      	bne.n	bca08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bca00:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bca02:	6003      	str	r3, [r0, #0]
      }
   bca04:	2000      	movs	r0, #0
   bca06:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bca08:	2a02      	cmp	r2, #2
   bca0a:	d00c      	beq.n	bca26 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bca0c:	2a03      	cmp	r2, #3
   bca0e:	d1f9      	bne.n	bca04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bca10:	6804      	ldr	r4, [r0, #0]
   bca12:	2c00      	cmp	r4, #0
   bca14:	d0f6      	beq.n	bca04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bca16:	4620      	mov	r0, r4
   bca18:	f7f7 fc8e 	bl	b4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bca1c:	2114      	movs	r1, #20
   bca1e:	4620      	mov	r0, r4
   bca20:	f7f7 fb3d 	bl	b409e <_ZdlPvj>
   bca24:	e7ee      	b.n	bca04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bca26:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bca28:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bca2a:	f7f7 fb34 	bl	b4096 <_Znwj>
   bca2e:	4605      	mov	r5, r0
   bca30:	b120      	cbz	r0, bca3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bca32:	4631      	mov	r1, r6
   bca34:	f7ff ff4e 	bl	bc8d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bca38:	7c33      	ldrb	r3, [r6, #16]
   bca3a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bca3c:	6025      	str	r5, [r4, #0]
	}
   bca3e:	e7e1      	b.n	bca04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bca40 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bca40:	4770      	bx	lr

000bca42 <_ZN9IPAddressD0Ev>:
   bca42:	b510      	push	{r4, lr}
   bca44:	2118      	movs	r1, #24
   bca46:	4604      	mov	r4, r0
   bca48:	f7f7 fb29 	bl	b409e <_ZdlPvj>
   bca4c:	4620      	mov	r0, r4
   bca4e:	bd10      	pop	{r4, pc}

000bca50 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bca50:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bca52:	7d03      	ldrb	r3, [r0, #20]
   bca54:	2b06      	cmp	r3, #6
{
   bca56:	b08d      	sub	sp, #52	; 0x34
   bca58:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bca5a:	f100 0704 	add.w	r7, r0, #4
   bca5e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bca62:	d012      	beq.n	bca8a <_ZNK9IPAddress7printToER5Print+0x3a>
   bca64:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bca68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bca6c:	220a      	movs	r2, #10
   bca6e:	4630      	mov	r0, r6
   bca70:	f7ff fb59 	bl	bc126 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bca74:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bca76:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bca78:	d019      	beq.n	bcaae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bca7a:	2c00      	cmp	r4, #0
   bca7c:	d0f4      	beq.n	bca68 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bca7e:	212e      	movs	r1, #46	; 0x2e
   bca80:	4630      	mov	r0, r6
   bca82:	f7ff fb37 	bl	bc0f4 <_ZN5Print5printEc>
   bca86:	4404      	add	r4, r0
   bca88:	e7ee      	b.n	bca68 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bca8a:	232f      	movs	r3, #47	; 0x2f
   bca8c:	466a      	mov	r2, sp
   bca8e:	4639      	mov	r1, r7
   bca90:	200a      	movs	r0, #10
		buf[0] = 0;
   bca92:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bca96:	f7fc fb3f 	bl	b9118 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bca9a:	4668      	mov	r0, sp
   bca9c:	f001 fb65 	bl	be16a <strlen>
   bcaa0:	6833      	ldr	r3, [r6, #0]
   bcaa2:	4602      	mov	r2, r0
   bcaa4:	68db      	ldr	r3, [r3, #12]
   bcaa6:	4669      	mov	r1, sp
   bcaa8:	4630      	mov	r0, r6
   bcaaa:	4798      	blx	r3
   bcaac:	4604      	mov	r4, r0
    }
    return n;
}
   bcaae:	4620      	mov	r0, r4
   bcab0:	b00d      	add	sp, #52	; 0x34
   bcab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bcab4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bcab4:	b510      	push	{r4, lr}
   bcab6:	4b05      	ldr	r3, [pc, #20]	; (bcacc <_ZN9IPAddressC1Ev+0x18>)
   bcab8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bcaba:	2211      	movs	r2, #17
   bcabc:	f840 3b04 	str.w	r3, [r0], #4
   bcac0:	2100      	movs	r1, #0
   bcac2:	f001 fa9e 	bl	be002 <memset>
}
   bcac6:	4620      	mov	r0, r4
   bcac8:	bd10      	pop	{r4, pc}
   bcaca:	bf00      	nop
   bcacc:	000c1708 	.word	0x000c1708

000bcad0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bcad0:	4603      	mov	r3, r0
   bcad2:	4a07      	ldr	r2, [pc, #28]	; (bcaf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bcad4:	b510      	push	{r4, lr}
   bcad6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bcada:	f101 0210 	add.w	r2, r1, #16
   bcade:	f851 4b04 	ldr.w	r4, [r1], #4
   bcae2:	f843 4b04 	str.w	r4, [r3], #4
   bcae6:	4291      	cmp	r1, r2
   bcae8:	d1f9      	bne.n	bcade <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bcaea:	780a      	ldrb	r2, [r1, #0]
   bcaec:	701a      	strb	r2, [r3, #0]
}
   bcaee:	bd10      	pop	{r4, pc}
   bcaf0:	000c1708 	.word	0x000c1708

000bcaf4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bcaf4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bcaf6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bcafa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bcafe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bcb02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bcb06:	2304      	movs	r3, #4
   bcb08:	6041      	str	r1, [r0, #4]
   bcb0a:	7503      	strb	r3, [r0, #20]
}
   bcb0c:	bd10      	pop	{r4, pc}
	...

000bcb10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bcb10:	b507      	push	{r0, r1, r2, lr}
   bcb12:	4b06      	ldr	r3, [pc, #24]	; (bcb2c <_ZN9IPAddressC1EPKh+0x1c>)
   bcb14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bcb16:	78cb      	ldrb	r3, [r1, #3]
   bcb18:	9300      	str	r3, [sp, #0]
   bcb1a:	788b      	ldrb	r3, [r1, #2]
   bcb1c:	784a      	ldrb	r2, [r1, #1]
   bcb1e:	7809      	ldrb	r1, [r1, #0]
   bcb20:	f7ff ffe8 	bl	bcaf4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bcb24:	b003      	add	sp, #12
   bcb26:	f85d fb04 	ldr.w	pc, [sp], #4
   bcb2a:	bf00      	nop
   bcb2c:	000c1708 	.word	0x000c1708

000bcb30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bcb30:	7441      	strb	r1, [r0, #17]
}
   bcb32:	4770      	bx	lr

000bcb34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcb34:	4770      	bx	lr

000bcb36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bcb36:	4770      	bx	lr

000bcb38 <_ZN9USBSerial4readEv>:
{
   bcb38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bcb3a:	2100      	movs	r1, #0
   bcb3c:	7c00      	ldrb	r0, [r0, #16]
   bcb3e:	f7fc fc03 	bl	b9348 <HAL_USB_USART_Receive_Data>
}
   bcb42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcb46:	bd08      	pop	{r3, pc}

000bcb48 <_ZN9USBSerial4peekEv>:
{
   bcb48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bcb4a:	2101      	movs	r1, #1
   bcb4c:	7c00      	ldrb	r0, [r0, #16]
   bcb4e:	f7fc fbfb 	bl	b9348 <HAL_USB_USART_Receive_Data>
}
   bcb52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcb56:	bd08      	pop	{r3, pc}

000bcb58 <_ZN9USBSerial17availableForWriteEv>:
{
   bcb58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bcb5a:	7c00      	ldrb	r0, [r0, #16]
   bcb5c:	f7fc fbec 	bl	b9338 <HAL_USB_USART_Available_Data_For_Write>
}
   bcb60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcb64:	bd08      	pop	{r3, pc}

000bcb66 <_ZN9USBSerial9availableEv>:
{
   bcb66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bcb68:	7c00      	ldrb	r0, [r0, #16]
   bcb6a:	f7fc fbdd 	bl	b9328 <HAL_USB_USART_Available_Data>
}
   bcb6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcb72:	bd08      	pop	{r3, pc}

000bcb74 <_ZN9USBSerial5writeEh>:
{
   bcb74:	b513      	push	{r0, r1, r4, lr}
   bcb76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bcb78:	7c00      	ldrb	r0, [r0, #16]
{
   bcb7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bcb7c:	f7fc fbdc 	bl	b9338 <HAL_USB_USART_Available_Data_For_Write>
   bcb80:	2800      	cmp	r0, #0
   bcb82:	9901      	ldr	r1, [sp, #4]
   bcb84:	dc01      	bgt.n	bcb8a <_ZN9USBSerial5writeEh+0x16>
   bcb86:	7c60      	ldrb	r0, [r4, #17]
   bcb88:	b120      	cbz	r0, bcb94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bcb8a:	7c20      	ldrb	r0, [r4, #16]
   bcb8c:	f7fc fbe4 	bl	b9358 <HAL_USB_USART_Send_Data>
   bcb90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bcb94:	b002      	add	sp, #8
   bcb96:	bd10      	pop	{r4, pc}

000bcb98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bcb98:	7c00      	ldrb	r0, [r0, #16]
   bcb9a:	f7fc bbe5 	b.w	b9368 <HAL_USB_USART_Flush_Data>

000bcb9e <_ZN9USBSerialD0Ev>:
   bcb9e:	b510      	push	{r4, lr}
   bcba0:	2114      	movs	r1, #20
   bcba2:	4604      	mov	r4, r0
   bcba4:	f7f7 fa7b 	bl	b409e <_ZdlPvj>
   bcba8:	4620      	mov	r0, r4
   bcbaa:	bd10      	pop	{r4, pc}

000bcbac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bcbac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bcbae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcbb2:	4604      	mov	r4, r0
   bcbb4:	4608      	mov	r0, r1
   bcbb6:	2100      	movs	r1, #0
   bcbb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bcbbc:	4b04      	ldr	r3, [pc, #16]	; (bcbd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bcbbe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcbc0:	2301      	movs	r3, #1
  _serial = serial;
   bcbc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bcbc4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bcbc6:	4611      	mov	r1, r2
   bcbc8:	f7fc fb9e 	bl	b9308 <HAL_USB_USART_Init>
}
   bcbcc:	4620      	mov	r0, r4
   bcbce:	bd10      	pop	{r4, pc}
   bcbd0:	000c171c 	.word	0x000c171c

000bcbd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bcbd4:	7c00      	ldrb	r0, [r0, #16]
   bcbd6:	2200      	movs	r2, #0
   bcbd8:	f7fc bb9e 	b.w	b9318 <HAL_USB_USART_Begin>

000bcbdc <_Z19acquireSerialBufferv>:
{
   bcbdc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bcbde:	2214      	movs	r2, #20
{
   bcbe0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bcbe2:	2100      	movs	r1, #0
   bcbe4:	f001 fa0d 	bl	be002 <memset>
}
   bcbe8:	4620      	mov	r0, r4
   bcbea:	bd10      	pop	{r4, pc}

000bcbec <_Z16_fetch_usbserialv>:
{
   bcbec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcbee:	4c0f      	ldr	r4, [pc, #60]	; (bcc2c <_Z16_fetch_usbserialv+0x40>)
{
   bcbf0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bcbf2:	a803      	add	r0, sp, #12
   bcbf4:	f7ff fff2 	bl	bcbdc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bcbf8:	7821      	ldrb	r1, [r4, #0]
   bcbfa:	f3bf 8f5b 	dmb	ish
   bcbfe:	f011 0101 	ands.w	r1, r1, #1
   bcc02:	d10f      	bne.n	bcc24 <_Z16_fetch_usbserialv+0x38>
   bcc04:	4620      	mov	r0, r4
   bcc06:	9101      	str	r1, [sp, #4]
   bcc08:	f7f7 fa58 	bl	b40bc <__cxa_guard_acquire>
   bcc0c:	9901      	ldr	r1, [sp, #4]
   bcc0e:	b148      	cbz	r0, bcc24 <_Z16_fetch_usbserialv+0x38>
   bcc10:	aa03      	add	r2, sp, #12
   bcc12:	4807      	ldr	r0, [pc, #28]	; (bcc30 <_Z16_fetch_usbserialv+0x44>)
   bcc14:	f7ff ffca 	bl	bcbac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bcc18:	4620      	mov	r0, r4
   bcc1a:	f7f7 fa54 	bl	b40c6 <__cxa_guard_release>
   bcc1e:	4805      	ldr	r0, [pc, #20]	; (bcc34 <_Z16_fetch_usbserialv+0x48>)
   bcc20:	f001 f9aa 	bl	bdf78 <atexit>
	return _usbserial;
}
   bcc24:	4802      	ldr	r0, [pc, #8]	; (bcc30 <_Z16_fetch_usbserialv+0x44>)
   bcc26:	b008      	add	sp, #32
   bcc28:	bd10      	pop	{r4, pc}
   bcc2a:	bf00      	nop
   bcc2c:	2003e6d8 	.word	0x2003e6d8
   bcc30:	2003e6dc 	.word	0x2003e6dc
   bcc34:	000bcb35 	.word	0x000bcb35

000bcc38 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bcc38:	4700      	bx	r0
	...

000bcc3c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bcc3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bcc40:	2400      	movs	r4, #0
{
   bcc42:	461d      	mov	r5, r3
   bcc44:	460f      	mov	r7, r1
   bcc46:	4690      	mov	r8, r2
   bcc48:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bcc4a:	f7fc f919 	bl	b8e80 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bcc4e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bcc50:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bcc54:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bcc58:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bcc5c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bcc60:	bfa2      	ittt	ge
   bcc62:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bcc66:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bcc6a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bcc6c:	4907      	ldr	r1, [pc, #28]	; (bcc8c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bcc6e:	9400      	str	r4, [sp, #0]
   bcc70:	4643      	mov	r3, r8
   bcc72:	463a      	mov	r2, r7
   bcc74:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bcc76:	bfa8      	it	ge
   bcc78:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bcc7c:	f7fc f8f8 	bl	b8e70 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bcc80:	fab0 f080 	clz	r0, r0
   bcc84:	0940      	lsrs	r0, r0, #5
   bcc86:	b004      	add	sp, #16
   bcc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcc8c:	000bcc39 	.word	0x000bcc39

000bcc90 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bcc90:	2200      	movs	r2, #0
   bcc92:	6840      	ldr	r0, [r0, #4]
   bcc94:	4611      	mov	r1, r2
   bcc96:	f7fc bbdb 	b.w	b9450 <network_ready>

000bcc9a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bcc9a:	2200      	movs	r2, #0
   bcc9c:	6840      	ldr	r0, [r0, #4]
   bcc9e:	4611      	mov	r1, r2
   bcca0:	f7fc bbf6 	b.w	b9490 <network_listening>

000bcca4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcca4:	2200      	movs	r2, #0
   bcca6:	6840      	ldr	r0, [r0, #4]
   bcca8:	4611      	mov	r1, r2
   bccaa:	f7fc bc01 	b.w	b94b0 <network_get_listen_timeout>

000bccae <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bccae:	6840      	ldr	r0, [r0, #4]
   bccb0:	2200      	movs	r2, #0
   bccb2:	f7fc bbf5 	b.w	b94a0 <network_set_listen_timeout>

000bccb6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bccb6:	6840      	ldr	r0, [r0, #4]
   bccb8:	2200      	movs	r2, #0
   bccba:	f081 0101 	eor.w	r1, r1, #1
   bccbe:	f7fc bbdf 	b.w	b9480 <network_listen>

000bccc2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bccc2:	2300      	movs	r3, #0
   bccc4:	6840      	ldr	r0, [r0, #4]
   bccc6:	461a      	mov	r2, r3
   bccc8:	4619      	mov	r1, r3
   bccca:	f7fc bbd1 	b.w	b9470 <network_off>

000bccce <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bccce:	2300      	movs	r3, #0
   bccd0:	6840      	ldr	r0, [r0, #4]
   bccd2:	461a      	mov	r2, r3
   bccd4:	4619      	mov	r1, r3
   bccd6:	f7fc bbc3 	b.w	b9460 <network_on>

000bccda <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bccda:	2200      	movs	r2, #0
   bccdc:	6840      	ldr	r0, [r0, #4]
   bccde:	4611      	mov	r1, r2
   bcce0:	f7fc bba6 	b.w	b9430 <network_connecting>

000bcce4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcce4:	6840      	ldr	r0, [r0, #4]
   bcce6:	2200      	movs	r2, #0
   bcce8:	2102      	movs	r1, #2
   bccea:	f7fc bba9 	b.w	b9440 <network_disconnect>

000bccee <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bccee:	2300      	movs	r3, #0
   bccf0:	6840      	ldr	r0, [r0, #4]
   bccf2:	461a      	mov	r2, r3
   bccf4:	f7fc bb94 	b.w	b9420 <network_connect>

000bccf8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bccf8:	4b08      	ldr	r3, [pc, #32]	; (bcd1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bccfa:	b510      	push	{r4, lr}
   bccfc:	2428      	movs	r4, #40	; 0x28
   bccfe:	4622      	mov	r2, r4
   bcd00:	4618      	mov	r0, r3
   bcd02:	2100      	movs	r1, #0
   bcd04:	f001 f97d 	bl	be002 <memset>
   bcd08:	4b05      	ldr	r3, [pc, #20]	; (bcd20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bcd0a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bcd0c:	f04f 32ff 	mov.w	r2, #4294967295
   bcd10:	6042      	str	r2, [r0, #4]
   bcd12:	2204      	movs	r2, #4
   bcd14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bcd16:	4a03      	ldr	r2, [pc, #12]	; (bcd24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bcd18:	601a      	str	r2, [r3, #0]
   bcd1a:	bd10      	pop	{r4, pc}
   bcd1c:	2003e6f8 	.word	0x2003e6f8
   bcd20:	2003e6f0 	.word	0x2003e6f0
   bcd24:	000c174c 	.word	0x000c174c

000bcd28 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bcd28:	4770      	bx	lr

000bcd2a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bcd2a:	7441      	strb	r1, [r0, #17]
}
   bcd2c:	4770      	bx	lr

000bcd2e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bcd2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bcd30:	7c00      	ldrb	r0, [r0, #16]
   bcd32:	f7fc fa29 	bl	b9188 <hal_usart_available_data_for_write>
}
   bcd36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcd3a:	bd08      	pop	{r3, pc}

000bcd3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bcd3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bcd3e:	7c00      	ldrb	r0, [r0, #16]
   bcd40:	f7fc f9fa 	bl	b9138 <hal_usart_available>
}
   bcd44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcd48:	bd08      	pop	{r3, pc}

000bcd4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bcd4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bcd4c:	7c00      	ldrb	r0, [r0, #16]
   bcd4e:	f7fc fa03 	bl	b9158 <hal_usart_peek>
}
   bcd52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcd56:	bd08      	pop	{r3, pc}

000bcd58 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bcd58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bcd5a:	7c00      	ldrb	r0, [r0, #16]
   bcd5c:	f7fc f9f4 	bl	b9148 <hal_usart_read>
}
   bcd60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcd64:	bd08      	pop	{r3, pc}

000bcd66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bcd66:	7c00      	ldrb	r0, [r0, #16]
   bcd68:	f7fc b9fe 	b.w	b9168 <hal_usart_flush>

000bcd6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bcd6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcd6e:	7c45      	ldrb	r5, [r0, #17]
{
   bcd70:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcd72:	b12d      	cbz	r5, bcd80 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bcd74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bcd76:	b003      	add	sp, #12
   bcd78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bcd7c:	f7fc b9d4 	b.w	b9128 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcd80:	7c00      	ldrb	r0, [r0, #16]
   bcd82:	9101      	str	r1, [sp, #4]
   bcd84:	f7fc fa00 	bl	b9188 <hal_usart_available_data_for_write>
   bcd88:	2800      	cmp	r0, #0
   bcd8a:	9901      	ldr	r1, [sp, #4]
   bcd8c:	dcf2      	bgt.n	bcd74 <_ZN11USARTSerial5writeEh+0x8>
}
   bcd8e:	4628      	mov	r0, r5
   bcd90:	b003      	add	sp, #12
   bcd92:	bd30      	pop	{r4, r5, pc}

000bcd94 <_ZN11USARTSerialD0Ev>:
   bcd94:	b510      	push	{r4, lr}
   bcd96:	2114      	movs	r1, #20
   bcd98:	4604      	mov	r4, r0
   bcd9a:	f7f7 f980 	bl	b409e <_ZdlPvj>
   bcd9e:	4620      	mov	r0, r4
   bcda0:	bd10      	pop	{r4, pc}
	...

000bcda4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bcda4:	b510      	push	{r4, lr}
   bcda6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcdaa:	4604      	mov	r4, r0
   bcdac:	4608      	mov	r0, r1
   bcdae:	4611      	mov	r1, r2
   bcdb0:	2200      	movs	r2, #0
   bcdb2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bcdb6:	4b04      	ldr	r3, [pc, #16]	; (bcdc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bcdb8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcdba:	2301      	movs	r3, #1
  _serial = serial;
   bcdbc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bcdbe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bcdc0:	f7fc f9f2 	bl	b91a8 <hal_usart_init_ex>
}
   bcdc4:	4620      	mov	r0, r4
   bcdc6:	bd10      	pop	{r4, pc}
   bcdc8:	000c1788 	.word	0x000c1788

000bcdcc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bcdcc:	7c00      	ldrb	r0, [r0, #16]
   bcdce:	2300      	movs	r3, #0
   bcdd0:	f7fc b9e2 	b.w	b9198 <hal_usart_begin_config>

000bcdd4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bcdd4:	2200      	movs	r2, #0
   bcdd6:	f7ff bff9 	b.w	bcdcc <_ZN11USARTSerial5beginEmm>

000bcdda <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bcdda:	b510      	push	{r4, lr}
      if (_M_empty())
   bcddc:	6883      	ldr	r3, [r0, #8]
   bcdde:	4604      	mov	r4, r0
   bcde0:	b90b      	cbnz	r3, bcde6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bcde2:	f000 fa3d 	bl	bd260 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcde6:	68c3      	ldr	r3, [r0, #12]
   bcde8:	4798      	blx	r3
      if (_M_manager)
   bcdea:	68a3      	ldr	r3, [r4, #8]
   bcdec:	b11b      	cbz	r3, bcdf6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bcdee:	2203      	movs	r2, #3
   bcdf0:	4621      	mov	r1, r4
   bcdf2:	4620      	mov	r0, r4
   bcdf4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bcdf6:	4620      	mov	r0, r4
   bcdf8:	2110      	movs	r1, #16
}
   bcdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bcdfe:	f7f7 b94e 	b.w	b409e <_ZdlPvj>

000bce02 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bce02:	4770      	bx	lr

000bce04 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bce06:	4606      	mov	r6, r0
   bce08:	4615      	mov	r5, r2
   bce0a:	460c      	mov	r4, r1
   bce0c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bce0e:	42bc      	cmp	r4, r7
   bce10:	d006      	beq.n	bce20 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bce12:	6833      	ldr	r3, [r6, #0]
   bce14:	f814 1b01 	ldrb.w	r1, [r4], #1
   bce18:	689b      	ldr	r3, [r3, #8]
   bce1a:	4630      	mov	r0, r6
   bce1c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bce1e:	e7f6      	b.n	bce0e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bce20:	4628      	mov	r0, r5
   bce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bce24 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bce24:	7c00      	ldrb	r0, [r0, #16]
   bce26:	2200      	movs	r2, #0
   bce28:	f7fc b9e6 	b.w	b91f8 <hal_i2c_write>

000bce2c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bce2c:	7c00      	ldrb	r0, [r0, #16]
   bce2e:	2100      	movs	r1, #0
   bce30:	f7fc b9ea 	b.w	b9208 <hal_i2c_available>

000bce34 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bce34:	7c00      	ldrb	r0, [r0, #16]
   bce36:	2100      	movs	r1, #0
   bce38:	f7fc b9ee 	b.w	b9218 <hal_i2c_read>

000bce3c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bce3c:	7c00      	ldrb	r0, [r0, #16]
   bce3e:	2100      	movs	r1, #0
   bce40:	f7fc b9f2 	b.w	b9228 <hal_i2c_peek>

000bce44 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bce44:	7c00      	ldrb	r0, [r0, #16]
   bce46:	2100      	movs	r1, #0
   bce48:	f7fc b9f6 	b.w	b9238 <hal_i2c_flush>

000bce4c <_ZN7TwoWireD0Ev>:
   bce4c:	b510      	push	{r4, lr}
   bce4e:	2114      	movs	r1, #20
   bce50:	4604      	mov	r4, r0
   bce52:	f7f7 f924 	bl	b409e <_ZdlPvj>
   bce56:	4620      	mov	r0, r4
   bce58:	bd10      	pop	{r4, pc}
	...

000bce5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bce5c:	b510      	push	{r4, lr}
   bce5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bce62:	4604      	mov	r4, r0
   bce64:	4608      	mov	r0, r1
   bce66:	2100      	movs	r1, #0
   bce68:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bce6c:	4b03      	ldr	r3, [pc, #12]	; (bce7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bce6e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bce70:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bce72:	4611      	mov	r1, r2
   bce74:	f7fc f9f0 	bl	b9258 <hal_i2c_init>
}
   bce78:	4620      	mov	r0, r4
   bce7a:	bd10      	pop	{r4, pc}
   bce7c:	000c17b8 	.word	0x000c17b8

000bce80 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bce80:	7c00      	ldrb	r0, [r0, #16]
   bce82:	2200      	movs	r2, #0
   bce84:	f7fc b998 	b.w	b91b8 <hal_i2c_set_speed>

000bce88 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bce88:	2300      	movs	r3, #0
   bce8a:	7c00      	ldrb	r0, [r0, #16]
   bce8c:	461a      	mov	r2, r3
   bce8e:	4619      	mov	r1, r3
   bce90:	f7fc b99a 	b.w	b91c8 <hal_i2c_begin>

000bce94 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bce94:	7c00      	ldrb	r0, [r0, #16]
   bce96:	2200      	movs	r2, #0
   bce98:	f7fc b99e 	b.w	b91d8 <hal_i2c_begin_transmission>

000bce9c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bce9c:	b2c9      	uxtb	r1, r1
   bce9e:	f7ff bff9 	b.w	bce94 <_ZN7TwoWire17beginTransmissionEh>

000bcea2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bcea2:	7c00      	ldrb	r0, [r0, #16]
   bcea4:	2200      	movs	r2, #0
   bcea6:	f7fc b99f 	b.w	b91e8 <hal_i2c_end_transmission>

000bceaa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bceaa:	2101      	movs	r1, #1
   bceac:	f7ff bff9 	b.w	bcea2 <_ZN7TwoWire15endTransmissionEh>

000bceb0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bceb0:	b510      	push	{r4, lr}
  if (0 == max) {
   bceb2:	4604      	mov	r4, r0
   bceb4:	b128      	cbz	r0, bcec2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bceb6:	f001 f8db 	bl	be070 <rand>
   bceba:	fb90 f3f4 	sdiv	r3, r0, r4
   bcebe:	fb03 0414 	mls	r4, r3, r4, r0
}
   bcec2:	4620      	mov	r0, r4
   bcec4:	bd10      	pop	{r4, pc}

000bcec6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcec6:	2300      	movs	r3, #0
   bcec8:	6840      	ldr	r0, [r0, #4]
   bceca:	461a      	mov	r2, r3
   bcecc:	f7fc baa8 	b.w	b9420 <network_connect>

000bced0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bced0:	6840      	ldr	r0, [r0, #4]
   bced2:	2200      	movs	r2, #0
   bced4:	2102      	movs	r1, #2
   bced6:	f7fc bab3 	b.w	b9440 <network_disconnect>

000bceda <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bceda:	2200      	movs	r2, #0
   bcedc:	6840      	ldr	r0, [r0, #4]
   bcede:	4611      	mov	r1, r2
   bcee0:	f7fc baa6 	b.w	b9430 <network_connecting>

000bcee4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcee4:	2200      	movs	r2, #0
   bcee6:	6840      	ldr	r0, [r0, #4]
   bcee8:	4611      	mov	r1, r2
   bceea:	f7fc bab1 	b.w	b9450 <network_ready>

000bceee <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bceee:	2300      	movs	r3, #0
   bcef0:	6840      	ldr	r0, [r0, #4]
   bcef2:	461a      	mov	r2, r3
   bcef4:	4619      	mov	r1, r3
   bcef6:	f7fc bab3 	b.w	b9460 <network_on>

000bcefa <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcefa:	2300      	movs	r3, #0
   bcefc:	6840      	ldr	r0, [r0, #4]
   bcefe:	461a      	mov	r2, r3
   bcf00:	4619      	mov	r1, r3
   bcf02:	f7fc bab5 	b.w	b9470 <network_off>

000bcf06 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcf06:	6840      	ldr	r0, [r0, #4]
   bcf08:	2100      	movs	r1, #0
   bcf0a:	f7fc bad9 	b.w	b94c0 <network_is_on>

000bcf0e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bcf0e:	6840      	ldr	r0, [r0, #4]
   bcf10:	2100      	movs	r1, #0
   bcf12:	f7fc badd 	b.w	b94d0 <network_is_off>

000bcf16 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bcf16:	6840      	ldr	r0, [r0, #4]
   bcf18:	2200      	movs	r2, #0
   bcf1a:	f081 0101 	eor.w	r1, r1, #1
   bcf1e:	f7fc baaf 	b.w	b9480 <network_listen>

000bcf22 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bcf22:	6840      	ldr	r0, [r0, #4]
   bcf24:	2200      	movs	r2, #0
   bcf26:	f7fc babb 	b.w	b94a0 <network_set_listen_timeout>

000bcf2a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bcf2a:	2200      	movs	r2, #0
   bcf2c:	6840      	ldr	r0, [r0, #4]
   bcf2e:	4611      	mov	r1, r2
   bcf30:	f7fc babe 	b.w	b94b0 <network_get_listen_timeout>

000bcf34 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bcf34:	2200      	movs	r2, #0
   bcf36:	6840      	ldr	r0, [r0, #4]
   bcf38:	4611      	mov	r1, r2
   bcf3a:	f7fc baa9 	b.w	b9490 <network_listening>

000bcf3e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bcf3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcf42:	b095      	sub	sp, #84	; 0x54
   bcf44:	4614      	mov	r4, r2
   bcf46:	460d      	mov	r5, r1
   bcf48:	4607      	mov	r7, r0
    IPAddress addr;
   bcf4a:	f7ff fdb3 	bl	bcab4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bcf4e:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bcf50:	221c      	movs	r2, #28
   bcf52:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bcf54:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bcf56:	f001 f854 	bl	be002 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bcf5a:	2340      	movs	r3, #64	; 0x40
   bcf5c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bcf5e:	4620      	mov	r0, r4
   bcf60:	466b      	mov	r3, sp
   bcf62:	aa0c      	add	r2, sp, #48	; 0x30
   bcf64:	2100      	movs	r1, #0
   bcf66:	f7fb ff5b 	bl	b8e20 <netdb_getaddrinfo>
    if (!r) {
   bcf6a:	4604      	mov	r4, r0
   bcf6c:	2800      	cmp	r0, #0
   bcf6e:	d14b      	bne.n	bd008 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcf70:	4602      	mov	r2, r0
   bcf72:	2101      	movs	r1, #1
   bcf74:	6868      	ldr	r0, [r5, #4]
   bcf76:	f7fc fa6b 	bl	b9450 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcf7a:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcf7c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcf7e:	4622      	mov	r2, r4
   bcf80:	6868      	ldr	r0, [r5, #4]
   bcf82:	f7fc fa65 	bl	b9450 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcf86:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcf88:	4681      	mov	r9, r0
        bool ok = false;
   bcf8a:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcf8c:	2e00      	cmp	r6, #0
   bcf8e:	d03b      	beq.n	bd008 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bcf90:	2900      	cmp	r1, #0
   bcf92:	d139      	bne.n	bd008 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bcf94:	6873      	ldr	r3, [r6, #4]
   bcf96:	2b02      	cmp	r3, #2
   bcf98:	d003      	beq.n	bcfa2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bcf9a:	2b0a      	cmp	r3, #10
   bcf9c:	d011      	beq.n	bcfc2 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcf9e:	69f6      	ldr	r6, [r6, #28]
   bcfa0:	e7f4      	b.n	bcf8c <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bcfa2:	f1b8 0f00 	cmp.w	r8, #0
   bcfa6:	d0fa      	beq.n	bcf9e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bcfa8:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bcfaa:	a806      	add	r0, sp, #24
   bcfac:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bcfae:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bcfb0:	f7ff fdae 	bl	bcb10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bcfb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcfb6:	1d3c      	adds	r4, r7, #4
   bcfb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcfba:	682b      	ldr	r3, [r5, #0]
   bcfbc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcfbe:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bcfc0:	e7ed      	b.n	bcf9e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bcfc2:	f1b9 0f00 	cmp.w	r9, #0
   bcfc6:	d0ea      	beq.n	bcf9e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bcfc8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bcfca:	2210      	movs	r2, #16
   bcfcc:	a801      	add	r0, sp, #4
   bcfce:	f001 f818 	bl	be002 <memset>
                    a.v = 6;
   bcfd2:	2306      	movs	r3, #6
   bcfd4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bcfd8:	ad01      	add	r5, sp, #4
   bcfda:	f104 0308 	add.w	r3, r4, #8
   bcfde:	3418      	adds	r4, #24
   bcfe0:	6818      	ldr	r0, [r3, #0]
   bcfe2:	6859      	ldr	r1, [r3, #4]
   bcfe4:	462a      	mov	r2, r5
   bcfe6:	c203      	stmia	r2!, {r0, r1}
   bcfe8:	3308      	adds	r3, #8
   bcfea:	42a3      	cmp	r3, r4
   bcfec:	4615      	mov	r5, r2
   bcfee:	d1f7      	bne.n	bcfe0 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bcff0:	a901      	add	r1, sp, #4
   bcff2:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bcff4:	ad07      	add	r5, sp, #28
   bcff6:	f7ff fd6b 	bl	bcad0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bcffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcffc:	1d3c      	adds	r4, r7, #4
   bcffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd000:	682b      	ldr	r3, [r5, #0]
   bd002:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd004:	4649      	mov	r1, r9
   bd006:	e7ca      	b.n	bcf9e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd008:	9800      	ldr	r0, [sp, #0]
   bd00a:	f7fb ff01 	bl	b8e10 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd00e:	4638      	mov	r0, r7
   bd010:	b015      	add	sp, #84	; 0x54
   bd012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000bd018 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd018:	4b02      	ldr	r3, [pc, #8]	; (bd024 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd01a:	4a03      	ldr	r2, [pc, #12]	; (bd028 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd01c:	601a      	str	r2, [r3, #0]
   bd01e:	2200      	movs	r2, #0
   bd020:	605a      	str	r2, [r3, #4]

} // spark
   bd022:	4770      	bx	lr
   bd024:	2003e720 	.word	0x2003e720
   bd028:	000c17e0 	.word	0x000c17e0

000bd02c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd02c:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bd02e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd030:	d902      	bls.n	bd038 <pinAvailable+0xc>
    return false;
   bd032:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bd034:	b002      	add	sp, #8
   bd036:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bd038:	f1a0 030b 	sub.w	r3, r0, #11
   bd03c:	2b02      	cmp	r3, #2
   bd03e:	d81a      	bhi.n	bd076 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bd040:	4c17      	ldr	r4, [pc, #92]	; (bd0a0 <pinAvailable+0x74>)
   bd042:	7821      	ldrb	r1, [r4, #0]
   bd044:	f3bf 8f5b 	dmb	ish
   bd048:	f011 0101 	ands.w	r1, r1, #1
   bd04c:	d10b      	bne.n	bd066 <pinAvailable+0x3a>
   bd04e:	4620      	mov	r0, r4
   bd050:	9101      	str	r1, [sp, #4]
   bd052:	f7f7 f833 	bl	b40bc <__cxa_guard_acquire>
   bd056:	9901      	ldr	r1, [sp, #4]
   bd058:	b128      	cbz	r0, bd066 <pinAvailable+0x3a>
   bd05a:	4812      	ldr	r0, [pc, #72]	; (bd0a4 <pinAvailable+0x78>)
   bd05c:	f7fc fb1c 	bl	b9698 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bd060:	4620      	mov	r0, r4
   bd062:	f7f7 f830 	bl	b40c6 <__cxa_guard_release>
   bd066:	4b0f      	ldr	r3, [pc, #60]	; (bd0a4 <pinAvailable+0x78>)
   bd068:	7818      	ldrb	r0, [r3, #0]
   bd06a:	f7fc f915 	bl	b9298 <hal_spi_is_enabled>
   bd06e:	2800      	cmp	r0, #0
   bd070:	d1df      	bne.n	bd032 <pinAvailable+0x6>
  return true; // 'pin' is available
   bd072:	2001      	movs	r0, #1
   bd074:	e7de      	b.n	bd034 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bd076:	2801      	cmp	r0, #1
   bd078:	d809      	bhi.n	bd08e <pinAvailable+0x62>
   bd07a:	f000 f8a9 	bl	bd1d0 <_Z19__fetch_global_Wirev>
   bd07e:	2100      	movs	r1, #0
   bd080:	7c00      	ldrb	r0, [r0, #16]
   bd082:	f7fc f8e1 	bl	b9248 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bd086:	f080 0001 	eor.w	r0, r0, #1
   bd08a:	b2c0      	uxtb	r0, r0
   bd08c:	e7d2      	b.n	bd034 <pinAvailable+0x8>
   bd08e:	3809      	subs	r0, #9
   bd090:	2801      	cmp	r0, #1
   bd092:	d8ee      	bhi.n	bd072 <pinAvailable+0x46>
   bd094:	f000 f860 	bl	bd158 <_Z22__fetch_global_Serial1v>
   bd098:	7c00      	ldrb	r0, [r0, #16]
   bd09a:	f7fc f86d 	bl	b9178 <hal_usart_is_enabled>
   bd09e:	e7f2      	b.n	bd086 <pinAvailable+0x5a>
   bd0a0:	2003e638 	.word	0x2003e638
   bd0a4:	2003e63c 	.word	0x2003e63c

000bd0a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd0a8:	2825      	cmp	r0, #37	; 0x25
{
   bd0aa:	b538      	push	{r3, r4, r5, lr}
   bd0ac:	4604      	mov	r4, r0
   bd0ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd0b0:	d80a      	bhi.n	bd0c8 <pinMode+0x20>
   bd0b2:	29ff      	cmp	r1, #255	; 0xff
   bd0b4:	d008      	beq.n	bd0c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bd0b6:	f7ff ffb9 	bl	bd02c <pinAvailable>
   bd0ba:	b128      	cbz	r0, bd0c8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bd0bc:	4629      	mov	r1, r5
   bd0be:	4620      	mov	r0, r4
}
   bd0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bd0c4:	f7fb beb4 	b.w	b8e30 <HAL_Pin_Mode>
}
   bd0c8:	bd38      	pop	{r3, r4, r5, pc}

000bd0ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bd0ca:	b538      	push	{r3, r4, r5, lr}
   bd0cc:	4604      	mov	r4, r0
   bd0ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd0d0:	f7fb feb6 	bl	b8e40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bd0d4:	28ff      	cmp	r0, #255	; 0xff
   bd0d6:	d010      	beq.n	bd0fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bd0d8:	2806      	cmp	r0, #6
   bd0da:	d804      	bhi.n	bd0e6 <digitalWrite+0x1c>
   bd0dc:	234d      	movs	r3, #77	; 0x4d
   bd0de:	fa23 f000 	lsr.w	r0, r3, r0
   bd0e2:	07c3      	lsls	r3, r0, #31
   bd0e4:	d409      	bmi.n	bd0fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bd0e6:	4620      	mov	r0, r4
   bd0e8:	f7ff ffa0 	bl	bd02c <pinAvailable>
   bd0ec:	b128      	cbz	r0, bd0fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bd0ee:	4629      	mov	r1, r5
   bd0f0:	4620      	mov	r0, r4
}
   bd0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bd0f6:	f7fb beab 	b.w	b8e50 <HAL_GPIO_Write>
}
   bd0fa:	bd38      	pop	{r3, r4, r5, pc}

000bd0fc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bd0fc:	b510      	push	{r4, lr}
   bd0fe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd100:	f7fb fe9e 	bl	b8e40 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bd104:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bd106:	b2db      	uxtb	r3, r3
   bd108:	2b01      	cmp	r3, #1
   bd10a:	d908      	bls.n	bd11e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bd10c:	4620      	mov	r0, r4
   bd10e:	f7ff ff8d 	bl	bd02c <pinAvailable>
   bd112:	b120      	cbz	r0, bd11e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bd114:	4620      	mov	r0, r4
}
   bd116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bd11a:	f7fb bea1 	b.w	b8e60 <HAL_GPIO_Read>
}
   bd11e:	2000      	movs	r0, #0
   bd120:	bd10      	pop	{r4, pc}

000bd122 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd122:	4770      	bx	lr

000bd124 <_Z20acquireSerial1Bufferv>:
{
   bd124:	b538      	push	{r3, r4, r5, lr}
   bd126:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bd128:	2514      	movs	r5, #20
   bd12a:	462a      	mov	r2, r5
   bd12c:	2100      	movs	r1, #0
   bd12e:	f000 ff68 	bl	be002 <memset>
   bd132:	8025      	strh	r5, [r4, #0]
   bd134:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd136:	4907      	ldr	r1, [pc, #28]	; (bd154 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bd138:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd13a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bd13c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd13e:	f000 f86b 	bl	bd218 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd142:	4904      	ldr	r1, [pc, #16]	; (bd154 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bd144:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd146:	4628      	mov	r0, r5
   bd148:	f000 f866 	bl	bd218 <_ZnajRKSt9nothrow_t>
    };
   bd14c:	60e0      	str	r0, [r4, #12]
}
   bd14e:	4620      	mov	r0, r4
   bd150:	bd38      	pop	{r3, r4, r5, pc}
   bd152:	bf00      	nop
   bd154:	000c1814 	.word	0x000c1814

000bd158 <_Z22__fetch_global_Serial1v>:
{
   bd158:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd15a:	4d0e      	ldr	r5, [pc, #56]	; (bd194 <_Z22__fetch_global_Serial1v+0x3c>)
   bd15c:	7829      	ldrb	r1, [r5, #0]
   bd15e:	f3bf 8f5b 	dmb	ish
   bd162:	f011 0401 	ands.w	r4, r1, #1
{
   bd166:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd168:	d111      	bne.n	bd18e <_Z22__fetch_global_Serial1v+0x36>
   bd16a:	4628      	mov	r0, r5
   bd16c:	f7f6 ffa6 	bl	b40bc <__cxa_guard_acquire>
   bd170:	b168      	cbz	r0, bd18e <_Z22__fetch_global_Serial1v+0x36>
   bd172:	a801      	add	r0, sp, #4
   bd174:	f7ff ffd6 	bl	bd124 <_Z20acquireSerial1Bufferv>
   bd178:	aa01      	add	r2, sp, #4
   bd17a:	4621      	mov	r1, r4
   bd17c:	4806      	ldr	r0, [pc, #24]	; (bd198 <_Z22__fetch_global_Serial1v+0x40>)
   bd17e:	f7ff fe11 	bl	bcda4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd182:	4628      	mov	r0, r5
   bd184:	f7f6 ff9f 	bl	b40c6 <__cxa_guard_release>
   bd188:	4804      	ldr	r0, [pc, #16]	; (bd19c <_Z22__fetch_global_Serial1v+0x44>)
   bd18a:	f000 fef5 	bl	bdf78 <atexit>
    return serial1;
}
   bd18e:	4802      	ldr	r0, [pc, #8]	; (bd198 <_Z22__fetch_global_Serial1v+0x40>)
   bd190:	b007      	add	sp, #28
   bd192:	bd30      	pop	{r4, r5, pc}
   bd194:	2003e728 	.word	0x2003e728
   bd198:	2003e72c 	.word	0x2003e72c
   bd19c:	000bd123 	.word	0x000bd123

000bd1a0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd1a0:	4770      	bx	lr
	...

000bd1a4 <_Z17acquireWireBufferv>:
{
   bd1a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd1a6:	2520      	movs	r5, #32
   bd1a8:	2314      	movs	r3, #20
{
   bd1aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd1ac:	6003      	str	r3, [r0, #0]
   bd1ae:	6085      	str	r5, [r0, #8]
   bd1b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd1b2:	4906      	ldr	r1, [pc, #24]	; (bd1cc <_Z17acquireWireBufferv+0x28>)
   bd1b4:	4628      	mov	r0, r5
   bd1b6:	f000 f82f 	bl	bd218 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd1ba:	4904      	ldr	r1, [pc, #16]	; (bd1cc <_Z17acquireWireBufferv+0x28>)
	};
   bd1bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd1be:	4628      	mov	r0, r5
   bd1c0:	f000 f82a 	bl	bd218 <_ZnajRKSt9nothrow_t>
	};
   bd1c4:	60e0      	str	r0, [r4, #12]
}
   bd1c6:	4620      	mov	r0, r4
   bd1c8:	bd38      	pop	{r3, r4, r5, pc}
   bd1ca:	bf00      	nop
   bd1cc:	000c1814 	.word	0x000c1814

000bd1d0 <_Z19__fetch_global_Wirev>:
{
   bd1d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd1d2:	4d0e      	ldr	r5, [pc, #56]	; (bd20c <_Z19__fetch_global_Wirev+0x3c>)
   bd1d4:	7829      	ldrb	r1, [r5, #0]
   bd1d6:	f3bf 8f5b 	dmb	ish
   bd1da:	f011 0401 	ands.w	r4, r1, #1
{
   bd1de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd1e0:	d111      	bne.n	bd206 <_Z19__fetch_global_Wirev+0x36>
   bd1e2:	4628      	mov	r0, r5
   bd1e4:	f7f6 ff6a 	bl	b40bc <__cxa_guard_acquire>
   bd1e8:	b168      	cbz	r0, bd206 <_Z19__fetch_global_Wirev+0x36>
   bd1ea:	a801      	add	r0, sp, #4
   bd1ec:	f7ff ffda 	bl	bd1a4 <_Z17acquireWireBufferv>
   bd1f0:	aa01      	add	r2, sp, #4
   bd1f2:	4621      	mov	r1, r4
   bd1f4:	4806      	ldr	r0, [pc, #24]	; (bd210 <_Z19__fetch_global_Wirev+0x40>)
   bd1f6:	f7ff fe31 	bl	bce5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd1fa:	4628      	mov	r0, r5
   bd1fc:	f7f6 ff63 	bl	b40c6 <__cxa_guard_release>
   bd200:	4804      	ldr	r0, [pc, #16]	; (bd214 <_Z19__fetch_global_Wirev+0x44>)
   bd202:	f000 feb9 	bl	bdf78 <atexit>
	return wire;
}
   bd206:	4802      	ldr	r0, [pc, #8]	; (bd210 <_Z19__fetch_global_Wirev+0x40>)
   bd208:	b007      	add	sp, #28
   bd20a:	bd30      	pop	{r4, r5, pc}
   bd20c:	2003e744 	.word	0x2003e744
   bd210:	2003e748 	.word	0x2003e748
   bd214:	000bd1a1 	.word	0x000bd1a1

000bd218 <_ZnajRKSt9nothrow_t>:
   bd218:	f7f6 bf3f 	b.w	b409a <_Znaj>

000bd21c <_ZSt19__throw_logic_errorPKc>:
   bd21c:	b508      	push	{r3, lr}
   bd21e:	f7fc f9c7 	bl	b95b0 <abort>

000bd222 <_ZSt20__throw_length_errorPKc>:
   bd222:	b508      	push	{r3, lr}
   bd224:	f7fc f9c4 	bl	b95b0 <abort>

000bd228 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bd228:	b40f      	push	{r0, r1, r2, r3}
   bd22a:	b580      	push	{r7, lr}
   bd22c:	b084      	sub	sp, #16
   bd22e:	af00      	add	r7, sp, #0
   bd230:	f107 0418 	add.w	r4, r7, #24
   bd234:	f854 2b04 	ldr.w	r2, [r4], #4
   bd238:	607a      	str	r2, [r7, #4]
   bd23a:	4610      	mov	r0, r2
   bd23c:	f000 ff95 	bl	be16a <strlen>
   bd240:	f200 2307 	addw	r3, r0, #519	; 0x207
   bd244:	f023 0307 	bic.w	r3, r3, #7
   bd248:	ebad 0d03 	sub.w	sp, sp, r3
   bd24c:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bd250:	687a      	ldr	r2, [r7, #4]
   bd252:	60fc      	str	r4, [r7, #12]
   bd254:	4623      	mov	r3, r4
   bd256:	4668      	mov	r0, sp
   bd258:	f000 f85e 	bl	bd318 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bd25c:	f7fc f9a8 	bl	b95b0 <abort>

000bd260 <_ZSt25__throw_bad_function_callv>:
   bd260:	b508      	push	{r3, lr}
   bd262:	f7fc f9a5 	bl	b95b0 <abort>
	...

000bd268 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bd268:	4901      	ldr	r1, [pc, #4]	; (bd270 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bd26a:	f000 b98b 	b.w	bd584 <_ZNKSt9type_infoeqERKS_>
   bd26e:	bf00      	nop
   bd270:	000c1830 	.word	0x000c1830

000bd274 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bd274:	b580      	push	{r7, lr}
   bd276:	b09c      	sub	sp, #112	; 0x70
   bd278:	4606      	mov	r6, r0
   bd27a:	af00      	add	r7, sp, #0
   bd27c:	460c      	mov	r4, r1
   bd27e:	1ba4      	subs	r4, r4, r6
   bd280:	490e      	ldr	r1, [pc, #56]	; (bd2bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bd282:	2269      	movs	r2, #105	; 0x69
   bd284:	1d38      	adds	r0, r7, #4
   bd286:	f000 fe94 	bl	bdfb2 <memcpy>
   bd28a:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bd28e:	f023 0307 	bic.w	r3, r3, #7
   bd292:	ebad 0d03 	sub.w	sp, sp, r3
   bd296:	466d      	mov	r5, sp
   bd298:	2268      	movs	r2, #104	; 0x68
   bd29a:	1d39      	adds	r1, r7, #4
   bd29c:	4628      	mov	r0, r5
   bd29e:	f000 fe88 	bl	bdfb2 <memcpy>
   bd2a2:	4622      	mov	r2, r4
   bd2a4:	4631      	mov	r1, r6
   bd2a6:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bd2aa:	442c      	add	r4, r5
   bd2ac:	f000 fe81 	bl	bdfb2 <memcpy>
   bd2b0:	2300      	movs	r3, #0
   bd2b2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bd2b6:	4628      	mov	r0, r5
   bd2b8:	f7ff ffb0 	bl	bd21c <_ZSt19__throw_logic_errorPKc>
   bd2bc:	000c1838 	.word	0x000c1838

000bd2c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bd2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd2c4:	af00      	add	r7, sp, #0
   bd2c6:	b084      	sub	sp, #16
   bd2c8:	466d      	mov	r5, sp
   bd2ca:	f105 040c 	add.w	r4, r5, #12
   bd2ce:	f8df 8044 	ldr.w	r8, [pc, #68]	; bd314 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bd2d2:	4623      	mov	r3, r4
   bd2d4:	f04f 0c0a 	mov.w	ip, #10
   bd2d8:	fbb2 f6fc 	udiv	r6, r2, ip
   bd2dc:	fb0c 2e16 	mls	lr, ip, r6, r2
   bd2e0:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bd2e4:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bd2e8:	4696      	mov	lr, r2
   bd2ea:	f1be 0f09 	cmp.w	lr, #9
   bd2ee:	4632      	mov	r2, r6
   bd2f0:	d8f2      	bhi.n	bd2d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bd2f2:	1ae4      	subs	r4, r4, r3
   bd2f4:	428c      	cmp	r4, r1
   bd2f6:	d809      	bhi.n	bd30c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bd2f8:	f1c4 030c 	rsb	r3, r4, #12
   bd2fc:	4622      	mov	r2, r4
   bd2fe:	18e9      	adds	r1, r5, r3
   bd300:	f000 fe57 	bl	bdfb2 <memcpy>
   bd304:	4620      	mov	r0, r4
   bd306:	46bd      	mov	sp, r7
   bd308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd30c:	f04f 34ff 	mov.w	r4, #4294967295
   bd310:	e7f8      	b.n	bd304 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bd312:	bf00      	nop
   bd314:	000c18a1 	.word	0x000c18a1

000bd318 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bd318:	3901      	subs	r1, #1
   bd31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd31e:	4607      	mov	r7, r0
   bd320:	4615      	mov	r5, r2
   bd322:	eb00 0801 	add.w	r8, r0, r1
   bd326:	4604      	mov	r4, r0
   bd328:	782a      	ldrb	r2, [r5, #0]
   bd32a:	b392      	cbz	r2, bd392 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bd32c:	4544      	cmp	r4, r8
   bd32e:	d22a      	bcs.n	bd386 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd330:	2a25      	cmp	r2, #37	; 0x25
   bd332:	d107      	bne.n	bd344 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd334:	786a      	ldrb	r2, [r5, #1]
   bd336:	2a73      	cmp	r2, #115	; 0x73
   bd338:	d009      	beq.n	bd34e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bd33a:	2a7a      	cmp	r2, #122	; 0x7a
   bd33c:	d012      	beq.n	bd364 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bd33e:	2a25      	cmp	r2, #37	; 0x25
   bd340:	d100      	bne.n	bd344 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd342:	3501      	adds	r5, #1
   bd344:	f815 2b01 	ldrb.w	r2, [r5], #1
   bd348:	f804 2b01 	strb.w	r2, [r4], #1
   bd34c:	e7ec      	b.n	bd328 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd34e:	f853 2b04 	ldr.w	r2, [r3], #4
   bd352:	3a01      	subs	r2, #1
   bd354:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bd358:	b1c9      	cbz	r1, bd38e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bd35a:	4544      	cmp	r4, r8
   bd35c:	d013      	beq.n	bd386 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd35e:	f804 1b01 	strb.w	r1, [r4], #1
   bd362:	e7f7      	b.n	bd354 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bd364:	78aa      	ldrb	r2, [r5, #2]
   bd366:	2a75      	cmp	r2, #117	; 0x75
   bd368:	d1ec      	bne.n	bd344 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd36a:	461e      	mov	r6, r3
   bd36c:	eba8 0104 	sub.w	r1, r8, r4
   bd370:	f856 2b04 	ldr.w	r2, [r6], #4
   bd374:	4620      	mov	r0, r4
   bd376:	f7ff ffa3 	bl	bd2c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bd37a:	2800      	cmp	r0, #0
   bd37c:	dd03      	ble.n	bd386 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd37e:	4404      	add	r4, r0
   bd380:	3503      	adds	r5, #3
   bd382:	4633      	mov	r3, r6
   bd384:	e7d0      	b.n	bd328 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd386:	4621      	mov	r1, r4
   bd388:	4638      	mov	r0, r7
   bd38a:	f7ff ff73 	bl	bd274 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bd38e:	3502      	adds	r5, #2
   bd390:	e7ca      	b.n	bd328 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd392:	7022      	strb	r2, [r4, #0]
   bd394:	1be0      	subs	r0, r4, r7
   bd396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd39a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bd39a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bd39c:	2400      	movs	r4, #0
   bd39e:	2310      	movs	r3, #16
   bd3a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bd3a4:	6803      	ldr	r3, [r0, #0]
   bd3a6:	4615      	mov	r5, r2
   bd3a8:	699e      	ldr	r6, [r3, #24]
   bd3aa:	6812      	ldr	r2, [r2, #0]
   bd3ac:	466b      	mov	r3, sp
   bd3ae:	e9cd 4400 	strd	r4, r4, [sp]
   bd3b2:	47b0      	blx	r6
   bd3b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bd3b8:	f003 0306 	and.w	r3, r3, #6
   bd3bc:	2b06      	cmp	r3, #6
   bd3be:	bf03      	ittte	eq
   bd3c0:	9b00      	ldreq	r3, [sp, #0]
   bd3c2:	602b      	streq	r3, [r5, #0]
   bd3c4:	2001      	moveq	r0, #1
   bd3c6:	4620      	movne	r0, r4
   bd3c8:	b004      	add	sp, #16
   bd3ca:	bd70      	pop	{r4, r5, r6, pc}

000bd3cc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bd3cc:	9800      	ldr	r0, [sp, #0]
   bd3ce:	4290      	cmp	r0, r2
   bd3d0:	bf14      	ite	ne
   bd3d2:	2001      	movne	r0, #1
   bd3d4:	2006      	moveq	r0, #6
   bd3d6:	4770      	bx	lr

000bd3d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bd3d8:	b510      	push	{r4, lr}
   bd3da:	4b03      	ldr	r3, [pc, #12]	; (bd3e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bd3dc:	6003      	str	r3, [r0, #0]
   bd3de:	4604      	mov	r4, r0
   bd3e0:	f000 f8cd 	bl	bd57e <_ZNSt9type_infoD1Ev>
   bd3e4:	4620      	mov	r0, r4
   bd3e6:	bd10      	pop	{r4, pc}
   bd3e8:	000c18e4 	.word	0x000c18e4

000bd3ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bd3ec:	b510      	push	{r4, lr}
   bd3ee:	4604      	mov	r4, r0
   bd3f0:	f7ff fff2 	bl	bd3d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd3f4:	4620      	mov	r0, r4
   bd3f6:	2108      	movs	r1, #8
   bd3f8:	f7f6 fe51 	bl	b409e <_ZdlPvj>
   bd3fc:	4620      	mov	r0, r4
   bd3fe:	bd10      	pop	{r4, pc}

000bd400 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bd400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd404:	461f      	mov	r7, r3
   bd406:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bd40a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bd40e:	4598      	cmp	r8, r3
   bd410:	4606      	mov	r6, r0
   bd412:	4615      	mov	r5, r2
   bd414:	d107      	bne.n	bd426 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd416:	9907      	ldr	r1, [sp, #28]
   bd418:	f000 f8b4 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd41c:	b118      	cbz	r0, bd426 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd41e:	7165      	strb	r5, [r4, #5]
   bd420:	2000      	movs	r0, #0
   bd422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd426:	4639      	mov	r1, r7
   bd428:	4630      	mov	r0, r6
   bd42a:	f000 f8ab 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd42e:	2800      	cmp	r0, #0
   bd430:	d0f6      	beq.n	bd420 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bd432:	2301      	movs	r3, #1
   bd434:	f8c4 8000 	str.w	r8, [r4]
   bd438:	7125      	strb	r5, [r4, #4]
   bd43a:	71a3      	strb	r3, [r4, #6]
   bd43c:	e7f0      	b.n	bd420 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bd43e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bd43e:	b538      	push	{r3, r4, r5, lr}
   bd440:	4615      	mov	r5, r2
   bd442:	461c      	mov	r4, r3
   bd444:	f000 f89e 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd448:	b120      	cbz	r0, bd454 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bd44a:	2308      	movs	r3, #8
   bd44c:	60e3      	str	r3, [r4, #12]
   bd44e:	2306      	movs	r3, #6
   bd450:	6025      	str	r5, [r4, #0]
   bd452:	7123      	strb	r3, [r4, #4]
   bd454:	bd38      	pop	{r3, r4, r5, pc}

000bd456 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bd456:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd458:	4605      	mov	r5, r0
   bd45a:	460c      	mov	r4, r1
   bd45c:	9201      	str	r2, [sp, #4]
   bd45e:	461e      	mov	r6, r3
   bd460:	f000 f890 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd464:	b950      	cbnz	r0, bd47c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd466:	2e03      	cmp	r6, #3
   bd468:	d808      	bhi.n	bd47c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd46a:	6823      	ldr	r3, [r4, #0]
   bd46c:	9a01      	ldr	r2, [sp, #4]
   bd46e:	695b      	ldr	r3, [r3, #20]
   bd470:	4629      	mov	r1, r5
   bd472:	4620      	mov	r0, r4
   bd474:	b002      	add	sp, #8
   bd476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd47a:	4718      	bx	r3
   bd47c:	b002      	add	sp, #8
   bd47e:	bd70      	pop	{r4, r5, r6, pc}

000bd480 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bd480:	b510      	push	{r4, lr}
   bd482:	4b03      	ldr	r3, [pc, #12]	; (bd490 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bd484:	6003      	str	r3, [r0, #0]
   bd486:	4604      	mov	r4, r0
   bd488:	f7ff ffa6 	bl	bd3d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd48c:	4620      	mov	r0, r4
   bd48e:	bd10      	pop	{r4, pc}
   bd490:	000c1944 	.word	0x000c1944

000bd494 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bd494:	b510      	push	{r4, lr}
   bd496:	4604      	mov	r4, r0
   bd498:	f7ff fff2 	bl	bd480 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bd49c:	4620      	mov	r0, r4
   bd49e:	210c      	movs	r1, #12
   bd4a0:	f7f6 fdfd 	bl	b409e <_ZdlPvj>
   bd4a4:	4620      	mov	r0, r4
   bd4a6:	bd10      	pop	{r4, pc}

000bd4a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bd4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bd4aa:	9f08      	ldr	r7, [sp, #32]
   bd4ac:	4297      	cmp	r7, r2
   bd4ae:	4605      	mov	r5, r0
   bd4b0:	460e      	mov	r6, r1
   bd4b2:	4614      	mov	r4, r2
   bd4b4:	d00a      	beq.n	bd4cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bd4b6:	68a8      	ldr	r0, [r5, #8]
   bd4b8:	6802      	ldr	r2, [r0, #0]
   bd4ba:	9708      	str	r7, [sp, #32]
   bd4bc:	6a15      	ldr	r5, [r2, #32]
   bd4be:	4631      	mov	r1, r6
   bd4c0:	4622      	mov	r2, r4
   bd4c2:	46ac      	mov	ip, r5
   bd4c4:	b003      	add	sp, #12
   bd4c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd4ca:	4760      	bx	ip
   bd4cc:	4619      	mov	r1, r3
   bd4ce:	9301      	str	r3, [sp, #4]
   bd4d0:	f000 f858 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd4d4:	9b01      	ldr	r3, [sp, #4]
   bd4d6:	2800      	cmp	r0, #0
   bd4d8:	d0ed      	beq.n	bd4b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bd4da:	2006      	movs	r0, #6
   bd4dc:	b003      	add	sp, #12
   bd4de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd4e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bd4e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd4e4:	460d      	mov	r5, r1
   bd4e6:	4619      	mov	r1, r3
   bd4e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bd4ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bd4f0:	4681      	mov	r9, r0
   bd4f2:	4617      	mov	r7, r2
   bd4f4:	4698      	mov	r8, r3
   bd4f6:	f000 f845 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd4fa:	b190      	cbz	r0, bd522 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bd4fc:	2d00      	cmp	r5, #0
   bd4fe:	6034      	str	r4, [r6, #0]
   bd500:	7137      	strb	r7, [r6, #4]
   bd502:	db09      	blt.n	bd518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bd504:	1961      	adds	r1, r4, r5
   bd506:	458a      	cmp	sl, r1
   bd508:	bf0c      	ite	eq
   bd50a:	2106      	moveq	r1, #6
   bd50c:	2101      	movne	r1, #1
   bd50e:	71b1      	strb	r1, [r6, #6]
   bd510:	2000      	movs	r0, #0
   bd512:	b001      	add	sp, #4
   bd514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd518:	3502      	adds	r5, #2
   bd51a:	d1f9      	bne.n	bd510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd51c:	2301      	movs	r3, #1
   bd51e:	71b3      	strb	r3, [r6, #6]
   bd520:	e7f6      	b.n	bd510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd522:	4554      	cmp	r4, sl
   bd524:	d106      	bne.n	bd534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd526:	4659      	mov	r1, fp
   bd528:	4648      	mov	r0, r9
   bd52a:	f000 f82b 	bl	bd584 <_ZNKSt9type_infoeqERKS_>
   bd52e:	b108      	cbz	r0, bd534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd530:	7177      	strb	r7, [r6, #5]
   bd532:	e7ed      	b.n	bd510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd534:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bd538:	6803      	ldr	r3, [r0, #0]
   bd53a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bd53e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bd542:	69dc      	ldr	r4, [r3, #28]
   bd544:	463a      	mov	r2, r7
   bd546:	4643      	mov	r3, r8
   bd548:	4629      	mov	r1, r5
   bd54a:	46a4      	mov	ip, r4
   bd54c:	b001      	add	sp, #4
   bd54e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd552:	4760      	bx	ip

000bd554 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bd554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd558:	4607      	mov	r7, r0
   bd55a:	460c      	mov	r4, r1
   bd55c:	4615      	mov	r5, r2
   bd55e:	461e      	mov	r6, r3
   bd560:	f7ff ff6d 	bl	bd43e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bd564:	b948      	cbnz	r0, bd57a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bd566:	68b8      	ldr	r0, [r7, #8]
   bd568:	6803      	ldr	r3, [r0, #0]
   bd56a:	699f      	ldr	r7, [r3, #24]
   bd56c:	462a      	mov	r2, r5
   bd56e:	4633      	mov	r3, r6
   bd570:	4621      	mov	r1, r4
   bd572:	46bc      	mov	ip, r7
   bd574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd578:	4760      	bx	ip
   bd57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd57e <_ZNSt9type_infoD1Ev>:
   bd57e:	4770      	bx	lr

000bd580 <_ZNKSt9type_info14__is_pointer_pEv>:
   bd580:	2000      	movs	r0, #0
   bd582:	4770      	bx	lr

000bd584 <_ZNKSt9type_infoeqERKS_>:
   bd584:	4281      	cmp	r1, r0
   bd586:	b508      	push	{r3, lr}
   bd588:	d00e      	beq.n	bd5a8 <_ZNKSt9type_infoeqERKS_+0x24>
   bd58a:	6840      	ldr	r0, [r0, #4]
   bd58c:	7803      	ldrb	r3, [r0, #0]
   bd58e:	2b2a      	cmp	r3, #42	; 0x2a
   bd590:	d00c      	beq.n	bd5ac <_ZNKSt9type_infoeqERKS_+0x28>
   bd592:	6849      	ldr	r1, [r1, #4]
   bd594:	780b      	ldrb	r3, [r1, #0]
   bd596:	2b2a      	cmp	r3, #42	; 0x2a
   bd598:	bf08      	it	eq
   bd59a:	3101      	addeq	r1, #1
   bd59c:	f000 fdb5 	bl	be10a <strcmp>
   bd5a0:	fab0 f080 	clz	r0, r0
   bd5a4:	0940      	lsrs	r0, r0, #5
   bd5a6:	bd08      	pop	{r3, pc}
   bd5a8:	2001      	movs	r0, #1
   bd5aa:	e7fc      	b.n	bd5a6 <_ZNKSt9type_infoeqERKS_+0x22>
   bd5ac:	2000      	movs	r0, #0
   bd5ae:	e7fa      	b.n	bd5a6 <_ZNKSt9type_infoeqERKS_+0x22>

000bd5b0 <__aeabi_drsub>:
   bd5b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd5b4:	e002      	b.n	bd5bc <__adddf3>
   bd5b6:	bf00      	nop

000bd5b8 <__aeabi_dsub>:
   bd5b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd5bc <__adddf3>:
   bd5bc:	b530      	push	{r4, r5, lr}
   bd5be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd5c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd5c6:	ea94 0f05 	teq	r4, r5
   bd5ca:	bf08      	it	eq
   bd5cc:	ea90 0f02 	teqeq	r0, r2
   bd5d0:	bf1f      	itttt	ne
   bd5d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd5d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd5da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd5de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd5e2:	f000 80e2 	beq.w	bd7aa <__adddf3+0x1ee>
   bd5e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd5ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd5ee:	bfb8      	it	lt
   bd5f0:	426d      	neglt	r5, r5
   bd5f2:	dd0c      	ble.n	bd60e <__adddf3+0x52>
   bd5f4:	442c      	add	r4, r5
   bd5f6:	ea80 0202 	eor.w	r2, r0, r2
   bd5fa:	ea81 0303 	eor.w	r3, r1, r3
   bd5fe:	ea82 0000 	eor.w	r0, r2, r0
   bd602:	ea83 0101 	eor.w	r1, r3, r1
   bd606:	ea80 0202 	eor.w	r2, r0, r2
   bd60a:	ea81 0303 	eor.w	r3, r1, r3
   bd60e:	2d36      	cmp	r5, #54	; 0x36
   bd610:	bf88      	it	hi
   bd612:	bd30      	pophi	{r4, r5, pc}
   bd614:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd61c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd620:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd624:	d002      	beq.n	bd62c <__adddf3+0x70>
   bd626:	4240      	negs	r0, r0
   bd628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd62c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd630:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd634:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd638:	d002      	beq.n	bd640 <__adddf3+0x84>
   bd63a:	4252      	negs	r2, r2
   bd63c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd640:	ea94 0f05 	teq	r4, r5
   bd644:	f000 80a7 	beq.w	bd796 <__adddf3+0x1da>
   bd648:	f1a4 0401 	sub.w	r4, r4, #1
   bd64c:	f1d5 0e20 	rsbs	lr, r5, #32
   bd650:	db0d      	blt.n	bd66e <__adddf3+0xb2>
   bd652:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd656:	fa22 f205 	lsr.w	r2, r2, r5
   bd65a:	1880      	adds	r0, r0, r2
   bd65c:	f141 0100 	adc.w	r1, r1, #0
   bd660:	fa03 f20e 	lsl.w	r2, r3, lr
   bd664:	1880      	adds	r0, r0, r2
   bd666:	fa43 f305 	asr.w	r3, r3, r5
   bd66a:	4159      	adcs	r1, r3
   bd66c:	e00e      	b.n	bd68c <__adddf3+0xd0>
   bd66e:	f1a5 0520 	sub.w	r5, r5, #32
   bd672:	f10e 0e20 	add.w	lr, lr, #32
   bd676:	2a01      	cmp	r2, #1
   bd678:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd67c:	bf28      	it	cs
   bd67e:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd682:	fa43 f305 	asr.w	r3, r3, r5
   bd686:	18c0      	adds	r0, r0, r3
   bd688:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd68c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd690:	d507      	bpl.n	bd6a2 <__adddf3+0xe6>
   bd692:	f04f 0e00 	mov.w	lr, #0
   bd696:	f1dc 0c00 	rsbs	ip, ip, #0
   bd69a:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd69e:	eb6e 0101 	sbc.w	r1, lr, r1
   bd6a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd6a6:	d31b      	bcc.n	bd6e0 <__adddf3+0x124>
   bd6a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd6ac:	d30c      	bcc.n	bd6c8 <__adddf3+0x10c>
   bd6ae:	0849      	lsrs	r1, r1, #1
   bd6b0:	ea5f 0030 	movs.w	r0, r0, rrx
   bd6b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd6b8:	f104 0401 	add.w	r4, r4, #1
   bd6bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd6c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd6c4:	f080 809a 	bcs.w	bd7fc <__adddf3+0x240>
   bd6c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd6cc:	bf08      	it	eq
   bd6ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd6d2:	f150 0000 	adcs.w	r0, r0, #0
   bd6d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd6da:	ea41 0105 	orr.w	r1, r1, r5
   bd6de:	bd30      	pop	{r4, r5, pc}
   bd6e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd6e4:	4140      	adcs	r0, r0
   bd6e6:	eb41 0101 	adc.w	r1, r1, r1
   bd6ea:	3c01      	subs	r4, #1
   bd6ec:	bf28      	it	cs
   bd6ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd6f2:	d2e9      	bcs.n	bd6c8 <__adddf3+0x10c>
   bd6f4:	f091 0f00 	teq	r1, #0
   bd6f8:	bf04      	itt	eq
   bd6fa:	4601      	moveq	r1, r0
   bd6fc:	2000      	moveq	r0, #0
   bd6fe:	fab1 f381 	clz	r3, r1
   bd702:	bf08      	it	eq
   bd704:	3320      	addeq	r3, #32
   bd706:	f1a3 030b 	sub.w	r3, r3, #11
   bd70a:	f1b3 0220 	subs.w	r2, r3, #32
   bd70e:	da0c      	bge.n	bd72a <__adddf3+0x16e>
   bd710:	320c      	adds	r2, #12
   bd712:	dd08      	ble.n	bd726 <__adddf3+0x16a>
   bd714:	f102 0c14 	add.w	ip, r2, #20
   bd718:	f1c2 020c 	rsb	r2, r2, #12
   bd71c:	fa01 f00c 	lsl.w	r0, r1, ip
   bd720:	fa21 f102 	lsr.w	r1, r1, r2
   bd724:	e00c      	b.n	bd740 <__adddf3+0x184>
   bd726:	f102 0214 	add.w	r2, r2, #20
   bd72a:	bfd8      	it	le
   bd72c:	f1c2 0c20 	rsble	ip, r2, #32
   bd730:	fa01 f102 	lsl.w	r1, r1, r2
   bd734:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd738:	bfdc      	itt	le
   bd73a:	ea41 010c 	orrle.w	r1, r1, ip
   bd73e:	4090      	lslle	r0, r2
   bd740:	1ae4      	subs	r4, r4, r3
   bd742:	bfa2      	ittt	ge
   bd744:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd748:	4329      	orrge	r1, r5
   bd74a:	bd30      	popge	{r4, r5, pc}
   bd74c:	ea6f 0404 	mvn.w	r4, r4
   bd750:	3c1f      	subs	r4, #31
   bd752:	da1c      	bge.n	bd78e <__adddf3+0x1d2>
   bd754:	340c      	adds	r4, #12
   bd756:	dc0e      	bgt.n	bd776 <__adddf3+0x1ba>
   bd758:	f104 0414 	add.w	r4, r4, #20
   bd75c:	f1c4 0220 	rsb	r2, r4, #32
   bd760:	fa20 f004 	lsr.w	r0, r0, r4
   bd764:	fa01 f302 	lsl.w	r3, r1, r2
   bd768:	ea40 0003 	orr.w	r0, r0, r3
   bd76c:	fa21 f304 	lsr.w	r3, r1, r4
   bd770:	ea45 0103 	orr.w	r1, r5, r3
   bd774:	bd30      	pop	{r4, r5, pc}
   bd776:	f1c4 040c 	rsb	r4, r4, #12
   bd77a:	f1c4 0220 	rsb	r2, r4, #32
   bd77e:	fa20 f002 	lsr.w	r0, r0, r2
   bd782:	fa01 f304 	lsl.w	r3, r1, r4
   bd786:	ea40 0003 	orr.w	r0, r0, r3
   bd78a:	4629      	mov	r1, r5
   bd78c:	bd30      	pop	{r4, r5, pc}
   bd78e:	fa21 f004 	lsr.w	r0, r1, r4
   bd792:	4629      	mov	r1, r5
   bd794:	bd30      	pop	{r4, r5, pc}
   bd796:	f094 0f00 	teq	r4, #0
   bd79a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd79e:	bf06      	itte	eq
   bd7a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd7a4:	3401      	addeq	r4, #1
   bd7a6:	3d01      	subne	r5, #1
   bd7a8:	e74e      	b.n	bd648 <__adddf3+0x8c>
   bd7aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd7ae:	bf18      	it	ne
   bd7b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd7b4:	d029      	beq.n	bd80a <__adddf3+0x24e>
   bd7b6:	ea94 0f05 	teq	r4, r5
   bd7ba:	bf08      	it	eq
   bd7bc:	ea90 0f02 	teqeq	r0, r2
   bd7c0:	d005      	beq.n	bd7ce <__adddf3+0x212>
   bd7c2:	ea54 0c00 	orrs.w	ip, r4, r0
   bd7c6:	bf04      	itt	eq
   bd7c8:	4619      	moveq	r1, r3
   bd7ca:	4610      	moveq	r0, r2
   bd7cc:	bd30      	pop	{r4, r5, pc}
   bd7ce:	ea91 0f03 	teq	r1, r3
   bd7d2:	bf1e      	ittt	ne
   bd7d4:	2100      	movne	r1, #0
   bd7d6:	2000      	movne	r0, #0
   bd7d8:	bd30      	popne	{r4, r5, pc}
   bd7da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd7de:	d105      	bne.n	bd7ec <__adddf3+0x230>
   bd7e0:	0040      	lsls	r0, r0, #1
   bd7e2:	4149      	adcs	r1, r1
   bd7e4:	bf28      	it	cs
   bd7e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd7ea:	bd30      	pop	{r4, r5, pc}
   bd7ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd7f0:	bf3c      	itt	cc
   bd7f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd7f6:	bd30      	popcc	{r4, r5, pc}
   bd7f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd7fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd804:	f04f 0000 	mov.w	r0, #0
   bd808:	bd30      	pop	{r4, r5, pc}
   bd80a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd80e:	bf1a      	itte	ne
   bd810:	4619      	movne	r1, r3
   bd812:	4610      	movne	r0, r2
   bd814:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd818:	bf1c      	itt	ne
   bd81a:	460b      	movne	r3, r1
   bd81c:	4602      	movne	r2, r0
   bd81e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd822:	bf06      	itte	eq
   bd824:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd828:	ea91 0f03 	teqeq	r1, r3
   bd82c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd830:	bd30      	pop	{r4, r5, pc}
   bd832:	bf00      	nop

000bd834 <__aeabi_ui2d>:
   bd834:	f090 0f00 	teq	r0, #0
   bd838:	bf04      	itt	eq
   bd83a:	2100      	moveq	r1, #0
   bd83c:	4770      	bxeq	lr
   bd83e:	b530      	push	{r4, r5, lr}
   bd840:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd844:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd848:	f04f 0500 	mov.w	r5, #0
   bd84c:	f04f 0100 	mov.w	r1, #0
   bd850:	e750      	b.n	bd6f4 <__adddf3+0x138>
   bd852:	bf00      	nop

000bd854 <__aeabi_i2d>:
   bd854:	f090 0f00 	teq	r0, #0
   bd858:	bf04      	itt	eq
   bd85a:	2100      	moveq	r1, #0
   bd85c:	4770      	bxeq	lr
   bd85e:	b530      	push	{r4, r5, lr}
   bd860:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd864:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd868:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd86c:	bf48      	it	mi
   bd86e:	4240      	negmi	r0, r0
   bd870:	f04f 0100 	mov.w	r1, #0
   bd874:	e73e      	b.n	bd6f4 <__adddf3+0x138>
   bd876:	bf00      	nop

000bd878 <__aeabi_f2d>:
   bd878:	0042      	lsls	r2, r0, #1
   bd87a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd87e:	ea4f 0131 	mov.w	r1, r1, rrx
   bd882:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd886:	bf1f      	itttt	ne
   bd888:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd88c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd890:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd894:	4770      	bxne	lr
   bd896:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd89a:	bf08      	it	eq
   bd89c:	4770      	bxeq	lr
   bd89e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd8a2:	bf04      	itt	eq
   bd8a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd8a8:	4770      	bxeq	lr
   bd8aa:	b530      	push	{r4, r5, lr}
   bd8ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd8b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd8b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd8b8:	e71c      	b.n	bd6f4 <__adddf3+0x138>
   bd8ba:	bf00      	nop

000bd8bc <__aeabi_ul2d>:
   bd8bc:	ea50 0201 	orrs.w	r2, r0, r1
   bd8c0:	bf08      	it	eq
   bd8c2:	4770      	bxeq	lr
   bd8c4:	b530      	push	{r4, r5, lr}
   bd8c6:	f04f 0500 	mov.w	r5, #0
   bd8ca:	e00a      	b.n	bd8e2 <__aeabi_l2d+0x16>

000bd8cc <__aeabi_l2d>:
   bd8cc:	ea50 0201 	orrs.w	r2, r0, r1
   bd8d0:	bf08      	it	eq
   bd8d2:	4770      	bxeq	lr
   bd8d4:	b530      	push	{r4, r5, lr}
   bd8d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd8da:	d502      	bpl.n	bd8e2 <__aeabi_l2d+0x16>
   bd8dc:	4240      	negs	r0, r0
   bd8de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd8e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd8e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd8ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd8ee:	f43f aed8 	beq.w	bd6a2 <__adddf3+0xe6>
   bd8f2:	f04f 0203 	mov.w	r2, #3
   bd8f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd8fa:	bf18      	it	ne
   bd8fc:	3203      	addne	r2, #3
   bd8fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd902:	bf18      	it	ne
   bd904:	3203      	addne	r2, #3
   bd906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd90a:	f1c2 0320 	rsb	r3, r2, #32
   bd90e:	fa00 fc03 	lsl.w	ip, r0, r3
   bd912:	fa20 f002 	lsr.w	r0, r0, r2
   bd916:	fa01 fe03 	lsl.w	lr, r1, r3
   bd91a:	ea40 000e 	orr.w	r0, r0, lr
   bd91e:	fa21 f102 	lsr.w	r1, r1, r2
   bd922:	4414      	add	r4, r2
   bd924:	e6bd      	b.n	bd6a2 <__adddf3+0xe6>
   bd926:	bf00      	nop

000bd928 <__aeabi_dmul>:
   bd928:	b570      	push	{r4, r5, r6, lr}
   bd92a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd92e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd936:	bf1d      	ittte	ne
   bd938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd93c:	ea94 0f0c 	teqne	r4, ip
   bd940:	ea95 0f0c 	teqne	r5, ip
   bd944:	f000 f8de 	bleq	bdb04 <__aeabi_dmul+0x1dc>
   bd948:	442c      	add	r4, r5
   bd94a:	ea81 0603 	eor.w	r6, r1, r3
   bd94e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd95a:	bf18      	it	ne
   bd95c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd968:	d038      	beq.n	bd9dc <__aeabi_dmul+0xb4>
   bd96a:	fba0 ce02 	umull	ip, lr, r0, r2
   bd96e:	f04f 0500 	mov.w	r5, #0
   bd972:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd97a:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd97e:	f04f 0600 	mov.w	r6, #0
   bd982:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd986:	f09c 0f00 	teq	ip, #0
   bd98a:	bf18      	it	ne
   bd98c:	f04e 0e01 	orrne.w	lr, lr, #1
   bd990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd99c:	d204      	bcs.n	bd9a8 <__aeabi_dmul+0x80>
   bd99e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd9a2:	416d      	adcs	r5, r5
   bd9a4:	eb46 0606 	adc.w	r6, r6, r6
   bd9a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd9ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd9b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd9b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd9b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd9bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd9c0:	bf88      	it	hi
   bd9c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd9c6:	d81e      	bhi.n	bda06 <__aeabi_dmul+0xde>
   bd9c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd9cc:	bf08      	it	eq
   bd9ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd9d2:	f150 0000 	adcs.w	r0, r0, #0
   bd9d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd9da:	bd70      	pop	{r4, r5, r6, pc}
   bd9dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd9e0:	ea46 0101 	orr.w	r1, r6, r1
   bd9e4:	ea40 0002 	orr.w	r0, r0, r2
   bd9e8:	ea81 0103 	eor.w	r1, r1, r3
   bd9ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd9f0:	bfc2      	ittt	gt
   bd9f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd9f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd9fa:	bd70      	popgt	{r4, r5, r6, pc}
   bd9fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bda00:	f04f 0e00 	mov.w	lr, #0
   bda04:	3c01      	subs	r4, #1
   bda06:	f300 80ab 	bgt.w	bdb60 <__aeabi_dmul+0x238>
   bda0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bda0e:	bfde      	ittt	le
   bda10:	2000      	movle	r0, #0
   bda12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bda16:	bd70      	pople	{r4, r5, r6, pc}
   bda18:	f1c4 0400 	rsb	r4, r4, #0
   bda1c:	3c20      	subs	r4, #32
   bda1e:	da35      	bge.n	bda8c <__aeabi_dmul+0x164>
   bda20:	340c      	adds	r4, #12
   bda22:	dc1b      	bgt.n	bda5c <__aeabi_dmul+0x134>
   bda24:	f104 0414 	add.w	r4, r4, #20
   bda28:	f1c4 0520 	rsb	r5, r4, #32
   bda2c:	fa00 f305 	lsl.w	r3, r0, r5
   bda30:	fa20 f004 	lsr.w	r0, r0, r4
   bda34:	fa01 f205 	lsl.w	r2, r1, r5
   bda38:	ea40 0002 	orr.w	r0, r0, r2
   bda3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bda40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bda44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bda48:	fa21 f604 	lsr.w	r6, r1, r4
   bda4c:	eb42 0106 	adc.w	r1, r2, r6
   bda50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bda54:	bf08      	it	eq
   bda56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bda5a:	bd70      	pop	{r4, r5, r6, pc}
   bda5c:	f1c4 040c 	rsb	r4, r4, #12
   bda60:	f1c4 0520 	rsb	r5, r4, #32
   bda64:	fa00 f304 	lsl.w	r3, r0, r4
   bda68:	fa20 f005 	lsr.w	r0, r0, r5
   bda6c:	fa01 f204 	lsl.w	r2, r1, r4
   bda70:	ea40 0002 	orr.w	r0, r0, r2
   bda74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bda78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bda7c:	f141 0100 	adc.w	r1, r1, #0
   bda80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bda84:	bf08      	it	eq
   bda86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bda8a:	bd70      	pop	{r4, r5, r6, pc}
   bda8c:	f1c4 0520 	rsb	r5, r4, #32
   bda90:	fa00 f205 	lsl.w	r2, r0, r5
   bda94:	ea4e 0e02 	orr.w	lr, lr, r2
   bda98:	fa20 f304 	lsr.w	r3, r0, r4
   bda9c:	fa01 f205 	lsl.w	r2, r1, r5
   bdaa0:	ea43 0302 	orr.w	r3, r3, r2
   bdaa4:	fa21 f004 	lsr.w	r0, r1, r4
   bdaa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdaac:	fa21 f204 	lsr.w	r2, r1, r4
   bdab0:	ea20 0002 	bic.w	r0, r0, r2
   bdab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bdab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdabc:	bf08      	it	eq
   bdabe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdac2:	bd70      	pop	{r4, r5, r6, pc}
   bdac4:	f094 0f00 	teq	r4, #0
   bdac8:	d10f      	bne.n	bdaea <__aeabi_dmul+0x1c2>
   bdaca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bdace:	0040      	lsls	r0, r0, #1
   bdad0:	eb41 0101 	adc.w	r1, r1, r1
   bdad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdad8:	bf08      	it	eq
   bdada:	3c01      	subeq	r4, #1
   bdadc:	d0f7      	beq.n	bdace <__aeabi_dmul+0x1a6>
   bdade:	ea41 0106 	orr.w	r1, r1, r6
   bdae2:	f095 0f00 	teq	r5, #0
   bdae6:	bf18      	it	ne
   bdae8:	4770      	bxne	lr
   bdaea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bdaee:	0052      	lsls	r2, r2, #1
   bdaf0:	eb43 0303 	adc.w	r3, r3, r3
   bdaf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bdaf8:	bf08      	it	eq
   bdafa:	3d01      	subeq	r5, #1
   bdafc:	d0f7      	beq.n	bdaee <__aeabi_dmul+0x1c6>
   bdafe:	ea43 0306 	orr.w	r3, r3, r6
   bdb02:	4770      	bx	lr
   bdb04:	ea94 0f0c 	teq	r4, ip
   bdb08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdb0c:	bf18      	it	ne
   bdb0e:	ea95 0f0c 	teqne	r5, ip
   bdb12:	d00c      	beq.n	bdb2e <__aeabi_dmul+0x206>
   bdb14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdb18:	bf18      	it	ne
   bdb1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdb1e:	d1d1      	bne.n	bdac4 <__aeabi_dmul+0x19c>
   bdb20:	ea81 0103 	eor.w	r1, r1, r3
   bdb24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdb28:	f04f 0000 	mov.w	r0, #0
   bdb2c:	bd70      	pop	{r4, r5, r6, pc}
   bdb2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdb32:	bf06      	itte	eq
   bdb34:	4610      	moveq	r0, r2
   bdb36:	4619      	moveq	r1, r3
   bdb38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdb3c:	d019      	beq.n	bdb72 <__aeabi_dmul+0x24a>
   bdb3e:	ea94 0f0c 	teq	r4, ip
   bdb42:	d102      	bne.n	bdb4a <__aeabi_dmul+0x222>
   bdb44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bdb48:	d113      	bne.n	bdb72 <__aeabi_dmul+0x24a>
   bdb4a:	ea95 0f0c 	teq	r5, ip
   bdb4e:	d105      	bne.n	bdb5c <__aeabi_dmul+0x234>
   bdb50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bdb54:	bf1c      	itt	ne
   bdb56:	4610      	movne	r0, r2
   bdb58:	4619      	movne	r1, r3
   bdb5a:	d10a      	bne.n	bdb72 <__aeabi_dmul+0x24a>
   bdb5c:	ea81 0103 	eor.w	r1, r1, r3
   bdb60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdb64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bdb68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bdb6c:	f04f 0000 	mov.w	r0, #0
   bdb70:	bd70      	pop	{r4, r5, r6, pc}
   bdb72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bdb76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bdb7a:	bd70      	pop	{r4, r5, r6, pc}

000bdb7c <__aeabi_ddiv>:
   bdb7c:	b570      	push	{r4, r5, r6, lr}
   bdb7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdb82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bdb86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdb8a:	bf1d      	ittte	ne
   bdb8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdb90:	ea94 0f0c 	teqne	r4, ip
   bdb94:	ea95 0f0c 	teqne	r5, ip
   bdb98:	f000 f8a7 	bleq	bdcea <__aeabi_ddiv+0x16e>
   bdb9c:	eba4 0405 	sub.w	r4, r4, r5
   bdba0:	ea81 0e03 	eor.w	lr, r1, r3
   bdba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bdbac:	f000 8088 	beq.w	bdcc0 <__aeabi_ddiv+0x144>
   bdbb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bdbb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bdbb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bdbbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bdbc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bdbc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bdbc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bdbcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bdbd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bdbd4:	429d      	cmp	r5, r3
   bdbd6:	bf08      	it	eq
   bdbd8:	4296      	cmpeq	r6, r2
   bdbda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bdbde:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bdbe2:	d202      	bcs.n	bdbea <__aeabi_ddiv+0x6e>
   bdbe4:	085b      	lsrs	r3, r3, #1
   bdbe6:	ea4f 0232 	mov.w	r2, r2, rrx
   bdbea:	1ab6      	subs	r6, r6, r2
   bdbec:	eb65 0503 	sbc.w	r5, r5, r3
   bdbf0:	085b      	lsrs	r3, r3, #1
   bdbf2:	ea4f 0232 	mov.w	r2, r2, rrx
   bdbf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bdbfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bdbfe:	ebb6 0e02 	subs.w	lr, r6, r2
   bdc02:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdc06:	bf22      	ittt	cs
   bdc08:	1ab6      	subcs	r6, r6, r2
   bdc0a:	4675      	movcs	r5, lr
   bdc0c:	ea40 000c 	orrcs.w	r0, r0, ip
   bdc10:	085b      	lsrs	r3, r3, #1
   bdc12:	ea4f 0232 	mov.w	r2, r2, rrx
   bdc16:	ebb6 0e02 	subs.w	lr, r6, r2
   bdc1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdc1e:	bf22      	ittt	cs
   bdc20:	1ab6      	subcs	r6, r6, r2
   bdc22:	4675      	movcs	r5, lr
   bdc24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bdc28:	085b      	lsrs	r3, r3, #1
   bdc2a:	ea4f 0232 	mov.w	r2, r2, rrx
   bdc2e:	ebb6 0e02 	subs.w	lr, r6, r2
   bdc32:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdc36:	bf22      	ittt	cs
   bdc38:	1ab6      	subcs	r6, r6, r2
   bdc3a:	4675      	movcs	r5, lr
   bdc3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bdc40:	085b      	lsrs	r3, r3, #1
   bdc42:	ea4f 0232 	mov.w	r2, r2, rrx
   bdc46:	ebb6 0e02 	subs.w	lr, r6, r2
   bdc4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdc4e:	bf22      	ittt	cs
   bdc50:	1ab6      	subcs	r6, r6, r2
   bdc52:	4675      	movcs	r5, lr
   bdc54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bdc58:	ea55 0e06 	orrs.w	lr, r5, r6
   bdc5c:	d018      	beq.n	bdc90 <__aeabi_ddiv+0x114>
   bdc5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bdc62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bdc66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bdc6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bdc6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bdc72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bdc76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bdc7a:	d1c0      	bne.n	bdbfe <__aeabi_ddiv+0x82>
   bdc7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdc80:	d10b      	bne.n	bdc9a <__aeabi_ddiv+0x11e>
   bdc82:	ea41 0100 	orr.w	r1, r1, r0
   bdc86:	f04f 0000 	mov.w	r0, #0
   bdc8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bdc8e:	e7b6      	b.n	bdbfe <__aeabi_ddiv+0x82>
   bdc90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdc94:	bf04      	itt	eq
   bdc96:	4301      	orreq	r1, r0
   bdc98:	2000      	moveq	r0, #0
   bdc9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdc9e:	bf88      	it	hi
   bdca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bdca4:	f63f aeaf 	bhi.w	bda06 <__aeabi_dmul+0xde>
   bdca8:	ebb5 0c03 	subs.w	ip, r5, r3
   bdcac:	bf04      	itt	eq
   bdcae:	ebb6 0c02 	subseq.w	ip, r6, r2
   bdcb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bdcb6:	f150 0000 	adcs.w	r0, r0, #0
   bdcba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdcbe:	bd70      	pop	{r4, r5, r6, pc}
   bdcc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bdcc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bdcc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bdccc:	bfc2      	ittt	gt
   bdcce:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdcd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdcd6:	bd70      	popgt	{r4, r5, r6, pc}
   bdcd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdcdc:	f04f 0e00 	mov.w	lr, #0
   bdce0:	3c01      	subs	r4, #1
   bdce2:	e690      	b.n	bda06 <__aeabi_dmul+0xde>
   bdce4:	ea45 0e06 	orr.w	lr, r5, r6
   bdce8:	e68d      	b.n	bda06 <__aeabi_dmul+0xde>
   bdcea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdcee:	ea94 0f0c 	teq	r4, ip
   bdcf2:	bf08      	it	eq
   bdcf4:	ea95 0f0c 	teqeq	r5, ip
   bdcf8:	f43f af3b 	beq.w	bdb72 <__aeabi_dmul+0x24a>
   bdcfc:	ea94 0f0c 	teq	r4, ip
   bdd00:	d10a      	bne.n	bdd18 <__aeabi_ddiv+0x19c>
   bdd02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdd06:	f47f af34 	bne.w	bdb72 <__aeabi_dmul+0x24a>
   bdd0a:	ea95 0f0c 	teq	r5, ip
   bdd0e:	f47f af25 	bne.w	bdb5c <__aeabi_dmul+0x234>
   bdd12:	4610      	mov	r0, r2
   bdd14:	4619      	mov	r1, r3
   bdd16:	e72c      	b.n	bdb72 <__aeabi_dmul+0x24a>
   bdd18:	ea95 0f0c 	teq	r5, ip
   bdd1c:	d106      	bne.n	bdd2c <__aeabi_ddiv+0x1b0>
   bdd1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdd22:	f43f aefd 	beq.w	bdb20 <__aeabi_dmul+0x1f8>
   bdd26:	4610      	mov	r0, r2
   bdd28:	4619      	mov	r1, r3
   bdd2a:	e722      	b.n	bdb72 <__aeabi_dmul+0x24a>
   bdd2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdd30:	bf18      	it	ne
   bdd32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdd36:	f47f aec5 	bne.w	bdac4 <__aeabi_dmul+0x19c>
   bdd3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bdd3e:	f47f af0d 	bne.w	bdb5c <__aeabi_dmul+0x234>
   bdd42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bdd46:	f47f aeeb 	bne.w	bdb20 <__aeabi_dmul+0x1f8>
   bdd4a:	e712      	b.n	bdb72 <__aeabi_dmul+0x24a>

000bdd4c <__gedf2>:
   bdd4c:	f04f 3cff 	mov.w	ip, #4294967295
   bdd50:	e006      	b.n	bdd60 <__cmpdf2+0x4>
   bdd52:	bf00      	nop

000bdd54 <__ledf2>:
   bdd54:	f04f 0c01 	mov.w	ip, #1
   bdd58:	e002      	b.n	bdd60 <__cmpdf2+0x4>
   bdd5a:	bf00      	nop

000bdd5c <__cmpdf2>:
   bdd5c:	f04f 0c01 	mov.w	ip, #1
   bdd60:	f84d cd04 	str.w	ip, [sp, #-4]!
   bdd64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdd68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdd6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdd70:	bf18      	it	ne
   bdd72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bdd76:	d01b      	beq.n	bddb0 <__cmpdf2+0x54>
   bdd78:	b001      	add	sp, #4
   bdd7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bdd7e:	bf0c      	ite	eq
   bdd80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bdd84:	ea91 0f03 	teqne	r1, r3
   bdd88:	bf02      	ittt	eq
   bdd8a:	ea90 0f02 	teqeq	r0, r2
   bdd8e:	2000      	moveq	r0, #0
   bdd90:	4770      	bxeq	lr
   bdd92:	f110 0f00 	cmn.w	r0, #0
   bdd96:	ea91 0f03 	teq	r1, r3
   bdd9a:	bf58      	it	pl
   bdd9c:	4299      	cmppl	r1, r3
   bdd9e:	bf08      	it	eq
   bdda0:	4290      	cmpeq	r0, r2
   bdda2:	bf2c      	ite	cs
   bdda4:	17d8      	asrcs	r0, r3, #31
   bdda6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bddaa:	f040 0001 	orr.w	r0, r0, #1
   bddae:	4770      	bx	lr
   bddb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bddb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bddb8:	d102      	bne.n	bddc0 <__cmpdf2+0x64>
   bddba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bddbe:	d107      	bne.n	bddd0 <__cmpdf2+0x74>
   bddc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bddc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bddc8:	d1d6      	bne.n	bdd78 <__cmpdf2+0x1c>
   bddca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bddce:	d0d3      	beq.n	bdd78 <__cmpdf2+0x1c>
   bddd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   bddd4:	4770      	bx	lr
   bddd6:	bf00      	nop

000bddd8 <__aeabi_cdrcmple>:
   bddd8:	4684      	mov	ip, r0
   bddda:	4610      	mov	r0, r2
   bdddc:	4662      	mov	r2, ip
   bddde:	468c      	mov	ip, r1
   bdde0:	4619      	mov	r1, r3
   bdde2:	4663      	mov	r3, ip
   bdde4:	e000      	b.n	bdde8 <__aeabi_cdcmpeq>
   bdde6:	bf00      	nop

000bdde8 <__aeabi_cdcmpeq>:
   bdde8:	b501      	push	{r0, lr}
   bddea:	f7ff ffb7 	bl	bdd5c <__cmpdf2>
   bddee:	2800      	cmp	r0, #0
   bddf0:	bf48      	it	mi
   bddf2:	f110 0f00 	cmnmi.w	r0, #0
   bddf6:	bd01      	pop	{r0, pc}

000bddf8 <__aeabi_dcmpeq>:
   bddf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bddfc:	f7ff fff4 	bl	bdde8 <__aeabi_cdcmpeq>
   bde00:	bf0c      	ite	eq
   bde02:	2001      	moveq	r0, #1
   bde04:	2000      	movne	r0, #0
   bde06:	f85d fb08 	ldr.w	pc, [sp], #8
   bde0a:	bf00      	nop

000bde0c <__aeabi_dcmplt>:
   bde0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bde10:	f7ff ffea 	bl	bdde8 <__aeabi_cdcmpeq>
   bde14:	bf34      	ite	cc
   bde16:	2001      	movcc	r0, #1
   bde18:	2000      	movcs	r0, #0
   bde1a:	f85d fb08 	ldr.w	pc, [sp], #8
   bde1e:	bf00      	nop

000bde20 <__aeabi_dcmple>:
   bde20:	f84d ed08 	str.w	lr, [sp, #-8]!
   bde24:	f7ff ffe0 	bl	bdde8 <__aeabi_cdcmpeq>
   bde28:	bf94      	ite	ls
   bde2a:	2001      	movls	r0, #1
   bde2c:	2000      	movhi	r0, #0
   bde2e:	f85d fb08 	ldr.w	pc, [sp], #8
   bde32:	bf00      	nop

000bde34 <__aeabi_dcmpge>:
   bde34:	f84d ed08 	str.w	lr, [sp, #-8]!
   bde38:	f7ff ffce 	bl	bddd8 <__aeabi_cdrcmple>
   bde3c:	bf94      	ite	ls
   bde3e:	2001      	movls	r0, #1
   bde40:	2000      	movhi	r0, #0
   bde42:	f85d fb08 	ldr.w	pc, [sp], #8
   bde46:	bf00      	nop

000bde48 <__aeabi_dcmpgt>:
   bde48:	f84d ed08 	str.w	lr, [sp, #-8]!
   bde4c:	f7ff ffc4 	bl	bddd8 <__aeabi_cdrcmple>
   bde50:	bf34      	ite	cc
   bde52:	2001      	movcc	r0, #1
   bde54:	2000      	movcs	r0, #0
   bde56:	f85d fb08 	ldr.w	pc, [sp], #8
   bde5a:	bf00      	nop

000bde5c <__aeabi_d2uiz>:
   bde5c:	004a      	lsls	r2, r1, #1
   bde5e:	d211      	bcs.n	bde84 <__aeabi_d2uiz+0x28>
   bde60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bde64:	d211      	bcs.n	bde8a <__aeabi_d2uiz+0x2e>
   bde66:	d50d      	bpl.n	bde84 <__aeabi_d2uiz+0x28>
   bde68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bde6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bde70:	d40e      	bmi.n	bde90 <__aeabi_d2uiz+0x34>
   bde72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bde76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bde7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bde7e:	fa23 f002 	lsr.w	r0, r3, r2
   bde82:	4770      	bx	lr
   bde84:	f04f 0000 	mov.w	r0, #0
   bde88:	4770      	bx	lr
   bde8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bde8e:	d102      	bne.n	bde96 <__aeabi_d2uiz+0x3a>
   bde90:	f04f 30ff 	mov.w	r0, #4294967295
   bde94:	4770      	bx	lr
   bde96:	f04f 0000 	mov.w	r0, #0
   bde9a:	4770      	bx	lr

000bde9c <__aeabi_d2f>:
   bde9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bdea0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bdea4:	bf24      	itt	cs
   bdea6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bdeaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bdeae:	d90d      	bls.n	bdecc <__aeabi_d2f+0x30>
   bdeb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bdeb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bdeb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bdebc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bdec0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bdec4:	bf08      	it	eq
   bdec6:	f020 0001 	biceq.w	r0, r0, #1
   bdeca:	4770      	bx	lr
   bdecc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bded0:	d121      	bne.n	bdf16 <__aeabi_d2f+0x7a>
   bded2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bded6:	bfbc      	itt	lt
   bded8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bdedc:	4770      	bxlt	lr
   bdede:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdee2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bdee6:	f1c2 0218 	rsb	r2, r2, #24
   bdeea:	f1c2 0c20 	rsb	ip, r2, #32
   bdeee:	fa10 f30c 	lsls.w	r3, r0, ip
   bdef2:	fa20 f002 	lsr.w	r0, r0, r2
   bdef6:	bf18      	it	ne
   bdef8:	f040 0001 	orrne.w	r0, r0, #1
   bdefc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bdf00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bdf04:	fa03 fc0c 	lsl.w	ip, r3, ip
   bdf08:	ea40 000c 	orr.w	r0, r0, ip
   bdf0c:	fa23 f302 	lsr.w	r3, r3, r2
   bdf10:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bdf14:	e7cc      	b.n	bdeb0 <__aeabi_d2f+0x14>
   bdf16:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bdf1a:	d107      	bne.n	bdf2c <__aeabi_d2f+0x90>
   bdf1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bdf20:	bf1e      	ittt	ne
   bdf22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bdf26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bdf2a:	4770      	bxne	lr
   bdf2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bdf30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bdf34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bdf38:	4770      	bx	lr
   bdf3a:	bf00      	nop

000bdf3c <__aeabi_d2ulz>:
   bdf3c:	b5d0      	push	{r4, r6, r7, lr}
   bdf3e:	4b0c      	ldr	r3, [pc, #48]	; (bdf70 <__aeabi_d2ulz+0x34>)
   bdf40:	2200      	movs	r2, #0
   bdf42:	4606      	mov	r6, r0
   bdf44:	460f      	mov	r7, r1
   bdf46:	f7ff fcef 	bl	bd928 <__aeabi_dmul>
   bdf4a:	f7ff ff87 	bl	bde5c <__aeabi_d2uiz>
   bdf4e:	4604      	mov	r4, r0
   bdf50:	f7ff fc70 	bl	bd834 <__aeabi_ui2d>
   bdf54:	4b07      	ldr	r3, [pc, #28]	; (bdf74 <__aeabi_d2ulz+0x38>)
   bdf56:	2200      	movs	r2, #0
   bdf58:	f7ff fce6 	bl	bd928 <__aeabi_dmul>
   bdf5c:	4602      	mov	r2, r0
   bdf5e:	460b      	mov	r3, r1
   bdf60:	4630      	mov	r0, r6
   bdf62:	4639      	mov	r1, r7
   bdf64:	f7ff fb28 	bl	bd5b8 <__aeabi_dsub>
   bdf68:	f7ff ff78 	bl	bde5c <__aeabi_d2uiz>
   bdf6c:	4621      	mov	r1, r4
   bdf6e:	bdd0      	pop	{r4, r6, r7, pc}
   bdf70:	3df00000 	.word	0x3df00000
   bdf74:	41f00000 	.word	0x41f00000

000bdf78 <atexit>:
   bdf78:	2300      	movs	r3, #0
   bdf7a:	4601      	mov	r1, r0
   bdf7c:	461a      	mov	r2, r3
   bdf7e:	4618      	mov	r0, r3
   bdf80:	f000 bfe8 	b.w	bef54 <__register_exitproc>

000bdf84 <atof>:
   bdf84:	2100      	movs	r1, #0
   bdf86:	f000 bf4d 	b.w	bee24 <strtod>

000bdf8a <atoi>:
   bdf8a:	220a      	movs	r2, #10
   bdf8c:	2100      	movs	r1, #0
   bdf8e:	f000 bfd7 	b.w	bef40 <strtol>

000bdf92 <memcmp>:
   bdf92:	b510      	push	{r4, lr}
   bdf94:	3901      	subs	r1, #1
   bdf96:	4402      	add	r2, r0
   bdf98:	4290      	cmp	r0, r2
   bdf9a:	d101      	bne.n	bdfa0 <memcmp+0xe>
   bdf9c:	2000      	movs	r0, #0
   bdf9e:	e005      	b.n	bdfac <memcmp+0x1a>
   bdfa0:	7803      	ldrb	r3, [r0, #0]
   bdfa2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bdfa6:	42a3      	cmp	r3, r4
   bdfa8:	d001      	beq.n	bdfae <memcmp+0x1c>
   bdfaa:	1b18      	subs	r0, r3, r4
   bdfac:	bd10      	pop	{r4, pc}
   bdfae:	3001      	adds	r0, #1
   bdfb0:	e7f2      	b.n	bdf98 <memcmp+0x6>

000bdfb2 <memcpy>:
   bdfb2:	440a      	add	r2, r1
   bdfb4:	4291      	cmp	r1, r2
   bdfb6:	f100 33ff 	add.w	r3, r0, #4294967295
   bdfba:	d100      	bne.n	bdfbe <memcpy+0xc>
   bdfbc:	4770      	bx	lr
   bdfbe:	b510      	push	{r4, lr}
   bdfc0:	f811 4b01 	ldrb.w	r4, [r1], #1
   bdfc4:	f803 4f01 	strb.w	r4, [r3, #1]!
   bdfc8:	4291      	cmp	r1, r2
   bdfca:	d1f9      	bne.n	bdfc0 <memcpy+0xe>
   bdfcc:	bd10      	pop	{r4, pc}

000bdfce <memmove>:
   bdfce:	4288      	cmp	r0, r1
   bdfd0:	b510      	push	{r4, lr}
   bdfd2:	eb01 0402 	add.w	r4, r1, r2
   bdfd6:	d902      	bls.n	bdfde <memmove+0x10>
   bdfd8:	4284      	cmp	r4, r0
   bdfda:	4623      	mov	r3, r4
   bdfdc:	d807      	bhi.n	bdfee <memmove+0x20>
   bdfde:	1e43      	subs	r3, r0, #1
   bdfe0:	42a1      	cmp	r1, r4
   bdfe2:	d008      	beq.n	bdff6 <memmove+0x28>
   bdfe4:	f811 2b01 	ldrb.w	r2, [r1], #1
   bdfe8:	f803 2f01 	strb.w	r2, [r3, #1]!
   bdfec:	e7f8      	b.n	bdfe0 <memmove+0x12>
   bdfee:	4402      	add	r2, r0
   bdff0:	4601      	mov	r1, r0
   bdff2:	428a      	cmp	r2, r1
   bdff4:	d100      	bne.n	bdff8 <memmove+0x2a>
   bdff6:	bd10      	pop	{r4, pc}
   bdff8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bdffc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be000:	e7f7      	b.n	bdff2 <memmove+0x24>

000be002 <memset>:
   be002:	4402      	add	r2, r0
   be004:	4603      	mov	r3, r0
   be006:	4293      	cmp	r3, r2
   be008:	d100      	bne.n	be00c <memset+0xa>
   be00a:	4770      	bx	lr
   be00c:	f803 1b01 	strb.w	r1, [r3], #1
   be010:	e7f9      	b.n	be006 <memset+0x4>
	...

000be014 <srand>:
   be014:	b538      	push	{r3, r4, r5, lr}
   be016:	4b10      	ldr	r3, [pc, #64]	; (be058 <srand+0x44>)
   be018:	681d      	ldr	r5, [r3, #0]
   be01a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be01c:	4604      	mov	r4, r0
   be01e:	b9b3      	cbnz	r3, be04e <srand+0x3a>
   be020:	2018      	movs	r0, #24
   be022:	f7fb fa8d 	bl	b9540 <malloc>
   be026:	4602      	mov	r2, r0
   be028:	63a8      	str	r0, [r5, #56]	; 0x38
   be02a:	b920      	cbnz	r0, be036 <srand+0x22>
   be02c:	4b0b      	ldr	r3, [pc, #44]	; (be05c <srand+0x48>)
   be02e:	480c      	ldr	r0, [pc, #48]	; (be060 <srand+0x4c>)
   be030:	2142      	movs	r1, #66	; 0x42
   be032:	f7fb fad5 	bl	b95e0 <__assert_func>
   be036:	490b      	ldr	r1, [pc, #44]	; (be064 <srand+0x50>)
   be038:	4b0b      	ldr	r3, [pc, #44]	; (be068 <srand+0x54>)
   be03a:	e9c0 1300 	strd	r1, r3, [r0]
   be03e:	4b0b      	ldr	r3, [pc, #44]	; (be06c <srand+0x58>)
   be040:	6083      	str	r3, [r0, #8]
   be042:	230b      	movs	r3, #11
   be044:	8183      	strh	r3, [r0, #12]
   be046:	2100      	movs	r1, #0
   be048:	2001      	movs	r0, #1
   be04a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   be04e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be050:	2200      	movs	r2, #0
   be052:	611c      	str	r4, [r3, #16]
   be054:	615a      	str	r2, [r3, #20]
   be056:	bd38      	pop	{r3, r4, r5, pc}
   be058:	2003da90 	.word	0x2003da90
   be05c:	000c197d 	.word	0x000c197d
   be060:	000c1994 	.word	0x000c1994
   be064:	abcd330e 	.word	0xabcd330e
   be068:	e66d1234 	.word	0xe66d1234
   be06c:	0005deec 	.word	0x0005deec

000be070 <rand>:
   be070:	4b16      	ldr	r3, [pc, #88]	; (be0cc <rand+0x5c>)
   be072:	b510      	push	{r4, lr}
   be074:	681c      	ldr	r4, [r3, #0]
   be076:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   be078:	b9b3      	cbnz	r3, be0a8 <rand+0x38>
   be07a:	2018      	movs	r0, #24
   be07c:	f7fb fa60 	bl	b9540 <malloc>
   be080:	63a0      	str	r0, [r4, #56]	; 0x38
   be082:	b928      	cbnz	r0, be090 <rand+0x20>
   be084:	4602      	mov	r2, r0
   be086:	4b12      	ldr	r3, [pc, #72]	; (be0d0 <rand+0x60>)
   be088:	4812      	ldr	r0, [pc, #72]	; (be0d4 <rand+0x64>)
   be08a:	214e      	movs	r1, #78	; 0x4e
   be08c:	f7fb faa8 	bl	b95e0 <__assert_func>
   be090:	4a11      	ldr	r2, [pc, #68]	; (be0d8 <rand+0x68>)
   be092:	4b12      	ldr	r3, [pc, #72]	; (be0dc <rand+0x6c>)
   be094:	e9c0 2300 	strd	r2, r3, [r0]
   be098:	4b11      	ldr	r3, [pc, #68]	; (be0e0 <rand+0x70>)
   be09a:	6083      	str	r3, [r0, #8]
   be09c:	230b      	movs	r3, #11
   be09e:	8183      	strh	r3, [r0, #12]
   be0a0:	2201      	movs	r2, #1
   be0a2:	2300      	movs	r3, #0
   be0a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   be0a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   be0aa:	4a0e      	ldr	r2, [pc, #56]	; (be0e4 <rand+0x74>)
   be0ac:	6920      	ldr	r0, [r4, #16]
   be0ae:	6963      	ldr	r3, [r4, #20]
   be0b0:	490d      	ldr	r1, [pc, #52]	; (be0e8 <rand+0x78>)
   be0b2:	4342      	muls	r2, r0
   be0b4:	fb01 2203 	mla	r2, r1, r3, r2
   be0b8:	fba0 0101 	umull	r0, r1, r0, r1
   be0bc:	1c43      	adds	r3, r0, #1
   be0be:	eb42 0001 	adc.w	r0, r2, r1
   be0c2:	e9c4 3004 	strd	r3, r0, [r4, #16]
   be0c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   be0ca:	bd10      	pop	{r4, pc}
   be0cc:	2003da90 	.word	0x2003da90
   be0d0:	000c197d 	.word	0x000c197d
   be0d4:	000c1994 	.word	0x000c1994
   be0d8:	abcd330e 	.word	0xabcd330e
   be0dc:	e66d1234 	.word	0xe66d1234
   be0e0:	0005deec 	.word	0x0005deec
   be0e4:	5851f42d 	.word	0x5851f42d
   be0e8:	4c957f2d 	.word	0x4c957f2d

000be0ec <strcat>:
   be0ec:	b510      	push	{r4, lr}
   be0ee:	4602      	mov	r2, r0
   be0f0:	7814      	ldrb	r4, [r2, #0]
   be0f2:	4613      	mov	r3, r2
   be0f4:	3201      	adds	r2, #1
   be0f6:	2c00      	cmp	r4, #0
   be0f8:	d1fa      	bne.n	be0f0 <strcat+0x4>
   be0fa:	3b01      	subs	r3, #1
   be0fc:	f811 2b01 	ldrb.w	r2, [r1], #1
   be100:	f803 2f01 	strb.w	r2, [r3, #1]!
   be104:	2a00      	cmp	r2, #0
   be106:	d1f9      	bne.n	be0fc <strcat+0x10>
   be108:	bd10      	pop	{r4, pc}

000be10a <strcmp>:
   be10a:	f810 2b01 	ldrb.w	r2, [r0], #1
   be10e:	f811 3b01 	ldrb.w	r3, [r1], #1
   be112:	2a01      	cmp	r2, #1
   be114:	bf28      	it	cs
   be116:	429a      	cmpcs	r2, r3
   be118:	d0f7      	beq.n	be10a <strcmp>
   be11a:	1ad0      	subs	r0, r2, r3
   be11c:	4770      	bx	lr

000be11e <strcpy>:
   be11e:	4603      	mov	r3, r0
   be120:	f811 2b01 	ldrb.w	r2, [r1], #1
   be124:	f803 2b01 	strb.w	r2, [r3], #1
   be128:	2a00      	cmp	r2, #0
   be12a:	d1f9      	bne.n	be120 <strcpy+0x2>
   be12c:	4770      	bx	lr
	...

000be130 <strdup>:
   be130:	4b02      	ldr	r3, [pc, #8]	; (be13c <strdup+0xc>)
   be132:	4601      	mov	r1, r0
   be134:	6818      	ldr	r0, [r3, #0]
   be136:	f000 b803 	b.w	be140 <_strdup_r>
   be13a:	bf00      	nop
   be13c:	2003da90 	.word	0x2003da90

000be140 <_strdup_r>:
   be140:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be142:	4604      	mov	r4, r0
   be144:	4608      	mov	r0, r1
   be146:	460d      	mov	r5, r1
   be148:	f000 f80f 	bl	be16a <strlen>
   be14c:	1c42      	adds	r2, r0, #1
   be14e:	4611      	mov	r1, r2
   be150:	4620      	mov	r0, r4
   be152:	9201      	str	r2, [sp, #4]
   be154:	f7fb fa34 	bl	b95c0 <_malloc_r>
   be158:	4604      	mov	r4, r0
   be15a:	b118      	cbz	r0, be164 <_strdup_r+0x24>
   be15c:	9a01      	ldr	r2, [sp, #4]
   be15e:	4629      	mov	r1, r5
   be160:	f7ff ff27 	bl	bdfb2 <memcpy>
   be164:	4620      	mov	r0, r4
   be166:	b003      	add	sp, #12
   be168:	bd30      	pop	{r4, r5, pc}

000be16a <strlen>:
   be16a:	4603      	mov	r3, r0
   be16c:	f813 2b01 	ldrb.w	r2, [r3], #1
   be170:	2a00      	cmp	r2, #0
   be172:	d1fb      	bne.n	be16c <strlen+0x2>
   be174:	1a18      	subs	r0, r3, r0
   be176:	3801      	subs	r0, #1
   be178:	4770      	bx	lr

000be17a <strncmp>:
   be17a:	b510      	push	{r4, lr}
   be17c:	b17a      	cbz	r2, be19e <strncmp+0x24>
   be17e:	4603      	mov	r3, r0
   be180:	3901      	subs	r1, #1
   be182:	1884      	adds	r4, r0, r2
   be184:	f813 0b01 	ldrb.w	r0, [r3], #1
   be188:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   be18c:	4290      	cmp	r0, r2
   be18e:	d101      	bne.n	be194 <strncmp+0x1a>
   be190:	42a3      	cmp	r3, r4
   be192:	d101      	bne.n	be198 <strncmp+0x1e>
   be194:	1a80      	subs	r0, r0, r2
   be196:	bd10      	pop	{r4, pc}
   be198:	2800      	cmp	r0, #0
   be19a:	d1f3      	bne.n	be184 <strncmp+0xa>
   be19c:	e7fa      	b.n	be194 <strncmp+0x1a>
   be19e:	4610      	mov	r0, r2
   be1a0:	e7f9      	b.n	be196 <strncmp+0x1c>

000be1a2 <strncpy>:
   be1a2:	b510      	push	{r4, lr}
   be1a4:	3901      	subs	r1, #1
   be1a6:	4603      	mov	r3, r0
   be1a8:	b132      	cbz	r2, be1b8 <strncpy+0x16>
   be1aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be1ae:	f803 4b01 	strb.w	r4, [r3], #1
   be1b2:	3a01      	subs	r2, #1
   be1b4:	2c00      	cmp	r4, #0
   be1b6:	d1f7      	bne.n	be1a8 <strncpy+0x6>
   be1b8:	441a      	add	r2, r3
   be1ba:	2100      	movs	r1, #0
   be1bc:	4293      	cmp	r3, r2
   be1be:	d100      	bne.n	be1c2 <strncpy+0x20>
   be1c0:	bd10      	pop	{r4, pc}
   be1c2:	f803 1b01 	strb.w	r1, [r3], #1
   be1c6:	e7f9      	b.n	be1bc <strncpy+0x1a>

000be1c8 <strnlen>:
   be1c8:	b510      	push	{r4, lr}
   be1ca:	4602      	mov	r2, r0
   be1cc:	4401      	add	r1, r0
   be1ce:	428a      	cmp	r2, r1
   be1d0:	4613      	mov	r3, r2
   be1d2:	d003      	beq.n	be1dc <strnlen+0x14>
   be1d4:	781c      	ldrb	r4, [r3, #0]
   be1d6:	3201      	adds	r2, #1
   be1d8:	2c00      	cmp	r4, #0
   be1da:	d1f8      	bne.n	be1ce <strnlen+0x6>
   be1dc:	1a18      	subs	r0, r3, r0
   be1de:	bd10      	pop	{r4, pc}

000be1e0 <sulp>:
   be1e0:	b570      	push	{r4, r5, r6, lr}
   be1e2:	4604      	mov	r4, r0
   be1e4:	460d      	mov	r5, r1
   be1e6:	ec45 4b10 	vmov	d0, r4, r5
   be1ea:	4616      	mov	r6, r2
   be1ec:	f001 fe0c 	bl	bfe08 <__ulp>
   be1f0:	ec51 0b10 	vmov	r0, r1, d0
   be1f4:	b17e      	cbz	r6, be216 <sulp+0x36>
   be1f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   be1fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be1fe:	2b00      	cmp	r3, #0
   be200:	dd09      	ble.n	be216 <sulp+0x36>
   be202:	051b      	lsls	r3, r3, #20
   be204:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   be208:	2400      	movs	r4, #0
   be20a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   be20e:	4622      	mov	r2, r4
   be210:	462b      	mov	r3, r5
   be212:	f7ff fb89 	bl	bd928 <__aeabi_dmul>
   be216:	bd70      	pop	{r4, r5, r6, pc}

000be218 <_strtod_l>:
   be218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be21c:	ed2d 8b02 	vpush	{d8}
   be220:	b09d      	sub	sp, #116	; 0x74
   be222:	461f      	mov	r7, r3
   be224:	2300      	movs	r3, #0
   be226:	9318      	str	r3, [sp, #96]	; 0x60
   be228:	4ba2      	ldr	r3, [pc, #648]	; (be4b4 <_strtod_l+0x29c>)
   be22a:	9213      	str	r2, [sp, #76]	; 0x4c
   be22c:	681b      	ldr	r3, [r3, #0]
   be22e:	9305      	str	r3, [sp, #20]
   be230:	4604      	mov	r4, r0
   be232:	4618      	mov	r0, r3
   be234:	4688      	mov	r8, r1
   be236:	f7ff ff98 	bl	be16a <strlen>
   be23a:	f04f 0a00 	mov.w	sl, #0
   be23e:	4605      	mov	r5, r0
   be240:	f04f 0b00 	mov.w	fp, #0
   be244:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be24a:	781a      	ldrb	r2, [r3, #0]
   be24c:	2a2b      	cmp	r2, #43	; 0x2b
   be24e:	d04e      	beq.n	be2ee <_strtod_l+0xd6>
   be250:	d83b      	bhi.n	be2ca <_strtod_l+0xb2>
   be252:	2a0d      	cmp	r2, #13
   be254:	d834      	bhi.n	be2c0 <_strtod_l+0xa8>
   be256:	2a08      	cmp	r2, #8
   be258:	d834      	bhi.n	be2c4 <_strtod_l+0xac>
   be25a:	2a00      	cmp	r2, #0
   be25c:	d03e      	beq.n	be2dc <_strtod_l+0xc4>
   be25e:	2300      	movs	r3, #0
   be260:	930a      	str	r3, [sp, #40]	; 0x28
   be262:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   be264:	7833      	ldrb	r3, [r6, #0]
   be266:	2b30      	cmp	r3, #48	; 0x30
   be268:	f040 80b0 	bne.w	be3cc <_strtod_l+0x1b4>
   be26c:	7873      	ldrb	r3, [r6, #1]
   be26e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be272:	2b58      	cmp	r3, #88	; 0x58
   be274:	d168      	bne.n	be348 <_strtod_l+0x130>
   be276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be278:	9301      	str	r3, [sp, #4]
   be27a:	ab18      	add	r3, sp, #96	; 0x60
   be27c:	9702      	str	r7, [sp, #8]
   be27e:	9300      	str	r3, [sp, #0]
   be280:	4a8d      	ldr	r2, [pc, #564]	; (be4b8 <_strtod_l+0x2a0>)
   be282:	ab19      	add	r3, sp, #100	; 0x64
   be284:	a917      	add	r1, sp, #92	; 0x5c
   be286:	4620      	mov	r0, r4
   be288:	f000 ff2e 	bl	bf0e8 <__gethex>
   be28c:	f010 0707 	ands.w	r7, r0, #7
   be290:	4605      	mov	r5, r0
   be292:	d005      	beq.n	be2a0 <_strtod_l+0x88>
   be294:	2f06      	cmp	r7, #6
   be296:	d12c      	bne.n	be2f2 <_strtod_l+0xda>
   be298:	3601      	adds	r6, #1
   be29a:	2300      	movs	r3, #0
   be29c:	9617      	str	r6, [sp, #92]	; 0x5c
   be29e:	930a      	str	r3, [sp, #40]	; 0x28
   be2a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be2a2:	2b00      	cmp	r3, #0
   be2a4:	f040 8590 	bne.w	bedc8 <_strtod_l+0xbb0>
   be2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be2aa:	b1eb      	cbz	r3, be2e8 <_strtod_l+0xd0>
   be2ac:	4652      	mov	r2, sl
   be2ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   be2b2:	ec43 2b10 	vmov	d0, r2, r3
   be2b6:	b01d      	add	sp, #116	; 0x74
   be2b8:	ecbd 8b02 	vpop	{d8}
   be2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be2c0:	2a20      	cmp	r2, #32
   be2c2:	d1cc      	bne.n	be25e <_strtod_l+0x46>
   be2c4:	3301      	adds	r3, #1
   be2c6:	9317      	str	r3, [sp, #92]	; 0x5c
   be2c8:	e7be      	b.n	be248 <_strtod_l+0x30>
   be2ca:	2a2d      	cmp	r2, #45	; 0x2d
   be2cc:	d1c7      	bne.n	be25e <_strtod_l+0x46>
   be2ce:	2201      	movs	r2, #1
   be2d0:	920a      	str	r2, [sp, #40]	; 0x28
   be2d2:	1c5a      	adds	r2, r3, #1
   be2d4:	9217      	str	r2, [sp, #92]	; 0x5c
   be2d6:	785b      	ldrb	r3, [r3, #1]
   be2d8:	2b00      	cmp	r3, #0
   be2da:	d1c2      	bne.n	be262 <_strtod_l+0x4a>
   be2dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be2de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be2e2:	2b00      	cmp	r3, #0
   be2e4:	f040 856e 	bne.w	bedc4 <_strtod_l+0xbac>
   be2e8:	4652      	mov	r2, sl
   be2ea:	465b      	mov	r3, fp
   be2ec:	e7e1      	b.n	be2b2 <_strtod_l+0x9a>
   be2ee:	2200      	movs	r2, #0
   be2f0:	e7ee      	b.n	be2d0 <_strtod_l+0xb8>
   be2f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be2f4:	b13a      	cbz	r2, be306 <_strtod_l+0xee>
   be2f6:	2135      	movs	r1, #53	; 0x35
   be2f8:	a81a      	add	r0, sp, #104	; 0x68
   be2fa:	f001 fe90 	bl	c001e <__copybits>
   be2fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   be300:	4620      	mov	r0, r4
   be302:	f001 fa4f 	bl	bf7a4 <_Bfree>
   be306:	3f01      	subs	r7, #1
   be308:	2f04      	cmp	r7, #4
   be30a:	d806      	bhi.n	be31a <_strtod_l+0x102>
   be30c:	e8df f007 	tbb	[pc, r7]
   be310:	1714030a 	.word	0x1714030a
   be314:	0a          	.byte	0x0a
   be315:	00          	.byte	0x00
   be316:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   be31a:	0728      	lsls	r0, r5, #28
   be31c:	d5c0      	bpl.n	be2a0 <_strtod_l+0x88>
   be31e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   be322:	e7bd      	b.n	be2a0 <_strtod_l+0x88>
   be324:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   be328:	9a19      	ldr	r2, [sp, #100]	; 0x64
   be32a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   be32e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   be332:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   be336:	e7f0      	b.n	be31a <_strtod_l+0x102>
   be338:	f8df b180 	ldr.w	fp, [pc, #384]	; be4bc <_strtod_l+0x2a4>
   be33c:	e7ed      	b.n	be31a <_strtod_l+0x102>
   be33e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   be342:	f04f 3aff 	mov.w	sl, #4294967295
   be346:	e7e8      	b.n	be31a <_strtod_l+0x102>
   be348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be34a:	1c5a      	adds	r2, r3, #1
   be34c:	9217      	str	r2, [sp, #92]	; 0x5c
   be34e:	785b      	ldrb	r3, [r3, #1]
   be350:	2b30      	cmp	r3, #48	; 0x30
   be352:	d0f9      	beq.n	be348 <_strtod_l+0x130>
   be354:	2b00      	cmp	r3, #0
   be356:	d0a3      	beq.n	be2a0 <_strtod_l+0x88>
   be358:	2301      	movs	r3, #1
   be35a:	f04f 0900 	mov.w	r9, #0
   be35e:	9304      	str	r3, [sp, #16]
   be360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be362:	9308      	str	r3, [sp, #32]
   be364:	f8cd 901c 	str.w	r9, [sp, #28]
   be368:	464f      	mov	r7, r9
   be36a:	220a      	movs	r2, #10
   be36c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   be36e:	7806      	ldrb	r6, [r0, #0]
   be370:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   be374:	b2d9      	uxtb	r1, r3
   be376:	2909      	cmp	r1, #9
   be378:	d92a      	bls.n	be3d0 <_strtod_l+0x1b8>
   be37a:	9905      	ldr	r1, [sp, #20]
   be37c:	462a      	mov	r2, r5
   be37e:	f7ff fefc 	bl	be17a <strncmp>
   be382:	b398      	cbz	r0, be3ec <_strtod_l+0x1d4>
   be384:	2000      	movs	r0, #0
   be386:	4632      	mov	r2, r6
   be388:	463d      	mov	r5, r7
   be38a:	9005      	str	r0, [sp, #20]
   be38c:	4603      	mov	r3, r0
   be38e:	2a65      	cmp	r2, #101	; 0x65
   be390:	d001      	beq.n	be396 <_strtod_l+0x17e>
   be392:	2a45      	cmp	r2, #69	; 0x45
   be394:	d118      	bne.n	be3c8 <_strtod_l+0x1b0>
   be396:	b91d      	cbnz	r5, be3a0 <_strtod_l+0x188>
   be398:	9a04      	ldr	r2, [sp, #16]
   be39a:	4302      	orrs	r2, r0
   be39c:	d09e      	beq.n	be2dc <_strtod_l+0xc4>
   be39e:	2500      	movs	r5, #0
   be3a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   be3a4:	f108 0201 	add.w	r2, r8, #1
   be3a8:	9217      	str	r2, [sp, #92]	; 0x5c
   be3aa:	f898 2001 	ldrb.w	r2, [r8, #1]
   be3ae:	2a2b      	cmp	r2, #43	; 0x2b
   be3b0:	d075      	beq.n	be49e <_strtod_l+0x286>
   be3b2:	2a2d      	cmp	r2, #45	; 0x2d
   be3b4:	d07b      	beq.n	be4ae <_strtod_l+0x296>
   be3b6:	f04f 0c00 	mov.w	ip, #0
   be3ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   be3be:	2909      	cmp	r1, #9
   be3c0:	f240 8082 	bls.w	be4c8 <_strtod_l+0x2b0>
   be3c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be3c8:	2600      	movs	r6, #0
   be3ca:	e09d      	b.n	be508 <_strtod_l+0x2f0>
   be3cc:	2300      	movs	r3, #0
   be3ce:	e7c4      	b.n	be35a <_strtod_l+0x142>
   be3d0:	2f08      	cmp	r7, #8
   be3d2:	bfd8      	it	le
   be3d4:	9907      	ldrle	r1, [sp, #28]
   be3d6:	f100 0001 	add.w	r0, r0, #1
   be3da:	bfda      	itte	le
   be3dc:	fb02 3301 	mlale	r3, r2, r1, r3
   be3e0:	9307      	strle	r3, [sp, #28]
   be3e2:	fb02 3909 	mlagt	r9, r2, r9, r3
   be3e6:	3701      	adds	r7, #1
   be3e8:	9017      	str	r0, [sp, #92]	; 0x5c
   be3ea:	e7bf      	b.n	be36c <_strtod_l+0x154>
   be3ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be3ee:	195a      	adds	r2, r3, r5
   be3f0:	9217      	str	r2, [sp, #92]	; 0x5c
   be3f2:	5d5a      	ldrb	r2, [r3, r5]
   be3f4:	2f00      	cmp	r7, #0
   be3f6:	d037      	beq.n	be468 <_strtod_l+0x250>
   be3f8:	9005      	str	r0, [sp, #20]
   be3fa:	463d      	mov	r5, r7
   be3fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   be400:	2b09      	cmp	r3, #9
   be402:	d912      	bls.n	be42a <_strtod_l+0x212>
   be404:	2301      	movs	r3, #1
   be406:	e7c2      	b.n	be38e <_strtod_l+0x176>
   be408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be40a:	1c5a      	adds	r2, r3, #1
   be40c:	9217      	str	r2, [sp, #92]	; 0x5c
   be40e:	785a      	ldrb	r2, [r3, #1]
   be410:	3001      	adds	r0, #1
   be412:	2a30      	cmp	r2, #48	; 0x30
   be414:	d0f8      	beq.n	be408 <_strtod_l+0x1f0>
   be416:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   be41a:	2b08      	cmp	r3, #8
   be41c:	f200 84d9 	bhi.w	bedd2 <_strtod_l+0xbba>
   be420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be422:	9005      	str	r0, [sp, #20]
   be424:	2000      	movs	r0, #0
   be426:	9308      	str	r3, [sp, #32]
   be428:	4605      	mov	r5, r0
   be42a:	3a30      	subs	r2, #48	; 0x30
   be42c:	f100 0301 	add.w	r3, r0, #1
   be430:	d014      	beq.n	be45c <_strtod_l+0x244>
   be432:	9905      	ldr	r1, [sp, #20]
   be434:	4419      	add	r1, r3
   be436:	9105      	str	r1, [sp, #20]
   be438:	462b      	mov	r3, r5
   be43a:	eb00 0e05 	add.w	lr, r0, r5
   be43e:	210a      	movs	r1, #10
   be440:	4573      	cmp	r3, lr
   be442:	d113      	bne.n	be46c <_strtod_l+0x254>
   be444:	182b      	adds	r3, r5, r0
   be446:	2b08      	cmp	r3, #8
   be448:	f105 0501 	add.w	r5, r5, #1
   be44c:	4405      	add	r5, r0
   be44e:	dc1c      	bgt.n	be48a <_strtod_l+0x272>
   be450:	9907      	ldr	r1, [sp, #28]
   be452:	230a      	movs	r3, #10
   be454:	fb03 2301 	mla	r3, r3, r1, r2
   be458:	9307      	str	r3, [sp, #28]
   be45a:	2300      	movs	r3, #0
   be45c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be45e:	1c51      	adds	r1, r2, #1
   be460:	9117      	str	r1, [sp, #92]	; 0x5c
   be462:	7852      	ldrb	r2, [r2, #1]
   be464:	4618      	mov	r0, r3
   be466:	e7c9      	b.n	be3fc <_strtod_l+0x1e4>
   be468:	4638      	mov	r0, r7
   be46a:	e7d2      	b.n	be412 <_strtod_l+0x1fa>
   be46c:	2b08      	cmp	r3, #8
   be46e:	dc04      	bgt.n	be47a <_strtod_l+0x262>
   be470:	9e07      	ldr	r6, [sp, #28]
   be472:	434e      	muls	r6, r1
   be474:	9607      	str	r6, [sp, #28]
   be476:	3301      	adds	r3, #1
   be478:	e7e2      	b.n	be440 <_strtod_l+0x228>
   be47a:	f103 0c01 	add.w	ip, r3, #1
   be47e:	f1bc 0f10 	cmp.w	ip, #16
   be482:	bfd8      	it	le
   be484:	fb01 f909 	mulle.w	r9, r1, r9
   be488:	e7f5      	b.n	be476 <_strtod_l+0x25e>
   be48a:	2d10      	cmp	r5, #16
   be48c:	bfdc      	itt	le
   be48e:	230a      	movle	r3, #10
   be490:	fb03 2909 	mlale	r9, r3, r9, r2
   be494:	e7e1      	b.n	be45a <_strtod_l+0x242>
   be496:	2300      	movs	r3, #0
   be498:	9305      	str	r3, [sp, #20]
   be49a:	2301      	movs	r3, #1
   be49c:	e77c      	b.n	be398 <_strtod_l+0x180>
   be49e:	f04f 0c00 	mov.w	ip, #0
   be4a2:	f108 0202 	add.w	r2, r8, #2
   be4a6:	9217      	str	r2, [sp, #92]	; 0x5c
   be4a8:	f898 2002 	ldrb.w	r2, [r8, #2]
   be4ac:	e785      	b.n	be3ba <_strtod_l+0x1a2>
   be4ae:	f04f 0c01 	mov.w	ip, #1
   be4b2:	e7f6      	b.n	be4a2 <_strtod_l+0x28a>
   be4b4:	000c1c08 	.word	0x000c1c08
   be4b8:	000c1a20 	.word	0x000c1a20
   be4bc:	7ff00000 	.word	0x7ff00000
   be4c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be4c2:	1c51      	adds	r1, r2, #1
   be4c4:	9117      	str	r1, [sp, #92]	; 0x5c
   be4c6:	7852      	ldrb	r2, [r2, #1]
   be4c8:	2a30      	cmp	r2, #48	; 0x30
   be4ca:	d0f9      	beq.n	be4c0 <_strtod_l+0x2a8>
   be4cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   be4d0:	2908      	cmp	r1, #8
   be4d2:	f63f af79 	bhi.w	be3c8 <_strtod_l+0x1b0>
   be4d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   be4da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be4dc:	9206      	str	r2, [sp, #24]
   be4de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be4e0:	1c51      	adds	r1, r2, #1
   be4e2:	9117      	str	r1, [sp, #92]	; 0x5c
   be4e4:	7852      	ldrb	r2, [r2, #1]
   be4e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   be4ea:	2e09      	cmp	r6, #9
   be4ec:	d937      	bls.n	be55e <_strtod_l+0x346>
   be4ee:	9e06      	ldr	r6, [sp, #24]
   be4f0:	1b89      	subs	r1, r1, r6
   be4f2:	2908      	cmp	r1, #8
   be4f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   be4f8:	dc02      	bgt.n	be500 <_strtod_l+0x2e8>
   be4fa:	4576      	cmp	r6, lr
   be4fc:	bfa8      	it	ge
   be4fe:	4676      	movge	r6, lr
   be500:	f1bc 0f00 	cmp.w	ip, #0
   be504:	d000      	beq.n	be508 <_strtod_l+0x2f0>
   be506:	4276      	negs	r6, r6
   be508:	2d00      	cmp	r5, #0
   be50a:	d14d      	bne.n	be5a8 <_strtod_l+0x390>
   be50c:	9904      	ldr	r1, [sp, #16]
   be50e:	4301      	orrs	r1, r0
   be510:	f47f aec6 	bne.w	be2a0 <_strtod_l+0x88>
   be514:	2b00      	cmp	r3, #0
   be516:	f47f aee1 	bne.w	be2dc <_strtod_l+0xc4>
   be51a:	2a69      	cmp	r2, #105	; 0x69
   be51c:	d027      	beq.n	be56e <_strtod_l+0x356>
   be51e:	dc24      	bgt.n	be56a <_strtod_l+0x352>
   be520:	2a49      	cmp	r2, #73	; 0x49
   be522:	d024      	beq.n	be56e <_strtod_l+0x356>
   be524:	2a4e      	cmp	r2, #78	; 0x4e
   be526:	f47f aed9 	bne.w	be2dc <_strtod_l+0xc4>
   be52a:	499f      	ldr	r1, [pc, #636]	; (be7a8 <_strtod_l+0x590>)
   be52c:	a817      	add	r0, sp, #92	; 0x5c
   be52e:	f001 f833 	bl	bf598 <__match>
   be532:	2800      	cmp	r0, #0
   be534:	f43f aed2 	beq.w	be2dc <_strtod_l+0xc4>
   be538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be53a:	781b      	ldrb	r3, [r3, #0]
   be53c:	2b28      	cmp	r3, #40	; 0x28
   be53e:	d12d      	bne.n	be59c <_strtod_l+0x384>
   be540:	499a      	ldr	r1, [pc, #616]	; (be7ac <_strtod_l+0x594>)
   be542:	aa1a      	add	r2, sp, #104	; 0x68
   be544:	a817      	add	r0, sp, #92	; 0x5c
   be546:	f001 f83b 	bl	bf5c0 <__hexnan>
   be54a:	2805      	cmp	r0, #5
   be54c:	d126      	bne.n	be59c <_strtod_l+0x384>
   be54e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be550:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   be554:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   be558:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   be55c:	e6a0      	b.n	be2a0 <_strtod_l+0x88>
   be55e:	210a      	movs	r1, #10
   be560:	fb01 2e0e 	mla	lr, r1, lr, r2
   be564:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   be568:	e7b9      	b.n	be4de <_strtod_l+0x2c6>
   be56a:	2a6e      	cmp	r2, #110	; 0x6e
   be56c:	e7db      	b.n	be526 <_strtod_l+0x30e>
   be56e:	4990      	ldr	r1, [pc, #576]	; (be7b0 <_strtod_l+0x598>)
   be570:	a817      	add	r0, sp, #92	; 0x5c
   be572:	f001 f811 	bl	bf598 <__match>
   be576:	2800      	cmp	r0, #0
   be578:	f43f aeb0 	beq.w	be2dc <_strtod_l+0xc4>
   be57c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be57e:	498d      	ldr	r1, [pc, #564]	; (be7b4 <_strtod_l+0x59c>)
   be580:	3b01      	subs	r3, #1
   be582:	a817      	add	r0, sp, #92	; 0x5c
   be584:	9317      	str	r3, [sp, #92]	; 0x5c
   be586:	f001 f807 	bl	bf598 <__match>
   be58a:	b910      	cbnz	r0, be592 <_strtod_l+0x37a>
   be58c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be58e:	3301      	adds	r3, #1
   be590:	9317      	str	r3, [sp, #92]	; 0x5c
   be592:	f8df b230 	ldr.w	fp, [pc, #560]	; be7c4 <_strtod_l+0x5ac>
   be596:	f04f 0a00 	mov.w	sl, #0
   be59a:	e681      	b.n	be2a0 <_strtod_l+0x88>
   be59c:	4886      	ldr	r0, [pc, #536]	; (be7b8 <_strtod_l+0x5a0>)
   be59e:	f001 fd93 	bl	c00c8 <nan>
   be5a2:	ec5b ab10 	vmov	sl, fp, d0
   be5a6:	e67b      	b.n	be2a0 <_strtod_l+0x88>
   be5a8:	9b05      	ldr	r3, [sp, #20]
   be5aa:	9807      	ldr	r0, [sp, #28]
   be5ac:	1af3      	subs	r3, r6, r3
   be5ae:	2f00      	cmp	r7, #0
   be5b0:	bf08      	it	eq
   be5b2:	462f      	moveq	r7, r5
   be5b4:	2d10      	cmp	r5, #16
   be5b6:	9306      	str	r3, [sp, #24]
   be5b8:	46a8      	mov	r8, r5
   be5ba:	bfa8      	it	ge
   be5bc:	f04f 0810 	movge.w	r8, #16
   be5c0:	f7ff f938 	bl	bd834 <__aeabi_ui2d>
   be5c4:	2d09      	cmp	r5, #9
   be5c6:	4682      	mov	sl, r0
   be5c8:	468b      	mov	fp, r1
   be5ca:	dd13      	ble.n	be5f4 <_strtod_l+0x3dc>
   be5cc:	4b7b      	ldr	r3, [pc, #492]	; (be7bc <_strtod_l+0x5a4>)
   be5ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   be5d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   be5d6:	f7ff f9a7 	bl	bd928 <__aeabi_dmul>
   be5da:	4682      	mov	sl, r0
   be5dc:	4648      	mov	r0, r9
   be5de:	468b      	mov	fp, r1
   be5e0:	f7ff f928 	bl	bd834 <__aeabi_ui2d>
   be5e4:	4602      	mov	r2, r0
   be5e6:	460b      	mov	r3, r1
   be5e8:	4650      	mov	r0, sl
   be5ea:	4659      	mov	r1, fp
   be5ec:	f7fe ffe6 	bl	bd5bc <__adddf3>
   be5f0:	4682      	mov	sl, r0
   be5f2:	468b      	mov	fp, r1
   be5f4:	2d0f      	cmp	r5, #15
   be5f6:	dc38      	bgt.n	be66a <_strtod_l+0x452>
   be5f8:	9b06      	ldr	r3, [sp, #24]
   be5fa:	2b00      	cmp	r3, #0
   be5fc:	f43f ae50 	beq.w	be2a0 <_strtod_l+0x88>
   be600:	dd24      	ble.n	be64c <_strtod_l+0x434>
   be602:	2b16      	cmp	r3, #22
   be604:	dc0b      	bgt.n	be61e <_strtod_l+0x406>
   be606:	496d      	ldr	r1, [pc, #436]	; (be7bc <_strtod_l+0x5a4>)
   be608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be60c:	e9d1 0100 	ldrd	r0, r1, [r1]
   be610:	4652      	mov	r2, sl
   be612:	465b      	mov	r3, fp
   be614:	f7ff f988 	bl	bd928 <__aeabi_dmul>
   be618:	4682      	mov	sl, r0
   be61a:	468b      	mov	fp, r1
   be61c:	e640      	b.n	be2a0 <_strtod_l+0x88>
   be61e:	9a06      	ldr	r2, [sp, #24]
   be620:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   be624:	4293      	cmp	r3, r2
   be626:	db20      	blt.n	be66a <_strtod_l+0x452>
   be628:	4c64      	ldr	r4, [pc, #400]	; (be7bc <_strtod_l+0x5a4>)
   be62a:	f1c5 050f 	rsb	r5, r5, #15
   be62e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   be632:	4652      	mov	r2, sl
   be634:	465b      	mov	r3, fp
   be636:	e9d1 0100 	ldrd	r0, r1, [r1]
   be63a:	f7ff f975 	bl	bd928 <__aeabi_dmul>
   be63e:	9b06      	ldr	r3, [sp, #24]
   be640:	1b5d      	subs	r5, r3, r5
   be642:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   be646:	e9d4 2300 	ldrd	r2, r3, [r4]
   be64a:	e7e3      	b.n	be614 <_strtod_l+0x3fc>
   be64c:	9b06      	ldr	r3, [sp, #24]
   be64e:	3316      	adds	r3, #22
   be650:	db0b      	blt.n	be66a <_strtod_l+0x452>
   be652:	9b05      	ldr	r3, [sp, #20]
   be654:	1b9e      	subs	r6, r3, r6
   be656:	4b59      	ldr	r3, [pc, #356]	; (be7bc <_strtod_l+0x5a4>)
   be658:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   be65c:	e9d6 2300 	ldrd	r2, r3, [r6]
   be660:	4650      	mov	r0, sl
   be662:	4659      	mov	r1, fp
   be664:	f7ff fa8a 	bl	bdb7c <__aeabi_ddiv>
   be668:	e7d6      	b.n	be618 <_strtod_l+0x400>
   be66a:	9b06      	ldr	r3, [sp, #24]
   be66c:	eba5 0808 	sub.w	r8, r5, r8
   be670:	4498      	add	r8, r3
   be672:	f1b8 0f00 	cmp.w	r8, #0
   be676:	dd74      	ble.n	be762 <_strtod_l+0x54a>
   be678:	f018 030f 	ands.w	r3, r8, #15
   be67c:	d00a      	beq.n	be694 <_strtod_l+0x47c>
   be67e:	494f      	ldr	r1, [pc, #316]	; (be7bc <_strtod_l+0x5a4>)
   be680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be684:	4652      	mov	r2, sl
   be686:	465b      	mov	r3, fp
   be688:	e9d1 0100 	ldrd	r0, r1, [r1]
   be68c:	f7ff f94c 	bl	bd928 <__aeabi_dmul>
   be690:	4682      	mov	sl, r0
   be692:	468b      	mov	fp, r1
   be694:	f038 080f 	bics.w	r8, r8, #15
   be698:	d04f      	beq.n	be73a <_strtod_l+0x522>
   be69a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   be69e:	dd22      	ble.n	be6e6 <_strtod_l+0x4ce>
   be6a0:	2500      	movs	r5, #0
   be6a2:	462e      	mov	r6, r5
   be6a4:	9507      	str	r5, [sp, #28]
   be6a6:	9505      	str	r5, [sp, #20]
   be6a8:	2322      	movs	r3, #34	; 0x22
   be6aa:	f8df b118 	ldr.w	fp, [pc, #280]	; be7c4 <_strtod_l+0x5ac>
   be6ae:	6023      	str	r3, [r4, #0]
   be6b0:	f04f 0a00 	mov.w	sl, #0
   be6b4:	9b07      	ldr	r3, [sp, #28]
   be6b6:	2b00      	cmp	r3, #0
   be6b8:	f43f adf2 	beq.w	be2a0 <_strtod_l+0x88>
   be6bc:	9918      	ldr	r1, [sp, #96]	; 0x60
   be6be:	4620      	mov	r0, r4
   be6c0:	f001 f870 	bl	bf7a4 <_Bfree>
   be6c4:	9905      	ldr	r1, [sp, #20]
   be6c6:	4620      	mov	r0, r4
   be6c8:	f001 f86c 	bl	bf7a4 <_Bfree>
   be6cc:	4631      	mov	r1, r6
   be6ce:	4620      	mov	r0, r4
   be6d0:	f001 f868 	bl	bf7a4 <_Bfree>
   be6d4:	9907      	ldr	r1, [sp, #28]
   be6d6:	4620      	mov	r0, r4
   be6d8:	f001 f864 	bl	bf7a4 <_Bfree>
   be6dc:	4629      	mov	r1, r5
   be6de:	4620      	mov	r0, r4
   be6e0:	f001 f860 	bl	bf7a4 <_Bfree>
   be6e4:	e5dc      	b.n	be2a0 <_strtod_l+0x88>
   be6e6:	4b36      	ldr	r3, [pc, #216]	; (be7c0 <_strtod_l+0x5a8>)
   be6e8:	9304      	str	r3, [sp, #16]
   be6ea:	2300      	movs	r3, #0
   be6ec:	ea4f 1828 	mov.w	r8, r8, asr #4
   be6f0:	4650      	mov	r0, sl
   be6f2:	4659      	mov	r1, fp
   be6f4:	4699      	mov	r9, r3
   be6f6:	f1b8 0f01 	cmp.w	r8, #1
   be6fa:	dc21      	bgt.n	be740 <_strtod_l+0x528>
   be6fc:	b10b      	cbz	r3, be702 <_strtod_l+0x4ea>
   be6fe:	4682      	mov	sl, r0
   be700:	468b      	mov	fp, r1
   be702:	4b2f      	ldr	r3, [pc, #188]	; (be7c0 <_strtod_l+0x5a8>)
   be704:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   be708:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   be70c:	4652      	mov	r2, sl
   be70e:	465b      	mov	r3, fp
   be710:	e9d9 0100 	ldrd	r0, r1, [r9]
   be714:	f7ff f908 	bl	bd928 <__aeabi_dmul>
   be718:	4b2a      	ldr	r3, [pc, #168]	; (be7c4 <_strtod_l+0x5ac>)
   be71a:	460a      	mov	r2, r1
   be71c:	400b      	ands	r3, r1
   be71e:	492a      	ldr	r1, [pc, #168]	; (be7c8 <_strtod_l+0x5b0>)
   be720:	428b      	cmp	r3, r1
   be722:	4682      	mov	sl, r0
   be724:	d8bc      	bhi.n	be6a0 <_strtod_l+0x488>
   be726:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   be72a:	428b      	cmp	r3, r1
   be72c:	bf86      	itte	hi
   be72e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; be7cc <_strtod_l+0x5b4>
   be732:	f04f 3aff 	movhi.w	sl, #4294967295
   be736:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   be73a:	2300      	movs	r3, #0
   be73c:	9304      	str	r3, [sp, #16]
   be73e:	e084      	b.n	be84a <_strtod_l+0x632>
   be740:	f018 0f01 	tst.w	r8, #1
   be744:	d005      	beq.n	be752 <_strtod_l+0x53a>
   be746:	9b04      	ldr	r3, [sp, #16]
   be748:	e9d3 2300 	ldrd	r2, r3, [r3]
   be74c:	f7ff f8ec 	bl	bd928 <__aeabi_dmul>
   be750:	2301      	movs	r3, #1
   be752:	9a04      	ldr	r2, [sp, #16]
   be754:	3208      	adds	r2, #8
   be756:	f109 0901 	add.w	r9, r9, #1
   be75a:	ea4f 0868 	mov.w	r8, r8, asr #1
   be75e:	9204      	str	r2, [sp, #16]
   be760:	e7c9      	b.n	be6f6 <_strtod_l+0x4de>
   be762:	d0ea      	beq.n	be73a <_strtod_l+0x522>
   be764:	f1c8 0800 	rsb	r8, r8, #0
   be768:	f018 020f 	ands.w	r2, r8, #15
   be76c:	d00a      	beq.n	be784 <_strtod_l+0x56c>
   be76e:	4b13      	ldr	r3, [pc, #76]	; (be7bc <_strtod_l+0x5a4>)
   be770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   be774:	4650      	mov	r0, sl
   be776:	4659      	mov	r1, fp
   be778:	e9d3 2300 	ldrd	r2, r3, [r3]
   be77c:	f7ff f9fe 	bl	bdb7c <__aeabi_ddiv>
   be780:	4682      	mov	sl, r0
   be782:	468b      	mov	fp, r1
   be784:	ea5f 1828 	movs.w	r8, r8, asr #4
   be788:	d0d7      	beq.n	be73a <_strtod_l+0x522>
   be78a:	f1b8 0f1f 	cmp.w	r8, #31
   be78e:	dd1f      	ble.n	be7d0 <_strtod_l+0x5b8>
   be790:	2500      	movs	r5, #0
   be792:	462e      	mov	r6, r5
   be794:	9507      	str	r5, [sp, #28]
   be796:	9505      	str	r5, [sp, #20]
   be798:	2322      	movs	r3, #34	; 0x22
   be79a:	f04f 0a00 	mov.w	sl, #0
   be79e:	f04f 0b00 	mov.w	fp, #0
   be7a2:	6023      	str	r3, [r4, #0]
   be7a4:	e786      	b.n	be6b4 <_strtod_l+0x49c>
   be7a6:	bf00      	nop
   be7a8:	000c1a1a 	.word	0x000c1a1a
   be7ac:	000c1a34 	.word	0x000c1a34
   be7b0:	000c1a11 	.word	0x000c1a11
   be7b4:	000c1a14 	.word	0x000c1a14
   be7b8:	000c0674 	.word	0x000c0674
   be7bc:	000c1cc8 	.word	0x000c1cc8
   be7c0:	000c1ca0 	.word	0x000c1ca0
   be7c4:	7ff00000 	.word	0x7ff00000
   be7c8:	7ca00000 	.word	0x7ca00000
   be7cc:	7fefffff 	.word	0x7fefffff
   be7d0:	f018 0310 	ands.w	r3, r8, #16
   be7d4:	bf18      	it	ne
   be7d6:	236a      	movne	r3, #106	; 0x6a
   be7d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; beb88 <_strtod_l+0x970>
   be7dc:	9304      	str	r3, [sp, #16]
   be7de:	4650      	mov	r0, sl
   be7e0:	4659      	mov	r1, fp
   be7e2:	2300      	movs	r3, #0
   be7e4:	f018 0f01 	tst.w	r8, #1
   be7e8:	d004      	beq.n	be7f4 <_strtod_l+0x5dc>
   be7ea:	e9d9 2300 	ldrd	r2, r3, [r9]
   be7ee:	f7ff f89b 	bl	bd928 <__aeabi_dmul>
   be7f2:	2301      	movs	r3, #1
   be7f4:	ea5f 0868 	movs.w	r8, r8, asr #1
   be7f8:	f109 0908 	add.w	r9, r9, #8
   be7fc:	d1f2      	bne.n	be7e4 <_strtod_l+0x5cc>
   be7fe:	b10b      	cbz	r3, be804 <_strtod_l+0x5ec>
   be800:	4682      	mov	sl, r0
   be802:	468b      	mov	fp, r1
   be804:	9b04      	ldr	r3, [sp, #16]
   be806:	b1c3      	cbz	r3, be83a <_strtod_l+0x622>
   be808:	f3cb 520a 	ubfx	r2, fp, #20, #11
   be80c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   be810:	2b00      	cmp	r3, #0
   be812:	4659      	mov	r1, fp
   be814:	dd11      	ble.n	be83a <_strtod_l+0x622>
   be816:	2b1f      	cmp	r3, #31
   be818:	f340 8124 	ble.w	bea64 <_strtod_l+0x84c>
   be81c:	2b34      	cmp	r3, #52	; 0x34
   be81e:	bfde      	ittt	le
   be820:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   be824:	f04f 33ff 	movle.w	r3, #4294967295
   be828:	fa03 f202 	lslle.w	r2, r3, r2
   be82c:	f04f 0a00 	mov.w	sl, #0
   be830:	bfcc      	ite	gt
   be832:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   be836:	ea02 0b01 	andle.w	fp, r2, r1
   be83a:	2200      	movs	r2, #0
   be83c:	2300      	movs	r3, #0
   be83e:	4650      	mov	r0, sl
   be840:	4659      	mov	r1, fp
   be842:	f7ff fad9 	bl	bddf8 <__aeabi_dcmpeq>
   be846:	2800      	cmp	r0, #0
   be848:	d1a2      	bne.n	be790 <_strtod_l+0x578>
   be84a:	9b07      	ldr	r3, [sp, #28]
   be84c:	9300      	str	r3, [sp, #0]
   be84e:	9908      	ldr	r1, [sp, #32]
   be850:	462b      	mov	r3, r5
   be852:	463a      	mov	r2, r7
   be854:	4620      	mov	r0, r4
   be856:	f001 f80d 	bl	bf874 <__s2b>
   be85a:	9007      	str	r0, [sp, #28]
   be85c:	2800      	cmp	r0, #0
   be85e:	f43f af1f 	beq.w	be6a0 <_strtod_l+0x488>
   be862:	9b05      	ldr	r3, [sp, #20]
   be864:	1b9e      	subs	r6, r3, r6
   be866:	9b06      	ldr	r3, [sp, #24]
   be868:	2b00      	cmp	r3, #0
   be86a:	bfb4      	ite	lt
   be86c:	4633      	movlt	r3, r6
   be86e:	2300      	movge	r3, #0
   be870:	930c      	str	r3, [sp, #48]	; 0x30
   be872:	9b06      	ldr	r3, [sp, #24]
   be874:	2500      	movs	r5, #0
   be876:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   be87a:	9312      	str	r3, [sp, #72]	; 0x48
   be87c:	462e      	mov	r6, r5
   be87e:	9b07      	ldr	r3, [sp, #28]
   be880:	4620      	mov	r0, r4
   be882:	6859      	ldr	r1, [r3, #4]
   be884:	f000 ff4e 	bl	bf724 <_Balloc>
   be888:	9005      	str	r0, [sp, #20]
   be88a:	2800      	cmp	r0, #0
   be88c:	f43f af0c 	beq.w	be6a8 <_strtod_l+0x490>
   be890:	9b07      	ldr	r3, [sp, #28]
   be892:	691a      	ldr	r2, [r3, #16]
   be894:	3202      	adds	r2, #2
   be896:	f103 010c 	add.w	r1, r3, #12
   be89a:	0092      	lsls	r2, r2, #2
   be89c:	300c      	adds	r0, #12
   be89e:	f7ff fb88 	bl	bdfb2 <memcpy>
   be8a2:	ec4b ab10 	vmov	d0, sl, fp
   be8a6:	aa1a      	add	r2, sp, #104	; 0x68
   be8a8:	a919      	add	r1, sp, #100	; 0x64
   be8aa:	4620      	mov	r0, r4
   be8ac:	f001 fb28 	bl	bff00 <__d2b>
   be8b0:	ec4b ab18 	vmov	d8, sl, fp
   be8b4:	9018      	str	r0, [sp, #96]	; 0x60
   be8b6:	2800      	cmp	r0, #0
   be8b8:	f43f aef6 	beq.w	be6a8 <_strtod_l+0x490>
   be8bc:	2101      	movs	r1, #1
   be8be:	4620      	mov	r0, r4
   be8c0:	f001 f872 	bl	bf9a8 <__i2b>
   be8c4:	4606      	mov	r6, r0
   be8c6:	2800      	cmp	r0, #0
   be8c8:	f43f aeee 	beq.w	be6a8 <_strtod_l+0x490>
   be8cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   be8ce:	9904      	ldr	r1, [sp, #16]
   be8d0:	2b00      	cmp	r3, #0
   be8d2:	bfab      	itete	ge
   be8d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   be8d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   be8d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   be8da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   be8de:	bfac      	ite	ge
   be8e0:	eb03 0902 	addge.w	r9, r3, r2
   be8e4:	1ad7      	sublt	r7, r2, r3
   be8e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   be8e8:	eba3 0801 	sub.w	r8, r3, r1
   be8ec:	4490      	add	r8, r2
   be8ee:	4ba1      	ldr	r3, [pc, #644]	; (beb74 <_strtod_l+0x95c>)
   be8f0:	f108 38ff 	add.w	r8, r8, #4294967295
   be8f4:	4598      	cmp	r8, r3
   be8f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   be8fa:	f280 80c7 	bge.w	bea8c <_strtod_l+0x874>
   be8fe:	eba3 0308 	sub.w	r3, r3, r8
   be902:	2b1f      	cmp	r3, #31
   be904:	eba2 0203 	sub.w	r2, r2, r3
   be908:	f04f 0101 	mov.w	r1, #1
   be90c:	f300 80b1 	bgt.w	bea72 <_strtod_l+0x85a>
   be910:	fa01 f303 	lsl.w	r3, r1, r3
   be914:	930d      	str	r3, [sp, #52]	; 0x34
   be916:	2300      	movs	r3, #0
   be918:	9308      	str	r3, [sp, #32]
   be91a:	eb09 0802 	add.w	r8, r9, r2
   be91e:	9b04      	ldr	r3, [sp, #16]
   be920:	45c1      	cmp	r9, r8
   be922:	4417      	add	r7, r2
   be924:	441f      	add	r7, r3
   be926:	464b      	mov	r3, r9
   be928:	bfa8      	it	ge
   be92a:	4643      	movge	r3, r8
   be92c:	42bb      	cmp	r3, r7
   be92e:	bfa8      	it	ge
   be930:	463b      	movge	r3, r7
   be932:	2b00      	cmp	r3, #0
   be934:	bfc2      	ittt	gt
   be936:	eba8 0803 	subgt.w	r8, r8, r3
   be93a:	1aff      	subgt	r7, r7, r3
   be93c:	eba9 0903 	subgt.w	r9, r9, r3
   be940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   be942:	2b00      	cmp	r3, #0
   be944:	dd17      	ble.n	be976 <_strtod_l+0x75e>
   be946:	4631      	mov	r1, r6
   be948:	461a      	mov	r2, r3
   be94a:	4620      	mov	r0, r4
   be94c:	f001 f8ec 	bl	bfb28 <__pow5mult>
   be950:	4606      	mov	r6, r0
   be952:	2800      	cmp	r0, #0
   be954:	f43f aea8 	beq.w	be6a8 <_strtod_l+0x490>
   be958:	4601      	mov	r1, r0
   be95a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be95c:	4620      	mov	r0, r4
   be95e:	f001 f839 	bl	bf9d4 <__multiply>
   be962:	900b      	str	r0, [sp, #44]	; 0x2c
   be964:	2800      	cmp	r0, #0
   be966:	f43f ae9f 	beq.w	be6a8 <_strtod_l+0x490>
   be96a:	9918      	ldr	r1, [sp, #96]	; 0x60
   be96c:	4620      	mov	r0, r4
   be96e:	f000 ff19 	bl	bf7a4 <_Bfree>
   be972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be974:	9318      	str	r3, [sp, #96]	; 0x60
   be976:	f1b8 0f00 	cmp.w	r8, #0
   be97a:	f300 808c 	bgt.w	bea96 <_strtod_l+0x87e>
   be97e:	9b06      	ldr	r3, [sp, #24]
   be980:	2b00      	cmp	r3, #0
   be982:	dd08      	ble.n	be996 <_strtod_l+0x77e>
   be984:	9a12      	ldr	r2, [sp, #72]	; 0x48
   be986:	9905      	ldr	r1, [sp, #20]
   be988:	4620      	mov	r0, r4
   be98a:	f001 f8cd 	bl	bfb28 <__pow5mult>
   be98e:	9005      	str	r0, [sp, #20]
   be990:	2800      	cmp	r0, #0
   be992:	f43f ae89 	beq.w	be6a8 <_strtod_l+0x490>
   be996:	2f00      	cmp	r7, #0
   be998:	dd08      	ble.n	be9ac <_strtod_l+0x794>
   be99a:	9905      	ldr	r1, [sp, #20]
   be99c:	463a      	mov	r2, r7
   be99e:	4620      	mov	r0, r4
   be9a0:	f001 f91c 	bl	bfbdc <__lshift>
   be9a4:	9005      	str	r0, [sp, #20]
   be9a6:	2800      	cmp	r0, #0
   be9a8:	f43f ae7e 	beq.w	be6a8 <_strtod_l+0x490>
   be9ac:	f1b9 0f00 	cmp.w	r9, #0
   be9b0:	dd08      	ble.n	be9c4 <_strtod_l+0x7ac>
   be9b2:	4631      	mov	r1, r6
   be9b4:	464a      	mov	r2, r9
   be9b6:	4620      	mov	r0, r4
   be9b8:	f001 f910 	bl	bfbdc <__lshift>
   be9bc:	4606      	mov	r6, r0
   be9be:	2800      	cmp	r0, #0
   be9c0:	f43f ae72 	beq.w	be6a8 <_strtod_l+0x490>
   be9c4:	9a05      	ldr	r2, [sp, #20]
   be9c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   be9c8:	4620      	mov	r0, r4
   be9ca:	f001 f993 	bl	bfcf4 <__mdiff>
   be9ce:	4605      	mov	r5, r0
   be9d0:	2800      	cmp	r0, #0
   be9d2:	f43f ae69 	beq.w	be6a8 <_strtod_l+0x490>
   be9d6:	68c3      	ldr	r3, [r0, #12]
   be9d8:	930b      	str	r3, [sp, #44]	; 0x2c
   be9da:	2300      	movs	r3, #0
   be9dc:	60c3      	str	r3, [r0, #12]
   be9de:	4631      	mov	r1, r6
   be9e0:	f001 f96c 	bl	bfcbc <__mcmp>
   be9e4:	2800      	cmp	r0, #0
   be9e6:	da60      	bge.n	beaaa <_strtod_l+0x892>
   be9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be9ea:	ea53 030a 	orrs.w	r3, r3, sl
   be9ee:	f040 8082 	bne.w	beaf6 <_strtod_l+0x8de>
   be9f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be9f6:	2b00      	cmp	r3, #0
   be9f8:	d17d      	bne.n	beaf6 <_strtod_l+0x8de>
   be9fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   be9fe:	0d1b      	lsrs	r3, r3, #20
   bea00:	051b      	lsls	r3, r3, #20
   bea02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bea06:	d976      	bls.n	beaf6 <_strtod_l+0x8de>
   bea08:	696b      	ldr	r3, [r5, #20]
   bea0a:	b913      	cbnz	r3, bea12 <_strtod_l+0x7fa>
   bea0c:	692b      	ldr	r3, [r5, #16]
   bea0e:	2b01      	cmp	r3, #1
   bea10:	dd71      	ble.n	beaf6 <_strtod_l+0x8de>
   bea12:	4629      	mov	r1, r5
   bea14:	2201      	movs	r2, #1
   bea16:	4620      	mov	r0, r4
   bea18:	f001 f8e0 	bl	bfbdc <__lshift>
   bea1c:	4631      	mov	r1, r6
   bea1e:	4605      	mov	r5, r0
   bea20:	f001 f94c 	bl	bfcbc <__mcmp>
   bea24:	2800      	cmp	r0, #0
   bea26:	dd66      	ble.n	beaf6 <_strtod_l+0x8de>
   bea28:	9904      	ldr	r1, [sp, #16]
   bea2a:	4a53      	ldr	r2, [pc, #332]	; (beb78 <_strtod_l+0x960>)
   bea2c:	465b      	mov	r3, fp
   bea2e:	2900      	cmp	r1, #0
   bea30:	f000 8081 	beq.w	beb36 <_strtod_l+0x91e>
   bea34:	ea02 010b 	and.w	r1, r2, fp
   bea38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bea3c:	dc7b      	bgt.n	beb36 <_strtod_l+0x91e>
   bea3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bea42:	f77f aea9 	ble.w	be798 <_strtod_l+0x580>
   bea46:	4b4d      	ldr	r3, [pc, #308]	; (beb7c <_strtod_l+0x964>)
   bea48:	4650      	mov	r0, sl
   bea4a:	4659      	mov	r1, fp
   bea4c:	2200      	movs	r2, #0
   bea4e:	f7fe ff6b 	bl	bd928 <__aeabi_dmul>
   bea52:	460b      	mov	r3, r1
   bea54:	4303      	orrs	r3, r0
   bea56:	bf08      	it	eq
   bea58:	2322      	moveq	r3, #34	; 0x22
   bea5a:	4682      	mov	sl, r0
   bea5c:	468b      	mov	fp, r1
   bea5e:	bf08      	it	eq
   bea60:	6023      	streq	r3, [r4, #0]
   bea62:	e62b      	b.n	be6bc <_strtod_l+0x4a4>
   bea64:	f04f 32ff 	mov.w	r2, #4294967295
   bea68:	fa02 f303 	lsl.w	r3, r2, r3
   bea6c:	ea03 0a0a 	and.w	sl, r3, sl
   bea70:	e6e3      	b.n	be83a <_strtod_l+0x622>
   bea72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bea76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bea7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bea7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bea82:	fa01 f308 	lsl.w	r3, r1, r8
   bea86:	9308      	str	r3, [sp, #32]
   bea88:	910d      	str	r1, [sp, #52]	; 0x34
   bea8a:	e746      	b.n	be91a <_strtod_l+0x702>
   bea8c:	2300      	movs	r3, #0
   bea8e:	9308      	str	r3, [sp, #32]
   bea90:	2301      	movs	r3, #1
   bea92:	930d      	str	r3, [sp, #52]	; 0x34
   bea94:	e741      	b.n	be91a <_strtod_l+0x702>
   bea96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bea98:	4642      	mov	r2, r8
   bea9a:	4620      	mov	r0, r4
   bea9c:	f001 f89e 	bl	bfbdc <__lshift>
   beaa0:	9018      	str	r0, [sp, #96]	; 0x60
   beaa2:	2800      	cmp	r0, #0
   beaa4:	f47f af6b 	bne.w	be97e <_strtod_l+0x766>
   beaa8:	e5fe      	b.n	be6a8 <_strtod_l+0x490>
   beaaa:	465f      	mov	r7, fp
   beaac:	d16e      	bne.n	beb8c <_strtod_l+0x974>
   beaae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   beab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   beab4:	b342      	cbz	r2, beb08 <_strtod_l+0x8f0>
   beab6:	4a32      	ldr	r2, [pc, #200]	; (beb80 <_strtod_l+0x968>)
   beab8:	4293      	cmp	r3, r2
   beaba:	d128      	bne.n	beb0e <_strtod_l+0x8f6>
   beabc:	9b04      	ldr	r3, [sp, #16]
   beabe:	4651      	mov	r1, sl
   beac0:	b1eb      	cbz	r3, beafe <_strtod_l+0x8e6>
   beac2:	4b2d      	ldr	r3, [pc, #180]	; (beb78 <_strtod_l+0x960>)
   beac4:	403b      	ands	r3, r7
   beac6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   beaca:	f04f 32ff 	mov.w	r2, #4294967295
   beace:	d819      	bhi.n	beb04 <_strtod_l+0x8ec>
   bead0:	0d1b      	lsrs	r3, r3, #20
   bead2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bead6:	fa02 f303 	lsl.w	r3, r2, r3
   beada:	4299      	cmp	r1, r3
   beadc:	d117      	bne.n	beb0e <_strtod_l+0x8f6>
   beade:	4b29      	ldr	r3, [pc, #164]	; (beb84 <_strtod_l+0x96c>)
   beae0:	429f      	cmp	r7, r3
   beae2:	d102      	bne.n	beaea <_strtod_l+0x8d2>
   beae4:	3101      	adds	r1, #1
   beae6:	f43f addf 	beq.w	be6a8 <_strtod_l+0x490>
   beaea:	4b23      	ldr	r3, [pc, #140]	; (beb78 <_strtod_l+0x960>)
   beaec:	403b      	ands	r3, r7
   beaee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   beaf2:	f04f 0a00 	mov.w	sl, #0
   beaf6:	9b04      	ldr	r3, [sp, #16]
   beaf8:	2b00      	cmp	r3, #0
   beafa:	d1a4      	bne.n	bea46 <_strtod_l+0x82e>
   beafc:	e5de      	b.n	be6bc <_strtod_l+0x4a4>
   beafe:	f04f 33ff 	mov.w	r3, #4294967295
   beb02:	e7ea      	b.n	beada <_strtod_l+0x8c2>
   beb04:	4613      	mov	r3, r2
   beb06:	e7e8      	b.n	beada <_strtod_l+0x8c2>
   beb08:	ea53 030a 	orrs.w	r3, r3, sl
   beb0c:	d08c      	beq.n	bea28 <_strtod_l+0x810>
   beb0e:	9b08      	ldr	r3, [sp, #32]
   beb10:	b1db      	cbz	r3, beb4a <_strtod_l+0x932>
   beb12:	423b      	tst	r3, r7
   beb14:	d0ef      	beq.n	beaf6 <_strtod_l+0x8de>
   beb16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   beb18:	9a04      	ldr	r2, [sp, #16]
   beb1a:	4650      	mov	r0, sl
   beb1c:	4659      	mov	r1, fp
   beb1e:	b1c3      	cbz	r3, beb52 <_strtod_l+0x93a>
   beb20:	f7ff fb5e 	bl	be1e0 <sulp>
   beb24:	4602      	mov	r2, r0
   beb26:	460b      	mov	r3, r1
   beb28:	ec51 0b18 	vmov	r0, r1, d8
   beb2c:	f7fe fd46 	bl	bd5bc <__adddf3>
   beb30:	4682      	mov	sl, r0
   beb32:	468b      	mov	fp, r1
   beb34:	e7df      	b.n	beaf6 <_strtod_l+0x8de>
   beb36:	4013      	ands	r3, r2
   beb38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   beb3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   beb40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   beb44:	f04f 3aff 	mov.w	sl, #4294967295
   beb48:	e7d5      	b.n	beaf6 <_strtod_l+0x8de>
   beb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   beb4c:	ea13 0f0a 	tst.w	r3, sl
   beb50:	e7e0      	b.n	beb14 <_strtod_l+0x8fc>
   beb52:	f7ff fb45 	bl	be1e0 <sulp>
   beb56:	4602      	mov	r2, r0
   beb58:	460b      	mov	r3, r1
   beb5a:	ec51 0b18 	vmov	r0, r1, d8
   beb5e:	f7fe fd2b 	bl	bd5b8 <__aeabi_dsub>
   beb62:	2200      	movs	r2, #0
   beb64:	2300      	movs	r3, #0
   beb66:	4682      	mov	sl, r0
   beb68:	468b      	mov	fp, r1
   beb6a:	f7ff f945 	bl	bddf8 <__aeabi_dcmpeq>
   beb6e:	2800      	cmp	r0, #0
   beb70:	d0c1      	beq.n	beaf6 <_strtod_l+0x8de>
   beb72:	e611      	b.n	be798 <_strtod_l+0x580>
   beb74:	fffffc02 	.word	0xfffffc02
   beb78:	7ff00000 	.word	0x7ff00000
   beb7c:	39500000 	.word	0x39500000
   beb80:	000fffff 	.word	0x000fffff
   beb84:	7fefffff 	.word	0x7fefffff
   beb88:	000c1a48 	.word	0x000c1a48
   beb8c:	4631      	mov	r1, r6
   beb8e:	4628      	mov	r0, r5
   beb90:	f001 fa12 	bl	bffb8 <__ratio>
   beb94:	ec59 8b10 	vmov	r8, r9, d0
   beb98:	ee10 0a10 	vmov	r0, s0
   beb9c:	2200      	movs	r2, #0
   beb9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   beba2:	4649      	mov	r1, r9
   beba4:	f7ff f93c 	bl	bde20 <__aeabi_dcmple>
   beba8:	2800      	cmp	r0, #0
   bebaa:	d07a      	beq.n	beca2 <_strtod_l+0xa8a>
   bebac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bebae:	2b00      	cmp	r3, #0
   bebb0:	d04a      	beq.n	bec48 <_strtod_l+0xa30>
   bebb2:	4b95      	ldr	r3, [pc, #596]	; (bee08 <_strtod_l+0xbf0>)
   bebb4:	2200      	movs	r2, #0
   bebb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bebba:	f8df 924c 	ldr.w	r9, [pc, #588]	; bee08 <_strtod_l+0xbf0>
   bebbe:	f04f 0800 	mov.w	r8, #0
   bebc2:	4b92      	ldr	r3, [pc, #584]	; (bee0c <_strtod_l+0xbf4>)
   bebc4:	403b      	ands	r3, r7
   bebc6:	930d      	str	r3, [sp, #52]	; 0x34
   bebc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bebca:	4b91      	ldr	r3, [pc, #580]	; (bee10 <_strtod_l+0xbf8>)
   bebcc:	429a      	cmp	r2, r3
   bebce:	f040 80b0 	bne.w	bed32 <_strtod_l+0xb1a>
   bebd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bebd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bebda:	ec4b ab10 	vmov	d0, sl, fp
   bebde:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bebe2:	f001 f911 	bl	bfe08 <__ulp>
   bebe6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bebea:	ec53 2b10 	vmov	r2, r3, d0
   bebee:	f7fe fe9b 	bl	bd928 <__aeabi_dmul>
   bebf2:	4652      	mov	r2, sl
   bebf4:	465b      	mov	r3, fp
   bebf6:	f7fe fce1 	bl	bd5bc <__adddf3>
   bebfa:	460b      	mov	r3, r1
   bebfc:	4983      	ldr	r1, [pc, #524]	; (bee0c <_strtod_l+0xbf4>)
   bebfe:	4a85      	ldr	r2, [pc, #532]	; (bee14 <_strtod_l+0xbfc>)
   bec00:	4019      	ands	r1, r3
   bec02:	4291      	cmp	r1, r2
   bec04:	4682      	mov	sl, r0
   bec06:	d960      	bls.n	becca <_strtod_l+0xab2>
   bec08:	ee18 3a90 	vmov	r3, s17
   bec0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bec10:	4293      	cmp	r3, r2
   bec12:	d104      	bne.n	bec1e <_strtod_l+0xa06>
   bec14:	ee18 3a10 	vmov	r3, s16
   bec18:	3301      	adds	r3, #1
   bec1a:	f43f ad45 	beq.w	be6a8 <_strtod_l+0x490>
   bec1e:	f8df b200 	ldr.w	fp, [pc, #512]	; bee20 <_strtod_l+0xc08>
   bec22:	f04f 3aff 	mov.w	sl, #4294967295
   bec26:	9918      	ldr	r1, [sp, #96]	; 0x60
   bec28:	4620      	mov	r0, r4
   bec2a:	f000 fdbb 	bl	bf7a4 <_Bfree>
   bec2e:	9905      	ldr	r1, [sp, #20]
   bec30:	4620      	mov	r0, r4
   bec32:	f000 fdb7 	bl	bf7a4 <_Bfree>
   bec36:	4631      	mov	r1, r6
   bec38:	4620      	mov	r0, r4
   bec3a:	f000 fdb3 	bl	bf7a4 <_Bfree>
   bec3e:	4629      	mov	r1, r5
   bec40:	4620      	mov	r0, r4
   bec42:	f000 fdaf 	bl	bf7a4 <_Bfree>
   bec46:	e61a      	b.n	be87e <_strtod_l+0x666>
   bec48:	f1ba 0f00 	cmp.w	sl, #0
   bec4c:	d11b      	bne.n	bec86 <_strtod_l+0xa6e>
   bec4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bec52:	b9f3      	cbnz	r3, bec92 <_strtod_l+0xa7a>
   bec54:	4b6c      	ldr	r3, [pc, #432]	; (bee08 <_strtod_l+0xbf0>)
   bec56:	2200      	movs	r2, #0
   bec58:	4640      	mov	r0, r8
   bec5a:	4649      	mov	r1, r9
   bec5c:	f7ff f8d6 	bl	bde0c <__aeabi_dcmplt>
   bec60:	b9d0      	cbnz	r0, bec98 <_strtod_l+0xa80>
   bec62:	4640      	mov	r0, r8
   bec64:	4649      	mov	r1, r9
   bec66:	4b6c      	ldr	r3, [pc, #432]	; (bee18 <_strtod_l+0xc00>)
   bec68:	2200      	movs	r2, #0
   bec6a:	f7fe fe5d 	bl	bd928 <__aeabi_dmul>
   bec6e:	4680      	mov	r8, r0
   bec70:	4689      	mov	r9, r1
   bec72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bec76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bec7a:	9315      	str	r3, [sp, #84]	; 0x54
   bec7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bec80:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bec84:	e79d      	b.n	bebc2 <_strtod_l+0x9aa>
   bec86:	f1ba 0f01 	cmp.w	sl, #1
   bec8a:	d102      	bne.n	bec92 <_strtod_l+0xa7a>
   bec8c:	2f00      	cmp	r7, #0
   bec8e:	f43f ad83 	beq.w	be798 <_strtod_l+0x580>
   bec92:	4b62      	ldr	r3, [pc, #392]	; (bee1c <_strtod_l+0xc04>)
   bec94:	2200      	movs	r2, #0
   bec96:	e78e      	b.n	bebb6 <_strtod_l+0x99e>
   bec98:	f8df 917c 	ldr.w	r9, [pc, #380]	; bee18 <_strtod_l+0xc00>
   bec9c:	f04f 0800 	mov.w	r8, #0
   beca0:	e7e7      	b.n	bec72 <_strtod_l+0xa5a>
   beca2:	4b5d      	ldr	r3, [pc, #372]	; (bee18 <_strtod_l+0xc00>)
   beca4:	4640      	mov	r0, r8
   beca6:	4649      	mov	r1, r9
   beca8:	2200      	movs	r2, #0
   becaa:	f7fe fe3d 	bl	bd928 <__aeabi_dmul>
   becae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   becb0:	4680      	mov	r8, r0
   becb2:	4689      	mov	r9, r1
   becb4:	b933      	cbnz	r3, becc4 <_strtod_l+0xaac>
   becb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   becba:	900e      	str	r0, [sp, #56]	; 0x38
   becbc:	930f      	str	r3, [sp, #60]	; 0x3c
   becbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   becc2:	e7dd      	b.n	bec80 <_strtod_l+0xa68>
   becc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   becc8:	e7f9      	b.n	becbe <_strtod_l+0xaa6>
   becca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   becce:	9b04      	ldr	r3, [sp, #16]
   becd0:	2b00      	cmp	r3, #0
   becd2:	d1a8      	bne.n	bec26 <_strtod_l+0xa0e>
   becd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   becd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   becda:	0d1b      	lsrs	r3, r3, #20
   becdc:	051b      	lsls	r3, r3, #20
   becde:	429a      	cmp	r2, r3
   bece0:	d1a1      	bne.n	bec26 <_strtod_l+0xa0e>
   bece2:	4640      	mov	r0, r8
   bece4:	4649      	mov	r1, r9
   bece6:	f001 fa05 	bl	c00f4 <__aeabi_d2lz>
   becea:	f7fe fdef 	bl	bd8cc <__aeabi_l2d>
   becee:	4602      	mov	r2, r0
   becf0:	460b      	mov	r3, r1
   becf2:	4640      	mov	r0, r8
   becf4:	4649      	mov	r1, r9
   becf6:	f7fe fc5f 	bl	bd5b8 <__aeabi_dsub>
   becfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   becfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bed00:	ea43 030a 	orr.w	r3, r3, sl
   bed04:	4313      	orrs	r3, r2
   bed06:	4680      	mov	r8, r0
   bed08:	4689      	mov	r9, r1
   bed0a:	d055      	beq.n	bedb8 <_strtod_l+0xba0>
   bed0c:	a336      	add	r3, pc, #216	; (adr r3, bede8 <_strtod_l+0xbd0>)
   bed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bed12:	f7ff f87b 	bl	bde0c <__aeabi_dcmplt>
   bed16:	2800      	cmp	r0, #0
   bed18:	f47f acd0 	bne.w	be6bc <_strtod_l+0x4a4>
   bed1c:	a334      	add	r3, pc, #208	; (adr r3, bedf0 <_strtod_l+0xbd8>)
   bed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bed22:	4640      	mov	r0, r8
   bed24:	4649      	mov	r1, r9
   bed26:	f7ff f88f 	bl	bde48 <__aeabi_dcmpgt>
   bed2a:	2800      	cmp	r0, #0
   bed2c:	f43f af7b 	beq.w	bec26 <_strtod_l+0xa0e>
   bed30:	e4c4      	b.n	be6bc <_strtod_l+0x4a4>
   bed32:	9b04      	ldr	r3, [sp, #16]
   bed34:	b333      	cbz	r3, bed84 <_strtod_l+0xb6c>
   bed36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bed38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bed3c:	d822      	bhi.n	bed84 <_strtod_l+0xb6c>
   bed3e:	a32e      	add	r3, pc, #184	; (adr r3, bedf8 <_strtod_l+0xbe0>)
   bed40:	e9d3 2300 	ldrd	r2, r3, [r3]
   bed44:	4640      	mov	r0, r8
   bed46:	4649      	mov	r1, r9
   bed48:	f7ff f86a 	bl	bde20 <__aeabi_dcmple>
   bed4c:	b1a0      	cbz	r0, bed78 <_strtod_l+0xb60>
   bed4e:	4649      	mov	r1, r9
   bed50:	4640      	mov	r0, r8
   bed52:	f7ff f883 	bl	bde5c <__aeabi_d2uiz>
   bed56:	2801      	cmp	r0, #1
   bed58:	bf38      	it	cc
   bed5a:	2001      	movcc	r0, #1
   bed5c:	f7fe fd6a 	bl	bd834 <__aeabi_ui2d>
   bed60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bed62:	4680      	mov	r8, r0
   bed64:	4689      	mov	r9, r1
   bed66:	bb23      	cbnz	r3, bedb2 <_strtod_l+0xb9a>
   bed68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bed6c:	9010      	str	r0, [sp, #64]	; 0x40
   bed6e:	9311      	str	r3, [sp, #68]	; 0x44
   bed70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bed74:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bed78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bed7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bed7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bed80:	1a9b      	subs	r3, r3, r2
   bed82:	9309      	str	r3, [sp, #36]	; 0x24
   bed84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bed88:	eeb0 0a48 	vmov.f32	s0, s16
   bed8c:	eef0 0a68 	vmov.f32	s1, s17
   bed90:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bed94:	f001 f838 	bl	bfe08 <__ulp>
   bed98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bed9c:	ec53 2b10 	vmov	r2, r3, d0
   beda0:	f7fe fdc2 	bl	bd928 <__aeabi_dmul>
   beda4:	ec53 2b18 	vmov	r2, r3, d8
   beda8:	f7fe fc08 	bl	bd5bc <__adddf3>
   bedac:	4682      	mov	sl, r0
   bedae:	468b      	mov	fp, r1
   bedb0:	e78d      	b.n	becce <_strtod_l+0xab6>
   bedb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bedb6:	e7db      	b.n	bed70 <_strtod_l+0xb58>
   bedb8:	a311      	add	r3, pc, #68	; (adr r3, bee00 <_strtod_l+0xbe8>)
   bedba:	e9d3 2300 	ldrd	r2, r3, [r3]
   bedbe:	f7ff f825 	bl	bde0c <__aeabi_dcmplt>
   bedc2:	e7b2      	b.n	bed2a <_strtod_l+0xb12>
   bedc4:	2300      	movs	r3, #0
   bedc6:	930a      	str	r3, [sp, #40]	; 0x28
   bedc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bedca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bedcc:	6013      	str	r3, [r2, #0]
   bedce:	f7ff ba6b 	b.w	be2a8 <_strtod_l+0x90>
   bedd2:	2a65      	cmp	r2, #101	; 0x65
   bedd4:	f43f ab5f 	beq.w	be496 <_strtod_l+0x27e>
   bedd8:	2a45      	cmp	r2, #69	; 0x45
   bedda:	f43f ab5c 	beq.w	be496 <_strtod_l+0x27e>
   bedde:	2301      	movs	r3, #1
   bede0:	f7ff bb94 	b.w	be50c <_strtod_l+0x2f4>
   bede4:	f3af 8000 	nop.w
   bede8:	94a03595 	.word	0x94a03595
   bedec:	3fdfffff 	.word	0x3fdfffff
   bedf0:	35afe535 	.word	0x35afe535
   bedf4:	3fe00000 	.word	0x3fe00000
   bedf8:	ffc00000 	.word	0xffc00000
   bedfc:	41dfffff 	.word	0x41dfffff
   bee00:	94a03595 	.word	0x94a03595
   bee04:	3fcfffff 	.word	0x3fcfffff
   bee08:	3ff00000 	.word	0x3ff00000
   bee0c:	7ff00000 	.word	0x7ff00000
   bee10:	7fe00000 	.word	0x7fe00000
   bee14:	7c9fffff 	.word	0x7c9fffff
   bee18:	3fe00000 	.word	0x3fe00000
   bee1c:	bff00000 	.word	0xbff00000
   bee20:	7fefffff 	.word	0x7fefffff

000bee24 <strtod>:
   bee24:	460a      	mov	r2, r1
   bee26:	4601      	mov	r1, r0
   bee28:	4802      	ldr	r0, [pc, #8]	; (bee34 <strtod+0x10>)
   bee2a:	4b03      	ldr	r3, [pc, #12]	; (bee38 <strtod+0x14>)
   bee2c:	6800      	ldr	r0, [r0, #0]
   bee2e:	f7ff b9f3 	b.w	be218 <_strtod_l>
   bee32:	bf00      	nop
   bee34:	2003da90 	.word	0x2003da90
   bee38:	2003dafc 	.word	0x2003dafc

000bee3c <_strtol_l.constprop.0>:
   bee3c:	2b01      	cmp	r3, #1
   bee3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bee42:	d001      	beq.n	bee48 <_strtol_l.constprop.0+0xc>
   bee44:	2b24      	cmp	r3, #36	; 0x24
   bee46:	d906      	bls.n	bee56 <_strtol_l.constprop.0+0x1a>
   bee48:	f7fa fbc2 	bl	b95d0 <__errno>
   bee4c:	2316      	movs	r3, #22
   bee4e:	6003      	str	r3, [r0, #0]
   bee50:	2000      	movs	r0, #0
   bee52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bee56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bef3c <_strtol_l.constprop.0+0x100>
   bee5a:	460d      	mov	r5, r1
   bee5c:	462e      	mov	r6, r5
   bee5e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bee62:	f814 700c 	ldrb.w	r7, [r4, ip]
   bee66:	f017 0708 	ands.w	r7, r7, #8
   bee6a:	d1f7      	bne.n	bee5c <_strtol_l.constprop.0+0x20>
   bee6c:	2c2d      	cmp	r4, #45	; 0x2d
   bee6e:	d132      	bne.n	beed6 <_strtol_l.constprop.0+0x9a>
   bee70:	782c      	ldrb	r4, [r5, #0]
   bee72:	2701      	movs	r7, #1
   bee74:	1cb5      	adds	r5, r6, #2
   bee76:	2b00      	cmp	r3, #0
   bee78:	d05b      	beq.n	bef32 <_strtol_l.constprop.0+0xf6>
   bee7a:	2b10      	cmp	r3, #16
   bee7c:	d109      	bne.n	bee92 <_strtol_l.constprop.0+0x56>
   bee7e:	2c30      	cmp	r4, #48	; 0x30
   bee80:	d107      	bne.n	bee92 <_strtol_l.constprop.0+0x56>
   bee82:	782c      	ldrb	r4, [r5, #0]
   bee84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bee88:	2c58      	cmp	r4, #88	; 0x58
   bee8a:	d14d      	bne.n	bef28 <_strtol_l.constprop.0+0xec>
   bee8c:	786c      	ldrb	r4, [r5, #1]
   bee8e:	2310      	movs	r3, #16
   bee90:	3502      	adds	r5, #2
   bee92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bee96:	f108 38ff 	add.w	r8, r8, #4294967295
   bee9a:	f04f 0c00 	mov.w	ip, #0
   bee9e:	fbb8 f9f3 	udiv	r9, r8, r3
   beea2:	4666      	mov	r6, ip
   beea4:	fb03 8a19 	mls	sl, r3, r9, r8
   beea8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   beeac:	f1be 0f09 	cmp.w	lr, #9
   beeb0:	d816      	bhi.n	beee0 <_strtol_l.constprop.0+0xa4>
   beeb2:	4674      	mov	r4, lr
   beeb4:	42a3      	cmp	r3, r4
   beeb6:	dd24      	ble.n	bef02 <_strtol_l.constprop.0+0xc6>
   beeb8:	f1bc 0f00 	cmp.w	ip, #0
   beebc:	db1e      	blt.n	beefc <_strtol_l.constprop.0+0xc0>
   beebe:	45b1      	cmp	r9, r6
   beec0:	d31c      	bcc.n	beefc <_strtol_l.constprop.0+0xc0>
   beec2:	d101      	bne.n	beec8 <_strtol_l.constprop.0+0x8c>
   beec4:	45a2      	cmp	sl, r4
   beec6:	db19      	blt.n	beefc <_strtol_l.constprop.0+0xc0>
   beec8:	fb06 4603 	mla	r6, r6, r3, r4
   beecc:	f04f 0c01 	mov.w	ip, #1
   beed0:	f815 4b01 	ldrb.w	r4, [r5], #1
   beed4:	e7e8      	b.n	beea8 <_strtol_l.constprop.0+0x6c>
   beed6:	2c2b      	cmp	r4, #43	; 0x2b
   beed8:	bf04      	itt	eq
   beeda:	782c      	ldrbeq	r4, [r5, #0]
   beedc:	1cb5      	addeq	r5, r6, #2
   beede:	e7ca      	b.n	bee76 <_strtol_l.constprop.0+0x3a>
   beee0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   beee4:	f1be 0f19 	cmp.w	lr, #25
   beee8:	d801      	bhi.n	beeee <_strtol_l.constprop.0+0xb2>
   beeea:	3c37      	subs	r4, #55	; 0x37
   beeec:	e7e2      	b.n	beeb4 <_strtol_l.constprop.0+0x78>
   beeee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   beef2:	f1be 0f19 	cmp.w	lr, #25
   beef6:	d804      	bhi.n	bef02 <_strtol_l.constprop.0+0xc6>
   beef8:	3c57      	subs	r4, #87	; 0x57
   beefa:	e7db      	b.n	beeb4 <_strtol_l.constprop.0+0x78>
   beefc:	f04f 3cff 	mov.w	ip, #4294967295
   bef00:	e7e6      	b.n	beed0 <_strtol_l.constprop.0+0x94>
   bef02:	f1bc 0f00 	cmp.w	ip, #0
   bef06:	da05      	bge.n	bef14 <_strtol_l.constprop.0+0xd8>
   bef08:	2322      	movs	r3, #34	; 0x22
   bef0a:	6003      	str	r3, [r0, #0]
   bef0c:	4646      	mov	r6, r8
   bef0e:	b942      	cbnz	r2, bef22 <_strtol_l.constprop.0+0xe6>
   bef10:	4630      	mov	r0, r6
   bef12:	e79e      	b.n	bee52 <_strtol_l.constprop.0+0x16>
   bef14:	b107      	cbz	r7, bef18 <_strtol_l.constprop.0+0xdc>
   bef16:	4276      	negs	r6, r6
   bef18:	2a00      	cmp	r2, #0
   bef1a:	d0f9      	beq.n	bef10 <_strtol_l.constprop.0+0xd4>
   bef1c:	f1bc 0f00 	cmp.w	ip, #0
   bef20:	d000      	beq.n	bef24 <_strtol_l.constprop.0+0xe8>
   bef22:	1e69      	subs	r1, r5, #1
   bef24:	6011      	str	r1, [r2, #0]
   bef26:	e7f3      	b.n	bef10 <_strtol_l.constprop.0+0xd4>
   bef28:	2430      	movs	r4, #48	; 0x30
   bef2a:	2b00      	cmp	r3, #0
   bef2c:	d1b1      	bne.n	bee92 <_strtol_l.constprop.0+0x56>
   bef2e:	2308      	movs	r3, #8
   bef30:	e7af      	b.n	bee92 <_strtol_l.constprop.0+0x56>
   bef32:	2c30      	cmp	r4, #48	; 0x30
   bef34:	d0a5      	beq.n	bee82 <_strtol_l.constprop.0+0x46>
   bef36:	230a      	movs	r3, #10
   bef38:	e7ab      	b.n	bee92 <_strtol_l.constprop.0+0x56>
   bef3a:	bf00      	nop
   bef3c:	000c1a71 	.word	0x000c1a71

000bef40 <strtol>:
   bef40:	4613      	mov	r3, r2
   bef42:	460a      	mov	r2, r1
   bef44:	4601      	mov	r1, r0
   bef46:	4802      	ldr	r0, [pc, #8]	; (bef50 <strtol+0x10>)
   bef48:	6800      	ldr	r0, [r0, #0]
   bef4a:	f7ff bf77 	b.w	bee3c <_strtol_l.constprop.0>
   bef4e:	bf00      	nop
   bef50:	2003da90 	.word	0x2003da90

000bef54 <__register_exitproc>:
   bef54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bef58:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf014 <__register_exitproc+0xc0>
   bef5c:	4606      	mov	r6, r0
   bef5e:	f8d8 0000 	ldr.w	r0, [r8]
   bef62:	461f      	mov	r7, r3
   bef64:	460d      	mov	r5, r1
   bef66:	4691      	mov	r9, r2
   bef68:	f000 fbc6 	bl	bf6f8 <__retarget_lock_acquire_recursive>
   bef6c:	4b25      	ldr	r3, [pc, #148]	; (bf004 <__register_exitproc+0xb0>)
   bef6e:	681c      	ldr	r4, [r3, #0]
   bef70:	b934      	cbnz	r4, bef80 <__register_exitproc+0x2c>
   bef72:	4c25      	ldr	r4, [pc, #148]	; (bf008 <__register_exitproc+0xb4>)
   bef74:	601c      	str	r4, [r3, #0]
   bef76:	4b25      	ldr	r3, [pc, #148]	; (bf00c <__register_exitproc+0xb8>)
   bef78:	b113      	cbz	r3, bef80 <__register_exitproc+0x2c>
   bef7a:	681b      	ldr	r3, [r3, #0]
   bef7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bef80:	6863      	ldr	r3, [r4, #4]
   bef82:	2b1f      	cmp	r3, #31
   bef84:	dd07      	ble.n	bef96 <__register_exitproc+0x42>
   bef86:	f8d8 0000 	ldr.w	r0, [r8]
   bef8a:	f000 fbb7 	bl	bf6fc <__retarget_lock_release_recursive>
   bef8e:	f04f 30ff 	mov.w	r0, #4294967295
   bef92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bef96:	b34e      	cbz	r6, befec <__register_exitproc+0x98>
   bef98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bef9c:	b988      	cbnz	r0, befc2 <__register_exitproc+0x6e>
   bef9e:	4b1c      	ldr	r3, [pc, #112]	; (bf010 <__register_exitproc+0xbc>)
   befa0:	b923      	cbnz	r3, befac <__register_exitproc+0x58>
   befa2:	f8d8 0000 	ldr.w	r0, [r8]
   befa6:	f000 fba8 	bl	bf6fa <__retarget_lock_release>
   befaa:	e7f0      	b.n	bef8e <__register_exitproc+0x3a>
   befac:	f44f 7084 	mov.w	r0, #264	; 0x108
   befb0:	f7fa fac6 	bl	b9540 <malloc>
   befb4:	2800      	cmp	r0, #0
   befb6:	d0f4      	beq.n	befa2 <__register_exitproc+0x4e>
   befb8:	2300      	movs	r3, #0
   befba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   befbe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   befc2:	6863      	ldr	r3, [r4, #4]
   befc4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   befc8:	2201      	movs	r2, #1
   befca:	409a      	lsls	r2, r3
   befcc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   befd0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   befd4:	4313      	orrs	r3, r2
   befd6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   befda:	2e02      	cmp	r6, #2
   befdc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   befe0:	bf02      	ittt	eq
   befe2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   befe6:	4313      	orreq	r3, r2
   befe8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   befec:	6863      	ldr	r3, [r4, #4]
   befee:	f8d8 0000 	ldr.w	r0, [r8]
   beff2:	1c5a      	adds	r2, r3, #1
   beff4:	3302      	adds	r3, #2
   beff6:	6062      	str	r2, [r4, #4]
   beff8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   beffc:	f000 fb7e 	bl	bf6fc <__retarget_lock_release_recursive>
   bf000:	2000      	movs	r0, #0
   bf002:	e7c6      	b.n	bef92 <__register_exitproc+0x3e>
   bf004:	2003e7e8 	.word	0x2003e7e8
   bf008:	2003e75c 	.word	0x2003e75c
   bf00c:	00000000 	.word	0x00000000
   bf010:	000b9541 	.word	0x000b9541
   bf014:	2003daf4 	.word	0x2003daf4

000bf018 <rshift>:
   bf018:	6903      	ldr	r3, [r0, #16]
   bf01a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf01e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf022:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf026:	f100 0414 	add.w	r4, r0, #20
   bf02a:	dd45      	ble.n	bf0b8 <rshift+0xa0>
   bf02c:	f011 011f 	ands.w	r1, r1, #31
   bf030:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bf034:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bf038:	d10c      	bne.n	bf054 <rshift+0x3c>
   bf03a:	f100 0710 	add.w	r7, r0, #16
   bf03e:	4629      	mov	r1, r5
   bf040:	42b1      	cmp	r1, r6
   bf042:	d334      	bcc.n	bf0ae <rshift+0x96>
   bf044:	1a9b      	subs	r3, r3, r2
   bf046:	009b      	lsls	r3, r3, #2
   bf048:	1eea      	subs	r2, r5, #3
   bf04a:	4296      	cmp	r6, r2
   bf04c:	bf38      	it	cc
   bf04e:	2300      	movcc	r3, #0
   bf050:	4423      	add	r3, r4
   bf052:	e015      	b.n	bf080 <rshift+0x68>
   bf054:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bf058:	f1c1 0820 	rsb	r8, r1, #32
   bf05c:	40cf      	lsrs	r7, r1
   bf05e:	f105 0e04 	add.w	lr, r5, #4
   bf062:	46a1      	mov	r9, r4
   bf064:	4576      	cmp	r6, lr
   bf066:	46f4      	mov	ip, lr
   bf068:	d815      	bhi.n	bf096 <rshift+0x7e>
   bf06a:	1a9a      	subs	r2, r3, r2
   bf06c:	0092      	lsls	r2, r2, #2
   bf06e:	3a04      	subs	r2, #4
   bf070:	3501      	adds	r5, #1
   bf072:	42ae      	cmp	r6, r5
   bf074:	bf38      	it	cc
   bf076:	2200      	movcc	r2, #0
   bf078:	18a3      	adds	r3, r4, r2
   bf07a:	50a7      	str	r7, [r4, r2]
   bf07c:	b107      	cbz	r7, bf080 <rshift+0x68>
   bf07e:	3304      	adds	r3, #4
   bf080:	1b1a      	subs	r2, r3, r4
   bf082:	42a3      	cmp	r3, r4
   bf084:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bf088:	bf08      	it	eq
   bf08a:	2300      	moveq	r3, #0
   bf08c:	6102      	str	r2, [r0, #16]
   bf08e:	bf08      	it	eq
   bf090:	6143      	streq	r3, [r0, #20]
   bf092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf096:	f8dc c000 	ldr.w	ip, [ip]
   bf09a:	fa0c fc08 	lsl.w	ip, ip, r8
   bf09e:	ea4c 0707 	orr.w	r7, ip, r7
   bf0a2:	f849 7b04 	str.w	r7, [r9], #4
   bf0a6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bf0aa:	40cf      	lsrs	r7, r1
   bf0ac:	e7da      	b.n	bf064 <rshift+0x4c>
   bf0ae:	f851 cb04 	ldr.w	ip, [r1], #4
   bf0b2:	f847 cf04 	str.w	ip, [r7, #4]!
   bf0b6:	e7c3      	b.n	bf040 <rshift+0x28>
   bf0b8:	4623      	mov	r3, r4
   bf0ba:	e7e1      	b.n	bf080 <rshift+0x68>

000bf0bc <__hexdig_fun>:
   bf0bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf0c0:	2b09      	cmp	r3, #9
   bf0c2:	d802      	bhi.n	bf0ca <__hexdig_fun+0xe>
   bf0c4:	3820      	subs	r0, #32
   bf0c6:	b2c0      	uxtb	r0, r0
   bf0c8:	4770      	bx	lr
   bf0ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bf0ce:	2b05      	cmp	r3, #5
   bf0d0:	d801      	bhi.n	bf0d6 <__hexdig_fun+0x1a>
   bf0d2:	3847      	subs	r0, #71	; 0x47
   bf0d4:	e7f7      	b.n	bf0c6 <__hexdig_fun+0xa>
   bf0d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bf0da:	2b05      	cmp	r3, #5
   bf0dc:	d801      	bhi.n	bf0e2 <__hexdig_fun+0x26>
   bf0de:	3827      	subs	r0, #39	; 0x27
   bf0e0:	e7f1      	b.n	bf0c6 <__hexdig_fun+0xa>
   bf0e2:	2000      	movs	r0, #0
   bf0e4:	4770      	bx	lr
	...

000bf0e8 <__gethex>:
   bf0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf0ec:	ed2d 8b02 	vpush	{d8}
   bf0f0:	b089      	sub	sp, #36	; 0x24
   bf0f2:	ee08 0a10 	vmov	s16, r0
   bf0f6:	9304      	str	r3, [sp, #16]
   bf0f8:	4bb4      	ldr	r3, [pc, #720]	; (bf3cc <__gethex+0x2e4>)
   bf0fa:	681b      	ldr	r3, [r3, #0]
   bf0fc:	9301      	str	r3, [sp, #4]
   bf0fe:	4618      	mov	r0, r3
   bf100:	468b      	mov	fp, r1
   bf102:	4690      	mov	r8, r2
   bf104:	f7ff f831 	bl	be16a <strlen>
   bf108:	9b01      	ldr	r3, [sp, #4]
   bf10a:	f8db 2000 	ldr.w	r2, [fp]
   bf10e:	4403      	add	r3, r0
   bf110:	4682      	mov	sl, r0
   bf112:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bf116:	9305      	str	r3, [sp, #20]
   bf118:	1c93      	adds	r3, r2, #2
   bf11a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bf11e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bf122:	32fe      	adds	r2, #254	; 0xfe
   bf124:	18d1      	adds	r1, r2, r3
   bf126:	461f      	mov	r7, r3
   bf128:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf12c:	9100      	str	r1, [sp, #0]
   bf12e:	2830      	cmp	r0, #48	; 0x30
   bf130:	d0f8      	beq.n	bf124 <__gethex+0x3c>
   bf132:	f7ff ffc3 	bl	bf0bc <__hexdig_fun>
   bf136:	4604      	mov	r4, r0
   bf138:	2800      	cmp	r0, #0
   bf13a:	d13a      	bne.n	bf1b2 <__gethex+0xca>
   bf13c:	9901      	ldr	r1, [sp, #4]
   bf13e:	4652      	mov	r2, sl
   bf140:	4638      	mov	r0, r7
   bf142:	f7ff f81a 	bl	be17a <strncmp>
   bf146:	4605      	mov	r5, r0
   bf148:	2800      	cmp	r0, #0
   bf14a:	d168      	bne.n	bf21e <__gethex+0x136>
   bf14c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bf150:	eb07 060a 	add.w	r6, r7, sl
   bf154:	f7ff ffb2 	bl	bf0bc <__hexdig_fun>
   bf158:	2800      	cmp	r0, #0
   bf15a:	d062      	beq.n	bf222 <__gethex+0x13a>
   bf15c:	4633      	mov	r3, r6
   bf15e:	7818      	ldrb	r0, [r3, #0]
   bf160:	2830      	cmp	r0, #48	; 0x30
   bf162:	461f      	mov	r7, r3
   bf164:	f103 0301 	add.w	r3, r3, #1
   bf168:	d0f9      	beq.n	bf15e <__gethex+0x76>
   bf16a:	f7ff ffa7 	bl	bf0bc <__hexdig_fun>
   bf16e:	2301      	movs	r3, #1
   bf170:	fab0 f480 	clz	r4, r0
   bf174:	0964      	lsrs	r4, r4, #5
   bf176:	4635      	mov	r5, r6
   bf178:	9300      	str	r3, [sp, #0]
   bf17a:	463a      	mov	r2, r7
   bf17c:	4616      	mov	r6, r2
   bf17e:	3201      	adds	r2, #1
   bf180:	7830      	ldrb	r0, [r6, #0]
   bf182:	f7ff ff9b 	bl	bf0bc <__hexdig_fun>
   bf186:	2800      	cmp	r0, #0
   bf188:	d1f8      	bne.n	bf17c <__gethex+0x94>
   bf18a:	9901      	ldr	r1, [sp, #4]
   bf18c:	4652      	mov	r2, sl
   bf18e:	4630      	mov	r0, r6
   bf190:	f7fe fff3 	bl	be17a <strncmp>
   bf194:	b980      	cbnz	r0, bf1b8 <__gethex+0xd0>
   bf196:	b94d      	cbnz	r5, bf1ac <__gethex+0xc4>
   bf198:	eb06 050a 	add.w	r5, r6, sl
   bf19c:	462a      	mov	r2, r5
   bf19e:	4616      	mov	r6, r2
   bf1a0:	3201      	adds	r2, #1
   bf1a2:	7830      	ldrb	r0, [r6, #0]
   bf1a4:	f7ff ff8a 	bl	bf0bc <__hexdig_fun>
   bf1a8:	2800      	cmp	r0, #0
   bf1aa:	d1f8      	bne.n	bf19e <__gethex+0xb6>
   bf1ac:	1bad      	subs	r5, r5, r6
   bf1ae:	00ad      	lsls	r5, r5, #2
   bf1b0:	e004      	b.n	bf1bc <__gethex+0xd4>
   bf1b2:	2400      	movs	r4, #0
   bf1b4:	4625      	mov	r5, r4
   bf1b6:	e7e0      	b.n	bf17a <__gethex+0x92>
   bf1b8:	2d00      	cmp	r5, #0
   bf1ba:	d1f7      	bne.n	bf1ac <__gethex+0xc4>
   bf1bc:	7833      	ldrb	r3, [r6, #0]
   bf1be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf1c2:	2b50      	cmp	r3, #80	; 0x50
   bf1c4:	d13b      	bne.n	bf23e <__gethex+0x156>
   bf1c6:	7873      	ldrb	r3, [r6, #1]
   bf1c8:	2b2b      	cmp	r3, #43	; 0x2b
   bf1ca:	d02c      	beq.n	bf226 <__gethex+0x13e>
   bf1cc:	2b2d      	cmp	r3, #45	; 0x2d
   bf1ce:	d02e      	beq.n	bf22e <__gethex+0x146>
   bf1d0:	1c71      	adds	r1, r6, #1
   bf1d2:	f04f 0900 	mov.w	r9, #0
   bf1d6:	7808      	ldrb	r0, [r1, #0]
   bf1d8:	f7ff ff70 	bl	bf0bc <__hexdig_fun>
   bf1dc:	1e43      	subs	r3, r0, #1
   bf1de:	b2db      	uxtb	r3, r3
   bf1e0:	2b18      	cmp	r3, #24
   bf1e2:	d82c      	bhi.n	bf23e <__gethex+0x156>
   bf1e4:	f1a0 0210 	sub.w	r2, r0, #16
   bf1e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bf1ec:	f7ff ff66 	bl	bf0bc <__hexdig_fun>
   bf1f0:	1e43      	subs	r3, r0, #1
   bf1f2:	b2db      	uxtb	r3, r3
   bf1f4:	2b18      	cmp	r3, #24
   bf1f6:	d91d      	bls.n	bf234 <__gethex+0x14c>
   bf1f8:	f1b9 0f00 	cmp.w	r9, #0
   bf1fc:	d000      	beq.n	bf200 <__gethex+0x118>
   bf1fe:	4252      	negs	r2, r2
   bf200:	4415      	add	r5, r2
   bf202:	f8cb 1000 	str.w	r1, [fp]
   bf206:	b1e4      	cbz	r4, bf242 <__gethex+0x15a>
   bf208:	9b00      	ldr	r3, [sp, #0]
   bf20a:	2b00      	cmp	r3, #0
   bf20c:	bf14      	ite	ne
   bf20e:	2700      	movne	r7, #0
   bf210:	2706      	moveq	r7, #6
   bf212:	4638      	mov	r0, r7
   bf214:	b009      	add	sp, #36	; 0x24
   bf216:	ecbd 8b02 	vpop	{d8}
   bf21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf21e:	463e      	mov	r6, r7
   bf220:	4625      	mov	r5, r4
   bf222:	2401      	movs	r4, #1
   bf224:	e7ca      	b.n	bf1bc <__gethex+0xd4>
   bf226:	f04f 0900 	mov.w	r9, #0
   bf22a:	1cb1      	adds	r1, r6, #2
   bf22c:	e7d3      	b.n	bf1d6 <__gethex+0xee>
   bf22e:	f04f 0901 	mov.w	r9, #1
   bf232:	e7fa      	b.n	bf22a <__gethex+0x142>
   bf234:	230a      	movs	r3, #10
   bf236:	fb03 0202 	mla	r2, r3, r2, r0
   bf23a:	3a10      	subs	r2, #16
   bf23c:	e7d4      	b.n	bf1e8 <__gethex+0x100>
   bf23e:	4631      	mov	r1, r6
   bf240:	e7df      	b.n	bf202 <__gethex+0x11a>
   bf242:	1bf3      	subs	r3, r6, r7
   bf244:	3b01      	subs	r3, #1
   bf246:	4621      	mov	r1, r4
   bf248:	2b07      	cmp	r3, #7
   bf24a:	dc0b      	bgt.n	bf264 <__gethex+0x17c>
   bf24c:	ee18 0a10 	vmov	r0, s16
   bf250:	f000 fa68 	bl	bf724 <_Balloc>
   bf254:	4604      	mov	r4, r0
   bf256:	b940      	cbnz	r0, bf26a <__gethex+0x182>
   bf258:	4b5d      	ldr	r3, [pc, #372]	; (bf3d0 <__gethex+0x2e8>)
   bf25a:	4602      	mov	r2, r0
   bf25c:	21de      	movs	r1, #222	; 0xde
   bf25e:	485d      	ldr	r0, [pc, #372]	; (bf3d4 <__gethex+0x2ec>)
   bf260:	f7fa f9be 	bl	b95e0 <__assert_func>
   bf264:	3101      	adds	r1, #1
   bf266:	105b      	asrs	r3, r3, #1
   bf268:	e7ee      	b.n	bf248 <__gethex+0x160>
   bf26a:	f100 0914 	add.w	r9, r0, #20
   bf26e:	f04f 0b00 	mov.w	fp, #0
   bf272:	f1ca 0301 	rsb	r3, sl, #1
   bf276:	f8cd 9008 	str.w	r9, [sp, #8]
   bf27a:	f8cd b000 	str.w	fp, [sp]
   bf27e:	9306      	str	r3, [sp, #24]
   bf280:	42b7      	cmp	r7, r6
   bf282:	d340      	bcc.n	bf306 <__gethex+0x21e>
   bf284:	9802      	ldr	r0, [sp, #8]
   bf286:	9b00      	ldr	r3, [sp, #0]
   bf288:	f840 3b04 	str.w	r3, [r0], #4
   bf28c:	eba0 0009 	sub.w	r0, r0, r9
   bf290:	1080      	asrs	r0, r0, #2
   bf292:	0146      	lsls	r6, r0, #5
   bf294:	6120      	str	r0, [r4, #16]
   bf296:	4618      	mov	r0, r3
   bf298:	f000 fb36 	bl	bf908 <__hi0bits>
   bf29c:	1a30      	subs	r0, r6, r0
   bf29e:	f8d8 6000 	ldr.w	r6, [r8]
   bf2a2:	42b0      	cmp	r0, r6
   bf2a4:	dd63      	ble.n	bf36e <__gethex+0x286>
   bf2a6:	1b87      	subs	r7, r0, r6
   bf2a8:	4639      	mov	r1, r7
   bf2aa:	4620      	mov	r0, r4
   bf2ac:	f000 feda 	bl	c0064 <__any_on>
   bf2b0:	4682      	mov	sl, r0
   bf2b2:	b1a8      	cbz	r0, bf2e0 <__gethex+0x1f8>
   bf2b4:	1e7b      	subs	r3, r7, #1
   bf2b6:	1159      	asrs	r1, r3, #5
   bf2b8:	f003 021f 	and.w	r2, r3, #31
   bf2bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bf2c0:	f04f 0a01 	mov.w	sl, #1
   bf2c4:	fa0a f202 	lsl.w	r2, sl, r2
   bf2c8:	420a      	tst	r2, r1
   bf2ca:	d009      	beq.n	bf2e0 <__gethex+0x1f8>
   bf2cc:	4553      	cmp	r3, sl
   bf2ce:	dd05      	ble.n	bf2dc <__gethex+0x1f4>
   bf2d0:	1eb9      	subs	r1, r7, #2
   bf2d2:	4620      	mov	r0, r4
   bf2d4:	f000 fec6 	bl	c0064 <__any_on>
   bf2d8:	2800      	cmp	r0, #0
   bf2da:	d145      	bne.n	bf368 <__gethex+0x280>
   bf2dc:	f04f 0a02 	mov.w	sl, #2
   bf2e0:	4639      	mov	r1, r7
   bf2e2:	4620      	mov	r0, r4
   bf2e4:	f7ff fe98 	bl	bf018 <rshift>
   bf2e8:	443d      	add	r5, r7
   bf2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf2ee:	42ab      	cmp	r3, r5
   bf2f0:	da4c      	bge.n	bf38c <__gethex+0x2a4>
   bf2f2:	ee18 0a10 	vmov	r0, s16
   bf2f6:	4621      	mov	r1, r4
   bf2f8:	f000 fa54 	bl	bf7a4 <_Bfree>
   bf2fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf2fe:	2300      	movs	r3, #0
   bf300:	6013      	str	r3, [r2, #0]
   bf302:	27a3      	movs	r7, #163	; 0xa3
   bf304:	e785      	b.n	bf212 <__gethex+0x12a>
   bf306:	1e73      	subs	r3, r6, #1
   bf308:	9a05      	ldr	r2, [sp, #20]
   bf30a:	9303      	str	r3, [sp, #12]
   bf30c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bf310:	4293      	cmp	r3, r2
   bf312:	d019      	beq.n	bf348 <__gethex+0x260>
   bf314:	f1bb 0f20 	cmp.w	fp, #32
   bf318:	d107      	bne.n	bf32a <__gethex+0x242>
   bf31a:	9b02      	ldr	r3, [sp, #8]
   bf31c:	9a00      	ldr	r2, [sp, #0]
   bf31e:	f843 2b04 	str.w	r2, [r3], #4
   bf322:	9302      	str	r3, [sp, #8]
   bf324:	2300      	movs	r3, #0
   bf326:	9300      	str	r3, [sp, #0]
   bf328:	469b      	mov	fp, r3
   bf32a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bf32e:	f7ff fec5 	bl	bf0bc <__hexdig_fun>
   bf332:	9b00      	ldr	r3, [sp, #0]
   bf334:	f000 000f 	and.w	r0, r0, #15
   bf338:	fa00 f00b 	lsl.w	r0, r0, fp
   bf33c:	4303      	orrs	r3, r0
   bf33e:	9300      	str	r3, [sp, #0]
   bf340:	f10b 0b04 	add.w	fp, fp, #4
   bf344:	9b03      	ldr	r3, [sp, #12]
   bf346:	e00d      	b.n	bf364 <__gethex+0x27c>
   bf348:	9b03      	ldr	r3, [sp, #12]
   bf34a:	9a06      	ldr	r2, [sp, #24]
   bf34c:	4413      	add	r3, r2
   bf34e:	42bb      	cmp	r3, r7
   bf350:	d3e0      	bcc.n	bf314 <__gethex+0x22c>
   bf352:	4618      	mov	r0, r3
   bf354:	9901      	ldr	r1, [sp, #4]
   bf356:	9307      	str	r3, [sp, #28]
   bf358:	4652      	mov	r2, sl
   bf35a:	f7fe ff0e 	bl	be17a <strncmp>
   bf35e:	9b07      	ldr	r3, [sp, #28]
   bf360:	2800      	cmp	r0, #0
   bf362:	d1d7      	bne.n	bf314 <__gethex+0x22c>
   bf364:	461e      	mov	r6, r3
   bf366:	e78b      	b.n	bf280 <__gethex+0x198>
   bf368:	f04f 0a03 	mov.w	sl, #3
   bf36c:	e7b8      	b.n	bf2e0 <__gethex+0x1f8>
   bf36e:	da0a      	bge.n	bf386 <__gethex+0x29e>
   bf370:	1a37      	subs	r7, r6, r0
   bf372:	4621      	mov	r1, r4
   bf374:	ee18 0a10 	vmov	r0, s16
   bf378:	463a      	mov	r2, r7
   bf37a:	f000 fc2f 	bl	bfbdc <__lshift>
   bf37e:	1bed      	subs	r5, r5, r7
   bf380:	4604      	mov	r4, r0
   bf382:	f100 0914 	add.w	r9, r0, #20
   bf386:	f04f 0a00 	mov.w	sl, #0
   bf38a:	e7ae      	b.n	bf2ea <__gethex+0x202>
   bf38c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bf390:	42a8      	cmp	r0, r5
   bf392:	dd72      	ble.n	bf47a <__gethex+0x392>
   bf394:	1b45      	subs	r5, r0, r5
   bf396:	42ae      	cmp	r6, r5
   bf398:	dc36      	bgt.n	bf408 <__gethex+0x320>
   bf39a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf39e:	2b02      	cmp	r3, #2
   bf3a0:	d02a      	beq.n	bf3f8 <__gethex+0x310>
   bf3a2:	2b03      	cmp	r3, #3
   bf3a4:	d02c      	beq.n	bf400 <__gethex+0x318>
   bf3a6:	2b01      	cmp	r3, #1
   bf3a8:	d11c      	bne.n	bf3e4 <__gethex+0x2fc>
   bf3aa:	42ae      	cmp	r6, r5
   bf3ac:	d11a      	bne.n	bf3e4 <__gethex+0x2fc>
   bf3ae:	2e01      	cmp	r6, #1
   bf3b0:	d112      	bne.n	bf3d8 <__gethex+0x2f0>
   bf3b2:	9a04      	ldr	r2, [sp, #16]
   bf3b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bf3b8:	6013      	str	r3, [r2, #0]
   bf3ba:	2301      	movs	r3, #1
   bf3bc:	6123      	str	r3, [r4, #16]
   bf3be:	f8c9 3000 	str.w	r3, [r9]
   bf3c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf3c4:	2762      	movs	r7, #98	; 0x62
   bf3c6:	601c      	str	r4, [r3, #0]
   bf3c8:	e723      	b.n	bf212 <__gethex+0x12a>
   bf3ca:	bf00      	nop
   bf3cc:	000c1c08 	.word	0x000c1c08
   bf3d0:	000c1b71 	.word	0x000c1b71
   bf3d4:	000c1b82 	.word	0x000c1b82
   bf3d8:	1e71      	subs	r1, r6, #1
   bf3da:	4620      	mov	r0, r4
   bf3dc:	f000 fe42 	bl	c0064 <__any_on>
   bf3e0:	2800      	cmp	r0, #0
   bf3e2:	d1e6      	bne.n	bf3b2 <__gethex+0x2ca>
   bf3e4:	ee18 0a10 	vmov	r0, s16
   bf3e8:	4621      	mov	r1, r4
   bf3ea:	f000 f9db 	bl	bf7a4 <_Bfree>
   bf3ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf3f0:	2300      	movs	r3, #0
   bf3f2:	6013      	str	r3, [r2, #0]
   bf3f4:	2750      	movs	r7, #80	; 0x50
   bf3f6:	e70c      	b.n	bf212 <__gethex+0x12a>
   bf3f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf3fa:	2b00      	cmp	r3, #0
   bf3fc:	d1f2      	bne.n	bf3e4 <__gethex+0x2fc>
   bf3fe:	e7d8      	b.n	bf3b2 <__gethex+0x2ca>
   bf400:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf402:	2b00      	cmp	r3, #0
   bf404:	d1d5      	bne.n	bf3b2 <__gethex+0x2ca>
   bf406:	e7ed      	b.n	bf3e4 <__gethex+0x2fc>
   bf408:	1e6f      	subs	r7, r5, #1
   bf40a:	f1ba 0f00 	cmp.w	sl, #0
   bf40e:	d131      	bne.n	bf474 <__gethex+0x38c>
   bf410:	b127      	cbz	r7, bf41c <__gethex+0x334>
   bf412:	4639      	mov	r1, r7
   bf414:	4620      	mov	r0, r4
   bf416:	f000 fe25 	bl	c0064 <__any_on>
   bf41a:	4682      	mov	sl, r0
   bf41c:	117b      	asrs	r3, r7, #5
   bf41e:	2101      	movs	r1, #1
   bf420:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bf424:	f007 071f 	and.w	r7, r7, #31
   bf428:	fa01 f707 	lsl.w	r7, r1, r7
   bf42c:	421f      	tst	r7, r3
   bf42e:	4629      	mov	r1, r5
   bf430:	4620      	mov	r0, r4
   bf432:	bf18      	it	ne
   bf434:	f04a 0a02 	orrne.w	sl, sl, #2
   bf438:	1b76      	subs	r6, r6, r5
   bf43a:	f7ff fded 	bl	bf018 <rshift>
   bf43e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bf442:	2702      	movs	r7, #2
   bf444:	f1ba 0f00 	cmp.w	sl, #0
   bf448:	d048      	beq.n	bf4dc <__gethex+0x3f4>
   bf44a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf44e:	2b02      	cmp	r3, #2
   bf450:	d015      	beq.n	bf47e <__gethex+0x396>
   bf452:	2b03      	cmp	r3, #3
   bf454:	d017      	beq.n	bf486 <__gethex+0x39e>
   bf456:	2b01      	cmp	r3, #1
   bf458:	d109      	bne.n	bf46e <__gethex+0x386>
   bf45a:	f01a 0f02 	tst.w	sl, #2
   bf45e:	d006      	beq.n	bf46e <__gethex+0x386>
   bf460:	f8d9 0000 	ldr.w	r0, [r9]
   bf464:	ea4a 0a00 	orr.w	sl, sl, r0
   bf468:	f01a 0f01 	tst.w	sl, #1
   bf46c:	d10e      	bne.n	bf48c <__gethex+0x3a4>
   bf46e:	f047 0710 	orr.w	r7, r7, #16
   bf472:	e033      	b.n	bf4dc <__gethex+0x3f4>
   bf474:	f04f 0a01 	mov.w	sl, #1
   bf478:	e7d0      	b.n	bf41c <__gethex+0x334>
   bf47a:	2701      	movs	r7, #1
   bf47c:	e7e2      	b.n	bf444 <__gethex+0x35c>
   bf47e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf480:	f1c3 0301 	rsb	r3, r3, #1
   bf484:	9315      	str	r3, [sp, #84]	; 0x54
   bf486:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf488:	2b00      	cmp	r3, #0
   bf48a:	d0f0      	beq.n	bf46e <__gethex+0x386>
   bf48c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bf490:	f104 0314 	add.w	r3, r4, #20
   bf494:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bf498:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bf49c:	f04f 0c00 	mov.w	ip, #0
   bf4a0:	4618      	mov	r0, r3
   bf4a2:	f853 2b04 	ldr.w	r2, [r3], #4
   bf4a6:	f1b2 3fff 	cmp.w	r2, #4294967295
   bf4aa:	d01c      	beq.n	bf4e6 <__gethex+0x3fe>
   bf4ac:	3201      	adds	r2, #1
   bf4ae:	6002      	str	r2, [r0, #0]
   bf4b0:	2f02      	cmp	r7, #2
   bf4b2:	f104 0314 	add.w	r3, r4, #20
   bf4b6:	d13f      	bne.n	bf538 <__gethex+0x450>
   bf4b8:	f8d8 2000 	ldr.w	r2, [r8]
   bf4bc:	3a01      	subs	r2, #1
   bf4be:	42b2      	cmp	r2, r6
   bf4c0:	d10a      	bne.n	bf4d8 <__gethex+0x3f0>
   bf4c2:	1171      	asrs	r1, r6, #5
   bf4c4:	2201      	movs	r2, #1
   bf4c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bf4ca:	f006 061f 	and.w	r6, r6, #31
   bf4ce:	fa02 f606 	lsl.w	r6, r2, r6
   bf4d2:	421e      	tst	r6, r3
   bf4d4:	bf18      	it	ne
   bf4d6:	4617      	movne	r7, r2
   bf4d8:	f047 0720 	orr.w	r7, r7, #32
   bf4dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf4de:	601c      	str	r4, [r3, #0]
   bf4e0:	9b04      	ldr	r3, [sp, #16]
   bf4e2:	601d      	str	r5, [r3, #0]
   bf4e4:	e695      	b.n	bf212 <__gethex+0x12a>
   bf4e6:	4299      	cmp	r1, r3
   bf4e8:	f843 cc04 	str.w	ip, [r3, #-4]
   bf4ec:	d8d8      	bhi.n	bf4a0 <__gethex+0x3b8>
   bf4ee:	68a3      	ldr	r3, [r4, #8]
   bf4f0:	459b      	cmp	fp, r3
   bf4f2:	db19      	blt.n	bf528 <__gethex+0x440>
   bf4f4:	6861      	ldr	r1, [r4, #4]
   bf4f6:	ee18 0a10 	vmov	r0, s16
   bf4fa:	3101      	adds	r1, #1
   bf4fc:	f000 f912 	bl	bf724 <_Balloc>
   bf500:	4681      	mov	r9, r0
   bf502:	b918      	cbnz	r0, bf50c <__gethex+0x424>
   bf504:	4b1a      	ldr	r3, [pc, #104]	; (bf570 <__gethex+0x488>)
   bf506:	4602      	mov	r2, r0
   bf508:	2184      	movs	r1, #132	; 0x84
   bf50a:	e6a8      	b.n	bf25e <__gethex+0x176>
   bf50c:	6922      	ldr	r2, [r4, #16]
   bf50e:	3202      	adds	r2, #2
   bf510:	f104 010c 	add.w	r1, r4, #12
   bf514:	0092      	lsls	r2, r2, #2
   bf516:	300c      	adds	r0, #12
   bf518:	f7fe fd4b 	bl	bdfb2 <memcpy>
   bf51c:	4621      	mov	r1, r4
   bf51e:	ee18 0a10 	vmov	r0, s16
   bf522:	f000 f93f 	bl	bf7a4 <_Bfree>
   bf526:	464c      	mov	r4, r9
   bf528:	6923      	ldr	r3, [r4, #16]
   bf52a:	1c5a      	adds	r2, r3, #1
   bf52c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bf530:	6122      	str	r2, [r4, #16]
   bf532:	2201      	movs	r2, #1
   bf534:	615a      	str	r2, [r3, #20]
   bf536:	e7bb      	b.n	bf4b0 <__gethex+0x3c8>
   bf538:	6922      	ldr	r2, [r4, #16]
   bf53a:	455a      	cmp	r2, fp
   bf53c:	dd0b      	ble.n	bf556 <__gethex+0x46e>
   bf53e:	2101      	movs	r1, #1
   bf540:	4620      	mov	r0, r4
   bf542:	f7ff fd69 	bl	bf018 <rshift>
   bf546:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf54a:	3501      	adds	r5, #1
   bf54c:	42ab      	cmp	r3, r5
   bf54e:	f6ff aed0 	blt.w	bf2f2 <__gethex+0x20a>
   bf552:	2701      	movs	r7, #1
   bf554:	e7c0      	b.n	bf4d8 <__gethex+0x3f0>
   bf556:	f016 061f 	ands.w	r6, r6, #31
   bf55a:	d0fa      	beq.n	bf552 <__gethex+0x46a>
   bf55c:	4453      	add	r3, sl
   bf55e:	f1c6 0620 	rsb	r6, r6, #32
   bf562:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bf566:	f000 f9cf 	bl	bf908 <__hi0bits>
   bf56a:	42b0      	cmp	r0, r6
   bf56c:	dbe7      	blt.n	bf53e <__gethex+0x456>
   bf56e:	e7f0      	b.n	bf552 <__gethex+0x46a>
   bf570:	000c1b71 	.word	0x000c1b71

000bf574 <L_shift>:
   bf574:	f1c2 0208 	rsb	r2, r2, #8
   bf578:	0092      	lsls	r2, r2, #2
   bf57a:	b570      	push	{r4, r5, r6, lr}
   bf57c:	f1c2 0620 	rsb	r6, r2, #32
   bf580:	6843      	ldr	r3, [r0, #4]
   bf582:	6804      	ldr	r4, [r0, #0]
   bf584:	fa03 f506 	lsl.w	r5, r3, r6
   bf588:	432c      	orrs	r4, r5
   bf58a:	40d3      	lsrs	r3, r2
   bf58c:	6004      	str	r4, [r0, #0]
   bf58e:	f840 3f04 	str.w	r3, [r0, #4]!
   bf592:	4288      	cmp	r0, r1
   bf594:	d3f4      	bcc.n	bf580 <L_shift+0xc>
   bf596:	bd70      	pop	{r4, r5, r6, pc}

000bf598 <__match>:
   bf598:	b530      	push	{r4, r5, lr}
   bf59a:	6803      	ldr	r3, [r0, #0]
   bf59c:	3301      	adds	r3, #1
   bf59e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf5a2:	b914      	cbnz	r4, bf5aa <__match+0x12>
   bf5a4:	6003      	str	r3, [r0, #0]
   bf5a6:	2001      	movs	r0, #1
   bf5a8:	bd30      	pop	{r4, r5, pc}
   bf5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf5ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bf5b2:	2d19      	cmp	r5, #25
   bf5b4:	bf98      	it	ls
   bf5b6:	3220      	addls	r2, #32
   bf5b8:	42a2      	cmp	r2, r4
   bf5ba:	d0f0      	beq.n	bf59e <__match+0x6>
   bf5bc:	2000      	movs	r0, #0
   bf5be:	e7f3      	b.n	bf5a8 <__match+0x10>

000bf5c0 <__hexnan>:
   bf5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf5c4:	680b      	ldr	r3, [r1, #0]
   bf5c6:	115e      	asrs	r6, r3, #5
   bf5c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bf5cc:	f013 031f 	ands.w	r3, r3, #31
   bf5d0:	b087      	sub	sp, #28
   bf5d2:	bf18      	it	ne
   bf5d4:	3604      	addne	r6, #4
   bf5d6:	2500      	movs	r5, #0
   bf5d8:	1f37      	subs	r7, r6, #4
   bf5da:	4690      	mov	r8, r2
   bf5dc:	6802      	ldr	r2, [r0, #0]
   bf5de:	9301      	str	r3, [sp, #4]
   bf5e0:	4682      	mov	sl, r0
   bf5e2:	f846 5c04 	str.w	r5, [r6, #-4]
   bf5e6:	46b9      	mov	r9, r7
   bf5e8:	463c      	mov	r4, r7
   bf5ea:	9502      	str	r5, [sp, #8]
   bf5ec:	46ab      	mov	fp, r5
   bf5ee:	7851      	ldrb	r1, [r2, #1]
   bf5f0:	1c53      	adds	r3, r2, #1
   bf5f2:	9303      	str	r3, [sp, #12]
   bf5f4:	b341      	cbz	r1, bf648 <__hexnan+0x88>
   bf5f6:	4608      	mov	r0, r1
   bf5f8:	9205      	str	r2, [sp, #20]
   bf5fa:	9104      	str	r1, [sp, #16]
   bf5fc:	f7ff fd5e 	bl	bf0bc <__hexdig_fun>
   bf600:	2800      	cmp	r0, #0
   bf602:	d14f      	bne.n	bf6a4 <__hexnan+0xe4>
   bf604:	9904      	ldr	r1, [sp, #16]
   bf606:	9a05      	ldr	r2, [sp, #20]
   bf608:	2920      	cmp	r1, #32
   bf60a:	d818      	bhi.n	bf63e <__hexnan+0x7e>
   bf60c:	9b02      	ldr	r3, [sp, #8]
   bf60e:	459b      	cmp	fp, r3
   bf610:	dd13      	ble.n	bf63a <__hexnan+0x7a>
   bf612:	454c      	cmp	r4, r9
   bf614:	d206      	bcs.n	bf624 <__hexnan+0x64>
   bf616:	2d07      	cmp	r5, #7
   bf618:	dc04      	bgt.n	bf624 <__hexnan+0x64>
   bf61a:	462a      	mov	r2, r5
   bf61c:	4649      	mov	r1, r9
   bf61e:	4620      	mov	r0, r4
   bf620:	f7ff ffa8 	bl	bf574 <L_shift>
   bf624:	4544      	cmp	r4, r8
   bf626:	d950      	bls.n	bf6ca <__hexnan+0x10a>
   bf628:	2300      	movs	r3, #0
   bf62a:	f1a4 0904 	sub.w	r9, r4, #4
   bf62e:	f844 3c04 	str.w	r3, [r4, #-4]
   bf632:	f8cd b008 	str.w	fp, [sp, #8]
   bf636:	464c      	mov	r4, r9
   bf638:	461d      	mov	r5, r3
   bf63a:	9a03      	ldr	r2, [sp, #12]
   bf63c:	e7d7      	b.n	bf5ee <__hexnan+0x2e>
   bf63e:	2929      	cmp	r1, #41	; 0x29
   bf640:	d156      	bne.n	bf6f0 <__hexnan+0x130>
   bf642:	3202      	adds	r2, #2
   bf644:	f8ca 2000 	str.w	r2, [sl]
   bf648:	f1bb 0f00 	cmp.w	fp, #0
   bf64c:	d050      	beq.n	bf6f0 <__hexnan+0x130>
   bf64e:	454c      	cmp	r4, r9
   bf650:	d206      	bcs.n	bf660 <__hexnan+0xa0>
   bf652:	2d07      	cmp	r5, #7
   bf654:	dc04      	bgt.n	bf660 <__hexnan+0xa0>
   bf656:	462a      	mov	r2, r5
   bf658:	4649      	mov	r1, r9
   bf65a:	4620      	mov	r0, r4
   bf65c:	f7ff ff8a 	bl	bf574 <L_shift>
   bf660:	4544      	cmp	r4, r8
   bf662:	d934      	bls.n	bf6ce <__hexnan+0x10e>
   bf664:	f1a8 0204 	sub.w	r2, r8, #4
   bf668:	4623      	mov	r3, r4
   bf66a:	f853 1b04 	ldr.w	r1, [r3], #4
   bf66e:	f842 1f04 	str.w	r1, [r2, #4]!
   bf672:	429f      	cmp	r7, r3
   bf674:	d2f9      	bcs.n	bf66a <__hexnan+0xaa>
   bf676:	1b3b      	subs	r3, r7, r4
   bf678:	f023 0303 	bic.w	r3, r3, #3
   bf67c:	3304      	adds	r3, #4
   bf67e:	3401      	adds	r4, #1
   bf680:	3e03      	subs	r6, #3
   bf682:	42b4      	cmp	r4, r6
   bf684:	bf88      	it	hi
   bf686:	2304      	movhi	r3, #4
   bf688:	4443      	add	r3, r8
   bf68a:	2200      	movs	r2, #0
   bf68c:	f843 2b04 	str.w	r2, [r3], #4
   bf690:	429f      	cmp	r7, r3
   bf692:	d2fb      	bcs.n	bf68c <__hexnan+0xcc>
   bf694:	683b      	ldr	r3, [r7, #0]
   bf696:	b91b      	cbnz	r3, bf6a0 <__hexnan+0xe0>
   bf698:	4547      	cmp	r7, r8
   bf69a:	d127      	bne.n	bf6ec <__hexnan+0x12c>
   bf69c:	2301      	movs	r3, #1
   bf69e:	603b      	str	r3, [r7, #0]
   bf6a0:	2005      	movs	r0, #5
   bf6a2:	e026      	b.n	bf6f2 <__hexnan+0x132>
   bf6a4:	3501      	adds	r5, #1
   bf6a6:	2d08      	cmp	r5, #8
   bf6a8:	f10b 0b01 	add.w	fp, fp, #1
   bf6ac:	dd06      	ble.n	bf6bc <__hexnan+0xfc>
   bf6ae:	4544      	cmp	r4, r8
   bf6b0:	d9c3      	bls.n	bf63a <__hexnan+0x7a>
   bf6b2:	2300      	movs	r3, #0
   bf6b4:	f844 3c04 	str.w	r3, [r4, #-4]
   bf6b8:	2501      	movs	r5, #1
   bf6ba:	3c04      	subs	r4, #4
   bf6bc:	6822      	ldr	r2, [r4, #0]
   bf6be:	f000 000f 	and.w	r0, r0, #15
   bf6c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bf6c6:	6022      	str	r2, [r4, #0]
   bf6c8:	e7b7      	b.n	bf63a <__hexnan+0x7a>
   bf6ca:	2508      	movs	r5, #8
   bf6cc:	e7b5      	b.n	bf63a <__hexnan+0x7a>
   bf6ce:	9b01      	ldr	r3, [sp, #4]
   bf6d0:	2b00      	cmp	r3, #0
   bf6d2:	d0df      	beq.n	bf694 <__hexnan+0xd4>
   bf6d4:	f04f 32ff 	mov.w	r2, #4294967295
   bf6d8:	f1c3 0320 	rsb	r3, r3, #32
   bf6dc:	fa22 f303 	lsr.w	r3, r2, r3
   bf6e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bf6e4:	401a      	ands	r2, r3
   bf6e6:	f846 2c04 	str.w	r2, [r6, #-4]
   bf6ea:	e7d3      	b.n	bf694 <__hexnan+0xd4>
   bf6ec:	3f04      	subs	r7, #4
   bf6ee:	e7d1      	b.n	bf694 <__hexnan+0xd4>
   bf6f0:	2004      	movs	r0, #4
   bf6f2:	b007      	add	sp, #28
   bf6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf6f8 <__retarget_lock_acquire_recursive>:
   bf6f8:	4770      	bx	lr

000bf6fa <__retarget_lock_release>:
   bf6fa:	4770      	bx	lr

000bf6fc <__retarget_lock_release_recursive>:
   bf6fc:	4770      	bx	lr

000bf6fe <__ascii_mbtowc>:
   bf6fe:	b082      	sub	sp, #8
   bf700:	b901      	cbnz	r1, bf704 <__ascii_mbtowc+0x6>
   bf702:	a901      	add	r1, sp, #4
   bf704:	b142      	cbz	r2, bf718 <__ascii_mbtowc+0x1a>
   bf706:	b14b      	cbz	r3, bf71c <__ascii_mbtowc+0x1e>
   bf708:	7813      	ldrb	r3, [r2, #0]
   bf70a:	600b      	str	r3, [r1, #0]
   bf70c:	7812      	ldrb	r2, [r2, #0]
   bf70e:	1e10      	subs	r0, r2, #0
   bf710:	bf18      	it	ne
   bf712:	2001      	movne	r0, #1
   bf714:	b002      	add	sp, #8
   bf716:	4770      	bx	lr
   bf718:	4610      	mov	r0, r2
   bf71a:	e7fb      	b.n	bf714 <__ascii_mbtowc+0x16>
   bf71c:	f06f 0001 	mvn.w	r0, #1
   bf720:	e7f8      	b.n	bf714 <__ascii_mbtowc+0x16>
	...

000bf724 <_Balloc>:
   bf724:	b570      	push	{r4, r5, r6, lr}
   bf726:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf728:	4604      	mov	r4, r0
   bf72a:	460d      	mov	r5, r1
   bf72c:	b976      	cbnz	r6, bf74c <_Balloc+0x28>
   bf72e:	2010      	movs	r0, #16
   bf730:	f7f9 ff06 	bl	b9540 <malloc>
   bf734:	4602      	mov	r2, r0
   bf736:	6260      	str	r0, [r4, #36]	; 0x24
   bf738:	b920      	cbnz	r0, bf744 <_Balloc+0x20>
   bf73a:	4b18      	ldr	r3, [pc, #96]	; (bf79c <_Balloc+0x78>)
   bf73c:	4818      	ldr	r0, [pc, #96]	; (bf7a0 <_Balloc+0x7c>)
   bf73e:	2166      	movs	r1, #102	; 0x66
   bf740:	f7f9 ff4e 	bl	b95e0 <__assert_func>
   bf744:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf748:	6006      	str	r6, [r0, #0]
   bf74a:	60c6      	str	r6, [r0, #12]
   bf74c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bf74e:	68f3      	ldr	r3, [r6, #12]
   bf750:	b183      	cbz	r3, bf774 <_Balloc+0x50>
   bf752:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf754:	68db      	ldr	r3, [r3, #12]
   bf756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bf75a:	b9b8      	cbnz	r0, bf78c <_Balloc+0x68>
   bf75c:	2101      	movs	r1, #1
   bf75e:	fa01 f605 	lsl.w	r6, r1, r5
   bf762:	1d72      	adds	r2, r6, #5
   bf764:	0092      	lsls	r2, r2, #2
   bf766:	4620      	mov	r0, r4
   bf768:	f000 fc9d 	bl	c00a6 <_calloc_r>
   bf76c:	b160      	cbz	r0, bf788 <_Balloc+0x64>
   bf76e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bf772:	e00e      	b.n	bf792 <_Balloc+0x6e>
   bf774:	2221      	movs	r2, #33	; 0x21
   bf776:	2104      	movs	r1, #4
   bf778:	4620      	mov	r0, r4
   bf77a:	f000 fc94 	bl	c00a6 <_calloc_r>
   bf77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf780:	60f0      	str	r0, [r6, #12]
   bf782:	68db      	ldr	r3, [r3, #12]
   bf784:	2b00      	cmp	r3, #0
   bf786:	d1e4      	bne.n	bf752 <_Balloc+0x2e>
   bf788:	2000      	movs	r0, #0
   bf78a:	bd70      	pop	{r4, r5, r6, pc}
   bf78c:	6802      	ldr	r2, [r0, #0]
   bf78e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bf792:	2300      	movs	r3, #0
   bf794:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bf798:	e7f7      	b.n	bf78a <_Balloc+0x66>
   bf79a:	bf00      	nop
   bf79c:	000c197d 	.word	0x000c197d
   bf7a0:	000c1c1c 	.word	0x000c1c1c

000bf7a4 <_Bfree>:
   bf7a4:	b570      	push	{r4, r5, r6, lr}
   bf7a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf7a8:	4605      	mov	r5, r0
   bf7aa:	460c      	mov	r4, r1
   bf7ac:	b976      	cbnz	r6, bf7cc <_Bfree+0x28>
   bf7ae:	2010      	movs	r0, #16
   bf7b0:	f7f9 fec6 	bl	b9540 <malloc>
   bf7b4:	4602      	mov	r2, r0
   bf7b6:	6268      	str	r0, [r5, #36]	; 0x24
   bf7b8:	b920      	cbnz	r0, bf7c4 <_Bfree+0x20>
   bf7ba:	4b09      	ldr	r3, [pc, #36]	; (bf7e0 <_Bfree+0x3c>)
   bf7bc:	4809      	ldr	r0, [pc, #36]	; (bf7e4 <_Bfree+0x40>)
   bf7be:	218a      	movs	r1, #138	; 0x8a
   bf7c0:	f7f9 ff0e 	bl	b95e0 <__assert_func>
   bf7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf7c8:	6006      	str	r6, [r0, #0]
   bf7ca:	60c6      	str	r6, [r0, #12]
   bf7cc:	b13c      	cbz	r4, bf7de <_Bfree+0x3a>
   bf7ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bf7d0:	6862      	ldr	r2, [r4, #4]
   bf7d2:	68db      	ldr	r3, [r3, #12]
   bf7d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bf7d8:	6021      	str	r1, [r4, #0]
   bf7da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bf7de:	bd70      	pop	{r4, r5, r6, pc}
   bf7e0:	000c197d 	.word	0x000c197d
   bf7e4:	000c1c1c 	.word	0x000c1c1c

000bf7e8 <__multadd>:
   bf7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf7ec:	690d      	ldr	r5, [r1, #16]
   bf7ee:	4607      	mov	r7, r0
   bf7f0:	460c      	mov	r4, r1
   bf7f2:	461e      	mov	r6, r3
   bf7f4:	f101 0c14 	add.w	ip, r1, #20
   bf7f8:	2000      	movs	r0, #0
   bf7fa:	f8dc 3000 	ldr.w	r3, [ip]
   bf7fe:	b299      	uxth	r1, r3
   bf800:	fb02 6101 	mla	r1, r2, r1, r6
   bf804:	0c1e      	lsrs	r6, r3, #16
   bf806:	0c0b      	lsrs	r3, r1, #16
   bf808:	fb02 3306 	mla	r3, r2, r6, r3
   bf80c:	b289      	uxth	r1, r1
   bf80e:	3001      	adds	r0, #1
   bf810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bf814:	4285      	cmp	r5, r0
   bf816:	f84c 1b04 	str.w	r1, [ip], #4
   bf81a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bf81e:	dcec      	bgt.n	bf7fa <__multadd+0x12>
   bf820:	b30e      	cbz	r6, bf866 <__multadd+0x7e>
   bf822:	68a3      	ldr	r3, [r4, #8]
   bf824:	42ab      	cmp	r3, r5
   bf826:	dc19      	bgt.n	bf85c <__multadd+0x74>
   bf828:	6861      	ldr	r1, [r4, #4]
   bf82a:	4638      	mov	r0, r7
   bf82c:	3101      	adds	r1, #1
   bf82e:	f7ff ff79 	bl	bf724 <_Balloc>
   bf832:	4680      	mov	r8, r0
   bf834:	b928      	cbnz	r0, bf842 <__multadd+0x5a>
   bf836:	4602      	mov	r2, r0
   bf838:	4b0c      	ldr	r3, [pc, #48]	; (bf86c <__multadd+0x84>)
   bf83a:	480d      	ldr	r0, [pc, #52]	; (bf870 <__multadd+0x88>)
   bf83c:	21b5      	movs	r1, #181	; 0xb5
   bf83e:	f7f9 fecf 	bl	b95e0 <__assert_func>
   bf842:	6922      	ldr	r2, [r4, #16]
   bf844:	3202      	adds	r2, #2
   bf846:	f104 010c 	add.w	r1, r4, #12
   bf84a:	0092      	lsls	r2, r2, #2
   bf84c:	300c      	adds	r0, #12
   bf84e:	f7fe fbb0 	bl	bdfb2 <memcpy>
   bf852:	4621      	mov	r1, r4
   bf854:	4638      	mov	r0, r7
   bf856:	f7ff ffa5 	bl	bf7a4 <_Bfree>
   bf85a:	4644      	mov	r4, r8
   bf85c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bf860:	3501      	adds	r5, #1
   bf862:	615e      	str	r6, [r3, #20]
   bf864:	6125      	str	r5, [r4, #16]
   bf866:	4620      	mov	r0, r4
   bf868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf86c:	000c1b71 	.word	0x000c1b71
   bf870:	000c1c1c 	.word	0x000c1c1c

000bf874 <__s2b>:
   bf874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf878:	460c      	mov	r4, r1
   bf87a:	4615      	mov	r5, r2
   bf87c:	461f      	mov	r7, r3
   bf87e:	2209      	movs	r2, #9
   bf880:	3308      	adds	r3, #8
   bf882:	4606      	mov	r6, r0
   bf884:	fb93 f3f2 	sdiv	r3, r3, r2
   bf888:	2100      	movs	r1, #0
   bf88a:	2201      	movs	r2, #1
   bf88c:	429a      	cmp	r2, r3
   bf88e:	db09      	blt.n	bf8a4 <__s2b+0x30>
   bf890:	4630      	mov	r0, r6
   bf892:	f7ff ff47 	bl	bf724 <_Balloc>
   bf896:	b940      	cbnz	r0, bf8aa <__s2b+0x36>
   bf898:	4602      	mov	r2, r0
   bf89a:	4b19      	ldr	r3, [pc, #100]	; (bf900 <__s2b+0x8c>)
   bf89c:	4819      	ldr	r0, [pc, #100]	; (bf904 <__s2b+0x90>)
   bf89e:	21ce      	movs	r1, #206	; 0xce
   bf8a0:	f7f9 fe9e 	bl	b95e0 <__assert_func>
   bf8a4:	0052      	lsls	r2, r2, #1
   bf8a6:	3101      	adds	r1, #1
   bf8a8:	e7f0      	b.n	bf88c <__s2b+0x18>
   bf8aa:	9b08      	ldr	r3, [sp, #32]
   bf8ac:	6143      	str	r3, [r0, #20]
   bf8ae:	2d09      	cmp	r5, #9
   bf8b0:	f04f 0301 	mov.w	r3, #1
   bf8b4:	6103      	str	r3, [r0, #16]
   bf8b6:	dd16      	ble.n	bf8e6 <__s2b+0x72>
   bf8b8:	f104 0909 	add.w	r9, r4, #9
   bf8bc:	46c8      	mov	r8, r9
   bf8be:	442c      	add	r4, r5
   bf8c0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bf8c4:	4601      	mov	r1, r0
   bf8c6:	3b30      	subs	r3, #48	; 0x30
   bf8c8:	220a      	movs	r2, #10
   bf8ca:	4630      	mov	r0, r6
   bf8cc:	f7ff ff8c 	bl	bf7e8 <__multadd>
   bf8d0:	45a0      	cmp	r8, r4
   bf8d2:	d1f5      	bne.n	bf8c0 <__s2b+0x4c>
   bf8d4:	f1a5 0408 	sub.w	r4, r5, #8
   bf8d8:	444c      	add	r4, r9
   bf8da:	1b2d      	subs	r5, r5, r4
   bf8dc:	1963      	adds	r3, r4, r5
   bf8de:	42bb      	cmp	r3, r7
   bf8e0:	db04      	blt.n	bf8ec <__s2b+0x78>
   bf8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf8e6:	340a      	adds	r4, #10
   bf8e8:	2509      	movs	r5, #9
   bf8ea:	e7f6      	b.n	bf8da <__s2b+0x66>
   bf8ec:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf8f0:	4601      	mov	r1, r0
   bf8f2:	3b30      	subs	r3, #48	; 0x30
   bf8f4:	220a      	movs	r2, #10
   bf8f6:	4630      	mov	r0, r6
   bf8f8:	f7ff ff76 	bl	bf7e8 <__multadd>
   bf8fc:	e7ee      	b.n	bf8dc <__s2b+0x68>
   bf8fe:	bf00      	nop
   bf900:	000c1b71 	.word	0x000c1b71
   bf904:	000c1c1c 	.word	0x000c1c1c

000bf908 <__hi0bits>:
   bf908:	0c03      	lsrs	r3, r0, #16
   bf90a:	041b      	lsls	r3, r3, #16
   bf90c:	b9d3      	cbnz	r3, bf944 <__hi0bits+0x3c>
   bf90e:	0400      	lsls	r0, r0, #16
   bf910:	2310      	movs	r3, #16
   bf912:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bf916:	bf04      	itt	eq
   bf918:	0200      	lsleq	r0, r0, #8
   bf91a:	3308      	addeq	r3, #8
   bf91c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bf920:	bf04      	itt	eq
   bf922:	0100      	lsleq	r0, r0, #4
   bf924:	3304      	addeq	r3, #4
   bf926:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bf92a:	bf04      	itt	eq
   bf92c:	0080      	lsleq	r0, r0, #2
   bf92e:	3302      	addeq	r3, #2
   bf930:	2800      	cmp	r0, #0
   bf932:	db05      	blt.n	bf940 <__hi0bits+0x38>
   bf934:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bf938:	f103 0301 	add.w	r3, r3, #1
   bf93c:	bf08      	it	eq
   bf93e:	2320      	moveq	r3, #32
   bf940:	4618      	mov	r0, r3
   bf942:	4770      	bx	lr
   bf944:	2300      	movs	r3, #0
   bf946:	e7e4      	b.n	bf912 <__hi0bits+0xa>

000bf948 <__lo0bits>:
   bf948:	6803      	ldr	r3, [r0, #0]
   bf94a:	f013 0207 	ands.w	r2, r3, #7
   bf94e:	4601      	mov	r1, r0
   bf950:	d00b      	beq.n	bf96a <__lo0bits+0x22>
   bf952:	07da      	lsls	r2, r3, #31
   bf954:	d423      	bmi.n	bf99e <__lo0bits+0x56>
   bf956:	0798      	lsls	r0, r3, #30
   bf958:	bf49      	itett	mi
   bf95a:	085b      	lsrmi	r3, r3, #1
   bf95c:	089b      	lsrpl	r3, r3, #2
   bf95e:	2001      	movmi	r0, #1
   bf960:	600b      	strmi	r3, [r1, #0]
   bf962:	bf5c      	itt	pl
   bf964:	600b      	strpl	r3, [r1, #0]
   bf966:	2002      	movpl	r0, #2
   bf968:	4770      	bx	lr
   bf96a:	b298      	uxth	r0, r3
   bf96c:	b9a8      	cbnz	r0, bf99a <__lo0bits+0x52>
   bf96e:	0c1b      	lsrs	r3, r3, #16
   bf970:	2010      	movs	r0, #16
   bf972:	b2da      	uxtb	r2, r3
   bf974:	b90a      	cbnz	r2, bf97a <__lo0bits+0x32>
   bf976:	3008      	adds	r0, #8
   bf978:	0a1b      	lsrs	r3, r3, #8
   bf97a:	071a      	lsls	r2, r3, #28
   bf97c:	bf04      	itt	eq
   bf97e:	091b      	lsreq	r3, r3, #4
   bf980:	3004      	addeq	r0, #4
   bf982:	079a      	lsls	r2, r3, #30
   bf984:	bf04      	itt	eq
   bf986:	089b      	lsreq	r3, r3, #2
   bf988:	3002      	addeq	r0, #2
   bf98a:	07da      	lsls	r2, r3, #31
   bf98c:	d403      	bmi.n	bf996 <__lo0bits+0x4e>
   bf98e:	085b      	lsrs	r3, r3, #1
   bf990:	f100 0001 	add.w	r0, r0, #1
   bf994:	d005      	beq.n	bf9a2 <__lo0bits+0x5a>
   bf996:	600b      	str	r3, [r1, #0]
   bf998:	4770      	bx	lr
   bf99a:	4610      	mov	r0, r2
   bf99c:	e7e9      	b.n	bf972 <__lo0bits+0x2a>
   bf99e:	2000      	movs	r0, #0
   bf9a0:	4770      	bx	lr
   bf9a2:	2020      	movs	r0, #32
   bf9a4:	4770      	bx	lr
	...

000bf9a8 <__i2b>:
   bf9a8:	b510      	push	{r4, lr}
   bf9aa:	460c      	mov	r4, r1
   bf9ac:	2101      	movs	r1, #1
   bf9ae:	f7ff feb9 	bl	bf724 <_Balloc>
   bf9b2:	4602      	mov	r2, r0
   bf9b4:	b928      	cbnz	r0, bf9c2 <__i2b+0x1a>
   bf9b6:	4b05      	ldr	r3, [pc, #20]	; (bf9cc <__i2b+0x24>)
   bf9b8:	4805      	ldr	r0, [pc, #20]	; (bf9d0 <__i2b+0x28>)
   bf9ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bf9be:	f7f9 fe0f 	bl	b95e0 <__assert_func>
   bf9c2:	2301      	movs	r3, #1
   bf9c4:	6144      	str	r4, [r0, #20]
   bf9c6:	6103      	str	r3, [r0, #16]
   bf9c8:	bd10      	pop	{r4, pc}
   bf9ca:	bf00      	nop
   bf9cc:	000c1b71 	.word	0x000c1b71
   bf9d0:	000c1c1c 	.word	0x000c1c1c

000bf9d4 <__multiply>:
   bf9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf9d8:	4691      	mov	r9, r2
   bf9da:	690a      	ldr	r2, [r1, #16]
   bf9dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bf9e0:	429a      	cmp	r2, r3
   bf9e2:	bfb8      	it	lt
   bf9e4:	460b      	movlt	r3, r1
   bf9e6:	460c      	mov	r4, r1
   bf9e8:	bfbc      	itt	lt
   bf9ea:	464c      	movlt	r4, r9
   bf9ec:	4699      	movlt	r9, r3
   bf9ee:	6927      	ldr	r7, [r4, #16]
   bf9f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bf9f4:	68a3      	ldr	r3, [r4, #8]
   bf9f6:	6861      	ldr	r1, [r4, #4]
   bf9f8:	eb07 060a 	add.w	r6, r7, sl
   bf9fc:	42b3      	cmp	r3, r6
   bf9fe:	b085      	sub	sp, #20
   bfa00:	bfb8      	it	lt
   bfa02:	3101      	addlt	r1, #1
   bfa04:	f7ff fe8e 	bl	bf724 <_Balloc>
   bfa08:	b930      	cbnz	r0, bfa18 <__multiply+0x44>
   bfa0a:	4602      	mov	r2, r0
   bfa0c:	4b44      	ldr	r3, [pc, #272]	; (bfb20 <__multiply+0x14c>)
   bfa0e:	4845      	ldr	r0, [pc, #276]	; (bfb24 <__multiply+0x150>)
   bfa10:	f240 115d 	movw	r1, #349	; 0x15d
   bfa14:	f7f9 fde4 	bl	b95e0 <__assert_func>
   bfa18:	f100 0514 	add.w	r5, r0, #20
   bfa1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bfa20:	462b      	mov	r3, r5
   bfa22:	2200      	movs	r2, #0
   bfa24:	4543      	cmp	r3, r8
   bfa26:	d321      	bcc.n	bfa6c <__multiply+0x98>
   bfa28:	f104 0314 	add.w	r3, r4, #20
   bfa2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bfa30:	f109 0314 	add.w	r3, r9, #20
   bfa34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bfa38:	9202      	str	r2, [sp, #8]
   bfa3a:	1b3a      	subs	r2, r7, r4
   bfa3c:	3a15      	subs	r2, #21
   bfa3e:	f022 0203 	bic.w	r2, r2, #3
   bfa42:	3204      	adds	r2, #4
   bfa44:	f104 0115 	add.w	r1, r4, #21
   bfa48:	428f      	cmp	r7, r1
   bfa4a:	bf38      	it	cc
   bfa4c:	2204      	movcc	r2, #4
   bfa4e:	9201      	str	r2, [sp, #4]
   bfa50:	9a02      	ldr	r2, [sp, #8]
   bfa52:	9303      	str	r3, [sp, #12]
   bfa54:	429a      	cmp	r2, r3
   bfa56:	d80c      	bhi.n	bfa72 <__multiply+0x9e>
   bfa58:	2e00      	cmp	r6, #0
   bfa5a:	dd03      	ble.n	bfa64 <__multiply+0x90>
   bfa5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bfa60:	2b00      	cmp	r3, #0
   bfa62:	d05a      	beq.n	bfb1a <__multiply+0x146>
   bfa64:	6106      	str	r6, [r0, #16]
   bfa66:	b005      	add	sp, #20
   bfa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfa6c:	f843 2b04 	str.w	r2, [r3], #4
   bfa70:	e7d8      	b.n	bfa24 <__multiply+0x50>
   bfa72:	f8b3 a000 	ldrh.w	sl, [r3]
   bfa76:	f1ba 0f00 	cmp.w	sl, #0
   bfa7a:	d024      	beq.n	bfac6 <__multiply+0xf2>
   bfa7c:	f104 0e14 	add.w	lr, r4, #20
   bfa80:	46a9      	mov	r9, r5
   bfa82:	f04f 0c00 	mov.w	ip, #0
   bfa86:	f85e 2b04 	ldr.w	r2, [lr], #4
   bfa8a:	f8d9 1000 	ldr.w	r1, [r9]
   bfa8e:	fa1f fb82 	uxth.w	fp, r2
   bfa92:	b289      	uxth	r1, r1
   bfa94:	fb0a 110b 	mla	r1, sl, fp, r1
   bfa98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bfa9c:	f8d9 2000 	ldr.w	r2, [r9]
   bfaa0:	4461      	add	r1, ip
   bfaa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfaa6:	fb0a c20b 	mla	r2, sl, fp, ip
   bfaaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bfaae:	b289      	uxth	r1, r1
   bfab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bfab4:	4577      	cmp	r7, lr
   bfab6:	f849 1b04 	str.w	r1, [r9], #4
   bfaba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfabe:	d8e2      	bhi.n	bfa86 <__multiply+0xb2>
   bfac0:	9a01      	ldr	r2, [sp, #4]
   bfac2:	f845 c002 	str.w	ip, [r5, r2]
   bfac6:	9a03      	ldr	r2, [sp, #12]
   bfac8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bfacc:	3304      	adds	r3, #4
   bface:	f1b9 0f00 	cmp.w	r9, #0
   bfad2:	d020      	beq.n	bfb16 <__multiply+0x142>
   bfad4:	6829      	ldr	r1, [r5, #0]
   bfad6:	f104 0c14 	add.w	ip, r4, #20
   bfada:	46ae      	mov	lr, r5
   bfadc:	f04f 0a00 	mov.w	sl, #0
   bfae0:	f8bc b000 	ldrh.w	fp, [ip]
   bfae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bfae8:	fb09 220b 	mla	r2, r9, fp, r2
   bfaec:	4492      	add	sl, r2
   bfaee:	b289      	uxth	r1, r1
   bfaf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bfaf4:	f84e 1b04 	str.w	r1, [lr], #4
   bfaf8:	f85c 2b04 	ldr.w	r2, [ip], #4
   bfafc:	f8be 1000 	ldrh.w	r1, [lr]
   bfb00:	0c12      	lsrs	r2, r2, #16
   bfb02:	fb09 1102 	mla	r1, r9, r2, r1
   bfb06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bfb0a:	4567      	cmp	r7, ip
   bfb0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bfb10:	d8e6      	bhi.n	bfae0 <__multiply+0x10c>
   bfb12:	9a01      	ldr	r2, [sp, #4]
   bfb14:	50a9      	str	r1, [r5, r2]
   bfb16:	3504      	adds	r5, #4
   bfb18:	e79a      	b.n	bfa50 <__multiply+0x7c>
   bfb1a:	3e01      	subs	r6, #1
   bfb1c:	e79c      	b.n	bfa58 <__multiply+0x84>
   bfb1e:	bf00      	nop
   bfb20:	000c1b71 	.word	0x000c1b71
   bfb24:	000c1c1c 	.word	0x000c1c1c

000bfb28 <__pow5mult>:
   bfb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfb2c:	4615      	mov	r5, r2
   bfb2e:	f012 0203 	ands.w	r2, r2, #3
   bfb32:	4606      	mov	r6, r0
   bfb34:	460f      	mov	r7, r1
   bfb36:	d007      	beq.n	bfb48 <__pow5mult+0x20>
   bfb38:	4c25      	ldr	r4, [pc, #148]	; (bfbd0 <__pow5mult+0xa8>)
   bfb3a:	3a01      	subs	r2, #1
   bfb3c:	2300      	movs	r3, #0
   bfb3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bfb42:	f7ff fe51 	bl	bf7e8 <__multadd>
   bfb46:	4607      	mov	r7, r0
   bfb48:	10ad      	asrs	r5, r5, #2
   bfb4a:	d03d      	beq.n	bfbc8 <__pow5mult+0xa0>
   bfb4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bfb4e:	b97c      	cbnz	r4, bfb70 <__pow5mult+0x48>
   bfb50:	2010      	movs	r0, #16
   bfb52:	f7f9 fcf5 	bl	b9540 <malloc>
   bfb56:	4602      	mov	r2, r0
   bfb58:	6270      	str	r0, [r6, #36]	; 0x24
   bfb5a:	b928      	cbnz	r0, bfb68 <__pow5mult+0x40>
   bfb5c:	4b1d      	ldr	r3, [pc, #116]	; (bfbd4 <__pow5mult+0xac>)
   bfb5e:	481e      	ldr	r0, [pc, #120]	; (bfbd8 <__pow5mult+0xb0>)
   bfb60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bfb64:	f7f9 fd3c 	bl	b95e0 <__assert_func>
   bfb68:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfb6c:	6004      	str	r4, [r0, #0]
   bfb6e:	60c4      	str	r4, [r0, #12]
   bfb70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bfb74:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bfb78:	b94c      	cbnz	r4, bfb8e <__pow5mult+0x66>
   bfb7a:	f240 2171 	movw	r1, #625	; 0x271
   bfb7e:	4630      	mov	r0, r6
   bfb80:	f7ff ff12 	bl	bf9a8 <__i2b>
   bfb84:	2300      	movs	r3, #0
   bfb86:	f8c8 0008 	str.w	r0, [r8, #8]
   bfb8a:	4604      	mov	r4, r0
   bfb8c:	6003      	str	r3, [r0, #0]
   bfb8e:	f04f 0900 	mov.w	r9, #0
   bfb92:	07eb      	lsls	r3, r5, #31
   bfb94:	d50a      	bpl.n	bfbac <__pow5mult+0x84>
   bfb96:	4639      	mov	r1, r7
   bfb98:	4622      	mov	r2, r4
   bfb9a:	4630      	mov	r0, r6
   bfb9c:	f7ff ff1a 	bl	bf9d4 <__multiply>
   bfba0:	4639      	mov	r1, r7
   bfba2:	4680      	mov	r8, r0
   bfba4:	4630      	mov	r0, r6
   bfba6:	f7ff fdfd 	bl	bf7a4 <_Bfree>
   bfbaa:	4647      	mov	r7, r8
   bfbac:	106d      	asrs	r5, r5, #1
   bfbae:	d00b      	beq.n	bfbc8 <__pow5mult+0xa0>
   bfbb0:	6820      	ldr	r0, [r4, #0]
   bfbb2:	b938      	cbnz	r0, bfbc4 <__pow5mult+0x9c>
   bfbb4:	4622      	mov	r2, r4
   bfbb6:	4621      	mov	r1, r4
   bfbb8:	4630      	mov	r0, r6
   bfbba:	f7ff ff0b 	bl	bf9d4 <__multiply>
   bfbbe:	6020      	str	r0, [r4, #0]
   bfbc0:	f8c0 9000 	str.w	r9, [r0]
   bfbc4:	4604      	mov	r4, r0
   bfbc6:	e7e4      	b.n	bfb92 <__pow5mult+0x6a>
   bfbc8:	4638      	mov	r0, r7
   bfbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfbce:	bf00      	nop
   bfbd0:	000c1d90 	.word	0x000c1d90
   bfbd4:	000c197d 	.word	0x000c197d
   bfbd8:	000c1c1c 	.word	0x000c1c1c

000bfbdc <__lshift>:
   bfbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfbe0:	460c      	mov	r4, r1
   bfbe2:	6849      	ldr	r1, [r1, #4]
   bfbe4:	6923      	ldr	r3, [r4, #16]
   bfbe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bfbea:	68a3      	ldr	r3, [r4, #8]
   bfbec:	4607      	mov	r7, r0
   bfbee:	4691      	mov	r9, r2
   bfbf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bfbf4:	f108 0601 	add.w	r6, r8, #1
   bfbf8:	42b3      	cmp	r3, r6
   bfbfa:	db0b      	blt.n	bfc14 <__lshift+0x38>
   bfbfc:	4638      	mov	r0, r7
   bfbfe:	f7ff fd91 	bl	bf724 <_Balloc>
   bfc02:	4605      	mov	r5, r0
   bfc04:	b948      	cbnz	r0, bfc1a <__lshift+0x3e>
   bfc06:	4602      	mov	r2, r0
   bfc08:	4b2a      	ldr	r3, [pc, #168]	; (bfcb4 <__lshift+0xd8>)
   bfc0a:	482b      	ldr	r0, [pc, #172]	; (bfcb8 <__lshift+0xdc>)
   bfc0c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bfc10:	f7f9 fce6 	bl	b95e0 <__assert_func>
   bfc14:	3101      	adds	r1, #1
   bfc16:	005b      	lsls	r3, r3, #1
   bfc18:	e7ee      	b.n	bfbf8 <__lshift+0x1c>
   bfc1a:	2300      	movs	r3, #0
   bfc1c:	f100 0114 	add.w	r1, r0, #20
   bfc20:	f100 0210 	add.w	r2, r0, #16
   bfc24:	4618      	mov	r0, r3
   bfc26:	4553      	cmp	r3, sl
   bfc28:	db37      	blt.n	bfc9a <__lshift+0xbe>
   bfc2a:	6920      	ldr	r0, [r4, #16]
   bfc2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bfc30:	f104 0314 	add.w	r3, r4, #20
   bfc34:	f019 091f 	ands.w	r9, r9, #31
   bfc38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bfc3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bfc40:	d02f      	beq.n	bfca2 <__lshift+0xc6>
   bfc42:	f1c9 0e20 	rsb	lr, r9, #32
   bfc46:	468a      	mov	sl, r1
   bfc48:	f04f 0c00 	mov.w	ip, #0
   bfc4c:	681a      	ldr	r2, [r3, #0]
   bfc4e:	fa02 f209 	lsl.w	r2, r2, r9
   bfc52:	ea42 020c 	orr.w	r2, r2, ip
   bfc56:	f84a 2b04 	str.w	r2, [sl], #4
   bfc5a:	f853 2b04 	ldr.w	r2, [r3], #4
   bfc5e:	4298      	cmp	r0, r3
   bfc60:	fa22 fc0e 	lsr.w	ip, r2, lr
   bfc64:	d8f2      	bhi.n	bfc4c <__lshift+0x70>
   bfc66:	1b03      	subs	r3, r0, r4
   bfc68:	3b15      	subs	r3, #21
   bfc6a:	f023 0303 	bic.w	r3, r3, #3
   bfc6e:	3304      	adds	r3, #4
   bfc70:	f104 0215 	add.w	r2, r4, #21
   bfc74:	4290      	cmp	r0, r2
   bfc76:	bf38      	it	cc
   bfc78:	2304      	movcc	r3, #4
   bfc7a:	f841 c003 	str.w	ip, [r1, r3]
   bfc7e:	f1bc 0f00 	cmp.w	ip, #0
   bfc82:	d001      	beq.n	bfc88 <__lshift+0xac>
   bfc84:	f108 0602 	add.w	r6, r8, #2
   bfc88:	3e01      	subs	r6, #1
   bfc8a:	4638      	mov	r0, r7
   bfc8c:	612e      	str	r6, [r5, #16]
   bfc8e:	4621      	mov	r1, r4
   bfc90:	f7ff fd88 	bl	bf7a4 <_Bfree>
   bfc94:	4628      	mov	r0, r5
   bfc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfc9a:	f842 0f04 	str.w	r0, [r2, #4]!
   bfc9e:	3301      	adds	r3, #1
   bfca0:	e7c1      	b.n	bfc26 <__lshift+0x4a>
   bfca2:	3904      	subs	r1, #4
   bfca4:	f853 2b04 	ldr.w	r2, [r3], #4
   bfca8:	f841 2f04 	str.w	r2, [r1, #4]!
   bfcac:	4298      	cmp	r0, r3
   bfcae:	d8f9      	bhi.n	bfca4 <__lshift+0xc8>
   bfcb0:	e7ea      	b.n	bfc88 <__lshift+0xac>
   bfcb2:	bf00      	nop
   bfcb4:	000c1b71 	.word	0x000c1b71
   bfcb8:	000c1c1c 	.word	0x000c1c1c

000bfcbc <__mcmp>:
   bfcbc:	b530      	push	{r4, r5, lr}
   bfcbe:	6902      	ldr	r2, [r0, #16]
   bfcc0:	690c      	ldr	r4, [r1, #16]
   bfcc2:	1b12      	subs	r2, r2, r4
   bfcc4:	d10e      	bne.n	bfce4 <__mcmp+0x28>
   bfcc6:	f100 0314 	add.w	r3, r0, #20
   bfcca:	3114      	adds	r1, #20
   bfccc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bfcd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bfcd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bfcd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bfcdc:	42a5      	cmp	r5, r4
   bfcde:	d003      	beq.n	bfce8 <__mcmp+0x2c>
   bfce0:	d305      	bcc.n	bfcee <__mcmp+0x32>
   bfce2:	2201      	movs	r2, #1
   bfce4:	4610      	mov	r0, r2
   bfce6:	bd30      	pop	{r4, r5, pc}
   bfce8:	4283      	cmp	r3, r0
   bfcea:	d3f3      	bcc.n	bfcd4 <__mcmp+0x18>
   bfcec:	e7fa      	b.n	bfce4 <__mcmp+0x28>
   bfcee:	f04f 32ff 	mov.w	r2, #4294967295
   bfcf2:	e7f7      	b.n	bfce4 <__mcmp+0x28>

000bfcf4 <__mdiff>:
   bfcf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfcf8:	460c      	mov	r4, r1
   bfcfa:	4606      	mov	r6, r0
   bfcfc:	4611      	mov	r1, r2
   bfcfe:	4620      	mov	r0, r4
   bfd00:	4690      	mov	r8, r2
   bfd02:	f7ff ffdb 	bl	bfcbc <__mcmp>
   bfd06:	1e05      	subs	r5, r0, #0
   bfd08:	d110      	bne.n	bfd2c <__mdiff+0x38>
   bfd0a:	4629      	mov	r1, r5
   bfd0c:	4630      	mov	r0, r6
   bfd0e:	f7ff fd09 	bl	bf724 <_Balloc>
   bfd12:	b930      	cbnz	r0, bfd22 <__mdiff+0x2e>
   bfd14:	4b3a      	ldr	r3, [pc, #232]	; (bfe00 <__mdiff+0x10c>)
   bfd16:	4602      	mov	r2, r0
   bfd18:	f240 2132 	movw	r1, #562	; 0x232
   bfd1c:	4839      	ldr	r0, [pc, #228]	; (bfe04 <__mdiff+0x110>)
   bfd1e:	f7f9 fc5f 	bl	b95e0 <__assert_func>
   bfd22:	2301      	movs	r3, #1
   bfd24:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bfd28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfd2c:	bfa4      	itt	ge
   bfd2e:	4643      	movge	r3, r8
   bfd30:	46a0      	movge	r8, r4
   bfd32:	4630      	mov	r0, r6
   bfd34:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bfd38:	bfa6      	itte	ge
   bfd3a:	461c      	movge	r4, r3
   bfd3c:	2500      	movge	r5, #0
   bfd3e:	2501      	movlt	r5, #1
   bfd40:	f7ff fcf0 	bl	bf724 <_Balloc>
   bfd44:	b920      	cbnz	r0, bfd50 <__mdiff+0x5c>
   bfd46:	4b2e      	ldr	r3, [pc, #184]	; (bfe00 <__mdiff+0x10c>)
   bfd48:	4602      	mov	r2, r0
   bfd4a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bfd4e:	e7e5      	b.n	bfd1c <__mdiff+0x28>
   bfd50:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bfd54:	6926      	ldr	r6, [r4, #16]
   bfd56:	60c5      	str	r5, [r0, #12]
   bfd58:	f104 0914 	add.w	r9, r4, #20
   bfd5c:	f108 0514 	add.w	r5, r8, #20
   bfd60:	f100 0e14 	add.w	lr, r0, #20
   bfd64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bfd68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bfd6c:	f108 0210 	add.w	r2, r8, #16
   bfd70:	46f2      	mov	sl, lr
   bfd72:	2100      	movs	r1, #0
   bfd74:	f859 3b04 	ldr.w	r3, [r9], #4
   bfd78:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bfd7c:	fa1f f883 	uxth.w	r8, r3
   bfd80:	fa11 f18b 	uxtah	r1, r1, fp
   bfd84:	0c1b      	lsrs	r3, r3, #16
   bfd86:	eba1 0808 	sub.w	r8, r1, r8
   bfd8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bfd8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bfd92:	fa1f f888 	uxth.w	r8, r8
   bfd96:	1419      	asrs	r1, r3, #16
   bfd98:	454e      	cmp	r6, r9
   bfd9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bfd9e:	f84a 3b04 	str.w	r3, [sl], #4
   bfda2:	d8e7      	bhi.n	bfd74 <__mdiff+0x80>
   bfda4:	1b33      	subs	r3, r6, r4
   bfda6:	3b15      	subs	r3, #21
   bfda8:	f023 0303 	bic.w	r3, r3, #3
   bfdac:	3304      	adds	r3, #4
   bfdae:	3415      	adds	r4, #21
   bfdb0:	42a6      	cmp	r6, r4
   bfdb2:	bf38      	it	cc
   bfdb4:	2304      	movcc	r3, #4
   bfdb6:	441d      	add	r5, r3
   bfdb8:	4473      	add	r3, lr
   bfdba:	469e      	mov	lr, r3
   bfdbc:	462e      	mov	r6, r5
   bfdbe:	4566      	cmp	r6, ip
   bfdc0:	d30e      	bcc.n	bfde0 <__mdiff+0xec>
   bfdc2:	f10c 0203 	add.w	r2, ip, #3
   bfdc6:	1b52      	subs	r2, r2, r5
   bfdc8:	f022 0203 	bic.w	r2, r2, #3
   bfdcc:	3d03      	subs	r5, #3
   bfdce:	45ac      	cmp	ip, r5
   bfdd0:	bf38      	it	cc
   bfdd2:	2200      	movcc	r2, #0
   bfdd4:	441a      	add	r2, r3
   bfdd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bfdda:	b17b      	cbz	r3, bfdfc <__mdiff+0x108>
   bfddc:	6107      	str	r7, [r0, #16]
   bfdde:	e7a3      	b.n	bfd28 <__mdiff+0x34>
   bfde0:	f856 8b04 	ldr.w	r8, [r6], #4
   bfde4:	fa11 f288 	uxtah	r2, r1, r8
   bfde8:	1414      	asrs	r4, r2, #16
   bfdea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bfdee:	b292      	uxth	r2, r2
   bfdf0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bfdf4:	f84e 2b04 	str.w	r2, [lr], #4
   bfdf8:	1421      	asrs	r1, r4, #16
   bfdfa:	e7e0      	b.n	bfdbe <__mdiff+0xca>
   bfdfc:	3f01      	subs	r7, #1
   bfdfe:	e7ea      	b.n	bfdd6 <__mdiff+0xe2>
   bfe00:	000c1b71 	.word	0x000c1b71
   bfe04:	000c1c1c 	.word	0x000c1c1c

000bfe08 <__ulp>:
   bfe08:	b082      	sub	sp, #8
   bfe0a:	ed8d 0b00 	vstr	d0, [sp]
   bfe0e:	9b01      	ldr	r3, [sp, #4]
   bfe10:	4912      	ldr	r1, [pc, #72]	; (bfe5c <__ulp+0x54>)
   bfe12:	4019      	ands	r1, r3
   bfe14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bfe18:	2900      	cmp	r1, #0
   bfe1a:	dd05      	ble.n	bfe28 <__ulp+0x20>
   bfe1c:	2200      	movs	r2, #0
   bfe1e:	460b      	mov	r3, r1
   bfe20:	ec43 2b10 	vmov	d0, r2, r3
   bfe24:	b002      	add	sp, #8
   bfe26:	4770      	bx	lr
   bfe28:	4249      	negs	r1, r1
   bfe2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bfe2e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bfe32:	f04f 0200 	mov.w	r2, #0
   bfe36:	f04f 0300 	mov.w	r3, #0
   bfe3a:	da04      	bge.n	bfe46 <__ulp+0x3e>
   bfe3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bfe40:	fa41 f300 	asr.w	r3, r1, r0
   bfe44:	e7ec      	b.n	bfe20 <__ulp+0x18>
   bfe46:	f1a0 0114 	sub.w	r1, r0, #20
   bfe4a:	291e      	cmp	r1, #30
   bfe4c:	bfda      	itte	le
   bfe4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bfe52:	fa20 f101 	lsrle.w	r1, r0, r1
   bfe56:	2101      	movgt	r1, #1
   bfe58:	460a      	mov	r2, r1
   bfe5a:	e7e1      	b.n	bfe20 <__ulp+0x18>
   bfe5c:	7ff00000 	.word	0x7ff00000

000bfe60 <__b2d>:
   bfe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfe62:	6905      	ldr	r5, [r0, #16]
   bfe64:	f100 0714 	add.w	r7, r0, #20
   bfe68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bfe6c:	1f2e      	subs	r6, r5, #4
   bfe6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bfe72:	4620      	mov	r0, r4
   bfe74:	f7ff fd48 	bl	bf908 <__hi0bits>
   bfe78:	f1c0 0320 	rsb	r3, r0, #32
   bfe7c:	280a      	cmp	r0, #10
   bfe7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bfefc <__b2d+0x9c>
   bfe82:	600b      	str	r3, [r1, #0]
   bfe84:	dc14      	bgt.n	bfeb0 <__b2d+0x50>
   bfe86:	f1c0 0e0b 	rsb	lr, r0, #11
   bfe8a:	fa24 f10e 	lsr.w	r1, r4, lr
   bfe8e:	42b7      	cmp	r7, r6
   bfe90:	ea41 030c 	orr.w	r3, r1, ip
   bfe94:	bf34      	ite	cc
   bfe96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bfe9a:	2100      	movcs	r1, #0
   bfe9c:	3015      	adds	r0, #21
   bfe9e:	fa04 f000 	lsl.w	r0, r4, r0
   bfea2:	fa21 f10e 	lsr.w	r1, r1, lr
   bfea6:	ea40 0201 	orr.w	r2, r0, r1
   bfeaa:	ec43 2b10 	vmov	d0, r2, r3
   bfeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bfeb0:	42b7      	cmp	r7, r6
   bfeb2:	bf3a      	itte	cc
   bfeb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bfeb8:	f1a5 0608 	subcc.w	r6, r5, #8
   bfebc:	2100      	movcs	r1, #0
   bfebe:	380b      	subs	r0, #11
   bfec0:	d017      	beq.n	bfef2 <__b2d+0x92>
   bfec2:	f1c0 0c20 	rsb	ip, r0, #32
   bfec6:	fa04 f500 	lsl.w	r5, r4, r0
   bfeca:	42be      	cmp	r6, r7
   bfecc:	fa21 f40c 	lsr.w	r4, r1, ip
   bfed0:	ea45 0504 	orr.w	r5, r5, r4
   bfed4:	bf8c      	ite	hi
   bfed6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bfeda:	2400      	movls	r4, #0
   bfedc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bfee0:	fa01 f000 	lsl.w	r0, r1, r0
   bfee4:	fa24 f40c 	lsr.w	r4, r4, ip
   bfee8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bfeec:	ea40 0204 	orr.w	r2, r0, r4
   bfef0:	e7db      	b.n	bfeaa <__b2d+0x4a>
   bfef2:	ea44 030c 	orr.w	r3, r4, ip
   bfef6:	460a      	mov	r2, r1
   bfef8:	e7d7      	b.n	bfeaa <__b2d+0x4a>
   bfefa:	bf00      	nop
   bfefc:	3ff00000 	.word	0x3ff00000

000bff00 <__d2b>:
   bff00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bff04:	4689      	mov	r9, r1
   bff06:	2101      	movs	r1, #1
   bff08:	ec57 6b10 	vmov	r6, r7, d0
   bff0c:	4690      	mov	r8, r2
   bff0e:	f7ff fc09 	bl	bf724 <_Balloc>
   bff12:	4604      	mov	r4, r0
   bff14:	b930      	cbnz	r0, bff24 <__d2b+0x24>
   bff16:	4602      	mov	r2, r0
   bff18:	4b25      	ldr	r3, [pc, #148]	; (bffb0 <__d2b+0xb0>)
   bff1a:	4826      	ldr	r0, [pc, #152]	; (bffb4 <__d2b+0xb4>)
   bff1c:	f240 310a 	movw	r1, #778	; 0x30a
   bff20:	f7f9 fb5e 	bl	b95e0 <__assert_func>
   bff24:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bff28:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bff2c:	bb35      	cbnz	r5, bff7c <__d2b+0x7c>
   bff2e:	2e00      	cmp	r6, #0
   bff30:	9301      	str	r3, [sp, #4]
   bff32:	d028      	beq.n	bff86 <__d2b+0x86>
   bff34:	4668      	mov	r0, sp
   bff36:	9600      	str	r6, [sp, #0]
   bff38:	f7ff fd06 	bl	bf948 <__lo0bits>
   bff3c:	9900      	ldr	r1, [sp, #0]
   bff3e:	b300      	cbz	r0, bff82 <__d2b+0x82>
   bff40:	9a01      	ldr	r2, [sp, #4]
   bff42:	f1c0 0320 	rsb	r3, r0, #32
   bff46:	fa02 f303 	lsl.w	r3, r2, r3
   bff4a:	430b      	orrs	r3, r1
   bff4c:	40c2      	lsrs	r2, r0
   bff4e:	6163      	str	r3, [r4, #20]
   bff50:	9201      	str	r2, [sp, #4]
   bff52:	9b01      	ldr	r3, [sp, #4]
   bff54:	61a3      	str	r3, [r4, #24]
   bff56:	2b00      	cmp	r3, #0
   bff58:	bf14      	ite	ne
   bff5a:	2202      	movne	r2, #2
   bff5c:	2201      	moveq	r2, #1
   bff5e:	6122      	str	r2, [r4, #16]
   bff60:	b1d5      	cbz	r5, bff98 <__d2b+0x98>
   bff62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bff66:	4405      	add	r5, r0
   bff68:	f8c9 5000 	str.w	r5, [r9]
   bff6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bff70:	f8c8 0000 	str.w	r0, [r8]
   bff74:	4620      	mov	r0, r4
   bff76:	b003      	add	sp, #12
   bff78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bff7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bff80:	e7d5      	b.n	bff2e <__d2b+0x2e>
   bff82:	6161      	str	r1, [r4, #20]
   bff84:	e7e5      	b.n	bff52 <__d2b+0x52>
   bff86:	a801      	add	r0, sp, #4
   bff88:	f7ff fcde 	bl	bf948 <__lo0bits>
   bff8c:	9b01      	ldr	r3, [sp, #4]
   bff8e:	6163      	str	r3, [r4, #20]
   bff90:	2201      	movs	r2, #1
   bff92:	6122      	str	r2, [r4, #16]
   bff94:	3020      	adds	r0, #32
   bff96:	e7e3      	b.n	bff60 <__d2b+0x60>
   bff98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bff9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bffa0:	f8c9 0000 	str.w	r0, [r9]
   bffa4:	6918      	ldr	r0, [r3, #16]
   bffa6:	f7ff fcaf 	bl	bf908 <__hi0bits>
   bffaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bffae:	e7df      	b.n	bff70 <__d2b+0x70>
   bffb0:	000c1b71 	.word	0x000c1b71
   bffb4:	000c1c1c 	.word	0x000c1c1c

000bffb8 <__ratio>:
   bffb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bffbc:	4688      	mov	r8, r1
   bffbe:	4669      	mov	r1, sp
   bffc0:	4681      	mov	r9, r0
   bffc2:	f7ff ff4d 	bl	bfe60 <__b2d>
   bffc6:	a901      	add	r1, sp, #4
   bffc8:	4640      	mov	r0, r8
   bffca:	ec55 4b10 	vmov	r4, r5, d0
   bffce:	f7ff ff47 	bl	bfe60 <__b2d>
   bffd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bffd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bffda:	eba3 0c02 	sub.w	ip, r3, r2
   bffde:	e9dd 3200 	ldrd	r3, r2, [sp]
   bffe2:	1a9b      	subs	r3, r3, r2
   bffe4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bffe8:	ec51 0b10 	vmov	r0, r1, d0
   bffec:	2b00      	cmp	r3, #0
   bffee:	bfd6      	itet	le
   bfff0:	460a      	movle	r2, r1
   bfff2:	462a      	movgt	r2, r5
   bfff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bfff8:	468b      	mov	fp, r1
   bfffa:	462f      	mov	r7, r5
   bfffc:	bfd4      	ite	le
   bfffe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c0002:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c0006:	4620      	mov	r0, r4
   c0008:	ee10 2a10 	vmov	r2, s0
   c000c:	465b      	mov	r3, fp
   c000e:	4639      	mov	r1, r7
   c0010:	f7fd fdb4 	bl	bdb7c <__aeabi_ddiv>
   c0014:	ec41 0b10 	vmov	d0, r0, r1
   c0018:	b003      	add	sp, #12
   c001a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c001e <__copybits>:
   c001e:	3901      	subs	r1, #1
   c0020:	b570      	push	{r4, r5, r6, lr}
   c0022:	1149      	asrs	r1, r1, #5
   c0024:	6914      	ldr	r4, [r2, #16]
   c0026:	3101      	adds	r1, #1
   c0028:	f102 0314 	add.w	r3, r2, #20
   c002c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0030:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c0034:	1f05      	subs	r5, r0, #4
   c0036:	42a3      	cmp	r3, r4
   c0038:	d30c      	bcc.n	c0054 <__copybits+0x36>
   c003a:	1aa3      	subs	r3, r4, r2
   c003c:	3b11      	subs	r3, #17
   c003e:	f023 0303 	bic.w	r3, r3, #3
   c0042:	3211      	adds	r2, #17
   c0044:	42a2      	cmp	r2, r4
   c0046:	bf88      	it	hi
   c0048:	2300      	movhi	r3, #0
   c004a:	4418      	add	r0, r3
   c004c:	2300      	movs	r3, #0
   c004e:	4288      	cmp	r0, r1
   c0050:	d305      	bcc.n	c005e <__copybits+0x40>
   c0052:	bd70      	pop	{r4, r5, r6, pc}
   c0054:	f853 6b04 	ldr.w	r6, [r3], #4
   c0058:	f845 6f04 	str.w	r6, [r5, #4]!
   c005c:	e7eb      	b.n	c0036 <__copybits+0x18>
   c005e:	f840 3b04 	str.w	r3, [r0], #4
   c0062:	e7f4      	b.n	c004e <__copybits+0x30>

000c0064 <__any_on>:
   c0064:	f100 0214 	add.w	r2, r0, #20
   c0068:	6900      	ldr	r0, [r0, #16]
   c006a:	114b      	asrs	r3, r1, #5
   c006c:	4298      	cmp	r0, r3
   c006e:	b510      	push	{r4, lr}
   c0070:	db11      	blt.n	c0096 <__any_on+0x32>
   c0072:	dd0a      	ble.n	c008a <__any_on+0x26>
   c0074:	f011 011f 	ands.w	r1, r1, #31
   c0078:	d007      	beq.n	c008a <__any_on+0x26>
   c007a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c007e:	fa24 f001 	lsr.w	r0, r4, r1
   c0082:	fa00 f101 	lsl.w	r1, r0, r1
   c0086:	428c      	cmp	r4, r1
   c0088:	d10b      	bne.n	c00a2 <__any_on+0x3e>
   c008a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c008e:	4293      	cmp	r3, r2
   c0090:	d803      	bhi.n	c009a <__any_on+0x36>
   c0092:	2000      	movs	r0, #0
   c0094:	bd10      	pop	{r4, pc}
   c0096:	4603      	mov	r3, r0
   c0098:	e7f7      	b.n	c008a <__any_on+0x26>
   c009a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c009e:	2900      	cmp	r1, #0
   c00a0:	d0f5      	beq.n	c008e <__any_on+0x2a>
   c00a2:	2001      	movs	r0, #1
   c00a4:	e7f6      	b.n	c0094 <__any_on+0x30>

000c00a6 <_calloc_r>:
   c00a6:	b513      	push	{r0, r1, r4, lr}
   c00a8:	434a      	muls	r2, r1
   c00aa:	4611      	mov	r1, r2
   c00ac:	9201      	str	r2, [sp, #4]
   c00ae:	f7f9 fa87 	bl	b95c0 <_malloc_r>
   c00b2:	4604      	mov	r4, r0
   c00b4:	b118      	cbz	r0, c00be <_calloc_r+0x18>
   c00b6:	9a01      	ldr	r2, [sp, #4]
   c00b8:	2100      	movs	r1, #0
   c00ba:	f7fd ffa2 	bl	be002 <memset>
   c00be:	4620      	mov	r0, r4
   c00c0:	b002      	add	sp, #8
   c00c2:	bd10      	pop	{r4, pc}
   c00c4:	0000      	movs	r0, r0
	...

000c00c8 <nan>:
   c00c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; c00d0 <nan+0x8>
   c00cc:	4770      	bx	lr
   c00ce:	bf00      	nop
   c00d0:	00000000 	.word	0x00000000
   c00d4:	7ff80000 	.word	0x7ff80000

000c00d8 <__ascii_wctomb>:
   c00d8:	b149      	cbz	r1, c00ee <__ascii_wctomb+0x16>
   c00da:	2aff      	cmp	r2, #255	; 0xff
   c00dc:	bf85      	ittet	hi
   c00de:	238a      	movhi	r3, #138	; 0x8a
   c00e0:	6003      	strhi	r3, [r0, #0]
   c00e2:	700a      	strbls	r2, [r1, #0]
   c00e4:	f04f 30ff 	movhi.w	r0, #4294967295
   c00e8:	bf98      	it	ls
   c00ea:	2001      	movls	r0, #1
   c00ec:	4770      	bx	lr
   c00ee:	4608      	mov	r0, r1
   c00f0:	4770      	bx	lr
	...

000c00f4 <__aeabi_d2lz>:
   c00f4:	b538      	push	{r3, r4, r5, lr}
   c00f6:	2200      	movs	r2, #0
   c00f8:	2300      	movs	r3, #0
   c00fa:	4604      	mov	r4, r0
   c00fc:	460d      	mov	r5, r1
   c00fe:	f7fd fe85 	bl	bde0c <__aeabi_dcmplt>
   c0102:	b928      	cbnz	r0, c0110 <__aeabi_d2lz+0x1c>
   c0104:	4620      	mov	r0, r4
   c0106:	4629      	mov	r1, r5
   c0108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c010c:	f7fd bf16 	b.w	bdf3c <__aeabi_d2ulz>
   c0110:	4620      	mov	r0, r4
   c0112:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c0116:	f7fd ff11 	bl	bdf3c <__aeabi_d2ulz>
   c011a:	4240      	negs	r0, r0
   c011c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0120:	bd38      	pop	{r3, r4, r5, pc}
   c0122:	bf00      	nop

000c0124 <dynalib_user>:
   c0124:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c0134:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c0144:	7620 7269 7574 6c61 4500 746e 7265 7420      virtual.Enter t
   c0154:	6972 6767 7265 4a00 796f 7473 6369 206b     rigger.Joystick 
   c0164:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c0174:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c0184:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c0194:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c01a4:	2520 2073 4f4d 4544 7525 003e 6966 656c      %s MODE%u>.file
   c01b4:	616e 656d 4600 6c69 2065 2527 2773 6120     name.File '%s' a
   c01c4:	726c 6165 7964 6520 6978 7473 2c73 6420     lready exists, d
   c01d4:	6c65 7465 6e69 2067 6e61 2064 766f 7265     eleting and over
   c01e4:	7277 7469 6e69 0067 7453 7261 6974 676e     writing.Starting
   c01f4:	6f20 6666 6f6c 6461 6f20 2066 6966 656c      offload of file
   c0204:	203a 7325 6600 6c69 6365 6d6f 0070 6552     : %s.filecomp.Re
   c0214:	6361 6568 2064 6e65 2064 666f 6620 6c69     ached end of fil
   c0224:	3a65 2520 0073 6966 656c 6f64 656e 5200     e: %s.filedone.R
   c0234:	6365 6965 6576 2064 6f64 656e 6320 6d6f     eceived done com
   c0244:	616d 646e 2500 2573 3230 0078 6f42 3174     mand.%s%02x.Bot1
   c0254:	6164 0074 4343 2542 6864 6177 7600 6365     dat.CCB%dhwa.vec
   c0264:	6f74 3a72 5f3a 5f4d 6172 676e 5f65 6863     tor::_M_range_ch
   c0274:	6365 3a6b 5f20 6e5f 2820 6877 6369 2068     eck: __n (which 
   c0284:	7369 2520 757a 2029 3d3e 7420 6968 2d73     is %zu) >= this-
   c0294:	733e 7a69 2865 2029 7728 6968 6863 6920     >size() (which i
   c02a4:	2073 7a25 2975 5200 6769 7468 7420 6972     s %zu).Right tri
   c02b4:	6767 7265 4d00 646f 6669 6569 2064 6e61     gger.Modified an
   c02c4:	4f20 2f6e 664f 2066 6f43 746e 6f72 006c      On/Off Control.
   c02d4:	6f42 3a74 2520 2c64 4d20 646f 6669 6569     Bot: %d, Modifie
   c02e4:	2064 5500 2070 7274 6769 6567 0072 6f44     d .Up trigger.Do
   c02f4:	6e77 7420 6972 6767 7265 7600 6365 6f74     wn trigger.vecto
   c0304:	3a72 5f3a 5f4d 6572 6c61 6f6c 5f63 6e69     r::_M_realloc_in
   c0314:	6573 7472 4300 6568 6b63 7573 3a6d 2520     sert.Checksum: %
   c0324:	3230 2c78 2520 3330 0064 7453 6972 676e     02x, %03d.String
   c0334:	4c20 6e65 203a 6425 202c 6843 6365 736b      Len: %d, Checks
   c0344:	6d75 203a 6425 5b00 4157 4e52 205d 654d     um: %d.[WARN] Me
   c0354:	7373 6761 2065 6843 6365 736b 6d75 4420     ssage Checksum D
   c0364:	656f 2073 6f4e 2074 614d 6374 2168 203a     oes Not Match!: 
   c0374:	7325 5700 7261 696e 676e 202c 6863 6365     %s.Warning, chec
   c0384:	736b 6d75 6420 656f 2073 6f6e 2074 616d     ksum does not ma
   c0394:	6374 0068 4343 3225 6e73 6b61 3325 0073     tch.CC%2snak%3s.
   c03a4:	6361 006b 7573 0070 7525 2520 2075 7325     ack.sup.%u %u %s
   c03b4:	2520 0073 7453 7461 7375 5520 6470 7461      %s.Status Updat
   c03c4:	2165 2300 2323 2323 2323 2323 2323 2323     e!.#############
   c03d4:	2323 2323 2323 2323 2323 2323 0023 2323     #############.##
   c03e4:	2020 2020 5320 4154 5554 2053 5055 4144          STATUS UPDA
   c03f4:	4554 2020 2020 2323 2300 2023 2020 2020     TE    ##.##     
   c0404:	2020 6f42 2074 3a23 2520 6431 2020 2020       Bot #: %1d    
   c0414:	2020 2323 2300 2023 2020 2020 4220 7461       ##.##      Bat
   c0424:	2074 3a25 2520 3330 2064 2020 2020 2323     t %: %03d     ##
   c0434:	2300 2023 2020 4c20 4554 2020 4c42 2045     .##    LTE  BLE 
   c0444:	5820 6542 2065 2020 2320 0023 2323 2020      XBee    ##.##  
   c0454:	2020 2520 2064 2020 2520 2064 2020 2020        %d    %d     
   c0464:	6425 2020 2020 2320 0023 2323 2020 614c     %d     ##.##  La
   c0474:	6974 7574 6564 4c20 6e6f 6967 7574 6564     titude Longitude
   c0484:	2020 2323 2300 2023 2e25 6636 2520 362e       ##.## %.6f %.6
   c0494:	2066 2323 7300 736e 2500 2073 7325 2520     f ##.sns.%s %s %
   c04a4:	2064 6425 2520 2064 6425 2520 0064 6f42     d %d %d %d %d.Bo
   c04b4:	2074 3a23 2520 2064 6554 706d 203a 6625     t #: %d Temp: %f
   c04c4:	6e00 6b61 6800 6477 4600 756f 646e 6120     .nak.hwd.Found a
   c04d4:	6e20 7765 7720 7461 7265 6220 746f 4920      new water bot I
   c04e4:	0044 7470 0073 6152 5777 6972 6574 742e     D.pts.RawWrite.t
   c04f4:	7478 4c00 4554 5800 6542 0065 6c42 6575     xt.LTE.XBee.Blue
   c0504:	6f74 746f 0068 654e 2077 7473 6972 676e     tooth.New string
   c0514:	6620 6f72 206d 7325 203a 5b00 4e49 4f46      from %s: .[INFO
   c0524:	205d 6552 6563 7669 6465 4c20 4554 4d20     ] Received LTE M
   c0534:	7365 6173 6567 203a 7325 4e00 7765 4220     essage: %s.New B
   c0544:	2054 6f43 6d6d 6e61 3a64 0020 495b 464e     T Command: .[INF
   c0554:	5d4f 5220 6365 6965 6576 2064 4c42 2045     O] Received BLE 
   c0564:	654d 7373 6761 3a65 2520 0073 654e 2077     Message: %s.New 
   c0574:	4258 6565 4320 6d6f 616d 646e 003a 495b     XBee Command:.[I
   c0584:	464e 5d4f 5220 6365 6965 6576 2064 4258     NFO] Received XB
   c0594:	6565 4d20 7365 6173 6567 203a 7325 4600     ee Message: %s.F
   c05a4:	756f 646e 4220 746f 2320 203a 6425 2520     ound Bot #: %d %
   c05b4:	2064 6425 2520 2064 6425 2520 2064 6425     d %d %d %d %d %d
   c05c4:	2520 2c64 7320 7265 6976 6563 3a73 2520      %d, services: %
   c05d4:	0064 6f46 6e75 2064 656e 2077 6f62 3a74     d.Found new bot:
   c05e4:	2520 0064 6f43 6e6e 6365 6574 2064 6f74      %d.Connected to
   c05f4:	4220 746f 2520 0064 002f 7245 6f72 2c72      Bot %d./.Error,
   c0604:	6320 756f 646c 6e20 746f 6f20 6570 206e      could not open 
   c0614:	6f72 746f 6420 7269 6365 6f74 7972 6f20     root directory o
   c0624:	206e 4453 4320 7261 2e64 4920 2073 7469     n SD Card. Is it
   c0634:	6920 736e 7265 6574 3f64 4300 4243 6425      inserted?.CCB%d
   c0644:	6d64 0070 6552 7571 7365 6574 2064 4453     dmp.Requested SD
   c0654:	4320 7261 2064 6144 6174 6620 6f72 206d      Card Data from 
   c0664:	6f42 2074 6425 4f20 6576 2072 4c42 0a45     Bot %d Over BLE.
   c0674:	4300 7275 6572 746e 796c 6320 6e6f 656e     .Currently conne
   c0684:	7463 6465 7420 206f 6f42 2074 6625 202c     cted to Bot %f, 
   c0694:	656e 6465 7420 206f 6f63 6e6e 6365 2074     need to connect 
   c06a4:	6f74 4220 746f 2520 0064 7553 6363 7365     to Bot %d.Succes
   c06b4:	6673 6c75 796c 6320 6e6f 656e 7463 6465     sfully connected
   c06c4:	7420 206f 6f42 2074 6425 5300 6174 7472      to Bot %d.Start
   c06d4:	6e69 2067 6966 656c 7420 6172 736e 6566     ing file transfe
   c06e4:	2072 7266 6d6f 4220 746f 2520 0064 6946     r from Bot %d.Fi
   c06f4:	696e 6873 6465 7420 6172 736e 6566 7272     nished transferr
   c0704:	6e69 2067 6966 656c 6620 6f72 206d 6f42     ing file from Bo
   c0714:	2074 6425 5200 6365 726f 0064 6142 7474     t %d.Record.Batt
   c0724:	7265 0079 664f 6c66 616f 0064 6553 746e     ery.Offload.Sent
   c0734:	7972 2500 3230 2564 3230 2564 3430 2564     ry.%02d%02d%04d%
   c0744:	3230 2564 3230 2564 3230 0064 6157 6574     02d%02d%02d.Wate
   c0754:	4272 746f 5f00 4f4c 2e47 7874 0074 7245     rBot._LOG.txt.Er
   c0764:	6f72 3a72 6320 756f 646c 6e20 746f 6320     ror: could not c
   c0774:	6e6f 656e 7463 7420 206f 4453 6320 7261     onnect to SD car
   c0784:	2164 2000 7453 7261 6974 676e 0020 3462     d!. Starting .b4
   c0794:	3032 3936 3031 642d 3463 2d62 3735 3334     206910-dc4b-5743
   c07a4:	632d 6238 2d31 3239 3064 3765 3135 3238     -c8b1-92d0e75182
   c07b4:	3062 6200 3234 3630 3139 2d32 6364 6234     b0.b4206912-dc4b
   c07c4:	352d 3437 2d33 3863 3162 392d 6432 6530     -5743-c8b1-92d0e
   c07d4:	3537 3831 6232 0030 3462 3032 3936 3331     75182b0.b4206913
   c07e4:	642d 3463 2d62 3735 3334 632d 6238 2d31     -dc4b-5743-c8b1-
   c07f4:	3239 3064 3765 3135 3238 3062 6200 3234     92d0e75182b0.b42
   c0804:	3630 3139 2d34 6364 6234 352d 3437 2d33     06914-dc4b-5743-
   c0814:	3863 3162 392d 6432 6530 3537 3831 6232     c8b1-92d0e75182b
   c0824:	0030 6e4f 4f00 6666 5000 6972 746e 6465     0.On.Off.Printed
   c0834:	4820 6769 6c68 6769 7468 6465 4d20 6e65      Highlighted Men
   c0844:	2075 7469 6d65 7720 7469 2068 616e 656d     u item with name
   c0854:	203a 7325 4d00 6e65 2075 7469 6d65 3020     : %s.Menu item 0
   c0864:	4d00 6e65 2075 7469 6d65 2520 0064 4343     .Menu item %d.CC
   c0874:	4241 7073 4263 3125 0064 4343 4241 7073     ABspcB%1d.CCABsp
   c0884:	4e63 0042 7245 6f72 2c72 5320 2044 6143     cNB.Error, SD Ca
   c0894:	6472 4e20 746f 7720 726f 696b 676e 4300     rd Not working.C
   c08a4:	4243 6425 6e63 2566 6431 4300 4243 7231     CB%dcnf%1d.CCB1r
   c08b4:	7165 5400 6d65 3a70 2520 2e30 6636 0000     eq.Temp: %0.6f..

000c08c4 <_ZTVN8particle11SPISettingsE>:
	...
   c08cc:	42c9 000b 40cd 000b 40f7 000b               .B...@...@..

000c08d8 <_ZTV5Timer>:
	...
   c08e0:	434d 000b 43a1 000b 415d 000b               MC...C..]A..

000c08ec <_ZTV4File>:
	...
   c08f4:	40f5 000b 4105 000b 4145 000b 413f 000b     .@...A..EA..?A..
   c0904:	40cf 000b 411f 000b 4119 000b 4113 000b     .@...A...A...A..

000c0914 <_ZL4font>:
   c0914:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c0924:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c0934:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c0944:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c0954:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c0964:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c0974:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c0984:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c0994:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c09a4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c09b4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c09c4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c09d4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c09e4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c09f4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c0a04:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c0a14:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c0a24:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c0a34:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c0a44:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c0a54:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c0a64:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c0a74:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c0a84:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c0a94:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c0aa4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c0ab4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c0ac4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c0ad4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c0ae4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c0af4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c0b04:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c0b14:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c0b24:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c0b34:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c0b44:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c0b54:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c0b64:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c0b74:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c0b84:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c0b94:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c0ba4:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c0bb4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c0bc4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c0bd4:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c0be4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c0bf4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c0c04:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c0c14:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c0c24:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c0c34:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c0c44:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c0c54:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c0c64:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c0c74:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c0c84:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c0c94:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c0ca4:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c0cb4:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c0cc4:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c0cd4:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c0ce4:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c0cf4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c0d04:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c0d14:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c0d24:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c0d34:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c0d44:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c0d54:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c0d64:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c0d74:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c0d84:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c0d94:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c0da4:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c0db4:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c0dc4:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c0dd4:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c0de4:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c0df4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c0e04:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c0e14 <_ZTV12Adafruit_GFX>:
	...
   c0e24:	6bf1 000b c0c1 000b 40a5 000b 65f7 000b     .k.......@...e..
   c0e34:	65f9 000b 662b 000b 6607 000b 6619 000b     .e..+f...f...f..
   c0e44:	6539 000b 65f7 000b 6823 000b 6821 000b     9e...e..#h..!h..
   c0e54:	6643 000b 6681 000b 66bb 000b 6701 000b     Cf...f...f...g..
   c0e64:	671d 000b 67a1 000b                         .g...g..

000c0e6c <_ZTV16OledWingAdafruit>:
	...
   c0e74:	6d01 000b 6d21 000b 6bf1 000b c0c1 000b     .m..!m...k......
   c0e84:	8549 000b 65f7 000b 65f9 000b 662b 000b     I....e...e..+f..
   c0e94:	6607 000b 6619 000b 6539 000b 65f7 000b     .f...f..9e...e..
   c0ea4:	6823 000b 86e7 000b 8c8f 000b 8c41 000b     #h..........A...
   c0eb4:	66bb 000b 6701 000b 671d 000b 67a1 000b     .f...g...g...g..

000c0ec4 <_ZL12splash1_data>:
   c0ec4:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   c0ed4:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   c0ee4:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   c0ef4:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   c0f04:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   c0f14:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   c0f2c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   c0f3c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   c0f4c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   c0f5c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   c0f6c:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   c0f7c:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   c0f8c:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   c0f9c:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   c0fac:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   c0fbc:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   c0fcc:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   c0fdc:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   c0fec:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   c0ffc:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   c100c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   c101c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   c102c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   c103c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   c1054:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   c106c:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   c107c:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   c108c:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   c109c:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   c10ac:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   c10bc:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   c10cc:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   c10dc:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   c10ec:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   c10fc:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   c110c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   c111c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   c112c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   c113c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   c114c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   c115c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   c116c:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   c117c:	fdff 5b6b 6adb c0fd                         ..k[.j..

000c1184 <_ZL12splash2_data>:
   c1184:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c1194:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c11a4:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c11c0:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c11d0:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c11e0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c11f0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1200:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1210:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c1220:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c1230:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c1240:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c1250:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c1260:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c1270:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c1280:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c1290:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c12a0:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c12b0:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c12c0:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c12d0:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c12e0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c12f0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c1300:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1318:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c1328:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c1338:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1348:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c1358:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c1364 <_ZTV16Adafruit_SSD1306>:
	...
   c136c:	851d 000b 8535 000b 6bf1 000b c0c1 000b     ....5....k......
   c137c:	8549 000b 65f7 000b 65f9 000b 662b 000b     I....e...e..+f..
   c138c:	6607 000b 6619 000b 6539 000b 65f7 000b     .f...f..9e...e..
   c139c:	6823 000b 86e7 000b 8c8f 000b 8c41 000b     #h..........A...
   c13ac:	66bb 000b 6701 000b 671d 000b 67a1 000b     .f...g...g...g..

000c13bc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   c13bc:	8000 e0c0 f8f0 fefc                         ........

000c13c4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   c13c4:	0100 0703 1f0f 7f3f                         ......?.

000c13cc <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   c13cc:	d5ae a880                                   ....

000c13d0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   c13d0:	00d3 8d40                                   ..@.

000c13d4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   c13d4:	0020 c8a1                                    ...

000c13d8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   c13d8:	40db a6a4 af2e                              .@....

000c13de <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   c13de:	02da 8f81                                   ....

000c13e2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   c13e2:	12da                                         ...

000c13e5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   c13e5:	02da                                         ...

000c13e8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   c13e8:	0022 21ff 0000 0000                         "..!....

000c13f0 <_ZTVN5spark13EthernetClassE>:
	...
   c13f8:	966f 000b 9665 000b 965b 000b 9651 000b     o...e...[...Q...
   c1408:	9645 000b 9639 000b cf07 000b cf0f 000b     E...9...........
   c1418:	962d 000b 9625 000b 961b 000b 9611 000b     -...%...........
   c1428:	cf3f 000b                                   ?...

000c142c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c142c:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c143c:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c144c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c145c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c146c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c147c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c148c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c149c:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c14ac:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c14bc:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c14cc:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   c14dc:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   c14ec:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c14fc:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c150c:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c151c:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c152c:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c153c:	6f6d 6574 6420 7665 6369 2e65 4600 6961     mote device..Fai
   c154c:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   c155c:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   c156c:	002e 7453 7261 2074 6964 6373 766f 7265     ..Start discover
   c157c:	6e69 2067 6863 7261 6361 6574 6972 7473     ing characterist
   c158c:	6369 2073 666f 7320 7265 6976 6563 203a     ics of service: 
   c159c:	7325 002e 6143 6e6e 746f 6120 6464 6e20     %s..Cannot add n
   c15ac:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   c15bc:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   c15cc:	2073 6f63 6e6e 6365 6574 2e64 4300 6168     s connected..Cha
   c15dc:	6172 7463 7265 7369 6974 2063 6964 6373     racteristic disc
   c15ec:	766f 7265 6465 002e 6944 6373 766f 7265     overed..Discover
   c15fc:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c160c:	2763 2073 6168 646e 656c 6920 2073 6e69     c's handle is in
   c161c:	6176 696c 2e64 4600 6961 656c 2064 6f74     valid..Failed to
   c162c:	6120 7070 6e65 2064 6964 6373 766f 7265      append discover
   c163c:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c164c:	2e63 0000                                   c...

000c1650 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1658:	9a4b 000b 9aad 000b 9c23 000b 9ad7 000b     K.......#.......
   c1668:	9a4d 000b                                   M...

000c166c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1674:	9a47 000b 9abb 000b 9a49 000b 9add 000b     G.......I.......
   c1684:	9a6d 000b                                   m...

000c1688 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1690:	9a45 000b 9ac9 000b a77d 000b 9ae3 000b     E.......}.......
   c16a0:	9a8d 000b                                   ....

000c16a4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c16b0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c16c0:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   c16d0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c16e0:	0065 0000                                   e...

000c16e4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c16ec:	c511 000b c517 000b c555 000b c525 000b     ........U...%...
   c16fc:	c513 000b                                   ....

000c1700 <_ZTV9IPAddress>:
	...
   c1708:	ca51 000b ca41 000b ca43 000b               Q...A...C...

000c1714 <_ZTV9USBSerial>:
	...
   c171c:	cb37 000b cb9f 000b cb75 000b c0c1 000b     7.......u.......
   c172c:	cb67 000b cb39 000b cb49 000b cb99 000b     g...9...I.......
   c173c:	cb59 000b cb31 000b                         Y...1...

000c1744 <_ZTVN5spark13CellularClassE>:
	...
   c174c:	ccef 000b cce5 000b ccdb 000b cc91 000b     ................
   c175c:	cccf 000b ccc3 000b cf07 000b cf0f 000b     ................
   c176c:	ccb7 000b ccaf 000b cca5 000b cc9b 000b     ................
   c177c:	cf3f 000b                                   ?...

000c1780 <_ZTV11USARTSerial>:
	...
   c1788:	cd29 000b cd95 000b cd6d 000b c0c1 000b     ).......m.......
   c1798:	cd3d 000b cd59 000b cd4b 000b cd67 000b     =...Y...K...g...
   c17a8:	cd2b 000b cd2f 000b                         +.../...

000c17b0 <_ZTV7TwoWire>:
	...
   c17b8:	ce03 000b ce4d 000b ce25 000b ce05 000b     ....M...%.......
   c17c8:	ce2d 000b ce35 000b ce3d 000b ce45 000b     -...5...=...E...

000c17d8 <_ZTVN5spark12NetworkClassE>:
	...
   c17e0:	cec7 000b ced1 000b cedb 000b cee5 000b     ................
   c17f0:	ceef 000b cefb 000b cf07 000b cf0f 000b     ................
   c1800:	cf17 000b cf23 000b cf2b 000b cf35 000b     ....#...+...5...
   c1810:	cf3f 000b                                   ?...

000c1814 <_ZSt7nothrow>:
	...

000c1815 <_ZTSSt19_Sp_make_shared_tag>:
   c1815:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c1825:	6572 5f64 6174 0067 0000                     red_tag....

000c1830 <_ZTISt19_Sp_make_shared_tag>:
   c1830:	18e4 000c 1815 000c 6f6e 2074 6e65 756f     ........not enou
   c1840:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c1850:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c1860:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c1870:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c1880:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c1890:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c18a0:	3000 3231 3433 3635 3837 0039               .0123456789.

000c18ac <_ZTIN10__cxxabiv117__class_type_infoE>:
   c18ac:	1944 000c 18b8 000c 1968 000c               D.......h...

000c18b8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c18b8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c18c8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c18d8:	0045 0000                                   E...

000c18dc <_ZTVN10__cxxabiv117__class_type_infoE>:
   c18dc:	0000 0000 18ac 000c d3d9 000b d3ed 000b     ................
   c18ec:	d581 000b d581 000b d457 000b d39b 000b     ........W.......
   c18fc:	d43f 000b d401 000b d3cd 000b               ?...........

000c1908 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1908:	1944 000c 1914 000c 18ac 000c               D...........

000c1914 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c1914:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c1924:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c1934:	666e 456f 0000 0000                         nfoE....

000c193c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c193c:	0000 0000 1908 000c d481 000b d495 000b     ................
   c194c:	d581 000b d581 000b d457 000b d39b 000b     ........W.......
   c195c:	d555 000b d4e1 000b d4a9 000b               U...........

000c1968 <_ZTISt9type_info>:
   c1968:	18e4 000c 1970 000c                         ....p...

000c1970 <_ZTSSt9type_info>:
   c1970:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c1980:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c1990:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   c19a0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c19b0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c19c0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c19d0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c19e0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c19f0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c1a00:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   c1a10:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000c1a20 <fpi.1>:
   c1a20:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1a30:	0000 0000                                   ....

000c1a34 <fpinan.0>:
   c1a34:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c1a44:	0000 0000                                   ....

000c1a48 <tinytens>:
   c1a48:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c1a58:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c1a68:	6f43 64ac 0628 1168                         Co.d(.h.

000c1a70 <_ctype_>:
   c1a70:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c1a80:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c1a90:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1aa0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1ab0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1ac0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1ad0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1ae0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c1af0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c1b70:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c1b80:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c1b90:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c1ba0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c1bb0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c1bc0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c1bd0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c1be0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c1bf0:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c1c00:	6874 7865 632e 0000                         thex.c..

000c1c08 <_C_numeric_locale>:
   c1c08:	164d 000c 0674 000c daf8 2003 0043 4f50     M...t...... C.PO
   c1c18:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   c1c28:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c1c38:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c1c48:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c1c58:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c1c68:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c1c78:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c1c88:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   c1c98:	0063 0000 0000 0000                         c.......

000c1ca0 <__mprec_bigtens>:
   c1ca0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c1cb0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c1cc0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c1cc8 <__mprec_tens>:
   c1cc8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c1cd8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c1ce8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c1cf8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c1d08:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c1d18:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c1d28:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c1d38:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c1d48:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c1d58:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c1d68:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c1d78:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c1d88:	9db4 79d9 7843 44ea                         ...yCx.D

000c1d90 <p05.0>:
   c1d90:	0005 0000 0019 0000 007d 0000               ........}...

000c1d9c <link_const_variable_data_end>:
   c1d9c:	000b5c9d 	.word	0x000b5c9d
   c1da0:	000b9679 	.word	0x000b9679
   c1da4:	000b9819 	.word	0x000b9819
   c1da8:	000bc0b1 	.word	0x000bc0b1
   c1dac:	000bc221 	.word	0x000bc221
   c1db0:	000bc3b1 	.word	0x000bc3b1
   c1db4:	000bc3cd 	.word	0x000bc3cd
   c1db8:	000bccf9 	.word	0x000bccf9
   c1dbc:	000bd019 	.word	0x000bd019
