
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e5e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2600  000c2600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2624  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da88  000c2628  0002da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b88  2003dc68  2003dc68  0003dc68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c2808  000c2808  00032808  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2830  000c2830  00032830  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e1d6a  00000000  00000000  00032834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001faa3  00000000  00000000  0021459e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005ae31  00000000  00000000  00234041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003bd0  00000000  00000000  0028ee72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e998  00000000  00000000  00292a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004fc84  00000000  00000000  002a13da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00072ce6  00000000  00000000  002f105e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151dbb  00000000  00000000  00363d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000beb0  00000000  00000000  004b5b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fd24 	bl	bea7e <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fd46 	bl	beace <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da88 	.word	0x2003da88
   b404c:	000c2628 	.word	0x000c2628
   b4050:	2003dc68 	.word	0x2003dc68
   b4054:	2003dc68 	.word	0x2003dc68
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f009 fd11 	bl	bda88 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c25dc 	.word	0x000c25dc
   b4080:	000c2600 	.word	0x000c2600

000b4084 <module_user_setup>:
   b4084:	f002 bbe2 	b.w	b684c <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f002 ff6d 	bl	b6f68 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f009 bcb1 	b.w	bd9f8 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f005 bf7b 	b.w	b9f90 <malloc>

000b409a <_Znaj>:
   b409a:	f005 bf79 	b.w	b9f90 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f005 bf7f 	b.w	b9fa0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fe84 	bl	b9db8 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9a79 	.word	0x000b9a79
   b40b8:	000c0c08 	.word	0x000c0c08

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b06      	ldr	r3, [pc, #24]	; (b4104 <_Z12actionTimer5v+0x1c>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b40ee:	4b06      	ldr	r3, [pc, #24]	; (b4108 <_Z12actionTimer5v+0x20>)
   b40f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    for(WaterBot &w: WaterBots){
   b40f4:	4299      	cmp	r1, r3
   b40f6:	d004      	beq.n	b4102 <_Z12actionTimer5v+0x1a>
        w.timeoutCount++;
   b40f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   b40fa:	3201      	adds	r2, #1
   b40fc:	639a      	str	r2, [r3, #56]	; 0x38
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b40fe:	333c      	adds	r3, #60	; 0x3c
      {
	++_M_current;
	return *this;
   b4100:	e7f8      	b.n	b40f4 <_Z12actionTimer5v+0xc>
    }
    //if(!BLE.connected)
}
   b4102:	4770      	bx	lr
   b4104:	2003ded8 	.word	0x2003ded8
   b4108:	2003dcc0 	.word	0x2003dcc0

000b410c <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b410c:	4770      	bx	lr

000b410e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b410e:	b510      	push	{r4, lr}
  }
   b4110:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4112:	4604      	mov	r4, r0
  }
   b4114:	f7ff ffc3 	bl	b409e <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZN4FileD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	2134      	movs	r1, #52	; 0x34
   b4120:	4604      	mov	r4, r0
   b4122:	f7ff ffbc 	bl	b409e <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b412a:	3010      	adds	r0, #16
   b412c:	f003 b99a 	b.w	b7464 <_ZN7FatFile4syncEv>

000b4130 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4130:	3010      	adds	r0, #16
   b4132:	f003 b8b8 	b.w	b72a6 <_ZN7FatFile4peekEv>

000b4136 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4136:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4138:	2201      	movs	r2, #1
   b413a:	f10d 0107 	add.w	r1, sp, #7
   b413e:	3010      	adds	r0, #16
   b4140:	f003 f803 	bl	b714a <_ZN7FatFile4readEPvj>
   b4144:	2801      	cmp	r0, #1
   b4146:	bf0c      	ite	eq
   b4148:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b414c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4156:	3010      	adds	r0, #16
   b4158:	f003 ba1e 	b.w	b7598 <_ZN7FatFile5writeEPKvj>

000b415c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b415c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b415e:	2201      	movs	r2, #1
   b4160:	f88d 1007 	strb.w	r1, [sp, #7]
   b4164:	3010      	adds	r0, #16
   b4166:	f10d 0107 	add.w	r1, sp, #7
   b416a:	f003 fa15 	bl	b7598 <_ZN7FatFile5writeEPKvj>
  }
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4174:	6943      	ldr	r3, [r0, #20]
   b4176:	b113      	cbz	r3, b417e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4178:	6983      	ldr	r3, [r0, #24]
   b417a:	300c      	adds	r0, #12
   b417c:	4718      	bx	r3
            callback();
        }
    }
   b417e:	4770      	bx	lr

000b4180 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4180:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4182:	2100      	movs	r1, #0
   b4184:	4604      	mov	r4, r0
   b4186:	4608      	mov	r0, r1
   b4188:	f005 fc26 	bl	b99d8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b418c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b418e:	4620      	mov	r0, r4
   b4190:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4192:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4194:	f005 fc38 	bl	b9a08 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4198:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419a:	b10c      	cbz	r4, b41a0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b419c:	2301      	movs	r3, #1
   b419e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a0:	2100      	movs	r1, #0
   b41a2:	2001      	movs	r0, #1
   b41a4:	f005 fc18 	bl	b99d8 <os_thread_scheduling>
            }
        }
        if (t) {
   b41a8:	b12c      	cbz	r4, b41b6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	4620      	mov	r0, r4
   b41ae:	689b      	ldr	r3, [r3, #8]
   b41b0:	4798      	blx	r3
            t->running = false;
   b41b2:	2300      	movs	r3, #0
   b41b4:	7123      	strb	r3, [r4, #4]
        }
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	bd10      	pop	{r4, pc}
	...

000b41bc <_Z8jHandlerv>:
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
}

void jHandler(){
   b41bc:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41be:	4c09      	ldr	r4, [pc, #36]	; (b41e4 <_Z8jHandlerv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41c0:	f005 fc6a 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
   b41c4:	6823      	ldr	r3, [r4, #0]
   b41c6:	1ac0      	subs	r0, r0, r3
   b41c8:	2895      	cmp	r0, #149	; 0x95
   b41ca:	d909      	bls.n	b41e0 <_Z8jHandlerv+0x24>
   b41cc:	f005 fc64 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b41d0:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b41d2:	f009 fbc9 	bl	bd968 <_Z16_fetch_usbserialv>
}
   b41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b41da:	4903      	ldr	r1, [pc, #12]	; (b41e8 <_Z8jHandlerv+0x2c>)
   b41dc:	f008 bfb7 	b.w	bd14e <_ZN5Print7printlnEPKc>
}
   b41e0:	bd10      	pop	{r4, pc}
   b41e2:	bf00      	nop
   b41e4:	2003dd64 	.word	0x2003dd64
   b41e8:	000c0c1d 	.word	0x000c0c1d

000b41ec <_Z13actionTimer60v>:
void actionTimer60(){
   b41ec:	b510      	push	{r4, lr}
      : _M_current(__i) { }
   b41ee:	4b0c      	ldr	r3, [pc, #48]	; (b4220 <_Z13actionTimer60v+0x34>)
   b41f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    bool reqLTEStatus = false;
   b41f4:	2200      	movs	r2, #0
            w.timeoutCount = 0;            
   b41f6:	4610      	mov	r0, r2
    for(WaterBot &w: WaterBots){
   b41f8:	4299      	cmp	r1, r3
   b41fa:	d006      	beq.n	b420a <_Z13actionTimer60v+0x1e>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b41fc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   b41fe:	2c24      	cmp	r4, #36	; 0x24
            w.timeoutCount = 0;            
   b4200:	bf84      	itt	hi
   b4202:	6398      	strhi	r0, [r3, #56]	; 0x38
            reqLTEStatus = true;
   b4204:	2201      	movhi	r2, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4206:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b4208:	e7f6      	b.n	b41f8 <_Z13actionTimer60v+0xc>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b420a:	b142      	cbz	r2, b421e <_Z13actionTimer60v+0x32>
   b420c:	4a05      	ldr	r2, [pc, #20]	; (b4224 <_Z13actionTimer60v+0x38>)
   b420e:	7813      	ldrb	r3, [r2, #0]
   b4210:	2b18      	cmp	r3, #24
   b4212:	d804      	bhi.n	b421e <_Z13actionTimer60v+0x32>
        LTEStatuses++;
   b4214:	3301      	adds	r3, #1
   b4216:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b4218:	4b03      	ldr	r3, [pc, #12]	; (b4228 <_Z13actionTimer60v+0x3c>)
   b421a:	2201      	movs	r2, #1
   b421c:	701a      	strb	r2, [r3, #0]
}
   b421e:	bd10      	pop	{r4, pc}
   b4220:	2003dcc0 	.word	0x2003dcc0
   b4224:	2003dc88 	.word	0x2003dc88
   b4228:	2003e635 	.word	0x2003e635

000b422c <_Z10entHandlerv>:
void entHandler(){
   b422c:	b538      	push	{r3, r4, r5, lr}
    redrawMenu = true;  
   b422e:	4b14      	ldr	r3, [pc, #80]	; (b4280 <_Z10entHandlerv+0x54>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4230:	4d14      	ldr	r5, [pc, #80]	; (b4284 <_Z10entHandlerv+0x58>)
    redrawMenu = true;  
   b4232:	2401      	movs	r4, #1
   b4234:	701c      	strb	r4, [r3, #0]
   b4236:	f005 fc2f 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b423a:	682b      	ldr	r3, [r5, #0]
   b423c:	1ac0      	subs	r0, r0, r3
   b423e:	2895      	cmp	r0, #149	; 0x95
   b4240:	d90e      	bls.n	b4260 <_Z10entHandlerv+0x34>
    Serial.println("Enter trigger");
   b4242:	f009 fb91 	bl	bd968 <_Z16_fetch_usbserialv>
   b4246:	4910      	ldr	r1, [pc, #64]	; (b4288 <_Z10entHandlerv+0x5c>)
   b4248:	f008 ff81 	bl	bd14e <_ZN5Print7printlnEPKc>
   b424c:	f005 fc24 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4250:	4a0e      	ldr	r2, [pc, #56]	; (b428c <_Z10entHandlerv+0x60>)
    debounceTime = millis();
   b4252:	6028      	str	r0, [r5, #0]
    if(PopUps.size() != 0){
   b4254:	e9d2 1300 	ldrd	r1, r3, [r2]
   b4258:	428b      	cmp	r3, r1
   b425a:	d002      	beq.n	b4262 <_Z10entHandlerv+0x36>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b425c:	3b49      	subs	r3, #73	; 0x49
   b425e:	6053      	str	r3, [r2, #4]
}
   b4260:	bd38      	pop	{r3, r4, r5, pc}
    selectingBots = !selectingBots;
   b4262:	4a0b      	ldr	r2, [pc, #44]	; (b4290 <_Z10entHandlerv+0x64>)
   b4264:	7813      	ldrb	r3, [r2, #0]
   b4266:	f083 0301 	eor.w	r3, r3, #1
   b426a:	7013      	strb	r3, [r2, #0]
    if(modifiedValue){
   b426c:	4b09      	ldr	r3, [pc, #36]	; (b4294 <_Z10entHandlerv+0x68>)
   b426e:	781a      	ldrb	r2, [r3, #0]
   b4270:	2a00      	cmp	r2, #0
   b4272:	d0f5      	beq.n	b4260 <_Z10entHandlerv+0x34>
        updateControl = true;
   b4274:	4a08      	ldr	r2, [pc, #32]	; (b4298 <_Z10entHandlerv+0x6c>)
   b4276:	7014      	strb	r4, [r2, #0]
        modifiedValue = false;
   b4278:	2200      	movs	r2, #0
   b427a:	701a      	strb	r2, [r3, #0]
   b427c:	e7f0      	b.n	b4260 <_Z10entHandlerv+0x34>
   b427e:	bf00      	nop
   b4280:	2003da88 	.word	0x2003da88
   b4284:	2003dd64 	.word	0x2003dd64
   b4288:	000c0c2e 	.word	0x000c0c2e
   b428c:	2003dca4 	.word	0x2003dca4
   b4290:	2003da89 	.word	0x2003da89
   b4294:	2003de0b 	.word	0x2003de0b
   b4298:	2003e636 	.word	0x2003e636

000b429c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b429c:	2a01      	cmp	r2, #1
   b429e:	d102      	bne.n	b42a6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b42a0:	6001      	str	r1, [r0, #0]
      }
   b42a2:	2000      	movs	r0, #0
   b42a4:	4770      	bx	lr
	  switch (__op)
   b42a6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b42a8:	bf04      	itt	eq
   b42aa:	680b      	ldreq	r3, [r1, #0]
   b42ac:	6003      	streq	r3, [r0, #0]
	      break;
   b42ae:	e7f8      	b.n	b42a2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b42b0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b42b0:	6803      	ldr	r3, [r0, #0]
   b42b2:	4718      	bx	r3

000b42b4 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42b6:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42b8:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42ba:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	b130      	cbz	r0, b42cc <_ZN5Timer5startEj.isra.0+0x18>
   b42be:	2300      	movs	r3, #0
   b42c0:	e9cd 3300 	strd	r3, r3, [sp]
   b42c4:	461a      	mov	r2, r3
   b42c6:	2102      	movs	r1, #2
   b42c8:	f005 fba6 	bl	b9a18 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42cc:	68a0      	ldr	r0, [r4, #8]
   b42ce:	b130      	cbz	r0, b42de <_ZN5Timer5startEj.isra.0+0x2a>
   b42d0:	2300      	movs	r3, #0
   b42d2:	e9cd 5300 	strd	r5, r3, [sp]
   b42d6:	461a      	mov	r2, r3
   b42d8:	4619      	mov	r1, r3
   b42da:	f005 fb9d 	bl	b9a18 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42de:	b003      	add	sp, #12
   b42e0:	bd30      	pop	{r4, r5, pc}

000b42e2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e2:	b40e      	push	{r1, r2, r3}
   b42e4:	b503      	push	{r0, r1, lr}
   b42e6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42e8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ea:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42ee:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f0:	f008 ff55 	bl	bd19e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f4:	b002      	add	sp, #8
   b42f6:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fa:	b003      	add	sp, #12
   b42fc:	4770      	bx	lr
	...

000b4300 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4300:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4302:	4604      	mov	r4, r0
   b4304:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4306:	7922      	ldrb	r2, [r4, #4]
   b4308:	68a3      	ldr	r3, [r4, #8]
   b430a:	b132      	cbz	r2, b431a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b430c:	b9a3      	cbnz	r3, b4338 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b430e:	490b      	ldr	r1, [pc, #44]	; (b433c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4316:	f008 bf07 	b.w	bd128 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431a:	4a09      	ldr	r2, [pc, #36]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b431c:	7b26      	ldrb	r6, [r4, #12]
   b431e:	4d09      	ldr	r5, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4320:	4909      	ldr	r1, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4322:	7b64      	ldrb	r4, [r4, #13]
   b4324:	2e01      	cmp	r6, #1
   b4326:	bf18      	it	ne
   b4328:	4629      	movne	r1, r5
   b432a:	e9cd 1400 	strd	r1, r4, [sp]
   b432e:	4907      	ldr	r1, [pc, #28]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4330:	f7ff ffd7 	bl	b42e2 <_ZN5Print6printfEPKcz>
  }
   b4334:	b002      	add	sp, #8
   b4336:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4338:	4a05      	ldr	r2, [pc, #20]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433a:	e7ef      	b.n	b431c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b433c:	000c0c4d 	.word	0x000c0c4d
   b4340:	000c1166 	.word	0x000c1166
   b4344:	000c0c49 	.word	0x000c0c49
   b4348:	000c0c45 	.word	0x000c0c45
   b434c:	000c0c63 	.word	0x000c0c63
   b4350:	000c0c3c 	.word	0x000c0c3c

000b4354 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4354:	b40e      	push	{r1, r2, r3}
   b4356:	b503      	push	{r0, r1, lr}
   b4358:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b435c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4360:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4362:	f008 ff1c 	bl	bd19e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4366:	b002      	add	sp, #8
   b4368:	f85d eb04 	ldr.w	lr, [sp], #4
   b436c:	b003      	add	sp, #12
   b436e:	4770      	bx	lr

000b4370 <_Z8lHandlerv>:
void lHandler(){
   b4370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    redrawMenu = true;  
   b4374:	4c35      	ldr	r4, [pc, #212]	; (b444c <_Z8lHandlerv+0xdc>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4376:	4e36      	ldr	r6, [pc, #216]	; (b4450 <_Z8lHandlerv+0xe0>)
    redrawMenu = true;  
   b4378:	2501      	movs	r5, #1
   b437a:	7025      	strb	r5, [r4, #0]
   b437c:	f005 fb8c 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4380:	6833      	ldr	r3, [r6, #0]
   b4382:	1ac0      	subs	r0, r0, r3
   b4384:	2895      	cmp	r0, #149	; 0x95
   b4386:	d95f      	bls.n	b4448 <_Z8lHandlerv+0xd8>
    Serial.println("Right trigger");
   b4388:	f009 faee 	bl	bd968 <_Z16_fetch_usbserialv>
   b438c:	4931      	ldr	r1, [pc, #196]	; (b4454 <_Z8lHandlerv+0xe4>)
   b438e:	f008 fede 	bl	bd14e <_ZN5Print7printlnEPKc>
   b4392:	f005 fb81 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){
   b4396:	4b30      	ldr	r3, [pc, #192]	; (b4458 <_Z8lHandlerv+0xe8>)
    debounceTime = millis();
   b4398:	6030      	str	r0, [r6, #0]
    if(selectingBots){
   b439a:	781e      	ldrb	r6, [r3, #0]
   b439c:	492f      	ldr	r1, [pc, #188]	; (b445c <_Z8lHandlerv+0xec>)
    redrawMenu = true;
   b439e:	7025      	strb	r5, [r4, #0]
    if(selectingBots){
   b43a0:	b1b6      	cbz	r6, b43d0 <_Z8lHandlerv+0x60>
      : _M_current(__i) { }
   b43a2:	680b      	ldr	r3, [r1, #0]
        if(botSelect != WaterBots.front().botNum){
   b43a4:	4c2e      	ldr	r4, [pc, #184]	; (b4460 <_Z8lHandlerv+0xf0>)
   b43a6:	7898      	ldrb	r0, [r3, #2]
   b43a8:	7822      	ldrb	r2, [r4, #0]
   b43aa:	4290      	cmp	r0, r2
   b43ac:	d04c      	beq.n	b4448 <_Z8lHandlerv+0xd8>
   b43ae:	684f      	ldr	r7, [r1, #4]
                    ControlledBot = &ws;
   b43b0:	f8df c0b8 	ldr.w	ip, [pc, #184]	; b446c <_Z8lHandlerv+0xfc>
   b43b4:	2500      	movs	r5, #0
            for(WaterBot &ws: WaterBots){
   b43b6:	429f      	cmp	r7, r3
   b43b8:	d044      	beq.n	b4444 <_Z8lHandlerv+0xd4>
                if(ws.botNum == botSelect){
   b43ba:	7899      	ldrb	r1, [r3, #2]
   b43bc:	4291      	cmp	r1, r2
                    botSelect = newBotNum;
   b43be:	bf01      	itttt	eq
   b43c0:	4602      	moveq	r2, r0
   b43c2:	4611      	moveq	r1, r2
                    ControlledBot = &ws;
   b43c4:	f8cc 3000 	streq.w	r3, [ip]
   b43c8:	4635      	moveq	r5, r6
   b43ca:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b43cc:	4608      	mov	r0, r1
   b43ce:	e7f2      	b.n	b43b6 <_Z8lHandlerv+0x46>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b43d0:	e9d1 4600 	ldrd	r4, r6, [r1]
            if(ws.botNum == botSelect){
   b43d4:	4f22      	ldr	r7, [pc, #136]	; (b4460 <_Z8lHandlerv+0xf0>)
                MenuItem *curItem = SelectedItem;
   b43d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; b4470 <_Z8lHandlerv+0x100>
                modifiedValue = true;
   b43da:	f8df 9098 	ldr.w	r9, [pc, #152]	; b4474 <_Z8lHandlerv+0x104>
        for(WaterBot &ws: WaterBots){
   b43de:	42a6      	cmp	r6, r4
   b43e0:	d032      	beq.n	b4448 <_Z8lHandlerv+0xd8>
            if(ws.botNum == botSelect){
   b43e2:	78a2      	ldrb	r2, [r4, #2]
   b43e4:	783b      	ldrb	r3, [r7, #0]
   b43e6:	429a      	cmp	r2, r3
   b43e8:	d121      	bne.n	b442e <_Z8lHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b43ea:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b43ee:	f009 fabb 	bl	bd968 <_Z16_fetch_usbserialv>
   b43f2:	f105 011a 	add.w	r1, r5, #26
   b43f6:	f008 feaa 	bl	bd14e <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b43fa:	b32d      	cbz	r5, b4448 <_Z8lHandlerv+0xd8>
                if(curItem->statOnly) return;
   b43fc:	f895 a017 	ldrb.w	sl, [r5, #23]
   b4400:	f1ba 0f00 	cmp.w	sl, #0
   b4404:	d120      	bne.n	b4448 <_Z8lHandlerv+0xd8>
                if(curItem->onOffSetting){
   b4406:	7d6b      	ldrb	r3, [r5, #21]
   b4408:	b19b      	cbz	r3, b4432 <_Z8lHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b440a:	f009 faad 	bl	bd968 <_Z16_fetch_usbserialv>
   b440e:	4915      	ldr	r1, [pc, #84]	; (b4464 <_Z8lHandlerv+0xf4>)
   b4410:	f008 fe9d 	bl	bd14e <_ZN5Print7printlnEPKc>
                    ws.*(curItem->MethodPointerBool) = false;
   b4414:	692b      	ldr	r3, [r5, #16]
   b4416:	f804 a003 	strb.w	sl, [r4, r3]
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b441a:	f009 faa5 	bl	bd968 <_Z16_fetch_usbserialv>
   b441e:	78a2      	ldrb	r2, [r4, #2]
   b4420:	4911      	ldr	r1, [pc, #68]	; (b4468 <_Z8lHandlerv+0xf8>)
   b4422:	f7ff ff97 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4426:	2301      	movs	r3, #1
   b4428:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b442c:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b442e:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4430:	e7d5      	b.n	b43de <_Z8lHandlerv+0x6e>
                    if(ws.*(curItem->MethodPointer) > curItem->minVal) ws.*(curItem->MethodPointer) -= curItem->stepSize;
   b4432:	68ea      	ldr	r2, [r5, #12]
   b4434:	7e29      	ldrb	r1, [r5, #24]
   b4436:	5ca3      	ldrb	r3, [r4, r2]
   b4438:	4299      	cmp	r1, r3
   b443a:	bf3e      	ittt	cc
   b443c:	7d29      	ldrbcc	r1, [r5, #20]
   b443e:	1a5b      	subcc	r3, r3, r1
   b4440:	54a3      	strbcc	r3, [r4, r2]
   b4442:	e7f0      	b.n	b4426 <_Z8lHandlerv+0xb6>
   b4444:	b105      	cbz	r5, b4448 <_Z8lHandlerv+0xd8>
   b4446:	7022      	strb	r2, [r4, #0]
}
   b4448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b444c:	2003da88 	.word	0x2003da88
   b4450:	2003dd64 	.word	0x2003dd64
   b4454:	000c0c80 	.word	0x000c0c80
   b4458:	2003da89 	.word	0x2003da89
   b445c:	2003dcc0 	.word	0x2003dcc0
   b4460:	2003dd59 	.word	0x2003dd59
   b4464:	000c0c8e 	.word	0x000c0c8e
   b4468:	000c0ca9 	.word	0x000c0ca9
   b446c:	2003dc84 	.word	0x2003dc84
   b4470:	2003dcb0 	.word	0x2003dcb0
   b4474:	2003de0b 	.word	0x2003de0b

000b4478 <_Z8rHandlerv>:
void rHandler(){
   b4478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    redrawMenu = true;  
   b447c:	4b33      	ldr	r3, [pc, #204]	; (b454c <_Z8rHandlerv+0xd4>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b447e:	4c34      	ldr	r4, [pc, #208]	; (b4550 <_Z8rHandlerv+0xd8>)
    redrawMenu = true;  
   b4480:	2201      	movs	r2, #1
   b4482:	701a      	strb	r2, [r3, #0]
   b4484:	f005 fb08 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4488:	6823      	ldr	r3, [r4, #0]
   b448a:	1ac0      	subs	r0, r0, r3
   b448c:	2895      	cmp	r0, #149	; 0x95
   b448e:	d91e      	bls.n	b44ce <_Z8rHandlerv+0x56>
   b4490:	f005 fb02 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4494:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b4496:	f009 fa67 	bl	bd968 <_Z16_fetch_usbserialv>
   b449a:	492e      	ldr	r1, [pc, #184]	; (b4554 <_Z8rHandlerv+0xdc>)
   b449c:	f008 fe57 	bl	bd14e <_ZN5Print7printlnEPKc>
    if(selectingBots){
   b44a0:	4b2d      	ldr	r3, [pc, #180]	; (b4558 <_Z8rHandlerv+0xe0>)
   b44a2:	781a      	ldrb	r2, [r3, #0]
   b44a4:	4b2d      	ldr	r3, [pc, #180]	; (b455c <_Z8rHandlerv+0xe4>)
   b44a6:	b1c2      	cbz	r2, b44da <_Z8rHandlerv+0x62>
      : _M_current(__i) { }
   b44a8:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b44aa:	4d2d      	ldr	r5, [pc, #180]	; (b4560 <_Z8rHandlerv+0xe8>)
   b44ac:	f814 2c3a 	ldrb.w	r2, [r4, #-58]
   b44b0:	7828      	ldrb	r0, [r5, #0]
   b44b2:	4282      	cmp	r2, r0
   b44b4:	d00b      	beq.n	b44ce <_Z8rHandlerv+0x56>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b44b6:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b44b8:	2200      	movs	r2, #0
            for(WaterBot &ws: WaterBots){
   b44ba:	429c      	cmp	r4, r3
   b44bc:	461e      	mov	r6, r3
   b44be:	d006      	beq.n	b44ce <_Z8rHandlerv+0x56>
                if(findCurrent){
   b44c0:	333c      	adds	r3, #60	; 0x3c
                    botSelect = ws.botNum;
   b44c2:	f813 1c3a 	ldrb.w	r1, [r3, #-58]
                if(findCurrent){
   b44c6:	b122      	cbz	r2, b44d2 <_Z8rHandlerv+0x5a>
                    ControlledBot = &ws;
   b44c8:	4b26      	ldr	r3, [pc, #152]	; (b4564 <_Z8rHandlerv+0xec>)
                    botSelect = ws.botNum;
   b44ca:	7029      	strb	r1, [r5, #0]
                    ControlledBot = &ws;
   b44cc:	601e      	str	r6, [r3, #0]
}
   b44ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b44d2:	1a41      	subs	r1, r0, r1
   b44d4:	424a      	negs	r2, r1
   b44d6:	414a      	adcs	r2, r1
	return *this;
   b44d8:	e7ef      	b.n	b44ba <_Z8rHandlerv+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b44da:	e9d3 4600 	ldrd	r4, r6, [r3]
            if(ws.botNum == botSelect){
   b44de:	4f20      	ldr	r7, [pc, #128]	; (b4560 <_Z8rHandlerv+0xe8>)
                MenuItem *curItem = SelectedItem;
   b44e0:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4570 <_Z8rHandlerv+0xf8>
                modifiedValue = true;
   b44e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4574 <_Z8rHandlerv+0xfc>
        for(WaterBot &ws: WaterBots){
   b44e8:	42a6      	cmp	r6, r4
   b44ea:	d0f0      	beq.n	b44ce <_Z8rHandlerv+0x56>
            if(ws.botNum == botSelect){
   b44ec:	78a2      	ldrb	r2, [r4, #2]
   b44ee:	783b      	ldrb	r3, [r7, #0]
   b44f0:	429a      	cmp	r2, r3
   b44f2:	d120      	bne.n	b4536 <_Z8rHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b44f4:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b44f8:	f009 fa36 	bl	bd968 <_Z16_fetch_usbserialv>
   b44fc:	f105 011a 	add.w	r1, r5, #26
   b4500:	f008 fe25 	bl	bd14e <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b4504:	2d00      	cmp	r5, #0
   b4506:	d0e2      	beq.n	b44ce <_Z8rHandlerv+0x56>
                if(curItem->statOnly) return;
   b4508:	7deb      	ldrb	r3, [r5, #23]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d1df      	bne.n	b44ce <_Z8rHandlerv+0x56>
                if(curItem->onOffSetting){
   b450e:	7d6b      	ldrb	r3, [r5, #21]
   b4510:	b19b      	cbz	r3, b453a <_Z8rHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b4512:	f009 fa29 	bl	bd968 <_Z16_fetch_usbserialv>
   b4516:	4914      	ldr	r1, [pc, #80]	; (b4568 <_Z8rHandlerv+0xf0>)
   b4518:	f008 fe19 	bl	bd14e <_ZN5Print7printlnEPKc>
                    ws.*(curItem->MethodPointerBool) = true;
   b451c:	692b      	ldr	r3, [r5, #16]
   b451e:	2201      	movs	r2, #1
   b4520:	54e2      	strb	r2, [r4, r3]
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b4522:	f009 fa21 	bl	bd968 <_Z16_fetch_usbserialv>
   b4526:	78a2      	ldrb	r2, [r4, #2]
   b4528:	4910      	ldr	r1, [pc, #64]	; (b456c <_Z8rHandlerv+0xf4>)
   b452a:	f7ff ff13 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b452e:	2301      	movs	r3, #1
   b4530:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b4534:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b4536:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4538:	e7d6      	b.n	b44e8 <_Z8rHandlerv+0x70>
                    if(ws.*(curItem->MethodPointer) < curItem->maxVal) ws.*(curItem->MethodPointer) += curItem->stepSize;
   b453a:	68ea      	ldr	r2, [r5, #12]
   b453c:	7e69      	ldrb	r1, [r5, #25]
   b453e:	5ca3      	ldrb	r3, [r4, r2]
   b4540:	4299      	cmp	r1, r3
   b4542:	bf82      	ittt	hi
   b4544:	7d29      	ldrbhi	r1, [r5, #20]
   b4546:	185b      	addhi	r3, r3, r1
   b4548:	54a3      	strbhi	r3, [r4, r2]
   b454a:	e7f0      	b.n	b452e <_Z8rHandlerv+0xb6>
   b454c:	2003da88 	.word	0x2003da88
   b4550:	2003dd64 	.word	0x2003dd64
   b4554:	000c0c80 	.word	0x000c0c80
   b4558:	2003da89 	.word	0x2003da89
   b455c:	2003dcc0 	.word	0x2003dcc0
   b4560:	2003dd59 	.word	0x2003dd59
   b4564:	2003dc84 	.word	0x2003dc84
   b4568:	000c0c8e 	.word	0x000c0c8e
   b456c:	000c0ca9 	.word	0x000c0ca9
   b4570:	2003dcb0 	.word	0x2003dcb0
   b4574:	2003de0b 	.word	0x2003de0b

000b4578 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4578:	b510      	push	{r4, lr}
      if (_M_manager)
   b457a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b457c:	4604      	mov	r4, r0
      if (_M_manager)
   b457e:	b113      	cbz	r3, b4586 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4580:	2203      	movs	r2, #3
   b4582:	4601      	mov	r1, r0
   b4584:	4798      	blx	r3
    }
   b4586:	4620      	mov	r0, r4
   b4588:	bd10      	pop	{r4, pc}
	...

000b458c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b458c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b458e:	4b13      	ldr	r3, [pc, #76]	; (b45dc <_ZN5TimerD1Ev+0x50>)
   b4590:	6003      	str	r3, [r0, #0]
   b4592:	4604      	mov	r4, r0
        if (handle) {
   b4594:	6880      	ldr	r0, [r0, #8]
   b4596:	b1c8      	cbz	r0, b45cc <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4598:	2500      	movs	r5, #0
   b459a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b459e:	e9cd 3500 	strd	r3, r5, [sp]
   b45a2:	2102      	movs	r1, #2
   b45a4:	462b      	mov	r3, r5
   b45a6:	462a      	mov	r2, r5
   b45a8:	f005 fa36 	bl	b9a18 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b45ac:	68a0      	ldr	r0, [r4, #8]
   b45ae:	4629      	mov	r1, r5
   b45b0:	f005 fa52 	bl	b9a58 <os_timer_set_id>
            while (running) {
   b45b4:	7923      	ldrb	r3, [r4, #4]
   b45b6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b45ba:	b113      	cbz	r3, b45c2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b45bc:	f005 fa04 	bl	b99c8 <os_thread_yield>
            while (running) {
   b45c0:	e7f8      	b.n	b45b4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b45c2:	68a0      	ldr	r0, [r4, #8]
   b45c4:	4629      	mov	r1, r5
   b45c6:	f005 fa17 	bl	b99f8 <os_timer_destroy>
            handle = nullptr;
   b45ca:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b45cc:	f104 000c 	add.w	r0, r4, #12
   b45d0:	f7ff ffd2 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    }
   b45d4:	4620      	mov	r0, r4
   b45d6:	b003      	add	sp, #12
   b45d8:	bd30      	pop	{r4, r5, pc}
   b45da:	bf00      	nop
   b45dc:	000c13ac 	.word	0x000c13ac

000b45e0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b45e0:	b510      	push	{r4, lr}
   b45e2:	4604      	mov	r4, r0
    }
   b45e4:	f7ff ffd2 	bl	b458c <_ZN5TimerD1Ev>
   b45e8:	4620      	mov	r0, r4
   b45ea:	211c      	movs	r1, #28
   b45ec:	f7ff fd57 	bl	b409e <_ZdlPvj>
   b45f0:	4620      	mov	r0, r4
   b45f2:	bd10      	pop	{r4, pc}

000b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b45f4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b45f6:	6843      	ldr	r3, [r0, #4]
   b45f8:	3b01      	subs	r3, #1
    {
   b45fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b45fc:	6043      	str	r3, [r0, #4]
   b45fe:	b963      	cbnz	r3, b461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4600:	6803      	ldr	r3, [r0, #0]
   b4602:	689b      	ldr	r3, [r3, #8]
   b4604:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4606:	68a3      	ldr	r3, [r4, #8]
   b4608:	3b01      	subs	r3, #1
   b460a:	60a3      	str	r3, [r4, #8]
   b460c:	b92b      	cbnz	r3, b461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b460e:	6823      	ldr	r3, [r4, #0]
   b4610:	4620      	mov	r0, r4
   b4612:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4618:	4718      	bx	r3
    }
   b461a:	bd10      	pop	{r4, pc}

000b461c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b461c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b461e:	468c      	mov	ip, r1
   b4620:	2500      	movs	r5, #0
   b4622:	4914      	ldr	r1, [pc, #80]	; (b4674 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4624:	7105      	strb	r5, [r0, #4]
   b4626:	4604      	mov	r4, r0
   b4628:	6085      	str	r5, [r0, #8]
   b462a:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b462c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4630:	b085      	sub	sp, #20
   b4632:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4634:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4638:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b463c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4640:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4644:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4648:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b464c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b464e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4650:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4652:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4654:	6095      	str	r5, [r2, #8]
   b4656:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4658:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b465a:	e9cd 3500 	strd	r3, r5, [sp]
   b465e:	4a06      	ldr	r2, [pc, #24]	; (b4678 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4660:	4623      	mov	r3, r4
   b4662:	4661      	mov	r1, ip
   b4664:	f104 0008 	add.w	r0, r4, #8
   b4668:	f005 f9be 	bl	b99e8 <os_timer_create>
    }
   b466c:	4620      	mov	r0, r4
   b466e:	b005      	add	sp, #20
   b4670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4672:	bf00      	nop
   b4674:	000c13ac 	.word	0x000c13ac
   b4678:	000b4181 	.word	0x000b4181

000b467c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b467c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b467e:	460a      	mov	r2, r1
   b4680:	4901      	ldr	r1, [pc, #4]	; (b4688 <_ZN7FatFile4openEPKci+0xc>)
   b4682:	6809      	ldr	r1, [r1, #0]
   b4684:	f002 bf2b 	b.w	b74de <_ZN7FatFile4openEPS_PKci>
   b4688:	2003e63c 	.word	0x2003e63c

000b468c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b468c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b468e:	b095      	sub	sp, #84	; 0x54
   b4690:	4604      	mov	r4, r0
   b4692:	af00      	add	r7, sp, #0
   b4694:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4696:	221e      	movs	r2, #30
   b4698:	2100      	movs	r1, #0
   b469a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b469e:	f00a fa16 	bl	beace <memset>
    memcpy(fileCommand,data,8);
   b46a2:	6820      	ldr	r0, [r4, #0]
   b46a4:	6861      	ldr	r1, [r4, #4]
   b46a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b46aa:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b46ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b46b0:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b46b2:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b46b4:	d168      	bne.n	b4788 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b46b6:	493e      	ldr	r1, [pc, #248]	; (b47b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b46b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b46bc:	f00a fa8b 	bl	bebd6 <strcmp>
   b46c0:	2800      	cmp	r0, #0
   b46c2:	d13e      	bne.n	b4742 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b46c4:	483b      	ldr	r0, [pc, #236]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b46c6:	7c03      	ldrb	r3, [r0, #16]
   b46c8:	b113      	cbz	r3, b46d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b46ca:	3010      	adds	r0, #16
   b46cc:	f002 ff00 	bl	b74d0 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b46d0:	4623      	mov	r3, r4
   b46d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b46d6:	f104 0520 	add.w	r5, r4, #32
   b46da:	6818      	ldr	r0, [r3, #0]
   b46dc:	6859      	ldr	r1, [r3, #4]
   b46de:	4614      	mov	r4, r2
   b46e0:	c403      	stmia	r4!, {r0, r1}
   b46e2:	3308      	adds	r3, #8
   b46e4:	42ab      	cmp	r3, r5
   b46e6:	4622      	mov	r2, r4
   b46e8:	d1f7      	bne.n	b46da <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b46ea:	6818      	ldr	r0, [r3, #0]
   b46ec:	6020      	str	r0, [r4, #0]
   b46ee:	889b      	ldrh	r3, [r3, #4]
   b46f0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b46f2:	221e      	movs	r2, #30
   b46f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b46f8:	482f      	ldr	r0, [pc, #188]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b46fa:	f00a fab8 	bl	bec6e <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b46fe:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4700:	4a2d      	ldr	r2, [pc, #180]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4702:	492e      	ldr	r1, [pc, #184]	; (b47bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4704:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4706:	1d38      	adds	r0, r7, #4
   b4708:	f002 fee9 	bl	b74de <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b470c:	b148      	cbz	r0, b4722 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b470e:	f009 f92b 	bl	bd968 <_Z16_fetch_usbserialv>
   b4712:	492b      	ldr	r1, [pc, #172]	; (b47c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4714:	4a28      	ldr	r2, [pc, #160]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4716:	f7ff fe1d 	bl	b4354 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b471a:	4927      	ldr	r1, [pc, #156]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b471c:	4827      	ldr	r0, [pc, #156]	; (b47bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b471e:	f002 ff2a 	bl	b7576 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4722:	f009 f921 	bl	bd968 <_Z16_fetch_usbserialv>
   b4726:	4a24      	ldr	r2, [pc, #144]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4728:	4926      	ldr	r1, [pc, #152]	; (b47c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b472a:	f7ff fe13 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4730:	4825      	ldr	r0, [pc, #148]	; (b47c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4732:	f244 2202 	movw	r2, #16898	; 0x4202
   b4736:	f7ff ffa1 	bl	b467c <_ZN7FatFile4openEPKci>
}
   b473a:	3754      	adds	r7, #84	; 0x54
   b473c:	46b5      	mov	sp, r6
   b473e:	46bd      	mov	sp, r7
   b4740:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4742:	4922      	ldr	r1, [pc, #136]	; (b47cc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4744:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4748:	f00a fa45 	bl	bebd6 <strcmp>
   b474c:	b968      	cbnz	r0, b476a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b474e:	f009 f90b 	bl	bd968 <_Z16_fetch_usbserialv>
   b4752:	4a19      	ldr	r2, [pc, #100]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4754:	491e      	ldr	r1, [pc, #120]	; (b47d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4756:	f7ff fdfd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b475a:	4b16      	ldr	r3, [pc, #88]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b475c:	7c1b      	ldrb	r3, [r3, #16]
   b475e:	2b00      	cmp	r3, #0
   b4760:	d0eb      	beq.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4762:	4819      	ldr	r0, [pc, #100]	; (b47c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4764:	f002 feb4 	bl	b74d0 <_ZN7FatFile5closeEv>
   b4768:	e7e7      	b.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b476a:	491a      	ldr	r1, [pc, #104]	; (b47d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b476c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4770:	f00a fa31 	bl	bebd6 <strcmp>
   b4774:	b940      	cbnz	r0, b4788 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4776:	f009 f8f7 	bl	bd968 <_Z16_fetch_usbserialv>
   b477a:	4917      	ldr	r1, [pc, #92]	; (b47d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b477c:	f008 fce7 	bl	bd14e <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4780:	4b16      	ldr	r3, [pc, #88]	; (b47dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4782:	2201      	movs	r2, #1
   b4784:	701a      	strb	r2, [r3, #0]
   b4786:	e7e8      	b.n	b475a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4788:	1deb      	adds	r3, r5, #7
   b478a:	f023 0307 	bic.w	r3, r3, #7
   b478e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4792:	462a      	mov	r2, r5
   b4794:	4621      	mov	r1, r4
   b4796:	4668      	mov	r0, sp
   b4798:	f00a f971 	bl	bea7e <memcpy>
    myFile.print(dataStr);
   b479c:	4669      	mov	r1, sp
   b479e:	4805      	ldr	r0, [pc, #20]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b47a0:	f008 fcc2 	bl	bd128 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b47a4:	f009 f8e0 	bl	bd968 <_Z16_fetch_usbserialv>
   b47a8:	4669      	mov	r1, sp
   b47aa:	f008 fcd0 	bl	bd14e <_ZN5Print7printlnEPKc>
   b47ae:	e7c4      	b.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b47b0:	000c0cbc 	.word	0x000c0cbc
   b47b4:	2003de0c 	.word	0x2003de0c
   b47b8:	2003de40 	.word	0x2003de40
   b47bc:	2003e5ec 	.word	0x2003e5ec
   b47c0:	000c0cc5 	.word	0x000c0cc5
   b47c4:	000c0cf8 	.word	0x000c0cf8
   b47c8:	2003de1c 	.word	0x2003de1c
   b47cc:	000c0d15 	.word	0x000c0d15
   b47d0:	000c0d1e 	.word	0x000c0d1e
   b47d4:	000c0d36 	.word	0x000c0d36
   b47d8:	000c0d3f 	.word	0x000c0d3f
   b47dc:	2003de5e 	.word	0x2003de5e

000b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47e0:	b530      	push	{r4, r5, lr}
   b47e2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47e4:	4b1b      	ldr	r3, [pc, #108]	; (b4854 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47e6:	9300      	str	r3, [sp, #0]
   b47e8:	7913      	ldrb	r3, [r2, #4]
   b47ea:	f88d 3004 	strb.w	r3, [sp, #4]
   b47ee:	6893      	ldr	r3, [r2, #8]
   b47f0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47f2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47f6:	8993      	ldrh	r3, [r2, #12]
   b47f8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47fc:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47fe:	460a      	mov	r2, r1
   b4800:	466b      	mov	r3, sp
   b4802:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4806:	4628      	mov	r0, r5
   b4808:	f003 fd88 	bl	b831c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b480c:	b910      	cbnz	r0, b4814 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b480e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4810:	b005      	add	sp, #20
   b4812:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b4814:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4816:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b481a:	4628      	mov	r0, r5
   b481c:	f002 fe58 	bl	b74d0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4820:	2101      	movs	r1, #1
   b4822:	4620      	mov	r0, r4
   b4824:	f003 fc24 	bl	b8070 <_ZN9FatVolume4initEh>
   b4828:	4601      	mov	r1, r0
   b482a:	b168      	cbz	r0, b4848 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b482c:	4621      	mov	r1, r4
   b482e:	4628      	mov	r0, r5
   b4830:	f002 fc85 	bl	b713e <_ZN7FatFile8openRootEP9FatVolume>
   b4834:	2800      	cmp	r0, #0
   b4836:	d0ea      	beq.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4838:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b483c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4840:	d0e5      	beq.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4842:	4b05      	ldr	r3, [pc, #20]	; (b4858 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4844:	601d      	str	r5, [r3, #0]
    return true;
   b4846:	e7e3      	b.n	b4810 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4848:	4620      	mov	r0, r4
   b484a:	f003 fc11 	bl	b8070 <_ZN9FatVolume4initEh>
   b484e:	2800      	cmp	r0, #0
   b4850:	d1ec      	bne.n	b482c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4852:	e7dc      	b.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4854:	000c1398 	.word	0x000c1398
   b4858:	2003e63c 	.word	0x2003e63c

000b485c <_Z10logMessagePKc>:
void logMessage(const char *message){
   b485c:	b538      	push	{r3, r4, r5, lr}
    return m_attr;
   b485e:	4c0d      	ldr	r4, [pc, #52]	; (b4894 <_Z10logMessagePKc+0x38>)
    if(!logFile.isOpen()){
   b4860:	7c23      	ldrb	r3, [r4, #16]
void logMessage(const char *message){
   b4862:	4605      	mov	r5, r0
    if(!logFile.isOpen()){
   b4864:	b983      	cbnz	r3, b4888 <_Z10logMessagePKc+0x2c>
        logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4866:	490c      	ldr	r1, [pc, #48]	; (b4898 <_Z10logMessagePKc+0x3c>)
   b4868:	f244 2202 	movw	r2, #16898	; 0x4202
   b486c:	f104 0010 	add.w	r0, r4, #16
   b4870:	f7ff ff04 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.println(message);
   b4874:	4629      	mov	r1, r5
   b4876:	4620      	mov	r0, r4
   b4878:	f008 fc69 	bl	bd14e <_ZN5Print7printlnEPKc>
        logFile.close();
   b487c:	f104 0010 	add.w	r0, r4, #16
}
   b4880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        logFile.close();
   b4884:	f002 be24 	b.w	b74d0 <_ZN7FatFile5closeEv>
    else logFile.println(message);
   b4888:	4601      	mov	r1, r0
   b488a:	4620      	mov	r0, r4
}
   b488c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else logFile.println(message);
   b4890:	f008 bc5d 	b.w	bd14e <_ZN5Print7printlnEPKc>
   b4894:	2003ddd4 	.word	0x2003ddd4
   b4898:	2003dd7c 	.word	0x2003dd7c

000b489c <_ZN8WaterBotC1Ev>:
class WaterBot{
   b489c:	f240 1201 	movw	r2, #257	; 0x101
   b48a0:	8002      	strh	r2, [r0, #0]
   b48a2:	f44f 7280 	mov.w	r2, #256	; 0x100
   b48a6:	8182      	strh	r2, [r0, #12]
   b48a8:	4a08      	ldr	r2, [pc, #32]	; (b48cc <_ZN8WaterBotC1Ev+0x30>)
   b48aa:	6102      	str	r2, [r0, #16]
   b48ac:	2100      	movs	r1, #0
   b48ae:	6142      	str	r2, [r0, #20]
   b48b0:	2200      	movs	r2, #0
   b48b2:	70c1      	strb	r1, [r0, #3]
   b48b4:	7241      	strb	r1, [r0, #9]
   b48b6:	8141      	strh	r1, [r0, #10]
   b48b8:	7381      	strb	r1, [r0, #14]
   b48ba:	6182      	str	r2, [r0, #24]
   b48bc:	61c2      	str	r2, [r0, #28]
   b48be:	6202      	str	r2, [r0, #32]
   b48c0:	6242      	str	r2, [r0, #36]	; 0x24
   b48c2:	6282      	str	r2, [r0, #40]	; 0x28
   b48c4:	62c2      	str	r2, [r0, #44]	; 0x2c
   b48c6:	6302      	str	r2, [r0, #48]	; 0x30
   b48c8:	6341      	str	r1, [r0, #52]	; 0x34
   b48ca:	4770      	bx	lr
   b48cc:	c479c000 	.word	0xc479c000

000b48d0 <_Z17processRPiCommandPKch>:
void processRPiCommand(const char *command, uint8_t mode){
   b48d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b48d4:	b094      	sub	sp, #80	; 0x50
    if(command[0] == 'R' && command[1] == 'P'){  
   b48d6:	7803      	ldrb	r3, [r0, #0]
   b48d8:	2b52      	cmp	r3, #82	; 0x52
void processRPiCommand(const char *command, uint8_t mode){
   b48da:	af06      	add	r7, sp, #24
   b48dc:	4604      	mov	r4, r0
   b48de:	4689      	mov	r9, r1
    if(command[0] == 'R' && command[1] == 'P'){  
   b48e0:	f040 8093 	bne.w	b4a0a <_Z17processRPiCommandPKch+0x13a>
   b48e4:	7843      	ldrb	r3, [r0, #1]
   b48e6:	2b50      	cmp	r3, #80	; 0x50
   b48e8:	f040 808f 	bne.w	b4a0a <_Z17processRPiCommandPKch+0x13a>
        Serial.println("Received Pi command");
   b48ec:	f009 f83c 	bl	bd968 <_Z16_fetch_usbserialv>
   b48f0:	497d      	ldr	r1, [pc, #500]	; (b4ae8 <_Z17processRPiCommandPKch+0x218>)
   b48f2:	f008 fc2c 	bl	bd14e <_ZN5Print7printlnEPKc>
        char dataStr[strlen(command)-8];
   b48f6:	4620      	mov	r0, r4
   b48f8:	f00a f99d 	bl	bec36 <strlen>
   b48fc:	3801      	subs	r0, #1
   b48fe:	f020 0007 	bic.w	r0, r0, #7
        }
   b4902:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b4904:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4908:	4620      	mov	r0, r4
   b490a:	f00a f994 	bl	bec36 <strlen>
        char dataStr[strlen(command)-8];
   b490e:	f10d 0a18 	add.w	sl, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4912:	4450      	add	r0, sl
   b4914:	2500      	movs	r5, #0
   b4916:	f800 5c09 	strb.w	r5, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b491a:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b491c:	74fd      	strb	r5, [r7, #19]
        checkStr[0] = command[strlen(command)-2];
   b491e:	f00a f98a 	bl	bec36 <strlen>
   b4922:	4420      	add	r0, r4
   b4924:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4928:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   b492a:	4620      	mov	r0, r4
   b492c:	f00a f983 	bl	bec36 <strlen>
   b4930:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4932:	4629      	mov	r1, r5
        checkStr[1] = command[strlen(command)-1];
   b4934:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4938:	737b      	strb	r3, [r7, #13]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b493a:	2210      	movs	r2, #16
   b493c:	f107 000c 	add.w	r0, r7, #12
        checkStr[2] = '\0';
   b4940:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4942:	f00b f865 	bl	bfa10 <strtol>
   b4946:	4606      	mov	r6, r0
        Serial.printlnf("Checksum: %02x, %03d, Checkstr: %s",checksum,checksum,command);
   b4948:	b2f6      	uxtb	r6, r6
   b494a:	f009 f80d 	bl	bd968 <_Z16_fetch_usbserialv>
   b494e:	4967      	ldr	r1, [pc, #412]	; (b4aec <_Z17processRPiCommandPKch+0x21c>)
   b4950:	9400      	str	r4, [sp, #0]
   b4952:	4633      	mov	r3, r6
   b4954:	4632      	mov	r2, r6
   b4956:	f7ff fcfd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b495a:	2504      	movs	r5, #4
   b495c:	4620      	mov	r0, r4
   b495e:	f00a f96a 	bl	bec36 <strlen>
   b4962:	3802      	subs	r0, #2
   b4964:	4285      	cmp	r5, r0
   b4966:	d212      	bcs.n	b498e <_Z17processRPiCommandPKch+0xbe>
            if(i < 7) cmdStr[i-4] = command[i];
   b4968:	2d06      	cmp	r5, #6
   b496a:	bf9b      	ittet	ls
   b496c:	f107 0338 	addls.w	r3, r7, #56	; 0x38
   b4970:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   b4972:	eb0a 0305 	addhi.w	r3, sl, r5
            if(i < 7) cmdStr[i-4] = command[i];
   b4976:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   b4978:	bf8c      	ite	hi
   b497a:	5d62      	ldrbhi	r2, [r4, r5]
            if(i < 7) cmdStr[i-4] = command[i];
   b497c:	f803 2c2c 	strbls.w	r2, [r3, #-44]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4980:	f105 0501 	add.w	r5, r5, #1
            else dataStr[i-7] = command[i];
   b4984:	bf88      	it	hi
   b4986:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b498a:	b2ed      	uxtb	r5, r5
   b498c:	e7e6      	b.n	b495c <_Z17processRPiCommandPKch+0x8c>
        if(checksum != strlen(command)-2){
   b498e:	42b0      	cmp	r0, r6
   b4990:	d045      	beq.n	b4a1e <_Z17processRPiCommandPKch+0x14e>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4992:	f008 ffe9 	bl	bd968 <_Z16_fetch_usbserialv>
   b4996:	4605      	mov	r5, r0
   b4998:	4620      	mov	r0, r4
   b499a:	f00a f94c 	bl	bec36 <strlen>
   b499e:	1e82      	subs	r2, r0, #2
   b49a0:	4628      	mov	r0, r5
   b49a2:	4d53      	ldr	r5, [pc, #332]	; (b4af0 <_Z17processRPiCommandPKch+0x220>)
   b49a4:	4953      	ldr	r1, [pc, #332]	; (b4af4 <_Z17processRPiCommandPKch+0x224>)
   b49a6:	4633      	mov	r3, r6
   b49a8:	f7ff fcd4 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b49ac:	7c2b      	ldrb	r3, [r5, #16]
   b49ae:	bb83      	cbnz	r3, b4a12 <_Z17processRPiCommandPKch+0x142>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49b0:	4951      	ldr	r1, [pc, #324]	; (b4af8 <_Z17processRPiCommandPKch+0x228>)
   b49b2:	f244 2202 	movw	r2, #16898	; 0x4202
   b49b6:	f105 0010 	add.w	r0, r5, #16
   b49ba:	f7ff fe5f 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b49be:	494f      	ldr	r1, [pc, #316]	; (b4afc <_Z17processRPiCommandPKch+0x22c>)
   b49c0:	4622      	mov	r2, r4
   b49c2:	4628      	mov	r0, r5
   b49c4:	f7ff fcc6 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b49c8:	f105 0010 	add.w	r0, r5, #16
   b49cc:	f002 fd80 	bl	b74d0 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b49d0:	f008 ffca 	bl	bd968 <_Z16_fetch_usbserialv>
   b49d4:	494a      	ldr	r1, [pc, #296]	; (b4b00 <_Z17processRPiCommandPKch+0x230>)
   b49d6:	f008 fbba 	bl	bd14e <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b49da:	7863      	ldrb	r3, [r4, #1]
   b49dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b49e0:	2a09      	cmp	r2, #9
   b49e2:	d901      	bls.n	b49e8 <_Z17processRPiCommandPKch+0x118>
   b49e4:	2b43      	cmp	r3, #67	; 0x43
   b49e6:	d10f      	bne.n	b4a08 <_Z17processRPiCommandPKch+0x138>
                rxBotNum[0] = command[0];
   b49e8:	7822      	ldrb	r2, [r4, #0]
   b49ea:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
                rxBotNum[1] = command[1];
   b49ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b49f2:	4944      	ldr	r1, [pc, #272]	; (b4b04 <_Z17processRPiCommandPKch+0x234>)
   b49f4:	4844      	ldr	r0, [pc, #272]	; (b4b08 <_Z17processRPiCommandPKch+0x238>)
   b49f6:	f107 0310 	add.w	r3, r7, #16
   b49fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   b49fe:	f005 fadf 	bl	b9fc0 <sprintf>
                errModeReply = mode;
   b4a02:	4b42      	ldr	r3, [pc, #264]	; (b4b0c <_Z17processRPiCommandPKch+0x23c>)
   b4a04:	f883 9000 	strb.w	r9, [r3]
   b4a08:	46c5      	mov	sp, r8
}
   b4a0a:	3738      	adds	r7, #56	; 0x38
   b4a0c:	46bd      	mov	sp, r7
   b4a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b4a12:	493a      	ldr	r1, [pc, #232]	; (b4afc <_Z17processRPiCommandPKch+0x22c>)
   b4a14:	4622      	mov	r2, r4
   b4a16:	4628      	mov	r0, r5
   b4a18:	f7ff fc9c 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4a1c:	e7d8      	b.n	b49d0 <_Z17processRPiCommandPKch+0x100>
        if(!strcmp(cmdStr,"ctl")){
   b4a1e:	493c      	ldr	r1, [pc, #240]	; (b4b10 <_Z17processRPiCommandPKch+0x240>)
   b4a20:	f107 0010 	add.w	r0, r7, #16
   b4a24:	f00a f8d7 	bl	bebd6 <strcmp>
   b4a28:	4605      	mov	r5, r0
   b4a2a:	2800      	cmp	r0, #0
   b4a2c:	d1ec      	bne.n	b4a08 <_Z17processRPiCommandPKch+0x138>
            sscanf(dataStr,"%s %s %s %d %d %d %d",idStr,GPSLatstr,GPSLonstr,&drivemode,&offloading,&recording,&signal);
   b4a2e:	1dfb      	adds	r3, r7, #7
   b4a30:	9304      	str	r3, [sp, #16]
   b4a32:	1dbb      	adds	r3, r7, #6
   b4a34:	9303      	str	r3, [sp, #12]
   b4a36:	1d3b      	adds	r3, r7, #4
   b4a38:	9302      	str	r3, [sp, #8]
   b4a3a:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   b4a3e:	1d7b      	adds	r3, r7, #5
   b4a40:	4934      	ldr	r1, [pc, #208]	; (b4b14 <_Z17processRPiCommandPKch+0x244>)
   b4a42:	9301      	str	r3, [sp, #4]
   b4a44:	f107 0214 	add.w	r2, r7, #20
   b4a48:	f107 0320 	add.w	r3, r7, #32
   b4a4c:	9600      	str	r6, [sp, #0]
   b4a4e:	4650      	mov	r0, sl
   b4a50:	f005 fabe 	bl	b9fd0 <sscanf>
            char botChar[2] = {command[8], '\0'};
   b4a54:	7a23      	ldrb	r3, [r4, #8]
   b4a56:	723b      	strb	r3, [r7, #8]
            uint8_t targetBot = atoi(botChar);
   b4a58:	f107 0008 	add.w	r0, r7, #8
            char botChar[2] = {command[8], '\0'};
   b4a5c:	727d      	strb	r5, [r7, #9]
            uint8_t targetBot = atoi(botChar);
   b4a5e:	f009 fffa 	bl	bea56 <atoi>
   b4a62:	b2c5      	uxtb	r5, r0
            Serial.printlnf("Got a command packet from Pi for Bot %d",targetBot);
   b4a64:	f008 ff80 	bl	bd968 <_Z16_fetch_usbserialv>
   b4a68:	492b      	ldr	r1, [pc, #172]	; (b4b18 <_Z17processRPiCommandPKch+0x248>)
   b4a6a:	462a      	mov	r2, r5
   b4a6c:	f7ff fc72 	bl	b4354 <_ZN5Print8printlnfEPKcz>
      : _M_current(__i) { }
   b4a70:	4b2a      	ldr	r3, [pc, #168]	; (b4b1c <_Z17processRPiCommandPKch+0x24c>)
   b4a72:	e9d3 3100 	ldrd	r3, r1, [r3]
            for(WaterBot &wb: WaterBots){
   b4a76:	4299      	cmp	r1, r3
   b4a78:	461c      	mov	r4, r3
   b4a7a:	d0c5      	beq.n	b4a08 <_Z17processRPiCommandPKch+0x138>
                if(wb.botNum == targetBot){
   b4a7c:	78a2      	ldrb	r2, [r4, #2]
   b4a7e:	42aa      	cmp	r2, r5
   b4a80:	f103 033c 	add.w	r3, r3, #60	; 0x3c
   b4a84:	d1f7      	bne.n	b4a76 <_Z17processRPiCommandPKch+0x1a6>
                    wb.TargetLat = atof(GPSLatstr);
   b4a86:	f107 0020 	add.w	r0, r7, #32
   b4a8a:	f009 ffe1 	bl	bea50 <atof>
   b4a8e:	ec51 0b10 	vmov	r0, r1, d0
   b4a92:	f009 ff69 	bl	be968 <__aeabi_d2f>
   b4a96:	6120      	str	r0, [r4, #16]
                    wb.TargetLon = atof(GPSLonstr);
   b4a98:	4630      	mov	r0, r6
   b4a9a:	f009 ffd9 	bl	bea50 <atof>
   b4a9e:	ec51 0b10 	vmov	r0, r1, d0
   b4aa2:	f009 ff61 	bl	be968 <__aeabi_d2f>
                    wb.driveMode = drivemode;
   b4aa6:	797b      	ldrb	r3, [r7, #5]
   b4aa8:	7263      	strb	r3, [r4, #9]
                    wb.offloading = offloading;
   b4aaa:	793b      	ldrb	r3, [r7, #4]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4aac:	78a2      	ldrb	r2, [r4, #2]
                    wb.TargetLon = atof(GPSLonstr);
   b4aae:	6160      	str	r0, [r4, #20]
                    wb.offloading = offloading;
   b4ab0:	3b00      	subs	r3, #0
   b4ab2:	bf18      	it	ne
   b4ab4:	2301      	movne	r3, #1
   b4ab6:	73a3      	strb	r3, [r4, #14]
                    wb.dataRecording = recording;
   b4ab8:	79bb      	ldrb	r3, [r7, #6]
   b4aba:	3b00      	subs	r3, #0
   b4abc:	bf18      	it	ne
   b4abe:	2301      	movne	r3, #1
   b4ac0:	7363      	strb	r3, [r4, #13]
                    wb.signal = signal;
   b4ac2:	79fb      	ldrb	r3, [r7, #7]
   b4ac4:	3b00      	subs	r3, #0
   b4ac6:	bf18      	it	ne
   b4ac8:	2301      	movne	r3, #1
   b4aca:	72a3      	strb	r3, [r4, #10]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4acc:	4b14      	ldr	r3, [pc, #80]	; (b4b20 <_Z17processRPiCommandPKch+0x250>)
   b4ace:	781b      	ldrb	r3, [r3, #0]
   b4ad0:	429a      	cmp	r2, r3
   b4ad2:	bf08      	it	eq
   b4ad4:	4a13      	ldreq	r2, [pc, #76]	; (b4b24 <_Z17processRPiCommandPKch+0x254>)
   b4ad6:	f04f 0301 	mov.w	r3, #1
   b4ada:	bf08      	it	eq
   b4adc:	7013      	strbeq	r3, [r2, #0]
                    updateControl = true;
   b4ade:	4a12      	ldr	r2, [pc, #72]	; (b4b28 <_Z17processRPiCommandPKch+0x258>)
                    wb.updatedControl = true;
   b4ae0:	7063      	strb	r3, [r4, #1]
                    updateControl = true;
   b4ae2:	7013      	strb	r3, [r2, #0]
                    return;
   b4ae4:	e790      	b.n	b4a08 <_Z17processRPiCommandPKch+0x138>
   b4ae6:	bf00      	nop
   b4ae8:	000c0d55 	.word	0x000c0d55
   b4aec:	000c0d69 	.word	0x000c0d69
   b4af0:	2003ddd4 	.word	0x2003ddd4
   b4af4:	000c0d8c 	.word	0x000c0d8c
   b4af8:	2003dd7c 	.word	0x2003dd7c
   b4afc:	000c0da9 	.word	0x000c0da9
   b4b00:	000c0dd9 	.word	0x000c0dd9
   b4b04:	000c0dfa 	.word	0x000c0dfa
   b4b08:	2003dd68 	.word	0x2003dd68
   b4b0c:	2003dd7b 	.word	0x2003dd7b
   b4b10:	000c0e06 	.word	0x000c0e06
   b4b14:	000c0e0a 	.word	0x000c0e0a
   b4b18:	000c0e1f 	.word	0x000c0e1f
   b4b1c:	2003dcc0 	.word	0x2003dcc0
   b4b20:	2003dd59 	.word	0x2003dd59
   b4b24:	2003da88 	.word	0x2003da88
   b4b28:	2003e636 	.word	0x2003e636

000b4b2c <_Z9setupXBeev>:
void setupXBee(){
   b4b2c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4b2e:	f009 f8b3 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   b4b32:	4908      	ldr	r1, [pc, #32]	; (b4b54 <_Z9setupXBeev+0x28>)
   b4b34:	f7ff fbd5 	bl	b42e2 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4b38:	2014      	movs	r0, #20
   b4b3a:	f005 fa91 	bl	ba060 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4b3e:	f009 f8ab 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   b4b42:	4905      	ldr	r1, [pc, #20]	; (b4b58 <_Z9setupXBeev+0x2c>)
   b4b44:	f7ff fbcd 	bl	b42e2 <_ZN5Print6printfEPKcz>
}
   b4b48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4b4c:	2014      	movs	r0, #20
   b4b4e:	f005 ba87 	b.w	ba060 <delay>
   b4b52:	bf00      	nop
   b4b54:	000c1165 	.word	0x000c1165
   b4b58:	000c138c 	.word	0x000c138c

000b4b5c <_Z10RPiHandlerv>:
void RPiHandler(){
   b4b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            if(logMessages){
   b4b60:	4e29      	ldr	r6, [pc, #164]	; (b4c08 <_Z10RPiHandlerv+0xac>)
   b4b62:	4c2a      	ldr	r4, [pc, #168]	; (b4c0c <_Z10RPiHandlerv+0xb0>)
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4b64:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b4c18 <_Z10RPiHandlerv+0xbc>
void RPiHandler(){
   b4b68:	b088      	sub	sp, #32
   b4b6a:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b4b6c:	f008 fefc 	bl	bd968 <_Z16_fetch_usbserialv>
   b4b70:	6803      	ldr	r3, [r0, #0]
   b4b72:	691b      	ldr	r3, [r3, #16]
   b4b74:	4798      	blx	r3
   b4b76:	2800      	cmp	r0, #0
   b4b78:	d042      	beq.n	b4c00 <_Z10RPiHandlerv+0xa4>
            String data = Serial.readStringUntil('\n');
   b4b7a:	f008 fef5 	bl	bd968 <_Z16_fetch_usbserialv>
   b4b7e:	220a      	movs	r2, #10
   b4b80:	4601      	mov	r1, r0
   b4b82:	4638      	mov	r0, r7
   b4b84:	f008 fc28 	bl	bd3d8 <_ZN6Stream15readStringUntilEc>
            Serial.println(data);
   b4b88:	f008 feee 	bl	bd968 <_Z16_fetch_usbserialv>
   b4b8c:	6839      	ldr	r1, [r7, #0]
   b4b8e:	f008 fade 	bl	bd14e <_ZN5Print7printlnEPKc>
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4b92:	68ba      	ldr	r2, [r7, #8]
            char buffer[data.length() + 2];
   b4b94:	f102 0309 	add.w	r3, r2, #9
   b4b98:	f023 0307 	bic.w	r3, r3, #7
    }
   b4b9c:	466d      	mov	r5, sp
            char buffer[data.length() + 2];
   b4b9e:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4ba2:	3201      	adds	r2, #1
   b4ba4:	2300      	movs	r3, #0
   b4ba6:	4669      	mov	r1, sp
   b4ba8:	4638      	mov	r0, r7
   b4baa:	f008 fd31 	bl	bd610 <_ZNK6String8getBytesEPhjj>
            buffer[data.length() + 1] = 0;
   b4bae:	68bb      	ldr	r3, [r7, #8]
   b4bb0:	446b      	add	r3, sp
   b4bb2:	2200      	movs	r2, #0
   b4bb4:	705a      	strb	r2, [r3, #1]
            processRPiCommand(buffer,3);
   b4bb6:	2103      	movs	r1, #3
   b4bb8:	4668      	mov	r0, sp
   b4bba:	f7ff fe89 	bl	b48d0 <_Z17processRPiCommandPKch>
            if(logMessages){
   b4bbe:	7833      	ldrb	r3, [r6, #0]
   b4bc0:	b1cb      	cbz	r3, b4bf6 <_Z10RPiHandlerv+0x9a>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bc2:	7c23      	ldrb	r3, [r4, #16]
   b4bc4:	b92b      	cbnz	r3, b4bd2 <_Z10RPiHandlerv+0x76>
   b4bc6:	4912      	ldr	r1, [pc, #72]	; (b4c10 <_Z10RPiHandlerv+0xb4>)
   b4bc8:	4812      	ldr	r0, [pc, #72]	; (b4c14 <_Z10RPiHandlerv+0xb8>)
   b4bca:	f244 2202 	movw	r2, #16898	; 0x4202
   b4bce:	f7ff fd55 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4bd2:	4639      	mov	r1, r7
   b4bd4:	f107 0010 	add.w	r0, r7, #16
   b4bd8:	f008 fcac 	bl	bd534 <_ZN6StringC1ERKS_>
   b4bdc:	f107 0210 	add.w	r2, r7, #16
   b4be0:	4641      	mov	r1, r8
   b4be2:	4620      	mov	r0, r4
   b4be4:	f7ff fbb6 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4be8:	f107 0010 	add.w	r0, r7, #16
   b4bec:	f008 fc0c 	bl	bd408 <_ZN6StringD1Ev>
                logFile.close();
   b4bf0:	4808      	ldr	r0, [pc, #32]	; (b4c14 <_Z10RPiHandlerv+0xb8>)
   b4bf2:	f002 fc6d 	bl	b74d0 <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b4bf6:	4638      	mov	r0, r7
   b4bf8:	f008 fc06 	bl	bd408 <_ZN6StringD1Ev>
   b4bfc:	46ad      	mov	sp, r5
    while(Serial.available()){
   b4bfe:	e7b5      	b.n	b4b6c <_Z10RPiHandlerv+0x10>
}
   b4c00:	3720      	adds	r7, #32
   b4c02:	46bd      	mov	sp, r7
   b4c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c08:	2003de08 	.word	0x2003de08
   b4c0c:	2003ddd4 	.word	0x2003ddd4
   b4c10:	2003dd7c 	.word	0x2003dd7c
   b4c14:	2003dde4 	.word	0x2003dde4
   b4c18:	000c0e47 	.word	0x000c0e47

000b4c1c <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c20:	b084      	sub	sp, #16
   b4c22:	af02      	add	r7, sp, #8
   b4c24:	4680      	mov	r8, r0
   b4c26:	4691      	mov	r9, r2
   b4c28:	461e      	mov	r6, r3
   b4c2a:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b4c2c:	f00a f803 	bl	bec36 <strlen>
   b4c30:	3009      	adds	r0, #9
   b4c32:	f020 0107 	bic.w	r1, r0, #7
   b4c36:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c3a:	4640      	mov	r0, r8
   b4c3c:	f009 fffb 	bl	bec36 <strlen>
    char outStr[strlen(dataOut)+2];
   b4c40:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c42:	4929      	ldr	r1, [pc, #164]	; (b4ce8 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4c44:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c48:	4603      	mov	r3, r0
   b4c4a:	4642      	mov	r2, r8
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	f005 f9b7 	bl	b9fc0 <sprintf>
    Serial.println(outStr);
   b4c52:	f008 fe89 	bl	bd968 <_Z16_fetch_usbserialv>
   b4c56:	4621      	mov	r1, r4
   b4c58:	f008 fa79 	bl	bd14e <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b4c5c:	f1ba 0f00 	cmp.w	sl, #0
   b4c60:	d101      	bne.n	b4c66 <_Z8sendDataPKchbbb+0x4a>
   b4c62:	2d04      	cmp	r5, #4
   b4c64:	d10d      	bne.n	b4c82 <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4c66:	4b21      	ldr	r3, [pc, #132]	; (b4cec <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4c68:	4921      	ldr	r1, [pc, #132]	; (b4cf0 <_Z8sendDataPKchbbb+0xd4>)
   b4c6a:	781b      	ldrb	r3, [r3, #0]
   b4c6c:	f88d 3000 	strb.w	r3, [sp]
   b4c70:	4638      	mov	r0, r7
   b4c72:	233c      	movs	r3, #60	; 0x3c
   b4c74:	4622      	mov	r2, r4
   b4c76:	f007 fee7 	bl	bca48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4c7a:	6878      	ldr	r0, [r7, #4]
   b4c7c:	b108      	cbz	r0, b4c82 <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b4c7e:	f7ff fcb9 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4c82:	f1b9 0f00 	cmp.w	r9, #0
   b4c86:	d101      	bne.n	b4c8c <_Z8sendDataPKchbbb+0x70>
   b4c88:	2d01      	cmp	r5, #1
   b4c8a:	d121      	bne.n	b4cd0 <_Z8sendDataPKchbbb+0xb4>
   b4c8c:	f005 ff02 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c90:	f005 ffad 	bl	babee <_ZNK8particle14BleLocalDevice9connectedEv>
   b4c94:	b1e0      	cbz	r0, b4cd0 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c96:	4620      	mov	r0, r4
   b4c98:	f009 ffcd 	bl	bec36 <strlen>
   b4c9c:	3007      	adds	r0, #7
   b4c9e:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4ca2:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4ca4:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4ca8:	4620      	mov	r0, r4
   b4caa:	f009 ffc4 	bl	bec36 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4cae:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4cb2:	4602      	mov	r2, r0
   b4cb4:	4621      	mov	r1, r4
   b4cb6:	4648      	mov	r0, r9
   b4cb8:	f009 fee1 	bl	bea7e <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4cbc:	4620      	mov	r0, r4
   b4cbe:	f009 ffba 	bl	bec36 <strlen>
   b4cc2:	2300      	movs	r3, #0
   b4cc4:	4602      	mov	r2, r0
   b4cc6:	4649      	mov	r1, r9
   b4cc8:	480a      	ldr	r0, [pc, #40]	; (b4cf4 <_Z8sendDataPKchbbb+0xd8>)
   b4cca:	f005 fd7d 	bl	ba7c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4cce:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4cd0:	b90e      	cbnz	r6, b4cd6 <_Z8sendDataPKchbbb+0xba>
   b4cd2:	2d02      	cmp	r5, #2
   b4cd4:	d104      	bne.n	b4ce0 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4cd6:	f008 ffdf 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   b4cda:	4621      	mov	r1, r4
   b4cdc:	f008 fa37 	bl	bd14e <_ZN5Print7printlnEPKc>
}
   b4ce0:	3708      	adds	r7, #8
   b4ce2:	46bd      	mov	sp, r7
   b4ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4ce8:	000c0e70 	.word	0x000c0e70
   b4cec:	2003dd08 	.word	0x2003dd08
   b4cf0:	000c0e77 	.word	0x000c0e77
   b4cf4:	2003dec8 	.word	0x2003dec8

000b4cf8 <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b4cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4cfc:	4605      	mov	r5, r0
   b4cfe:	b087      	sub	sp, #28
    VRead = 4095-analogRead(JOYV_ADC);
   b4d00:	2010      	movs	r0, #16
   b4d02:	f008 ff5b 	bl	bdbbc <analogRead>
   b4d06:	f5c0 667f 	rsb	r6, r0, #4080	; 0xff0
   b4d0a:	4604      	mov	r4, r0
    HRead = analogRead(JOYH_ADC);
   b4d0c:	2011      	movs	r0, #17
   b4d0e:	f008 ff55 	bl	bdbbc <analogRead>
    VRead = 4095-analogRead(JOYV_ADC);
   b4d12:	360f      	adds	r6, #15
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4d14:	f240 77dc 	movw	r7, #2012	; 0x7dc
   b4d18:	42be      	cmp	r6, r7
    HRead = analogRead(JOYH_ADC);
   b4d1a:	4603      	mov	r3, r0
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4d1c:	dc40      	bgt.n	b4da0 <_Z18manualMotorControlh+0xa8>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d1e:	f5c4 6402 	rsb	r4, r4, #2080	; 0x820
        if(VSet < -90) VSet = -90;
   b4d22:	4a70      	ldr	r2, [pc, #448]	; (b4ee4 <_Z18manualMotorControlh+0x1ec>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d24:	3402      	adds	r4, #2
   b4d26:	f06f 0759 	mvn.w	r7, #89	; 0x59
   b4d2a:	437c      	muls	r4, r7
        if(VSet < -90) VSet = -90;
   b4d2c:	4294      	cmp	r4, r2
   b4d2e:	dc03      	bgt.n	b4d38 <_Z18manualMotorControlh+0x40>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d30:	f2a7 7782 	subw	r7, r7, #1922	; 0x782
   b4d34:	fb94 f7f7 	sdiv	r7, r4, r7
    if(HRead < JOY_MID - JOY_DEADZONE){
   b4d38:	f240 72dc 	movw	r2, #2012	; 0x7dc
   b4d3c:	4293      	cmp	r3, r2
   b4d3e:	dc42      	bgt.n	b4dc6 <_Z18manualMotorControlh+0xce>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d40:	f2a3 70dd 	subw	r0, r3, #2013	; 0x7dd
   b4d44:	f06f 0659 	mvn.w	r6, #89	; 0x59
        if(HSet < -90) HSet = -90;
   b4d48:	4b66      	ldr	r3, [pc, #408]	; (b4ee4 <_Z18manualMotorControlh+0x1ec>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d4a:	4370      	muls	r0, r6
        if(HSet < -90) HSet = -90;
   b4d4c:	4298      	cmp	r0, r3
   b4d4e:	dc03      	bgt.n	b4d58 <_Z18manualMotorControlh+0x60>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d50:	f2a6 7682 	subw	r6, r6, #1922	; 0x782
   b4d54:	fb90 f6f6 	sdiv	r6, r0, r6
    if(VSet > 0){
   b4d58:	2f00      	cmp	r7, #0
   b4d5a:	dc45      	bgt.n	b4de8 <_Z18manualMotorControlh+0xf0>
                RSpeed = 90 - HSet/2 + VSet;
   b4d5c:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
   b4d60:	1048      	asrs	r0, r1, #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4d62:	42b7      	cmp	r7, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4d64:	f1c0 0000 	rsb	r0, r0, #0
   b4d68:	ea4f 0861 	mov.w	r8, r1, asr #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4d6c:	f340 80ac 	ble.w	b4ec8 <_Z18manualMotorControlh+0x1d0>
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4d70:	305a      	adds	r0, #90	; 0x5a
   b4d72:	f009 fad5 	bl	be320 <__aeabi_i2d>
   b4d76:	4682      	mov	sl, r0
   b4d78:	4638      	mov	r0, r7
   b4d7a:	468b      	mov	fp, r1
   b4d7c:	f009 fad0 	bl	be320 <__aeabi_i2d>
   b4d80:	4b59      	ldr	r3, [pc, #356]	; (b4ee8 <_Z18manualMotorControlh+0x1f0>)
   b4d82:	2200      	movs	r2, #0
   b4d84:	f009 fb36 	bl	be3f4 <__aeabi_dmul>
   b4d88:	4602      	mov	r2, r0
   b4d8a:	460b      	mov	r3, r1
   b4d8c:	4650      	mov	r0, sl
   b4d8e:	4659      	mov	r1, fp
   b4d90:	f009 f97a 	bl	be088 <__adddf3>
   b4d94:	f009 fdc8 	bl	be928 <__aeabi_d2uiz>
                LSpeed = 90 + HSet/2;
   b4d98:	f108 015a 	add.w	r1, r8, #90	; 0x5a
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4d9c:	b2c4      	uxtb	r4, r0
                LSpeed = 90 + HSet/2;
   b4d9e:	e035      	b.n	b4e0c <_Z18manualMotorControlh+0x114>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b4da0:	f640 0223 	movw	r2, #2083	; 0x823
   b4da4:	4296      	cmp	r6, r2
   b4da6:	dd0a      	ble.n	b4dbe <_Z18manualMotorControlh+0xc6>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4da8:	1b38      	subs	r0, r7, r4
        if(VSet > 90) VSet = 90;
   b4daa:	4a50      	ldr	r2, [pc, #320]	; (b4eec <_Z18manualMotorControlh+0x1f4>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4dac:	245a      	movs	r4, #90	; 0x5a
   b4dae:	4360      	muls	r0, r4
        if(VSet > 90) VSet = 90;
   b4db0:	4290      	cmp	r0, r2
   b4db2:	dc06      	bgt.n	b4dc2 <_Z18manualMotorControlh+0xca>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4db4:	f240 74db 	movw	r4, #2011	; 0x7db
   b4db8:	fb90 f7f4 	sdiv	r7, r0, r4
   b4dbc:	e7bc      	b.n	b4d38 <_Z18manualMotorControlh+0x40>
        VSet = 0;
   b4dbe:	2700      	movs	r7, #0
   b4dc0:	e7ba      	b.n	b4d38 <_Z18manualMotorControlh+0x40>
        if(VSet > 90) VSet = 90;
   b4dc2:	4627      	mov	r7, r4
   b4dc4:	e7b8      	b.n	b4d38 <_Z18manualMotorControlh+0x40>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b4dc6:	f640 0223 	movw	r2, #2083	; 0x823
   b4dca:	4293      	cmp	r3, r2
   b4dcc:	dd21      	ble.n	b4e12 <_Z18manualMotorControlh+0x11a>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4dce:	f6a3 0023 	subw	r0, r3, #2083	; 0x823
   b4dd2:	265a      	movs	r6, #90	; 0x5a
        if(HSet > 90) HSet = 90;
   b4dd4:	4b45      	ldr	r3, [pc, #276]	; (b4eec <_Z18manualMotorControlh+0x1f4>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4dd6:	4370      	muls	r0, r6
        if(HSet > 90) HSet = 90;
   b4dd8:	4298      	cmp	r0, r3
   b4dda:	dc03      	bgt.n	b4de4 <_Z18manualMotorControlh+0xec>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4ddc:	f240 76db 	movw	r6, #2011	; 0x7db
   b4de0:	fbb0 f6f6 	udiv	r6, r0, r6
    if(VSet > 0){
   b4de4:	2f00      	cmp	r7, #0
   b4de6:	dd44      	ble.n	b4e72 <_Z18manualMotorControlh+0x17a>
   b4de8:	f107 025a 	add.w	r2, r7, #90	; 0x5a
   b4dec:	0ff1      	lsrs	r1, r6, #31
        if(HSet > 0){
   b4dee:	2e00      	cmp	r6, #0
    LSpeed = 90 + VSet/2;
   b4df0:	f3c7 0047 	ubfx	r0, r7, #1, #8
        if(HSet > 0){
   b4df4:	b2d2      	uxtb	r2, r2
                RSpeed = 90 - HSet/2 + VSet;
   b4df6:	4431      	add	r1, r6
        if(HSet > 0){
   b4df8:	dd0d      	ble.n	b4e16 <_Z18manualMotorControlh+0x11e>
                RSpeed = 90 - HSet/2 + VSet;
   b4dfa:	eba2 0161 	sub.w	r1, r2, r1, asr #1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4dfe:	42be      	cmp	r6, r7
                RSpeed = 90 - HSet/2 + VSet;
   b4e00:	b2cc      	uxtb	r4, r1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4e02:	dd68      	ble.n	b4ed6 <_Z18manualMotorControlh+0x1de>
                LSpeed = 90 + HSet/2 + VSet/2;
   b4e04:	f100 015a 	add.w	r1, r0, #90	; 0x5a
   b4e08:	eb01 0166 	add.w	r1, r1, r6, asr #1
                LSpeed = 90 + HSet/2;
   b4e0c:	fa5f f881 	uxtb.w	r8, r1
   b4e10:	e00f      	b.n	b4e32 <_Z18manualMotorControlh+0x13a>
        HSet = 0;
   b4e12:	2600      	movs	r6, #0
   b4e14:	e7e6      	b.n	b4de4 <_Z18manualMotorControlh+0xec>
            if((0-HSet) > VSet){
   b4e16:	4276      	negs	r6, r6
                LSpeed = 90 + HSet/2 + VSet;
   b4e18:	ea4f 0c61 	mov.w	ip, r1, asr #1
            if((0-HSet) > VSet){
   b4e1c:	42be      	cmp	r6, r7
                LSpeed = 90 + HSet/2 + VSet;
   b4e1e:	eb02 0161 	add.w	r1, r2, r1, asr #1
   b4e22:	fa5f f881 	uxtb.w	r8, r1
            if((0-HSet) > VSet){
   b4e26:	dd58      	ble.n	b4eda <_Z18manualMotorControlh+0x1e2>
                RSpeed = 90 - HSet/2 + VSet/2;
   b4e28:	f100 045a 	add.w	r4, r0, #90	; 0x5a
   b4e2c:	eba4 040c 	sub.w	r4, r4, ip
                RSpeed = 90 + HSet/2 + VSet;
   b4e30:	b2e4      	uxtb	r4, r4
   b4e32:	4b2f      	ldr	r3, [pc, #188]	; (b4ef0 <_Z18manualMotorControlh+0x1f8>)
        if(wb.driveMode == 0 && wb.botNum == botSelect){
   b4e34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b4ef4 <_Z18manualMotorControlh+0x1fc>
            sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4e38:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4ef8 <_Z18manualMotorControlh+0x200>
   b4e3c:	e9d3 6900 	ldrd	r6, r9, [r3]
    for(WaterBot wb: WaterBots){
   b4e40:	45b1      	cmp	r9, r6
   b4e42:	d04c      	beq.n	b4ede <_Z18manualMotorControlh+0x1e6>
        if(wb.driveMode == 0 && wb.botNum == botSelect){
   b4e44:	7a77      	ldrb	r7, [r6, #9]
   b4e46:	b997      	cbnz	r7, b4e6e <_Z18manualMotorControlh+0x176>
   b4e48:	f89a 2000 	ldrb.w	r2, [sl]
   b4e4c:	78b3      	ldrb	r3, [r6, #2]
   b4e4e:	429a      	cmp	r2, r3
   b4e50:	d10d      	bne.n	b4e6e <_Z18manualMotorControlh+0x176>
            sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4e52:	4643      	mov	r3, r8
   b4e54:	462a      	mov	r2, r5
   b4e56:	4659      	mov	r1, fp
   b4e58:	9400      	str	r4, [sp, #0]
   b4e5a:	a802      	add	r0, sp, #8
   b4e5c:	f005 f8b0 	bl	b9fc0 <sprintf>
            sendData(mtrStr,0,true,false, false);
   b4e60:	9700      	str	r7, [sp, #0]
   b4e62:	463b      	mov	r3, r7
   b4e64:	2201      	movs	r2, #1
   b4e66:	4639      	mov	r1, r7
   b4e68:	a802      	add	r0, sp, #8
   b4e6a:	f7ff fed7 	bl	b4c1c <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b4e6e:	363c      	adds	r6, #60	; 0x3c
	return *this;
   b4e70:	e7e6      	b.n	b4e40 <_Z18manualMotorControlh+0x148>
        if(HSet > 0){
   b4e72:	2e00      	cmp	r6, #0
   b4e74:	f43f af72 	beq.w	b4d5c <_Z18manualMotorControlh+0x64>
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4e78:	427b      	negs	r3, r7
   b4e7a:	42b3      	cmp	r3, r6
                LSpeed = 90 + HSet/2 + VSet/2;
   b4e7c:	ea4f 0066 	mov.w	r0, r6, asr #1
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4e80:	da1b      	bge.n	b4eba <_Z18manualMotorControlh+0x1c2>
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4e82:	305a      	adds	r0, #90	; 0x5a
   b4e84:	f009 fa4c 	bl	be320 <__aeabi_i2d>
   b4e88:	4680      	mov	r8, r0
   b4e8a:	4638      	mov	r0, r7
   b4e8c:	4689      	mov	r9, r1
   b4e8e:	f009 fa47 	bl	be320 <__aeabi_i2d>
   b4e92:	4b15      	ldr	r3, [pc, #84]	; (b4ee8 <_Z18manualMotorControlh+0x1f0>)
   b4e94:	2200      	movs	r2, #0
   b4e96:	f009 faad 	bl	be3f4 <__aeabi_dmul>
   b4e9a:	4602      	mov	r2, r0
   b4e9c:	460b      	mov	r3, r1
   b4e9e:	4640      	mov	r0, r8
   b4ea0:	4649      	mov	r1, r9
   b4ea2:	f009 f8f1 	bl	be088 <__adddf3>
   b4ea6:	f009 fd3f 	bl	be928 <__aeabi_d2uiz>
                RSpeed = (90 - HSet/2);      
   b4eaa:	eb06 74d6 	add.w	r4, r6, r6, lsr #31
   b4eae:	1064      	asrs	r4, r4, #1
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4eb0:	fa5f f880 	uxtb.w	r8, r0
                RSpeed = (90 - HSet/2);      
   b4eb4:	f1c4 045a 	rsb	r4, r4, #90	; 0x5a
   b4eb8:	e7ba      	b.n	b4e30 <_Z18manualMotorControlh+0x138>
                LSpeed = 90 + VSet;
   b4eba:	f107 045a 	add.w	r4, r7, #90	; 0x5a
   b4ebe:	fa5f f884 	uxtb.w	r8, r4
                RSpeed = 90 + HSet/2 + VSet;
   b4ec2:	fa50 f484 	uxtab	r4, r0, r4
   b4ec6:	e7b3      	b.n	b4e30 <_Z18manualMotorControlh+0x138>
                RSpeed = 90 + VSet;
   b4ec8:	375a      	adds	r7, #90	; 0x5a
   b4eca:	b2fc      	uxtb	r4, r7
                LSpeed = 90 - HSet/2 + VSet;
   b4ecc:	fa50 f787 	uxtab	r7, r0, r7
   b4ed0:	fa5f f887 	uxtb.w	r8, r7
   b4ed4:	e7ad      	b.n	b4e32 <_Z18manualMotorControlh+0x13a>
                LSpeed = 90 + VSet;
   b4ed6:	4690      	mov	r8, r2
   b4ed8:	e7ab      	b.n	b4e32 <_Z18manualMotorControlh+0x13a>
                RSpeed = 90 + VSet;
   b4eda:	4614      	mov	r4, r2
   b4edc:	e7a9      	b.n	b4e32 <_Z18manualMotorControlh+0x13a>
}
   b4ede:	b007      	add	sp, #28
   b4ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4ee4:	0002cb33 	.word	0x0002cb33
   b4ee8:	3ff80000 	.word	0x3ff80000
   b4eec:	0002cad8 	.word	0x0002cad8
   b4ef0:	2003dcc0 	.word	0x2003dcc0
   b4ef4:	2003dd59 	.word	0x2003dd59
   b4ef8:	000c0e7f 	.word	0x000c0e7f

000b4efc <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b4f00:	4d0e      	ldr	r5, [pc, #56]	; (b4f3c <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4f02:	4f0f      	ldr	r7, [pc, #60]	; (b4f40 <_Z14XBeeLTEPairSetv+0x44>)
   b4f04:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4f08:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4f0a:	45a0      	cmp	r8, r4
   b4f0c:	d013      	beq.n	b4f36 <_Z14XBeeLTEPairSetv+0x3a>
   b4f0e:	79a3      	ldrb	r3, [r4, #6]
   b4f10:	7966      	ldrb	r6, [r4, #5]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4f12:	78a2      	ldrb	r2, [r4, #2]
    for(WaterBot p: PairBots){
   b4f14:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4f16:	4639      	mov	r1, r7
   b4f18:	a805      	add	r0, sp, #20
   b4f1a:	f005 f851 	bl	b9fc0 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b4f1e:	9b03      	ldr	r3, [sp, #12]
   b4f20:	9600      	str	r6, [sp, #0]
   b4f22:	2201      	movs	r2, #1
   b4f24:	2100      	movs	r1, #0
   b4f26:	a805      	add	r0, sp, #20
   b4f28:	f7ff fe78 	bl	b4c1c <_Z8sendDataPKchbbb>
   b4f2c:	686b      	ldr	r3, [r5, #4]
   b4f2e:	3b3c      	subs	r3, #60	; 0x3c
   b4f30:	606b      	str	r3, [r5, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b4f32:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4f34:	e7e9      	b.n	b4f0a <_Z14XBeeLTEPairSetv+0xe>
}
   b4f36:	b008      	add	sp, #32
   b4f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f3c:	2003dc98 	.word	0x2003dc98
   b4f40:	000c0e90 	.word	0x000c0e90

000b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4f44:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f46:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4f4a:	4806      	ldr	r0, [pc, #24]	; (b4f64 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4f4c:	1b12      	subs	r2, r2, r4
   b4f4e:	1092      	asrs	r2, r2, #2
   b4f50:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4f52:	4291      	cmp	r1, r2
   b4f54:	d302      	bcc.n	b4f5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4f56:	4804      	ldr	r0, [pc, #16]	; (b4f68 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4f58:	f008 fecd 	bl	bdcf6 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4f5c:	2024      	movs	r0, #36	; 0x24
   b4f5e:	fb00 4001 	mla	r0, r0, r1, r4
   b4f62:	bd10      	pop	{r4, pc}
   b4f64:	38e38e39 	.word	0x38e38e39
   b4f68:	000c0e99 	.word	0x000c0e99

000b4f6c <_Z8uHandlerv>:
    redrawMenu = true;  
   b4f6c:	4b10      	ldr	r3, [pc, #64]	; (b4fb0 <_Z8uHandlerv+0x44>)
void uHandler(){
   b4f6e:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4f70:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4f72:	4c10      	ldr	r4, [pc, #64]	; (b4fb4 <_Z8uHandlerv+0x48>)
    redrawMenu = true;  
   b4f74:	701a      	strb	r2, [r3, #0]
   b4f76:	f004 fd8f 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4f7a:	6823      	ldr	r3, [r4, #0]
   b4f7c:	1ac0      	subs	r0, r0, r3
   b4f7e:	2895      	cmp	r0, #149	; 0x95
   b4f80:	d914      	bls.n	b4fac <_Z8uHandlerv+0x40>
   b4f82:	f004 fd89 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4f86:	4a0c      	ldr	r2, [pc, #48]	; (b4fb8 <_Z8uHandlerv+0x4c>)
    debounceTime = millis();
   b4f88:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4f8a:	7813      	ldrb	r3, [r2, #0]
   b4f8c:	b10b      	cbz	r3, b4f92 <_Z8uHandlerv+0x26>
   b4f8e:	3b01      	subs	r3, #1
   b4f90:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4f92:	7811      	ldrb	r1, [r2, #0]
   b4f94:	4809      	ldr	r0, [pc, #36]	; (b4fbc <_Z8uHandlerv+0x50>)
   b4f96:	f7ff ffd5 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4f9a:	4b09      	ldr	r3, [pc, #36]	; (b4fc0 <_Z8uHandlerv+0x54>)
   b4f9c:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4f9e:	f008 fce3 	bl	bd968 <_Z16_fetch_usbserialv>
}
   b4fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Up trigger");
   b4fa6:	4907      	ldr	r1, [pc, #28]	; (b4fc4 <_Z8uHandlerv+0x58>)
   b4fa8:	f008 b8d1 	b.w	bd14e <_ZN5Print7printlnEPKc>
}
   b4fac:	bd10      	pop	{r4, pc}
   b4fae:	bf00      	nop
   b4fb0:	2003da88 	.word	0x2003da88
   b4fb4:	2003dd64 	.word	0x2003dd64
   b4fb8:	2003de09 	.word	0x2003de09
   b4fbc:	2003dc8c 	.word	0x2003dc8c
   b4fc0:	2003dcb0 	.word	0x2003dcb0
   b4fc4:	000c0ee3 	.word	0x000c0ee3

000b4fc8 <_Z8dHandlerv>:
    redrawMenu = true;  
   b4fc8:	4b10      	ldr	r3, [pc, #64]	; (b500c <_Z8dHandlerv+0x44>)
void dHandler(){
   b4fca:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4fcc:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4fce:	4c10      	ldr	r4, [pc, #64]	; (b5010 <_Z8dHandlerv+0x48>)
    redrawMenu = true;  
   b4fd0:	701a      	strb	r2, [r3, #0]
   b4fd2:	f004 fd61 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4fd6:	6823      	ldr	r3, [r4, #0]
   b4fd8:	1ac0      	subs	r0, r0, r3
   b4fda:	2895      	cmp	r0, #149	; 0x95
   b4fdc:	d915      	bls.n	b500a <_Z8dHandlerv+0x42>
   b4fde:	f004 fd5b 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4fe2:	4a0c      	ldr	r2, [pc, #48]	; (b5014 <_Z8dHandlerv+0x4c>)
    debounceTime = millis();
   b4fe4:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4fe6:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4fe8:	480b      	ldr	r0, [pc, #44]	; (b5018 <_Z8dHandlerv+0x50>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4fea:	2b03      	cmp	r3, #3
   b4fec:	bf9c      	itt	ls
   b4fee:	3301      	addls	r3, #1
   b4ff0:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4ff2:	7811      	ldrb	r1, [r2, #0]
   b4ff4:	f7ff ffa6 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4ff8:	4b08      	ldr	r3, [pc, #32]	; (b501c <_Z8dHandlerv+0x54>)
   b4ffa:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b4ffc:	f008 fcb4 	bl	bd968 <_Z16_fetch_usbserialv>
}
   b5000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Down trigger");
   b5004:	4906      	ldr	r1, [pc, #24]	; (b5020 <_Z8dHandlerv+0x58>)
   b5006:	f008 b8a2 	b.w	bd14e <_ZN5Print7printlnEPKc>
}
   b500a:	bd10      	pop	{r4, pc}
   b500c:	2003da88 	.word	0x2003da88
   b5010:	2003dd64 	.word	0x2003dd64
   b5014:	2003de09 	.word	0x2003de09
   b5018:	2003dc8c 	.word	0x2003dc8c
   b501c:	2003dcb0 	.word	0x2003dcb0
   b5020:	000c0eee 	.word	0x000c0eee

000b5024 <_ZNSt6vectorI6StringSaIS0_EE2atEj>:
      at(size_type __n)
   b5024:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5026:	e9d0 5400 	ldrd	r5, r4, [r0]
   b502a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b502c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5030:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
   b5034:	d302      	bcc.n	b503c <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b5036:	4803      	ldr	r0, [pc, #12]	; (b5044 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x20>)
   b5038:	f008 fe5d 	bl	bdcf6 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b503c:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   b5040:	bd38      	pop	{r3, r4, r5, pc}
   b5042:	bf00      	nop
   b5044:	000c0e99 	.word	0x000c0e99

000b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b5048:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b504a:	e9d0 4200 	ldrd	r4, r2, [r0]
   b504e:	4806      	ldr	r0, [pc, #24]	; (b5068 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b5050:	1b12      	subs	r2, r2, r4
   b5052:	1092      	asrs	r2, r2, #2
   b5054:	4342      	muls	r2, r0
	if (__n >= this->size())
   b5056:	4291      	cmp	r1, r2
   b5058:	d302      	bcc.n	b5060 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b505a:	4804      	ldr	r0, [pc, #16]	; (b506c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b505c:	f008 fe4b 	bl	bdcf6 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b5060:	203c      	movs	r0, #60	; 0x3c
   b5062:	fb00 4001 	mla	r0, r0, r1, r4
   b5066:	bd10      	pop	{r4, pc}
   b5068:	eeeeeeef 	.word	0xeeeeeeef
   b506c:	000c0e99 	.word	0x000c0e99

000b5070 <_Z16updateBotControlv>:
void updateBotControl(){
   b5070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(updateControl){
   b5074:	4b4a      	ldr	r3, [pc, #296]	; (b51a0 <_Z16updateBotControlv+0x130>)
   b5076:	781a      	ldrb	r2, [r3, #0]
void updateBotControl(){
   b5078:	b097      	sub	sp, #92	; 0x5c
    if(updateControl){
   b507a:	2a00      	cmp	r2, #0
   b507c:	d03a      	beq.n	b50f4 <_Z16updateBotControlv+0x84>
        updateControl = false;
   b507e:	2200      	movs	r2, #0
   b5080:	701a      	strb	r2, [r3, #0]
      : _M_current(__i) { }
   b5082:	4b48      	ldr	r3, [pc, #288]	; (b51a4 <_Z16updateBotControlv+0x134>)
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5084:	4f48      	ldr	r7, [pc, #288]	; (b51a8 <_Z16updateBotControlv+0x138>)
                Serial.printlnf("Control Packet: %s",statusStr);
   b5086:	f8df 8134 	ldr.w	r8, [pc, #308]	; b51bc <_Z16updateBotControlv+0x14c>
                sendData(statusStr,0,true,true,statusTimeout);
   b508a:	f8df 9128 	ldr.w	r9, [pc, #296]	; b51b4 <_Z16updateBotControlv+0x144>
   b508e:	e9d3 4600 	ldrd	r4, r6, [r3]
        for(WaterBot &wb: WaterBots){
   b5092:	42a6      	cmp	r6, r4
   b5094:	d02e      	beq.n	b50f4 <_Z16updateBotControlv+0x84>
            if(wb.updatedControl){
   b5096:	7863      	ldrb	r3, [r4, #1]
   b5098:	b353      	cbz	r3, b50f0 <_Z16updateBotControlv+0x80>
                wb.updatedControl = false;
   b509a:	2500      	movs	r5, #0
   b509c:	7065      	strb	r5, [r4, #1]
   b509e:	f004 fcfb 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b50a2:	7aa3      	ldrb	r3, [r4, #10]
   b50a4:	78a2      	ldrb	r2, [r4, #2]
                wb.publishTime = millis();
   b50a6:	6360      	str	r0, [r4, #52]	; 0x34
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b50a8:	9306      	str	r3, [sp, #24]
   b50aa:	7b63      	ldrb	r3, [r4, #13]
   b50ac:	9305      	str	r3, [sp, #20]
   b50ae:	7a63      	ldrb	r3, [r4, #9]
   b50b0:	9304      	str	r3, [sp, #16]
   b50b2:	6960      	ldr	r0, [r4, #20]
   b50b4:	9209      	str	r2, [sp, #36]	; 0x24
   b50b6:	f009 f945 	bl	be344 <__aeabi_f2d>
   b50ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b50be:	6920      	ldr	r0, [r4, #16]
   b50c0:	f009 f940 	bl	be344 <__aeabi_f2d>
   b50c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b50c6:	e9cd 0100 	strd	r0, r1, [sp]
   b50ca:	4639      	mov	r1, r7
   b50cc:	a80b      	add	r0, sp, #44	; 0x2c
   b50ce:	f004 ff77 	bl	b9fc0 <sprintf>
                Serial.printlnf("Control Packet: %s",statusStr);
   b50d2:	f008 fc49 	bl	bd968 <_Z16_fetch_usbserialv>
   b50d6:	aa0b      	add	r2, sp, #44	; 0x2c
   b50d8:	4641      	mov	r1, r8
   b50da:	f7ff f93b 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                sendData(statusStr,0,true,true,statusTimeout);
   b50de:	f899 3000 	ldrb.w	r3, [r9]
   b50e2:	9300      	str	r3, [sp, #0]
   b50e4:	2301      	movs	r3, #1
   b50e6:	461a      	mov	r2, r3
   b50e8:	4629      	mov	r1, r5
   b50ea:	a80b      	add	r0, sp, #44	; 0x2c
   b50ec:	f7ff fd96 	bl	b4c1c <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b50f0:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b50f2:	e7ce      	b.n	b5092 <_Z16updateBotControlv+0x22>
    if(millis() - controlUpdateTime > CONTROL_PUB_TIME){
   b50f4:	4c2d      	ldr	r4, [pc, #180]	; (b51ac <_Z16updateBotControlv+0x13c>)
   b50f6:	f004 fccf 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
   b50fa:	6823      	ldr	r3, [r4, #0]
   b50fc:	1ac0      	subs	r0, r0, r3
   b50fe:	f241 3388 	movw	r3, #5000	; 0x1388
   b5102:	4298      	cmp	r0, r3
   b5104:	d93f      	bls.n	b5186 <_Z16updateBotControlv+0x116>
   b5106:	f004 fcc7 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
        controlUpdateTime = millis();
   b510a:	6020      	str	r0, [r4, #0]
        if(controlUpdateID == -1){
   b510c:	4c28      	ldr	r4, [pc, #160]	; (b51b0 <_Z16updateBotControlv+0x140>)
   b510e:	4d25      	ldr	r5, [pc, #148]	; (b51a4 <_Z16updateBotControlv+0x134>)
   b5110:	6822      	ldr	r2, [r4, #0]
   b5112:	1c53      	adds	r3, r2, #1
   b5114:	d13a      	bne.n	b518c <_Z16updateBotControlv+0x11c>
            if(WaterBots.size() != 0) controlUpdateID = 0;
   b5116:	e9d5 3200 	ldrd	r3, r2, [r5]
   b511a:	429a      	cmp	r2, r3
   b511c:	d033      	beq.n	b5186 <_Z16updateBotControlv+0x116>
   b511e:	2300      	movs	r3, #0
   b5120:	6023      	str	r3, [r4, #0]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b5122:	6821      	ldr	r1, [r4, #0]
   b5124:	481f      	ldr	r0, [pc, #124]	; (b51a4 <_Z16updateBotControlv+0x134>)
   b5126:	f7ff ff8f 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b512a:	7a83      	ldrb	r3, [r0, #10]
   b512c:	7882      	ldrb	r2, [r0, #2]
   b512e:	9306      	str	r3, [sp, #24]
   b5130:	7b43      	ldrb	r3, [r0, #13]
   b5132:	9305      	str	r3, [sp, #20]
   b5134:	7a43      	ldrb	r3, [r0, #9]
   b5136:	9304      	str	r3, [sp, #16]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b5138:	4606      	mov	r6, r0
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b513a:	6940      	ldr	r0, [r0, #20]
   b513c:	9209      	str	r2, [sp, #36]	; 0x24
   b513e:	f009 f901 	bl	be344 <__aeabi_f2d>
   b5142:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5146:	6930      	ldr	r0, [r6, #16]
   b5148:	f009 f8fc 	bl	be344 <__aeabi_f2d>
   b514c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b514e:	e9cd 0100 	strd	r0, r1, [sp]
   b5152:	4915      	ldr	r1, [pc, #84]	; (b51a8 <_Z16updateBotControlv+0x138>)
   b5154:	a80b      	add	r0, sp, #44	; 0x2c
   b5156:	f004 ff33 	bl	b9fc0 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b515a:	4b16      	ldr	r3, [pc, #88]	; (b51b4 <_Z16updateBotControlv+0x144>)
   b515c:	781b      	ldrb	r3, [r3, #0]
   b515e:	9300      	str	r3, [sp, #0]
   b5160:	2301      	movs	r3, #1
   b5162:	461a      	mov	r2, r3
   b5164:	2100      	movs	r1, #0
   b5166:	a80b      	add	r0, sp, #44	; 0x2c
   b5168:	f7ff fd58 	bl	b4c1c <_Z8sendDataPKchbbb>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b516c:	e9d5 1300 	ldrd	r1, r3, [r5]
   b5170:	1a5b      	subs	r3, r3, r1
   b5172:	4911      	ldr	r1, [pc, #68]	; (b51b8 <_Z16updateBotControlv+0x148>)
        if(controlUpdateID < WaterBots.size()-1) controlUpdateID++;
   b5174:	6822      	ldr	r2, [r4, #0]
   b5176:	109b      	asrs	r3, r3, #2
   b5178:	434b      	muls	r3, r1
   b517a:	3b01      	subs	r3, #1
   b517c:	4293      	cmp	r3, r2
   b517e:	bf8c      	ite	hi
   b5180:	3201      	addhi	r2, #1
        else controlUpdateID = 0;
   b5182:	2200      	movls	r2, #0
   b5184:	6022      	str	r2, [r4, #0]
}
   b5186:	b017      	add	sp, #92	; 0x5c
   b5188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b518c:	e9d5 1300 	ldrd	r1, r3, [r5]
   b5190:	1a5b      	subs	r3, r3, r1
   b5192:	4909      	ldr	r1, [pc, #36]	; (b51b8 <_Z16updateBotControlv+0x148>)
   b5194:	109b      	asrs	r3, r3, #2
   b5196:	434b      	muls	r3, r1
        if(controlUpdateID > WaterBots.size()-1) controlUpdateID = 0;
   b5198:	3b01      	subs	r3, #1
   b519a:	4293      	cmp	r3, r2
   b519c:	d3bf      	bcc.n	b511e <_Z16updateBotControlv+0xae>
   b519e:	e7c0      	b.n	b5122 <_Z16updateBotControlv+0xb2>
   b51a0:	2003e636 	.word	0x2003e636
   b51a4:	2003dcc0 	.word	0x2003dcc0
   b51a8:	000c0efb 	.word	0x000c0efb
   b51ac:	2003dd60 	.word	0x2003dd60
   b51b0:	2003dd5c 	.word	0x2003dd5c
   b51b4:	2003e635 	.word	0x2003e635
   b51b8:	eeeeeeef 	.word	0xeeeeeeef
   b51bc:	000c0f18 	.word	0x000c0f18

000b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b51c0:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b51c2:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b51c6:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b51c8:	42ae      	cmp	r6, r5
   b51ca:	d004      	beq.n	b51d6 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
      __pointer->~_Tp();
   b51cc:	4628      	mov	r0, r5
   b51ce:	f008 f91b 	bl	bd408 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b51d2:	3510      	adds	r5, #16
   b51d4:	e7f8      	b.n	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b51d6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b51d8:	b118      	cbz	r0, b51e2 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b51da:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b51dc:	1a09      	subs	r1, r1, r0
   b51de:	f7fe ff5e 	bl	b409e <_ZdlPvj>
      }
   b51e2:	4620      	mov	r0, r4
   b51e4:	bd70      	pop	{r4, r5, r6, pc}

000b51e6 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b51e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51e8:	4604      	mov	r4, r0
   b51ea:	460e      	mov	r6, r1
   b51ec:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b51ee:	2700      	movs	r7, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b51f0:	42b4      	cmp	r4, r6
   b51f2:	d029      	beq.n	b5248 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x62>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b51f4:	b315      	cbz	r5, b523c <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x56>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b51f6:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   b51f8:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b51fa:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   b51fc:	606b      	str	r3, [r5, #4]
   b51fe:	68a3      	ldr	r3, [r4, #8]
   b5200:	60ab      	str	r3, [r5, #8]
class MenuItem{
   b5202:	68e3      	ldr	r3, [r4, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b5204:	6027      	str	r7, [r4, #0]
   b5206:	e9c4 7701 	strd	r7, r7, [r4, #4]
   b520a:	60eb      	str	r3, [r5, #12]
   b520c:	6923      	ldr	r3, [r4, #16]
   b520e:	612b      	str	r3, [r5, #16]
   b5210:	7d23      	ldrb	r3, [r4, #20]
   b5212:	752b      	strb	r3, [r5, #20]
   b5214:	7d63      	ldrb	r3, [r4, #21]
   b5216:	756b      	strb	r3, [r5, #21]
   b5218:	7da3      	ldrb	r3, [r4, #22]
   b521a:	75ab      	strb	r3, [r5, #22]
   b521c:	7de3      	ldrb	r3, [r4, #23]
   b521e:	75eb      	strb	r3, [r5, #23]
   b5220:	7e23      	ldrb	r3, [r4, #24]
   b5222:	762b      	strb	r3, [r5, #24]
   b5224:	7e63      	ldrb	r3, [r4, #25]
   b5226:	766b      	strb	r3, [r5, #25]
   b5228:	f8d4 301a 	ldr.w	r3, [r4, #26]
   b522c:	f8c5 301a 	str.w	r3, [r5, #26]
   b5230:	f8d4 301e 	ldr.w	r3, [r4, #30]
   b5234:	f8c5 301e 	str.w	r3, [r5, #30]
   b5238:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b523a:	846b      	strh	r3, [r5, #34]	; 0x22
   b523c:	4620      	mov	r0, r4
   b523e:	f7ff ffbf 	bl	b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b5242:	3424      	adds	r4, #36	; 0x24
   b5244:	3524      	adds	r5, #36	; 0x24
   b5246:	e7d3      	b.n	b51f0 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
   b5248:	4628      	mov	r0, r5
   b524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b524c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b524c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5250:	e9d0 8a00 	ldrd	r8, sl, [r0]
   b5254:	4b2f      	ldr	r3, [pc, #188]	; (b5314 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc8>)
   b5256:	ebaa 0408 	sub.w	r4, sl, r8
   b525a:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b525c:	4b2e      	ldr	r3, [pc, #184]	; (b5318 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>)
   b525e:	429c      	cmp	r4, r3
   b5260:	4689      	mov	r9, r1
   b5262:	4607      	mov	r7, r0
   b5264:	4611      	mov	r1, r2
   b5266:	d102      	bne.n	b526e <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
	  __throw_length_error(__N(__s));
   b5268:	482c      	ldr	r0, [pc, #176]	; (b531c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
   b526a:	f008 fd41 	bl	bdcf0 <_ZSt20__throw_length_errorPKc>
   b526e:	2c01      	cmp	r4, #1
   b5270:	4622      	mov	r2, r4
   b5272:	bf38      	it	cc
   b5274:	2201      	movcc	r2, #1
   b5276:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5278:	eba9 0508 	sub.w	r5, r9, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b527c:	d21d      	bcs.n	b52ba <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b527e:	b1f4      	cbz	r4, b52be <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   b5280:	429c      	cmp	r4, r3
   b5282:	bf28      	it	cs
   b5284:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5286:	2049      	movs	r0, #73	; 0x49
   b5288:	4360      	muls	r0, r4
   b528a:	9101      	str	r1, [sp, #4]
   b528c:	f7fe ff03 	bl	b4096 <_Znwj>
   b5290:	9901      	ldr	r1, [sp, #4]
   b5292:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5294:	1970      	adds	r0, r6, r5
   b5296:	d002      	beq.n	b529e <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b5298:	2249      	movs	r2, #73	; 0x49
   b529a:	f009 fbf0 	bl	bea7e <memcpy>
   b529e:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52a0:	4645      	mov	r5, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b52a2:	45a9      	cmp	r9, r5
   b52a4:	d00d      	beq.n	b52c2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b52a6:	b12b      	cbz	r3, b52b4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
   b52a8:	4618      	mov	r0, r3
   b52aa:	2249      	movs	r2, #73	; 0x49
   b52ac:	4629      	mov	r1, r5
   b52ae:	f009 fbe6 	bl	bea7e <memcpy>
   b52b2:	4603      	mov	r3, r0
   b52b4:	3549      	adds	r5, #73	; 0x49
   b52b6:	3349      	adds	r3, #73	; 0x49
   b52b8:	e7f3      	b.n	b52a2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b52ba:	461c      	mov	r4, r3
   b52bc:	e7e3      	b.n	b5286 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b52be:	4626      	mov	r6, r4
   b52c0:	e7e8      	b.n	b5294 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b52c2:	eba5 0908 	sub.w	r9, r5, r8
   b52c6:	f109 0949 	add.w	r9, r9, #73	; 0x49
   b52ca:	44b1      	add	r9, r6
   b52cc:	462b      	mov	r3, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b52ce:	46cb      	mov	fp, r9
      for (; __first != __last; ++__first, (void)++__cur)
   b52d0:	4555      	cmp	r5, sl
   b52d2:	f10b 0b49 	add.w	fp, fp, #73	; 0x49
   b52d6:	d009      	beq.n	b52ec <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
   b52d8:	4629      	mov	r1, r5
   b52da:	2249      	movs	r2, #73	; 0x49
   b52dc:	f1ab 0049 	sub.w	r0, fp, #73	; 0x49
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	3549      	adds	r5, #73	; 0x49
   b52e4:	f009 fbcb 	bl	bea7e <memcpy>
   b52e8:	9b01      	ldr	r3, [sp, #4]
   b52ea:	e7f1      	b.n	b52d0 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
   b52ec:	1aed      	subs	r5, r5, r3
   b52ee:	444d      	add	r5, r9
	if (__p)
   b52f0:	f1b8 0f00 	cmp.w	r8, #0
   b52f4:	d005      	beq.n	b5302 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b52f6:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b52f8:	4640      	mov	r0, r8
   b52fa:	eba1 0108 	sub.w	r1, r1, r8
   b52fe:	f7fe fece 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5302:	2049      	movs	r0, #73	; 0x49
   b5304:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b5308:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b530c:	60bc      	str	r4, [r7, #8]
    }
   b530e:	b003      	add	sp, #12
   b5310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5314:	c7e3f1f9 	.word	0xc7e3f1f9
   b5318:	01c0e070 	.word	0x01c0e070
   b531c:	000c0f2b 	.word	0x000c0f2b

000b5320 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5320:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5322:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b5326:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b5328:	4604      	mov	r4, r0
   b532a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b532c:	d008      	beq.n	b5340 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b532e:	b11b      	cbz	r3, b5338 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x18>
   b5330:	2249      	movs	r2, #73	; 0x49
   b5332:	4618      	mov	r0, r3
   b5334:	f009 fba3 	bl	bea7e <memcpy>
	    ++this->_M_impl._M_finish;
   b5338:	6863      	ldr	r3, [r4, #4]
   b533a:	3349      	adds	r3, #73	; 0x49
   b533c:	6063      	str	r3, [r4, #4]
      }
   b533e:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b5340:	4619      	mov	r1, r3
   b5342:	f7ff ff83 	bl	b524c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b5346:	e7fa      	b.n	b533e <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x1e>

000b5348 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b534c:	6843      	ldr	r3, [r0, #4]
   b534e:	f8d0 a000 	ldr.w	sl, [r0]
   b5352:	9301      	str	r3, [sp, #4]
   b5354:	eba3 060a 	sub.w	r6, r3, sl
   b5358:	4b44      	ldr	r3, [pc, #272]	; (b546c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>)
   b535a:	10b6      	asrs	r6, r6, #2
   b535c:	435e      	muls	r6, r3
	if (max_size() - size() < __n)
   b535e:	4b44      	ldr	r3, [pc, #272]	; (b5470 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
   b5360:	429e      	cmp	r6, r3
   b5362:	4681      	mov	r9, r0
   b5364:	468b      	mov	fp, r1
   b5366:	4615      	mov	r5, r2
   b5368:	d102      	bne.n	b5370 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b536a:	4842      	ldr	r0, [pc, #264]	; (b5474 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
   b536c:	f008 fcc0 	bl	bdcf0 <_ZSt20__throw_length_errorPKc>
   b5370:	2e01      	cmp	r6, #1
   b5372:	4632      	mov	r2, r6
   b5374:	bf38      	it	cc
   b5376:	2201      	movcc	r2, #1
   b5378:	18b6      	adds	r6, r6, r2
   b537a:	eba1 070a 	sub.w	r7, r1, sl
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b537e:	d22d      	bcs.n	b53dc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5380:	b376      	cbz	r6, b53e0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
   b5382:	429e      	cmp	r6, r3
   b5384:	bf28      	it	cs
   b5386:	461e      	movcs	r6, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5388:	203c      	movs	r0, #60	; 0x3c
   b538a:	4370      	muls	r0, r6
   b538c:	f7fe fe83 	bl	b4096 <_Znwj>
   b5390:	4680      	mov	r8, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5392:	eb18 0407 	adds.w	r4, r8, r7
   b5396:	d009      	beq.n	b53ac <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
   b5398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b539a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b539c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b539e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b53a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b53ac:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53ae:	46d6      	mov	lr, sl
   b53b0:	45f3      	cmp	fp, lr
   b53b2:	d017      	beq.n	b53e4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
   b53b4:	f1bc 0f00 	cmp.w	ip, #0
   b53b8:	d00b      	beq.n	b53d2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
   b53ba:	4675      	mov	r5, lr
   b53bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53be:	4664      	mov	r4, ip
   b53c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b53ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b53d2:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
   b53d6:	f10c 0c3c 	add.w	ip, ip, #60	; 0x3c
   b53da:	e7e9      	b.n	b53b0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b53dc:	461e      	mov	r6, r3
   b53de:	e7d3      	b.n	b5388 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b53e0:	46b0      	mov	r8, r6
   b53e2:	e7d6      	b.n	b5392 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b53e4:	f8df e090 	ldr.w	lr, [pc, #144]	; b5478 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x130>
   b53e8:	08bf      	lsrs	r7, r7, #2
   b53ea:	fb0e f707 	mul.w	r7, lr, r7
   b53ee:	233c      	movs	r3, #60	; 0x3c
   b53f0:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b53f4:	435f      	muls	r7, r3
   b53f6:	eb0a 0b07 	add.w	fp, sl, r7
	      ++__new_finish;
   b53fa:	441f      	add	r7, r3
   b53fc:	eb08 0307 	add.w	r3, r8, r7
   b5400:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5402:	469c      	mov	ip, r3
   b5404:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b5406:	9b01      	ldr	r3, [sp, #4]
   b5408:	429f      	cmp	r7, r3
   b540a:	f10c 0c3c 	add.w	ip, ip, #60	; 0x3c
   b540e:	d00e      	beq.n	b542e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe6>
   b5410:	463d      	mov	r5, r7
   b5412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5414:	f1ac 043c 	sub.w	r4, ip, #60	; 0x3c
   b5418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b541c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b541e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5422:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5426:	373c      	adds	r7, #60	; 0x3c
   b5428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b542c:	e7eb      	b.n	b5406 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbe>
   b542e:	eba7 070b 	sub.w	r7, r7, fp
   b5432:	08bf      	lsrs	r7, r7, #2
   b5434:	fb0e fe07 	mul.w	lr, lr, r7
   b5438:	9b00      	ldr	r3, [sp, #0]
   b543a:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b543e:	273c      	movs	r7, #60	; 0x3c
   b5440:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b5444:	f1ba 0f00 	cmp.w	sl, #0
   b5448:	d006      	beq.n	b5458 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>
		    this->_M_impl._M_end_of_storage - __old_start);
   b544a:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b544e:	4650      	mov	r0, sl
   b5450:	eba1 010a 	sub.w	r1, r1, sl
   b5454:	f7fe fe23 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5458:	203c      	movs	r0, #60	; 0x3c
   b545a:	fb00 8606 	mla	r6, r0, r6, r8
      this->_M_impl._M_finish = __new_finish;
   b545e:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5462:	f8c9 6008 	str.w	r6, [r9, #8]
    }
   b5466:	b003      	add	sp, #12
   b5468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b546c:	eeeeeeef 	.word	0xeeeeeeef
   b5470:	02222222 	.word	0x02222222
   b5474:	000c0f2b 	.word	0x000c0f2b
   b5478:	2eeeeeef 	.word	0x2eeeeeef

000b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b547c:	b570      	push	{r4, r5, r6, lr}
   b547e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5480:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5484:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b5486:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5488:	d010      	beq.n	b54ac <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x30>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b548a:	b159      	cbz	r1, b54a4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
   b548c:	4615      	mov	r5, r2
   b548e:	460c      	mov	r4, r1
   b5490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b549c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b54a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    ++this->_M_impl._M_finish;
   b54a4:	6873      	ldr	r3, [r6, #4]
   b54a6:	333c      	adds	r3, #60	; 0x3c
   b54a8:	6073      	str	r3, [r6, #4]
      }
   b54aa:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b54ac:	f7ff ff4c 	bl	b5348 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b54b0:	e7fb      	b.n	b54aa <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2e>
	...

000b54b4 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54b8:	ed2d 8b02 	vpush	{d8}
   b54bc:	b0ab      	sub	sp, #172	; 0xac
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b54be:	7883      	ldrb	r3, [r0, #2]
   b54c0:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b54c2:	af06      	add	r7, sp, #24
   b54c4:	4604      	mov	r4, r0
   b54c6:	460e      	mov	r6, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b54c8:	d127      	bne.n	b551a <_Z14processCommandPKchb+0x66>
   b54ca:	78c3      	ldrb	r3, [r0, #3]
   b54cc:	2b42      	cmp	r3, #66	; 0x42
   b54ce:	f040 81bd 	bne.w	b584c <_Z14processCommandPKchb+0x398>
        }
   b54d2:	466b      	mov	r3, sp
   b54d4:	ee08 3a10 	vmov	s16, r3
        uint8_t rxBotID = atoi(rxIDBuf);
   b54d8:	f107 0010 	add.w	r0, r7, #16
        rxIDBuf[0] = command[1];
   b54dc:	7863      	ldrb	r3, [r4, #1]
   b54de:	743b      	strb	r3, [r7, #16]
      : _M_current(__i) { }
   b54e0:	f8df 8390 	ldr.w	r8, [pc, #912]	; b5874 <_Z14processCommandPKchb+0x3c0>
        uint8_t rxBotID = atoi(rxIDBuf);
   b54e4:	f009 fab7 	bl	bea56 <atoi>
   b54e8:	e9d8 9b00 	ldrd	r9, fp, [r8]
   b54ec:	b2c3      	uxtb	r3, r0
   b54ee:	60fb      	str	r3, [r7, #12]
        int index = 0;
   b54f0:	f04f 0a00 	mov.w	sl, #0
        bool newBot = true;
   b54f4:	2301      	movs	r3, #1
        for(WaterBot w: WaterBots){
   b54f6:	45d9      	cmp	r9, fp
   b54f8:	d015      	beq.n	b5526 <_Z14processCommandPKchb+0x72>
            if(rxBotID == w.botNum){
   b54fa:	f899 2002 	ldrb.w	r2, [r9, #2]
   b54fe:	68f9      	ldr	r1, [r7, #12]
   b5500:	428a      	cmp	r2, r1
   b5502:	d105      	bne.n	b5510 <_Z14processCommandPKchb+0x5c>
                TargetWB = &WaterBots.at(index);
   b5504:	4651      	mov	r1, sl
   b5506:	4640      	mov	r0, r8
   b5508:	f7ff fd9e 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b550c:	2300      	movs	r3, #0
                TargetWB = &WaterBots.at(index);
   b550e:	4605      	mov	r5, r0
            index++;
   b5510:	f10a 0a01 	add.w	sl, sl, #1
	++_M_current;
   b5514:	f109 093c 	add.w	r9, r9, #60	; 0x3c
	return *this;
   b5518:	e7ed      	b.n	b54f6 <_Z14processCommandPKchb+0x42>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b551a:	2b43      	cmp	r3, #67	; 0x43
   b551c:	f040 8196 	bne.w	b584c <_Z14processCommandPKchb+0x398>
   b5520:	78c3      	ldrb	r3, [r0, #3]
   b5522:	2b43      	cmp	r3, #67	; 0x43
   b5524:	e7d3      	b.n	b54ce <_Z14processCommandPKchb+0x1a>
        if(newBot){
   b5526:	b18b      	cbz	r3, b554c <_Z14processCommandPKchb+0x98>
            WaterBot newWaterbot;
   b5528:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b552c:	f7ff f9b6 	bl	b489c <_ZN8WaterBotC1Ev>
            newWaterbot.botNum = rxBotID;
   b5530:	68fb      	ldr	r3, [r7, #12]
            WaterBots.push_back(newWaterbot);
   b5532:	48d0      	ldr	r0, [pc, #832]	; (b5874 <_Z14processCommandPKchb+0x3c0>)
            newWaterbot.botNum = rxBotID;
   b5534:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            WaterBots.push_back(newWaterbot);
   b5538:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b553c:	f7ff ff9e 	bl	b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5540:	f8d8 5004 	ldr.w	r5, [r8, #4]
            redrawMenu = true;
   b5544:	4bcc      	ldr	r3, [pc, #816]	; (b5878 <_Z14processCommandPKchb+0x3c4>)
   b5546:	2201      	movs	r2, #1
   b5548:	3d3c      	subs	r5, #60	; 0x3c
   b554a:	701a      	strb	r2, [r3, #0]
        char dataStr[strlen(command)-8];
   b554c:	4620      	mov	r0, r4
   b554e:	f009 fb72 	bl	bec36 <strlen>
   b5552:	3801      	subs	r0, #1
   b5554:	f020 0007 	bic.w	r0, r0, #7
   b5558:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b555c:	4620      	mov	r0, r4
   b555e:	f009 fb6a 	bl	bec36 <strlen>
        char dataStr[strlen(command)-8];
   b5562:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b5566:	4448      	add	r0, r9
   b5568:	f04f 0a00 	mov.w	sl, #0
   b556c:	f800 ac09 	strb.w	sl, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b5570:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b5572:	f887 a01b 	strb.w	sl, [r7, #27]
        checkStr[0] = command[strlen(command)-2];
   b5576:	f009 fb5e 	bl	bec36 <strlen>
   b557a:	4420      	add	r0, r4
   b557c:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b5580:	753b      	strb	r3, [r7, #20]
        checkStr[1] = command[strlen(command)-1];
   b5582:	4620      	mov	r0, r4
   b5584:	f009 fb57 	bl	bec36 <strlen>
   b5588:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b558a:	4651      	mov	r1, sl
        checkStr[1] = command[strlen(command)-1];
   b558c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b5590:	757b      	strb	r3, [r7, #21]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5592:	2210      	movs	r2, #16
   b5594:	f107 0014 	add.w	r0, r7, #20
        checkStr[2] = '\0';
   b5598:	f887 a016 	strb.w	sl, [r7, #22]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b559c:	f00a fa38 	bl	bfa10 <strtol>
   b55a0:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b55a2:	fa5f fb8b 	uxtb.w	fp, fp
   b55a6:	f008 f9df 	bl	bd968 <_Z16_fetch_usbserialv>
   b55aa:	49b4      	ldr	r1, [pc, #720]	; (b587c <_Z14processCommandPKchb+0x3c8>)
   b55ac:	465b      	mov	r3, fp
   b55ae:	465a      	mov	r2, fp
   b55b0:	f7fe fed0 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b55b4:	f04f 0a04 	mov.w	sl, #4
   b55b8:	4620      	mov	r0, r4
   b55ba:	f009 fb3c 	bl	bec36 <strlen>
   b55be:	3802      	subs	r0, #2
   b55c0:	4582      	cmp	sl, r0
   b55c2:	d216      	bcs.n	b55f2 <_Z14processCommandPKchb+0x13e>
            if(i < 7) cmdStr[i-4] = command[i];
   b55c4:	f1ba 0f06 	cmp.w	sl, #6
   b55c8:	bf9b      	ittet	ls
   b55ca:	f107 0390 	addls.w	r3, r7, #144	; 0x90
   b55ce:	4453      	addls	r3, sl
            else dataStr[i-7] = command[i];
   b55d0:	eb09 030a 	addhi.w	r3, r9, sl
            if(i < 7) cmdStr[i-4] = command[i];
   b55d4:	f814 200a 	ldrbls.w	r2, [r4, sl]
            else dataStr[i-7] = command[i];
   b55d8:	bf8c      	ite	hi
   b55da:	f814 200a 	ldrbhi.w	r2, [r4, sl]
            if(i < 7) cmdStr[i-4] = command[i];
   b55de:	f803 2c7c 	strbls.w	r2, [r3, #-124]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b55e2:	f10a 0a01 	add.w	sl, sl, #1
            else dataStr[i-7] = command[i];
   b55e6:	bf88      	it	hi
   b55e8:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b55ec:	fa5f fa8a 	uxtb.w	sl, sl
   b55f0:	e7e2      	b.n	b55b8 <_Z14processCommandPKchb+0x104>
        if(checksum != strlen(command)-2){
   b55f2:	4558      	cmp	r0, fp
   b55f4:	d02b      	beq.n	b564e <_Z14processCommandPKchb+0x19a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b55f6:	f008 f9b7 	bl	bd968 <_Z16_fetch_usbserialv>
   b55fa:	4605      	mov	r5, r0
   b55fc:	4620      	mov	r0, r4
   b55fe:	f009 fb1a 	bl	bec36 <strlen>
   b5602:	465b      	mov	r3, fp
   b5604:	1e82      	subs	r2, r0, #2
   b5606:	499e      	ldr	r1, [pc, #632]	; (b5880 <_Z14processCommandPKchb+0x3cc>)
   b5608:	4628      	mov	r0, r5
   b560a:	f7fe fea3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            logMessage("[WARN] Warning, checksum does not match!");
   b560e:	489d      	ldr	r0, [pc, #628]	; (b5884 <_Z14processCommandPKchb+0x3d0>)
   b5610:	f7ff f924 	bl	b485c <_Z10logMessagePKc>
            Serial.println("Warning, checksum does not match");
   b5614:	f008 f9a8 	bl	bd968 <_Z16_fetch_usbserialv>
   b5618:	499b      	ldr	r1, [pc, #620]	; (b5888 <_Z14processCommandPKchb+0x3d4>)
   b561a:	f007 fd98 	bl	bd14e <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b561e:	7863      	ldrb	r3, [r4, #1]
   b5620:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b5624:	2a09      	cmp	r2, #9
   b5626:	d902      	bls.n	b562e <_Z14processCommandPKchb+0x17a>
   b5628:	2b43      	cmp	r3, #67	; 0x43
   b562a:	f040 810c 	bne.w	b5846 <_Z14processCommandPKchb+0x392>
                rxBotNum[0] = command[0];
   b562e:	7822      	ldrb	r2, [r4, #0]
   b5630:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
                rxBotNum[1] = command[1];
   b5634:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b5638:	4994      	ldr	r1, [pc, #592]	; (b588c <_Z14processCommandPKchb+0x3d8>)
   b563a:	4895      	ldr	r0, [pc, #596]	; (b5890 <_Z14processCommandPKchb+0x3dc>)
   b563c:	f107 0318 	add.w	r3, r7, #24
   b5640:	f107 0244 	add.w	r2, r7, #68	; 0x44
   b5644:	f004 fcbc 	bl	b9fc0 <sprintf>
                errModeReply = mode;
   b5648:	4b92      	ldr	r3, [pc, #584]	; (b5894 <_Z14processCommandPKchb+0x3e0>)
            errCmdMode = mode;
   b564a:	701e      	strb	r6, [r3, #0]
   b564c:	e0fb      	b.n	b5846 <_Z14processCommandPKchb+0x392>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b564e:	4992      	ldr	r1, [pc, #584]	; (b5898 <_Z14processCommandPKchb+0x3e4>)
   b5650:	f107 0018 	add.w	r0, r7, #24
   b5654:	f009 fabf 	bl	bebd6 <strcmp>
   b5658:	2800      	cmp	r0, #0
   b565a:	f000 80f4 	beq.w	b5846 <_Z14processCommandPKchb+0x392>
        else if(!strcmp(cmdStr,"sup")){
   b565e:	498f      	ldr	r1, [pc, #572]	; (b589c <_Z14processCommandPKchb+0x3e8>)
   b5660:	f107 0018 	add.w	r0, r7, #24
   b5664:	f009 fab7 	bl	bebd6 <strcmp>
   b5668:	2800      	cmp	r0, #0
   b566a:	f040 8095 	bne.w	b5798 <_Z14processCommandPKchb+0x2e4>
      : _M_current(__i) { }
   b566e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5672:	f8d8 4000 	ldr.w	r4, [r8]
   b5676:	60bb      	str	r3, [r7, #8]
            for(WaterBot &w: WaterBots){
   b5678:	68bb      	ldr	r3, [r7, #8]
   b567a:	42a3      	cmp	r3, r4
   b567c:	f000 808c 	beq.w	b5798 <_Z14processCommandPKchb+0x2e4>
                if(rxBotID == w.botNum){
   b5680:	78a3      	ldrb	r3, [r4, #2]
   b5682:	68fa      	ldr	r2, [r7, #12]
   b5684:	4293      	cmp	r3, r2
   b5686:	f040 8085 	bne.w	b5794 <_Z14processCommandPKchb+0x2e0>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b568a:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b568e:	f107 0b2c 	add.w	fp, r7, #44	; 0x2c
   b5692:	4983      	ldr	r1, [pc, #524]	; (b58a0 <_Z14processCommandPKchb+0x3ec>)
   b5694:	f8cd a004 	str.w	sl, [sp, #4]
   b5698:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b569c:	f107 0224 	add.w	r2, r7, #36	; 0x24
   b56a0:	f8cd b000 	str.w	fp, [sp]
   b56a4:	4648      	mov	r0, r9
   b56a6:	f004 fc93 	bl	b9fd0 <sscanf>
                    latRX = atof(testLat);
   b56aa:	4658      	mov	r0, fp
   b56ac:	f009 f9d0 	bl	bea50 <atof>
                    lonRX = atof(testLon);
   b56b0:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b56b2:	ed87 0b00 	vstr	d0, [r7]
                    lonRX = atof(testLon);
   b56b6:	f009 f9cb 	bl	bea50 <atof>
                    w.battPercent = battpct;
   b56ba:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
   b56be:	70e1      	strb	r1, [r4, #3]
                    w.LTEAvail = statflags & 1;
   b56c0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
   b56c4:	f001 0001 	and.w	r0, r1, #1
                    latRX = atof(testLat);
   b56c8:	e9d7 2300 	ldrd	r2, r3, [r7]
                    w.LTEAvail = statflags & 1;
   b56cc:	7160      	strb	r0, [r4, #5]
                    w.XBeeAvail = (statflags >> 1) & 1;
   b56ce:	f3c1 0040 	ubfx	r0, r1, #1, #1
   b56d2:	71a0      	strb	r0, [r4, #6]
                    w.BLEAvail = (statflags >> 2) & 1;
   b56d4:	f3c1 0080 	ubfx	r0, r1, #2, #1
                    w.lowBatt = (statflags >> 6) & 1;
   b56d8:	f3c1 1180 	ubfx	r1, r1, #6, #1
   b56dc:	72e1      	strb	r1, [r4, #11]
                    w.GPSAvail = (statflags >> 8) & 1;
   b56de:	2100      	movs	r1, #0
                    w.BLEAvail = (statflags >> 2) & 1;
   b56e0:	7120      	strb	r0, [r4, #4]
                    w.GPSAvail = (statflags >> 8) & 1;
   b56e2:	71e1      	strb	r1, [r4, #7]
                    latRX = atof(testLat);
   b56e4:	4610      	mov	r0, r2
                    w.CompassAvail = (statflags >> 9) & 1;
   b56e6:	7221      	strb	r1, [r4, #8]
                    latRX = atof(testLat);
   b56e8:	4619      	mov	r1, r3
                    lonRX = atof(testLon);
   b56ea:	ec5b ab10 	vmov	sl, fp, d0
                    latRX = atof(testLat);
   b56ee:	f009 f93b 	bl	be968 <__aeabi_d2f>
                    lonRX = atof(testLon);
   b56f2:	4659      	mov	r1, fp
                    latRX = atof(testLat);
   b56f4:	61a0      	str	r0, [r4, #24]
                    lonRX = atof(testLon);
   b56f6:	4650      	mov	r0, sl
   b56f8:	f009 f936 	bl	be968 <__aeabi_d2f>
   b56fc:	61e0      	str	r0, [r4, #28]
   b56fe:	f004 f9cb 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
                    if(millis() - w.publishTime > WB_MOD_UPDATE_TIME){
   b5702:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b5704:	1ac0      	subs	r0, r0, r3
   b5706:	f64e 2360 	movw	r3, #60000	; 0xea60
   b570a:	4298      	cmp	r0, r3
   b570c:	d909      	bls.n	b5722 <_Z14processCommandPKchb+0x26e>
                        w.offloading = (statflags >> 3) & 1;
   b570e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b5712:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b5716:	73a2      	strb	r2, [r4, #14]
                        w.driveMode = (statflags >> 4) & 3;
   b5718:	f3c3 1201 	ubfx	r2, r3, #4, #2
                        w.dataRecording = (statflags >> 7) & 1;
   b571c:	09db      	lsrs	r3, r3, #7
                        w.driveMode = (statflags >> 4) & 3;
   b571e:	7262      	strb	r2, [r4, #9]
                        w.dataRecording = (statflags >> 7) & 1;
   b5720:	7363      	strb	r3, [r4, #13]
                    if(w.lowBatt && !w.warnedLowBatt){
   b5722:	7ae3      	ldrb	r3, [r4, #11]
   b5724:	b363      	cbz	r3, b5780 <_Z14processCommandPKchb+0x2cc>
   b5726:	7b23      	ldrb	r3, [r4, #12]
   b5728:	bb53      	cbnz	r3, b5780 <_Z14processCommandPKchb+0x2cc>
                        w.warnedLowBatt = true;
   b572a:	f04f 0a01 	mov.w	sl, #1
   b572e:	f884 a00c 	strb.w	sl, [r4, #12]
                        sprintf(m.primaryLine,"Warning\0");
   b5732:	495c      	ldr	r1, [pc, #368]	; (b58a4 <_Z14processCommandPKchb+0x3f0>)
class MenuPopUp{
   b5734:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                        sprintf(m.primaryLine,"Warning\0");
   b5738:	f107 0044 	add.w	r0, r7, #68	; 0x44
class MenuPopUp{
   b573c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   b5740:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                        sprintf(m.primaryLine,"Warning\0");
   b5744:	f009 fa51 	bl	bebea <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b5748:	78a2      	ldrb	r2, [r4, #2]
   b574a:	4957      	ldr	r1, [pc, #348]	; (b58a8 <_Z14processCommandPKchb+0x3f4>)
   b574c:	f107 004e 	add.w	r0, r7, #78	; 0x4e
   b5750:	f004 fc36 	bl	b9fc0 <sprintf>
                        sprintf(m.tertiaryLine, "Low Battery: %d\0",w.battPercent);
   b5754:	78e2      	ldrb	r2, [r4, #3]
   b5756:	4955      	ldr	r1, [pc, #340]	; (b58ac <_Z14processCommandPKchb+0x3f8>)
   b5758:	f107 006c 	add.w	r0, r7, #108	; 0x6c
   b575c:	f004 fc30 	bl	b9fc0 <sprintf>
                        m.primaryStart = 20;
   b5760:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b5762:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b5764:	4852      	ldr	r0, [pc, #328]	; (b58b0 <_Z14processCommandPKchb+0x3fc>)
                        m.primaryStart = 20;
   b5766:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                        PopUps.push_back(m);
   b576a:	f107 0144 	add.w	r1, r7, #68	; 0x44
                        m.tertiaryStart = 20;
   b576e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                        m.secondaryStart = 40;
   b5772:	f887 208b 	strb.w	r2, [r7, #139]	; 0x8b
                        PopUps.push_back(m);
   b5776:	f7ff fdd3 	bl	b5320 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b577a:	4b3f      	ldr	r3, [pc, #252]	; (b5878 <_Z14processCommandPKchb+0x3c4>)
   b577c:	f883 a000 	strb.w	sl, [r3]
                    if(botSelect = w.botNum) redrawMenu = true;
   b5780:	78a3      	ldrb	r3, [r4, #2]
   b5782:	4a4c      	ldr	r2, [pc, #304]	; (b58b4 <_Z14processCommandPKchb+0x400>)
   b5784:	7013      	strb	r3, [r2, #0]
   b5786:	b113      	cbz	r3, b578e <_Z14processCommandPKchb+0x2da>
   b5788:	4b3b      	ldr	r3, [pc, #236]	; (b5878 <_Z14processCommandPKchb+0x3c4>)
   b578a:	2201      	movs	r2, #1
   b578c:	701a      	strb	r2, [r3, #0]
                    logMessage("Status Update!");
   b578e:	484a      	ldr	r0, [pc, #296]	; (b58b8 <_Z14processCommandPKchb+0x404>)
   b5790:	f7ff f864 	bl	b485c <_Z10logMessagePKc>
      operator++() _GLIBCXX_NOEXCEPT
   b5794:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b5796:	e76f      	b.n	b5678 <_Z14processCommandPKchb+0x1c4>
        if(!strcmp(cmdStr,"sns")){
   b5798:	4948      	ldr	r1, [pc, #288]	; (b58bc <_Z14processCommandPKchb+0x408>)
   b579a:	f107 0018 	add.w	r0, r7, #24
   b579e:	f009 fa1a 	bl	bebd6 <strcmp>
   b57a2:	2800      	cmp	r0, #0
   b57a4:	d158      	bne.n	b5858 <_Z14processCommandPKchb+0x3a4>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b57a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b57aa:	9304      	str	r3, [sp, #16]
   b57ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b57b0:	9303      	str	r3, [sp, #12]
   b57b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b57b6:	9302      	str	r3, [sp, #8]
   b57b8:	f107 0320 	add.w	r3, r7, #32
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	f107 031c 	add.w	r3, r7, #28
   b57c2:	493f      	ldr	r1, [pc, #252]	; (b58c0 <_Z14processCommandPKchb+0x40c>)
   b57c4:	9300      	str	r3, [sp, #0]
   b57c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b57ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
   b57ce:	4648      	mov	r0, r9
   b57d0:	f004 fbfe 	bl	b9fd0 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b57d4:	edd7 7a07 	vldr	s15, [r7, #28]
   b57d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b57dc:	eddf 7a39 	vldr	s15, [pc, #228]	; b58c4 <_Z14processCommandPKchb+0x410>
   b57e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b57e4:	ed97 7a08 	vldr	s14, [r7, #32]
            TargetWB->DO = ((float)do_in)/1000.0;
   b57e8:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
            TargetWB->pH = ((float)pH_in)/1000.0;
   b57ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b57f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57f4:	edc5 6a08 	vstr	s13, [r5, #32]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b57f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
   b57fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5800:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5804:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b5808:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   b580c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5810:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5814:	edc5 6a0c 	vstr	s13, [r5, #48]	; 0x30
            TargetWB->temp = ((float)temp_in)/1000.0;
   b5818:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   b581c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5820:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5824:	edc5 6a09 	vstr	s13, [r5, #36]	; 0x24
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b5828:	f008 f89e 	bl	bd968 <_Z16_fetch_usbserialv>
   b582c:	78aa      	ldrb	r2, [r5, #2]
   b582e:	60fa      	str	r2, [r7, #12]
   b5830:	4604      	mov	r4, r0
   b5832:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5834:	f008 fd86 	bl	be344 <__aeabi_f2d>
   b5838:	e9cd 0100 	strd	r0, r1, [sp]
   b583c:	68fa      	ldr	r2, [r7, #12]
   b583e:	4922      	ldr	r1, [pc, #136]	; (b58c8 <_Z14processCommandPKchb+0x414>)
   b5840:	4620      	mov	r0, r4
   b5842:	f7fe fd87 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5846:	ee18 3a10 	vmov	r3, s16
   b584a:	469d      	mov	sp, r3
}
   b584c:	3794      	adds	r7, #148	; 0x94
   b584e:	46bd      	mov	sp, r7
   b5850:	ecbd 8b02 	vpop	{d8}
   b5854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b5858:	491c      	ldr	r1, [pc, #112]	; (b58cc <_Z14processCommandPKchb+0x418>)
   b585a:	f107 0018 	add.w	r0, r7, #24
   b585e:	f009 f9ba 	bl	bebd6 <strcmp>
   b5862:	bbc8      	cbnz	r0, b58d8 <_Z14processCommandPKchb+0x424>
            strncpy(errCmdStr,dataStr,3);
   b5864:	481a      	ldr	r0, [pc, #104]	; (b58d0 <_Z14processCommandPKchb+0x41c>)
   b5866:	2203      	movs	r2, #3
   b5868:	4649      	mov	r1, r9
   b586a:	f009 fa00 	bl	bec6e <strncpy>
            errCmdMode = mode;
   b586e:	4b19      	ldr	r3, [pc, #100]	; (b58d4 <_Z14processCommandPKchb+0x420>)
   b5870:	e6eb      	b.n	b564a <_Z14processCommandPKchb+0x196>
   b5872:	bf00      	nop
   b5874:	2003dcc0 	.word	0x2003dcc0
   b5878:	2003da88 	.word	0x2003da88
   b587c:	000c0f45 	.word	0x000c0f45
   b5880:	000c0d8c 	.word	0x000c0d8c
   b5884:	000c0f5a 	.word	0x000c0f5a
   b5888:	000c0dd9 	.word	0x000c0dd9
   b588c:	000c0dfa 	.word	0x000c0dfa
   b5890:	2003dd68 	.word	0x2003dd68
   b5894:	2003dd7b 	.word	0x2003dd7b
   b5898:	000c0f83 	.word	0x000c0f83
   b589c:	000c0f87 	.word	0x000c0f87
   b58a0:	000c0f8b 	.word	0x000c0f8b
   b58a4:	000c13e0 	.word	0x000c13e0
   b58a8:	000c13e9 	.word	0x000c13e9
   b58ac:	000c13f1 	.word	0x000c13f1
   b58b0:	2003dca4 	.word	0x2003dca4
   b58b4:	2003dd59 	.word	0x2003dd59
   b58b8:	000c0f97 	.word	0x000c0f97
   b58bc:	000c0fa6 	.word	0x000c0fa6
   b58c0:	000c0faa 	.word	0x000c0faa
   b58c4:	447a0000 	.word	0x447a0000
   b58c8:	000c0fbf 	.word	0x000c0fbf
   b58cc:	000c0fd2 	.word	0x000c0fd2
   b58d0:	2003dd78 	.word	0x2003dd78
   b58d4:	2003dd77 	.word	0x2003dd77
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b58d8:	4931      	ldr	r1, [pc, #196]	; (b59a0 <_Z14processCommandPKchb+0x4ec>)
   b58da:	f107 0018 	add.w	r0, r7, #24
   b58de:	f009 f97a 	bl	bebd6 <strcmp>
   b58e2:	2800      	cmp	r0, #0
   b58e4:	d139      	bne.n	b595a <_Z14processCommandPKchb+0x4a6>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b58e6:	e9d8 3000 	ldrd	r3, r0, [r8]
            bool newBot = true;
   b58ea:	2201      	movs	r2, #1
            for(WaterBot w: WaterBots){
   b58ec:	4283      	cmp	r3, r0
   b58ee:	d006      	beq.n	b58fe <_Z14processCommandPKchb+0x44a>
                if(rxBotID == w.botNum) newBot = false;
   b58f0:	7899      	ldrb	r1, [r3, #2]
   b58f2:	68fc      	ldr	r4, [r7, #12]
   b58f4:	333c      	adds	r3, #60	; 0x3c
   b58f6:	42a1      	cmp	r1, r4
   b58f8:	bf08      	it	eq
   b58fa:	2200      	moveq	r2, #0
	return *this;
   b58fc:	e7f6      	b.n	b58ec <_Z14processCommandPKchb+0x438>
            if(newBot){
   b58fe:	b1e2      	cbz	r2, b593a <_Z14processCommandPKchb+0x486>
                Serial.println("Found a new water bot ID");
   b5900:	f008 f832 	bl	bd968 <_Z16_fetch_usbserialv>
   b5904:	4927      	ldr	r1, [pc, #156]	; (b59a4 <_Z14processCommandPKchb+0x4f0>)
   b5906:	f007 fc22 	bl	bd14e <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b590a:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b590e:	f7fe ffc5 	bl	b489c <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b5912:	2e01      	cmp	r6, #1
   b5914:	d115      	bne.n	b5942 <_Z14processCommandPKchb+0x48e>
   b5916:	f887 6048 	strb.w	r6, [r7, #72]	; 0x48
                newWaterbot.botNum = rxBotID;
   b591a:	68fb      	ldr	r3, [r7, #12]
                WaterBots.push_back(newWaterbot);
   b591c:	4822      	ldr	r0, [pc, #136]	; (b59a8 <_Z14processCommandPKchb+0x4f4>)
                newWaterbot.botNum = rxBotID;
   b591e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                WaterBots.push_back(newWaterbot);
   b5922:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5926:	f7ff fda9 	bl	b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b592a:	4820      	ldr	r0, [pc, #128]	; (b59ac <_Z14processCommandPKchb+0x4f8>)
   b592c:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5930:	f7ff fda4 	bl	b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                redrawMenu = true;
   b5934:	4b1e      	ldr	r3, [pc, #120]	; (b59b0 <_Z14processCommandPKchb+0x4fc>)
   b5936:	2201      	movs	r2, #1
   b5938:	701a      	strb	r2, [r3, #0]
            botPairRx = true;
   b593a:	4b1e      	ldr	r3, [pc, #120]	; (b59b4 <_Z14processCommandPKchb+0x500>)
   b593c:	2201      	movs	r2, #1
   b593e:	701a      	strb	r2, [r3, #0]
   b5940:	e781      	b.n	b5846 <_Z14processCommandPKchb+0x392>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b5942:	2e02      	cmp	r6, #2
   b5944:	f04f 0301 	mov.w	r3, #1
   b5948:	d102      	bne.n	b5950 <_Z14processCommandPKchb+0x49c>
   b594a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   b594e:	e7e4      	b.n	b591a <_Z14processCommandPKchb+0x466>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b5950:	2e03      	cmp	r6, #3
   b5952:	bf08      	it	eq
   b5954:	f887 3049 	strbeq.w	r3, [r7, #73]	; 0x49
   b5958:	e7df      	b.n	b591a <_Z14processCommandPKchb+0x466>
        else if(!strcmp(cmdStr,"pts")){
   b595a:	4917      	ldr	r1, [pc, #92]	; (b59b8 <_Z14processCommandPKchb+0x504>)
   b595c:	f107 0018 	add.w	r0, r7, #24
   b5960:	f009 f939 	bl	bebd6 <strcmp>
   b5964:	2800      	cmp	r0, #0
   b5966:	f47f af6e 	bne.w	b5846 <_Z14processCommandPKchb+0x392>
   b596a:	4c14      	ldr	r4, [pc, #80]	; (b59bc <_Z14processCommandPKchb+0x508>)
            if(!logFile.isOpen()){
   b596c:	7c23      	ldrb	r3, [r4, #16]
   b596e:	b983      	cbnz	r3, b5992 <_Z14processCommandPKchb+0x4de>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5970:	4913      	ldr	r1, [pc, #76]	; (b59c0 <_Z14processCommandPKchb+0x50c>)
   b5972:	f244 2202 	movw	r2, #16898	; 0x4202
   b5976:	f104 0010 	add.w	r0, r4, #16
   b597a:	f7fe fe7f 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b597e:	4911      	ldr	r1, [pc, #68]	; (b59c4 <_Z14processCommandPKchb+0x510>)
   b5980:	464a      	mov	r2, r9
   b5982:	4620      	mov	r0, r4
   b5984:	f7fe fce6 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b5988:	f104 0010 	add.w	r0, r4, #16
   b598c:	f001 fda0 	bl	b74d0 <_ZN7FatFile5closeEv>
   b5990:	e759      	b.n	b5846 <_Z14processCommandPKchb+0x392>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5992:	490c      	ldr	r1, [pc, #48]	; (b59c4 <_Z14processCommandPKchb+0x510>)
   b5994:	464a      	mov	r2, r9
   b5996:	4620      	mov	r0, r4
   b5998:	f7fe fcdc 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        if(sendAck){    //Transmit out acknowledgement if needed
   b599c:	e753      	b.n	b5846 <_Z14processCommandPKchb+0x392>
   b599e:	bf00      	nop
   b59a0:	000c0fd6 	.word	0x000c0fd6
   b59a4:	000c0fda 	.word	0x000c0fda
   b59a8:	2003dcc0 	.word	0x2003dcc0
   b59ac:	2003dc98 	.word	0x2003dc98
   b59b0:	2003da88 	.word	0x2003da88
   b59b4:	2003dd58 	.word	0x2003dd58
   b59b8:	000c0ff3 	.word	0x000c0ff3
   b59bc:	2003ddd4 	.word	0x2003ddd4
   b59c0:	2003dd7c 	.word	0x2003dd7c
   b59c4:	000c0ff7 	.word	0x000c0ff7

000b59c8 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b59c8:	b510      	push	{r4, lr}
   b59ca:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b59cc:	2200      	movs	r2, #0
   b59ce:	2104      	movs	r1, #4
   b59d0:	4620      	mov	r0, r4
   b59d2:	f7ff fd6f 	bl	b54b4 <_Z14processCommandPKchb>
    if(logMessages){
   b59d6:	4b0b      	ldr	r3, [pc, #44]	; (b5a04 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b59d8:	781b      	ldrb	r3, [r3, #0]
   b59da:	b193      	cbz	r3, b5a02 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b59dc:	480a      	ldr	r0, [pc, #40]	; (b5a08 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b59de:	7c03      	ldrb	r3, [r0, #16]
   b59e0:	b92b      	cbnz	r3, b59ee <_Z14dataLTEHandlerPKcS0_+0x26>
   b59e2:	490a      	ldr	r1, [pc, #40]	; (b5a0c <_Z14dataLTEHandlerPKcS0_+0x44>)
   b59e4:	f244 2202 	movw	r2, #16898	; 0x4202
   b59e8:	3010      	adds	r0, #16
   b59ea:	f7fe fe47 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b59ee:	4622      	mov	r2, r4
   b59f0:	4907      	ldr	r1, [pc, #28]	; (b5a10 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b59f2:	4805      	ldr	r0, [pc, #20]	; (b5a08 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b59f4:	f7fe fcae 	bl	b4354 <_ZN5Print8printlnfEPKcz>
}
   b59f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b59fc:	4805      	ldr	r0, [pc, #20]	; (b5a14 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b59fe:	f001 bd67 	b.w	b74d0 <_ZN7FatFile5closeEv>
}
   b5a02:	bd10      	pop	{r4, pc}
   b5a04:	2003de08 	.word	0x2003de08
   b5a08:	2003ddd4 	.word	0x2003ddd4
   b5a0c:	2003dd7c 	.word	0x2003dd7c
   b5a10:	000c101a 	.word	0x000c101a
   b5a14:	2003dde4 	.word	0x2003dde4

000b5a18 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a18:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b5a1a:	f101 0308 	add.w	r3, r1, #8
   b5a1e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a22:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5a24:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a28:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b5a2a:	460a      	mov	r2, r1
   b5a2c:	4601      	mov	r1, r0
   b5a2e:	4668      	mov	r0, sp
   b5a30:	f009 f825 	bl	bea7e <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5a34:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5a38:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5a3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b5a3e:	b113      	cbz	r3, b5a46 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b5a40:	2300      	movs	r3, #0
   b5a42:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b5a46:	f007 ff8f 	bl	bd968 <_Z16_fetch_usbserialv>
   b5a4a:	4911      	ldr	r1, [pc, #68]	; (b5a90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b5a4c:	f007 fb6c 	bl	bd128 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b5a50:	f007 ff8a 	bl	bd968 <_Z16_fetch_usbserialv>
   b5a54:	4629      	mov	r1, r5
   b5a56:	f007 fb7a 	bl	bd14e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b5a5a:	2201      	movs	r2, #1
   b5a5c:	4611      	mov	r1, r2
   b5a5e:	4628      	mov	r0, r5
   b5a60:	f7ff fd28 	bl	b54b4 <_Z14processCommandPKchb>
    if(logMessages){
   b5a64:	4b0b      	ldr	r3, [pc, #44]	; (b5a94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b5a66:	781b      	ldrb	r3, [r3, #0]
   b5a68:	b183      	cbz	r3, b5a8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b5a6a:	480b      	ldr	r0, [pc, #44]	; (b5a98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5a6c:	7c03      	ldrb	r3, [r0, #16]
   b5a6e:	b92b      	cbnz	r3, b5a7c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b5a70:	490a      	ldr	r1, [pc, #40]	; (b5a9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b5a72:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a76:	3010      	adds	r0, #16
   b5a78:	f7fe fe00 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b5a7c:	4908      	ldr	r1, [pc, #32]	; (b5aa0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b5a7e:	4806      	ldr	r0, [pc, #24]	; (b5a98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b5a80:	462a      	mov	r2, r5
   b5a82:	f7fe fc67 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5a86:	4807      	ldr	r0, [pc, #28]	; (b5aa4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b5a88:	f001 fd22 	bl	b74d0 <_ZN7FatFile5closeEv>
}
   b5a8c:	46bd      	mov	sp, r7
   b5a8e:	bdb0      	pop	{r4, r5, r7, pc}
   b5a90:	000c103a 	.word	0x000c103a
   b5a94:	2003de08 	.word	0x2003de08
   b5a98:	2003ddd4 	.word	0x2003ddd4
   b5a9c:	2003dd7c 	.word	0x2003dd7c
   b5aa0:	000c104b 	.word	0x000c104b
   b5aa4:	2003dde4 	.word	0x2003dde4

000b5aa8 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5aac:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5b9c <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b5ab0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5ba0 <_Z11XBeeHandlerv+0xf8>
   b5ab4:	4d35      	ldr	r5, [pc, #212]	; (b5b8c <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b5ab6:	b089      	sub	sp, #36	; 0x24
   b5ab8:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5aba:	f008 f8ed 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   b5abe:	6803      	ldr	r3, [r0, #0]
   b5ac0:	691b      	ldr	r3, [r3, #16]
   b5ac2:	4798      	blx	r3
   b5ac4:	2800      	cmp	r0, #0
   b5ac6:	d05c      	beq.n	b5b82 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b5ac8:	f008 f8e6 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   b5acc:	220a      	movs	r2, #10
   b5ace:	4601      	mov	r1, r0
   b5ad0:	4638      	mov	r0, r7
   b5ad2:	f007 fc81 	bl	bd3d8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5ad6:	68bb      	ldr	r3, [r7, #8]
   b5ad8:	3307      	adds	r3, #7
   b5ada:	f023 0307 	bic.w	r3, r3, #7
    }
   b5ade:	466e      	mov	r6, sp
        char buffer[data.length()];
   b5ae0:	ebad 0d03 	sub.w	sp, sp, r3
   b5ae4:	46ea      	mov	sl, sp
   b5ae6:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5ae8:	68b9      	ldr	r1, [r7, #8]
   b5aea:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5aee:	458b      	cmp	fp, r1
   b5af0:	f103 0401 	add.w	r4, r3, #1
   b5af4:	d207      	bcs.n	b5b06 <_Z11XBeeHandlerv+0x5e>
   b5af6:	4659      	mov	r1, fp
   b5af8:	4638      	mov	r0, r7
   b5afa:	f007 fd87 	bl	bd60c <_ZNK6String6charAtEj>
   b5afe:	4623      	mov	r3, r4
   b5b00:	f80a 000b 	strb.w	r0, [sl, fp]
   b5b04:	e7f0      	b.n	b5ae8 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5b06:	2901      	cmp	r1, #1
   b5b08:	d90a      	bls.n	b5b20 <_Z11XBeeHandlerv+0x78>
   b5b0a:	3901      	subs	r1, #1
   b5b0c:	4638      	mov	r0, r7
   b5b0e:	f007 fd7d 	bl	bd60c <_ZNK6String6charAtEj>
   b5b12:	280d      	cmp	r0, #13
   b5b14:	bf01      	itttt	eq
   b5b16:	68bb      	ldreq	r3, [r7, #8]
   b5b18:	4453      	addeq	r3, sl
   b5b1a:	2200      	moveq	r2, #0
   b5b1c:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5b20:	2201      	movs	r2, #1
   b5b22:	2102      	movs	r1, #2
   b5b24:	4650      	mov	r0, sl
   b5b26:	f7ff fcc5 	bl	b54b4 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5b2a:	f007 ff1d 	bl	bd968 <_Z16_fetch_usbserialv>
   b5b2e:	4641      	mov	r1, r8
   b5b30:	f007 fb0d 	bl	bd14e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5b34:	f007 ff18 	bl	bd968 <_Z16_fetch_usbserialv>
   b5b38:	6839      	ldr	r1, [r7, #0]
   b5b3a:	f007 fb08 	bl	bd14e <_ZN5Print7printlnEPKc>
        if(logMessages){
   b5b3e:	f899 3000 	ldrb.w	r3, [r9]
   b5b42:	b1cb      	cbz	r3, b5b78 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5b44:	7c2b      	ldrb	r3, [r5, #16]
   b5b46:	b92b      	cbnz	r3, b5b54 <_Z11XBeeHandlerv+0xac>
   b5b48:	4911      	ldr	r1, [pc, #68]	; (b5b90 <_Z11XBeeHandlerv+0xe8>)
   b5b4a:	4812      	ldr	r0, [pc, #72]	; (b5b94 <_Z11XBeeHandlerv+0xec>)
   b5b4c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5b50:	f7fe fd94 	bl	b467c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5b54:	4639      	mov	r1, r7
   b5b56:	f107 0010 	add.w	r0, r7, #16
   b5b5a:	f007 fceb 	bl	bd534 <_ZN6StringC1ERKS_>
   b5b5e:	490e      	ldr	r1, [pc, #56]	; (b5b98 <_Z11XBeeHandlerv+0xf0>)
   b5b60:	f107 0210 	add.w	r2, r7, #16
   b5b64:	4628      	mov	r0, r5
   b5b66:	f7fe fbf5 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5b6a:	f107 0010 	add.w	r0, r7, #16
   b5b6e:	f007 fc4b 	bl	bd408 <_ZN6StringD1Ev>
            logFile.close();
   b5b72:	4808      	ldr	r0, [pc, #32]	; (b5b94 <_Z11XBeeHandlerv+0xec>)
   b5b74:	f001 fcac 	bl	b74d0 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5b78:	4638      	mov	r0, r7
   b5b7a:	f007 fc45 	bl	bd408 <_ZN6StringD1Ev>
   b5b7e:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5b80:	e79b      	b.n	b5aba <_Z11XBeeHandlerv+0x12>
}
   b5b82:	3724      	adds	r7, #36	; 0x24
   b5b84:	46bd      	mov	sp, r7
   b5b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b8a:	bf00      	nop
   b5b8c:	2003ddd4 	.word	0x2003ddd4
   b5b90:	2003dd7c 	.word	0x2003dd7c
   b5b94:	2003dde4 	.word	0x2003dde4
   b5b98:	000c107d 	.word	0x000c107d
   b5b9c:	000c106b 	.word	0x000c106b
   b5ba0:	2003de08 	.word	0x2003de08

000b5ba4 <_Z15LTEInputCommand6String>:

int LTEInputCommand(String cmd){
   b5ba4:	b500      	push	{lr}
   b5ba6:	b09b      	sub	sp, #108	; 0x6c
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5ba8:	2300      	movs	r3, #0
   b5baa:	2264      	movs	r2, #100	; 0x64
   b5bac:	a901      	add	r1, sp, #4
   b5bae:	f007 fd2f 	bl	bd610 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b5bb2:	2104      	movs	r1, #4
   b5bb4:	2200      	movs	r2, #0
   b5bb6:	eb0d 0001 	add.w	r0, sp, r1
   b5bba:	f7ff fc7b 	bl	b54b4 <_Z14processCommandPKchb>
    if(logMessages){
   b5bbe:	4b0c      	ldr	r3, [pc, #48]	; (b5bf0 <_Z15LTEInputCommand6String+0x4c>)
   b5bc0:	781b      	ldrb	r3, [r3, #0]
   b5bc2:	b183      	cbz	r3, b5be6 <_Z15LTEInputCommand6String+0x42>
   b5bc4:	480b      	ldr	r0, [pc, #44]	; (b5bf4 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5bc6:	7c03      	ldrb	r3, [r0, #16]
   b5bc8:	b92b      	cbnz	r3, b5bd6 <_Z15LTEInputCommand6String+0x32>
   b5bca:	490b      	ldr	r1, [pc, #44]	; (b5bf8 <_Z15LTEInputCommand6String+0x54>)
   b5bcc:	f244 2202 	movw	r2, #16898	; 0x4202
   b5bd0:	3010      	adds	r0, #16
   b5bd2:	f7fe fd53 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b5bd6:	4909      	ldr	r1, [pc, #36]	; (b5bfc <_Z15LTEInputCommand6String+0x58>)
   b5bd8:	4806      	ldr	r0, [pc, #24]	; (b5bf4 <_Z15LTEInputCommand6String+0x50>)
   b5bda:	aa01      	add	r2, sp, #4
   b5bdc:	f7fe fbba 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5be0:	4807      	ldr	r0, [pc, #28]	; (b5c00 <_Z15LTEInputCommand6String+0x5c>)
   b5be2:	f001 fc75 	bl	b74d0 <_ZN7FatFile5closeEv>
    }
    return 1;
   b5be6:	2001      	movs	r0, #1
   b5be8:	b01b      	add	sp, #108	; 0x6c
   b5bea:	f85d fb04 	ldr.w	pc, [sp], #4
   b5bee:	bf00      	nop
   b5bf0:	2003de08 	.word	0x2003de08
   b5bf4:	2003ddd4 	.word	0x2003ddd4
   b5bf8:	2003dd7c 	.word	0x2003dd7c
   b5bfc:	000c101a 	.word	0x000c101a
   b5c00:	2003dde4 	.word	0x2003dde4

000b5c04 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c08:	4d1f      	ldr	r5, [pc, #124]	; (b5c88 <_Z11WaterBotSimh+0x84>)
        WaterBots.push_back(simBot);
   b5c0a:	f8df a07c 	ldr.w	sl, [pc, #124]	; b5c88 <_Z11WaterBotSimh+0x84>
   b5c0e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5c12:	1a9b      	subs	r3, r3, r2
   b5c14:	4a1d      	ldr	r2, [pc, #116]	; (b5c8c <_Z11WaterBotSimh+0x88>)
   b5c16:	109b      	asrs	r3, r3, #2
   b5c18:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b5c1a:	b2dc      	uxtb	r4, r3
   b5c1c:	4403      	add	r3, r0
   b5c1e:	2b0a      	cmp	r3, #10
   b5c20:	bf84      	itt	hi
   b5c22:	f1c4 000a 	rsbhi	r0, r4, #10
   b5c26:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b5c28:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b5c2a:	b090      	sub	sp, #64	; 0x40
    uint8_t botloop = count+WaterBots.size();
   b5c2c:	b2c4      	uxtb	r4, r0
   b5c2e:	2700      	movs	r7, #0
        simBot.XBeeAvail = true;
   b5c30:	f04f 0901 	mov.w	r9, #1
   b5c34:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5c38:	4544      	cmp	r4, r8
   b5c3a:	d921      	bls.n	b5c80 <_Z11WaterBotSimh+0x7c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5c3c:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b5c40:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b5c42:	4299      	cmp	r1, r3
   b5c44:	d005      	beq.n	b5c52 <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b5c46:	789a      	ldrb	r2, [r3, #2]
   b5c48:	333c      	adds	r3, #60	; 0x3c
   b5c4a:	4542      	cmp	r2, r8
   b5c4c:	bf08      	it	eq
   b5c4e:	2601      	moveq	r6, #1
	return *this;
   b5c50:	e7f7      	b.n	b5c42 <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b5c52:	b99e      	cbnz	r6, b5c7c <_Z11WaterBotSimh+0x78>
        WaterBot simBot;
   b5c54:	a801      	add	r0, sp, #4
   b5c56:	f7fe fe21 	bl	b489c <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b5c5a:	2064      	movs	r0, #100	; 0x64
        simBot.driveMode = 0;
   b5c5c:	f88d 600d 	strb.w	r6, [sp, #13]
        simBot.botNum = temp;
   b5c60:	f88d 8006 	strb.w	r8, [sp, #6]
        simBot.BLEAvail = false;
   b5c64:	f8ad 6008 	strh.w	r6, [sp, #8]
        simBot.XBeeAvail = true;
   b5c68:	f88d 900a 	strb.w	r9, [sp, #10]
        simBot.battPercent = random(100);
   b5c6c:	f007 fac8 	bl	bd200 <_Z6randomi>
        WaterBots.push_back(simBot);
   b5c70:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b5c72:	f88d 0007 	strb.w	r0, [sp, #7]
        WaterBots.push_back(simBot);
   b5c76:	4650      	mov	r0, sl
   b5c78:	f7ff fc00 	bl	b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5c7c:	3701      	adds	r7, #1
   b5c7e:	e7d9      	b.n	b5c34 <_Z11WaterBotSimh+0x30>
}
   b5c80:	b010      	add	sp, #64	; 0x40
   b5c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5c86:	bf00      	nop
   b5c88:	2003dcc0 	.word	0x2003dcc0
   b5c8c:	eeeeeeef 	.word	0xeeeeeeef

000b5c90 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c94:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5c98:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5c9a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c9e:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5ca2:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5ca6:	4607      	mov	r7, r0
   b5ca8:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5caa:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5cae:	d102      	bne.n	b5cb6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5cb0:	4820      	ldr	r0, [pc, #128]	; (b5d34 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b5cb2:	f008 f81d 	bl	bdcf0 <_ZSt20__throw_length_errorPKc>
   b5cb6:	2c01      	cmp	r4, #1
   b5cb8:	4622      	mov	r2, r4
   b5cba:	bf38      	it	cc
   b5cbc:	2201      	movcc	r2, #1
   b5cbe:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5cc0:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5cc4:	d231      	bcs.n	b5d2a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5cc6:	b394      	cbz	r4, b5d2e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5cc8:	429c      	cmp	r4, r3
   b5cca:	bf28      	it	cs
   b5ccc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5cce:	00e0      	lsls	r0, r4, #3
   b5cd0:	f7fe f9e1 	bl	b4096 <_Znwj>
   b5cd4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5cd6:	1973      	adds	r3, r6, r5
   b5cd8:	bf1c      	itt	ne
   b5cda:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5cde:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b5ce2:	2d00      	cmp	r5, #0
   b5ce4:	dd04      	ble.n	b5cf0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5ce6:	462a      	mov	r2, r5
   b5ce8:	4641      	mov	r1, r8
   b5cea:	4630      	mov	r0, r6
   b5cec:	f008 fed5 	bl	bea9a <memmove>
      ptrdiff_t __count = __last - __first;
   b5cf0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5cf4:	3508      	adds	r5, #8
      if (__count > 0)
   b5cf6:	f1b9 0f00 	cmp.w	r9, #0
   b5cfa:	4435      	add	r5, r6
   b5cfc:	dd04      	ble.n	b5d08 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5cfe:	464a      	mov	r2, r9
   b5d00:	4651      	mov	r1, sl
   b5d02:	4628      	mov	r0, r5
   b5d04:	f008 febb 	bl	bea7e <memcpy>
      return __result + __count;
   b5d08:	444d      	add	r5, r9
	if (__p)
   b5d0a:	f1b8 0f00 	cmp.w	r8, #0
   b5d0e:	d005      	beq.n	b5d1c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5d10:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5d12:	4640      	mov	r0, r8
   b5d14:	eba1 0108 	sub.w	r1, r1, r8
   b5d18:	f7fe f9c1 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5d1c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5d20:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5d24:	60bc      	str	r4, [r7, #8]
    }
   b5d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5d2a:	461c      	mov	r4, r3
   b5d2c:	e7cf      	b.n	b5cce <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5d2e:	4626      	mov	r6, r4
   b5d30:	e7d1      	b.n	b5cd6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5d32:	bf00      	nop
   b5d34:	000c0f2b 	.word	0x000c0f2b

000b5d38 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d3c:	b0a7      	sub	sp, #156	; 0x9c
   b5d3e:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5d40:	f004 fea8 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d44:	497c      	ldr	r1, [pc, #496]	; (b5f38 <_Z7BLEScani+0x200>)
   b5d46:	2214      	movs	r2, #20
   b5d48:	f004 ff9c 	bl	bac84 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b5d4c:	4680      	mov	r8, r0
   b5d4e:	2800      	cmp	r0, #0
   b5d50:	f000 80ee 	beq.w	b5f30 <_Z7BLEScani+0x1f8>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5d54:	f8df b1e0 	ldr.w	fp, [pc, #480]	; b5f38 <_Z7BLEScani+0x200>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5d58:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b5d5a:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b5d5e:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b5d62:	f109 0708 	add.w	r7, r9, #8
   b5d66:	a80a      	add	r0, sp, #40	; 0x28
   b5d68:	445f      	add	r7, fp
   b5d6a:	f004 faf7 	bl	ba35c <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5d6e:	2201      	movs	r2, #1
   b5d70:	a90a      	add	r1, sp, #40	; 0x28
   b5d72:	4638      	mov	r0, r7
   b5d74:	f005 fe4e 	bl	bba14 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5d78:	4682      	mov	sl, r0
   b5d7a:	2800      	cmp	r0, #0
   b5d7c:	d056      	beq.n	b5e2c <_Z7BLEScani+0xf4>
   b5d7e:	496f      	ldr	r1, [pc, #444]	; (b5f3c <_Z7BLEScani+0x204>)
   b5d80:	a80a      	add	r0, sp, #40	; 0x28
   b5d82:	f004 fb46 	bl	ba412 <_ZNK8particle7BleUuideqERKS0_>
   b5d86:	4605      	mov	r5, r0
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	d04f      	beq.n	b5e2c <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5d8c:	2208      	movs	r2, #8
   b5d8e:	a908      	add	r1, sp, #32
   b5d90:	4638      	mov	r0, r7
   b5d92:	f004 fc9b 	bl	ba6cc <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5d96:	1cb2      	adds	r2, r6, #2
   b5d98:	d153      	bne.n	b5e42 <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b5d9a:	f007 fde5 	bl	bd968 <_Z16_fetch_usbserialv>
   b5d9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   b5da2:	9305      	str	r3, [sp, #20]
   b5da4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b5da8:	9304      	str	r3, [sp, #16]
   b5daa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b5dae:	9303      	str	r3, [sp, #12]
   b5db0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5db4:	9302      	str	r3, [sp, #8]
   b5db6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
      : _M_current(__i) { }
   b5dba:	4f61      	ldr	r7, [pc, #388]	; (b5f40 <_Z7BLEScani+0x208>)
   b5dbc:	9301      	str	r3, [sp, #4]
   b5dbe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   b5dc2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5dc6:	495f      	ldr	r1, [pc, #380]	; (b5f44 <_Z7BLEScani+0x20c>)
   b5dc8:	9300      	str	r3, [sp, #0]
   b5dca:	f8cd a018 	str.w	sl, [sp, #24]
   b5dce:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   b5dd2:	f7fe fabf 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5dd6:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b5dd8:	f89d 1020 	ldrb.w	r1, [sp, #32]
   b5ddc:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b5dde:	4293      	cmp	r3, r2
   b5de0:	d005      	beq.n	b5dee <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b5de2:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b5de6:	4288      	cmp	r0, r1
   b5de8:	bf08      	it	eq
   b5dea:	2500      	moveq	r5, #0
	return *this;
   b5dec:	e7f7      	b.n	b5dde <_Z7BLEScani+0xa6>
                    if(newBot){
   b5dee:	b1ed      	cbz	r5, b5e2c <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b5df0:	2224      	movs	r2, #36	; 0x24
   b5df2:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b5df6:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
                        NewBot.rssi = scanResults[ii].rssi();
   b5dfa:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b5dfe:	9218      	str	r2, [sp, #96]	; 0x60
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5e00:	68ba      	ldr	r2, [r7, #8]
   b5e02:	4293      	cmp	r3, r2
   b5e04:	d017      	beq.n	b5e36 <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5e06:	b11b      	cbz	r3, b5e10 <_Z7BLEScani+0xd8>
   b5e08:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
   b5e0c:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5e10:	687b      	ldr	r3, [r7, #4]
   b5e12:	3308      	adds	r3, #8
   b5e14:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b5e16:	f007 fda7 	bl	bd968 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
   b5e1e:	1a9b      	subs	r3, r3, r2
   b5e20:	4949      	ldr	r1, [pc, #292]	; (b5f48 <_Z7BLEScani+0x210>)
   b5e22:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5e26:	10db      	asrs	r3, r3, #3
   b5e28:	f7fe fa94 	bl	b4354 <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5e2c:	3401      	adds	r4, #1
   b5e2e:	b2e4      	uxtb	r4, r4
   b5e30:	4544      	cmp	r4, r8
   b5e32:	d392      	bcc.n	b5d5a <_Z7BLEScani+0x22>
   b5e34:	e07c      	b.n	b5f30 <_Z7BLEScani+0x1f8>
	  _M_realloc_insert(end(), __x);
   b5e36:	4842      	ldr	r0, [pc, #264]	; (b5f40 <_Z7BLEScani+0x208>)
   b5e38:	aa17      	add	r2, sp, #92	; 0x5c
   b5e3a:	4619      	mov	r1, r3
   b5e3c:	f7ff ff28 	bl	b5c90 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5e40:	e7e9      	b.n	b5e16 <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5e42:	1c73      	adds	r3, r6, #1
   b5e44:	d003      	beq.n	b5e4e <_Z7BLEScani+0x116>
   b5e46:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b5e4a:	42b3      	cmp	r3, r6
   b5e4c:	d1ee      	bne.n	b5e2c <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b5e4e:	f004 fe21 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5e52:	4d3e      	ldr	r5, [pc, #248]	; (b5f4c <_Z7BLEScani+0x214>)
   b5e54:	4601      	mov	r1, r0
   b5e56:	2301      	movs	r3, #1
   b5e58:	eb0b 0209 	add.w	r2, fp, r9
   b5e5c:	a817      	add	r0, sp, #92	; 0x5c
   b5e5e:	f006 fa11 	bl	bc284 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5e62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5e64:	9c18      	ldr	r4, [sp, #96]	; 0x60
   b5e66:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b5e68:	686b      	ldr	r3, [r5, #4]
   b5e6a:	429c      	cmp	r4, r3
   b5e6c:	d008      	beq.n	b5e80 <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b5e6e:	b114      	cbz	r4, b5e76 <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b5e70:	6863      	ldr	r3, [r4, #4]
   b5e72:	3301      	adds	r3, #1
   b5e74:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b5e76:	6868      	ldr	r0, [r5, #4]
   b5e78:	b108      	cbz	r0, b5e7e <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b5e7a:	f7fe fbbb 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5e7e:	606c      	str	r4, [r5, #4]
   b5e80:	a817      	add	r0, sp, #92	; 0x5c
   b5e82:	f004 ff76 	bl	bad72 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5e86:	4831      	ldr	r0, [pc, #196]	; (b5f4c <_Z7BLEScani+0x214>)
   b5e88:	f004 fd76 	bl	ba978 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5e8c:	4604      	mov	r4, r0
   b5e8e:	2800      	cmp	r0, #0
   b5e90:	d04e      	beq.n	b5f30 <_Z7BLEScani+0x1f8>
                        meshPair = false;
   b5e92:	4b2f      	ldr	r3, [pc, #188]	; (b5f50 <_Z7BLEScani+0x218>)
      : _M_current(__i) { }
   b5e94:	4d2f      	ldr	r5, [pc, #188]	; (b5f54 <_Z7BLEScani+0x21c>)
   b5e96:	2200      	movs	r2, #0
   b5e98:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b5e9a:	4b2f      	ldr	r3, [pc, #188]	; (b5f58 <_Z7BLEScani+0x220>)
   b5e9c:	2601      	movs	r6, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5e9e:	221f      	movs	r2, #31
   b5ea0:	a90f      	add	r1, sp, #60	; 0x3c
   b5ea2:	4638      	mov	r0, r7
                        startConnect = true;
   b5ea4:	701e      	strb	r6, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5ea6:	f004 fc11 	bl	ba6cc <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5eaa:	4a2c      	ldr	r2, [pc, #176]	; (b5f5c <_Z7BLEScani+0x224>)
   b5eac:	492c      	ldr	r1, [pc, #176]	; (b5f60 <_Z7BLEScani+0x228>)
   b5eae:	4827      	ldr	r0, [pc, #156]	; (b5f4c <_Z7BLEScani+0x214>)
   b5eb0:	f005 fe7c 	bl	bbbac <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5eb4:	4a2b      	ldr	r2, [pc, #172]	; (b5f64 <_Z7BLEScani+0x22c>)
   b5eb6:	492c      	ldr	r1, [pc, #176]	; (b5f68 <_Z7BLEScani+0x230>)
   b5eb8:	4824      	ldr	r0, [pc, #144]	; (b5f4c <_Z7BLEScani+0x214>)
   b5eba:	f005 fe77 	bl	bbbac <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5ebe:	4a2b      	ldr	r2, [pc, #172]	; (b5f6c <_Z7BLEScani+0x234>)
   b5ec0:	492b      	ldr	r1, [pc, #172]	; (b5f70 <_Z7BLEScani+0x238>)
   b5ec2:	4822      	ldr	r0, [pc, #136]	; (b5f4c <_Z7BLEScani+0x214>)
   b5ec4:	f005 fe72 	bl	bbbac <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5ec8:	f007 fd4e 	bl	bd968 <_Z16_fetch_usbserialv>
   b5ecc:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b5ed0:	4928      	ldr	r1, [pc, #160]	; (b5f74 <_Z7BLEScani+0x23c>)
   b5ed2:	f7fe fa3f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b5ed6:	a817      	add	r0, sp, #92	; 0x5c
   b5ed8:	f7fe fce0 	bl	b489c <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b5edc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
                        PairBots.push_back(newWaterbot);
   b5ee0:	4825      	ldr	r0, [pc, #148]	; (b5f78 <_Z7BLEScani+0x240>)
                        newWaterbot.botNum = bufName[0];
   b5ee2:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                        PairBots.push_back(newWaterbot);
   b5ee6:	a917      	add	r1, sp, #92	; 0x5c
                        newWaterbot.BLEAvail = true;
   b5ee8:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60
                        PairBots.push_back(newWaterbot);
   b5eec:	f7ff fac6 	bl	b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b5ef0:	6869      	ldr	r1, [r5, #4]
                            if(bufName[0] == w.botNum){
   b5ef2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b5ef6:	682b      	ldr	r3, [r5, #0]
                                BLEBot = &w;
   b5ef8:	4820      	ldr	r0, [pc, #128]	; (b5f7c <_Z7BLEScani+0x244>)
                        for(WaterBot &w: WaterBots){
   b5efa:	428b      	cmp	r3, r1
   b5efc:	d007      	beq.n	b5f0e <_Z7BLEScani+0x1d6>
                            if(bufName[0] == w.botNum){
   b5efe:	789f      	ldrb	r7, [r3, #2]
   b5f00:	4297      	cmp	r7, r2
                                w.BLEAvail = true;
   b5f02:	bf02      	ittt	eq
   b5f04:	711e      	strbeq	r6, [r3, #4]
                                newBot = false;
   b5f06:	2400      	moveq	r4, #0
                                BLEBot = &w;
   b5f08:	6003      	streq	r3, [r0, #0]
   b5f0a:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b5f0c:	e7f5      	b.n	b5efa <_Z7BLEScani+0x1c2>
                        if(newBot){
   b5f0e:	b17c      	cbz	r4, b5f30 <_Z7BLEScani+0x1f8>
                            Serial.println("Found a new water bot ID");
   b5f10:	f007 fd2a 	bl	bd968 <_Z16_fetch_usbserialv>
   b5f14:	491a      	ldr	r1, [pc, #104]	; (b5f80 <_Z7BLEScani+0x248>)
   b5f16:	f007 f91a 	bl	bd14e <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b5f1a:	480e      	ldr	r0, [pc, #56]	; (b5f54 <_Z7BLEScani+0x21c>)
   b5f1c:	a917      	add	r1, sp, #92	; 0x5c
   b5f1e:	f7ff faad 	bl	b547c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5f22:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b5f24:	4a15      	ldr	r2, [pc, #84]	; (b5f7c <_Z7BLEScani+0x244>)
   b5f26:	3b3c      	subs	r3, #60	; 0x3c
   b5f28:	6013      	str	r3, [r2, #0]
                            redrawMenu = true;
   b5f2a:	4b16      	ldr	r3, [pc, #88]	; (b5f84 <_Z7BLEScani+0x24c>)
   b5f2c:	2201      	movs	r2, #1
   b5f2e:	701a      	strb	r2, [r3, #0]
}
   b5f30:	b027      	add	sp, #156	; 0x9c
   b5f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f36:	bf00      	nop
   b5f38:	2003dee0 	.word	0x2003dee0
   b5f3c:	2003dccc 	.word	0x2003dccc
   b5f40:	2003dc78 	.word	0x2003dc78
   b5f44:	000c109e 	.word	0x000c109e
   b5f48:	000c10d1 	.word	0x000c10d1
   b5f4c:	2003deb8 	.word	0x2003deb8
   b5f50:	2003de0a 	.word	0x2003de0a
   b5f54:	2003dcc0 	.word	0x2003dcc0
   b5f58:	2003e634 	.word	0x2003e634
   b5f5c:	2003dcf4 	.word	0x2003dcf4
   b5f60:	2003ded0 	.word	0x2003ded0
   b5f64:	2003dce0 	.word	0x2003dce0
   b5f68:	2003dec8 	.word	0x2003dec8
   b5f6c:	2003dd0c 	.word	0x2003dd0c
   b5f70:	2003dec0 	.word	0x2003dec0
   b5f74:	000c10e3 	.word	0x000c10e3
   b5f78:	2003dc98 	.word	0x2003dc98
   b5f7c:	2003dc74 	.word	0x2003dc74
   b5f80:	000c0fda 	.word	0x000c0fda
   b5f84:	2003da88 	.word	0x2003da88

000b5f88 <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b5f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b5f8a:	494c      	ldr	r1, [pc, #304]	; (b60bc <_Z13DataOffloaderh+0x134>)
void DataOffloader(uint8_t bot_id){
   b5f8c:	b087      	sub	sp, #28
   b5f8e:	4606      	mov	r6, r0
    if (!logDir.open("/")) {
   b5f90:	2200      	movs	r2, #0
   b5f92:	484b      	ldr	r0, [pc, #300]	; (b60c0 <_Z13DataOffloaderh+0x138>)
   b5f94:	f7fe fb72 	bl	b467c <_ZN7FatFile4openEPKci>
   b5f98:	b950      	cbnz	r0, b5fb0 <_Z13DataOffloaderh+0x28>
        offloadingDone = true;
   b5f9a:	4b4a      	ldr	r3, [pc, #296]	; (b60c4 <_Z13DataOffloaderh+0x13c>)
   b5f9c:	2201      	movs	r2, #1
   b5f9e:	701a      	strb	r2, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5fa0:	f007 fce2 	bl	bd968 <_Z16_fetch_usbserialv>
   b5fa4:	4948      	ldr	r1, [pc, #288]	; (b60c8 <_Z13DataOffloaderh+0x140>)
}
   b5fa6:	b007      	add	sp, #28
   b5fa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5fac:	f007 b8cf 	b.w	bd14e <_ZN5Print7printlnEPKc>
   b5fb0:	f003 fd72 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5fb4:	4c45      	ldr	r4, [pc, #276]	; (b60cc <_Z13DataOffloaderh+0x144>)
   b5fb6:	4605      	mov	r5, r0
   b5fb8:	f007 fcd6 	bl	bd968 <_Z16_fetch_usbserialv>
   b5fbc:	6823      	ldr	r3, [r4, #0]
   b5fbe:	4944      	ldr	r1, [pc, #272]	; (b60d0 <_Z13DataOffloaderh+0x148>)
   b5fc0:	789a      	ldrb	r2, [r3, #2]
   b5fc2:	f7fe f9c7 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    if(BLEBot->botNum != OffloadingBot){
   b5fc6:	6823      	ldr	r3, [r4, #0]
   b5fc8:	789b      	ldrb	r3, [r3, #2]
   b5fca:	42b3      	cmp	r3, r6
   b5fcc:	d04e      	beq.n	b606c <_Z13DataOffloaderh+0xe4>
        Serial.printlnf("Currently connected to Bot %s, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5fce:	f007 fccb 	bl	bd968 <_Z16_fetch_usbserialv>
   b5fd2:	6822      	ldr	r2, [r4, #0]
   b5fd4:	493f      	ldr	r1, [pc, #252]	; (b60d4 <_Z13DataOffloaderh+0x14c>)
   b5fd6:	7892      	ldrb	r2, [r2, #2]
   b5fd8:	4633      	mov	r3, r6
   b5fda:	f7fe f9bb 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        BLE.disconnect();
   b5fde:	f004 fd59 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fe2:	f005 fb75 	bl	bb6d0 <_ZNK8particle14BleLocalDevice10disconnectEv>
        while(!BLE.connected() && startScanTime - millis() < 15000){
   b5fe6:	f643 2797 	movw	r7, #14999	; 0x3a97
   b5fea:	f004 fd53 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fee:	f004 fdfe 	bl	babee <_ZNK8particle14BleLocalDevice9connectedEv>
   b5ff2:	b958      	cbnz	r0, b600c <_Z13DataOffloaderh+0x84>
   b5ff4:	f003 fd50 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
   b5ff8:	1a28      	subs	r0, r5, r0
   b5ffa:	42b8      	cmp	r0, r7
   b5ffc:	d806      	bhi.n	b600c <_Z13DataOffloaderh+0x84>
            BLEScan(OffloadingBot);
   b5ffe:	4630      	mov	r0, r6
   b6000:	f7ff fe9a 	bl	b5d38 <_Z7BLEScani>
            delay(50);
   b6004:	2032      	movs	r0, #50	; 0x32
   b6006:	f004 f82b 	bl	ba060 <delay>
        while(!BLE.connected() && startScanTime - millis() < 15000){
   b600a:	e7ee      	b.n	b5fea <_Z13DataOffloaderh+0x62>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b600c:	4a32      	ldr	r2, [pc, #200]	; (b60d8 <_Z13DataOffloaderh+0x150>)
   b600e:	4633      	mov	r3, r6
   b6010:	210a      	movs	r1, #10
   b6012:	a803      	add	r0, sp, #12
   b6014:	f003 ffe4 	bl	b9fe0 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b6018:	2300      	movs	r3, #0
   b601a:	9300      	str	r3, [sp, #0]
   b601c:	2201      	movs	r2, #1
   b601e:	4619      	mov	r1, r3
   b6020:	a803      	add	r0, sp, #12
   b6022:	f7fe fdfb 	bl	b4c1c <_Z8sendDataPKchbbb>
        if(BLE.connected()) Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b6026:	f004 fd35 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b602a:	f004 fde0 	bl	babee <_ZNK8particle14BleLocalDevice9connectedEv>
   b602e:	b130      	cbz	r0, b603e <_Z13DataOffloaderh+0xb6>
   b6030:	f007 fc9a 	bl	bd968 <_Z16_fetch_usbserialv>
   b6034:	6823      	ldr	r3, [r4, #0]
   b6036:	4929      	ldr	r1, [pc, #164]	; (b60dc <_Z13DataOffloaderh+0x154>)
   b6038:	789a      	ldrb	r2, [r3, #2]
   b603a:	f7fe f98b 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b603e:	f007 fc93 	bl	bd968 <_Z16_fetch_usbserialv>
   b6042:	6823      	ldr	r3, [r4, #0]
   b6044:	4926      	ldr	r1, [pc, #152]	; (b60e0 <_Z13DataOffloaderh+0x158>)
   b6046:	789a      	ldrb	r2, [r3, #2]
   b6048:	f7fe f984 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b604c:	f003 fd24 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if(startScanTime - millis() > 15000){
   b6050:	f643 2398 	movw	r3, #15000	; 0x3a98
   b6054:	1a28      	subs	r0, r5, r0
   b6056:	4298      	cmp	r0, r3
   b6058:	d915      	bls.n	b6086 <_Z13DataOffloaderh+0xfe>
   b605a:	4822      	ldr	r0, [pc, #136]	; (b60e4 <_Z13DataOffloaderh+0x15c>)
        if(logDir.isOpen()) logDir.close();
   b605c:	7c03      	ldrb	r3, [r0, #16]
   b605e:	b35b      	cbz	r3, b60b8 <_Z13DataOffloaderh+0x130>
   b6060:	3010      	adds	r0, #16
}
   b6062:	b007      	add	sp, #28
   b6064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        if(logDir.isOpen()) logDir.close();
   b6068:	f001 ba32 	b.w	b74d0 <_ZN7FatFile5closeEv>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b606c:	4a1a      	ldr	r2, [pc, #104]	; (b60d8 <_Z13DataOffloaderh+0x150>)
   b606e:	210a      	movs	r1, #10
   b6070:	a803      	add	r0, sp, #12
   b6072:	f003 ffb5 	bl	b9fe0 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b6076:	2300      	movs	r3, #0
   b6078:	9300      	str	r3, [sp, #0]
   b607a:	2201      	movs	r2, #1
   b607c:	4619      	mov	r1, r3
   b607e:	a803      	add	r0, sp, #12
   b6080:	f7fe fdcc 	bl	b4c1c <_Z8sendDataPKchbbb>
   b6084:	e7db      	b.n	b603e <_Z13DataOffloaderh+0xb6>
    offloadingDone = false;
   b6086:	4d0f      	ldr	r5, [pc, #60]	; (b60c4 <_Z13DataOffloaderh+0x13c>)
   b6088:	2300      	movs	r3, #0
   b608a:	702b      	strb	r3, [r5, #0]
    while(!offloadingDone) delay(100);
   b608c:	2064      	movs	r0, #100	; 0x64
   b608e:	f003 ffe7 	bl	ba060 <delay>
   b6092:	782b      	ldrb	r3, [r5, #0]
   b6094:	2b00      	cmp	r3, #0
   b6096:	d0f9      	beq.n	b608c <_Z13DataOffloaderh+0x104>
    Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b6098:	f007 fc66 	bl	bd968 <_Z16_fetch_usbserialv>
   b609c:	6823      	ldr	r3, [r4, #0]
   b609e:	4912      	ldr	r1, [pc, #72]	; (b60e8 <_Z13DataOffloaderh+0x160>)
   b60a0:	789a      	ldrb	r2, [r3, #2]
   b60a2:	f7fe f957 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b60a6:	480f      	ldr	r0, [pc, #60]	; (b60e4 <_Z13DataOffloaderh+0x15c>)
    if(logDir.isOpen()) logDir.close();
   b60a8:	7c03      	ldrb	r3, [r0, #16]
   b60aa:	b113      	cbz	r3, b60b2 <_Z13DataOffloaderh+0x12a>
   b60ac:	3010      	adds	r0, #16
   b60ae:	f001 fa0f 	bl	b74d0 <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b60b2:	4b0e      	ldr	r3, [pc, #56]	; (b60ec <_Z13DataOffloaderh+0x164>)
   b60b4:	2200      	movs	r2, #0
   b60b6:	701a      	strb	r2, [r3, #0]
}
   b60b8:	b007      	add	sp, #28
   b60ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b60bc:	000c10f7 	.word	0x000c10f7
   b60c0:	2003ddb0 	.word	0x2003ddb0
   b60c4:	2003de5e 	.word	0x2003de5e
   b60c8:	000c10f9 	.word	0x000c10f9
   b60cc:	2003dc74 	.word	0x2003dc74
   b60d0:	000c113a 	.word	0x000c113a
   b60d4:	000c1167 	.word	0x000c1167
   b60d8:	000c11a0 	.word	0x000c11a0
   b60dc:	000c11a9 	.word	0x000c11a9
   b60e0:	000c11ca 	.word	0x000c11ca
   b60e4:	2003dda0 	.word	0x2003dda0
   b60e8:	000c11ed 	.word	0x000c11ed
   b60ec:	2003de5f 	.word	0x2003de5f

000b60f0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b60f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60f4:	e9d0 9a00 	ldrd	r9, sl, [r0]
   b60f8:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
   b60fa:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   b60fe:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6100:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
   b6104:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   b6108:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b610a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   b610e:	d102      	bne.n	b6116 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b6110:	4826      	ldr	r0, [pc, #152]	; (b61ac <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
   b6112:	f007 fded 	bl	bdcf0 <_ZSt20__throw_length_errorPKc>
   b6116:	2c01      	cmp	r4, #1
   b6118:	4622      	mov	r2, r4
   b611a:	bf38      	it	cc
   b611c:	2201      	movcc	r2, #1
   b611e:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b6120:	ebab 0609 	sub.w	r6, fp, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6124:	d21a      	bcs.n	b615c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6126:	b1dc      	cbz	r4, b6160 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
   b6128:	429c      	cmp	r4, r3
   b612a:	bf28      	it	cs
   b612c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b612e:	0120      	lsls	r0, r4, #4
   b6130:	9101      	str	r1, [sp, #4]
   b6132:	f7fd ffb0 	bl	b4096 <_Znwj>
   b6136:	9901      	ldr	r1, [sp, #4]
   b6138:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b613a:	19a8      	adds	r0, r5, r6
   b613c:	d001      	beq.n	b6142 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b613e:	f007 f9df 	bl	bd500 <_ZN6StringC1EOS_>
   b6142:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6144:	464e      	mov	r6, r9
	      for (; __first != __last; ++__first, (void)++__cur)
   b6146:	45b3      	cmp	fp, r6
   b6148:	f100 0710 	add.w	r7, r0, #16
   b614c:	d00a      	beq.n	b6164 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b614e:	b110      	cbz	r0, b6156 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
   b6150:	4631      	mov	r1, r6
   b6152:	f007 f9ef 	bl	bd534 <_ZN6StringC1ERKS_>
   b6156:	3610      	adds	r6, #16
   b6158:	4638      	mov	r0, r7
   b615a:	e7f4      	b.n	b6146 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b615c:	461c      	mov	r4, r3
   b615e:	e7e6      	b.n	b612e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6160:	4625      	mov	r5, r4
   b6162:	e7ea      	b.n	b613a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b6164:	4556      	cmp	r6, sl
   b6166:	d006      	beq.n	b6176 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
   b6168:	4631      	mov	r1, r6
   b616a:	4638      	mov	r0, r7
   b616c:	f007 f9e2 	bl	bd534 <_ZN6StringC1ERKS_>
   b6170:	3610      	adds	r6, #16
   b6172:	3710      	adds	r7, #16
   b6174:	e7f6      	b.n	b6164 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6176:	464e      	mov	r6, r9
	  for (; __first != __last; ++__first)
   b6178:	4556      	cmp	r6, sl
   b617a:	d004      	beq.n	b6186 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
   b617c:	4630      	mov	r0, r6
   b617e:	f007 f943 	bl	bd408 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b6182:	3610      	adds	r6, #16
   b6184:	e7f8      	b.n	b6178 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
   b6186:	f1b9 0f00 	cmp.w	r9, #0
   b618a:	d006      	beq.n	b619a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
   b618c:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
   b6190:	4648      	mov	r0, r9
   b6192:	eba1 0109 	sub.w	r1, r1, r9
   b6196:	f7fd ff82 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b619a:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b619e:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b61a2:	f8c8 4008 	str.w	r4, [r8, #8]
    }
   b61a6:	b003      	add	sp, #12
   b61a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61ac:	000c0f2b 	.word	0x000c0f2b

000b61b0 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   b61b0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b61b2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b61b6:	42ab      	cmp	r3, r5
      vector<_Tp, _Alloc>::
   b61b8:	4604      	mov	r4, r0
   b61ba:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b61bc:	d007      	beq.n	b61ce <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b61be:	b113      	cbz	r3, b61c6 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x16>
   b61c0:	4618      	mov	r0, r3
   b61c2:	f007 f99d 	bl	bd500 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   b61c6:	6863      	ldr	r3, [r4, #4]
   b61c8:	3310      	adds	r3, #16
   b61ca:	6063      	str	r3, [r4, #4]
      }
   b61cc:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b61ce:	4619      	mov	r1, r3
   b61d0:	f7ff ff8e 	bl	b60f0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
   b61d4:	e7fa      	b.n	b61cc <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1c>
	...

000b61d8 <_ZN8MenuItemC1ERKS_>:
class MenuItem{
   b61d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61dc:	e9d1 2700 	ldrd	r2, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b61e0:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b61e2:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b61e4:	e9c0 3300 	strd	r3, r3, [r0]
   b61e8:	4604      	mov	r4, r0
   b61ea:	460d      	mov	r5, r1
   b61ec:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b61ee:	d018      	beq.n	b6222 <_ZN8MenuItemC1ERKS_+0x4a>
	if (__n > this->_M_max_size())
   b61f0:	4b18      	ldr	r3, [pc, #96]	; (b6254 <_ZN8MenuItemC1ERKS_+0x7c>)
   b61f2:	429f      	cmp	r7, r3
   b61f4:	d901      	bls.n	b61fa <_ZN8MenuItemC1ERKS_+0x22>
	  std::__throw_bad_alloc();
   b61f6:	f007 fd75 	bl	bdce4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b61fa:	4638      	mov	r0, r7
   b61fc:	f7fd ff4b 	bl	b4096 <_Znwj>
   b6200:	4606      	mov	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6202:	e9c4 6600 	strd	r6, r6, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6206:	4437      	add	r7, r6
   b6208:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b620a:	e9d5 7800 	ldrd	r7, r8, [r5]
   b620e:	45b8      	cmp	r8, r7
   b6210:	d009      	beq.n	b6226 <_ZN8MenuItemC1ERKS_+0x4e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6212:	b11e      	cbz	r6, b621c <_ZN8MenuItemC1ERKS_+0x44>
   b6214:	4639      	mov	r1, r7
   b6216:	4630      	mov	r0, r6
   b6218:	f007 f98c 	bl	bd534 <_ZN6StringC1ERKS_>
   b621c:	3610      	adds	r6, #16
   b621e:	3710      	adds	r7, #16
   b6220:	e7f5      	b.n	b620e <_ZN8MenuItemC1ERKS_+0x36>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6222:	463e      	mov	r6, r7
   b6224:	e7ed      	b.n	b6202 <_ZN8MenuItemC1ERKS_+0x2a>
	this->_M_impl._M_finish =
   b6226:	6066      	str	r6, [r4, #4]
   b6228:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b622c:	e9c4 2303 	strd	r2, r3, [r4, #12]
   b6230:	696b      	ldr	r3, [r5, #20]
   b6232:	6163      	str	r3, [r4, #20]
   b6234:	8b2b      	ldrh	r3, [r5, #24]
   b6236:	8323      	strh	r3, [r4, #24]
   b6238:	f8d5 301a 	ldr.w	r3, [r5, #26]
   b623c:	f8c4 301a 	str.w	r3, [r4, #26]
   b6240:	f8d5 301e 	ldr.w	r3, [r5, #30]
   b6244:	f8c4 301e 	str.w	r3, [r4, #30]
   b6248:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   b624a:	8463      	strh	r3, [r4, #34]	; 0x22
   b624c:	4620      	mov	r0, r4
   b624e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6252:	bf00      	nop
   b6254:	7ffffff0 	.word	0x7ffffff0

000b6258 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b6258:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b625c:	e9d0 8700 	ldrd	r8, r7, [r0]
   b6260:	4b23      	ldr	r3, [pc, #140]	; (b62f0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>)
   b6262:	eba7 0408 	sub.w	r4, r7, r8
   b6266:	10a4      	asrs	r4, r4, #2
   b6268:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b626a:	4b22      	ldr	r3, [pc, #136]	; (b62f4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   b626c:	429c      	cmp	r4, r3
   b626e:	460e      	mov	r6, r1
   b6270:	4605      	mov	r5, r0
   b6272:	4611      	mov	r1, r2
   b6274:	d102      	bne.n	b627c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b6276:	4820      	ldr	r0, [pc, #128]	; (b62f8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
   b6278:	f007 fd3a 	bl	bdcf0 <_ZSt20__throw_length_errorPKc>
   b627c:	2c01      	cmp	r4, #1
   b627e:	4622      	mov	r2, r4
   b6280:	bf38      	it	cc
   b6282:	2201      	movcc	r2, #1
   b6284:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b6286:	eba6 0a08 	sub.w	sl, r6, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b628a:	d22d      	bcs.n	b62e8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b628c:	b374      	cbz	r4, b62ec <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b628e:	429c      	cmp	r4, r3
   b6290:	bf28      	it	cs
   b6292:	461c      	movcs	r4, r3
   b6294:	2024      	movs	r0, #36	; 0x24
   b6296:	4360      	muls	r0, r4
   b6298:	9101      	str	r1, [sp, #4]
   b629a:	f7fd fefc 	bl	b4096 <_Znwj>
   b629e:	9901      	ldr	r1, [sp, #4]
   b62a0:	4681      	mov	r9, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b62a2:	eb19 000a 	adds.w	r0, r9, sl
   b62a6:	d001      	beq.n	b62ac <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b62a8:	f7ff ff96 	bl	b61d8 <_ZN8MenuItemC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b62ac:	4631      	mov	r1, r6
   b62ae:	464a      	mov	r2, r9
   b62b0:	4640      	mov	r0, r8
   b62b2:	f7fe ff98 	bl	b51e6 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b62b6:	4639      	mov	r1, r7
   b62b8:	f100 0224 	add.w	r2, r0, #36	; 0x24
   b62bc:	4630      	mov	r0, r6
   b62be:	f7fe ff92 	bl	b51e6 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b62c2:	4606      	mov	r6, r0
	if (__p)
   b62c4:	f1b8 0f00 	cmp.w	r8, #0
   b62c8:	d005      	beq.n	b62d6 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
   b62ca:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
   b62cc:	4640      	mov	r0, r8
   b62ce:	eba1 0108 	sub.w	r1, r1, r8
   b62d2:	f7fd fee4 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b62d6:	2024      	movs	r0, #36	; 0x24
   b62d8:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   b62dc:	e9c5 9600 	strd	r9, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b62e0:	60ac      	str	r4, [r5, #8]
    }
   b62e2:	b002      	add	sp, #8
   b62e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b62e8:	461c      	mov	r4, r3
   b62ea:	e7d3      	b.n	b6294 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b62ec:	46a1      	mov	r9, r4
   b62ee:	e7d8      	b.n	b62a2 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b62f0:	38e38e39 	.word	0x38e38e39
   b62f4:	038e38e3 	.word	0x038e38e3
   b62f8:	000c0f2b 	.word	0x000c0f2b

000b62fc <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b62fc:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b62fe:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b6302:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b6304:	4604      	mov	r4, r0
   b6306:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6308:	d007      	beq.n	b631a <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b630a:	b113      	cbz	r3, b6312 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x16>
   b630c:	4618      	mov	r0, r3
   b630e:	f7ff ff63 	bl	b61d8 <_ZN8MenuItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   b6312:	6863      	ldr	r3, [r4, #4]
   b6314:	3324      	adds	r3, #36	; 0x24
   b6316:	6063      	str	r3, [r4, #4]
      }
   b6318:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b631a:	4619      	mov	r1, r3
   b631c:	f7ff ff9c 	bl	b6258 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b6320:	e7fa      	b.n	b6318 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1c>
	...

000b6324 <_Z10createMenuv>:
void createMenu(){
   b6324:	b570      	push	{r4, r5, r6, lr}
   b6326:	b0ae      	sub	sp, #184	; 0xb8
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6328:	2400      	movs	r4, #0
            strcpy(itemName,itemString);
   b632a:	494c      	ldr	r1, [pc, #304]	; (b645c <_Z10createMenuv+0x138>)
   b632c:	9403      	str	r4, [sp, #12]
   b632e:	f10d 001e 	add.w	r0, sp, #30
            stepSize = inStep;
   b6332:	f240 1601 	movw	r6, #257	; 0x101
            minVal = minV;
   b6336:	f44f 7580 	mov.w	r5, #256	; 0x100
   b633a:	e9cd 4401 	strd	r4, r4, [sp, #4]
            strcpy(itemName,itemString);
   b633e:	f008 fc54 	bl	bebea <strcpy>
            stepSize = inStep;
   b6342:	230d      	movs	r3, #13
            strcpy(itemName,itemString);
   b6344:	4946      	ldr	r1, [pc, #280]	; (b6460 <_Z10createMenuv+0x13c>)
            minVal = minV;
   b6346:	f8ad 501c 	strh.w	r5, [sp, #28]
            strcpy(itemName,itemString);
   b634a:	f10d 0042 	add.w	r0, sp, #66	; 0x42
            stepSize = inStep;
   b634e:	e9cd 3605 	strd	r3, r6, [sp, #20]
   b6352:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   b6356:	940c      	str	r4, [sp, #48]	; 0x30
            strcpy(itemName,itemString);
   b6358:	f008 fc47 	bl	bebea <strcpy>
            stepSize = inStep;
   b635c:	4b41      	ldr	r3, [pc, #260]	; (b6464 <_Z10createMenuv+0x140>)
   b635e:	930f      	str	r3, [sp, #60]	; 0x3c
            minVal = minV;
   b6360:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
   b6364:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            strcpy(itemName,itemString);
   b6368:	493f      	ldr	r1, [pc, #252]	; (b6468 <_Z10createMenuv+0x144>)
   b636a:	9415      	str	r4, [sp, #84]	; 0x54
    battStat.MethodPointer = &WaterBot::battPercent;
   b636c:	2303      	movs	r3, #3
            strcpy(itemName,itemString);
   b636e:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    battStat.MethodPointer = &WaterBot::battPercent;
   b6372:	930d      	str	r3, [sp, #52]	; 0x34
   b6374:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
            strcpy(itemName,itemString);
   b6378:	f008 fc37 	bl	bebea <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b637c:	230e      	movs	r3, #14
            strcpy(itemName,itemString);
   b637e:	493b      	ldr	r1, [pc, #236]	; (b646c <_Z10createMenuv+0x148>)
            minVal = minV;
   b6380:	f8ad 5064 	strh.w	r5, [sp, #100]	; 0x64
            strcpy(itemName,itemString);
   b6384:	f10d 008a 	add.w	r0, sp, #138	; 0x8a
            stepSize = inStep;
   b6388:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
   b638c:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
   b6390:	941e      	str	r4, [sp, #120]	; 0x78
            strcpy(itemName,itemString);
   b6392:	f008 fc2a 	bl	bebea <strcpy>
            stepSize = inStep;
   b6396:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b639a:	9321      	str	r3, [sp, #132]	; 0x84
    sentryToggle.labels.push_back("Rem");
   b639c:	4934      	ldr	r1, [pc, #208]	; (b6470 <_Z10createMenuv+0x14c>)
            minVal = minV;
   b639e:	f44f 7300 	mov.w	r3, #512	; 0x200
    sentryToggle.labels.push_back("Rem");
   b63a2:	a825      	add	r0, sp, #148	; 0x94
            minVal = minV;
   b63a4:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sentryToggle.labels.push_back("Rem");
   b63a8:	f007 f879 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
      { emplace_back(std::move(__x)); }
   b63ac:	a925      	add	r1, sp, #148	; 0x94
   b63ae:	a81c      	add	r0, sp, #112	; 0x70
   b63b0:	f7ff fefe 	bl	b61b0 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b63b4:	a825      	add	r0, sp, #148	; 0x94
   b63b6:	f007 f827 	bl	bd408 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Sen");
   b63ba:	492e      	ldr	r1, [pc, #184]	; (b6474 <_Z10createMenuv+0x150>)
   b63bc:	a825      	add	r0, sp, #148	; 0x94
   b63be:	f007 f86e 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
   b63c2:	a925      	add	r1, sp, #148	; 0x94
   b63c4:	a81c      	add	r0, sp, #112	; 0x70
   b63c6:	f7ff fef3 	bl	b61b0 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b63ca:	a825      	add	r0, sp, #148	; 0x94
   b63cc:	f007 f81c 	bl	bd408 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Aut");
   b63d0:	4929      	ldr	r1, [pc, #164]	; (b6478 <_Z10createMenuv+0x154>)
   b63d2:	a825      	add	r0, sp, #148	; 0x94
   b63d4:	f007 f863 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
   b63d8:	a925      	add	r1, sp, #148	; 0x94
   b63da:	a81c      	add	r0, sp, #112	; 0x70
   b63dc:	f7ff fee8 	bl	b61b0 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b63e0:	a825      	add	r0, sp, #148	; 0x94
   b63e2:	f007 f811 	bl	bd408 <_ZN6StringD1Ev>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b63e6:	2309      	movs	r3, #9
            strcpy(itemName,itemString);
   b63e8:	4924      	ldr	r1, [pc, #144]	; (b647c <_Z10createMenuv+0x158>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b63ea:	931f      	str	r3, [sp, #124]	; 0x7c
            strcpy(itemName,itemString);
   b63ec:	f10d 00ae 	add.w	r0, sp, #174	; 0xae
	: _M_start(), _M_finish(), _M_end_of_storage()
   b63f0:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
   b63f4:	9427      	str	r4, [sp, #156]	; 0x9c
   b63f6:	f008 fbf8 	bl	bebea <strcpy>
    signalToggle.MethodPointerBool = &WaterBot::signal;
   b63fa:	230a      	movs	r3, #10
    MenuItems.push_back(dataRecord);
   b63fc:	a901      	add	r1, sp, #4
   b63fe:	4820      	ldr	r0, [pc, #128]	; (b6480 <_Z10createMenuv+0x15c>)
            minVal = minV;
   b6400:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
            stepSize = inStep;
   b6404:	e9cd 3629 	strd	r3, r6, [sp, #164]	; 0xa4
    MenuItems.push_back(dataRecord);
   b6408:	f7ff ff78 	bl	b62fc <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b640c:	a90a      	add	r1, sp, #40	; 0x28
   b640e:	481c      	ldr	r0, [pc, #112]	; (b6480 <_Z10createMenuv+0x15c>)
   b6410:	f7ff ff74 	bl	b62fc <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b6414:	a91c      	add	r1, sp, #112	; 0x70
   b6416:	481a      	ldr	r0, [pc, #104]	; (b6480 <_Z10createMenuv+0x15c>)
   b6418:	f7ff ff70 	bl	b62fc <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b641c:	a913      	add	r1, sp, #76	; 0x4c
   b641e:	4818      	ldr	r0, [pc, #96]	; (b6480 <_Z10createMenuv+0x15c>)
   b6420:	f7ff ff6c 	bl	b62fc <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(signalToggle);
   b6424:	a925      	add	r1, sp, #148	; 0x94
   b6426:	4816      	ldr	r0, [pc, #88]	; (b6480 <_Z10createMenuv+0x15c>)
   b6428:	f7ff ff68 	bl	b62fc <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b642c:	4b15      	ldr	r3, [pc, #84]	; (b6484 <_Z10createMenuv+0x160>)
   b642e:	4814      	ldr	r0, [pc, #80]	; (b6480 <_Z10createMenuv+0x15c>)
   b6430:	7819      	ldrb	r1, [r3, #0]
   b6432:	f7fe fd87 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6436:	4b14      	ldr	r3, [pc, #80]	; (b6488 <_Z10createMenuv+0x164>)
   b6438:	6018      	str	r0, [r3, #0]
class MenuItem{
   b643a:	a825      	add	r0, sp, #148	; 0x94
   b643c:	f7fe fec0 	bl	b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6440:	a81c      	add	r0, sp, #112	; 0x70
   b6442:	f7fe febd 	bl	b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6446:	a813      	add	r0, sp, #76	; 0x4c
   b6448:	f7fe feba 	bl	b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b644c:	a80a      	add	r0, sp, #40	; 0x28
   b644e:	f7fe feb7 	bl	b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6452:	a801      	add	r0, sp, #4
   b6454:	f7fe feb4 	bl	b51c0 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
}
   b6458:	b02e      	add	sp, #184	; 0xb8
   b645a:	bd70      	pop	{r4, r5, r6, pc}
   b645c:	000c1214 	.word	0x000c1214
   b6460:	000c121b 	.word	0x000c121b
   b6464:	01000001 	.word	0x01000001
   b6468:	000c1223 	.word	0x000c1223
   b646c:	000c122b 	.word	0x000c122b
   b6470:	000c1232 	.word	0x000c1232
   b6474:	000c1236 	.word	0x000c1236
   b6478:	000c123a 	.word	0x000c123a
   b647c:	000c123e 	.word	0x000c123e
   b6480:	2003dc8c 	.word	0x2003dc8c
   b6484:	2003de09 	.word	0x2003de09
   b6488:	2003dcb0 	.word	0x2003dcb0

000b648c <_GLOBAL__sub_I_SystemMode>:
   b648c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b648e:	4b5d      	ldr	r3, [pc, #372]	; (b6604 <_GLOBAL__sub_I_SystemMode+0x178>)
   b6490:	4c5d      	ldr	r4, [pc, #372]	; (b6608 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b6492:	2201      	movs	r2, #1
   b6494:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6496:	4b5d      	ldr	r3, [pc, #372]	; (b660c <_GLOBAL__sub_I_SystemMode+0x180>)
   b6498:	2200      	movs	r2, #0
   b649a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b649e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b64a2:	b088      	sub	sp, #32
   b64a4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b64a6:	2003      	movs	r0, #3
   b64a8:	f003 fc9e 	bl	b9de8 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b64ac:	4958      	ldr	r1, [pc, #352]	; (b6610 <_GLOBAL__sub_I_SystemMode+0x184>)
   b64ae:	4859      	ldr	r0, [pc, #356]	; (b6614 <_GLOBAL__sub_I_SystemMode+0x188>)
   b64b0:	f004 f82e 	bl	ba510 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b64b4:	4958      	ldr	r1, [pc, #352]	; (b6618 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b64b6:	4859      	ldr	r0, [pc, #356]	; (b661c <_GLOBAL__sub_I_SystemMode+0x190>)
   b64b8:	f004 f82a 	bl	ba510 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b64bc:	4958      	ldr	r1, [pc, #352]	; (b6620 <_GLOBAL__sub_I_SystemMode+0x194>)
   b64be:	4859      	ldr	r0, [pc, #356]	; (b6624 <_GLOBAL__sub_I_SystemMode+0x198>)
   b64c0:	f004 f826 	bl	ba510 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b64c4:	4958      	ldr	r1, [pc, #352]	; (b6628 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b64c6:	4859      	ldr	r0, [pc, #356]	; (b662c <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b64c8:	f004 f822 	bl	ba510 <_ZN8particle7BleUuidC1EPKc>
   b64cc:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b64ce:	267f      	movs	r6, #127	; 0x7f
   b64d0:	4620      	mov	r0, r4
   b64d2:	f003 ff38 	bl	ba346 <_ZN8particle10BleAddressC1Ev>
   b64d6:	f104 0008 	add.w	r0, r4, #8
   b64da:	f004 ff64 	bl	bb3a6 <_ZN8particle18BleAdvertisingDataC1Ev>
   b64de:	f104 0014 	add.w	r0, r4, #20
   b64e2:	f004 ff60 	bl	bb3a6 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b64e6:	3d01      	subs	r5, #1
   b64e8:	f884 6020 	strb.w	r6, [r4, #32]
   b64ec:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b64f0:	d1ee      	bne.n	b64d0 <_GLOBAL__sub_I_SystemMode+0x44>
BleCharacteristic peerTxCharacteristic;
   b64f2:	484f      	ldr	r0, [pc, #316]	; (b6630 <_GLOBAL__sub_I_SystemMode+0x1a4>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b64f4:	4c4f      	ldr	r4, [pc, #316]	; (b6634 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b64f6:	f004 f941 	bl	ba77c <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b64fa:	484f      	ldr	r0, [pc, #316]	; (b6638 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b64fc:	f004 f93e 	bl	ba77c <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b6500:	484e      	ldr	r0, [pc, #312]	; (b663c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b6502:	f004 f93b 	bl	ba77c <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b6506:	484e      	ldr	r0, [pc, #312]	; (b6640 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b6508:	f004 fa14 	bl	ba934 <_ZN8particle13BlePeerDeviceC1Ev>
Adafruit_SH1107 oled = Adafruit_SH1107(64, 128, &Wire, OLED_RESET);
   b650c:	f007 fb84 	bl	bdc18 <_Z19__fetch_global_Wirev>
   b6510:	4a4c      	ldr	r2, [pc, #304]	; (b6644 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b6512:	494d      	ldr	r1, [pc, #308]	; (b6648 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b6514:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6518:	2213      	movs	r2, #19
   b651a:	4603      	mov	r3, r0
   b651c:	9200      	str	r2, [sp, #0]
   b651e:	484b      	ldr	r0, [pc, #300]	; (b664c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b6520:	2280      	movs	r2, #128	; 0x80
   b6522:	2140      	movs	r1, #64	; 0x40
   b6524:	f003 f848 	bl	b95b8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
   b6528:	7823      	ldrb	r3, [r4, #0]
   b652a:	f3bf 8f5b 	dmb	ish
   b652e:	07d8      	lsls	r0, r3, #31
   b6530:	d40a      	bmi.n	b6548 <_GLOBAL__sub_I_SystemMode+0xbc>
   b6532:	4620      	mov	r0, r4
   b6534:	f7fd fdc2 	bl	b40bc <__cxa_guard_acquire>
   b6538:	b130      	cbz	r0, b6548 <_GLOBAL__sub_I_SystemMode+0xbc>
   b653a:	4845      	ldr	r0, [pc, #276]	; (b6650 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b653c:	2101      	movs	r1, #1
   b653e:	f006 fe77 	bl	bd230 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6542:	4620      	mov	r0, r4
   b6544:	f7fd fdbf 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b6548:	4b42      	ldr	r3, [pc, #264]	; (b6654 <_GLOBAL__sub_I_SystemMode+0x1c8>)
	    _M_invoker = &_My_handler::_M_invoke;
   b654a:	4e43      	ldr	r6, [pc, #268]	; (b6658 <_GLOBAL__sub_I_SystemMode+0x1cc>)
	    _M_manager = &_My_handler::_M_manager;
   b654c:	4d43      	ldr	r5, [pc, #268]	; (b665c <_GLOBAL__sub_I_SystemMode+0x1d0>)
Timer at1(5000,actionTimer5);
   b654e:	4844      	ldr	r0, [pc, #272]	; (b6660 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b6550:	2264      	movs	r2, #100	; 0x64
   b6552:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b6556:	4a43      	ldr	r2, [pc, #268]	; (b6664 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b6558:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b655c:	2201      	movs	r2, #1
   b655e:	2400      	movs	r4, #0
   b6560:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6564:	4a3a      	ldr	r2, [pc, #232]	; (b6650 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b6566:	605c      	str	r4, [r3, #4]
   b6568:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b656c:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b6570:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b6574:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b6578:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b657c:	4b3a      	ldr	r3, [pc, #232]	; (b6668 <_GLOBAL__sub_I_SystemMode+0x1dc>)
  File() {}
   b657e:	4a3b      	ldr	r2, [pc, #236]	; (b666c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b6580:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6582:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6586:	601a      	str	r2, [r3, #0]
   b6588:	6099      	str	r1, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b658a:	611c      	str	r4, [r3, #16]
   b658c:	4b38      	ldr	r3, [pc, #224]	; (b6670 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b658e:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b6592:	601a      	str	r2, [r3, #0]
   b6594:	611c      	str	r4, [r3, #16]
   b6596:	4b37      	ldr	r3, [pc, #220]	; (b6674 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b6598:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b659c:	601a      	str	r2, [r3, #0]
   b659e:	611c      	str	r4, [r3, #16]
   b65a0:	4b35      	ldr	r3, [pc, #212]	; (b6678 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b65a2:	e9c3 4400 	strd	r4, r4, [r3]
   b65a6:	609c      	str	r4, [r3, #8]
   b65a8:	4b34      	ldr	r3, [pc, #208]	; (b667c <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b65aa:	e9c3 4400 	strd	r4, r4, [r3]
   b65ae:	609c      	str	r4, [r3, #8]
   b65b0:	4b33      	ldr	r3, [pc, #204]	; (b6680 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b65b2:	e9c3 4400 	strd	r4, r4, [r3]
   b65b6:	609c      	str	r4, [r3, #8]
   b65b8:	4b32      	ldr	r3, [pc, #200]	; (b6684 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b65ba:	e9c3 4400 	strd	r4, r4, [r3]
   b65be:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b65c0:	4b31      	ldr	r3, [pc, #196]	; (b6688 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b65c2:	9304      	str	r3, [sp, #16]
   b65c4:	aa04      	add	r2, sp, #16
   b65c6:	4623      	mov	r3, r4
   b65c8:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_invoker = &_My_handler::_M_invoke;
   b65cc:	9607      	str	r6, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   b65ce:	9506      	str	r5, [sp, #24]
   b65d0:	f7fe f824 	bl	b461c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b65d4:	a804      	add	r0, sp, #16
   b65d6:	f7fd ffcf 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b65da:	4b2c      	ldr	r3, [pc, #176]	; (b668c <_GLOBAL__sub_I_SystemMode+0x200>)
   b65dc:	9304      	str	r3, [sp, #16]
Timer at2(60000,actionTimer60);
   b65de:	aa04      	add	r2, sp, #16
   b65e0:	4623      	mov	r3, r4
   b65e2:	f64e 2160 	movw	r1, #60000	; 0xea60
   b65e6:	482a      	ldr	r0, [pc, #168]	; (b6690 <_GLOBAL__sub_I_SystemMode+0x204>)
	    _M_manager = &_My_handler::_M_manager;
   b65e8:	e9cd 5606 	strd	r5, r6, [sp, #24]
   b65ec:	f7fe f816 	bl	b461c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b65f0:	a804      	add	r0, sp, #16
   b65f2:	f7fd ffc1 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   b65f6:	4b27      	ldr	r3, [pc, #156]	; (b6694 <_GLOBAL__sub_I_SystemMode+0x208>)
   b65f8:	e9c3 4400 	strd	r4, r4, [r3]
   b65fc:	609c      	str	r4, [r3, #8]
   b65fe:	b008      	add	sp, #32
   b6600:	bd70      	pop	{r4, r5, r6, pc}
   b6602:	bf00      	nop
   b6604:	2003dd08 	.word	0x2003dd08
   b6608:	2003dee0 	.word	0x2003dee0
   b660c:	2003dcb4 	.word	0x2003dcb4
   b6610:	000c1245 	.word	0x000c1245
   b6614:	2003dccc 	.word	0x2003dccc
   b6618:	000c126a 	.word	0x000c126a
   b661c:	2003dce0 	.word	0x2003dce0
   b6620:	000c128f 	.word	0x000c128f
   b6624:	2003dcf4 	.word	0x2003dcf4
   b6628:	000c12b4 	.word	0x000c12b4
   b662c:	2003dd0c 	.word	0x2003dd0c
   b6630:	2003ded0 	.word	0x2003ded0
   b6634:	2003dc68 	.word	0x2003dc68
   b6638:	2003dec8 	.word	0x2003dec8
   b663c:	2003dec0 	.word	0x2003dec0
   b6640:	2003deb8 	.word	0x2003deb8
   b6644:	00061a80 	.word	0x00061a80
   b6648:	000186a0 	.word	0x000186a0
   b664c:	2003de60 	.word	0x2003de60
   b6650:	2003dc6c 	.word	0x2003dc6c
   b6654:	2003e1b0 	.word	0x2003e1b0
   b6658:	000b42b1 	.word	0x000b42b1
   b665c:	000b429d 	.word	0x000b429d
   b6660:	2003dd20 	.word	0x2003dd20
   b6664:	000c1398 	.word	0x000c1398
   b6668:	2003de0c 	.word	0x2003de0c
   b666c:	000c13c0 	.word	0x000c13c0
   b6670:	2003ddd4 	.word	0x2003ddd4
   b6674:	2003dda0 	.word	0x2003dda0
   b6678:	2003dcc0 	.word	0x2003dcc0
   b667c:	2003dc98 	.word	0x2003dc98
   b6680:	2003dc78 	.word	0x2003dc78
   b6684:	2003dca4 	.word	0x2003dca4
   b6688:	000b40e9 	.word	0x000b40e9
   b668c:	000b41ed 	.word	0x000b41ed
   b6690:	2003dd3c 	.word	0x2003dd3c
   b6694:	2003dc8c 	.word	0x2003dc8c

000b6698 <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b6698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b669c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b66a0:	4c64      	ldr	r4, [pc, #400]	; (b6834 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
   b66a2:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b66a4:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b66a6:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b66a8:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b66aa:	4690      	mov	r8, r2
   b66ac:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b66ae:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b66b2:	fa0f f983 	sxth.w	r9, r3
   b66b6:	b236      	sxth	r6, r6
   b66b8:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b66bc:	2f00      	cmp	r7, #0
   b66be:	d06f      	beq.n	b67a0 <_Z13printMenuItemhbbtt8WaterBot+0x108>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b66c0:	2701      	movs	r7, #1
   b66c2:	2358      	movs	r3, #88	; 0x58
   b66c4:	4620      	mov	r0, r4
   b66c6:	e9cd a700 	strd	sl, r7, [sp]
   b66ca:	9203      	str	r2, [sp, #12]
   b66cc:	f002 f8f9 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b66d0:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b66d4:	2102      	movs	r1, #2
   b66d6:	4620      	mov	r0, r4
   b66d8:	8266      	strh	r6, [r4, #18]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b66da:	f04f 0900 	mov.w	r9, #0
   b66de:	f002 fc0c 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b66e2:	4629      	mov	r1, r5
   b66e4:	4854      	ldr	r0, [pc, #336]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b66e6:	f8c4 9014 	str.w	r9, [r4, #20]
   b66ea:	f7fe fc2b 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b66ee:	f100 011a 	add.w	r1, r0, #26
   b66f2:	4620      	mov	r0, r4
   b66f4:	f006 fd18 	bl	bd128 <_ZN5Print5printEPKc>
        if(selected){
   b66f8:	9a03      	ldr	r2, [sp, #12]
   b66fa:	f1b8 0f00 	cmp.w	r8, #0
   b66fe:	d03c      	beq.n	b677a <_Z13printMenuItemhbbtt8WaterBot+0xe2>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b6700:	237f      	movs	r3, #127	; 0x7f
   b6702:	e9cd a700 	strd	sl, r7, [sp]
   b6706:	2158      	movs	r1, #88	; 0x58
   b6708:	4620      	mov	r0, r4
   b670a:	f002 f8da 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b670e:	2359      	movs	r3, #89	; 0x59
   b6710:	8223      	strh	r3, [r4, #16]
   b6712:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6714:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6718:	4847      	ldr	r0, [pc, #284]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b671a:	4629      	mov	r1, r5
   b671c:	f7fe fc12 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6720:	7d42      	ldrb	r2, [r0, #21]
   b6722:	b1f2      	cbz	r2, b6762 <_Z13printMenuItemhbbtt8WaterBot+0xca>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6724:	6903      	ldr	r3, [r0, #16]
   b6726:	aa0c      	add	r2, sp, #48	; 0x30
   b6728:	4413      	add	r3, r2
   b672a:	791b      	ldrb	r3, [r3, #4]
   b672c:	b1bb      	cbz	r3, b675e <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b672e:	4943      	ldr	r1, [pc, #268]	; (b683c <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
                else oled.printf("Off");
   b6730:	4840      	ldr	r0, [pc, #256]	; (b6834 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6732:	f7fd fdd6 	bl	b42e2 <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b6736:	f007 f917 	bl	bd968 <_Z16_fetch_usbserialv>
   b673a:	4629      	mov	r1, r5
   b673c:	4604      	mov	r4, r0
   b673e:	483e      	ldr	r0, [pc, #248]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6740:	f7fe fc00 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6744:	493e      	ldr	r1, [pc, #248]	; (b6840 <_Z13printMenuItemhbbtt8WaterBot+0x1a8>)
   b6746:	f100 021a 	add.w	r2, r0, #26
   b674a:	4620      	mov	r0, r4
   b674c:	f7fd fe02 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b6750:	4629      	mov	r1, r5
   b6752:	4839      	ldr	r0, [pc, #228]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6754:	f7fe fbf6 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b6758:	b004      	add	sp, #16
   b675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b675e:	4939      	ldr	r1, [pc, #228]	; (b6844 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b6760:	e7e6      	b.n	b6730 <_Z13printMenuItemhbbtt8WaterBot+0x98>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6762:	68c2      	ldr	r2, [r0, #12]
            else if(MenuItems.at(id).customLabel){
   b6764:	7d83      	ldrb	r3, [r0, #22]
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6766:	a90c      	add	r1, sp, #48	; 0x30
   b6768:	440a      	add	r2, r1
   b676a:	7912      	ldrb	r2, [r2, #4]
            else if(MenuItems.at(id).customLabel){
   b676c:	b19b      	cbz	r3, b6796 <_Z13printMenuItemhbbtt8WaterBot+0xfe>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b676e:	4611      	mov	r1, r2
   b6770:	f7fe fc58 	bl	b5024 <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b6774:	6801      	ldr	r1, [r0, #0]
   b6776:	4620      	mov	r0, r4
   b6778:	e7db      	b.n	b6732 <_Z13printMenuItemhbbtt8WaterBot+0x9a>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b677a:	237f      	movs	r3, #127	; 0x7f
   b677c:	e9cd a800 	strd	sl, r8, [sp]
   b6780:	2158      	movs	r1, #88	; 0x58
   b6782:	4620      	mov	r0, r4
   b6784:	f002 f89d 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6788:	2359      	movs	r3, #89	; 0x59
   b678a:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b678c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6790:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6792:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6794:	e7c0      	b.n	b6718 <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b6796:	492c      	ldr	r1, [pc, #176]	; (b6848 <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b6798:	4620      	mov	r0, r4
   b679a:	f7fd fda2 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b679e:	e7ca      	b.n	b6736 <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b67a0:	2358      	movs	r3, #88	; 0x58
   b67a2:	4620      	mov	r0, r4
   b67a4:	e9cd a700 	strd	sl, r7, [sp]
   b67a8:	9203      	str	r2, [sp, #12]
   b67aa:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b67ae:	f002 f888 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b67b2:	2102      	movs	r1, #2
   b67b4:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b67b6:	f8a4 9010 	strh.w	r9, [r4, #16]
   b67ba:	8266      	strh	r6, [r4, #18]
   b67bc:	f002 fb9d 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b67c0:	4629      	mov	r1, r5
   b67c2:	481d      	ldr	r0, [pc, #116]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b67c4:	f8c4 8014 	str.w	r8, [r4, #20]
   b67c8:	f7fe fbbc 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b67cc:	f100 011a 	add.w	r1, r0, #26
   b67d0:	4620      	mov	r0, r4
   b67d2:	f006 fca9 	bl	bd128 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b67d6:	9a03      	ldr	r2, [sp, #12]
   b67d8:	237f      	movs	r3, #127	; 0x7f
   b67da:	2158      	movs	r1, #88	; 0x58
   b67dc:	4620      	mov	r0, r4
   b67de:	e9cd a700 	strd	sl, r7, [sp]
   b67e2:	f002 f86e 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b67e6:	2359      	movs	r3, #89	; 0x59
        if(MenuItems.at(id).onOffSetting){
   b67e8:	4813      	ldr	r0, [pc, #76]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b67ea:	8223      	strh	r3, [r4, #16]
   b67ec:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b67ee:	f8c4 8014 	str.w	r8, [r4, #20]
   b67f2:	4629      	mov	r1, r5
   b67f4:	f7fe fba6 	bl	b4f44 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b67f8:	7d42      	ldrb	r2, [r0, #21]
   b67fa:	b15a      	cbz	r2, b6814 <_Z13printMenuItemhbbtt8WaterBot+0x17c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b67fc:	6903      	ldr	r3, [r0, #16]
   b67fe:	aa0c      	add	r2, sp, #48	; 0x30
   b6800:	4413      	add	r3, r2
   b6802:	791b      	ldrb	r3, [r3, #4]
   b6804:	b123      	cbz	r3, b6810 <_Z13printMenuItemhbbtt8WaterBot+0x178>
   b6806:	490d      	ldr	r1, [pc, #52]	; (b683c <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
            else oled.printf("Off");
   b6808:	4620      	mov	r0, r4
   b680a:	f7fd fd6a 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b680e:	e79f      	b.n	b6750 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6810:	490c      	ldr	r1, [pc, #48]	; (b6844 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b6812:	e7f9      	b.n	b6808 <_Z13printMenuItemhbbtt8WaterBot+0x170>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6814:	68c2      	ldr	r2, [r0, #12]
        else if(MenuItems.at(id).customLabel){
   b6816:	7d83      	ldrb	r3, [r0, #22]
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6818:	a90c      	add	r1, sp, #48	; 0x30
   b681a:	440a      	add	r2, r1
   b681c:	7912      	ldrb	r2, [r2, #4]
        else if(MenuItems.at(id).customLabel){
   b681e:	b123      	cbz	r3, b682a <_Z13printMenuItemhbbtt8WaterBot+0x192>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6820:	4611      	mov	r1, r2
   b6822:	f7fe fbff 	bl	b5024 <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b6826:	6801      	ldr	r1, [r0, #0]
   b6828:	e7ee      	b.n	b6808 <_Z13printMenuItemhbbtt8WaterBot+0x170>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b682a:	4907      	ldr	r1, [pc, #28]	; (b6848 <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b682c:	4620      	mov	r0, r4
   b682e:	f7fd fd58 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6832:	e78d      	b.n	b6750 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6834:	2003de60 	.word	0x2003de60
   b6838:	2003dc8c 	.word	0x2003dc8c
   b683c:	000c12d9 	.word	0x000c12d9
   b6840:	000c12e0 	.word	0x000c12e0
   b6844:	000c12dc 	.word	0x000c12dc
   b6848:	000c0da6 	.word	0x000c0da6

000b684c <setup>:
void setup() {
   b684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6850:	2103      	movs	r1, #3
void setup() {
   b6852:	b0a0      	sub	sp, #128	; 0x80
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6854:	201c      	movs	r0, #28
   b6856:	f007 f987 	bl	bdb68 <pinMode>
    pinMode(U_DPAD,INPUT_PULLDOWN);
   b685a:	2103      	movs	r1, #3
   b685c:	200e      	movs	r0, #14
   b685e:	f007 f983 	bl	bdb68 <pinMode>
    pinMode(D_DPAD,INPUT_PULLDOWN);
   b6862:	2103      	movs	r1, #3
   b6864:	2007      	movs	r0, #7
   b6866:	f007 f97f 	bl	bdb68 <pinMode>
    pinMode(L_DPAD,INPUT_PULLDOWN);
   b686a:	2103      	movs	r1, #3
   b686c:	200f      	movs	r0, #15
   b686e:	f007 f97b 	bl	bdb68 <pinMode>
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b6872:	2103      	movs	r1, #3
   b6874:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6876:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b6878:	f007 f976 	bl	bdb68 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b687c:	2103      	movs	r1, #3
   b687e:	201d      	movs	r0, #29
   b6880:	f007 f972 	bl	bdb68 <pinMode>
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6884:	498a      	ldr	r1, [pc, #552]	; (b6ab0 <setup+0x264>)
   b6886:	9400      	str	r4, [sp, #0]
   b6888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b688c:	2201      	movs	r2, #1
   b688e:	201c      	movs	r0, #28
   b6890:	f006 fad8 	bl	bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,RISING);
   b6894:	4987      	ldr	r1, [pc, #540]	; (b6ab4 <setup+0x268>)
   b6896:	9400      	str	r4, [sp, #0]
   b6898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b689c:	2201      	movs	r2, #1
   b689e:	200e      	movs	r0, #14
   b68a0:	f006 fad0 	bl	bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,RISING);
   b68a4:	4984      	ldr	r1, [pc, #528]	; (b6ab8 <setup+0x26c>)
   b68a6:	9400      	str	r4, [sp, #0]
   b68a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b68ac:	2201      	movs	r2, #1
   b68ae:	2007      	movs	r0, #7
   b68b0:	f006 fac8 	bl	bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,RISING);
   b68b4:	4981      	ldr	r1, [pc, #516]	; (b6abc <setup+0x270>)
   b68b6:	9400      	str	r4, [sp, #0]
   b68b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b68bc:	2201      	movs	r2, #1
   b68be:	200f      	movs	r0, #15
   b68c0:	f006 fac0 	bl	bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,RISING);
   b68c4:	497e      	ldr	r1, [pc, #504]	; (b6ac0 <setup+0x274>)
   b68c6:	9400      	str	r4, [sp, #0]
   b68c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b68cc:	2201      	movs	r2, #1
   b68ce:	2012      	movs	r0, #18
   b68d0:	f006 fab8 	bl	bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,RISING);
   b68d4:	497b      	ldr	r1, [pc, #492]	; (b6ac4 <setup+0x278>)
   b68d6:	9400      	str	r4, [sp, #0]
   b68d8:	2201      	movs	r2, #1
   b68da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b68de:	201d      	movs	r0, #29
   b68e0:	f006 fab0 	bl	bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b68e4:	f003 f8d8 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b68e8:	4b77      	ldr	r3, [pc, #476]	; (b6ac8 <setup+0x27c>)
    logMessages = true;
   b68ea:	4f78      	ldr	r7, [pc, #480]	; (b6acc <setup+0x280>)
    debounceTime = millis();
   b68ec:	6018      	str	r0, [r3, #0]
   b68ee:	f003 f8d3 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    controlUpdateTime = millis();
   b68f2:	4b77      	ldr	r3, [pc, #476]	; (b6ad0 <setup+0x284>)
   b68f4:	6018      	str	r0, [r3, #0]
   b68f6:	f003 f8cf 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    rcTime = millis();
   b68fa:	4b76      	ldr	r3, [pc, #472]	; (b6ad4 <setup+0x288>)
   b68fc:	6018      	str	r0, [r3, #0]
    controlUpdateID = -1;
   b68fe:	4b76      	ldr	r3, [pc, #472]	; (b6ad8 <setup+0x28c>)
   b6900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6904:	601a      	str	r2, [r3, #0]
    Serial.begin(115200);
   b6906:	f007 f82f 	bl	bd968 <_Z16_fetch_usbserialv>
   b690a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b690e:	f007 f81f 	bl	bd950 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6912:	f007 f9c1 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   b6916:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b691a:	f006 ffc3 	bl	bd8a4 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b691e:	f7fe f905 	bl	b4b2c <_Z9setupXBeev>
	BLE.on();
   b6922:	f004 f8b7 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6926:	f004 f8ff 	bl	bab28 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b692a:	f004 f8b3 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b692e:	2132      	movs	r1, #50	; 0x32
   b6930:	f004 f944 	bl	babbc <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b6934:	f004 f8ae 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6938:	2108      	movs	r1, #8
   b693a:	f004 f8fc 	bl	bab36 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b693e:	4a67      	ldr	r2, [pc, #412]	; (b6adc <setup+0x290>)
   b6940:	4967      	ldr	r1, [pc, #412]	; (b6ae0 <setup+0x294>)
   b6942:	4610      	mov	r0, r2
   b6944:	f005 f95c 	bl	bbc00 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b6948:	4a66      	ldr	r2, [pc, #408]	; (b6ae4 <setup+0x298>)
   b694a:	4967      	ldr	r1, [pc, #412]	; (b6ae8 <setup+0x29c>)
   b694c:	4610      	mov	r0, r2
   b694e:	f005 f957 	bl	bbc00 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6952:	2301      	movs	r3, #1
   b6954:	4622      	mov	r2, r4
   b6956:	e9cd 4400 	strd	r4, r4, [sp]
   b695a:	4964      	ldr	r1, [pc, #400]	; (b6aec <setup+0x2a0>)
   b695c:	4864      	ldr	r0, [pc, #400]	; (b6af0 <setup+0x2a4>)
   b695e:	f003 fa9f 	bl	b9ea0 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b6962:	4a64      	ldr	r2, [pc, #400]	; (b6af4 <setup+0x2a8>)
   b6964:	4964      	ldr	r1, [pc, #400]	; (b6af8 <setup+0x2ac>)
   b6966:	4865      	ldr	r0, [pc, #404]	; (b6afc <setup+0x2b0>)
   b6968:	f005 ff77 	bl	bc85a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    offloadingMode = false;
   b696c:	4b64      	ldr	r3, [pc, #400]	; (b6b00 <setup+0x2b4>)
   b696e:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b6970:	4b64      	ldr	r3, [pc, #400]	; (b6b04 <setup+0x2b8>)
   b6972:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b6974:	4b64      	ldr	r3, [pc, #400]	; (b6b08 <setup+0x2bc>)
   b6976:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b6978:	4b64      	ldr	r3, [pc, #400]	; (b6b0c <setup+0x2c0>)
    logMessages = true;
   b697a:	2601      	movs	r6, #1
    statusTimeout = false;
   b697c:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b697e:	703e      	strb	r6, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b6980:	f006 ff1c 	bl	bd7bc <_ZN9TimeClass5monthEv>
   b6984:	9007      	str	r0, [sp, #28]
   b6986:	f006 ff0d 	bl	bd7a4 <_ZN9TimeClass3dayEv>
   b698a:	4605      	mov	r5, r0
   b698c:	f006 ff1e 	bl	bd7cc <_ZN9TimeClass4yearEv>
   b6990:	4680      	mov	r8, r0
   b6992:	f006 fee3 	bl	bd75c <_ZN9TimeClass4hourEv>
   b6996:	4681      	mov	r9, r0
   b6998:	f006 feec 	bl	bd774 <_ZN9TimeClass6minuteEv>
   b699c:	4682      	mov	sl, r0
   b699e:	f006 fef5 	bl	bd78c <_ZN9TimeClass6secondEv>
   b69a2:	9b07      	ldr	r3, [sp, #28]
   b69a4:	4a5a      	ldr	r2, [pc, #360]	; (b6b10 <setup+0x2c4>)
   b69a6:	9500      	str	r5, [sp, #0]
   b69a8:	e9cd a003 	strd	sl, r0, [sp, #12]
   b69ac:	2110      	movs	r1, #16
   b69ae:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b69b2:	a809      	add	r0, sp, #36	; 0x24
   b69b4:	f003 fb14 	bl	b9fe0 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b69b8:	4956      	ldr	r1, [pc, #344]	; (b6b14 <setup+0x2c8>)
   b69ba:	4857      	ldr	r0, [pc, #348]	; (b6b18 <setup+0x2cc>)
    oled.begin(i2c_Address, true); // Address 0x3C default
   b69bc:	4d57      	ldr	r5, [pc, #348]	; (b6b1c <setup+0x2d0>)
    strcpy(filenameMessages,DEF_FILENAME);
   b69be:	f008 f914 	bl	bebea <strcpy>
    strcat(filenameMessages,timestamp);
   b69c2:	a909      	add	r1, sp, #36	; 0x24
   b69c4:	4854      	ldr	r0, [pc, #336]	; (b6b18 <setup+0x2cc>)
   b69c6:	f008 f8f7 	bl	bebb8 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b69ca:	4955      	ldr	r1, [pc, #340]	; (b6b20 <setup+0x2d4>)
   b69cc:	4852      	ldr	r0, [pc, #328]	; (b6b18 <setup+0x2cc>)
   b69ce:	f008 f8f3 	bl	bebb8 <strcat>
    createMenu();
   b69d2:	f7ff fca7 	bl	b6324 <_Z10createMenuv>
    delay(250);
   b69d6:	20fa      	movs	r0, #250	; 0xfa
   b69d8:	f003 fb42 	bl	ba060 <delay>
    oled.begin(i2c_Address, true); // Address 0x3C default
   b69dc:	4632      	mov	r2, r6
   b69de:	213c      	movs	r1, #60	; 0x3c
   b69e0:	4628      	mov	r0, r5
   b69e2:	f002 fdfd 	bl	b95e0 <_ZN15Adafruit_SH11075beginEhb>
    oled.clearDisplay();
   b69e6:	4628      	mov	r0, r5
   b69e8:	f002 fd40 	bl	b946c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    oled.display();
   b69ec:	4628      	mov	r0, r5
   b69ee:	f002 fe69 	bl	b96c4 <_ZN15Adafruit_SH110X7displayEv>
    oled.setRotation(1);
   b69f2:	4631      	mov	r1, r6
   b69f4:	4628      	mov	r0, r5
   b69f6:	f002 f818 	bl	b8a2a <_ZN12Adafruit_GFX11setRotationEh>
    oled.setTextSize(2);
   b69fa:	2102      	movs	r1, #2
   b69fc:	4628      	mov	r0, r5
   b69fe:	f002 fa7c 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
   b6a02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    oled.print(" Starting ");
   b6a06:	4947      	ldr	r1, [pc, #284]	; (b6b24 <setup+0x2d8>)
   b6a08:	616b      	str	r3, [r5, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6a0a:	612c      	str	r4, [r5, #16]
   b6a0c:	4628      	mov	r0, r5
   b6a0e:	f006 fb8b 	bl	bd128 <_ZN5Print5printEPKc>
    oled.display();
   b6a12:	4628      	mov	r0, r5
   b6a14:	f002 fe56 	bl	b96c4 <_ZN15Adafruit_SH110X7displayEv>
    delay(100);
   b6a18:	2064      	movs	r0, #100	; 0x64
   b6a1a:	f003 fb21 	bl	ba060 <delay>
      dataMode_{dataMode}
   b6a1e:	4b42      	ldr	r3, [pc, #264]	; (b6b28 <setup+0x2dc>)
   b6a20:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b6a22:	4842      	ldr	r0, [pc, #264]	; (b6b2c <setup+0x2e0>)
   b6a24:	4b42      	ldr	r3, [pc, #264]	; (b6b30 <setup+0x2e4>)
   b6a26:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
   b6a2a:	aa0d      	add	r2, sp, #52	; 0x34
   b6a2c:	2108      	movs	r1, #8
   b6a2e:	930f      	str	r3, [sp, #60]	; 0x3c
   b6a30:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
   b6a34:	f7fd fed4 	bl	b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b6a38:	4604      	mov	r4, r0
   b6a3a:	b928      	cbnz	r0, b6a48 <setup+0x1fc>
        Serial.println("Error: could not connect to SD card!");
   b6a3c:	f006 ff94 	bl	bd968 <_Z16_fetch_usbserialv>
   b6a40:	493c      	ldr	r1, [pc, #240]	; (b6b34 <setup+0x2e8>)
   b6a42:	f006 fb84 	bl	bd14e <_ZN5Print7printlnEPKc>
        logMessages = false;
   b6a46:	703c      	strb	r4, [r7, #0]
class MenuPopUp{
   b6a48:	2300      	movs	r3, #0
    sprintf(m.primaryLine,"Hello!\0");
   b6a4a:	493b      	ldr	r1, [pc, #236]	; (b6b38 <setup+0x2ec>)
class MenuPopUp{
   b6a4c:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    sprintf(m.primaryLine,"Hello!\0");
   b6a50:	a80d      	add	r0, sp, #52	; 0x34
class MenuPopUp{
   b6a52:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
   b6a56:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    sprintf(m.primaryLine,"Hello!\0");
   b6a5a:	f008 f8c6 	bl	bebea <strcpy>
    sprintf(m.secondaryLine,"Scanning for Bots\0", 1);
   b6a5e:	4937      	ldr	r1, [pc, #220]	; (b6b3c <setup+0x2f0>)
   b6a60:	2201      	movs	r2, #1
   b6a62:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   b6a66:	f003 faab 	bl	b9fc0 <sprintf>
    sprintf(m.tertiaryLine, "OK when bots ready\0",15);
   b6a6a:	220f      	movs	r2, #15
   b6a6c:	4934      	ldr	r1, [pc, #208]	; (b6b40 <setup+0x2f4>)
   b6a6e:	a817      	add	r0, sp, #92	; 0x5c
   b6a70:	f003 faa6 	bl	b9fc0 <sprintf>
    m.primaryStart = 32;
   b6a74:	2320      	movs	r3, #32
   b6a76:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    m.secondaryStart = 12;
   b6a7a:	230c      	movs	r3, #12
   b6a7c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    PopUps.push_back(m);
   b6a80:	a90d      	add	r1, sp, #52	; 0x34
    m.tertiaryStart = 10;
   b6a82:	230a      	movs	r3, #10
    PopUps.push_back(m);
   b6a84:	482f      	ldr	r0, [pc, #188]	; (b6b44 <setup+0x2f8>)
    m.tertiaryStart = 10;
   b6a86:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    PopUps.push_back(m);
   b6a8a:	f7fe fc49 	bl	b5320 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
    at1.start();
   b6a8e:	482e      	ldr	r0, [pc, #184]	; (b6b48 <setup+0x2fc>)
   b6a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6a94:	f7fd fc0e 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    at2.start();
   b6a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6a9c:	482b      	ldr	r0, [pc, #172]	; (b6b4c <setup+0x300>)
   b6a9e:	f7fd fc09 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    WaterBotSim(1);
   b6aa2:	2001      	movs	r0, #1
   b6aa4:	f7ff f8ae 	bl	b5c04 <_Z11WaterBotSimh>
}
   b6aa8:	b020      	add	sp, #128	; 0x80
   b6aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6aae:	bf00      	nop
   b6ab0:	000b422d 	.word	0x000b422d
   b6ab4:	000b4f6d 	.word	0x000b4f6d
   b6ab8:	000b4fc9 	.word	0x000b4fc9
   b6abc:	000b4371 	.word	0x000b4371
   b6ac0:	000b4479 	.word	0x000b4479
   b6ac4:	000b41bd 	.word	0x000b41bd
   b6ac8:	2003dd64 	.word	0x2003dd64
   b6acc:	2003de08 	.word	0x2003de08
   b6ad0:	2003dd60 	.word	0x2003dd60
   b6ad4:	2003dedc 	.word	0x2003dedc
   b6ad8:	2003dd5c 	.word	0x2003dd5c
   b6adc:	2003ded0 	.word	0x2003ded0
   b6ae0:	000b5a19 	.word	0x000b5a19
   b6ae4:	2003dec0 	.word	0x2003dec0
   b6ae8:	000b468d 	.word	0x000b468d
   b6aec:	000b59c9 	.word	0x000b59c9
   b6af0:	000c0e77 	.word	0x000c0e77
   b6af4:	000c130c 	.word	0x000c130c
   b6af8:	000b5ba5 	.word	0x000b5ba5
   b6afc:	000bc82f 	.word	0x000bc82f
   b6b00:	2003de5f 	.word	0x2003de5f
   b6b04:	2003de5e 	.word	0x2003de5e
   b6b08:	2003ded8 	.word	0x2003ded8
   b6b0c:	2003e635 	.word	0x2003e635
   b6b10:	000c131a 	.word	0x000c131a
   b6b14:	000c1333 	.word	0x000c1333
   b6b18:	2003dd7c 	.word	0x2003dd7c
   b6b1c:	2003de60 	.word	0x2003de60
   b6b20:	000c133c 	.word	0x000c133c
   b6b24:	000c1345 	.word	0x000c1345
   b6b28:	000c1398 	.word	0x000c1398
   b6b2c:	2003e1b0 	.word	0x2003e1b0
   b6b30:	007a1200 	.word	0x007a1200
   b6b34:	000c1350 	.word	0x000c1350
   b6b38:	000c1402 	.word	0x000c1402
   b6b3c:	000c140a 	.word	0x000c140a
   b6b40:	000c141d 	.word	0x000c141d
   b6b44:	2003dca4 	.word	0x2003dca4
   b6b48:	2003dd20 	.word	0x2003dd20
   b6b4c:	2003dd3c 	.word	0x2003dd3c

000b6b50 <_Z10updateMenuv>:
void updateMenu(){
   b6b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b6b54:	f8df a350 	ldr.w	sl, [pc, #848]	; b6ea8 <_Z10updateMenuv+0x358>
   b6b58:	f89a 3000 	ldrb.w	r3, [sl]
void updateMenu(){
   b6b5c:	b091      	sub	sp, #68	; 0x44
    if(redrawMenu){
   b6b5e:	2b00      	cmp	r3, #0
   b6b60:	d06d      	beq.n	b6c3e <_Z10updateMenuv+0xee>
        oled.fillRect(0,0,OLED_MAX_X,OLED_MAX_Y,0);
   b6b62:	4cc8      	ldr	r4, [pc, #800]	; (b6e84 <_Z10updateMenuv+0x334>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b64:	4ec8      	ldr	r6, [pc, #800]	; (b6e88 <_Z10updateMenuv+0x338>)
   b6b66:	2500      	movs	r5, #0
   b6b68:	2340      	movs	r3, #64	; 0x40
   b6b6a:	e9cd 3500 	strd	r3, r5, [sp]
   b6b6e:	462a      	mov	r2, r5
   b6b70:	2380      	movs	r3, #128	; 0x80
   b6b72:	4629      	mov	r1, r5
   b6b74:	4620      	mov	r0, r4
   b6b76:	f001 fea4 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
        if(PopUps.size() != 0){  //If there is a queue of pop-ups to be displayed
   b6b7a:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6b7e:	429a      	cmp	r2, r3
   b6b80:	d060      	beq.n	b6c44 <_Z10updateMenuv+0xf4>
            oled.drawRect(1,1,126,62,1);
   b6b82:	2701      	movs	r7, #1
   b6b84:	233e      	movs	r3, #62	; 0x3e
   b6b86:	e9cd 3700 	strd	r3, r7, [sp]
   b6b8a:	463a      	mov	r2, r7
   b6b8c:	237e      	movs	r3, #126	; 0x7e
   b6b8e:	4639      	mov	r1, r7
   b6b90:	4620      	mov	r0, r4
   b6b92:	f001 ff09 	bl	b89a8 <_ZN12Adafruit_GFX8drawRectEsssst>
            oled.drawRect(2,2,124,60,1);
   b6b96:	2202      	movs	r2, #2
   b6b98:	233c      	movs	r3, #60	; 0x3c
   b6b9a:	4611      	mov	r1, r2
   b6b9c:	9300      	str	r3, [sp, #0]
   b6b9e:	4620      	mov	r0, r4
   b6ba0:	237c      	movs	r3, #124	; 0x7c
   b6ba2:	9701      	str	r7, [sp, #4]
   b6ba4:	f001 ff00 	bl	b89a8 <_ZN12Adafruit_GFX8drawRectEsssst>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6ba8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b6bac:	6163      	str	r3, [r4, #20]
            oled.setCursor(PopUps.back().primaryStart,4);
   b6bae:	6873      	ldr	r3, [r6, #4]
   b6bb0:	f813 3c03 	ldrb.w	r3, [r3, #-3]
   b6bb4:	8223      	strh	r3, [r4, #16]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6bb6:	2304      	movs	r3, #4
   b6bb8:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(2);
   b6bba:	2102      	movs	r1, #2
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	f002 f99c 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().primaryLine);
   b6bc2:	6871      	ldr	r1, [r6, #4]
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	3949      	subs	r1, #73	; 0x49
   b6bc8:	f7fd fb8b 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().secondaryStart,22);
   b6bcc:	6873      	ldr	r3, [r6, #4]
   b6bce:	f813 3c02 	ldrb.w	r3, [r3, #-2]
   b6bd2:	8223      	strh	r3, [r4, #16]
   b6bd4:	2316      	movs	r3, #22
   b6bd6:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(1);
   b6bd8:	4639      	mov	r1, r7
   b6bda:	4620      	mov	r0, r4
   b6bdc:	f002 f98d 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().secondaryLine);
   b6be0:	6871      	ldr	r1, [r6, #4]
   b6be2:	4620      	mov	r0, r4
   b6be4:	393f      	subs	r1, #63	; 0x3f
   b6be6:	f7fd fb7c 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().tertiaryStart,32);
   b6bea:	6873      	ldr	r3, [r6, #4]
   b6bec:	f04f 0820 	mov.w	r8, #32
   b6bf0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6bf4:	8223      	strh	r3, [r4, #16]
            oled.setTextSize(1);
   b6bf6:	4639      	mov	r1, r7
   b6bf8:	4620      	mov	r0, r4
   b6bfa:	f8a4 8012 	strh.w	r8, [r4, #18]
   b6bfe:	f002 f97c 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().tertiaryLine);
   b6c02:	6871      	ldr	r1, [r6, #4]
   b6c04:	4620      	mov	r0, r4
   b6c06:	3921      	subs	r1, #33	; 0x21
   b6c08:	f7fd fb6b 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6c0c:	4b9f      	ldr	r3, [pc, #636]	; (b6e8c <_Z10updateMenuv+0x33c>)
   b6c0e:	6123      	str	r3, [r4, #16]
            oled.setTextSize(2);
   b6c10:	2102      	movs	r1, #2
   b6c12:	4620      	mov	r0, r4
   b6c14:	f002 f971 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.fillRect(45,44,32,16,1);
   b6c18:	2310      	movs	r3, #16
   b6c1a:	222c      	movs	r2, #44	; 0x2c
   b6c1c:	9300      	str	r3, [sp, #0]
   b6c1e:	212d      	movs	r1, #45	; 0x2d
   b6c20:	4643      	mov	r3, r8
   b6c22:	4620      	mov	r0, r4
   b6c24:	9701      	str	r7, [sp, #4]
   b6c26:	f001 fe4c 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
            oled.printf("OK");
   b6c2a:	4999      	ldr	r1, [pc, #612]	; (b6e90 <_Z10updateMenuv+0x340>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6c2c:	6165      	str	r5, [r4, #20]
   b6c2e:	4620      	mov	r0, r4
   b6c30:	f7fd fb57 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.display();
   b6c34:	4620      	mov	r0, r4
   b6c36:	f002 fd45 	bl	b96c4 <_ZN15Adafruit_SH110X7displayEv>
            redrawMenu = false;
   b6c3a:	f88a 5000 	strb.w	r5, [sl]
}
   b6c3e:	b011      	add	sp, #68	; 0x44
   b6c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6c44:	f8df 9254 	ldr.w	r9, [pc, #596]	; b6e9c <_Z10updateMenuv+0x34c>
            if(WaterBots.at(i).botNum == botSelect){
   b6c48:	f8df b260 	ldr.w	fp, [pc, #608]	; b6eac <_Z10updateMenuv+0x35c>
        uint8_t menuSelect = 0;
   b6c4c:	462e      	mov	r6, r5
   b6c4e:	e9d9 2300 	ldrd	r2, r3, [r9]
   b6c52:	1a9b      	subs	r3, r3, r2
   b6c54:	4a8f      	ldr	r2, [pc, #572]	; (b6e94 <_Z10updateMenuv+0x344>)
   b6c56:	109b      	asrs	r3, r3, #2
   b6c58:	b2ef      	uxtb	r7, r5
   b6c5a:	4353      	muls	r3, r2
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6c5c:	429f      	cmp	r7, r3
   b6c5e:	d247      	bcs.n	b6cf0 <_Z10updateMenuv+0x1a0>
            if(WaterBots.at(i).botNum == botSelect){
   b6c60:	4639      	mov	r1, r7
   b6c62:	4648      	mov	r0, r9
   b6c64:	f7fe f9f0 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b6c68:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b6c6c:	7881      	ldrb	r1, [r0, #2]
   b6c6e:	f89b 3000 	ldrb.w	r3, [fp]
                oled.setTextSize(1);
   b6c72:	4884      	ldr	r0, [pc, #528]	; (b6e84 <_Z10updateMenuv+0x334>)
                oled.setCursor(5+18*i,4);
   b6c74:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b6c78:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b6c7c:	4299      	cmp	r1, r3
   b6c7e:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b6c82:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6c86:	8222      	strh	r2, [r4, #16]
   b6c88:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b6c8a:	f04f 0101 	mov.w	r1, #1
            if(WaterBots.at(i).botNum == botSelect){
   b6c8e:	d117      	bne.n	b6cc0 <_Z10updateMenuv+0x170>
                oled.setTextSize(1);
   b6c90:	f002 f933 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6c94:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6c96:	2201      	movs	r2, #1
   b6c98:	6163      	str	r3, [r4, #20]
   b6c9a:	230e      	movs	r3, #14
   b6c9c:	e9cd 3200 	strd	r3, r2, [sp]
   b6ca0:	4878      	ldr	r0, [pc, #480]	; (b6e84 <_Z10updateMenuv+0x334>)
   b6ca2:	4641      	mov	r1, r8
   b6ca4:	f001 fe0d 	bl	b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6ca8:	4639      	mov	r1, r7
   b6caa:	4648      	mov	r0, r9
   b6cac:	f7fe f9cc 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6cb0:	4979      	ldr	r1, [pc, #484]	; (b6e98 <_Z10updateMenuv+0x348>)
   b6cb2:	7882      	ldrb	r2, [r0, #2]
   b6cb4:	4873      	ldr	r0, [pc, #460]	; (b6e84 <_Z10updateMenuv+0x334>)
   b6cb6:	f7fd fb14 	bl	b42e2 <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6cba:	3501      	adds	r5, #1
   b6cbc:	463e      	mov	r6, r7
   b6cbe:	e7c6      	b.n	b6c4e <_Z10updateMenuv+0xfe>
                oled.setTextSize(1);
   b6cc0:	f002 f91b 	bl	b8efa <_ZN12Adafruit_GFX11setTextSizeEh>
   b6cc4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b6cc8:	2201      	movs	r2, #1
   b6cca:	6163      	str	r3, [r4, #20]
   b6ccc:	230e      	movs	r3, #14
   b6cce:	e9cd 3200 	strd	r3, r2, [sp]
   b6cd2:	486c      	ldr	r0, [pc, #432]	; (b6e84 <_Z10updateMenuv+0x334>)
   b6cd4:	4641      	mov	r1, r8
   b6cd6:	f001 fe67 	bl	b89a8 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6cda:	4639      	mov	r1, r7
   b6cdc:	4648      	mov	r0, r9
   b6cde:	f7fe f9b3 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6ce2:	496d      	ldr	r1, [pc, #436]	; (b6e98 <_Z10updateMenuv+0x348>)
   b6ce4:	7882      	ldrb	r2, [r0, #2]
   b6ce6:	4867      	ldr	r0, [pc, #412]	; (b6e84 <_Z10updateMenuv+0x334>)
   b6ce8:	f7fd fafb 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6cec:	4637      	mov	r7, r6
   b6cee:	e7e4      	b.n	b6cba <_Z10updateMenuv+0x16a>
        if(menuItem == 0){
   b6cf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; b6eb0 <_Z10updateMenuv+0x360>
   b6cf4:	f898 7000 	ldrb.w	r7, [r8]
   b6cf8:	2f00      	cmp	r7, #0
   b6cfa:	d157      	bne.n	b6dac <_Z10updateMenuv+0x25c>
   b6cfc:	f8df 81b4 	ldr.w	r8, [pc, #436]	; b6eb4 <_Z10updateMenuv+0x364>
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6d00:	e9d8 3200 	ldrd	r3, r2, [r8]
   b6d04:	429a      	cmp	r2, r3
   b6d06:	d01b      	beq.n	b6d40 <_Z10updateMenuv+0x1f0>
   b6d08:	4631      	mov	r1, r6
   b6d0a:	4864      	ldr	r0, [pc, #400]	; (b6e9c <_Z10updateMenuv+0x34c>)
   b6d0c:	f7fe f99c 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d10:	4b63      	ldr	r3, [pc, #396]	; (b6ea0 <_Z10updateMenuv+0x350>)
   b6d12:	4604      	mov	r4, r0
   b6d14:	f893 c000 	ldrb.w	ip, [r3]
   b6d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d1a:	ad01      	add	r5, sp, #4
   b6d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6d26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6d2a:	2310      	movs	r3, #16
   b6d2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b6d30:	9300      	str	r3, [sp, #0]
   b6d32:	f08c 0201 	eor.w	r2, ip, #1
   b6d36:	463b      	mov	r3, r7
   b6d38:	2101      	movs	r1, #1
   b6d3a:	4638      	mov	r0, r7
   b6d3c:	f7ff fcac 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
   b6d40:	e9d8 3500 	ldrd	r3, r5, [r8]
   b6d44:	1aed      	subs	r5, r5, r3
   b6d46:	4b57      	ldr	r3, [pc, #348]	; (b6ea4 <_Z10updateMenuv+0x354>)
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6d48:	f8df b150 	ldr.w	fp, [pc, #336]	; b6e9c <_Z10updateMenuv+0x34c>
   b6d4c:	f8df 9150 	ldr.w	r9, [pc, #336]	; b6ea0 <_Z10updateMenuv+0x350>
   b6d50:	10ad      	asrs	r5, r5, #2
   b6d52:	435d      	muls	r5, r3
            uint8_t loopIter = MenuItems.size();
   b6d54:	b2ed      	uxtb	r5, r5
            if(loopIter > 2) loopIter = 2;
   b6d56:	2d02      	cmp	r5, #2
   b6d58:	bf28      	it	cs
   b6d5a:	2502      	movcs	r5, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b6d5c:	2701      	movs	r7, #1
   b6d5e:	42bd      	cmp	r5, r7
   b6d60:	f2c0 8088 	blt.w	b6e74 <_Z10updateMenuv+0x324>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6d64:	4631      	mov	r1, r6
   b6d66:	4658      	mov	r0, fp
   b6d68:	f7fe f96e 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d6c:	4604      	mov	r4, r0
   b6d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d70:	f10d 0c04 	add.w	ip, sp, #4
   b6d74:	f899 e000 	ldrb.w	lr, [r9]
   b6d78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6d84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6d88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6d8c:	fa5f f887 	uxtb.w	r8, r7
   b6d90:	3701      	adds	r7, #1
   b6d92:	013b      	lsls	r3, r7, #4
   b6d94:	b29b      	uxth	r3, r3
   b6d96:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   b6d9a:	9300      	str	r3, [sp, #0]
   b6d9c:	2300      	movs	r3, #0
   b6d9e:	f08e 0201 	eor.w	r2, lr, #1
   b6da2:	4619      	mov	r1, r3
   b6da4:	4640      	mov	r0, r8
   b6da6:	f7ff fc77 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b6daa:	e7d8      	b.n	b6d5e <_Z10updateMenuv+0x20e>
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6dac:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b6ea0 <_Z10updateMenuv+0x350>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6db0:	483a      	ldr	r0, [pc, #232]	; (b6e9c <_Z10updateMenuv+0x34c>)
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6db2:	f899 b000 	ldrb.w	fp, [r9]
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6db6:	2f04      	cmp	r7, #4
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6db8:	f08b 0b01 	eor.w	fp, fp, #1
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6dbc:	4631      	mov	r1, r6
   b6dbe:	ad01      	add	r5, sp, #4
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6dc0:	d17a      	bne.n	b6eb8 <_Z10updateMenuv+0x368>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6dc2:	f7fe f941 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6dc6:	4684      	mov	ip, r0
   b6dc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6dcc:	462c      	mov	r4, r5
   b6dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ddc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b6de0:	2330      	movs	r3, #48	; 0x30
   b6de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6de6:	465a      	mov	r2, fp
   b6de8:	4638      	mov	r0, r7
   b6dea:	9300      	str	r3, [sp, #0]
   b6dec:	2101      	movs	r1, #1
   b6dee:	2300      	movs	r3, #0
   b6df0:	f7ff fc52 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6df4:	4631      	mov	r1, r6
   b6df6:	4829      	ldr	r0, [pc, #164]	; (b6e9c <_Z10updateMenuv+0x34c>)
   b6df8:	f7fe f926 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6dfc:	4607      	mov	r7, r0
   b6dfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6e00:	46ac      	mov	ip, r5
   b6e02:	f899 b000 	ldrb.w	fp, [r9]
   b6e06:	f898 e000 	ldrb.w	lr, [r8]
   b6e0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e0e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6e10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e1a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b6e1e:	2320      	movs	r3, #32
   b6e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6e24:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b6e28:	9300      	str	r3, [sp, #0]
   b6e2a:	2300      	movs	r3, #0
   b6e2c:	4619      	mov	r1, r3
   b6e2e:	f08b 0201 	eor.w	r2, fp, #1
   b6e32:	fa5f f08e 	uxtb.w	r0, lr
   b6e36:	f7ff fc2f 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6e3a:	4631      	mov	r1, r6
   b6e3c:	4817      	ldr	r0, [pc, #92]	; (b6e9c <_Z10updateMenuv+0x34c>)
   b6e3e:	f7fe f903 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e42:	4606      	mov	r6, r0
   b6e44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6e46:	f899 c000 	ldrb.w	ip, [r9]
   b6e4a:	f898 7000 	ldrb.w	r7, [r8]
   b6e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e58:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b6e5c:	2310      	movs	r3, #16
   b6e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6e62:	3f02      	subs	r7, #2
   b6e64:	9300      	str	r3, [sp, #0]
   b6e66:	2300      	movs	r3, #0
   b6e68:	f08c 0201 	eor.w	r2, ip, #1
   b6e6c:	4619      	mov	r1, r3
   b6e6e:	b2f8      	uxtb	r0, r7
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6e70:	f7ff fc12 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b6e74:	4803      	ldr	r0, [pc, #12]	; (b6e84 <_Z10updateMenuv+0x334>)
   b6e76:	f002 fc25 	bl	b96c4 <_ZN15Adafruit_SH110X7displayEv>
        redrawMenu = false;
   b6e7a:	2300      	movs	r3, #0
   b6e7c:	f88a 3000 	strb.w	r3, [sl]
   b6e80:	e6dd      	b.n	b6c3e <_Z10updateMenuv+0xee>
   b6e82:	bf00      	nop
   b6e84:	2003de60 	.word	0x2003de60
   b6e88:	2003dca4 	.word	0x2003dca4
   b6e8c:	002d0030 	.word	0x002d0030
   b6e90:	000c1375 	.word	0x000c1375
   b6e94:	eeeeeeef 	.word	0xeeeeeeef
   b6e98:	000c0da6 	.word	0x000c0da6
   b6e9c:	2003dcc0 	.word	0x2003dcc0
   b6ea0:	2003da89 	.word	0x2003da89
   b6ea4:	38e38e39 	.word	0x38e38e39
   b6ea8:	2003da88 	.word	0x2003da88
   b6eac:	2003dd59 	.word	0x2003dd59
   b6eb0:	2003de09 	.word	0x2003de09
   b6eb4:	2003dc8c 	.word	0x2003dc8c
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6eb8:	f7fe f8c6 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6ebc:	4604      	mov	r4, r0
   b6ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6ec0:	f107 0c01 	add.w	ip, r7, #1
   b6ec4:	462f      	mov	r7, r5
   b6ec6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6eca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6ece:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6ed0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6ed4:	2330      	movs	r3, #48	; 0x30
   b6ed6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b6eda:	9300      	str	r3, [sp, #0]
   b6edc:	2300      	movs	r3, #0
   b6ede:	465a      	mov	r2, fp
   b6ee0:	4619      	mov	r1, r3
   b6ee2:	fa5f f08c 	uxtb.w	r0, ip
   b6ee6:	f7ff fbd7 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6eea:	4631      	mov	r1, r6
   b6eec:	481d      	ldr	r0, [pc, #116]	; (b6f64 <_Z10updateMenuv+0x414>)
   b6eee:	f898 b000 	ldrb.w	fp, [r8]
   b6ef2:	f7fe f8a9 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6ef6:	4604      	mov	r4, r0
   b6ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6efa:	46ac      	mov	ip, r5
   b6efc:	f899 e000 	ldrb.w	lr, [r9]
   b6f00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6f06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6f0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6f10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6f14:	2320      	movs	r3, #32
   b6f16:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b6f1a:	f08e 0201 	eor.w	r2, lr, #1
   b6f1e:	9300      	str	r3, [sp, #0]
   b6f20:	2101      	movs	r1, #1
   b6f22:	2300      	movs	r3, #0
   b6f24:	4658      	mov	r0, fp
   b6f26:	f7ff fbb7 	bl	b6698 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6f2a:	4631      	mov	r1, r6
   b6f2c:	480d      	ldr	r0, [pc, #52]	; (b6f64 <_Z10updateMenuv+0x414>)
   b6f2e:	f7fe f88b 	bl	b5048 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6f32:	462c      	mov	r4, r5
   b6f34:	4605      	mov	r5, r0
   b6f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f38:	f899 c000 	ldrb.w	ip, [r9]
   b6f3c:	f898 6000 	ldrb.w	r6, [r8]
   b6f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6f4e:	2310      	movs	r3, #16
   b6f50:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b6f54:	3e01      	subs	r6, #1
   b6f56:	9300      	str	r3, [sp, #0]
   b6f58:	2300      	movs	r3, #0
   b6f5a:	f08c 0201 	eor.w	r2, ip, #1
   b6f5e:	4619      	mov	r1, r3
   b6f60:	b2f0      	uxtb	r0, r6
   b6f62:	e785      	b.n	b6e70 <_Z10updateMenuv+0x320>
   b6f64:	2003dcc0 	.word	0x2003dcc0

000b6f68 <loop>:
void loop() {
   b6f68:	b570      	push	{r4, r5, r6, lr}
    if(postStatus){
   b6f6a:	4d2e      	ldr	r5, [pc, #184]	; (b7024 <loop+0xbc>)
   b6f6c:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b6f6e:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b6f70:	b1a3      	cbz	r3, b6f9c <loop+0x34>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b6f72:	4b2d      	ldr	r3, [pc, #180]	; (b7028 <loop+0xc0>)
   b6f74:	681b      	ldr	r3, [r3, #0]
   b6f76:	2b00      	cmp	r3, #0
   b6f78:	d045      	beq.n	b7006 <loop+0x9e>
   b6f7a:	789a      	ldrb	r2, [r3, #2]
   b6f7c:	492b      	ldr	r1, [pc, #172]	; (b702c <loop+0xc4>)
   b6f7e:	a802      	add	r0, sp, #8
   b6f80:	f003 f81e 	bl	b9fc0 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b6f84:	4c2a      	ldr	r4, [pc, #168]	; (b7030 <loop+0xc8>)
   b6f86:	7823      	ldrb	r3, [r4, #0]
   b6f88:	9300      	str	r3, [sp, #0]
   b6f8a:	2301      	movs	r3, #1
   b6f8c:	461a      	mov	r2, r3
   b6f8e:	2100      	movs	r1, #0
   b6f90:	a802      	add	r0, sp, #8
   b6f92:	f7fd fe43 	bl	b4c1c <_Z8sendDataPKchbbb>
        postStatus = false;
   b6f96:	2300      	movs	r3, #0
   b6f98:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b6f9a:	7023      	strb	r3, [r4, #0]
    if((millis() - rcTime) > MTR_UPDATE_TIME){
   b6f9c:	4c25      	ldr	r4, [pc, #148]	; (b7034 <loop+0xcc>)
    updateMenu();
   b6f9e:	f7ff fdd7 	bl	b6b50 <_Z10updateMenuv>
    updateBotControl();
   b6fa2:	f7fe f865 	bl	b5070 <_Z16updateBotControlv>
   b6fa6:	f002 fd77 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - rcTime) > MTR_UPDATE_TIME){
   b6faa:	6823      	ldr	r3, [r4, #0]
   b6fac:	1ac0      	subs	r0, r0, r3
   b6fae:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b6fb2:	d906      	bls.n	b6fc2 <loop+0x5a>
        manualMotorControl(botSelect);
   b6fb4:	4b20      	ldr	r3, [pc, #128]	; (b7038 <loop+0xd0>)
   b6fb6:	7818      	ldrb	r0, [r3, #0]
   b6fb8:	f7fd fe9e 	bl	b4cf8 <_Z18manualMotorControlh>
   b6fbc:	f002 fd6c 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
        rcTime = millis();
   b6fc0:	6020      	str	r0, [r4, #0]
    if (BLE.connected()) {
   b6fc2:	f003 fd67 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6fc6:	f003 fe12 	bl	babee <_ZNK8particle14BleLocalDevice9connectedEv>
   b6fca:	b970      	cbnz	r0, b6fea <loop+0x82>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b6fcc:	4c1b      	ldr	r4, [pc, #108]	; (b703c <loop+0xd4>)
   b6fce:	f002 fd63 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
   b6fd2:	6823      	ldr	r3, [r4, #0]
   b6fd4:	1ac0      	subs	r0, r0, r3
   b6fd6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6fda:	d306      	bcc.n	b6fea <loop+0x82>
   b6fdc:	f002 fd5c 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b6fe0:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b6fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6fe6:	f7fe fea7 	bl	b5d38 <_Z7BLEScani>
      : _M_current(__i) { }
   b6fea:	4b15      	ldr	r3, [pc, #84]	; (b7040 <loop+0xd8>)
   b6fec:	e9d3 4500 	ldrd	r4, r5, [r3]
            wb.offloading = false;
   b6ff0:	2600      	movs	r6, #0
    for(WaterBot &wb: WaterBots){
   b6ff2:	42a5      	cmp	r5, r4
   b6ff4:	d00c      	beq.n	b7010 <loop+0xa8>
        if(wb.offloading){
   b6ff6:	7ba3      	ldrb	r3, [r4, #14]
   b6ff8:	b11b      	cbz	r3, b7002 <loop+0x9a>
            DataOffloader(wb.botNum);
   b6ffa:	78a0      	ldrb	r0, [r4, #2]
   b6ffc:	f7fe ffc4 	bl	b5f88 <_Z13DataOffloaderh>
            wb.offloading = false;
   b7000:	73a6      	strb	r6, [r4, #14]
      operator++() _GLIBCXX_NOEXCEPT
   b7002:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b7004:	e7f5      	b.n	b6ff2 <loop+0x8a>
        else sprintf(statusStr,"CCABspcNB");
   b7006:	490f      	ldr	r1, [pc, #60]	; (b7044 <loop+0xdc>)
   b7008:	a802      	add	r0, sp, #8
   b700a:	f007 fdee 	bl	bebea <strcpy>
   b700e:	e7b9      	b.n	b6f84 <loop+0x1c>
    XBeeHandler();
   b7010:	f7fe fd4a 	bl	b5aa8 <_Z11XBeeHandlerv>
    RPiHandler();
   b7014:	f7fd fda2 	bl	b4b5c <_Z10RPiHandlerv>
}
   b7018:	b00a      	add	sp, #40	; 0x28
   b701a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    XBeeLTEPairSet();
   b701e:	f7fd bf6d 	b.w	b4efc <_Z14XBeeLTEPairSetv>
   b7022:	bf00      	nop
   b7024:	2003ded8 	.word	0x2003ded8
   b7028:	2003dc84 	.word	0x2003dc84
   b702c:	000c1378 	.word	0x000c1378
   b7030:	2003e635 	.word	0x2003e635
   b7034:	2003dedc 	.word	0x2003dedc
   b7038:	2003dd59 	.word	0x2003dd59
   b703c:	2003dd9c 	.word	0x2003dd9c
   b7040:	2003dcc0 	.word	0x2003dcc0
   b7044:	000c1384 	.word	0x000c1384

000b7048 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b7048:	b538      	push	{r3, r4, r5, lr}
   b704a:	4604      	mov	r4, r0
   b704c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b704e:	2224      	movs	r2, #36	; 0x24
   b7050:	2100      	movs	r1, #0
   b7052:	f007 fd3c 	bl	beace <memset>

  m_vol = vol;
   b7056:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b7058:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b705a:	2b10      	cmp	r3, #16
   b705c:	d003      	beq.n	b7066 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b705e:	2b20      	cmp	r3, #32
   b7060:	d006      	beq.n	b7070 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b7062:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b7064:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b7066:	2320      	movs	r3, #32
  m_flags = F_READ;
   b7068:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b706a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b706c:	70a0      	strb	r0, [r4, #2]
  return true;
   b706e:	e7f9      	b.n	b7064 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b7070:	2340      	movs	r3, #64	; 0x40
   b7072:	e7f9      	b.n	b7068 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b7074 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b7074:	b510      	push	{r4, lr}
   b7076:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b7078:	3024      	adds	r0, #36	; 0x24
   b707a:	f000 feeb 	bl	b7e54 <_ZN8FatCache4syncEv>
   b707e:	b128      	cbz	r0, b708c <_ZN9FatVolume9cacheSyncEv+0x18>
   b7080:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b7084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b7088:	f000 bee4 	b.w	b7e54 <_ZN8FatCache4syncEv>
  }
   b708c:	bd10      	pop	{r4, pc}

000b708e <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b708e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7090:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b7092:	f043 0304 	orr.w	r3, r3, #4
   b7096:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7098:	f100 0210 	add.w	r2, r0, #16
   b709c:	6880      	ldr	r0, [r0, #8]
   b709e:	f000 bf8f 	b.w	b7fc0 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b70a4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b70a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b70a8:	7801      	ldrb	r1, [r0, #0]
   b70aa:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b70ae:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b70b0:	d003      	beq.n	b70ba <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b70b2:	2600      	movs	r6, #0
}
   b70b4:	4630      	mov	r0, r6
   b70b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b70ba:	6942      	ldr	r2, [r0, #20]
   b70bc:	4b17      	ldr	r3, [pc, #92]	; (b711c <_ZN7FatFile13addDirClusterEv+0x78>)
   b70be:	429a      	cmp	r2, r3
   b70c0:	d2f7      	bcs.n	b70b2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b70c2:	f7ff ffe4 	bl	b708e <_ZN7FatFile10addClusterEv>
   b70c6:	4606      	mov	r6, r0
   b70c8:	2800      	cmp	r0, #0
   b70ca:	d0f2      	beq.n	b70b2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b70cc:	6921      	ldr	r1, [r4, #16]
   b70ce:	68a0      	ldr	r0, [r4, #8]
   b70d0:	f000 ff0b 	bl	b7eea <_ZNK9FatVolume17clusterFirstBlockEm>
   b70d4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b70d6:	68a0      	ldr	r0, [r4, #8]
   b70d8:	2205      	movs	r2, #5
   b70da:	4639      	mov	r1, r7
   b70dc:	3024      	adds	r0, #36	; 0x24
   b70de:	f000 fee1 	bl	b7ea4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b70e2:	4680      	mov	r8, r0
   b70e4:	2800      	cmp	r0, #0
   b70e6:	d0e4      	beq.n	b70b2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b70e8:	4629      	mov	r1, r5
   b70ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   b70ee:	f007 fcee 	bl	beace <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b70f2:	2501      	movs	r5, #1
   b70f4:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b70f6:	791a      	ldrb	r2, [r3, #4]
   b70f8:	42aa      	cmp	r2, r5
   b70fa:	d909      	bls.n	b7110 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b70fc:	6818      	ldr	r0, [r3, #0]
   b70fe:	4642      	mov	r2, r8
   b7100:	19e9      	adds	r1, r5, r7
   b7102:	f001 fa3c 	bl	b857e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b7106:	2800      	cmp	r0, #0
   b7108:	d0d3      	beq.n	b70b2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b710a:	3501      	adds	r5, #1
   b710c:	b2ed      	uxtb	r5, r5
   b710e:	e7f1      	b.n	b70f4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b7110:	6963      	ldr	r3, [r4, #20]
   b7112:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b7116:	6163      	str	r3, [r4, #20]
  return true;
   b7118:	e7cc      	b.n	b70b4 <_ZN7FatFile13addDirClusterEv+0x10>
   b711a:	bf00      	nop
   b711c:	001ffe00 	.word	0x001ffe00

000b7120 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b7120:	b510      	push	{r4, lr}
   b7122:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b7124:	6880      	ldr	r0, [r0, #8]
   b7126:	460a      	mov	r2, r1
   b7128:	3024      	adds	r0, #36	; 0x24
   b712a:	69a1      	ldr	r1, [r4, #24]
   b712c:	f000 feba 	bl	b7ea4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7130:	b120      	cbz	r0, b713c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b7132:	88a3      	ldrh	r3, [r4, #4]
   b7134:	f003 030f 	and.w	r3, r3, #15
   b7138:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b713c:	bd10      	pop	{r4, pc}

000b713e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b713e:	7803      	ldrb	r3, [r0, #0]
   b7140:	b90b      	cbnz	r3, b7146 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b7142:	f7ff bf81 	b.w	b7048 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b7146:	2000      	movs	r0, #0
   b7148:	4770      	bx	lr

000b714a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b714a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b714e:	7803      	ldrb	r3, [r0, #0]
   b7150:	4604      	mov	r4, r0
   b7152:	4688      	mov	r8, r1
   b7154:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b7156:	2b00      	cmp	r3, #0
   b7158:	d05d      	beq.n	b7216 <_ZN7FatFile4readEPvj+0xcc>
   b715a:	7882      	ldrb	r2, [r0, #2]
   b715c:	07d1      	lsls	r1, r2, #31
   b715e:	d55a      	bpl.n	b7216 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b7160:	071a      	lsls	r2, r3, #28
   b7162:	d52d      	bpl.n	b71c0 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b7164:	69c3      	ldr	r3, [r0, #28]
   b7166:	6942      	ldr	r2, [r0, #20]
   b7168:	1a9b      	subs	r3, r3, r2
   b716a:	429d      	cmp	r5, r3
   b716c:	bf28      	it	cs
   b716e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b7170:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b7172:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7176:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b717a:	2e00      	cmp	r6, #0
   b717c:	f000 808f 	beq.w	b729e <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b7180:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b7182:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7184:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b7186:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7188:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b718c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b7190:	d51f      	bpl.n	b71d2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7192:	6a00      	ldr	r0, [r0, #32]
   b7194:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b7196:	68a0      	ldr	r0, [r4, #8]
   b7198:	f1ba 0f00 	cmp.w	sl, #0
   b719c:	d142      	bne.n	b7224 <_ZN7FatFile4readEPvj+0xda>
   b719e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b71a2:	d33f      	bcc.n	b7224 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b71a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b71a6:	4299      	cmp	r1, r3
   b71a8:	d03c      	beq.n	b7224 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b71aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b71ae:	d252      	bcs.n	b7256 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b71b0:	6800      	ldr	r0, [r0, #0]
   b71b2:	4642      	mov	r2, r8
   b71b4:	f001 f95a 	bl	b846c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b71b8:	b368      	cbz	r0, b7216 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b71ba:	f44f 7700 	mov.w	r7, #512	; 0x200
   b71be:	e044      	b.n	b724a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b71c0:	069b      	lsls	r3, r3, #26
   b71c2:	d5d5      	bpl.n	b7170 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b71c4:	6883      	ldr	r3, [r0, #8]
   b71c6:	891a      	ldrh	r2, [r3, #8]
   b71c8:	6943      	ldr	r3, [r0, #20]
   b71ca:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b71ce:	b29b      	uxth	r3, r3
   b71d0:	e7cb      	b.n	b716a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b71d2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b71d6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b71da:	f1ba 0f00 	cmp.w	sl, #0
   b71de:	d108      	bne.n	b71f2 <_ZN7FatFile4readEPvj+0xa8>
   b71e0:	f1b9 0f00 	cmp.w	r9, #0
   b71e4:	d105      	bne.n	b71f2 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b71e6:	b95b      	cbnz	r3, b7200 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b71e8:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b71ea:	bf4c      	ite	mi
   b71ec:	6a03      	ldrmi	r3, [r0, #32]
   b71ee:	6a23      	ldrpl	r3, [r4, #32]
   b71f0:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b71f2:	6921      	ldr	r1, [r4, #16]
   b71f4:	68a0      	ldr	r0, [r4, #8]
   b71f6:	f000 fe78 	bl	b7eea <_ZNK9FatVolume17clusterFirstBlockEm>
   b71fa:	eb09 0100 	add.w	r1, r9, r0
   b71fe:	e7ca      	b.n	b7196 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7200:	6921      	ldr	r1, [r4, #16]
   b7202:	465a      	mov	r2, fp
   b7204:	f000 fe77 	bl	b7ef6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b7208:	2800      	cmp	r0, #0
   b720a:	db04      	blt.n	b7216 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b720c:	d1f1      	bne.n	b71f2 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b720e:	7823      	ldrb	r3, [r4, #0]
   b7210:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7214:	d143      	bne.n	b729e <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b7216:	7863      	ldrb	r3, [r4, #1]
   b7218:	f043 0302 	orr.w	r3, r3, #2
   b721c:	7063      	strb	r3, [r4, #1]
  return -1;
   b721e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7222:	e03d      	b.n	b72a0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b7224:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b7228:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b722a:	f04f 0200 	mov.w	r2, #0
   b722e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b7232:	bf28      	it	cs
   b7234:	4637      	movcs	r7, r6
   b7236:	f000 fe35 	bl	b7ea4 <_ZN8FatCache4readEmh>
      if (!pc) {
   b723a:	2800      	cmp	r0, #0
   b723c:	d0eb      	beq.n	b7216 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b723e:	eb00 010a 	add.w	r1, r0, sl
   b7242:	463a      	mov	r2, r7
   b7244:	4640      	mov	r0, r8
   b7246:	f007 fc1a 	bl	bea7e <memcpy>
    m_curPosition += n;
   b724a:	6963      	ldr	r3, [r4, #20]
   b724c:	443b      	add	r3, r7
    dst += n;
   b724e:	44b8      	add	r8, r7
    m_curPosition += n;
   b7250:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b7252:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b7254:	e791      	b.n	b717a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b7256:	7822      	ldrb	r2, [r4, #0]
   b7258:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b725a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b725e:	d406      	bmi.n	b726e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b7260:	7902      	ldrb	r2, [r0, #4]
   b7262:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b7266:	b2d2      	uxtb	r2, r2
   b7268:	4592      	cmp	sl, r2
   b726a:	bf28      	it	cs
   b726c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b726e:	4299      	cmp	r1, r3
      n = 512*nb;
   b7270:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7274:	d208      	bcs.n	b7288 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b7276:	68a0      	ldr	r0, [r4, #8]
   b7278:	4653      	mov	r3, sl
   b727a:	6800      	ldr	r0, [r0, #0]
   b727c:	4642      	mov	r2, r8
   b727e:	f001 f93d 	bl	b84fc <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b7282:	2800      	cmp	r0, #0
   b7284:	d1e1      	bne.n	b724a <_ZN7FatFile4readEPvj+0x100>
   b7286:	e7c6      	b.n	b7216 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7288:	4453      	add	r3, sl
   b728a:	428b      	cmp	r3, r1
   b728c:	d9f3      	bls.n	b7276 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b728e:	3024      	adds	r0, #36	; 0x24
   b7290:	9101      	str	r1, [sp, #4]
   b7292:	f000 fddf 	bl	b7e54 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b7296:	9901      	ldr	r1, [sp, #4]
   b7298:	2800      	cmp	r0, #0
   b729a:	d1ec      	bne.n	b7276 <_ZN7FatFile4readEPvj+0x12c>
   b729c:	e7bb      	b.n	b7216 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b729e:	1ba8      	subs	r0, r5, r6
}
   b72a0:	b003      	add	sp, #12
   b72a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b72a6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b72a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b72a8:	2201      	movs	r2, #1
   b72aa:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b72ae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b72b2:	4604      	mov	r4, r0
   b72b4:	f7ff ff49 	bl	b714a <_ZN7FatFile4readEPvj>
   b72b8:	2801      	cmp	r0, #1
   b72ba:	bf0a      	itet	eq
   b72bc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b72c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b72c4:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b72c8:	b002      	add	sp, #8
   b72ca:	bd70      	pop	{r4, r5, r6, pc}

000b72cc <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b72cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b72ce:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b72d0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b72d4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b72d6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b72da:	d000      	beq.n	b72de <_ZN7FatFile12readDirCacheEb+0x12>
   b72dc:	b999      	cbnz	r1, b7306 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b72de:	2201      	movs	r2, #1
   b72e0:	f10d 0107 	add.w	r1, sp, #7
   b72e4:	4620      	mov	r0, r4
   b72e6:	f7ff ff30 	bl	b714a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b72ea:	b240      	sxtb	r0, r0
   b72ec:	2801      	cmp	r0, #1
   b72ee:	d002      	beq.n	b72f6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b72f0:	2000      	movs	r0, #0
}
   b72f2:	b003      	add	sp, #12
   b72f4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b72f6:	6963      	ldr	r3, [r4, #20]
   b72f8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b72fa:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b72fc:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b72fe:	3030      	adds	r0, #48	; 0x30
   b7300:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b7304:	e7f5      	b.n	b72f2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b7306:	3320      	adds	r3, #32
   b7308:	e7f7      	b.n	b72fa <_ZN7FatFile12readDirCacheEb+0x2e>

000b730a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b730e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b7310:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b7312:	4604      	mov	r4, r0
   b7314:	460d      	mov	r5, r1
  if (!isOpen()) {
   b7316:	b162      	cbz	r2, b7332 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b7318:	6940      	ldr	r0, [r0, #20]
   b731a:	4288      	cmp	r0, r1
   b731c:	d002      	beq.n	b7324 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b731e:	b919      	cbnz	r1, b7328 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b7320:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b7322:	6165      	str	r5, [r4, #20]
    return true;
   b7324:	2001      	movs	r0, #1
   b7326:	e006      	b.n	b7336 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b7328:	0716      	lsls	r6, r2, #28
   b732a:	d506      	bpl.n	b733a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b732c:	69e3      	ldr	r3, [r4, #28]
   b732e:	428b      	cmp	r3, r1
   b7330:	d20b      	bcs.n	b734a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b7332:	6127      	str	r7, [r4, #16]
  return false;
   b7334:	2000      	movs	r0, #0
}
   b7336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b733a:	0691      	lsls	r1, r2, #26
   b733c:	d505      	bpl.n	b734a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b733e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b7340:	891b      	ldrh	r3, [r3, #8]
   b7342:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b7346:	d9ec      	bls.n	b7322 <_ZN7FatFile7seekSetEm+0x18>
   b7348:	e7f3      	b.n	b7332 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b734a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b734e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b7352:	1e43      	subs	r3, r0, #1
   b7354:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7358:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b735a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b735c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b735e:	42b3      	cmp	r3, r6
   b7360:	d800      	bhi.n	b7364 <_ZN7FatFile7seekSetEm+0x5a>
   b7362:	b998      	cbnz	r0, b738c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7364:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b7366:	bf4c      	ite	mi
   b7368:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b736c:	6a23      	ldrpl	r3, [r4, #32]
   b736e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7370:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b7374:	2e00      	cmp	r6, #0
   b7376:	d0d4      	beq.n	b7322 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7378:	6921      	ldr	r1, [r4, #16]
   b737a:	68a0      	ldr	r0, [r4, #8]
   b737c:	4642      	mov	r2, r8
   b737e:	f000 fdba 	bl	b7ef6 <_ZN9FatVolume6fatGetEmPm>
   b7382:	2800      	cmp	r0, #0
   b7384:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b7388:	dcf4      	bgt.n	b7374 <_ZN7FatFile7seekSetEm+0x6a>
   b738a:	e7d2      	b.n	b7332 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b738c:	1af6      	subs	r6, r6, r3
   b738e:	e7ef      	b.n	b7370 <_ZN7FatFile7seekSetEm+0x66>

000b7390 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b7390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7392:	460f      	mov	r7, r1
   b7394:	4604      	mov	r4, r0
   b7396:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7398:	2100      	movs	r1, #0
   b739a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b739c:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b739e:	f007 fb96 	bl	beace <memset>
  m_vol = dirFile->m_vol;
   b73a2:	68b8      	ldr	r0, [r7, #8]
   b73a4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b73a6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b73a8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b73ac:	6a3b      	ldr	r3, [r7, #32]
   b73ae:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b73b0:	016a      	lsls	r2, r5, #5
   b73b2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b73b6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b73ba:	071f      	lsls	r7, r3, #28
   b73bc:	d444      	bmi.n	b7448 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b73be:	f003 0317 	and.w	r3, r3, #23
   b73c2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b73c4:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b73c8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b73cc:	bf04      	itt	eq
   b73ce:	f043 0308 	orreq.w	r3, r3, #8
   b73d2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b73d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b73d8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b73da:	f006 0303 	and.w	r3, r6, #3
   b73de:	2b01      	cmp	r3, #1
   b73e0:	d02c      	beq.n	b743c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b73e2:	2b02      	cmp	r3, #2
   b73e4:	d028      	beq.n	b7438 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b73e6:	bb7b      	cbnz	r3, b7448 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b73e8:	0571      	lsls	r1, r6, #21
   b73ea:	d42d      	bmi.n	b7448 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b73ec:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b73ee:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b73f0:	78a1      	ldrb	r1, [r4, #2]
   b73f2:	078b      	lsls	r3, r1, #30
   b73f4:	d504      	bpl.n	b7400 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b73f6:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b73f8:	06df      	lsls	r7, r3, #27
   b73fa:	d425      	bmi.n	b7448 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b73fc:	07dd      	lsls	r5, r3, #31
   b73fe:	d423      	bmi.n	b7448 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b7400:	11b3      	asrs	r3, r6, #6
   b7402:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b7406:	f006 0508 	and.w	r5, r6, #8
   b740a:	432b      	orrs	r3, r5
   b740c:	430b      	orrs	r3, r1
   b740e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b7410:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b7412:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7414:	1883      	adds	r3, r0, r2
   b7416:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b741a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b741e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b7422:	0572      	lsls	r2, r6, #21
   b7424:	d513      	bpl.n	b744e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7426:	b959      	cbnz	r1, b7440 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b7428:	78a3      	ldrb	r3, [r4, #2]
   b742a:	f043 0304 	orr.w	r3, r3, #4
   b742e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7430:	0473      	lsls	r3, r6, #17
   b7432:	d410      	bmi.n	b7456 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7434:	2001      	movs	r0, #1
}
   b7436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7438:	2303      	movs	r3, #3
   b743a:	e7d8      	b.n	b73ee <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b743c:	2302      	movs	r3, #2
   b743e:	e7d6      	b.n	b73ee <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7440:	f000 fdf9 	bl	b8036 <_ZN9FatVolume9freeChainEm>
   b7444:	2800      	cmp	r0, #0
   b7446:	d1ef      	bne.n	b7428 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7448:	2000      	movs	r0, #0
   b744a:	7020      	strb	r0, [r4, #0]
  return false;
   b744c:	e7f3      	b.n	b7436 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b744e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b7450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7452:	61e3      	str	r3, [r4, #28]
   b7454:	e7ec      	b.n	b7430 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7456:	69e1      	ldr	r1, [r4, #28]
   b7458:	4620      	mov	r0, r4
   b745a:	f7ff ff56 	bl	b730a <_ZN7FatFile7seekSetEm>
   b745e:	2800      	cmp	r0, #0
   b7460:	d1e8      	bne.n	b7434 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b7462:	e7f1      	b.n	b7448 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b7464 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b7464:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b7466:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b7468:	4604      	mov	r4, r0
  if (!isOpen()) {
   b746a:	b90b      	cbnz	r3, b7470 <_ZN7FatFile4syncEv+0xc>
    return true;
   b746c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b746e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7470:	7883      	ldrb	r3, [r0, #2]
   b7472:	075a      	lsls	r2, r3, #29
   b7474:	d523      	bpl.n	b74be <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7476:	2101      	movs	r1, #1
   b7478:	f7ff fe52 	bl	b7120 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b747c:	4605      	mov	r5, r0
   b747e:	b928      	cbnz	r0, b748c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7480:	7863      	ldrb	r3, [r4, #1]
   b7482:	f043 0301 	orr.w	r3, r3, #1
   b7486:	7063      	strb	r3, [r4, #1]
  return false;
   b7488:	2000      	movs	r0, #0
   b748a:	e7f0      	b.n	b746e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b748c:	7803      	ldrb	r3, [r0, #0]
   b748e:	2be5      	cmp	r3, #229	; 0xe5
   b7490:	d0f6      	beq.n	b7480 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b7492:	7823      	ldrb	r3, [r4, #0]
   b7494:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b7496:	bf44      	itt	mi
   b7498:	69e3      	ldrmi	r3, [r4, #28]
   b749a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b749c:	6a23      	ldr	r3, [r4, #32]
   b749e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b74a0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b74a2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b74a4:	4b09      	ldr	r3, [pc, #36]	; (b74cc <_ZN7FatFile4syncEv+0x68>)
   b74a6:	681b      	ldr	r3, [r3, #0]
   b74a8:	b12b      	cbz	r3, b74b6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b74aa:	f100 0116 	add.w	r1, r0, #22
   b74ae:	3018      	adds	r0, #24
   b74b0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b74b2:	8b2b      	ldrh	r3, [r5, #24]
   b74b4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b74b6:	78a3      	ldrb	r3, [r4, #2]
   b74b8:	f023 0304 	bic.w	r3, r3, #4
   b74bc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b74be:	68a0      	ldr	r0, [r4, #8]
   b74c0:	f7ff fdd8 	bl	b7074 <_ZN9FatVolume9cacheSyncEv>
   b74c4:	2800      	cmp	r0, #0
   b74c6:	d0db      	beq.n	b7480 <_ZN7FatFile4syncEv+0x1c>
   b74c8:	e7d0      	b.n	b746c <_ZN7FatFile4syncEv+0x8>
   b74ca:	bf00      	nop
   b74cc:	2003e638 	.word	0x2003e638

000b74d0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b74d0:	b510      	push	{r4, lr}
   b74d2:	4604      	mov	r4, r0
  bool rtn = sync();
   b74d4:	f7ff ffc6 	bl	b7464 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b74d8:	2300      	movs	r3, #0
   b74da:	7023      	strb	r3, [r4, #0]
}
   b74dc:	bd10      	pop	{r4, pc}

000b74de <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b74de:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74e0:	b093      	sub	sp, #76	; 0x4c
   b74e2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b74e4:	2300      	movs	r3, #0
   b74e6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b74e8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b74ea:	9201      	str	r2, [sp, #4]
   b74ec:	4606      	mov	r6, r0
   b74ee:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b74f0:	b113      	cbz	r3, b74f8 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b74f2:	2000      	movs	r0, #0
}
   b74f4:	b013      	add	sp, #76	; 0x4c
   b74f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b74f8:	780b      	ldrb	r3, [r1, #0]
   b74fa:	f013 0f70 	tst.w	r3, #112	; 0x70
   b74fe:	d0f8      	beq.n	b74f2 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7500:	7813      	ldrb	r3, [r2, #0]
   b7502:	2b2f      	cmp	r3, #47	; 0x2f
   b7504:	d112      	bne.n	b752c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b7506:	9a01      	ldr	r2, [sp, #4]
   b7508:	7813      	ldrb	r3, [r2, #0]
   b750a:	2b2f      	cmp	r3, #47	; 0x2f
   b750c:	d102      	bne.n	b7514 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b750e:	3201      	adds	r2, #1
   b7510:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b7512:	e7f8      	b.n	b7506 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b7514:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b7516:	b91b      	cbnz	r3, b7520 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b7518:	4630      	mov	r0, r6
   b751a:	f7ff fe10 	bl	b713e <_ZN7FatFile8openRootEP9FatVolume>
   b751e:	e7e9      	b.n	b74f4 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7520:	a809      	add	r0, sp, #36	; 0x24
   b7522:	f7ff fd91 	bl	b7048 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b7526:	2800      	cmp	r0, #0
   b7528:	d0e3      	beq.n	b74f2 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b752a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b752c:	9801      	ldr	r0, [sp, #4]
   b752e:	aa01      	add	r2, sp, #4
   b7530:	a903      	add	r1, sp, #12
   b7532:	f000 f931 	bl	b7798 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b7536:	2800      	cmp	r0, #0
   b7538:	d0db      	beq.n	b74f2 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b753a:	9b01      	ldr	r3, [sp, #4]
   b753c:	781b      	ldrb	r3, [r3, #0]
   b753e:	b19b      	cbz	r3, b7568 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7540:	2300      	movs	r3, #0
   b7542:	aa03      	add	r2, sp, #12
   b7544:	4621      	mov	r1, r4
   b7546:	4630      	mov	r0, r6
   b7548:	f000 faba 	bl	b7ac0 <_ZN7FatFile4openEPS_P7fname_ti>
   b754c:	2800      	cmp	r0, #0
   b754e:	d0d0      	beq.n	b74f2 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7550:	4635      	mov	r5, r6
   b7552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7554:	ac09      	add	r4, sp, #36	; 0x24
   b7556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b755a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b755c:	682b      	ldr	r3, [r5, #0]
   b755e:	6023      	str	r3, [r4, #0]
    close();
   b7560:	4630      	mov	r0, r6
   b7562:	f7ff ffb5 	bl	b74d0 <_ZN7FatFile5closeEv>
  while (1) {
   b7566:	e7e0      	b.n	b752a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b7568:	463b      	mov	r3, r7
   b756a:	aa03      	add	r2, sp, #12
   b756c:	4621      	mov	r1, r4
   b756e:	4630      	mov	r0, r6
   b7570:	f000 faa6 	bl	b7ac0 <_ZN7FatFile4openEPS_P7fname_ti>
   b7574:	e7be      	b.n	b74f4 <_ZN7FatFile4openEPS_PKci+0x16>

000b7576 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b7576:	b500      	push	{lr}
   b7578:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b757a:	2300      	movs	r3, #0
   b757c:	460a      	mov	r2, r1
   b757e:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b7580:	4601      	mov	r1, r0
   b7582:	2301      	movs	r3, #1
   b7584:	a801      	add	r0, sp, #4
   b7586:	f7ff ffaa 	bl	b74de <_ZN7FatFile4openEPS_PKci>
   b758a:	b110      	cbz	r0, b7592 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b758c:	a801      	add	r0, sp, #4
   b758e:	f000 f9e1 	bl	b7954 <_ZN7FatFile6removeEv>
}
   b7592:	b00b      	add	sp, #44	; 0x2c
   b7594:	f85d fb04 	ldr.w	pc, [sp], #4

000b7598 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b759c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b759e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b75a0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b75a2:	4604      	mov	r4, r0
   b75a4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b75a6:	d55b      	bpl.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
   b75a8:	7883      	ldrb	r3, [r0, #2]
   b75aa:	079a      	lsls	r2, r3, #30
   b75ac:	d558      	bpl.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b75ae:	071b      	lsls	r3, r3, #28
   b75b0:	d451      	bmi.n	b7656 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b75b2:	6963      	ldr	r3, [r4, #20]
   b75b4:	43db      	mvns	r3, r3
   b75b6:	42bb      	cmp	r3, r7
   b75b8:	d352      	bcc.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
   b75ba:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b75bc:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b75c0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b75c2:	f1b8 0f00 	cmp.w	r8, #0
   b75c6:	f000 8091 	beq.w	b76ec <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b75ca:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b75cc:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b75ce:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b75d2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b75d6:	d10e      	bne.n	b75f6 <_ZN7FatFile5writeEPKvj+0x5e>
   b75d8:	b96d      	cbnz	r5, b75f6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b75da:	6921      	ldr	r1, [r4, #16]
   b75dc:	2900      	cmp	r1, #0
   b75de:	d046      	beq.n	b766e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b75e0:	4652      	mov	r2, sl
   b75e2:	f000 fc88 	bl	b7ef6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b75e6:	2800      	cmp	r0, #0
   b75e8:	db3a      	blt.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b75ea:	d104      	bne.n	b75f6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b75ec:	4620      	mov	r0, r4
   b75ee:	f7ff fd4e 	bl	b708e <_ZN7FatFile10addClusterEv>
   b75f2:	2800      	cmp	r0, #0
   b75f4:	d034      	beq.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b75f6:	6921      	ldr	r1, [r4, #16]
   b75f8:	68a0      	ldr	r0, [r4, #8]
   b75fa:	f000 fc76 	bl	b7eea <_ZNK9FatVolume17clusterFirstBlockEm>
   b75fe:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7600:	68a0      	ldr	r0, [r4, #8]
   b7602:	b915      	cbnz	r5, b760a <_ZN7FatFile5writeEPKvj+0x72>
   b7604:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b7608:	d23f      	bcs.n	b768a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b760a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b760e:	4546      	cmp	r6, r8
   b7610:	bf28      	it	cs
   b7612:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7614:	2d00      	cmp	r5, #0
   b7616:	d136      	bne.n	b7686 <_ZN7FatFile5writeEPKvj+0xee>
   b7618:	6962      	ldr	r2, [r4, #20]
   b761a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b761c:	429a      	cmp	r2, r3
   b761e:	bf34      	ite	cc
   b7620:	2201      	movcc	r2, #1
   b7622:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7624:	3024      	adds	r0, #36	; 0x24
   b7626:	f000 fc3d 	bl	b7ea4 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b762a:	b1c8      	cbz	r0, b7660 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b762c:	4428      	add	r0, r5
   b762e:	4632      	mov	r2, r6
   b7630:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7632:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7634:	f007 fa23 	bl	bea7e <memcpy>
      if (512 == (n + blockOffset)) {
   b7638:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b763c:	d104      	bne.n	b7648 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b763e:	68a0      	ldr	r0, [r4, #8]
   b7640:	3024      	adds	r0, #36	; 0x24
   b7642:	f000 fc07 	bl	b7e54 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b7646:	b158      	cbz	r0, b7660 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7648:	6963      	ldr	r3, [r4, #20]
   b764a:	4433      	add	r3, r6
   b764c:	6163      	str	r3, [r4, #20]
    src += n;
   b764e:	44b1      	add	r9, r6
    nToWrite -= n;
   b7650:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7654:	e7b4      	b.n	b75c0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b7656:	69c1      	ldr	r1, [r0, #28]
   b7658:	f7ff fe57 	bl	b730a <_ZN7FatFile7seekSetEm>
   b765c:	2800      	cmp	r0, #0
   b765e:	d1a8      	bne.n	b75b2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7660:	7863      	ldrb	r3, [r4, #1]
   b7662:	f043 0301 	orr.w	r3, r3, #1
   b7666:	7063      	strb	r3, [r4, #1]
  return -1;
   b7668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b766c:	e050      	b.n	b7710 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b766e:	6a23      	ldr	r3, [r4, #32]
   b7670:	b93b      	cbnz	r3, b7682 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7672:	4620      	mov	r0, r4
   b7674:	f7ff fd0b 	bl	b708e <_ZN7FatFile10addClusterEv>
   b7678:	2800      	cmp	r0, #0
   b767a:	d0f1      	beq.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b767c:	6923      	ldr	r3, [r4, #16]
   b767e:	6223      	str	r3, [r4, #32]
   b7680:	e7b9      	b.n	b75f6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7682:	6123      	str	r3, [r4, #16]
   b7684:	e7b7      	b.n	b75f6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b7686:	2201      	movs	r2, #1
   b7688:	e7cc      	b.n	b7624 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b768a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b768e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7690:	d31b      	bcc.n	b76ca <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7692:	f890 c004 	ldrb.w	ip, [r0, #4]
   b7696:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b769a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b769c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b76a0:	4573      	cmp	r3, lr
   b76a2:	bf28      	it	cs
   b76a4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b76a6:	4291      	cmp	r1, r2
      n = 512*nb;
   b76a8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b76ac:	d307      	bcc.n	b76be <_ZN7FatFile5writeEPKvj+0x126>
   b76ae:	441a      	add	r2, r3
   b76b0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b76b2:	bf82      	ittt	hi
   b76b4:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b76b8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b76bc:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b76be:	68a5      	ldr	r5, [r4, #8]
   b76c0:	464a      	mov	r2, r9
   b76c2:	6828      	ldr	r0, [r5, #0]
   b76c4:	f000 ffd1 	bl	b866a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b76c8:	e7bd      	b.n	b7646 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b76ca:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b76cc:	bf02      	ittt	eq
   b76ce:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b76d2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b76d6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b76d8:	68a3      	ldr	r3, [r4, #8]
   b76da:	464a      	mov	r2, r9
   b76dc:	6818      	ldr	r0, [r3, #0]
   b76de:	f000 ff4e 	bl	b857e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b76e2:	2800      	cmp	r0, #0
   b76e4:	d0bc      	beq.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b76e6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b76ea:	e7ad      	b.n	b7648 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b76ec:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b76ee:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b76f0:	42b2      	cmp	r2, r6
   b76f2:	d204      	bcs.n	b76fe <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b76f4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b76f6:	f043 0304 	orr.w	r3, r3, #4
   b76fa:	70a3      	strb	r3, [r4, #2]
   b76fc:	e003      	b.n	b7706 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b76fe:	4a08      	ldr	r2, [pc, #32]	; (b7720 <_ZN7FatFile5writeEPKvj+0x188>)
   b7700:	6812      	ldr	r2, [r2, #0]
   b7702:	2a00      	cmp	r2, #0
   b7704:	d1f7      	bne.n	b76f6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b7706:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b770a:	2b00      	cmp	r3, #0
   b770c:	db02      	blt.n	b7714 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b770e:	4638      	mov	r0, r7
}
   b7710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7714:	4620      	mov	r0, r4
   b7716:	f7ff fea5 	bl	b7464 <_ZN7FatFile4syncEv>
   b771a:	2800      	cmp	r0, #0
   b771c:	d1f7      	bne.n	b770e <_ZN7FatFile5writeEPKvj+0x176>
   b771e:	e79f      	b.n	b7660 <_ZN7FatFile5writeEPKvj+0xc8>
   b7720:	2003e638 	.word	0x2003e638

000b7724 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b7724:	2904      	cmp	r1, #4
   b7726:	d804      	bhi.n	b7732 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b7728:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b772c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b7730:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7732:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7734:	bf9b      	ittet	ls
   b7736:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b773a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b773e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7740:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7742:	bf84      	itt	hi
   b7744:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b7748:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b774a:	4770      	bx	lr

000b774c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b774c:	1e41      	subs	r1, r0, #1
   b774e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b7752:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7754:	0842      	lsrs	r2, r0, #1
   b7756:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b775a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b775e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7762:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7764:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7766:	d1f5      	bne.n	b7754 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b7768:	4770      	bx	lr

000b776a <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b776a:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b776c:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b776e:	4604      	mov	r4, r0
   b7770:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b7772:	b923      	cbnz	r3, b777e <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b7774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b7778:	6889      	ldr	r1, [r1, #8]
   b777a:	f7ff bce0 	b.w	b713e <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b777e:	2224      	movs	r2, #36	; 0x24
   b7780:	2100      	movs	r1, #0
   b7782:	f007 f9a4 	bl	beace <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b7786:	2310      	movs	r3, #16
  m_flags = F_READ;
   b7788:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b778a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b778c:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b778e:	68ab      	ldr	r3, [r5, #8]
   b7790:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b7792:	68eb      	ldr	r3, [r5, #12]
   b7794:	6223      	str	r3, [r4, #32]
}
   b7796:	bd38      	pop	{r3, r4, r5, pc}

000b7798 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b7798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b779c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b779e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b77a2:	2b20      	cmp	r3, #32
   b77a4:	d0fa      	beq.n	b779c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b77a6:	4d6a      	ldr	r5, [pc, #424]	; (b7950 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b77a8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b77aa:	2400      	movs	r4, #0
    c = path[len];
   b77ac:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b77ae:	b1c3      	cbz	r3, b77e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b77b0:	2b2f      	cmp	r3, #47	; 0x2f
   b77b2:	d016      	beq.n	b77e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b77b4:	2b5c      	cmp	r3, #92	; 0x5c
   b77b6:	d102      	bne.n	b77be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b77b8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b77ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b77be:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b77c2:	b2c0      	uxtb	r0, r0
   b77c4:	281d      	cmp	r0, #29
   b77c6:	d803      	bhi.n	b77d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b77c8:	fa25 f000 	lsr.w	r0, r5, r0
   b77cc:	07c0      	lsls	r0, r0, #31
   b77ce:	d4f3      	bmi.n	b77b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b77d0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b77d4:	283c      	cmp	r0, #60	; 0x3c
   b77d6:	d0ef      	beq.n	b77b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b77d8:	3b20      	subs	r3, #32
   b77da:	2b5e      	cmp	r3, #94	; 0x5e
   b77dc:	d8ec      	bhi.n	b77b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b77de:	3401      	adds	r4, #1
    c = path[len];
   b77e0:	e7e4      	b.n	b77ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b77e2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b77e4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b77e6:	4607      	mov	r7, r0
   b77e8:	f810 5b01 	ldrb.w	r5, [r0], #1
   b77ec:	2d20      	cmp	r5, #32
   b77ee:	d0fa      	beq.n	b77e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b77f0:	2d2f      	cmp	r5, #47	; 0x2f
   b77f2:	d0f8      	beq.n	b77e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b77f4:	6017      	str	r7, [r2, #0]
  while (len) {
   b77f6:	b14c      	cbz	r4, b780c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b77f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b77fc:	2a2e      	cmp	r2, #46	; 0x2e
   b77fe:	d001      	beq.n	b7804 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b7800:	2a20      	cmp	r2, #32
   b7802:	d101      	bne.n	b7808 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b7804:	3c01      	subs	r4, #1
  while (len) {
   b7806:	e7f6      	b.n	b77f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b7808:	2cff      	cmp	r4, #255	; 0xff
   b780a:	dcd5      	bgt.n	b77b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b780c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b7810:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b7814:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b7816:	f8c1 300d 	str.w	r3, [r1, #13]
   b781a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b781c:	f04f 0800 	mov.w	r8, #0
   b7820:	f816 3008 	ldrb.w	r3, [r6, r8]
   b7824:	2b2e      	cmp	r3, #46	; 0x2e
   b7826:	d001      	beq.n	b782c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b7828:	2b20      	cmp	r3, #32
   b782a:	d102      	bne.n	b7832 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b782c:	f108 0801 	add.w	r8, r8, #1
   b7830:	e7f6      	b.n	b7820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7832:	fab8 f088 	clz	r0, r8
   b7836:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7838:	1e65      	subs	r5, r4, #1
   b783a:	1c6b      	adds	r3, r5, #1
   b783c:	d002      	beq.n	b7844 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b783e:	5d73      	ldrb	r3, [r6, r5]
   b7840:	2b2e      	cmp	r3, #46	; 0x2e
   b7842:	d114      	bne.n	b786e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7844:	f04f 0900 	mov.w	r9, #0
   b7848:	2707      	movs	r7, #7
   b784a:	464a      	mov	r2, r9
   b784c:	46ca      	mov	sl, r9
   b784e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b7852:	45a0      	cmp	r8, r4
   b7854:	da68      	bge.n	b7928 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b7856:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b785a:	2b20      	cmp	r3, #32
   b785c:	d003      	beq.n	b7866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b785e:	2b2e      	cmp	r3, #46	; 0x2e
   b7860:	d107      	bne.n	b7872 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7862:	45a8      	cmp	r8, r5
   b7864:	d012      	beq.n	b788c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b7866:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7868:	f108 0801 	add.w	r8, r8, #1
   b786c:	e7f1      	b.n	b7852 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b786e:	3d01      	subs	r5, #1
   b7870:	e7e3      	b.n	b783a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7872:	2b22      	cmp	r3, #34	; 0x22
   b7874:	d008      	beq.n	b7888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b7876:	2b7c      	cmp	r3, #124	; 0x7c
   b7878:	d006      	beq.n	b7888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b787a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b787e:	f1bc 0f05 	cmp.w	ip, #5
   b7882:	d80a      	bhi.n	b789a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b7884:	2b2d      	cmp	r3, #45	; 0x2d
   b7886:	d012      	beq.n	b78ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b7888:	45a8      	cmp	r8, r5
   b788a:	d15b      	bne.n	b7944 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b788c:	2f0a      	cmp	r7, #10
   b788e:	d04a      	beq.n	b7926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7890:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7892:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7894:	f04f 0e10 	mov.w	lr, #16
   b7898:	e7e6      	b.n	b7868 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b789a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b789e:	f1bc 0f05 	cmp.w	ip, #5
   b78a2:	d9f1      	bls.n	b7888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b78a4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b78a8:	f1bc 0f02 	cmp.w	ip, #2
   b78ac:	d9ec      	bls.n	b7888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b78ae:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b78b2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b78b6:	d8e7      	bhi.n	b7888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b78b8:	45a8      	cmp	r8, r5
   b78ba:	d0e7      	beq.n	b788c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b78bc:	42ba      	cmp	r2, r7
   b78be:	d830      	bhi.n	b7922 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b78c0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b78c4:	f1bc 0f19 	cmp.w	ip, #25
   b78c8:	d81a      	bhi.n	b7900 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b78ca:	3b20      	subs	r3, #32
        lc |= bit;
   b78cc:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b78d0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b78d2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b78d6:	f102 0c01 	add.w	ip, r2, #1
   b78da:	fa5f fc8c 	uxtb.w	ip, ip
   b78de:	440a      	add	r2, r1
      if (i < 7) {
   b78e0:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b78e4:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b78e6:	d801      	bhi.n	b78ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b78e8:	f881 c00c 	strb.w	ip, [r1, #12]
   b78ec:	4662      	mov	r2, ip
   b78ee:	e7bb      	b.n	b7868 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b78f0:	45a8      	cmp	r8, r5
   b78f2:	dc18      	bgt.n	b7926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b78f4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b78f6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b78f8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b78fa:	f04f 0e10 	mov.w	lr, #16
   b78fe:	e7b2      	b.n	b7866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b7900:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b7904:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b7908:	bf98      	it	ls
   b790a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b790e:	e7e2      	b.n	b78d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b7910:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b7912:	2001      	movs	r0, #1
   b7914:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b7916:	4419      	add	r1, r3
   b7918:	237e      	movs	r3, #126	; 0x7e
   b791a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b791c:	2331      	movs	r3, #49	; 0x31
   b791e:	738b      	strb	r3, [r1, #14]
   b7920:	e74b      	b.n	b77ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b7922:	2f0a      	cmp	r7, #10
   b7924:	d1e4      	bne.n	b78f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b7926:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b7928:	7b4b      	ldrb	r3, [r1, #13]
   b792a:	2b20      	cmp	r3, #32
   b792c:	f43f af44 	beq.w	b77b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7930:	2800      	cmp	r0, #0
   b7932:	d0ed      	beq.n	b7910 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7934:	ea1a 0f09 	tst.w	sl, r9
   b7938:	bf18      	it	ne
   b793a:	f04f 0902 	movne.w	r9, #2
   b793e:	f881 9000 	strb.w	r9, [r1]
   b7942:	e73a      	b.n	b77ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7944:	42ba      	cmp	r2, r7
   b7946:	d8ec      	bhi.n	b7922 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7948:	2000      	movs	r0, #0
      c = '_';
   b794a:	235f      	movs	r3, #95	; 0x5f
   b794c:	e7c3      	b.n	b78d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b794e:	bf00      	nop
   b7950:	31000101 	.word	0x31000101

000b7954 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b7954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7958:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b795a:	2300      	movs	r3, #0
   b795c:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b795e:	7803      	ldrb	r3, [r0, #0]
   b7960:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b7962:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7964:	d50a      	bpl.n	b797c <_ZN7FatFile6removeEv+0x28>
   b7966:	7883      	ldrb	r3, [r0, #2]
   b7968:	079a      	lsls	r2, r3, #30
   b796a:	d507      	bpl.n	b797c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b796c:	6a01      	ldr	r1, [r0, #32]
   b796e:	b939      	cbnz	r1, b7980 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7970:	2101      	movs	r1, #1
   b7972:	4620      	mov	r0, r4
   b7974:	f7ff fbd4 	bl	b7120 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7978:	4605      	mov	r5, r0
   b797a:	b938      	cbnz	r0, b798c <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b797c:	2000      	movs	r0, #0
   b797e:	e048      	b.n	b7a12 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7980:	6880      	ldr	r0, [r0, #8]
   b7982:	f000 fb58 	bl	b8036 <_ZN9FatVolume9freeChainEm>
   b7986:	2800      	cmp	r0, #0
   b7988:	d1f2      	bne.n	b7970 <_ZN7FatFile6removeEv+0x1c>
   b798a:	e7f7      	b.n	b797c <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b798c:	f7ff fede 	bl	b774c <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b7990:	27e5      	movs	r7, #229	; 0xe5
   b7992:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b7994:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b7996:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b7998:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b799a:	68a0      	ldr	r0, [r4, #8]
   b799c:	f7ff fb6a 	bl	b7074 <_ZN9FatVolume9cacheSyncEv>
   b79a0:	2800      	cmp	r0, #0
   b79a2:	d0eb      	beq.n	b797c <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b79a4:	78e3      	ldrb	r3, [r4, #3]
   b79a6:	2b00      	cmp	r3, #0
   b79a8:	d033      	beq.n	b7a12 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b79aa:	4621      	mov	r1, r4
   b79ac:	a801      	add	r0, sp, #4
   b79ae:	f7ff fedc 	bl	b776a <_ZN7FatFile11openClusterEPS_>
   b79b2:	2800      	cmp	r0, #0
   b79b4:	d0e2      	beq.n	b797c <_ZN7FatFile6removeEv+0x28>
   b79b6:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b79b8:	78e3      	ldrb	r3, [r4, #3]
   b79ba:	fa5f f885 	uxtb.w	r8, r5
   b79be:	4543      	cmp	r3, r8
   b79c0:	d3dc      	bcc.n	b797c <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b79c2:	88a1      	ldrh	r1, [r4, #4]
   b79c4:	1b49      	subs	r1, r1, r5
   b79c6:	0149      	lsls	r1, r1, #5
   b79c8:	a801      	add	r0, sp, #4
   b79ca:	f7ff fc9e 	bl	b730a <_ZN7FatFile7seekSetEm>
   b79ce:	2800      	cmp	r0, #0
   b79d0:	d0d4      	beq.n	b797c <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b79d2:	2100      	movs	r1, #0
   b79d4:	a801      	add	r0, sp, #4
   b79d6:	f7ff fc79 	bl	b72cc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b79da:	2800      	cmp	r0, #0
   b79dc:	d0ce      	beq.n	b797c <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b79de:	7ac3      	ldrb	r3, [r0, #11]
   b79e0:	2b0f      	cmp	r3, #15
   b79e2:	d1cb      	bne.n	b797c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b79e4:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b79e6:	f002 031f 	and.w	r3, r2, #31
   b79ea:	4543      	cmp	r3, r8
   b79ec:	d1c6      	bne.n	b797c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b79ee:	7b43      	ldrb	r3, [r0, #13]
   b79f0:	42b3      	cmp	r3, r6
   b79f2:	d1c3      	bne.n	b797c <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b79f4:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b79f6:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b79f8:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b79fc:	f043 0301 	orr.w	r3, r3, #1
   b7a00:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b7a04:	0653      	lsls	r3, r2, #25
   b7a06:	f105 0501 	add.w	r5, r5, #1
   b7a0a:	d5d5      	bpl.n	b79b8 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b7a0c:	68a0      	ldr	r0, [r4, #8]
   b7a0e:	f7ff fb31 	bl	b7074 <_ZN9FatVolume9cacheSyncEv>
}
   b7a12:	b00a      	add	sp, #40	; 0x28
   b7a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a18 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7a1c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7a20:	4606      	mov	r6, r0
   b7a22:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7a24:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b7a26:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7a28:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7a2c:	6861      	ldr	r1, [r4, #4]
   b7a2e:	68a2      	ldr	r2, [r4, #8]
   b7a30:	186b      	adds	r3, r5, r1
   b7a32:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7a34:	4411      	add	r1, r2
   b7a36:	4291      	cmp	r1, r2
   b7a38:	d006      	beq.n	b7a48 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b7a3a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7a3e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b7a42:	4043      	eors	r3, r0
   b7a44:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7a46:	e7f6      	b.n	b7a36 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7a48:	f1b9 0f03 	cmp.w	r9, #3
   b7a4c:	bf28      	it	cs
   b7a4e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a52:	f109 0204 	add.w	r2, r9, #4
   b7a56:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7a58:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7a5c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a5e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7a60:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a62:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7a64:	bf94      	ite	ls
   b7a66:	3130      	addls	r1, #48	; 0x30
   b7a68:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a6a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7a6c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b7a6e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a72:	d1f1      	bne.n	b7a58 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7a74:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7a78:	2100      	movs	r1, #0
   b7a7a:	735f      	strb	r7, [r3, #13]
   b7a7c:	4630      	mov	r0, r6
   b7a7e:	f7ff fc44 	bl	b730a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b7a82:	2101      	movs	r1, #1
   b7a84:	4630      	mov	r0, r6
   b7a86:	f7ff fc21 	bl	b72cc <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7a8a:	4601      	mov	r1, r0
   b7a8c:	b928      	cbnz	r0, b7a9a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b7a8e:	7870      	ldrb	r0, [r6, #1]
   b7a90:	fab0 f080 	clz	r0, r0
   b7a94:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b7a9a:	7803      	ldrb	r3, [r0, #0]
   b7a9c:	b16b      	cbz	r3, b7aba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7a9e:	7ac3      	ldrb	r3, [r0, #11]
   b7aa0:	071b      	lsls	r3, r3, #28
   b7aa2:	d4ee      	bmi.n	b7a82 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7aa4:	220b      	movs	r2, #11
   b7aa6:	4640      	mov	r0, r8
   b7aa8:	f006 ffd9 	bl	bea5e <memcmp>
   b7aac:	2800      	cmp	r0, #0
   b7aae:	d1e8      	bne.n	b7a82 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b7ab0:	3501      	adds	r5, #1
   b7ab2:	b2ad      	uxth	r5, r5
   b7ab4:	2d64      	cmp	r5, #100	; 0x64
   b7ab6:	d1b9      	bne.n	b7a2c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7ab8:	e7ed      	b.n	b7a96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7aba:	2001      	movs	r0, #1
   b7abc:	e7eb      	b.n	b7a96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b7ac0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ac4:	ed2d 8b02 	vpush	{d8}
   b7ac8:	b08b      	sub	sp, #44	; 0x2c
   b7aca:	460d      	mov	r5, r1
   b7acc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b7ace:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7ad0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b7ad2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7ad6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7ad8:	d105      	bne.n	b7ae6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7ada:	2000      	movs	r0, #0
}
   b7adc:	b00b      	add	sp, #44	; 0x2c
   b7ade:	ecbd 8b02 	vpop	{d8}
   b7ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7ae6:	9b07      	ldr	r3, [sp, #28]
   b7ae8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7aea:	2b00      	cmp	r3, #0
   b7aec:	d1f5      	bne.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b7aee:	6853      	ldr	r3, [r2, #4]
   b7af0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b7af2:	7813      	ldrb	r3, [r2, #0]
   b7af4:	079c      	lsls	r4, r3, #30
   b7af6:	bf1f      	itttt	ne
   b7af8:	9b05      	ldrne	r3, [sp, #20]
   b7afa:	330c      	addne	r3, #12
   b7afc:	220d      	movne	r2, #13
   b7afe:	fbb3 f3f2 	udivne	r3, r3, r2
   b7b02:	bf1a      	itte	ne
   b7b04:	3301      	addne	r3, #1
   b7b06:	b2db      	uxtbne	r3, r3
   b7b08:	2301      	moveq	r3, #1
    seekSet(0);
   b7b0a:	2100      	movs	r1, #0
   b7b0c:	4628      	mov	r0, r5
   b7b0e:	9303      	str	r3, [sp, #12]
   b7b10:	f7ff fbfb 	bl	b730a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7b14:	f107 030d 	add.w	r3, r7, #13
  }
   b7b18:	f04f 0b00 	mov.w	fp, #0
   b7b1c:	ee08 3a10 	vmov	s16, r3
   b7b20:	46da      	mov	sl, fp
   b7b22:	465c      	mov	r4, fp
   b7b24:	465e      	mov	r6, fp
   b7b26:	f8cd b010 	str.w	fp, [sp, #16]
   b7b2a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7b2c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b7b2e:	2101      	movs	r1, #1
   b7b30:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b7b32:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7b36:	f7ff fbc9 	bl	b72cc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7b3a:	4603      	mov	r3, r0
   b7b3c:	2800      	cmp	r0, #0
   b7b3e:	d171      	bne.n	b7c24 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7b40:	786b      	ldrb	r3, [r5, #1]
   b7b42:	2b00      	cmp	r3, #0
   b7b44:	d1c9      	bne.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7b46:	9b06      	ldr	r3, [sp, #24]
   b7b48:	059a      	lsls	r2, r3, #22
   b7b4a:	d5c6      	bpl.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7b4c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7b50:	3b01      	subs	r3, #1
   b7b52:	2b01      	cmp	r3, #1
   b7b54:	d8c1      	bhi.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7b56:	9b04      	ldr	r3, [sp, #16]
   b7b58:	2c00      	cmp	r4, #0
   b7b5a:	bf08      	it	eq
   b7b5c:	4643      	moveq	r3, r8
   b7b5e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7b60:	9b03      	ldr	r3, [sp, #12]
   b7b62:	429c      	cmp	r4, r3
   b7b64:	f0c0 80f1 	bcc.w	b7d4a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7b68:	f1b9 0f00 	cmp.w	r9, #0
   b7b6c:	f040 810a 	bne.w	b7d84 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7b70:	9b04      	ldr	r3, [sp, #16]
   b7b72:	4628      	mov	r0, r5
   b7b74:	0159      	lsls	r1, r3, #5
   b7b76:	f7ff fbc8 	bl	b730a <_ZN7FatFile7seekSetEm>
   b7b7a:	2800      	cmp	r0, #0
   b7b7c:	d0ad      	beq.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b7b7e:	9b03      	ldr	r3, [sp, #12]
   b7b80:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7b84:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7b88:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7b8a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b7b8e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7b92:	2e00      	cmp	r6, #0
   b7b94:	f000 810d 	beq.w	b7db2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7b98:	2100      	movs	r1, #0
   b7b9a:	4628      	mov	r0, r5
   b7b9c:	f7ff fb96 	bl	b72cc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7ba0:	4604      	mov	r4, r0
   b7ba2:	2800      	cmp	r0, #0
   b7ba4:	d099      	beq.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7ba6:	68aa      	ldr	r2, [r5, #8]
   b7ba8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b7bac:	454e      	cmp	r6, r9
   b7bae:	f043 0301 	orr.w	r3, r3, #1
   b7bb2:	bf0c      	ite	eq
   b7bb4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7bb8:	46b3      	movne	fp, r6
   b7bba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b7bbe:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b7bc2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b7bc6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7bca:	f107 000d 	add.w	r0, r7, #13
   b7bce:	f7ff fdbd 	bl	b774c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b7bd2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7bd6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7bd8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7bdc:	f00b 031f 	and.w	r3, fp, #31
   b7be0:	220d      	movs	r2, #13
   b7be2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7be4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7be8:	4353      	muls	r3, r2
   b7bea:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7bec:	9905      	ldr	r1, [sp, #20]
   b7bee:	4299      	cmp	r1, r3
   b7bf0:	f240 80d0 	bls.w	b7d94 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7bf4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7bf8:	2a04      	cmp	r2, #4
   b7bfa:	fa5f fe82 	uxtb.w	lr, r2
   b7bfe:	f102 0001 	add.w	r0, r2, #1
   b7c02:	f200 80cd 	bhi.w	b7da0 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7c06:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7c0a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b7c0e:	280d      	cmp	r0, #13
   b7c10:	f103 0301 	add.w	r3, r3, #1
   b7c14:	4602      	mov	r2, r0
   b7c16:	d1e9      	bne.n	b7bec <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7c18:	3e01      	subs	r6, #1
   b7c1a:	b2f6      	uxtb	r6, r6
   b7c1c:	e7b9      	b.n	b7b92 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b7c1e:	f04f 0901 	mov.w	r9, #1
   b7c22:	e783      	b.n	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7c24:	7802      	ldrb	r2, [r0, #0]
   b7c26:	2ae5      	cmp	r2, #229	; 0xe5
   b7c28:	d000      	beq.n	b7c2c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7c2a:	b97a      	cbnz	r2, b7c4c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7c2c:	9904      	ldr	r1, [sp, #16]
   b7c2e:	2c00      	cmp	r4, #0
   b7c30:	bf08      	it	eq
   b7c32:	4641      	moveq	r1, r8
   b7c34:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7c36:	9903      	ldr	r1, [sp, #12]
   b7c38:	428c      	cmp	r4, r1
        freeFound++;
   b7c3a:	bf3c      	itt	cc
   b7c3c:	3401      	addcc	r4, #1
   b7c3e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7c40:	2a00      	cmp	r2, #0
   b7c42:	d080      	beq.n	b7b46 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7c44:	2ae5      	cmp	r2, #229	; 0xe5
   b7c46:	d105      	bne.n	b7c54 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7c48:	2600      	movs	r6, #0
   b7c4a:	e76f      	b.n	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7c4c:	9903      	ldr	r1, [sp, #12]
   b7c4e:	428c      	cmp	r4, r1
   b7c50:	bf38      	it	cc
   b7c52:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7c54:	2a2e      	cmp	r2, #46	; 0x2e
   b7c56:	d0f7      	beq.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7c58:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7c5a:	290f      	cmp	r1, #15
   b7c5c:	d14a      	bne.n	b7cf4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b7c5e:	bb16      	cbnz	r6, b7ca6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b7c60:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7c64:	f43f af62 	beq.w	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7c68:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7c6c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b7c70:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b7c72:	220d      	movs	r2, #13
   b7c74:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7c78:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7c7c:	9a05      	ldr	r2, [sp, #20]
   b7c7e:	4542      	cmp	r2, r8
   b7c80:	d9e2      	bls.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7c82:	eba2 0208 	sub.w	r2, r2, r8
   b7c86:	9208      	str	r2, [sp, #32]
   b7c88:	2200      	movs	r2, #0
   b7c8a:	eb02 0108 	add.w	r1, r2, r8
   b7c8e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b7c90:	4618      	mov	r0, r3
   b7c92:	b2d1      	uxtb	r1, r2
   b7c94:	f7ff fd46 	bl	b7724 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7c98:	9908      	ldr	r1, [sp, #32]
   b7c9a:	428a      	cmp	r2, r1
   b7c9c:	d10d      	bne.n	b7cba <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b7c9e:	2800      	cmp	r0, #0
   b7ca0:	bf18      	it	ne
   b7ca2:	2600      	movne	r6, #0
   b7ca4:	e742      	b.n	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7ca6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b7caa:	fa5f fa8a 	uxtb.w	sl, sl
   b7cae:	4552      	cmp	r2, sl
   b7cb0:	d1ca      	bne.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7cb2:	7b5a      	ldrb	r2, [r3, #13]
   b7cb4:	455a      	cmp	r2, fp
   b7cb6:	d0dc      	beq.n	b7c72 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7cb8:	e7c6      	b.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7cba:	28ff      	cmp	r0, #255	; 0xff
   b7cbc:	d8c4      	bhi.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7cbe:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7cc2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7cc6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7cc8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7cca:	bf9c      	itt	ls
   b7ccc:	f10e 0020 	addls.w	r0, lr, #32
   b7cd0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7cd4:	4608      	mov	r0, r1
   b7cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7cd8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7cda:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b7cde:	f1bc 0f19 	cmp.w	ip, #25
   b7ce2:	bf9c      	itt	ls
   b7ce4:	3120      	addls	r1, #32
   b7ce6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7ce8:	4571      	cmp	r1, lr
   b7cea:	d1ad      	bne.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7cec:	3201      	adds	r2, #1
   b7cee:	2a0d      	cmp	r2, #13
   b7cf0:	d1cb      	bne.n	b7c8a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b7cf2:	e71b      	b.n	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7cf4:	0708      	lsls	r0, r1, #28
   b7cf6:	d4a7      	bmi.n	b7c48 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7cf8:	b15e      	cbz	r6, b7d12 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7cfa:	f1ba 0f01 	cmp.w	sl, #1
   b7cfe:	f47f aeec 	bne.w	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7d02:	4618      	mov	r0, r3
   b7d04:	f7ff fd22 	bl	b774c <_ZN7FatFile11lfnChecksumEPh>
   b7d08:	4558      	cmp	r0, fp
   b7d0a:	f47f aee6 	bne.w	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7d0e:	46b1      	mov	r9, r6
   b7d10:	e00e      	b.n	b7d30 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7d12:	ee18 1a10 	vmov	r1, s16
   b7d16:	220b      	movs	r2, #11
   b7d18:	4618      	mov	r0, r3
   b7d1a:	f006 fea0 	bl	bea5e <memcmp>
   b7d1e:	2800      	cmp	r0, #0
   b7d20:	f47f af04 	bne.w	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7d24:	f897 9000 	ldrb.w	r9, [r7]
   b7d28:	f019 0901 	ands.w	r9, r9, #1
   b7d2c:	f47f af77 	bne.w	b7c1e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7d30:	9b06      	ldr	r3, [sp, #24]
   b7d32:	0519      	lsls	r1, r3, #20
   b7d34:	f53f aed1 	bmi.w	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7d38:	9b06      	ldr	r3, [sp, #24]
   b7d3a:	9807      	ldr	r0, [sp, #28]
   b7d3c:	f8cd 9000 	str.w	r9, [sp]
   b7d40:	4642      	mov	r2, r8
   b7d42:	4629      	mov	r1, r5
   b7d44:	f7ff fb24 	bl	b7390 <_ZN7FatFile15openCachedEntryEPS_tih>
   b7d48:	e6c8      	b.n	b7adc <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7d4a:	2100      	movs	r1, #0
   b7d4c:	4628      	mov	r0, r5
   b7d4e:	f7ff fabd 	bl	b72cc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7d52:	b9a0      	cbnz	r0, b7d7e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7d54:	786b      	ldrb	r3, [r5, #1]
   b7d56:	2b00      	cmp	r3, #0
   b7d58:	f47f aebf 	bne.w	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7d5c:	4628      	mov	r0, r5
   b7d5e:	f7ff f9a1 	bl	b70a4 <_ZN7FatFile13addDirClusterEv>
   b7d62:	2800      	cmp	r0, #0
   b7d64:	f43f aeb9 	beq.w	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7d68:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7d6a:	791b      	ldrb	r3, [r3, #4]
   b7d6c:	2b01      	cmp	r3, #1
   b7d6e:	f63f aefb 	bhi.w	b7b68 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b7d72:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7d74:	3410      	adds	r4, #16
   b7d76:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7d78:	42a3      	cmp	r3, r4
   b7d7a:	d8ef      	bhi.n	b7d5c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7d7c:	e6f4      	b.n	b7b68 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b7d7e:	3401      	adds	r4, #1
   b7d80:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7d82:	e6ed      	b.n	b7b60 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7d84:	4639      	mov	r1, r7
   b7d86:	4628      	mov	r0, r5
   b7d88:	f7ff fe46 	bl	b7a18 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7d8c:	2800      	cmp	r0, #0
   b7d8e:	f47f aeef 	bne.w	b7b70 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b7d92:	e6a2      	b.n	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7d94:	bf14      	ite	ne
   b7d96:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7d9a:	2100      	moveq	r1, #0
   b7d9c:	b289      	uxth	r1, r1
   b7d9e:	e72b      	b.n	b7bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7da0:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7da4:	bf94      	ite	ls
   b7da6:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7daa:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b7dae:	8091      	strh	r1, [r2, #4]
   b7db0:	e72d      	b.n	b7c0e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b7db2:	4631      	mov	r1, r6
   b7db4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7db6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7dba:	f7ff fa87 	bl	b72cc <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b7dbe:	4604      	mov	r4, r0
   b7dc0:	2800      	cmp	r0, #0
   b7dc2:	f43f ae8a 	beq.w	b7ada <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7dc6:	2220      	movs	r2, #32
   b7dc8:	4631      	mov	r1, r6
   b7dca:	f006 fe80 	bl	beace <memset>
  memcpy(dir->name, fname->sfn, 11);
   b7dce:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b7dd2:	6023      	str	r3, [r4, #0]
   b7dd4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7dd8:	6063      	str	r3, [r4, #4]
   b7dda:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b7dde:	8123      	strh	r3, [r4, #8]
   b7de0:	7dfb      	ldrb	r3, [r7, #23]
   b7de2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7de4:	783b      	ldrb	r3, [r7, #0]
   b7de6:	f003 0318 	and.w	r3, r3, #24
   b7dea:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7dec:	4b0f      	ldr	r3, [pc, #60]	; (b7e2c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b7dee:	681b      	ldr	r3, [r3, #0]
   b7df0:	b19b      	cbz	r3, b7e1a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b7df2:	f104 010e 	add.w	r1, r4, #14
   b7df6:	f104 0010 	add.w	r0, r4, #16
   b7dfa:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7dfc:	8a23      	ldrh	r3, [r4, #16]
   b7dfe:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7e00:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b7e02:	89e3      	ldrh	r3, [r4, #14]
   b7e04:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7e06:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7e08:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7e0c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7e10:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7e14:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7e18:	e78e      	b.n	b7d38 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7e1a:	2321      	movs	r3, #33	; 0x21
   b7e1c:	7423      	strb	r3, [r4, #16]
   b7e1e:	2328      	movs	r3, #40	; 0x28
   b7e20:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b7e22:	2308      	movs	r3, #8
   b7e24:	73a6      	strb	r6, [r4, #14]
   b7e26:	73e3      	strb	r3, [r4, #15]
   b7e28:	e7e8      	b.n	b7dfc <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7e2a:	bf00      	nop
   b7e2c:	2003e638 	.word	0x2003e638

000b7e30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7e30:	b513      	push	{r0, r1, r4, lr}
   b7e32:	4604      	mov	r4, r0
    }
   b7e34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7e36:	b159      	cbz	r1, b7e50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7e38:	9101      	str	r1, [sp, #4]
   b7e3a:	f006 fefc 	bl	bec36 <strlen>
   b7e3e:	6823      	ldr	r3, [r4, #0]
   b7e40:	9901      	ldr	r1, [sp, #4]
   b7e42:	68db      	ldr	r3, [r3, #12]
   b7e44:	4602      	mov	r2, r0
   b7e46:	4620      	mov	r0, r4
    }
   b7e48:	b002      	add	sp, #8
   b7e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7e4e:	4718      	bx	r3
    }
   b7e50:	b002      	add	sp, #8
   b7e52:	bd10      	pop	{r4, pc}

000b7e54 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7e56:	7803      	ldrb	r3, [r0, #0]
   b7e58:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7e5a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7e5c:	d520      	bpl.n	b7ea0 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7e5e:	6843      	ldr	r3, [r0, #4]
   b7e60:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7e62:	f100 020c 	add.w	r2, r0, #12
   b7e66:	6818      	ldr	r0, [r3, #0]
   b7e68:	9201      	str	r2, [sp, #4]
   b7e6a:	f000 fb88 	bl	b857e <_ZN9SdSpiCard10writeBlockEmPKh>
   b7e6e:	9a01      	ldr	r2, [sp, #4]
   b7e70:	4605      	mov	r5, r0
   b7e72:	b918      	cbnz	r0, b7e7c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7e74:	2500      	movs	r5, #0
}
   b7e76:	4628      	mov	r0, r5
   b7e78:	b003      	add	sp, #12
   b7e7a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7e7c:	7823      	ldrb	r3, [r4, #0]
   b7e7e:	079b      	lsls	r3, r3, #30
   b7e80:	d404      	bmi.n	b7e8c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7e82:	7823      	ldrb	r3, [r4, #0]
   b7e84:	f023 0301 	bic.w	r3, r3, #1
   b7e88:	7023      	strb	r3, [r4, #0]
   b7e8a:	e7f4      	b.n	b7e76 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7e8c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7e90:	6919      	ldr	r1, [r3, #16]
   b7e92:	4401      	add	r1, r0
   b7e94:	6818      	ldr	r0, [r3, #0]
   b7e96:	f000 fb72 	bl	b857e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7e9a:	2800      	cmp	r0, #0
   b7e9c:	d1f1      	bne.n	b7e82 <_ZN8FatCache4syncEv+0x2e>
   b7e9e:	e7e9      	b.n	b7e74 <_ZN8FatCache4syncEv+0x20>
  return true;
   b7ea0:	2501      	movs	r5, #1
   b7ea2:	e7e8      	b.n	b7e76 <_ZN8FatCache4syncEv+0x22>

000b7ea4 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7ea4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7ea6:	6883      	ldr	r3, [r0, #8]
   b7ea8:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7eaa:	4604      	mov	r4, r0
   b7eac:	460e      	mov	r6, r1
   b7eae:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7eb0:	d009      	beq.n	b7ec6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7eb2:	f7ff ffcf 	bl	b7e54 <_ZN8FatCache4syncEv>
   b7eb6:	b908      	cbnz	r0, b7ebc <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7eb8:	2000      	movs	r0, #0
}
   b7eba:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7ebc:	076b      	lsls	r3, r5, #29
   b7ebe:	d50a      	bpl.n	b7ed6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7ec0:	2300      	movs	r3, #0
   b7ec2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7ec4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7ec6:	7822      	ldrb	r2, [r4, #0]
   b7ec8:	f005 0503 	and.w	r5, r5, #3
   b7ecc:	4620      	mov	r0, r4
   b7ece:	4315      	orrs	r5, r2
   b7ed0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7ed4:	e7f1      	b.n	b7eba <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7ed6:	6863      	ldr	r3, [r4, #4]
   b7ed8:	f104 020c 	add.w	r2, r4, #12
   b7edc:	6818      	ldr	r0, [r3, #0]
   b7ede:	4631      	mov	r1, r6
   b7ee0:	f000 fac4 	bl	b846c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7ee4:	2800      	cmp	r0, #0
   b7ee6:	d1eb      	bne.n	b7ec0 <_ZN8FatCache4readEmh+0x1c>
   b7ee8:	e7e6      	b.n	b7eb8 <_ZN8FatCache4readEmh+0x14>

000b7eea <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7eea:	7983      	ldrb	r3, [r0, #6]
   b7eec:	6940      	ldr	r0, [r0, #20]
   b7eee:	3902      	subs	r1, #2
   b7ef0:	4099      	lsls	r1, r3
}
   b7ef2:	4408      	add	r0, r1
   b7ef4:	4770      	bx	lr

000b7ef6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ef6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7ef8:	b570      	push	{r4, r5, r6, lr}
   b7efa:	4605      	mov	r5, r0
   b7efc:	460c      	mov	r4, r1
   b7efe:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f00:	d802      	bhi.n	b7f08 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7f06:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f08:	69c3      	ldr	r3, [r0, #28]
   b7f0a:	428b      	cmp	r3, r1
   b7f0c:	d3f9      	bcc.n	b7f02 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7f0e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7f10:	2b20      	cmp	r3, #32
   b7f12:	d116      	bne.n	b7f42 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7f14:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7f16:	2202      	movs	r2, #2
   b7f18:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7f1c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7f20:	f7ff ffc0 	bl	b7ea4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7f24:	2800      	cmp	r0, #0
   b7f26:	d0ec      	beq.n	b7f02 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7f28:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7f2c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7f30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7f34:	69ea      	ldr	r2, [r5, #28]
   b7f36:	429a      	cmp	r2, r3
  *value = next;
   b7f38:	bf26      	itte	cs
   b7f3a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7f3c:	2001      	movcs	r0, #1
    return 0;
   b7f3e:	2000      	movcc	r0, #0
   b7f40:	e7e1      	b.n	b7f06 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7f42:	2b10      	cmp	r3, #16
   b7f44:	d1dd      	bne.n	b7f02 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7f46:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7f4a:	6981      	ldr	r1, [r0, #24]
   b7f4c:	2202      	movs	r2, #2
   b7f4e:	4419      	add	r1, r3
   b7f50:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7f54:	f7ff ffa6 	bl	b7ea4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7f58:	2800      	cmp	r0, #0
   b7f5a:	d0d2      	beq.n	b7f02 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7f5c:	b2e4      	uxtb	r4, r4
   b7f5e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7f62:	e7e7      	b.n	b7f34 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7f64 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f64:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7f66:	b538      	push	{r3, r4, r5, lr}
   b7f68:	460c      	mov	r4, r1
   b7f6a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f6c:	d801      	bhi.n	b7f72 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7f6e:	2000      	movs	r0, #0
}
   b7f70:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f72:	69c3      	ldr	r3, [r0, #28]
   b7f74:	428b      	cmp	r3, r1
   b7f76:	d3fa      	bcc.n	b7f6e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7f78:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7f7a:	2b20      	cmp	r3, #32
   b7f7c:	d10f      	bne.n	b7f9e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7f7e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7f80:	2203      	movs	r2, #3
   b7f82:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7f86:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7f8a:	f7ff ff8b 	bl	b7ea4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7f8e:	2800      	cmp	r0, #0
   b7f90:	d0ed      	beq.n	b7f6e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7f92:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7f96:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7f9a:	2001      	movs	r0, #1
   b7f9c:	e7e8      	b.n	b7f70 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7f9e:	2b10      	cmp	r3, #16
   b7fa0:	d1e5      	bne.n	b7f6e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7fa2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7fa6:	6981      	ldr	r1, [r0, #24]
   b7fa8:	2203      	movs	r2, #3
   b7faa:	4419      	add	r1, r3
   b7fac:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7fb0:	f7ff ff78 	bl	b7ea4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7fb4:	2800      	cmp	r0, #0
   b7fb6:	d0da      	beq.n	b7f6e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7fb8:	b2e4      	uxtb	r4, r4
   b7fba:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7fbe:	e7ec      	b.n	b7f9a <_ZN9FatVolume6fatPutEmm+0x36>

000b7fc0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7fc4:	68c4      	ldr	r4, [r0, #12]
   b7fc6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7fc8:	4605      	mov	r5, r0
   b7fca:	460e      	mov	r6, r1
   b7fcc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7fce:	d301      	bcc.n	b7fd4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7fd0:	2701      	movs	r7, #1
   b7fd2:	e001      	b.n	b7fd8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7fd4:	460c      	mov	r4, r1
    setStart = false;
   b7fd6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7fd8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7fda:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7fdc:	42a3      	cmp	r3, r4
   b7fde:	d202      	bcs.n	b7fe6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7fe0:	b9c7      	cbnz	r7, b8014 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7fe2:	68ec      	ldr	r4, [r5, #12]
   b7fe4:	e7f4      	b.n	b7fd0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7fe6:	42a6      	cmp	r6, r4
   b7fe8:	d014      	beq.n	b8014 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7fea:	aa01      	add	r2, sp, #4
   b7fec:	4621      	mov	r1, r4
   b7fee:	4628      	mov	r0, r5
   b7ff0:	f7ff ff81 	bl	b7ef6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7ff4:	2800      	cmp	r0, #0
   b7ff6:	db0d      	blt.n	b8014 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7ff8:	d0ee      	beq.n	b7fd8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7ffa:	9b01      	ldr	r3, [sp, #4]
   b7ffc:	2b00      	cmp	r3, #0
   b7ffe:	d1eb      	bne.n	b7fd8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b8000:	b107      	cbz	r7, b8004 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b8002:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b8004:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b8008:	4621      	mov	r1, r4
   b800a:	4628      	mov	r0, r5
   b800c:	f7ff ffaa 	bl	b7f64 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b8010:	4607      	mov	r7, r0
   b8012:	b920      	cbnz	r0, b801e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b8014:	2700      	movs	r7, #0
}
   b8016:	4638      	mov	r0, r7
   b8018:	b002      	add	sp, #8
   b801a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b801e:	b916      	cbnz	r6, b8026 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b8020:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b8024:	e7f7      	b.n	b8016 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b8026:	4622      	mov	r2, r4
   b8028:	4631      	mov	r1, r6
   b802a:	4628      	mov	r0, r5
   b802c:	f7ff ff9a 	bl	b7f64 <_ZN9FatVolume6fatPutEmm>
   b8030:	2800      	cmp	r0, #0
   b8032:	d1f5      	bne.n	b8020 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b8034:	e7ee      	b.n	b8014 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b8036 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b8036:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8038:	4605      	mov	r5, r0
   b803a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b803c:	aa01      	add	r2, sp, #4
   b803e:	4621      	mov	r1, r4
   b8040:	4628      	mov	r0, r5
   b8042:	f7ff ff58 	bl	b7ef6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b8046:	1e06      	subs	r6, r0, #0
   b8048:	db10      	blt.n	b806c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b804a:	2200      	movs	r2, #0
   b804c:	4621      	mov	r1, r4
   b804e:	4628      	mov	r0, r5
   b8050:	f7ff ff88 	bl	b7f64 <_ZN9FatVolume6fatPutEmm>
   b8054:	b150      	cbz	r0, b806c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b8056:	68eb      	ldr	r3, [r5, #12]
   b8058:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b805a:	bf24      	itt	cs
   b805c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b8060:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b8062:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b8064:	2e00      	cmp	r6, #0
   b8066:	d1e9      	bne.n	b803c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b8068:	b002      	add	sp, #8
   b806a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b806c:	2000      	movs	r0, #0
   b806e:	e7fb      	b.n	b8068 <_ZN9FatVolume9freeChainEm+0x32>

000b8070 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b8070:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b8072:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b8074:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b8076:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b8078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b807c:	4604      	mov	r4, r0
  m_fatType = 0;
   b807e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b8080:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b8084:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b8086:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b808a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b808c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b8090:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b8094:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b8098:	460d      	mov	r5, r1
   b809a:	b1b9      	cbz	r1, b80cc <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b809c:	2904      	cmp	r1, #4
   b809e:	d901      	bls.n	b80a4 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b80a0:	2000      	movs	r0, #0
}
   b80a2:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b80a4:	4611      	mov	r1, r2
   b80a6:	4630      	mov	r0, r6
   b80a8:	f7ff fefc 	bl	b7ea4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b80ac:	2800      	cmp	r0, #0
   b80ae:	d0f7      	beq.n	b80a0 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b80b0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b80b4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b80b8:	065b      	lsls	r3, r3, #25
   b80ba:	d1f1      	bne.n	b80a0 <_ZN9FatVolume4initEh+0x30>
   b80bc:	f105 011b 	add.w	r1, r5, #27
   b80c0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b80c4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b80c8:	2d00      	cmp	r5, #0
   b80ca:	d0e9      	beq.n	b80a0 <_ZN9FatVolume4initEh+0x30>
   b80cc:	2200      	movs	r2, #0
   b80ce:	4629      	mov	r1, r5
   b80d0:	4630      	mov	r0, r6
   b80d2:	f7ff fee7 	bl	b7ea4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b80d6:	2800      	cmp	r0, #0
   b80d8:	d0e2      	beq.n	b80a0 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b80da:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b80de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b80e2:	d1dd      	bne.n	b80a0 <_ZN9FatVolume4initEh+0x30>
   b80e4:	7c03      	ldrb	r3, [r0, #16]
   b80e6:	2b02      	cmp	r3, #2
   b80e8:	d1da      	bne.n	b80a0 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b80ea:	89c3      	ldrh	r3, [r0, #14]
   b80ec:	2b00      	cmp	r3, #0
   b80ee:	d0d7      	beq.n	b80a0 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b80f0:	7b41      	ldrb	r1, [r0, #13]
   b80f2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b80f4:	1e4b      	subs	r3, r1, #1
   b80f6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b80f8:	2300      	movs	r3, #0
   b80fa:	71a3      	strb	r3, [r4, #6]
   b80fc:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b80fe:	2301      	movs	r3, #1
   b8100:	4299      	cmp	r1, r3
   b8102:	d007      	beq.n	b8114 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b8104:	3e01      	subs	r6, #1
   b8106:	d0cb      	beq.n	b80a0 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b8108:	79a2      	ldrb	r2, [r4, #6]
   b810a:	005b      	lsls	r3, r3, #1
   b810c:	3201      	adds	r2, #1
   b810e:	b2db      	uxtb	r3, r3
   b8110:	71a2      	strb	r2, [r4, #6]
   b8112:	e7f5      	b.n	b8100 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b8114:	8ac1      	ldrh	r1, [r0, #22]
   b8116:	b901      	cbnz	r1, b811a <_ZN9FatVolume4initEh+0xaa>
   b8118:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b811a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b811c:	89c3      	ldrh	r3, [r0, #14]
   b811e:	442b      	add	r3, r5
   b8120:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b8122:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b8126:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b8128:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b812c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b812e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b8132:	0149      	lsls	r1, r1, #5
   b8134:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b8138:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b813c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b813e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b8142:	b902      	cbnz	r2, b8146 <_ZN9FatVolume4initEh+0xd6>
   b8144:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b8146:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b8148:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b814a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b814c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b814e:	1c4b      	adds	r3, r1, #1
   b8150:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b8152:	f640 73f4 	movw	r3, #4084	; 0xff4
   b8156:	4299      	cmp	r1, r3
   b8158:	d802      	bhi.n	b8160 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b815a:	230c      	movs	r3, #12
   b815c:	71e3      	strb	r3, [r4, #7]
   b815e:	e79f      	b.n	b80a0 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b8160:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b8164:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b8166:	bf85      	ittet	hi
   b8168:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b816a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b816c:	2310      	movls	r3, #16
    m_fatType = 32;
   b816e:	2320      	movhi	r3, #32
   b8170:	71e3      	strb	r3, [r4, #7]
  return true;
   b8172:	2001      	movs	r0, #1
   b8174:	e795      	b.n	b80a2 <_ZN9FatVolume4initEh+0x32>

000b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b8176:	f000 bacb 	b.w	b8710 <_ZN14SdSpiAltDriver4sendEh>

000b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b817a:	f000 baae 	b.w	b86da <_ZN14SdSpiAltDriver7receiveEv>
	...

000b8180 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b8180:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b8182:	4e0e      	ldr	r6, [pc, #56]	; (b81bc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b8184:	460d      	mov	r5, r1
   b8186:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b8188:	f001 fc7e 	bl	b9a88 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b818c:	6833      	ldr	r3, [r6, #0]
   b818e:	1ac0      	subs	r0, r0, r3
   b8190:	4b0b      	ldr	r3, [pc, #44]	; (b81c0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b8192:	4298      	cmp	r0, r3
   b8194:	d908      	bls.n	b81a8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8196:	f001 fc7f 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b819a:	4b0a      	ldr	r3, [pc, #40]	; (b81c4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b819c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b819e:	f001 fe67 	bl	b9e70 <spark_process>
   b81a2:	f001 fc71 	bl	b9a88 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b81a6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b81a8:	f001 fc76 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b81ac:	b280      	uxth	r0, r0
   b81ae:	1b40      	subs	r0, r0, r5
}
   b81b0:	42a0      	cmp	r0, r4
   b81b2:	bfd4      	ite	le
   b81b4:	2000      	movle	r0, #0
   b81b6:	2001      	movgt	r0, #1
   b81b8:	bd70      	pop	{r4, r5, r6, pc}
   b81ba:	bf00      	nop
   b81bc:	2003e640 	.word	0x2003e640
   b81c0:	000186a0 	.word	0x000186a0
   b81c4:	2003e728 	.word	0x2003e728

000b81c8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b81c8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b81ca:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b81cc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b81ce:	b94d      	cbnz	r5, b81e4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b81d0:	6840      	ldr	r0, [r0, #4]
   b81d2:	f000 fa6b 	bl	b86ac <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b81d6:	6863      	ldr	r3, [r4, #4]
   b81d8:	4629      	mov	r1, r5
   b81da:	7d18      	ldrb	r0, [r3, #20]
   b81dc:	f005 fcd5 	bl	bdb8a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b81e0:	2301      	movs	r3, #1
   b81e2:	7223      	strb	r3, [r4, #8]
  }
}
   b81e4:	bd38      	pop	{r3, r4, r5, pc}

000b81e6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b81e6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b81e8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b81ea:	4604      	mov	r4, r0
  if (m_spiActive) {
   b81ec:	b16b      	cbz	r3, b820a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b81ee:	6843      	ldr	r3, [r0, #4]
   b81f0:	2101      	movs	r1, #1
   b81f2:	7d18      	ldrb	r0, [r3, #20]
   b81f4:	f005 fcc9 	bl	bdb8a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b81f8:	6860      	ldr	r0, [r4, #4]
   b81fa:	21ff      	movs	r1, #255	; 0xff
   b81fc:	f7ff ffbb 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b8200:	6860      	ldr	r0, [r4, #4]
   b8202:	f000 fa67 	bl	b86d4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b8206:	2300      	movs	r3, #0
   b8208:	7223      	strb	r3, [r4, #8]
  }
}
   b820a:	bd10      	pop	{r4, pc}

000b820c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b820e:	4604      	mov	r4, r0
   b8210:	460d      	mov	r5, r1
   b8212:	4616      	mov	r6, r2
   b8214:	f001 fc40 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b8218:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b821a:	6860      	ldr	r0, [r4, #4]
   b821c:	f7ff ffad 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8220:	28ff      	cmp	r0, #255	; 0xff
   b8222:	7260      	strb	r0, [r4, #9]
   b8224:	d10e      	bne.n	b8244 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b8226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b822a:	4639      	mov	r1, r7
   b822c:	4620      	mov	r0, r4
   b822e:	f7ff ffa7 	bl	b8180 <_ZN9SdSpiCard10isTimedOutEtt>
   b8232:	2800      	cmp	r0, #0
   b8234:	d0f1      	beq.n	b821a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b8236:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b8238:	4620      	mov	r0, r4
   b823a:	7023      	strb	r3, [r4, #0]
   b823c:	f7ff ffd3 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8240:	2000      	movs	r0, #0
}
   b8242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b8244:	28fe      	cmp	r0, #254	; 0xfe
   b8246:	d001      	beq.n	b824c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b8248:	2350      	movs	r3, #80	; 0x50
   b824a:	e7f5      	b.n	b8238 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b824c:	6860      	ldr	r0, [r4, #4]
   b824e:	4632      	mov	r2, r6
   b8250:	4629      	mov	r1, r5
   b8252:	f000 fa47 	bl	b86e4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b8256:	7260      	strb	r0, [r4, #9]
   b8258:	b108      	cbz	r0, b825e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b825a:	2360      	movs	r3, #96	; 0x60
   b825c:	e7ec      	b.n	b8238 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b825e:	6860      	ldr	r0, [r4, #4]
   b8260:	f7ff ff8b 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b8264:	6860      	ldr	r0, [r4, #4]
   b8266:	f7ff ff88 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b826a:	2001      	movs	r0, #1
   b826c:	e7e9      	b.n	b8242 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b826e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b826e:	b570      	push	{r4, r5, r6, lr}
   b8270:	4604      	mov	r4, r0
   b8272:	460e      	mov	r6, r1
   b8274:	f001 fc10 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
   b8278:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b827a:	4632      	mov	r2, r6
   b827c:	4629      	mov	r1, r5
   b827e:	4620      	mov	r0, r4
   b8280:	f7ff ff7e 	bl	b8180 <_ZN9SdSpiCard10isTimedOutEtt>
   b8284:	b930      	cbnz	r0, b8294 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b8286:	6860      	ldr	r0, [r4, #4]
   b8288:	f7ff ff77 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b828c:	28ff      	cmp	r0, #255	; 0xff
   b828e:	d1f4      	bne.n	b827a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b8290:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b8292:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b8294:	2000      	movs	r0, #0
   b8296:	e7fc      	b.n	b8292 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b8298 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b8298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b829a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b829c:	9201      	str	r2, [sp, #4]
   b829e:	4604      	mov	r4, r0
   b82a0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b82a2:	b90b      	cbnz	r3, b82a8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b82a4:	f7ff ff90 	bl	b81c8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b82a8:	b125      	cbz	r5, b82b4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b82aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b82ae:	4620      	mov	r0, r4
   b82b0:	f7ff ffdd 	bl	b826e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b82b4:	6860      	ldr	r0, [r4, #4]
   b82b6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b82ba:	f7ff ff5c 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b82be:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b82c0:	af01      	add	r7, sp, #4
   b82c2:	5db9      	ldrb	r1, [r7, r6]
   b82c4:	6860      	ldr	r0, [r4, #4]
   b82c6:	f7ff ff56 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b82ca:	3e01      	subs	r6, #1
   b82cc:	d2f9      	bcs.n	b82c2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b82ce:	2d00      	cmp	r5, #0
   b82d0:	6860      	ldr	r0, [r4, #4]
   b82d2:	bf0c      	ite	eq
   b82d4:	2195      	moveq	r1, #149	; 0x95
   b82d6:	2187      	movne	r1, #135	; 0x87
   b82d8:	f7ff ff4d 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b82dc:	6860      	ldr	r0, [r4, #4]
   b82de:	f7ff ff4c 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b82e2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b82e4:	6860      	ldr	r0, [r4, #4]
   b82e6:	f7ff ff48 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b82ea:	0603      	lsls	r3, r0, #24
   b82ec:	7260      	strb	r0, [r4, #9]
   b82ee:	d503      	bpl.n	b82f8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b82f0:	3d01      	subs	r5, #1
   b82f2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b82f6:	d1f5      	bne.n	b82e4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b82f8:	b003      	add	sp, #12
   b82fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b82fc <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b82fc:	b570      	push	{r4, r5, r6, lr}
   b82fe:	4604      	mov	r4, r0
   b8300:	460d      	mov	r5, r1
   b8302:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b8304:	2137      	movs	r1, #55	; 0x37
   b8306:	2200      	movs	r2, #0
   b8308:	f7ff ffc6 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b830c:	4632      	mov	r2, r6
   b830e:	4629      	mov	r1, r5
   b8310:	4620      	mov	r0, r4
  }
   b8312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b8316:	f7ff bfbf 	b.w	b8298 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b831c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b8320:	2500      	movs	r5, #0
   b8322:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b8324:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b8326:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b8328:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b832a:	4604      	mov	r4, r0
   b832c:	4690      	mov	r8, r2
   b832e:	461e      	mov	r6, r3
   b8330:	f001 fbb2 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b8334:	4641      	mov	r1, r8
   b8336:	4607      	mov	r7, r0
   b8338:	6860      	ldr	r0, [r4, #4]
   b833a:	f000 f9bb 	bl	b86b4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b833e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b8340:	4a49      	ldr	r2, [pc, #292]	; (b8468 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b8342:	721d      	strb	r5, [r3, #8]
   b8344:	2501      	movs	r5, #1
   b8346:	60da      	str	r2, [r3, #12]
   b8348:	821d      	strh	r5, [r3, #16]
  spiStart();
   b834a:	4620      	mov	r0, r4
   b834c:	f7ff ff3c 	bl	b81c8 <_ZN9SdSpiCard8spiStartEv>
   b8350:	6863      	ldr	r3, [r4, #4]
   b8352:	4629      	mov	r1, r5
   b8354:	7d18      	ldrb	r0, [r3, #20]
   b8356:	f005 fc18 	bl	bdb8a <digitalWrite>
   b835a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b835c:	6860      	ldr	r0, [r4, #4]
   b835e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b8360:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b8362:	f7ff ff08 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b8366:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b836a:	d1f7      	bne.n	b835c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b836c:	6863      	ldr	r3, [r4, #4]
   b836e:	4629      	mov	r1, r5
   b8370:	7d18      	ldrb	r0, [r3, #20]
   b8372:	f005 fc0a 	bl	bdb8a <digitalWrite>
  }
   b8376:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b8378:	2200      	movs	r2, #0
   b837a:	4611      	mov	r1, r2
   b837c:	4620      	mov	r0, r4
   b837e:	f7ff ff8b 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b8382:	2801      	cmp	r0, #1
   b8384:	4680      	mov	r8, r0
   b8386:	d018      	beq.n	b83ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b8388:	3d01      	subs	r5, #1
   b838a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b838e:	d107      	bne.n	b83a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b8390:	2320      	movs	r3, #32
  spiStop();
   b8392:	4620      	mov	r0, r4
   b8394:	7023      	strb	r3, [r4, #0]
   b8396:	f7ff ff26 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b839a:	2000      	movs	r0, #0
}
   b839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b83a0:	6860      	ldr	r0, [r4, #4]
   b83a2:	21fd      	movs	r1, #253	; 0xfd
   b83a4:	f7ff fee7 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b83a8:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b83ac:	6860      	ldr	r0, [r4, #4]
   b83ae:	f7ff fee4 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b83b2:	f1b8 0801 	subs.w	r8, r8, #1
   b83b6:	d1f9      	bne.n	b83ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b83b8:	e7de      	b.n	b8378 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b83ba:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b83be:	2108      	movs	r1, #8
   b83c0:	4620      	mov	r0, r4
   b83c2:	f7ff ff69 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b83c6:	2805      	cmp	r0, #5
   b83c8:	d114      	bne.n	b83f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b83ca:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b83ce:	2500      	movs	r5, #0
   b83d0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b83d2:	462a      	mov	r2, r5
   b83d4:	2129      	movs	r1, #41	; 0x29
   b83d6:	4620      	mov	r0, r4
   b83d8:	f7ff ff90 	bl	b82fc <_ZN9SdSpiCard8cardAcmdEhm>
   b83dc:	4602      	mov	r2, r0
   b83de:	b1d8      	cbz	r0, b8418 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b83e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b83e4:	4639      	mov	r1, r7
   b83e6:	4620      	mov	r0, r4
   b83e8:	f7ff feca 	bl	b8180 <_ZN9SdSpiCard10isTimedOutEtt>
   b83ec:	2800      	cmp	r0, #0
   b83ee:	d0f0      	beq.n	b83d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b83f0:	2343      	movs	r3, #67	; 0x43
   b83f2:	e7ce      	b.n	b8392 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b83f4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b83f6:	6860      	ldr	r0, [r4, #4]
   b83f8:	f7ff febf 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b83fc:	3d01      	subs	r5, #1
   b83fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b8402:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b8404:	d1f7      	bne.n	b83f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b8406:	28aa      	cmp	r0, #170	; 0xaa
   b8408:	d104      	bne.n	b8414 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b840a:	2302      	movs	r3, #2
   b840c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b840e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b8412:	e7dd      	b.n	b83d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b8414:	2325      	movs	r3, #37	; 0x25
   b8416:	e7bc      	b.n	b8392 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b8418:	7aa3      	ldrb	r3, [r4, #10]
   b841a:	2b02      	cmp	r3, #2
   b841c:	d118      	bne.n	b8450 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b841e:	213a      	movs	r1, #58	; 0x3a
   b8420:	4620      	mov	r0, r4
   b8422:	f7ff ff39 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b8426:	b108      	cbz	r0, b842c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b8428:	2337      	movs	r3, #55	; 0x37
   b842a:	e7b2      	b.n	b8392 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b842c:	6860      	ldr	r0, [r4, #4]
   b842e:	f7ff fea4 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8432:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b8436:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b8438:	bf04      	itt	eq
   b843a:	2303      	moveq	r3, #3
   b843c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b843e:	6860      	ldr	r0, [r4, #4]
   b8440:	f7ff fe9b 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8444:	6860      	ldr	r0, [r4, #4]
   b8446:	f7ff fe98 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b844a:	6860      	ldr	r0, [r4, #4]
   b844c:	f7ff fe95 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b8450:	4620      	mov	r0, r4
   b8452:	f7ff fec8 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b8456:	6863      	ldr	r3, [r4, #4]
   b8458:	7930      	ldrb	r0, [r6, #4]
   b845a:	68b1      	ldr	r1, [r6, #8]
   b845c:	89b2      	ldrh	r2, [r6, #12]
   b845e:	821a      	strh	r2, [r3, #16]
   b8460:	7218      	strb	r0, [r3, #8]
   b8462:	60d9      	str	r1, [r3, #12]
  return true;
   b8464:	2001      	movs	r0, #1
   b8466:	e799      	b.n	b839c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b8468:	0003d090 	.word	0x0003d090

000b846c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b846c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b846e:	7a83      	ldrb	r3, [r0, #10]
   b8470:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b8472:	bf18      	it	ne
   b8474:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8476:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b8478:	460a      	mov	r2, r1
   b847a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b847c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b847e:	f7ff ff0b 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b8482:	b130      	cbz	r0, b8492 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b8484:	2330      	movs	r3, #48	; 0x30
   b8486:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8488:	4620      	mov	r0, r4
   b848a:	f7ff feac 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b848e:	2500      	movs	r5, #0
   b8490:	e00b      	b.n	b84aa <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b8492:	4629      	mov	r1, r5
   b8494:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8498:	4620      	mov	r0, r4
   b849a:	f7ff feb7 	bl	b820c <_ZN9SdSpiCard8readDataEPhj>
   b849e:	4605      	mov	r5, r0
   b84a0:	2800      	cmp	r0, #0
   b84a2:	d0f1      	beq.n	b8488 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b84a4:	4620      	mov	r0, r4
   b84a6:	f7ff fe9e 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
}
   b84aa:	4628      	mov	r0, r5
   b84ac:	bd38      	pop	{r3, r4, r5, pc}

000b84ae <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b84ae:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b84b0:	7a83      	ldrb	r3, [r0, #10]
   b84b2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b84b4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b84b6:	bf18      	it	ne
   b84b8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b84ba:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b84bc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b84be:	f7ff feeb 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b84c2:	b130      	cbz	r0, b84d2 <_ZN9SdSpiCard9readStartEm+0x24>
   b84c4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b84c6:	4620      	mov	r0, r4
   b84c8:	7023      	strb	r3, [r4, #0]
   b84ca:	f7ff fe8c 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b84ce:	2000      	movs	r0, #0
}
   b84d0:	bd10      	pop	{r4, pc}
  return true;
   b84d2:	2001      	movs	r0, #1
   b84d4:	e7fc      	b.n	b84d0 <_ZN9SdSpiCard9readStartEm+0x22>

000b84d6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b84d6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b84d8:	2200      	movs	r2, #0
   b84da:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b84dc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b84de:	f7ff fedb 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b84e2:	b130      	cbz	r0, b84f2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b84e4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b84e6:	4620      	mov	r0, r4
   b84e8:	7023      	strb	r3, [r4, #0]
   b84ea:	f7ff fe7c 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b84ee:	2000      	movs	r0, #0
}
   b84f0:	bd10      	pop	{r4, pc}
  spiStop();
   b84f2:	4620      	mov	r0, r4
   b84f4:	f7ff fe77 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b84f8:	2001      	movs	r0, #1
   b84fa:	e7f9      	b.n	b84f0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b84fc <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b84fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84fe:	4604      	mov	r4, r0
   b8500:	4616      	mov	r6, r2
   b8502:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b8504:	f7ff ffd3 	bl	b84ae <_ZN9SdSpiCard9readStartEm>
   b8508:	b168      	cbz	r0, b8526 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b850a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b850c:	b2ab      	uxth	r3, r5
   b850e:	429f      	cmp	r7, r3
   b8510:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b8514:	d909      	bls.n	b852a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b8516:	f44f 7200 	mov.w	r2, #512	; 0x200
   b851a:	4620      	mov	r0, r4
   b851c:	f7ff fe76 	bl	b820c <_ZN9SdSpiCard8readDataEPhj>
   b8520:	3501      	adds	r5, #1
   b8522:	2800      	cmp	r0, #0
   b8524:	d1f2      	bne.n	b850c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b8526:	2000      	movs	r0, #0
   b8528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b852a:	4620      	mov	r0, r4
}
   b852c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b8530:	f7ff bfd1 	b.w	b84d6 <_ZN9SdSpiCard8readStopEv>

000b8534 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b8534:	b538      	push	{r3, r4, r5, lr}
   b8536:	4604      	mov	r4, r0
   b8538:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b853a:	6840      	ldr	r0, [r0, #4]
   b853c:	f7ff fe1b 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b8540:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8544:	6860      	ldr	r0, [r4, #4]
   b8546:	4629      	mov	r1, r5
   b8548:	f000 f8e6 	bl	b8718 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b854c:	6860      	ldr	r0, [r4, #4]
   b854e:	21ff      	movs	r1, #255	; 0xff
   b8550:	f7ff fe11 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b8554:	6860      	ldr	r0, [r4, #4]
   b8556:	21ff      	movs	r1, #255	; 0xff
   b8558:	f7ff fe0d 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b855c:	6860      	ldr	r0, [r4, #4]
   b855e:	f7ff fe0c 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8562:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b8564:	f000 001f 	and.w	r0, r0, #31
   b8568:	2805      	cmp	r0, #5
   b856a:	d006      	beq.n	b857a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b856c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b856e:	4620      	mov	r0, r4
   b8570:	7023      	strb	r3, [r4, #0]
   b8572:	f7ff fe38 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8576:	2000      	movs	r0, #0
}
   b8578:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b857a:	2001      	movs	r0, #1
   b857c:	e7fc      	b.n	b8578 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b857e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b857e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8580:	7a83      	ldrb	r3, [r0, #10]
   b8582:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b8584:	bf18      	it	ne
   b8586:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8588:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b858a:	460a      	mov	r2, r1
   b858c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b858e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b8590:	f7ff fe82 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b8594:	4606      	mov	r6, r0
   b8596:	b130      	cbz	r0, b85a6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b8598:	2332      	movs	r3, #50	; 0x32
   b859a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b859c:	4620      	mov	r0, r4
   b859e:	f7ff fe22 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b85a2:	2500      	movs	r5, #0
   b85a4:	e01f      	b.n	b85e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b85a6:	462a      	mov	r2, r5
   b85a8:	21fe      	movs	r1, #254	; 0xfe
   b85aa:	4620      	mov	r0, r4
   b85ac:	f7ff ffc2 	bl	b8534 <_ZN9SdSpiCard9writeDataEhPKh>
   b85b0:	2800      	cmp	r0, #0
   b85b2:	d0f3      	beq.n	b859c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b85b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b85b8:	4620      	mov	r0, r4
   b85ba:	f7ff fe58 	bl	b826e <_ZN9SdSpiCard11waitNotBusyEt>
   b85be:	4605      	mov	r5, r0
   b85c0:	b908      	cbnz	r0, b85c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b85c2:	235a      	movs	r3, #90	; 0x5a
   b85c4:	e7e9      	b.n	b859a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b85c6:	4632      	mov	r2, r6
   b85c8:	210d      	movs	r1, #13
   b85ca:	4620      	mov	r0, r4
   b85cc:	f7ff fe64 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b85d0:	b108      	cbz	r0, b85d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b85d2:	2329      	movs	r3, #41	; 0x29
   b85d4:	e7e1      	b.n	b859a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b85d6:	6860      	ldr	r0, [r4, #4]
   b85d8:	f7ff fdcf 	bl	b817a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b85dc:	2800      	cmp	r0, #0
   b85de:	d1f8      	bne.n	b85d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b85e0:	4620      	mov	r0, r4
   b85e2:	f7ff fe00 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
}
   b85e6:	4628      	mov	r0, r5
   b85e8:	bd70      	pop	{r4, r5, r6, pc}

000b85ea <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b85ea:	b513      	push	{r0, r1, r4, lr}
   b85ec:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b85ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b85f2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b85f4:	f7ff fe3b 	bl	b826e <_ZN9SdSpiCard11waitNotBusyEt>
   b85f8:	9a01      	ldr	r2, [sp, #4]
   b85fa:	b930      	cbnz	r0, b860a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b85fc:	235b      	movs	r3, #91	; 0x5b
   b85fe:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8600:	4620      	mov	r0, r4
   b8602:	f7ff fdf0 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8606:	2000      	movs	r0, #0
   b8608:	e005      	b.n	b8616 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b860a:	21fc      	movs	r1, #252	; 0xfc
   b860c:	4620      	mov	r0, r4
   b860e:	f7ff ff91 	bl	b8534 <_ZN9SdSpiCard9writeDataEhPKh>
   b8612:	2800      	cmp	r0, #0
   b8614:	d0f4      	beq.n	b8600 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b8616:	b002      	add	sp, #8
   b8618:	bd10      	pop	{r4, pc}

000b861a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b861a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b861c:	7a83      	ldrb	r3, [r0, #10]
   b861e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8620:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b8622:	bf18      	it	ne
   b8624:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b8626:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8628:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b862a:	f7ff fe35 	bl	b8298 <_ZN9SdSpiCard11cardCommandEhm>
   b862e:	b130      	cbz	r0, b863e <_ZN9SdSpiCard10writeStartEm+0x24>
   b8630:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b8632:	4620      	mov	r0, r4
   b8634:	7023      	strb	r3, [r4, #0]
   b8636:	f7ff fdd6 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b863a:	2000      	movs	r0, #0
}
   b863c:	bd10      	pop	{r4, pc}
  return true;
   b863e:	2001      	movs	r0, #1
   b8640:	e7fc      	b.n	b863c <_ZN9SdSpiCard10writeStartEm+0x22>

000b8642 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b8642:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8644:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8648:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b864a:	f7ff fe10 	bl	b826e <_ZN9SdSpiCard11waitNotBusyEt>
   b864e:	4605      	mov	r5, r0
   b8650:	b930      	cbnz	r0, b8660 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b8652:	2356      	movs	r3, #86	; 0x56
   b8654:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b8656:	4620      	mov	r0, r4
   b8658:	f7ff fdc5 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b865c:	4628      	mov	r0, r5
   b865e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b8660:	6860      	ldr	r0, [r4, #4]
   b8662:	21fd      	movs	r1, #253	; 0xfd
   b8664:	f7ff fd87 	bl	b8176 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8668:	e7f5      	b.n	b8656 <_ZN9SdSpiCard9writeStopEv+0x14>

000b866a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b866a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b866c:	4604      	mov	r4, r0
   b866e:	4616      	mov	r6, r2
   b8670:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b8672:	f7ff ffd2 	bl	b861a <_ZN9SdSpiCard10writeStartEm>
   b8676:	b170      	cbz	r0, b8696 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8678:	2500      	movs	r5, #0
   b867a:	42bd      	cmp	r5, r7
   b867c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8680:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b8682:	d004      	beq.n	b868e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b8684:	f7ff ffb1 	bl	b85ea <_ZN9SdSpiCard9writeDataEPKh>
   b8688:	b128      	cbz	r0, b8696 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b868a:	3501      	adds	r5, #1
   b868c:	e7f5      	b.n	b867a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b868e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b8692:	f7ff bfd6 	b.w	b8642 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b8696:	4620      	mov	r0, r4
   b8698:	f7ff fda5 	bl	b81e6 <_ZN9SdSpiCard7spiStopEv>
}
   b869c:	2000      	movs	r0, #0
   b869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86a0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b86a0:	4b01      	ldr	r3, [pc, #4]	; (b86a8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b86a2:	2201      	movs	r2, #1
   b86a4:	701a      	strb	r2, [r3, #0]
}
   b86a6:	4770      	bx	lr
   b86a8:	2003e644 	.word	0x2003e644

000b86ac <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b86ac:	1d01      	adds	r1, r0, #4
   b86ae:	6800      	ldr	r0, [r0, #0]
   b86b0:	f004 bdf6 	b.w	bd2a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b86b4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b86b4:	b510      	push	{r4, lr}
   b86b6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b86b8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b86ba:	6800      	ldr	r0, [r0, #0]
   b86bc:	f004 fdc2 	bl	bd244 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b86c0:	7d20      	ldrb	r0, [r4, #20]
   b86c2:	2101      	movs	r1, #1
   b86c4:	f005 fa50 	bl	bdb68 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b86c8:	7d20      	ldrb	r0, [r4, #20]
   b86ca:	2101      	movs	r1, #1
}
   b86cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b86d0:	f005 ba5b 	b.w	bdb8a <digitalWrite>

000b86d4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b86d4:	6800      	ldr	r0, [r0, #0]
   b86d6:	f004 bdc9 	b.w	bd26c <_ZN8SPIClass14endTransactionEv>

000b86da <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b86da:	6800      	ldr	r0, [r0, #0]
   b86dc:	21ff      	movs	r1, #255	; 0xff
   b86de:	f004 be4d 	b.w	bd37c <_ZN8SPIClass8transferEh>
	...

000b86e4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b86e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b86e6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b86e8:	4a07      	ldr	r2, [pc, #28]	; (b8708 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b86ea:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b86ec:	2500      	movs	r5, #0
   b86ee:	4c07      	ldr	r4, [pc, #28]	; (b870c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b86f0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b86f2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b86f4:	460a      	mov	r2, r1
   b86f6:	4629      	mov	r1, r5
   b86f8:	f004 fe46 	bl	bd388 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b86fc:	7823      	ldrb	r3, [r4, #0]
   b86fe:	2b00      	cmp	r3, #0
   b8700:	d0fc      	beq.n	b86fc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b8702:	2000      	movs	r0, #0
   b8704:	b003      	add	sp, #12
   b8706:	bd30      	pop	{r4, r5, pc}
   b8708:	000b86a1 	.word	0x000b86a1
   b870c:	2003e644 	.word	0x2003e644

000b8710 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b8710:	6800      	ldr	r0, [r0, #0]
   b8712:	f004 be33 	b.w	bd37c <_ZN8SPIClass8transferEh>
	...

000b8718 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b8718:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b871a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b871c:	4a06      	ldr	r2, [pc, #24]	; (b8738 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b871e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8720:	2500      	movs	r5, #0
   b8722:	4c06      	ldr	r4, [pc, #24]	; (b873c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8724:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b8726:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8728:	462a      	mov	r2, r5
   b872a:	f004 fe2d 	bl	bd388 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b872e:	7823      	ldrb	r3, [r4, #0]
   b8730:	2b00      	cmp	r3, #0
   b8732:	d0fc      	beq.n	b872e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b8734:	b003      	add	sp, #12
   b8736:	bd30      	pop	{r4, r5, pc}
   b8738:	000b86a1 	.word	0x000b86a1
   b873c:	2003e644 	.word	0x2003e644

000b8740 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8744:	b085      	sub	sp, #20
   b8746:	461f      	mov	r7, r3
   b8748:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b874c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b8750:	eba8 0902 	sub.w	r9, r8, r2
   b8754:	eba7 0a01 	sub.w	sl, r7, r1
   b8758:	f1b9 0f00 	cmp.w	r9, #0
   b875c:	bfb8      	it	lt
   b875e:	f1c9 0900 	rsblt	r9, r9, #0
   b8762:	f1ba 0f00 	cmp.w	sl, #0
   b8766:	bfb8      	it	lt
   b8768:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b876c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b876e:	4683      	mov	fp, r0
   b8770:	460c      	mov	r4, r1
   b8772:	4615      	mov	r5, r2
    if (steep) {
   b8774:	dd04      	ble.n	b8780 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b8776:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b8778:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b877a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b877c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b877e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b8780:	42bc      	cmp	r4, r7
   b8782:	dd05      	ble.n	b8790 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b8784:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b8786:	4645      	mov	r5, r8
   b8788:	4690      	mov	r8, r2
    if (x0 > x1) {
   b878a:	4622      	mov	r2, r4
   b878c:	463c      	mov	r4, r7
   b878e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b8790:	1b3e      	subs	r6, r7, r4
   b8792:	b2b2      	uxth	r2, r6
   b8794:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b8796:	eba8 0205 	sub.w	r2, r8, r5
   b879a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b879e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b87a2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b87a6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b87aa:	4545      	cmp	r5, r8
   b87ac:	bfb4      	ite	lt
   b87ae:	2201      	movlt	r2, #1
   b87b0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b87b4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b87b6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b87b8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b87ba:	42bc      	cmp	r4, r7
   b87bc:	dc1c      	bgt.n	b87f8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b87be:	f8db 2000 	ldr.w	r2, [fp]
   b87c2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b87c4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b87c6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b87ca:	bfc7      	ittee	gt
   b87cc:	4629      	movgt	r1, r5
   b87ce:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b87d0:	462a      	movle	r2, r5
   b87d2:	4621      	movle	r1, r4
   b87d4:	4658      	mov	r0, fp
   b87d6:	47c0      	blx	r8
        }
        err -= dy;
   b87d8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b87da:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b87dc:	1ab6      	subs	r6, r6, r2
   b87de:	b2b1      	uxth	r1, r6
   b87e0:	b236      	sxth	r6, r6
        if (err < 0) {
   b87e2:	2e00      	cmp	r6, #0
   b87e4:	da05      	bge.n	b87f2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b87e6:	9a02      	ldr	r2, [sp, #8]
   b87e8:	4415      	add	r5, r2
            err += dx;
   b87ea:	9a00      	ldr	r2, [sp, #0]
   b87ec:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b87ee:	b22d      	sxth	r5, r5
            err += dx;
   b87f0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b87f2:	3401      	adds	r4, #1
   b87f4:	b224      	sxth	r4, r4
   b87f6:	e7e0      	b.n	b87ba <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b87f8:	b005      	add	sp, #20
   b87fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b87fe <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b87fe:	4770      	bx	lr

000b8800 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b8800:	b410      	push	{r4}
    drawPixel(x, y, color);
   b8802:	6804      	ldr	r4, [r0, #0]
   b8804:	6924      	ldr	r4, [r4, #16]
   b8806:	46a4      	mov	ip, r4
}
   b8808:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b880c:	4760      	bx	ip

000b880e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b880e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b8810:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b8812:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b8816:	9502      	str	r5, [sp, #8]
   b8818:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b881a:	46a4      	mov	ip, r4
}
   b881c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b881e:	4760      	bx	ip

000b8820 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8820:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b8822:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b8824:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b8828:	9502      	str	r5, [sp, #8]
   b882a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b882c:	46a4      	mov	ip, r4
}
   b882e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b8830:	4760      	bx	ip

000b8832 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8832:	b470      	push	{r4, r5, r6}
   b8834:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b8838:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b883c:	6804      	ldr	r4, [r0, #0]
   b883e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b8842:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b8844:	46a4      	mov	ip, r4
}
   b8846:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b8848:	4760      	bx	ip

000b884a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b884a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b884e:	461c      	mov	r4, r3
    startWrite();
   b8850:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b8852:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8856:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b8858:	4605      	mov	r5, r0
   b885a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b885c:	3c01      	subs	r4, #1
   b885e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b8860:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b8862:	b224      	sxth	r4, r4
    startWrite();
   b8864:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b8866:	682b      	ldr	r3, [r5, #0]
   b8868:	f8cd 8004 	str.w	r8, [sp, #4]
   b886c:	9400      	str	r4, [sp, #0]
   b886e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8870:	4628      	mov	r0, r5
   b8872:	463b      	mov	r3, r7
   b8874:	4632      	mov	r2, r6
   b8876:	4639      	mov	r1, r7
   b8878:	47a0      	blx	r4
    endWrite();
   b887a:	682b      	ldr	r3, [r5, #0]
   b887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b887e:	4628      	mov	r0, r5
}
   b8880:	b002      	add	sp, #8
   b8882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8886:	4718      	bx	r3

000b8888 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b888c:	461d      	mov	r5, r3
    startWrite();
   b888e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8890:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8894:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b8896:	4604      	mov	r4, r0
   b8898:	4617      	mov	r7, r2
   b889a:	460e      	mov	r6, r1
    startWrite();
   b889c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b889e:	e9cd 7800 	strd	r7, r8, [sp]
   b88a2:	6822      	ldr	r2, [r4, #0]
   b88a4:	1e6b      	subs	r3, r5, #1
   b88a6:	4433      	add	r3, r6
   b88a8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b88aa:	4620      	mov	r0, r4
   b88ac:	b21b      	sxth	r3, r3
   b88ae:	463a      	mov	r2, r7
   b88b0:	4631      	mov	r1, r6
   b88b2:	47a8      	blx	r5
    endWrite();
   b88b4:	6823      	ldr	r3, [r4, #0]
   b88b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b88b8:	4620      	mov	r0, r4
}
   b88ba:	b002      	add	sp, #8
   b88bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b88c0:	4718      	bx	r3

000b88c2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b88c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b88c6:	461e      	mov	r6, r3
    startWrite();
   b88c8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b88ca:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b88ce:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b88d0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b88d4:	460c      	mov	r4, r1
   b88d6:	4605      	mov	r5, r0
   b88d8:	4617      	mov	r7, r2
    startWrite();
   b88da:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b88dc:	4426      	add	r6, r4
   b88de:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b88e0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b88e2:	da0b      	bge.n	b88fc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b88e4:	f8cd 8000 	str.w	r8, [sp]
   b88e8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b88ec:	4621      	mov	r1, r4
   b88ee:	464b      	mov	r3, r9
   b88f0:	463a      	mov	r2, r7
   b88f2:	4628      	mov	r0, r5
   b88f4:	3401      	adds	r4, #1
   b88f6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b88f8:	b224      	sxth	r4, r4
   b88fa:	e7f0      	b.n	b88de <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b88fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b88fe:	4628      	mov	r0, r5
}
   b8900:	b002      	add	sp, #8
   b8902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b8906:	4718      	bx	r3

000b8908 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b8908:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b890a:	6802      	ldr	r2, [r0, #0]
   b890c:	9101      	str	r1, [sp, #4]
   b890e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b8912:	9100      	str	r1, [sp, #0]
   b8914:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b8916:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b891a:	2200      	movs	r2, #0
   b891c:	4611      	mov	r1, r2
   b891e:	47a0      	blx	r4
}
   b8920:	b002      	add	sp, #8
   b8922:	bd10      	pop	{r4, pc}

000b8924 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b8928:	4299      	cmp	r1, r3
        uint16_t color) {
   b892a:	4616      	mov	r6, r2
   b892c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b8930:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8934:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b8936:	4680      	mov	r8, r0
   b8938:	460d      	mov	r5, r1
   b893a:	461c      	mov	r4, r3
    if(x0 == x1){
   b893c:	d113      	bne.n	b8966 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b893e:	42be      	cmp	r6, r7
   b8940:	bfc8      	it	gt
   b8942:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8944:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8948:	bfc4      	itt	gt
   b894a:	463e      	movgt	r6, r7
   b894c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b894e:	1c7b      	adds	r3, r7, #1
   b8950:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b8952:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8954:	b21b      	sxth	r3, r3
   b8956:	4632      	mov	r2, r6
   b8958:	4629      	mov	r1, r5
   b895a:	4640      	mov	r0, r8
   b895c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b895e:	b003      	add	sp, #12
   b8960:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8964:	4760      	bx	ip
    } else if(y0 == y1){
   b8966:	42be      	cmp	r6, r7
   b8968:	d10a      	bne.n	b8980 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b896a:	4299      	cmp	r1, r3
   b896c:	bfc2      	ittt	gt
   b896e:	460b      	movgt	r3, r1
   b8970:	4625      	movgt	r5, r4
   b8972:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8974:	1c63      	adds	r3, r4, #1
   b8976:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b897a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b897c:	1b5b      	subs	r3, r3, r5
   b897e:	e7e9      	b.n	b8954 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8980:	6953      	ldr	r3, [r2, #20]
   b8982:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8984:	e9cd 7900 	strd	r7, r9, [sp]
   b8988:	f8d8 3000 	ldr.w	r3, [r8]
   b898c:	4640      	mov	r0, r8
   b898e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8990:	4632      	mov	r2, r6
   b8992:	4623      	mov	r3, r4
   b8994:	4629      	mov	r1, r5
   b8996:	47b8      	blx	r7
        endWrite();
   b8998:	f8d8 3000 	ldr.w	r3, [r8]
   b899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b899e:	4640      	mov	r0, r8
}
   b89a0:	b003      	add	sp, #12
   b89a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b89a6:	4718      	bx	r3

000b89a8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b89a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b89ac:	461d      	mov	r5, r3
    startWrite();
   b89ae:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b89b0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b89b4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b89b6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b89ba:	4604      	mov	r4, r0
   b89bc:	460f      	mov	r7, r1
   b89be:	4616      	mov	r6, r2
    startWrite();
   b89c0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b89c2:	6823      	ldr	r3, [r4, #0]
   b89c4:	f8cd 8000 	str.w	r8, [sp]
   b89c8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b89cc:	4632      	mov	r2, r6
   b89ce:	462b      	mov	r3, r5
   b89d0:	4639      	mov	r1, r7
   b89d2:	4620      	mov	r0, r4
   b89d4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b89d6:	6823      	ldr	r3, [r4, #0]
   b89d8:	f8cd 8000 	str.w	r8, [sp]
   b89dc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b89e0:	4432      	add	r2, r6
   b89e2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b89e6:	4639      	mov	r1, r7
   b89e8:	462b      	mov	r3, r5
   b89ea:	4620      	mov	r0, r4
   b89ec:	b212      	sxth	r2, r2
   b89ee:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b89f0:	6823      	ldr	r3, [r4, #0]
   b89f2:	f8cd 8000 	str.w	r8, [sp]
   b89f6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b89fa:	4632      	mov	r2, r6
   b89fc:	464b      	mov	r3, r9
   b89fe:	4639      	mov	r1, r7
   b8a00:	4620      	mov	r0, r4
   b8a02:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b8a04:	1e6b      	subs	r3, r5, #1
   b8a06:	19d9      	adds	r1, r3, r7
   b8a08:	6823      	ldr	r3, [r4, #0]
   b8a0a:	f8cd 8000 	str.w	r8, [sp]
   b8a0e:	6a1d      	ldr	r5, [r3, #32]
   b8a10:	4620      	mov	r0, r4
   b8a12:	464b      	mov	r3, r9
   b8a14:	4632      	mov	r2, r6
   b8a16:	b209      	sxth	r1, r1
   b8a18:	47a8      	blx	r5
    endWrite();
   b8a1a:	6823      	ldr	r3, [r4, #0]
   b8a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a1e:	4620      	mov	r0, r4
}
   b8a20:	b002      	add	sp, #8
   b8a22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b8a26:	4718      	bx	r3

000b8a28 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b8a28:	4770      	bx	lr

000b8a2a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b8a2a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b8a2e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b8a32:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b8a34:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b8a36:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b8a3a:	bf59      	ittee	pl
   b8a3c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b8a3e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8a40:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b8a42:	81c3      	strhmi	r3, [r0, #14]
}
   b8a44:	4770      	bx	lr
	...

000b8a48 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b8a48:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b8a4a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b8a4c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b8a4e:	4a07      	ldr	r2, [pc, #28]	; (b8a6c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8a50:	4d07      	ldr	r5, [pc, #28]	; (b8a70 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b8a52:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b8a54:	2400      	movs	r4, #0
    _width    = WIDTH;
   b8a56:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b8a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8a5c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8a60:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b8a62:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b8a64:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b8a66:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b8a68:	6204      	str	r4, [r0, #32]
}
   b8a6a:	bd30      	pop	{r4, r5, pc}
   b8a6c:	01000101 	.word	0x01000101
   b8a70:	000c193c 	.word	0x000c193c

000b8a74 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a78:	b089      	sub	sp, #36	; 0x24
   b8a7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8a7e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8a80:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8a84:	9304      	str	r3, [sp, #16]
   b8a86:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8a8a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8a8c:	9305      	str	r3, [sp, #20]
   b8a8e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8a92:	4604      	mov	r4, r0
    startWrite();
   b8a94:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8a96:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8a9a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8a9e:	bf48      	it	mi
   b8aa0:	f108 020e 	addmi.w	r2, r8, #14
   b8aa4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8aa8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b8aaa:	4635      	mov	r5, r6
   b8aac:	9b03      	ldr	r3, [sp, #12]
   b8aae:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8ab0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8ab4:	189a      	adds	r2, r3, r2
   b8ab6:	9b05      	ldr	r3, [sp, #20]
   b8ab8:	428b      	cmp	r3, r1
   b8aba:	b212      	sxth	r2, r2
   b8abc:	dd27      	ble.n	b8b0e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8abe:	9b04      	ldr	r3, [sp, #16]
   b8ac0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8ac2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8ac6:	9306      	str	r3, [sp, #24]
   b8ac8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8acc:	4580      	cmp	r8, r0
   b8ace:	fa1f f189 	uxth.w	r1, r9
   b8ad2:	dd17      	ble.n	b8b04 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8ad4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8ad6:	bf05      	ittet	eq
   b8ad8:	9b06      	ldreq	r3, [sp, #24]
   b8ada:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8adc:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8ade:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8ae0:	bf18      	it	ne
   b8ae2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8ae4:	062b      	lsls	r3, r5, #24
   b8ae6:	d50a      	bpl.n	b8afe <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8ae8:	9b02      	ldr	r3, [sp, #8]
   b8aea:	6820      	ldr	r0, [r4, #0]
   b8aec:	9207      	str	r2, [sp, #28]
   b8aee:	4419      	add	r1, r3
   b8af0:	6983      	ldr	r3, [r0, #24]
   b8af2:	b209      	sxth	r1, r1
   b8af4:	461f      	mov	r7, r3
   b8af6:	4620      	mov	r0, r4
   b8af8:	4653      	mov	r3, sl
   b8afa:	47b8      	blx	r7
   b8afc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8afe:	f109 0901 	add.w	r9, r9, #1
   b8b02:	e7e1      	b.n	b8ac8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8b04:	9b01      	ldr	r3, [sp, #4]
   b8b06:	3301      	adds	r3, #1
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	445e      	add	r6, fp
   b8b0c:	e7ce      	b.n	b8aac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8b0e:	6823      	ldr	r3, [r4, #0]
   b8b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b12:	4620      	mov	r0, r4
}
   b8b14:	b009      	add	sp, #36	; 0x24
   b8b16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8b1a:	4718      	bx	r3

000b8b1c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b20:	ed2d 8b02 	vpush	{d8}
   b8b24:	b091      	sub	sp, #68	; 0x44
   b8b26:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8b28:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8b2a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8b2e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8b32:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b8b36:	9103      	str	r1, [sp, #12]
   b8b38:	461f      	mov	r7, r3
   b8b3a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8b3e:	9304      	str	r3, [sp, #16]
   b8b40:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8b42:	2a00      	cmp	r2, #0
   b8b44:	f040 80c5 	bne.w	b8cd2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8b48:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8b4c:	428b      	cmp	r3, r1
   b8b4e:	f340 814c 	ble.w	b8dea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8b52:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8b56:	42b3      	cmp	r3, r6
   b8b58:	f340 8147 	ble.w	b8dea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8b5c:	2306      	movs	r3, #6
   b8b5e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8b62:	2b00      	cmp	r3, #0
   b8b64:	f340 8141 	ble.w	b8dea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8b68:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8b6c:	2b00      	cmp	r3, #0
   b8b6e:	f340 813c 	ble.w	b8dea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8b72:	7f03      	ldrb	r3, [r0, #28]
   b8b74:	b91b      	cbnz	r3, b8b7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8b76:	2faf      	cmp	r7, #175	; 0xaf
   b8b78:	bf84      	itt	hi
   b8b7a:	3701      	addhi	r7, #1
   b8b7c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8b7e:	f8db 3000 	ldr.w	r3, [fp]
   b8b82:	4658      	mov	r0, fp
   b8b84:	695b      	ldr	r3, [r3, #20]
   b8b86:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8b88:	2205      	movs	r2, #5
   b8b8a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8b8c:	2200      	movs	r2, #0
   b8b8e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8b90:	4a98      	ldr	r2, [pc, #608]	; (b8df4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8b92:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8b96:	18d3      	adds	r3, r2, r3
   b8b98:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8b9a:	b2b3      	uxth	r3, r6
   b8b9c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8b9e:	9a05      	ldr	r2, [sp, #20]
   b8ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8ba2:	5c9b      	ldrb	r3, [r3, r2]
   b8ba4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8ba6:	b2ab      	uxth	r3, r5
   b8ba8:	930b      	str	r3, [sp, #44]	; 0x2c
   b8baa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b8bae:	9308      	str	r3, [sp, #32]
   b8bb0:	9b03      	ldr	r3, [sp, #12]
   b8bb2:	fb02 f905 	mul.w	r9, r2, r5
   b8bb6:	fa19 f983 	uxtah	r9, r9, r3
   b8bba:	fa0f f389 	sxth.w	r3, r9
   b8bbe:	ee08 3a10 	vmov	s16, r3
   b8bc2:	2308      	movs	r3, #8
   b8bc4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8bc6:	9b03      	ldr	r3, [sp, #12]
   b8bc8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8bcc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b8bd0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8bd4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b8bd6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b8bda:	07d2      	lsls	r2, r2, #31
   b8bdc:	d552      	bpl.n	b8c84 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b8bde:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8be0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8be4:	d13e      	bne.n	b8c64 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b8be6:	2c01      	cmp	r4, #1
   b8be8:	d13c      	bne.n	b8c64 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b8bea:	699b      	ldr	r3, [r3, #24]
   b8bec:	9906      	ldr	r1, [sp, #24]
   b8bee:	461f      	mov	r7, r3
   b8bf0:	9b04      	ldr	r3, [sp, #16]
   b8bf2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8bf4:	b212      	sxth	r2, r2
   b8bf6:	4651      	mov	r1, sl
   b8bf8:	4658      	mov	r0, fp
   b8bfa:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8bfc:	f109 0301 	add.w	r3, r9, #1
   b8c00:	fa4f f983 	sxtb.w	r9, r3
   b8c04:	9b07      	ldr	r3, [sp, #28]
   b8c06:	085b      	lsrs	r3, r3, #1
   b8c08:	9307      	str	r3, [sp, #28]
   b8c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8c0c:	3b01      	subs	r3, #1
   b8c0e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8c12:	930a      	str	r3, [sp, #40]	; 0x28
   b8c14:	d1de      	bne.n	b8bd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8c16:	9f05      	ldr	r7, [sp, #20]
   b8c18:	3701      	adds	r7, #1
   b8c1a:	b27b      	sxtb	r3, r7
   b8c1c:	9305      	str	r3, [sp, #20]
   b8c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8c20:	3b01      	subs	r3, #1
   b8c22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8c26:	9309      	str	r3, [sp, #36]	; 0x24
   b8c28:	d1b9      	bne.n	b8b9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b8c2a:	9b04      	ldr	r3, [sp, #16]
   b8c2c:	4543      	cmp	r3, r8
   b8c2e:	d00f      	beq.n	b8c50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8c30:	2d01      	cmp	r5, #1
   b8c32:	f8db 3000 	ldr.w	r3, [fp]
   b8c36:	d13b      	bne.n	b8cb0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8c38:	2c01      	cmp	r4, #1
   b8c3a:	d139      	bne.n	b8cb0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8c3c:	9908      	ldr	r1, [sp, #32]
   b8c3e:	f8cd 8000 	str.w	r8, [sp]
   b8c42:	3105      	adds	r1, #5
   b8c44:	6a1c      	ldr	r4, [r3, #32]
   b8c46:	4632      	mov	r2, r6
   b8c48:	2308      	movs	r3, #8
   b8c4a:	b209      	sxth	r1, r1
   b8c4c:	4658      	mov	r0, fp
   b8c4e:	47a0      	blx	r4
        endWrite();
   b8c50:	f8db 3000 	ldr.w	r3, [fp]
   b8c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c56:	4658      	mov	r0, fp
}
   b8c58:	b011      	add	sp, #68	; 0x44
   b8c5a:	ecbd 8b02 	vpop	{d8}
   b8c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8c62:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8c64:	9906      	ldr	r1, [sp, #24]
   b8c66:	fb14 f202 	smulbb	r2, r4, r2
   b8c6a:	440a      	add	r2, r1
   b8c6c:	9904      	ldr	r1, [sp, #16]
   b8c6e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8c70:	9400      	str	r4, [sp, #0]
   b8c72:	69db      	ldr	r3, [r3, #28]
   b8c74:	ee18 1a10 	vmov	r1, s16
   b8c78:	461f      	mov	r7, r3
   b8c7a:	b212      	sxth	r2, r2
   b8c7c:	462b      	mov	r3, r5
   b8c7e:	4658      	mov	r0, fp
   b8c80:	47b8      	blx	r7
   b8c82:	e7bb      	b.n	b8bfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8c84:	9a04      	ldr	r2, [sp, #16]
   b8c86:	4542      	cmp	r2, r8
   b8c88:	d0b8      	beq.n	b8bfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8c8a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8c8c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8c90:	d107      	bne.n	b8ca2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8c92:	2c01      	cmp	r4, #1
   b8c94:	d105      	bne.n	b8ca2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8c96:	699b      	ldr	r3, [r3, #24]
   b8c98:	9906      	ldr	r1, [sp, #24]
   b8c9a:	461f      	mov	r7, r3
   b8c9c:	440a      	add	r2, r1
   b8c9e:	4643      	mov	r3, r8
   b8ca0:	e7a8      	b.n	b8bf4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8ca2:	9906      	ldr	r1, [sp, #24]
   b8ca4:	f8cd 8004 	str.w	r8, [sp, #4]
   b8ca8:	fb14 f202 	smulbb	r2, r4, r2
   b8cac:	440a      	add	r2, r1
   b8cae:	e7df      	b.n	b8c70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b8cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8cb2:	f8cd 8004 	str.w	r8, [sp, #4]
   b8cb6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b8cba:	9a08      	ldr	r2, [sp, #32]
   b8cbc:	00e4      	lsls	r4, r4, #3
   b8cbe:	440a      	add	r2, r1
   b8cc0:	4611      	mov	r1, r2
   b8cc2:	9400      	str	r4, [sp, #0]
   b8cc4:	69dc      	ldr	r4, [r3, #28]
   b8cc6:	4632      	mov	r2, r6
   b8cc8:	462b      	mov	r3, r5
   b8cca:	b209      	sxth	r1, r1
   b8ccc:	4658      	mov	r0, fp
   b8cce:	47a0      	blx	r4
        endWrite();
   b8cd0:	e7be      	b.n	b8c50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8cd2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8cd4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8cd6:	6812      	ldr	r2, [r2, #0]
   b8cd8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8cda:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8cdc:	b2ff      	uxtb	r7, r7
   b8cde:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8ce2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8ce6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8ce8:	789a      	ldrb	r2, [r3, #2]
   b8cea:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8cec:	78da      	ldrb	r2, [r3, #3]
   b8cee:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8cf0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8cf2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8cf6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8cfa:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8cfc:	d801      	bhi.n	b8d02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8cfe:	2c01      	cmp	r4, #1
   b8d00:	d957      	bls.n	b8db2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8d02:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b8d06:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8d08:	fa0f f38a 	sxth.w	r3, sl
   b8d0c:	9307      	str	r3, [sp, #28]
        startWrite();
   b8d0e:	f8db 3000 	ldr.w	r3, [fp]
   b8d12:	4658      	mov	r0, fp
   b8d14:	695b      	ldr	r3, [r3, #20]
   b8d16:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d18:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8d1a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d1e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d20:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8d24:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b8d26:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d28:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8d2c:	429f      	cmp	r7, r3
   b8d2e:	d28f      	bcs.n	b8c50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d30:	9b07      	ldr	r3, [sp, #28]
   b8d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8d34:	443b      	add	r3, r7
   b8d36:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8d3a:	2200      	movs	r2, #0
   b8d3c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d40:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d42:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d46:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d4a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d4e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8d52:	9905      	ldr	r1, [sp, #20]
   b8d54:	4291      	cmp	r1, r2
   b8d56:	d241      	bcs.n	b8ddc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8d58:	1c5a      	adds	r2, r3, #1
   b8d5a:	b2d2      	uxtb	r2, r2
   b8d5c:	075b      	lsls	r3, r3, #29
   b8d5e:	920d      	str	r2, [sp, #52]	; 0x34
   b8d60:	d107      	bne.n	b8d72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8d62:	9b06      	ldr	r3, [sp, #24]
   b8d64:	9906      	ldr	r1, [sp, #24]
   b8d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8d68:	3301      	adds	r3, #1
   b8d6a:	b29b      	uxth	r3, r3
   b8d6c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8d70:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8d72:	f019 0f80 	tst.w	r9, #128	; 0x80
   b8d76:	d012      	beq.n	b8d9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8d78:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d7a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8d7e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8d82:	d11a      	bne.n	b8dba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8d84:	2c01      	cmp	r4, #1
   b8d86:	d118      	bne.n	b8dba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8d8a:	699b      	ldr	r3, [r3, #24]
   b8d8c:	4411      	add	r1, r2
   b8d8e:	9a05      	ldr	r2, [sp, #20]
   b8d90:	4411      	add	r1, r2
   b8d92:	461e      	mov	r6, r3
   b8d94:	4652      	mov	r2, sl
   b8d96:	9b04      	ldr	r3, [sp, #16]
   b8d98:	b209      	sxth	r1, r1
   b8d9a:	4658      	mov	r0, fp
   b8d9c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b8d9e:	9e05      	ldr	r6, [sp, #20]
   b8da0:	3601      	adds	r6, #1
   b8da2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8da4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8da8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b8daa:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b8dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b8db0:	e7ce      	b.n	b8d50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b8db2:	2300      	movs	r3, #0
   b8db4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8db8:	e7a9      	b.n	b8d0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8dba:	9805      	ldr	r0, [sp, #20]
   b8dbc:	9a08      	ldr	r2, [sp, #32]
   b8dbe:	4402      	add	r2, r0
   b8dc0:	fb02 1105 	mla	r1, r2, r5, r1
   b8dc4:	9a04      	ldr	r2, [sp, #16]
   b8dc6:	e9cd 4200 	strd	r4, r2, [sp]
   b8dca:	69db      	ldr	r3, [r3, #28]
   b8dcc:	ee18 2a10 	vmov	r2, s16
   b8dd0:	461e      	mov	r6, r3
   b8dd2:	b209      	sxth	r1, r1
   b8dd4:	462b      	mov	r3, r5
   b8dd6:	4658      	mov	r0, fp
   b8dd8:	47b0      	blx	r6
   b8dda:	e7e0      	b.n	b8d9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8dde:	3701      	adds	r7, #1
   b8de0:	4498      	add	r8, r3
   b8de2:	fa5f f888 	uxtb.w	r8, r8
   b8de6:	b2ff      	uxtb	r7, r7
   b8de8:	e79f      	b.n	b8d2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8dea:	b011      	add	sp, #68	; 0x44
   b8dec:	ecbd 8b02 	vpop	{d8}
   b8df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8df4:	000c1431 	.word	0x000c1431

000b8df8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8dfa:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8dfc:	b085      	sub	sp, #20
   b8dfe:	4604      	mov	r4, r0
   b8e00:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8e02:	2a00      	cmp	r2, #0
   b8e04:	d134      	bne.n	b8e70 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b8e06:	290a      	cmp	r1, #10
   b8e08:	d108      	bne.n	b8e1c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8e0a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8e0c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8e0e:	7e42      	ldrb	r2, [r0, #25]
   b8e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8e14:	8263      	strh	r3, [r4, #18]
}
   b8e16:	2001      	movs	r0, #1
   b8e18:	b005      	add	sp, #20
   b8e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8e1c:	290d      	cmp	r1, #13
   b8e1e:	d0fa      	beq.n	b8e16 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8e20:	7ee1      	ldrb	r1, [r4, #27]
   b8e22:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8e24:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8e26:	b171      	cbz	r1, b8e46 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8e28:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8e2c:	2106      	movs	r1, #6
   b8e2e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8e32:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b8e36:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8e38:	bfc1      	itttt	gt
   b8e3a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8e3e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8e40:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8e44:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8e46:	8ae2      	ldrh	r2, [r4, #22]
   b8e48:	9201      	str	r2, [sp, #4]
   b8e4a:	8aa2      	ldrh	r2, [r4, #20]
   b8e4c:	9200      	str	r2, [sp, #0]
   b8e4e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8e52:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8e56:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8e5a:	4620      	mov	r0, r4
   b8e5c:	f7ff fe5e 	bl	b8b1c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8e60:	7e23      	ldrb	r3, [r4, #24]
   b8e62:	8a22      	ldrh	r2, [r4, #16]
   b8e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8e68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8e6c:	8223      	strh	r3, [r4, #16]
   b8e6e:	e7d2      	b.n	b8e16 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8e70:	290a      	cmp	r1, #10
   b8e72:	d107      	bne.n	b8e84 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8e74:	2300      	movs	r3, #0
   b8e76:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8e78:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8e7a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8e7c:	8a43      	ldrh	r3, [r0, #18]
   b8e7e:	fb01 3302 	mla	r3, r1, r2, r3
   b8e82:	e7c7      	b.n	b8e14 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8e84:	290d      	cmp	r1, #13
   b8e86:	d0c6      	beq.n	b8e16 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8e88:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8e8a:	42a9      	cmp	r1, r5
   b8e8c:	d3c3      	bcc.n	b8e16 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8e8e:	7a51      	ldrb	r1, [r2, #9]
   b8e90:	4299      	cmp	r1, r3
   b8e92:	d3c0      	bcc.n	b8e16 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8e94:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8e96:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8e98:	b2ed      	uxtb	r5, r5
   b8e9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b8e9e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8ea0:	b328      	cbz	r0, b8eee <_ZN12Adafruit_GFX5writeEh+0xf6>
   b8ea2:	78e9      	ldrb	r1, [r5, #3]
   b8ea4:	b319      	cbz	r1, b8eee <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8ea6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8ea8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8eaa:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8eac:	b191      	cbz	r1, b8ed4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b8eae:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b8eb2:	4408      	add	r0, r1
   b8eb4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8eb8:	fb06 1100 	mla	r1, r6, r0, r1
   b8ebc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8ec0:	4281      	cmp	r1, r0
   b8ec2:	dd07      	ble.n	b8ed4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8ec4:	2000      	movs	r0, #0
   b8ec6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8ec8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8ecc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b8ece:	fb02 1207 	mla	r2, r2, r7, r1
   b8ed2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8ed4:	8ae2      	ldrh	r2, [r4, #22]
   b8ed6:	9201      	str	r2, [sp, #4]
   b8ed8:	8aa2      	ldrh	r2, [r4, #20]
   b8eda:	9200      	str	r2, [sp, #0]
   b8edc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8ee0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8ee4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8ee8:	4620      	mov	r0, r4
   b8eea:	f7ff fe17 	bl	b8b1c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8eee:	7929      	ldrb	r1, [r5, #4]
   b8ef0:	7e22      	ldrb	r2, [r4, #24]
   b8ef2:	8a23      	ldrh	r3, [r4, #16]
   b8ef4:	fb01 3302 	mla	r3, r1, r2, r3
   b8ef8:	e7b8      	b.n	b8e6c <_ZN12Adafruit_GFX5writeEh+0x74>

000b8efa <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8efa:	2901      	cmp	r1, #1
   b8efc:	bf38      	it	cc
   b8efe:	2101      	movcc	r1, #1
   b8f00:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8f02:	7641      	strb	r1, [r0, #25]
}
   b8f04:	4770      	bx	lr

000b8f06 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b8f06:	6042      	str	r2, [r0, #4]
  _begun = false;
   b8f08:	2200      	movs	r2, #0
   b8f0a:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b8f0c:	2220      	movs	r2, #32
  _addr = addr;
   b8f0e:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b8f10:	60c2      	str	r2, [r0, #12]
#endif
}
   b8f12:	4770      	bx	lr

000b8f14 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b8f14:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b8f16:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b8f18:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b8f1a:	b153      	cbz	r3, b8f32 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b8f1c:	7821      	ldrb	r1, [r4, #0]
   b8f1e:	6860      	ldr	r0, [r4, #4]
   b8f20:	f003 ff84 	bl	bce2c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b8f24:	6860      	ldr	r0, [r4, #4]
   b8f26:	f003 ff89 	bl	bce3c <_ZN7TwoWire15endTransmissionEv>
   b8f2a:	fab0 f080 	clz	r0, r0
   b8f2e:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b8f30:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b8f32:	2101      	movs	r1, #1
   b8f34:	f000 f803 	bl	b8f3e <_ZN18Adafruit_I2CDevice5beginEb>
   b8f38:	2800      	cmp	r0, #0
   b8f3a:	d1ef      	bne.n	b8f1c <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b8f3c:	e7f8      	b.n	b8f30 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b8f3e <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b8f3e:	b538      	push	{r3, r4, r5, lr}
   b8f40:	4604      	mov	r4, r0
  _wire->begin();
   b8f42:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b8f44:	460d      	mov	r5, r1
  _wire->begin();
   b8f46:	f003 ff6b 	bl	bce20 <_ZN7TwoWire5beginEv>
  _begun = true;
   b8f4a:	2001      	movs	r0, #1
   b8f4c:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b8f4e:	b125      	cbz	r5, b8f5a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b8f50:	4620      	mov	r0, r4
}
   b8f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b8f56:	f7ff bfdd 	b.w	b8f14 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b8f5a:	bd38      	pop	{r3, r4, r5, pc}

000b8f5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b8f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f60:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b8f64:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b8f66:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b8f68:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b8f6a:	4432      	add	r2, r6
   b8f6c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b8f6e:	4604      	mov	r4, r0
   b8f70:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b8f72:	d902      	bls.n	b8f7a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b8f74:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b8f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b8f7a:	7801      	ldrb	r1, [r0, #0]
   b8f7c:	6840      	ldr	r0, [r0, #4]
   b8f7e:	f003 ff55 	bl	bce2c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b8f82:	b97e      	cbnz	r6, b8fa4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b8f84:	6860      	ldr	r0, [r4, #4]
   b8f86:	6803      	ldr	r3, [r0, #0]
   b8f88:	462a      	mov	r2, r5
   b8f8a:	68db      	ldr	r3, [r3, #12]
   b8f8c:	4641      	mov	r1, r8
   b8f8e:	4798      	blx	r3
   b8f90:	4285      	cmp	r5, r0
   b8f92:	d1ef      	bne.n	b8f74 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b8f94:	6860      	ldr	r0, [r4, #4]
   b8f96:	4639      	mov	r1, r7
   b8f98:	f003 ff4c 	bl	bce34 <_ZN7TwoWire15endTransmissionEh>
   b8f9c:	fab0 f080 	clz	r0, r0
   b8fa0:	0940      	lsrs	r0, r0, #5
   b8fa2:	e7e8      	b.n	b8f76 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b8fa4:	f1b9 0f00 	cmp.w	r9, #0
   b8fa8:	d0ec      	beq.n	b8f84 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b8faa:	6860      	ldr	r0, [r4, #4]
   b8fac:	6803      	ldr	r3, [r0, #0]
   b8fae:	4632      	mov	r2, r6
   b8fb0:	68db      	ldr	r3, [r3, #12]
   b8fb2:	4649      	mov	r1, r9
   b8fb4:	4798      	blx	r3
   b8fb6:	4286      	cmp	r6, r0
   b8fb8:	d1dc      	bne.n	b8f74 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b8fba:	e7e3      	b.n	b8f84 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b8fbc <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   b8fbc:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b8fbe:	6840      	ldr	r0, [r0, #4]
   b8fc0:	f003 ff2a 	bl	bce18 <_ZN7TwoWire8setSpeedEm>
  _wire->setClock(desiredclk);
  return true;
#else
  return false;
#endif
}
   b8fc4:	2001      	movs	r0, #1
   b8fc6:	bd08      	pop	{r3, pc}

000b8fc8 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   b8fc8:	b510      	push	{r4, lr}
   b8fca:	4604      	mov	r4, r0
  if (_spiSetting) {
   b8fcc:	6840      	ldr	r0, [r0, #4]
   b8fce:	b110      	cbz	r0, b8fd6 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   b8fd0:	6803      	ldr	r3, [r0, #0]
   b8fd2:	689b      	ldr	r3, [r3, #8]
   b8fd4:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   b8fd6:	4620      	mov	r0, r4
   b8fd8:	bd10      	pop	{r4, pc}

000b8fda <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   b8fda:	b538      	push	{r3, r4, r5, lr}
   b8fdc:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   b8fde:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b8fe2:	2101      	movs	r1, #1
   b8fe4:	b280      	uxth	r0, r0
   b8fe6:	f004 fdbf 	bl	bdb68 <pinMode>
  digitalWrite(_cs, HIGH);
   b8fea:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b8fee:	2101      	movs	r1, #1
   b8ff0:	b280      	uxth	r0, r0
   b8ff2:	f004 fdca 	bl	bdb8a <digitalWrite>

  if (_spi) { // hardware SPI
   b8ff6:	6825      	ldr	r5, [r4, #0]
   b8ff8:	b135      	cbz	r5, b9008 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   b8ffa:	4628      	mov	r0, r5
   b8ffc:	f004 f922 	bl	bd244 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   b9000:	2001      	movs	r0, #1
   b9002:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   b9006:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   b9008:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b900c:	2101      	movs	r1, #1
   b900e:	b280      	uxth	r0, r0
   b9010:	f004 fdaa 	bl	bdb68 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   b9014:	7b63      	ldrb	r3, [r4, #13]
   b9016:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b901a:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   b901c:	bf94      	ite	ls
   b901e:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   b9020:	2101      	movhi	r1, #1
   b9022:	b280      	uxth	r0, r0
   b9024:	f004 fdb1 	bl	bdb8a <digitalWrite>
    if (_mosi != -1) {
   b9028:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b902c:	1c42      	adds	r2, r0, #1
   b902e:	d009      	beq.n	b9044 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   b9030:	2101      	movs	r1, #1
   b9032:	b280      	uxth	r0, r0
   b9034:	f004 fd98 	bl	bdb68 <pinMode>
      digitalWrite(_mosi, HIGH);
   b9038:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b903c:	2101      	movs	r1, #1
   b903e:	b280      	uxth	r0, r0
   b9040:	f004 fda3 	bl	bdb8a <digitalWrite>
    if (_miso != -1) {
   b9044:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b9048:	1c43      	adds	r3, r0, #1
   b904a:	d0d9      	beq.n	b9000 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   b904c:	2100      	movs	r1, #0
   b904e:	b280      	uxth	r0, r0
   b9050:	f004 fd8a 	bl	bdb68 <pinMode>
   b9054:	e7d4      	b.n	b9000 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000b9058 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b9058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b905c:	4604      	mov	r4, r0
  if (_spi) {
   b905e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b9060:	b085      	sub	sp, #20
   b9062:	460d      	mov	r5, r1
  if (_spi) {
   b9064:	b140      	cbz	r0, b9078 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b9066:	2300      	movs	r3, #0
   b9068:	9300      	str	r3, [sp, #0]
   b906a:	4613      	mov	r3, r2
   b906c:	460a      	mov	r2, r1
   b906e:	f004 f98b 	bl	bd388 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b9072:	b005      	add	sp, #20
   b9074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b9078:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b907a:	68a0      	ldr	r0, [r4, #8]
   b907c:	4f48      	ldr	r7, [pc, #288]	; (b91a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b907e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b9082:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b9084:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b9086:	bf0c      	ite	eq
   b9088:	f04f 0b01 	moveq.w	fp, #1
   b908c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b9090:	ea1b 0f03 	tst.w	fp, r3
   b9094:	eb01 0302 	add.w	r3, r1, r2
   b9098:	bf0c      	ite	eq
   b909a:	f04f 0901 	moveq.w	r9, #1
   b909e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b90a2:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b90a4:	9303      	str	r3, [sp, #12]
   b90a6:	9b03      	ldr	r3, [sp, #12]
   b90a8:	42ab      	cmp	r3, r5
   b90aa:	d0e2      	beq.n	b9072 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b90ac:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b90b0:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b90b2:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b90b6:	b117      	cbz	r7, b90be <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b90b8:	4638      	mov	r0, r7
   b90ba:	f000 fcdd 	bl	b9a78 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b90be:	7b63      	ldrb	r3, [r4, #13]
   b90c0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b90c4:	d141      	bne.n	b914a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b90c6:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b90ca:	1c5a      	adds	r2, r3, #1
   b90cc:	d00f      	beq.n	b90ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b90ce:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b90d2:	bf14      	ite	ne
   b90d4:	2301      	movne	r3, #1
   b90d6:	2300      	moveq	r3, #0
   b90d8:	454b      	cmp	r3, r9
   b90da:	d008      	beq.n	b90ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b90dc:	6963      	ldr	r3, [r4, #20]
   b90de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b90e0:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b90e2:	2900      	cmp	r1, #0
   b90e4:	d02c      	beq.n	b9140 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b90e6:	4302      	orrs	r2, r0
   b90e8:	601a      	str	r2, [r3, #0]
   b90ea:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b90ee:	69a1      	ldr	r1, [r4, #24]
   b90f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b90f2:	680a      	ldr	r2, [r1, #0]
   b90f4:	4313      	orrs	r3, r2
   b90f6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b90f8:	b117      	cbz	r7, b9100 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b90fa:	4638      	mov	r0, r7
   b90fc:	f000 fcbc 	bl	b9a78 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b9100:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b9104:	3301      	adds	r3, #1
   b9106:	d006      	beq.n	b9116 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b9108:	69e3      	ldr	r3, [r4, #28]
   b910a:	681a      	ldr	r2, [r3, #0]
   b910c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b910e:	421a      	tst	r2, r3
            reply |= b;
   b9110:	bf18      	it	ne
   b9112:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b9116:	69a1      	ldr	r1, [r4, #24]
   b9118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b911a:	680a      	ldr	r2, [r1, #0]
   b911c:	ea22 0303 	bic.w	r3, r2, r3
   b9120:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b9122:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b9126:	3301      	adds	r3, #1
        buffer[i] = reply;
   b9128:	bf18      	it	ne
   b912a:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b912e:	7b23      	ldrb	r3, [r4, #12]
   b9130:	2b00      	cmp	r3, #0
   b9132:	d132      	bne.n	b919a <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b9134:	0076      	lsls	r6, r6, #1
   b9136:	b2f6      	uxtb	r6, r6
   b9138:	2e00      	cmp	r6, #0
   b913a:	d1bc      	bne.n	b90b6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b913c:	3501      	adds	r5, #1
   b913e:	e7b2      	b.n	b90a6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b9140:	ea22 0200 	bic.w	r2, r2, r0
   b9144:	601a      	str	r2, [r3, #0]
   b9146:	4689      	mov	r9, r1
   b9148:	e7d1      	b.n	b90ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b914a:	69a1      	ldr	r1, [r4, #24]
   b914c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b914e:	680a      	ldr	r2, [r1, #0]
   b9150:	4313      	orrs	r3, r2
   b9152:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b9154:	b117      	cbz	r7, b915c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b9156:	4638      	mov	r0, r7
   b9158:	f000 fc8e 	bl	b9a78 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b915c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b9160:	3301      	adds	r3, #1
   b9162:	d008      	beq.n	b9176 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b9164:	6963      	ldr	r3, [r4, #20]
   b9166:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b9168:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b916a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b916e:	bf14      	ite	ne
   b9170:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b9172:	438a      	biceq	r2, r1
   b9174:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b9176:	69a1      	ldr	r1, [r4, #24]
   b9178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b917a:	680a      	ldr	r2, [r1, #0]
   b917c:	ea22 0303 	bic.w	r3, r2, r3
   b9180:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b9182:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b9186:	3301      	adds	r3, #1
   b9188:	d0cb      	beq.n	b9122 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b918a:	69e3      	ldr	r3, [r4, #28]
   b918c:	681a      	ldr	r2, [r3, #0]
   b918e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b9190:	421a      	tst	r2, r3
            reply |= b;
   b9192:	bf18      	it	ne
   b9194:	ea46 0808 	orrne.w	r8, r6, r8
   b9198:	e7c3      	b.n	b9122 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b919a:	0876      	lsrs	r6, r6, #1
   b919c:	e7cc      	b.n	b9138 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b919e:	bf00      	nop
   b91a0:	0007a120 	.word	0x0007a120

000b91a4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b91a4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b91a6:	2201      	movs	r2, #1
  uint8_t data = send;
   b91a8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b91ac:	f10d 0107 	add.w	r1, sp, #7
   b91b0:	f7ff ff52 	bl	b9058 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b91b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b91b8:	b003      	add	sp, #12
   b91ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b91be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b91be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b91c2:	4604      	mov	r4, r0
  if (_spi) {
   b91c4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b91c6:	460e      	mov	r6, r1
   b91c8:	4617      	mov	r7, r2
   b91ca:	461d      	mov	r5, r3
  if (_spi) {
   b91cc:	b110      	cbz	r0, b91d4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b91ce:	6861      	ldr	r1, [r4, #4]
   b91d0:	f004 f866 	bl	bd2a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b91d4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b91d8:	2100      	movs	r1, #0
   b91da:	b280      	uxth	r0, r0
   b91dc:	f004 fcd5 	bl	bdb8a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b91e0:	9b06      	ldr	r3, [sp, #24]
   b91e2:	eb05 0803 	add.w	r8, r5, r3
   b91e6:	4545      	cmp	r5, r8
   b91e8:	d108      	bne.n	b91fc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b91ea:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b91ec:	42b7      	cmp	r7, r6
   b91ee:	d00b      	beq.n	b9208 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b91f0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b91f4:	4620      	mov	r0, r4
   b91f6:	f7ff ffd5 	bl	b91a4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b91fa:	e7f7      	b.n	b91ec <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b91fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9200:	4620      	mov	r0, r4
   b9202:	f7ff ffcf 	bl	b91a4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b9206:	e7ee      	b.n	b91e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b9208:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b920c:	2101      	movs	r1, #1
   b920e:	b280      	uxth	r0, r0
   b9210:	f004 fcbb 	bl	bdb8a <digitalWrite>

  if (_spi) {
   b9214:	6820      	ldr	r0, [r4, #0]
   b9216:	b108      	cbz	r0, b921c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b9218:	f004 f828 	bl	bd26c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b921c:	2001      	movs	r0, #1
   b921e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9222 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9222:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b9224:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9226:	db66      	blt.n	b92f6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9228:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b922c:	428c      	cmp	r4, r1
   b922e:	dd62      	ble.n	b92f6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9230:	2a00      	cmp	r2, #0
   b9232:	db60      	blt.n	b92f6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9234:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9238:	4294      	cmp	r4, r2
   b923a:	dd5c      	ble.n	b92f6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b923c:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   b923e:	2c02      	cmp	r4, #2
   b9240:	d05a      	beq.n	b92f8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   b9242:	2c03      	cmp	r4, #3
   b9244:	d061      	beq.n	b930a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   b9246:	2c01      	cmp	r4, #1
   b9248:	d104      	bne.n	b9254 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   b924a:	8904      	ldrh	r4, [r0, #8]
   b924c:	43d2      	mvns	r2, r2
   b924e:	4414      	add	r4, r2
      break;
   b9250:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b9252:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   b9254:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   b9258:	428c      	cmp	r4, r1
   b925a:	bfa8      	it	ge
   b925c:	460c      	movge	r4, r1
   b925e:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   b9260:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   b9264:	4294      	cmp	r4, r2
   b9266:	bfa8      	it	ge
   b9268:	4614      	movge	r4, r2
   b926a:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   b926c:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   b9270:	428c      	cmp	r4, r1
   b9272:	bfb8      	it	lt
   b9274:	460c      	movlt	r4, r1
   b9276:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   b9278:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   b927c:	4294      	cmp	r4, r2
   b927e:	bfb8      	it	lt
   b9280:	4614      	movlt	r4, r2
   b9282:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   b9284:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b9288:	2c01      	cmp	r4, #1
   b928a:	d116      	bne.n	b92ba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   b928c:	2b01      	cmp	r3, #1
   b928e:	d042      	beq.n	b9316 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   b9290:	2b02      	cmp	r3, #2
   b9292:	d051      	beq.n	b9338 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   b9294:	b98b      	cbnz	r3, b92ba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b9296:	2a00      	cmp	r2, #0
   b9298:	8905      	ldrh	r5, [r0, #8]
   b929a:	6b47      	ldr	r7, [r0, #52]	; 0x34
   b929c:	4614      	mov	r4, r2
   b929e:	bfb8      	it	lt
   b92a0:	1dd4      	addlt	r4, r2, #7
   b92a2:	10e4      	asrs	r4, r4, #3
   b92a4:	fb14 1405 	smlabb	r4, r4, r5, r1
   b92a8:	f002 0607 	and.w	r6, r2, #7
   b92ac:	2501      	movs	r5, #1
   b92ae:	fa05 f606 	lsl.w	r6, r5, r6
   b92b2:	5d3d      	ldrb	r5, [r7, r4]
   b92b4:	ea25 0506 	bic.w	r5, r5, r6
   b92b8:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   b92ba:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b92be:	2c04      	cmp	r4, #4
   b92c0:	d119      	bne.n	b92f6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   b92c2:	8904      	ldrh	r4, [r0, #8]
   b92c4:	fb14 f202 	smulbb	r2, r4, r2
   b92c8:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   b92cc:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   b92d0:	f342 024f 	sbfx	r2, r2, #1, #16
   b92d4:	eb02 0264 	add.w	r2, r2, r4, asr #1
   b92d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   b92da:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   b92dc:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   b92de:	bf4b      	itete	mi
   b92e0:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   b92e4:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   b92e8:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   b92ec:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   b92f0:	bf48      	it	mi
   b92f2:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   b92f4:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   b92f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   b92f8:	8904      	ldrh	r4, [r0, #8]
   b92fa:	3c01      	subs	r4, #1
   b92fc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b92fe:	8944      	ldrh	r4, [r0, #10]
   b9300:	43d2      	mvns	r2, r2
   b9302:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b9304:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b9306:	b212      	sxth	r2, r2
      break;
   b9308:	e7a4      	b.n	b9254 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b930a:	8944      	ldrh	r4, [r0, #10]
   b930c:	3c01      	subs	r4, #1
   b930e:	1a64      	subs	r4, r4, r1
      break;
   b9310:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b9312:	b222      	sxth	r2, r4
      break;
   b9314:	e79e      	b.n	b9254 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b9316:	2a00      	cmp	r2, #0
   b9318:	8905      	ldrh	r5, [r0, #8]
   b931a:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b931c:	4614      	mov	r4, r2
   b931e:	bfb8      	it	lt
   b9320:	1dd4      	addlt	r4, r2, #7
   b9322:	10e4      	asrs	r4, r4, #3
   b9324:	fb14 1405 	smlabb	r4, r4, r5, r1
   b9328:	f002 0707 	and.w	r7, r2, #7
   b932c:	2501      	movs	r5, #1
   b932e:	40bd      	lsls	r5, r7
   b9330:	5d37      	ldrb	r7, [r6, r4]
   b9332:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b9334:	5535      	strb	r5, [r6, r4]
        break;
   b9336:	e7c0      	b.n	b92ba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b9338:	2a00      	cmp	r2, #0
   b933a:	8905      	ldrh	r5, [r0, #8]
   b933c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b933e:	4614      	mov	r4, r2
   b9340:	bfb8      	it	lt
   b9342:	1dd4      	addlt	r4, r2, #7
   b9344:	10e4      	asrs	r4, r4, #3
   b9346:	fb14 1405 	smlabb	r4, r4, r5, r1
   b934a:	f002 0707 	and.w	r7, r2, #7
   b934e:	2501      	movs	r5, #1
   b9350:	40bd      	lsls	r5, r7
   b9352:	5d37      	ldrb	r7, [r6, r4]
   b9354:	407d      	eors	r5, r7
   b9356:	e7ed      	b.n	b9334 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000b9358 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   b9358:	b538      	push	{r3, r4, r5, lr}
   b935a:	460d      	mov	r5, r1
   b935c:	4611      	mov	r1, r2
   b935e:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b9360:	b21a      	sxth	r2, r3
   b9362:	b209      	sxth	r1, r1
   b9364:	f7ff fb70 	bl	b8a48 <_ZN12Adafruit_GFXC1Ess>
   b9368:	9a06      	ldr	r2, [sp, #24]
   b936a:	4b0b      	ldr	r3, [pc, #44]	; (b9398 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   b936c:	62e2      	str	r2, [r4, #44]	; 0x2c
   b936e:	9a07      	ldr	r2, [sp, #28]
   b9370:	6023      	str	r3, [r4, #0]
   b9372:	2300      	movs	r3, #0
   b9374:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   b9378:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   b937c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9380:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b9384:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b9388:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   b938a:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b938c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   b9390:	6523      	str	r3, [r4, #80]	; 0x50
}
   b9392:	4620      	mov	r0, r4
   b9394:	bd38      	pop	{r3, r4, r5, pc}
   b9396:	bf00      	nop
   b9398:	000c1994 	.word	0x000c1994

000b939c <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   b939c:	b538      	push	{r3, r4, r5, lr}
   b939e:	4b0c      	ldr	r3, [pc, #48]	; (b93d0 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   b93a0:	6003      	str	r3, [r0, #0]
   b93a2:	4604      	mov	r4, r0
  if (buffer) {
   b93a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b93a6:	b118      	cbz	r0, b93b0 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   b93a8:	f000 fdfa 	bl	b9fa0 <free>
    buffer = NULL;
   b93ac:	2300      	movs	r3, #0
   b93ae:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   b93b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b93b2:	b135      	cbz	r5, b93c2 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   b93b4:	4628      	mov	r0, r5
   b93b6:	f7ff fe07 	bl	b8fc8 <_ZN18Adafruit_SPIDeviceD1Ev>
   b93ba:	2138      	movs	r1, #56	; 0x38
   b93bc:	4628      	mov	r0, r5
   b93be:	f7fa fe6e 	bl	b409e <_ZdlPvj>
  if (i2c_dev)
   b93c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b93c4:	b110      	cbz	r0, b93cc <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   b93c6:	2110      	movs	r1, #16
   b93c8:	f7fa fe69 	bl	b409e <_ZdlPvj>
}
   b93cc:	4620      	mov	r0, r4
   b93ce:	bd38      	pop	{r3, r4, r5, pc}
   b93d0:	000c1994 	.word	0x000c1994

000b93d4 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b93d4:	b530      	push	{r4, r5, lr}
   b93d6:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   b93d8:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b93da:	f88d 100f 	strb.w	r1, [sp, #15]
   b93de:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   b93e0:	b17d      	cbz	r5, b9402 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b93e2:	2300      	movs	r3, #0
   b93e4:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   b93e6:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b93ea:	f88d 3014 	strb.w	r3, [sp, #20]
   b93ee:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   b93f2:	2301      	movs	r3, #1
   b93f4:	2202      	movs	r2, #2
   b93f6:	a905      	add	r1, sp, #20
   b93f8:	4628      	mov	r0, r5
   b93fa:	f7ff fdaf 	bl	b8f5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b93fe:	b007      	add	sp, #28
   b9400:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   b9402:	4629      	mov	r1, r5
   b9404:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b9408:	f004 fbbf 	bl	bdb8a <digitalWrite>
    spi_dev->write(&c, 1);
   b940c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b940e:	9500      	str	r5, [sp, #0]
   b9410:	462b      	mov	r3, r5
   b9412:	2201      	movs	r2, #1
   b9414:	f10d 010f 	add.w	r1, sp, #15
   b9418:	f7ff fed1 	bl	b91be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   b941c:	e7ef      	b.n	b93fe <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000b941e <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   b941e:	2900      	cmp	r1, #0
   b9420:	bf14      	ite	ne
   b9422:	21a7      	movne	r1, #167	; 0xa7
   b9424:	21a6      	moveq	r1, #166	; 0xa6
   b9426:	f7ff bfd5 	b.w	b93d4 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000b942a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b942a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   b942c:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b942e:	b085      	sub	sp, #20
   b9430:	4604      	mov	r4, r0
   b9432:	460e      	mov	r6, r1
   b9434:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   b9436:	b165      	cbz	r5, b9452 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b9438:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b943a:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b943e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b9442:	2301      	movs	r3, #1
   b9444:	9000      	str	r0, [sp, #0]
   b9446:	9301      	str	r3, [sp, #4]
   b9448:	4628      	mov	r0, r5
   b944a:	f7ff fd87 	bl	b8f5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b944e:	b005      	add	sp, #20
   b9450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   b9452:	4629      	mov	r1, r5
   b9454:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b9458:	f004 fb97 	bl	bdb8a <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   b945c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b945e:	9500      	str	r5, [sp, #0]
   b9460:	462b      	mov	r3, r5
   b9462:	463a      	mov	r2, r7
   b9464:	4631      	mov	r1, r6
   b9466:	f7ff feaa 	bl	b91be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b946a:	e7f0      	b.n	b944e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000b946c <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   b946c:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b946e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   b9472:	8903      	ldrh	r3, [r0, #8]
   b9474:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b9478:	fb12 f203 	smulbb	r2, r2, r3
   b947c:	1dcb      	adds	r3, r1, #7
   b947e:	bf48      	it	mi
   b9480:	f101 030e 	addmi.w	r3, r1, #14
   b9484:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   b9486:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b9488:	435a      	muls	r2, r3
   b948a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b948c:	2100      	movs	r1, #0
   b948e:	f005 fb1e 	bl	beace <memset>
  window_x1 = 0;
   b9492:	2300      	movs	r3, #0
   b9494:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b9496:	8923      	ldrh	r3, [r4, #8]
   b9498:	3b01      	subs	r3, #1
   b949a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b949c:	8963      	ldrh	r3, [r4, #10]
   b949e:	3b01      	subs	r3, #1
   b94a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   b94a2:	bd10      	pop	{r4, pc}

000b94a4 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b94a4:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   b94a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b94a8:	4604      	mov	r4, r0
   b94aa:	460e      	mov	r6, r1
   b94ac:	4615      	mov	r5, r2
  if ((!buffer) &&
   b94ae:	b30b      	cbz	r3, b94f4 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   b94b0:	2d00      	cmp	r5, #0
   b94b2:	d133      	bne.n	b951c <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   b94b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b94b6:	2b00      	cmp	r3, #0
   b94b8:	d050      	beq.n	b955c <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   b94ba:	2010      	movs	r0, #16
   b94bc:	f7fa fdeb 	bl	b4096 <_Znwj>
   b94c0:	4605      	mov	r5, r0
   b94c2:	b118      	cbz	r0, b94cc <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   b94c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b94c6:	4631      	mov	r1, r6
   b94c8:	f7ff fd1d 	bl	b8f06 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b94cc:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   b94ce:	b31d      	cbz	r5, b9518 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b94d0:	2101      	movs	r1, #1
   b94d2:	4628      	mov	r0, r5
   b94d4:	f7ff fd33 	bl	b8f3e <_ZN18Adafruit_I2CDevice5beginEb>
   b94d8:	b1f0      	cbz	r0, b9518 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   b94da:	4620      	mov	r0, r4
   b94dc:	f7ff ffc6 	bl	b946c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   b94e0:	2300      	movs	r3, #0
   b94e2:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b94e4:	8923      	ldrh	r3, [r4, #8]
   b94e6:	3b01      	subs	r3, #1
   b94e8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b94ea:	8963      	ldrh	r3, [r4, #10]
   b94ec:	3b01      	subs	r3, #1
   b94ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   b94f0:	2001      	movs	r0, #1
   b94f2:	e012      	b.n	b951a <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   b94f4:	8923      	ldrh	r3, [r4, #8]
   b94f6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b94fa:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   b94fe:	fb10 f003 	smulbb	r0, r0, r3
   b9502:	1dd3      	adds	r3, r2, #7
   b9504:	bf48      	it	mi
   b9506:	f102 030e 	addmi.w	r3, r2, #14
   b950a:	10db      	asrs	r3, r3, #3
   b950c:	4358      	muls	r0, r3
   b950e:	f000 fd3f 	bl	b9f90 <malloc>
   b9512:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   b9514:	2800      	cmp	r0, #0
   b9516:	d1cb      	bne.n	b94b0 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   b9518:	2000      	movs	r0, #0
}
   b951a:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   b951c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   b951e:	2800      	cmp	r0, #0
   b9520:	dbc8      	blt.n	b94b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   b9522:	2101      	movs	r1, #1
   b9524:	b280      	uxth	r0, r0
   b9526:	f004 fb1f 	bl	bdb68 <pinMode>
    digitalWrite(rstPin, HIGH);
   b952a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b952e:	2101      	movs	r1, #1
   b9530:	f004 fb2b 	bl	bdb8a <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   b9534:	200a      	movs	r0, #10
   b9536:	f000 fd93 	bl	ba060 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b953a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b953e:	2100      	movs	r1, #0
   b9540:	f004 fb23 	bl	bdb8a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b9544:	200a      	movs	r0, #10
   b9546:	f000 fd8b 	bl	ba060 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b954a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b954e:	2101      	movs	r1, #1
   b9550:	f004 fb1b 	bl	bdb8a <digitalWrite>
    delay(10);
   b9554:	200a      	movs	r0, #10
   b9556:	f000 fd83 	bl	ba060 <delay>
   b955a:	e7ab      	b.n	b94b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   b955c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b955e:	2800      	cmp	r0, #0
   b9560:	d0da      	beq.n	b9518 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b9562:	f7ff fd3a 	bl	b8fda <_ZN18Adafruit_SPIDevice5beginEv>
   b9566:	2800      	cmp	r0, #0
   b9568:	d0d6      	beq.n	b9518 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b956a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b956e:	2101      	movs	r1, #1
   b9570:	f004 fafa 	bl	bdb68 <pinMode>
   b9574:	e7b1      	b.n	b94da <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000b9576 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   b9576:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b9578:	2381      	movs	r3, #129	; 0x81
   b957a:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   b957e:	2202      	movs	r2, #2
   b9580:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b9582:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   b9586:	f7ff ff50 	bl	b942a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   b958a:	b003      	add	sp, #12
   b958c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9590 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   b9590:	b510      	push	{r4, lr}
   b9592:	4b03      	ldr	r3, [pc, #12]	; (b95a0 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   b9594:	6003      	str	r3, [r0, #0]
   b9596:	4604      	mov	r4, r0
   b9598:	f000 f958 	bl	b984c <_ZN15Adafruit_SH110XD1Ev>
   b959c:	4620      	mov	r0, r4
   b959e:	bd10      	pop	{r4, pc}
   b95a0:	000c1bd0 	.word	0x000c1bd0

000b95a4 <_ZN15Adafruit_SH1107D0Ev>:
   b95a4:	b510      	push	{r4, lr}
   b95a6:	4604      	mov	r4, r0
   b95a8:	f7ff fff2 	bl	b9590 <_ZN15Adafruit_SH1107D1Ev>
   b95ac:	4620      	mov	r0, r4
   b95ae:	2158      	movs	r1, #88	; 0x58
   b95b0:	f7fa fd75 	bl	b409e <_ZdlPvj>
   b95b4:	4620      	mov	r0, r4
   b95b6:	bd10      	pop	{r4, pc}

000b95b8 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   b95b8:	b530      	push	{r4, r5, lr}
   b95ba:	b085      	sub	sp, #20
   b95bc:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b95be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b95c0:	9502      	str	r5, [sp, #8]
   b95c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b95c4:	9501      	str	r5, [sp, #4]
   b95c6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b95ca:	9500      	str	r5, [sp, #0]
   b95cc:	f000 f924 	bl	b9818 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   b95d0:	4b02      	ldr	r3, [pc, #8]	; (b95dc <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   b95d2:	6023      	str	r3, [r4, #0]
   b95d4:	4620      	mov	r0, r4
   b95d6:	b005      	add	sp, #20
   b95d8:	bd30      	pop	{r4, r5, pc}
   b95da:	bf00      	nop
   b95dc:	000c1bd0 	.word	0x000c1bd0

000b95e0 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   b95e0:	b530      	push	{r4, r5, lr}
   b95e2:	4604      	mov	r4, r0
   b95e4:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   b95e6:	f7ff ff5d 	bl	b94a4 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   b95ea:	212f      	movs	r1, #47	; 0x2f
   b95ec:	4620      	mov	r0, r4
   b95ee:	f7ff ffc2 	bl	b9576 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   b95f2:	68a2      	ldr	r2, [r4, #8]
   b95f4:	4b2f      	ldr	r3, [pc, #188]	; (b96b4 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   b95f6:	429a      	cmp	r2, r3
   b95f8:	d121      	bne.n	b963e <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   b95fa:	6823      	ldr	r3, [r4, #0]
   b95fc:	2101      	movs	r1, #1
   b95fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9600:	4620      	mov	r0, r4
   b9602:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b9604:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b9608:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b960c:	2320      	movs	r3, #32
   b960e:	3a20      	subs	r2, #32
   b9610:	3973      	subs	r1, #115	; 0x73
   b9612:	2501      	movs	r5, #1
   b9614:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b9618:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b961c:	2373      	movs	r3, #115	; 0x73
   b961e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9622:	9300      	str	r3, [sp, #0]
   b9624:	f341 014f 	sbfx	r1, r1, #1, #16
   b9628:	4b23      	ldr	r3, [pc, #140]	; (b96b8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b962a:	4620      	mov	r0, r4
   b962c:	f342 024f 	sbfx	r2, r2, #1, #16
   b9630:	f7ff fa20 	bl	b8a74 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   b9634:	6823      	ldr	r3, [r4, #0]
   b9636:	2100      	movs	r1, #0
   b9638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b963a:	4620      	mov	r0, r4
   b963c:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   b963e:	68a3      	ldr	r3, [r4, #8]
   b9640:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9644:	d117      	bne.n	b9676 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b9646:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b964a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b964e:	2320      	movs	r3, #32
   b9650:	2001      	movs	r0, #1
   b9652:	3a20      	subs	r2, #32
   b9654:	3973      	subs	r1, #115	; 0x73
   b9656:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b965a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b965e:	2373      	movs	r3, #115	; 0x73
   b9660:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9664:	9300      	str	r3, [sp, #0]
   b9666:	f342 024f 	sbfx	r2, r2, #1, #16
   b966a:	4b13      	ldr	r3, [pc, #76]	; (b96b8 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b966c:	f341 014f 	sbfx	r1, r1, #1, #16
   b9670:	4620      	mov	r0, r4
   b9672:	f7ff f9ff 	bl	b8a74 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   b9676:	4911      	ldr	r1, [pc, #68]	; (b96bc <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   b9678:	2216      	movs	r2, #22
   b967a:	4620      	mov	r0, r4
   b967c:	f7ff fed5 	bl	b942a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b9680:	4605      	mov	r5, r0
   b9682:	b918      	cbnz	r0, b968c <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   b9684:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   b9686:	4628      	mov	r0, r5
   b9688:	b005      	add	sp, #20
   b968a:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   b968c:	68a3      	ldr	r3, [r4, #8]
   b968e:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9692:	d007      	beq.n	b96a4 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   b9694:	2064      	movs	r0, #100	; 0x64
   b9696:	f000 fce3 	bl	ba060 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   b969a:	21af      	movs	r1, #175	; 0xaf
   b969c:	4620      	mov	r0, r4
   b969e:	f7ff fe99 	bl	b93d4 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   b96a2:	e7f0      	b.n	b9686 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   b96a4:	4906      	ldr	r1, [pc, #24]	; (b96c0 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   b96a6:	2204      	movs	r2, #4
   b96a8:	4620      	mov	r0, r4
   b96aa:	f7ff febe 	bl	b942a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b96ae:	2800      	cmp	r0, #0
   b96b0:	d1f0      	bne.n	b9694 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   b96b2:	e7e7      	b.n	b9684 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   b96b4:	00800040 	.word	0x00800040
   b96b8:	000c19e8 	.word	0x000c19e8
   b96bc:	000c1c28 	.word	0x000c1c28
   b96c0:	000c1c24 	.word	0x000c1c24

000b96c4 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   b96c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96c8:	4604      	mov	r4, r0
   b96ca:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b96cc:	f000 f97c 	bl	b99c8 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b96d0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   b96d4:	f9b4 603a 	ldrsh.w	r6, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b96d8:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   b96dc:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
   b96e0:	1dda      	adds	r2, r3, #7
   b96e2:	bf48      	it	mi
   b96e4:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   b96e8:	2340      	movs	r3, #64	; 0x40
   b96ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   b96ee:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   b96f2:	9303      	str	r3, [sp, #12]
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b96f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b96f6:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b96fa:	68db      	ldr	r3, [r3, #12]
  uint8_t bytes_per_page = WIDTH;
   b96fc:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   b96fe:	2e00      	cmp	r6, #0
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9700:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9704:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  uint8_t first_page = window_y1 / 8;
   b9708:	bfb8      	it	lt
   b970a:	3607      	addlt	r6, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b970c:	b2d2      	uxtb	r2, r2
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b970e:	b29b      	uxth	r3, r3
  uint8_t first_page = window_y1 / 8;
   b9710:	45b9      	cmp	r9, r7
   b9712:	f3c6 06c7 	ubfx	r6, r6, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b9716:	bf28      	it	cs
   b9718:	46b9      	movcs	r9, r7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b971a:	9204      	str	r2, [sp, #16]
  Serial.print(page_start);
  Serial.print(" -> ");
  Serial.println(page_end);
  */

  for (uint8_t p = first_page; p < pages; p++) {
   b971c:	b2db      	uxtb	r3, r3
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   b971e:	1c7a      	adds	r2, r7, #1
   b9720:	fb06 9b07 	mla	fp, r6, r7, r9
   b9724:	9205      	str	r2, [sp, #20]
   b9726:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
   b9728:	9b03      	ldr	r3, [sp, #12]
   b972a:	429e      	cmp	r6, r3
   b972c:	d26a      	bcs.n	b9804 <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
   b972e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9730:	8925      	ldrh	r5, [r4, #8]

    if (i2c_dev) { // I2C
      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9732:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   b9736:	eb03 080b 	add.w	r8, r3, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
   b973a:	9b05      	ldr	r3, [sp, #20]
   b973c:	1b5d      	subs	r5, r3, r5
   b973e:	9b04      	ldr	r3, [sp, #16]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9740:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9742:	441d      	add	r5, r3
    if (i2c_dev) { // I2C
   b9744:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9746:	1110      	asrs	r0, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9748:	eba5 0509 	sub.w	r5, r5, r9
   b974c:	f1a6 0150 	sub.w	r1, r6, #80	; 0x50
   b9750:	b2ed      	uxtb	r5, r5
    if (i2c_dev) { // I2C
   b9752:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9754:	3010      	adds	r0, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9756:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   b975a:	b39b      	cbz	r3, b97c4 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint8_t cmd[] = {
   b975c:	f04f 0a00 	mov.w	sl, #0
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9760:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   b9764:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
   b9768:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
   b976a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   b976e:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9770:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      i2c_dev->setSpeed(i2c_preclk);
   b9774:	f7ff fc22 	bl	b8fbc <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
   b9778:	e9cd aa00 	strd	sl, sl, [sp]
   b977c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b977e:	2301      	movs	r3, #1
   b9780:	2204      	movs	r2, #4
   b9782:	a909      	add	r1, sp, #36	; 0x24
   b9784:	f7ff fbea 	bl	b8f5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b9788:	f10d 0a23 	add.w	sl, sp, #35	; 0x23
   b978c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   b978e:	b195      	cbz	r5, b97b6 <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b9790:	9b06      	ldr	r3, [sp, #24]
   b9792:	42ab      	cmp	r3, r5
   b9794:	bf28      	it	cs
   b9796:	462b      	movcs	r3, r5
   b9798:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b979a:	2301      	movs	r3, #1
   b979c:	4641      	mov	r1, r8
   b979e:	e9cd a300 	strd	sl, r3, [sp]
   b97a2:	9207      	str	r2, [sp, #28]
   b97a4:	f7ff fbda 	bl	b8f5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   b97a8:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   b97aa:	1aad      	subs	r5, r5, r2
        ptr += to_write;
   b97ac:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   b97ae:	b2ed      	uxtb	r5, r5
   b97b0:	f000 f90a 	bl	b99c8 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b97b4:	e7ea      	b.n	b978c <_ZN15Adafruit_SH110X7displayEv+0xc8>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
   b97b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   b97b8:	f7ff fc00 	bl	b8fbc <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   b97bc:	3601      	adds	r6, #1
   b97be:	b2f6      	uxtb	r6, r6
   b97c0:	44bb      	add	fp, r7
   b97c2:	e7b1      	b.n	b9728 <_ZN15Adafruit_SH110X7displayEv+0x64>

    } else { // SPI
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b97c4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   b97c8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

      digitalWrite(dcPin, LOW);
   b97cc:	4619      	mov	r1, r3
   b97ce:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b97d2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   b97d6:	9307      	str	r3, [sp, #28]
   b97d8:	f004 f9d7 	bl	bdb8a <digitalWrite>
      spi_dev->write(cmd, 3);
   b97dc:	9b07      	ldr	r3, [sp, #28]
   b97de:	9300      	str	r3, [sp, #0]
   b97e0:	2203      	movs	r2, #3
   b97e2:	a909      	add	r1, sp, #36	; 0x24
   b97e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b97e6:	f7ff fcea 	bl	b91be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   b97ea:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b97ee:	2101      	movs	r1, #1
   b97f0:	f004 f9cb 	bl	bdb8a <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   b97f4:	9b07      	ldr	r3, [sp, #28]
   b97f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b97f8:	9300      	str	r3, [sp, #0]
   b97fa:	462a      	mov	r2, r5
   b97fc:	4641      	mov	r1, r8
   b97fe:	f7ff fcde 	bl	b91be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b9802:	e7db      	b.n	b97bc <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   b9804:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   b9808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b980c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   b9810:	b00b      	add	sp, #44	; 0x2c
   b9812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b9818 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   b9818:	b530      	push	{r4, r5, lr}
   b981a:	b085      	sub	sp, #20
   b981c:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b981e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b9820:	9503      	str	r5, [sp, #12]
   b9822:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b9824:	9502      	str	r5, [sp, #8]
   b9826:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b982a:	e9cd 3500 	strd	r3, r5, [sp]
   b982e:	4613      	mov	r3, r2
   b9830:	460a      	mov	r2, r1
   b9832:	2101      	movs	r1, #1
   b9834:	f7ff fd90 	bl	b9358 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   b9838:	4b03      	ldr	r3, [pc, #12]	; (b9848 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   b983a:	6023      	str	r3, [r4, #0]
   b983c:	4620      	mov	r0, r4
   b983e:	2300      	movs	r3, #0
   b9840:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b9844:	b005      	add	sp, #20
   b9846:	bd30      	pop	{r4, r5, pc}
   b9848:	000c1c48 	.word	0x000c1c48

000b984c <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   b984c:	b510      	push	{r4, lr}
   b984e:	4b03      	ldr	r3, [pc, #12]	; (b985c <_ZN15Adafruit_SH110XD1Ev+0x10>)
   b9850:	6003      	str	r3, [r0, #0]
   b9852:	4604      	mov	r4, r0
   b9854:	f7ff fda2 	bl	b939c <_ZN17Adafruit_GrayOLEDD1Ev>
   b9858:	4620      	mov	r0, r4
   b985a:	bd10      	pop	{r4, pc}
   b985c:	000c1c48 	.word	0x000c1c48

000b9860 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b9860:	b508      	push	{r3, lr}
   b9862:	4b02      	ldr	r3, [pc, #8]	; (b986c <hal_ble_stack_init+0xc>)
   b9864:	681b      	ldr	r3, [r3, #0]
   b9866:	689b      	ldr	r3, [r3, #8]
   b9868:	9301      	str	r3, [sp, #4]
   b986a:	bd08      	pop	{r3, pc}
   b986c:	00030278 	.word	0x00030278

000b9870 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b9870:	b508      	push	{r3, lr}
   b9872:	4b02      	ldr	r3, [pc, #8]	; (b987c <hal_ble_gap_set_tx_power+0xc>)
   b9874:	681b      	ldr	r3, [r3, #0]
   b9876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9878:	9301      	str	r3, [sp, #4]
   b987a:	bd08      	pop	{r3, pc}
   b987c:	00030278 	.word	0x00030278

000b9880 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b9880:	b508      	push	{r3, lr}
   b9882:	4b02      	ldr	r3, [pc, #8]	; (b988c <hal_ble_gap_set_scan_parameters+0xc>)
   b9884:	681b      	ldr	r3, [r3, #0]
   b9886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9888:	9301      	str	r3, [sp, #4]
   b988a:	bd08      	pop	{r3, pc}
   b988c:	00030278 	.word	0x00030278

000b9890 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b9890:	b508      	push	{r3, lr}
   b9892:	4b02      	ldr	r3, [pc, #8]	; (b989c <hal_ble_gap_get_scan_parameters+0xc>)
   b9894:	681b      	ldr	r3, [r3, #0]
   b9896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9898:	9301      	str	r3, [sp, #4]
   b989a:	bd08      	pop	{r3, pc}
   b989c:	00030278 	.word	0x00030278

000b98a0 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b98a0:	b508      	push	{r3, lr}
   b98a2:	4b02      	ldr	r3, [pc, #8]	; (b98ac <hal_ble_gap_start_scan+0xc>)
   b98a4:	681b      	ldr	r3, [r3, #0]
   b98a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b98a8:	9301      	str	r3, [sp, #4]
   b98aa:	bd08      	pop	{r3, pc}
   b98ac:	00030278 	.word	0x00030278

000b98b0 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b98b0:	b508      	push	{r3, lr}
   b98b2:	4b03      	ldr	r3, [pc, #12]	; (b98c0 <hal_ble_gap_stop_scan+0x10>)
   b98b4:	681b      	ldr	r3, [r3, #0]
   b98b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b98ba:	9301      	str	r3, [sp, #4]
   b98bc:	bd08      	pop	{r3, pc}
   b98be:	0000      	.short	0x0000
   b98c0:	00030278 	.word	0x00030278

000b98c4 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b98c4:	b508      	push	{r3, lr}
   b98c6:	4b03      	ldr	r3, [pc, #12]	; (b98d4 <hal_ble_gap_disconnect+0x10>)
   b98c8:	681b      	ldr	r3, [r3, #0]
   b98ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b98ce:	9301      	str	r3, [sp, #4]
   b98d0:	bd08      	pop	{r3, pc}
   b98d2:	0000      	.short	0x0000
   b98d4:	00030278 	.word	0x00030278

000b98d8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b98d8:	b508      	push	{r3, lr}
   b98da:	4b03      	ldr	r3, [pc, #12]	; (b98e8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b98dc:	681b      	ldr	r3, [r3, #0]
   b98de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b98e2:	9301      	str	r3, [sp, #4]
   b98e4:	bd08      	pop	{r3, pc}
   b98e6:	0000      	.short	0x0000
   b98e8:	00030278 	.word	0x00030278

000b98ec <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b98ec:	b508      	push	{r3, lr}
   b98ee:	4b03      	ldr	r3, [pc, #12]	; (b98fc <hal_ble_gatt_client_discover_all_services+0x10>)
   b98f0:	681b      	ldr	r3, [r3, #0]
   b98f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b98f6:	9301      	str	r3, [sp, #4]
   b98f8:	bd08      	pop	{r3, pc}
   b98fa:	0000      	.short	0x0000
   b98fc:	00030278 	.word	0x00030278

000b9900 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b9900:	b508      	push	{r3, lr}
   b9902:	4b03      	ldr	r3, [pc, #12]	; (b9910 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b9904:	681b      	ldr	r3, [r3, #0]
   b9906:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b990a:	9301      	str	r3, [sp, #4]
   b990c:	bd08      	pop	{r3, pc}
   b990e:	0000      	.short	0x0000
   b9910:	00030278 	.word	0x00030278

000b9914 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9914:	b508      	push	{r3, lr}
   b9916:	4b03      	ldr	r3, [pc, #12]	; (b9924 <hal_ble_gatt_client_write_with_response+0x10>)
   b9918:	681b      	ldr	r3, [r3, #0]
   b991a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b991e:	9301      	str	r3, [sp, #4]
   b9920:	bd08      	pop	{r3, pc}
   b9922:	0000      	.short	0x0000
   b9924:	00030278 	.word	0x00030278

000b9928 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9928:	b508      	push	{r3, lr}
   b992a:	4b03      	ldr	r3, [pc, #12]	; (b9938 <hal_ble_gatt_client_write_without_response+0x10>)
   b992c:	681b      	ldr	r3, [r3, #0]
   b992e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b9932:	9301      	str	r3, [sp, #4]
   b9934:	bd08      	pop	{r3, pc}
   b9936:	0000      	.short	0x0000
   b9938:	00030278 	.word	0x00030278

000b993c <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b993c:	b508      	push	{r3, lr}
   b993e:	4b03      	ldr	r3, [pc, #12]	; (b994c <hal_ble_gatt_client_read+0x10>)
   b9940:	681b      	ldr	r3, [r3, #0]
   b9942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b9946:	9301      	str	r3, [sp, #4]
   b9948:	bd08      	pop	{r3, pc}
   b994a:	0000      	.short	0x0000
   b994c:	00030278 	.word	0x00030278

000b9950 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b9950:	b508      	push	{r3, lr}
   b9952:	4b03      	ldr	r3, [pc, #12]	; (b9960 <hal_ble_gap_connect+0x10>)
   b9954:	681b      	ldr	r3, [r3, #0]
   b9956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b995a:	9301      	str	r3, [sp, #4]
   b995c:	bd08      	pop	{r3, pc}
   b995e:	0000      	.short	0x0000
   b9960:	00030278 	.word	0x00030278

000b9964 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b9964:	b508      	push	{r3, lr}
   b9966:	4b03      	ldr	r3, [pc, #12]	; (b9974 <hal_ble_gap_get_connection_info+0x10>)
   b9968:	681b      	ldr	r3, [r3, #0]
   b996a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b996e:	9301      	str	r3, [sp, #4]
   b9970:	bd08      	pop	{r3, pc}
   b9972:	0000      	.short	0x0000
   b9974:	00030278 	.word	0x00030278

000b9978 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9978:	b508      	push	{r3, lr}
   b997a:	4b03      	ldr	r3, [pc, #12]	; (b9988 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b997c:	681b      	ldr	r3, [r3, #0]
   b997e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b9982:	9301      	str	r3, [sp, #4]
   b9984:	bd08      	pop	{r3, pc}
   b9986:	0000      	.short	0x0000
   b9988:	00030278 	.word	0x00030278

000b998c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b998c:	b508      	push	{r3, lr}
   b998e:	4b03      	ldr	r3, [pc, #12]	; (b999c <hal_ble_gatt_client_configure_cccd+0x10>)
   b9990:	681b      	ldr	r3, [r3, #0]
   b9992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b9996:	9301      	str	r3, [sp, #4]
   b9998:	bd08      	pop	{r3, pc}
   b999a:	0000      	.short	0x0000
   b999c:	00030278 	.word	0x00030278

000b99a0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b99a0:	b508      	push	{r3, lr}
   b99a2:	4b03      	ldr	r3, [pc, #12]	; (b99b0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b99a4:	681b      	ldr	r3, [r3, #0]
   b99a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b99aa:	9301      	str	r3, [sp, #4]
   b99ac:	bd08      	pop	{r3, pc}
   b99ae:	0000      	.short	0x0000
   b99b0:	00030278 	.word	0x00030278

000b99b4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b99b4:	b508      	push	{r3, lr}
   b99b6:	4b03      	ldr	r3, [pc, #12]	; (b99c4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b99b8:	681b      	ldr	r3, [r3, #0]
   b99ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b99be:	9301      	str	r3, [sp, #4]
   b99c0:	bd08      	pop	{r3, pc}
   b99c2:	0000      	.short	0x0000
   b99c4:	00030278 	.word	0x00030278

000b99c8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b99c8:	b508      	push	{r3, lr}
   b99ca:	4b02      	ldr	r3, [pc, #8]	; (b99d4 <os_thread_yield+0xc>)
   b99cc:	681b      	ldr	r3, [r3, #0]
   b99ce:	68db      	ldr	r3, [r3, #12]
   b99d0:	9301      	str	r3, [sp, #4]
   b99d2:	bd08      	pop	{r3, pc}
   b99d4:	00030248 	.word	0x00030248

000b99d8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b99d8:	b508      	push	{r3, lr}
   b99da:	4b02      	ldr	r3, [pc, #8]	; (b99e4 <os_thread_scheduling+0xc>)
   b99dc:	681b      	ldr	r3, [r3, #0]
   b99de:	69db      	ldr	r3, [r3, #28]
   b99e0:	9301      	str	r3, [sp, #4]
   b99e2:	bd08      	pop	{r3, pc}
   b99e4:	00030248 	.word	0x00030248

000b99e8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b99e8:	b508      	push	{r3, lr}
   b99ea:	4b02      	ldr	r3, [pc, #8]	; (b99f4 <os_timer_create+0xc>)
   b99ec:	681b      	ldr	r3, [r3, #0]
   b99ee:	6a1b      	ldr	r3, [r3, #32]
   b99f0:	9301      	str	r3, [sp, #4]
   b99f2:	bd08      	pop	{r3, pc}
   b99f4:	00030248 	.word	0x00030248

000b99f8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b99f8:	b508      	push	{r3, lr}
   b99fa:	4b02      	ldr	r3, [pc, #8]	; (b9a04 <os_timer_destroy+0xc>)
   b99fc:	681b      	ldr	r3, [r3, #0]
   b99fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9a00:	9301      	str	r3, [sp, #4]
   b9a02:	bd08      	pop	{r3, pc}
   b9a04:	00030248 	.word	0x00030248

000b9a08 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b9a08:	b508      	push	{r3, lr}
   b9a0a:	4b02      	ldr	r3, [pc, #8]	; (b9a14 <os_timer_get_id+0xc>)
   b9a0c:	681b      	ldr	r3, [r3, #0]
   b9a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9a10:	9301      	str	r3, [sp, #4]
   b9a12:	bd08      	pop	{r3, pc}
   b9a14:	00030248 	.word	0x00030248

000b9a18 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b9a18:	b508      	push	{r3, lr}
   b9a1a:	4b02      	ldr	r3, [pc, #8]	; (b9a24 <os_timer_change+0xc>)
   b9a1c:	681b      	ldr	r3, [r3, #0]
   b9a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9a20:	9301      	str	r3, [sp, #4]
   b9a22:	bd08      	pop	{r3, pc}
   b9a24:	00030248 	.word	0x00030248

000b9a28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9a28:	b508      	push	{r3, lr}
   b9a2a:	4b02      	ldr	r3, [pc, #8]	; (b9a34 <os_mutex_recursive_create+0xc>)
   b9a2c:	681b      	ldr	r3, [r3, #0]
   b9a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9a30:	9301      	str	r3, [sp, #4]
   b9a32:	bd08      	pop	{r3, pc}
   b9a34:	00030248 	.word	0x00030248

000b9a38 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b9a38:	b508      	push	{r3, lr}
   b9a3a:	4b02      	ldr	r3, [pc, #8]	; (b9a44 <os_mutex_recursive_lock+0xc>)
   b9a3c:	681b      	ldr	r3, [r3, #0]
   b9a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9a40:	9301      	str	r3, [sp, #4]
   b9a42:	bd08      	pop	{r3, pc}
   b9a44:	00030248 	.word	0x00030248

000b9a48 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b9a48:	b508      	push	{r3, lr}
   b9a4a:	4b02      	ldr	r3, [pc, #8]	; (b9a54 <os_mutex_recursive_unlock+0xc>)
   b9a4c:	681b      	ldr	r3, [r3, #0]
   b9a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9a50:	9301      	str	r3, [sp, #4]
   b9a52:	bd08      	pop	{r3, pc}
   b9a54:	00030248 	.word	0x00030248

000b9a58 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9a58:	b508      	push	{r3, lr}
   b9a5a:	4b02      	ldr	r3, [pc, #8]	; (b9a64 <os_timer_set_id+0xc>)
   b9a5c:	681b      	ldr	r3, [r3, #0]
   b9a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9a60:	9301      	str	r3, [sp, #4]
   b9a62:	bd08      	pop	{r3, pc}
   b9a64:	00030248 	.word	0x00030248

000b9a68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9a68:	b508      	push	{r3, lr}
   b9a6a:	4b02      	ldr	r3, [pc, #8]	; (b9a74 <HAL_RNG_GetRandomNumber+0xc>)
   b9a6c:	681b      	ldr	r3, [r3, #0]
   b9a6e:	685b      	ldr	r3, [r3, #4]
   b9a70:	9301      	str	r3, [sp, #4]
   b9a72:	bd08      	pop	{r3, pc}
   b9a74:	00030218 	.word	0x00030218

000b9a78 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9a78:	b508      	push	{r3, lr}
   b9a7a:	4b02      	ldr	r3, [pc, #8]	; (b9a84 <HAL_Delay_Microseconds+0xc>)
   b9a7c:	681b      	ldr	r3, [r3, #0]
   b9a7e:	68db      	ldr	r3, [r3, #12]
   b9a80:	9301      	str	r3, [sp, #4]
   b9a82:	bd08      	pop	{r3, pc}
   b9a84:	00030218 	.word	0x00030218

000b9a88 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b9a88:	b508      	push	{r3, lr}
   b9a8a:	4b02      	ldr	r3, [pc, #8]	; (b9a94 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b9a8c:	681b      	ldr	r3, [r3, #0]
   b9a8e:	691b      	ldr	r3, [r3, #16]
   b9a90:	9301      	str	r3, [sp, #4]
   b9a92:	bd08      	pop	{r3, pc}
   b9a94:	00030218 	.word	0x00030218

000b9a98 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9a98:	b508      	push	{r3, lr}
   b9a9a:	4b02      	ldr	r3, [pc, #8]	; (b9aa4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9a9c:	681b      	ldr	r3, [r3, #0]
   b9a9e:	695b      	ldr	r3, [r3, #20]
   b9aa0:	9301      	str	r3, [sp, #4]
   b9aa2:	bd08      	pop	{r3, pc}
   b9aa4:	00030218 	.word	0x00030218

000b9aa8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9aa8:	b508      	push	{r3, lr}
   b9aaa:	4b02      	ldr	r3, [pc, #8]	; (b9ab4 <hal_rtc_time_is_valid+0xc>)
   b9aac:	681b      	ldr	r3, [r3, #0]
   b9aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9ab0:	9301      	str	r3, [sp, #4]
   b9ab2:	bd08      	pop	{r3, pc}
   b9ab4:	00030218 	.word	0x00030218

000b9ab8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b9ab8:	b508      	push	{r3, lr}
   b9aba:	4b02      	ldr	r3, [pc, #8]	; (b9ac4 <hal_rtc_get_time+0xc>)
   b9abc:	681b      	ldr	r3, [r3, #0]
   b9abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9ac0:	9301      	str	r3, [sp, #4]
   b9ac2:	bd08      	pop	{r3, pc}
   b9ac4:	00030218 	.word	0x00030218

000b9ac8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b9ac8:	b508      	push	{r3, lr}
   b9aca:	4b02      	ldr	r3, [pc, #8]	; (b9ad4 <HAL_Validate_Pin_Function+0xc>)
   b9acc:	681b      	ldr	r3, [r3, #0]
   b9ace:	685b      	ldr	r3, [r3, #4]
   b9ad0:	9301      	str	r3, [sp, #4]
   b9ad2:	bd08      	pop	{r3, pc}
   b9ad4:	0003022c 	.word	0x0003022c

000b9ad8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b9ad8:	b508      	push	{r3, lr}
   b9ada:	4b02      	ldr	r3, [pc, #8]	; (b9ae4 <HAL_Pin_Mode+0xc>)
   b9adc:	681b      	ldr	r3, [r3, #0]
   b9ade:	689b      	ldr	r3, [r3, #8]
   b9ae0:	9301      	str	r3, [sp, #4]
   b9ae2:	bd08      	pop	{r3, pc}
   b9ae4:	0003022c 	.word	0x0003022c

000b9ae8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b9ae8:	b508      	push	{r3, lr}
   b9aea:	4b02      	ldr	r3, [pc, #8]	; (b9af4 <HAL_Get_Pin_Mode+0xc>)
   b9aec:	681b      	ldr	r3, [r3, #0]
   b9aee:	68db      	ldr	r3, [r3, #12]
   b9af0:	9301      	str	r3, [sp, #4]
   b9af2:	bd08      	pop	{r3, pc}
   b9af4:	0003022c 	.word	0x0003022c

000b9af8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b9af8:	b508      	push	{r3, lr}
   b9afa:	4b02      	ldr	r3, [pc, #8]	; (b9b04 <HAL_GPIO_Write+0xc>)
   b9afc:	681b      	ldr	r3, [r3, #0]
   b9afe:	691b      	ldr	r3, [r3, #16]
   b9b00:	9301      	str	r3, [sp, #4]
   b9b02:	bd08      	pop	{r3, pc}
   b9b04:	0003022c 	.word	0x0003022c

000b9b08 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9b08:	b508      	push	{r3, lr}
   b9b0a:	4b02      	ldr	r3, [pc, #8]	; (b9b14 <HAL_Interrupts_Attach+0xc>)
   b9b0c:	681b      	ldr	r3, [r3, #0]
   b9b0e:	699b      	ldr	r3, [r3, #24]
   b9b10:	9301      	str	r3, [sp, #4]
   b9b12:	bd08      	pop	{r3, pc}
   b9b14:	0003022c 	.word	0x0003022c

000b9b18 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9b18:	b508      	push	{r3, lr}
   b9b1a:	4b02      	ldr	r3, [pc, #8]	; (b9b24 <HAL_Interrupts_Detach+0xc>)
   b9b1c:	681b      	ldr	r3, [r3, #0]
   b9b1e:	69db      	ldr	r3, [r3, #28]
   b9b20:	9301      	str	r3, [sp, #4]
   b9b22:	bd08      	pop	{r3, pc}
   b9b24:	0003022c 	.word	0x0003022c

000b9b28 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9b28:	b508      	push	{r3, lr}
   b9b2a:	4b02      	ldr	r3, [pc, #8]	; (b9b34 <hal_adc_read+0xc>)
   b9b2c:	681b      	ldr	r3, [r3, #0]
   b9b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9b30:	9301      	str	r3, [sp, #4]
   b9b32:	bd08      	pop	{r3, pc}
   b9b34:	0003022c 	.word	0x0003022c

000b9b38 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9b38:	b508      	push	{r3, lr}
   b9b3a:	4b02      	ldr	r3, [pc, #8]	; (b9b44 <hal_i2c_set_speed+0xc>)
   b9b3c:	681b      	ldr	r3, [r3, #0]
   b9b3e:	681b      	ldr	r3, [r3, #0]
   b9b40:	9301      	str	r3, [sp, #4]
   b9b42:	bd08      	pop	{r3, pc}
   b9b44:	00030228 	.word	0x00030228

000b9b48 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9b48:	b508      	push	{r3, lr}
   b9b4a:	4b02      	ldr	r3, [pc, #8]	; (b9b54 <hal_i2c_begin+0xc>)
   b9b4c:	681b      	ldr	r3, [r3, #0]
   b9b4e:	68db      	ldr	r3, [r3, #12]
   b9b50:	9301      	str	r3, [sp, #4]
   b9b52:	bd08      	pop	{r3, pc}
   b9b54:	00030228 	.word	0x00030228

000b9b58 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9b58:	b508      	push	{r3, lr}
   b9b5a:	4b02      	ldr	r3, [pc, #8]	; (b9b64 <hal_i2c_begin_transmission+0xc>)
   b9b5c:	681b      	ldr	r3, [r3, #0]
   b9b5e:	699b      	ldr	r3, [r3, #24]
   b9b60:	9301      	str	r3, [sp, #4]
   b9b62:	bd08      	pop	{r3, pc}
   b9b64:	00030228 	.word	0x00030228

000b9b68 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9b68:	b508      	push	{r3, lr}
   b9b6a:	4b02      	ldr	r3, [pc, #8]	; (b9b74 <hal_i2c_end_transmission+0xc>)
   b9b6c:	681b      	ldr	r3, [r3, #0]
   b9b6e:	69db      	ldr	r3, [r3, #28]
   b9b70:	9301      	str	r3, [sp, #4]
   b9b72:	bd08      	pop	{r3, pc}
   b9b74:	00030228 	.word	0x00030228

000b9b78 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9b78:	b508      	push	{r3, lr}
   b9b7a:	4b02      	ldr	r3, [pc, #8]	; (b9b84 <hal_i2c_write+0xc>)
   b9b7c:	681b      	ldr	r3, [r3, #0]
   b9b7e:	6a1b      	ldr	r3, [r3, #32]
   b9b80:	9301      	str	r3, [sp, #4]
   b9b82:	bd08      	pop	{r3, pc}
   b9b84:	00030228 	.word	0x00030228

000b9b88 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9b88:	b508      	push	{r3, lr}
   b9b8a:	4b02      	ldr	r3, [pc, #8]	; (b9b94 <hal_i2c_available+0xc>)
   b9b8c:	681b      	ldr	r3, [r3, #0]
   b9b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9b90:	9301      	str	r3, [sp, #4]
   b9b92:	bd08      	pop	{r3, pc}
   b9b94:	00030228 	.word	0x00030228

000b9b98 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9b98:	b508      	push	{r3, lr}
   b9b9a:	4b02      	ldr	r3, [pc, #8]	; (b9ba4 <hal_i2c_read+0xc>)
   b9b9c:	681b      	ldr	r3, [r3, #0]
   b9b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9ba0:	9301      	str	r3, [sp, #4]
   b9ba2:	bd08      	pop	{r3, pc}
   b9ba4:	00030228 	.word	0x00030228

000b9ba8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9ba8:	b508      	push	{r3, lr}
   b9baa:	4b02      	ldr	r3, [pc, #8]	; (b9bb4 <hal_i2c_peek+0xc>)
   b9bac:	681b      	ldr	r3, [r3, #0]
   b9bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9bb0:	9301      	str	r3, [sp, #4]
   b9bb2:	bd08      	pop	{r3, pc}
   b9bb4:	00030228 	.word	0x00030228

000b9bb8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9bb8:	b508      	push	{r3, lr}
   b9bba:	4b02      	ldr	r3, [pc, #8]	; (b9bc4 <hal_i2c_flush+0xc>)
   b9bbc:	681b      	ldr	r3, [r3, #0]
   b9bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9bc0:	9301      	str	r3, [sp, #4]
   b9bc2:	bd08      	pop	{r3, pc}
   b9bc4:	00030228 	.word	0x00030228

000b9bc8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9bc8:	b508      	push	{r3, lr}
   b9bca:	4b02      	ldr	r3, [pc, #8]	; (b9bd4 <hal_i2c_is_enabled+0xc>)
   b9bcc:	681b      	ldr	r3, [r3, #0]
   b9bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9bd0:	9301      	str	r3, [sp, #4]
   b9bd2:	bd08      	pop	{r3, pc}
   b9bd4:	00030228 	.word	0x00030228

000b9bd8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9bd8:	b508      	push	{r3, lr}
   b9bda:	4b02      	ldr	r3, [pc, #8]	; (b9be4 <hal_i2c_init+0xc>)
   b9bdc:	681b      	ldr	r3, [r3, #0]
   b9bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9be0:	9301      	str	r3, [sp, #4]
   b9be2:	bd08      	pop	{r3, pc}
   b9be4:	00030228 	.word	0x00030228

000b9be8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9be8:	b508      	push	{r3, lr}
   b9bea:	4b02      	ldr	r3, [pc, #8]	; (b9bf4 <inet_inet_ntop+0xc>)
   b9bec:	681b      	ldr	r3, [r3, #0]
   b9bee:	695b      	ldr	r3, [r3, #20]
   b9bf0:	9301      	str	r3, [sp, #4]
   b9bf2:	bd08      	pop	{r3, pc}
   b9bf4:	00030264 	.word	0x00030264

000b9bf8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9bf8:	b508      	push	{r3, lr}
   b9bfa:	4b02      	ldr	r3, [pc, #8]	; (b9c04 <netdb_freeaddrinfo+0xc>)
   b9bfc:	681b      	ldr	r3, [r3, #0]
   b9bfe:	689b      	ldr	r3, [r3, #8]
   b9c00:	9301      	str	r3, [sp, #4]
   b9c02:	bd08      	pop	{r3, pc}
   b9c04:	00030268 	.word	0x00030268

000b9c08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9c08:	b508      	push	{r3, lr}
   b9c0a:	4b02      	ldr	r3, [pc, #8]	; (b9c14 <netdb_getaddrinfo+0xc>)
   b9c0c:	681b      	ldr	r3, [r3, #0]
   b9c0e:	68db      	ldr	r3, [r3, #12]
   b9c10:	9301      	str	r3, [sp, #4]
   b9c12:	bd08      	pop	{r3, pc}
   b9c14:	00030268 	.word	0x00030268

000b9c18 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9c18:	b508      	push	{r3, lr}
   b9c1a:	4b02      	ldr	r3, [pc, #8]	; (b9c24 <hal_spi_begin+0xc>)
   b9c1c:	681b      	ldr	r3, [r3, #0]
   b9c1e:	681b      	ldr	r3, [r3, #0]
   b9c20:	9301      	str	r3, [sp, #4]
   b9c22:	bd08      	pop	{r3, pc}
   b9c24:	00030230 	.word	0x00030230

000b9c28 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9c28:	b508      	push	{r3, lr}
   b9c2a:	4b02      	ldr	r3, [pc, #8]	; (b9c34 <hal_spi_transfer+0xc>)
   b9c2c:	681b      	ldr	r3, [r3, #0]
   b9c2e:	695b      	ldr	r3, [r3, #20]
   b9c30:	9301      	str	r3, [sp, #4]
   b9c32:	bd08      	pop	{r3, pc}
   b9c34:	00030230 	.word	0x00030230

000b9c38 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9c38:	b508      	push	{r3, lr}
   b9c3a:	4b02      	ldr	r3, [pc, #8]	; (b9c44 <hal_spi_init+0xc>)
   b9c3c:	681b      	ldr	r3, [r3, #0]
   b9c3e:	69db      	ldr	r3, [r3, #28]
   b9c40:	9301      	str	r3, [sp, #4]
   b9c42:	bd08      	pop	{r3, pc}
   b9c44:	00030230 	.word	0x00030230

000b9c48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9c48:	b508      	push	{r3, lr}
   b9c4a:	4b02      	ldr	r3, [pc, #8]	; (b9c54 <hal_spi_is_enabled+0xc>)
   b9c4c:	681b      	ldr	r3, [r3, #0]
   b9c4e:	6a1b      	ldr	r3, [r3, #32]
   b9c50:	9301      	str	r3, [sp, #4]
   b9c52:	bd08      	pop	{r3, pc}
   b9c54:	00030230 	.word	0x00030230

000b9c58 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9c58:	b508      	push	{r3, lr}
   b9c5a:	4b02      	ldr	r3, [pc, #8]	; (b9c64 <hal_spi_info+0xc>)
   b9c5c:	681b      	ldr	r3, [r3, #0]
   b9c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c60:	9301      	str	r3, [sp, #4]
   b9c62:	bd08      	pop	{r3, pc}
   b9c64:	00030230 	.word	0x00030230

000b9c68 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b9c68:	b508      	push	{r3, lr}
   b9c6a:	4b02      	ldr	r3, [pc, #8]	; (b9c74 <hal_spi_transfer_dma+0xc>)
   b9c6c:	681b      	ldr	r3, [r3, #0]
   b9c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9c70:	9301      	str	r3, [sp, #4]
   b9c72:	bd08      	pop	{r3, pc}
   b9c74:	00030230 	.word	0x00030230

000b9c78 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b9c78:	b508      	push	{r3, lr}
   b9c7a:	4b02      	ldr	r3, [pc, #8]	; (b9c84 <hal_spi_transfer_dma_status+0xc>)
   b9c7c:	681b      	ldr	r3, [r3, #0]
   b9c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9c80:	9301      	str	r3, [sp, #4]
   b9c82:	bd08      	pop	{r3, pc}
   b9c84:	00030230 	.word	0x00030230

000b9c88 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9c88:	b508      	push	{r3, lr}
   b9c8a:	4b02      	ldr	r3, [pc, #8]	; (b9c94 <hal_spi_set_settings+0xc>)
   b9c8c:	681b      	ldr	r3, [r3, #0]
   b9c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9c90:	9301      	str	r3, [sp, #4]
   b9c92:	bd08      	pop	{r3, pc}
   b9c94:	00030230 	.word	0x00030230

000b9c98 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9c98:	b508      	push	{r3, lr}
   b9c9a:	4b02      	ldr	r3, [pc, #8]	; (b9ca4 <hal_spi_acquire+0xc>)
   b9c9c:	681b      	ldr	r3, [r3, #0]
   b9c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9ca0:	9301      	str	r3, [sp, #4]
   b9ca2:	bd08      	pop	{r3, pc}
   b9ca4:	00030230 	.word	0x00030230

000b9ca8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9ca8:	b508      	push	{r3, lr}
   b9caa:	4b02      	ldr	r3, [pc, #8]	; (b9cb4 <hal_spi_release+0xc>)
   b9cac:	681b      	ldr	r3, [r3, #0]
   b9cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9cb0:	9301      	str	r3, [sp, #4]
   b9cb2:	bd08      	pop	{r3, pc}
   b9cb4:	00030230 	.word	0x00030230

000b9cb8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9cb8:	b508      	push	{r3, lr}
   b9cba:	4b02      	ldr	r3, [pc, #8]	; (b9cc4 <hal_usart_write+0xc>)
   b9cbc:	681b      	ldr	r3, [r3, #0]
   b9cbe:	68db      	ldr	r3, [r3, #12]
   b9cc0:	9301      	str	r3, [sp, #4]
   b9cc2:	bd08      	pop	{r3, pc}
   b9cc4:	0003023c 	.word	0x0003023c

000b9cc8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9cc8:	b508      	push	{r3, lr}
   b9cca:	4b02      	ldr	r3, [pc, #8]	; (b9cd4 <hal_usart_available+0xc>)
   b9ccc:	681b      	ldr	r3, [r3, #0]
   b9cce:	691b      	ldr	r3, [r3, #16]
   b9cd0:	9301      	str	r3, [sp, #4]
   b9cd2:	bd08      	pop	{r3, pc}
   b9cd4:	0003023c 	.word	0x0003023c

000b9cd8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9cd8:	b508      	push	{r3, lr}
   b9cda:	4b02      	ldr	r3, [pc, #8]	; (b9ce4 <hal_usart_read+0xc>)
   b9cdc:	681b      	ldr	r3, [r3, #0]
   b9cde:	695b      	ldr	r3, [r3, #20]
   b9ce0:	9301      	str	r3, [sp, #4]
   b9ce2:	bd08      	pop	{r3, pc}
   b9ce4:	0003023c 	.word	0x0003023c

000b9ce8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9ce8:	b508      	push	{r3, lr}
   b9cea:	4b02      	ldr	r3, [pc, #8]	; (b9cf4 <hal_usart_peek+0xc>)
   b9cec:	681b      	ldr	r3, [r3, #0]
   b9cee:	699b      	ldr	r3, [r3, #24]
   b9cf0:	9301      	str	r3, [sp, #4]
   b9cf2:	bd08      	pop	{r3, pc}
   b9cf4:	0003023c 	.word	0x0003023c

000b9cf8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9cf8:	b508      	push	{r3, lr}
   b9cfa:	4b02      	ldr	r3, [pc, #8]	; (b9d04 <hal_usart_flush+0xc>)
   b9cfc:	681b      	ldr	r3, [r3, #0]
   b9cfe:	69db      	ldr	r3, [r3, #28]
   b9d00:	9301      	str	r3, [sp, #4]
   b9d02:	bd08      	pop	{r3, pc}
   b9d04:	0003023c 	.word	0x0003023c

000b9d08 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9d08:	b508      	push	{r3, lr}
   b9d0a:	4b02      	ldr	r3, [pc, #8]	; (b9d14 <hal_usart_is_enabled+0xc>)
   b9d0c:	681b      	ldr	r3, [r3, #0]
   b9d0e:	6a1b      	ldr	r3, [r3, #32]
   b9d10:	9301      	str	r3, [sp, #4]
   b9d12:	bd08      	pop	{r3, pc}
   b9d14:	0003023c 	.word	0x0003023c

000b9d18 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9d18:	b508      	push	{r3, lr}
   b9d1a:	4b02      	ldr	r3, [pc, #8]	; (b9d24 <hal_usart_available_data_for_write+0xc>)
   b9d1c:	681b      	ldr	r3, [r3, #0]
   b9d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9d20:	9301      	str	r3, [sp, #4]
   b9d22:	bd08      	pop	{r3, pc}
   b9d24:	0003023c 	.word	0x0003023c

000b9d28 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9d28:	b508      	push	{r3, lr}
   b9d2a:	4b02      	ldr	r3, [pc, #8]	; (b9d34 <hal_usart_begin_config+0xc>)
   b9d2c:	681b      	ldr	r3, [r3, #0]
   b9d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9d30:	9301      	str	r3, [sp, #4]
   b9d32:	bd08      	pop	{r3, pc}
   b9d34:	0003023c 	.word	0x0003023c

000b9d38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9d38:	b508      	push	{r3, lr}
   b9d3a:	4b02      	ldr	r3, [pc, #8]	; (b9d44 <hal_usart_init_ex+0xc>)
   b9d3c:	681b      	ldr	r3, [r3, #0]
   b9d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9d40:	9301      	str	r3, [sp, #4]
   b9d42:	bd08      	pop	{r3, pc}
   b9d44:	0003023c 	.word	0x0003023c

000b9d48 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9d48:	b508      	push	{r3, lr}
   b9d4a:	4b02      	ldr	r3, [pc, #8]	; (b9d54 <HAL_USB_USART_Init+0xc>)
   b9d4c:	681b      	ldr	r3, [r3, #0]
   b9d4e:	681b      	ldr	r3, [r3, #0]
   b9d50:	9301      	str	r3, [sp, #4]
   b9d52:	bd08      	pop	{r3, pc}
   b9d54:	0003024c 	.word	0x0003024c

000b9d58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9d58:	b508      	push	{r3, lr}
   b9d5a:	4b02      	ldr	r3, [pc, #8]	; (b9d64 <HAL_USB_USART_Begin+0xc>)
   b9d5c:	681b      	ldr	r3, [r3, #0]
   b9d5e:	685b      	ldr	r3, [r3, #4]
   b9d60:	9301      	str	r3, [sp, #4]
   b9d62:	bd08      	pop	{r3, pc}
   b9d64:	0003024c 	.word	0x0003024c

000b9d68 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9d68:	b508      	push	{r3, lr}
   b9d6a:	4b02      	ldr	r3, [pc, #8]	; (b9d74 <HAL_USB_USART_Available_Data+0xc>)
   b9d6c:	681b      	ldr	r3, [r3, #0]
   b9d6e:	691b      	ldr	r3, [r3, #16]
   b9d70:	9301      	str	r3, [sp, #4]
   b9d72:	bd08      	pop	{r3, pc}
   b9d74:	0003024c 	.word	0x0003024c

000b9d78 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9d78:	b508      	push	{r3, lr}
   b9d7a:	4b02      	ldr	r3, [pc, #8]	; (b9d84 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9d7c:	681b      	ldr	r3, [r3, #0]
   b9d7e:	695b      	ldr	r3, [r3, #20]
   b9d80:	9301      	str	r3, [sp, #4]
   b9d82:	bd08      	pop	{r3, pc}
   b9d84:	0003024c 	.word	0x0003024c

000b9d88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d88:	b508      	push	{r3, lr}
   b9d8a:	4b02      	ldr	r3, [pc, #8]	; (b9d94 <HAL_USB_USART_Receive_Data+0xc>)
   b9d8c:	681b      	ldr	r3, [r3, #0]
   b9d8e:	699b      	ldr	r3, [r3, #24]
   b9d90:	9301      	str	r3, [sp, #4]
   b9d92:	bd08      	pop	{r3, pc}
   b9d94:	0003024c 	.word	0x0003024c

000b9d98 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d98:	b508      	push	{r3, lr}
   b9d9a:	4b02      	ldr	r3, [pc, #8]	; (b9da4 <HAL_USB_USART_Send_Data+0xc>)
   b9d9c:	681b      	ldr	r3, [r3, #0]
   b9d9e:	69db      	ldr	r3, [r3, #28]
   b9da0:	9301      	str	r3, [sp, #4]
   b9da2:	bd08      	pop	{r3, pc}
   b9da4:	0003024c 	.word	0x0003024c

000b9da8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9da8:	b508      	push	{r3, lr}
   b9daa:	4b02      	ldr	r3, [pc, #8]	; (b9db4 <HAL_USB_USART_Flush_Data+0xc>)
   b9dac:	681b      	ldr	r3, [r3, #0]
   b9dae:	6a1b      	ldr	r3, [r3, #32]
   b9db0:	9301      	str	r3, [sp, #4]
   b9db2:	bd08      	pop	{r3, pc}
   b9db4:	0003024c 	.word	0x0003024c

000b9db8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9db8:	b508      	push	{r3, lr}
   b9dba:	4b02      	ldr	r3, [pc, #8]	; (b9dc4 <panic_+0xc>)
   b9dbc:	681b      	ldr	r3, [r3, #0]
   b9dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9dc0:	9301      	str	r3, [sp, #4]
   b9dc2:	bd08      	pop	{r3, pc}
   b9dc4:	00030260 	.word	0x00030260

000b9dc8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9dc8:	b508      	push	{r3, lr}
   b9dca:	4b02      	ldr	r3, [pc, #8]	; (b9dd4 <log_message+0xc>)
   b9dcc:	681b      	ldr	r3, [r3, #0]
   b9dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9dd0:	9301      	str	r3, [sp, #4]
   b9dd2:	bd08      	pop	{r3, pc}
   b9dd4:	00030260 	.word	0x00030260

000b9dd8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9dd8:	b508      	push	{r3, lr}
   b9dda:	4b02      	ldr	r3, [pc, #8]	; (b9de4 <system_mode+0xc>)
   b9ddc:	681b      	ldr	r3, [r3, #0]
   b9dde:	681b      	ldr	r3, [r3, #0]
   b9de0:	9301      	str	r3, [sp, #4]
   b9de2:	bd08      	pop	{r3, pc}
   b9de4:	00030220 	.word	0x00030220

000b9de8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9de8:	b508      	push	{r3, lr}
   b9dea:	4b02      	ldr	r3, [pc, #8]	; (b9df4 <set_system_mode+0xc>)
   b9dec:	681b      	ldr	r3, [r3, #0]
   b9dee:	685b      	ldr	r3, [r3, #4]
   b9df0:	9301      	str	r3, [sp, #4]
   b9df2:	bd08      	pop	{r3, pc}
   b9df4:	00030220 	.word	0x00030220

000b9df8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9df8:	b508      	push	{r3, lr}
   b9dfa:	4b02      	ldr	r3, [pc, #8]	; (b9e04 <system_delay_ms+0xc>)
   b9dfc:	681b      	ldr	r3, [r3, #0]
   b9dfe:	695b      	ldr	r3, [r3, #20]
   b9e00:	9301      	str	r3, [sp, #4]
   b9e02:	bd08      	pop	{r3, pc}
   b9e04:	00030220 	.word	0x00030220

000b9e08 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9e08:	b508      	push	{r3, lr}
   b9e0a:	4b02      	ldr	r3, [pc, #8]	; (b9e14 <application_thread_current+0xc>)
   b9e0c:	681b      	ldr	r3, [r3, #0]
   b9e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9e10:	9301      	str	r3, [sp, #4]
   b9e12:	bd08      	pop	{r3, pc}
   b9e14:	00030220 	.word	0x00030220

000b9e18 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9e18:	b508      	push	{r3, lr}
   b9e1a:	4b02      	ldr	r3, [pc, #8]	; (b9e24 <application_thread_invoke+0xc>)
   b9e1c:	681b      	ldr	r3, [r3, #0]
   b9e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9e20:	9301      	str	r3, [sp, #4]
   b9e22:	bd08      	pop	{r3, pc}
   b9e24:	00030220 	.word	0x00030220

000b9e28 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9e28:	b508      	push	{r3, lr}
   b9e2a:	4b02      	ldr	r3, [pc, #8]	; (b9e34 <system_thread_get_state+0xc>)
   b9e2c:	681b      	ldr	r3, [r3, #0]
   b9e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9e30:	9301      	str	r3, [sp, #4]
   b9e32:	bd08      	pop	{r3, pc}
   b9e34:	00030220 	.word	0x00030220

000b9e38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9e38:	b508      	push	{r3, lr}
   b9e3a:	4b03      	ldr	r3, [pc, #12]	; (b9e48 <system_ctrl_set_app_request_handler+0x10>)
   b9e3c:	681b      	ldr	r3, [r3, #0]
   b9e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9e42:	9301      	str	r3, [sp, #4]
   b9e44:	bd08      	pop	{r3, pc}
   b9e46:	0000      	.short	0x0000
   b9e48:	00030220 	.word	0x00030220

000b9e4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9e4c:	b508      	push	{r3, lr}
   b9e4e:	4b03      	ldr	r3, [pc, #12]	; (b9e5c <system_ctrl_set_result+0x10>)
   b9e50:	681b      	ldr	r3, [r3, #0]
   b9e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9e56:	9301      	str	r3, [sp, #4]
   b9e58:	bd08      	pop	{r3, pc}
   b9e5a:	0000      	.short	0x0000
   b9e5c:	00030220 	.word	0x00030220

000b9e60 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b9e60:	b508      	push	{r3, lr}
   b9e62:	4b02      	ldr	r3, [pc, #8]	; (b9e6c <spark_function+0xc>)
   b9e64:	681b      	ldr	r3, [r3, #0]
   b9e66:	685b      	ldr	r3, [r3, #4]
   b9e68:	9301      	str	r3, [sp, #4]
   b9e6a:	bd08      	pop	{r3, pc}
   b9e6c:	00030244 	.word	0x00030244

000b9e70 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b9e70:	b508      	push	{r3, lr}
   b9e72:	4b02      	ldr	r3, [pc, #8]	; (b9e7c <spark_process+0xc>)
   b9e74:	681b      	ldr	r3, [r3, #0]
   b9e76:	689b      	ldr	r3, [r3, #8]
   b9e78:	9301      	str	r3, [sp, #4]
   b9e7a:	bd08      	pop	{r3, pc}
   b9e7c:	00030244 	.word	0x00030244

000b9e80 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b9e80:	b508      	push	{r3, lr}
   b9e82:	4b02      	ldr	r3, [pc, #8]	; (b9e8c <spark_cloud_flag_connected+0xc>)
   b9e84:	681b      	ldr	r3, [r3, #0]
   b9e86:	695b      	ldr	r3, [r3, #20]
   b9e88:	9301      	str	r3, [sp, #4]
   b9e8a:	bd08      	pop	{r3, pc}
   b9e8c:	00030244 	.word	0x00030244

000b9e90 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9e90:	b508      	push	{r3, lr}
   b9e92:	4b02      	ldr	r3, [pc, #8]	; (b9e9c <spark_send_event+0xc>)
   b9e94:	681b      	ldr	r3, [r3, #0]
   b9e96:	6a1b      	ldr	r3, [r3, #32]
   b9e98:	9301      	str	r3, [sp, #4]
   b9e9a:	bd08      	pop	{r3, pc}
   b9e9c:	00030244 	.word	0x00030244

000b9ea0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9ea0:	b508      	push	{r3, lr}
   b9ea2:	4b02      	ldr	r3, [pc, #8]	; (b9eac <spark_subscribe+0xc>)
   b9ea4:	681b      	ldr	r3, [r3, #0]
   b9ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9ea8:	9301      	str	r3, [sp, #4]
   b9eaa:	bd08      	pop	{r3, pc}
   b9eac:	00030244 	.word	0x00030244

000b9eb0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9eb0:	b508      	push	{r3, lr}
   b9eb2:	4b02      	ldr	r3, [pc, #8]	; (b9ebc <spark_sync_time_pending+0xc>)
   b9eb4:	681b      	ldr	r3, [r3, #0]
   b9eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9eb8:	9301      	str	r3, [sp, #4]
   b9eba:	bd08      	pop	{r3, pc}
   b9ebc:	00030244 	.word	0x00030244

000b9ec0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9ec0:	b508      	push	{r3, lr}
   b9ec2:	4b02      	ldr	r3, [pc, #8]	; (b9ecc <spark_set_random_seed_from_cloud_handler+0xc>)
   b9ec4:	681b      	ldr	r3, [r3, #0]
   b9ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9ec8:	9301      	str	r3, [sp, #4]
   b9eca:	bd08      	pop	{r3, pc}
   b9ecc:	00030244 	.word	0x00030244

000b9ed0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9ed0:	b508      	push	{r3, lr}
   b9ed2:	4b02      	ldr	r3, [pc, #8]	; (b9edc <network_connect+0xc>)
   b9ed4:	681b      	ldr	r3, [r3, #0]
   b9ed6:	685b      	ldr	r3, [r3, #4]
   b9ed8:	9301      	str	r3, [sp, #4]
   b9eda:	bd08      	pop	{r3, pc}
   b9edc:	00030240 	.word	0x00030240

000b9ee0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9ee0:	b508      	push	{r3, lr}
   b9ee2:	4b02      	ldr	r3, [pc, #8]	; (b9eec <network_connecting+0xc>)
   b9ee4:	681b      	ldr	r3, [r3, #0]
   b9ee6:	689b      	ldr	r3, [r3, #8]
   b9ee8:	9301      	str	r3, [sp, #4]
   b9eea:	bd08      	pop	{r3, pc}
   b9eec:	00030240 	.word	0x00030240

000b9ef0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9ef0:	b508      	push	{r3, lr}
   b9ef2:	4b02      	ldr	r3, [pc, #8]	; (b9efc <network_disconnect+0xc>)
   b9ef4:	681b      	ldr	r3, [r3, #0]
   b9ef6:	68db      	ldr	r3, [r3, #12]
   b9ef8:	9301      	str	r3, [sp, #4]
   b9efa:	bd08      	pop	{r3, pc}
   b9efc:	00030240 	.word	0x00030240

000b9f00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9f00:	b508      	push	{r3, lr}
   b9f02:	4b02      	ldr	r3, [pc, #8]	; (b9f0c <network_ready+0xc>)
   b9f04:	681b      	ldr	r3, [r3, #0]
   b9f06:	691b      	ldr	r3, [r3, #16]
   b9f08:	9301      	str	r3, [sp, #4]
   b9f0a:	bd08      	pop	{r3, pc}
   b9f0c:	00030240 	.word	0x00030240

000b9f10 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9f10:	b508      	push	{r3, lr}
   b9f12:	4b02      	ldr	r3, [pc, #8]	; (b9f1c <network_on+0xc>)
   b9f14:	681b      	ldr	r3, [r3, #0]
   b9f16:	695b      	ldr	r3, [r3, #20]
   b9f18:	9301      	str	r3, [sp, #4]
   b9f1a:	bd08      	pop	{r3, pc}
   b9f1c:	00030240 	.word	0x00030240

000b9f20 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9f20:	b508      	push	{r3, lr}
   b9f22:	4b02      	ldr	r3, [pc, #8]	; (b9f2c <network_off+0xc>)
   b9f24:	681b      	ldr	r3, [r3, #0]
   b9f26:	699b      	ldr	r3, [r3, #24]
   b9f28:	9301      	str	r3, [sp, #4]
   b9f2a:	bd08      	pop	{r3, pc}
   b9f2c:	00030240 	.word	0x00030240

000b9f30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9f30:	b508      	push	{r3, lr}
   b9f32:	4b02      	ldr	r3, [pc, #8]	; (b9f3c <network_listen+0xc>)
   b9f34:	681b      	ldr	r3, [r3, #0]
   b9f36:	69db      	ldr	r3, [r3, #28]
   b9f38:	9301      	str	r3, [sp, #4]
   b9f3a:	bd08      	pop	{r3, pc}
   b9f3c:	00030240 	.word	0x00030240

000b9f40 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9f40:	b508      	push	{r3, lr}
   b9f42:	4b02      	ldr	r3, [pc, #8]	; (b9f4c <network_listening+0xc>)
   b9f44:	681b      	ldr	r3, [r3, #0]
   b9f46:	6a1b      	ldr	r3, [r3, #32]
   b9f48:	9301      	str	r3, [sp, #4]
   b9f4a:	bd08      	pop	{r3, pc}
   b9f4c:	00030240 	.word	0x00030240

000b9f50 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9f50:	b508      	push	{r3, lr}
   b9f52:	4b02      	ldr	r3, [pc, #8]	; (b9f5c <network_set_listen_timeout+0xc>)
   b9f54:	681b      	ldr	r3, [r3, #0]
   b9f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9f58:	9301      	str	r3, [sp, #4]
   b9f5a:	bd08      	pop	{r3, pc}
   b9f5c:	00030240 	.word	0x00030240

000b9f60 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9f60:	b508      	push	{r3, lr}
   b9f62:	4b02      	ldr	r3, [pc, #8]	; (b9f6c <network_get_listen_timeout+0xc>)
   b9f64:	681b      	ldr	r3, [r3, #0]
   b9f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9f68:	9301      	str	r3, [sp, #4]
   b9f6a:	bd08      	pop	{r3, pc}
   b9f6c:	00030240 	.word	0x00030240

000b9f70 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9f70:	b508      	push	{r3, lr}
   b9f72:	4b02      	ldr	r3, [pc, #8]	; (b9f7c <network_is_on+0xc>)
   b9f74:	681b      	ldr	r3, [r3, #0]
   b9f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9f78:	9301      	str	r3, [sp, #4]
   b9f7a:	bd08      	pop	{r3, pc}
   b9f7c:	00030240 	.word	0x00030240

000b9f80 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9f80:	b508      	push	{r3, lr}
   b9f82:	4b02      	ldr	r3, [pc, #8]	; (b9f8c <network_is_off+0xc>)
   b9f84:	681b      	ldr	r3, [r3, #0]
   b9f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9f88:	9301      	str	r3, [sp, #4]
   b9f8a:	bd08      	pop	{r3, pc}
   b9f8c:	00030240 	.word	0x00030240

000b9f90 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9f90:	b508      	push	{r3, lr}
   b9f92:	4b02      	ldr	r3, [pc, #8]	; (b9f9c <malloc+0xc>)
   b9f94:	681b      	ldr	r3, [r3, #0]
   b9f96:	681b      	ldr	r3, [r3, #0]
   b9f98:	9301      	str	r3, [sp, #4]
   b9f9a:	bd08      	pop	{r3, pc}
   b9f9c:	0003021c 	.word	0x0003021c

000b9fa0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9fa0:	b508      	push	{r3, lr}
   b9fa2:	4b02      	ldr	r3, [pc, #8]	; (b9fac <free+0xc>)
   b9fa4:	681b      	ldr	r3, [r3, #0]
   b9fa6:	685b      	ldr	r3, [r3, #4]
   b9fa8:	9301      	str	r3, [sp, #4]
   b9faa:	bd08      	pop	{r3, pc}
   b9fac:	0003021c 	.word	0x0003021c

000b9fb0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9fb0:	b508      	push	{r3, lr}
   b9fb2:	4b02      	ldr	r3, [pc, #8]	; (b9fbc <realloc+0xc>)
   b9fb4:	681b      	ldr	r3, [r3, #0]
   b9fb6:	689b      	ldr	r3, [r3, #8]
   b9fb8:	9301      	str	r3, [sp, #4]
   b9fba:	bd08      	pop	{r3, pc}
   b9fbc:	0003021c 	.word	0x0003021c

000b9fc0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b9fc0:	b508      	push	{r3, lr}
   b9fc2:	4b02      	ldr	r3, [pc, #8]	; (b9fcc <sprintf+0xc>)
   b9fc4:	681b      	ldr	r3, [r3, #0]
   b9fc6:	68db      	ldr	r3, [r3, #12]
   b9fc8:	9301      	str	r3, [sp, #4]
   b9fca:	bd08      	pop	{r3, pc}
   b9fcc:	0003021c 	.word	0x0003021c

000b9fd0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9fd0:	b508      	push	{r3, lr}
   b9fd2:	4b02      	ldr	r3, [pc, #8]	; (b9fdc <sscanf+0xc>)
   b9fd4:	681b      	ldr	r3, [r3, #0]
   b9fd6:	695b      	ldr	r3, [r3, #20]
   b9fd8:	9301      	str	r3, [sp, #4]
   b9fda:	bd08      	pop	{r3, pc}
   b9fdc:	0003021c 	.word	0x0003021c

000b9fe0 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9fe0:	b508      	push	{r3, lr}
   b9fe2:	4b02      	ldr	r3, [pc, #8]	; (b9fec <snprintf+0xc>)
   b9fe4:	681b      	ldr	r3, [r3, #0]
   b9fe6:	69db      	ldr	r3, [r3, #28]
   b9fe8:	9301      	str	r3, [sp, #4]
   b9fea:	bd08      	pop	{r3, pc}
   b9fec:	0003021c 	.word	0x0003021c

000b9ff0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9ff0:	b508      	push	{r3, lr}
   b9ff2:	4b02      	ldr	r3, [pc, #8]	; (b9ffc <vsnprintf+0xc>)
   b9ff4:	681b      	ldr	r3, [r3, #0]
   b9ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9ff8:	9301      	str	r3, [sp, #4]
   b9ffa:	bd08      	pop	{r3, pc}
   b9ffc:	0003021c 	.word	0x0003021c

000ba000 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   ba000:	b508      	push	{r3, lr}
   ba002:	4b02      	ldr	r3, [pc, #8]	; (ba00c <abort+0xc>)
   ba004:	681b      	ldr	r3, [r3, #0]
   ba006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba008:	9301      	str	r3, [sp, #4]
   ba00a:	bd08      	pop	{r3, pc}
   ba00c:	0003021c 	.word	0x0003021c

000ba010 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   ba010:	b508      	push	{r3, lr}
   ba012:	4b02      	ldr	r3, [pc, #8]	; (ba01c <_malloc_r+0xc>)
   ba014:	681b      	ldr	r3, [r3, #0]
   ba016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba018:	9301      	str	r3, [sp, #4]
   ba01a:	bd08      	pop	{r3, pc}
   ba01c:	0003021c 	.word	0x0003021c

000ba020 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   ba020:	b508      	push	{r3, lr}
   ba022:	4b02      	ldr	r3, [pc, #8]	; (ba02c <__errno+0xc>)
   ba024:	681b      	ldr	r3, [r3, #0]
   ba026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba028:	9301      	str	r3, [sp, #4]
   ba02a:	bd08      	pop	{r3, pc}
   ba02c:	0003021c 	.word	0x0003021c

000ba030 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   ba030:	b508      	push	{r3, lr}
   ba032:	4b02      	ldr	r3, [pc, #8]	; (ba03c <__assert_func+0xc>)
   ba034:	681b      	ldr	r3, [r3, #0]
   ba036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba038:	9301      	str	r3, [sp, #4]
   ba03a:	bd08      	pop	{r3, pc}
   ba03c:	0003021c 	.word	0x0003021c

000ba040 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   ba040:	b508      	push	{r3, lr}
   ba042:	4b02      	ldr	r3, [pc, #8]	; (ba04c <newlib_impure_ptr_callback+0xc>)
   ba044:	681b      	ldr	r3, [r3, #0]
   ba046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba048:	9301      	str	r3, [sp, #4]
   ba04a:	bd08      	pop	{r3, pc}
   ba04c:	0003021c 	.word	0x0003021c

000ba050 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   ba050:	b508      	push	{r3, lr}
   ba052:	4b02      	ldr	r3, [pc, #8]	; (ba05c <localtime_r+0xc>)
   ba054:	681b      	ldr	r3, [r3, #0]
   ba056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba058:	9301      	str	r3, [sp, #4]
   ba05a:	bd08      	pop	{r3, pc}
   ba05c:	0003021c 	.word	0x0003021c

000ba060 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba060:	2100      	movs	r1, #0
   ba062:	f7ff bec9 	b.w	b9df8 <system_delay_ms>

000ba066 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ba066:	b510      	push	{r4, lr}
      if (_M_empty())
   ba068:	6883      	ldr	r3, [r0, #8]
   ba06a:	4604      	mov	r4, r0
   ba06c:	b90b      	cbnz	r3, ba072 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ba06e:	f003 fe5e 	bl	bdd2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba072:	68c3      	ldr	r3, [r0, #12]
   ba074:	4798      	blx	r3
      if (_M_manager)
   ba076:	68a3      	ldr	r3, [r4, #8]
   ba078:	b11b      	cbz	r3, ba082 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba07a:	2203      	movs	r2, #3
   ba07c:	4621      	mov	r1, r4
   ba07e:	4620      	mov	r0, r4
   ba080:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba082:	4620      	mov	r0, r4
   ba084:	2110      	movs	r1, #16
}
   ba086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba08a:	f7fa b808 	b.w	b409e <_ZdlPvj>

000ba08e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba08e:	4770      	bx	lr

000ba090 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   ba090:	4770      	bx	lr

000ba092 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   ba092:	4770      	bx	lr

000ba094 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba094:	4770      	bx	lr
	...

000ba098 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba098:	4b06      	ldr	r3, [pc, #24]	; (ba0b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba09a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba09c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   ba09e:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba0a2:	d005      	beq.n	ba0b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba0a4:	4608      	mov	r0, r1
   ba0a6:	f003 fe45 	bl	bdd34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba0aa:	2800      	cmp	r0, #0
   ba0ac:	bf08      	it	eq
   ba0ae:	2400      	moveq	r4, #0
      }
   ba0b0:	4620      	mov	r0, r4
   ba0b2:	bd10      	pop	{r4, pc}
   ba0b4:	000c1f0c 	.word	0x000c1f0c

000ba0b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba0b8:	4b06      	ldr	r3, [pc, #24]	; (ba0d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba0ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba0bc:	b510      	push	{r4, lr}
   ba0be:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba0c2:	d005      	beq.n	ba0d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba0c4:	4608      	mov	r0, r1
   ba0c6:	f003 fe35 	bl	bdd34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba0ca:	2800      	cmp	r0, #0
   ba0cc:	bf08      	it	eq
   ba0ce:	2400      	moveq	r4, #0
      }
   ba0d0:	4620      	mov	r0, r4
   ba0d2:	bd10      	pop	{r4, pc}
   ba0d4:	000c1f0c 	.word	0x000c1f0c

000ba0d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba0d8:	4b06      	ldr	r3, [pc, #24]	; (ba0f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba0da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba0dc:	b510      	push	{r4, lr}
   ba0de:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba0e2:	d005      	beq.n	ba0f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba0e4:	4608      	mov	r0, r1
   ba0e6:	f003 fe25 	bl	bdd34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba0ea:	2800      	cmp	r0, #0
   ba0ec:	bf08      	it	eq
   ba0ee:	2400      	moveq	r4, #0
      }
   ba0f0:	4620      	mov	r0, r4
   ba0f2:	bd10      	pop	{r4, pc}
   ba0f4:	000c1f0c 	.word	0x000c1f0c

000ba0f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba0f8:	b510      	push	{r4, lr}
   ba0fa:	2168      	movs	r1, #104	; 0x68
   ba0fc:	4604      	mov	r4, r0
   ba0fe:	f7f9 ffce 	bl	b409e <_ZdlPvj>
   ba102:	4620      	mov	r0, r4
   ba104:	bd10      	pop	{r4, pc}

000ba106 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba106:	b510      	push	{r4, lr}
   ba108:	2128      	movs	r1, #40	; 0x28
   ba10a:	4604      	mov	r4, r0
   ba10c:	f7f9 ffc7 	bl	b409e <_ZdlPvj>
   ba110:	4620      	mov	r0, r4
   ba112:	bd10      	pop	{r4, pc}

000ba114 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba114:	b510      	push	{r4, lr}
   ba116:	2130      	movs	r1, #48	; 0x30
   ba118:	4604      	mov	r4, r0
   ba11a:	f7f9 ffc0 	bl	b409e <_ZdlPvj>
   ba11e:	4620      	mov	r0, r4
   ba120:	bd10      	pop	{r4, pc}

000ba122 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba122:	2168      	movs	r1, #104	; 0x68
   ba124:	f7f9 bfbb 	b.w	b409e <_ZdlPvj>

000ba128 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba128:	2128      	movs	r1, #40	; 0x28
   ba12a:	f7f9 bfb8 	b.w	b409e <_ZdlPvj>

000ba12e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba12e:	2130      	movs	r1, #48	; 0x30
   ba130:	f7f9 bfb5 	b.w	b409e <_ZdlPvj>

000ba134 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   ba134:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba136:	2500      	movs	r5, #0
   ba138:	1cec      	adds	r4, r5, #3
   ba13a:	428c      	cmp	r4, r1
   ba13c:	d80d      	bhi.n	ba15a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   ba13e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   ba140:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   ba142:	5d87      	ldrb	r7, [r0, r6]
   ba144:	4297      	cmp	r7, r2
   ba146:	d105      	bne.n	ba154 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   ba148:	4426      	add	r6, r4
   ba14a:	42b1      	cmp	r1, r6
   ba14c:	d305      	bcc.n	ba15a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   ba14e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   ba150:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   ba152:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   ba154:	3401      	adds	r4, #1
   ba156:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba158:	e7ee      	b.n	ba138 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   ba15a:	2000      	movs	r0, #0
   ba15c:	e7f9      	b.n	ba152 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000ba160 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   ba160:	4a02      	ldr	r2, [pc, #8]	; (ba16c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   ba162:	4903      	ldr	r1, [pc, #12]	; (ba170 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   ba164:	200a      	movs	r0, #10
   ba166:	f7ff be27 	b.w	b9db8 <panic_>
   ba16a:	bf00      	nop
   ba16c:	000b9a79 	.word	0x000b9a79
   ba170:	000c1c9c 	.word	0x000c1c9c

000ba174 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba174:	b430      	push	{r4, r5}
   ba176:	460d      	mov	r5, r1
   ba178:	4611      	mov	r1, r2
   ba17a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   ba17c:	6803      	ldr	r3, [r0, #0]
   ba17e:	6809      	ldr	r1, [r1, #0]
   ba180:	6828      	ldr	r0, [r5, #0]
   ba182:	e9d3 4300 	ldrd	r4, r3, [r3]
   ba186:	46a4      	mov	ip, r4
      }
   ba188:	bc30      	pop	{r4, r5}
   ba18a:	4760      	bx	ip

000ba18c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   ba18c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba18e:	b538      	push	{r3, r4, r5, lr}
   ba190:	4604      	mov	r4, r0
	switch (__op)
   ba192:	d102      	bne.n	ba19a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   ba194:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   ba196:	6023      	str	r3, [r4, #0]
	}
   ba198:	e003      	b.n	ba1a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   ba19a:	2a02      	cmp	r2, #2
   ba19c:	d003      	beq.n	ba1a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   ba19e:	2a03      	cmp	r2, #3
   ba1a0:	d00d      	beq.n	ba1be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   ba1a2:	2000      	movs	r0, #0
   ba1a4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   ba1a6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   ba1a8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba1aa:	f7f9 ff74 	bl	b4096 <_Znwj>
   ba1ae:	4603      	mov	r3, r0
   ba1b0:	2800      	cmp	r0, #0
   ba1b2:	d0f0      	beq.n	ba196 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   ba1b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba1b8:	e883 0003 	stmia.w	r3, {r0, r1}
   ba1bc:	e7eb      	b.n	ba196 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   ba1be:	6800      	ldr	r0, [r0, #0]
   ba1c0:	2800      	cmp	r0, #0
   ba1c2:	d0ee      	beq.n	ba1a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   ba1c4:	2108      	movs	r1, #8
   ba1c6:	f7f9 ff6a 	bl	b409e <_ZdlPvj>
   ba1ca:	e7ea      	b.n	ba1a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000ba1cc <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba1cc:	b510      	push	{r4, lr}
	if (_M_manager)
   ba1ce:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba1d0:	4604      	mov	r4, r0
	if (_M_manager)
   ba1d2:	b12b      	cbz	r3, ba1e0 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba1d4:	2203      	movs	r2, #3
   ba1d6:	4601      	mov	r1, r0
   ba1d8:	4798      	blx	r3
	    _M_manager = nullptr;
   ba1da:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba1dc:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba1e0:	bd10      	pop	{r4, pc}

000ba1e2 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba1e2:	b510      	push	{r4, lr}
	if (_M_manager)
   ba1e4:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba1e6:	4604      	mov	r4, r0
	if (_M_manager)
   ba1e8:	b12b      	cbz	r3, ba1f6 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba1ea:	2203      	movs	r2, #3
   ba1ec:	4601      	mov	r1, r0
   ba1ee:	4798      	blx	r3
	    _M_manager = nullptr;
   ba1f0:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba1f2:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba1f6:	bd10      	pop	{r4, pc}

000ba1f8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   ba1f8:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   ba1fa:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   ba1fc:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   ba1fe:	2220      	movs	r2, #32
   ba200:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   ba204:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   ba206:	4a08      	ldr	r2, [pc, #32]	; (ba228 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   ba208:	9200      	str	r2, [sp, #0]
   ba20a:	4908      	ldr	r1, [pc, #32]	; (ba22c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   ba20c:	aa02      	add	r2, sp, #8
   ba20e:	2001      	movs	r0, #1
   ba210:	f7ff fdda 	bl	b9dc8 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba214:	6820      	ldr	r0, [r4, #0]
   ba216:	4906      	ldr	r1, [pc, #24]	; (ba230 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   ba218:	8800      	ldrh	r0, [r0, #0]
   ba21a:	2300      	movs	r3, #0
   ba21c:	4622      	mov	r2, r4
    }
   ba21e:	b00a      	add	sp, #40	; 0x28
   ba220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba224:	f7ff bb62 	b.w	b98ec <hal_ble_gatt_client_discover_all_services>
   ba228:	000c1cbe 	.word	0x000c1cbe
   ba22c:	000c1cb3 	.word	0x000c1cb3
   ba230:	000bbda9 	.word	0x000bbda9

000ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   ba234:	b510      	push	{r4, lr}
   ba236:	3801      	subs	r0, #1
   ba238:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   ba23c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   ba240:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   ba242:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba246:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba248:	bf88      	it	hi
   ba24a:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   ba24e:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   ba252:	7803      	ldrb	r3, [r0, #0]
   ba254:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   ba258:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba25c:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba25e:	bf88      	it	hi
   ba260:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   ba264:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   ba266:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   ba26a:	d1e7      	bne.n	ba23c <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   ba26c:	bd10      	pop	{r4, pc}

000ba26e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba26e:	b510      	push	{r4, lr}
   ba270:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   ba272:	3058      	adds	r0, #88	; 0x58
   ba274:	f7fa f980 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   ba278:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   ba27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba280:	f003 b8c2 	b.w	bd408 <_ZN6StringD1Ev>

000ba284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   ba284:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   ba286:	6803      	ldr	r3, [r0, #0]
   ba288:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   ba28a:	4605      	mov	r5, r0
   ba28c:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   ba28e:	d008      	beq.n	ba2a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   ba290:	b111      	cbz	r1, ba298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   ba292:	684b      	ldr	r3, [r1, #4]
   ba294:	3301      	adds	r3, #1
   ba296:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   ba298:	6828      	ldr	r0, [r5, #0]
   ba29a:	b108      	cbz	r0, ba2a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   ba29c:	f7fa f9aa 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   ba2a0:	602c      	str	r4, [r5, #0]
      }
   ba2a2:	bd38      	pop	{r3, r4, r5, pc}

000ba2a4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   ba2a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba2a8:	b2da      	uxtb	r2, r3
   ba2aa:	2a09      	cmp	r2, #9
   ba2ac:	d801      	bhi.n	ba2b2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   ba2ae:	4618      	mov	r0, r3
   ba2b0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   ba2b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba2b6:	2b05      	cmp	r3, #5
   ba2b8:	d801      	bhi.n	ba2be <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   ba2ba:	3857      	subs	r0, #87	; 0x57
   ba2bc:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   ba2be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba2c2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   ba2c4:	bf94      	ite	ls
   ba2c6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   ba2c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   ba2cc:	4770      	bx	lr
	...

000ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   ba2d0:	b510      	push	{r4, lr}
            locked_(false) {
   ba2d2:	2300      	movs	r3, #0
   ba2d4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba2d6:	4b04      	ldr	r3, [pc, #16]	; (ba2e8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   ba2d8:	4604      	mov	r4, r0
   ba2da:	6818      	ldr	r0, [r3, #0]
   ba2dc:	f7ff fbac 	bl	b9a38 <os_mutex_recursive_lock>
        locked_ = true;
   ba2e0:	2301      	movs	r3, #1
   ba2e2:	7023      	strb	r3, [r4, #0]
    }
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	bd10      	pop	{r4, pc}
   ba2e8:	2003e658 	.word	0x2003e658

000ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   ba2ec:	b510      	push	{r4, lr}
        if (locked_) {
   ba2ee:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   ba2f0:	4604      	mov	r4, r0
        if (locked_) {
   ba2f2:	b11b      	cbz	r3, ba2fc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba2f4:	4b02      	ldr	r3, [pc, #8]	; (ba300 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   ba2f6:	6818      	ldr	r0, [r3, #0]
   ba2f8:	f7ff fba6 	bl	b9a48 <os_mutex_recursive_unlock>
    }
   ba2fc:	4620      	mov	r0, r4
   ba2fe:	bd10      	pop	{r4, pc}
   ba300:	2003e658 	.word	0x2003e658

000ba304 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   ba304:	b082      	sub	sp, #8
   ba306:	4603      	mov	r3, r0
    address_ = addr;
   ba308:	6808      	ldr	r0, [r1, #0]
   ba30a:	6849      	ldr	r1, [r1, #4]
   ba30c:	466a      	mov	r2, sp
   ba30e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   ba310:	466a      	mov	r2, sp
   ba312:	ca03      	ldmia	r2!, {r0, r1}
   ba314:	6018      	str	r0, [r3, #0]
}
   ba316:	4618      	mov	r0, r3
    address_ = addr.address_;
   ba318:	6059      	str	r1, [r3, #4]
}
   ba31a:	b002      	add	sp, #8
   ba31c:	4770      	bx	lr

000ba31e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   ba31e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   ba320:	7982      	ldrb	r2, [r0, #6]
   ba322:	798b      	ldrb	r3, [r1, #6]
   ba324:	429a      	cmp	r2, r3
   ba326:	d106      	bne.n	ba336 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   ba328:	2206      	movs	r2, #6
   ba32a:	f004 fb98 	bl	bea5e <memcmp>
   ba32e:	fab0 f080 	clz	r0, r0
   ba332:	0940      	lsrs	r0, r0, #5
}
   ba334:	bd08      	pop	{r3, pc}
    return false;
   ba336:	2000      	movs	r0, #0
   ba338:	e7fc      	b.n	ba334 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000ba33a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   ba33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba33e:	6003      	str	r3, [r0, #0]
   ba340:	8083      	strh	r3, [r0, #4]
}
   ba342:	2000      	movs	r0, #0
   ba344:	4770      	bx	lr

000ba346 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   ba346:	b508      	push	{r3, lr}
   ba348:	4602      	mov	r2, r0
        : address_{} {
   ba34a:	2100      	movs	r1, #0
   ba34c:	6001      	str	r1, [r0, #0]
   ba34e:	6041      	str	r1, [r0, #4]
    clear();
   ba350:	f7ff fff3 	bl	ba33a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   ba354:	7191      	strb	r1, [r2, #6]
}
   ba356:	4610      	mov	r0, r2
   ba358:	bd08      	pop	{r3, pc}
	...

000ba35c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   ba35c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   ba35e:	2301      	movs	r3, #1
   ba360:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba362:	4b05      	ldr	r3, [pc, #20]	; (ba378 <_ZN8particle7BleUuidC1Ev+0x1c>)
   ba364:	4602      	mov	r2, r0
   ba366:	f103 0110 	add.w	r1, r3, #16
   ba36a:	f853 4b04 	ldr.w	r4, [r3], #4
   ba36e:	f842 4b04 	str.w	r4, [r2], #4
   ba372:	428b      	cmp	r3, r1
   ba374:	d1f9      	bne.n	ba36a <_ZN8particle7BleUuidC1Ev+0xe>
}
   ba376:	bd10      	pop	{r4, pc}
   ba378:	000c1f1a 	.word	0x000c1f1a

000ba37c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba37c:	7c0b      	ldrb	r3, [r1, #16]
   ba37e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   ba382:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba384:	d10d      	bne.n	ba3a2 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   ba386:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba388:	4b0c      	ldr	r3, [pc, #48]	; (ba3bc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   ba38a:	4602      	mov	r2, r0
   ba38c:	f103 0410 	add.w	r4, r3, #16
   ba390:	f853 5b04 	ldr.w	r5, [r3], #4
   ba394:	f842 5b04 	str.w	r5, [r2], #4
   ba398:	42a3      	cmp	r3, r4
   ba39a:	d1f9      	bne.n	ba390 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   ba39c:	880b      	ldrh	r3, [r1, #0]
   ba39e:	8183      	strh	r3, [r0, #12]
}
   ba3a0:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   ba3a2:	2301      	movs	r3, #1
   ba3a4:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba3a6:	f101 0210 	add.w	r2, r1, #16
   ba3aa:	4603      	mov	r3, r0
   ba3ac:	f851 4b04 	ldr.w	r4, [r1], #4
   ba3b0:	f843 4b04 	str.w	r4, [r3], #4
   ba3b4:	4291      	cmp	r1, r2
   ba3b6:	d1f9      	bne.n	ba3ac <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   ba3b8:	e7f2      	b.n	ba3a0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   ba3ba:	bf00      	nop
   ba3bc:	000c1f1a 	.word	0x000c1f1a

000ba3c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba3c0:	b510      	push	{r4, lr}
    if (uuid128) {
   ba3c2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba3c4:	4604      	mov	r4, r0
    if (uuid128) {
   ba3c6:	b1b1      	cbz	r1, ba3f6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   ba3c8:	2a01      	cmp	r2, #1
   ba3ca:	f101 0210 	add.w	r2, r1, #16
   ba3ce:	d10a      	bne.n	ba3e6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba3d0:	4601      	mov	r1, r0
   ba3d2:	f853 0b04 	ldr.w	r0, [r3], #4
   ba3d6:	f841 0b04 	str.w	r0, [r1], #4
   ba3da:	4293      	cmp	r3, r2
   ba3dc:	d1f9      	bne.n	ba3d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   ba3de:	2301      	movs	r3, #1
   ba3e0:	6123      	str	r3, [r4, #16]
}
   ba3e2:	4620      	mov	r0, r4
   ba3e4:	bd10      	pop	{r4, pc}
   ba3e6:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   ba3e8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   ba3ec:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba3f0:	429a      	cmp	r2, r3
   ba3f2:	d1f9      	bne.n	ba3e8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   ba3f4:	e7f3      	b.n	ba3de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   ba3f6:	2210      	movs	r2, #16
   ba3f8:	f004 fb69 	bl	beace <memset>
   ba3fc:	e7f1      	b.n	ba3e2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000ba3fe <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   ba3fe:	b538      	push	{r3, r4, r5, lr}
   ba400:	4604      	mov	r4, r0
   ba402:	460d      	mov	r5, r1
        : BleUuid() {
   ba404:	f7ff ffaa 	bl	ba35c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   ba408:	2300      	movs	r3, #0
   ba40a:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   ba40c:	81a5      	strh	r5, [r4, #12]
}
   ba40e:	4620      	mov	r0, r4
   ba410:	bd38      	pop	{r3, r4, r5, pc}

000ba412 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   ba412:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba414:	6902      	ldr	r2, [r0, #16]
   ba416:	690b      	ldr	r3, [r1, #16]
   ba418:	429a      	cmp	r2, r3
   ba41a:	d106      	bne.n	ba42a <_ZNK8particle7BleUuideqERKS0_+0x18>
   ba41c:	2210      	movs	r2, #16
   ba41e:	f004 fb1e 	bl	bea5e <memcmp>
   ba422:	fab0 f080 	clz	r0, r0
   ba426:	0940      	lsrs	r0, r0, #5
}
   ba428:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba42a:	2000      	movs	r0, #0
   ba42c:	e7fc      	b.n	ba428 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000ba430 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   ba430:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   ba432:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   ba436:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba438:	4b34      	ldr	r3, [pc, #208]	; (ba50c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   ba43a:	460c      	mov	r4, r1
   ba43c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba43e:	4602      	mov	r2, r0
   ba440:	f103 0110 	add.w	r1, r3, #16
   ba444:	f853 0b04 	ldr.w	r0, [r3], #4
   ba448:	f842 0b04 	str.w	r0, [r2], #4
   ba44c:	428b      	cmp	r3, r1
   ba44e:	d1f9      	bne.n	ba444 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   ba450:	b344      	cbz	r4, ba4a4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   ba452:	2124      	movs	r1, #36	; 0x24
   ba454:	4620      	mov	r0, r4
   ba456:	f004 fc1d 	bl	bec94 <strnlen>
   ba45a:	2804      	cmp	r0, #4
   ba45c:	f04f 0500 	mov.w	r5, #0
   ba460:	d123      	bne.n	ba4aa <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   ba462:	f8ad 5004 	strh.w	r5, [sp, #4]
   ba466:	af01      	add	r7, sp, #4
   ba468:	1ca5      	adds	r5, r4, #2
   ba46a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   ba46c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   ba470:	f7ff ff18 	bl	ba2a4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   ba474:	f1b0 0800 	subs.w	r8, r0, #0
   ba478:	db12      	blt.n	ba4a0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   ba47a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   ba47e:	f7ff ff11 	bl	ba2a4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   ba482:	2800      	cmp	r0, #0
   ba484:	db0c      	blt.n	ba4a0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   ba486:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba488:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   ba48c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba48e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   ba492:	d1eb      	bne.n	ba46c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   ba494:	f89d 3005 	ldrb.w	r3, [sp, #5]
   ba498:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   ba49a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba49e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   ba4a0:	2300      	movs	r3, #0
   ba4a2:	6133      	str	r3, [r6, #16]
}
   ba4a4:	b002      	add	sp, #8
   ba4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   ba4aa:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba4ae:	2124      	movs	r1, #36	; 0x24
   ba4b0:	4620      	mov	r0, r4
   ba4b2:	f004 fbef 	bl	bec94 <strnlen>
   ba4b6:	42a8      	cmp	r0, r5
   ba4b8:	d807      	bhi.n	ba4ca <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   ba4ba:	4642      	mov	r2, r8
   ba4bc:	2100      	movs	r1, #0
   ba4be:	4630      	mov	r0, r6
}
   ba4c0:	b002      	add	sp, #8
   ba4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   ba4c6:	f004 bb02 	b.w	beace <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba4ca:	f1b8 0f00 	cmp.w	r8, #0
   ba4ce:	d0e9      	beq.n	ba4a4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   ba4d0:	5d60      	ldrb	r0, [r4, r5]
   ba4d2:	f7ff fee7 	bl	ba2a4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   ba4d6:	0603      	lsls	r3, r0, #24
   ba4d8:	d415      	bmi.n	ba506 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   ba4da:	0100      	lsls	r0, r0, #4
   ba4dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba4e0:	b2c7      	uxtb	r7, r0
   ba4e2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   ba4e6:	2124      	movs	r1, #36	; 0x24
   ba4e8:	4620      	mov	r0, r4
   ba4ea:	f004 fbd3 	bl	bec94 <strnlen>
   ba4ee:	3501      	adds	r5, #1
   ba4f0:	42a8      	cmp	r0, r5
   ba4f2:	d908      	bls.n	ba506 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   ba4f4:	5d60      	ldrb	r0, [r4, r5]
   ba4f6:	f7ff fed5 	bl	ba2a4 <_ZN8particle11hexToNibbleEc>
   ba4fa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   ba4fc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   ba4fe:	bfa4      	itt	ge
   ba500:	4338      	orrge	r0, r7
   ba502:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba506:	3501      	adds	r5, #1
   ba508:	e7d1      	b.n	ba4ae <_ZN8particle7BleUuid9constructEPKc+0x7e>
   ba50a:	bf00      	nop
   ba50c:	000c1f1a 	.word	0x000c1f1a

000ba510 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   ba510:	b513      	push	{r0, r1, r4, lr}
   ba512:	4604      	mov	r4, r0
   ba514:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   ba516:	f7ff ff21 	bl	ba35c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   ba51a:	4620      	mov	r0, r4
   ba51c:	9901      	ldr	r1, [sp, #4]
   ba51e:	f7ff ff87 	bl	ba430 <_ZN8particle7BleUuid9constructEPKc>
}
   ba522:	4620      	mov	r0, r4
   ba524:	b002      	add	sp, #8
   ba526:	bd10      	pop	{r4, pc}

000ba528 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   ba528:	b510      	push	{r4, lr}
   ba52a:	f100 030f 	add.w	r3, r0, #15
   ba52e:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   ba530:	781c      	ldrb	r4, [r3, #0]
   ba532:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba536:	4283      	cmp	r3, r0
   ba538:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   ba53c:	d1f8      	bne.n	ba530 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   ba53e:	bd10      	pop	{r4, pc}

000ba540 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   ba540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba544:	461f      	mov	r7, r3
   ba546:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   ba548:	460d      	mov	r5, r1
   ba54a:	2900      	cmp	r1, #0
   ba54c:	d05b      	beq.n	ba606 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   ba54e:	b1da      	cbz	r2, ba588 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   ba550:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   ba554:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   ba556:	f1b8 0f00 	cmp.w	r8, #0
   ba55a:	d119      	bne.n	ba590 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba55c:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   ba55e:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba562:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba564:	aa05      	add	r2, sp, #20
   ba566:	2102      	movs	r1, #2
   ba568:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba56a:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba56e:	f7ff fe61 	bl	ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   ba572:	2c04      	cmp	r4, #4
   ba574:	bf28      	it	cs
   ba576:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   ba578:	4622      	mov	r2, r4
   ba57a:	a905      	add	r1, sp, #20
   ba57c:	4628      	mov	r0, r5
   ba57e:	f004 fa7e 	bl	bea7e <memcpy>
        buf[len++] = '\0';
   ba582:	f805 8004 	strb.w	r8, [r5, r4]
   ba586:	1c62      	adds	r2, r4, #1
}
   ba588:	4610      	mov	r0, r2
   ba58a:	b00e      	add	sp, #56	; 0x38
   ba58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   ba590:	a901      	add	r1, sp, #4
   ba592:	f7ff ffc9 	bl	ba528 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba596:	aa05      	add	r2, sp, #20
    if (stripped) {
   ba598:	b17f      	cbz	r7, ba5ba <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba59a:	2110      	movs	r1, #16
   ba59c:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba59e:	f7ff fe49 	bl	ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   ba5a2:	2c24      	cmp	r4, #36	; 0x24
   ba5a4:	bf28      	it	cs
   ba5a6:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   ba5a8:	4622      	mov	r2, r4
   ba5aa:	a905      	add	r1, sp, #20
   ba5ac:	4628      	mov	r0, r5
   ba5ae:	f004 fa66 	bl	bea7e <memcpy>
    buf[len++] = '\0';
   ba5b2:	2300      	movs	r3, #0
   ba5b4:	552b      	strb	r3, [r5, r4]
   ba5b6:	1c62      	adds	r2, r4, #1
    return len;
   ba5b8:	e7e6      	b.n	ba588 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   ba5ba:	2104      	movs	r1, #4
   ba5bc:	eb0d 0001 	add.w	r0, sp, r1
   ba5c0:	f7ff fe38 	bl	ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   ba5c4:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba5c6:	f10d 021d 	add.w	r2, sp, #29
   ba5ca:	2102      	movs	r1, #2
   ba5cc:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   ba5ce:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba5d2:	f7ff fe2f 	bl	ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba5d6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   ba5da:	2102      	movs	r1, #2
   ba5dc:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   ba5e0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba5e4:	f7ff fe26 	bl	ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba5e8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   ba5ec:	2102      	movs	r1, #2
   ba5ee:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   ba5f0:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba5f4:	f7ff fe1e 	bl	ba234 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   ba5f8:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba5fc:	aa0b      	add	r2, sp, #44	; 0x2c
   ba5fe:	2106      	movs	r1, #6
   ba600:	f10d 000e 	add.w	r0, sp, #14
   ba604:	e7cb      	b.n	ba59e <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   ba606:	460a      	mov	r2, r1
   ba608:	e7be      	b.n	ba588 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000ba60a <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   ba60a:	b510      	push	{r4, lr}
   ba60c:	b08a      	sub	sp, #40	; 0x28
   ba60e:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   ba610:	2300      	movs	r3, #0
   ba612:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   ba614:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   ba616:	4669      	mov	r1, sp
   ba618:	f7ff ff92 	bl	ba540 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   ba61c:	4669      	mov	r1, sp
   ba61e:	4620      	mov	r0, r4
   ba620:	f002 ff3d 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba624:	4620      	mov	r0, r4
   ba626:	b00a      	add	sp, #40	; 0x28
   ba628:	bd10      	pop	{r4, pc}

000ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   ba62a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba62c:	4605      	mov	r5, r0
   ba62e:	4616      	mov	r6, r2
   ba630:	461f      	mov	r7, r3
   ba632:	460a      	mov	r2, r1
   ba634:	ab01      	add	r3, sp, #4
   ba636:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba63a:	f7ff fd7b 	bl	ba134 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   ba63e:	f030 0402 	bics.w	r4, r0, #2
   ba642:	d00c      	beq.n	ba65e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   ba644:	1e84      	subs	r4, r0, #2
   ba646:	42bc      	cmp	r4, r7
   ba648:	bf28      	it	cs
   ba64a:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   ba64c:	b13e      	cbz	r6, ba65e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   ba64e:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   ba650:	682b      	ldr	r3, [r5, #0]
   ba652:	3102      	adds	r1, #2
   ba654:	4622      	mov	r2, r4
   ba656:	4419      	add	r1, r3
   ba658:	4630      	mov	r0, r6
   ba65a:	f004 fa10 	bl	bea7e <memcpy>
}
   ba65e:	4620      	mov	r0, r4
   ba660:	b003      	add	sp, #12
   ba662:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba664 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba664:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba666:	4613      	mov	r3, r2
   ba668:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba66a:	9201      	str	r2, [sp, #4]
   ba66c:	460a      	mov	r2, r1
   ba66e:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba670:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba672:	f7ff ffda 	bl	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   ba676:	b940      	cbnz	r0, ba68a <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba678:	9b01      	ldr	r3, [sp, #4]
   ba67a:	4622      	mov	r2, r4
   ba67c:	2109      	movs	r1, #9
   ba67e:	4628      	mov	r0, r5
}
   ba680:	b003      	add	sp, #12
   ba682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba686:	f7ff bfd0 	b.w	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   ba68a:	b003      	add	sp, #12
   ba68c:	bd30      	pop	{r4, r5, pc}
	...

000ba690 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   ba690:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba692:	460c      	mov	r4, r1
   ba694:	b089      	sub	sp, #36	; 0x24
    String name;
   ba696:	490c      	ldr	r1, [pc, #48]	; (ba6c8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   ba698:	4605      	mov	r5, r0
    String name;
   ba69a:	f002 ff00 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   ba69e:	221f      	movs	r2, #31
   ba6a0:	4669      	mov	r1, sp
   ba6a2:	4620      	mov	r0, r4
   ba6a4:	f7ff ffde 	bl	ba664 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   ba6a8:	4606      	mov	r6, r0
   ba6aa:	b150      	cbz	r0, ba6c2 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   ba6ac:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   ba6ae:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   ba6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba6b4:	4628      	mov	r0, r5
   ba6b6:	f002 ff71 	bl	bd59c <_ZN6String6concatEc>
   ba6ba:	b110      	cbz	r0, ba6c2 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   ba6bc:	3701      	adds	r7, #1
   ba6be:	42be      	cmp	r6, r7
   ba6c0:	d1f6      	bne.n	ba6b0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   ba6c2:	4628      	mov	r0, r5
   ba6c4:	b009      	add	sp, #36	; 0x24
   ba6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba6c8:	000c1166 	.word	0x000c1166

000ba6cc <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   ba6cc:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   ba6ce:	460a      	mov	r2, r1
   ba6d0:	21ff      	movs	r1, #255	; 0xff
   ba6d2:	f7ff bfaa 	b.w	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000ba6d6 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   ba6d6:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   ba6d8:	2302      	movs	r3, #2
   ba6da:	aa01      	add	r2, sp, #4
   ba6dc:	2119      	movs	r1, #25
   ba6de:	f7ff ffa4 	bl	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   ba6e2:	b108      	cbz	r0, ba6e8 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   ba6e4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   ba6e8:	b003      	add	sp, #12
   ba6ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba6f0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   ba6f0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   ba6f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba6f6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   ba6f8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   ba6fa:	8043      	strh	r3, [r0, #2]
   ba6fc:	220e      	movs	r2, #14
   ba6fe:	4629      	mov	r1, r5
   ba700:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   ba702:	7105      	strb	r5, [r0, #4]
   ba704:	3006      	adds	r0, #6
   ba706:	f004 f9e2 	bl	beace <memset>
   ba70a:	f104 0014 	add.w	r0, r4, #20
   ba70e:	f7ff fe25 	bl	ba35c <_ZN8particle7BleUuidC1Ev>
   ba712:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba716:	f7ff fe21 	bl	ba35c <_ZN8particle7BleUuidC1Ev>
   ba71a:	4904      	ldr	r1, [pc, #16]	; (ba72c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   ba71c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba720:	f002 febd 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   ba724:	6565      	str	r5, [r4, #84]	; 0x54
    }
   ba726:	4620      	mov	r0, r4
   ba728:	bd38      	pop	{r3, r4, r5, pc}
   ba72a:	bf00      	nop
   ba72c:	000c1166 	.word	0x000c1166

000ba730 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   ba730:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   ba732:	680d      	ldr	r5, [r1, #0]
   ba734:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba736:	4601      	mov	r1, r0
   ba738:	f105 0028 	add.w	r0, r5, #40	; 0x28
   ba73c:	f7ff fe69 	bl	ba412 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba740:	b140      	cbz	r0, ba754 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   ba742:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba744:	8aa2      	ldrh	r2, [r4, #20]
   ba746:	429a      	cmp	r2, r3
   ba748:	d805      	bhi.n	ba756 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba74a:	8ae0      	ldrh	r0, [r4, #22]
   ba74c:	4298      	cmp	r0, r3
   ba74e:	bf34      	ite	cc
   ba750:	2000      	movcc	r0, #0
   ba752:	2001      	movcs	r0, #1
    }
   ba754:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   ba756:	2000      	movs	r0, #0
   ba758:	e7fc      	b.n	ba754 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000ba75a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   ba75a:	b510      	push	{r4, lr}
    return data_ + size_;
   ba75c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   ba760:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   ba764:	4293      	cmp	r3, r2
   ba766:	4618      	mov	r0, r3
   ba768:	d006      	beq.n	ba778 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   ba76a:	6804      	ldr	r4, [r0, #0]
   ba76c:	8824      	ldrh	r4, [r4, #0]
   ba76e:	428c      	cmp	r4, r1
   ba770:	f103 0308 	add.w	r3, r3, #8
   ba774:	d1f6      	bne.n	ba764 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   ba776:	bd10      	pop	{r4, pc}
        return nullptr;
   ba778:	2000      	movs	r0, #0
   ba77a:	e7fc      	b.n	ba776 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000ba77c <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba77c:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   ba77e:	b570      	push	{r4, r5, r6, lr}
   ba780:	6003      	str	r3, [r0, #0]
   ba782:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba784:	2068      	movs	r0, #104	; 0x68
   ba786:	f7f9 fc86 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba78a:	1e04      	subs	r4, r0, #0
   ba78c:	f104 060c 	add.w	r6, r4, #12
   ba790:	d007      	beq.n	ba7a2 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   ba792:	2301      	movs	r3, #1
   ba794:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba798:	4b04      	ldr	r3, [pc, #16]	; (ba7ac <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   ba79a:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba79c:	4630      	mov	r0, r6
   ba79e:	f7ff ffa7 	bl	ba6f0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   ba7a2:	e9c5 6400 	strd	r6, r4, [r5]
}
   ba7a6:	4628      	mov	r0, r5
   ba7a8:	bd70      	pop	{r4, r5, r6, pc}
   ba7aa:	bf00      	nop
   ba7ac:	000c1ec0 	.word	0x000c1ec0

000ba7b0 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   ba7b0:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   ba7b2:	680c      	ldr	r4, [r1, #0]
   ba7b4:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   ba7b6:	4606      	mov	r6, r0
    return impl()->charUUID();
   ba7b8:	4605      	mov	r5, r0
   ba7ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba7bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba7be:	6823      	ldr	r3, [r4, #0]
   ba7c0:	602b      	str	r3, [r5, #0]
}
   ba7c2:	4630      	mov	r0, r6
   ba7c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba7c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   ba7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba7ca:	4606      	mov	r6, r0
   ba7cc:	b085      	sub	sp, #20
   ba7ce:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   ba7d0:	460d      	mov	r5, r1
   ba7d2:	2900      	cmp	r1, #0
   ba7d4:	d050      	beq.n	ba878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   ba7d6:	2a00      	cmp	r2, #0
   ba7d8:	d04e      	beq.n	ba878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   ba7da:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   ba7dc:	7823      	ldrb	r3, [r4, #0]
   ba7de:	2af4      	cmp	r2, #244	; 0xf4
   ba7e0:	bf28      	it	cs
   ba7e2:	22f4      	movcs	r2, #244	; 0xf4
   ba7e4:	b343      	cbz	r3, ba838 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   ba7e6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   ba7e8:	0798      	lsls	r0, r3, #30
   ba7ea:	d509      	bpl.n	ba800 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   ba7ec:	89a0      	ldrh	r0, [r4, #12]
   ba7ee:	9203      	str	r2, [sp, #12]
   ba7f0:	2300      	movs	r3, #0
   ba7f2:	f7ff f871 	bl	b98d8 <hal_ble_gatt_server_set_characteristic_value>
   ba7f6:	2800      	cmp	r0, #0
   ba7f8:	9a03      	ldr	r2, [sp, #12]
   ba7fa:	da03      	bge.n	ba804 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   ba7fc:	b005      	add	sp, #20
   ba7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   ba800:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba804:	6834      	ldr	r4, [r6, #0]
   ba806:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   ba808:	06d9      	lsls	r1, r3, #27
   ba80a:	d509      	bpl.n	ba820 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   ba80c:	2f01      	cmp	r7, #1
   ba80e:	d007      	beq.n	ba820 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba810:	89a0      	ldrh	r0, [r4, #12]
   ba812:	2300      	movs	r3, #0
   ba814:	4629      	mov	r1, r5
}
   ba816:	b005      	add	sp, #20
   ba818:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba81c:	f7ff b8c0 	b.w	b99a0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   ba820:	069b      	lsls	r3, r3, #26
   ba822:	d5eb      	bpl.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba824:	2f02      	cmp	r7, #2
   ba826:	d0e9      	beq.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba828:	89a0      	ldrh	r0, [r4, #12]
   ba82a:	2300      	movs	r3, #0
   ba82c:	4629      	mov	r1, r5
}
   ba82e:	b005      	add	sp, #20
   ba830:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba834:	f7ff b8be 	b.w	b99b4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba838:	8860      	ldrh	r0, [r4, #2]
   ba83a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba83e:	4288      	cmp	r0, r1
   ba840:	d01c      	beq.n	ba87c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba842:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba844:	074e      	lsls	r6, r1, #29
   ba846:	d501      	bpl.n	ba84c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba848:	2f01      	cmp	r7, #1
   ba84a:	d104      	bne.n	ba856 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba84c:	070b      	lsls	r3, r1, #28
   ba84e:	d409      	bmi.n	ba864 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba850:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba854:	e7d2      	b.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba856:	89a1      	ldrh	r1, [r4, #12]
   ba858:	9300      	str	r3, [sp, #0]
   ba85a:	4613      	mov	r3, r2
   ba85c:	462a      	mov	r2, r5
   ba85e:	f7ff f863 	bl	b9928 <hal_ble_gatt_client_write_without_response>
   ba862:	e7cb      	b.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba864:	2f02      	cmp	r7, #2
   ba866:	d0f3      	beq.n	ba850 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba868:	2300      	movs	r3, #0
   ba86a:	89a1      	ldrh	r1, [r4, #12]
   ba86c:	9300      	str	r3, [sp, #0]
   ba86e:	4613      	mov	r3, r2
   ba870:	462a      	mov	r2, r5
   ba872:	f7ff f84f 	bl	b9914 <hal_ble_gatt_client_write_with_response>
   ba876:	e7c1      	b.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba878:	4802      	ldr	r0, [pc, #8]	; (ba884 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba87a:	e7bf      	b.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba87c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba880:	e7bc      	b.n	ba7fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba882:	bf00      	nop
   ba884:	fffffef2 	.word	0xfffffef2

000ba888 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   ba888:	b510      	push	{r4, lr}
   ba88a:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba88c:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   ba88e:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba890:	bb52      	cbnz	r2, ba8e8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   ba892:	885c      	ldrh	r4, [r3, #2]
   ba894:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba898:	4284      	cmp	r4, r0
   ba89a:	d025      	beq.n	ba8e8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba89c:	8a18      	ldrh	r0, [r3, #16]
   ba89e:	b330      	cbz	r0, ba8ee <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   ba8a0:	e9cd 2203 	strd	r2, r2, [sp, #12]
   ba8a4:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   ba8a6:	4a13      	ldr	r2, [pc, #76]	; (ba8f4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   ba8a8:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   ba8aa:	4a13      	ldr	r2, [pc, #76]	; (ba8f8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   ba8ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   ba8b0:	885a      	ldrh	r2, [r3, #2]
   ba8b2:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   ba8b6:	8a1a      	ldrh	r2, [r3, #16]
   ba8b8:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   ba8bc:	899a      	ldrh	r2, [r3, #12]
   ba8be:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   ba8c2:	b159      	cbz	r1, ba8dc <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   ba8c4:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   ba8c6:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   ba8c8:	bf44      	itt	mi
   ba8ca:	2202      	movmi	r2, #2
   ba8cc:	9205      	strmi	r2, [sp, #20]
   ba8ce:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   ba8d0:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   ba8d2:	bf42      	ittt	mi
   ba8d4:	9b05      	ldrmi	r3, [sp, #20]
   ba8d6:	f043 0301 	orrmi.w	r3, r3, #1
   ba8da:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   ba8dc:	2100      	movs	r1, #0
   ba8de:	4668      	mov	r0, sp
   ba8e0:	f7ff f854 	bl	b998c <hal_ble_gatt_client_configure_cccd>
}
   ba8e4:	b006      	add	sp, #24
   ba8e6:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba8e8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba8ec:	e7fa      	b.n	ba8e4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba8ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba8f2:	e7f7      	b.n	ba8e4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   ba8f4:	00180003 	.word	0x00180003
   ba8f8:	000baacd 	.word	0x000baacd

000ba8fc <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   ba8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba8fe:	2600      	movs	r6, #0
   ba900:	6006      	str	r6, [r0, #0]
   ba902:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba904:	2028      	movs	r0, #40	; 0x28
   ba906:	f7f9 fbc6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba90a:	1e04      	subs	r4, r0, #0
   ba90c:	f104 070c 	add.w	r7, r4, #12
   ba910:	d00a      	beq.n	ba928 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba912:	2301      	movs	r3, #1
   ba914:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba918:	4b05      	ldr	r3, [pc, #20]	; (ba930 <_ZN8particle10BleServiceC1Ev+0x34>)
   ba91a:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   ba91c:	4638      	mov	r0, r7
   ba91e:	f7ff fd1d 	bl	ba35c <_ZN8particle7BleUuidC1Ev>
   ba922:	6226      	str	r6, [r4, #32]
   ba924:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   ba928:	e9c5 7400 	strd	r7, r4, [r5]
}
   ba92c:	4628      	mov	r0, r5
   ba92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba930:	000c1edc 	.word	0x000c1edc

000ba934 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba934:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba936:	2500      	movs	r5, #0
   ba938:	6005      	str	r5, [r0, #0]
   ba93a:	4606      	mov	r6, r0
   ba93c:	2030      	movs	r0, #48	; 0x30
   ba93e:	f7f9 fbaa 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba942:	4604      	mov	r4, r0
   ba944:	b188      	cbz	r0, ba96a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba946:	2301      	movs	r3, #1
   ba948:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba94c:	4b09      	ldr	r3, [pc, #36]	; (ba974 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba94e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba950:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba954:	8183      	strh	r3, [r0, #12]
   ba956:	300e      	adds	r0, #14
   ba958:	f7ff fcf5 	bl	ba346 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba95c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba960:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba964:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba968:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba96a:	6074      	str	r4, [r6, #4]
   ba96c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba96e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba970:	4630      	mov	r0, r6
   ba972:	bd70      	pop	{r4, r5, r6, pc}
   ba974:	000c1ef8 	.word	0x000c1ef8

000ba978 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   ba978:	b513      	push	{r0, r1, r4, lr}
   ba97a:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba97c:	a801      	add	r0, sp, #4
   ba97e:	f7ff fca7 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba982:	6823      	ldr	r3, [r4, #0]
   ba984:	881c      	ldrh	r4, [r3, #0]
   ba986:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba98a:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   ba98c:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba98e:	bf18      	it	ne
   ba990:	2401      	movne	r4, #1
    WiringBleLock lk;
   ba992:	f7ff fcab 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba996:	4620      	mov	r0, r4
   ba998:	b002      	add	sp, #8
   ba99a:	bd10      	pop	{r4, pc}

000ba99c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   ba99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba99e:	4605      	mov	r5, r0
   ba9a0:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba9a2:	a801      	add	r0, sp, #4
   ba9a4:	f7ff fc94 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba9a8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba9aa:	6823      	ldr	r3, [r4, #0]
   ba9ac:	f8c2 3002 	str.w	r3, [r2, #2]
   ba9b0:	6863      	ldr	r3, [r4, #4]
   ba9b2:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   ba9b6:	a801      	add	r0, sp, #4
   ba9b8:	f7ff fc98 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   ba9bc:	b003      	add	sp, #12
   ba9be:	bd30      	pop	{r4, r5, pc}

000ba9c0 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba9c2:	460d      	mov	r5, r1
   ba9c4:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba9c6:	a801      	add	r0, sp, #4
   ba9c8:	f7ff fc82 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
   ba9cc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba9ce:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba9d2:	6023      	str	r3, [r4, #0]
   ba9d4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba9d8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba9da:	a801      	add	r0, sp, #4
   ba9dc:	f7ff fc86 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba9e0:	4620      	mov	r0, r4
   ba9e2:	b003      	add	sp, #12
   ba9e4:	bd30      	pop	{r4, r5, pc}

000ba9e6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba9e6:	b530      	push	{r4, r5, lr}
   ba9e8:	4605      	mov	r5, r0
   ba9ea:	b087      	sub	sp, #28
   ba9ec:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba9ee:	a801      	add	r0, sp, #4
   ba9f0:	f7ff fc6e 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba9f4:	682a      	ldr	r2, [r5, #0]
   ba9f6:	6823      	ldr	r3, [r4, #0]
   ba9f8:	8812      	ldrh	r2, [r2, #0]
   ba9fa:	881b      	ldrh	r3, [r3, #0]
   ba9fc:	429a      	cmp	r2, r3
   ba9fe:	d10d      	bne.n	baa1c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   baa00:	4629      	mov	r1, r5
   baa02:	a802      	add	r0, sp, #8
   baa04:	f7ff ffdc 	bl	ba9c0 <_ZNK8particle13BlePeerDevice7addressEv>
   baa08:	4621      	mov	r1, r4
   baa0a:	a804      	add	r0, sp, #16
   baa0c:	f7ff ffd8 	bl	ba9c0 <_ZNK8particle13BlePeerDevice7addressEv>
   baa10:	a904      	add	r1, sp, #16
   baa12:	a802      	add	r0, sp, #8
   baa14:	f7ff fc83 	bl	ba31e <_ZNK8particle10BleAddresseqERKS0_>
   baa18:	4604      	mov	r4, r0
   baa1a:	b900      	cbnz	r0, baa1e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   baa1c:	2400      	movs	r4, #0
    WiringBleLock lk;
   baa1e:	a801      	add	r0, sp, #4
   baa20:	f7ff fc64 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   baa24:	4620      	mov	r0, r4
   baa26:	b007      	add	sp, #28
   baa28:	bd30      	pop	{r4, r5, pc}
	...

000baa2c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   baa2c:	b510      	push	{r4, lr}
   baa2e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   baa30:	2064      	movs	r0, #100	; 0x64
   baa32:	f7f9 fb30 	bl	b4096 <_Znwj>
   baa36:	b168      	cbz	r0, baa54 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   baa38:	2300      	movs	r3, #0
   baa3a:	e9c0 3300 	strd	r3, r3, [r0]
   baa3e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   baa42:	e9c0 3304 	strd	r3, r3, [r0, #16]
   baa46:	e9c0 3306 	strd	r3, r3, [r0, #24]
   baa4a:	6203      	str	r3, [r0, #32]
   baa4c:	62c3      	str	r3, [r0, #44]	; 0x2c
   baa4e:	63c3      	str	r3, [r0, #60]	; 0x3c
   baa50:	64c3      	str	r3, [r0, #76]	; 0x4c
   baa52:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   baa54:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   baa56:	b920      	cbnz	r0, baa62 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   baa58:	4a0a      	ldr	r2, [pc, #40]	; (baa84 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   baa5a:	490b      	ldr	r1, [pc, #44]	; (baa88 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   baa5c:	200a      	movs	r0, #10
   baa5e:	f7ff f9ab 	bl	b9db8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   baa62:	2000      	movs	r0, #0
   baa64:	f7fe fefc 	bl	b9860 <hal_ble_stack_init>
   baa68:	b120      	cbz	r0, baa74 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   baa6a:	4a06      	ldr	r2, [pc, #24]	; (baa84 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   baa6c:	4907      	ldr	r1, [pc, #28]	; (baa8c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   baa6e:	200a      	movs	r0, #10
   baa70:	f7ff f9a2 	bl	b9db8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   baa74:	6821      	ldr	r1, [r4, #0]
   baa76:	4806      	ldr	r0, [pc, #24]	; (baa90 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   baa78:	2200      	movs	r2, #0
   baa7a:	f7fe ff7d 	bl	b9978 <hal_ble_set_callback_on_periph_link_events>
}
   baa7e:	4620      	mov	r0, r4
   baa80:	bd10      	pop	{r4, pc}
   baa82:	bf00      	nop
   baa84:	000b9a79 	.word	0x000b9a79
   baa88:	000c1c9c 	.word	0x000c1c9c
   baa8c:	000c1cda 	.word	0x000c1cda
   baa90:	000bb4d9 	.word	0x000bb4d9

000baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   baa94:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   baa96:	4c0a      	ldr	r4, [pc, #40]	; (baac0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   baa98:	7823      	ldrb	r3, [r4, #0]
   baa9a:	f3bf 8f5b 	dmb	ish
   baa9e:	07db      	lsls	r3, r3, #31
   baaa0:	d40c      	bmi.n	baabc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   baaa2:	4620      	mov	r0, r4
   baaa4:	f7f9 fb0a 	bl	b40bc <__cxa_guard_acquire>
   baaa8:	b140      	cbz	r0, baabc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   baaaa:	4806      	ldr	r0, [pc, #24]	; (baac4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   baaac:	f7ff ffbe 	bl	baa2c <_ZN8particle14BleLocalDeviceC1Ev>
   baab0:	4620      	mov	r0, r4
   baab2:	f7f9 fb08 	bl	b40c6 <__cxa_guard_release>
   baab6:	4804      	ldr	r0, [pc, #16]	; (baac8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   baab8:	f003 ffc4 	bl	bea44 <atexit>
    return instance;
}
   baabc:	4801      	ldr	r0, [pc, #4]	; (baac4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   baabe:	bd10      	pop	{r4, pc}
   baac0:	2003e654 	.word	0x2003e654
   baac4:	2003e65c 	.word	0x2003e65c
   baac8:	000baddd 	.word	0x000baddd

000baacc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   baacc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   baace:	6803      	ldr	r3, [r0, #0]
   baad0:	3b09      	subs	r3, #9
   baad2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   baad4:	b08d      	sub	sp, #52	; 0x34
   baad6:	4604      	mov	r4, r0
   baad8:	460d      	mov	r5, r1
    switch (event->type) {
   baada:	d811      	bhi.n	bab00 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   baadc:	f7ff ffda 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   baae0:	88a1      	ldrh	r1, [r4, #4]
   baae2:	6800      	ldr	r0, [r0, #0]
   baae4:	f7ff fe39 	bl	ba75a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   baae8:	4603      	mov	r3, r0
   baaea:	b958      	cbnz	r0, bab04 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   baaec:	2220      	movs	r2, #32
   baaee:	e9cd 2004 	strd	r2, r0, [sp, #16]
   baaf2:	4a0b      	ldr	r2, [pc, #44]	; (bab20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   baaf4:	9200      	str	r2, [sp, #0]
   baaf6:	490b      	ldr	r1, [pc, #44]	; (bab24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   baaf8:	aa04      	add	r2, sp, #16
   baafa:	2032      	movs	r0, #50	; 0x32
   baafc:	f7ff f964 	bl	b9dc8 <log_message>
}
   bab00:	b00d      	add	sp, #52	; 0x34
   bab02:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bab04:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bab06:	2a00      	cmp	r2, #0
   bab08:	d0fa      	beq.n	bab00 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bab0a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bab0e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bab12:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bab16:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bab18:	aa04      	add	r2, sp, #16
   bab1a:	a903      	add	r1, sp, #12
   bab1c:	47a0      	blx	r4
}
   bab1e:	e7ef      	b.n	bab00 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bab20:	000c1d1c 	.word	0x000c1d1c
   bab24:	000c1cb3 	.word	0x000c1cb3

000bab28 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bab28:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bab2a:	2000      	movs	r0, #0
   bab2c:	f7fe fe98 	bl	b9860 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bab30:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bab34:	bd08      	pop	{r3, pc}

000bab36 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bab36:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bab38:	2100      	movs	r1, #0
   bab3a:	f7fe be99 	b.w	b9870 <hal_ble_gap_set_tx_power>
	...

000bab40 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   bab40:	b570      	push	{r4, r5, r6, lr}
   bab42:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   bab44:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   bab46:	460e      	mov	r6, r1
   bab48:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   bab4a:	f7ff fb3f 	bl	ba1cc <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   bab4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bab52:	f7ff fb46 	bl	ba1e2 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   bab56:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   bab5a:	2200      	movs	r2, #0
   bab5c:	4621      	mov	r1, r4
   bab5e:	4803      	ldr	r0, [pc, #12]	; (bab6c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   bab60:	f7fe fe9e 	bl	b98a0 <hal_ble_gap_start_scan>
   bab64:	2800      	cmp	r0, #0
        return foundCount_;
   bab66:	bfa8      	it	ge
   bab68:	6960      	ldrge	r0, [r4, #20]
    }
   bab6a:	bd70      	pop	{r4, r5, r6, pc}
   bab6c:	000bc4e5 	.word	0x000bc4e5

000bab70 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   bab70:	b510      	push	{r4, lr}
   bab72:	4604      	mov	r4, r0
    ::free(ptr);
   bab74:	6940      	ldr	r0, [r0, #20]
   bab76:	f7ff fa13 	bl	b9fa0 <free>
   bab7a:	68a0      	ldr	r0, [r4, #8]
   bab7c:	f7ff fa10 	bl	b9fa0 <free>
   bab80:	4620      	mov	r0, r4
   bab82:	bd10      	pop	{r4, pc}

000bab84 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   bab84:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   bab86:	f647 717f 	movw	r1, #32639	; 0x7f7f
   bab8a:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   bab8e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bab92:	e9c0 2204 	strd	r2, r2, [r0, #16]
   bab96:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   bab9a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   bab9e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   baba2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   baba6:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   babaa:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   babae:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   babb2:	6202      	str	r2, [r0, #32]
   babb4:	6302      	str	r2, [r0, #48]	; 0x30
   babb6:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   babba:	4770      	bx	lr

000babbc <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   babbc:	b530      	push	{r4, r5, lr}
   babbe:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   babc0:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   babc2:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   babc4:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   babc6:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   babca:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   babcc:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   babce:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   babd0:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   babd4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   babd8:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   babda:	f7fe fe59 	bl	b9890 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   babde:	4621      	mov	r1, r4
   babe0:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   babe2:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   babe6:	f7fe fe4b 	bl	b9880 <hal_ble_gap_set_scan_parameters>
}
   babea:	b005      	add	sp, #20
   babec:	bd30      	pop	{r4, r5, pc}

000babee <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   babee:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   babf0:	69d8      	ldr	r0, [r3, #28]
}
   babf2:	2800      	cmp	r0, #0
   babf4:	bfd4      	ite	le
   babf6:	2000      	movle	r0, #0
   babf8:	2001      	movgt	r0, #1
   babfa:	4770      	bx	lr

000babfc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   babfc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   babfe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bac02:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bac04:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bac08:	42ae      	cmp	r6, r5
   bac0a:	d004      	beq.n	bac16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bac0c:	4628      	mov	r0, r5
   bac0e:	f002 fbfb 	bl	bd408 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bac12:	3510      	adds	r5, #16
   bac14:	e7f8      	b.n	bac08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bac16:	6820      	ldr	r0, [r4, #0]
   bac18:	f7ff f9c2 	bl	b9fa0 <free>
}
   bac1c:	4620      	mov	r0, r4
   bac1e:	bd70      	pop	{r4, r5, r6, pc}

000bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bac20:	b510      	push	{r4, lr}
   bac22:	4604      	mov	r4, r0
    ::free(ptr);
   bac24:	6800      	ldr	r0, [r0, #0]
   bac26:	f7ff f9bb 	bl	b9fa0 <free>
}
   bac2a:	4620      	mov	r0, r4
   bac2c:	bd10      	pop	{r4, pc}

000bac2e <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   bac2e:	b570      	push	{r4, r5, r6, lr}
   bac30:	4604      	mov	r4, r0
    ::free(ptr);
   bac32:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   bac34:	f7ff f9b4 	bl	b9fa0 <free>
   bac38:	6d20      	ldr	r0, [r4, #80]	; 0x50
   bac3a:	f7ff f9b1 	bl	b9fa0 <free>
    }
    ~BleScanFilter() = default;
   bac3e:	f104 0538 	add.w	r5, r4, #56	; 0x38
   bac42:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bac46:	f7ff ffeb 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   bac4a:	4628      	mov	r0, r5
   bac4c:	f7ff ffd6 	bl	babfc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   bac50:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bac54:	f7f9 fc90 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bac58:	f104 0018 	add.w	r0, r4, #24
   bac5c:	f7f9 fc8c 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bac60:	e9d4 5300 	ldrd	r5, r3, [r4]
   bac64:	2624      	movs	r6, #36	; 0x24
   bac66:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bac6a:	42ae      	cmp	r6, r5
   bac6c:	d004      	beq.n	bac78 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   bac6e:	4628      	mov	r0, r5
   bac70:	f7ff ff7e 	bl	bab70 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   bac74:	3524      	adds	r5, #36	; 0x24
   bac76:	e7f8      	b.n	bac6a <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   bac78:	6820      	ldr	r0, [r4, #0]
   bac7a:	f7ff f991 	bl	b9fa0 <free>
   bac7e:	4620      	mov	r0, r4
   bac80:	bd70      	pop	{r4, r5, r6, pc}
	...

000bac84 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   bac84:	b530      	push	{r4, r5, lr}
   bac86:	4615      	mov	r5, r2
   bac88:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   bac8a:	460c      	mov	r4, r1
   bac8c:	b179      	cbz	r1, bacae <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   bac8e:	b172      	cbz	r2, bacae <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   bac90:	a801      	add	r0, sp, #4
   bac92:	f7ff ff77 	bl	bab84 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   bac96:	4621      	mov	r1, r4
   bac98:	462a      	mov	r2, r5
   bac9a:	a801      	add	r0, sp, #4
   bac9c:	f7ff ff50 	bl	bab40 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   baca0:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   baca2:	a801      	add	r0, sp, #4
   baca4:	f7ff ffc3 	bl	bac2e <_ZN8particle16BleScanDelegatorD1Ev>
}
   baca8:	4620      	mov	r0, r4
   bacaa:	b01f      	add	sp, #124	; 0x7c
   bacac:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bacae:	4c01      	ldr	r4, [pc, #4]	; (bacb4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   bacb0:	e7fa      	b.n	baca8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   bacb2:	bf00      	nop
   bacb4:	fffffef2 	.word	0xfffffef2

000bacb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bacb8:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bacba:	1e14      	subs	r4, r2, #0
   bacbc:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bacbe:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bacc0:	db02      	blt.n	bacc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bacc2:	1862      	adds	r2, r4, r1
   bacc4:	429a      	cmp	r2, r3
   bacc6:	dd00      	ble.n	bacca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bacc8:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bacca:	682a      	ldr	r2, [r5, #0]
   baccc:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bacce:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bacd0:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bacd2:	1a52      	subs	r2, r2, r1
   bacd4:	f003 fee1 	bl	bea9a <memmove>
    size_ -= n;
   bacd8:	686a      	ldr	r2, [r5, #4]
   bacda:	1b12      	subs	r2, r2, r4
   bacdc:	606a      	str	r2, [r5, #4]
}
   bacde:	bd38      	pop	{r3, r4, r5, pc}

000bace0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bace0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bace2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bace4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bace6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bace8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bacea:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bacec:	f7f9 f9d3 	bl	b4096 <_Znwj>
   bacf0:	b118      	cbz	r0, bacfa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bacf2:	682b      	ldr	r3, [r5, #0]
   bacf4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bacf6:	686b      	ldr	r3, [r5, #4]
   bacf8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bacfa:	4b03      	ldr	r3, [pc, #12]	; (bad08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bacfc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bacfe:	4b03      	ldr	r3, [pc, #12]	; (bad0c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad00:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bad02:	60a3      	str	r3, [r4, #8]
      }
   bad04:	4620      	mov	r0, r4
   bad06:	bd38      	pop	{r3, r4, r5, pc}
   bad08:	000ba175 	.word	0x000ba175
   bad0c:	000ba18d 	.word	0x000ba18d

000bad10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bad10:	680b      	ldr	r3, [r1, #0]
   bad12:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bad14:	b113      	cbz	r3, bad1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bad16:	685a      	ldr	r2, [r3, #4]
   bad18:	3201      	adds	r2, #1
   bad1a:	605a      	str	r2, [r3, #4]
      }
   bad1c:	4770      	bx	lr

000bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bad1e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bad20:	f851 3b04 	ldr.w	r3, [r1], #4
   bad24:	4604      	mov	r4, r0
   bad26:	f840 3b04 	str.w	r3, [r0], #4
   bad2a:	f7ff fff1 	bl	bad10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bad2e:	6823      	ldr	r3, [r4, #0]
   bad30:	b90b      	cbnz	r3, bad36 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bad32:	f7ff fa15 	bl	ba160 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bad36:	4620      	mov	r0, r4
   bad38:	bd10      	pop	{r4, pc}

000bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bad3a:	b510      	push	{r4, lr}
   bad3c:	f851 3b04 	ldr.w	r3, [r1], #4
   bad40:	4604      	mov	r4, r0
   bad42:	f840 3b04 	str.w	r3, [r0], #4
   bad46:	f7ff ffe3 	bl	bad10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bad4a:	4620      	mov	r0, r4
   bad4c:	bd10      	pop	{r4, pc}

000bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bad4e:	b510      	push	{r4, lr}
   bad50:	f851 3b04 	ldr.w	r3, [r1], #4
   bad54:	4604      	mov	r4, r0
   bad56:	f840 3b04 	str.w	r3, [r0], #4
   bad5a:	f7ff ffd9 	bl	bad10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bad5e:	4620      	mov	r0, r4
   bad60:	bd10      	pop	{r4, pc}

000bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bad62:	b510      	push	{r4, lr}
   bad64:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bad66:	6800      	ldr	r0, [r0, #0]
   bad68:	b108      	cbz	r0, bad6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bad6a:	f7f9 fc43 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bad6e:	4620      	mov	r0, r4
   bad70:	bd10      	pop	{r4, pc}

000bad72 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   bad72:	b510      	push	{r4, lr}
   bad74:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bad76:	3004      	adds	r0, #4
   bad78:	f7ff fff3 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bad7c:	4620      	mov	r0, r4
   bad7e:	bd10      	pop	{r4, pc}

000bad80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bad80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bad82:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bad86:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bad88:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bad8c:	42ae      	cmp	r6, r5
   bad8e:	d004      	beq.n	bad9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bad90:	1d28      	adds	r0, r5, #4
   bad92:	f7ff ffe6 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad96:	3508      	adds	r5, #8
   bad98:	e7f8      	b.n	bad8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bad9a:	6820      	ldr	r0, [r4, #0]
   bad9c:	f7ff f900 	bl	b9fa0 <free>
}
   bada0:	4620      	mov	r0, r4
   bada2:	bd70      	pop	{r4, r5, r6, pc}

000bada4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bada4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bada6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   badaa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   badac:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   badb0:	42ae      	cmp	r6, r5
   badb2:	d004      	beq.n	badbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   badb4:	1d28      	adds	r0, r5, #4
   badb6:	f7ff ffd4 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   badba:	3508      	adds	r5, #8
   badbc:	e7f8      	b.n	badb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   badbe:	6820      	ldr	r0, [r4, #0]
   badc0:	f7ff f8ee 	bl	b9fa0 <free>
}
   badc4:	4620      	mov	r0, r4
   badc6:	bd70      	pop	{r4, r5, r6, pc}

000badc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   badc8:	b510      	push	{r4, lr}
   badca:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   badcc:	3024      	adds	r0, #36	; 0x24
   badce:	f7ff ffe9 	bl	bada4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   badd2:	f104 0018 	add.w	r0, r4, #24
   badd6:	f7ff ffd3 	bl	bad80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   badda:	bd10      	pop	{r4, pc}

000baddc <__tcf_0>:
    static BleLocalDevice instance;
   baddc:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   badde:	4b17      	ldr	r3, [pc, #92]	; (bae3c <__tcf_0+0x60>)
   bade0:	681c      	ldr	r4, [r3, #0]
   bade2:	b354      	cbz	r4, bae3a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bade4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bade8:	f7f9 fbc6 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   badec:	f104 0044 	add.w	r0, r4, #68	; 0x44
   badf0:	f7f9 fbc2 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   badf4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   badf8:	f7f9 fbbe 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   badfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bae00:	f7f9 fbba 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bae04:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bae08:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bae0c:	42ae      	cmp	r6, r5
   bae0e:	d004      	beq.n	bae1a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bae10:	1d28      	adds	r0, r5, #4
   bae12:	f7ff ffa6 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bae16:	3508      	adds	r5, #8
   bae18:	e7f8      	b.n	bae0c <__tcf_0+0x30>
    ::free(ptr);
   bae1a:	69a0      	ldr	r0, [r4, #24]
   bae1c:	f7ff f8c0 	bl	b9fa0 <free>
    ~BleLocalDeviceImpl() = default;
   bae20:	f104 000c 	add.w	r0, r4, #12
   bae24:	f7ff ffbe 	bl	bada4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bae28:	4620      	mov	r0, r4
   bae2a:	f7ff ffa9 	bl	bad80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bae2e:	4620      	mov	r0, r4
   bae30:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bae32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bae36:	f7f9 b932 	b.w	b409e <_ZdlPvj>
   bae3a:	bd70      	pop	{r4, r5, r6, pc}
   bae3c:	2003e65c 	.word	0x2003e65c

000bae40 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bae40:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bae42:	b510      	push	{r4, lr}
      if (_M_empty())
   bae44:	b90a      	cbnz	r2, bae4a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bae46:	f002 ff72 	bl	bdd2e <_ZSt25__throw_bad_function_callv>
    }
   bae4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bae4e:	68c3      	ldr	r3, [r0, #12]
   bae50:	4718      	bx	r3

000bae52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bae52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   bae56:	2300      	movs	r3, #0
   bae58:	e9c0 3300 	strd	r3, r3, [r0]
   bae5c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bae5e:	f8d1 8004 	ldr.w	r8, [r1, #4]
   bae62:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bae64:	4605      	mov	r5, r0
   bae66:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bae68:	dd4a      	ble.n	baf00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   bae6a:	ea4f 1008 	mov.w	r0, r8, lsl #4
   bae6e:	f7ff f88f 	bl	b9f90 <malloc>
            if (!d) {
   bae72:	4606      	mov	r6, r0
   bae74:	2800      	cmp	r0, #0
   bae76:	d043      	beq.n	baf00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   bae78:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   bae7c:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   bae7e:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   bae82:	d916      	bls.n	baeb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   bae84:	4550      	cmp	r0, sl
   bae86:	d215      	bcs.n	baeb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   bae88:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   bae8c:	f1a4 0910 	sub.w	r9, r4, #16
   bae90:	ebaa 0404 	sub.w	r4, sl, r4
   bae94:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   bae96:	45d1      	cmp	r9, sl
   bae98:	d01d      	beq.n	baed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   bae9a:	b11c      	cbz	r4, baea4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   bae9c:	4651      	mov	r1, sl
   bae9e:	4620      	mov	r0, r4
   baea0:	f002 fb2e 	bl	bd500 <_ZN6StringC1EOS_>
                end->~T();
   baea4:	4650      	mov	r0, sl
   baea6:	f002 faaf 	bl	bd408 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   baeaa:	f1aa 0a10 	sub.w	sl, sl, #16
   baeae:	3c10      	subs	r4, #16
   baeb0:	e7f1      	b.n	bae96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   baeb2:	d010      	beq.n	baed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   baeb4:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   baeb6:	45a2      	cmp	sl, r4
   baeb8:	d00d      	beq.n	baed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   baeba:	f1b9 0f00 	cmp.w	r9, #0
   baebe:	d003      	beq.n	baec8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   baec0:	4621      	mov	r1, r4
   baec2:	4648      	mov	r0, r9
   baec4:	f002 fb1c 	bl	bd500 <_ZN6StringC1EOS_>
                p->~T();
   baec8:	4620      	mov	r0, r4
   baeca:	f002 fa9d 	bl	bd408 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   baece:	3410      	adds	r4, #16
   baed0:	f109 0910 	add.w	r9, r9, #16
   baed4:	e7ef      	b.n	baeb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   baed6:	6828      	ldr	r0, [r5, #0]
   baed8:	f7ff f862 	bl	b9fa0 <free>
        capacity_ = n;
   baedc:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   baee0:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baee2:	e9d7 4300 	ldrd	r4, r3, [r7]
   baee6:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   baeea:	45a0      	cmp	r8, r4
   baeec:	d006      	beq.n	baefc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   baeee:	4621      	mov	r1, r4
   baef0:	4630      	mov	r0, r6
   baef2:	f002 fb1f 	bl	bd534 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   baef6:	3410      	adds	r4, #16
   baef8:	3610      	adds	r6, #16
   baefa:	e7f6      	b.n	baeea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   baefc:	687b      	ldr	r3, [r7, #4]
   baefe:	606b      	str	r3, [r5, #4]
}
   baf00:	4628      	mov	r0, r5
   baf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000baf06 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   baf06:	b530      	push	{r4, r5, lr}
   baf08:	b08d      	sub	sp, #52	; 0x34
   baf0a:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   baf0c:	f100 0138 	add.w	r1, r0, #56	; 0x38
   baf10:	a801      	add	r0, sp, #4
   baf12:	f7ff ff9e 	bl	bae52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   baf16:	9b02      	ldr	r3, [sp, #8]
   baf18:	2b00      	cmp	r3, #0
   baf1a:	dd2f      	ble.n	baf7c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   baf1c:	f104 0114 	add.w	r1, r4, #20
   baf20:	a804      	add	r0, sp, #16
   baf22:	f7ff fbb5 	bl	ba690 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   baf26:	f104 0108 	add.w	r1, r4, #8
   baf2a:	a808      	add	r0, sp, #32
   baf2c:	f7ff fbb0 	bl	ba690 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   baf30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   baf32:	9b06      	ldr	r3, [sp, #24]
   baf34:	4313      	orrs	r3, r2
   baf36:	d01f      	beq.n	baf78 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   baf38:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   baf3c:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   baf40:	42ac      	cmp	r4, r5
   baf42:	d019      	beq.n	baf78 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   baf44:	a904      	add	r1, sp, #16
   baf46:	4620      	mov	r0, r4
   baf48:	f002 fb4a 	bl	bd5e0 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   baf4c:	b160      	cbz	r0, baf68 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   baf4e:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   baf50:	a808      	add	r0, sp, #32
   baf52:	f002 fa59 	bl	bd408 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   baf56:	a804      	add	r0, sp, #16
   baf58:	f002 fa56 	bl	bd408 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   baf5c:	a801      	add	r0, sp, #4
   baf5e:	f7ff fe4d 	bl	babfc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   baf62:	4620      	mov	r0, r4
   baf64:	b00d      	add	sp, #52	; 0x34
   baf66:	bd30      	pop	{r4, r5, pc}
   baf68:	4620      	mov	r0, r4
   baf6a:	a908      	add	r1, sp, #32
   baf6c:	f002 fb38 	bl	bd5e0 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   baf70:	3410      	adds	r4, #16
   baf72:	2800      	cmp	r0, #0
   baf74:	d0e4      	beq.n	baf40 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   baf76:	e7ea      	b.n	baf4e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   baf78:	2400      	movs	r4, #0
   baf7a:	e7e9      	b.n	baf50 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   baf7c:	2401      	movs	r4, #1
   baf7e:	e7ed      	b.n	baf5c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000baf80 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   baf82:	2300      	movs	r3, #0
   baf84:	e9c0 3300 	strd	r3, r3, [r0]
   baf88:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf8a:	684f      	ldr	r7, [r1, #4]
   baf8c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf8e:	4605      	mov	r5, r0
   baf90:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf92:	dd3e      	ble.n	bb012 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   baf94:	00f8      	lsls	r0, r7, #3
   baf96:	f7fe fffb 	bl	b9f90 <malloc>
            if (!d) {
   baf9a:	4604      	mov	r4, r0
   baf9c:	b3c8      	cbz	r0, bb012 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   baf9e:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   bafa2:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   bafa4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   bafa8:	d910      	bls.n	bafcc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bafaa:	429c      	cmp	r4, r3
   bafac:	d20f      	bcs.n	bafce <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   bafae:	3b08      	subs	r3, #8
            dest += end - p - 1;
   bafb0:	1a1a      	subs	r2, r3, r0
   bafb2:	f1a0 0c08 	sub.w	ip, r0, #8
   bafb6:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   bafb8:	459c      	cmp	ip, r3
   bafba:	d018      	beq.n	bafee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   bafbc:	b11a      	cbz	r2, bafc6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   bafbe:	6819      	ldr	r1, [r3, #0]
   bafc0:	6011      	str	r1, [r2, #0]
   bafc2:	6859      	ldr	r1, [r3, #4]
   bafc4:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   bafc6:	3b08      	subs	r3, #8
   bafc8:	3a08      	subs	r2, #8
   bafca:	e7f5      	b.n	bafb8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   bafcc:	d00f      	beq.n	bafee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   bafce:	4601      	mov	r1, r0
   bafd0:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   bafd2:	428b      	cmp	r3, r1
   bafd4:	d00b      	beq.n	bafee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   bafd6:	b13a      	cbz	r2, bafe8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   bafd8:	f8d1 c000 	ldr.w	ip, [r1]
   bafdc:	f8c2 c000 	str.w	ip, [r2]
   bafe0:	f8d1 c004 	ldr.w	ip, [r1, #4]
   bafe4:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   bafe8:	3108      	adds	r1, #8
   bafea:	3208      	adds	r2, #8
   bafec:	e7f1      	b.n	bafd2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   bafee:	f7fe ffd7 	bl	b9fa0 <free>
        data_ = d;
   baff2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   baff4:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baff6:	e9d6 3100 	ldrd	r3, r1, [r6]
   baffa:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   baffe:	4298      	cmp	r0, r3
   bb000:	d006      	beq.n	bb010 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   bb002:	681a      	ldr	r2, [r3, #0]
   bb004:	6022      	str	r2, [r4, #0]
   bb006:	685a      	ldr	r2, [r3, #4]
   bb008:	6062      	str	r2, [r4, #4]
   bb00a:	3308      	adds	r3, #8
   bb00c:	3408      	adds	r4, #8
   bb00e:	e7f6      	b.n	baffe <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   bb010:	6069      	str	r1, [r5, #4]
}
   bb012:	4628      	mov	r0, r5
   bb014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb016 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb016:	b570      	push	{r4, r5, r6, lr}
   bb018:	4604      	mov	r4, r0
        capacity_(0) {
   bb01a:	2000      	movs	r0, #0
   bb01c:	e9c4 0000 	strd	r0, r0, [r4]
   bb020:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb022:	684e      	ldr	r6, [r1, #4]
   bb024:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb026:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb028:	dd12      	ble.n	bb050 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   bb02a:	0071      	lsls	r1, r6, #1
   bb02c:	f7fe ffc0 	bl	b9fb0 <realloc>
            if (!d) {
   bb030:	b170      	cbz	r0, bb050 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   bb032:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb034:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb036:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb03a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   bb03e:	429a      	cmp	r2, r3
   bb040:	d004      	beq.n	bb04c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   bb042:	f833 1b02 	ldrh.w	r1, [r3], #2
   bb046:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   bb04a:	e7f8      	b.n	bb03e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   bb04c:	686b      	ldr	r3, [r5, #4]
   bb04e:	6063      	str	r3, [r4, #4]
}
   bb050:	4620      	mov	r0, r4
   bb052:	bd70      	pop	{r4, r5, r6, pc}

000bb054 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   bb054:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bb056:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bb058:	4604      	mov	r4, r0
        if (!dismissed_) {
   bb05a:	b923      	cbnz	r3, bb066 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   bb05c:	6803      	ldr	r3, [r0, #0]
   bb05e:	6818      	ldr	r0, [r3, #0]
   bb060:	b108      	cbz	r0, bb066 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   bb062:	f7fe ff9d 	bl	b9fa0 <free>
            func_();
        }
    }
   bb066:	4620      	mov	r0, r4
   bb068:	bd10      	pop	{r4, pc}

000bb06a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   bb06a:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bb06c:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bb06e:	4604      	mov	r4, r0
        if (!dismissed_) {
   bb070:	b923      	cbnz	r3, bb07c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   bb072:	6803      	ldr	r3, [r0, #0]
   bb074:	6818      	ldr	r0, [r3, #0]
   bb076:	b108      	cbz	r0, bb07c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   bb078:	f7fe ff92 	bl	b9fa0 <free>
    }
   bb07c:	4620      	mov	r0, r4
   bb07e:	bd10      	pop	{r4, pc}

000bb080 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   bb080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   bb084:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   bb088:	b08f      	sub	sp, #60	; 0x3c
   bb08a:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   bb08c:	f1b8 0f00 	cmp.w	r8, #0
   bb090:	d072      	beq.n	bb178 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   bb092:	6f05      	ldr	r5, [r0, #112]	; 0x70
   bb094:	2d00      	cmp	r5, #0
   bb096:	d06f      	beq.n	bb178 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   bb098:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb09c:	231f      	movs	r3, #31
   bb09e:	2200      	movs	r2, #0
   bb0a0:	21ff      	movs	r1, #255	; 0xff
   bb0a2:	4648      	mov	r0, r9
   bb0a4:	f7ff fac1 	bl	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   bb0a8:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb0aa:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb0ac:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb0ae:	2200      	movs	r2, #0
   bb0b0:	4619      	mov	r1, r3
   bb0b2:	4638      	mov	r0, r7
   bb0b4:	f7ff fab9 	bl	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb0b8:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb0ba:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb0bc:	d006      	beq.n	bb0cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   bb0be:	42ae      	cmp	r6, r5
   bb0c0:	d030      	beq.n	bb124 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   bb0c2:	2400      	movs	r4, #0
    }
   bb0c4:	4620      	mov	r0, r4
   bb0c6:	b00f      	add	sp, #60	; 0x3c
   bb0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   bb0cc:	4620      	mov	r0, r4
   bb0ce:	f7fe ff5f 	bl	b9f90 <malloc>
            dismissed_(false) {
   bb0d2:	ab03      	add	r3, sp, #12
   bb0d4:	9304      	str	r3, [sp, #16]
   bb0d6:	2300      	movs	r3, #0
   bb0d8:	4604      	mov	r4, r0
   bb0da:	9003      	str	r0, [sp, #12]
   bb0dc:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   bb0e0:	b970      	cbnz	r0, bb100 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   bb0e2:	2320      	movs	r3, #32
   bb0e4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb0e8:	4b24      	ldr	r3, [pc, #144]	; (bb17c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb0ea:	9300      	str	r3, [sp, #0]
   bb0ec:	4924      	ldr	r1, [pc, #144]	; (bb180 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb0ee:	4603      	mov	r3, r0
   bb0f0:	aa06      	add	r2, sp, #24
   bb0f2:	2032      	movs	r0, #50	; 0x32
   bb0f4:	f7fe fe68 	bl	b9dc8 <log_message>
                    return false;
   bb0f8:	a804      	add	r0, sp, #16
   bb0fa:	f7ff ffab 	bl	bb054 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   bb0fe:	e7e1      	b.n	bb0c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   bb100:	4602      	mov	r2, r0
   bb102:	21ff      	movs	r1, #255	; 0xff
   bb104:	462b      	mov	r3, r5
   bb106:	4648      	mov	r0, r9
   bb108:	f7ff fa8f 	bl	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   bb10c:	9803      	ldr	r0, [sp, #12]
   bb10e:	462a      	mov	r2, r5
   bb110:	4641      	mov	r1, r8
   bb112:	f003 fca4 	bl	bea5e <memcmp>
   bb116:	b118      	cbz	r0, bb120 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   bb118:	a804      	add	r0, sp, #16
   bb11a:	f7ff ff9b 	bl	bb054 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   bb11e:	e7ce      	b.n	bb0be <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   bb120:	2401      	movs	r4, #1
   bb122:	e7e9      	b.n	bb0f8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   bb124:	4628      	mov	r0, r5
   bb126:	f7fe ff33 	bl	b9f90 <malloc>
   bb12a:	2400      	movs	r4, #0
   bb12c:	ab03      	add	r3, sp, #12
   bb12e:	4606      	mov	r6, r0
   bb130:	9003      	str	r0, [sp, #12]
   bb132:	9304      	str	r3, [sp, #16]
   bb134:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   bb138:	b978      	cbnz	r0, bb15a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   bb13a:	2320      	movs	r3, #32
   bb13c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb140:	4b0e      	ldr	r3, [pc, #56]	; (bb17c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb142:	9300      	str	r3, [sp, #0]
   bb144:	490e      	ldr	r1, [pc, #56]	; (bb180 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb146:	4603      	mov	r3, r0
   bb148:	aa06      	add	r2, sp, #24
   bb14a:	2032      	movs	r0, #50	; 0x32
   bb14c:	f7fe fe3c 	bl	b9dc8 <log_message>
                    return false;
   bb150:	4634      	mov	r4, r6
   bb152:	a804      	add	r0, sp, #16
   bb154:	f7ff ff89 	bl	bb06a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   bb158:	e7b4      	b.n	bb0c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   bb15a:	4602      	mov	r2, r0
   bb15c:	21ff      	movs	r1, #255	; 0xff
   bb15e:	462b      	mov	r3, r5
   bb160:	4638      	mov	r0, r7
   bb162:	f7ff fa62 	bl	ba62a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   bb166:	9803      	ldr	r0, [sp, #12]
   bb168:	462a      	mov	r2, r5
   bb16a:	4641      	mov	r1, r8
   bb16c:	f003 fc77 	bl	bea5e <memcmp>
   bb170:	2800      	cmp	r0, #0
   bb172:	d1ee      	bne.n	bb152 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   bb174:	2401      	movs	r4, #1
   bb176:	e7ec      	b.n	bb152 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   bb178:	2401      	movs	r4, #1
   bb17a:	e7a3      	b.n	bb0c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   bb17c:	000c1d34 	.word	0x000c1d34
   bb180:	000c1cb3 	.word	0x000c1cb3

000bb184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bb184:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb186:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb188:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb18a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb18c:	dd03      	ble.n	bb196 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bb18e:	f7fe ff0f 	bl	b9fb0 <realloc>
            if (!d) {
   bb192:	b918      	cbnz	r0, bb19c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bb194:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb196:	f7fe ff03 	bl	b9fa0 <free>
        T* d = nullptr;
   bb19a:	2000      	movs	r0, #0
        data_ = d;
   bb19c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb19e:	60a5      	str	r5, [r4, #8]
        return true;
   bb1a0:	2001      	movs	r0, #1
   bb1a2:	e7f7      	b.n	bb194 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bb1a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bb1a4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bb1a6:	6883      	ldr	r3, [r0, #8]
   bb1a8:	428b      	cmp	r3, r1
   bb1aa:	da02      	bge.n	bb1b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bb1ac:	f7ff ffea 	bl	bb184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bb1b0:	bd08      	pop	{r3, pc}
    return true;
   bb1b2:	2001      	movs	r0, #1
   bb1b4:	e7fc      	b.n	bb1b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bb1b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb1b6:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bb1b8:	2300      	movs	r3, #0
   bb1ba:	e9c0 3300 	strd	r3, r3, [r0]
   bb1be:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb1c0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb1c2:	6849      	ldr	r1, [r1, #4]
   bb1c4:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb1c6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb1c8:	dd10      	ble.n	bb1ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   bb1ca:	f7ff ffdb 	bl	bb184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb1ce:	b168      	cbz	r0, bb1ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb1d0:	e9d5 3100 	ldrd	r3, r1, [r5]
   bb1d4:	6822      	ldr	r2, [r4, #0]
   bb1d6:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   bb1d8:	4299      	cmp	r1, r3
   bb1da:	d005      	beq.n	bb1e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   bb1dc:	b10a      	cbz	r2, bb1e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   bb1de:	7818      	ldrb	r0, [r3, #0]
   bb1e0:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   bb1e2:	3301      	adds	r3, #1
   bb1e4:	3201      	adds	r2, #1
   bb1e6:	e7f7      	b.n	bb1d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   bb1e8:	686b      	ldr	r3, [r5, #4]
   bb1ea:	6063      	str	r3, [r4, #4]
}
   bb1ec:	4620      	mov	r0, r4
   bb1ee:	bd38      	pop	{r3, r4, r5, pc}

000bb1f0 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   bb1f0:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   bb1f2:	680b      	ldr	r3, [r1, #0]
   bb1f4:	6003      	str	r3, [r0, #0]
   bb1f6:	684b      	ldr	r3, [r1, #4]
   bb1f8:	6043      	str	r3, [r0, #4]
   bb1fa:	4604      	mov	r4, r0
   bb1fc:	460d      	mov	r5, r1
class BleAdvertisingData {
   bb1fe:	3008      	adds	r0, #8
   bb200:	3108      	adds	r1, #8
   bb202:	f7ff ffd8 	bl	bb1b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb206:	f105 0114 	add.w	r1, r5, #20
   bb20a:	f104 0014 	add.w	r0, r4, #20
   bb20e:	f7ff ffd2 	bl	bb1b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb212:	f895 3020 	ldrb.w	r3, [r5, #32]
   bb216:	f884 3020 	strb.w	r3, [r4, #32]
   bb21a:	4620      	mov	r0, r4
   bb21c:	bd38      	pop	{r3, r4, r5, pc}

000bb21e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   bb21e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb220:	4604      	mov	r4, r0
   bb222:	a801      	add	r0, sp, #4
   bb224:	f7ff ffc7 	bl	bb1b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   bb228:	9b01      	ldr	r3, [sp, #4]
   bb22a:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb22c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bb22e:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb230:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb232:	6062      	str	r2, [r4, #4]
   bb234:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb236:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb238:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb23a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb23c:	9001      	str	r0, [sp, #4]
   bb23e:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   bb240:	f7fe feae 	bl	b9fa0 <free>
   bb244:	b004      	add	sp, #16
   bb246:	bd10      	pop	{r4, pc}

000bb248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb24c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb24e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb250:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb252:	4419      	add	r1, r3
   bb254:	6883      	ldr	r3, [r0, #8]
   bb256:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb258:	4604      	mov	r4, r0
   bb25a:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb25c:	dc12      	bgt.n	bb284 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bb25e:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb260:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb262:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb264:	1bd2      	subs	r2, r2, r7
   bb266:	4631      	mov	r1, r6
   bb268:	1970      	adds	r0, r6, r5
   bb26a:	f003 fc16 	bl	bea9a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb26e:	462a      	mov	r2, r5
   bb270:	4641      	mov	r1, r8
   bb272:	4630      	mov	r0, r6
   bb274:	f003 fc03 	bl	bea7e <memcpy>
    size_ += n;
   bb278:	6863      	ldr	r3, [r4, #4]
   bb27a:	442b      	add	r3, r5
   bb27c:	6063      	str	r3, [r4, #4]
    return true;
   bb27e:	2001      	movs	r0, #1
}
   bb280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb284:	f7ff ff7e 	bl	bb184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb288:	2800      	cmp	r0, #0
   bb28a:	d1e8      	bne.n	bb25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bb28c:	e7f8      	b.n	bb280 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bb28e <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb28e:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   bb290:	460a      	mov	r2, r1
   bb292:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb294:	b510      	push	{r4, lr}
   bb296:	4604      	mov	r4, r0
    size_ = 0;
   bb298:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   bb29a:	b102      	cbz	r2, bb29e <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   bb29c:	b90b      	cbnz	r3, bb2a2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   bb29e:	2000      	movs	r0, #0
}
   bb2a0:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   bb2a2:	2bff      	cmp	r3, #255	; 0xff
   bb2a4:	bf28      	it	cs
   bb2a6:	23ff      	movcs	r3, #255	; 0xff
   bb2a8:	f7ff ffce 	bl	bb248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   bb2ac:	2800      	cmp	r0, #0
   bb2ae:	d0f7      	beq.n	bb2a0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   bb2b0:	6860      	ldr	r0, [r4, #4]
   bb2b2:	e7f5      	b.n	bb2a0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000bb2b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb2b6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb2b8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb2bc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb2be:	4604      	mov	r4, r0
   bb2c0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb2c2:	da0b      	bge.n	bb2dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bb2c4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb2c6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb2c8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb2ca:	1b52      	subs	r2, r2, r5
   bb2cc:	1c48      	adds	r0, r1, #1
   bb2ce:	f003 fbe4 	bl	bea9a <memmove>
    new(p) T(std::move(value));
   bb2d2:	557e      	strb	r6, [r7, r5]
    ++size_;
   bb2d4:	6863      	ldr	r3, [r4, #4]
   bb2d6:	3301      	adds	r3, #1
   bb2d8:	6063      	str	r3, [r4, #4]
}
   bb2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb2dc:	3101      	adds	r1, #1
   bb2de:	f7ff ff51 	bl	bb184 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb2e2:	2800      	cmp	r0, #0
   bb2e4:	d1ee      	bne.n	bb2c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bb2e6:	e7f8      	b.n	bb2da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bb2e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb2e8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bb2ea:	6841      	ldr	r1, [r0, #4]
   bb2ec:	f7ff bfe2 	b.w	bb2b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bb2f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb2f4:	4604      	mov	r4, r0
   bb2f6:	461d      	mov	r5, r3
   bb2f8:	460f      	mov	r7, r1
   bb2fa:	ab01      	add	r3, sp, #4
   bb2fc:	4690      	mov	r8, r2
   bb2fe:	460a      	mov	r2, r1
   bb300:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb304:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bb308:	f7fe ff14 	bl	ba134 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bb30c:	1cae      	adds	r6, r5, #2
   bb30e:	6863      	ldr	r3, [r4, #4]
   bb310:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bb312:	f1b9 0f00 	cmp.w	r9, #0
   bb316:	d126      	bne.n	bb366 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bb318:	b328      	cbz	r0, bb366 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb31a:	4433      	add	r3, r6
   bb31c:	1a1b      	subs	r3, r3, r0
   bb31e:	2bff      	cmp	r3, #255	; 0xff
   bb320:	d809      	bhi.n	bb336 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bb322:	9901      	ldr	r1, [sp, #4]
   bb324:	4620      	mov	r0, r4
   bb326:	f7ff fcc7 	bl	bacb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb32a:	6861      	ldr	r1, [r4, #4]
   bb32c:	4620      	mov	r0, r4
   bb32e:	4431      	add	r1, r6
   bb330:	f7ff ff38 	bl	bb1a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb334:	b918      	cbnz	r0, bb33e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bb336:	6860      	ldr	r0, [r4, #4]
}
   bb338:	b003      	add	sp, #12
   bb33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bb33e:	1c6a      	adds	r2, r5, #1
   bb340:	9901      	ldr	r1, [sp, #4]
   bb342:	b2d2      	uxtb	r2, r2
   bb344:	4620      	mov	r0, r4
   bb346:	f7ff ffb5 	bl	bb2b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bb34a:	9901      	ldr	r1, [sp, #4]
   bb34c:	463a      	mov	r2, r7
   bb34e:	3101      	adds	r1, #1
   bb350:	4620      	mov	r0, r4
   bb352:	f7ff ffaf 	bl	bb2b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bb356:	9901      	ldr	r1, [sp, #4]
   bb358:	462b      	mov	r3, r5
   bb35a:	4642      	mov	r2, r8
   bb35c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bb35e:	4620      	mov	r0, r4
   bb360:	f7ff ff72 	bl	bb248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bb364:	e7e7      	b.n	bb336 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb366:	18f1      	adds	r1, r6, r3
   bb368:	29ff      	cmp	r1, #255	; 0xff
   bb36a:	d8e4      	bhi.n	bb336 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb36c:	4620      	mov	r0, r4
   bb36e:	f7ff ff19 	bl	bb1a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb372:	2800      	cmp	r0, #0
   bb374:	d0df      	beq.n	bb336 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bb376:	1c69      	adds	r1, r5, #1
   bb378:	b2c9      	uxtb	r1, r1
   bb37a:	4620      	mov	r0, r4
   bb37c:	f7ff ffb4 	bl	bb2e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bb380:	4639      	mov	r1, r7
   bb382:	4620      	mov	r0, r4
   bb384:	f7ff ffb0 	bl	bb2e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bb388:	6861      	ldr	r1, [r4, #4]
   bb38a:	462b      	mov	r3, r5
   bb38c:	4642      	mov	r2, r8
   bb38e:	e7e6      	b.n	bb35e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bb390 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb390:	b430      	push	{r4, r5}
   bb392:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bb396:	b11a      	cbz	r2, bb3a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bb398:	9502      	str	r5, [sp, #8]
}
   bb39a:	bc30      	pop	{r4, r5}
   bb39c:	f7ff bfa8 	b.w	bb2f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bb3a0:	6840      	ldr	r0, [r0, #4]
}
   bb3a2:	bc30      	pop	{r4, r5}
   bb3a4:	4770      	bx	lr

000bb3a6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bb3a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bb3a8:	2300      	movs	r3, #0
   bb3aa:	e9c0 3300 	strd	r3, r3, [r0]
   bb3ae:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb3b0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb3b2:	9300      	str	r3, [sp, #0]
   bb3b4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb3b6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb3ba:	4619      	mov	r1, r3
   bb3bc:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bb3c0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb3c2:	f7ff ffe5 	bl	bb390 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bb3c6:	4620      	mov	r0, r4
   bb3c8:	b004      	add	sp, #16
   bb3ca:	bd10      	pop	{r4, pc}

000bb3cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb3cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb3d0:	4604      	mov	r4, r0
   bb3d2:	460d      	mov	r5, r1
   bb3d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb3d6:	d914      	bls.n	bb402 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb3d8:	4290      	cmp	r0, r2
   bb3da:	d213      	bcs.n	bb404 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb3dc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb3e0:	1a75      	subs	r5, r6, r1
   bb3e2:	f1a1 0708 	sub.w	r7, r1, #8
   bb3e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb3e8:	42b7      	cmp	r7, r6
   bb3ea:	d018      	beq.n	bb41e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb3ec:	b11c      	cbz	r4, bb3f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bb3ee:	4631      	mov	r1, r6
   bb3f0:	4620      	mov	r0, r4
   bb3f2:	f7ff fcac 	bl	bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb3f6:	1d30      	adds	r0, r6, #4
   bb3f8:	f7ff fcb3 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb3fc:	3e08      	subs	r6, #8
   bb3fe:	3c08      	subs	r4, #8
   bb400:	e7f2      	b.n	bb3e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb402:	d00c      	beq.n	bb41e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb404:	42b5      	cmp	r5, r6
   bb406:	d00a      	beq.n	bb41e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb408:	b11c      	cbz	r4, bb412 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb40a:	4629      	mov	r1, r5
   bb40c:	4620      	mov	r0, r4
   bb40e:	f7ff fc9e 	bl	bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb412:	1d28      	adds	r0, r5, #4
   bb414:	f7ff fca5 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb418:	3508      	adds	r5, #8
   bb41a:	3408      	adds	r4, #8
   bb41c:	e7f2      	b.n	bb404 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb420 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb422:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb424:	6846      	ldr	r6, [r0, #4]
   bb426:	4668      	mov	r0, sp
   bb428:	f7ff fc91 	bl	bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb42c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bb430:	429f      	cmp	r7, r3
   bb432:	db12      	blt.n	bb45a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bb434:	3701      	adds	r7, #1
        if (n > 0) {
   bb436:	2f00      	cmp	r7, #0
   bb438:	dd29      	ble.n	bb48e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bb43a:	00f8      	lsls	r0, r7, #3
   bb43c:	f7fe fda8 	bl	b9f90 <malloc>
            if (!d) {
   bb440:	4605      	mov	r5, r0
   bb442:	b1f0      	cbz	r0, bb482 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bb444:	e9d4 1200 	ldrd	r1, r2, [r4]
   bb448:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb44c:	f7ff ffbe 	bl	bb3cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb450:	6820      	ldr	r0, [r4, #0]
   bb452:	f7fe fda5 	bl	b9fa0 <free>
        data_ = d;
   bb456:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bb458:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bb45a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb45c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb45e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bb462:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb466:	4631      	mov	r1, r6
   bb468:	f106 0008 	add.w	r0, r6, #8
   bb46c:	f7ff ffae 	bl	bb3cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb470:	b11e      	cbz	r6, bb47a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bb472:	4669      	mov	r1, sp
   bb474:	4630      	mov	r0, r6
   bb476:	f7ff fc6a 	bl	bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bb47a:	6863      	ldr	r3, [r4, #4]
   bb47c:	3301      	adds	r3, #1
   bb47e:	6063      	str	r3, [r4, #4]
    return true;
   bb480:	2501      	movs	r5, #1
   bb482:	a801      	add	r0, sp, #4
   bb484:	f7ff fc6d 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb488:	4628      	mov	r0, r5
   bb48a:	b003      	add	sp, #12
   bb48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb48e:	2500      	movs	r5, #0
   bb490:	e7de      	b.n	bb450 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bb492 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bb494:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb498:	4605      	mov	r5, r0
   bb49a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bb49c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bb4a0:	42a6      	cmp	r6, r4
   bb4a2:	d005      	beq.n	bb4b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bb4a4:	4639      	mov	r1, r7
   bb4a6:	4620      	mov	r0, r4
   bb4a8:	f7ff fa9d 	bl	ba9e6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bb4ac:	b108      	cbz	r0, bb4b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bb4ae:	b914      	cbnz	r4, bb4b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bb4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bb4b2:	3408      	adds	r4, #8
   bb4b4:	e7f4      	b.n	bb4a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bb4b6:	1d20      	adds	r0, r4, #4
   bb4b8:	f7ff fc53 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bb4bc:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb4c0:	f104 0108 	add.w	r1, r4, #8
   bb4c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb4c8:	4620      	mov	r0, r4
   bb4ca:	f7ff ff7f 	bl	bb3cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bb4ce:	686b      	ldr	r3, [r5, #4]
   bb4d0:	3b01      	subs	r3, #1
   bb4d2:	606b      	str	r3, [r5, #4]
    return true;
   bb4d4:	e7ec      	b.n	bb4b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bb4d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb4dc:	4605      	mov	r5, r0
   bb4de:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bb4e0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb4e2:	460c      	mov	r4, r1
        WiringBleLock lk;
   bb4e4:	f7fe fef4 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bb4e8:	682e      	ldr	r6, [r5, #0]
   bb4ea:	1ef3      	subs	r3, r6, #3
   bb4ec:	2b0d      	cmp	r3, #13
   bb4ee:	d83c      	bhi.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb4f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb4f4:	0053000e 	.word	0x0053000e
   bb4f8:	00d1003b 	.word	0x00d1003b
   bb4fc:	003b003b 	.word	0x003b003b
   bb500:	003b003b 	.word	0x003b003b
   bb504:	009b003b 	.word	0x009b003b
   bb508:	009b009b 	.word	0x009b009b
   bb50c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bb510:	a804      	add	r0, sp, #16
   bb512:	f7ff fa0f 	bl	ba934 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bb516:	9b04      	ldr	r3, [sp, #16]
   bb518:	89aa      	ldrh	r2, [r5, #12]
   bb51a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bb51c:	6869      	ldr	r1, [r5, #4]
   bb51e:	9804      	ldr	r0, [sp, #16]
   bb520:	3108      	adds	r1, #8
   bb522:	3002      	adds	r0, #2
   bb524:	f7fe feee 	bl	ba304 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bb528:	a904      	add	r1, sp, #16
   bb52a:	a806      	add	r0, sp, #24
   bb52c:	f7ff fc0f 	bl	bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bb530:	a906      	add	r1, sp, #24
   bb532:	f104 0018 	add.w	r0, r4, #24
   bb536:	f7ff ff73 	bl	bb420 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb53a:	4605      	mov	r5, r0
   bb53c:	a807      	add	r0, sp, #28
   bb53e:	f7ff fc10 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb542:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bb544:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bb546:	b9b5      	cbnz	r5, bb576 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bb548:	4b5d      	ldr	r3, [pc, #372]	; (bb6c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bb54a:	495e      	ldr	r1, [pc, #376]	; (bb6c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb54c:	9300      	str	r3, [sp, #0]
   bb54e:	2032      	movs	r0, #50	; 0x32
   bb550:	462b      	mov	r3, r5
   bb552:	aa06      	add	r2, sp, #24
   bb554:	9507      	str	r5, [sp, #28]
   bb556:	f7fe fc37 	bl	b9dc8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bb55a:	9b04      	ldr	r3, [sp, #16]
   bb55c:	4629      	mov	r1, r5
   bb55e:	8818      	ldrh	r0, [r3, #0]
   bb560:	f7fe f9b0 	bl	b98c4 <hal_ble_gap_disconnect>
   bb564:	a805      	add	r0, sp, #20
   bb566:	f7ff fbfc 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bb56a:	a803      	add	r0, sp, #12
   bb56c:	f7fe febe 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bb570:	b00e      	add	sp, #56	; 0x38
   bb572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bb576:	4a54      	ldr	r2, [pc, #336]	; (bb6c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bb578:	9200      	str	r2, [sp, #0]
   bb57a:	2300      	movs	r3, #0
   bb57c:	4951      	ldr	r1, [pc, #324]	; (bb6c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb57e:	9307      	str	r3, [sp, #28]
   bb580:	aa06      	add	r2, sp, #24
   bb582:	2001      	movs	r0, #1
   bb584:	f7fe fc20 	bl	b9dc8 <log_message>
                if (impl->connectedCallback_) {
   bb588:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb58a:	2b00      	cmp	r3, #0
   bb58c:	d0ea      	beq.n	bb564 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bb58e:	a904      	add	r1, sp, #16
   bb590:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb594:	f7ff fc54 	bl	bae40 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bb598:	e7e4      	b.n	bb564 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb59a:	89a9      	ldrh	r1, [r5, #12]
   bb59c:	4620      	mov	r0, r4
   bb59e:	f7ff f8dc 	bl	ba75a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb5a2:	4606      	mov	r6, r0
   bb5a4:	2800      	cmp	r0, #0
   bb5a6:	d0e0      	beq.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bb5a8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bb5aa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bb5ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb5b2:	8029      	strh	r1, [r5, #0]
   bb5b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bb5b8:	429a      	cmp	r2, r3
   bb5ba:	d003      	beq.n	bb5c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bb5bc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb5c0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bb5c2:	e7f9      	b.n	bb5b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bb5c4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bb5c8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb5cc:	45b8      	cmp	r8, r7
   bb5ce:	d004      	beq.n	bb5da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bb5d0:	1d38      	adds	r0, r7, #4
   bb5d2:	f7ff fbc6 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb5d6:	3708      	adds	r7, #8
   bb5d8:	e7f8      	b.n	bb5cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bb5da:	2300      	movs	r3, #0
   bb5dc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bb5de:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bb5e2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb5e6:	45b8      	cmp	r8, r7
   bb5e8:	d004      	beq.n	bb5f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bb5ea:	1d38      	adds	r0, r7, #4
   bb5ec:	f7ff fbb9 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb5f0:	3708      	adds	r7, #8
   bb5f2:	e7f8      	b.n	bb5e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bb5f4:	2300      	movs	r3, #0
   bb5f6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bb5f8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bb5fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bb5fc:	b123      	cbz	r3, bb608 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bb5fe:	4631      	mov	r1, r6
   bb600:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb604:	f7ff fc1c 	bl	bae40 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bb608:	2300      	movs	r3, #0
   bb60a:	2220      	movs	r2, #32
   bb60c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bb610:	4a2e      	ldr	r2, [pc, #184]	; (bb6cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bb612:	9200      	str	r2, [sp, #0]
   bb614:	492b      	ldr	r1, [pc, #172]	; (bb6c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb616:	aa06      	add	r2, sp, #24
   bb618:	2001      	movs	r0, #1
   bb61a:	f7fe fbd5 	bl	b9dc8 <log_message>
                    impl->peers_.removeOne(*peer);
   bb61e:	4631      	mov	r1, r6
   bb620:	f104 0018 	add.w	r0, r4, #24
   bb624:	f7ff ff35 	bl	bb492 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bb628:	e79f      	b.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb62a:	89a9      	ldrh	r1, [r5, #12]
   bb62c:	4620      	mov	r0, r4
   bb62e:	f7ff f894 	bl	ba75a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb632:	2800      	cmp	r0, #0
   bb634:	d099      	beq.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bb636:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bb638:	2b00      	cmp	r3, #0
   bb63a:	d096      	beq.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bb63c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb63e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bb640:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb644:	d001      	beq.n	bb64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bb646:	2e10      	cmp	r6, #16
   bb648:	d117      	bne.n	bb67a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bb64a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bb64c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bb64e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bb650:	2506      	movs	r5, #6
                        };
   bb652:	f88d 3015 	strb.w	r3, [sp, #21]
   bb656:	9104      	str	r1, [sp, #16]
   bb658:	f88d 2014 	strb.w	r2, [sp, #20]
   bb65c:	9006      	str	r0, [sp, #24]
   bb65e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bb662:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bb664:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bb668:	9508      	str	r5, [sp, #32]
   bb66a:	e883 0003 	stmia.w	r3, {r0, r1}
   bb66e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb670:	a906      	add	r1, sp, #24
   bb672:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb676:	4798      	blx	r3
   bb678:	e777      	b.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bb67a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb67c:	bf01      	itttt	eq
   bb67e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bb680:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb682:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bb686:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bb688:	bf0f      	iteee	eq
   bb68a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bb68e:	461a      	movne	r2, r3
   bb690:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bb692:	461d      	movne	r5, r3
   bb694:	e7dd      	b.n	bb652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb696:	89a9      	ldrh	r1, [r5, #12]
   bb698:	4620      	mov	r0, r4
   bb69a:	f7ff f85e 	bl	ba75a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bb69e:	4601      	mov	r1, r0
   bb6a0:	2800      	cmp	r0, #0
   bb6a2:	f43f af62 	beq.w	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb6a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb6a8:	2b00      	cmp	r3, #0
   bb6aa:	f43f af5e 	beq.w	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bb6ae:	686b      	ldr	r3, [r5, #4]
   bb6b0:	9306      	str	r3, [sp, #24]
   bb6b2:	aa06      	add	r2, sp, #24
   bb6b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb6b6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb6ba:	4798      	blx	r3
   bb6bc:	e755      	b.n	bb56a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb6be:	bf00      	nop
   bb6c0:	000c1d4f 	.word	0x000c1d4f
   bb6c4:	000c1cb3 	.word	0x000c1cb3
   bb6c8:	000c1d75 	.word	0x000c1d75
   bb6cc:	000c1d92 	.word	0x000c1d92

000bb6d0 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   bb6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb6d4:	4607      	mov	r7, r0
   bb6d6:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   bb6d8:	4668      	mov	r0, sp
   bb6da:	f7fe fdf9 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bb6de:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb6e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   bb6e4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   bb6e8:	42ac      	cmp	r4, r5
   bb6ea:	d035      	beq.n	bb758 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   bb6ec:	2224      	movs	r2, #36	; 0x24
   bb6ee:	2100      	movs	r1, #0
   bb6f0:	a801      	add	r0, sp, #4
   bb6f2:	f003 f9ec 	bl	beace <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   bb6f6:	6823      	ldr	r3, [r4, #0]
   bb6f8:	2200      	movs	r2, #0
   bb6fa:	8818      	ldrh	r0, [r3, #0]
   bb6fc:	a901      	add	r1, sp, #4
   bb6fe:	f7fe f931 	bl	b9964 <hal_ble_gap_get_connection_info>
   bb702:	4606      	mov	r6, r0
   bb704:	b108      	cbz	r0, bb70a <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   bb706:	3408      	adds	r4, #8
   bb708:	e7ee      	b.n	bb6e8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   bb70a:	f89d 8008 	ldrb.w	r8, [sp, #8]
   bb70e:	f1b8 0f01 	cmp.w	r8, #1
   bb712:	d1f8      	bne.n	bb706 <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   bb714:	f8df 9048 	ldr.w	r9, [pc, #72]	; bb760 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   bb718:	f8d9 0000 	ldr.w	r0, [r9]
   bb71c:	f7fe f994 	bl	b9a48 <os_mutex_recursive_unlock>
        locked_ = false;
   bb720:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   bb724:	6823      	ldr	r3, [r4, #0]
   bb726:	4631      	mov	r1, r6
   bb728:	8818      	ldrh	r0, [r3, #0]
   bb72a:	f7fe f8cb 	bl	b98c4 <hal_ble_gap_disconnect>
   bb72e:	1e05      	subs	r5, r0, #0
   bb730:	db0b      	blt.n	bb74a <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb732:	f8d9 0000 	ldr.w	r0, [r9]
   bb736:	f7fe f97f 	bl	b9a38 <os_mutex_recursive_lock>
        return peers_;
   bb73a:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   bb73c:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   bb740:	4621      	mov	r1, r4
   bb742:	3018      	adds	r0, #24
   bb744:	f7ff fea5 	bl	bb492 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   bb748:	4635      	mov	r5, r6
    WiringBleLock lk;
   bb74a:	4668      	mov	r0, sp
   bb74c:	f7fe fdce 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   bb750:	4628      	mov	r0, r5
   bb752:	b00b      	add	sp, #44	; 0x2c
   bb754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   bb758:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   bb75c:	e7f5      	b.n	bb74a <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   bb75e:	bf00      	nop
   bb760:	2003e658 	.word	0x2003e658

000bb764 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb764:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb766:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb768:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb76a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb76c:	dd05      	ble.n	bb77a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   bb76e:	2114      	movs	r1, #20
   bb770:	4369      	muls	r1, r5
   bb772:	f7fe fc1d 	bl	b9fb0 <realloc>
            if (!d) {
   bb776:	b918      	cbnz	r0, bb780 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   bb778:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb77a:	f7fe fc11 	bl	b9fa0 <free>
        T* d = nullptr;
   bb77e:	2000      	movs	r0, #0
        data_ = d;
   bb780:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb782:	60a5      	str	r5, [r4, #8]
        return true;
   bb784:	2001      	movs	r0, #1
   bb786:	e7f7      	b.n	bb778 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bb788 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bb78c:	2400      	movs	r4, #0
   bb78e:	e9c0 4400 	strd	r4, r4, [r0]
   bb792:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb794:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb796:	6849      	ldr	r1, [r1, #4]
   bb798:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb79a:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb79c:	dd1a      	ble.n	bb7d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bb79e:	f7ff ffe1 	bl	bb764 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb7a2:	b1b8      	cbz	r0, bb7d4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb7a4:	e9d8 9300 	ldrd	r9, r3, [r8]
   bb7a8:	f04f 0c14 	mov.w	ip, #20
   bb7ac:	f8d7 e000 	ldr.w	lr, [r7]
   bb7b0:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bb7b4:	eb09 0504 	add.w	r5, r9, r4
   bb7b8:	45ac      	cmp	ip, r5
   bb7ba:	d008      	beq.n	bb7ce <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bb7bc:	eb1e 0604 	adds.w	r6, lr, r4
   bb7c0:	bf1f      	itttt	ne
   bb7c2:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bb7c4:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bb7c6:	682b      	ldrne	r3, [r5, #0]
   bb7c8:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bb7ca:	3414      	adds	r4, #20
   bb7cc:	e7f2      	b.n	bb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bb7ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb7d2:	607b      	str	r3, [r7, #4]
}
   bb7d4:	4638      	mov	r0, r7
   bb7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bb7da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb7da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bb7de:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bb7e2:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb7e4:	6883      	ldr	r3, [r0, #8]
   bb7e6:	19e9      	adds	r1, r5, r7
   bb7e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb7ea:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb7ec:	dc17      	bgt.n	bb81e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bb7ee:	2314      	movs	r3, #20
   bb7f0:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bb7f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb7f4:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bb7f6:	fb03 f907 	mul.w	r9, r3, r7
   bb7fa:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb7fc:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb7fe:	1b52      	subs	r2, r2, r5
   bb800:	4631      	mov	r1, r6
   bb802:	eb06 0009 	add.w	r0, r6, r9
   bb806:	f003 f948 	bl	bea9a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb80a:	464a      	mov	r2, r9
   bb80c:	4641      	mov	r1, r8
   bb80e:	4630      	mov	r0, r6
   bb810:	f003 f935 	bl	bea7e <memcpy>
    size_ += n;
   bb814:	6863      	ldr	r3, [r4, #4]
   bb816:	443b      	add	r3, r7
   bb818:	6063      	str	r3, [r4, #4]
}
   bb81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb81e:	f7ff ffa1 	bl	bb764 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb822:	2800      	cmp	r0, #0
   bb824:	d1e3      	bne.n	bb7ee <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bb826:	e7f8      	b.n	bb81a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bb828 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb828:	b082      	sub	sp, #8
   bb82a:	b570      	push	{r4, r5, r6, lr}
   bb82c:	460c      	mov	r4, r1
   bb82e:	a904      	add	r1, sp, #16
   bb830:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb834:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb838:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb83a:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb83c:	da17      	bge.n	bb86e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bb83e:	2314      	movs	r3, #20
   bb840:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bb844:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bb846:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bb848:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb84a:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb84c:	1a52      	subs	r2, r2, r1
   bb84e:	18e0      	adds	r0, r4, r3
   bb850:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bb852:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb854:	f003 f921 	bl	bea9a <memmove>
    new(p) T(std::move(value));
   bb858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bb85a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb85c:	6833      	ldr	r3, [r6, #0]
   bb85e:	6023      	str	r3, [r4, #0]
    ++size_;
   bb860:	686b      	ldr	r3, [r5, #4]
   bb862:	3301      	adds	r3, #1
   bb864:	606b      	str	r3, [r5, #4]
}
   bb866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb86a:	b002      	add	sp, #8
   bb86c:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb86e:	3101      	adds	r1, #1
   bb870:	f7ff ff78 	bl	bb764 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb874:	2800      	cmp	r0, #0
   bb876:	d1e2      	bne.n	bb83e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bb878:	e7f5      	b.n	bb866 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bb87a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb87a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bb87e:	2400      	movs	r4, #0
   bb880:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb882:	1e93      	subs	r3, r2, #2
   bb884:	e9c0 4400 	strd	r4, r4, [r0]
   bb888:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb88a:	4605      	mov	r5, r0
   bb88c:	460f      	mov	r7, r1
   bb88e:	4690      	mov	r8, r2
   bb890:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb892:	9305      	str	r3, [sp, #20]
    return size_;
   bb894:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb896:	428c      	cmp	r4, r1
   bb898:	da72      	bge.n	bb980 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bb89a:	6838      	ldr	r0, [r7, #0]
   bb89c:	ab07      	add	r3, sp, #28
   bb89e:	4642      	mov	r2, r8
   bb8a0:	1b09      	subs	r1, r1, r4
   bb8a2:	4420      	add	r0, r4
   bb8a4:	f7fe fc46 	bl	ba134 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bb8a8:	4606      	mov	r6, r0
   bb8aa:	2800      	cmp	r0, #0
   bb8ac:	d068      	beq.n	bb980 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb8ae:	9b05      	ldr	r3, [sp, #20]
   bb8b0:	2b01      	cmp	r3, #1
   bb8b2:	d82f      	bhi.n	bb914 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb8b4:	f1a0 0b02 	sub.w	fp, r0, #2
   bb8b8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bb8bc:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bb8c0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb8c4:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb8c6:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb8c8:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb8ca:	d055      	beq.n	bb978 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bb8cc:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb8ce:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bb8d2:	4413      	add	r3, r2
   bb8d4:	a808      	add	r0, sp, #32
   bb8d6:	78d9      	ldrb	r1, [r3, #3]
   bb8d8:	789b      	ldrb	r3, [r3, #2]
   bb8da:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bb8de:	f7fe fd8e 	bl	ba3fe <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bb8e2:	f10d 0e20 	add.w	lr, sp, #32
   bb8e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb8ea:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb8ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb8f2:	f8de 3000 	ldr.w	r3, [lr]
   bb8f6:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb8fa:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb8fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb902:	ab0d      	add	r3, sp, #52	; 0x34
   bb904:	cb0c      	ldmia	r3, {r2, r3}
   bb906:	6869      	ldr	r1, [r5, #4]
   bb908:	4628      	mov	r0, r5
   bb90a:	f7ff ff8d 	bl	bb828 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb90e:	f109 0901 	add.w	r9, r9, #1
   bb912:	e7d7      	b.n	bb8c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bb914:	f1a8 0306 	sub.w	r3, r8, #6
   bb918:	2b01      	cmp	r3, #1
   bb91a:	d82d      	bhi.n	bb978 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb91c:	f1a0 0b02 	sub.w	fp, r0, #2
   bb920:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bb924:	f04f 0900 	mov.w	r9, #0
   bb928:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bb92c:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb92e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb930:	d022      	beq.n	bb978 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb932:	3302      	adds	r3, #2
    return data_[i];
   bb934:	6839      	ldr	r1, [r7, #0]
   bb936:	4423      	add	r3, r4
   bb938:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bb93c:	2201      	movs	r2, #1
   bb93e:	4419      	add	r1, r3
   bb940:	a808      	add	r0, sp, #32
   bb942:	f7fe fd3d 	bl	ba3c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bb946:	f10d 0e20 	add.w	lr, sp, #32
   bb94a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb94e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb952:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb956:	f8de 3000 	ldr.w	r3, [lr]
   bb95a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb95e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb962:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb966:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bb96a:	6869      	ldr	r1, [r5, #4]
   bb96c:	4628      	mov	r0, r5
   bb96e:	f7ff ff5b 	bl	bb828 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb972:	f109 0901 	add.w	r9, r9, #1
   bb976:	e7d9      	b.n	bb92c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb978:	9b07      	ldr	r3, [sp, #28]
   bb97a:	441c      	add	r4, r3
   bb97c:	4434      	add	r4, r6
   bb97e:	e789      	b.n	bb894 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bb980:	4628      	mov	r0, r5
   bb982:	b013      	add	sp, #76	; 0x4c
   bb984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb988 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb988:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bb98a:	2300      	movs	r3, #0
   bb98c:	b085      	sub	sp, #20
   bb98e:	e9c0 3300 	strd	r3, r3, [r0]
   bb992:	6083      	str	r3, [r0, #8]
   bb994:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb996:	2202      	movs	r2, #2
   bb998:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb99a:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb99c:	f7ff ff6d 	bl	bb87a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb9a0:	a901      	add	r1, sp, #4
   bb9a2:	4620      	mov	r0, r4
   bb9a4:	f7ff ff19 	bl	bb7da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb9a8:	a801      	add	r0, sp, #4
   bb9aa:	f7ff f939 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb9ae:	2202      	movs	r2, #2
   bb9b0:	4629      	mov	r1, r5
   bb9b2:	a801      	add	r0, sp, #4
   bb9b4:	f7ff ff61 	bl	bb87a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb9b8:	a901      	add	r1, sp, #4
   bb9ba:	4620      	mov	r0, r4
   bb9bc:	f7ff ff0d 	bl	bb7da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb9c0:	a801      	add	r0, sp, #4
   bb9c2:	f7ff f92d 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb9c6:	2203      	movs	r2, #3
   bb9c8:	4629      	mov	r1, r5
   bb9ca:	a801      	add	r0, sp, #4
   bb9cc:	f7ff ff55 	bl	bb87a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb9d0:	a901      	add	r1, sp, #4
   bb9d2:	4620      	mov	r0, r4
   bb9d4:	f7ff ff01 	bl	bb7da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb9d8:	a801      	add	r0, sp, #4
   bb9da:	f7ff f921 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb9de:	2206      	movs	r2, #6
   bb9e0:	4629      	mov	r1, r5
   bb9e2:	a801      	add	r0, sp, #4
   bb9e4:	f7ff ff49 	bl	bb87a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb9e8:	a901      	add	r1, sp, #4
   bb9ea:	4620      	mov	r0, r4
   bb9ec:	f7ff fef5 	bl	bb7da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb9f0:	a801      	add	r0, sp, #4
   bb9f2:	f7ff f915 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb9f6:	2207      	movs	r2, #7
   bb9f8:	4629      	mov	r1, r5
   bb9fa:	a801      	add	r0, sp, #4
   bb9fc:	f7ff ff3d 	bl	bb87a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bba00:	a901      	add	r1, sp, #4
   bba02:	4620      	mov	r0, r4
   bba04:	f7ff fee9 	bl	bb7da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bba08:	a801      	add	r0, sp, #4
   bba0a:	f7ff f909 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bba0e:	4620      	mov	r0, r4
   bba10:	b005      	add	sp, #20
   bba12:	bd30      	pop	{r4, r5, pc}

000bba14 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bba14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bba18:	b085      	sub	sp, #20
   bba1a:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bba1c:	4601      	mov	r1, r0
   bba1e:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bba20:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bba22:	f7ff ffb1 	bl	bb988 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bba26:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bba28:	9b02      	ldr	r3, [sp, #8]
   bba2a:	f04f 0e14 	mov.w	lr, #20
   bba2e:	fb0e 6c03 	mla	ip, lr, r3, r6
   bba32:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bba34:	45b4      	cmp	ip, r6
   bba36:	d00d      	beq.n	bba54 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bba38:	45b9      	cmp	r9, r7
   bba3a:	f106 0614 	add.w	r6, r6, #20
   bba3e:	d009      	beq.n	bba54 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bba40:	f1a6 0514 	sub.w	r5, r6, #20
   bba44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bba46:	fb0e 8407 	mla	r4, lr, r7, r8
   bba4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bba4c:	682b      	ldr	r3, [r5, #0]
   bba4e:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bba50:	3701      	adds	r7, #1
   bba52:	e7ef      	b.n	bba34 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bba54:	a801      	add	r0, sp, #4
   bba56:	f7ff f8e3 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bba5a:	4638      	mov	r0, r7
   bba5c:	b005      	add	sp, #20
   bba5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bba62 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bba62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bba66:	b08b      	sub	sp, #44	; 0x2c
   bba68:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bba6a:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bba6e:	a801      	add	r0, sp, #4
   bba70:	f7ff fe8a 	bl	bb788 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bba74:	9b02      	ldr	r3, [sp, #8]
   bba76:	2b00      	cmp	r3, #0
   bba78:	dd4a      	ble.n	bbb10 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bba7a:	f104 0114 	add.w	r1, r4, #20
   bba7e:	a804      	add	r0, sp, #16
   bba80:	f7ff ff82 	bl	bb988 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bba84:	f104 0108 	add.w	r1, r4, #8
   bba88:	a807      	add	r0, sp, #28
   bba8a:	f7ff ff7d 	bl	bb988 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bba8e:	9d05      	ldr	r5, [sp, #20]
   bba90:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bba92:	2d00      	cmp	r5, #0
   bba94:	dc01      	bgt.n	bba9a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bba96:	2e00      	cmp	r6, #0
   bba98:	dd38      	ble.n	bbb0c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bba9a:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bba9c:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bba9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bbaa2:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bbaa6:	2314      	movs	r3, #20
   bbaa8:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bbaac:	fb03 8505 	mla	r5, r3, r5, r8
   bbab0:	fb03 9606 	mla	r6, r3, r6, r9
   bbab4:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bbab6:	45ba      	cmp	sl, r7
   bbab8:	d028      	beq.n	bbb0c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bbaba:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bbabc:	45ab      	cmp	fp, r5
   bbabe:	d015      	beq.n	bbaec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bbac0:	4659      	mov	r1, fp
   bbac2:	4650      	mov	r0, sl
   bbac4:	f7fe fca5 	bl	ba412 <_ZNK8particle7BleUuideqERKS0_>
   bbac8:	f10b 0b14 	add.w	fp, fp, #20
   bbacc:	4604      	mov	r4, r0
   bbace:	2800      	cmp	r0, #0
   bbad0:	d0f4      	beq.n	bbabc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bbad2:	a807      	add	r0, sp, #28
   bbad4:	f7ff f8a4 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bbad8:	a804      	add	r0, sp, #16
   bbada:	f7ff f8a1 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bbade:	a801      	add	r0, sp, #4
   bbae0:	f7ff f89e 	bl	bac20 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bbae4:	4620      	mov	r0, r4
   bbae6:	b00b      	add	sp, #44	; 0x2c
   bbae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbaec:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bbaee:	45b3      	cmp	fp, r6
   bbaf0:	d009      	beq.n	bbb06 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bbaf2:	4659      	mov	r1, fp
   bbaf4:	4650      	mov	r0, sl
   bbaf6:	f7fe fc8c 	bl	ba412 <_ZNK8particle7BleUuideqERKS0_>
   bbafa:	f10b 0b14 	add.w	fp, fp, #20
   bbafe:	4604      	mov	r4, r0
   bbb00:	2800      	cmp	r0, #0
   bbb02:	d0f4      	beq.n	bbaee <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bbb04:	e7e5      	b.n	bbad2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bbb06:	f10a 0a14 	add.w	sl, sl, #20
   bbb0a:	e7d4      	b.n	bbab6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bbb0c:	2400      	movs	r4, #0
   bbb0e:	e7e0      	b.n	bbad2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bbb10:	2401      	movs	r4, #1
   bbb12:	e7e4      	b.n	bbade <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bbb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bbb14:	b513      	push	{r0, r1, r4, lr}
   bbb16:	460b      	mov	r3, r1
   bbb18:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbb1a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bbb1e:	466c      	mov	r4, sp
   bbb20:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bbb24:	e893 0003 	ldmia.w	r3, {r0, r1}
   bbb28:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bbb2c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bbb30:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bbb34:	b002      	add	sp, #8
   bbb36:	bd10      	pop	{r4, pc}

000bbb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bbb38:	b538      	push	{r3, r4, r5, lr}
   bbb3a:	4605      	mov	r5, r0
   bbb3c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bbb3e:	f7ff ffe9 	bl	bbb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbb42:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bbb44:	68a2      	ldr	r2, [r4, #8]
   bbb46:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbb48:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbb4a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bbb4c:	68e2      	ldr	r2, [r4, #12]
   bbb4e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbb50:	60e3      	str	r3, [r4, #12]
      }
   bbb52:	bd38      	pop	{r3, r4, r5, pc}

000bbb54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bbb54:	b530      	push	{r4, r5, lr}
   bbb56:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bbb58:	2300      	movs	r3, #0
   bbb5a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bbb5c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bbb5e:	4605      	mov	r5, r0
   bbb60:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bbb62:	b133      	cbz	r3, bbb72 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbb64:	2202      	movs	r2, #2
   bbb66:	4668      	mov	r0, sp
   bbb68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbb6a:	68e3      	ldr	r3, [r4, #12]
   bbb6c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bbb6e:	68a3      	ldr	r3, [r4, #8]
   bbb70:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bbb72:	4629      	mov	r1, r5
   bbb74:	4668      	mov	r0, sp
   bbb76:	f7ff ffdf 	bl	bbb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbb7a:	4668      	mov	r0, sp
   bbb7c:	f7f8 fcfc 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
      }
   bbb80:	b005      	add	sp, #20
   bbb82:	bd30      	pop	{r4, r5, pc}

000bbb84 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbb84:	b538      	push	{r3, r4, r5, lr}
   bbb86:	460d      	mov	r5, r1
      { return _M_ptr; }
   bbb88:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bbb8a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbb8c:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bbb8e:	b123      	cbz	r3, bbb9a <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bbb90:	6828      	ldr	r0, [r5, #0]
   bbb92:	314c      	adds	r1, #76	; 0x4c
   bbb94:	304c      	adds	r0, #76	; 0x4c
   bbb96:	f7ff ffdd 	bl	bbb54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbb9a:	4620      	mov	r0, r4
   bbb9c:	682b      	ldr	r3, [r5, #0]
   bbb9e:	f840 3b04 	str.w	r3, [r0], #4
   bbba2:	6869      	ldr	r1, [r5, #4]
   bbba4:	f7fe fb6e 	bl	ba284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bbba8:	4620      	mov	r0, r4
   bbbaa:	bd38      	pop	{r3, r4, r5, pc}

000bbbac <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbbac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbbb0:	4604      	mov	r4, r0
   bbbb2:	b087      	sub	sp, #28
    WiringBleLock lk;
   bbbb4:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbbb6:	460e      	mov	r6, r1
   bbbb8:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbbba:	f7fe fb89 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bbbbe:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbbc0:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bbbc4:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bbbc8:	4544      	cmp	r4, r8
   bbbca:	46a1      	mov	r9, r4
   bbbcc:	d016      	beq.n	bbbfc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bbbce:	4621      	mov	r1, r4
   bbbd0:	a801      	add	r0, sp, #4
   bbbd2:	f7fe fded 	bl	ba7b0 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bbbd6:	4639      	mov	r1, r7
   bbbd8:	a801      	add	r0, sp, #4
   bbbda:	f7fe fc1a 	bl	ba412 <_ZNK8particle7BleUuideqERKS0_>
   bbbde:	3408      	adds	r4, #8
   bbbe0:	4605      	mov	r5, r0
   bbbe2:	2800      	cmp	r0, #0
   bbbe4:	d0f0      	beq.n	bbbc8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bbbe6:	4649      	mov	r1, r9
   bbbe8:	4630      	mov	r0, r6
   bbbea:	f7ff ffcb 	bl	bbb84 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bbbee:	4668      	mov	r0, sp
   bbbf0:	f7fe fb7c 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbbf4:	4628      	mov	r0, r5
   bbbf6:	b007      	add	sp, #28
   bbbf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bbbfc:	2500      	movs	r5, #0
   bbbfe:	e7f6      	b.n	bbbee <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bbc00 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bbc00:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bbc02:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bbc04:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bbc06:	344c      	adds	r4, #76	; 0x4c
   bbc08:	b1b9      	cbz	r1, bbc3a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bbc0a:	e9cd 1200 	strd	r1, r2, [sp]
   bbc0e:	a802      	add	r0, sp, #8
   bbc10:	4669      	mov	r1, sp
   bbc12:	f7ff f865 	bl	bace0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bbc16:	2300      	movs	r3, #0
	__x.swap(*this);
   bbc18:	a906      	add	r1, sp, #24
   bbc1a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bbc1c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bbc1e:	f7ff ff8b 	bl	bbb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bbc22:	4621      	mov	r1, r4
   bbc24:	a806      	add	r0, sp, #24
   bbc26:	f7ff ff87 	bl	bbb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbc2a:	a806      	add	r0, sp, #24
   bbc2c:	f7f8 fca4 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bbc30:	a802      	add	r0, sp, #8
   bbc32:	f7f8 fca1 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
}
   bbc36:	b00a      	add	sp, #40	; 0x28
   bbc38:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bbc3a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bbc3c:	e7eb      	b.n	bbc16 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bbc3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbc3e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc42:	4604      	mov	r4, r0
   bbc44:	460d      	mov	r5, r1
   bbc46:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbc48:	d914      	bls.n	bbc74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbc4a:	4290      	cmp	r0, r2
   bbc4c:	d213      	bcs.n	bbc76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbc4e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bbc52:	1a75      	subs	r5, r6, r1
   bbc54:	f1a1 0708 	sub.w	r7, r1, #8
   bbc58:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbc5a:	42b7      	cmp	r7, r6
   bbc5c:	d018      	beq.n	bbc90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbc5e:	b11c      	cbz	r4, bbc68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbc60:	4631      	mov	r1, r6
   bbc62:	4620      	mov	r0, r4
   bbc64:	f7ff f869 	bl	bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bbc68:	1d30      	adds	r0, r6, #4
   bbc6a:	f7ff f87a 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bbc6e:	3e08      	subs	r6, #8
   bbc70:	3c08      	subs	r4, #8
   bbc72:	e7f2      	b.n	bbc5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbc74:	d00c      	beq.n	bbc90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbc76:	42b5      	cmp	r5, r6
   bbc78:	d00a      	beq.n	bbc90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbc7a:	b11c      	cbz	r4, bbc84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbc7c:	4629      	mov	r1, r5
   bbc7e:	4620      	mov	r0, r4
   bbc80:	f7ff f85b 	bl	bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bbc84:	1d28      	adds	r0, r5, #4
   bbc86:	f7ff f86c 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bbc8a:	3508      	adds	r5, #8
   bbc8c:	3408      	adds	r4, #8
   bbc8e:	e7f2      	b.n	bbc76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbc92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbc92:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bbc94:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbc96:	4605      	mov	r5, r0
        if (n > 0) {
   bbc98:	dd11      	ble.n	bbcbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bbc9a:	00f0      	lsls	r0, r6, #3
   bbc9c:	f7fe f978 	bl	b9f90 <malloc>
            if (!d) {
   bbca0:	4604      	mov	r4, r0
   bbca2:	b158      	cbz	r0, bbcbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bbca4:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbca8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bbcac:	f7ff ffc7 	bl	bbc3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbcb0:	6828      	ldr	r0, [r5, #0]
   bbcb2:	f7fe f975 	bl	b9fa0 <free>
        data_ = d;
   bbcb6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbcb8:	60ae      	str	r6, [r5, #8]
        return true;
   bbcba:	2001      	movs	r0, #1
    }
   bbcbc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bbcbe:	2400      	movs	r4, #0
   bbcc0:	e7f6      	b.n	bbcb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bbcc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bbcc6:	2300      	movs	r3, #0
   bbcc8:	e9c0 3300 	strd	r3, r3, [r0]
   bbccc:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbcce:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbcd0:	6849      	ldr	r1, [r1, #4]
   bbcd2:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbcd4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbcd6:	dd13      	ble.n	bbd00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bbcd8:	f7ff ffdb 	bl	bbc92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbcdc:	b180      	cbz	r0, bbd00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbcde:	e9d5 6300 	ldrd	r6, r3, [r5]
   bbce2:	6827      	ldr	r7, [r4, #0]
   bbce4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bbce8:	45b0      	cmp	r8, r6
   bbcea:	d007      	beq.n	bbcfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bbcec:	b11f      	cbz	r7, bbcf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bbcee:	4631      	mov	r1, r6
   bbcf0:	4638      	mov	r0, r7
   bbcf2:	f7ff f822 	bl	bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bbcf6:	3608      	adds	r6, #8
   bbcf8:	3708      	adds	r7, #8
   bbcfa:	e7f5      	b.n	bbce8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bbcfc:	686b      	ldr	r3, [r5, #4]
   bbcfe:	6063      	str	r3, [r4, #4]
}
   bbd00:	4620      	mov	r0, r4
   bbd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbd06 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bbd06:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbd08:	460d      	mov	r5, r1
   bbd0a:	4604      	mov	r4, r0
    WiringBleLock lk;
   bbd0c:	a801      	add	r0, sp, #4
   bbd0e:	f7fe fadf 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bbd12:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bbd14:	4620      	mov	r0, r4
   bbd16:	310c      	adds	r1, #12
   bbd18:	f7ff ffd3 	bl	bbcc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bbd1c:	a801      	add	r0, sp, #4
   bbd1e:	f7fe fae5 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbd22:	4620      	mov	r0, r4
   bbd24:	b003      	add	sp, #12
   bbd26:	bd30      	pop	{r4, r5, pc}

000bbd28 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bbd28:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bbd2a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bbd2c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bbd2e:	4605      	mov	r5, r0
   bbd30:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bbd32:	b933      	cbnz	r3, bbd42 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bbd34:	4608      	mov	r0, r1
   bbd36:	f7fe fa5f 	bl	ba1f8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bbd3a:	b910      	cbnz	r0, bbd42 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bbd3c:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bbd3e:	2201      	movs	r2, #1
   bbd40:	729a      	strb	r2, [r3, #10]
    return services();
   bbd42:	4628      	mov	r0, r5
   bbd44:	4621      	mov	r1, r4
   bbd46:	f7ff ffde 	bl	bbd06 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bbd4a:	4628      	mov	r0, r5
   bbd4c:	bd38      	pop	{r3, r4, r5, pc}

000bbd4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bbd4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbd50:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bbd52:	6845      	ldr	r5, [r0, #4]
   bbd54:	4668      	mov	r0, sp
   bbd56:	f7fe fff0 	bl	bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbd5a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbd5e:	4299      	cmp	r1, r3
   bbd60:	da10      	bge.n	bbd84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bbd62:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbd64:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbd66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bbd6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bbd6e:	4629      	mov	r1, r5
   bbd70:	f105 0008 	add.w	r0, r5, #8
   bbd74:	f7ff ff63 	bl	bbc3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbd78:	b98d      	cbnz	r5, bbd9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bbd7a:	6863      	ldr	r3, [r4, #4]
   bbd7c:	3301      	adds	r3, #1
   bbd7e:	6063      	str	r3, [r4, #4]
    return true;
   bbd80:	2601      	movs	r6, #1
   bbd82:	e006      	b.n	bbd92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbd84:	3101      	adds	r1, #1
   bbd86:	4620      	mov	r0, r4
   bbd88:	f7ff ff83 	bl	bbc92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbd8c:	4606      	mov	r6, r0
   bbd8e:	2800      	cmp	r0, #0
   bbd90:	d1e7      	bne.n	bbd62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bbd92:	a801      	add	r0, sp, #4
   bbd94:	f7fe ffe5 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbd98:	4630      	mov	r0, r6
   bbd9a:	b002      	add	sp, #8
   bbd9c:	bd70      	pop	{r4, r5, r6, pc}
   bbd9e:	4669      	mov	r1, sp
   bbda0:	4628      	mov	r0, r5
   bbda2:	f7fe ffca 	bl	bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bbda6:	e7e8      	b.n	bbd7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bbda8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bbda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bbdac:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bbe68 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bbdb0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bbe6c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bbdb4:	b093      	sub	sp, #76	; 0x4c
   bbdb6:	4605      	mov	r5, r0
   bbdb8:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bbdba:	2700      	movs	r7, #0
   bbdbc:	682b      	ldr	r3, [r5, #0]
   bbdbe:	42bb      	cmp	r3, r7
   bbdc0:	d94e      	bls.n	bbe60 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bbdc2:	a803      	add	r0, sp, #12
   bbdc4:	f7fe fd9a 	bl	ba8fc <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbdc8:	261c      	movs	r6, #28
   bbdca:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bbdcc:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bbdce:	437e      	muls	r6, r7
   bbdd0:	4432      	add	r2, r6
   bbdd2:	f10d 0c14 	add.w	ip, sp, #20
   bbdd6:	1d13      	adds	r3, r2, #4
   bbdd8:	46e3      	mov	fp, ip
   bbdda:	3214      	adds	r2, #20
   bbddc:	6818      	ldr	r0, [r3, #0]
   bbdde:	6859      	ldr	r1, [r3, #4]
   bbde0:	46e6      	mov	lr, ip
   bbde2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bbde6:	3308      	adds	r3, #8
   bbde8:	4293      	cmp	r3, r2
   bbdea:	46f4      	mov	ip, lr
   bbdec:	d1f6      	bne.n	bbddc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bbdee:	6818      	ldr	r0, [r3, #0]
   bbdf0:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bbdf4:	4659      	mov	r1, fp
   bbdf6:	a80a      	add	r0, sp, #40	; 0x28
   bbdf8:	f7fe fac0 	bl	ba37c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bbdfc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bbe00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbe04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbe06:	f8dc 3000 	ldr.w	r3, [ip]
   bbe0a:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bbe0c:	686b      	ldr	r3, [r5, #4]
   bbe0e:	9a03      	ldr	r2, [sp, #12]
   bbe10:	4433      	add	r3, r6
   bbe12:	a903      	add	r1, sp, #12
   bbe14:	8b1b      	ldrh	r3, [r3, #24]
   bbe16:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bbe18:	686b      	ldr	r3, [r5, #4]
   bbe1a:	4433      	add	r3, r6
   bbe1c:	8b5b      	ldrh	r3, [r3, #26]
   bbe1e:	82d3      	strh	r3, [r2, #22]
        return services_;
   bbe20:	f8d8 0000 	ldr.w	r0, [r8]
   bbe24:	f100 040c 	add.w	r4, r0, #12
   bbe28:	a80a      	add	r0, sp, #40	; 0x28
   bbe2a:	f7fe ff86 	bl	bad3a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bbe2e:	4620      	mov	r0, r4
   bbe30:	a90a      	add	r1, sp, #40	; 0x28
   bbe32:	f7ff ff8c 	bl	bbd4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bbe36:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bbe38:	a80b      	add	r0, sp, #44	; 0x2c
   bbe3a:	f7fe ff92 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbe3e:	b954      	cbnz	r4, bbe56 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bbe40:	2320      	movs	r3, #32
   bbe42:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bbe46:	f8cd 9000 	str.w	r9, [sp]
   bbe4a:	4623      	mov	r3, r4
   bbe4c:	aa0a      	add	r2, sp, #40	; 0x28
   bbe4e:	4651      	mov	r1, sl
   bbe50:	2032      	movs	r0, #50	; 0x32
   bbe52:	f7fd ffb9 	bl	b9dc8 <log_message>
   bbe56:	a804      	add	r0, sp, #16
   bbe58:	f7fe ff83 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bbe5c:	3701      	adds	r7, #1
   bbe5e:	e7ad      	b.n	bbdbc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bbe60:	b013      	add	sp, #76	; 0x4c
   bbe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe66:	bf00      	nop
   bbe68:	000c1db1 	.word	0x000c1db1
   bbe6c:	000c1cb3 	.word	0x000c1cb3

000bbe70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbe70:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbe72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbe74:	4604      	mov	r4, r0
   bbe76:	460d      	mov	r5, r1
   bbe78:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbe7a:	d914      	bls.n	bbea6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbe7c:	4290      	cmp	r0, r2
   bbe7e:	d213      	bcs.n	bbea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbe80:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bbe84:	1a75      	subs	r5, r6, r1
   bbe86:	f1a1 0708 	sub.w	r7, r1, #8
   bbe8a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbe8c:	42b7      	cmp	r7, r6
   bbe8e:	d018      	beq.n	bbec2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbe90:	b11c      	cbz	r4, bbe9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbe92:	4631      	mov	r1, r6
   bbe94:	4620      	mov	r0, r4
   bbe96:	f7fe ff42 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbe9a:	1d30      	adds	r0, r6, #4
   bbe9c:	f7fe ff61 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bbea0:	3e08      	subs	r6, #8
   bbea2:	3c08      	subs	r4, #8
   bbea4:	e7f2      	b.n	bbe8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbea6:	d00c      	beq.n	bbec2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbea8:	42b5      	cmp	r5, r6
   bbeaa:	d00a      	beq.n	bbec2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbeac:	b11c      	cbz	r4, bbeb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbeae:	4629      	mov	r1, r5
   bbeb0:	4620      	mov	r0, r4
   bbeb2:	f7fe ff34 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbeb6:	1d28      	adds	r0, r5, #4
   bbeb8:	f7fe ff53 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bbebc:	3508      	adds	r5, #8
   bbebe:	3408      	adds	r4, #8
   bbec0:	e7f2      	b.n	bbea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbec4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbec4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bbec6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbec8:	4605      	mov	r5, r0
        if (n > 0) {
   bbeca:	dd11      	ble.n	bbef0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bbecc:	00f0      	lsls	r0, r6, #3
   bbece:	f7fe f85f 	bl	b9f90 <malloc>
            if (!d) {
   bbed2:	4604      	mov	r4, r0
   bbed4:	b158      	cbz	r0, bbeee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bbed6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbeda:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bbede:	f7ff ffc7 	bl	bbe70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbee2:	6828      	ldr	r0, [r5, #0]
   bbee4:	f7fe f85c 	bl	b9fa0 <free>
        data_ = d;
   bbee8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbeea:	60ae      	str	r6, [r5, #8]
        return true;
   bbeec:	2001      	movs	r0, #1
    }
   bbeee:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bbef0:	2400      	movs	r4, #0
   bbef2:	e7f6      	b.n	bbee2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bbef4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bbef8:	2300      	movs	r3, #0
   bbefa:	e9c0 3300 	strd	r3, r3, [r0]
   bbefe:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbf00:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbf02:	6849      	ldr	r1, [r1, #4]
   bbf04:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbf06:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbf08:	dd13      	ble.n	bbf32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bbf0a:	f7ff ffdb 	bl	bbec4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbf0e:	b180      	cbz	r0, bbf32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbf10:	e9d5 6300 	ldrd	r6, r3, [r5]
   bbf14:	6827      	ldr	r7, [r4, #0]
   bbf16:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bbf1a:	45b0      	cmp	r8, r6
   bbf1c:	d007      	beq.n	bbf2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bbf1e:	b11f      	cbz	r7, bbf28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bbf20:	4631      	mov	r1, r6
   bbf22:	4638      	mov	r0, r7
   bbf24:	f7fe fefb 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bbf28:	3608      	adds	r6, #8
   bbf2a:	3708      	adds	r7, #8
   bbf2c:	e7f5      	b.n	bbf1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bbf2e:	686b      	ldr	r3, [r5, #4]
   bbf30:	6063      	str	r3, [r4, #4]
}
   bbf32:	4620      	mov	r0, r4
   bbf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbf38 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bbf38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbf3a:	460d      	mov	r5, r1
   bbf3c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bbf3e:	a801      	add	r0, sp, #4
   bbf40:	f7fe f9c6 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bbf44:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bbf46:	4620      	mov	r0, r4
   bbf48:	3118      	adds	r1, #24
   bbf4a:	f7ff ffd3 	bl	bbef4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bbf4e:	a801      	add	r0, sp, #4
   bbf50:	f7fe f9cc 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbf54:	4620      	mov	r0, r4
   bbf56:	b003      	add	sp, #12
   bbf58:	bd30      	pop	{r4, r5, pc}

000bbf5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bbf5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbf5c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bbf5e:	6845      	ldr	r5, [r0, #4]
   bbf60:	4668      	mov	r0, sp
   bbf62:	f7fe fedc 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbf66:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbf6a:	4299      	cmp	r1, r3
   bbf6c:	da10      	bge.n	bbf90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bbf6e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbf70:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbf72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bbf76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bbf7a:	4629      	mov	r1, r5
   bbf7c:	f105 0008 	add.w	r0, r5, #8
   bbf80:	f7ff ff76 	bl	bbe70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbf84:	b98d      	cbnz	r5, bbfaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bbf86:	6863      	ldr	r3, [r4, #4]
   bbf88:	3301      	adds	r3, #1
   bbf8a:	6063      	str	r3, [r4, #4]
    return true;
   bbf8c:	2601      	movs	r6, #1
   bbf8e:	e006      	b.n	bbf9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbf90:	3101      	adds	r1, #1
   bbf92:	4620      	mov	r0, r4
   bbf94:	f7ff ff96 	bl	bbec4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbf98:	4606      	mov	r6, r0
   bbf9a:	2800      	cmp	r0, #0
   bbf9c:	d1e7      	bne.n	bbf6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bbf9e:	a801      	add	r0, sp, #4
   bbfa0:	f7fe fedf 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbfa4:	4630      	mov	r0, r6
   bbfa6:	b002      	add	sp, #8
   bbfa8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bbfaa:	4669      	mov	r1, sp
   bbfac:	4628      	mov	r0, r5
   bbfae:	f7fe feb6 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbfb2:	e7e8      	b.n	bbf86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bbfb4 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bbfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbfb6:	b085      	sub	sp, #20
   bbfb8:	4605      	mov	r5, r0
    WiringBleLock lk;
   bbfba:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bbfbc:	460c      	mov	r4, r1
   bbfbe:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbfc0:	f7fe f986 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bbfc4:	2300      	movs	r3, #0
   bbfc6:	e9c5 3300 	strd	r3, r3, [r5]
   bbfca:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bbfcc:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbfce:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bbfd2:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bbfd6:	42b4      	cmp	r4, r6
   bbfd8:	d011      	beq.n	bbffe <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bbfda:	6838      	ldr	r0, [r7, #0]
   bbfdc:	4621      	mov	r1, r4
   bbfde:	f7fe fba7 	bl	ba730 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bbfe2:	b150      	cbz	r0, bbffa <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bbfe4:	4621      	mov	r1, r4
   bbfe6:	a802      	add	r0, sp, #8
   bbfe8:	f7fe fe99 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbfec:	a902      	add	r1, sp, #8
   bbfee:	4628      	mov	r0, r5
   bbff0:	f7ff ffb3 	bl	bbf5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bbff4:	a803      	add	r0, sp, #12
   bbff6:	f7fe feb4 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bbffa:	3408      	adds	r4, #8
   bbffc:	e7eb      	b.n	bbfd6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bbffe:	a801      	add	r0, sp, #4
   bc000:	f7fe f974 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc004:	4628      	mov	r0, r5
   bc006:	b005      	add	sp, #20
   bc008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc00c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bc00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bc010:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc012:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bc014:	b091      	sub	sp, #68	; 0x44
   bc016:	4606      	mov	r6, r0
   bc018:	460f      	mov	r7, r1
   bc01a:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bc01c:	b933      	cbnz	r3, bc02c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bc01e:	e9c0 3300 	strd	r3, r3, [r0]
   bc022:	6083      	str	r3, [r0, #8]
}
   bc024:	4630      	mov	r0, r6
   bc026:	b011      	add	sp, #68	; 0x44
   bc028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bc02c:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bc02e:	7e0d      	ldrb	r5, [r1, #24]
   bc030:	2d00      	cmp	r5, #0
   bc032:	d158      	bne.n	bc0e6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bc034:	2320      	movs	r3, #32
   bc036:	462a      	mov	r2, r5
   bc038:	a803      	add	r0, sp, #12
   bc03a:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bc03e:	f7fe fae4 	bl	ba60a <_ZNK8particle7BleUuid8toStringEb>
   bc042:	9b03      	ldr	r3, [sp, #12]
   bc044:	9301      	str	r3, [sp, #4]
   bc046:	4b2b      	ldr	r3, [pc, #172]	; (bc0f4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bc048:	492b      	ldr	r1, [pc, #172]	; (bc0f8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bc04a:	9300      	str	r3, [sp, #0]
   bc04c:	aa08      	add	r2, sp, #32
   bc04e:	462b      	mov	r3, r5
   bc050:	2001      	movs	r0, #1
   bc052:	f7fd feb9 	bl	b9dc8 <log_message>
   bc056:	a803      	add	r0, sp, #12
   bc058:	f001 f9d6 	bl	bd408 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bc05c:	231c      	movs	r3, #28
   bc05e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bc062:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bc066:	8a9a      	ldrh	r2, [r3, #20]
   bc068:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bc06c:	8adb      	ldrh	r3, [r3, #22]
   bc06e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bc072:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bc074:	4a21      	ldr	r2, [pc, #132]	; (bc0fc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bc076:	8818      	ldrh	r0, [r3, #0]
   bc078:	9500      	str	r5, [sp, #0]
   bc07a:	a908      	add	r1, sp, #32
   bc07c:	f7fd fc40 	bl	b9900 <hal_ble_gatt_client_discover_characteristics>
   bc080:	2800      	cmp	r0, #0
   bc082:	db30      	blt.n	bc0e6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bc084:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bc086:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bc08a:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bc08e:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc090:	f1a4 0308 	sub.w	r3, r4, #8
   bc094:	4599      	cmp	r9, r3
   bc096:	d022      	beq.n	bc0de <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bc098:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc09c:	89db      	ldrh	r3, [r3, #14]
   bc09e:	2b00      	cmp	r3, #0
   bc0a0:	d0f5      	beq.n	bc08e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bc0a2:	2210      	movs	r2, #16
   bc0a4:	2100      	movs	r1, #0
   bc0a6:	eb0d 0002 	add.w	r0, sp, r2
   bc0aa:	9503      	str	r5, [sp, #12]
   bc0ac:	f002 fd0f 	bl	beace <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bc0b0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc0b4:	89d9      	ldrh	r1, [r3, #14]
   bc0b6:	683b      	ldr	r3, [r7, #0]
   bc0b8:	aa03      	add	r2, sp, #12
   bc0ba:	8818      	ldrh	r0, [r3, #0]
   bc0bc:	9500      	str	r5, [sp, #0]
   bc0be:	2313      	movs	r3, #19
   bc0c0:	f7fd fc3c 	bl	b993c <hal_ble_gatt_client_read>
                if (len > 0) {
   bc0c4:	2800      	cmp	r0, #0
   bc0c6:	d0e2      	beq.n	bc08e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bc0c8:	ab10      	add	r3, sp, #64	; 0x40
   bc0ca:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bc0cc:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bc0ce:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bc0d2:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bc0d6:	303c      	adds	r0, #60	; 0x3c
   bc0d8:	f001 fa37 	bl	bd54a <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc0dc:	e7d7      	b.n	bc08e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bc0de:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bc0e2:	2201      	movs	r2, #1
   bc0e4:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bc0e6:	4642      	mov	r2, r8
   bc0e8:	4639      	mov	r1, r7
   bc0ea:	4630      	mov	r0, r6
   bc0ec:	f7ff ff62 	bl	bbfb4 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bc0f0:	e798      	b.n	bc024 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bc0f2:	bf00      	nop
   bc0f4:	000c1dd6 	.word	0x000c1dd6
   bc0f8:	000c1cb3 	.word	0x000c1cb3
   bc0fc:	000bc2a5 	.word	0x000bc2a5

000bc100 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc100:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bc102:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc104:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc106:	b085      	sub	sp, #20
   bc108:	4606      	mov	r6, r0
   bc10a:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bc10c:	b92b      	cbnz	r3, bc11a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bc10e:	a801      	add	r0, sp, #4
   bc110:	f7ff fe0a 	bl	bbd28 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bc114:	a801      	add	r0, sp, #4
   bc116:	f7fe fe33 	bl	bad80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bc11a:	682b      	ldr	r3, [r5, #0]
   bc11c:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bc120:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bc124:	42bc      	cmp	r4, r7
   bc126:	d009      	beq.n	bc13c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bc128:	4622      	mov	r2, r4
   bc12a:	4629      	mov	r1, r5
   bc12c:	a801      	add	r0, sp, #4
   bc12e:	f7ff ff6d 	bl	bc00c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bc132:	a801      	add	r0, sp, #4
   bc134:	f7fe fe36 	bl	bada4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bc138:	3408      	adds	r4, #8
   bc13a:	e7f3      	b.n	bc124 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bc13c:	4630      	mov	r0, r6
   bc13e:	4629      	mov	r1, r5
   bc140:	f7ff fefa 	bl	bbf38 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bc144:	4630      	mov	r0, r6
   bc146:	b005      	add	sp, #20
   bc148:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc14c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc150:	4605      	mov	r5, r0
   bc152:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bc154:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bc156:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc158:	460f      	mov	r7, r1
    return address_;
   bc15a:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc15c:	4698      	mov	r8, r3
    return address_;
   bc15e:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bc160:	4b41      	ldr	r3, [pc, #260]	; (bc268 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bc162:	9304      	str	r3, [sp, #16]
    return address_;
   bc164:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bc166:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bc168:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bc16c:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bc170:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bc174:	f7fe fc8e 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bc178:	4b3c      	ldr	r3, [pc, #240]	; (bc26c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bc17a:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc17c:	f7fe fc8a 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc180:	6829      	ldr	r1, [r5, #0]
   bc182:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc184:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc186:	464a      	mov	r2, r9
   bc188:	a804      	add	r0, sp, #16
   bc18a:	f7fd fbe1 	bl	b9950 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bc18e:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bc190:	4604      	mov	r4, r0
   bc192:	b138      	cbz	r0, bc1a4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bc194:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc196:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc19a:	801a      	strh	r2, [r3, #0]
}
   bc19c:	4620      	mov	r0, r4
   bc19e:	b013      	add	sp, #76	; 0x4c
   bc1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bc1a4:	4639      	mov	r1, r7
   bc1a6:	4628      	mov	r0, r5
   bc1a8:	f7fe fbf8 	bl	ba99c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bc1ac:	a803      	add	r0, sp, #12
   bc1ae:	f7fe f88f 	bl	ba2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc1b2:	f7fe fc6f 	bl	baa94 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bc1b6:	6807      	ldr	r7, [r0, #0]
   bc1b8:	4629      	mov	r1, r5
   bc1ba:	3718      	adds	r7, #24
   bc1bc:	4630      	mov	r0, r6
   bc1be:	f7fe fdc6 	bl	bad4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc1c2:	4631      	mov	r1, r6
   bc1c4:	4638      	mov	r0, r7
   bc1c6:	f7ff f92b 	bl	bb420 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bc1ca:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bc1cc:	a80b      	add	r0, sp, #44	; 0x2c
   bc1ce:	f7fe fdc8 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc1d2:	f04f 0920 	mov.w	r9, #32
   bc1d6:	bb1f      	cbnz	r7, bc220 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bc1d8:	4632      	mov	r2, r6
   bc1da:	4b25      	ldr	r3, [pc, #148]	; (bc270 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc1dc:	4e25      	ldr	r6, [pc, #148]	; (bc274 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bc1de:	4926      	ldr	r1, [pc, #152]	; (bc278 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc1e0:	9300      	str	r3, [sp, #0]
   bc1e2:	2032      	movs	r0, #50	; 0x32
   bc1e4:	4623      	mov	r3, r4
   bc1e6:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc1ea:	f7fd fded 	bl	b9dc8 <log_message>
   bc1ee:	6830      	ldr	r0, [r6, #0]
   bc1f0:	f7fd fc2a 	bl	b9a48 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc1f4:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bc1f6:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc1fa:	4621      	mov	r1, r4
   bc1fc:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc1fe:	4c1f      	ldr	r4, [pc, #124]	; (bc27c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc200:	f7fd fb60 	bl	b98c4 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bc204:	6830      	ldr	r0, [r6, #0]
   bc206:	f7fd fc17 	bl	b9a38 <os_mutex_recursive_lock>
        locked_ = true;
   bc20a:	2301      	movs	r3, #1
   bc20c:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bc210:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc212:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc216:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc218:	a803      	add	r0, sp, #12
   bc21a:	f7fe f867 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
   bc21e:	e7bd      	b.n	bc19c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bc220:	a803      	add	r0, sp, #12
   bc222:	f7fe f863 	bl	ba2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bc226:	4b16      	ldr	r3, [pc, #88]	; (bc280 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bc228:	9300      	str	r3, [sp, #0]
   bc22a:	4913      	ldr	r1, [pc, #76]	; (bc278 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc22c:	4623      	mov	r3, r4
   bc22e:	4632      	mov	r2, r6
   bc230:	2001      	movs	r0, #1
   bc232:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc236:	f7fd fdc7 	bl	b9dc8 <log_message>
    if (automatic) {
   bc23a:	f1b8 0f00 	cmp.w	r8, #0
   bc23e:	d0ad      	beq.n	bc19c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc240:	4629      	mov	r1, r5
   bc242:	4630      	mov	r0, r6
   bc244:	f7ff ff5c 	bl	bc100 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bc248:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bc24c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bc250:	42bd      	cmp	r5, r7
   bc252:	d005      	beq.n	bc260 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bc254:	4628      	mov	r0, r5
   bc256:	2101      	movs	r1, #1
   bc258:	f7fe fb16 	bl	ba888 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bc25c:	3508      	adds	r5, #8
   bc25e:	e7f7      	b.n	bc250 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc260:	4630      	mov	r0, r6
   bc262:	f7fe fd9f 	bl	bada4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bc266:	e799      	b.n	bc19c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bc268:	00180003 	.word	0x00180003
   bc26c:	000bb4d9 	.word	0x000bb4d9
   bc270:	000c1e08 	.word	0x000c1e08
   bc274:	2003e658 	.word	0x2003e658
   bc278:	000c1cb3 	.word	0x000c1cb3
   bc27c:	fffffefc 	.word	0xfffffefc
   bc280:	000c1e24 	.word	0x000c1e24

000bc284 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bc284:	b513      	push	{r0, r1, r4, lr}
   bc286:	4604      	mov	r4, r0
   bc288:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bc28c:	f7fe fb52 	bl	ba934 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bc290:	9b00      	ldr	r3, [sp, #0]
   bc292:	9901      	ldr	r1, [sp, #4]
   bc294:	2200      	movs	r2, #0
   bc296:	4620      	mov	r0, r4
   bc298:	f7ff ff58 	bl	bc14c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bc29c:	4620      	mov	r0, r4
   bc29e:	b002      	add	sp, #8
   bc2a0:	bd10      	pop	{r4, pc}
	...

000bc2a4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bc2a8:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc2aa:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bc2ac:	2600      	movs	r6, #0
   bc2ae:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bc2b2:	4b66      	ldr	r3, [pc, #408]	; (bc44c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bc2b4:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc2b6:	4605      	mov	r5, r0
   bc2b8:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bc2ba:	4633      	mov	r3, r6
   bc2bc:	4964      	ldr	r1, [pc, #400]	; (bc450 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc2be:	f8df 9194 	ldr.w	r9, [pc, #404]	; bc454 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bc2c2:	f8df 818c 	ldr.w	r8, [pc, #396]	; bc450 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc2c6:	f8df a190 	ldr.w	sl, [pc, #400]	; bc458 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bc2ca:	aa0c      	add	r2, sp, #48	; 0x30
   bc2cc:	2001      	movs	r0, #1
   bc2ce:	f7fd fd7b 	bl	b9dc8 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bc2d2:	682b      	ldr	r3, [r5, #0]
   bc2d4:	42b3      	cmp	r3, r6
   bc2d6:	f240 80b5 	bls.w	bc444 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bc2da:	a803      	add	r0, sp, #12
   bc2dc:	f7fe fa4e 	bl	ba77c <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bc2e0:	a805      	add	r0, sp, #20
   bc2e2:	f7fe fb0b 	bl	ba8fc <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bc2e6:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc2ea:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bc2ec:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bc2ee:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc2f2:	445b      	add	r3, fp
        this->size = halHandles.size;
   bc2f4:	8bd9      	ldrh	r1, [r3, #30]
   bc2f6:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bc2f8:	8c19      	ldrh	r1, [r3, #32]
   bc2fa:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bc2fc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bc2fe:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bc300:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bc302:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bc304:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bc306:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bc308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bc30a:	8253      	strh	r3, [r2, #18]
   bc30c:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bc310:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bc314:	429a      	cmp	r2, r3
   bc316:	d07d      	beq.n	bc414 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bc318:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bc31a:	8ac4      	ldrh	r4, [r0, #22]
   bc31c:	428c      	cmp	r4, r1
   bc31e:	d377      	bcc.n	bc410 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bc320:	8a84      	ldrh	r4, [r0, #20]
   bc322:	428c      	cmp	r4, r1
   bc324:	d874      	bhi.n	bc410 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc326:	6859      	ldr	r1, [r3, #4]
   bc328:	9005      	str	r0, [sp, #20]
   bc32a:	a806      	add	r0, sp, #24
   bc32c:	f7fd ffaa 	bl	ba284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bc330:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bc334:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bc338:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc33c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bc340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc342:	f8dc 3000 	ldr.w	r3, [ip]
   bc346:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bc348:	892b      	ldrh	r3, [r5, #8]
   bc34a:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bc34e:	686b      	ldr	r3, [r5, #4]
   bc350:	9c03      	ldr	r4, [sp, #12]
   bc352:	445b      	add	r3, fp
   bc354:	7e5b      	ldrb	r3, [r3, #25]
   bc356:	f013 0f02 	tst.w	r3, #2
   bc35a:	d16e      	bne.n	bc43a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bc35c:	686b      	ldr	r3, [r5, #4]
   bc35e:	445b      	add	r3, fp
   bc360:	7e5b      	ldrb	r3, [r3, #25]
   bc362:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bc364:	bf42      	ittt	mi
   bc366:	7923      	ldrbmi	r3, [r4, #4]
   bc368:	f043 0304 	orrmi.w	r3, r3, #4
   bc36c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bc36e:	686b      	ldr	r3, [r5, #4]
   bc370:	445b      	add	r3, fp
   bc372:	7e5b      	ldrb	r3, [r3, #25]
   bc374:	0719      	lsls	r1, r3, #28
   bc376:	bf42      	ittt	mi
   bc378:	7923      	ldrbmi	r3, [r4, #4]
   bc37a:	f043 0308 	orrmi.w	r3, r3, #8
   bc37e:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bc380:	686b      	ldr	r3, [r5, #4]
   bc382:	445b      	add	r3, fp
   bc384:	7e5b      	ldrb	r3, [r3, #25]
   bc386:	06da      	lsls	r2, r3, #27
   bc388:	bf42      	ittt	mi
   bc38a:	7923      	ldrbmi	r3, [r4, #4]
   bc38c:	f043 0310 	orrmi.w	r3, r3, #16
   bc390:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bc392:	686b      	ldr	r3, [r5, #4]
   bc394:	445b      	add	r3, fp
   bc396:	aa07      	add	r2, sp, #28
   bc398:	7e5b      	ldrb	r3, [r3, #25]
   bc39a:	069b      	lsls	r3, r3, #26
   bc39c:	bf42      	ittt	mi
   bc39e:	7923      	ldrbmi	r3, [r4, #4]
   bc3a0:	f043 0320 	orrmi.w	r3, r3, #32
   bc3a4:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bc3a6:	686b      	ldr	r3, [r5, #4]
   bc3a8:	449b      	add	fp, r3
   bc3aa:	f10b 0304 	add.w	r3, fp, #4
   bc3ae:	4696      	mov	lr, r2
   bc3b0:	f10b 0b14 	add.w	fp, fp, #20
   bc3b4:	6818      	ldr	r0, [r3, #0]
   bc3b6:	6859      	ldr	r1, [r3, #4]
   bc3b8:	4694      	mov	ip, r2
   bc3ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bc3be:	3308      	adds	r3, #8
   bc3c0:	455b      	cmp	r3, fp
   bc3c2:	4662      	mov	r2, ip
   bc3c4:	d1f6      	bne.n	bc3b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bc3c6:	6818      	ldr	r0, [r3, #0]
   bc3c8:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bc3cc:	4671      	mov	r1, lr
   bc3ce:	a80c      	add	r0, sp, #48	; 0x30
   bc3d0:	f7fd ffd4 	bl	ba37c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc3d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bc3d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc3dc:	3414      	adds	r4, #20
   bc3de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc3e0:	f8dc 3000 	ldr.w	r3, [ip]
   bc3e4:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bc3e6:	a903      	add	r1, sp, #12
   bc3e8:	a80c      	add	r0, sp, #48	; 0x30
   bc3ea:	f7fe fc98 	bl	bad1e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc3ee:	a90c      	add	r1, sp, #48	; 0x30
   bc3f0:	f107 0018 	add.w	r0, r7, #24
   bc3f4:	f7ff fdb1 	bl	bbf5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bc3f8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc3fa:	a80d      	add	r0, sp, #52	; 0x34
   bc3fc:	f7fe fcb1 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc400:	b99c      	cbnz	r4, bc42a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc402:	2320      	movs	r3, #32
   bc404:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bc408:	f8cd a000 	str.w	sl, [sp]
   bc40c:	4623      	mov	r3, r4
   bc40e:	e007      	b.n	bc420 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bc410:	3308      	adds	r3, #8
   bc412:	e77f      	b.n	bc314 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc414:	2420      	movs	r4, #32
   bc416:	2300      	movs	r3, #0
   bc418:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bc41c:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc420:	aa0c      	add	r2, sp, #48	; 0x30
   bc422:	4641      	mov	r1, r8
   bc424:	2032      	movs	r0, #50	; 0x32
   bc426:	f7fd fccf 	bl	b9dc8 <log_message>
   bc42a:	a806      	add	r0, sp, #24
   bc42c:	f7fe fc99 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc430:	a804      	add	r0, sp, #16
   bc432:	f7fe fc96 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc436:	3601      	adds	r6, #1
   bc438:	e74b      	b.n	bc2d2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bc43a:	7923      	ldrb	r3, [r4, #4]
   bc43c:	f043 0302 	orr.w	r3, r3, #2
   bc440:	7123      	strb	r3, [r4, #4]
   bc442:	e78b      	b.n	bc35c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bc444:	b015      	add	sp, #84	; 0x54
   bc446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc44a:	bf00      	nop
   bc44c:	000c1e41 	.word	0x000c1e41
   bc450:	000c1cb3 	.word	0x000c1cb3
   bc454:	000c1e5c 	.word	0x000c1e5c
   bc458:	000c1e8b 	.word	0x000c1e8b

000bc45c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc45c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc460:	4604      	mov	r4, r0
   bc462:	460d      	mov	r5, r1
   bc464:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc466:	d914      	bls.n	bc492 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc468:	4290      	cmp	r0, r2
   bc46a:	d213      	bcs.n	bc494 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc46c:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bc470:	1a75      	subs	r5, r6, r1
   bc472:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bc476:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc478:	42b7      	cmp	r7, r6
   bc47a:	d018      	beq.n	bc4ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc47c:	b11c      	cbz	r4, bc486 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc47e:	4631      	mov	r1, r6
   bc480:	4620      	mov	r0, r4
   bc482:	f7fe feb5 	bl	bb1f0 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bc486:	4630      	mov	r0, r6
   bc488:	f7fe fb72 	bl	bab70 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bc48c:	3e24      	subs	r6, #36	; 0x24
   bc48e:	3c24      	subs	r4, #36	; 0x24
   bc490:	e7f2      	b.n	bc478 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc492:	d00c      	beq.n	bc4ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc494:	42b5      	cmp	r5, r6
   bc496:	d00a      	beq.n	bc4ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc498:	b11c      	cbz	r4, bc4a2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc49a:	4629      	mov	r1, r5
   bc49c:	4620      	mov	r0, r4
   bc49e:	f7fe fea7 	bl	bb1f0 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bc4a2:	4628      	mov	r0, r5
   bc4a4:	f7fe fb64 	bl	bab70 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bc4a8:	3524      	adds	r5, #36	; 0x24
   bc4aa:	3424      	adds	r4, #36	; 0x24
   bc4ac:	e7f2      	b.n	bc494 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc4b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bc4b2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc4b4:	4605      	mov	r5, r0
        if (n > 0) {
   bc4b6:	dd13      	ble.n	bc4e0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bc4b8:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bc4ba:	fb07 f006 	mul.w	r0, r7, r6
   bc4be:	f7fd fd67 	bl	b9f90 <malloc>
            if (!d) {
   bc4c2:	4604      	mov	r4, r0
   bc4c4:	b158      	cbz	r0, bc4de <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bc4c6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc4ca:	fb07 1202 	mla	r2, r7, r2, r1
   bc4ce:	f7ff ffc5 	bl	bc45c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc4d2:	6828      	ldr	r0, [r5, #0]
   bc4d4:	f7fd fd64 	bl	b9fa0 <free>
        data_ = d;
   bc4d8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc4da:	60ae      	str	r6, [r5, #8]
        return true;
   bc4dc:	2001      	movs	r0, #1
    }
   bc4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bc4e0:	2400      	movs	r4, #0
   bc4e2:	e7f6      	b.n	bc4d2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bc4e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bc4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc4e8:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bc4ea:	ad01      	add	r5, sp, #4
   bc4ec:	4606      	mov	r6, r0
   bc4ee:	4628      	mov	r0, r5
   bc4f0:	460c      	mov	r4, r1
   bc4f2:	f7fd ff28 	bl	ba346 <_ZN8particle10BleAddressC1Ev>
   bc4f6:	a803      	add	r0, sp, #12
   bc4f8:	f7fe ff55 	bl	bb3a6 <_ZN8particle18BleAdvertisingDataC1Ev>
   bc4fc:	a806      	add	r0, sp, #24
   bc4fe:	f7fe ff52 	bl	bb3a6 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bc502:	6930      	ldr	r0, [r6, #16]
   bc504:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bc506:	89f2      	ldrh	r2, [r6, #14]
   bc508:	ab13      	add	r3, sp, #76	; 0x4c
   bc50a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bc50c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bc510:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bc512:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bc514:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bc518:	a806      	add	r0, sp, #24
   bc51a:	f7fe feb8 	bl	bb28e <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bc51e:	89b2      	ldrh	r2, [r6, #12]
   bc520:	6871      	ldr	r1, [r6, #4]
   bc522:	a803      	add	r0, sp, #12
   bc524:	f7fe feb3 	bl	bb28e <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bc528:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc52c:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bc52e:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc530:	d003      	beq.n	bc53a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bc532:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc536:	429a      	cmp	r2, r3
   bc538:	db5c      	blt.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bc53a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bc53e:	2b7f      	cmp	r3, #127	; 0x7f
   bc540:	d003      	beq.n	bc54a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bc542:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc546:	429a      	cmp	r2, r3
   bc548:	dc54      	bgt.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bc54a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bc54e:	4638      	mov	r0, r7
   bc550:	f7fe fd16 	bl	baf80 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bc554:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bc556:	2b00      	cmp	r3, #0
   bc558:	dd52      	ble.n	bc600 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bc55a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bc55c:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bc560:	45b1      	cmp	r9, r6
   bc562:	d050      	beq.n	bc606 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bc564:	4630      	mov	r0, r6
   bc566:	4629      	mov	r1, r5
   bc568:	f7fd fed9 	bl	ba31e <_ZNK8particle10BleAddresseqERKS0_>
   bc56c:	3608      	adds	r6, #8
   bc56e:	4680      	mov	r8, r0
   bc570:	2800      	cmp	r0, #0
   bc572:	d0f5      	beq.n	bc560 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bc574:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc576:	f7fd fd13 	bl	b9fa0 <free>
        if (!delegator->filterByRssi(result) ||
   bc57a:	f1b8 0f00 	cmp.w	r8, #0
   bc57e:	d039      	beq.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bc580:	4629      	mov	r1, r5
   bc582:	4620      	mov	r0, r4
   bc584:	f7fe fcbf 	bl	baf06 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bc588:	b3a0      	cbz	r0, bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bc58a:	4629      	mov	r1, r5
   bc58c:	4620      	mov	r0, r4
   bc58e:	f7ff fa68 	bl	bba62 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bc592:	4606      	mov	r6, r0
   bc594:	b370      	cbz	r0, bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bc596:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bc59a:	4638      	mov	r0, r7
   bc59c:	f7fe fd3b 	bl	bb016 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bc5a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc5a2:	2b00      	cmp	r3, #0
   bc5a4:	dd12      	ble.n	bc5cc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bc5a6:	a806      	add	r0, sp, #24
   bc5a8:	f7fe f895 	bl	ba6d6 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bc5ac:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bc5ae:	a803      	add	r0, sp, #12
   bc5b0:	f7fe f891 	bl	ba6d6 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bc5b4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bc5b8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bc5bc:	429a      	cmp	r2, r3
   bc5be:	d025      	beq.n	bc60c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bc5c0:	f833 1b02 	ldrh.w	r1, [r3], #2
   bc5c4:	4588      	cmp	r8, r1
   bc5c6:	d001      	beq.n	bc5cc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bc5c8:	4288      	cmp	r0, r1
   bc5ca:	d1f7      	bne.n	bc5bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bc5cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc5ce:	f7fd fce7 	bl	b9fa0 <free>
              !delegator->filterByServiceUUID(result) ||
   bc5d2:	b17e      	cbz	r6, bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bc5d4:	4629      	mov	r1, r5
   bc5d6:	4620      	mov	r0, r4
   bc5d8:	f7fe fd52 	bl	bb080 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bc5dc:	b150      	cbz	r0, bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bc5de:	6a23      	ldr	r3, [r4, #32]
   bc5e0:	b1b3      	cbz	r3, bc610 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bc5e2:	6963      	ldr	r3, [r4, #20]
   bc5e4:	9513      	str	r5, [sp, #76]	; 0x4c
   bc5e6:	3301      	adds	r3, #1
   bc5e8:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc5ec:	4639      	mov	r1, r7
   bc5ee:	f104 0018 	add.w	r0, r4, #24
   bc5f2:	4798      	blx	r3
            return;
   bc5f4:	4628      	mov	r0, r5
   bc5f6:	f7fe fabb 	bl	bab70 <_ZN8particle13BleScanResultD1Ev>
    }
   bc5fa:	b01d      	add	sp, #116	; 0x74
   bc5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bc600:	f04f 0801 	mov.w	r8, #1
   bc604:	e7b6      	b.n	bc574 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc606:	f04f 0800 	mov.w	r8, #0
   bc60a:	e7b3      	b.n	bc574 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc60c:	2600      	movs	r6, #0
   bc60e:	e7dd      	b.n	bc5cc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bc610:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bc614:	f1b8 0f00 	cmp.w	r8, #0
   bc618:	d007      	beq.n	bc62a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bc61a:	6963      	ldr	r3, [r4, #20]
   bc61c:	3301      	adds	r3, #1
   bc61e:	6163      	str	r3, [r4, #20]
   bc620:	4629      	mov	r1, r5
   bc622:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bc624:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bc628:	e7e3      	b.n	bc5f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bc62a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bc62e:	f1bc 0f00 	cmp.w	ip, #0
   bc632:	d025      	beq.n	bc680 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bc634:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc636:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bc638:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc63a:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bc63c:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc63e:	d8d9      	bhi.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc640:	2224      	movs	r2, #36	; 0x24
   bc642:	4353      	muls	r3, r2
    address_ = addr.address_;
   bc644:	462a      	mov	r2, r5
   bc646:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc648:	3b24      	subs	r3, #36	; 0x24
   bc64a:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bc64e:	f84c 0003 	str.w	r0, [ip, r3]
   bc652:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bc654:	f106 0008 	add.w	r0, r6, #8
   bc658:	a903      	add	r1, sp, #12
   bc65a:	f7fe fde0 	bl	bb21e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc65e:	a906      	add	r1, sp, #24
   bc660:	f106 0014 	add.w	r0, r6, #20
   bc664:	f7fe fddb 	bl	bb21e <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc668:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bc66c:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bc670:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bc674:	429a      	cmp	r2, r3
   bc676:	d3bd      	bcc.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bc678:	4640      	mov	r0, r8
   bc67a:	f7fd f919 	bl	b98b0 <hal_ble_gap_stop_scan>
   bc67e:	e7b9      	b.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bc680:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc684:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bc688:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bc68c:	a903      	add	r1, sp, #12
   bc68e:	a80c      	add	r0, sp, #48	; 0x30
   bc690:	f7fe fd91 	bl	bb1b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bc694:	a906      	add	r1, sp, #24
   bc696:	a80f      	add	r0, sp, #60	; 0x3c
   bc698:	f7fe fd8d 	bl	bb1b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bc69c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bc6a0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bc6a4:	4641      	mov	r1, r8
   bc6a6:	4638      	mov	r0, r7
   bc6a8:	6866      	ldr	r6, [r4, #4]
   bc6aa:	f7fe fda1 	bl	bb1f0 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc6ae:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc6b2:	4299      	cmp	r1, r3
   bc6b4:	da10      	bge.n	bc6d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bc6b6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc6b8:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bc6ba:	2224      	movs	r2, #36	; 0x24
   bc6bc:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bc6c0:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bc6c4:	fb02 3201 	mla	r2, r2, r1, r3
   bc6c8:	4631      	mov	r1, r6
   bc6ca:	f7ff fec7 	bl	bc45c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc6ce:	b986      	cbnz	r6, bc6f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bc6d0:	6863      	ldr	r3, [r4, #4]
   bc6d2:	3301      	adds	r3, #1
   bc6d4:	6063      	str	r3, [r4, #4]
    return true;
   bc6d6:	e005      	b.n	bc6e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc6d8:	3101      	adds	r1, #1
   bc6da:	4620      	mov	r0, r4
   bc6dc:	f7ff fee8 	bl	bc4b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc6e0:	2800      	cmp	r0, #0
   bc6e2:	d1e8      	bne.n	bc6b6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bc6e4:	4638      	mov	r0, r7
   bc6e6:	f7fe fa43 	bl	bab70 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bc6ea:	4640      	mov	r0, r8
   bc6ec:	f7fe fa40 	bl	bab70 <_ZN8particle13BleScanResultD1Ev>
   bc6f0:	e780      	b.n	bc5f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bc6f2:	4639      	mov	r1, r7
   bc6f4:	4630      	mov	r0, r6
   bc6f6:	f7fe fd7b 	bl	bb1f0 <_ZN8particle13BleScanResultC1EOS0_>
   bc6fa:	e7e9      	b.n	bc6d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bc6fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bc6fc:	4802      	ldr	r0, [pc, #8]	; (bc708 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc6fe:	2300      	movs	r3, #0
   bc700:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bc702:	f7fd b991 	b.w	b9a28 <os_mutex_recursive_create>
   bc706:	bf00      	nop
   bc708:	2003e658 	.word	0x2003e658

000bc70c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc70c:	2200      	movs	r2, #0
   bc70e:	6840      	ldr	r0, [r0, #4]
   bc710:	4611      	mov	r1, r2
   bc712:	f7fd bbf5 	b.w	b9f00 <network_ready>

000bc716 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc716:	2200      	movs	r2, #0
   bc718:	6840      	ldr	r0, [r0, #4]
   bc71a:	4611      	mov	r1, r2
   bc71c:	f7fd bc10 	b.w	b9f40 <network_listening>

000bc720 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc720:	2200      	movs	r2, #0
   bc722:	6840      	ldr	r0, [r0, #4]
   bc724:	4611      	mov	r1, r2
   bc726:	f7fd bc1b 	b.w	b9f60 <network_get_listen_timeout>

000bc72a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc72a:	6840      	ldr	r0, [r0, #4]
   bc72c:	2200      	movs	r2, #0
   bc72e:	f7fd bc0f 	b.w	b9f50 <network_set_listen_timeout>

000bc732 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc732:	6840      	ldr	r0, [r0, #4]
   bc734:	2200      	movs	r2, #0
   bc736:	f081 0101 	eor.w	r1, r1, #1
   bc73a:	f7fd bbf9 	b.w	b9f30 <network_listen>

000bc73e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc73e:	2300      	movs	r3, #0
   bc740:	6840      	ldr	r0, [r0, #4]
   bc742:	461a      	mov	r2, r3
   bc744:	4619      	mov	r1, r3
   bc746:	f7fd bbeb 	b.w	b9f20 <network_off>

000bc74a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc74a:	2300      	movs	r3, #0
   bc74c:	6840      	ldr	r0, [r0, #4]
   bc74e:	461a      	mov	r2, r3
   bc750:	4619      	mov	r1, r3
   bc752:	f7fd bbdd 	b.w	b9f10 <network_on>

000bc756 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc756:	2200      	movs	r2, #0
   bc758:	6840      	ldr	r0, [r0, #4]
   bc75a:	4611      	mov	r1, r2
   bc75c:	f7fd bbc0 	b.w	b9ee0 <network_connecting>

000bc760 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc760:	6840      	ldr	r0, [r0, #4]
   bc762:	2200      	movs	r2, #0
   bc764:	2102      	movs	r1, #2
   bc766:	f7fd bbc3 	b.w	b9ef0 <network_disconnect>

000bc76a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc76a:	2300      	movs	r3, #0
   bc76c:	6840      	ldr	r0, [r0, #4]
   bc76e:	461a      	mov	r2, r3
   bc770:	f7fd bbae 	b.w	b9ed0 <network_connect>

000bc774 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc774:	4b08      	ldr	r3, [pc, #32]	; (bc798 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc776:	b510      	push	{r4, lr}
   bc778:	2428      	movs	r4, #40	; 0x28
   bc77a:	4622      	mov	r2, r4
   bc77c:	4618      	mov	r0, r3
   bc77e:	2100      	movs	r1, #0
   bc780:	f002 f9a5 	bl	beace <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc784:	4b05      	ldr	r3, [pc, #20]	; (bc79c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc786:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc78c:	6042      	str	r2, [r0, #4]
   bc78e:	2204      	movs	r2, #4
   bc790:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc792:	4a03      	ldr	r2, [pc, #12]	; (bc7a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc794:	601a      	str	r2, [r3, #0]
   bc796:	bd10      	pop	{r4, pc}
   bc798:	2003e668 	.word	0x2003e668
   bc79c:	2003e660 	.word	0x2003e660
   bc7a0:	000c1f34 	.word	0x000c1f34

000bc7a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc7a4:	4770      	bx	lr

000bc7a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc7a6:	2000      	movs	r0, #0
   bc7a8:	4770      	bx	lr

000bc7aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc7aa:	b510      	push	{r4, lr}
   bc7ac:	2110      	movs	r1, #16
   bc7ae:	4604      	mov	r4, r0
   bc7b0:	f7f7 fc75 	bl	b409e <_ZdlPvj>
   bc7b4:	4620      	mov	r0, r4
   bc7b6:	bd10      	pop	{r4, pc}

000bc7b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc7b8:	b508      	push	{r3, lr}
      { delete this; }
   bc7ba:	f7ff fff6 	bl	bc7aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc7be:	bd08      	pop	{r3, pc}

000bc7c0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc7c0:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc7c2:	2200      	movs	r2, #0
   bc7c4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc7c8:	6002      	str	r2, [r0, #0]
   bc7ca:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc7cc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc7ce:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc7d0:	680c      	ldr	r4, [r1, #0]
   bc7d2:	8085      	strh	r5, [r0, #4]
   bc7d4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc7d6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc7d8:	bd30      	pop	{r4, r5, pc}

000bc7da <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc7da:	b510      	push	{r4, lr}
   bc7dc:	4604      	mov	r4, r0
    free((void*)msg_);
   bc7de:	6800      	ldr	r0, [r0, #0]
   bc7e0:	f7fd fbde 	bl	b9fa0 <free>
}
   bc7e4:	4620      	mov	r0, r4
   bc7e6:	bd10      	pop	{r4, pc}

000bc7e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bc7e8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bc7ea:	68c4      	ldr	r4, [r0, #12]
   bc7ec:	b1f4      	cbz	r4, bc82c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bc7ee:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bc7f0:	2b02      	cmp	r3, #2
   bc7f2:	d103      	bne.n	bc7fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bc7f4:	f104 000c 	add.w	r0, r4, #12
   bc7f8:	f7ff ffef 	bl	bc7da <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bc7fc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bc7fe:	b135      	cbz	r5, bc80e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bc800:	4628      	mov	r0, r5
   bc802:	f7f7 feb9 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bc806:	2110      	movs	r1, #16
   bc808:	4628      	mov	r0, r5
   bc80a:	f7f7 fc48 	bl	b409e <_ZdlPvj>
   bc80e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bc810:	b135      	cbz	r5, bc820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bc812:	4628      	mov	r0, r5
   bc814:	f7f7 feb0 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bc818:	2110      	movs	r1, #16
   bc81a:	4628      	mov	r0, r5
   bc81c:	f7f7 fc3f 	bl	b409e <_ZdlPvj>
   bc820:	4620      	mov	r0, r4
   bc822:	2114      	movs	r1, #20
   bc824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc828:	f7f7 bc39 	b.w	b409e <_ZdlPvj>
   bc82c:	bd38      	pop	{r3, r4, r5, pc}

000bc82e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bc82e:	b510      	push	{r4, lr}
   bc830:	b088      	sub	sp, #32
   bc832:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bc834:	4668      	mov	r0, sp
   bc836:	f000 fe32 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bc83a:	4669      	mov	r1, sp
   bc83c:	a804      	add	r0, sp, #16
   bc83e:	f000 fe79 	bl	bd534 <_ZN6StringC1ERKS_>
   bc842:	a804      	add	r0, sp, #16
   bc844:	47a0      	blx	r4
   bc846:	4604      	mov	r4, r0
   bc848:	a804      	add	r0, sp, #16
   bc84a:	f000 fddd 	bl	bd408 <_ZN6StringD1Ev>
    String p(param);
   bc84e:	4668      	mov	r0, sp
   bc850:	f000 fdda 	bl	bd408 <_ZN6StringD1Ev>
}
   bc854:	4620      	mov	r0, r4
   bc856:	b008      	add	sp, #32
   bc858:	bd10      	pop	{r4, pc}

000bc85a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bc85a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bc85c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bc85e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bc862:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bc864:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bc866:	461a      	mov	r2, r3
   bc868:	4669      	mov	r1, sp
   bc86a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bc86c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bc870:	f8ad 4000 	strh.w	r4, [sp]
   bc874:	f7fd faf4 	bl	b9e60 <spark_function>
}
   bc878:	b004      	add	sp, #16
   bc87a:	bd10      	pop	{r4, pc}

000bc87c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc87c:	680b      	ldr	r3, [r1, #0]
   bc87e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc880:	684b      	ldr	r3, [r1, #4]
   bc882:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc884:	b113      	cbz	r3, bc88c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc886:	685a      	ldr	r2, [r3, #4]
   bc888:	3201      	adds	r2, #1
   bc88a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc88c:	4770      	bx	lr

000bc88e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc88e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc890:	4604      	mov	r4, r0
   bc892:	4668      	mov	r0, sp
   bc894:	460d      	mov	r5, r1
   bc896:	f7ff fff1 	bl	bc87c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc89a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc89c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc89e:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc8a0:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc8a2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc8a4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc8a6:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bc8a8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc8aa:	f7fe fa5a 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc8ae:	b135      	cbz	r5, bc8be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc8b0:	1d28      	adds	r0, r5, #4
   bc8b2:	f7fe fa56 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc8b6:	2108      	movs	r1, #8
   bc8b8:	4628      	mov	r0, r5
   bc8ba:	f7f7 fbf0 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc8be:	4620      	mov	r0, r4
   bc8c0:	b003      	add	sp, #12
   bc8c2:	bd30      	pop	{r4, r5, pc}

000bc8c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc8c4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc8c6:	b510      	push	{r4, lr}
      if (_M_empty())
   bc8c8:	b90a      	cbnz	r2, bc8ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc8ca:	f001 fa30 	bl	bdd2e <_ZSt25__throw_bad_function_callv>
    }
   bc8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc8d2:	68c3      	ldr	r3, [r0, #12]
   bc8d4:	4718      	bx	r3

000bc8d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc8d6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc8d8:	6800      	ldr	r0, [r0, #0]
   bc8da:	f100 0110 	add.w	r1, r0, #16
   bc8de:	f7ff fff1 	bl	bc8c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc8e2:	bd08      	pop	{r3, pc}

000bc8e4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc8e4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc8e6:	b510      	push	{r4, lr}
      if (_M_empty())
   bc8e8:	b90a      	cbnz	r2, bc8ee <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc8ea:	f001 fa20 	bl	bdd2e <_ZSt25__throw_bad_function_callv>
    }
   bc8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc8f2:	68c3      	ldr	r3, [r0, #12]
   bc8f4:	4718      	bx	r3

000bc8f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc8f6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc8f8:	6800      	ldr	r0, [r0, #0]
   bc8fa:	f100 0110 	add.w	r1, r0, #16
   bc8fe:	f7ff fff1 	bl	bc8e4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc902:	bd08      	pop	{r3, pc}

000bc904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc904:	b538      	push	{r3, r4, r5, lr}
   bc906:	2300      	movs	r3, #0
   bc908:	4604      	mov	r4, r0
   bc90a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc90c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc90e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc910:	f7f7 fbc1 	bl	b4096 <_Znwj>
   bc914:	b128      	cbz	r0, bc922 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc916:	2301      	movs	r3, #1
   bc918:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc91c:	4b02      	ldr	r3, [pc, #8]	; (bc928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc91e:	6003      	str	r3, [r0, #0]
   bc920:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc922:	6020      	str	r0, [r4, #0]
	}
   bc924:	4620      	mov	r0, r4
   bc926:	bd38      	pop	{r3, r4, r5, pc}
   bc928:	000c1f70 	.word	0x000c1f70

000bc92c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc92c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc92e:	2300      	movs	r3, #0
   bc930:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc932:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc934:	4604      	mov	r4, r0
   bc936:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc938:	b12b      	cbz	r3, bc946 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc93a:	2202      	movs	r2, #2
   bc93c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc93e:	68eb      	ldr	r3, [r5, #12]
   bc940:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc942:	68ab      	ldr	r3, [r5, #8]
   bc944:	60a3      	str	r3, [r4, #8]
    }
   bc946:	4620      	mov	r0, r4
   bc948:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc94c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc94c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc94e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc950:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc952:	4668      	mov	r0, sp
   bc954:	f7ff ff34 	bl	bc7c0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc958:	f04f 0302 	mov.w	r3, #2
   bc95c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc960:	2a00      	cmp	r2, #0
   bc962:	d103      	bne.n	bc96c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc964:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc968:	2900      	cmp	r1, #0
   bc96a:	d1f7      	bne.n	bc95c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc96c:	d125      	bne.n	bc9ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc96e:	f104 050c 	add.w	r5, r4, #12
   bc972:	4669      	mov	r1, sp
   bc974:	4628      	mov	r0, r5
   bc976:	f7ff ff23 	bl	bc7c0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc97a:	f3bf 8f5b 	dmb	ish
   bc97e:	2301      	movs	r3, #1
   bc980:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc982:	2000      	movs	r0, #0
   bc984:	f104 0308 	add.w	r3, r4, #8
   bc988:	f3bf 8f5b 	dmb	ish
   bc98c:	e853 6f00 	ldrex	r6, [r3]
   bc990:	e843 0200 	strex	r2, r0, [r3]
   bc994:	2a00      	cmp	r2, #0
   bc996:	d1f9      	bne.n	bc98c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc998:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc99c:	b16e      	cbz	r6, bc9ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc99e:	f7fd fa33 	bl	b9e08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc9a2:	b178      	cbz	r0, bc9c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc9a4:	4629      	mov	r1, r5
   bc9a6:	4630      	mov	r0, r6
   bc9a8:	f7ff ff8c 	bl	bc8c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc9ac:	4630      	mov	r0, r6
   bc9ae:	f7f7 fde3 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc9b2:	2110      	movs	r1, #16
   bc9b4:	4630      	mov	r0, r6
   bc9b6:	f7f7 fb72 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc9ba:	4668      	mov	r0, sp
   bc9bc:	f7ff ff0d 	bl	bc7da <_ZN8particle5ErrorD1Ev>
    }
   bc9c0:	b009      	add	sp, #36	; 0x24
   bc9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc9c4:	4631      	mov	r1, r6
   bc9c6:	a802      	add	r0, sp, #8
   bc9c8:	f7ff ffb0 	bl	bc92c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc9cc:	68e0      	ldr	r0, [r4, #12]
   bc9ce:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc9d2:	b108      	cbz	r0, bc9d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc9d4:	f002 f912 	bl	bebfc <strdup>
        type_(type) {
   bc9d8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc9da:	2010      	movs	r0, #16
   bc9dc:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc9e0:	f7f7 fb59 	bl	b4096 <_Znwj>
   bc9e4:	4605      	mov	r5, r0
   bc9e6:	b1e8      	cbz	r0, bca24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc9e8:	2700      	movs	r7, #0
   bc9ea:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc9ec:	2018      	movs	r0, #24
   bc9ee:	f7f7 fb52 	bl	b4096 <_Znwj>
   bc9f2:	4604      	mov	r4, r0
   bc9f4:	b188      	cbz	r0, bca1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc9f6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc9f8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc9fa:	a802      	add	r0, sp, #8
   bc9fc:	f7ff f88a 	bl	bbb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bca00:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bca02:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bca04:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bca06:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bca08:	9204      	str	r2, [sp, #16]
   bca0a:	a906      	add	r1, sp, #24
   bca0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bca0e:	60e3      	str	r3, [r4, #12]
   bca10:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bca14:	9205      	str	r2, [sp, #20]
   bca16:	f7ff fed3 	bl	bc7c0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bca1a:	4b08      	ldr	r3, [pc, #32]	; (bca3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bca1c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bca1e:	4b08      	ldr	r3, [pc, #32]	; (bca40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bca20:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bca22:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bca24:	a806      	add	r0, sp, #24
   bca26:	f7ff fed8 	bl	bc7da <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bca2a:	a802      	add	r0, sp, #8
   bca2c:	f7f7 fda4 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bca30:	2200      	movs	r2, #0
   bca32:	4629      	mov	r1, r5
   bca34:	4803      	ldr	r0, [pc, #12]	; (bca44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bca36:	f7fd f9ef 	bl	b9e18 <application_thread_invoke>
   bca3a:	e7b7      	b.n	bc9ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bca3c:	000bc8d7 	.word	0x000bc8d7
   bca40:	000bcb59 	.word	0x000bcb59
   bca44:	000ba067 	.word	0x000ba067

000bca48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca4c:	b08b      	sub	sp, #44	; 0x2c
   bca4e:	4605      	mov	r5, r0
   bca50:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bca54:	460f      	mov	r7, r1
   bca56:	4690      	mov	r8, r2
   bca58:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bca5a:	f7fd fa11 	bl	b9e80 <spark_cloud_flag_connected>
   bca5e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bca60:	4683      	mov	fp, r0
   bca62:	bb38      	cbnz	r0, bcab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bca64:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bca68:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bca6a:	a905      	add	r1, sp, #20
   bca6c:	4630      	mov	r0, r6
   bca6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bca72:	f7ff fea5 	bl	bc7c0 <_ZN8particle5ErrorC1EOS0_>
   bca76:	2014      	movs	r0, #20
   bca78:	f7f7 fb0d 	bl	b4096 <_Znwj>
   bca7c:	4604      	mov	r4, r0
   bca7e:	b148      	cbz	r0, bca94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bca80:	2302      	movs	r3, #2
   bca82:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bca84:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bca86:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bca8a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bca8c:	4631      	mov	r1, r6
   bca8e:	300c      	adds	r0, #12
   bca90:	f7ff fe96 	bl	bc7c0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bca94:	4628      	mov	r0, r5
	: __shared_count(__p)
   bca96:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bca98:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bca9c:	f7ff ff32 	bl	bc904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bcaa0:	4630      	mov	r0, r6
   bcaa2:	f7ff fe9a 	bl	bc7da <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bcaa6:	a805      	add	r0, sp, #20
   bcaa8:	f7ff fe97 	bl	bc7da <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bcaac:	4628      	mov	r0, r5
   bcaae:	b00b      	add	sp, #44	; 0x2c
   bcab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bcab4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bcab6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bcab8:	2014      	movs	r0, #20
   bcaba:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bcabe:	9307      	str	r3, [sp, #28]
   bcac0:	f7f7 fae9 	bl	b4096 <_Znwj>
   bcac4:	4601      	mov	r1, r0
   bcac6:	b118      	cbz	r0, bcad0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bcac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcacc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bcace:	7044      	strb	r4, [r0, #1]
   bcad0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcad2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bcad4:	f7ff ff16 	bl	bc904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bcad8:	4b1e      	ldr	r3, [pc, #120]	; (bcb54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bcada:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bcadc:	2008      	movs	r0, #8
   bcade:	f7f7 fada 	bl	b4096 <_Znwj>
   bcae2:	4604      	mov	r4, r0
   bcae4:	b110      	cbz	r0, bcaec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bcae6:	a903      	add	r1, sp, #12
   bcae8:	f7ff fec8 	bl	bc87c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcaec:	9600      	str	r6, [sp, #0]
   bcaee:	fa5f f38a 	uxtb.w	r3, sl
   bcaf2:	464a      	mov	r2, r9
   bcaf4:	4641      	mov	r1, r8
   bcaf6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bcaf8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcafa:	f7fd f9c9 	bl	b9e90 <spark_send_event>
   bcafe:	b9b8      	cbnz	r0, bcb30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bcb00:	9b03      	ldr	r3, [sp, #12]
   bcb02:	785b      	ldrb	r3, [r3, #1]
   bcb04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bcb08:	b993      	cbnz	r3, bcb30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bcb0a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bcb0e:	a905      	add	r1, sp, #20
   bcb10:	a803      	add	r0, sp, #12
   bcb12:	9205      	str	r2, [sp, #20]
   bcb14:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcb18:	f7ff ff18 	bl	bc94c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcb1c:	a805      	add	r0, sp, #20
   bcb1e:	f7ff fe5c 	bl	bc7da <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bcb22:	a805      	add	r0, sp, #20
   bcb24:	9909      	ldr	r1, [sp, #36]	; 0x24
   bcb26:	f7ff feb2 	bl	bc88e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bcb2a:	a806      	add	r0, sp, #24
   bcb2c:	f7fe f919 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcb30:	a903      	add	r1, sp, #12
   bcb32:	a805      	add	r0, sp, #20
   bcb34:	f7ff fea2 	bl	bc87c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcb38:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcb3a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcb3c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bcb3e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bcb40:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcb42:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bcb44:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bcb46:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bcb48:	f7fe f90b 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcb4c:	a804      	add	r0, sp, #16
   bcb4e:	f7fe f908 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bcb52:	e7ab      	b.n	bcaac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bcb54:	000bcbd5 	.word	0x000bcbd5

000bcb58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bcb58:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcb5c:	4605      	mov	r5, r0
	switch (__op)
   bcb5e:	d103      	bne.n	bcb68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcb60:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcb62:	6003      	str	r3, [r0, #0]
      }
   bcb64:	2000      	movs	r0, #0
   bcb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcb68:	2a02      	cmp	r2, #2
   bcb6a:	d010      	beq.n	bcb8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcb6c:	2a03      	cmp	r2, #3
   bcb6e:	d1f9      	bne.n	bcb64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcb70:	6804      	ldr	r4, [r0, #0]
   bcb72:	2c00      	cmp	r4, #0
   bcb74:	d0f6      	beq.n	bcb64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcb76:	f104 0010 	add.w	r0, r4, #16
   bcb7a:	f7ff fe2e 	bl	bc7da <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcb7e:	4620      	mov	r0, r4
   bcb80:	f7f7 fcfa 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcb84:	2118      	movs	r1, #24
   bcb86:	4620      	mov	r0, r4
   bcb88:	f7f7 fa89 	bl	b409e <_ZdlPvj>
   bcb8c:	e7ea      	b.n	bcb64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcb8e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcb90:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcb92:	f7f7 fa80 	bl	b4096 <_Znwj>
   bcb96:	4604      	mov	r4, r0
   bcb98:	b150      	cbz	r0, bcbb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bcb9a:	4631      	mov	r1, r6
   bcb9c:	f7ff fec6 	bl	bc92c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcba0:	6930      	ldr	r0, [r6, #16]
   bcba2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcba6:	b108      	cbz	r0, bcbac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcba8:	f002 f828 	bl	bebfc <strdup>
        type_(type) {
   bcbac:	6120      	str	r0, [r4, #16]
   bcbae:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bcbb0:	602c      	str	r4, [r5, #0]
	}
   bcbb2:	e7d7      	b.n	bcb64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bcbb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bcbb4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcbb6:	2300      	movs	r3, #0
   bcbb8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcbba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcbbc:	4604      	mov	r4, r0
   bcbbe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcbc0:	b12b      	cbz	r3, bcbce <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcbc2:	2202      	movs	r2, #2
   bcbc4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcbc6:	68eb      	ldr	r3, [r5, #12]
   bcbc8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcbca:	68ab      	ldr	r3, [r5, #8]
   bcbcc:	60a3      	str	r3, [r4, #8]
    }
   bcbce:	4620      	mov	r0, r4
   bcbd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcbd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcbd6:	b089      	sub	sp, #36	; 0x24
   bcbd8:	4604      	mov	r4, r0
   bcbda:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcbdc:	a801      	add	r0, sp, #4
   bcbde:	4611      	mov	r1, r2
   bcbe0:	f7ff fe55 	bl	bc88e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcbe4:	b1a4      	cbz	r4, bcc10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcbe6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcbe8:	b11d      	cbz	r5, bcbf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcbea:	4628      	mov	r0, r5
   bcbec:	f002 f806 	bl	bebfc <strdup>
   bcbf0:	4605      	mov	r5, r0
   bcbf2:	a801      	add	r0, sp, #4
   bcbf4:	a903      	add	r1, sp, #12
        type_(type) {
   bcbf6:	9503      	str	r5, [sp, #12]
   bcbf8:	f8ad 4010 	strh.w	r4, [sp, #16]
   bcbfc:	f7ff fea6 	bl	bc94c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcc00:	a803      	add	r0, sp, #12
   bcc02:	f7ff fdea 	bl	bc7da <_ZN8particle5ErrorD1Ev>
   bcc06:	a802      	add	r0, sp, #8
   bcc08:	f7fe f8ab 	bl	bad62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcc0c:	b009      	add	sp, #36	; 0x24
   bcc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bcc10:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcc12:	2301      	movs	r3, #1
   bcc14:	e8d5 2f4f 	ldrexb	r2, [r5]
   bcc18:	2a00      	cmp	r2, #0
   bcc1a:	d103      	bne.n	bcc24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bcc1c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bcc20:	2900      	cmp	r1, #0
   bcc22:	d1f7      	bne.n	bcc14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bcc24:	d1ef      	bne.n	bcc06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bcc26:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bcc28:	f3bf 8f5b 	dmb	ish
   bcc2c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcc2e:	1d2b      	adds	r3, r5, #4
   bcc30:	f3bf 8f5b 	dmb	ish
   bcc34:	e853 6f00 	ldrex	r6, [r3]
   bcc38:	e843 4200 	strex	r2, r4, [r3]
   bcc3c:	2a00      	cmp	r2, #0
   bcc3e:	d1f9      	bne.n	bcc34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bcc40:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcc44:	2e00      	cmp	r6, #0
   bcc46:	d0de      	beq.n	bcc06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bcc48:	4620      	mov	r0, r4
   bcc4a:	f7fd f8dd 	bl	b9e08 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcc4e:	4607      	mov	r7, r0
   bcc50:	b160      	cbz	r0, bcc6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcc52:	f105 010c 	add.w	r1, r5, #12
   bcc56:	4630      	mov	r0, r6
   bcc58:	f7ff fe44 	bl	bc8e4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bcc5c:	4630      	mov	r0, r6
   bcc5e:	f7f7 fc8b 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcc62:	2110      	movs	r1, #16
   bcc64:	4630      	mov	r0, r6
   bcc66:	f7f7 fa1a 	bl	b409e <_ZdlPvj>
   bcc6a:	e7cc      	b.n	bcc06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcc6c:	4631      	mov	r1, r6
   bcc6e:	a803      	add	r0, sp, #12
   bcc70:	f7ff ffa0 	bl	bcbb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bcc74:	7b2b      	ldrb	r3, [r5, #12]
   bcc76:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcc7a:	2010      	movs	r0, #16
   bcc7c:	f7f7 fa0b 	bl	b4096 <_Znwj>
   bcc80:	4605      	mov	r5, r0
   bcc82:	b1d0      	cbz	r0, bccba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bcc84:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcc86:	2014      	movs	r0, #20
   bcc88:	f7f7 fa05 	bl	b4096 <_Znwj>
   bcc8c:	4604      	mov	r4, r0
   bcc8e:	b178      	cbz	r0, bccb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bcc90:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcc92:	4601      	mov	r1, r0
   bcc94:	a803      	add	r0, sp, #12
   bcc96:	f7fe ff3d 	bl	bbb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcc9a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcc9c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcc9e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcca0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bcca2:	9205      	str	r2, [sp, #20]
   bcca4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcca6:	60e3      	str	r3, [r4, #12]
   bcca8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bccac:	9206      	str	r2, [sp, #24]
   bccae:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bccb0:	4b06      	ldr	r3, [pc, #24]	; (bcccc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bccb2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bccb4:	4b06      	ldr	r3, [pc, #24]	; (bccd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bccb6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bccb8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bccba:	a803      	add	r0, sp, #12
   bccbc:	f7f7 fc5c 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bccc0:	2200      	movs	r2, #0
   bccc2:	4629      	mov	r1, r5
   bccc4:	4803      	ldr	r0, [pc, #12]	; (bccd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bccc6:	f7fd f8a7 	bl	b9e18 <application_thread_invoke>
   bccca:	e7c7      	b.n	bcc5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bcccc:	000bc8f7 	.word	0x000bc8f7
   bccd0:	000bccd9 	.word	0x000bccd9
   bccd4:	000ba067 	.word	0x000ba067

000bccd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bccd8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bccda:	b570      	push	{r4, r5, r6, lr}
   bccdc:	4604      	mov	r4, r0
	switch (__op)
   bccde:	d103      	bne.n	bcce8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcce0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcce2:	6003      	str	r3, [r0, #0]
      }
   bcce4:	2000      	movs	r0, #0
   bcce6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bcce8:	2a02      	cmp	r2, #2
   bccea:	d00c      	beq.n	bcd06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bccec:	2a03      	cmp	r2, #3
   bccee:	d1f9      	bne.n	bcce4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bccf0:	6804      	ldr	r4, [r0, #0]
   bccf2:	2c00      	cmp	r4, #0
   bccf4:	d0f6      	beq.n	bcce4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bccf6:	4620      	mov	r0, r4
   bccf8:	f7f7 fc3e 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bccfc:	2114      	movs	r1, #20
   bccfe:	4620      	mov	r0, r4
   bcd00:	f7f7 f9cd 	bl	b409e <_ZdlPvj>
   bcd04:	e7ee      	b.n	bcce4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcd06:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bcd08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcd0a:	f7f7 f9c4 	bl	b4096 <_Znwj>
   bcd0e:	4605      	mov	r5, r0
   bcd10:	b120      	cbz	r0, bcd1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bcd12:	4631      	mov	r1, r6
   bcd14:	f7ff ff4e 	bl	bcbb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bcd18:	7c33      	ldrb	r3, [r6, #16]
   bcd1a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bcd1c:	6025      	str	r5, [r4, #0]
	}
   bcd1e:	e7e1      	b.n	bcce4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bcd20 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcd20:	2200      	movs	r2, #0
   bcd22:	6840      	ldr	r0, [r0, #4]
   bcd24:	4611      	mov	r1, r2
   bcd26:	f7fd b90b 	b.w	b9f40 <network_listening>

000bcd2a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcd2a:	2200      	movs	r2, #0
   bcd2c:	6840      	ldr	r0, [r0, #4]
   bcd2e:	4611      	mov	r1, r2
   bcd30:	f7fd b916 	b.w	b9f60 <network_get_listen_timeout>

000bcd34 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcd34:	6840      	ldr	r0, [r0, #4]
   bcd36:	2200      	movs	r2, #0
   bcd38:	f7fd b90a 	b.w	b9f50 <network_set_listen_timeout>

000bcd3c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcd3c:	6840      	ldr	r0, [r0, #4]
   bcd3e:	2200      	movs	r2, #0
   bcd40:	f081 0101 	eor.w	r1, r1, #1
   bcd44:	f7fd b8f4 	b.w	b9f30 <network_listen>

000bcd48 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcd48:	2300      	movs	r3, #0
   bcd4a:	6840      	ldr	r0, [r0, #4]
   bcd4c:	461a      	mov	r2, r3
   bcd4e:	4619      	mov	r1, r3
   bcd50:	f7fd b8e6 	b.w	b9f20 <network_off>

000bcd54 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcd54:	2300      	movs	r3, #0
   bcd56:	6840      	ldr	r0, [r0, #4]
   bcd58:	461a      	mov	r2, r3
   bcd5a:	4619      	mov	r1, r3
   bcd5c:	f7fd b8d8 	b.w	b9f10 <network_on>

000bcd60 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bcd60:	2200      	movs	r2, #0
   bcd62:	6840      	ldr	r0, [r0, #4]
   bcd64:	4611      	mov	r1, r2
   bcd66:	f7fd b8cb 	b.w	b9f00 <network_ready>

000bcd6a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcd6a:	2200      	movs	r2, #0
   bcd6c:	6840      	ldr	r0, [r0, #4]
   bcd6e:	4611      	mov	r1, r2
   bcd70:	f7fd b8b6 	b.w	b9ee0 <network_connecting>

000bcd74 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcd74:	6840      	ldr	r0, [r0, #4]
   bcd76:	2200      	movs	r2, #0
   bcd78:	2102      	movs	r1, #2
   bcd7a:	f7fd b8b9 	b.w	b9ef0 <network_disconnect>

000bcd7e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcd7e:	2300      	movs	r3, #0
   bcd80:	6840      	ldr	r0, [r0, #4]
   bcd82:	461a      	mov	r2, r3
   bcd84:	f7fd b8a4 	b.w	b9ed0 <network_connect>

000bcd88 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bcd88:	4b02      	ldr	r3, [pc, #8]	; (bcd94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bcd8a:	2203      	movs	r2, #3
   bcd8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bcd8e:	4a02      	ldr	r2, [pc, #8]	; (bcd98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bcd90:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bcd92:	4770      	bx	lr
   bcd94:	2003e690 	.word	0x2003e690
   bcd98:	000c1f8c 	.word	0x000c1f8c

000bcd9c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bcd9c:	4770      	bx	lr

000bcd9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bcd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcda0:	4606      	mov	r6, r0
   bcda2:	4615      	mov	r5, r2
   bcda4:	460c      	mov	r4, r1
   bcda6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bcda8:	42bc      	cmp	r4, r7
   bcdaa:	d006      	beq.n	bcdba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bcdac:	6833      	ldr	r3, [r6, #0]
   bcdae:	f814 1b01 	ldrb.w	r1, [r4], #1
   bcdb2:	689b      	ldr	r3, [r3, #8]
   bcdb4:	4630      	mov	r0, r6
   bcdb6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bcdb8:	e7f6      	b.n	bcda8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bcdba:	4628      	mov	r0, r5
   bcdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcdbe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bcdbe:	7c00      	ldrb	r0, [r0, #16]
   bcdc0:	2200      	movs	r2, #0
   bcdc2:	f7fc bed9 	b.w	b9b78 <hal_i2c_write>

000bcdc6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bcdc6:	7c00      	ldrb	r0, [r0, #16]
   bcdc8:	2100      	movs	r1, #0
   bcdca:	f7fc bedd 	b.w	b9b88 <hal_i2c_available>

000bcdce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bcdce:	7c00      	ldrb	r0, [r0, #16]
   bcdd0:	2100      	movs	r1, #0
   bcdd2:	f7fc bee1 	b.w	b9b98 <hal_i2c_read>

000bcdd6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bcdd6:	7c00      	ldrb	r0, [r0, #16]
   bcdd8:	2100      	movs	r1, #0
   bcdda:	f7fc bee5 	b.w	b9ba8 <hal_i2c_peek>

000bcdde <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bcdde:	7c00      	ldrb	r0, [r0, #16]
   bcde0:	2100      	movs	r1, #0
   bcde2:	f7fc bee9 	b.w	b9bb8 <hal_i2c_flush>

000bcde6 <_ZN7TwoWireD0Ev>:
   bcde6:	b510      	push	{r4, lr}
   bcde8:	2114      	movs	r1, #20
   bcdea:	4604      	mov	r4, r0
   bcdec:	f7f7 f957 	bl	b409e <_ZdlPvj>
   bcdf0:	4620      	mov	r0, r4
   bcdf2:	bd10      	pop	{r4, pc}

000bcdf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bcdf4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bcdf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcdfa:	4604      	mov	r4, r0
   bcdfc:	4608      	mov	r0, r1
   bcdfe:	2100      	movs	r1, #0
   bce00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bce04:	4b03      	ldr	r3, [pc, #12]	; (bce14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bce06:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bce08:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bce0a:	4611      	mov	r1, r2
   bce0c:	f7fc fee4 	bl	b9bd8 <hal_i2c_init>
}
   bce10:	4620      	mov	r0, r4
   bce12:	bd10      	pop	{r4, pc}
   bce14:	000c1fc8 	.word	0x000c1fc8

000bce18 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bce18:	7c00      	ldrb	r0, [r0, #16]
   bce1a:	2200      	movs	r2, #0
   bce1c:	f7fc be8c 	b.w	b9b38 <hal_i2c_set_speed>

000bce20 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bce20:	2300      	movs	r3, #0
   bce22:	7c00      	ldrb	r0, [r0, #16]
   bce24:	461a      	mov	r2, r3
   bce26:	4619      	mov	r1, r3
   bce28:	f7fc be8e 	b.w	b9b48 <hal_i2c_begin>

000bce2c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bce2c:	7c00      	ldrb	r0, [r0, #16]
   bce2e:	2200      	movs	r2, #0
   bce30:	f7fc be92 	b.w	b9b58 <hal_i2c_begin_transmission>

000bce34 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bce34:	7c00      	ldrb	r0, [r0, #16]
   bce36:	2200      	movs	r2, #0
   bce38:	f7fc be96 	b.w	b9b68 <hal_i2c_end_transmission>

000bce3c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bce3c:	2101      	movs	r1, #1
   bce3e:	f7ff bff9 	b.w	bce34 <_ZN7TwoWire15endTransmissionEh>

000bce42 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bce42:	4700      	bx	r0

000bce44 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bce44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bce48:	2400      	movs	r4, #0
{
   bce4a:	461d      	mov	r5, r3
   bce4c:	460f      	mov	r7, r1
   bce4e:	4690      	mov	r8, r2
   bce50:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bce52:	f7fc fe61 	bl	b9b18 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bce56:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bce58:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bce5c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bce60:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bce64:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bce68:	bfa2      	ittt	ge
   bce6a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bce6e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bce72:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bce74:	4907      	ldr	r1, [pc, #28]	; (bce94 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bce76:	9400      	str	r4, [sp, #0]
   bce78:	4643      	mov	r3, r8
   bce7a:	463a      	mov	r2, r7
   bce7c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bce7e:	bfa8      	it	ge
   bce80:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bce84:	f7fc fe40 	bl	b9b08 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bce88:	fab0 f080 	clz	r0, r0
   bce8c:	0940      	lsrs	r0, r0, #5
   bce8e:	b004      	add	sp, #16
   bce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bce94:	000bce43 	.word	0x000bce43

000bce98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bce98:	4770      	bx	lr

000bce9a <_ZN9IPAddressD0Ev>:
   bce9a:	b510      	push	{r4, lr}
   bce9c:	2118      	movs	r1, #24
   bce9e:	4604      	mov	r4, r0
   bcea0:	f7f7 f8fd 	bl	b409e <_ZdlPvj>
   bcea4:	4620      	mov	r0, r4
   bcea6:	bd10      	pop	{r4, pc}

000bcea8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bcea8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bceaa:	7d03      	ldrb	r3, [r0, #20]
   bceac:	2b06      	cmp	r3, #6
{
   bceae:	b08d      	sub	sp, #52	; 0x34
   bceb0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bceb2:	f100 0704 	add.w	r7, r0, #4
   bceb6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bceba:	d012      	beq.n	bcee2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bcebc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bcec0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bcec4:	220a      	movs	r2, #10
   bcec6:	4630      	mov	r0, r6
   bcec8:	f000 f94b 	bl	bd162 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bcecc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bcece:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bced0:	d019      	beq.n	bcf06 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bced2:	2c00      	cmp	r4, #0
   bced4:	d0f4      	beq.n	bcec0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bced6:	212e      	movs	r1, #46	; 0x2e
   bced8:	4630      	mov	r0, r6
   bceda:	f000 f929 	bl	bd130 <_ZN5Print5printEc>
   bcede:	4404      	add	r4, r0
   bcee0:	e7ee      	b.n	bcec0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcee2:	232f      	movs	r3, #47	; 0x2f
   bcee4:	466a      	mov	r2, sp
   bcee6:	4639      	mov	r1, r7
   bcee8:	200a      	movs	r0, #10
		buf[0] = 0;
   bceea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bceee:	f7fc fe7b 	bl	b9be8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bcef2:	4668      	mov	r0, sp
   bcef4:	f001 fe9f 	bl	bec36 <strlen>
   bcef8:	6833      	ldr	r3, [r6, #0]
   bcefa:	4602      	mov	r2, r0
   bcefc:	68db      	ldr	r3, [r3, #12]
   bcefe:	4669      	mov	r1, sp
   bcf00:	4630      	mov	r0, r6
   bcf02:	4798      	blx	r3
   bcf04:	4604      	mov	r4, r0
    }
    return n;
}
   bcf06:	4620      	mov	r0, r4
   bcf08:	b00d      	add	sp, #52	; 0x34
   bcf0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bcf0c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bcf0c:	b510      	push	{r4, lr}
   bcf0e:	4b05      	ldr	r3, [pc, #20]	; (bcf24 <_ZN9IPAddressC1Ev+0x18>)
   bcf10:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bcf12:	2211      	movs	r2, #17
   bcf14:	f840 3b04 	str.w	r3, [r0], #4
   bcf18:	2100      	movs	r1, #0
   bcf1a:	f001 fdd8 	bl	beace <memset>
}
   bcf1e:	4620      	mov	r0, r4
   bcf20:	bd10      	pop	{r4, pc}
   bcf22:	bf00      	nop
   bcf24:	000c1ff0 	.word	0x000c1ff0

000bcf28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bcf28:	4603      	mov	r3, r0
   bcf2a:	4a07      	ldr	r2, [pc, #28]	; (bcf48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bcf2c:	b510      	push	{r4, lr}
   bcf2e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bcf32:	f101 0210 	add.w	r2, r1, #16
   bcf36:	f851 4b04 	ldr.w	r4, [r1], #4
   bcf3a:	f843 4b04 	str.w	r4, [r3], #4
   bcf3e:	4291      	cmp	r1, r2
   bcf40:	d1f9      	bne.n	bcf36 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bcf42:	780a      	ldrb	r2, [r1, #0]
   bcf44:	701a      	strb	r2, [r3, #0]
}
   bcf46:	bd10      	pop	{r4, pc}
   bcf48:	000c1ff0 	.word	0x000c1ff0

000bcf4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bcf4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bcf4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bcf52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bcf56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bcf5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bcf5e:	2304      	movs	r3, #4
   bcf60:	6041      	str	r1, [r0, #4]
   bcf62:	7503      	strb	r3, [r0, #20]
}
   bcf64:	bd10      	pop	{r4, pc}
	...

000bcf68 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bcf68:	b507      	push	{r0, r1, r2, lr}
   bcf6a:	4b06      	ldr	r3, [pc, #24]	; (bcf84 <_ZN9IPAddressC1EPKh+0x1c>)
   bcf6c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bcf6e:	78cb      	ldrb	r3, [r1, #3]
   bcf70:	9300      	str	r3, [sp, #0]
   bcf72:	788b      	ldrb	r3, [r1, #2]
   bcf74:	784a      	ldrb	r2, [r1, #1]
   bcf76:	7809      	ldrb	r1, [r1, #0]
   bcf78:	f7ff ffe8 	bl	bcf4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bcf7c:	b003      	add	sp, #12
   bcf7e:	f85d fb04 	ldr.w	pc, [sp], #4
   bcf82:	bf00      	nop
   bcf84:	000c1ff0 	.word	0x000c1ff0

000bcf88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bcf88:	4b01      	ldr	r3, [pc, #4]	; (bcf90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bcf8a:	4a02      	ldr	r2, [pc, #8]	; (bcf94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bcf8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bcf8e:	4770      	bx	lr
   bcf90:	2003e698 	.word	0x2003e698
   bcf94:	000c1ffc 	.word	0x000c1ffc

000bcf98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcf98:	2300      	movs	r3, #0
   bcf9a:	6840      	ldr	r0, [r0, #4]
   bcf9c:	461a      	mov	r2, r3
   bcf9e:	f7fc bf97 	b.w	b9ed0 <network_connect>

000bcfa2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcfa2:	6840      	ldr	r0, [r0, #4]
   bcfa4:	2200      	movs	r2, #0
   bcfa6:	2102      	movs	r1, #2
   bcfa8:	f7fc bfa2 	b.w	b9ef0 <network_disconnect>

000bcfac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcfac:	2200      	movs	r2, #0
   bcfae:	6840      	ldr	r0, [r0, #4]
   bcfb0:	4611      	mov	r1, r2
   bcfb2:	f7fc bf95 	b.w	b9ee0 <network_connecting>

000bcfb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcfb6:	2200      	movs	r2, #0
   bcfb8:	6840      	ldr	r0, [r0, #4]
   bcfba:	4611      	mov	r1, r2
   bcfbc:	f7fc bfa0 	b.w	b9f00 <network_ready>

000bcfc0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcfc0:	2300      	movs	r3, #0
   bcfc2:	6840      	ldr	r0, [r0, #4]
   bcfc4:	461a      	mov	r2, r3
   bcfc6:	4619      	mov	r1, r3
   bcfc8:	f7fc bfa2 	b.w	b9f10 <network_on>

000bcfcc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcfcc:	2300      	movs	r3, #0
   bcfce:	6840      	ldr	r0, [r0, #4]
   bcfd0:	461a      	mov	r2, r3
   bcfd2:	4619      	mov	r1, r3
   bcfd4:	f7fc bfa4 	b.w	b9f20 <network_off>

000bcfd8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcfd8:	6840      	ldr	r0, [r0, #4]
   bcfda:	2100      	movs	r1, #0
   bcfdc:	f7fc bfc8 	b.w	b9f70 <network_is_on>

000bcfe0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bcfe0:	6840      	ldr	r0, [r0, #4]
   bcfe2:	2100      	movs	r1, #0
   bcfe4:	f7fc bfcc 	b.w	b9f80 <network_is_off>

000bcfe8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bcfe8:	6840      	ldr	r0, [r0, #4]
   bcfea:	2200      	movs	r2, #0
   bcfec:	f081 0101 	eor.w	r1, r1, #1
   bcff0:	f7fc bf9e 	b.w	b9f30 <network_listen>

000bcff4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bcff4:	6840      	ldr	r0, [r0, #4]
   bcff6:	2200      	movs	r2, #0
   bcff8:	f7fc bfaa 	b.w	b9f50 <network_set_listen_timeout>

000bcffc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bcffc:	2200      	movs	r2, #0
   bcffe:	6840      	ldr	r0, [r0, #4]
   bd000:	4611      	mov	r1, r2
   bd002:	f7fc bfad 	b.w	b9f60 <network_get_listen_timeout>

000bd006 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd006:	2200      	movs	r2, #0
   bd008:	6840      	ldr	r0, [r0, #4]
   bd00a:	4611      	mov	r1, r2
   bd00c:	f7fc bf98 	b.w	b9f40 <network_listening>

000bd010 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd014:	b095      	sub	sp, #84	; 0x54
   bd016:	4614      	mov	r4, r2
   bd018:	460d      	mov	r5, r1
   bd01a:	4607      	mov	r7, r0
    IPAddress addr;
   bd01c:	f7ff ff76 	bl	bcf0c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd020:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd022:	221c      	movs	r2, #28
   bd024:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd026:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd028:	f001 fd51 	bl	beace <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd02c:	2340      	movs	r3, #64	; 0x40
   bd02e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd030:	4620      	mov	r0, r4
   bd032:	466b      	mov	r3, sp
   bd034:	aa0c      	add	r2, sp, #48	; 0x30
   bd036:	2100      	movs	r1, #0
   bd038:	f7fc fde6 	bl	b9c08 <netdb_getaddrinfo>
    if (!r) {
   bd03c:	4604      	mov	r4, r0
   bd03e:	2800      	cmp	r0, #0
   bd040:	d14b      	bne.n	bd0da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd042:	4602      	mov	r2, r0
   bd044:	2101      	movs	r1, #1
   bd046:	6868      	ldr	r0, [r5, #4]
   bd048:	f7fc ff5a 	bl	b9f00 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd04c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd04e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd050:	4622      	mov	r2, r4
   bd052:	6868      	ldr	r0, [r5, #4]
   bd054:	f7fc ff54 	bl	b9f00 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd058:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd05a:	4681      	mov	r9, r0
        bool ok = false;
   bd05c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd05e:	2e00      	cmp	r6, #0
   bd060:	d03b      	beq.n	bd0da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd062:	2900      	cmp	r1, #0
   bd064:	d139      	bne.n	bd0da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd066:	6873      	ldr	r3, [r6, #4]
   bd068:	2b02      	cmp	r3, #2
   bd06a:	d003      	beq.n	bd074 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd06c:	2b0a      	cmp	r3, #10
   bd06e:	d011      	beq.n	bd094 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd070:	69f6      	ldr	r6, [r6, #28]
   bd072:	e7f4      	b.n	bd05e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd074:	f1b8 0f00 	cmp.w	r8, #0
   bd078:	d0fa      	beq.n	bd070 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd07a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd07c:	a806      	add	r0, sp, #24
   bd07e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd080:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd082:	f7ff ff71 	bl	bcf68 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd088:	1d3c      	adds	r4, r7, #4
   bd08a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd08c:	682b      	ldr	r3, [r5, #0]
   bd08e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd090:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd092:	e7ed      	b.n	bd070 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd094:	f1b9 0f00 	cmp.w	r9, #0
   bd098:	d0ea      	beq.n	bd070 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd09a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd09c:	2210      	movs	r2, #16
   bd09e:	a801      	add	r0, sp, #4
   bd0a0:	f001 fd15 	bl	beace <memset>
                    a.v = 6;
   bd0a4:	2306      	movs	r3, #6
   bd0a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd0aa:	ad01      	add	r5, sp, #4
   bd0ac:	f104 0308 	add.w	r3, r4, #8
   bd0b0:	3418      	adds	r4, #24
   bd0b2:	6818      	ldr	r0, [r3, #0]
   bd0b4:	6859      	ldr	r1, [r3, #4]
   bd0b6:	462a      	mov	r2, r5
   bd0b8:	c203      	stmia	r2!, {r0, r1}
   bd0ba:	3308      	adds	r3, #8
   bd0bc:	42a3      	cmp	r3, r4
   bd0be:	4615      	mov	r5, r2
   bd0c0:	d1f7      	bne.n	bd0b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd0c2:	a901      	add	r1, sp, #4
   bd0c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd0c6:	ad07      	add	r5, sp, #28
   bd0c8:	f7ff ff2e 	bl	bcf28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd0cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd0ce:	1d3c      	adds	r4, r7, #4
   bd0d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd0d2:	682b      	ldr	r3, [r5, #0]
   bd0d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd0d6:	4649      	mov	r1, r9
   bd0d8:	e7ca      	b.n	bd070 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd0da:	9800      	ldr	r0, [sp, #0]
   bd0dc:	f7fc fd8c 	bl	b9bf8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd0e0:	4638      	mov	r0, r7
   bd0e2:	b015      	add	sp, #84	; 0x54
   bd0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd0e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd0e8:	4b02      	ldr	r3, [pc, #8]	; (bd0f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd0ea:	4a03      	ldr	r2, [pc, #12]	; (bd0f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd0ec:	601a      	str	r2, [r3, #0]
   bd0ee:	2200      	movs	r2, #0
   bd0f0:	605a      	str	r2, [r3, #4]

} // spark
   bd0f2:	4770      	bx	lr
   bd0f4:	2003e69c 	.word	0x2003e69c
   bd0f8:	000c2008 	.word	0x000c2008

000bd0fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd0fe:	4606      	mov	r6, r0
   bd100:	460d      	mov	r5, r1
  size_t n = 0;
   bd102:	188f      	adds	r7, r1, r2
   bd104:	2400      	movs	r4, #0
  while (size--) {
   bd106:	42bd      	cmp	r5, r7
   bd108:	d00c      	beq.n	bd124 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd10a:	6833      	ldr	r3, [r6, #0]
   bd10c:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd110:	689b      	ldr	r3, [r3, #8]
   bd112:	4630      	mov	r0, r6
   bd114:	4798      	blx	r3
     if (chunk>=0)
   bd116:	1e03      	subs	r3, r0, #0
   bd118:	db01      	blt.n	bd11e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd11a:	441c      	add	r4, r3
  while (size--) {
   bd11c:	e7f3      	b.n	bd106 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd11e:	2c00      	cmp	r4, #0
   bd120:	bf08      	it	eq
   bd122:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd124:	4620      	mov	r0, r4
   bd126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd128 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd128:	b508      	push	{r3, lr}
  return write(str);
   bd12a:	f7fa fe81 	bl	b7e30 <_ZN5Print5writeEPKc>
}
   bd12e:	bd08      	pop	{r3, pc}

000bd130 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd130:	6803      	ldr	r3, [r0, #0]
   bd132:	689b      	ldr	r3, [r3, #8]
   bd134:	4718      	bx	r3

000bd136 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd136:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd138:	210d      	movs	r1, #13
{
   bd13a:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd13c:	f7ff fff8 	bl	bd130 <_ZN5Print5printEc>
  n += print('\n');
   bd140:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd142:	4604      	mov	r4, r0
  n += print('\n');
   bd144:	4628      	mov	r0, r5
   bd146:	f7ff fff3 	bl	bd130 <_ZN5Print5printEc>
  return n;
}
   bd14a:	4420      	add	r0, r4
   bd14c:	bd38      	pop	{r3, r4, r5, pc}

000bd14e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bd14e:	b538      	push	{r3, r4, r5, lr}
   bd150:	4605      	mov	r5, r0
  return write(str);
   bd152:	f7fa fe6d 	bl	b7e30 <_ZN5Print5writeEPKc>
   bd156:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bd158:	4628      	mov	r0, r5
   bd15a:	f7ff ffec 	bl	bd136 <_ZN5Print7printlnEv>
  return n;
}
   bd15e:	4420      	add	r0, r4
   bd160:	bd38      	pop	{r3, r4, r5, pc}

000bd162 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd162:	b530      	push	{r4, r5, lr}
   bd164:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd166:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd168:	2a01      	cmp	r2, #1
  *str = '\0';
   bd16a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd16e:	bf98      	it	ls
   bd170:	220a      	movls	r2, #10
   bd172:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd174:	460d      	mov	r5, r1
   bd176:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd17a:	fb01 5312 	mls	r3, r1, r2, r5
   bd17e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd182:	2b09      	cmp	r3, #9
   bd184:	bf94      	ite	ls
   bd186:	3330      	addls	r3, #48	; 0x30
   bd188:	3337      	addhi	r3, #55	; 0x37
   bd18a:	b2db      	uxtb	r3, r3
  } while(n);
   bd18c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd18e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd192:	d9ef      	bls.n	bd174 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd194:	4621      	mov	r1, r4
   bd196:	f7fa fe4b 	bl	b7e30 <_ZN5Print5writeEPKc>
}
   bd19a:	b00b      	add	sp, #44	; 0x2c
   bd19c:	bd30      	pop	{r4, r5, pc}

000bd19e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd1a2:	b086      	sub	sp, #24
   bd1a4:	af00      	add	r7, sp, #0
   bd1a6:	4605      	mov	r5, r0
   bd1a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd1aa:	1d38      	adds	r0, r7, #4
   bd1ac:	2114      	movs	r1, #20
{
   bd1ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd1b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd1b2:	f7fc ff1d 	bl	b9ff0 <vsnprintf>

    if (n<bufsize)
   bd1b6:	2813      	cmp	r0, #19
   bd1b8:	d80e      	bhi.n	bd1d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd1ba:	1d39      	adds	r1, r7, #4
   bd1bc:	4628      	mov	r0, r5
   bd1be:	f7fa fe37 	bl	b7e30 <_ZN5Print5writeEPKc>
   bd1c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd1c4:	b11e      	cbz	r6, bd1ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd1c6:	4628      	mov	r0, r5
   bd1c8:	f7ff ffb5 	bl	bd136 <_ZN5Print7printlnEv>
   bd1cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd1ce:	4620      	mov	r0, r4
   bd1d0:	3718      	adds	r7, #24
   bd1d2:	46bd      	mov	sp, r7
   bd1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd1d8:	f100 0308 	add.w	r3, r0, #8
   bd1dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd1e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd1e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd1e6:	4622      	mov	r2, r4
   bd1e8:	1c41      	adds	r1, r0, #1
   bd1ea:	683b      	ldr	r3, [r7, #0]
   bd1ec:	4668      	mov	r0, sp
   bd1ee:	f7fc feff 	bl	b9ff0 <vsnprintf>
  return write(str);
   bd1f2:	4669      	mov	r1, sp
   bd1f4:	4628      	mov	r0, r5
   bd1f6:	f7fa fe1b 	bl	b7e30 <_ZN5Print5writeEPKc>
   bd1fa:	4604      	mov	r4, r0
   bd1fc:	46c5      	mov	sp, r8
   bd1fe:	e7e1      	b.n	bd1c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd200 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd200:	b510      	push	{r4, lr}
  if (0 == max) {
   bd202:	4604      	mov	r4, r0
   bd204:	b128      	cbz	r0, bd212 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd206:	f001 fc99 	bl	beb3c <rand>
   bd20a:	fb90 f3f4 	sdiv	r3, r0, r4
   bd20e:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd212:	4620      	mov	r0, r4
   bd214:	bd10      	pop	{r4, pc}
	...

000bd218 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd218:	4b01      	ldr	r3, [pc, #4]	; (bd220 <_GLOBAL__sub_I_RGB+0x8>)
   bd21a:	2200      	movs	r2, #0
   bd21c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd21e:	4770      	bx	lr
   bd220:	2003e6a4 	.word	0x2003e6a4

000bd224 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd224:	2100      	movs	r1, #0
   bd226:	f7fc bd3f 	b.w	b9ca8 <hal_spi_release>

000bd22a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd22a:	2100      	movs	r1, #0
   bd22c:	f7fc bd34 	b.w	b9c98 <hal_spi_acquire>

000bd230 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd230:	b510      	push	{r4, lr}
   bd232:	4604      	mov	r4, r0
   bd234:	4608      	mov	r0, r1
{
    _spi = spi;
   bd236:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd238:	f7fc fcfe 	bl	b9c38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd23c:	2300      	movs	r3, #0
   bd23e:	6063      	str	r3, [r4, #4]
}
   bd240:	4620      	mov	r0, r4
   bd242:	bd10      	pop	{r4, pc}

000bd244 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd244:	b513      	push	{r0, r1, r4, lr}
   bd246:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd248:	7800      	ldrb	r0, [r0, #0]
   bd24a:	f7ff ffee 	bl	bd22a <_ZN8SPIClass4lockEv.isra.0>
   bd24e:	b958      	cbnz	r0, bd268 <_ZN8SPIClass5beginEv+0x24>
   bd250:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd252:	9001      	str	r0, [sp, #4]
   bd254:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd258:	f7fc fcde 	bl	b9c18 <hal_spi_begin>
        unlock();
   bd25c:	9801      	ldr	r0, [sp, #4]
    }
}
   bd25e:	b002      	add	sp, #8
   bd260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd264:	f7ff bfde 	b.w	bd224 <_ZN8SPIClass6unlockEv.isra.0>
   bd268:	b002      	add	sp, #8
   bd26a:	bd10      	pop	{r4, pc}

000bd26c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd26c:	7800      	ldrb	r0, [r0, #0]
   bd26e:	f7ff bfd9 	b.w	bd224 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd274 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd274:	0840      	lsrs	r0, r0, #1
{
   bd276:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd278:	6018      	str	r0, [r3, #0]
   bd27a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd27c:	6818      	ldr	r0, [r3, #0]
   bd27e:	4288      	cmp	r0, r1
   bd280:	b2e5      	uxtb	r5, r4
   bd282:	d906      	bls.n	bd292 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd284:	3401      	adds	r4, #1
   bd286:	2c08      	cmp	r4, #8
   bd288:	d002      	beq.n	bd290 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd28a:	0840      	lsrs	r0, r0, #1
   bd28c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd28e:	e7f5      	b.n	bd27c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd290:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd292:	4b02      	ldr	r3, [pc, #8]	; (bd29c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd294:	5d5b      	ldrb	r3, [r3, r5]
   bd296:	7013      	strb	r3, [r2, #0]
}
   bd298:	bd30      	pop	{r4, r5, pc}
   bd29a:	bf00      	nop
   bd29c:	000c203c 	.word	0x000c203c

000bd2a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd2a4:	4606      	mov	r6, r0
   bd2a6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd2a8:	7800      	ldrb	r0, [r0, #0]
{
   bd2aa:	460c      	mov	r4, r1
    CHECK(lock());
   bd2ac:	f7ff ffbd 	bl	bd22a <_ZN8SPIClass4lockEv.isra.0>
   bd2b0:	2800      	cmp	r0, #0
   bd2b2:	db1b      	blt.n	bd2ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd2b4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd2b6:	2214      	movs	r2, #20
   bd2b8:	2100      	movs	r1, #0
   bd2ba:	a809      	add	r0, sp, #36	; 0x24
   bd2bc:	f001 fc07 	bl	beace <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bd2c0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bd2c2:	2200      	movs	r2, #0
   bd2c4:	a909      	add	r1, sp, #36	; 0x24
   bd2c6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bd2c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bd2cc:	f7fc fcc4 	bl	b9c58 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bd2d0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bd2d4:	b113      	cbz	r3, bd2dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bd2d6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bd2da:	b155      	cbz	r5, bd2f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bd2dc:	2700      	movs	r7, #0
   bd2de:	46b9      	mov	r9, r7
   bd2e0:	46b8      	mov	r8, r7
   bd2e2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bd2e4:	7923      	ldrb	r3, [r4, #4]
   bd2e6:	b15d      	cbz	r5, bd300 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bd2e8:	b1c3      	cbz	r3, bd31c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bd2ea:	2000      	movs	r0, #0
}
   bd2ec:	b00f      	add	sp, #60	; 0x3c
   bd2ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bd2f2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bd2f6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bd2fa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bd2fe:	e7f1      	b.n	bd2e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bd300:	2b00      	cmp	r3, #0
   bd302:	d135      	bne.n	bd370 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bd304:	68a3      	ldr	r3, [r4, #8]
   bd306:	4543      	cmp	r3, r8
   bd308:	d108      	bne.n	bd31c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bd30a:	f88d 9020 	strb.w	r9, [sp, #32]
   bd30e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd312:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd316:	89a3      	ldrh	r3, [r4, #12]
   bd318:	429a      	cmp	r2, r3
   bd31a:	d0e6      	beq.n	bd2ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bd31c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd31e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bd320:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd324:	980a      	ldr	r0, [sp, #40]	; 0x28
   bd326:	ab04      	add	r3, sp, #16
   bd328:	f10d 020f 	add.w	r2, sp, #15
   bd32c:	f7ff ffa2 	bl	bd274 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bd330:	7921      	ldrb	r1, [r4, #4]
   bd332:	b985      	cbnz	r5, bd356 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd334:	b989      	cbnz	r1, bd35a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd336:	68a3      	ldr	r3, [r4, #8]
   bd338:	4543      	cmp	r3, r8
   bd33a:	d30e      	bcc.n	bd35a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd33c:	f88d 9020 	strb.w	r9, [sp, #32]
   bd340:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd344:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd348:	89a3      	ldrh	r3, [r4, #12]
   bd34a:	429a      	cmp	r2, r3
   bd34c:	d105      	bne.n	bd35a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd34e:	9b04      	ldr	r3, [sp, #16]
   bd350:	4543      	cmp	r3, r8
   bd352:	d102      	bne.n	bd35a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd354:	e7c9      	b.n	bd2ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd356:	2900      	cmp	r1, #0
   bd358:	d1f9      	bne.n	bd34e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd35a:	2300      	movs	r3, #0
   bd35c:	9301      	str	r3, [sp, #4]
   bd35e:	7b63      	ldrb	r3, [r4, #13]
   bd360:	9300      	str	r3, [sp, #0]
   bd362:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd366:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd368:	7830      	ldrb	r0, [r6, #0]
   bd36a:	f7fc fc8d 	bl	b9c88 <hal_spi_set_settings>
   bd36e:	e7bc      	b.n	bd2ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd370:	e9cd 5500 	strd	r5, r5, [sp]
   bd374:	462b      	mov	r3, r5
   bd376:	462a      	mov	r2, r5
   bd378:	2101      	movs	r1, #1
   bd37a:	e7f5      	b.n	bd368 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd37c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd37c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd37e:	7800      	ldrb	r0, [r0, #0]
   bd380:	f7fc fc52 	bl	b9c28 <hal_spi_transfer>
}
   bd384:	b2c0      	uxtb	r0, r0
   bd386:	bd08      	pop	{r3, pc}

000bd388 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bd388:	b530      	push	{r4, r5, lr}
   bd38a:	b087      	sub	sp, #28
   bd38c:	4604      	mov	r4, r0
   bd38e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bd390:	9500      	str	r5, [sp, #0]
   bd392:	7800      	ldrb	r0, [r0, #0]
   bd394:	f7fc fc68 	bl	b9c68 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bd398:	b93d      	cbnz	r5, bd3aa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bd39a:	7820      	ldrb	r0, [r4, #0]
   bd39c:	a902      	add	r1, sp, #8
   bd39e:	f7fc fc6b 	bl	b9c78 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bd3a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd3a6:	07db      	lsls	r3, r3, #31
   bd3a8:	d4f7      	bmi.n	bd39a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bd3aa:	b007      	add	sp, #28
   bd3ac:	bd30      	pop	{r4, r5, pc}

000bd3ae <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bd3ae:	b510      	push	{r4, lr}
   bd3b0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bd3b2:	f7fc fb71 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bd3b6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bd3b8:	6823      	ldr	r3, [r4, #0]
   bd3ba:	4620      	mov	r0, r4
   bd3bc:	695b      	ldr	r3, [r3, #20]
   bd3be:	4798      	blx	r3
    if (c >= 0) return c;
   bd3c0:	2800      	cmp	r0, #0
   bd3c2:	da08      	bge.n	bd3d6 <_ZN6Stream9timedReadEv+0x28>
   bd3c4:	f7fc fb68 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bd3c8:	68e3      	ldr	r3, [r4, #12]
   bd3ca:	1ac0      	subs	r0, r0, r3
   bd3cc:	68a3      	ldr	r3, [r4, #8]
   bd3ce:	4298      	cmp	r0, r3
   bd3d0:	d3f2      	bcc.n	bd3b8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bd3d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd3d6:	bd10      	pop	{r4, pc}

000bd3d8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bd3d8:	b570      	push	{r4, r5, r6, lr}
   bd3da:	460d      	mov	r5, r1
  String ret;
   bd3dc:	4909      	ldr	r1, [pc, #36]	; (bd404 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bd3de:	4604      	mov	r4, r0
   bd3e0:	4616      	mov	r6, r2
  String ret;
   bd3e2:	f000 f85c 	bl	bd49e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bd3e6:	4628      	mov	r0, r5
   bd3e8:	f7ff ffe1 	bl	bd3ae <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bd3ec:	2800      	cmp	r0, #0
   bd3ee:	db06      	blt.n	bd3fe <_ZN6Stream15readStringUntilEc+0x26>
   bd3f0:	4286      	cmp	r6, r0
   bd3f2:	d004      	beq.n	bd3fe <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bd3f4:	b2c1      	uxtb	r1, r0
   bd3f6:	4620      	mov	r0, r4
   bd3f8:	f000 f8d0 	bl	bd59c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bd3fc:	e7f3      	b.n	bd3e6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bd3fe:	4620      	mov	r0, r4
   bd400:	bd70      	pop	{r4, r5, r6, pc}
   bd402:	bf00      	nop
   bd404:	000c1166 	.word	0x000c1166

000bd408 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd408:	b510      	push	{r4, lr}
   bd40a:	4604      	mov	r4, r0
{
	free(buffer);
   bd40c:	6800      	ldr	r0, [r0, #0]
   bd40e:	f7fc fdc7 	bl	b9fa0 <free>
}
   bd412:	4620      	mov	r0, r4
   bd414:	bd10      	pop	{r4, pc}

000bd416 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd416:	b510      	push	{r4, lr}
   bd418:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd41a:	6800      	ldr	r0, [r0, #0]
   bd41c:	b108      	cbz	r0, bd422 <_ZN6String10invalidateEv+0xc>
   bd41e:	f7fc fdbf 	bl	b9fa0 <free>
	buffer = NULL;
   bd422:	2300      	movs	r3, #0
	capacity = len = 0;
   bd424:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd428:	6023      	str	r3, [r4, #0]
}
   bd42a:	bd10      	pop	{r4, pc}

000bd42c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd42c:	b538      	push	{r3, r4, r5, lr}
   bd42e:	4604      	mov	r4, r0
   bd430:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd432:	6800      	ldr	r0, [r0, #0]
   bd434:	3101      	adds	r1, #1
   bd436:	f7fc fdbb 	bl	b9fb0 <realloc>
	if (newbuffer) {
   bd43a:	b110      	cbz	r0, bd442 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd43c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd440:	2001      	movs	r0, #1
	}
	return 0;
}
   bd442:	bd38      	pop	{r3, r4, r5, pc}

000bd444 <_ZN6String7reserveEj>:
{
   bd444:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd446:	6803      	ldr	r3, [r0, #0]
{
   bd448:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd44a:	b123      	cbz	r3, bd456 <_ZN6String7reserveEj+0x12>
   bd44c:	6843      	ldr	r3, [r0, #4]
   bd44e:	428b      	cmp	r3, r1
   bd450:	d301      	bcc.n	bd456 <_ZN6String7reserveEj+0x12>
   bd452:	2001      	movs	r0, #1
}
   bd454:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd456:	4620      	mov	r0, r4
   bd458:	f7ff ffe8 	bl	bd42c <_ZN6String12changeBufferEj>
   bd45c:	2800      	cmp	r0, #0
   bd45e:	d0f9      	beq.n	bd454 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd460:	68a3      	ldr	r3, [r4, #8]
   bd462:	2b00      	cmp	r3, #0
   bd464:	d1f5      	bne.n	bd452 <_ZN6String7reserveEj+0xe>
   bd466:	6822      	ldr	r2, [r4, #0]
   bd468:	7013      	strb	r3, [r2, #0]
   bd46a:	e7f2      	b.n	bd452 <_ZN6String7reserveEj+0xe>

000bd46c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd46e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd470:	4611      	mov	r1, r2
   bd472:	9201      	str	r2, [sp, #4]
{
   bd474:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd476:	f7ff ffe5 	bl	bd444 <_ZN6String7reserveEj>
   bd47a:	9a01      	ldr	r2, [sp, #4]
   bd47c:	b928      	cbnz	r0, bd48a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd47e:	4620      	mov	r0, r4
   bd480:	f7ff ffc9 	bl	bd416 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd484:	4620      	mov	r0, r4
   bd486:	b003      	add	sp, #12
   bd488:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd48a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd48c:	4629      	mov	r1, r5
   bd48e:	6820      	ldr	r0, [r4, #0]
   bd490:	f001 faf5 	bl	bea7e <memcpy>
	buffer[len] = 0;
   bd494:	6822      	ldr	r2, [r4, #0]
   bd496:	68a3      	ldr	r3, [r4, #8]
   bd498:	2100      	movs	r1, #0
   bd49a:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd49c:	e7f2      	b.n	bd484 <_ZN6String4copyEPKcj+0x18>

000bd49e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd49e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd4a0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd4a2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd4a6:	4604      	mov	r4, r0
	len = 0;
   bd4a8:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd4aa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd4ac:	b141      	cbz	r1, bd4c0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd4ae:	4608      	mov	r0, r1
   bd4b0:	9101      	str	r1, [sp, #4]
   bd4b2:	f001 fbc0 	bl	bec36 <strlen>
   bd4b6:	9901      	ldr	r1, [sp, #4]
   bd4b8:	4602      	mov	r2, r0
   bd4ba:	4620      	mov	r0, r4
   bd4bc:	f7ff ffd6 	bl	bd46c <_ZN6String4copyEPKcj>
}
   bd4c0:	4620      	mov	r0, r4
   bd4c2:	b002      	add	sp, #8
   bd4c4:	bd10      	pop	{r4, pc}

000bd4c6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd4c6:	b538      	push	{r3, r4, r5, lr}
   bd4c8:	4605      	mov	r5, r0
	if (buffer) {
   bd4ca:	6800      	ldr	r0, [r0, #0]
{
   bd4cc:	460c      	mov	r4, r1
	if (buffer) {
   bd4ce:	b168      	cbz	r0, bd4ec <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd4d0:	686a      	ldr	r2, [r5, #4]
   bd4d2:	688b      	ldr	r3, [r1, #8]
   bd4d4:	429a      	cmp	r2, r3
   bd4d6:	d307      	bcc.n	bd4e8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd4d8:	6809      	ldr	r1, [r1, #0]
   bd4da:	f001 fb86 	bl	bebea <strcpy>
			len = rhs.len;
   bd4de:	68a3      	ldr	r3, [r4, #8]
   bd4e0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd4e2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd4e4:	60a3      	str	r3, [r4, #8]
}
   bd4e6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd4e8:	f7fc fd5a 	bl	b9fa0 <free>
	buffer = rhs.buffer;
   bd4ec:	6823      	ldr	r3, [r4, #0]
   bd4ee:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd4f0:	6863      	ldr	r3, [r4, #4]
   bd4f2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd4f4:	68a3      	ldr	r3, [r4, #8]
   bd4f6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd4f8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd4fa:	e9c4 3300 	strd	r3, r3, [r4]
   bd4fe:	e7f1      	b.n	bd4e4 <_ZN6String4moveERS_+0x1e>

000bd500 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd500:	b510      	push	{r4, lr}
	buffer = NULL;
   bd502:	2300      	movs	r3, #0
	capacity = 0;
   bd504:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd508:	4604      	mov	r4, r0
	len = 0;
   bd50a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd50c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd50e:	f7ff ffda 	bl	bd4c6 <_ZN6String4moveERS_>
}
   bd512:	4620      	mov	r0, r4
   bd514:	bd10      	pop	{r4, pc}

000bd516 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd516:	4288      	cmp	r0, r1
{
   bd518:	b510      	push	{r4, lr}
   bd51a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd51c:	d005      	beq.n	bd52a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd51e:	680b      	ldr	r3, [r1, #0]
   bd520:	b12b      	cbz	r3, bd52e <_ZN6StringaSERKS_+0x18>
   bd522:	688a      	ldr	r2, [r1, #8]
   bd524:	4619      	mov	r1, r3
   bd526:	f7ff ffa1 	bl	bd46c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd52a:	4620      	mov	r0, r4
   bd52c:	bd10      	pop	{r4, pc}
	else invalidate();
   bd52e:	f7ff ff72 	bl	bd416 <_ZN6String10invalidateEv>
   bd532:	e7fa      	b.n	bd52a <_ZN6StringaSERKS_+0x14>

000bd534 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd534:	b510      	push	{r4, lr}
	buffer = NULL;
   bd536:	2300      	movs	r3, #0
String::String(const String &value)
   bd538:	4604      	mov	r4, r0
	capacity = 0;
   bd53a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd53e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd540:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd542:	f7ff ffe8 	bl	bd516 <_ZN6StringaSERKS_>
}
   bd546:	4620      	mov	r0, r4
   bd548:	bd10      	pop	{r4, pc}

000bd54a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd54a:	b513      	push	{r0, r1, r4, lr}
   bd54c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd54e:	b159      	cbz	r1, bd568 <_ZN6StringaSEPKc+0x1e>
   bd550:	4608      	mov	r0, r1
   bd552:	9101      	str	r1, [sp, #4]
   bd554:	f001 fb6f 	bl	bec36 <strlen>
   bd558:	9901      	ldr	r1, [sp, #4]
   bd55a:	4602      	mov	r2, r0
   bd55c:	4620      	mov	r0, r4
   bd55e:	f7ff ff85 	bl	bd46c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd562:	4620      	mov	r0, r4
   bd564:	b002      	add	sp, #8
   bd566:	bd10      	pop	{r4, pc}
	else invalidate();
   bd568:	f7ff ff55 	bl	bd416 <_ZN6String10invalidateEv>
   bd56c:	e7f9      	b.n	bd562 <_ZN6StringaSEPKc+0x18>

000bd56e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd56e:	b570      	push	{r4, r5, r6, lr}
   bd570:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd572:	460e      	mov	r6, r1
   bd574:	b909      	cbnz	r1, bd57a <_ZN6String6concatEPKcj+0xc>
   bd576:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd578:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd57a:	b16a      	cbz	r2, bd598 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd57c:	6884      	ldr	r4, [r0, #8]
   bd57e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd580:	4621      	mov	r1, r4
   bd582:	f7ff ff5f 	bl	bd444 <_ZN6String7reserveEj>
   bd586:	2800      	cmp	r0, #0
   bd588:	d0f5      	beq.n	bd576 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd58a:	6828      	ldr	r0, [r5, #0]
   bd58c:	68ab      	ldr	r3, [r5, #8]
   bd58e:	4631      	mov	r1, r6
   bd590:	4418      	add	r0, r3
   bd592:	f001 fb2a 	bl	bebea <strcpy>
	len = newlen;
   bd596:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd598:	2001      	movs	r0, #1
   bd59a:	e7ed      	b.n	bd578 <_ZN6String6concatEPKcj+0xa>

000bd59c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bd59c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bd59e:	2300      	movs	r3, #0
	buf[0] = c;
   bd5a0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bd5a4:	2201      	movs	r2, #1
   bd5a6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bd5a8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bd5ac:	f7ff ffdf 	bl	bd56e <_ZN6String6concatEPKcj>
}
   bd5b0:	b003      	add	sp, #12
   bd5b2:	f85d fb04 	ldr.w	pc, [sp], #4

000bd5b6 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bd5b6:	6802      	ldr	r2, [r0, #0]
{
   bd5b8:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bd5ba:	6809      	ldr	r1, [r1, #0]
   bd5bc:	b162      	cbz	r2, bd5d8 <_ZNK6String9compareToERKS_+0x22>
   bd5be:	b941      	cbnz	r1, bd5d2 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bd5c0:	6880      	ldr	r0, [r0, #8]
   bd5c2:	b160      	cbz	r0, bd5de <_ZNK6String9compareToERKS_+0x28>
   bd5c4:	7810      	ldrb	r0, [r2, #0]
   bd5c6:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd5c8:	6898      	ldr	r0, [r3, #8]
   bd5ca:	b140      	cbz	r0, bd5de <_ZNK6String9compareToERKS_+0x28>
   bd5cc:	7809      	ldrb	r1, [r1, #0]
   bd5ce:	4248      	negs	r0, r1
   bd5d0:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bd5d2:	4610      	mov	r0, r2
   bd5d4:	f001 baff 	b.w	bebd6 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd5d8:	2900      	cmp	r1, #0
   bd5da:	d1f5      	bne.n	bd5c8 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bd5dc:	4608      	mov	r0, r1
}
   bd5de:	4770      	bx	lr

000bd5e0 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bd5e0:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bd5e2:	6882      	ldr	r2, [r0, #8]
   bd5e4:	688b      	ldr	r3, [r1, #8]
   bd5e6:	429a      	cmp	r2, r3
   bd5e8:	d105      	bne.n	bd5f6 <_ZNK6String6equalsERKS_+0x16>
   bd5ea:	f7ff ffe4 	bl	bd5b6 <_ZNK6String9compareToERKS_>
   bd5ee:	fab0 f080 	clz	r0, r0
   bd5f2:	0940      	lsrs	r0, r0, #5
}
   bd5f4:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bd5f6:	2000      	movs	r0, #0
   bd5f8:	e7fc      	b.n	bd5f4 <_ZNK6String6equalsERKS_+0x14>

000bd5fa <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bd5fa:	6883      	ldr	r3, [r0, #8]
   bd5fc:	428b      	cmp	r3, r1
   bd5fe:	d903      	bls.n	bd608 <_ZNK6StringixEj+0xe>
   bd600:	6800      	ldr	r0, [r0, #0]
   bd602:	b110      	cbz	r0, bd60a <_ZNK6StringixEj+0x10>
	return buffer[index];
   bd604:	5c40      	ldrb	r0, [r0, r1]
   bd606:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bd608:	2000      	movs	r0, #0
}
   bd60a:	4770      	bx	lr

000bd60c <_ZNK6String6charAtEj>:
	return operator[](loc);
   bd60c:	f7ff bff5 	b.w	bd5fa <_ZNK6StringixEj>

000bd610 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bd610:	b558      	push	{r3, r4, r6, lr}
   bd612:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bd614:	b12a      	cbz	r2, bd622 <_ZNK6String8getBytesEPhjj+0x12>
   bd616:	b121      	cbz	r1, bd622 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bd618:	6884      	ldr	r4, [r0, #8]
   bd61a:	42a3      	cmp	r3, r4
   bd61c:	d302      	bcc.n	bd624 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bd61e:	2300      	movs	r3, #0
   bd620:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bd622:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bd624:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bd626:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bd628:	6801      	ldr	r1, [r0, #0]
   bd62a:	4294      	cmp	r4, r2
   bd62c:	bf28      	it	cs
   bd62e:	4614      	movcs	r4, r2
   bd630:	4419      	add	r1, r3
   bd632:	4622      	mov	r2, r4
   bd634:	4630      	mov	r0, r6
   bd636:	f001 fb1a 	bl	bec6e <strncpy>
	buf[n] = 0;
   bd63a:	2300      	movs	r3, #0
   bd63c:	5533      	strb	r3, [r6, r4]
   bd63e:	e7f0      	b.n	bd622 <_ZNK6String8getBytesEPhjj+0x12>

000bd640 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd640:	4b05      	ldr	r3, [pc, #20]	; (bd658 <_GLOBAL__sub_I_System+0x18>)
   bd642:	2202      	movs	r2, #2
   bd644:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bd646:	4b05      	ldr	r3, [pc, #20]	; (bd65c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd648:	4a05      	ldr	r2, [pc, #20]	; (bd660 <_GLOBAL__sub_I_System+0x20>)
   bd64a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd64c:	2000      	movs	r0, #0
   bd64e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd652:	f7fc bbc9 	b.w	b9de8 <set_system_mode>
   bd656:	bf00      	nop
   bd658:	2003e6c0 	.word	0x2003e6c0
   bd65c:	2003e6b4 	.word	0x2003e6b4
   bd660:	ffff0000 	.word	0xffff0000

000bd664 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd668:	4a15      	ldr	r2, [pc, #84]	; (bd6c0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd66a:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd6cc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd66e:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd672:	1980      	adds	r0, r0, r6
   bd674:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd678:	4b12      	ldr	r3, [pc, #72]	; (bd6c4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd67a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd67e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd682:	1986      	adds	r6, r0, r6
   bd684:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd688:	42bb      	cmp	r3, r7
   bd68a:	bf08      	it	eq
   bd68c:	42b2      	cmpeq	r2, r6
{
   bd68e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd690:	d013      	beq.n	bd6ba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd692:	a903      	add	r1, sp, #12
   bd694:	4668      	mov	r0, sp
   bd696:	e9cd 6700 	strd	r6, r7, [sp]
   bd69a:	f7fc fcd9 	bl	ba050 <localtime_r>
	calendar_time.tm_year += 1900;
   bd69e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd6a0:	4d09      	ldr	r5, [pc, #36]	; (bd6c8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd6a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd6a6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd6a8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd6aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd6ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd6ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd6b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd6b2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd6b6:	6823      	ldr	r3, [r4, #0]
   bd6b8:	602b      	str	r3, [r5, #0]
    }
}
   bd6ba:	b00c      	add	sp, #48	; 0x30
   bd6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd6c0:	2003e6f8 	.word	0x2003e6f8
   bd6c4:	2003e6f0 	.word	0x2003e6f0
   bd6c8:	2003e6c8 	.word	0x2003e6c8
   bd6cc:	2003e700 	.word	0x2003e700

000bd6d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd6d0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd6d2:	2000      	movs	r0, #0
   bd6d4:	f7fc fbec 	bl	b9eb0 <spark_sync_time_pending>
   bd6d8:	b128      	cbz	r0, bd6e6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd6da:	f7fc fbd1 	bl	b9e80 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd6de:	f080 0001 	eor.w	r0, r0, #1
   bd6e2:	b2c0      	uxtb	r0, r0
    }
   bd6e4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd6e6:	2001      	movs	r0, #1
   bd6e8:	e7fc      	b.n	bd6e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd6ec <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bd6ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd6ee:	f7ff ffb9 	bl	bd664 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bd6f2:	4b02      	ldr	r3, [pc, #8]	; (bd6fc <_ZN9TimeClass5monthEx+0x10>)
   bd6f4:	6918      	ldr	r0, [r3, #16]
}
   bd6f6:	3001      	adds	r0, #1
   bd6f8:	bd08      	pop	{r3, pc}
   bd6fa:	bf00      	nop
   bd6fc:	2003e6c8 	.word	0x2003e6c8

000bd700 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bd700:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bd702:	2000      	movs	r0, #0
   bd704:	f7fc f9d0 	bl	b9aa8 <hal_rtc_time_is_valid>
    if (rtcstate)
   bd708:	4604      	mov	r4, r0
   bd70a:	b9a0      	cbnz	r0, bd736 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bd70c:	f7fc fb64 	bl	b9dd8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bd710:	2801      	cmp	r0, #1
   bd712:	d110      	bne.n	bd736 <_ZN9TimeClass7isValidEv+0x36>
   bd714:	4620      	mov	r0, r4
   bd716:	f7fc fb87 	bl	b9e28 <system_thread_get_state>
   bd71a:	b960      	cbnz	r0, bd736 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bd71c:	f7ff ffd8 	bl	bd6d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bd720:	b910      	cbnz	r0, bd728 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bd722:	f7fc fba5 	bl	b9e70 <spark_process>
        while (_while() && !_condition()) {
   bd726:	e7f9      	b.n	bd71c <_ZN9TimeClass7isValidEv+0x1c>
   bd728:	f7ff ffd2 	bl	bd6d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bd72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bd730:	2000      	movs	r0, #0
   bd732:	f7fc b9b9 	b.w	b9aa8 <hal_rtc_time_is_valid>
}
   bd736:	4620      	mov	r0, r4
   bd738:	bd10      	pop	{r4, pc}

000bd73a <_ZN9TimeClass3nowEv>:
{
   bd73a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bd73c:	f7ff ffe0 	bl	bd700 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bd740:	2210      	movs	r2, #16
   bd742:	2100      	movs	r1, #0
   bd744:	4668      	mov	r0, sp
   bd746:	f001 f9c2 	bl	beace <memset>
    hal_rtc_get_time(&tv, nullptr);
   bd74a:	2100      	movs	r1, #0
   bd74c:	4668      	mov	r0, sp
   bd74e:	f7fc f9b3 	bl	b9ab8 <hal_rtc_get_time>
}
   bd752:	9800      	ldr	r0, [sp, #0]
   bd754:	b005      	add	sp, #20
   bd756:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd75c <_ZN9TimeClass4hourEv>:
{
   bd75c:	b508      	push	{r3, lr}
	return hour(now());
   bd75e:	f7ff ffec 	bl	bd73a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd762:	17c1      	asrs	r1, r0, #31
   bd764:	f7ff ff7e 	bl	bd664 <_ZL22Refresh_UnixTime_Cachex>
}
   bd768:	4b01      	ldr	r3, [pc, #4]	; (bd770 <_ZN9TimeClass4hourEv+0x14>)
   bd76a:	6898      	ldr	r0, [r3, #8]
   bd76c:	bd08      	pop	{r3, pc}
   bd76e:	bf00      	nop
   bd770:	2003e6c8 	.word	0x2003e6c8

000bd774 <_ZN9TimeClass6minuteEv>:
{
   bd774:	b508      	push	{r3, lr}
	return minute(now());
   bd776:	f7ff ffe0 	bl	bd73a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd77a:	17c1      	asrs	r1, r0, #31
   bd77c:	f7ff ff72 	bl	bd664 <_ZL22Refresh_UnixTime_Cachex>
}
   bd780:	4b01      	ldr	r3, [pc, #4]	; (bd788 <_ZN9TimeClass6minuteEv+0x14>)
   bd782:	6858      	ldr	r0, [r3, #4]
   bd784:	bd08      	pop	{r3, pc}
   bd786:	bf00      	nop
   bd788:	2003e6c8 	.word	0x2003e6c8

000bd78c <_ZN9TimeClass6secondEv>:
{
   bd78c:	b508      	push	{r3, lr}
	return second(now());
   bd78e:	f7ff ffd4 	bl	bd73a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd792:	17c1      	asrs	r1, r0, #31
   bd794:	f7ff ff66 	bl	bd664 <_ZL22Refresh_UnixTime_Cachex>
}
   bd798:	4b01      	ldr	r3, [pc, #4]	; (bd7a0 <_ZN9TimeClass6secondEv+0x14>)
   bd79a:	6818      	ldr	r0, [r3, #0]
   bd79c:	bd08      	pop	{r3, pc}
   bd79e:	bf00      	nop
   bd7a0:	2003e6c8 	.word	0x2003e6c8

000bd7a4 <_ZN9TimeClass3dayEv>:
{
   bd7a4:	b508      	push	{r3, lr}
	return day(now());
   bd7a6:	f7ff ffc8 	bl	bd73a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd7aa:	17c1      	asrs	r1, r0, #31
   bd7ac:	f7ff ff5a 	bl	bd664 <_ZL22Refresh_UnixTime_Cachex>
}
   bd7b0:	4b01      	ldr	r3, [pc, #4]	; (bd7b8 <_ZN9TimeClass3dayEv+0x14>)
   bd7b2:	68d8      	ldr	r0, [r3, #12]
   bd7b4:	bd08      	pop	{r3, pc}
   bd7b6:	bf00      	nop
   bd7b8:	2003e6c8 	.word	0x2003e6c8

000bd7bc <_ZN9TimeClass5monthEv>:
{
   bd7bc:	b508      	push	{r3, lr}
	return month(now());
   bd7be:	f7ff ffbc 	bl	bd73a <_ZN9TimeClass3nowEv>
}
   bd7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bd7c6:	17c1      	asrs	r1, r0, #31
   bd7c8:	f7ff bf90 	b.w	bd6ec <_ZN9TimeClass5monthEx>

000bd7cc <_ZN9TimeClass4yearEv>:
{
   bd7cc:	b508      	push	{r3, lr}
	return year(now());
   bd7ce:	f7ff ffb4 	bl	bd73a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd7d2:	17c1      	asrs	r1, r0, #31
   bd7d4:	f7ff ff46 	bl	bd664 <_ZL22Refresh_UnixTime_Cachex>
}
   bd7d8:	4b01      	ldr	r3, [pc, #4]	; (bd7e0 <_ZN9TimeClass4yearEv+0x14>)
   bd7da:	6958      	ldr	r0, [r3, #20]
   bd7dc:	bd08      	pop	{r3, pc}
   bd7de:	bf00      	nop
   bd7e0:	2003e6c8 	.word	0x2003e6c8

000bd7e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bd7e4:	4b02      	ldr	r3, [pc, #8]	; (bd7f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bd7e6:	681a      	ldr	r2, [r3, #0]
   bd7e8:	4b02      	ldr	r3, [pc, #8]	; (bd7f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bd7ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bd7ec:	4770      	bx	lr
   bd7ee:	bf00      	nop
   bd7f0:	2003da8c 	.word	0x2003da8c
   bd7f4:	2003e6c4 	.word	0x2003e6c4

000bd7f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bd7f8:	4770      	bx	lr

000bd7fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd7fa:	7441      	strb	r1, [r0, #17]
}
   bd7fc:	4770      	bx	lr

000bd7fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bd7fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bd800:	7c00      	ldrb	r0, [r0, #16]
   bd802:	f7fc fa89 	bl	b9d18 <hal_usart_available_data_for_write>
}
   bd806:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd80a:	bd08      	pop	{r3, pc}

000bd80c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bd80c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bd80e:	7c00      	ldrb	r0, [r0, #16]
   bd810:	f7fc fa5a 	bl	b9cc8 <hal_usart_available>
}
   bd814:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd818:	bd08      	pop	{r3, pc}

000bd81a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bd81a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bd81c:	7c00      	ldrb	r0, [r0, #16]
   bd81e:	f7fc fa63 	bl	b9ce8 <hal_usart_peek>
}
   bd822:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd826:	bd08      	pop	{r3, pc}

000bd828 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bd828:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bd82a:	7c00      	ldrb	r0, [r0, #16]
   bd82c:	f7fc fa54 	bl	b9cd8 <hal_usart_read>
}
   bd830:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd834:	bd08      	pop	{r3, pc}

000bd836 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bd836:	7c00      	ldrb	r0, [r0, #16]
   bd838:	f7fc ba5e 	b.w	b9cf8 <hal_usart_flush>

000bd83c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bd83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd83e:	7c45      	ldrb	r5, [r0, #17]
{
   bd840:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd842:	b12d      	cbz	r5, bd850 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bd844:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bd846:	b003      	add	sp, #12
   bd848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bd84c:	f7fc ba34 	b.w	b9cb8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd850:	7c00      	ldrb	r0, [r0, #16]
   bd852:	9101      	str	r1, [sp, #4]
   bd854:	f7fc fa60 	bl	b9d18 <hal_usart_available_data_for_write>
   bd858:	2800      	cmp	r0, #0
   bd85a:	9901      	ldr	r1, [sp, #4]
   bd85c:	dcf2      	bgt.n	bd844 <_ZN11USARTSerial5writeEh+0x8>
}
   bd85e:	4628      	mov	r0, r5
   bd860:	b003      	add	sp, #12
   bd862:	bd30      	pop	{r4, r5, pc}

000bd864 <_ZN11USARTSerialD0Ev>:
   bd864:	b510      	push	{r4, lr}
   bd866:	2114      	movs	r1, #20
   bd868:	4604      	mov	r4, r0
   bd86a:	f7f6 fc18 	bl	b409e <_ZdlPvj>
   bd86e:	4620      	mov	r0, r4
   bd870:	bd10      	pop	{r4, pc}
	...

000bd874 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bd874:	b510      	push	{r4, lr}
   bd876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd87a:	4604      	mov	r4, r0
   bd87c:	4608      	mov	r0, r1
   bd87e:	4611      	mov	r1, r2
   bd880:	2200      	movs	r2, #0
   bd882:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd886:	4b04      	ldr	r3, [pc, #16]	; (bd898 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bd888:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd88a:	2301      	movs	r3, #1
  _serial = serial;
   bd88c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd88e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bd890:	f7fc fa52 	bl	b9d38 <hal_usart_init_ex>
}
   bd894:	4620      	mov	r0, r4
   bd896:	bd10      	pop	{r4, pc}
   bd898:	000c2068 	.word	0x000c2068

000bd89c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd89c:	7c00      	ldrb	r0, [r0, #16]
   bd89e:	2300      	movs	r3, #0
   bd8a0:	f7fc ba42 	b.w	b9d28 <hal_usart_begin_config>

000bd8a4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd8a4:	2200      	movs	r2, #0
   bd8a6:	f7ff bff9 	b.w	bd89c <_ZN11USARTSerial5beginEmm>

000bd8aa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd8aa:	7441      	strb	r1, [r0, #17]
}
   bd8ac:	4770      	bx	lr

000bd8ae <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd8ae:	4770      	bx	lr

000bd8b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd8b0:	4770      	bx	lr

000bd8b2 <_ZN9USBSerial4readEv>:
{
   bd8b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd8b4:	2100      	movs	r1, #0
   bd8b6:	7c00      	ldrb	r0, [r0, #16]
   bd8b8:	f7fc fa66 	bl	b9d88 <HAL_USB_USART_Receive_Data>
}
   bd8bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd8c0:	bd08      	pop	{r3, pc}

000bd8c2 <_ZN9USBSerial4peekEv>:
{
   bd8c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd8c4:	2101      	movs	r1, #1
   bd8c6:	7c00      	ldrb	r0, [r0, #16]
   bd8c8:	f7fc fa5e 	bl	b9d88 <HAL_USB_USART_Receive_Data>
}
   bd8cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd8d0:	bd08      	pop	{r3, pc}

000bd8d2 <_ZN9USBSerial17availableForWriteEv>:
{
   bd8d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd8d4:	7c00      	ldrb	r0, [r0, #16]
   bd8d6:	f7fc fa4f 	bl	b9d78 <HAL_USB_USART_Available_Data_For_Write>
}
   bd8da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd8de:	bd08      	pop	{r3, pc}

000bd8e0 <_ZN9USBSerial9availableEv>:
{
   bd8e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd8e2:	7c00      	ldrb	r0, [r0, #16]
   bd8e4:	f7fc fa40 	bl	b9d68 <HAL_USB_USART_Available_Data>
}
   bd8e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd8ec:	bd08      	pop	{r3, pc}

000bd8ee <_ZN9USBSerial5writeEh>:
{
   bd8ee:	b513      	push	{r0, r1, r4, lr}
   bd8f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd8f2:	7c00      	ldrb	r0, [r0, #16]
{
   bd8f4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd8f6:	f7fc fa3f 	bl	b9d78 <HAL_USB_USART_Available_Data_For_Write>
   bd8fa:	2800      	cmp	r0, #0
   bd8fc:	9901      	ldr	r1, [sp, #4]
   bd8fe:	dc01      	bgt.n	bd904 <_ZN9USBSerial5writeEh+0x16>
   bd900:	7c60      	ldrb	r0, [r4, #17]
   bd902:	b120      	cbz	r0, bd90e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd904:	7c20      	ldrb	r0, [r4, #16]
   bd906:	f7fc fa47 	bl	b9d98 <HAL_USB_USART_Send_Data>
   bd90a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd90e:	b002      	add	sp, #8
   bd910:	bd10      	pop	{r4, pc}

000bd912 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd912:	7c00      	ldrb	r0, [r0, #16]
   bd914:	f7fc ba48 	b.w	b9da8 <HAL_USB_USART_Flush_Data>

000bd918 <_ZN9USBSerialD0Ev>:
   bd918:	b510      	push	{r4, lr}
   bd91a:	2114      	movs	r1, #20
   bd91c:	4604      	mov	r4, r0
   bd91e:	f7f6 fbbe 	bl	b409e <_ZdlPvj>
   bd922:	4620      	mov	r0, r4
   bd924:	bd10      	pop	{r4, pc}
	...

000bd928 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd928:	b510      	push	{r4, lr}
   bd92a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd92e:	4604      	mov	r4, r0
   bd930:	4608      	mov	r0, r1
   bd932:	2100      	movs	r1, #0
   bd934:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd938:	4b04      	ldr	r3, [pc, #16]	; (bd94c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd93a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd93c:	2301      	movs	r3, #1
  _serial = serial;
   bd93e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd940:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd942:	4611      	mov	r1, r2
   bd944:	f7fc fa00 	bl	b9d48 <HAL_USB_USART_Init>
}
   bd948:	4620      	mov	r0, r4
   bd94a:	bd10      	pop	{r4, pc}
   bd94c:	000c2098 	.word	0x000c2098

000bd950 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd950:	7c00      	ldrb	r0, [r0, #16]
   bd952:	2200      	movs	r2, #0
   bd954:	f7fc ba00 	b.w	b9d58 <HAL_USB_USART_Begin>

000bd958 <_Z19acquireSerialBufferv>:
{
   bd958:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd95a:	2214      	movs	r2, #20
{
   bd95c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd95e:	2100      	movs	r1, #0
   bd960:	f001 f8b5 	bl	beace <memset>
}
   bd964:	4620      	mov	r0, r4
   bd966:	bd10      	pop	{r4, pc}

000bd968 <_Z16_fetch_usbserialv>:
{
   bd968:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd96a:	4c0f      	ldr	r4, [pc, #60]	; (bd9a8 <_Z16_fetch_usbserialv+0x40>)
{
   bd96c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd96e:	a803      	add	r0, sp, #12
   bd970:	f7ff fff2 	bl	bd958 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd974:	7821      	ldrb	r1, [r4, #0]
   bd976:	f3bf 8f5b 	dmb	ish
   bd97a:	f011 0101 	ands.w	r1, r1, #1
   bd97e:	d10f      	bne.n	bd9a0 <_Z16_fetch_usbserialv+0x38>
   bd980:	4620      	mov	r0, r4
   bd982:	9101      	str	r1, [sp, #4]
   bd984:	f7f6 fb9a 	bl	b40bc <__cxa_guard_acquire>
   bd988:	9901      	ldr	r1, [sp, #4]
   bd98a:	b148      	cbz	r0, bd9a0 <_Z16_fetch_usbserialv+0x38>
   bd98c:	aa03      	add	r2, sp, #12
   bd98e:	4807      	ldr	r0, [pc, #28]	; (bd9ac <_Z16_fetch_usbserialv+0x44>)
   bd990:	f7ff ffca 	bl	bd928 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd994:	4620      	mov	r0, r4
   bd996:	f7f6 fb96 	bl	b40c6 <__cxa_guard_release>
   bd99a:	4805      	ldr	r0, [pc, #20]	; (bd9b0 <_Z16_fetch_usbserialv+0x48>)
   bd99c:	f001 f852 	bl	bea44 <atexit>
	return _usbserial;
}
   bd9a0:	4802      	ldr	r0, [pc, #8]	; (bd9ac <_Z16_fetch_usbserialv+0x44>)
   bd9a2:	b008      	add	sp, #32
   bd9a4:	bd10      	pop	{r4, pc}
   bd9a6:	bf00      	nop
   bd9a8:	2003e708 	.word	0x2003e708
   bd9ac:	2003e70c 	.word	0x2003e70c
   bd9b0:	000bd8af 	.word	0x000bd8af

000bd9b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd9b4:	4b01      	ldr	r3, [pc, #4]	; (bd9bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd9b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd9b8:	4770      	bx	lr
   bd9ba:	bf00      	nop
   bd9bc:	2003da90 	.word	0x2003da90

000bd9c0 <serialEventRun>:
{
   bd9c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd9c2:	4b0b      	ldr	r3, [pc, #44]	; (bd9f0 <serialEventRun+0x30>)
   bd9c4:	b143      	cbz	r3, bd9d8 <serialEventRun+0x18>
   bd9c6:	f7ff ffcf 	bl	bd968 <_Z16_fetch_usbserialv>
   bd9ca:	6803      	ldr	r3, [r0, #0]
   bd9cc:	691b      	ldr	r3, [r3, #16]
   bd9ce:	4798      	blx	r3
   bd9d0:	2800      	cmp	r0, #0
   bd9d2:	dd01      	ble.n	bd9d8 <serialEventRun+0x18>
        serialEvent();
   bd9d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd9d8:	4b06      	ldr	r3, [pc, #24]	; (bd9f4 <serialEventRun+0x34>)
   bd9da:	b143      	cbz	r3, bd9ee <serialEventRun+0x2e>
   bd9dc:	f000 f95c 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   bd9e0:	6803      	ldr	r3, [r0, #0]
   bd9e2:	691b      	ldr	r3, [r3, #16]
   bd9e4:	4798      	blx	r3
   bd9e6:	2800      	cmp	r0, #0
   bd9e8:	dd01      	ble.n	bd9ee <serialEventRun+0x2e>
        serialEvent1();
   bd9ea:	f3af 8000 	nop.w
}
   bd9ee:	bd08      	pop	{r3, pc}
	...

000bd9f8 <_post_loop>:
{
   bd9f8:	b508      	push	{r3, lr}
	serialEventRun();
   bd9fa:	f7ff ffe1 	bl	bd9c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd9fe:	f7fc f84b 	bl	b9a98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bda02:	4b01      	ldr	r3, [pc, #4]	; (bda08 <_post_loop+0x10>)
   bda04:	6018      	str	r0, [r3, #0]
}
   bda06:	bd08      	pop	{r3, pc}
   bda08:	2003e728 	.word	0x2003e728

000bda0c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bda0c:	4805      	ldr	r0, [pc, #20]	; (bda24 <_Z33system_initialize_user_backup_ramv+0x18>)
   bda0e:	4a06      	ldr	r2, [pc, #24]	; (bda28 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bda10:	4906      	ldr	r1, [pc, #24]	; (bda2c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bda12:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bda14:	1a12      	subs	r2, r2, r0
   bda16:	f001 f832 	bl	bea7e <memcpy>
    __backup_sram_signature = signature;
   bda1a:	4b05      	ldr	r3, [pc, #20]	; (bda30 <_Z33system_initialize_user_backup_ramv+0x24>)
   bda1c:	4a05      	ldr	r2, [pc, #20]	; (bda34 <_Z33system_initialize_user_backup_ramv+0x28>)
   bda1e:	601a      	str	r2, [r3, #0]
}
   bda20:	bd08      	pop	{r3, pc}
   bda22:	bf00      	nop
   bda24:	2003f400 	.word	0x2003f400
   bda28:	2003f404 	.word	0x2003f404
   bda2c:	000c2624 	.word	0x000c2624
   bda30:	2003f400 	.word	0x2003f400
   bda34:	9a271c1e 	.word	0x9a271c1e

000bda38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bda38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bda3a:	2300      	movs	r3, #0
   bda3c:	9300      	str	r3, [sp, #0]
   bda3e:	461a      	mov	r2, r3
   bda40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bda44:	f7fc fa02 	bl	b9e4c <system_ctrl_set_result>
}
   bda48:	b003      	add	sp, #12
   bda4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bda50 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bda50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bda52:	8843      	ldrh	r3, [r0, #2]
   bda54:	2b0a      	cmp	r3, #10
   bda56:	d008      	beq.n	bda6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bda58:	2b50      	cmp	r3, #80	; 0x50
   bda5a:	d10b      	bne.n	bda74 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bda5c:	4b09      	ldr	r3, [pc, #36]	; (bda84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bda5e:	681b      	ldr	r3, [r3, #0]
   bda60:	b14b      	cbz	r3, bda76 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bda62:	b003      	add	sp, #12
   bda64:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bda68:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bda6a:	f7ff ffe5 	bl	bda38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bda6e:	b003      	add	sp, #12
   bda70:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bda74:	2300      	movs	r3, #0
   bda76:	9300      	str	r3, [sp, #0]
   bda78:	461a      	mov	r2, r3
   bda7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bda7e:	f7fc f9e5 	bl	b9e4c <system_ctrl_set_result>
}
   bda82:	e7f4      	b.n	bda6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bda84:	2003e724 	.word	0x2003e724

000bda88 <module_user_init_hook>:
{
   bda88:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bda8a:	4812      	ldr	r0, [pc, #72]	; (bdad4 <module_user_init_hook+0x4c>)
   bda8c:	2100      	movs	r1, #0
   bda8e:	f7fc fad7 	bl	ba040 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bda92:	4b11      	ldr	r3, [pc, #68]	; (bdad8 <module_user_init_hook+0x50>)
   bda94:	681a      	ldr	r2, [r3, #0]
   bda96:	4b11      	ldr	r3, [pc, #68]	; (bdadc <module_user_init_hook+0x54>)
   bda98:	429a      	cmp	r2, r3
   bda9a:	4b11      	ldr	r3, [pc, #68]	; (bdae0 <module_user_init_hook+0x58>)
   bda9c:	bf0c      	ite	eq
   bda9e:	2201      	moveq	r2, #1
   bdaa0:	2200      	movne	r2, #0
   bdaa2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bdaa4:	d001      	beq.n	bdaaa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bdaa6:	f7ff ffb1 	bl	bda0c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bdaaa:	f7fb ffdd 	bl	b9a68 <HAL_RNG_GetRandomNumber>
   bdaae:	4604      	mov	r4, r0
    srand(seed);
   bdab0:	f001 f816 	bl	beae0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bdab4:	4b0b      	ldr	r3, [pc, #44]	; (bdae4 <module_user_init_hook+0x5c>)
   bdab6:	b113      	cbz	r3, bdabe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bdab8:	4620      	mov	r0, r4
   bdaba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bdabe:	2100      	movs	r1, #0
   bdac0:	4808      	ldr	r0, [pc, #32]	; (bdae4 <module_user_init_hook+0x5c>)
   bdac2:	f7fc f9fd 	bl	b9ec0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bdac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bdaca:	4807      	ldr	r0, [pc, #28]	; (bdae8 <module_user_init_hook+0x60>)
   bdacc:	2100      	movs	r1, #0
   bdace:	f7fc b9b3 	b.w	b9e38 <system_ctrl_set_app_request_handler>
   bdad2:	bf00      	nop
   bdad4:	000bd9b5 	.word	0x000bd9b5
   bdad8:	2003f400 	.word	0x2003f400
   bdadc:	9a271c1e 	.word	0x9a271c1e
   bdae0:	2003e720 	.word	0x2003e720
   bdae4:	00000000 	.word	0x00000000
   bdae8:	000bda51 	.word	0x000bda51

000bdaec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bdaec:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bdaee:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bdaf0:	d902      	bls.n	bdaf8 <pinAvailable+0xc>
    return false;
   bdaf2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bdaf4:	b002      	add	sp, #8
   bdaf6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bdaf8:	f1a0 030b 	sub.w	r3, r0, #11
   bdafc:	2b02      	cmp	r3, #2
   bdafe:	d81a      	bhi.n	bdb36 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bdb00:	4c17      	ldr	r4, [pc, #92]	; (bdb60 <pinAvailable+0x74>)
   bdb02:	7821      	ldrb	r1, [r4, #0]
   bdb04:	f3bf 8f5b 	dmb	ish
   bdb08:	f011 0101 	ands.w	r1, r1, #1
   bdb0c:	d10b      	bne.n	bdb26 <pinAvailable+0x3a>
   bdb0e:	4620      	mov	r0, r4
   bdb10:	9101      	str	r1, [sp, #4]
   bdb12:	f7f6 fad3 	bl	b40bc <__cxa_guard_acquire>
   bdb16:	9901      	ldr	r1, [sp, #4]
   bdb18:	b128      	cbz	r0, bdb26 <pinAvailable+0x3a>
   bdb1a:	4812      	ldr	r0, [pc, #72]	; (bdb64 <pinAvailable+0x78>)
   bdb1c:	f7ff fb88 	bl	bd230 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bdb20:	4620      	mov	r0, r4
   bdb22:	f7f6 fad0 	bl	b40c6 <__cxa_guard_release>
   bdb26:	4b0f      	ldr	r3, [pc, #60]	; (bdb64 <pinAvailable+0x78>)
   bdb28:	7818      	ldrb	r0, [r3, #0]
   bdb2a:	f7fc f88d 	bl	b9c48 <hal_spi_is_enabled>
   bdb2e:	2800      	cmp	r0, #0
   bdb30:	d1df      	bne.n	bdaf2 <pinAvailable+0x6>
  return true; // 'pin' is available
   bdb32:	2001      	movs	r0, #1
   bdb34:	e7de      	b.n	bdaf4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bdb36:	2801      	cmp	r0, #1
   bdb38:	d809      	bhi.n	bdb4e <pinAvailable+0x62>
   bdb3a:	f000 f86d 	bl	bdc18 <_Z19__fetch_global_Wirev>
   bdb3e:	2100      	movs	r1, #0
   bdb40:	7c00      	ldrb	r0, [r0, #16]
   bdb42:	f7fc f841 	bl	b9bc8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bdb46:	f080 0001 	eor.w	r0, r0, #1
   bdb4a:	b2c0      	uxtb	r0, r0
   bdb4c:	e7d2      	b.n	bdaf4 <pinAvailable+0x8>
   bdb4e:	3809      	subs	r0, #9
   bdb50:	2801      	cmp	r0, #1
   bdb52:	d8ee      	bhi.n	bdb32 <pinAvailable+0x46>
   bdb54:	f000 f8a0 	bl	bdc98 <_Z22__fetch_global_Serial1v>
   bdb58:	7c00      	ldrb	r0, [r0, #16]
   bdb5a:	f7fc f8d5 	bl	b9d08 <hal_usart_is_enabled>
   bdb5e:	e7f2      	b.n	bdb46 <pinAvailable+0x5a>
   bdb60:	2003e648 	.word	0x2003e648
   bdb64:	2003e64c 	.word	0x2003e64c

000bdb68 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdb68:	2825      	cmp	r0, #37	; 0x25
{
   bdb6a:	b538      	push	{r3, r4, r5, lr}
   bdb6c:	4604      	mov	r4, r0
   bdb6e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdb70:	d80a      	bhi.n	bdb88 <pinMode+0x20>
   bdb72:	29ff      	cmp	r1, #255	; 0xff
   bdb74:	d008      	beq.n	bdb88 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bdb76:	f7ff ffb9 	bl	bdaec <pinAvailable>
   bdb7a:	b128      	cbz	r0, bdb88 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bdb7c:	4629      	mov	r1, r5
   bdb7e:	4620      	mov	r0, r4
}
   bdb80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bdb84:	f7fb bfa8 	b.w	b9ad8 <HAL_Pin_Mode>
}
   bdb88:	bd38      	pop	{r3, r4, r5, pc}

000bdb8a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bdb8a:	b538      	push	{r3, r4, r5, lr}
   bdb8c:	4604      	mov	r4, r0
   bdb8e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdb90:	f7fb ffaa 	bl	b9ae8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bdb94:	28ff      	cmp	r0, #255	; 0xff
   bdb96:	d010      	beq.n	bdbba <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bdb98:	2806      	cmp	r0, #6
   bdb9a:	d804      	bhi.n	bdba6 <digitalWrite+0x1c>
   bdb9c:	234d      	movs	r3, #77	; 0x4d
   bdb9e:	fa23 f000 	lsr.w	r0, r3, r0
   bdba2:	07c3      	lsls	r3, r0, #31
   bdba4:	d409      	bmi.n	bdbba <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bdba6:	4620      	mov	r0, r4
   bdba8:	f7ff ffa0 	bl	bdaec <pinAvailable>
   bdbac:	b128      	cbz	r0, bdbba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bdbae:	4629      	mov	r1, r5
   bdbb0:	4620      	mov	r0, r4
}
   bdbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bdbb6:	f7fb bf9f 	b.w	b9af8 <HAL_GPIO_Write>
}
   bdbba:	bd38      	pop	{r3, r4, r5, pc}

000bdbbc <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bdbbc:	280d      	cmp	r0, #13
{
   bdbbe:	b510      	push	{r4, lr}
   bdbc0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bdbc2:	bf9c      	itt	ls
   bdbc4:	340e      	addls	r4, #14
   bdbc6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bdbc8:	4620      	mov	r0, r4
   bdbca:	f7ff ff8f 	bl	bdaec <pinAvailable>
   bdbce:	b150      	cbz	r0, bdbe6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bdbd0:	2103      	movs	r1, #3
   bdbd2:	4620      	mov	r0, r4
   bdbd4:	f7fb ff78 	bl	b9ac8 <HAL_Validate_Pin_Function>
   bdbd8:	2803      	cmp	r0, #3
   bdbda:	d104      	bne.n	bdbe6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bdbdc:	4620      	mov	r0, r4
}
   bdbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bdbe2:	f7fb bfa1 	b.w	b9b28 <hal_adc_read>
}
   bdbe6:	2000      	movs	r0, #0
   bdbe8:	bd10      	pop	{r4, pc}

000bdbea <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdbea:	4770      	bx	lr

000bdbec <_Z17acquireWireBufferv>:
{
   bdbec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bdbee:	2520      	movs	r5, #32
   bdbf0:	2314      	movs	r3, #20
{
   bdbf2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bdbf4:	6003      	str	r3, [r0, #0]
   bdbf6:	6085      	str	r5, [r0, #8]
   bdbf8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdbfa:	4906      	ldr	r1, [pc, #24]	; (bdc14 <_Z17acquireWireBufferv+0x28>)
   bdbfc:	4628      	mov	r0, r5
   bdbfe:	f000 f86f 	bl	bdce0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdc02:	4904      	ldr	r1, [pc, #16]	; (bdc14 <_Z17acquireWireBufferv+0x28>)
	};
   bdc04:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdc06:	4628      	mov	r0, r5
   bdc08:	f000 f86a 	bl	bdce0 <_ZnajRKSt9nothrow_t>
	};
   bdc0c:	60e0      	str	r0, [r4, #12]
}
   bdc0e:	4620      	mov	r0, r4
   bdc10:	bd38      	pop	{r3, r4, r5, pc}
   bdc12:	bf00      	nop
   bdc14:	000c20c0 	.word	0x000c20c0

000bdc18 <_Z19__fetch_global_Wirev>:
{
   bdc18:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdc1a:	4d0e      	ldr	r5, [pc, #56]	; (bdc54 <_Z19__fetch_global_Wirev+0x3c>)
   bdc1c:	7829      	ldrb	r1, [r5, #0]
   bdc1e:	f3bf 8f5b 	dmb	ish
   bdc22:	f011 0401 	ands.w	r4, r1, #1
{
   bdc26:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdc28:	d111      	bne.n	bdc4e <_Z19__fetch_global_Wirev+0x36>
   bdc2a:	4628      	mov	r0, r5
   bdc2c:	f7f6 fa46 	bl	b40bc <__cxa_guard_acquire>
   bdc30:	b168      	cbz	r0, bdc4e <_Z19__fetch_global_Wirev+0x36>
   bdc32:	a801      	add	r0, sp, #4
   bdc34:	f7ff ffda 	bl	bdbec <_Z17acquireWireBufferv>
   bdc38:	aa01      	add	r2, sp, #4
   bdc3a:	4621      	mov	r1, r4
   bdc3c:	4806      	ldr	r0, [pc, #24]	; (bdc58 <_Z19__fetch_global_Wirev+0x40>)
   bdc3e:	f7ff f8d9 	bl	bcdf4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bdc42:	4628      	mov	r0, r5
   bdc44:	f7f6 fa3f 	bl	b40c6 <__cxa_guard_release>
   bdc48:	4804      	ldr	r0, [pc, #16]	; (bdc5c <_Z19__fetch_global_Wirev+0x44>)
   bdc4a:	f000 fefb 	bl	bea44 <atexit>
	return wire;
}
   bdc4e:	4802      	ldr	r0, [pc, #8]	; (bdc58 <_Z19__fetch_global_Wirev+0x40>)
   bdc50:	b007      	add	sp, #28
   bdc52:	bd30      	pop	{r4, r5, pc}
   bdc54:	2003e72c 	.word	0x2003e72c
   bdc58:	2003e730 	.word	0x2003e730
   bdc5c:	000bdbeb 	.word	0x000bdbeb

000bdc60 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdc60:	4770      	bx	lr
	...

000bdc64 <_Z20acquireSerial1Bufferv>:
{
   bdc64:	b538      	push	{r3, r4, r5, lr}
   bdc66:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bdc68:	2514      	movs	r5, #20
   bdc6a:	462a      	mov	r2, r5
   bdc6c:	2100      	movs	r1, #0
   bdc6e:	f000 ff2e 	bl	beace <memset>
   bdc72:	8025      	strh	r5, [r4, #0]
   bdc74:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdc76:	4907      	ldr	r1, [pc, #28]	; (bdc94 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bdc78:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdc7a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bdc7c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdc7e:	f000 f82f 	bl	bdce0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdc82:	4904      	ldr	r1, [pc, #16]	; (bdc94 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bdc84:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdc86:	4628      	mov	r0, r5
   bdc88:	f000 f82a 	bl	bdce0 <_ZnajRKSt9nothrow_t>
    };
   bdc8c:	60e0      	str	r0, [r4, #12]
}
   bdc8e:	4620      	mov	r0, r4
   bdc90:	bd38      	pop	{r3, r4, r5, pc}
   bdc92:	bf00      	nop
   bdc94:	000c20c0 	.word	0x000c20c0

000bdc98 <_Z22__fetch_global_Serial1v>:
{
   bdc98:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdc9a:	4d0e      	ldr	r5, [pc, #56]	; (bdcd4 <_Z22__fetch_global_Serial1v+0x3c>)
   bdc9c:	7829      	ldrb	r1, [r5, #0]
   bdc9e:	f3bf 8f5b 	dmb	ish
   bdca2:	f011 0401 	ands.w	r4, r1, #1
{
   bdca6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdca8:	d111      	bne.n	bdcce <_Z22__fetch_global_Serial1v+0x36>
   bdcaa:	4628      	mov	r0, r5
   bdcac:	f7f6 fa06 	bl	b40bc <__cxa_guard_acquire>
   bdcb0:	b168      	cbz	r0, bdcce <_Z22__fetch_global_Serial1v+0x36>
   bdcb2:	a801      	add	r0, sp, #4
   bdcb4:	f7ff ffd6 	bl	bdc64 <_Z20acquireSerial1Bufferv>
   bdcb8:	aa01      	add	r2, sp, #4
   bdcba:	4621      	mov	r1, r4
   bdcbc:	4806      	ldr	r0, [pc, #24]	; (bdcd8 <_Z22__fetch_global_Serial1v+0x40>)
   bdcbe:	f7ff fdd9 	bl	bd874 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bdcc2:	4628      	mov	r0, r5
   bdcc4:	f7f6 f9ff 	bl	b40c6 <__cxa_guard_release>
   bdcc8:	4804      	ldr	r0, [pc, #16]	; (bdcdc <_Z22__fetch_global_Serial1v+0x44>)
   bdcca:	f000 febb 	bl	bea44 <atexit>
    return serial1;
}
   bdcce:	4802      	ldr	r0, [pc, #8]	; (bdcd8 <_Z22__fetch_global_Serial1v+0x40>)
   bdcd0:	b007      	add	sp, #28
   bdcd2:	bd30      	pop	{r4, r5, pc}
   bdcd4:	2003e744 	.word	0x2003e744
   bdcd8:	2003e748 	.word	0x2003e748
   bdcdc:	000bdc61 	.word	0x000bdc61

000bdce0 <_ZnajRKSt9nothrow_t>:
   bdce0:	f7f6 b9db 	b.w	b409a <_Znaj>

000bdce4 <_ZSt17__throw_bad_allocv>:
   bdce4:	b508      	push	{r3, lr}
   bdce6:	f7fc f98b 	bl	ba000 <abort>

000bdcea <_ZSt19__throw_logic_errorPKc>:
   bdcea:	b508      	push	{r3, lr}
   bdcec:	f7fc f988 	bl	ba000 <abort>

000bdcf0 <_ZSt20__throw_length_errorPKc>:
   bdcf0:	b508      	push	{r3, lr}
   bdcf2:	f7fc f985 	bl	ba000 <abort>

000bdcf6 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bdcf6:	b40f      	push	{r0, r1, r2, r3}
   bdcf8:	b580      	push	{r7, lr}
   bdcfa:	b084      	sub	sp, #16
   bdcfc:	af00      	add	r7, sp, #0
   bdcfe:	f107 0418 	add.w	r4, r7, #24
   bdd02:	f854 2b04 	ldr.w	r2, [r4], #4
   bdd06:	607a      	str	r2, [r7, #4]
   bdd08:	4610      	mov	r0, r2
   bdd0a:	f000 ff94 	bl	bec36 <strlen>
   bdd0e:	f200 2307 	addw	r3, r0, #519	; 0x207
   bdd12:	f023 0307 	bic.w	r3, r3, #7
   bdd16:	ebad 0d03 	sub.w	sp, sp, r3
   bdd1a:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bdd1e:	687a      	ldr	r2, [r7, #4]
   bdd20:	60fc      	str	r4, [r7, #12]
   bdd22:	4623      	mov	r3, r4
   bdd24:	4668      	mov	r0, sp
   bdd26:	f000 f85d 	bl	bdde4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bdd2a:	f7fc f969 	bl	ba000 <abort>

000bdd2e <_ZSt25__throw_bad_function_callv>:
   bdd2e:	b508      	push	{r3, lr}
   bdd30:	f7fc f966 	bl	ba000 <abort>

000bdd34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bdd34:	4901      	ldr	r1, [pc, #4]	; (bdd3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bdd36:	f000 b98b 	b.w	be050 <_ZNKSt9type_infoeqERKS_>
   bdd3a:	bf00      	nop
   bdd3c:	000c20dc 	.word	0x000c20dc

000bdd40 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bdd40:	b580      	push	{r7, lr}
   bdd42:	b09c      	sub	sp, #112	; 0x70
   bdd44:	4606      	mov	r6, r0
   bdd46:	af00      	add	r7, sp, #0
   bdd48:	460c      	mov	r4, r1
   bdd4a:	1ba4      	subs	r4, r4, r6
   bdd4c:	490e      	ldr	r1, [pc, #56]	; (bdd88 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bdd4e:	2269      	movs	r2, #105	; 0x69
   bdd50:	1d38      	adds	r0, r7, #4
   bdd52:	f000 fe94 	bl	bea7e <memcpy>
   bdd56:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bdd5a:	f023 0307 	bic.w	r3, r3, #7
   bdd5e:	ebad 0d03 	sub.w	sp, sp, r3
   bdd62:	466d      	mov	r5, sp
   bdd64:	2268      	movs	r2, #104	; 0x68
   bdd66:	1d39      	adds	r1, r7, #4
   bdd68:	4628      	mov	r0, r5
   bdd6a:	f000 fe88 	bl	bea7e <memcpy>
   bdd6e:	4622      	mov	r2, r4
   bdd70:	4631      	mov	r1, r6
   bdd72:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bdd76:	442c      	add	r4, r5
   bdd78:	f000 fe81 	bl	bea7e <memcpy>
   bdd7c:	2300      	movs	r3, #0
   bdd7e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bdd82:	4628      	mov	r0, r5
   bdd84:	f7ff ffb1 	bl	bdcea <_ZSt19__throw_logic_errorPKc>
   bdd88:	000c20e4 	.word	0x000c20e4

000bdd8c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bdd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdd90:	af00      	add	r7, sp, #0
   bdd92:	b084      	sub	sp, #16
   bdd94:	466d      	mov	r5, sp
   bdd96:	f105 040c 	add.w	r4, r5, #12
   bdd9a:	f8df 8044 	ldr.w	r8, [pc, #68]	; bdde0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bdd9e:	4623      	mov	r3, r4
   bdda0:	f04f 0c0a 	mov.w	ip, #10
   bdda4:	fbb2 f6fc 	udiv	r6, r2, ip
   bdda8:	fb0c 2e16 	mls	lr, ip, r6, r2
   bddac:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bddb0:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bddb4:	4696      	mov	lr, r2
   bddb6:	f1be 0f09 	cmp.w	lr, #9
   bddba:	4632      	mov	r2, r6
   bddbc:	d8f2      	bhi.n	bdda4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bddbe:	1ae4      	subs	r4, r4, r3
   bddc0:	428c      	cmp	r4, r1
   bddc2:	d809      	bhi.n	bddd8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bddc4:	f1c4 030c 	rsb	r3, r4, #12
   bddc8:	4622      	mov	r2, r4
   bddca:	18e9      	adds	r1, r5, r3
   bddcc:	f000 fe57 	bl	bea7e <memcpy>
   bddd0:	4620      	mov	r0, r4
   bddd2:	46bd      	mov	sp, r7
   bddd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bddd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bdddc:	e7f8      	b.n	bddd0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bddde:	bf00      	nop
   bdde0:	000c214d 	.word	0x000c214d

000bdde4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bdde4:	3901      	subs	r1, #1
   bdde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bddea:	4607      	mov	r7, r0
   bddec:	4615      	mov	r5, r2
   bddee:	eb00 0801 	add.w	r8, r0, r1
   bddf2:	4604      	mov	r4, r0
   bddf4:	782a      	ldrb	r2, [r5, #0]
   bddf6:	b392      	cbz	r2, bde5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bddf8:	4544      	cmp	r4, r8
   bddfa:	d22a      	bcs.n	bde52 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bddfc:	2a25      	cmp	r2, #37	; 0x25
   bddfe:	d107      	bne.n	bde10 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bde00:	786a      	ldrb	r2, [r5, #1]
   bde02:	2a73      	cmp	r2, #115	; 0x73
   bde04:	d009      	beq.n	bde1a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bde06:	2a7a      	cmp	r2, #122	; 0x7a
   bde08:	d012      	beq.n	bde30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bde0a:	2a25      	cmp	r2, #37	; 0x25
   bde0c:	d100      	bne.n	bde10 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bde0e:	3501      	adds	r5, #1
   bde10:	f815 2b01 	ldrb.w	r2, [r5], #1
   bde14:	f804 2b01 	strb.w	r2, [r4], #1
   bde18:	e7ec      	b.n	bddf4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bde1a:	f853 2b04 	ldr.w	r2, [r3], #4
   bde1e:	3a01      	subs	r2, #1
   bde20:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bde24:	b1c9      	cbz	r1, bde5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bde26:	4544      	cmp	r4, r8
   bde28:	d013      	beq.n	bde52 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bde2a:	f804 1b01 	strb.w	r1, [r4], #1
   bde2e:	e7f7      	b.n	bde20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bde30:	78aa      	ldrb	r2, [r5, #2]
   bde32:	2a75      	cmp	r2, #117	; 0x75
   bde34:	d1ec      	bne.n	bde10 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bde36:	461e      	mov	r6, r3
   bde38:	eba8 0104 	sub.w	r1, r8, r4
   bde3c:	f856 2b04 	ldr.w	r2, [r6], #4
   bde40:	4620      	mov	r0, r4
   bde42:	f7ff ffa3 	bl	bdd8c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bde46:	2800      	cmp	r0, #0
   bde48:	dd03      	ble.n	bde52 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bde4a:	4404      	add	r4, r0
   bde4c:	3503      	adds	r5, #3
   bde4e:	4633      	mov	r3, r6
   bde50:	e7d0      	b.n	bddf4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bde52:	4621      	mov	r1, r4
   bde54:	4638      	mov	r0, r7
   bde56:	f7ff ff73 	bl	bdd40 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bde5a:	3502      	adds	r5, #2
   bde5c:	e7ca      	b.n	bddf4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bde5e:	7022      	strb	r2, [r4, #0]
   bde60:	1be0      	subs	r0, r4, r7
   bde62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bde66 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bde66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bde68:	2400      	movs	r4, #0
   bde6a:	2310      	movs	r3, #16
   bde6c:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bde70:	6803      	ldr	r3, [r0, #0]
   bde72:	4615      	mov	r5, r2
   bde74:	699e      	ldr	r6, [r3, #24]
   bde76:	6812      	ldr	r2, [r2, #0]
   bde78:	466b      	mov	r3, sp
   bde7a:	e9cd 4400 	strd	r4, r4, [sp]
   bde7e:	47b0      	blx	r6
   bde80:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bde84:	f003 0306 	and.w	r3, r3, #6
   bde88:	2b06      	cmp	r3, #6
   bde8a:	bf03      	ittte	eq
   bde8c:	9b00      	ldreq	r3, [sp, #0]
   bde8e:	602b      	streq	r3, [r5, #0]
   bde90:	2001      	moveq	r0, #1
   bde92:	4620      	movne	r0, r4
   bde94:	b004      	add	sp, #16
   bde96:	bd70      	pop	{r4, r5, r6, pc}

000bde98 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bde98:	9800      	ldr	r0, [sp, #0]
   bde9a:	4290      	cmp	r0, r2
   bde9c:	bf14      	ite	ne
   bde9e:	2001      	movne	r0, #1
   bdea0:	2006      	moveq	r0, #6
   bdea2:	4770      	bx	lr

000bdea4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bdea4:	b510      	push	{r4, lr}
   bdea6:	4b03      	ldr	r3, [pc, #12]	; (bdeb4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bdea8:	6003      	str	r3, [r0, #0]
   bdeaa:	4604      	mov	r4, r0
   bdeac:	f000 f8cd 	bl	be04a <_ZNSt9type_infoD1Ev>
   bdeb0:	4620      	mov	r0, r4
   bdeb2:	bd10      	pop	{r4, pc}
   bdeb4:	000c2190 	.word	0x000c2190

000bdeb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bdeb8:	b510      	push	{r4, lr}
   bdeba:	4604      	mov	r4, r0
   bdebc:	f7ff fff2 	bl	bdea4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bdec0:	4620      	mov	r0, r4
   bdec2:	2108      	movs	r1, #8
   bdec4:	f7f6 f8eb 	bl	b409e <_ZdlPvj>
   bdec8:	4620      	mov	r0, r4
   bdeca:	bd10      	pop	{r4, pc}

000bdecc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bdecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bded0:	461f      	mov	r7, r3
   bded2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bded6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bdeda:	4598      	cmp	r8, r3
   bdedc:	4606      	mov	r6, r0
   bdede:	4615      	mov	r5, r2
   bdee0:	d107      	bne.n	bdef2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bdee2:	9907      	ldr	r1, [sp, #28]
   bdee4:	f000 f8b4 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdee8:	b118      	cbz	r0, bdef2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bdeea:	7165      	strb	r5, [r4, #5]
   bdeec:	2000      	movs	r0, #0
   bdeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdef2:	4639      	mov	r1, r7
   bdef4:	4630      	mov	r0, r6
   bdef6:	f000 f8ab 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdefa:	2800      	cmp	r0, #0
   bdefc:	d0f6      	beq.n	bdeec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bdefe:	2301      	movs	r3, #1
   bdf00:	f8c4 8000 	str.w	r8, [r4]
   bdf04:	7125      	strb	r5, [r4, #4]
   bdf06:	71a3      	strb	r3, [r4, #6]
   bdf08:	e7f0      	b.n	bdeec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bdf0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bdf0a:	b538      	push	{r3, r4, r5, lr}
   bdf0c:	4615      	mov	r5, r2
   bdf0e:	461c      	mov	r4, r3
   bdf10:	f000 f89e 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdf14:	b120      	cbz	r0, bdf20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bdf16:	2308      	movs	r3, #8
   bdf18:	60e3      	str	r3, [r4, #12]
   bdf1a:	2306      	movs	r3, #6
   bdf1c:	6025      	str	r5, [r4, #0]
   bdf1e:	7123      	strb	r3, [r4, #4]
   bdf20:	bd38      	pop	{r3, r4, r5, pc}

000bdf22 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bdf22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdf24:	4605      	mov	r5, r0
   bdf26:	460c      	mov	r4, r1
   bdf28:	9201      	str	r2, [sp, #4]
   bdf2a:	461e      	mov	r6, r3
   bdf2c:	f000 f890 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdf30:	b950      	cbnz	r0, bdf48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bdf32:	2e03      	cmp	r6, #3
   bdf34:	d808      	bhi.n	bdf48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bdf36:	6823      	ldr	r3, [r4, #0]
   bdf38:	9a01      	ldr	r2, [sp, #4]
   bdf3a:	695b      	ldr	r3, [r3, #20]
   bdf3c:	4629      	mov	r1, r5
   bdf3e:	4620      	mov	r0, r4
   bdf40:	b002      	add	sp, #8
   bdf42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bdf46:	4718      	bx	r3
   bdf48:	b002      	add	sp, #8
   bdf4a:	bd70      	pop	{r4, r5, r6, pc}

000bdf4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bdf4c:	b510      	push	{r4, lr}
   bdf4e:	4b03      	ldr	r3, [pc, #12]	; (bdf5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bdf50:	6003      	str	r3, [r0, #0]
   bdf52:	4604      	mov	r4, r0
   bdf54:	f7ff ffa6 	bl	bdea4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bdf58:	4620      	mov	r0, r4
   bdf5a:	bd10      	pop	{r4, pc}
   bdf5c:	000c21f0 	.word	0x000c21f0

000bdf60 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bdf60:	b510      	push	{r4, lr}
   bdf62:	4604      	mov	r4, r0
   bdf64:	f7ff fff2 	bl	bdf4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bdf68:	4620      	mov	r0, r4
   bdf6a:	210c      	movs	r1, #12
   bdf6c:	f7f6 f897 	bl	b409e <_ZdlPvj>
   bdf70:	4620      	mov	r0, r4
   bdf72:	bd10      	pop	{r4, pc}

000bdf74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bdf74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bdf76:	9f08      	ldr	r7, [sp, #32]
   bdf78:	4297      	cmp	r7, r2
   bdf7a:	4605      	mov	r5, r0
   bdf7c:	460e      	mov	r6, r1
   bdf7e:	4614      	mov	r4, r2
   bdf80:	d00a      	beq.n	bdf98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bdf82:	68a8      	ldr	r0, [r5, #8]
   bdf84:	6802      	ldr	r2, [r0, #0]
   bdf86:	9708      	str	r7, [sp, #32]
   bdf88:	6a15      	ldr	r5, [r2, #32]
   bdf8a:	4631      	mov	r1, r6
   bdf8c:	4622      	mov	r2, r4
   bdf8e:	46ac      	mov	ip, r5
   bdf90:	b003      	add	sp, #12
   bdf92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bdf96:	4760      	bx	ip
   bdf98:	4619      	mov	r1, r3
   bdf9a:	9301      	str	r3, [sp, #4]
   bdf9c:	f000 f858 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdfa0:	9b01      	ldr	r3, [sp, #4]
   bdfa2:	2800      	cmp	r0, #0
   bdfa4:	d0ed      	beq.n	bdf82 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bdfa6:	2006      	movs	r0, #6
   bdfa8:	b003      	add	sp, #12
   bdfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdfac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bdfac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfb0:	460d      	mov	r5, r1
   bdfb2:	4619      	mov	r1, r3
   bdfb4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bdfb8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bdfbc:	4681      	mov	r9, r0
   bdfbe:	4617      	mov	r7, r2
   bdfc0:	4698      	mov	r8, r3
   bdfc2:	f000 f845 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdfc6:	b190      	cbz	r0, bdfee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bdfc8:	2d00      	cmp	r5, #0
   bdfca:	6034      	str	r4, [r6, #0]
   bdfcc:	7137      	strb	r7, [r6, #4]
   bdfce:	db09      	blt.n	bdfe4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bdfd0:	1961      	adds	r1, r4, r5
   bdfd2:	458a      	cmp	sl, r1
   bdfd4:	bf0c      	ite	eq
   bdfd6:	2106      	moveq	r1, #6
   bdfd8:	2101      	movne	r1, #1
   bdfda:	71b1      	strb	r1, [r6, #6]
   bdfdc:	2000      	movs	r0, #0
   bdfde:	b001      	add	sp, #4
   bdfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdfe4:	3502      	adds	r5, #2
   bdfe6:	d1f9      	bne.n	bdfdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdfe8:	2301      	movs	r3, #1
   bdfea:	71b3      	strb	r3, [r6, #6]
   bdfec:	e7f6      	b.n	bdfdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdfee:	4554      	cmp	r4, sl
   bdff0:	d106      	bne.n	be000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdff2:	4659      	mov	r1, fp
   bdff4:	4648      	mov	r0, r9
   bdff6:	f000 f82b 	bl	be050 <_ZNKSt9type_infoeqERKS_>
   bdffa:	b108      	cbz	r0, be000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdffc:	7177      	strb	r7, [r6, #5]
   bdffe:	e7ed      	b.n	bdfdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   be000:	f8d9 0008 	ldr.w	r0, [r9, #8]
   be004:	6803      	ldr	r3, [r0, #0]
   be006:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   be00a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   be00e:	69dc      	ldr	r4, [r3, #28]
   be010:	463a      	mov	r2, r7
   be012:	4643      	mov	r3, r8
   be014:	4629      	mov	r1, r5
   be016:	46a4      	mov	ip, r4
   be018:	b001      	add	sp, #4
   be01a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be01e:	4760      	bx	ip

000be020 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   be020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be024:	4607      	mov	r7, r0
   be026:	460c      	mov	r4, r1
   be028:	4615      	mov	r5, r2
   be02a:	461e      	mov	r6, r3
   be02c:	f7ff ff6d 	bl	bdf0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   be030:	b948      	cbnz	r0, be046 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   be032:	68b8      	ldr	r0, [r7, #8]
   be034:	6803      	ldr	r3, [r0, #0]
   be036:	699f      	ldr	r7, [r3, #24]
   be038:	462a      	mov	r2, r5
   be03a:	4633      	mov	r3, r6
   be03c:	4621      	mov	r1, r4
   be03e:	46bc      	mov	ip, r7
   be040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   be044:	4760      	bx	ip
   be046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000be04a <_ZNSt9type_infoD1Ev>:
   be04a:	4770      	bx	lr

000be04c <_ZNKSt9type_info14__is_pointer_pEv>:
   be04c:	2000      	movs	r0, #0
   be04e:	4770      	bx	lr

000be050 <_ZNKSt9type_infoeqERKS_>:
   be050:	4281      	cmp	r1, r0
   be052:	b508      	push	{r3, lr}
   be054:	d00e      	beq.n	be074 <_ZNKSt9type_infoeqERKS_+0x24>
   be056:	6840      	ldr	r0, [r0, #4]
   be058:	7803      	ldrb	r3, [r0, #0]
   be05a:	2b2a      	cmp	r3, #42	; 0x2a
   be05c:	d00c      	beq.n	be078 <_ZNKSt9type_infoeqERKS_+0x28>
   be05e:	6849      	ldr	r1, [r1, #4]
   be060:	780b      	ldrb	r3, [r1, #0]
   be062:	2b2a      	cmp	r3, #42	; 0x2a
   be064:	bf08      	it	eq
   be066:	3101      	addeq	r1, #1
   be068:	f000 fdb5 	bl	bebd6 <strcmp>
   be06c:	fab0 f080 	clz	r0, r0
   be070:	0940      	lsrs	r0, r0, #5
   be072:	bd08      	pop	{r3, pc}
   be074:	2001      	movs	r0, #1
   be076:	e7fc      	b.n	be072 <_ZNKSt9type_infoeqERKS_+0x22>
   be078:	2000      	movs	r0, #0
   be07a:	e7fa      	b.n	be072 <_ZNKSt9type_infoeqERKS_+0x22>

000be07c <__aeabi_drsub>:
   be07c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be080:	e002      	b.n	be088 <__adddf3>
   be082:	bf00      	nop

000be084 <__aeabi_dsub>:
   be084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be088 <__adddf3>:
   be088:	b530      	push	{r4, r5, lr}
   be08a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be08e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be092:	ea94 0f05 	teq	r4, r5
   be096:	bf08      	it	eq
   be098:	ea90 0f02 	teqeq	r0, r2
   be09c:	bf1f      	itttt	ne
   be09e:	ea54 0c00 	orrsne.w	ip, r4, r0
   be0a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   be0a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be0aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be0ae:	f000 80e2 	beq.w	be276 <__adddf3+0x1ee>
   be0b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be0b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be0ba:	bfb8      	it	lt
   be0bc:	426d      	neglt	r5, r5
   be0be:	dd0c      	ble.n	be0da <__adddf3+0x52>
   be0c0:	442c      	add	r4, r5
   be0c2:	ea80 0202 	eor.w	r2, r0, r2
   be0c6:	ea81 0303 	eor.w	r3, r1, r3
   be0ca:	ea82 0000 	eor.w	r0, r2, r0
   be0ce:	ea83 0101 	eor.w	r1, r3, r1
   be0d2:	ea80 0202 	eor.w	r2, r0, r2
   be0d6:	ea81 0303 	eor.w	r3, r1, r3
   be0da:	2d36      	cmp	r5, #54	; 0x36
   be0dc:	bf88      	it	hi
   be0de:	bd30      	pophi	{r4, r5, pc}
   be0e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be0e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be0e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be0ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be0f0:	d002      	beq.n	be0f8 <__adddf3+0x70>
   be0f2:	4240      	negs	r0, r0
   be0f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be0f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be0fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be100:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be104:	d002      	beq.n	be10c <__adddf3+0x84>
   be106:	4252      	negs	r2, r2
   be108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be10c:	ea94 0f05 	teq	r4, r5
   be110:	f000 80a7 	beq.w	be262 <__adddf3+0x1da>
   be114:	f1a4 0401 	sub.w	r4, r4, #1
   be118:	f1d5 0e20 	rsbs	lr, r5, #32
   be11c:	db0d      	blt.n	be13a <__adddf3+0xb2>
   be11e:	fa02 fc0e 	lsl.w	ip, r2, lr
   be122:	fa22 f205 	lsr.w	r2, r2, r5
   be126:	1880      	adds	r0, r0, r2
   be128:	f141 0100 	adc.w	r1, r1, #0
   be12c:	fa03 f20e 	lsl.w	r2, r3, lr
   be130:	1880      	adds	r0, r0, r2
   be132:	fa43 f305 	asr.w	r3, r3, r5
   be136:	4159      	adcs	r1, r3
   be138:	e00e      	b.n	be158 <__adddf3+0xd0>
   be13a:	f1a5 0520 	sub.w	r5, r5, #32
   be13e:	f10e 0e20 	add.w	lr, lr, #32
   be142:	2a01      	cmp	r2, #1
   be144:	fa03 fc0e 	lsl.w	ip, r3, lr
   be148:	bf28      	it	cs
   be14a:	f04c 0c02 	orrcs.w	ip, ip, #2
   be14e:	fa43 f305 	asr.w	r3, r3, r5
   be152:	18c0      	adds	r0, r0, r3
   be154:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be15c:	d507      	bpl.n	be16e <__adddf3+0xe6>
   be15e:	f04f 0e00 	mov.w	lr, #0
   be162:	f1dc 0c00 	rsbs	ip, ip, #0
   be166:	eb7e 0000 	sbcs.w	r0, lr, r0
   be16a:	eb6e 0101 	sbc.w	r1, lr, r1
   be16e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be172:	d31b      	bcc.n	be1ac <__adddf3+0x124>
   be174:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be178:	d30c      	bcc.n	be194 <__adddf3+0x10c>
   be17a:	0849      	lsrs	r1, r1, #1
   be17c:	ea5f 0030 	movs.w	r0, r0, rrx
   be180:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be184:	f104 0401 	add.w	r4, r4, #1
   be188:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be18c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be190:	f080 809a 	bcs.w	be2c8 <__adddf3+0x240>
   be194:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be198:	bf08      	it	eq
   be19a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be19e:	f150 0000 	adcs.w	r0, r0, #0
   be1a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be1a6:	ea41 0105 	orr.w	r1, r1, r5
   be1aa:	bd30      	pop	{r4, r5, pc}
   be1ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be1b0:	4140      	adcs	r0, r0
   be1b2:	eb41 0101 	adc.w	r1, r1, r1
   be1b6:	3c01      	subs	r4, #1
   be1b8:	bf28      	it	cs
   be1ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be1be:	d2e9      	bcs.n	be194 <__adddf3+0x10c>
   be1c0:	f091 0f00 	teq	r1, #0
   be1c4:	bf04      	itt	eq
   be1c6:	4601      	moveq	r1, r0
   be1c8:	2000      	moveq	r0, #0
   be1ca:	fab1 f381 	clz	r3, r1
   be1ce:	bf08      	it	eq
   be1d0:	3320      	addeq	r3, #32
   be1d2:	f1a3 030b 	sub.w	r3, r3, #11
   be1d6:	f1b3 0220 	subs.w	r2, r3, #32
   be1da:	da0c      	bge.n	be1f6 <__adddf3+0x16e>
   be1dc:	320c      	adds	r2, #12
   be1de:	dd08      	ble.n	be1f2 <__adddf3+0x16a>
   be1e0:	f102 0c14 	add.w	ip, r2, #20
   be1e4:	f1c2 020c 	rsb	r2, r2, #12
   be1e8:	fa01 f00c 	lsl.w	r0, r1, ip
   be1ec:	fa21 f102 	lsr.w	r1, r1, r2
   be1f0:	e00c      	b.n	be20c <__adddf3+0x184>
   be1f2:	f102 0214 	add.w	r2, r2, #20
   be1f6:	bfd8      	it	le
   be1f8:	f1c2 0c20 	rsble	ip, r2, #32
   be1fc:	fa01 f102 	lsl.w	r1, r1, r2
   be200:	fa20 fc0c 	lsr.w	ip, r0, ip
   be204:	bfdc      	itt	le
   be206:	ea41 010c 	orrle.w	r1, r1, ip
   be20a:	4090      	lslle	r0, r2
   be20c:	1ae4      	subs	r4, r4, r3
   be20e:	bfa2      	ittt	ge
   be210:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be214:	4329      	orrge	r1, r5
   be216:	bd30      	popge	{r4, r5, pc}
   be218:	ea6f 0404 	mvn.w	r4, r4
   be21c:	3c1f      	subs	r4, #31
   be21e:	da1c      	bge.n	be25a <__adddf3+0x1d2>
   be220:	340c      	adds	r4, #12
   be222:	dc0e      	bgt.n	be242 <__adddf3+0x1ba>
   be224:	f104 0414 	add.w	r4, r4, #20
   be228:	f1c4 0220 	rsb	r2, r4, #32
   be22c:	fa20 f004 	lsr.w	r0, r0, r4
   be230:	fa01 f302 	lsl.w	r3, r1, r2
   be234:	ea40 0003 	orr.w	r0, r0, r3
   be238:	fa21 f304 	lsr.w	r3, r1, r4
   be23c:	ea45 0103 	orr.w	r1, r5, r3
   be240:	bd30      	pop	{r4, r5, pc}
   be242:	f1c4 040c 	rsb	r4, r4, #12
   be246:	f1c4 0220 	rsb	r2, r4, #32
   be24a:	fa20 f002 	lsr.w	r0, r0, r2
   be24e:	fa01 f304 	lsl.w	r3, r1, r4
   be252:	ea40 0003 	orr.w	r0, r0, r3
   be256:	4629      	mov	r1, r5
   be258:	bd30      	pop	{r4, r5, pc}
   be25a:	fa21 f004 	lsr.w	r0, r1, r4
   be25e:	4629      	mov	r1, r5
   be260:	bd30      	pop	{r4, r5, pc}
   be262:	f094 0f00 	teq	r4, #0
   be266:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be26a:	bf06      	itte	eq
   be26c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be270:	3401      	addeq	r4, #1
   be272:	3d01      	subne	r5, #1
   be274:	e74e      	b.n	be114 <__adddf3+0x8c>
   be276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be27a:	bf18      	it	ne
   be27c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be280:	d029      	beq.n	be2d6 <__adddf3+0x24e>
   be282:	ea94 0f05 	teq	r4, r5
   be286:	bf08      	it	eq
   be288:	ea90 0f02 	teqeq	r0, r2
   be28c:	d005      	beq.n	be29a <__adddf3+0x212>
   be28e:	ea54 0c00 	orrs.w	ip, r4, r0
   be292:	bf04      	itt	eq
   be294:	4619      	moveq	r1, r3
   be296:	4610      	moveq	r0, r2
   be298:	bd30      	pop	{r4, r5, pc}
   be29a:	ea91 0f03 	teq	r1, r3
   be29e:	bf1e      	ittt	ne
   be2a0:	2100      	movne	r1, #0
   be2a2:	2000      	movne	r0, #0
   be2a4:	bd30      	popne	{r4, r5, pc}
   be2a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be2aa:	d105      	bne.n	be2b8 <__adddf3+0x230>
   be2ac:	0040      	lsls	r0, r0, #1
   be2ae:	4149      	adcs	r1, r1
   be2b0:	bf28      	it	cs
   be2b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be2b6:	bd30      	pop	{r4, r5, pc}
   be2b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be2bc:	bf3c      	itt	cc
   be2be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be2c2:	bd30      	popcc	{r4, r5, pc}
   be2c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be2c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be2cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be2d0:	f04f 0000 	mov.w	r0, #0
   be2d4:	bd30      	pop	{r4, r5, pc}
   be2d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be2da:	bf1a      	itte	ne
   be2dc:	4619      	movne	r1, r3
   be2de:	4610      	movne	r0, r2
   be2e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be2e4:	bf1c      	itt	ne
   be2e6:	460b      	movne	r3, r1
   be2e8:	4602      	movne	r2, r0
   be2ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be2ee:	bf06      	itte	eq
   be2f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be2f4:	ea91 0f03 	teqeq	r1, r3
   be2f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be2fc:	bd30      	pop	{r4, r5, pc}
   be2fe:	bf00      	nop

000be300 <__aeabi_ui2d>:
   be300:	f090 0f00 	teq	r0, #0
   be304:	bf04      	itt	eq
   be306:	2100      	moveq	r1, #0
   be308:	4770      	bxeq	lr
   be30a:	b530      	push	{r4, r5, lr}
   be30c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be310:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be314:	f04f 0500 	mov.w	r5, #0
   be318:	f04f 0100 	mov.w	r1, #0
   be31c:	e750      	b.n	be1c0 <__adddf3+0x138>
   be31e:	bf00      	nop

000be320 <__aeabi_i2d>:
   be320:	f090 0f00 	teq	r0, #0
   be324:	bf04      	itt	eq
   be326:	2100      	moveq	r1, #0
   be328:	4770      	bxeq	lr
   be32a:	b530      	push	{r4, r5, lr}
   be32c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be330:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be334:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be338:	bf48      	it	mi
   be33a:	4240      	negmi	r0, r0
   be33c:	f04f 0100 	mov.w	r1, #0
   be340:	e73e      	b.n	be1c0 <__adddf3+0x138>
   be342:	bf00      	nop

000be344 <__aeabi_f2d>:
   be344:	0042      	lsls	r2, r0, #1
   be346:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be34a:	ea4f 0131 	mov.w	r1, r1, rrx
   be34e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be352:	bf1f      	itttt	ne
   be354:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be358:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be35c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be360:	4770      	bxne	lr
   be362:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be366:	bf08      	it	eq
   be368:	4770      	bxeq	lr
   be36a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be36e:	bf04      	itt	eq
   be370:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be374:	4770      	bxeq	lr
   be376:	b530      	push	{r4, r5, lr}
   be378:	f44f 7460 	mov.w	r4, #896	; 0x380
   be37c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be384:	e71c      	b.n	be1c0 <__adddf3+0x138>
   be386:	bf00      	nop

000be388 <__aeabi_ul2d>:
   be388:	ea50 0201 	orrs.w	r2, r0, r1
   be38c:	bf08      	it	eq
   be38e:	4770      	bxeq	lr
   be390:	b530      	push	{r4, r5, lr}
   be392:	f04f 0500 	mov.w	r5, #0
   be396:	e00a      	b.n	be3ae <__aeabi_l2d+0x16>

000be398 <__aeabi_l2d>:
   be398:	ea50 0201 	orrs.w	r2, r0, r1
   be39c:	bf08      	it	eq
   be39e:	4770      	bxeq	lr
   be3a0:	b530      	push	{r4, r5, lr}
   be3a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be3a6:	d502      	bpl.n	be3ae <__aeabi_l2d+0x16>
   be3a8:	4240      	negs	r0, r0
   be3aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be3ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be3b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be3b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be3ba:	f43f aed8 	beq.w	be16e <__adddf3+0xe6>
   be3be:	f04f 0203 	mov.w	r2, #3
   be3c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be3c6:	bf18      	it	ne
   be3c8:	3203      	addne	r2, #3
   be3ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be3ce:	bf18      	it	ne
   be3d0:	3203      	addne	r2, #3
   be3d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be3d6:	f1c2 0320 	rsb	r3, r2, #32
   be3da:	fa00 fc03 	lsl.w	ip, r0, r3
   be3de:	fa20 f002 	lsr.w	r0, r0, r2
   be3e2:	fa01 fe03 	lsl.w	lr, r1, r3
   be3e6:	ea40 000e 	orr.w	r0, r0, lr
   be3ea:	fa21 f102 	lsr.w	r1, r1, r2
   be3ee:	4414      	add	r4, r2
   be3f0:	e6bd      	b.n	be16e <__adddf3+0xe6>
   be3f2:	bf00      	nop

000be3f4 <__aeabi_dmul>:
   be3f4:	b570      	push	{r4, r5, r6, lr}
   be3f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be3fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be3fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be402:	bf1d      	ittte	ne
   be404:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be408:	ea94 0f0c 	teqne	r4, ip
   be40c:	ea95 0f0c 	teqne	r5, ip
   be410:	f000 f8de 	bleq	be5d0 <__aeabi_dmul+0x1dc>
   be414:	442c      	add	r4, r5
   be416:	ea81 0603 	eor.w	r6, r1, r3
   be41a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be41e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be422:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be426:	bf18      	it	ne
   be428:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be42c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be434:	d038      	beq.n	be4a8 <__aeabi_dmul+0xb4>
   be436:	fba0 ce02 	umull	ip, lr, r0, r2
   be43a:	f04f 0500 	mov.w	r5, #0
   be43e:	fbe1 e502 	umlal	lr, r5, r1, r2
   be442:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be446:	fbe0 e503 	umlal	lr, r5, r0, r3
   be44a:	f04f 0600 	mov.w	r6, #0
   be44e:	fbe1 5603 	umlal	r5, r6, r1, r3
   be452:	f09c 0f00 	teq	ip, #0
   be456:	bf18      	it	ne
   be458:	f04e 0e01 	orrne.w	lr, lr, #1
   be45c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be460:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be464:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be468:	d204      	bcs.n	be474 <__aeabi_dmul+0x80>
   be46a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be46e:	416d      	adcs	r5, r5
   be470:	eb46 0606 	adc.w	r6, r6, r6
   be474:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be478:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be47c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be480:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be484:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be488:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be48c:	bf88      	it	hi
   be48e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be492:	d81e      	bhi.n	be4d2 <__aeabi_dmul+0xde>
   be494:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be498:	bf08      	it	eq
   be49a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be49e:	f150 0000 	adcs.w	r0, r0, #0
   be4a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be4a6:	bd70      	pop	{r4, r5, r6, pc}
   be4a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be4ac:	ea46 0101 	orr.w	r1, r6, r1
   be4b0:	ea40 0002 	orr.w	r0, r0, r2
   be4b4:	ea81 0103 	eor.w	r1, r1, r3
   be4b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be4bc:	bfc2      	ittt	gt
   be4be:	ebd4 050c 	rsbsgt	r5, r4, ip
   be4c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be4c6:	bd70      	popgt	{r4, r5, r6, pc}
   be4c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be4cc:	f04f 0e00 	mov.w	lr, #0
   be4d0:	3c01      	subs	r4, #1
   be4d2:	f300 80ab 	bgt.w	be62c <__aeabi_dmul+0x238>
   be4d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be4da:	bfde      	ittt	le
   be4dc:	2000      	movle	r0, #0
   be4de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be4e2:	bd70      	pople	{r4, r5, r6, pc}
   be4e4:	f1c4 0400 	rsb	r4, r4, #0
   be4e8:	3c20      	subs	r4, #32
   be4ea:	da35      	bge.n	be558 <__aeabi_dmul+0x164>
   be4ec:	340c      	adds	r4, #12
   be4ee:	dc1b      	bgt.n	be528 <__aeabi_dmul+0x134>
   be4f0:	f104 0414 	add.w	r4, r4, #20
   be4f4:	f1c4 0520 	rsb	r5, r4, #32
   be4f8:	fa00 f305 	lsl.w	r3, r0, r5
   be4fc:	fa20 f004 	lsr.w	r0, r0, r4
   be500:	fa01 f205 	lsl.w	r2, r1, r5
   be504:	ea40 0002 	orr.w	r0, r0, r2
   be508:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be50c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be514:	fa21 f604 	lsr.w	r6, r1, r4
   be518:	eb42 0106 	adc.w	r1, r2, r6
   be51c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be520:	bf08      	it	eq
   be522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be526:	bd70      	pop	{r4, r5, r6, pc}
   be528:	f1c4 040c 	rsb	r4, r4, #12
   be52c:	f1c4 0520 	rsb	r5, r4, #32
   be530:	fa00 f304 	lsl.w	r3, r0, r4
   be534:	fa20 f005 	lsr.w	r0, r0, r5
   be538:	fa01 f204 	lsl.w	r2, r1, r4
   be53c:	ea40 0002 	orr.w	r0, r0, r2
   be540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be548:	f141 0100 	adc.w	r1, r1, #0
   be54c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be550:	bf08      	it	eq
   be552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be556:	bd70      	pop	{r4, r5, r6, pc}
   be558:	f1c4 0520 	rsb	r5, r4, #32
   be55c:	fa00 f205 	lsl.w	r2, r0, r5
   be560:	ea4e 0e02 	orr.w	lr, lr, r2
   be564:	fa20 f304 	lsr.w	r3, r0, r4
   be568:	fa01 f205 	lsl.w	r2, r1, r5
   be56c:	ea43 0302 	orr.w	r3, r3, r2
   be570:	fa21 f004 	lsr.w	r0, r1, r4
   be574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be578:	fa21 f204 	lsr.w	r2, r1, r4
   be57c:	ea20 0002 	bic.w	r0, r0, r2
   be580:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be588:	bf08      	it	eq
   be58a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be58e:	bd70      	pop	{r4, r5, r6, pc}
   be590:	f094 0f00 	teq	r4, #0
   be594:	d10f      	bne.n	be5b6 <__aeabi_dmul+0x1c2>
   be596:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be59a:	0040      	lsls	r0, r0, #1
   be59c:	eb41 0101 	adc.w	r1, r1, r1
   be5a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be5a4:	bf08      	it	eq
   be5a6:	3c01      	subeq	r4, #1
   be5a8:	d0f7      	beq.n	be59a <__aeabi_dmul+0x1a6>
   be5aa:	ea41 0106 	orr.w	r1, r1, r6
   be5ae:	f095 0f00 	teq	r5, #0
   be5b2:	bf18      	it	ne
   be5b4:	4770      	bxne	lr
   be5b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be5ba:	0052      	lsls	r2, r2, #1
   be5bc:	eb43 0303 	adc.w	r3, r3, r3
   be5c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be5c4:	bf08      	it	eq
   be5c6:	3d01      	subeq	r5, #1
   be5c8:	d0f7      	beq.n	be5ba <__aeabi_dmul+0x1c6>
   be5ca:	ea43 0306 	orr.w	r3, r3, r6
   be5ce:	4770      	bx	lr
   be5d0:	ea94 0f0c 	teq	r4, ip
   be5d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be5d8:	bf18      	it	ne
   be5da:	ea95 0f0c 	teqne	r5, ip
   be5de:	d00c      	beq.n	be5fa <__aeabi_dmul+0x206>
   be5e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be5e4:	bf18      	it	ne
   be5e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be5ea:	d1d1      	bne.n	be590 <__aeabi_dmul+0x19c>
   be5ec:	ea81 0103 	eor.w	r1, r1, r3
   be5f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be5f4:	f04f 0000 	mov.w	r0, #0
   be5f8:	bd70      	pop	{r4, r5, r6, pc}
   be5fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be5fe:	bf06      	itte	eq
   be600:	4610      	moveq	r0, r2
   be602:	4619      	moveq	r1, r3
   be604:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be608:	d019      	beq.n	be63e <__aeabi_dmul+0x24a>
   be60a:	ea94 0f0c 	teq	r4, ip
   be60e:	d102      	bne.n	be616 <__aeabi_dmul+0x222>
   be610:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be614:	d113      	bne.n	be63e <__aeabi_dmul+0x24a>
   be616:	ea95 0f0c 	teq	r5, ip
   be61a:	d105      	bne.n	be628 <__aeabi_dmul+0x234>
   be61c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be620:	bf1c      	itt	ne
   be622:	4610      	movne	r0, r2
   be624:	4619      	movne	r1, r3
   be626:	d10a      	bne.n	be63e <__aeabi_dmul+0x24a>
   be628:	ea81 0103 	eor.w	r1, r1, r3
   be62c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be630:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be638:	f04f 0000 	mov.w	r0, #0
   be63c:	bd70      	pop	{r4, r5, r6, pc}
   be63e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be642:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be646:	bd70      	pop	{r4, r5, r6, pc}

000be648 <__aeabi_ddiv>:
   be648:	b570      	push	{r4, r5, r6, lr}
   be64a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be64e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be656:	bf1d      	ittte	ne
   be658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be65c:	ea94 0f0c 	teqne	r4, ip
   be660:	ea95 0f0c 	teqne	r5, ip
   be664:	f000 f8a7 	bleq	be7b6 <__aeabi_ddiv+0x16e>
   be668:	eba4 0405 	sub.w	r4, r4, r5
   be66c:	ea81 0e03 	eor.w	lr, r1, r3
   be670:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be674:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be678:	f000 8088 	beq.w	be78c <__aeabi_ddiv+0x144>
   be67c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be680:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be684:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be688:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be68c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be690:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be694:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be698:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be69c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be6a0:	429d      	cmp	r5, r3
   be6a2:	bf08      	it	eq
   be6a4:	4296      	cmpeq	r6, r2
   be6a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be6aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be6ae:	d202      	bcs.n	be6b6 <__aeabi_ddiv+0x6e>
   be6b0:	085b      	lsrs	r3, r3, #1
   be6b2:	ea4f 0232 	mov.w	r2, r2, rrx
   be6b6:	1ab6      	subs	r6, r6, r2
   be6b8:	eb65 0503 	sbc.w	r5, r5, r3
   be6bc:	085b      	lsrs	r3, r3, #1
   be6be:	ea4f 0232 	mov.w	r2, r2, rrx
   be6c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be6c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be6ca:	ebb6 0e02 	subs.w	lr, r6, r2
   be6ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   be6d2:	bf22      	ittt	cs
   be6d4:	1ab6      	subcs	r6, r6, r2
   be6d6:	4675      	movcs	r5, lr
   be6d8:	ea40 000c 	orrcs.w	r0, r0, ip
   be6dc:	085b      	lsrs	r3, r3, #1
   be6de:	ea4f 0232 	mov.w	r2, r2, rrx
   be6e2:	ebb6 0e02 	subs.w	lr, r6, r2
   be6e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   be6ea:	bf22      	ittt	cs
   be6ec:	1ab6      	subcs	r6, r6, r2
   be6ee:	4675      	movcs	r5, lr
   be6f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be6f4:	085b      	lsrs	r3, r3, #1
   be6f6:	ea4f 0232 	mov.w	r2, r2, rrx
   be6fa:	ebb6 0e02 	subs.w	lr, r6, r2
   be6fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   be702:	bf22      	ittt	cs
   be704:	1ab6      	subcs	r6, r6, r2
   be706:	4675      	movcs	r5, lr
   be708:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be70c:	085b      	lsrs	r3, r3, #1
   be70e:	ea4f 0232 	mov.w	r2, r2, rrx
   be712:	ebb6 0e02 	subs.w	lr, r6, r2
   be716:	eb75 0e03 	sbcs.w	lr, r5, r3
   be71a:	bf22      	ittt	cs
   be71c:	1ab6      	subcs	r6, r6, r2
   be71e:	4675      	movcs	r5, lr
   be720:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be724:	ea55 0e06 	orrs.w	lr, r5, r6
   be728:	d018      	beq.n	be75c <__aeabi_ddiv+0x114>
   be72a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be72e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be732:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be736:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be73a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be73e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be742:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be746:	d1c0      	bne.n	be6ca <__aeabi_ddiv+0x82>
   be748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be74c:	d10b      	bne.n	be766 <__aeabi_ddiv+0x11e>
   be74e:	ea41 0100 	orr.w	r1, r1, r0
   be752:	f04f 0000 	mov.w	r0, #0
   be756:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be75a:	e7b6      	b.n	be6ca <__aeabi_ddiv+0x82>
   be75c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be760:	bf04      	itt	eq
   be762:	4301      	orreq	r1, r0
   be764:	2000      	moveq	r0, #0
   be766:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be76a:	bf88      	it	hi
   be76c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be770:	f63f aeaf 	bhi.w	be4d2 <__aeabi_dmul+0xde>
   be774:	ebb5 0c03 	subs.w	ip, r5, r3
   be778:	bf04      	itt	eq
   be77a:	ebb6 0c02 	subseq.w	ip, r6, r2
   be77e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be782:	f150 0000 	adcs.w	r0, r0, #0
   be786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be78a:	bd70      	pop	{r4, r5, r6, pc}
   be78c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be790:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be794:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be798:	bfc2      	ittt	gt
   be79a:	ebd4 050c 	rsbsgt	r5, r4, ip
   be79e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be7a2:	bd70      	popgt	{r4, r5, r6, pc}
   be7a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be7a8:	f04f 0e00 	mov.w	lr, #0
   be7ac:	3c01      	subs	r4, #1
   be7ae:	e690      	b.n	be4d2 <__aeabi_dmul+0xde>
   be7b0:	ea45 0e06 	orr.w	lr, r5, r6
   be7b4:	e68d      	b.n	be4d2 <__aeabi_dmul+0xde>
   be7b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be7ba:	ea94 0f0c 	teq	r4, ip
   be7be:	bf08      	it	eq
   be7c0:	ea95 0f0c 	teqeq	r5, ip
   be7c4:	f43f af3b 	beq.w	be63e <__aeabi_dmul+0x24a>
   be7c8:	ea94 0f0c 	teq	r4, ip
   be7cc:	d10a      	bne.n	be7e4 <__aeabi_ddiv+0x19c>
   be7ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be7d2:	f47f af34 	bne.w	be63e <__aeabi_dmul+0x24a>
   be7d6:	ea95 0f0c 	teq	r5, ip
   be7da:	f47f af25 	bne.w	be628 <__aeabi_dmul+0x234>
   be7de:	4610      	mov	r0, r2
   be7e0:	4619      	mov	r1, r3
   be7e2:	e72c      	b.n	be63e <__aeabi_dmul+0x24a>
   be7e4:	ea95 0f0c 	teq	r5, ip
   be7e8:	d106      	bne.n	be7f8 <__aeabi_ddiv+0x1b0>
   be7ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be7ee:	f43f aefd 	beq.w	be5ec <__aeabi_dmul+0x1f8>
   be7f2:	4610      	mov	r0, r2
   be7f4:	4619      	mov	r1, r3
   be7f6:	e722      	b.n	be63e <__aeabi_dmul+0x24a>
   be7f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be7fc:	bf18      	it	ne
   be7fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be802:	f47f aec5 	bne.w	be590 <__aeabi_dmul+0x19c>
   be806:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be80a:	f47f af0d 	bne.w	be628 <__aeabi_dmul+0x234>
   be80e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be812:	f47f aeeb 	bne.w	be5ec <__aeabi_dmul+0x1f8>
   be816:	e712      	b.n	be63e <__aeabi_dmul+0x24a>

000be818 <__gedf2>:
   be818:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be81c:	e006      	b.n	be82c <__cmpdf2+0x4>
   be81e:	bf00      	nop

000be820 <__ledf2>:
   be820:	f04f 0c01 	mov.w	ip, #1
   be824:	e002      	b.n	be82c <__cmpdf2+0x4>
   be826:	bf00      	nop

000be828 <__cmpdf2>:
   be828:	f04f 0c01 	mov.w	ip, #1
   be82c:	f84d cd04 	str.w	ip, [sp, #-4]!
   be830:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be83c:	bf18      	it	ne
   be83e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be842:	d01b      	beq.n	be87c <__cmpdf2+0x54>
   be844:	b001      	add	sp, #4
   be846:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be84a:	bf0c      	ite	eq
   be84c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be850:	ea91 0f03 	teqne	r1, r3
   be854:	bf02      	ittt	eq
   be856:	ea90 0f02 	teqeq	r0, r2
   be85a:	2000      	moveq	r0, #0
   be85c:	4770      	bxeq	lr
   be85e:	f110 0f00 	cmn.w	r0, #0
   be862:	ea91 0f03 	teq	r1, r3
   be866:	bf58      	it	pl
   be868:	4299      	cmppl	r1, r3
   be86a:	bf08      	it	eq
   be86c:	4290      	cmpeq	r0, r2
   be86e:	bf2c      	ite	cs
   be870:	17d8      	asrcs	r0, r3, #31
   be872:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be876:	f040 0001 	orr.w	r0, r0, #1
   be87a:	4770      	bx	lr
   be87c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be884:	d102      	bne.n	be88c <__cmpdf2+0x64>
   be886:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be88a:	d107      	bne.n	be89c <__cmpdf2+0x74>
   be88c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be894:	d1d6      	bne.n	be844 <__cmpdf2+0x1c>
   be896:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be89a:	d0d3      	beq.n	be844 <__cmpdf2+0x1c>
   be89c:	f85d 0b04 	ldr.w	r0, [sp], #4
   be8a0:	4770      	bx	lr
   be8a2:	bf00      	nop

000be8a4 <__aeabi_cdrcmple>:
   be8a4:	4684      	mov	ip, r0
   be8a6:	4610      	mov	r0, r2
   be8a8:	4662      	mov	r2, ip
   be8aa:	468c      	mov	ip, r1
   be8ac:	4619      	mov	r1, r3
   be8ae:	4663      	mov	r3, ip
   be8b0:	e000      	b.n	be8b4 <__aeabi_cdcmpeq>
   be8b2:	bf00      	nop

000be8b4 <__aeabi_cdcmpeq>:
   be8b4:	b501      	push	{r0, lr}
   be8b6:	f7ff ffb7 	bl	be828 <__cmpdf2>
   be8ba:	2800      	cmp	r0, #0
   be8bc:	bf48      	it	mi
   be8be:	f110 0f00 	cmnmi.w	r0, #0
   be8c2:	bd01      	pop	{r0, pc}

000be8c4 <__aeabi_dcmpeq>:
   be8c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   be8c8:	f7ff fff4 	bl	be8b4 <__aeabi_cdcmpeq>
   be8cc:	bf0c      	ite	eq
   be8ce:	2001      	moveq	r0, #1
   be8d0:	2000      	movne	r0, #0
   be8d2:	f85d fb08 	ldr.w	pc, [sp], #8
   be8d6:	bf00      	nop

000be8d8 <__aeabi_dcmplt>:
   be8d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   be8dc:	f7ff ffea 	bl	be8b4 <__aeabi_cdcmpeq>
   be8e0:	bf34      	ite	cc
   be8e2:	2001      	movcc	r0, #1
   be8e4:	2000      	movcs	r0, #0
   be8e6:	f85d fb08 	ldr.w	pc, [sp], #8
   be8ea:	bf00      	nop

000be8ec <__aeabi_dcmple>:
   be8ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   be8f0:	f7ff ffe0 	bl	be8b4 <__aeabi_cdcmpeq>
   be8f4:	bf94      	ite	ls
   be8f6:	2001      	movls	r0, #1
   be8f8:	2000      	movhi	r0, #0
   be8fa:	f85d fb08 	ldr.w	pc, [sp], #8
   be8fe:	bf00      	nop

000be900 <__aeabi_dcmpge>:
   be900:	f84d ed08 	str.w	lr, [sp, #-8]!
   be904:	f7ff ffce 	bl	be8a4 <__aeabi_cdrcmple>
   be908:	bf94      	ite	ls
   be90a:	2001      	movls	r0, #1
   be90c:	2000      	movhi	r0, #0
   be90e:	f85d fb08 	ldr.w	pc, [sp], #8
   be912:	bf00      	nop

000be914 <__aeabi_dcmpgt>:
   be914:	f84d ed08 	str.w	lr, [sp, #-8]!
   be918:	f7ff ffc4 	bl	be8a4 <__aeabi_cdrcmple>
   be91c:	bf34      	ite	cc
   be91e:	2001      	movcc	r0, #1
   be920:	2000      	movcs	r0, #0
   be922:	f85d fb08 	ldr.w	pc, [sp], #8
   be926:	bf00      	nop

000be928 <__aeabi_d2uiz>:
   be928:	004a      	lsls	r2, r1, #1
   be92a:	d211      	bcs.n	be950 <__aeabi_d2uiz+0x28>
   be92c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be930:	d211      	bcs.n	be956 <__aeabi_d2uiz+0x2e>
   be932:	d50d      	bpl.n	be950 <__aeabi_d2uiz+0x28>
   be934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be93c:	d40e      	bmi.n	be95c <__aeabi_d2uiz+0x34>
   be93e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be94a:	fa23 f002 	lsr.w	r0, r3, r2
   be94e:	4770      	bx	lr
   be950:	f04f 0000 	mov.w	r0, #0
   be954:	4770      	bx	lr
   be956:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be95a:	d102      	bne.n	be962 <__aeabi_d2uiz+0x3a>
   be95c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be960:	4770      	bx	lr
   be962:	f04f 0000 	mov.w	r0, #0
   be966:	4770      	bx	lr

000be968 <__aeabi_d2f>:
   be968:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be96c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be970:	bf24      	itt	cs
   be972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be97a:	d90d      	bls.n	be998 <__aeabi_d2f+0x30>
   be97c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be988:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be98c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be990:	bf08      	it	eq
   be992:	f020 0001 	biceq.w	r0, r0, #1
   be996:	4770      	bx	lr
   be998:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be99c:	d121      	bne.n	be9e2 <__aeabi_d2f+0x7a>
   be99e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be9a2:	bfbc      	itt	lt
   be9a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be9a8:	4770      	bxlt	lr
   be9aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be9ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be9b2:	f1c2 0218 	rsb	r2, r2, #24
   be9b6:	f1c2 0c20 	rsb	ip, r2, #32
   be9ba:	fa10 f30c 	lsls.w	r3, r0, ip
   be9be:	fa20 f002 	lsr.w	r0, r0, r2
   be9c2:	bf18      	it	ne
   be9c4:	f040 0001 	orrne.w	r0, r0, #1
   be9c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be9cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be9d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   be9d4:	ea40 000c 	orr.w	r0, r0, ip
   be9d8:	fa23 f302 	lsr.w	r3, r3, r2
   be9dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be9e0:	e7cc      	b.n	be97c <__aeabi_d2f+0x14>
   be9e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be9e6:	d107      	bne.n	be9f8 <__aeabi_d2f+0x90>
   be9e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be9ec:	bf1e      	ittt	ne
   be9ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be9f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be9f6:	4770      	bxne	lr
   be9f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be9fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bea00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bea04:	4770      	bx	lr
   bea06:	bf00      	nop

000bea08 <__aeabi_d2ulz>:
   bea08:	b5d0      	push	{r4, r6, r7, lr}
   bea0a:	4b0c      	ldr	r3, [pc, #48]	; (bea3c <__aeabi_d2ulz+0x34>)
   bea0c:	2200      	movs	r2, #0
   bea0e:	4606      	mov	r6, r0
   bea10:	460f      	mov	r7, r1
   bea12:	f7ff fcef 	bl	be3f4 <__aeabi_dmul>
   bea16:	f7ff ff87 	bl	be928 <__aeabi_d2uiz>
   bea1a:	4604      	mov	r4, r0
   bea1c:	f7ff fc70 	bl	be300 <__aeabi_ui2d>
   bea20:	4b07      	ldr	r3, [pc, #28]	; (bea40 <__aeabi_d2ulz+0x38>)
   bea22:	2200      	movs	r2, #0
   bea24:	f7ff fce6 	bl	be3f4 <__aeabi_dmul>
   bea28:	4602      	mov	r2, r0
   bea2a:	460b      	mov	r3, r1
   bea2c:	4630      	mov	r0, r6
   bea2e:	4639      	mov	r1, r7
   bea30:	f7ff fb28 	bl	be084 <__aeabi_dsub>
   bea34:	f7ff ff78 	bl	be928 <__aeabi_d2uiz>
   bea38:	4621      	mov	r1, r4
   bea3a:	bdd0      	pop	{r4, r6, r7, pc}
   bea3c:	3df00000 	.word	0x3df00000
   bea40:	41f00000 	.word	0x41f00000

000bea44 <atexit>:
   bea44:	2300      	movs	r3, #0
   bea46:	4601      	mov	r1, r0
   bea48:	461a      	mov	r2, r3
   bea4a:	4618      	mov	r0, r3
   bea4c:	f000 bfea 	b.w	bfa24 <__register_exitproc>

000bea50 <atof>:
   bea50:	2100      	movs	r1, #0
   bea52:	f000 bf4f 	b.w	bf8f4 <strtod>

000bea56 <atoi>:
   bea56:	220a      	movs	r2, #10
   bea58:	2100      	movs	r1, #0
   bea5a:	f000 bfd9 	b.w	bfa10 <strtol>

000bea5e <memcmp>:
   bea5e:	b510      	push	{r4, lr}
   bea60:	3901      	subs	r1, #1
   bea62:	4402      	add	r2, r0
   bea64:	4290      	cmp	r0, r2
   bea66:	d101      	bne.n	bea6c <memcmp+0xe>
   bea68:	2000      	movs	r0, #0
   bea6a:	e005      	b.n	bea78 <memcmp+0x1a>
   bea6c:	7803      	ldrb	r3, [r0, #0]
   bea6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bea72:	42a3      	cmp	r3, r4
   bea74:	d001      	beq.n	bea7a <memcmp+0x1c>
   bea76:	1b18      	subs	r0, r3, r4
   bea78:	bd10      	pop	{r4, pc}
   bea7a:	3001      	adds	r0, #1
   bea7c:	e7f2      	b.n	bea64 <memcmp+0x6>

000bea7e <memcpy>:
   bea7e:	440a      	add	r2, r1
   bea80:	4291      	cmp	r1, r2
   bea82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bea86:	d100      	bne.n	bea8a <memcpy+0xc>
   bea88:	4770      	bx	lr
   bea8a:	b510      	push	{r4, lr}
   bea8c:	f811 4b01 	ldrb.w	r4, [r1], #1
   bea90:	f803 4f01 	strb.w	r4, [r3, #1]!
   bea94:	4291      	cmp	r1, r2
   bea96:	d1f9      	bne.n	bea8c <memcpy+0xe>
   bea98:	bd10      	pop	{r4, pc}

000bea9a <memmove>:
   bea9a:	4288      	cmp	r0, r1
   bea9c:	b510      	push	{r4, lr}
   bea9e:	eb01 0402 	add.w	r4, r1, r2
   beaa2:	d902      	bls.n	beaaa <memmove+0x10>
   beaa4:	4284      	cmp	r4, r0
   beaa6:	4623      	mov	r3, r4
   beaa8:	d807      	bhi.n	beaba <memmove+0x20>
   beaaa:	1e43      	subs	r3, r0, #1
   beaac:	42a1      	cmp	r1, r4
   beaae:	d008      	beq.n	beac2 <memmove+0x28>
   beab0:	f811 2b01 	ldrb.w	r2, [r1], #1
   beab4:	f803 2f01 	strb.w	r2, [r3, #1]!
   beab8:	e7f8      	b.n	beaac <memmove+0x12>
   beaba:	4402      	add	r2, r0
   beabc:	4601      	mov	r1, r0
   beabe:	428a      	cmp	r2, r1
   beac0:	d100      	bne.n	beac4 <memmove+0x2a>
   beac2:	bd10      	pop	{r4, pc}
   beac4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   beac8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   beacc:	e7f7      	b.n	beabe <memmove+0x24>

000beace <memset>:
   beace:	4402      	add	r2, r0
   bead0:	4603      	mov	r3, r0
   bead2:	4293      	cmp	r3, r2
   bead4:	d100      	bne.n	bead8 <memset+0xa>
   bead6:	4770      	bx	lr
   bead8:	f803 1b01 	strb.w	r1, [r3], #1
   beadc:	e7f9      	b.n	bead2 <memset+0x4>
	...

000beae0 <srand>:
   beae0:	b538      	push	{r3, r4, r5, lr}
   beae2:	4b10      	ldr	r3, [pc, #64]	; (beb24 <srand+0x44>)
   beae4:	681d      	ldr	r5, [r3, #0]
   beae6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   beae8:	4604      	mov	r4, r0
   beaea:	b9b3      	cbnz	r3, beb1a <srand+0x3a>
   beaec:	2018      	movs	r0, #24
   beaee:	f7fb fa4f 	bl	b9f90 <malloc>
   beaf2:	4602      	mov	r2, r0
   beaf4:	63a8      	str	r0, [r5, #56]	; 0x38
   beaf6:	b920      	cbnz	r0, beb02 <srand+0x22>
   beaf8:	4b0b      	ldr	r3, [pc, #44]	; (beb28 <srand+0x48>)
   beafa:	480c      	ldr	r0, [pc, #48]	; (beb2c <srand+0x4c>)
   beafc:	2142      	movs	r1, #66	; 0x42
   beafe:	f7fb fa97 	bl	ba030 <__assert_func>
   beb02:	490b      	ldr	r1, [pc, #44]	; (beb30 <srand+0x50>)
   beb04:	4b0b      	ldr	r3, [pc, #44]	; (beb34 <srand+0x54>)
   beb06:	e9c0 1300 	strd	r1, r3, [r0]
   beb0a:	4b0b      	ldr	r3, [pc, #44]	; (beb38 <srand+0x58>)
   beb0c:	6083      	str	r3, [r0, #8]
   beb0e:	230b      	movs	r3, #11
   beb10:	8183      	strh	r3, [r0, #12]
   beb12:	2100      	movs	r1, #0
   beb14:	2001      	movs	r0, #1
   beb16:	e9c2 0104 	strd	r0, r1, [r2, #16]
   beb1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   beb1c:	2200      	movs	r2, #0
   beb1e:	611c      	str	r4, [r3, #16]
   beb20:	615a      	str	r2, [r3, #20]
   beb22:	bd38      	pop	{r3, r4, r5, pc}
   beb24:	2003da90 	.word	0x2003da90
   beb28:	000c2229 	.word	0x000c2229
   beb2c:	000c2240 	.word	0x000c2240
   beb30:	abcd330e 	.word	0xabcd330e
   beb34:	e66d1234 	.word	0xe66d1234
   beb38:	0005deec 	.word	0x0005deec

000beb3c <rand>:
   beb3c:	4b16      	ldr	r3, [pc, #88]	; (beb98 <rand+0x5c>)
   beb3e:	b510      	push	{r4, lr}
   beb40:	681c      	ldr	r4, [r3, #0]
   beb42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   beb44:	b9b3      	cbnz	r3, beb74 <rand+0x38>
   beb46:	2018      	movs	r0, #24
   beb48:	f7fb fa22 	bl	b9f90 <malloc>
   beb4c:	63a0      	str	r0, [r4, #56]	; 0x38
   beb4e:	b928      	cbnz	r0, beb5c <rand+0x20>
   beb50:	4602      	mov	r2, r0
   beb52:	4b12      	ldr	r3, [pc, #72]	; (beb9c <rand+0x60>)
   beb54:	4812      	ldr	r0, [pc, #72]	; (beba0 <rand+0x64>)
   beb56:	214e      	movs	r1, #78	; 0x4e
   beb58:	f7fb fa6a 	bl	ba030 <__assert_func>
   beb5c:	4a11      	ldr	r2, [pc, #68]	; (beba4 <rand+0x68>)
   beb5e:	4b12      	ldr	r3, [pc, #72]	; (beba8 <rand+0x6c>)
   beb60:	e9c0 2300 	strd	r2, r3, [r0]
   beb64:	4b11      	ldr	r3, [pc, #68]	; (bebac <rand+0x70>)
   beb66:	6083      	str	r3, [r0, #8]
   beb68:	230b      	movs	r3, #11
   beb6a:	8183      	strh	r3, [r0, #12]
   beb6c:	2201      	movs	r2, #1
   beb6e:	2300      	movs	r3, #0
   beb70:	e9c0 2304 	strd	r2, r3, [r0, #16]
   beb74:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   beb76:	4a0e      	ldr	r2, [pc, #56]	; (bebb0 <rand+0x74>)
   beb78:	6920      	ldr	r0, [r4, #16]
   beb7a:	6963      	ldr	r3, [r4, #20]
   beb7c:	490d      	ldr	r1, [pc, #52]	; (bebb4 <rand+0x78>)
   beb7e:	4342      	muls	r2, r0
   beb80:	fb01 2203 	mla	r2, r1, r3, r2
   beb84:	fba0 0101 	umull	r0, r1, r0, r1
   beb88:	1c43      	adds	r3, r0, #1
   beb8a:	eb42 0001 	adc.w	r0, r2, r1
   beb8e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   beb92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   beb96:	bd10      	pop	{r4, pc}
   beb98:	2003da90 	.word	0x2003da90
   beb9c:	000c2229 	.word	0x000c2229
   beba0:	000c2240 	.word	0x000c2240
   beba4:	abcd330e 	.word	0xabcd330e
   beba8:	e66d1234 	.word	0xe66d1234
   bebac:	0005deec 	.word	0x0005deec
   bebb0:	5851f42d 	.word	0x5851f42d
   bebb4:	4c957f2d 	.word	0x4c957f2d

000bebb8 <strcat>:
   bebb8:	b510      	push	{r4, lr}
   bebba:	4602      	mov	r2, r0
   bebbc:	7814      	ldrb	r4, [r2, #0]
   bebbe:	4613      	mov	r3, r2
   bebc0:	3201      	adds	r2, #1
   bebc2:	2c00      	cmp	r4, #0
   bebc4:	d1fa      	bne.n	bebbc <strcat+0x4>
   bebc6:	3b01      	subs	r3, #1
   bebc8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bebcc:	f803 2f01 	strb.w	r2, [r3, #1]!
   bebd0:	2a00      	cmp	r2, #0
   bebd2:	d1f9      	bne.n	bebc8 <strcat+0x10>
   bebd4:	bd10      	pop	{r4, pc}

000bebd6 <strcmp>:
   bebd6:	f810 2b01 	ldrb.w	r2, [r0], #1
   bebda:	f811 3b01 	ldrb.w	r3, [r1], #1
   bebde:	2a01      	cmp	r2, #1
   bebe0:	bf28      	it	cs
   bebe2:	429a      	cmpcs	r2, r3
   bebe4:	d0f7      	beq.n	bebd6 <strcmp>
   bebe6:	1ad0      	subs	r0, r2, r3
   bebe8:	4770      	bx	lr

000bebea <strcpy>:
   bebea:	4603      	mov	r3, r0
   bebec:	f811 2b01 	ldrb.w	r2, [r1], #1
   bebf0:	f803 2b01 	strb.w	r2, [r3], #1
   bebf4:	2a00      	cmp	r2, #0
   bebf6:	d1f9      	bne.n	bebec <strcpy+0x2>
   bebf8:	4770      	bx	lr
	...

000bebfc <strdup>:
   bebfc:	4b02      	ldr	r3, [pc, #8]	; (bec08 <strdup+0xc>)
   bebfe:	4601      	mov	r1, r0
   bec00:	6818      	ldr	r0, [r3, #0]
   bec02:	f000 b803 	b.w	bec0c <_strdup_r>
   bec06:	bf00      	nop
   bec08:	2003da90 	.word	0x2003da90

000bec0c <_strdup_r>:
   bec0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bec0e:	4604      	mov	r4, r0
   bec10:	4608      	mov	r0, r1
   bec12:	460d      	mov	r5, r1
   bec14:	f000 f80f 	bl	bec36 <strlen>
   bec18:	1c42      	adds	r2, r0, #1
   bec1a:	4611      	mov	r1, r2
   bec1c:	4620      	mov	r0, r4
   bec1e:	9201      	str	r2, [sp, #4]
   bec20:	f7fb f9f6 	bl	ba010 <_malloc_r>
   bec24:	4604      	mov	r4, r0
   bec26:	b118      	cbz	r0, bec30 <_strdup_r+0x24>
   bec28:	9a01      	ldr	r2, [sp, #4]
   bec2a:	4629      	mov	r1, r5
   bec2c:	f7ff ff27 	bl	bea7e <memcpy>
   bec30:	4620      	mov	r0, r4
   bec32:	b003      	add	sp, #12
   bec34:	bd30      	pop	{r4, r5, pc}

000bec36 <strlen>:
   bec36:	4603      	mov	r3, r0
   bec38:	f813 2b01 	ldrb.w	r2, [r3], #1
   bec3c:	2a00      	cmp	r2, #0
   bec3e:	d1fb      	bne.n	bec38 <strlen+0x2>
   bec40:	1a18      	subs	r0, r3, r0
   bec42:	3801      	subs	r0, #1
   bec44:	4770      	bx	lr

000bec46 <strncmp>:
   bec46:	b510      	push	{r4, lr}
   bec48:	b17a      	cbz	r2, bec6a <strncmp+0x24>
   bec4a:	4603      	mov	r3, r0
   bec4c:	3901      	subs	r1, #1
   bec4e:	1884      	adds	r4, r0, r2
   bec50:	f813 0b01 	ldrb.w	r0, [r3], #1
   bec54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bec58:	4290      	cmp	r0, r2
   bec5a:	d101      	bne.n	bec60 <strncmp+0x1a>
   bec5c:	42a3      	cmp	r3, r4
   bec5e:	d101      	bne.n	bec64 <strncmp+0x1e>
   bec60:	1a80      	subs	r0, r0, r2
   bec62:	bd10      	pop	{r4, pc}
   bec64:	2800      	cmp	r0, #0
   bec66:	d1f3      	bne.n	bec50 <strncmp+0xa>
   bec68:	e7fa      	b.n	bec60 <strncmp+0x1a>
   bec6a:	4610      	mov	r0, r2
   bec6c:	e7f9      	b.n	bec62 <strncmp+0x1c>

000bec6e <strncpy>:
   bec6e:	b510      	push	{r4, lr}
   bec70:	3901      	subs	r1, #1
   bec72:	4603      	mov	r3, r0
   bec74:	b132      	cbz	r2, bec84 <strncpy+0x16>
   bec76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bec7a:	f803 4b01 	strb.w	r4, [r3], #1
   bec7e:	3a01      	subs	r2, #1
   bec80:	2c00      	cmp	r4, #0
   bec82:	d1f7      	bne.n	bec74 <strncpy+0x6>
   bec84:	441a      	add	r2, r3
   bec86:	2100      	movs	r1, #0
   bec88:	4293      	cmp	r3, r2
   bec8a:	d100      	bne.n	bec8e <strncpy+0x20>
   bec8c:	bd10      	pop	{r4, pc}
   bec8e:	f803 1b01 	strb.w	r1, [r3], #1
   bec92:	e7f9      	b.n	bec88 <strncpy+0x1a>

000bec94 <strnlen>:
   bec94:	b510      	push	{r4, lr}
   bec96:	4602      	mov	r2, r0
   bec98:	4401      	add	r1, r0
   bec9a:	428a      	cmp	r2, r1
   bec9c:	4613      	mov	r3, r2
   bec9e:	d003      	beq.n	beca8 <strnlen+0x14>
   beca0:	781c      	ldrb	r4, [r3, #0]
   beca2:	3201      	adds	r2, #1
   beca4:	2c00      	cmp	r4, #0
   beca6:	d1f8      	bne.n	bec9a <strnlen+0x6>
   beca8:	1a18      	subs	r0, r3, r0
   becaa:	bd10      	pop	{r4, pc}

000becac <sulp>:
   becac:	b570      	push	{r4, r5, r6, lr}
   becae:	4604      	mov	r4, r0
   becb0:	460d      	mov	r5, r1
   becb2:	ec45 4b10 	vmov	d0, r4, r5
   becb6:	4616      	mov	r6, r2
   becb8:	f001 fe0e 	bl	c08d8 <__ulp>
   becbc:	ec51 0b10 	vmov	r0, r1, d0
   becc0:	b17e      	cbz	r6, bece2 <sulp+0x36>
   becc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   becc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   becca:	2b00      	cmp	r3, #0
   beccc:	dd09      	ble.n	bece2 <sulp+0x36>
   becce:	051b      	lsls	r3, r3, #20
   becd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   becd4:	2400      	movs	r4, #0
   becd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   becda:	4622      	mov	r2, r4
   becdc:	462b      	mov	r3, r5
   becde:	f7ff fb89 	bl	be3f4 <__aeabi_dmul>
   bece2:	bd70      	pop	{r4, r5, r6, pc}
   bece4:	0000      	movs	r0, r0
	...

000bece8 <_strtod_l>:
   bece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   becec:	ed2d 8b02 	vpush	{d8}
   becf0:	b09d      	sub	sp, #116	; 0x74
   becf2:	461f      	mov	r7, r3
   becf4:	2300      	movs	r3, #0
   becf6:	9318      	str	r3, [sp, #96]	; 0x60
   becf8:	4ba2      	ldr	r3, [pc, #648]	; (bef84 <_strtod_l+0x29c>)
   becfa:	9213      	str	r2, [sp, #76]	; 0x4c
   becfc:	681b      	ldr	r3, [r3, #0]
   becfe:	9305      	str	r3, [sp, #20]
   bed00:	4604      	mov	r4, r0
   bed02:	4618      	mov	r0, r3
   bed04:	4688      	mov	r8, r1
   bed06:	f7ff ff96 	bl	bec36 <strlen>
   bed0a:	f04f 0a00 	mov.w	sl, #0
   bed0e:	4605      	mov	r5, r0
   bed10:	f04f 0b00 	mov.w	fp, #0
   bed14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bed18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bed1a:	781a      	ldrb	r2, [r3, #0]
   bed1c:	2a2b      	cmp	r2, #43	; 0x2b
   bed1e:	d04e      	beq.n	bedbe <_strtod_l+0xd6>
   bed20:	d83b      	bhi.n	bed9a <_strtod_l+0xb2>
   bed22:	2a0d      	cmp	r2, #13
   bed24:	d834      	bhi.n	bed90 <_strtod_l+0xa8>
   bed26:	2a08      	cmp	r2, #8
   bed28:	d834      	bhi.n	bed94 <_strtod_l+0xac>
   bed2a:	2a00      	cmp	r2, #0
   bed2c:	d03e      	beq.n	bedac <_strtod_l+0xc4>
   bed2e:	2300      	movs	r3, #0
   bed30:	930a      	str	r3, [sp, #40]	; 0x28
   bed32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bed34:	7833      	ldrb	r3, [r6, #0]
   bed36:	2b30      	cmp	r3, #48	; 0x30
   bed38:	f040 80b0 	bne.w	bee9c <_strtod_l+0x1b4>
   bed3c:	7873      	ldrb	r3, [r6, #1]
   bed3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bed42:	2b58      	cmp	r3, #88	; 0x58
   bed44:	d168      	bne.n	bee18 <_strtod_l+0x130>
   bed46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bed48:	9301      	str	r3, [sp, #4]
   bed4a:	ab18      	add	r3, sp, #96	; 0x60
   bed4c:	9702      	str	r7, [sp, #8]
   bed4e:	9300      	str	r3, [sp, #0]
   bed50:	4a8d      	ldr	r2, [pc, #564]	; (bef88 <_strtod_l+0x2a0>)
   bed52:	ab19      	add	r3, sp, #100	; 0x64
   bed54:	a917      	add	r1, sp, #92	; 0x5c
   bed56:	4620      	mov	r0, r4
   bed58:	f000 ff2e 	bl	bfbb8 <__gethex>
   bed5c:	f010 0707 	ands.w	r7, r0, #7
   bed60:	4605      	mov	r5, r0
   bed62:	d005      	beq.n	bed70 <_strtod_l+0x88>
   bed64:	2f06      	cmp	r7, #6
   bed66:	d12c      	bne.n	bedc2 <_strtod_l+0xda>
   bed68:	3601      	adds	r6, #1
   bed6a:	2300      	movs	r3, #0
   bed6c:	9617      	str	r6, [sp, #92]	; 0x5c
   bed6e:	930a      	str	r3, [sp, #40]	; 0x28
   bed70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bed72:	2b00      	cmp	r3, #0
   bed74:	f040 8590 	bne.w	bf898 <_strtod_l+0xbb0>
   bed78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bed7a:	b1eb      	cbz	r3, bedb8 <_strtod_l+0xd0>
   bed7c:	4652      	mov	r2, sl
   bed7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bed82:	ec43 2b10 	vmov	d0, r2, r3
   bed86:	b01d      	add	sp, #116	; 0x74
   bed88:	ecbd 8b02 	vpop	{d8}
   bed8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bed90:	2a20      	cmp	r2, #32
   bed92:	d1cc      	bne.n	bed2e <_strtod_l+0x46>
   bed94:	3301      	adds	r3, #1
   bed96:	9317      	str	r3, [sp, #92]	; 0x5c
   bed98:	e7be      	b.n	bed18 <_strtod_l+0x30>
   bed9a:	2a2d      	cmp	r2, #45	; 0x2d
   bed9c:	d1c7      	bne.n	bed2e <_strtod_l+0x46>
   bed9e:	2201      	movs	r2, #1
   beda0:	920a      	str	r2, [sp, #40]	; 0x28
   beda2:	1c5a      	adds	r2, r3, #1
   beda4:	9217      	str	r2, [sp, #92]	; 0x5c
   beda6:	785b      	ldrb	r3, [r3, #1]
   beda8:	2b00      	cmp	r3, #0
   bedaa:	d1c2      	bne.n	bed32 <_strtod_l+0x4a>
   bedac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bedae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bedb2:	2b00      	cmp	r3, #0
   bedb4:	f040 856e 	bne.w	bf894 <_strtod_l+0xbac>
   bedb8:	4652      	mov	r2, sl
   bedba:	465b      	mov	r3, fp
   bedbc:	e7e1      	b.n	bed82 <_strtod_l+0x9a>
   bedbe:	2200      	movs	r2, #0
   bedc0:	e7ee      	b.n	beda0 <_strtod_l+0xb8>
   bedc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bedc4:	b13a      	cbz	r2, bedd6 <_strtod_l+0xee>
   bedc6:	2135      	movs	r1, #53	; 0x35
   bedc8:	a81a      	add	r0, sp, #104	; 0x68
   bedca:	f001 fe90 	bl	c0aee <__copybits>
   bedce:	9918      	ldr	r1, [sp, #96]	; 0x60
   bedd0:	4620      	mov	r0, r4
   bedd2:	f001 fa4f 	bl	c0274 <_Bfree>
   bedd6:	3f01      	subs	r7, #1
   bedd8:	2f04      	cmp	r7, #4
   bedda:	d806      	bhi.n	bedea <_strtod_l+0x102>
   beddc:	e8df f007 	tbb	[pc, r7]
   bede0:	1714030a 	.word	0x1714030a
   bede4:	0a          	.byte	0x0a
   bede5:	00          	.byte	0x00
   bede6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bedea:	0728      	lsls	r0, r5, #28
   bedec:	d5c0      	bpl.n	bed70 <_strtod_l+0x88>
   bedee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bedf2:	e7bd      	b.n	bed70 <_strtod_l+0x88>
   bedf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bedf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bedfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bedfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bee02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bee06:	e7f0      	b.n	bedea <_strtod_l+0x102>
   bee08:	f8df b180 	ldr.w	fp, [pc, #384]	; bef8c <_strtod_l+0x2a4>
   bee0c:	e7ed      	b.n	bedea <_strtod_l+0x102>
   bee0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bee12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bee16:	e7e8      	b.n	bedea <_strtod_l+0x102>
   bee18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bee1a:	1c5a      	adds	r2, r3, #1
   bee1c:	9217      	str	r2, [sp, #92]	; 0x5c
   bee1e:	785b      	ldrb	r3, [r3, #1]
   bee20:	2b30      	cmp	r3, #48	; 0x30
   bee22:	d0f9      	beq.n	bee18 <_strtod_l+0x130>
   bee24:	2b00      	cmp	r3, #0
   bee26:	d0a3      	beq.n	bed70 <_strtod_l+0x88>
   bee28:	2301      	movs	r3, #1
   bee2a:	f04f 0900 	mov.w	r9, #0
   bee2e:	9304      	str	r3, [sp, #16]
   bee30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bee32:	9308      	str	r3, [sp, #32]
   bee34:	f8cd 901c 	str.w	r9, [sp, #28]
   bee38:	464f      	mov	r7, r9
   bee3a:	220a      	movs	r2, #10
   bee3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bee3e:	7806      	ldrb	r6, [r0, #0]
   bee40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bee44:	b2d9      	uxtb	r1, r3
   bee46:	2909      	cmp	r1, #9
   bee48:	d92a      	bls.n	beea0 <_strtod_l+0x1b8>
   bee4a:	9905      	ldr	r1, [sp, #20]
   bee4c:	462a      	mov	r2, r5
   bee4e:	f7ff fefa 	bl	bec46 <strncmp>
   bee52:	b398      	cbz	r0, beebc <_strtod_l+0x1d4>
   bee54:	2000      	movs	r0, #0
   bee56:	4632      	mov	r2, r6
   bee58:	463d      	mov	r5, r7
   bee5a:	9005      	str	r0, [sp, #20]
   bee5c:	4603      	mov	r3, r0
   bee5e:	2a65      	cmp	r2, #101	; 0x65
   bee60:	d001      	beq.n	bee66 <_strtod_l+0x17e>
   bee62:	2a45      	cmp	r2, #69	; 0x45
   bee64:	d118      	bne.n	bee98 <_strtod_l+0x1b0>
   bee66:	b91d      	cbnz	r5, bee70 <_strtod_l+0x188>
   bee68:	9a04      	ldr	r2, [sp, #16]
   bee6a:	4302      	orrs	r2, r0
   bee6c:	d09e      	beq.n	bedac <_strtod_l+0xc4>
   bee6e:	2500      	movs	r5, #0
   bee70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bee74:	f108 0201 	add.w	r2, r8, #1
   bee78:	9217      	str	r2, [sp, #92]	; 0x5c
   bee7a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bee7e:	2a2b      	cmp	r2, #43	; 0x2b
   bee80:	d075      	beq.n	bef6e <_strtod_l+0x286>
   bee82:	2a2d      	cmp	r2, #45	; 0x2d
   bee84:	d07b      	beq.n	bef7e <_strtod_l+0x296>
   bee86:	f04f 0c00 	mov.w	ip, #0
   bee8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bee8e:	2909      	cmp	r1, #9
   bee90:	f240 8082 	bls.w	bef98 <_strtod_l+0x2b0>
   bee94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bee98:	2600      	movs	r6, #0
   bee9a:	e09d      	b.n	befd8 <_strtod_l+0x2f0>
   bee9c:	2300      	movs	r3, #0
   bee9e:	e7c4      	b.n	bee2a <_strtod_l+0x142>
   beea0:	2f08      	cmp	r7, #8
   beea2:	bfd8      	it	le
   beea4:	9907      	ldrle	r1, [sp, #28]
   beea6:	f100 0001 	add.w	r0, r0, #1
   beeaa:	bfda      	itte	le
   beeac:	fb02 3301 	mlale	r3, r2, r1, r3
   beeb0:	9307      	strle	r3, [sp, #28]
   beeb2:	fb02 3909 	mlagt	r9, r2, r9, r3
   beeb6:	3701      	adds	r7, #1
   beeb8:	9017      	str	r0, [sp, #92]	; 0x5c
   beeba:	e7bf      	b.n	bee3c <_strtod_l+0x154>
   beebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beebe:	195a      	adds	r2, r3, r5
   beec0:	9217      	str	r2, [sp, #92]	; 0x5c
   beec2:	5d5a      	ldrb	r2, [r3, r5]
   beec4:	2f00      	cmp	r7, #0
   beec6:	d037      	beq.n	bef38 <_strtod_l+0x250>
   beec8:	9005      	str	r0, [sp, #20]
   beeca:	463d      	mov	r5, r7
   beecc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   beed0:	2b09      	cmp	r3, #9
   beed2:	d912      	bls.n	beefa <_strtod_l+0x212>
   beed4:	2301      	movs	r3, #1
   beed6:	e7c2      	b.n	bee5e <_strtod_l+0x176>
   beed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beeda:	1c5a      	adds	r2, r3, #1
   beedc:	9217      	str	r2, [sp, #92]	; 0x5c
   beede:	785a      	ldrb	r2, [r3, #1]
   beee0:	3001      	adds	r0, #1
   beee2:	2a30      	cmp	r2, #48	; 0x30
   beee4:	d0f8      	beq.n	beed8 <_strtod_l+0x1f0>
   beee6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   beeea:	2b08      	cmp	r3, #8
   beeec:	f200 84d9 	bhi.w	bf8a2 <_strtod_l+0xbba>
   beef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beef2:	9005      	str	r0, [sp, #20]
   beef4:	2000      	movs	r0, #0
   beef6:	9308      	str	r3, [sp, #32]
   beef8:	4605      	mov	r5, r0
   beefa:	3a30      	subs	r2, #48	; 0x30
   beefc:	f100 0301 	add.w	r3, r0, #1
   bef00:	d014      	beq.n	bef2c <_strtod_l+0x244>
   bef02:	9905      	ldr	r1, [sp, #20]
   bef04:	4419      	add	r1, r3
   bef06:	9105      	str	r1, [sp, #20]
   bef08:	462b      	mov	r3, r5
   bef0a:	eb00 0e05 	add.w	lr, r0, r5
   bef0e:	210a      	movs	r1, #10
   bef10:	4573      	cmp	r3, lr
   bef12:	d113      	bne.n	bef3c <_strtod_l+0x254>
   bef14:	182b      	adds	r3, r5, r0
   bef16:	2b08      	cmp	r3, #8
   bef18:	f105 0501 	add.w	r5, r5, #1
   bef1c:	4405      	add	r5, r0
   bef1e:	dc1c      	bgt.n	bef5a <_strtod_l+0x272>
   bef20:	9907      	ldr	r1, [sp, #28]
   bef22:	230a      	movs	r3, #10
   bef24:	fb03 2301 	mla	r3, r3, r1, r2
   bef28:	9307      	str	r3, [sp, #28]
   bef2a:	2300      	movs	r3, #0
   bef2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bef2e:	1c51      	adds	r1, r2, #1
   bef30:	9117      	str	r1, [sp, #92]	; 0x5c
   bef32:	7852      	ldrb	r2, [r2, #1]
   bef34:	4618      	mov	r0, r3
   bef36:	e7c9      	b.n	beecc <_strtod_l+0x1e4>
   bef38:	4638      	mov	r0, r7
   bef3a:	e7d2      	b.n	beee2 <_strtod_l+0x1fa>
   bef3c:	2b08      	cmp	r3, #8
   bef3e:	dc04      	bgt.n	bef4a <_strtod_l+0x262>
   bef40:	9e07      	ldr	r6, [sp, #28]
   bef42:	434e      	muls	r6, r1
   bef44:	9607      	str	r6, [sp, #28]
   bef46:	3301      	adds	r3, #1
   bef48:	e7e2      	b.n	bef10 <_strtod_l+0x228>
   bef4a:	f103 0c01 	add.w	ip, r3, #1
   bef4e:	f1bc 0f10 	cmp.w	ip, #16
   bef52:	bfd8      	it	le
   bef54:	fb01 f909 	mulle.w	r9, r1, r9
   bef58:	e7f5      	b.n	bef46 <_strtod_l+0x25e>
   bef5a:	2d10      	cmp	r5, #16
   bef5c:	bfdc      	itt	le
   bef5e:	230a      	movle	r3, #10
   bef60:	fb03 2909 	mlale	r9, r3, r9, r2
   bef64:	e7e1      	b.n	bef2a <_strtod_l+0x242>
   bef66:	2300      	movs	r3, #0
   bef68:	9305      	str	r3, [sp, #20]
   bef6a:	2301      	movs	r3, #1
   bef6c:	e77c      	b.n	bee68 <_strtod_l+0x180>
   bef6e:	f04f 0c00 	mov.w	ip, #0
   bef72:	f108 0202 	add.w	r2, r8, #2
   bef76:	9217      	str	r2, [sp, #92]	; 0x5c
   bef78:	f898 2002 	ldrb.w	r2, [r8, #2]
   bef7c:	e785      	b.n	bee8a <_strtod_l+0x1a2>
   bef7e:	f04f 0c01 	mov.w	ip, #1
   bef82:	e7f6      	b.n	bef72 <_strtod_l+0x28a>
   bef84:	000c246c 	.word	0x000c246c
   bef88:	000c22a8 	.word	0x000c22a8
   bef8c:	7ff00000 	.word	0x7ff00000
   bef90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bef92:	1c51      	adds	r1, r2, #1
   bef94:	9117      	str	r1, [sp, #92]	; 0x5c
   bef96:	7852      	ldrb	r2, [r2, #1]
   bef98:	2a30      	cmp	r2, #48	; 0x30
   bef9a:	d0f9      	beq.n	bef90 <_strtod_l+0x2a8>
   bef9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   befa0:	2908      	cmp	r1, #8
   befa2:	f63f af79 	bhi.w	bee98 <_strtod_l+0x1b0>
   befa6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   befaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   befac:	9206      	str	r2, [sp, #24]
   befae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   befb0:	1c51      	adds	r1, r2, #1
   befb2:	9117      	str	r1, [sp, #92]	; 0x5c
   befb4:	7852      	ldrb	r2, [r2, #1]
   befb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   befba:	2e09      	cmp	r6, #9
   befbc:	d937      	bls.n	bf02e <_strtod_l+0x346>
   befbe:	9e06      	ldr	r6, [sp, #24]
   befc0:	1b89      	subs	r1, r1, r6
   befc2:	2908      	cmp	r1, #8
   befc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   befc8:	dc02      	bgt.n	befd0 <_strtod_l+0x2e8>
   befca:	4576      	cmp	r6, lr
   befcc:	bfa8      	it	ge
   befce:	4676      	movge	r6, lr
   befd0:	f1bc 0f00 	cmp.w	ip, #0
   befd4:	d000      	beq.n	befd8 <_strtod_l+0x2f0>
   befd6:	4276      	negs	r6, r6
   befd8:	2d00      	cmp	r5, #0
   befda:	d14d      	bne.n	bf078 <_strtod_l+0x390>
   befdc:	9904      	ldr	r1, [sp, #16]
   befde:	4301      	orrs	r1, r0
   befe0:	f47f aec6 	bne.w	bed70 <_strtod_l+0x88>
   befe4:	2b00      	cmp	r3, #0
   befe6:	f47f aee1 	bne.w	bedac <_strtod_l+0xc4>
   befea:	2a69      	cmp	r2, #105	; 0x69
   befec:	d027      	beq.n	bf03e <_strtod_l+0x356>
   befee:	dc24      	bgt.n	bf03a <_strtod_l+0x352>
   beff0:	2a49      	cmp	r2, #73	; 0x49
   beff2:	d024      	beq.n	bf03e <_strtod_l+0x356>
   beff4:	2a4e      	cmp	r2, #78	; 0x4e
   beff6:	f47f aed9 	bne.w	bedac <_strtod_l+0xc4>
   beffa:	499f      	ldr	r1, [pc, #636]	; (bf278 <_strtod_l+0x590>)
   beffc:	a817      	add	r0, sp, #92	; 0x5c
   beffe:	f001 f833 	bl	c0068 <__match>
   bf002:	2800      	cmp	r0, #0
   bf004:	f43f aed2 	beq.w	bedac <_strtod_l+0xc4>
   bf008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf00a:	781b      	ldrb	r3, [r3, #0]
   bf00c:	2b28      	cmp	r3, #40	; 0x28
   bf00e:	d12d      	bne.n	bf06c <_strtod_l+0x384>
   bf010:	499a      	ldr	r1, [pc, #616]	; (bf27c <_strtod_l+0x594>)
   bf012:	aa1a      	add	r2, sp, #104	; 0x68
   bf014:	a817      	add	r0, sp, #92	; 0x5c
   bf016:	f001 f83b 	bl	c0090 <__hexnan>
   bf01a:	2805      	cmp	r0, #5
   bf01c:	d126      	bne.n	bf06c <_strtod_l+0x384>
   bf01e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bf020:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bf024:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bf028:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bf02c:	e6a0      	b.n	bed70 <_strtod_l+0x88>
   bf02e:	210a      	movs	r1, #10
   bf030:	fb01 2e0e 	mla	lr, r1, lr, r2
   bf034:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bf038:	e7b9      	b.n	befae <_strtod_l+0x2c6>
   bf03a:	2a6e      	cmp	r2, #110	; 0x6e
   bf03c:	e7db      	b.n	beff6 <_strtod_l+0x30e>
   bf03e:	4990      	ldr	r1, [pc, #576]	; (bf280 <_strtod_l+0x598>)
   bf040:	a817      	add	r0, sp, #92	; 0x5c
   bf042:	f001 f811 	bl	c0068 <__match>
   bf046:	2800      	cmp	r0, #0
   bf048:	f43f aeb0 	beq.w	bedac <_strtod_l+0xc4>
   bf04c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf04e:	498d      	ldr	r1, [pc, #564]	; (bf284 <_strtod_l+0x59c>)
   bf050:	3b01      	subs	r3, #1
   bf052:	a817      	add	r0, sp, #92	; 0x5c
   bf054:	9317      	str	r3, [sp, #92]	; 0x5c
   bf056:	f001 f807 	bl	c0068 <__match>
   bf05a:	b910      	cbnz	r0, bf062 <_strtod_l+0x37a>
   bf05c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf05e:	3301      	adds	r3, #1
   bf060:	9317      	str	r3, [sp, #92]	; 0x5c
   bf062:	f8df b230 	ldr.w	fp, [pc, #560]	; bf294 <_strtod_l+0x5ac>
   bf066:	f04f 0a00 	mov.w	sl, #0
   bf06a:	e681      	b.n	bed70 <_strtod_l+0x88>
   bf06c:	4886      	ldr	r0, [pc, #536]	; (bf288 <_strtod_l+0x5a0>)
   bf06e:	f001 fd93 	bl	c0b98 <nan>
   bf072:	ec5b ab10 	vmov	sl, fp, d0
   bf076:	e67b      	b.n	bed70 <_strtod_l+0x88>
   bf078:	9b05      	ldr	r3, [sp, #20]
   bf07a:	9807      	ldr	r0, [sp, #28]
   bf07c:	1af3      	subs	r3, r6, r3
   bf07e:	2f00      	cmp	r7, #0
   bf080:	bf08      	it	eq
   bf082:	462f      	moveq	r7, r5
   bf084:	2d10      	cmp	r5, #16
   bf086:	9306      	str	r3, [sp, #24]
   bf088:	46a8      	mov	r8, r5
   bf08a:	bfa8      	it	ge
   bf08c:	f04f 0810 	movge.w	r8, #16
   bf090:	f7ff f936 	bl	be300 <__aeabi_ui2d>
   bf094:	2d09      	cmp	r5, #9
   bf096:	4682      	mov	sl, r0
   bf098:	468b      	mov	fp, r1
   bf09a:	dd13      	ble.n	bf0c4 <_strtod_l+0x3dc>
   bf09c:	4b7b      	ldr	r3, [pc, #492]	; (bf28c <_strtod_l+0x5a4>)
   bf09e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bf0a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bf0a6:	f7ff f9a5 	bl	be3f4 <__aeabi_dmul>
   bf0aa:	4682      	mov	sl, r0
   bf0ac:	4648      	mov	r0, r9
   bf0ae:	468b      	mov	fp, r1
   bf0b0:	f7ff f926 	bl	be300 <__aeabi_ui2d>
   bf0b4:	4602      	mov	r2, r0
   bf0b6:	460b      	mov	r3, r1
   bf0b8:	4650      	mov	r0, sl
   bf0ba:	4659      	mov	r1, fp
   bf0bc:	f7fe ffe4 	bl	be088 <__adddf3>
   bf0c0:	4682      	mov	sl, r0
   bf0c2:	468b      	mov	fp, r1
   bf0c4:	2d0f      	cmp	r5, #15
   bf0c6:	dc38      	bgt.n	bf13a <_strtod_l+0x452>
   bf0c8:	9b06      	ldr	r3, [sp, #24]
   bf0ca:	2b00      	cmp	r3, #0
   bf0cc:	f43f ae50 	beq.w	bed70 <_strtod_l+0x88>
   bf0d0:	dd24      	ble.n	bf11c <_strtod_l+0x434>
   bf0d2:	2b16      	cmp	r3, #22
   bf0d4:	dc0b      	bgt.n	bf0ee <_strtod_l+0x406>
   bf0d6:	496d      	ldr	r1, [pc, #436]	; (bf28c <_strtod_l+0x5a4>)
   bf0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf0e0:	4652      	mov	r2, sl
   bf0e2:	465b      	mov	r3, fp
   bf0e4:	f7ff f986 	bl	be3f4 <__aeabi_dmul>
   bf0e8:	4682      	mov	sl, r0
   bf0ea:	468b      	mov	fp, r1
   bf0ec:	e640      	b.n	bed70 <_strtod_l+0x88>
   bf0ee:	9a06      	ldr	r2, [sp, #24]
   bf0f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bf0f4:	4293      	cmp	r3, r2
   bf0f6:	db20      	blt.n	bf13a <_strtod_l+0x452>
   bf0f8:	4c64      	ldr	r4, [pc, #400]	; (bf28c <_strtod_l+0x5a4>)
   bf0fa:	f1c5 050f 	rsb	r5, r5, #15
   bf0fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bf102:	4652      	mov	r2, sl
   bf104:	465b      	mov	r3, fp
   bf106:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf10a:	f7ff f973 	bl	be3f4 <__aeabi_dmul>
   bf10e:	9b06      	ldr	r3, [sp, #24]
   bf110:	1b5d      	subs	r5, r3, r5
   bf112:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bf116:	e9d4 2300 	ldrd	r2, r3, [r4]
   bf11a:	e7e3      	b.n	bf0e4 <_strtod_l+0x3fc>
   bf11c:	9b06      	ldr	r3, [sp, #24]
   bf11e:	3316      	adds	r3, #22
   bf120:	db0b      	blt.n	bf13a <_strtod_l+0x452>
   bf122:	9b05      	ldr	r3, [sp, #20]
   bf124:	1b9e      	subs	r6, r3, r6
   bf126:	4b59      	ldr	r3, [pc, #356]	; (bf28c <_strtod_l+0x5a4>)
   bf128:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bf12c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bf130:	4650      	mov	r0, sl
   bf132:	4659      	mov	r1, fp
   bf134:	f7ff fa88 	bl	be648 <__aeabi_ddiv>
   bf138:	e7d6      	b.n	bf0e8 <_strtod_l+0x400>
   bf13a:	9b06      	ldr	r3, [sp, #24]
   bf13c:	eba5 0808 	sub.w	r8, r5, r8
   bf140:	4498      	add	r8, r3
   bf142:	f1b8 0f00 	cmp.w	r8, #0
   bf146:	dd74      	ble.n	bf232 <_strtod_l+0x54a>
   bf148:	f018 030f 	ands.w	r3, r8, #15
   bf14c:	d00a      	beq.n	bf164 <_strtod_l+0x47c>
   bf14e:	494f      	ldr	r1, [pc, #316]	; (bf28c <_strtod_l+0x5a4>)
   bf150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf154:	4652      	mov	r2, sl
   bf156:	465b      	mov	r3, fp
   bf158:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf15c:	f7ff f94a 	bl	be3f4 <__aeabi_dmul>
   bf160:	4682      	mov	sl, r0
   bf162:	468b      	mov	fp, r1
   bf164:	f038 080f 	bics.w	r8, r8, #15
   bf168:	d04f      	beq.n	bf20a <_strtod_l+0x522>
   bf16a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bf16e:	dd22      	ble.n	bf1b6 <_strtod_l+0x4ce>
   bf170:	2500      	movs	r5, #0
   bf172:	462e      	mov	r6, r5
   bf174:	9507      	str	r5, [sp, #28]
   bf176:	9505      	str	r5, [sp, #20]
   bf178:	2322      	movs	r3, #34	; 0x22
   bf17a:	f8df b118 	ldr.w	fp, [pc, #280]	; bf294 <_strtod_l+0x5ac>
   bf17e:	6023      	str	r3, [r4, #0]
   bf180:	f04f 0a00 	mov.w	sl, #0
   bf184:	9b07      	ldr	r3, [sp, #28]
   bf186:	2b00      	cmp	r3, #0
   bf188:	f43f adf2 	beq.w	bed70 <_strtod_l+0x88>
   bf18c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf18e:	4620      	mov	r0, r4
   bf190:	f001 f870 	bl	c0274 <_Bfree>
   bf194:	9905      	ldr	r1, [sp, #20]
   bf196:	4620      	mov	r0, r4
   bf198:	f001 f86c 	bl	c0274 <_Bfree>
   bf19c:	4631      	mov	r1, r6
   bf19e:	4620      	mov	r0, r4
   bf1a0:	f001 f868 	bl	c0274 <_Bfree>
   bf1a4:	9907      	ldr	r1, [sp, #28]
   bf1a6:	4620      	mov	r0, r4
   bf1a8:	f001 f864 	bl	c0274 <_Bfree>
   bf1ac:	4629      	mov	r1, r5
   bf1ae:	4620      	mov	r0, r4
   bf1b0:	f001 f860 	bl	c0274 <_Bfree>
   bf1b4:	e5dc      	b.n	bed70 <_strtod_l+0x88>
   bf1b6:	4b36      	ldr	r3, [pc, #216]	; (bf290 <_strtod_l+0x5a8>)
   bf1b8:	9304      	str	r3, [sp, #16]
   bf1ba:	2300      	movs	r3, #0
   bf1bc:	ea4f 1828 	mov.w	r8, r8, asr #4
   bf1c0:	4650      	mov	r0, sl
   bf1c2:	4659      	mov	r1, fp
   bf1c4:	4699      	mov	r9, r3
   bf1c6:	f1b8 0f01 	cmp.w	r8, #1
   bf1ca:	dc21      	bgt.n	bf210 <_strtod_l+0x528>
   bf1cc:	b10b      	cbz	r3, bf1d2 <_strtod_l+0x4ea>
   bf1ce:	4682      	mov	sl, r0
   bf1d0:	468b      	mov	fp, r1
   bf1d2:	4b2f      	ldr	r3, [pc, #188]	; (bf290 <_strtod_l+0x5a8>)
   bf1d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bf1d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bf1dc:	4652      	mov	r2, sl
   bf1de:	465b      	mov	r3, fp
   bf1e0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bf1e4:	f7ff f906 	bl	be3f4 <__aeabi_dmul>
   bf1e8:	4b2a      	ldr	r3, [pc, #168]	; (bf294 <_strtod_l+0x5ac>)
   bf1ea:	460a      	mov	r2, r1
   bf1ec:	400b      	ands	r3, r1
   bf1ee:	492a      	ldr	r1, [pc, #168]	; (bf298 <_strtod_l+0x5b0>)
   bf1f0:	428b      	cmp	r3, r1
   bf1f2:	4682      	mov	sl, r0
   bf1f4:	d8bc      	bhi.n	bf170 <_strtod_l+0x488>
   bf1f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bf1fa:	428b      	cmp	r3, r1
   bf1fc:	bf86      	itte	hi
   bf1fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bf29c <_strtod_l+0x5b4>
   bf202:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bf206:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bf20a:	2300      	movs	r3, #0
   bf20c:	9304      	str	r3, [sp, #16]
   bf20e:	e084      	b.n	bf31a <_strtod_l+0x632>
   bf210:	f018 0f01 	tst.w	r8, #1
   bf214:	d005      	beq.n	bf222 <_strtod_l+0x53a>
   bf216:	9b04      	ldr	r3, [sp, #16]
   bf218:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf21c:	f7ff f8ea 	bl	be3f4 <__aeabi_dmul>
   bf220:	2301      	movs	r3, #1
   bf222:	9a04      	ldr	r2, [sp, #16]
   bf224:	3208      	adds	r2, #8
   bf226:	f109 0901 	add.w	r9, r9, #1
   bf22a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bf22e:	9204      	str	r2, [sp, #16]
   bf230:	e7c9      	b.n	bf1c6 <_strtod_l+0x4de>
   bf232:	d0ea      	beq.n	bf20a <_strtod_l+0x522>
   bf234:	f1c8 0800 	rsb	r8, r8, #0
   bf238:	f018 020f 	ands.w	r2, r8, #15
   bf23c:	d00a      	beq.n	bf254 <_strtod_l+0x56c>
   bf23e:	4b13      	ldr	r3, [pc, #76]	; (bf28c <_strtod_l+0x5a4>)
   bf240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bf244:	4650      	mov	r0, sl
   bf246:	4659      	mov	r1, fp
   bf248:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf24c:	f7ff f9fc 	bl	be648 <__aeabi_ddiv>
   bf250:	4682      	mov	sl, r0
   bf252:	468b      	mov	fp, r1
   bf254:	ea5f 1828 	movs.w	r8, r8, asr #4
   bf258:	d0d7      	beq.n	bf20a <_strtod_l+0x522>
   bf25a:	f1b8 0f1f 	cmp.w	r8, #31
   bf25e:	dd1f      	ble.n	bf2a0 <_strtod_l+0x5b8>
   bf260:	2500      	movs	r5, #0
   bf262:	462e      	mov	r6, r5
   bf264:	9507      	str	r5, [sp, #28]
   bf266:	9505      	str	r5, [sp, #20]
   bf268:	2322      	movs	r3, #34	; 0x22
   bf26a:	f04f 0a00 	mov.w	sl, #0
   bf26e:	f04f 0b00 	mov.w	fp, #0
   bf272:	6023      	str	r3, [r4, #0]
   bf274:	e786      	b.n	bf184 <_strtod_l+0x49c>
   bf276:	bf00      	nop
   bf278:	000c22a2 	.word	0x000c22a2
   bf27c:	000c22bc 	.word	0x000c22bc
   bf280:	000c2299 	.word	0x000c2299
   bf284:	000c229c 	.word	0x000c229c
   bf288:	000c1166 	.word	0x000c1166
   bf28c:	000c2508 	.word	0x000c2508
   bf290:	000c24e0 	.word	0x000c24e0
   bf294:	7ff00000 	.word	0x7ff00000
   bf298:	7ca00000 	.word	0x7ca00000
   bf29c:	7fefffff 	.word	0x7fefffff
   bf2a0:	f018 0310 	ands.w	r3, r8, #16
   bf2a4:	bf18      	it	ne
   bf2a6:	236a      	movne	r3, #106	; 0x6a
   bf2a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bf658 <_strtod_l+0x970>
   bf2ac:	9304      	str	r3, [sp, #16]
   bf2ae:	4650      	mov	r0, sl
   bf2b0:	4659      	mov	r1, fp
   bf2b2:	2300      	movs	r3, #0
   bf2b4:	f018 0f01 	tst.w	r8, #1
   bf2b8:	d004      	beq.n	bf2c4 <_strtod_l+0x5dc>
   bf2ba:	e9d9 2300 	ldrd	r2, r3, [r9]
   bf2be:	f7ff f899 	bl	be3f4 <__aeabi_dmul>
   bf2c2:	2301      	movs	r3, #1
   bf2c4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bf2c8:	f109 0908 	add.w	r9, r9, #8
   bf2cc:	d1f2      	bne.n	bf2b4 <_strtod_l+0x5cc>
   bf2ce:	b10b      	cbz	r3, bf2d4 <_strtod_l+0x5ec>
   bf2d0:	4682      	mov	sl, r0
   bf2d2:	468b      	mov	fp, r1
   bf2d4:	9b04      	ldr	r3, [sp, #16]
   bf2d6:	b1c3      	cbz	r3, bf30a <_strtod_l+0x622>
   bf2d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bf2dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bf2e0:	2b00      	cmp	r3, #0
   bf2e2:	4659      	mov	r1, fp
   bf2e4:	dd11      	ble.n	bf30a <_strtod_l+0x622>
   bf2e6:	2b1f      	cmp	r3, #31
   bf2e8:	f340 8124 	ble.w	bf534 <_strtod_l+0x84c>
   bf2ec:	2b34      	cmp	r3, #52	; 0x34
   bf2ee:	bfde      	ittt	le
   bf2f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bf2f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bf2f8:	fa03 f202 	lslle.w	r2, r3, r2
   bf2fc:	f04f 0a00 	mov.w	sl, #0
   bf300:	bfcc      	ite	gt
   bf302:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bf306:	ea02 0b01 	andle.w	fp, r2, r1
   bf30a:	2200      	movs	r2, #0
   bf30c:	2300      	movs	r3, #0
   bf30e:	4650      	mov	r0, sl
   bf310:	4659      	mov	r1, fp
   bf312:	f7ff fad7 	bl	be8c4 <__aeabi_dcmpeq>
   bf316:	2800      	cmp	r0, #0
   bf318:	d1a2      	bne.n	bf260 <_strtod_l+0x578>
   bf31a:	9b07      	ldr	r3, [sp, #28]
   bf31c:	9300      	str	r3, [sp, #0]
   bf31e:	9908      	ldr	r1, [sp, #32]
   bf320:	462b      	mov	r3, r5
   bf322:	463a      	mov	r2, r7
   bf324:	4620      	mov	r0, r4
   bf326:	f001 f80d 	bl	c0344 <__s2b>
   bf32a:	9007      	str	r0, [sp, #28]
   bf32c:	2800      	cmp	r0, #0
   bf32e:	f43f af1f 	beq.w	bf170 <_strtod_l+0x488>
   bf332:	9b05      	ldr	r3, [sp, #20]
   bf334:	1b9e      	subs	r6, r3, r6
   bf336:	9b06      	ldr	r3, [sp, #24]
   bf338:	2b00      	cmp	r3, #0
   bf33a:	bfb4      	ite	lt
   bf33c:	4633      	movlt	r3, r6
   bf33e:	2300      	movge	r3, #0
   bf340:	930c      	str	r3, [sp, #48]	; 0x30
   bf342:	9b06      	ldr	r3, [sp, #24]
   bf344:	2500      	movs	r5, #0
   bf346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bf34a:	9312      	str	r3, [sp, #72]	; 0x48
   bf34c:	462e      	mov	r6, r5
   bf34e:	9b07      	ldr	r3, [sp, #28]
   bf350:	4620      	mov	r0, r4
   bf352:	6859      	ldr	r1, [r3, #4]
   bf354:	f000 ff4e 	bl	c01f4 <_Balloc>
   bf358:	9005      	str	r0, [sp, #20]
   bf35a:	2800      	cmp	r0, #0
   bf35c:	f43f af0c 	beq.w	bf178 <_strtod_l+0x490>
   bf360:	9b07      	ldr	r3, [sp, #28]
   bf362:	691a      	ldr	r2, [r3, #16]
   bf364:	3202      	adds	r2, #2
   bf366:	f103 010c 	add.w	r1, r3, #12
   bf36a:	0092      	lsls	r2, r2, #2
   bf36c:	300c      	adds	r0, #12
   bf36e:	f7ff fb86 	bl	bea7e <memcpy>
   bf372:	ec4b ab10 	vmov	d0, sl, fp
   bf376:	aa1a      	add	r2, sp, #104	; 0x68
   bf378:	a919      	add	r1, sp, #100	; 0x64
   bf37a:	4620      	mov	r0, r4
   bf37c:	f001 fb28 	bl	c09d0 <__d2b>
   bf380:	ec4b ab18 	vmov	d8, sl, fp
   bf384:	9018      	str	r0, [sp, #96]	; 0x60
   bf386:	2800      	cmp	r0, #0
   bf388:	f43f aef6 	beq.w	bf178 <_strtod_l+0x490>
   bf38c:	2101      	movs	r1, #1
   bf38e:	4620      	mov	r0, r4
   bf390:	f001 f872 	bl	c0478 <__i2b>
   bf394:	4606      	mov	r6, r0
   bf396:	2800      	cmp	r0, #0
   bf398:	f43f aeee 	beq.w	bf178 <_strtod_l+0x490>
   bf39c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bf39e:	9904      	ldr	r1, [sp, #16]
   bf3a0:	2b00      	cmp	r3, #0
   bf3a2:	bfab      	itete	ge
   bf3a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bf3a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bf3a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bf3aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bf3ae:	bfac      	ite	ge
   bf3b0:	eb03 0902 	addge.w	r9, r3, r2
   bf3b4:	1ad7      	sublt	r7, r2, r3
   bf3b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bf3b8:	eba3 0801 	sub.w	r8, r3, r1
   bf3bc:	4490      	add	r8, r2
   bf3be:	4ba1      	ldr	r3, [pc, #644]	; (bf644 <_strtod_l+0x95c>)
   bf3c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf3c4:	4598      	cmp	r8, r3
   bf3c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bf3ca:	f280 80c7 	bge.w	bf55c <_strtod_l+0x874>
   bf3ce:	eba3 0308 	sub.w	r3, r3, r8
   bf3d2:	2b1f      	cmp	r3, #31
   bf3d4:	eba2 0203 	sub.w	r2, r2, r3
   bf3d8:	f04f 0101 	mov.w	r1, #1
   bf3dc:	f300 80b1 	bgt.w	bf542 <_strtod_l+0x85a>
   bf3e0:	fa01 f303 	lsl.w	r3, r1, r3
   bf3e4:	930d      	str	r3, [sp, #52]	; 0x34
   bf3e6:	2300      	movs	r3, #0
   bf3e8:	9308      	str	r3, [sp, #32]
   bf3ea:	eb09 0802 	add.w	r8, r9, r2
   bf3ee:	9b04      	ldr	r3, [sp, #16]
   bf3f0:	45c1      	cmp	r9, r8
   bf3f2:	4417      	add	r7, r2
   bf3f4:	441f      	add	r7, r3
   bf3f6:	464b      	mov	r3, r9
   bf3f8:	bfa8      	it	ge
   bf3fa:	4643      	movge	r3, r8
   bf3fc:	42bb      	cmp	r3, r7
   bf3fe:	bfa8      	it	ge
   bf400:	463b      	movge	r3, r7
   bf402:	2b00      	cmp	r3, #0
   bf404:	bfc2      	ittt	gt
   bf406:	eba8 0803 	subgt.w	r8, r8, r3
   bf40a:	1aff      	subgt	r7, r7, r3
   bf40c:	eba9 0903 	subgt.w	r9, r9, r3
   bf410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf412:	2b00      	cmp	r3, #0
   bf414:	dd17      	ble.n	bf446 <_strtod_l+0x75e>
   bf416:	4631      	mov	r1, r6
   bf418:	461a      	mov	r2, r3
   bf41a:	4620      	mov	r0, r4
   bf41c:	f001 f8ec 	bl	c05f8 <__pow5mult>
   bf420:	4606      	mov	r6, r0
   bf422:	2800      	cmp	r0, #0
   bf424:	f43f aea8 	beq.w	bf178 <_strtod_l+0x490>
   bf428:	4601      	mov	r1, r0
   bf42a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf42c:	4620      	mov	r0, r4
   bf42e:	f001 f839 	bl	c04a4 <__multiply>
   bf432:	900b      	str	r0, [sp, #44]	; 0x2c
   bf434:	2800      	cmp	r0, #0
   bf436:	f43f ae9f 	beq.w	bf178 <_strtod_l+0x490>
   bf43a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf43c:	4620      	mov	r0, r4
   bf43e:	f000 ff19 	bl	c0274 <_Bfree>
   bf442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf444:	9318      	str	r3, [sp, #96]	; 0x60
   bf446:	f1b8 0f00 	cmp.w	r8, #0
   bf44a:	f300 808c 	bgt.w	bf566 <_strtod_l+0x87e>
   bf44e:	9b06      	ldr	r3, [sp, #24]
   bf450:	2b00      	cmp	r3, #0
   bf452:	dd08      	ble.n	bf466 <_strtod_l+0x77e>
   bf454:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bf456:	9905      	ldr	r1, [sp, #20]
   bf458:	4620      	mov	r0, r4
   bf45a:	f001 f8cd 	bl	c05f8 <__pow5mult>
   bf45e:	9005      	str	r0, [sp, #20]
   bf460:	2800      	cmp	r0, #0
   bf462:	f43f ae89 	beq.w	bf178 <_strtod_l+0x490>
   bf466:	2f00      	cmp	r7, #0
   bf468:	dd08      	ble.n	bf47c <_strtod_l+0x794>
   bf46a:	9905      	ldr	r1, [sp, #20]
   bf46c:	463a      	mov	r2, r7
   bf46e:	4620      	mov	r0, r4
   bf470:	f001 f91c 	bl	c06ac <__lshift>
   bf474:	9005      	str	r0, [sp, #20]
   bf476:	2800      	cmp	r0, #0
   bf478:	f43f ae7e 	beq.w	bf178 <_strtod_l+0x490>
   bf47c:	f1b9 0f00 	cmp.w	r9, #0
   bf480:	dd08      	ble.n	bf494 <_strtod_l+0x7ac>
   bf482:	4631      	mov	r1, r6
   bf484:	464a      	mov	r2, r9
   bf486:	4620      	mov	r0, r4
   bf488:	f001 f910 	bl	c06ac <__lshift>
   bf48c:	4606      	mov	r6, r0
   bf48e:	2800      	cmp	r0, #0
   bf490:	f43f ae72 	beq.w	bf178 <_strtod_l+0x490>
   bf494:	9a05      	ldr	r2, [sp, #20]
   bf496:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf498:	4620      	mov	r0, r4
   bf49a:	f001 f993 	bl	c07c4 <__mdiff>
   bf49e:	4605      	mov	r5, r0
   bf4a0:	2800      	cmp	r0, #0
   bf4a2:	f43f ae69 	beq.w	bf178 <_strtod_l+0x490>
   bf4a6:	68c3      	ldr	r3, [r0, #12]
   bf4a8:	930b      	str	r3, [sp, #44]	; 0x2c
   bf4aa:	2300      	movs	r3, #0
   bf4ac:	60c3      	str	r3, [r0, #12]
   bf4ae:	4631      	mov	r1, r6
   bf4b0:	f001 f96c 	bl	c078c <__mcmp>
   bf4b4:	2800      	cmp	r0, #0
   bf4b6:	da60      	bge.n	bf57a <_strtod_l+0x892>
   bf4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf4ba:	ea53 030a 	orrs.w	r3, r3, sl
   bf4be:	f040 8082 	bne.w	bf5c6 <_strtod_l+0x8de>
   bf4c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf4c6:	2b00      	cmp	r3, #0
   bf4c8:	d17d      	bne.n	bf5c6 <_strtod_l+0x8de>
   bf4ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf4ce:	0d1b      	lsrs	r3, r3, #20
   bf4d0:	051b      	lsls	r3, r3, #20
   bf4d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bf4d6:	d976      	bls.n	bf5c6 <_strtod_l+0x8de>
   bf4d8:	696b      	ldr	r3, [r5, #20]
   bf4da:	b913      	cbnz	r3, bf4e2 <_strtod_l+0x7fa>
   bf4dc:	692b      	ldr	r3, [r5, #16]
   bf4de:	2b01      	cmp	r3, #1
   bf4e0:	dd71      	ble.n	bf5c6 <_strtod_l+0x8de>
   bf4e2:	4629      	mov	r1, r5
   bf4e4:	2201      	movs	r2, #1
   bf4e6:	4620      	mov	r0, r4
   bf4e8:	f001 f8e0 	bl	c06ac <__lshift>
   bf4ec:	4631      	mov	r1, r6
   bf4ee:	4605      	mov	r5, r0
   bf4f0:	f001 f94c 	bl	c078c <__mcmp>
   bf4f4:	2800      	cmp	r0, #0
   bf4f6:	dd66      	ble.n	bf5c6 <_strtod_l+0x8de>
   bf4f8:	9904      	ldr	r1, [sp, #16]
   bf4fa:	4a53      	ldr	r2, [pc, #332]	; (bf648 <_strtod_l+0x960>)
   bf4fc:	465b      	mov	r3, fp
   bf4fe:	2900      	cmp	r1, #0
   bf500:	f000 8081 	beq.w	bf606 <_strtod_l+0x91e>
   bf504:	ea02 010b 	and.w	r1, r2, fp
   bf508:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bf50c:	dc7b      	bgt.n	bf606 <_strtod_l+0x91e>
   bf50e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bf512:	f77f aea9 	ble.w	bf268 <_strtod_l+0x580>
   bf516:	4b4d      	ldr	r3, [pc, #308]	; (bf64c <_strtod_l+0x964>)
   bf518:	4650      	mov	r0, sl
   bf51a:	4659      	mov	r1, fp
   bf51c:	2200      	movs	r2, #0
   bf51e:	f7fe ff69 	bl	be3f4 <__aeabi_dmul>
   bf522:	460b      	mov	r3, r1
   bf524:	4303      	orrs	r3, r0
   bf526:	bf08      	it	eq
   bf528:	2322      	moveq	r3, #34	; 0x22
   bf52a:	4682      	mov	sl, r0
   bf52c:	468b      	mov	fp, r1
   bf52e:	bf08      	it	eq
   bf530:	6023      	streq	r3, [r4, #0]
   bf532:	e62b      	b.n	bf18c <_strtod_l+0x4a4>
   bf534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf538:	fa02 f303 	lsl.w	r3, r2, r3
   bf53c:	ea03 0a0a 	and.w	sl, r3, sl
   bf540:	e6e3      	b.n	bf30a <_strtod_l+0x622>
   bf542:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bf546:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bf54a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bf54e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bf552:	fa01 f308 	lsl.w	r3, r1, r8
   bf556:	9308      	str	r3, [sp, #32]
   bf558:	910d      	str	r1, [sp, #52]	; 0x34
   bf55a:	e746      	b.n	bf3ea <_strtod_l+0x702>
   bf55c:	2300      	movs	r3, #0
   bf55e:	9308      	str	r3, [sp, #32]
   bf560:	2301      	movs	r3, #1
   bf562:	930d      	str	r3, [sp, #52]	; 0x34
   bf564:	e741      	b.n	bf3ea <_strtod_l+0x702>
   bf566:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf568:	4642      	mov	r2, r8
   bf56a:	4620      	mov	r0, r4
   bf56c:	f001 f89e 	bl	c06ac <__lshift>
   bf570:	9018      	str	r0, [sp, #96]	; 0x60
   bf572:	2800      	cmp	r0, #0
   bf574:	f47f af6b 	bne.w	bf44e <_strtod_l+0x766>
   bf578:	e5fe      	b.n	bf178 <_strtod_l+0x490>
   bf57a:	465f      	mov	r7, fp
   bf57c:	d16e      	bne.n	bf65c <_strtod_l+0x974>
   bf57e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf580:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf584:	b342      	cbz	r2, bf5d8 <_strtod_l+0x8f0>
   bf586:	4a32      	ldr	r2, [pc, #200]	; (bf650 <_strtod_l+0x968>)
   bf588:	4293      	cmp	r3, r2
   bf58a:	d128      	bne.n	bf5de <_strtod_l+0x8f6>
   bf58c:	9b04      	ldr	r3, [sp, #16]
   bf58e:	4651      	mov	r1, sl
   bf590:	b1eb      	cbz	r3, bf5ce <_strtod_l+0x8e6>
   bf592:	4b2d      	ldr	r3, [pc, #180]	; (bf648 <_strtod_l+0x960>)
   bf594:	403b      	ands	r3, r7
   bf596:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf59a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf59e:	d819      	bhi.n	bf5d4 <_strtod_l+0x8ec>
   bf5a0:	0d1b      	lsrs	r3, r3, #20
   bf5a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf5a6:	fa02 f303 	lsl.w	r3, r2, r3
   bf5aa:	4299      	cmp	r1, r3
   bf5ac:	d117      	bne.n	bf5de <_strtod_l+0x8f6>
   bf5ae:	4b29      	ldr	r3, [pc, #164]	; (bf654 <_strtod_l+0x96c>)
   bf5b0:	429f      	cmp	r7, r3
   bf5b2:	d102      	bne.n	bf5ba <_strtod_l+0x8d2>
   bf5b4:	3101      	adds	r1, #1
   bf5b6:	f43f addf 	beq.w	bf178 <_strtod_l+0x490>
   bf5ba:	4b23      	ldr	r3, [pc, #140]	; (bf648 <_strtod_l+0x960>)
   bf5bc:	403b      	ands	r3, r7
   bf5be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bf5c2:	f04f 0a00 	mov.w	sl, #0
   bf5c6:	9b04      	ldr	r3, [sp, #16]
   bf5c8:	2b00      	cmp	r3, #0
   bf5ca:	d1a4      	bne.n	bf516 <_strtod_l+0x82e>
   bf5cc:	e5de      	b.n	bf18c <_strtod_l+0x4a4>
   bf5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bf5d2:	e7ea      	b.n	bf5aa <_strtod_l+0x8c2>
   bf5d4:	4613      	mov	r3, r2
   bf5d6:	e7e8      	b.n	bf5aa <_strtod_l+0x8c2>
   bf5d8:	ea53 030a 	orrs.w	r3, r3, sl
   bf5dc:	d08c      	beq.n	bf4f8 <_strtod_l+0x810>
   bf5de:	9b08      	ldr	r3, [sp, #32]
   bf5e0:	b1db      	cbz	r3, bf61a <_strtod_l+0x932>
   bf5e2:	423b      	tst	r3, r7
   bf5e4:	d0ef      	beq.n	bf5c6 <_strtod_l+0x8de>
   bf5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf5e8:	9a04      	ldr	r2, [sp, #16]
   bf5ea:	4650      	mov	r0, sl
   bf5ec:	4659      	mov	r1, fp
   bf5ee:	b1c3      	cbz	r3, bf622 <_strtod_l+0x93a>
   bf5f0:	f7ff fb5c 	bl	becac <sulp>
   bf5f4:	4602      	mov	r2, r0
   bf5f6:	460b      	mov	r3, r1
   bf5f8:	ec51 0b18 	vmov	r0, r1, d8
   bf5fc:	f7fe fd44 	bl	be088 <__adddf3>
   bf600:	4682      	mov	sl, r0
   bf602:	468b      	mov	fp, r1
   bf604:	e7df      	b.n	bf5c6 <_strtod_l+0x8de>
   bf606:	4013      	ands	r3, r2
   bf608:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bf60c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bf610:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bf614:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf618:	e7d5      	b.n	bf5c6 <_strtod_l+0x8de>
   bf61a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf61c:	ea13 0f0a 	tst.w	r3, sl
   bf620:	e7e0      	b.n	bf5e4 <_strtod_l+0x8fc>
   bf622:	f7ff fb43 	bl	becac <sulp>
   bf626:	4602      	mov	r2, r0
   bf628:	460b      	mov	r3, r1
   bf62a:	ec51 0b18 	vmov	r0, r1, d8
   bf62e:	f7fe fd29 	bl	be084 <__aeabi_dsub>
   bf632:	2200      	movs	r2, #0
   bf634:	2300      	movs	r3, #0
   bf636:	4682      	mov	sl, r0
   bf638:	468b      	mov	fp, r1
   bf63a:	f7ff f943 	bl	be8c4 <__aeabi_dcmpeq>
   bf63e:	2800      	cmp	r0, #0
   bf640:	d0c1      	beq.n	bf5c6 <_strtod_l+0x8de>
   bf642:	e611      	b.n	bf268 <_strtod_l+0x580>
   bf644:	fffffc02 	.word	0xfffffc02
   bf648:	7ff00000 	.word	0x7ff00000
   bf64c:	39500000 	.word	0x39500000
   bf650:	000fffff 	.word	0x000fffff
   bf654:	7fefffff 	.word	0x7fefffff
   bf658:	000c22d0 	.word	0x000c22d0
   bf65c:	4631      	mov	r1, r6
   bf65e:	4628      	mov	r0, r5
   bf660:	f001 fa12 	bl	c0a88 <__ratio>
   bf664:	ec59 8b10 	vmov	r8, r9, d0
   bf668:	ee10 0a10 	vmov	r0, s0
   bf66c:	2200      	movs	r2, #0
   bf66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bf672:	4649      	mov	r1, r9
   bf674:	f7ff f93a 	bl	be8ec <__aeabi_dcmple>
   bf678:	2800      	cmp	r0, #0
   bf67a:	d07a      	beq.n	bf772 <_strtod_l+0xa8a>
   bf67c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf67e:	2b00      	cmp	r3, #0
   bf680:	d04a      	beq.n	bf718 <_strtod_l+0xa30>
   bf682:	4b95      	ldr	r3, [pc, #596]	; (bf8d8 <_strtod_l+0xbf0>)
   bf684:	2200      	movs	r2, #0
   bf686:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf68a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf8d8 <_strtod_l+0xbf0>
   bf68e:	f04f 0800 	mov.w	r8, #0
   bf692:	4b92      	ldr	r3, [pc, #584]	; (bf8dc <_strtod_l+0xbf4>)
   bf694:	403b      	ands	r3, r7
   bf696:	930d      	str	r3, [sp, #52]	; 0x34
   bf698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf69a:	4b91      	ldr	r3, [pc, #580]	; (bf8e0 <_strtod_l+0xbf8>)
   bf69c:	429a      	cmp	r2, r3
   bf69e:	f040 80b0 	bne.w	bf802 <_strtod_l+0xb1a>
   bf6a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf6a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bf6aa:	ec4b ab10 	vmov	d0, sl, fp
   bf6ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf6b2:	f001 f911 	bl	c08d8 <__ulp>
   bf6b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf6ba:	ec53 2b10 	vmov	r2, r3, d0
   bf6be:	f7fe fe99 	bl	be3f4 <__aeabi_dmul>
   bf6c2:	4652      	mov	r2, sl
   bf6c4:	465b      	mov	r3, fp
   bf6c6:	f7fe fcdf 	bl	be088 <__adddf3>
   bf6ca:	460b      	mov	r3, r1
   bf6cc:	4983      	ldr	r1, [pc, #524]	; (bf8dc <_strtod_l+0xbf4>)
   bf6ce:	4a85      	ldr	r2, [pc, #532]	; (bf8e4 <_strtod_l+0xbfc>)
   bf6d0:	4019      	ands	r1, r3
   bf6d2:	4291      	cmp	r1, r2
   bf6d4:	4682      	mov	sl, r0
   bf6d6:	d960      	bls.n	bf79a <_strtod_l+0xab2>
   bf6d8:	ee18 3a90 	vmov	r3, s17
   bf6dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bf6e0:	4293      	cmp	r3, r2
   bf6e2:	d104      	bne.n	bf6ee <_strtod_l+0xa06>
   bf6e4:	ee18 3a10 	vmov	r3, s16
   bf6e8:	3301      	adds	r3, #1
   bf6ea:	f43f ad45 	beq.w	bf178 <_strtod_l+0x490>
   bf6ee:	f8df b200 	ldr.w	fp, [pc, #512]	; bf8f0 <_strtod_l+0xc08>
   bf6f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf6f8:	4620      	mov	r0, r4
   bf6fa:	f000 fdbb 	bl	c0274 <_Bfree>
   bf6fe:	9905      	ldr	r1, [sp, #20]
   bf700:	4620      	mov	r0, r4
   bf702:	f000 fdb7 	bl	c0274 <_Bfree>
   bf706:	4631      	mov	r1, r6
   bf708:	4620      	mov	r0, r4
   bf70a:	f000 fdb3 	bl	c0274 <_Bfree>
   bf70e:	4629      	mov	r1, r5
   bf710:	4620      	mov	r0, r4
   bf712:	f000 fdaf 	bl	c0274 <_Bfree>
   bf716:	e61a      	b.n	bf34e <_strtod_l+0x666>
   bf718:	f1ba 0f00 	cmp.w	sl, #0
   bf71c:	d11b      	bne.n	bf756 <_strtod_l+0xa6e>
   bf71e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf722:	b9f3      	cbnz	r3, bf762 <_strtod_l+0xa7a>
   bf724:	4b6c      	ldr	r3, [pc, #432]	; (bf8d8 <_strtod_l+0xbf0>)
   bf726:	2200      	movs	r2, #0
   bf728:	4640      	mov	r0, r8
   bf72a:	4649      	mov	r1, r9
   bf72c:	f7ff f8d4 	bl	be8d8 <__aeabi_dcmplt>
   bf730:	b9d0      	cbnz	r0, bf768 <_strtod_l+0xa80>
   bf732:	4640      	mov	r0, r8
   bf734:	4649      	mov	r1, r9
   bf736:	4b6c      	ldr	r3, [pc, #432]	; (bf8e8 <_strtod_l+0xc00>)
   bf738:	2200      	movs	r2, #0
   bf73a:	f7fe fe5b 	bl	be3f4 <__aeabi_dmul>
   bf73e:	4680      	mov	r8, r0
   bf740:	4689      	mov	r9, r1
   bf742:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bf746:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bf74a:	9315      	str	r3, [sp, #84]	; 0x54
   bf74c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bf750:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf754:	e79d      	b.n	bf692 <_strtod_l+0x9aa>
   bf756:	f1ba 0f01 	cmp.w	sl, #1
   bf75a:	d102      	bne.n	bf762 <_strtod_l+0xa7a>
   bf75c:	2f00      	cmp	r7, #0
   bf75e:	f43f ad83 	beq.w	bf268 <_strtod_l+0x580>
   bf762:	4b62      	ldr	r3, [pc, #392]	; (bf8ec <_strtod_l+0xc04>)
   bf764:	2200      	movs	r2, #0
   bf766:	e78e      	b.n	bf686 <_strtod_l+0x99e>
   bf768:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf8e8 <_strtod_l+0xc00>
   bf76c:	f04f 0800 	mov.w	r8, #0
   bf770:	e7e7      	b.n	bf742 <_strtod_l+0xa5a>
   bf772:	4b5d      	ldr	r3, [pc, #372]	; (bf8e8 <_strtod_l+0xc00>)
   bf774:	4640      	mov	r0, r8
   bf776:	4649      	mov	r1, r9
   bf778:	2200      	movs	r2, #0
   bf77a:	f7fe fe3b 	bl	be3f4 <__aeabi_dmul>
   bf77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf780:	4680      	mov	r8, r0
   bf782:	4689      	mov	r9, r1
   bf784:	b933      	cbnz	r3, bf794 <_strtod_l+0xaac>
   bf786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf78a:	900e      	str	r0, [sp, #56]	; 0x38
   bf78c:	930f      	str	r3, [sp, #60]	; 0x3c
   bf78e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bf792:	e7dd      	b.n	bf750 <_strtod_l+0xa68>
   bf794:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bf798:	e7f9      	b.n	bf78e <_strtod_l+0xaa6>
   bf79a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bf79e:	9b04      	ldr	r3, [sp, #16]
   bf7a0:	2b00      	cmp	r3, #0
   bf7a2:	d1a8      	bne.n	bf6f6 <_strtod_l+0xa0e>
   bf7a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf7aa:	0d1b      	lsrs	r3, r3, #20
   bf7ac:	051b      	lsls	r3, r3, #20
   bf7ae:	429a      	cmp	r2, r3
   bf7b0:	d1a1      	bne.n	bf6f6 <_strtod_l+0xa0e>
   bf7b2:	4640      	mov	r0, r8
   bf7b4:	4649      	mov	r1, r9
   bf7b6:	f001 fa05 	bl	c0bc4 <__aeabi_d2lz>
   bf7ba:	f7fe fded 	bl	be398 <__aeabi_l2d>
   bf7be:	4602      	mov	r2, r0
   bf7c0:	460b      	mov	r3, r1
   bf7c2:	4640      	mov	r0, r8
   bf7c4:	4649      	mov	r1, r9
   bf7c6:	f7fe fc5d 	bl	be084 <__aeabi_dsub>
   bf7ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf7cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf7d0:	ea43 030a 	orr.w	r3, r3, sl
   bf7d4:	4313      	orrs	r3, r2
   bf7d6:	4680      	mov	r8, r0
   bf7d8:	4689      	mov	r9, r1
   bf7da:	d055      	beq.n	bf888 <_strtod_l+0xba0>
   bf7dc:	a336      	add	r3, pc, #216	; (adr r3, bf8b8 <_strtod_l+0xbd0>)
   bf7de:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf7e2:	f7ff f879 	bl	be8d8 <__aeabi_dcmplt>
   bf7e6:	2800      	cmp	r0, #0
   bf7e8:	f47f acd0 	bne.w	bf18c <_strtod_l+0x4a4>
   bf7ec:	a334      	add	r3, pc, #208	; (adr r3, bf8c0 <_strtod_l+0xbd8>)
   bf7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf7f2:	4640      	mov	r0, r8
   bf7f4:	4649      	mov	r1, r9
   bf7f6:	f7ff f88d 	bl	be914 <__aeabi_dcmpgt>
   bf7fa:	2800      	cmp	r0, #0
   bf7fc:	f43f af7b 	beq.w	bf6f6 <_strtod_l+0xa0e>
   bf800:	e4c4      	b.n	bf18c <_strtod_l+0x4a4>
   bf802:	9b04      	ldr	r3, [sp, #16]
   bf804:	b333      	cbz	r3, bf854 <_strtod_l+0xb6c>
   bf806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf808:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf80c:	d822      	bhi.n	bf854 <_strtod_l+0xb6c>
   bf80e:	a32e      	add	r3, pc, #184	; (adr r3, bf8c8 <_strtod_l+0xbe0>)
   bf810:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf814:	4640      	mov	r0, r8
   bf816:	4649      	mov	r1, r9
   bf818:	f7ff f868 	bl	be8ec <__aeabi_dcmple>
   bf81c:	b1a0      	cbz	r0, bf848 <_strtod_l+0xb60>
   bf81e:	4649      	mov	r1, r9
   bf820:	4640      	mov	r0, r8
   bf822:	f7ff f881 	bl	be928 <__aeabi_d2uiz>
   bf826:	2801      	cmp	r0, #1
   bf828:	bf38      	it	cc
   bf82a:	2001      	movcc	r0, #1
   bf82c:	f7fe fd68 	bl	be300 <__aeabi_ui2d>
   bf830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf832:	4680      	mov	r8, r0
   bf834:	4689      	mov	r9, r1
   bf836:	bb23      	cbnz	r3, bf882 <_strtod_l+0xb9a>
   bf838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf83c:	9010      	str	r0, [sp, #64]	; 0x40
   bf83e:	9311      	str	r3, [sp, #68]	; 0x44
   bf840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bf844:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf848:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf84a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf84c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bf850:	1a9b      	subs	r3, r3, r2
   bf852:	9309      	str	r3, [sp, #36]	; 0x24
   bf854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf858:	eeb0 0a48 	vmov.f32	s0, s16
   bf85c:	eef0 0a68 	vmov.f32	s1, s17
   bf860:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf864:	f001 f838 	bl	c08d8 <__ulp>
   bf868:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf86c:	ec53 2b10 	vmov	r2, r3, d0
   bf870:	f7fe fdc0 	bl	be3f4 <__aeabi_dmul>
   bf874:	ec53 2b18 	vmov	r2, r3, d8
   bf878:	f7fe fc06 	bl	be088 <__adddf3>
   bf87c:	4682      	mov	sl, r0
   bf87e:	468b      	mov	fp, r1
   bf880:	e78d      	b.n	bf79e <_strtod_l+0xab6>
   bf882:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf886:	e7db      	b.n	bf840 <_strtod_l+0xb58>
   bf888:	a311      	add	r3, pc, #68	; (adr r3, bf8d0 <_strtod_l+0xbe8>)
   bf88a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf88e:	f7ff f823 	bl	be8d8 <__aeabi_dcmplt>
   bf892:	e7b2      	b.n	bf7fa <_strtod_l+0xb12>
   bf894:	2300      	movs	r3, #0
   bf896:	930a      	str	r3, [sp, #40]	; 0x28
   bf898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf89a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf89c:	6013      	str	r3, [r2, #0]
   bf89e:	f7ff ba6b 	b.w	bed78 <_strtod_l+0x90>
   bf8a2:	2a65      	cmp	r2, #101	; 0x65
   bf8a4:	f43f ab5f 	beq.w	bef66 <_strtod_l+0x27e>
   bf8a8:	2a45      	cmp	r2, #69	; 0x45
   bf8aa:	f43f ab5c 	beq.w	bef66 <_strtod_l+0x27e>
   bf8ae:	2301      	movs	r3, #1
   bf8b0:	f7ff bb94 	b.w	befdc <_strtod_l+0x2f4>
   bf8b4:	f3af 8000 	nop.w
   bf8b8:	94a03595 	.word	0x94a03595
   bf8bc:	3fdfffff 	.word	0x3fdfffff
   bf8c0:	35afe535 	.word	0x35afe535
   bf8c4:	3fe00000 	.word	0x3fe00000
   bf8c8:	ffc00000 	.word	0xffc00000
   bf8cc:	41dfffff 	.word	0x41dfffff
   bf8d0:	94a03595 	.word	0x94a03595
   bf8d4:	3fcfffff 	.word	0x3fcfffff
   bf8d8:	3ff00000 	.word	0x3ff00000
   bf8dc:	7ff00000 	.word	0x7ff00000
   bf8e0:	7fe00000 	.word	0x7fe00000
   bf8e4:	7c9fffff 	.word	0x7c9fffff
   bf8e8:	3fe00000 	.word	0x3fe00000
   bf8ec:	bff00000 	.word	0xbff00000
   bf8f0:	7fefffff 	.word	0x7fefffff

000bf8f4 <strtod>:
   bf8f4:	460a      	mov	r2, r1
   bf8f6:	4601      	mov	r1, r0
   bf8f8:	4802      	ldr	r0, [pc, #8]	; (bf904 <strtod+0x10>)
   bf8fa:	4b03      	ldr	r3, [pc, #12]	; (bf908 <strtod+0x14>)
   bf8fc:	6800      	ldr	r0, [r0, #0]
   bf8fe:	f7ff b9f3 	b.w	bece8 <_strtod_l>
   bf902:	bf00      	nop
   bf904:	2003da90 	.word	0x2003da90
   bf908:	2003dafc 	.word	0x2003dafc

000bf90c <_strtol_l.constprop.0>:
   bf90c:	2b01      	cmp	r3, #1
   bf90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf912:	d001      	beq.n	bf918 <_strtol_l.constprop.0+0xc>
   bf914:	2b24      	cmp	r3, #36	; 0x24
   bf916:	d906      	bls.n	bf926 <_strtol_l.constprop.0+0x1a>
   bf918:	f7fa fb82 	bl	ba020 <__errno>
   bf91c:	2316      	movs	r3, #22
   bf91e:	6003      	str	r3, [r0, #0]
   bf920:	2000      	movs	r0, #0
   bf922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf926:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bfa0c <_strtol_l.constprop.0+0x100>
   bf92a:	460d      	mov	r5, r1
   bf92c:	462e      	mov	r6, r5
   bf92e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf932:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf936:	f017 0708 	ands.w	r7, r7, #8
   bf93a:	d1f7      	bne.n	bf92c <_strtol_l.constprop.0+0x20>
   bf93c:	2c2d      	cmp	r4, #45	; 0x2d
   bf93e:	d132      	bne.n	bf9a6 <_strtol_l.constprop.0+0x9a>
   bf940:	782c      	ldrb	r4, [r5, #0]
   bf942:	2701      	movs	r7, #1
   bf944:	1cb5      	adds	r5, r6, #2
   bf946:	2b00      	cmp	r3, #0
   bf948:	d05b      	beq.n	bfa02 <_strtol_l.constprop.0+0xf6>
   bf94a:	2b10      	cmp	r3, #16
   bf94c:	d109      	bne.n	bf962 <_strtol_l.constprop.0+0x56>
   bf94e:	2c30      	cmp	r4, #48	; 0x30
   bf950:	d107      	bne.n	bf962 <_strtol_l.constprop.0+0x56>
   bf952:	782c      	ldrb	r4, [r5, #0]
   bf954:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf958:	2c58      	cmp	r4, #88	; 0x58
   bf95a:	d14d      	bne.n	bf9f8 <_strtol_l.constprop.0+0xec>
   bf95c:	786c      	ldrb	r4, [r5, #1]
   bf95e:	2310      	movs	r3, #16
   bf960:	3502      	adds	r5, #2
   bf962:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf966:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf96a:	f04f 0c00 	mov.w	ip, #0
   bf96e:	fbb8 f9f3 	udiv	r9, r8, r3
   bf972:	4666      	mov	r6, ip
   bf974:	fb03 8a19 	mls	sl, r3, r9, r8
   bf978:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf97c:	f1be 0f09 	cmp.w	lr, #9
   bf980:	d816      	bhi.n	bf9b0 <_strtol_l.constprop.0+0xa4>
   bf982:	4674      	mov	r4, lr
   bf984:	42a3      	cmp	r3, r4
   bf986:	dd24      	ble.n	bf9d2 <_strtol_l.constprop.0+0xc6>
   bf988:	f1bc 0f00 	cmp.w	ip, #0
   bf98c:	db1e      	blt.n	bf9cc <_strtol_l.constprop.0+0xc0>
   bf98e:	45b1      	cmp	r9, r6
   bf990:	d31c      	bcc.n	bf9cc <_strtol_l.constprop.0+0xc0>
   bf992:	d101      	bne.n	bf998 <_strtol_l.constprop.0+0x8c>
   bf994:	45a2      	cmp	sl, r4
   bf996:	db19      	blt.n	bf9cc <_strtol_l.constprop.0+0xc0>
   bf998:	fb06 4603 	mla	r6, r6, r3, r4
   bf99c:	f04f 0c01 	mov.w	ip, #1
   bf9a0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf9a4:	e7e8      	b.n	bf978 <_strtol_l.constprop.0+0x6c>
   bf9a6:	2c2b      	cmp	r4, #43	; 0x2b
   bf9a8:	bf04      	itt	eq
   bf9aa:	782c      	ldrbeq	r4, [r5, #0]
   bf9ac:	1cb5      	addeq	r5, r6, #2
   bf9ae:	e7ca      	b.n	bf946 <_strtol_l.constprop.0+0x3a>
   bf9b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf9b4:	f1be 0f19 	cmp.w	lr, #25
   bf9b8:	d801      	bhi.n	bf9be <_strtol_l.constprop.0+0xb2>
   bf9ba:	3c37      	subs	r4, #55	; 0x37
   bf9bc:	e7e2      	b.n	bf984 <_strtol_l.constprop.0+0x78>
   bf9be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf9c2:	f1be 0f19 	cmp.w	lr, #25
   bf9c6:	d804      	bhi.n	bf9d2 <_strtol_l.constprop.0+0xc6>
   bf9c8:	3c57      	subs	r4, #87	; 0x57
   bf9ca:	e7db      	b.n	bf984 <_strtol_l.constprop.0+0x78>
   bf9cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf9d0:	e7e6      	b.n	bf9a0 <_strtol_l.constprop.0+0x94>
   bf9d2:	f1bc 0f00 	cmp.w	ip, #0
   bf9d6:	da05      	bge.n	bf9e4 <_strtol_l.constprop.0+0xd8>
   bf9d8:	2322      	movs	r3, #34	; 0x22
   bf9da:	6003      	str	r3, [r0, #0]
   bf9dc:	4646      	mov	r6, r8
   bf9de:	b942      	cbnz	r2, bf9f2 <_strtol_l.constprop.0+0xe6>
   bf9e0:	4630      	mov	r0, r6
   bf9e2:	e79e      	b.n	bf922 <_strtol_l.constprop.0+0x16>
   bf9e4:	b107      	cbz	r7, bf9e8 <_strtol_l.constprop.0+0xdc>
   bf9e6:	4276      	negs	r6, r6
   bf9e8:	2a00      	cmp	r2, #0
   bf9ea:	d0f9      	beq.n	bf9e0 <_strtol_l.constprop.0+0xd4>
   bf9ec:	f1bc 0f00 	cmp.w	ip, #0
   bf9f0:	d000      	beq.n	bf9f4 <_strtol_l.constprop.0+0xe8>
   bf9f2:	1e69      	subs	r1, r5, #1
   bf9f4:	6011      	str	r1, [r2, #0]
   bf9f6:	e7f3      	b.n	bf9e0 <_strtol_l.constprop.0+0xd4>
   bf9f8:	2430      	movs	r4, #48	; 0x30
   bf9fa:	2b00      	cmp	r3, #0
   bf9fc:	d1b1      	bne.n	bf962 <_strtol_l.constprop.0+0x56>
   bf9fe:	2308      	movs	r3, #8
   bfa00:	e7af      	b.n	bf962 <_strtol_l.constprop.0+0x56>
   bfa02:	2c30      	cmp	r4, #48	; 0x30
   bfa04:	d0a5      	beq.n	bf952 <_strtol_l.constprop.0+0x46>
   bfa06:	230a      	movs	r3, #10
   bfa08:	e7ab      	b.n	bf962 <_strtol_l.constprop.0+0x56>
   bfa0a:	bf00      	nop
   bfa0c:	000c22f9 	.word	0x000c22f9

000bfa10 <strtol>:
   bfa10:	4613      	mov	r3, r2
   bfa12:	460a      	mov	r2, r1
   bfa14:	4601      	mov	r1, r0
   bfa16:	4802      	ldr	r0, [pc, #8]	; (bfa20 <strtol+0x10>)
   bfa18:	6800      	ldr	r0, [r0, #0]
   bfa1a:	f7ff bf77 	b.w	bf90c <_strtol_l.constprop.0>
   bfa1e:	bf00      	nop
   bfa20:	2003da90 	.word	0x2003da90

000bfa24 <__register_exitproc>:
   bfa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfa28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bfae4 <__register_exitproc+0xc0>
   bfa2c:	4606      	mov	r6, r0
   bfa2e:	f8d8 0000 	ldr.w	r0, [r8]
   bfa32:	461f      	mov	r7, r3
   bfa34:	460d      	mov	r5, r1
   bfa36:	4691      	mov	r9, r2
   bfa38:	f000 fbc6 	bl	c01c8 <__retarget_lock_acquire_recursive>
   bfa3c:	4b25      	ldr	r3, [pc, #148]	; (bfad4 <__register_exitproc+0xb0>)
   bfa3e:	681c      	ldr	r4, [r3, #0]
   bfa40:	b934      	cbnz	r4, bfa50 <__register_exitproc+0x2c>
   bfa42:	4c25      	ldr	r4, [pc, #148]	; (bfad8 <__register_exitproc+0xb4>)
   bfa44:	601c      	str	r4, [r3, #0]
   bfa46:	4b25      	ldr	r3, [pc, #148]	; (bfadc <__register_exitproc+0xb8>)
   bfa48:	b113      	cbz	r3, bfa50 <__register_exitproc+0x2c>
   bfa4a:	681b      	ldr	r3, [r3, #0]
   bfa4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bfa50:	6863      	ldr	r3, [r4, #4]
   bfa52:	2b1f      	cmp	r3, #31
   bfa54:	dd07      	ble.n	bfa66 <__register_exitproc+0x42>
   bfa56:	f8d8 0000 	ldr.w	r0, [r8]
   bfa5a:	f000 fbb7 	bl	c01cc <__retarget_lock_release_recursive>
   bfa5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bfa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfa66:	b34e      	cbz	r6, bfabc <__register_exitproc+0x98>
   bfa68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bfa6c:	b988      	cbnz	r0, bfa92 <__register_exitproc+0x6e>
   bfa6e:	4b1c      	ldr	r3, [pc, #112]	; (bfae0 <__register_exitproc+0xbc>)
   bfa70:	b923      	cbnz	r3, bfa7c <__register_exitproc+0x58>
   bfa72:	f8d8 0000 	ldr.w	r0, [r8]
   bfa76:	f000 fba8 	bl	c01ca <__retarget_lock_release>
   bfa7a:	e7f0      	b.n	bfa5e <__register_exitproc+0x3a>
   bfa7c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bfa80:	f7fa fa86 	bl	b9f90 <malloc>
   bfa84:	2800      	cmp	r0, #0
   bfa86:	d0f4      	beq.n	bfa72 <__register_exitproc+0x4e>
   bfa88:	2300      	movs	r3, #0
   bfa8a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bfa8e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bfa92:	6863      	ldr	r3, [r4, #4]
   bfa94:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bfa98:	2201      	movs	r2, #1
   bfa9a:	409a      	lsls	r2, r3
   bfa9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bfaa0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bfaa4:	4313      	orrs	r3, r2
   bfaa6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bfaaa:	2e02      	cmp	r6, #2
   bfaac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bfab0:	bf02      	ittt	eq
   bfab2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bfab6:	4313      	orreq	r3, r2
   bfab8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bfabc:	6863      	ldr	r3, [r4, #4]
   bfabe:	f8d8 0000 	ldr.w	r0, [r8]
   bfac2:	1c5a      	adds	r2, r3, #1
   bfac4:	3302      	adds	r3, #2
   bfac6:	6062      	str	r2, [r4, #4]
   bfac8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bfacc:	f000 fb7e 	bl	c01cc <__retarget_lock_release_recursive>
   bfad0:	2000      	movs	r0, #0
   bfad2:	e7c6      	b.n	bfa62 <__register_exitproc+0x3e>
   bfad4:	2003e7e8 	.word	0x2003e7e8
   bfad8:	2003e75c 	.word	0x2003e75c
   bfadc:	00000000 	.word	0x00000000
   bfae0:	000b9f91 	.word	0x000b9f91
   bfae4:	2003daf4 	.word	0x2003daf4

000bfae8 <rshift>:
   bfae8:	6903      	ldr	r3, [r0, #16]
   bfaea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bfaee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bfaf2:	ea4f 1261 	mov.w	r2, r1, asr #5
   bfaf6:	f100 0414 	add.w	r4, r0, #20
   bfafa:	dd45      	ble.n	bfb88 <rshift+0xa0>
   bfafc:	f011 011f 	ands.w	r1, r1, #31
   bfb00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bfb04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bfb08:	d10c      	bne.n	bfb24 <rshift+0x3c>
   bfb0a:	f100 0710 	add.w	r7, r0, #16
   bfb0e:	4629      	mov	r1, r5
   bfb10:	42b1      	cmp	r1, r6
   bfb12:	d334      	bcc.n	bfb7e <rshift+0x96>
   bfb14:	1a9b      	subs	r3, r3, r2
   bfb16:	009b      	lsls	r3, r3, #2
   bfb18:	1eea      	subs	r2, r5, #3
   bfb1a:	4296      	cmp	r6, r2
   bfb1c:	bf38      	it	cc
   bfb1e:	2300      	movcc	r3, #0
   bfb20:	4423      	add	r3, r4
   bfb22:	e015      	b.n	bfb50 <rshift+0x68>
   bfb24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bfb28:	f1c1 0820 	rsb	r8, r1, #32
   bfb2c:	40cf      	lsrs	r7, r1
   bfb2e:	f105 0e04 	add.w	lr, r5, #4
   bfb32:	46a1      	mov	r9, r4
   bfb34:	4576      	cmp	r6, lr
   bfb36:	46f4      	mov	ip, lr
   bfb38:	d815      	bhi.n	bfb66 <rshift+0x7e>
   bfb3a:	1a9a      	subs	r2, r3, r2
   bfb3c:	0092      	lsls	r2, r2, #2
   bfb3e:	3a04      	subs	r2, #4
   bfb40:	3501      	adds	r5, #1
   bfb42:	42ae      	cmp	r6, r5
   bfb44:	bf38      	it	cc
   bfb46:	2200      	movcc	r2, #0
   bfb48:	18a3      	adds	r3, r4, r2
   bfb4a:	50a7      	str	r7, [r4, r2]
   bfb4c:	b107      	cbz	r7, bfb50 <rshift+0x68>
   bfb4e:	3304      	adds	r3, #4
   bfb50:	1b1a      	subs	r2, r3, r4
   bfb52:	42a3      	cmp	r3, r4
   bfb54:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bfb58:	bf08      	it	eq
   bfb5a:	2300      	moveq	r3, #0
   bfb5c:	6102      	str	r2, [r0, #16]
   bfb5e:	bf08      	it	eq
   bfb60:	6143      	streq	r3, [r0, #20]
   bfb62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bfb66:	f8dc c000 	ldr.w	ip, [ip]
   bfb6a:	fa0c fc08 	lsl.w	ip, ip, r8
   bfb6e:	ea4c 0707 	orr.w	r7, ip, r7
   bfb72:	f849 7b04 	str.w	r7, [r9], #4
   bfb76:	f85e 7b04 	ldr.w	r7, [lr], #4
   bfb7a:	40cf      	lsrs	r7, r1
   bfb7c:	e7da      	b.n	bfb34 <rshift+0x4c>
   bfb7e:	f851 cb04 	ldr.w	ip, [r1], #4
   bfb82:	f847 cf04 	str.w	ip, [r7, #4]!
   bfb86:	e7c3      	b.n	bfb10 <rshift+0x28>
   bfb88:	4623      	mov	r3, r4
   bfb8a:	e7e1      	b.n	bfb50 <rshift+0x68>

000bfb8c <__hexdig_fun>:
   bfb8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bfb90:	2b09      	cmp	r3, #9
   bfb92:	d802      	bhi.n	bfb9a <__hexdig_fun+0xe>
   bfb94:	3820      	subs	r0, #32
   bfb96:	b2c0      	uxtb	r0, r0
   bfb98:	4770      	bx	lr
   bfb9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bfb9e:	2b05      	cmp	r3, #5
   bfba0:	d801      	bhi.n	bfba6 <__hexdig_fun+0x1a>
   bfba2:	3847      	subs	r0, #71	; 0x47
   bfba4:	e7f7      	b.n	bfb96 <__hexdig_fun+0xa>
   bfba6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bfbaa:	2b05      	cmp	r3, #5
   bfbac:	d801      	bhi.n	bfbb2 <__hexdig_fun+0x26>
   bfbae:	3827      	subs	r0, #39	; 0x27
   bfbb0:	e7f1      	b.n	bfb96 <__hexdig_fun+0xa>
   bfbb2:	2000      	movs	r0, #0
   bfbb4:	4770      	bx	lr
	...

000bfbb8 <__gethex>:
   bfbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfbbc:	ed2d 8b02 	vpush	{d8}
   bfbc0:	b089      	sub	sp, #36	; 0x24
   bfbc2:	ee08 0a10 	vmov	s16, r0
   bfbc6:	9304      	str	r3, [sp, #16]
   bfbc8:	4bb4      	ldr	r3, [pc, #720]	; (bfe9c <__gethex+0x2e4>)
   bfbca:	681b      	ldr	r3, [r3, #0]
   bfbcc:	9301      	str	r3, [sp, #4]
   bfbce:	4618      	mov	r0, r3
   bfbd0:	468b      	mov	fp, r1
   bfbd2:	4690      	mov	r8, r2
   bfbd4:	f7ff f82f 	bl	bec36 <strlen>
   bfbd8:	9b01      	ldr	r3, [sp, #4]
   bfbda:	f8db 2000 	ldr.w	r2, [fp]
   bfbde:	4403      	add	r3, r0
   bfbe0:	4682      	mov	sl, r0
   bfbe2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bfbe6:	9305      	str	r3, [sp, #20]
   bfbe8:	1c93      	adds	r3, r2, #2
   bfbea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bfbee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bfbf2:	32fe      	adds	r2, #254	; 0xfe
   bfbf4:	18d1      	adds	r1, r2, r3
   bfbf6:	461f      	mov	r7, r3
   bfbf8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bfbfc:	9100      	str	r1, [sp, #0]
   bfbfe:	2830      	cmp	r0, #48	; 0x30
   bfc00:	d0f8      	beq.n	bfbf4 <__gethex+0x3c>
   bfc02:	f7ff ffc3 	bl	bfb8c <__hexdig_fun>
   bfc06:	4604      	mov	r4, r0
   bfc08:	2800      	cmp	r0, #0
   bfc0a:	d13a      	bne.n	bfc82 <__gethex+0xca>
   bfc0c:	9901      	ldr	r1, [sp, #4]
   bfc0e:	4652      	mov	r2, sl
   bfc10:	4638      	mov	r0, r7
   bfc12:	f7ff f818 	bl	bec46 <strncmp>
   bfc16:	4605      	mov	r5, r0
   bfc18:	2800      	cmp	r0, #0
   bfc1a:	d168      	bne.n	bfcee <__gethex+0x136>
   bfc1c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bfc20:	eb07 060a 	add.w	r6, r7, sl
   bfc24:	f7ff ffb2 	bl	bfb8c <__hexdig_fun>
   bfc28:	2800      	cmp	r0, #0
   bfc2a:	d062      	beq.n	bfcf2 <__gethex+0x13a>
   bfc2c:	4633      	mov	r3, r6
   bfc2e:	7818      	ldrb	r0, [r3, #0]
   bfc30:	2830      	cmp	r0, #48	; 0x30
   bfc32:	461f      	mov	r7, r3
   bfc34:	f103 0301 	add.w	r3, r3, #1
   bfc38:	d0f9      	beq.n	bfc2e <__gethex+0x76>
   bfc3a:	f7ff ffa7 	bl	bfb8c <__hexdig_fun>
   bfc3e:	2301      	movs	r3, #1
   bfc40:	fab0 f480 	clz	r4, r0
   bfc44:	0964      	lsrs	r4, r4, #5
   bfc46:	4635      	mov	r5, r6
   bfc48:	9300      	str	r3, [sp, #0]
   bfc4a:	463a      	mov	r2, r7
   bfc4c:	4616      	mov	r6, r2
   bfc4e:	3201      	adds	r2, #1
   bfc50:	7830      	ldrb	r0, [r6, #0]
   bfc52:	f7ff ff9b 	bl	bfb8c <__hexdig_fun>
   bfc56:	2800      	cmp	r0, #0
   bfc58:	d1f8      	bne.n	bfc4c <__gethex+0x94>
   bfc5a:	9901      	ldr	r1, [sp, #4]
   bfc5c:	4652      	mov	r2, sl
   bfc5e:	4630      	mov	r0, r6
   bfc60:	f7fe fff1 	bl	bec46 <strncmp>
   bfc64:	b980      	cbnz	r0, bfc88 <__gethex+0xd0>
   bfc66:	b94d      	cbnz	r5, bfc7c <__gethex+0xc4>
   bfc68:	eb06 050a 	add.w	r5, r6, sl
   bfc6c:	462a      	mov	r2, r5
   bfc6e:	4616      	mov	r6, r2
   bfc70:	3201      	adds	r2, #1
   bfc72:	7830      	ldrb	r0, [r6, #0]
   bfc74:	f7ff ff8a 	bl	bfb8c <__hexdig_fun>
   bfc78:	2800      	cmp	r0, #0
   bfc7a:	d1f8      	bne.n	bfc6e <__gethex+0xb6>
   bfc7c:	1bad      	subs	r5, r5, r6
   bfc7e:	00ad      	lsls	r5, r5, #2
   bfc80:	e004      	b.n	bfc8c <__gethex+0xd4>
   bfc82:	2400      	movs	r4, #0
   bfc84:	4625      	mov	r5, r4
   bfc86:	e7e0      	b.n	bfc4a <__gethex+0x92>
   bfc88:	2d00      	cmp	r5, #0
   bfc8a:	d1f7      	bne.n	bfc7c <__gethex+0xc4>
   bfc8c:	7833      	ldrb	r3, [r6, #0]
   bfc8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bfc92:	2b50      	cmp	r3, #80	; 0x50
   bfc94:	d13b      	bne.n	bfd0e <__gethex+0x156>
   bfc96:	7873      	ldrb	r3, [r6, #1]
   bfc98:	2b2b      	cmp	r3, #43	; 0x2b
   bfc9a:	d02c      	beq.n	bfcf6 <__gethex+0x13e>
   bfc9c:	2b2d      	cmp	r3, #45	; 0x2d
   bfc9e:	d02e      	beq.n	bfcfe <__gethex+0x146>
   bfca0:	1c71      	adds	r1, r6, #1
   bfca2:	f04f 0900 	mov.w	r9, #0
   bfca6:	7808      	ldrb	r0, [r1, #0]
   bfca8:	f7ff ff70 	bl	bfb8c <__hexdig_fun>
   bfcac:	1e43      	subs	r3, r0, #1
   bfcae:	b2db      	uxtb	r3, r3
   bfcb0:	2b18      	cmp	r3, #24
   bfcb2:	d82c      	bhi.n	bfd0e <__gethex+0x156>
   bfcb4:	f1a0 0210 	sub.w	r2, r0, #16
   bfcb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bfcbc:	f7ff ff66 	bl	bfb8c <__hexdig_fun>
   bfcc0:	1e43      	subs	r3, r0, #1
   bfcc2:	b2db      	uxtb	r3, r3
   bfcc4:	2b18      	cmp	r3, #24
   bfcc6:	d91d      	bls.n	bfd04 <__gethex+0x14c>
   bfcc8:	f1b9 0f00 	cmp.w	r9, #0
   bfccc:	d000      	beq.n	bfcd0 <__gethex+0x118>
   bfcce:	4252      	negs	r2, r2
   bfcd0:	4415      	add	r5, r2
   bfcd2:	f8cb 1000 	str.w	r1, [fp]
   bfcd6:	b1e4      	cbz	r4, bfd12 <__gethex+0x15a>
   bfcd8:	9b00      	ldr	r3, [sp, #0]
   bfcda:	2b00      	cmp	r3, #0
   bfcdc:	bf14      	ite	ne
   bfcde:	2700      	movne	r7, #0
   bfce0:	2706      	moveq	r7, #6
   bfce2:	4638      	mov	r0, r7
   bfce4:	b009      	add	sp, #36	; 0x24
   bfce6:	ecbd 8b02 	vpop	{d8}
   bfcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfcee:	463e      	mov	r6, r7
   bfcf0:	4625      	mov	r5, r4
   bfcf2:	2401      	movs	r4, #1
   bfcf4:	e7ca      	b.n	bfc8c <__gethex+0xd4>
   bfcf6:	f04f 0900 	mov.w	r9, #0
   bfcfa:	1cb1      	adds	r1, r6, #2
   bfcfc:	e7d3      	b.n	bfca6 <__gethex+0xee>
   bfcfe:	f04f 0901 	mov.w	r9, #1
   bfd02:	e7fa      	b.n	bfcfa <__gethex+0x142>
   bfd04:	230a      	movs	r3, #10
   bfd06:	fb03 0202 	mla	r2, r3, r2, r0
   bfd0a:	3a10      	subs	r2, #16
   bfd0c:	e7d4      	b.n	bfcb8 <__gethex+0x100>
   bfd0e:	4631      	mov	r1, r6
   bfd10:	e7df      	b.n	bfcd2 <__gethex+0x11a>
   bfd12:	1bf3      	subs	r3, r6, r7
   bfd14:	3b01      	subs	r3, #1
   bfd16:	4621      	mov	r1, r4
   bfd18:	2b07      	cmp	r3, #7
   bfd1a:	dc0b      	bgt.n	bfd34 <__gethex+0x17c>
   bfd1c:	ee18 0a10 	vmov	r0, s16
   bfd20:	f000 fa68 	bl	c01f4 <_Balloc>
   bfd24:	4604      	mov	r4, r0
   bfd26:	b940      	cbnz	r0, bfd3a <__gethex+0x182>
   bfd28:	4b5d      	ldr	r3, [pc, #372]	; (bfea0 <__gethex+0x2e8>)
   bfd2a:	4602      	mov	r2, r0
   bfd2c:	21de      	movs	r1, #222	; 0xde
   bfd2e:	485d      	ldr	r0, [pc, #372]	; (bfea4 <__gethex+0x2ec>)
   bfd30:	f7fa f97e 	bl	ba030 <__assert_func>
   bfd34:	3101      	adds	r1, #1
   bfd36:	105b      	asrs	r3, r3, #1
   bfd38:	e7ee      	b.n	bfd18 <__gethex+0x160>
   bfd3a:	f100 0914 	add.w	r9, r0, #20
   bfd3e:	f04f 0b00 	mov.w	fp, #0
   bfd42:	f1ca 0301 	rsb	r3, sl, #1
   bfd46:	f8cd 9008 	str.w	r9, [sp, #8]
   bfd4a:	f8cd b000 	str.w	fp, [sp]
   bfd4e:	9306      	str	r3, [sp, #24]
   bfd50:	42b7      	cmp	r7, r6
   bfd52:	d340      	bcc.n	bfdd6 <__gethex+0x21e>
   bfd54:	9802      	ldr	r0, [sp, #8]
   bfd56:	9b00      	ldr	r3, [sp, #0]
   bfd58:	f840 3b04 	str.w	r3, [r0], #4
   bfd5c:	eba0 0009 	sub.w	r0, r0, r9
   bfd60:	1080      	asrs	r0, r0, #2
   bfd62:	0146      	lsls	r6, r0, #5
   bfd64:	6120      	str	r0, [r4, #16]
   bfd66:	4618      	mov	r0, r3
   bfd68:	f000 fb36 	bl	c03d8 <__hi0bits>
   bfd6c:	1a30      	subs	r0, r6, r0
   bfd6e:	f8d8 6000 	ldr.w	r6, [r8]
   bfd72:	42b0      	cmp	r0, r6
   bfd74:	dd63      	ble.n	bfe3e <__gethex+0x286>
   bfd76:	1b87      	subs	r7, r0, r6
   bfd78:	4639      	mov	r1, r7
   bfd7a:	4620      	mov	r0, r4
   bfd7c:	f000 feda 	bl	c0b34 <__any_on>
   bfd80:	4682      	mov	sl, r0
   bfd82:	b1a8      	cbz	r0, bfdb0 <__gethex+0x1f8>
   bfd84:	1e7b      	subs	r3, r7, #1
   bfd86:	1159      	asrs	r1, r3, #5
   bfd88:	f003 021f 	and.w	r2, r3, #31
   bfd8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bfd90:	f04f 0a01 	mov.w	sl, #1
   bfd94:	fa0a f202 	lsl.w	r2, sl, r2
   bfd98:	420a      	tst	r2, r1
   bfd9a:	d009      	beq.n	bfdb0 <__gethex+0x1f8>
   bfd9c:	4553      	cmp	r3, sl
   bfd9e:	dd05      	ble.n	bfdac <__gethex+0x1f4>
   bfda0:	1eb9      	subs	r1, r7, #2
   bfda2:	4620      	mov	r0, r4
   bfda4:	f000 fec6 	bl	c0b34 <__any_on>
   bfda8:	2800      	cmp	r0, #0
   bfdaa:	d145      	bne.n	bfe38 <__gethex+0x280>
   bfdac:	f04f 0a02 	mov.w	sl, #2
   bfdb0:	4639      	mov	r1, r7
   bfdb2:	4620      	mov	r0, r4
   bfdb4:	f7ff fe98 	bl	bfae8 <rshift>
   bfdb8:	443d      	add	r5, r7
   bfdba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bfdbe:	42ab      	cmp	r3, r5
   bfdc0:	da4c      	bge.n	bfe5c <__gethex+0x2a4>
   bfdc2:	ee18 0a10 	vmov	r0, s16
   bfdc6:	4621      	mov	r1, r4
   bfdc8:	f000 fa54 	bl	c0274 <_Bfree>
   bfdcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfdce:	2300      	movs	r3, #0
   bfdd0:	6013      	str	r3, [r2, #0]
   bfdd2:	27a3      	movs	r7, #163	; 0xa3
   bfdd4:	e785      	b.n	bfce2 <__gethex+0x12a>
   bfdd6:	1e73      	subs	r3, r6, #1
   bfdd8:	9a05      	ldr	r2, [sp, #20]
   bfdda:	9303      	str	r3, [sp, #12]
   bfddc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bfde0:	4293      	cmp	r3, r2
   bfde2:	d019      	beq.n	bfe18 <__gethex+0x260>
   bfde4:	f1bb 0f20 	cmp.w	fp, #32
   bfde8:	d107      	bne.n	bfdfa <__gethex+0x242>
   bfdea:	9b02      	ldr	r3, [sp, #8]
   bfdec:	9a00      	ldr	r2, [sp, #0]
   bfdee:	f843 2b04 	str.w	r2, [r3], #4
   bfdf2:	9302      	str	r3, [sp, #8]
   bfdf4:	2300      	movs	r3, #0
   bfdf6:	9300      	str	r3, [sp, #0]
   bfdf8:	469b      	mov	fp, r3
   bfdfa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bfdfe:	f7ff fec5 	bl	bfb8c <__hexdig_fun>
   bfe02:	9b00      	ldr	r3, [sp, #0]
   bfe04:	f000 000f 	and.w	r0, r0, #15
   bfe08:	fa00 f00b 	lsl.w	r0, r0, fp
   bfe0c:	4303      	orrs	r3, r0
   bfe0e:	9300      	str	r3, [sp, #0]
   bfe10:	f10b 0b04 	add.w	fp, fp, #4
   bfe14:	9b03      	ldr	r3, [sp, #12]
   bfe16:	e00d      	b.n	bfe34 <__gethex+0x27c>
   bfe18:	9b03      	ldr	r3, [sp, #12]
   bfe1a:	9a06      	ldr	r2, [sp, #24]
   bfe1c:	4413      	add	r3, r2
   bfe1e:	42bb      	cmp	r3, r7
   bfe20:	d3e0      	bcc.n	bfde4 <__gethex+0x22c>
   bfe22:	4618      	mov	r0, r3
   bfe24:	9901      	ldr	r1, [sp, #4]
   bfe26:	9307      	str	r3, [sp, #28]
   bfe28:	4652      	mov	r2, sl
   bfe2a:	f7fe ff0c 	bl	bec46 <strncmp>
   bfe2e:	9b07      	ldr	r3, [sp, #28]
   bfe30:	2800      	cmp	r0, #0
   bfe32:	d1d7      	bne.n	bfde4 <__gethex+0x22c>
   bfe34:	461e      	mov	r6, r3
   bfe36:	e78b      	b.n	bfd50 <__gethex+0x198>
   bfe38:	f04f 0a03 	mov.w	sl, #3
   bfe3c:	e7b8      	b.n	bfdb0 <__gethex+0x1f8>
   bfe3e:	da0a      	bge.n	bfe56 <__gethex+0x29e>
   bfe40:	1a37      	subs	r7, r6, r0
   bfe42:	4621      	mov	r1, r4
   bfe44:	ee18 0a10 	vmov	r0, s16
   bfe48:	463a      	mov	r2, r7
   bfe4a:	f000 fc2f 	bl	c06ac <__lshift>
   bfe4e:	1bed      	subs	r5, r5, r7
   bfe50:	4604      	mov	r4, r0
   bfe52:	f100 0914 	add.w	r9, r0, #20
   bfe56:	f04f 0a00 	mov.w	sl, #0
   bfe5a:	e7ae      	b.n	bfdba <__gethex+0x202>
   bfe5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bfe60:	42a8      	cmp	r0, r5
   bfe62:	dd72      	ble.n	bff4a <__gethex+0x392>
   bfe64:	1b45      	subs	r5, r0, r5
   bfe66:	42ae      	cmp	r6, r5
   bfe68:	dc36      	bgt.n	bfed8 <__gethex+0x320>
   bfe6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfe6e:	2b02      	cmp	r3, #2
   bfe70:	d02a      	beq.n	bfec8 <__gethex+0x310>
   bfe72:	2b03      	cmp	r3, #3
   bfe74:	d02c      	beq.n	bfed0 <__gethex+0x318>
   bfe76:	2b01      	cmp	r3, #1
   bfe78:	d11c      	bne.n	bfeb4 <__gethex+0x2fc>
   bfe7a:	42ae      	cmp	r6, r5
   bfe7c:	d11a      	bne.n	bfeb4 <__gethex+0x2fc>
   bfe7e:	2e01      	cmp	r6, #1
   bfe80:	d112      	bne.n	bfea8 <__gethex+0x2f0>
   bfe82:	9a04      	ldr	r2, [sp, #16]
   bfe84:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bfe88:	6013      	str	r3, [r2, #0]
   bfe8a:	2301      	movs	r3, #1
   bfe8c:	6123      	str	r3, [r4, #16]
   bfe8e:	f8c9 3000 	str.w	r3, [r9]
   bfe92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfe94:	2762      	movs	r7, #98	; 0x62
   bfe96:	601c      	str	r4, [r3, #0]
   bfe98:	e723      	b.n	bfce2 <__gethex+0x12a>
   bfe9a:	bf00      	nop
   bfe9c:	000c246c 	.word	0x000c246c
   bfea0:	000c23f9 	.word	0x000c23f9
   bfea4:	000c240a 	.word	0x000c240a
   bfea8:	1e71      	subs	r1, r6, #1
   bfeaa:	4620      	mov	r0, r4
   bfeac:	f000 fe42 	bl	c0b34 <__any_on>
   bfeb0:	2800      	cmp	r0, #0
   bfeb2:	d1e6      	bne.n	bfe82 <__gethex+0x2ca>
   bfeb4:	ee18 0a10 	vmov	r0, s16
   bfeb8:	4621      	mov	r1, r4
   bfeba:	f000 f9db 	bl	c0274 <_Bfree>
   bfebe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfec0:	2300      	movs	r3, #0
   bfec2:	6013      	str	r3, [r2, #0]
   bfec4:	2750      	movs	r7, #80	; 0x50
   bfec6:	e70c      	b.n	bfce2 <__gethex+0x12a>
   bfec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfeca:	2b00      	cmp	r3, #0
   bfecc:	d1f2      	bne.n	bfeb4 <__gethex+0x2fc>
   bfece:	e7d8      	b.n	bfe82 <__gethex+0x2ca>
   bfed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfed2:	2b00      	cmp	r3, #0
   bfed4:	d1d5      	bne.n	bfe82 <__gethex+0x2ca>
   bfed6:	e7ed      	b.n	bfeb4 <__gethex+0x2fc>
   bfed8:	1e6f      	subs	r7, r5, #1
   bfeda:	f1ba 0f00 	cmp.w	sl, #0
   bfede:	d131      	bne.n	bff44 <__gethex+0x38c>
   bfee0:	b127      	cbz	r7, bfeec <__gethex+0x334>
   bfee2:	4639      	mov	r1, r7
   bfee4:	4620      	mov	r0, r4
   bfee6:	f000 fe25 	bl	c0b34 <__any_on>
   bfeea:	4682      	mov	sl, r0
   bfeec:	117b      	asrs	r3, r7, #5
   bfeee:	2101      	movs	r1, #1
   bfef0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bfef4:	f007 071f 	and.w	r7, r7, #31
   bfef8:	fa01 f707 	lsl.w	r7, r1, r7
   bfefc:	421f      	tst	r7, r3
   bfefe:	4629      	mov	r1, r5
   bff00:	4620      	mov	r0, r4
   bff02:	bf18      	it	ne
   bff04:	f04a 0a02 	orrne.w	sl, sl, #2
   bff08:	1b76      	subs	r6, r6, r5
   bff0a:	f7ff fded 	bl	bfae8 <rshift>
   bff0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bff12:	2702      	movs	r7, #2
   bff14:	f1ba 0f00 	cmp.w	sl, #0
   bff18:	d048      	beq.n	bffac <__gethex+0x3f4>
   bff1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bff1e:	2b02      	cmp	r3, #2
   bff20:	d015      	beq.n	bff4e <__gethex+0x396>
   bff22:	2b03      	cmp	r3, #3
   bff24:	d017      	beq.n	bff56 <__gethex+0x39e>
   bff26:	2b01      	cmp	r3, #1
   bff28:	d109      	bne.n	bff3e <__gethex+0x386>
   bff2a:	f01a 0f02 	tst.w	sl, #2
   bff2e:	d006      	beq.n	bff3e <__gethex+0x386>
   bff30:	f8d9 0000 	ldr.w	r0, [r9]
   bff34:	ea4a 0a00 	orr.w	sl, sl, r0
   bff38:	f01a 0f01 	tst.w	sl, #1
   bff3c:	d10e      	bne.n	bff5c <__gethex+0x3a4>
   bff3e:	f047 0710 	orr.w	r7, r7, #16
   bff42:	e033      	b.n	bffac <__gethex+0x3f4>
   bff44:	f04f 0a01 	mov.w	sl, #1
   bff48:	e7d0      	b.n	bfeec <__gethex+0x334>
   bff4a:	2701      	movs	r7, #1
   bff4c:	e7e2      	b.n	bff14 <__gethex+0x35c>
   bff4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bff50:	f1c3 0301 	rsb	r3, r3, #1
   bff54:	9315      	str	r3, [sp, #84]	; 0x54
   bff56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bff58:	2b00      	cmp	r3, #0
   bff5a:	d0f0      	beq.n	bff3e <__gethex+0x386>
   bff5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bff60:	f104 0314 	add.w	r3, r4, #20
   bff64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bff68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bff6c:	f04f 0c00 	mov.w	ip, #0
   bff70:	4618      	mov	r0, r3
   bff72:	f853 2b04 	ldr.w	r2, [r3], #4
   bff76:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bff7a:	d01c      	beq.n	bffb6 <__gethex+0x3fe>
   bff7c:	3201      	adds	r2, #1
   bff7e:	6002      	str	r2, [r0, #0]
   bff80:	2f02      	cmp	r7, #2
   bff82:	f104 0314 	add.w	r3, r4, #20
   bff86:	d13f      	bne.n	c0008 <__gethex+0x450>
   bff88:	f8d8 2000 	ldr.w	r2, [r8]
   bff8c:	3a01      	subs	r2, #1
   bff8e:	42b2      	cmp	r2, r6
   bff90:	d10a      	bne.n	bffa8 <__gethex+0x3f0>
   bff92:	1171      	asrs	r1, r6, #5
   bff94:	2201      	movs	r2, #1
   bff96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bff9a:	f006 061f 	and.w	r6, r6, #31
   bff9e:	fa02 f606 	lsl.w	r6, r2, r6
   bffa2:	421e      	tst	r6, r3
   bffa4:	bf18      	it	ne
   bffa6:	4617      	movne	r7, r2
   bffa8:	f047 0720 	orr.w	r7, r7, #32
   bffac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bffae:	601c      	str	r4, [r3, #0]
   bffb0:	9b04      	ldr	r3, [sp, #16]
   bffb2:	601d      	str	r5, [r3, #0]
   bffb4:	e695      	b.n	bfce2 <__gethex+0x12a>
   bffb6:	4299      	cmp	r1, r3
   bffb8:	f843 cc04 	str.w	ip, [r3, #-4]
   bffbc:	d8d8      	bhi.n	bff70 <__gethex+0x3b8>
   bffbe:	68a3      	ldr	r3, [r4, #8]
   bffc0:	459b      	cmp	fp, r3
   bffc2:	db19      	blt.n	bfff8 <__gethex+0x440>
   bffc4:	6861      	ldr	r1, [r4, #4]
   bffc6:	ee18 0a10 	vmov	r0, s16
   bffca:	3101      	adds	r1, #1
   bffcc:	f000 f912 	bl	c01f4 <_Balloc>
   bffd0:	4681      	mov	r9, r0
   bffd2:	b918      	cbnz	r0, bffdc <__gethex+0x424>
   bffd4:	4b1a      	ldr	r3, [pc, #104]	; (c0040 <__gethex+0x488>)
   bffd6:	4602      	mov	r2, r0
   bffd8:	2184      	movs	r1, #132	; 0x84
   bffda:	e6a8      	b.n	bfd2e <__gethex+0x176>
   bffdc:	6922      	ldr	r2, [r4, #16]
   bffde:	3202      	adds	r2, #2
   bffe0:	f104 010c 	add.w	r1, r4, #12
   bffe4:	0092      	lsls	r2, r2, #2
   bffe6:	300c      	adds	r0, #12
   bffe8:	f7fe fd49 	bl	bea7e <memcpy>
   bffec:	4621      	mov	r1, r4
   bffee:	ee18 0a10 	vmov	r0, s16
   bfff2:	f000 f93f 	bl	c0274 <_Bfree>
   bfff6:	464c      	mov	r4, r9
   bfff8:	6923      	ldr	r3, [r4, #16]
   bfffa:	1c5a      	adds	r2, r3, #1
   bfffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c0000:	6122      	str	r2, [r4, #16]
   c0002:	2201      	movs	r2, #1
   c0004:	615a      	str	r2, [r3, #20]
   c0006:	e7bb      	b.n	bff80 <__gethex+0x3c8>
   c0008:	6922      	ldr	r2, [r4, #16]
   c000a:	455a      	cmp	r2, fp
   c000c:	dd0b      	ble.n	c0026 <__gethex+0x46e>
   c000e:	2101      	movs	r1, #1
   c0010:	4620      	mov	r0, r4
   c0012:	f7ff fd69 	bl	bfae8 <rshift>
   c0016:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c001a:	3501      	adds	r5, #1
   c001c:	42ab      	cmp	r3, r5
   c001e:	f6ff aed0 	blt.w	bfdc2 <__gethex+0x20a>
   c0022:	2701      	movs	r7, #1
   c0024:	e7c0      	b.n	bffa8 <__gethex+0x3f0>
   c0026:	f016 061f 	ands.w	r6, r6, #31
   c002a:	d0fa      	beq.n	c0022 <__gethex+0x46a>
   c002c:	4453      	add	r3, sl
   c002e:	f1c6 0620 	rsb	r6, r6, #32
   c0032:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c0036:	f000 f9cf 	bl	c03d8 <__hi0bits>
   c003a:	42b0      	cmp	r0, r6
   c003c:	dbe7      	blt.n	c000e <__gethex+0x456>
   c003e:	e7f0      	b.n	c0022 <__gethex+0x46a>
   c0040:	000c23f9 	.word	0x000c23f9

000c0044 <L_shift>:
   c0044:	f1c2 0208 	rsb	r2, r2, #8
   c0048:	0092      	lsls	r2, r2, #2
   c004a:	b570      	push	{r4, r5, r6, lr}
   c004c:	f1c2 0620 	rsb	r6, r2, #32
   c0050:	6843      	ldr	r3, [r0, #4]
   c0052:	6804      	ldr	r4, [r0, #0]
   c0054:	fa03 f506 	lsl.w	r5, r3, r6
   c0058:	432c      	orrs	r4, r5
   c005a:	40d3      	lsrs	r3, r2
   c005c:	6004      	str	r4, [r0, #0]
   c005e:	f840 3f04 	str.w	r3, [r0, #4]!
   c0062:	4288      	cmp	r0, r1
   c0064:	d3f4      	bcc.n	c0050 <L_shift+0xc>
   c0066:	bd70      	pop	{r4, r5, r6, pc}

000c0068 <__match>:
   c0068:	b530      	push	{r4, r5, lr}
   c006a:	6803      	ldr	r3, [r0, #0]
   c006c:	3301      	adds	r3, #1
   c006e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c0072:	b914      	cbnz	r4, c007a <__match+0x12>
   c0074:	6003      	str	r3, [r0, #0]
   c0076:	2001      	movs	r0, #1
   c0078:	bd30      	pop	{r4, r5, pc}
   c007a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c007e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c0082:	2d19      	cmp	r5, #25
   c0084:	bf98      	it	ls
   c0086:	3220      	addls	r2, #32
   c0088:	42a2      	cmp	r2, r4
   c008a:	d0f0      	beq.n	c006e <__match+0x6>
   c008c:	2000      	movs	r0, #0
   c008e:	e7f3      	b.n	c0078 <__match+0x10>

000c0090 <__hexnan>:
   c0090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0094:	680b      	ldr	r3, [r1, #0]
   c0096:	115e      	asrs	r6, r3, #5
   c0098:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c009c:	f013 031f 	ands.w	r3, r3, #31
   c00a0:	b087      	sub	sp, #28
   c00a2:	bf18      	it	ne
   c00a4:	3604      	addne	r6, #4
   c00a6:	2500      	movs	r5, #0
   c00a8:	1f37      	subs	r7, r6, #4
   c00aa:	4690      	mov	r8, r2
   c00ac:	6802      	ldr	r2, [r0, #0]
   c00ae:	9301      	str	r3, [sp, #4]
   c00b0:	4682      	mov	sl, r0
   c00b2:	f846 5c04 	str.w	r5, [r6, #-4]
   c00b6:	46b9      	mov	r9, r7
   c00b8:	463c      	mov	r4, r7
   c00ba:	9502      	str	r5, [sp, #8]
   c00bc:	46ab      	mov	fp, r5
   c00be:	7851      	ldrb	r1, [r2, #1]
   c00c0:	1c53      	adds	r3, r2, #1
   c00c2:	9303      	str	r3, [sp, #12]
   c00c4:	b341      	cbz	r1, c0118 <__hexnan+0x88>
   c00c6:	4608      	mov	r0, r1
   c00c8:	9205      	str	r2, [sp, #20]
   c00ca:	9104      	str	r1, [sp, #16]
   c00cc:	f7ff fd5e 	bl	bfb8c <__hexdig_fun>
   c00d0:	2800      	cmp	r0, #0
   c00d2:	d14f      	bne.n	c0174 <__hexnan+0xe4>
   c00d4:	9904      	ldr	r1, [sp, #16]
   c00d6:	9a05      	ldr	r2, [sp, #20]
   c00d8:	2920      	cmp	r1, #32
   c00da:	d818      	bhi.n	c010e <__hexnan+0x7e>
   c00dc:	9b02      	ldr	r3, [sp, #8]
   c00de:	459b      	cmp	fp, r3
   c00e0:	dd13      	ble.n	c010a <__hexnan+0x7a>
   c00e2:	454c      	cmp	r4, r9
   c00e4:	d206      	bcs.n	c00f4 <__hexnan+0x64>
   c00e6:	2d07      	cmp	r5, #7
   c00e8:	dc04      	bgt.n	c00f4 <__hexnan+0x64>
   c00ea:	462a      	mov	r2, r5
   c00ec:	4649      	mov	r1, r9
   c00ee:	4620      	mov	r0, r4
   c00f0:	f7ff ffa8 	bl	c0044 <L_shift>
   c00f4:	4544      	cmp	r4, r8
   c00f6:	d950      	bls.n	c019a <__hexnan+0x10a>
   c00f8:	2300      	movs	r3, #0
   c00fa:	f1a4 0904 	sub.w	r9, r4, #4
   c00fe:	f844 3c04 	str.w	r3, [r4, #-4]
   c0102:	f8cd b008 	str.w	fp, [sp, #8]
   c0106:	464c      	mov	r4, r9
   c0108:	461d      	mov	r5, r3
   c010a:	9a03      	ldr	r2, [sp, #12]
   c010c:	e7d7      	b.n	c00be <__hexnan+0x2e>
   c010e:	2929      	cmp	r1, #41	; 0x29
   c0110:	d156      	bne.n	c01c0 <__hexnan+0x130>
   c0112:	3202      	adds	r2, #2
   c0114:	f8ca 2000 	str.w	r2, [sl]
   c0118:	f1bb 0f00 	cmp.w	fp, #0
   c011c:	d050      	beq.n	c01c0 <__hexnan+0x130>
   c011e:	454c      	cmp	r4, r9
   c0120:	d206      	bcs.n	c0130 <__hexnan+0xa0>
   c0122:	2d07      	cmp	r5, #7
   c0124:	dc04      	bgt.n	c0130 <__hexnan+0xa0>
   c0126:	462a      	mov	r2, r5
   c0128:	4649      	mov	r1, r9
   c012a:	4620      	mov	r0, r4
   c012c:	f7ff ff8a 	bl	c0044 <L_shift>
   c0130:	4544      	cmp	r4, r8
   c0132:	d934      	bls.n	c019e <__hexnan+0x10e>
   c0134:	f1a8 0204 	sub.w	r2, r8, #4
   c0138:	4623      	mov	r3, r4
   c013a:	f853 1b04 	ldr.w	r1, [r3], #4
   c013e:	f842 1f04 	str.w	r1, [r2, #4]!
   c0142:	429f      	cmp	r7, r3
   c0144:	d2f9      	bcs.n	c013a <__hexnan+0xaa>
   c0146:	1b3b      	subs	r3, r7, r4
   c0148:	f023 0303 	bic.w	r3, r3, #3
   c014c:	3304      	adds	r3, #4
   c014e:	3401      	adds	r4, #1
   c0150:	3e03      	subs	r6, #3
   c0152:	42b4      	cmp	r4, r6
   c0154:	bf88      	it	hi
   c0156:	2304      	movhi	r3, #4
   c0158:	4443      	add	r3, r8
   c015a:	2200      	movs	r2, #0
   c015c:	f843 2b04 	str.w	r2, [r3], #4
   c0160:	429f      	cmp	r7, r3
   c0162:	d2fb      	bcs.n	c015c <__hexnan+0xcc>
   c0164:	683b      	ldr	r3, [r7, #0]
   c0166:	b91b      	cbnz	r3, c0170 <__hexnan+0xe0>
   c0168:	4547      	cmp	r7, r8
   c016a:	d127      	bne.n	c01bc <__hexnan+0x12c>
   c016c:	2301      	movs	r3, #1
   c016e:	603b      	str	r3, [r7, #0]
   c0170:	2005      	movs	r0, #5
   c0172:	e026      	b.n	c01c2 <__hexnan+0x132>
   c0174:	3501      	adds	r5, #1
   c0176:	2d08      	cmp	r5, #8
   c0178:	f10b 0b01 	add.w	fp, fp, #1
   c017c:	dd06      	ble.n	c018c <__hexnan+0xfc>
   c017e:	4544      	cmp	r4, r8
   c0180:	d9c3      	bls.n	c010a <__hexnan+0x7a>
   c0182:	2300      	movs	r3, #0
   c0184:	f844 3c04 	str.w	r3, [r4, #-4]
   c0188:	2501      	movs	r5, #1
   c018a:	3c04      	subs	r4, #4
   c018c:	6822      	ldr	r2, [r4, #0]
   c018e:	f000 000f 	and.w	r0, r0, #15
   c0192:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c0196:	6022      	str	r2, [r4, #0]
   c0198:	e7b7      	b.n	c010a <__hexnan+0x7a>
   c019a:	2508      	movs	r5, #8
   c019c:	e7b5      	b.n	c010a <__hexnan+0x7a>
   c019e:	9b01      	ldr	r3, [sp, #4]
   c01a0:	2b00      	cmp	r3, #0
   c01a2:	d0df      	beq.n	c0164 <__hexnan+0xd4>
   c01a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c01a8:	f1c3 0320 	rsb	r3, r3, #32
   c01ac:	fa22 f303 	lsr.w	r3, r2, r3
   c01b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c01b4:	401a      	ands	r2, r3
   c01b6:	f846 2c04 	str.w	r2, [r6, #-4]
   c01ba:	e7d3      	b.n	c0164 <__hexnan+0xd4>
   c01bc:	3f04      	subs	r7, #4
   c01be:	e7d1      	b.n	c0164 <__hexnan+0xd4>
   c01c0:	2004      	movs	r0, #4
   c01c2:	b007      	add	sp, #28
   c01c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c01c8 <__retarget_lock_acquire_recursive>:
   c01c8:	4770      	bx	lr

000c01ca <__retarget_lock_release>:
   c01ca:	4770      	bx	lr

000c01cc <__retarget_lock_release_recursive>:
   c01cc:	4770      	bx	lr

000c01ce <__ascii_mbtowc>:
   c01ce:	b082      	sub	sp, #8
   c01d0:	b901      	cbnz	r1, c01d4 <__ascii_mbtowc+0x6>
   c01d2:	a901      	add	r1, sp, #4
   c01d4:	b142      	cbz	r2, c01e8 <__ascii_mbtowc+0x1a>
   c01d6:	b14b      	cbz	r3, c01ec <__ascii_mbtowc+0x1e>
   c01d8:	7813      	ldrb	r3, [r2, #0]
   c01da:	600b      	str	r3, [r1, #0]
   c01dc:	7812      	ldrb	r2, [r2, #0]
   c01de:	1e10      	subs	r0, r2, #0
   c01e0:	bf18      	it	ne
   c01e2:	2001      	movne	r0, #1
   c01e4:	b002      	add	sp, #8
   c01e6:	4770      	bx	lr
   c01e8:	4610      	mov	r0, r2
   c01ea:	e7fb      	b.n	c01e4 <__ascii_mbtowc+0x16>
   c01ec:	f06f 0001 	mvn.w	r0, #1
   c01f0:	e7f8      	b.n	c01e4 <__ascii_mbtowc+0x16>
	...

000c01f4 <_Balloc>:
   c01f4:	b570      	push	{r4, r5, r6, lr}
   c01f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c01f8:	4604      	mov	r4, r0
   c01fa:	460d      	mov	r5, r1
   c01fc:	b976      	cbnz	r6, c021c <_Balloc+0x28>
   c01fe:	2010      	movs	r0, #16
   c0200:	f7f9 fec6 	bl	b9f90 <malloc>
   c0204:	4602      	mov	r2, r0
   c0206:	6260      	str	r0, [r4, #36]	; 0x24
   c0208:	b920      	cbnz	r0, c0214 <_Balloc+0x20>
   c020a:	4b18      	ldr	r3, [pc, #96]	; (c026c <_Balloc+0x78>)
   c020c:	4818      	ldr	r0, [pc, #96]	; (c0270 <_Balloc+0x7c>)
   c020e:	2166      	movs	r1, #102	; 0x66
   c0210:	f7f9 ff0e 	bl	ba030 <__assert_func>
   c0214:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c0218:	6006      	str	r6, [r0, #0]
   c021a:	60c6      	str	r6, [r0, #12]
   c021c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c021e:	68f3      	ldr	r3, [r6, #12]
   c0220:	b183      	cbz	r3, c0244 <_Balloc+0x50>
   c0222:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c0224:	68db      	ldr	r3, [r3, #12]
   c0226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c022a:	b9b8      	cbnz	r0, c025c <_Balloc+0x68>
   c022c:	2101      	movs	r1, #1
   c022e:	fa01 f605 	lsl.w	r6, r1, r5
   c0232:	1d72      	adds	r2, r6, #5
   c0234:	0092      	lsls	r2, r2, #2
   c0236:	4620      	mov	r0, r4
   c0238:	f000 fc9d 	bl	c0b76 <_calloc_r>
   c023c:	b160      	cbz	r0, c0258 <_Balloc+0x64>
   c023e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c0242:	e00e      	b.n	c0262 <_Balloc+0x6e>
   c0244:	2221      	movs	r2, #33	; 0x21
   c0246:	2104      	movs	r1, #4
   c0248:	4620      	mov	r0, r4
   c024a:	f000 fc94 	bl	c0b76 <_calloc_r>
   c024e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c0250:	60f0      	str	r0, [r6, #12]
   c0252:	68db      	ldr	r3, [r3, #12]
   c0254:	2b00      	cmp	r3, #0
   c0256:	d1e4      	bne.n	c0222 <_Balloc+0x2e>
   c0258:	2000      	movs	r0, #0
   c025a:	bd70      	pop	{r4, r5, r6, pc}
   c025c:	6802      	ldr	r2, [r0, #0]
   c025e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c0262:	2300      	movs	r3, #0
   c0264:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c0268:	e7f7      	b.n	c025a <_Balloc+0x66>
   c026a:	bf00      	nop
   c026c:	000c2229 	.word	0x000c2229
   c0270:	000c2480 	.word	0x000c2480

000c0274 <_Bfree>:
   c0274:	b570      	push	{r4, r5, r6, lr}
   c0276:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c0278:	4605      	mov	r5, r0
   c027a:	460c      	mov	r4, r1
   c027c:	b976      	cbnz	r6, c029c <_Bfree+0x28>
   c027e:	2010      	movs	r0, #16
   c0280:	f7f9 fe86 	bl	b9f90 <malloc>
   c0284:	4602      	mov	r2, r0
   c0286:	6268      	str	r0, [r5, #36]	; 0x24
   c0288:	b920      	cbnz	r0, c0294 <_Bfree+0x20>
   c028a:	4b09      	ldr	r3, [pc, #36]	; (c02b0 <_Bfree+0x3c>)
   c028c:	4809      	ldr	r0, [pc, #36]	; (c02b4 <_Bfree+0x40>)
   c028e:	218a      	movs	r1, #138	; 0x8a
   c0290:	f7f9 fece 	bl	ba030 <__assert_func>
   c0294:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c0298:	6006      	str	r6, [r0, #0]
   c029a:	60c6      	str	r6, [r0, #12]
   c029c:	b13c      	cbz	r4, c02ae <_Bfree+0x3a>
   c029e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c02a0:	6862      	ldr	r2, [r4, #4]
   c02a2:	68db      	ldr	r3, [r3, #12]
   c02a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c02a8:	6021      	str	r1, [r4, #0]
   c02aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c02ae:	bd70      	pop	{r4, r5, r6, pc}
   c02b0:	000c2229 	.word	0x000c2229
   c02b4:	000c2480 	.word	0x000c2480

000c02b8 <__multadd>:
   c02b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c02bc:	690d      	ldr	r5, [r1, #16]
   c02be:	4607      	mov	r7, r0
   c02c0:	460c      	mov	r4, r1
   c02c2:	461e      	mov	r6, r3
   c02c4:	f101 0c14 	add.w	ip, r1, #20
   c02c8:	2000      	movs	r0, #0
   c02ca:	f8dc 3000 	ldr.w	r3, [ip]
   c02ce:	b299      	uxth	r1, r3
   c02d0:	fb02 6101 	mla	r1, r2, r1, r6
   c02d4:	0c1e      	lsrs	r6, r3, #16
   c02d6:	0c0b      	lsrs	r3, r1, #16
   c02d8:	fb02 3306 	mla	r3, r2, r6, r3
   c02dc:	b289      	uxth	r1, r1
   c02de:	3001      	adds	r0, #1
   c02e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c02e4:	4285      	cmp	r5, r0
   c02e6:	f84c 1b04 	str.w	r1, [ip], #4
   c02ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c02ee:	dcec      	bgt.n	c02ca <__multadd+0x12>
   c02f0:	b30e      	cbz	r6, c0336 <__multadd+0x7e>
   c02f2:	68a3      	ldr	r3, [r4, #8]
   c02f4:	42ab      	cmp	r3, r5
   c02f6:	dc19      	bgt.n	c032c <__multadd+0x74>
   c02f8:	6861      	ldr	r1, [r4, #4]
   c02fa:	4638      	mov	r0, r7
   c02fc:	3101      	adds	r1, #1
   c02fe:	f7ff ff79 	bl	c01f4 <_Balloc>
   c0302:	4680      	mov	r8, r0
   c0304:	b928      	cbnz	r0, c0312 <__multadd+0x5a>
   c0306:	4602      	mov	r2, r0
   c0308:	4b0c      	ldr	r3, [pc, #48]	; (c033c <__multadd+0x84>)
   c030a:	480d      	ldr	r0, [pc, #52]	; (c0340 <__multadd+0x88>)
   c030c:	21b5      	movs	r1, #181	; 0xb5
   c030e:	f7f9 fe8f 	bl	ba030 <__assert_func>
   c0312:	6922      	ldr	r2, [r4, #16]
   c0314:	3202      	adds	r2, #2
   c0316:	f104 010c 	add.w	r1, r4, #12
   c031a:	0092      	lsls	r2, r2, #2
   c031c:	300c      	adds	r0, #12
   c031e:	f7fe fbae 	bl	bea7e <memcpy>
   c0322:	4621      	mov	r1, r4
   c0324:	4638      	mov	r0, r7
   c0326:	f7ff ffa5 	bl	c0274 <_Bfree>
   c032a:	4644      	mov	r4, r8
   c032c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c0330:	3501      	adds	r5, #1
   c0332:	615e      	str	r6, [r3, #20]
   c0334:	6125      	str	r5, [r4, #16]
   c0336:	4620      	mov	r0, r4
   c0338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c033c:	000c23f9 	.word	0x000c23f9
   c0340:	000c2480 	.word	0x000c2480

000c0344 <__s2b>:
   c0344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0348:	460c      	mov	r4, r1
   c034a:	4615      	mov	r5, r2
   c034c:	461f      	mov	r7, r3
   c034e:	2209      	movs	r2, #9
   c0350:	3308      	adds	r3, #8
   c0352:	4606      	mov	r6, r0
   c0354:	fb93 f3f2 	sdiv	r3, r3, r2
   c0358:	2100      	movs	r1, #0
   c035a:	2201      	movs	r2, #1
   c035c:	429a      	cmp	r2, r3
   c035e:	db09      	blt.n	c0374 <__s2b+0x30>
   c0360:	4630      	mov	r0, r6
   c0362:	f7ff ff47 	bl	c01f4 <_Balloc>
   c0366:	b940      	cbnz	r0, c037a <__s2b+0x36>
   c0368:	4602      	mov	r2, r0
   c036a:	4b19      	ldr	r3, [pc, #100]	; (c03d0 <__s2b+0x8c>)
   c036c:	4819      	ldr	r0, [pc, #100]	; (c03d4 <__s2b+0x90>)
   c036e:	21ce      	movs	r1, #206	; 0xce
   c0370:	f7f9 fe5e 	bl	ba030 <__assert_func>
   c0374:	0052      	lsls	r2, r2, #1
   c0376:	3101      	adds	r1, #1
   c0378:	e7f0      	b.n	c035c <__s2b+0x18>
   c037a:	9b08      	ldr	r3, [sp, #32]
   c037c:	6143      	str	r3, [r0, #20]
   c037e:	2d09      	cmp	r5, #9
   c0380:	f04f 0301 	mov.w	r3, #1
   c0384:	6103      	str	r3, [r0, #16]
   c0386:	dd16      	ble.n	c03b6 <__s2b+0x72>
   c0388:	f104 0909 	add.w	r9, r4, #9
   c038c:	46c8      	mov	r8, r9
   c038e:	442c      	add	r4, r5
   c0390:	f818 3b01 	ldrb.w	r3, [r8], #1
   c0394:	4601      	mov	r1, r0
   c0396:	3b30      	subs	r3, #48	; 0x30
   c0398:	220a      	movs	r2, #10
   c039a:	4630      	mov	r0, r6
   c039c:	f7ff ff8c 	bl	c02b8 <__multadd>
   c03a0:	45a0      	cmp	r8, r4
   c03a2:	d1f5      	bne.n	c0390 <__s2b+0x4c>
   c03a4:	f1a5 0408 	sub.w	r4, r5, #8
   c03a8:	444c      	add	r4, r9
   c03aa:	1b2d      	subs	r5, r5, r4
   c03ac:	1963      	adds	r3, r4, r5
   c03ae:	42bb      	cmp	r3, r7
   c03b0:	db04      	blt.n	c03bc <__s2b+0x78>
   c03b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c03b6:	340a      	adds	r4, #10
   c03b8:	2509      	movs	r5, #9
   c03ba:	e7f6      	b.n	c03aa <__s2b+0x66>
   c03bc:	f814 3b01 	ldrb.w	r3, [r4], #1
   c03c0:	4601      	mov	r1, r0
   c03c2:	3b30      	subs	r3, #48	; 0x30
   c03c4:	220a      	movs	r2, #10
   c03c6:	4630      	mov	r0, r6
   c03c8:	f7ff ff76 	bl	c02b8 <__multadd>
   c03cc:	e7ee      	b.n	c03ac <__s2b+0x68>
   c03ce:	bf00      	nop
   c03d0:	000c23f9 	.word	0x000c23f9
   c03d4:	000c2480 	.word	0x000c2480

000c03d8 <__hi0bits>:
   c03d8:	0c03      	lsrs	r3, r0, #16
   c03da:	041b      	lsls	r3, r3, #16
   c03dc:	b9d3      	cbnz	r3, c0414 <__hi0bits+0x3c>
   c03de:	0400      	lsls	r0, r0, #16
   c03e0:	2310      	movs	r3, #16
   c03e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c03e6:	bf04      	itt	eq
   c03e8:	0200      	lsleq	r0, r0, #8
   c03ea:	3308      	addeq	r3, #8
   c03ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c03f0:	bf04      	itt	eq
   c03f2:	0100      	lsleq	r0, r0, #4
   c03f4:	3304      	addeq	r3, #4
   c03f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c03fa:	bf04      	itt	eq
   c03fc:	0080      	lsleq	r0, r0, #2
   c03fe:	3302      	addeq	r3, #2
   c0400:	2800      	cmp	r0, #0
   c0402:	db05      	blt.n	c0410 <__hi0bits+0x38>
   c0404:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c0408:	f103 0301 	add.w	r3, r3, #1
   c040c:	bf08      	it	eq
   c040e:	2320      	moveq	r3, #32
   c0410:	4618      	mov	r0, r3
   c0412:	4770      	bx	lr
   c0414:	2300      	movs	r3, #0
   c0416:	e7e4      	b.n	c03e2 <__hi0bits+0xa>

000c0418 <__lo0bits>:
   c0418:	6803      	ldr	r3, [r0, #0]
   c041a:	f013 0207 	ands.w	r2, r3, #7
   c041e:	4601      	mov	r1, r0
   c0420:	d00b      	beq.n	c043a <__lo0bits+0x22>
   c0422:	07da      	lsls	r2, r3, #31
   c0424:	d423      	bmi.n	c046e <__lo0bits+0x56>
   c0426:	0798      	lsls	r0, r3, #30
   c0428:	bf49      	itett	mi
   c042a:	085b      	lsrmi	r3, r3, #1
   c042c:	089b      	lsrpl	r3, r3, #2
   c042e:	2001      	movmi	r0, #1
   c0430:	600b      	strmi	r3, [r1, #0]
   c0432:	bf5c      	itt	pl
   c0434:	600b      	strpl	r3, [r1, #0]
   c0436:	2002      	movpl	r0, #2
   c0438:	4770      	bx	lr
   c043a:	b298      	uxth	r0, r3
   c043c:	b9a8      	cbnz	r0, c046a <__lo0bits+0x52>
   c043e:	0c1b      	lsrs	r3, r3, #16
   c0440:	2010      	movs	r0, #16
   c0442:	b2da      	uxtb	r2, r3
   c0444:	b90a      	cbnz	r2, c044a <__lo0bits+0x32>
   c0446:	3008      	adds	r0, #8
   c0448:	0a1b      	lsrs	r3, r3, #8
   c044a:	071a      	lsls	r2, r3, #28
   c044c:	bf04      	itt	eq
   c044e:	091b      	lsreq	r3, r3, #4
   c0450:	3004      	addeq	r0, #4
   c0452:	079a      	lsls	r2, r3, #30
   c0454:	bf04      	itt	eq
   c0456:	089b      	lsreq	r3, r3, #2
   c0458:	3002      	addeq	r0, #2
   c045a:	07da      	lsls	r2, r3, #31
   c045c:	d403      	bmi.n	c0466 <__lo0bits+0x4e>
   c045e:	085b      	lsrs	r3, r3, #1
   c0460:	f100 0001 	add.w	r0, r0, #1
   c0464:	d005      	beq.n	c0472 <__lo0bits+0x5a>
   c0466:	600b      	str	r3, [r1, #0]
   c0468:	4770      	bx	lr
   c046a:	4610      	mov	r0, r2
   c046c:	e7e9      	b.n	c0442 <__lo0bits+0x2a>
   c046e:	2000      	movs	r0, #0
   c0470:	4770      	bx	lr
   c0472:	2020      	movs	r0, #32
   c0474:	4770      	bx	lr
	...

000c0478 <__i2b>:
   c0478:	b510      	push	{r4, lr}
   c047a:	460c      	mov	r4, r1
   c047c:	2101      	movs	r1, #1
   c047e:	f7ff feb9 	bl	c01f4 <_Balloc>
   c0482:	4602      	mov	r2, r0
   c0484:	b928      	cbnz	r0, c0492 <__i2b+0x1a>
   c0486:	4b05      	ldr	r3, [pc, #20]	; (c049c <__i2b+0x24>)
   c0488:	4805      	ldr	r0, [pc, #20]	; (c04a0 <__i2b+0x28>)
   c048a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c048e:	f7f9 fdcf 	bl	ba030 <__assert_func>
   c0492:	2301      	movs	r3, #1
   c0494:	6144      	str	r4, [r0, #20]
   c0496:	6103      	str	r3, [r0, #16]
   c0498:	bd10      	pop	{r4, pc}
   c049a:	bf00      	nop
   c049c:	000c23f9 	.word	0x000c23f9
   c04a0:	000c2480 	.word	0x000c2480

000c04a4 <__multiply>:
   c04a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c04a8:	4691      	mov	r9, r2
   c04aa:	690a      	ldr	r2, [r1, #16]
   c04ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c04b0:	429a      	cmp	r2, r3
   c04b2:	bfb8      	it	lt
   c04b4:	460b      	movlt	r3, r1
   c04b6:	460c      	mov	r4, r1
   c04b8:	bfbc      	itt	lt
   c04ba:	464c      	movlt	r4, r9
   c04bc:	4699      	movlt	r9, r3
   c04be:	6927      	ldr	r7, [r4, #16]
   c04c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c04c4:	68a3      	ldr	r3, [r4, #8]
   c04c6:	6861      	ldr	r1, [r4, #4]
   c04c8:	eb07 060a 	add.w	r6, r7, sl
   c04cc:	42b3      	cmp	r3, r6
   c04ce:	b085      	sub	sp, #20
   c04d0:	bfb8      	it	lt
   c04d2:	3101      	addlt	r1, #1
   c04d4:	f7ff fe8e 	bl	c01f4 <_Balloc>
   c04d8:	b930      	cbnz	r0, c04e8 <__multiply+0x44>
   c04da:	4602      	mov	r2, r0
   c04dc:	4b44      	ldr	r3, [pc, #272]	; (c05f0 <__multiply+0x14c>)
   c04de:	4845      	ldr	r0, [pc, #276]	; (c05f4 <__multiply+0x150>)
   c04e0:	f240 115d 	movw	r1, #349	; 0x15d
   c04e4:	f7f9 fda4 	bl	ba030 <__assert_func>
   c04e8:	f100 0514 	add.w	r5, r0, #20
   c04ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c04f0:	462b      	mov	r3, r5
   c04f2:	2200      	movs	r2, #0
   c04f4:	4543      	cmp	r3, r8
   c04f6:	d321      	bcc.n	c053c <__multiply+0x98>
   c04f8:	f104 0314 	add.w	r3, r4, #20
   c04fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c0500:	f109 0314 	add.w	r3, r9, #20
   c0504:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c0508:	9202      	str	r2, [sp, #8]
   c050a:	1b3a      	subs	r2, r7, r4
   c050c:	3a15      	subs	r2, #21
   c050e:	f022 0203 	bic.w	r2, r2, #3
   c0512:	3204      	adds	r2, #4
   c0514:	f104 0115 	add.w	r1, r4, #21
   c0518:	428f      	cmp	r7, r1
   c051a:	bf38      	it	cc
   c051c:	2204      	movcc	r2, #4
   c051e:	9201      	str	r2, [sp, #4]
   c0520:	9a02      	ldr	r2, [sp, #8]
   c0522:	9303      	str	r3, [sp, #12]
   c0524:	429a      	cmp	r2, r3
   c0526:	d80c      	bhi.n	c0542 <__multiply+0x9e>
   c0528:	2e00      	cmp	r6, #0
   c052a:	dd03      	ble.n	c0534 <__multiply+0x90>
   c052c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c0530:	2b00      	cmp	r3, #0
   c0532:	d05a      	beq.n	c05ea <__multiply+0x146>
   c0534:	6106      	str	r6, [r0, #16]
   c0536:	b005      	add	sp, #20
   c0538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c053c:	f843 2b04 	str.w	r2, [r3], #4
   c0540:	e7d8      	b.n	c04f4 <__multiply+0x50>
   c0542:	f8b3 a000 	ldrh.w	sl, [r3]
   c0546:	f1ba 0f00 	cmp.w	sl, #0
   c054a:	d024      	beq.n	c0596 <__multiply+0xf2>
   c054c:	f104 0e14 	add.w	lr, r4, #20
   c0550:	46a9      	mov	r9, r5
   c0552:	f04f 0c00 	mov.w	ip, #0
   c0556:	f85e 2b04 	ldr.w	r2, [lr], #4
   c055a:	f8d9 1000 	ldr.w	r1, [r9]
   c055e:	fa1f fb82 	uxth.w	fp, r2
   c0562:	b289      	uxth	r1, r1
   c0564:	fb0a 110b 	mla	r1, sl, fp, r1
   c0568:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c056c:	f8d9 2000 	ldr.w	r2, [r9]
   c0570:	4461      	add	r1, ip
   c0572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c0576:	fb0a c20b 	mla	r2, sl, fp, ip
   c057a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c057e:	b289      	uxth	r1, r1
   c0580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c0584:	4577      	cmp	r7, lr
   c0586:	f849 1b04 	str.w	r1, [r9], #4
   c058a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c058e:	d8e2      	bhi.n	c0556 <__multiply+0xb2>
   c0590:	9a01      	ldr	r2, [sp, #4]
   c0592:	f845 c002 	str.w	ip, [r5, r2]
   c0596:	9a03      	ldr	r2, [sp, #12]
   c0598:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c059c:	3304      	adds	r3, #4
   c059e:	f1b9 0f00 	cmp.w	r9, #0
   c05a2:	d020      	beq.n	c05e6 <__multiply+0x142>
   c05a4:	6829      	ldr	r1, [r5, #0]
   c05a6:	f104 0c14 	add.w	ip, r4, #20
   c05aa:	46ae      	mov	lr, r5
   c05ac:	f04f 0a00 	mov.w	sl, #0
   c05b0:	f8bc b000 	ldrh.w	fp, [ip]
   c05b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c05b8:	fb09 220b 	mla	r2, r9, fp, r2
   c05bc:	4492      	add	sl, r2
   c05be:	b289      	uxth	r1, r1
   c05c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c05c4:	f84e 1b04 	str.w	r1, [lr], #4
   c05c8:	f85c 2b04 	ldr.w	r2, [ip], #4
   c05cc:	f8be 1000 	ldrh.w	r1, [lr]
   c05d0:	0c12      	lsrs	r2, r2, #16
   c05d2:	fb09 1102 	mla	r1, r9, r2, r1
   c05d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c05da:	4567      	cmp	r7, ip
   c05dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c05e0:	d8e6      	bhi.n	c05b0 <__multiply+0x10c>
   c05e2:	9a01      	ldr	r2, [sp, #4]
   c05e4:	50a9      	str	r1, [r5, r2]
   c05e6:	3504      	adds	r5, #4
   c05e8:	e79a      	b.n	c0520 <__multiply+0x7c>
   c05ea:	3e01      	subs	r6, #1
   c05ec:	e79c      	b.n	c0528 <__multiply+0x84>
   c05ee:	bf00      	nop
   c05f0:	000c23f9 	.word	0x000c23f9
   c05f4:	000c2480 	.word	0x000c2480

000c05f8 <__pow5mult>:
   c05f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c05fc:	4615      	mov	r5, r2
   c05fe:	f012 0203 	ands.w	r2, r2, #3
   c0602:	4606      	mov	r6, r0
   c0604:	460f      	mov	r7, r1
   c0606:	d007      	beq.n	c0618 <__pow5mult+0x20>
   c0608:	4c25      	ldr	r4, [pc, #148]	; (c06a0 <__pow5mult+0xa8>)
   c060a:	3a01      	subs	r2, #1
   c060c:	2300      	movs	r3, #0
   c060e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c0612:	f7ff fe51 	bl	c02b8 <__multadd>
   c0616:	4607      	mov	r7, r0
   c0618:	10ad      	asrs	r5, r5, #2
   c061a:	d03d      	beq.n	c0698 <__pow5mult+0xa0>
   c061c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c061e:	b97c      	cbnz	r4, c0640 <__pow5mult+0x48>
   c0620:	2010      	movs	r0, #16
   c0622:	f7f9 fcb5 	bl	b9f90 <malloc>
   c0626:	4602      	mov	r2, r0
   c0628:	6270      	str	r0, [r6, #36]	; 0x24
   c062a:	b928      	cbnz	r0, c0638 <__pow5mult+0x40>
   c062c:	4b1d      	ldr	r3, [pc, #116]	; (c06a4 <__pow5mult+0xac>)
   c062e:	481e      	ldr	r0, [pc, #120]	; (c06a8 <__pow5mult+0xb0>)
   c0630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c0634:	f7f9 fcfc 	bl	ba030 <__assert_func>
   c0638:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c063c:	6004      	str	r4, [r0, #0]
   c063e:	60c4      	str	r4, [r0, #12]
   c0640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c0644:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c0648:	b94c      	cbnz	r4, c065e <__pow5mult+0x66>
   c064a:	f240 2171 	movw	r1, #625	; 0x271
   c064e:	4630      	mov	r0, r6
   c0650:	f7ff ff12 	bl	c0478 <__i2b>
   c0654:	2300      	movs	r3, #0
   c0656:	f8c8 0008 	str.w	r0, [r8, #8]
   c065a:	4604      	mov	r4, r0
   c065c:	6003      	str	r3, [r0, #0]
   c065e:	f04f 0900 	mov.w	r9, #0
   c0662:	07eb      	lsls	r3, r5, #31
   c0664:	d50a      	bpl.n	c067c <__pow5mult+0x84>
   c0666:	4639      	mov	r1, r7
   c0668:	4622      	mov	r2, r4
   c066a:	4630      	mov	r0, r6
   c066c:	f7ff ff1a 	bl	c04a4 <__multiply>
   c0670:	4639      	mov	r1, r7
   c0672:	4680      	mov	r8, r0
   c0674:	4630      	mov	r0, r6
   c0676:	f7ff fdfd 	bl	c0274 <_Bfree>
   c067a:	4647      	mov	r7, r8
   c067c:	106d      	asrs	r5, r5, #1
   c067e:	d00b      	beq.n	c0698 <__pow5mult+0xa0>
   c0680:	6820      	ldr	r0, [r4, #0]
   c0682:	b938      	cbnz	r0, c0694 <__pow5mult+0x9c>
   c0684:	4622      	mov	r2, r4
   c0686:	4621      	mov	r1, r4
   c0688:	4630      	mov	r0, r6
   c068a:	f7ff ff0b 	bl	c04a4 <__multiply>
   c068e:	6020      	str	r0, [r4, #0]
   c0690:	f8c0 9000 	str.w	r9, [r0]
   c0694:	4604      	mov	r4, r0
   c0696:	e7e4      	b.n	c0662 <__pow5mult+0x6a>
   c0698:	4638      	mov	r0, r7
   c069a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c069e:	bf00      	nop
   c06a0:	000c25d0 	.word	0x000c25d0
   c06a4:	000c2229 	.word	0x000c2229
   c06a8:	000c2480 	.word	0x000c2480

000c06ac <__lshift>:
   c06ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c06b0:	460c      	mov	r4, r1
   c06b2:	6849      	ldr	r1, [r1, #4]
   c06b4:	6923      	ldr	r3, [r4, #16]
   c06b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c06ba:	68a3      	ldr	r3, [r4, #8]
   c06bc:	4607      	mov	r7, r0
   c06be:	4691      	mov	r9, r2
   c06c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c06c4:	f108 0601 	add.w	r6, r8, #1
   c06c8:	42b3      	cmp	r3, r6
   c06ca:	db0b      	blt.n	c06e4 <__lshift+0x38>
   c06cc:	4638      	mov	r0, r7
   c06ce:	f7ff fd91 	bl	c01f4 <_Balloc>
   c06d2:	4605      	mov	r5, r0
   c06d4:	b948      	cbnz	r0, c06ea <__lshift+0x3e>
   c06d6:	4602      	mov	r2, r0
   c06d8:	4b2a      	ldr	r3, [pc, #168]	; (c0784 <__lshift+0xd8>)
   c06da:	482b      	ldr	r0, [pc, #172]	; (c0788 <__lshift+0xdc>)
   c06dc:	f240 11d9 	movw	r1, #473	; 0x1d9
   c06e0:	f7f9 fca6 	bl	ba030 <__assert_func>
   c06e4:	3101      	adds	r1, #1
   c06e6:	005b      	lsls	r3, r3, #1
   c06e8:	e7ee      	b.n	c06c8 <__lshift+0x1c>
   c06ea:	2300      	movs	r3, #0
   c06ec:	f100 0114 	add.w	r1, r0, #20
   c06f0:	f100 0210 	add.w	r2, r0, #16
   c06f4:	4618      	mov	r0, r3
   c06f6:	4553      	cmp	r3, sl
   c06f8:	db37      	blt.n	c076a <__lshift+0xbe>
   c06fa:	6920      	ldr	r0, [r4, #16]
   c06fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c0700:	f104 0314 	add.w	r3, r4, #20
   c0704:	f019 091f 	ands.w	r9, r9, #31
   c0708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c070c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c0710:	d02f      	beq.n	c0772 <__lshift+0xc6>
   c0712:	f1c9 0e20 	rsb	lr, r9, #32
   c0716:	468a      	mov	sl, r1
   c0718:	f04f 0c00 	mov.w	ip, #0
   c071c:	681a      	ldr	r2, [r3, #0]
   c071e:	fa02 f209 	lsl.w	r2, r2, r9
   c0722:	ea42 020c 	orr.w	r2, r2, ip
   c0726:	f84a 2b04 	str.w	r2, [sl], #4
   c072a:	f853 2b04 	ldr.w	r2, [r3], #4
   c072e:	4298      	cmp	r0, r3
   c0730:	fa22 fc0e 	lsr.w	ip, r2, lr
   c0734:	d8f2      	bhi.n	c071c <__lshift+0x70>
   c0736:	1b03      	subs	r3, r0, r4
   c0738:	3b15      	subs	r3, #21
   c073a:	f023 0303 	bic.w	r3, r3, #3
   c073e:	3304      	adds	r3, #4
   c0740:	f104 0215 	add.w	r2, r4, #21
   c0744:	4290      	cmp	r0, r2
   c0746:	bf38      	it	cc
   c0748:	2304      	movcc	r3, #4
   c074a:	f841 c003 	str.w	ip, [r1, r3]
   c074e:	f1bc 0f00 	cmp.w	ip, #0
   c0752:	d001      	beq.n	c0758 <__lshift+0xac>
   c0754:	f108 0602 	add.w	r6, r8, #2
   c0758:	3e01      	subs	r6, #1
   c075a:	4638      	mov	r0, r7
   c075c:	612e      	str	r6, [r5, #16]
   c075e:	4621      	mov	r1, r4
   c0760:	f7ff fd88 	bl	c0274 <_Bfree>
   c0764:	4628      	mov	r0, r5
   c0766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c076a:	f842 0f04 	str.w	r0, [r2, #4]!
   c076e:	3301      	adds	r3, #1
   c0770:	e7c1      	b.n	c06f6 <__lshift+0x4a>
   c0772:	3904      	subs	r1, #4
   c0774:	f853 2b04 	ldr.w	r2, [r3], #4
   c0778:	f841 2f04 	str.w	r2, [r1, #4]!
   c077c:	4298      	cmp	r0, r3
   c077e:	d8f9      	bhi.n	c0774 <__lshift+0xc8>
   c0780:	e7ea      	b.n	c0758 <__lshift+0xac>
   c0782:	bf00      	nop
   c0784:	000c23f9 	.word	0x000c23f9
   c0788:	000c2480 	.word	0x000c2480

000c078c <__mcmp>:
   c078c:	b530      	push	{r4, r5, lr}
   c078e:	6902      	ldr	r2, [r0, #16]
   c0790:	690c      	ldr	r4, [r1, #16]
   c0792:	1b12      	subs	r2, r2, r4
   c0794:	d10e      	bne.n	c07b4 <__mcmp+0x28>
   c0796:	f100 0314 	add.w	r3, r0, #20
   c079a:	3114      	adds	r1, #20
   c079c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c07a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c07a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c07a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c07ac:	42a5      	cmp	r5, r4
   c07ae:	d003      	beq.n	c07b8 <__mcmp+0x2c>
   c07b0:	d305      	bcc.n	c07be <__mcmp+0x32>
   c07b2:	2201      	movs	r2, #1
   c07b4:	4610      	mov	r0, r2
   c07b6:	bd30      	pop	{r4, r5, pc}
   c07b8:	4283      	cmp	r3, r0
   c07ba:	d3f3      	bcc.n	c07a4 <__mcmp+0x18>
   c07bc:	e7fa      	b.n	c07b4 <__mcmp+0x28>
   c07be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c07c2:	e7f7      	b.n	c07b4 <__mcmp+0x28>

000c07c4 <__mdiff>:
   c07c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c07c8:	460c      	mov	r4, r1
   c07ca:	4606      	mov	r6, r0
   c07cc:	4611      	mov	r1, r2
   c07ce:	4620      	mov	r0, r4
   c07d0:	4690      	mov	r8, r2
   c07d2:	f7ff ffdb 	bl	c078c <__mcmp>
   c07d6:	1e05      	subs	r5, r0, #0
   c07d8:	d110      	bne.n	c07fc <__mdiff+0x38>
   c07da:	4629      	mov	r1, r5
   c07dc:	4630      	mov	r0, r6
   c07de:	f7ff fd09 	bl	c01f4 <_Balloc>
   c07e2:	b930      	cbnz	r0, c07f2 <__mdiff+0x2e>
   c07e4:	4b3a      	ldr	r3, [pc, #232]	; (c08d0 <__mdiff+0x10c>)
   c07e6:	4602      	mov	r2, r0
   c07e8:	f240 2132 	movw	r1, #562	; 0x232
   c07ec:	4839      	ldr	r0, [pc, #228]	; (c08d4 <__mdiff+0x110>)
   c07ee:	f7f9 fc1f 	bl	ba030 <__assert_func>
   c07f2:	2301      	movs	r3, #1
   c07f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c07f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c07fc:	bfa4      	itt	ge
   c07fe:	4643      	movge	r3, r8
   c0800:	46a0      	movge	r8, r4
   c0802:	4630      	mov	r0, r6
   c0804:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c0808:	bfa6      	itte	ge
   c080a:	461c      	movge	r4, r3
   c080c:	2500      	movge	r5, #0
   c080e:	2501      	movlt	r5, #1
   c0810:	f7ff fcf0 	bl	c01f4 <_Balloc>
   c0814:	b920      	cbnz	r0, c0820 <__mdiff+0x5c>
   c0816:	4b2e      	ldr	r3, [pc, #184]	; (c08d0 <__mdiff+0x10c>)
   c0818:	4602      	mov	r2, r0
   c081a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c081e:	e7e5      	b.n	c07ec <__mdiff+0x28>
   c0820:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c0824:	6926      	ldr	r6, [r4, #16]
   c0826:	60c5      	str	r5, [r0, #12]
   c0828:	f104 0914 	add.w	r9, r4, #20
   c082c:	f108 0514 	add.w	r5, r8, #20
   c0830:	f100 0e14 	add.w	lr, r0, #20
   c0834:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c0838:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c083c:	f108 0210 	add.w	r2, r8, #16
   c0840:	46f2      	mov	sl, lr
   c0842:	2100      	movs	r1, #0
   c0844:	f859 3b04 	ldr.w	r3, [r9], #4
   c0848:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c084c:	fa1f f883 	uxth.w	r8, r3
   c0850:	fa11 f18b 	uxtah	r1, r1, fp
   c0854:	0c1b      	lsrs	r3, r3, #16
   c0856:	eba1 0808 	sub.w	r8, r1, r8
   c085a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c085e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c0862:	fa1f f888 	uxth.w	r8, r8
   c0866:	1419      	asrs	r1, r3, #16
   c0868:	454e      	cmp	r6, r9
   c086a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c086e:	f84a 3b04 	str.w	r3, [sl], #4
   c0872:	d8e7      	bhi.n	c0844 <__mdiff+0x80>
   c0874:	1b33      	subs	r3, r6, r4
   c0876:	3b15      	subs	r3, #21
   c0878:	f023 0303 	bic.w	r3, r3, #3
   c087c:	3304      	adds	r3, #4
   c087e:	3415      	adds	r4, #21
   c0880:	42a6      	cmp	r6, r4
   c0882:	bf38      	it	cc
   c0884:	2304      	movcc	r3, #4
   c0886:	441d      	add	r5, r3
   c0888:	4473      	add	r3, lr
   c088a:	469e      	mov	lr, r3
   c088c:	462e      	mov	r6, r5
   c088e:	4566      	cmp	r6, ip
   c0890:	d30e      	bcc.n	c08b0 <__mdiff+0xec>
   c0892:	f10c 0203 	add.w	r2, ip, #3
   c0896:	1b52      	subs	r2, r2, r5
   c0898:	f022 0203 	bic.w	r2, r2, #3
   c089c:	3d03      	subs	r5, #3
   c089e:	45ac      	cmp	ip, r5
   c08a0:	bf38      	it	cc
   c08a2:	2200      	movcc	r2, #0
   c08a4:	441a      	add	r2, r3
   c08a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c08aa:	b17b      	cbz	r3, c08cc <__mdiff+0x108>
   c08ac:	6107      	str	r7, [r0, #16]
   c08ae:	e7a3      	b.n	c07f8 <__mdiff+0x34>
   c08b0:	f856 8b04 	ldr.w	r8, [r6], #4
   c08b4:	fa11 f288 	uxtah	r2, r1, r8
   c08b8:	1414      	asrs	r4, r2, #16
   c08ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c08be:	b292      	uxth	r2, r2
   c08c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c08c4:	f84e 2b04 	str.w	r2, [lr], #4
   c08c8:	1421      	asrs	r1, r4, #16
   c08ca:	e7e0      	b.n	c088e <__mdiff+0xca>
   c08cc:	3f01      	subs	r7, #1
   c08ce:	e7ea      	b.n	c08a6 <__mdiff+0xe2>
   c08d0:	000c23f9 	.word	0x000c23f9
   c08d4:	000c2480 	.word	0x000c2480

000c08d8 <__ulp>:
   c08d8:	b082      	sub	sp, #8
   c08da:	ed8d 0b00 	vstr	d0, [sp]
   c08de:	9b01      	ldr	r3, [sp, #4]
   c08e0:	4912      	ldr	r1, [pc, #72]	; (c092c <__ulp+0x54>)
   c08e2:	4019      	ands	r1, r3
   c08e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c08e8:	2900      	cmp	r1, #0
   c08ea:	dd05      	ble.n	c08f8 <__ulp+0x20>
   c08ec:	2200      	movs	r2, #0
   c08ee:	460b      	mov	r3, r1
   c08f0:	ec43 2b10 	vmov	d0, r2, r3
   c08f4:	b002      	add	sp, #8
   c08f6:	4770      	bx	lr
   c08f8:	4249      	negs	r1, r1
   c08fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c08fe:	ea4f 5021 	mov.w	r0, r1, asr #20
   c0902:	f04f 0200 	mov.w	r2, #0
   c0906:	f04f 0300 	mov.w	r3, #0
   c090a:	da04      	bge.n	c0916 <__ulp+0x3e>
   c090c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c0910:	fa41 f300 	asr.w	r3, r1, r0
   c0914:	e7ec      	b.n	c08f0 <__ulp+0x18>
   c0916:	f1a0 0114 	sub.w	r1, r0, #20
   c091a:	291e      	cmp	r1, #30
   c091c:	bfda      	itte	le
   c091e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c0922:	fa20 f101 	lsrle.w	r1, r0, r1
   c0926:	2101      	movgt	r1, #1
   c0928:	460a      	mov	r2, r1
   c092a:	e7e1      	b.n	c08f0 <__ulp+0x18>
   c092c:	7ff00000 	.word	0x7ff00000

000c0930 <__b2d>:
   c0930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0932:	6905      	ldr	r5, [r0, #16]
   c0934:	f100 0714 	add.w	r7, r0, #20
   c0938:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c093c:	1f2e      	subs	r6, r5, #4
   c093e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c0942:	4620      	mov	r0, r4
   c0944:	f7ff fd48 	bl	c03d8 <__hi0bits>
   c0948:	f1c0 0320 	rsb	r3, r0, #32
   c094c:	280a      	cmp	r0, #10
   c094e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c09cc <__b2d+0x9c>
   c0952:	600b      	str	r3, [r1, #0]
   c0954:	dc14      	bgt.n	c0980 <__b2d+0x50>
   c0956:	f1c0 0e0b 	rsb	lr, r0, #11
   c095a:	fa24 f10e 	lsr.w	r1, r4, lr
   c095e:	42b7      	cmp	r7, r6
   c0960:	ea41 030c 	orr.w	r3, r1, ip
   c0964:	bf34      	ite	cc
   c0966:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c096a:	2100      	movcs	r1, #0
   c096c:	3015      	adds	r0, #21
   c096e:	fa04 f000 	lsl.w	r0, r4, r0
   c0972:	fa21 f10e 	lsr.w	r1, r1, lr
   c0976:	ea40 0201 	orr.w	r2, r0, r1
   c097a:	ec43 2b10 	vmov	d0, r2, r3
   c097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0980:	42b7      	cmp	r7, r6
   c0982:	bf3a      	itte	cc
   c0984:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0988:	f1a5 0608 	subcc.w	r6, r5, #8
   c098c:	2100      	movcs	r1, #0
   c098e:	380b      	subs	r0, #11
   c0990:	d017      	beq.n	c09c2 <__b2d+0x92>
   c0992:	f1c0 0c20 	rsb	ip, r0, #32
   c0996:	fa04 f500 	lsl.w	r5, r4, r0
   c099a:	42be      	cmp	r6, r7
   c099c:	fa21 f40c 	lsr.w	r4, r1, ip
   c09a0:	ea45 0504 	orr.w	r5, r5, r4
   c09a4:	bf8c      	ite	hi
   c09a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c09aa:	2400      	movls	r4, #0
   c09ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c09b0:	fa01 f000 	lsl.w	r0, r1, r0
   c09b4:	fa24 f40c 	lsr.w	r4, r4, ip
   c09b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c09bc:	ea40 0204 	orr.w	r2, r0, r4
   c09c0:	e7db      	b.n	c097a <__b2d+0x4a>
   c09c2:	ea44 030c 	orr.w	r3, r4, ip
   c09c6:	460a      	mov	r2, r1
   c09c8:	e7d7      	b.n	c097a <__b2d+0x4a>
   c09ca:	bf00      	nop
   c09cc:	3ff00000 	.word	0x3ff00000

000c09d0 <__d2b>:
   c09d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c09d4:	4689      	mov	r9, r1
   c09d6:	2101      	movs	r1, #1
   c09d8:	ec57 6b10 	vmov	r6, r7, d0
   c09dc:	4690      	mov	r8, r2
   c09de:	f7ff fc09 	bl	c01f4 <_Balloc>
   c09e2:	4604      	mov	r4, r0
   c09e4:	b930      	cbnz	r0, c09f4 <__d2b+0x24>
   c09e6:	4602      	mov	r2, r0
   c09e8:	4b25      	ldr	r3, [pc, #148]	; (c0a80 <__d2b+0xb0>)
   c09ea:	4826      	ldr	r0, [pc, #152]	; (c0a84 <__d2b+0xb4>)
   c09ec:	f240 310a 	movw	r1, #778	; 0x30a
   c09f0:	f7f9 fb1e 	bl	ba030 <__assert_func>
   c09f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c09f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c09fc:	bb35      	cbnz	r5, c0a4c <__d2b+0x7c>
   c09fe:	2e00      	cmp	r6, #0
   c0a00:	9301      	str	r3, [sp, #4]
   c0a02:	d028      	beq.n	c0a56 <__d2b+0x86>
   c0a04:	4668      	mov	r0, sp
   c0a06:	9600      	str	r6, [sp, #0]
   c0a08:	f7ff fd06 	bl	c0418 <__lo0bits>
   c0a0c:	9900      	ldr	r1, [sp, #0]
   c0a0e:	b300      	cbz	r0, c0a52 <__d2b+0x82>
   c0a10:	9a01      	ldr	r2, [sp, #4]
   c0a12:	f1c0 0320 	rsb	r3, r0, #32
   c0a16:	fa02 f303 	lsl.w	r3, r2, r3
   c0a1a:	430b      	orrs	r3, r1
   c0a1c:	40c2      	lsrs	r2, r0
   c0a1e:	6163      	str	r3, [r4, #20]
   c0a20:	9201      	str	r2, [sp, #4]
   c0a22:	9b01      	ldr	r3, [sp, #4]
   c0a24:	61a3      	str	r3, [r4, #24]
   c0a26:	2b00      	cmp	r3, #0
   c0a28:	bf14      	ite	ne
   c0a2a:	2202      	movne	r2, #2
   c0a2c:	2201      	moveq	r2, #1
   c0a2e:	6122      	str	r2, [r4, #16]
   c0a30:	b1d5      	cbz	r5, c0a68 <__d2b+0x98>
   c0a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c0a36:	4405      	add	r5, r0
   c0a38:	f8c9 5000 	str.w	r5, [r9]
   c0a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c0a40:	f8c8 0000 	str.w	r0, [r8]
   c0a44:	4620      	mov	r0, r4
   c0a46:	b003      	add	sp, #12
   c0a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0a50:	e7d5      	b.n	c09fe <__d2b+0x2e>
   c0a52:	6161      	str	r1, [r4, #20]
   c0a54:	e7e5      	b.n	c0a22 <__d2b+0x52>
   c0a56:	a801      	add	r0, sp, #4
   c0a58:	f7ff fcde 	bl	c0418 <__lo0bits>
   c0a5c:	9b01      	ldr	r3, [sp, #4]
   c0a5e:	6163      	str	r3, [r4, #20]
   c0a60:	2201      	movs	r2, #1
   c0a62:	6122      	str	r2, [r4, #16]
   c0a64:	3020      	adds	r0, #32
   c0a66:	e7e3      	b.n	c0a30 <__d2b+0x60>
   c0a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c0a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c0a70:	f8c9 0000 	str.w	r0, [r9]
   c0a74:	6918      	ldr	r0, [r3, #16]
   c0a76:	f7ff fcaf 	bl	c03d8 <__hi0bits>
   c0a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c0a7e:	e7df      	b.n	c0a40 <__d2b+0x70>
   c0a80:	000c23f9 	.word	0x000c23f9
   c0a84:	000c2480 	.word	0x000c2480

000c0a88 <__ratio>:
   c0a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0a8c:	4688      	mov	r8, r1
   c0a8e:	4669      	mov	r1, sp
   c0a90:	4681      	mov	r9, r0
   c0a92:	f7ff ff4d 	bl	c0930 <__b2d>
   c0a96:	a901      	add	r1, sp, #4
   c0a98:	4640      	mov	r0, r8
   c0a9a:	ec55 4b10 	vmov	r4, r5, d0
   c0a9e:	f7ff ff47 	bl	c0930 <__b2d>
   c0aa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c0aa6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c0aaa:	eba3 0c02 	sub.w	ip, r3, r2
   c0aae:	e9dd 3200 	ldrd	r3, r2, [sp]
   c0ab2:	1a9b      	subs	r3, r3, r2
   c0ab4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c0ab8:	ec51 0b10 	vmov	r0, r1, d0
   c0abc:	2b00      	cmp	r3, #0
   c0abe:	bfd6      	itet	le
   c0ac0:	460a      	movle	r2, r1
   c0ac2:	462a      	movgt	r2, r5
   c0ac4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0ac8:	468b      	mov	fp, r1
   c0aca:	462f      	mov	r7, r5
   c0acc:	bfd4      	ite	le
   c0ace:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c0ad2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c0ad6:	4620      	mov	r0, r4
   c0ad8:	ee10 2a10 	vmov	r2, s0
   c0adc:	465b      	mov	r3, fp
   c0ade:	4639      	mov	r1, r7
   c0ae0:	f7fd fdb2 	bl	be648 <__aeabi_ddiv>
   c0ae4:	ec41 0b10 	vmov	d0, r0, r1
   c0ae8:	b003      	add	sp, #12
   c0aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0aee <__copybits>:
   c0aee:	3901      	subs	r1, #1
   c0af0:	b570      	push	{r4, r5, r6, lr}
   c0af2:	1149      	asrs	r1, r1, #5
   c0af4:	6914      	ldr	r4, [r2, #16]
   c0af6:	3101      	adds	r1, #1
   c0af8:	f102 0314 	add.w	r3, r2, #20
   c0afc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0b00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c0b04:	1f05      	subs	r5, r0, #4
   c0b06:	42a3      	cmp	r3, r4
   c0b08:	d30c      	bcc.n	c0b24 <__copybits+0x36>
   c0b0a:	1aa3      	subs	r3, r4, r2
   c0b0c:	3b11      	subs	r3, #17
   c0b0e:	f023 0303 	bic.w	r3, r3, #3
   c0b12:	3211      	adds	r2, #17
   c0b14:	42a2      	cmp	r2, r4
   c0b16:	bf88      	it	hi
   c0b18:	2300      	movhi	r3, #0
   c0b1a:	4418      	add	r0, r3
   c0b1c:	2300      	movs	r3, #0
   c0b1e:	4288      	cmp	r0, r1
   c0b20:	d305      	bcc.n	c0b2e <__copybits+0x40>
   c0b22:	bd70      	pop	{r4, r5, r6, pc}
   c0b24:	f853 6b04 	ldr.w	r6, [r3], #4
   c0b28:	f845 6f04 	str.w	r6, [r5, #4]!
   c0b2c:	e7eb      	b.n	c0b06 <__copybits+0x18>
   c0b2e:	f840 3b04 	str.w	r3, [r0], #4
   c0b32:	e7f4      	b.n	c0b1e <__copybits+0x30>

000c0b34 <__any_on>:
   c0b34:	f100 0214 	add.w	r2, r0, #20
   c0b38:	6900      	ldr	r0, [r0, #16]
   c0b3a:	114b      	asrs	r3, r1, #5
   c0b3c:	4298      	cmp	r0, r3
   c0b3e:	b510      	push	{r4, lr}
   c0b40:	db11      	blt.n	c0b66 <__any_on+0x32>
   c0b42:	dd0a      	ble.n	c0b5a <__any_on+0x26>
   c0b44:	f011 011f 	ands.w	r1, r1, #31
   c0b48:	d007      	beq.n	c0b5a <__any_on+0x26>
   c0b4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c0b4e:	fa24 f001 	lsr.w	r0, r4, r1
   c0b52:	fa00 f101 	lsl.w	r1, r0, r1
   c0b56:	428c      	cmp	r4, r1
   c0b58:	d10b      	bne.n	c0b72 <__any_on+0x3e>
   c0b5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c0b5e:	4293      	cmp	r3, r2
   c0b60:	d803      	bhi.n	c0b6a <__any_on+0x36>
   c0b62:	2000      	movs	r0, #0
   c0b64:	bd10      	pop	{r4, pc}
   c0b66:	4603      	mov	r3, r0
   c0b68:	e7f7      	b.n	c0b5a <__any_on+0x26>
   c0b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c0b6e:	2900      	cmp	r1, #0
   c0b70:	d0f5      	beq.n	c0b5e <__any_on+0x2a>
   c0b72:	2001      	movs	r0, #1
   c0b74:	e7f6      	b.n	c0b64 <__any_on+0x30>

000c0b76 <_calloc_r>:
   c0b76:	b513      	push	{r0, r1, r4, lr}
   c0b78:	434a      	muls	r2, r1
   c0b7a:	4611      	mov	r1, r2
   c0b7c:	9201      	str	r2, [sp, #4]
   c0b7e:	f7f9 fa47 	bl	ba010 <_malloc_r>
   c0b82:	4604      	mov	r4, r0
   c0b84:	b118      	cbz	r0, c0b8e <_calloc_r+0x18>
   c0b86:	9a01      	ldr	r2, [sp, #4]
   c0b88:	2100      	movs	r1, #0
   c0b8a:	f7fd ffa0 	bl	beace <memset>
   c0b8e:	4620      	mov	r0, r4
   c0b90:	b002      	add	sp, #8
   c0b92:	bd10      	pop	{r4, pc}
   c0b94:	0000      	movs	r0, r0
	...

000c0b98 <nan>:
   c0b98:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0ba0 <nan+0x8>
   c0b9c:	4770      	bx	lr
   c0b9e:	bf00      	nop
   c0ba0:	00000000 	.word	0x00000000
   c0ba4:	7ff80000 	.word	0x7ff80000

000c0ba8 <__ascii_wctomb>:
   c0ba8:	b149      	cbz	r1, c0bbe <__ascii_wctomb+0x16>
   c0baa:	2aff      	cmp	r2, #255	; 0xff
   c0bac:	bf85      	ittet	hi
   c0bae:	238a      	movhi	r3, #138	; 0x8a
   c0bb0:	6003      	strhi	r3, [r0, #0]
   c0bb2:	700a      	strbls	r2, [r1, #0]
   c0bb4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0bb8:	bf98      	it	ls
   c0bba:	2001      	movls	r0, #1
   c0bbc:	4770      	bx	lr
   c0bbe:	4608      	mov	r0, r1
   c0bc0:	4770      	bx	lr
	...

000c0bc4 <__aeabi_d2lz>:
   c0bc4:	b538      	push	{r3, r4, r5, lr}
   c0bc6:	2200      	movs	r2, #0
   c0bc8:	2300      	movs	r3, #0
   c0bca:	4604      	mov	r4, r0
   c0bcc:	460d      	mov	r5, r1
   c0bce:	f7fd fe83 	bl	be8d8 <__aeabi_dcmplt>
   c0bd2:	b928      	cbnz	r0, c0be0 <__aeabi_d2lz+0x1c>
   c0bd4:	4620      	mov	r0, r4
   c0bd6:	4629      	mov	r1, r5
   c0bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0bdc:	f7fd bf14 	b.w	bea08 <__aeabi_d2ulz>
   c0be0:	4620      	mov	r0, r4
   c0be2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c0be6:	f7fd ff0f 	bl	bea08 <__aeabi_d2ulz>
   c0bea:	4240      	negs	r0, r0
   c0bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0bf0:	bd38      	pop	{r3, r4, r5, pc}
   c0bf2:	bf00      	nop

000c0bf4 <dynalib_user>:
   c0bf4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c0c04:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c0c14:	7620 7269 7574 6c61 4a00 796f 7473 6369      virtual.Joystic
   c0c24:	206b 7274 6769 6567 0072 6e45 6574 2072     k trigger.Enter 
   c0c34:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c0c44:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c0c54:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c0c64:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c0c74:	2520 2073 4f4d 4544 7525 003e 6952 6867      %s MODE%u>.Righ
   c0c84:	2074 7274 6769 6567 0072 6f4d 6964 6966     t trigger.Modifi
   c0c94:	6465 6120 206e 6e4f 4f2f 6666 4320 6e6f     ed an On/Off Con
   c0ca4:	7274 6c6f 4200 746f 203a 6425 202c 6f4d     trol.Bot: %d, Mo
   c0cb4:	6964 6966 6465 0020 6966 656c 616e 656d     dified .filename
   c0cc4:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   c0cd4:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   c0ce4:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   c0cf4:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   c0d04:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   c0d14:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   c0d24:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   c0d34:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   c0d44:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   c0d54:	5200 6365 6965 6576 2064 6950 6320 6d6f     .Received Pi com
   c0d64:	616d 646e 4300 6568 6b63 7573 3a6d 2520     mand.Checksum: %
   c0d74:	3230 2c78 2520 3330 2c64 4320 6568 6b63     02x, %03d, Check
   c0d84:	7473 3a72 2520 0073 7453 6972 676e 4c20     str: %s.String L
   c0d94:	6e65 203a 6425 202c 6843 6365 736b 6d75     en: %d, Checksum
   c0da4:	203a 6425 5b00 4157 4e52 205d 5052 2069     : %d.[WARN] RPi 
   c0db4:	654d 7373 6761 2065 6843 6365 736b 6d75     Message Checksum
   c0dc4:	4420 656f 2073 6f4e 2074 614d 6374 2168      Does Not Match!
   c0dd4:	203a 7325 5700 7261 696e 676e 202c 6863     : %s.Warning, ch
   c0de4:	6365 736b 6d75 6420 656f 2073 6f6e 2074     ecksum does not 
   c0df4:	616d 6374 0068 4343 3225 6e73 6b61 3325     match.CC%2snak%3
   c0e04:	0073 7463 006c 7325 2520 2073 7325 2520     s.ctl.%s %s %s %
   c0e14:	2064 6425 2520 2064 6425 4700 746f 6120     d %d %d %d.Got a
   c0e24:	6320 6d6f 616d 646e 7020 6361 656b 2074      command packet 
   c0e34:	7266 6d6f 5020 2069 6f66 2072 6f42 2074     from Pi for Bot 
   c0e44:	6425 5b00 4e49 4f46 205d 6552 6563 7669     %d.[INFO] Receiv
   c0e54:	6465 5220 7361 6270 7265 7972 5020 2069     ed Raspberry Pi 
   c0e64:	654d 7373 6761 3a65 2520 0073 7325 3025     Message: %s.%s%0
   c0e74:	7832 4200 746f 6431 7461 4300 4243 6425     2x.Bot1dat.CCB%d
   c0e84:	746d 2572 3330 2564 3330 0064 4343 2542     mtr%03d%03d.CCB%
   c0e94:	6864 6177 7600 6365 6f74 3a72 5f3a 5f4d     dhwa.vector::_M_
   c0ea4:	6172 676e 5f65 6863 6365 3a6b 5f20 6e5f     range_check: __n
   c0eb4:	2820 6877 6369 2068 7369 2520 757a 2029      (which is %zu) 
   c0ec4:	3d3e 7420 6968 2d73 733e 7a69 2865 2029     >= this->size() 
   c0ed4:	7728 6968 6863 6920 2073 7a25 2975 5500     (which is %zu).U
   c0ee4:	2070 7274 6769 6567 0072 6f44 6e77 7420     p trigger.Down t
   c0ef4:	6972 6767 7265 4300 4243 6425 7463 256c     rigger.CCB%dctl%
   c0f04:	2e30 6636 2520 2e30 6636 2520 2064 6425     0.6f %0.6f %d %d
   c0f14:	2520 0064 6f43 746e 6f72 206c 6150 6b63      %d.Control Pack
   c0f24:	7465 203a 7325 7600 6365 6f74 3a72 5f3a     et: %s.vector::_
   c0f34:	5f4d 6572 6c61 6f6c 5f63 6e69 6573 7472     M_realloc_insert
   c0f44:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c0f54:	2520 3330 0064 575b 5241 5d4e 5720 7261      %03d.[WARN] War
   c0f64:	696e 676e 202c 6863 6365 736b 6d75 6420     ning, checksum d
   c0f74:	656f 2073 6f6e 2074 616d 6374 2168 6100     oes not match!.a
   c0f84:	6b63 7300 7075 2500 2075 7525 2520 2073     ck.sup.%u %u %s 
   c0f94:	7325 5300 6174 7574 2073 7055 6164 6574     %s.Status Update
   c0fa4:	0021 6e73 0073 7325 2520 2073 6425 2520     !.sns.%s %s %d %
   c0fb4:	2064 6425 2520 2064 6425 4200 746f 2320     d %d %d %d.Bot #
   c0fc4:	203a 6425 5420 6d65 3a70 2520 0066 616e     : %d Temp: %f.na
   c0fd4:	006b 7768 0064 6f46 6e75 2064 2061 656e     k.hwd.Found a ne
   c0fe4:	2077 6177 6574 2072 6f62 2074 4449 7000     w water bot ID.p
   c0ff4:	7374 5b00 5550 5354 205d 6552 6563 7669     ts.[PUTS] Receiv
   c1004:	6465 5320 7274 6e69 2067 6f43 6d6d 6e61     ed String Comman
   c1014:	3a64 2520 0073 495b 464e 5d4f 5220 6365     d: %s.[INFO] Rec
   c1024:	6965 6576 2064 544c 2045 654d 7373 6761     eived LTE Messag
   c1034:	3a65 2520 0073 654e 2077 5442 4320 6d6f     e: %s.New BT Com
   c1044:	616d 646e 203a 5b00 4e49 4f46 205d 6552     mand: .[INFO] Re
   c1054:	6563 7669 6465 4220 454c 4d20 7365 6173     ceived BLE Messa
   c1064:	6567 203a 7325 4e00 7765 5820 6542 2065     ge: %s.New XBee 
   c1074:	6f43 6d6d 6e61 3a64 5b00 4e49 4f46 205d     Command:.[INFO] 
   c1084:	6552 6563 7669 6465 5820 6542 2065 654d     Received XBee Me
   c1094:	7373 6761 3a65 2520 0073 6f46 6e75 2064     ssage: %s.Found 
   c10a4:	6f42 2074 3a23 2520 2064 6425 2520 2064     Bot #: %d %d %d 
   c10b4:	6425 2520 2064 6425 2520 2064 6425 202c     %d %d %d %d %d, 
   c10c4:	6573 7672 6369 7365 203a 6425 4600 756f     services: %d.Fou
   c10d4:	646e 6e20 7765 6220 746f 203a 6425 4300     nd new bot: %d.C
   c10e4:	6e6f 656e 7463 6465 7420 206f 6f42 2074     onnected to Bot 
   c10f4:	6425 2f00 4500 7272 726f 202c 6f63 6c75     %d./.Error, coul
   c1104:	2064 6f6e 2074 706f 6e65 7220 6f6f 2074     d not open root 
   c1114:	6964 6572 7463 726f 2079 6e6f 5320 2044     directory on SD 
   c1124:	6143 6472 202e 7349 6920 2074 6e69 6573     Card. Is it inse
   c1134:	7472 6465 003f 6552 7571 7365 6574 2064     rted?.Requested 
   c1144:	4453 4320 7261 2064 6144 6174 6620 6f72     SD Card Data fro
   c1154:	206d 6f42 2074 6425 4f20 6576 2072 4c42     m Bot %d Over BL
   c1164:	0a45 4300 7275 6572 746e 796c 6320 6e6f     E..Currently con
   c1174:	656e 7463 6465 7420 206f 6f42 2074 7325     nected to Bot %s
   c1184:	202c 656e 6465 7420 206f 6f63 6e6e 6365     , need to connec
   c1194:	2074 6f74 4220 746f 2520 0064 4343 2542     t to Bot %d.CCB%
   c11a4:	6464 706d 5300 6375 6563 7373 7566 6c6c     ddmp.Successfull
   c11b4:	2079 6f63 6e6e 6365 6574 2064 6f74 4220     y connected to B
   c11c4:	746f 2520 0064 7453 7261 6974 676e 6620     ot %d.Starting f
   c11d4:	6c69 2065 7274 6e61 6673 7265 6620 6f72     ile transfer fro
   c11e4:	206d 6f42 2074 6425 4600 6e69 7369 6568     m Bot %d.Finishe
   c11f4:	2064 7274 6e61 6673 7265 6972 676e 6620     d transferring f
   c1204:	6c69 2065 7266 6d6f 4220 746f 2520 0064     ile from Bot %d.
   c1214:	6552 6f63 6472 4200 7461 6574 7972 4f00     Record.Battery.O
   c1224:	6666 6f6c 6461 5300 6e65 7274 0079 6552     ffload.Sentry.Re
   c1234:	006d 6553 006e 7541 0074 6953 6e67 6c61     m.Sen.Aut.Signal
   c1244:	6200 3234 3630 3139 2d30 6364 6234 352d     .b4206910-dc4b-5
   c1254:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   c1264:	3831 6232 0030 3462 3032 3936 3231 642d     182b0.b4206912-d
   c1274:	3463 2d62 3735 3334 632d 6238 2d31 3239     c4b-5743-c8b1-92
   c1284:	3064 3765 3135 3238 3062 6200 3234 3630     d0e75182b0.b4206
   c1294:	3139 2d33 6364 6234 352d 3437 2d33 3863     913-dc4b-5743-c8
   c12a4:	3162 392d 6432 6530 3537 3831 6232 0030     b1-92d0e75182b0.
   c12b4:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c12c4:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c12d4:	3238 3062 4f00 006e 664f 0066 7250 6e69     82b0.On.Off.Prin
   c12e4:	6574 2064 6948 6867 696c 6867 6574 2064     ted Highlighted 
   c12f4:	654d 756e 6920 6574 206d 6977 6874 6e20     Menu item with n
   c1304:	6d61 3a65 2520 0073 6e49 7570 2074 6f43     ame: %s.Input Co
   c1314:	6d6d 6e61 0064 3025 6432 3025 6432 3025     mmand.%02d%02d%0
   c1324:	6434 3025 6432 3025 6432 3025 6432 5700     4d%02d%02d%02d.W
   c1334:	7461 7265 6f42 0074 4c5f 474f 742e 7478     aterBot._LOG.txt
   c1344:	2000 7453 7261 6974 676e 0020 7245 6f72     . Starting .Erro
   c1354:	3a72 6320 756f 646c 6e20 746f 6320 6e6f     r: could not con
   c1364:	656e 7463 7420 206f 4453 6320 7261 2164     nect to SD card!
   c1374:	4f00 004b 4343 4241 7073 4263 3125 0064     .OK.CCABspcB%1d.
   c1384:	4343 4241 7073 4e63 0042 0000               CCABspcNB...

000c1390 <_ZTVN8particle11SPISettingsE>:
	...
   c1398:	4301 000b 40cd 000b 410f 000b               .C...@...A..

000c13a4 <_ZTV5Timer>:
	...
   c13ac:	458d 000b 45e1 000b 4175 000b               .E...E..uA..

000c13b8 <_ZTV4File>:
	...
   c13c0:	410d 000b 411d 000b 415d 000b 4157 000b     .A...A..]A..WA..
   c13d0:	40cf 000b 4137 000b 4131 000b 412b 000b     .@..7A..1A..+A..
   c13e0:	6157 6e72 6e69 0067 4200 746f 2520 0064     Warning..Bot %d.
   c13f0:	4c00 776f 4220 7461 6574 7972 203a 6425     .Low Battery: %d
   c1400:	0000 6548 6c6c 216f 0000 6353 6e61 696e     ..Hello!..Scanni
   c1410:	676e 6620 726f 4220 746f 0073 4f00 204b     ng for Bots..OK 
   c1420:	6877 6e65 6220 746f 2073 6572 6461 0079     when bots ready.
	...

000c1431 <_ZL4font>:
   c1431:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c1441:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c1451:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c1461:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c1471:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c1481:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c1491:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c14a1:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c14b1:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c14c1:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c14d1:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c14e1:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c14f1:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c1501:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c1511:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c1521:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c1531:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c1541:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c1551:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c1561:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c1571:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c1581:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c1591:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c15a1:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c15b1:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c15c1:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c15d1:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c15e1:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c15f1:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c1601:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c1611:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c1621:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c1631:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c1641:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c1651:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c1661:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c1671:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c1681:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c1691:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c16a1:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c16b1:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c16c1:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c16d1:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c16e1:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c16f1:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c1701:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c1711:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c1721:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c1731:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c1741:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c1751:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c1761:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c1771:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c1781:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c1791:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c17a1:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c17b1:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c17c1:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c17d1:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c17e1:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c17f1:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c1801:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c1811:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c1821:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c1831:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c1841:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c1851:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c1861:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c1871:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c1881:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c1891:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c18a1:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c18b1:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c18c1:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c18d1:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c18e1:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c18f1:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c1901:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c1911:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c1921:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   c1931:	0000                                         ...

000c1934 <_ZTV12Adafruit_GFX>:
	...
   c1944:	8df9 000b d0fd 000b 40a5 000b 87ff 000b     .........@......
   c1954:	8801 000b 8833 000b 880f 000b 8821 000b     ....3.......!...
   c1964:	8741 000b 87ff 000b 8a2b 000b 8a29 000b     A.......+...)...
   c1974:	884b 000b 8889 000b 88c3 000b 8909 000b     K...............
   c1984:	8925 000b 89a9 000b                         %.......

000c198c <_ZTV17Adafruit_GrayOLED>:
	...
   c199c:	8df9 000b d0fd 000b 9223 000b 87ff 000b     ........#.......
   c19ac:	8801 000b 8833 000b 880f 000b 8821 000b     ....3.......!...
   c19bc:	8741 000b 87ff 000b 8a2b 000b 941f 000b     A.......+.......
   c19cc:	884b 000b 8889 000b 88c3 000b 8909 000b     K...............
   c19dc:	8925 000b 89a9 000b 40a5 000b               %........@..

000c19e8 <_ZL12splash2_data>:
   c19e8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c19f8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c1a08:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c1a24:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c1a34:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c1a44:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c1a54:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1a64:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1a74:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c1a84:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c1a94:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c1aa4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c1ab4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c1ac4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c1ad4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c1ae4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c1af4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c1b04:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c1b14:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c1b24:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c1b34:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c1b44:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c1b54:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c1b64:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1b7c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c1b8c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c1b9c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1bac:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c1bbc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c1bc8 <_ZTV15Adafruit_SH1107>:
	...
   c1bd0:	9591 000b 95a5 000b 8df9 000b d0fd 000b     ................
   c1be0:	9223 000b 87ff 000b 8801 000b 8833 000b     #...........3...
   c1bf0:	880f 000b 8821 000b 8741 000b 87ff 000b     ....!...A.......
   c1c00:	8a2b 000b 941f 000b 884b 000b 8889 000b     +.......K.......
   c1c10:	88c3 000b 8909 000b 8925 000b 89a9 000b     ........%.......
   c1c20:	96c5 000b                                   ....

000c1c24 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   c1c24:	00d3 7fa8                                   ....

000c1c28 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   c1c28:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   c1c38:	35db 3fa8 a6a4 0000                         .5.?....

000c1c40 <_ZTV15Adafruit_SH110X>:
	...
   c1c48:	40a5 000b 40a5 000b 8df9 000b d0fd 000b     .@...@..........
   c1c58:	9223 000b 87ff 000b 8801 000b 8833 000b     #...........3...
   c1c68:	880f 000b 8821 000b 8741 000b 87ff 000b     ....!...A.......
   c1c78:	8a2b 000b 941f 000b 884b 000b 8889 000b     +.......K.......
   c1c88:	88c3 000b 8909 000b 8925 000b 89a9 000b     ........%.......
   c1c98:	96c5 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   c1ca8:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   c1cb8:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   c1cc8:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   c1cd8:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   c1ce8:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   c1cf8:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   c1d08:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   c1d18:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   c1d28:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   c1d38:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   c1d48:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   c1d58:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   c1d68:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   c1d78:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   c1d88:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   c1d98:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   c1da8:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   c1db8:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   c1dc8:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   c1dd8:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   c1de8:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   c1df8:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   c1e08:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   c1e18:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   c1e28:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   c1e38:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   c1e48:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   c1e58:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   c1e68:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   c1e78:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   c1e88:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   c1e98:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   c1ea8:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000c1eb8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1ec0:	a095 000b a0f9 000b a26f 000b a123 000b     ........o...#...
   c1ed0:	a099 000b                                   ....

000c1ed4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1edc:	a091 000b a107 000b a093 000b a129 000b     ............)...
   c1eec:	a0b9 000b                                   ....

000c1ef0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1ef8:	a08f 000b a115 000b adc9 000b a12f 000b     ............/...
   c1f08:	a0d9 000b                                   ....

000c1f0c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1f18:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1f28:	0000 0000                                   ....

000c1f2c <_ZTVN5spark13CellularClassE>:
	...
   c1f34:	c76b 000b c761 000b c757 000b c70d 000b     k...a...W.......
   c1f44:	c74b 000b c73f 000b cfd9 000b cfe1 000b     K...?...........
   c1f54:	c733 000b c72b 000b c721 000b c717 000b     3...+...!.......
   c1f64:	d011 000b                                   ....

000c1f68 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1f70:	c7a5 000b c7ab 000b c7e9 000b c7b9 000b     ................
   c1f80:	c7a7 000b                                   ....

000c1f84 <_ZTVN5spark13EthernetClassE>:
	...
   c1f8c:	cd7f 000b cd75 000b cd6b 000b cd61 000b     ....u...k...a...
   c1f9c:	cd55 000b cd49 000b cfd9 000b cfe1 000b     U...I...........
   c1fac:	cd3d 000b cd35 000b cd2b 000b cd21 000b     =...5...+...!...
   c1fbc:	d011 000b                                   ....

000c1fc0 <_ZTV7TwoWire>:
	...
   c1fc8:	cd9d 000b cde7 000b cdbf 000b cd9f 000b     ................
   c1fd8:	cdc7 000b cdcf 000b cdd7 000b cddf 000b     ................

000c1fe8 <_ZTV9IPAddress>:
	...
   c1ff0:	cea9 000b ce99 000b ce9b 000b 7061 0070     ............app.

000c2000 <_ZTVN5spark12NetworkClassE>:
	...
   c2008:	cf99 000b cfa3 000b cfad 000b cfb7 000b     ................
   c2018:	cfc1 000b cfcd 000b cfd9 000b cfe1 000b     ................
   c2028:	cfe9 000b cff5 000b cffd 000b d007 000b     ................
   c2038:	d011 000b                                   ....

000c203c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c203c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c204c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c205c:	6d69 0065                                   ime.

000c2060 <_ZTV11USARTSerial>:
	...
   c2068:	d7f9 000b d865 000b d83d 000b d0fd 000b     ....e...=.......
   c2078:	d80d 000b d829 000b d81b 000b d837 000b     ....).......7...
   c2088:	d7fb 000b d7ff 000b                         ........

000c2090 <_ZTV9USBSerial>:
	...
   c2098:	d8b1 000b d919 000b d8ef 000b d0fd 000b     ................
   c20a8:	d8e1 000b d8b3 000b d8c3 000b d913 000b     ................
   c20b8:	d8d3 000b d8ab 000b                         ........

000c20c0 <_ZSt7nothrow>:
	...

000c20c1 <_ZTSSt19_Sp_make_shared_tag>:
   c20c1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c20d1:	6572 5f64 6174 0067 0000                     red_tag....

000c20dc <_ZTISt19_Sp_make_shared_tag>:
   c20dc:	2190 000c 20c1 000c 6f6e 2074 6e65 756f     .!... ..not enou
   c20ec:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c20fc:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c210c:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c211c:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c212c:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c213c:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c214c:	3000 3231 3433 3635 3837 0039               .0123456789.

000c2158 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c2158:	21f0 000c 2164 000c 2214 000c               .!..d!..."..

000c2164 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c2164:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c2174:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c2184:	0045 0000                                   E...

000c2188 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c2188:	0000 0000 2158 000c dea5 000b deb9 000b     ....X!..........
   c2198:	e04d 000b e04d 000b df23 000b de67 000b     M...M...#...g...
   c21a8:	df0b 000b decd 000b de99 000b               ............

000c21b4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c21b4:	21f0 000c 21c0 000c 2158 000c               .!...!..X!..

000c21c0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c21c0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c21d0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c21e0:	666e 456f 0000 0000                         nfoE....

000c21e8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c21e8:	0000 0000 21b4 000c df4d 000b df61 000b     .....!..M...a...
   c21f8:	e04d 000b e04d 000b df23 000b de67 000b     M...M...#...g...
   c2208:	e021 000b dfad 000b df75 000b               !.......u...

000c2214 <_ZTISt9type_info>:
   c2214:	2190 000c 221c 000c                         .!..."..

000c221c <_ZTSSt9type_info>:
   c221c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c222c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c223c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c224c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c225c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c226c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c227c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c228c:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c229c:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c22a8 <fpi.1>:
   c22a8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c22b8:	0000 0000                                   ....

000c22bc <fpinan.0>:
   c22bc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c22cc:	0000 0000                                   ....

000c22d0 <tinytens>:
   c22d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c22e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c22f0:	6f43 64ac 0628 1168                         Co.d(.h.

000c22f8 <_ctype_>:
   c22f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c2308:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c2318:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c2328:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c2338:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c2348:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c2358:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c2368:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c2378:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c23f8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c2408:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c2418:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c2428:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c2438:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c2448:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c2458:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c2468:	632e 0000                                   .c..

000c246c <_C_numeric_locale>:
   c246c:	1eb5 000c 1166 000c daf8 2003 0043 4f50     ....f...... C.PO
   c247c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c248c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c249c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c24ac:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c24bc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c24cc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c24dc:	0000 0000                                   ....

000c24e0 <__mprec_bigtens>:
   c24e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c24f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c2500:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c2508 <__mprec_tens>:
   c2508:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c2518:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c2528:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c2538:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c2548:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c2558:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c2568:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c2578:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c2588:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c2598:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c25a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c25b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c25c8:	9db4 79d9 7843 44ea                         ...yCx.D

000c25d0 <p05.0>:
   c25d0:	0005 0000 0019 0000 007d 0000               ........}...

000c25dc <link_const_variable_data_end>:
   c25dc:	000b648d 	.word	0x000b648d
   c25e0:	000bc6fd 	.word	0x000bc6fd
   c25e4:	000bc775 	.word	0x000bc775
   c25e8:	000bcd89 	.word	0x000bcd89
   c25ec:	000bcf89 	.word	0x000bcf89
   c25f0:	000bd0e9 	.word	0x000bd0e9
   c25f4:	000bd219 	.word	0x000bd219
   c25f8:	000bd641 	.word	0x000bd641
   c25fc:	000bd7e5 	.word	0x000bd7e5
